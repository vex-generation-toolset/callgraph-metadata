{
    "org.apache.commons.text.lookup.StringLookupFactory#fileStringLookup(Path[]...)": ["org.apache.commons.text.lookup.FileStringLookup#FileStringLookup(Path[]...)"],
    "org.apache.commons.text.TextStringBuilder#asReader()": ["org.apache.commons.text.TextStringBuilder.TextStringBuilderReader#TextStringBuilderReader()"],
    "org.apache.commons.text.StrBuilder#appendSeparator(char)": [
        "org.apache.commons.text.StrBuilder#isNotEmpty()",
        "org.apache.commons.text.StrBuilder#append(char)"
    ],
    "org.apache.commons.text.lookup.FileStringLookup#lookup(String)": [
        "org.apache.commons.text.lookup.AbstractStringLookup.<staticinit>()",
        "org.apache.commons.text.lookup.AbstractPathFencedLookup#getPath(String)"
    ],
    "org.apache.commons.text.StrSubstitutor#replace(StrBuilder)": [
        "org.apache.commons.text.StrBuilder#StrBuilder(int)",
        "org.apache.commons.text.StrBuilder#toString()",
        "org.apache.commons.text.StrBuilder#length()",
        "org.apache.commons.text.StrSubstitutor#substitute(StrBuilder,int,int)",
        "org.apache.commons.text.StrBuilder#append(StrBuilder)"
    ],
    "org.apache.commons.text.matcher.StringMatcherFactory#commaMatcher()": ["org.apache.commons.text.matcher.StringMatcherFactory.<staticinit>()"],
    "org.apache.commons.text.StrBuilder#append(StringBuffer)": [
        "org.apache.commons.text.StrBuilder#ensureCapacity(int)",
        "org.apache.commons.text.StrBuilder#length()",
        "org.apache.commons.text.StrBuilder#appendNull()"
    ],
    "org.apache.commons.text.StrMatcher.TrimMatcher#TrimMatcher()": [
        "org.apache.commons.text.StrMatcher.TrimMatcher.<init>()",
        "org.apache.commons.text.StrMatcher#StrMatcher()"
    ],
    "org.apache.commons.text.TextStringBuilder#insert(int,boolean)": [
        "org.apache.commons.text.TextStringBuilder#appendTrue(int)",
        "org.apache.commons.text.TextStringBuilder#ensureCapacityInternal(int)",
        "org.apache.commons.text.TextStringBuilder.<staticinit>()",
        "org.apache.commons.text.TextStringBuilder#appendFalse(int)",
        "org.apache.commons.text.TextStringBuilder#validateIndex(int)"
    ],
    "org.apache.commons.text.similarity.LongestCommonSubsequence.algorithmB(CharSequence,CharSequence)": [
        "org.apache.commons.text.StrBuilder#charAt(int)",
        "org.apache.commons.text.TextStringBuilder#length()",
        "org.apache.commons.text.StrBuilder#length()",
        "org.apache.commons.text.TextStringBuilder#charAt(int)"
    ],
    "org.apache.commons.text.similarity.LongestCommonSubsequence#longestCommonSubstringLengthArray(CharSequence,CharSequence)": [
        "org.apache.commons.text.TextStringBuilder#length()",
        "org.apache.commons.text.StrBuilder#charAt(int)",
        "org.apache.commons.text.StrBuilder#length()",
        "org.apache.commons.text.TextStringBuilder#charAt(int)"
    ],
    "org.apache.commons.text.TextStringBuilder#build()": ["org.apache.commons.text.TextStringBuilder#toString()"],
    "org.apache.commons.text.lookup.StringLookupFactory.<staticinit>()": [
        "org.apache.commons.text.lookup.StringLookupFactory#StringLookupFactory()",
        "org.apache.commons.text.lookup.FunctionStringLookup.on(Function<String, R>)"
    ],
    "org.apache.commons.text.StringSubstitutor#replaceIn(StringBuffer)": ["org.apache.commons.text.StringSubstitutor#replaceIn(StringBuffer,int,int)"],
    "org.apache.commons.text.TextStringBuilder#TextStringBuilder(String)": [
        "org.apache.commons.text.TextStringBuilder.<staticinit>()",
        "org.apache.commons.text.TextStringBuilder#append(String)",
        "org.apache.commons.text.TextStringBuilder#TextStringBuilder(int)"
    ],
    "org.apache.commons.text.TextStringBuilder#ensureCapacityInternal(int)": ["org.apache.commons.text.TextStringBuilder#resizeBuffer(int)"],
    "org.apache.commons.text.StrBuilder#appendln(StringBuffer,int,int)": [
        "org.apache.commons.text.StrBuilder#append(StringBuffer,int,int)",
        "org.apache.commons.text.StrBuilder#appendNewLine()"
    ],
    "org.apache.commons.text.lookup.StringLookupFactory#systemPropertyStringLookup()": ["org.apache.commons.text.lookup.StringLookupFactory.<staticinit>()"],
    "org.apache.commons.text.numbers.DoubleFormat.PlainDoubleFormat#applyFiniteInternal(ParsedDecimal)": ["org.apache.commons.text.numbers.ParsedDecimal#toPlainString(FormatOptions)"],
    "org.apache.commons.text.similarity.LevenshteinDetailedDistance#LevenshteinDetailedDistance(Integer)": ["org.apache.commons.text.similarity.LevenshteinDetailedDistance.<init>()"],
    "org.apache.commons.text.lookup.ScriptStringLookup.<staticinit>()": ["org.apache.commons.text.lookup.ScriptStringLookup#ScriptStringLookup()"],
    "org.apache.commons.text.StrSubstitutor.<staticinit>()": ["org.apache.commons.text.StrMatcher.stringMatcher(String)"],
    "org.apache.commons.text.StrBuilder#append(Object)": [
        "org.apache.commons.text.lookup.ResourceBundleStringLookup#toString()",
        "org.apache.commons.text.matcher.AbstractStringMatcher.CharMatcher#toString()",
        "org.apache.commons.text.StrLookup.MapStrLookup#toString()",
        "org.apache.commons.text.lookup.InterpolatorStringLookup#toString()",
        "org.apache.commons.text.matcher.AbstractStringMatcher.CharArrayMatcher#toString()",
        "org.apache.commons.text.StrBuilder#append(CharSequence)",
        "org.apache.commons.text.StrBuilder#append(float)",
        "org.apache.commons.text.StrLookup.ResourceBundleLookup#toString()",
        "org.apache.commons.text.matcher.AbstractStringMatcher.CharSetMatcher#toString()",
        "org.apache.commons.text.lookup.FunctionStringLookup#toString()",
        "org.apache.commons.text.StrMatcher.StringMatcher#toString()",
        "org.apache.commons.text.StrBuilder#appendNull()"
    ],
    "org.apache.commons.text.StrTokenizer.getTSVInstance()": ["org.apache.commons.text.StrTokenizer.getTSVClone()"],
    "org.apache.commons.text.StrBuilder#appendln(float)": [
        "org.apache.commons.text.StrBuilder#appendNewLine()",
        "org.apache.commons.text.StrBuilder#append(float)"
    ],
    "org.apache.commons.text.StrBuilder#StrBuilder()": [
        "org.apache.commons.text.StrBuilder#StrBuilder(int)",
        "org.apache.commons.text.StrBuilder.<staticinit>()"
    ],
    "org.apache.commons.text.TextStringBuilder#contains(String)": ["org.apache.commons.text.TextStringBuilder#indexOf(String,int)"],
    "org.apache.commons.text.StringSubstitutor#setVariablePrefix(String)": [
        "org.apache.commons.text.matcher.StringMatcherFactory#stringMatcher(String)",
        "org.apache.commons.text.matcher.StringMatcherFactory.<staticinit>()",
        "org.apache.commons.text.StringSubstitutor#setVariablePrefixMatcher(StringMatcher)"
    ],
    "org.apache.commons.text.numbers.DoubleFormat.MixedDoubleFormat#applyFiniteInternal(ParsedDecimal)": [
        "org.apache.commons.text.numbers.ParsedDecimal#toPlainString(FormatOptions)",
        "org.apache.commons.text.numbers.ParsedDecimal#getScientificExponent()",
        "org.apache.commons.text.numbers.ParsedDecimal#toScientificString(FormatOptions)"
    ],
    "org.apache.commons.text.StringTokenizer#StringTokenizer(char[],char)": [
        "org.apache.commons.text.StringTokenizer#setDelimiterChar(char)",
        "org.apache.commons.text.StringTokenizer#StringTokenizer(char[])"
    ],
    "org.apache.commons.text.TextStringBuilder#appendln(StringBuilder)": [
        "org.apache.commons.text.TextStringBuilder#append(StringBuilder)",
        "org.apache.commons.text.TextStringBuilder#appendNewLine()"
    ],
    "org.apache.commons.text.CaseUtils#CaseUtils()": ["org.apache.commons.text.CaseUtils.<init>()"],
    "org.apache.commons.text.StrBuilder#appendAll(T[]...)": ["org.apache.commons.text.StrBuilder#append(Object)"],
    "org.apache.commons.text.StrTokenizer#StrTokenizer(char[],String)": [
        "org.apache.commons.text.StrTokenizer#StrTokenizer(char[])",
        "org.apache.commons.text.StrTokenizer#setDelimiterString(String)"
    ],
    "org.apache.commons.text.numbers.ParsedDecimal#toEngineeringString(FormatOptions)": [
        "org.apache.commons.text.numbers.ParsedDecimal#getScientificExponent()",
        "org.apache.commons.text.numbers.ParsedDecimal#toScientificString(int,FormatOptions)",
        "org.apache.commons.text.numbers.ParsedDecimal.<staticinit>()"
    ],
    "org.apache.commons.text.StrMatcher.doubleQuoteMatcher()": ["org.apache.commons.text.StrMatcher.<staticinit>()"],
    "org.apache.commons.text.similarity.RegexTokenizer#apply(CharSequence)": ["org.apache.commons.text.similarity.RegexTokenizer.<staticinit>()"],
    "org.apache.commons.text.lookup.InterpolatorStringLookup#lookup(String)": [
        "org.apache.commons.text.lookup.FunctionStringLookup#lookup(String)",
        "org.apache.commons.text.lookup.FileStringLookup#lookup(String)",
        "org.apache.commons.text.lookup.JavaPlatformStringLookup#lookup(String)",
        "org.apache.commons.text.StrLookup.MapStrLookup#lookup(String)",
        "org.apache.commons.text.lookup.ConstantStringLookup#lookup(String)",
        "org.apache.commons.text.lookup.XmlStringLookup#lookup(String)",
        "org.apache.commons.text.lookup.ScriptStringLookup#lookup(String)",
        "org.apache.commons.text.lookup.PropertiesStringLookup#lookup(String)",
        "org.apache.commons.text.lookup.InterpolatorStringLookup.<staticinit>()",
        "org.apache.commons.text.lookup.BiFunctionStringLookup#lookup(String)",
        "org.apache.commons.text.lookup.InterpolatorStringLookup#lookup(String)",
        "org.apache.commons.text.lookup.LocalHostStringLookup#lookup(String)",
        "org.apache.commons.text.lookup.DnsStringLookup#lookup(String)",
        "org.apache.commons.text.StrLookup.SystemPropertiesStrLookup#lookup(String)",
        "org.apache.commons.text.StrLookup.ResourceBundleLookup#lookup(String)",
        "org.apache.commons.text.lookup.DateStringLookup#lookup(String)",
        "org.apache.commons.text.lookup.XmlDecoderStringLookup#lookup(String)",
        "org.apache.commons.text.lookup.XmlEncoderStringLookup#lookup(String)",
        "org.apache.commons.text.lookup.UrlStringLookup#lookup(String)",
        "org.apache.commons.text.lookup.ResourceBundleStringLookup#lookup(String)",
        "org.apache.commons.text.lookup.UrlDecoderStringLookup#lookup(String)",
        "org.apache.commons.text.lookup.StringLookupFactory.toKey(String)",
        "org.apache.commons.text.lookup.UrlEncoderStringLookup#lookup(String)"
    ],
    "org.apache.commons.text.numbers.DoubleFormat.Builder#plainFormatMinDecimalExponent(int)": ["org.apache.commons.text.numbers.DoubleFormat.<staticinit>()"],
    "org.apache.commons.text.StrSubstitutor.replace(Object,Properties)": [
        "org.apache.commons.text.lookup.ResourceBundleStringLookup#toString()",
        "org.apache.commons.text.StrSubstitutor.replace(Object,Map<String, V>)",
        "org.apache.commons.text.matcher.AbstractStringMatcher.CharMatcher#toString()",
        "org.apache.commons.text.StrLookup.MapStrLookup#toString()",
        "org.apache.commons.text.lookup.InterpolatorStringLookup#toString()",
        "org.apache.commons.text.matcher.AbstractStringMatcher.CharArrayMatcher#toString()",
        "org.apache.commons.text.StrLookup.ResourceBundleLookup#toString()",
        "org.apache.commons.text.matcher.AbstractStringMatcher.CharSetMatcher#toString()",
        "org.apache.commons.text.lookup.FunctionStringLookup#toString()",
        "org.apache.commons.text.StrMatcher.StringMatcher#toString()"
    ],
    "org.apache.commons.text.TextStringBuilder#insert(int,int)": ["org.apache.commons.text.TextStringBuilder#insert(int,char[])"],
    "org.apache.commons.text.RandomStringGenerator.Builder#build()": ["org.apache.commons.text.RandomStringGenerator.Builder#get()"],
    "org.apache.commons.text.StrBuilder#deleteAll(StrMatcher)": ["org.apache.commons.text.StrBuilder#replace(StrMatcher,String,int,int,int)"],
    "org.apache.commons.text.StrSubstitutor#replace(StringBuffer)": [
        "org.apache.commons.text.StrBuilder#StrBuilder(int)",
        "org.apache.commons.text.StrBuilder#length()",
        "org.apache.commons.text.StrBuilder#toString()",
        "org.apache.commons.text.StrSubstitutor#substitute(StrBuilder,int,int)",
        "org.apache.commons.text.StrBuilder#append(StringBuffer)"
    ],
    "org.apache.commons.text.StrBuilder#delete(int,int)": [
        "org.apache.commons.text.StrBuilder#deleteImpl(int,int,int)",
        "org.apache.commons.text.StrBuilder#validateRange(int,int)"
    ],
    "org.apache.commons.text.StringEscapeUtils.escapeHtml3(String)": [
        "org.apache.commons.text.StringEscapeUtils.<staticinit>()",
        "org.apache.commons.text.translate.CharSequenceTranslator#translate(CharSequence)"
    ],
    "org.apache.commons.text.TextStringBuilder.TextStringBuilderReader#skip(long)": ["org.apache.commons.text.TextStringBuilder#size()"],
    "org.apache.commons.text.StringTokenizer.getCSVClone()": [
        "org.apache.commons.text.StringTokenizer#clone()",
        "org.apache.commons.text.StringTokenizer.<staticinit>()"
    ],
    "org.apache.commons.text.similarity.FuzzyScore#FuzzyScore(Locale)": ["org.apache.commons.text.similarity.FuzzyScore.<init>()"],
    "org.apache.commons.text.StrMatcher.charSetMatcher(String)": [
        "org.apache.commons.text.StrMatcher.CharMatcher#CharMatcher(char)",
        "org.apache.commons.text.StrMatcher.<staticinit>()",
        "org.apache.commons.text.StrMatcher.CharSetMatcher#CharSetMatcher(char[])"
    ],
    "org.apache.commons.text.lookup.XmlStringLookup#XmlStringLookup(Map<String, Boolean>,Path[]...)": [
        "org.apache.commons.text.lookup.AbstractPathFencedLookup#AbstractPathFencedLookup(Path[]...)",
        "org.apache.commons.text.lookup.XmlStringLookup.<init>()"
    ],
    "org.apache.commons.text.similarity.LevenshteinDistance#LevenshteinDistance()": ["org.apache.commons.text.similarity.LevenshteinDistance#LevenshteinDistance(Integer)"],
    "org.apache.commons.text.StrTokenizer.getCSVInstance(String)": [
        "org.apache.commons.text.StrTokenizer#reset(String)",
        "org.apache.commons.text.StrTokenizer.getCSVClone()"
    ],
    "org.apache.commons.text.StrBuilder#replace(StrMatcher,String,int,int,int)": [
        "org.apache.commons.text.StrBuilder#replaceImpl(StrMatcher,String,int,int,int)",
        "org.apache.commons.text.StrBuilder#validateRange(int,int)"
    ],
    "org.apache.commons.text.TextStringBuilder#appendSeparator(String,String)": [
        "org.apache.commons.text.TextStringBuilder#append(String)",
        "org.apache.commons.text.TextStringBuilder#isEmpty()"
    ],
    "org.apache.commons.text.StrBuilder#append(StrBuilder)": [
        "org.apache.commons.text.StrBuilder#ensureCapacity(int)",
        "org.apache.commons.text.StrBuilder#length()",
        "org.apache.commons.text.StrBuilder#appendNull()"
    ],
    "org.apache.commons.text.diff.StringsComparator#getMiddleSnake(int,int,int,int)": ["org.apache.commons.text.diff.StringsComparator#buildSnake(int,int,int,int)"],
    "org.apache.commons.text.TextStringBuilder#append(char[])": [
        "org.apache.commons.text.TextStringBuilder#ensureCapacityInternal(int)",
        "org.apache.commons.text.TextStringBuilder#length()",
        "org.apache.commons.text.TextStringBuilder#appendNull()"
    ],
    "org.apache.commons.text.StrBuilder#asReader()": ["org.apache.commons.text.StrBuilder.StrBuilderReader#StrBuilderReader()"],
    "org.apache.commons.text.io.StringSubstitutorReader#bufferOrDrainOnEos(int,char[],int,int)": [
        "org.apache.commons.text.io.StringSubstitutorReader#drainOnEos(int,char[],int,int)",
        "org.apache.commons.text.io.StringSubstitutorReader#buffer(int)"
    ],
    "org.apache.commons.text.StrBuilder#lastIndexOf(String)": ["org.apache.commons.text.StrBuilder#lastIndexOf(String,int)"],
    "org.apache.commons.text.TextStringBuilder#replaceImpl(StringMatcher,String,int,int,int)": [
        "org.apache.commons.text.TextStringBuilder#replaceImpl(int,int,int,String,int)",
        "org.apache.commons.text.matcher.AbstractStringMatcher.CharSetMatcher#isMatch(char[],int,int,int)",
        "org.apache.commons.text.matcher.AbstractStringMatcher.CharMatcher#isMatch(char[],int,int,int)",
        "org.apache.commons.text.matcher.AbstractStringMatcher.AndStringMatcher#isMatch(char[],int,int,int)",
        "org.apache.commons.text.matcher.AbstractStringMatcher.TrimMatcher#isMatch(char[],int,int,int)",
        "org.apache.commons.text.matcher.AbstractStringMatcher.CharArrayMatcher#isMatch(char[],int,int,int)",
        "org.apache.commons.text.matcher.AbstractStringMatcher.NoneMatcher#isMatch(char[],int,int,int)"
    ],
    "org.apache.commons.text.TextStringBuilder#append(CharBuffer,int,int)": [
        "org.apache.commons.text.TextStringBuilder#length()",
        "org.apache.commons.text.TextStringBuilder#appendNull()",
        "org.apache.commons.text.TextStringBuilder#ensureCapacityInternal(int)",
        "org.apache.commons.text.TextStringBuilder#append(char[],int,int)"
    ],
    "org.apache.commons.text.similarity.LevenshteinDetailedDistance.unlimitedCompare(CharSequence,CharSequence)": [
        "org.apache.commons.text.TextStringBuilder#length()",
        "org.apache.commons.text.StrBuilder#charAt(int)",
        "org.apache.commons.text.similarity.LevenshteinResults#LevenshteinResults(Integer,Integer,Integer,Integer)",
        "org.apache.commons.text.StrBuilder#length()",
        "org.apache.commons.text.TextStringBuilder#charAt(int)",
        "org.apache.commons.text.similarity.LevenshteinDetailedDistance.findDetailedResults(CharSequence,CharSequence,int[][],boolean)"
    ],
    "org.apache.commons.text.numbers.DoubleFormat.Builder#plainFormatMaxDecimalExponent(int)": ["org.apache.commons.text.numbers.DoubleFormat.<staticinit>()"],
    "org.apache.commons.text.similarity.IntersectionSimilarity.TinyBag#add(T)": ["org.apache.commons.text.similarity.IntersectionSimilarity.BagCount#BagCount()"],
    "org.apache.commons.text.matcher.StringMatcherFactory#doubleQuoteMatcher()": ["org.apache.commons.text.matcher.StringMatcherFactory.<staticinit>()"],
    "org.apache.commons.text.StrTokenizer#size()": ["org.apache.commons.text.StrTokenizer#checkTokenized()"],
    "org.apache.commons.text.StringSubstitutor#replace(String)": [
        "org.apache.commons.text.TextStringBuilder#TextStringBuilder(String)",
        "org.apache.commons.text.TextStringBuilder#toString()",
        "org.apache.commons.text.StringSubstitutor#substitute(TextStringBuilder,int,int)"
    ],
    "org.apache.commons.text.StrSubstitutor#substitute(StrBuilder,int,int)": ["org.apache.commons.text.StrSubstitutor#substitute(StrBuilder,int,int,List<String>)"],
    "org.apache.commons.text.TextStringBuilder#append(int)": ["org.apache.commons.text.TextStringBuilder#append(char)"],
    "org.apache.commons.text.StrBuilder#appendWithSeparators(Iterable<?>,String)": ["org.apache.commons.text.StrBuilder#appendWithSeparators(Object[],String)"],
    "org.apache.commons.text.TextStringBuilder#replaceAll(String,String)": [
        "org.apache.commons.text.TextStringBuilder#indexOf(String,int)",
        "org.apache.commons.text.TextStringBuilder#replaceImpl(int,int,int,String,int)"
    ],
    "org.apache.commons.text.lookup.UrlDecoderStringLookup#lookup(String)": ["org.apache.commons.text.lookup.UrlDecoderStringLookup#decode(String,String)"],
    "org.apache.commons.text.translate.AggregateTranslator#AggregateTranslator(CharSequenceTranslator[]...)": [
        "org.apache.commons.text.translate.AggregateTranslator.<init>()",
        "org.apache.commons.text.translate.CharSequenceTranslator.<init>()"
    ],
    "org.apache.commons.text.TextStringBuilder#indexOf(StringMatcher)": ["org.apache.commons.text.TextStringBuilder#indexOf(StringMatcher,int)"],
    "org.apache.commons.text.StrTokenizer#StrTokenizer()": ["org.apache.commons.text.StrTokenizer.<init>()"],
    "org.apache.commons.text.WordUtils.capitalize(String)": ["org.apache.commons.text.WordUtils.capitalize(String,char[]...)"],
    "org.apache.commons.text.AlphabetConverter.createConverter(Integer[],Integer[],Integer[])": [
        "org.apache.commons.text.AlphabetConverter#AlphabetConverter(Map<Integer, String>,Map<String, String>,int)",
        "org.apache.commons.text.AlphabetConverter.codePointToString(int)",
        "org.apache.commons.text.AlphabetConverter#addSingleEncoding(int,String,Collection<Integer>,Iterator<Integer>,Map<Integer, String>)"
    ],
    "org.apache.commons.text.StrBuilder.StrBuilderWriter#write(int)": ["org.apache.commons.text.StrBuilder#append(char)"],
    "org.apache.commons.text.TextStringBuilder#drainChars(int,int,char[],int)": [
        "org.apache.commons.text.TextStringBuilder#getChars(int,int,char[],int)",
        "org.apache.commons.text.TextStringBuilder#isEmpty()",
        "org.apache.commons.text.TextStringBuilder#delete(int,int)"
    ],
    "org.apache.commons.text.similarity.LevenshteinDetailedDistance.limitedCompare(CharSequence,CharSequence,int)": [
        "org.apache.commons.text.TextStringBuilder#length()",
        "org.apache.commons.text.StrBuilder#charAt(int)",
        "org.apache.commons.text.StrBuilder#length()",
        "org.apache.commons.text.similarity.LevenshteinResults#LevenshteinResults(Integer,Integer,Integer,Integer)",
        "org.apache.commons.text.TextStringBuilder#charAt(int)",
        "org.apache.commons.text.similarity.LevenshteinDetailedDistance.findDetailedResults(CharSequence,CharSequence,int[][],boolean)"
    ],
    "org.apache.commons.text.StrSubstitutor#replace(StrBuilder,int,int)": [
        "org.apache.commons.text.StrBuilder#StrBuilder(int)",
        "org.apache.commons.text.StrBuilder#toString()",
        "org.apache.commons.text.StrSubstitutor#substitute(StrBuilder,int,int)",
        "org.apache.commons.text.StrBuilder#append(StrBuilder,int,int)"
    ],
    "org.apache.commons.text.lookup.ConstantStringLookup#lookup(String)": [
        "org.apache.commons.text.lookup.ConstantStringLookup#resolveField(String,String)",
        "org.apache.commons.text.lookup.ConstantStringLookup.<staticinit>()"
    ],
    "org.apache.commons.text.translate.UnicodeEscaper.above(int)": ["org.apache.commons.text.translate.UnicodeEscaper.outsideOf(int,int)"],
    "org.apache.commons.text.TextStringBuilder#deleteAll(StringMatcher)": ["org.apache.commons.text.TextStringBuilder#replace(StringMatcher,String,int,int,int)"],
    "org.apache.commons.text.TextStringBuilder#substring(int)": ["org.apache.commons.text.TextStringBuilder#substring(int,int)"],
    "org.apache.commons.text.numbers.DoubleFormat.PlainDoubleFormat#PlainDoubleFormat(Builder)": [
        "org.apache.commons.text.numbers.DoubleFormat.AbstractDoubleFormat#AbstractDoubleFormat(Builder)",
        "org.apache.commons.text.numbers.DoubleFormat.PlainDoubleFormat.<init>()"
    ],
    "org.apache.commons.text.diff.StringsComparator#StringsComparator(String,String)": ["org.apache.commons.text.diff.StringsComparator.<init>()"],
    "org.apache.commons.text.translate.NumericEntityUnescaper#translate(CharSequence,int,Writer)": [
        "org.apache.commons.text.TextStringBuilder#length()",
        "org.apache.commons.text.StrBuilder.StrBuilderWriter#write(int)",
        "org.apache.commons.text.TextStringBuilder.TextStringBuilderWriter#write(int)",
        "org.apache.commons.text.TextStringBuilder#subSequence(int,int)",
        "org.apache.commons.text.StrBuilder#charAt(int)",
        "org.apache.commons.text.StrBuilder#length()",
        "org.apache.commons.text.TextStringBuilder#charAt(int)",
        "org.apache.commons.text.translate.NumericEntityUnescaper#isSet(OPTION)",
        "org.apache.commons.text.StrBuilder#subSequence(int,int)",
        "org.apache.commons.text.translate.NumericEntityUnescaper.OPTION.<staticinit>()"
    ],
    "org.apache.commons.text.StringEscapeUtils.escapeEcmaScript(String)": [
        "org.apache.commons.text.StringEscapeUtils.<staticinit>()",
        "org.apache.commons.text.translate.CharSequenceTranslator#translate(CharSequence)"
    ],
    "org.apache.commons.text.StrTokenizer#previousToken()": ["org.apache.commons.text.StrTokenizer#hasPrevious()"],
    "org.apache.commons.text.StrBuilder#appendSeparator(char,int)": ["org.apache.commons.text.StrBuilder#append(char)"],
    "org.apache.commons.text.StrTokenizer#StrTokenizer(String,StrMatcher)": [
        "org.apache.commons.text.StrTokenizer#setDelimiterMatcher(StrMatcher)",
        "org.apache.commons.text.StrTokenizer#StrTokenizer(String)"
    ],
    "org.apache.commons.text.StringSubstitutor#resolveVariable(String,TextStringBuilder,int,int)": [
        "org.apache.commons.text.lookup.FunctionStringLookup#lookup(String)",
        "org.apache.commons.text.StringSubstitutor#getStringLookup()",
        "org.apache.commons.text.lookup.FileStringLookup#lookup(String)",
        "org.apache.commons.text.lookup.JavaPlatformStringLookup#lookup(String)",
        "org.apache.commons.text.StrLookup.MapStrLookup#lookup(String)",
        "org.apache.commons.text.lookup.ConstantStringLookup#lookup(String)",
        "org.apache.commons.text.lookup.XmlStringLookup#lookup(String)",
        "org.apache.commons.text.lookup.ScriptStringLookup#lookup(String)",
        "org.apache.commons.text.lookup.PropertiesStringLookup#lookup(String)",
        "org.apache.commons.text.lookup.BiFunctionStringLookup#lookup(String)",
        "org.apache.commons.text.lookup.InterpolatorStringLookup#lookup(String)",
        "org.apache.commons.text.lookup.LocalHostStringLookup#lookup(String)",
        "org.apache.commons.text.lookup.DnsStringLookup#lookup(String)",
        "org.apache.commons.text.StrLookup.SystemPropertiesStrLookup#lookup(String)",
        "org.apache.commons.text.StrLookup.ResourceBundleLookup#lookup(String)",
        "org.apache.commons.text.lookup.DateStringLookup#lookup(String)",
        "org.apache.commons.text.lookup.XmlDecoderStringLookup#lookup(String)",
        "org.apache.commons.text.lookup.XmlEncoderStringLookup#lookup(String)",
        "org.apache.commons.text.lookup.UrlStringLookup#lookup(String)",
        "org.apache.commons.text.lookup.ResourceBundleStringLookup#lookup(String)",
        "org.apache.commons.text.lookup.UrlDecoderStringLookup#lookup(String)",
        "org.apache.commons.text.lookup.UrlEncoderStringLookup#lookup(String)"
    ],
    "org.apache.commons.text.StrBuilder#appendTo(Appendable)": [
        "org.apache.commons.text.StrBuilder.StrBuilderWriter#write(char[],int,int)",
        "org.apache.commons.text.TextStringBuilder.TextStringBuilderWriter#write(char[],int,int)"
    ],
    "org.apache.commons.text.StrBuilder#insert(int,float)": ["org.apache.commons.text.StrBuilder#insert(int,char)"],
    "org.apache.commons.text.TextStringBuilder#appendWithSeparators(Object[],String)": [
        "org.apache.commons.text.TextStringBuilder#append(String)",
        "org.apache.commons.text.TextStringBuilder#append(Object)"
    ],
    "org.apache.commons.text.io.StringSubstitutorReader.<init>()": ["org.apache.commons.text.TextStringBuilder#TextStringBuilder()"],
    "org.apache.commons.text.StrBuilder#appendln(StrBuilder,int,int)": [
        "org.apache.commons.text.StrBuilder#appendNewLine()",
        "org.apache.commons.text.StrBuilder#append(StrBuilder,int,int)"
    ],
    "org.apache.commons.text.StringSubstitutor#StringSubstitutor(Map<String, V>,String,String)": [
        "org.apache.commons.text.lookup.StringLookupFactory#mapStringLookup(Map<String, V>)",
        "org.apache.commons.text.lookup.StringLookupFactory.<staticinit>()",
        "org.apache.commons.text.StringSubstitutor.<staticinit>()",
        "org.apache.commons.text.StringSubstitutor#StringSubstitutor(StringLookup,String,String,char)"
    ],
    "org.apache.commons.text.StringEscapeUtils.<staticinit>()": [
        "org.apache.commons.text.translate.OctalUnescaper.<init>()",
        "org.apache.commons.text.translate.NumericEntityEscaper.between(int,int)",
        "org.apache.commons.text.translate.EntityArrays.<staticinit>()",
        "org.apache.commons.text.translate.UnicodeUnpairedSurrogateRemover.<init>()",
        "org.apache.commons.text.translate.CsvTranslators.CsvUnescaper.<init>()",
        "org.apache.commons.text.translate.CsvTranslators.CsvEscaper.<init>()",
        "org.apache.commons.text.translate.NumericEntityUnescaper.<init>()",
        "org.apache.commons.text.StringEscapeUtils.XsiUnescaper.<init>()",
        "org.apache.commons.text.translate.JavaUnicodeEscaper.outsideOf(int,int)",
        "org.apache.commons.text.translate.LookupTranslator#LookupTranslator(Map<CharSequence, CharSequence>)",
        "org.apache.commons.text.translate.UnicodeUnescaper.<init>()"
    ],
    "org.apache.commons.text.numbers.ParsedDecimal.digitValue(char)": ["org.apache.commons.text.numbers.ParsedDecimal.<staticinit>()"],
    "org.apache.commons.text.FormattableUtils.append(CharSequence,Formatter,int,int,int,char,CharSequence)": [
        "org.apache.commons.text.TextStringBuilder#length()",
        "org.apache.commons.text.StrBuilder#length()",
        "org.apache.commons.text.StrBuilder#toString()",
        "org.apache.commons.text.TextStringBuilder#toString()"
    ],
    "org.apache.commons.text.numbers.ParsedDecimal#shouldRoundUp(int)": ["org.apache.commons.text.numbers.ParsedDecimal.<staticinit>()"],
    "org.apache.commons.text.matcher.StringMatcherFactory#spaceMatcher()": ["org.apache.commons.text.matcher.StringMatcherFactory.<staticinit>()"],
    "org.apache.commons.text.StringTokenizer#readWithQuotes(char[],int,int,TextStringBuilder,List<String>,int,int)": [
        "org.apache.commons.text.TextStringBuilder#clear()",
        "org.apache.commons.text.matcher.AbstractStringMatcher.TrimMatcher#isMatch(char[],int,int,int)",
        "org.apache.commons.text.StringTokenizer#isQuote(char[],int,int,int,int)",
        "org.apache.commons.text.StringTokenizer#getIgnoredMatcher()",
        "org.apache.commons.text.TextStringBuilder#append(char)",
        "org.apache.commons.text.TextStringBuilder#substring(int,int)",
        "org.apache.commons.text.matcher.AbstractStringMatcher.NoneMatcher#isMatch(char[],int,int,int)",
        "org.apache.commons.text.TextStringBuilder#size()",
        "org.apache.commons.text.matcher.AbstractStringMatcher.CharSetMatcher#isMatch(char[],int,int,int)",
        "org.apache.commons.text.matcher.AbstractStringMatcher.CharMatcher#isMatch(char[],int,int,int)",
        "org.apache.commons.text.matcher.AbstractStringMatcher.AndStringMatcher#isMatch(char[],int,int,int)",
        "org.apache.commons.text.TextStringBuilder#append(char[],int,int)",
        "org.apache.commons.text.StringTokenizer#getTrimmerMatcher()",
        "org.apache.commons.text.StringTokenizer#getDelimiterMatcher()",
        "org.apache.commons.text.StringTokenizer#addToken(List<String>,String)",
        "org.apache.commons.text.matcher.AbstractStringMatcher.CharArrayMatcher#isMatch(char[],int,int,int)"
    ],
    "org.apache.commons.text.StringEscapeUtils.unescapeJava(String)": [
        "org.apache.commons.text.StringEscapeUtils.<staticinit>()",
        "org.apache.commons.text.translate.CharSequenceTranslator#translate(CharSequence)"
    ],
    "org.apache.commons.text.lookup.StringLookupFactory#xmlDecoderStringLookup()": ["org.apache.commons.text.lookup.XmlDecoderStringLookup.<staticinit>()"],
    "org.apache.commons.text.StrBuilder#subSequence(int,int)": ["org.apache.commons.text.StrBuilder#substring(int,int)"],
    "org.apache.commons.text.lookup.StringLookupFactory#base64DecoderStringLookup()": ["org.apache.commons.text.lookup.StringLookupFactory.<staticinit>()"],
    "org.apache.commons.text.TextStringBuilder#replace(StringMatcher,String,int,int,int)": [
        "org.apache.commons.text.TextStringBuilder#replaceImpl(StringMatcher,String,int,int,int)",
        "org.apache.commons.text.TextStringBuilder#validateRange(int,int)"
    ],
    "org.apache.commons.text.StrBuilder.StrBuilderWriter#write(char[],int,int)": ["org.apache.commons.text.StrBuilder#append(char[],int,int)"],
    "org.apache.commons.text.StringSubstitutor#StringSubstitutor()": [
        "org.apache.commons.text.StringSubstitutor.<staticinit>()",
        "org.apache.commons.text.StringSubstitutor#StringSubstitutor(StringLookup,StringMatcher,StringMatcher,char)"
    ],
    "org.apache.commons.text.numbers.ParsedDecimal#roundUp(int)": [
        "org.apache.commons.text.numbers.ParsedDecimal#truncate(int)",
        "org.apache.commons.text.numbers.ParsedDecimal.<staticinit>()",
        "org.apache.commons.text.numbers.ParsedDecimal#setSingleDigitValue(int,int)"
    ],
    "org.apache.commons.text.StringTokenizer.getTSVInstance(char[])": [
        "org.apache.commons.text.StringTokenizer.getTSVClone()",
        "org.apache.commons.text.StringTokenizer#reset(char[])"
    ],
    "org.apache.commons.text.TextStringBuilder#indexOf(StringMatcher,int)": [
        "org.apache.commons.text.matcher.AbstractStringMatcher.CharSetMatcher#isMatch(char[],int,int,int)",
        "org.apache.commons.text.matcher.AbstractStringMatcher.CharMatcher#isMatch(char[],int,int,int)",
        "org.apache.commons.text.matcher.AbstractStringMatcher.AndStringMatcher#isMatch(char[],int,int,int)",
        "org.apache.commons.text.matcher.AbstractStringMatcher.TrimMatcher#isMatch(char[],int,int,int)",
        "org.apache.commons.text.matcher.AbstractStringMatcher.CharArrayMatcher#isMatch(char[],int,int,int)",
        "org.apache.commons.text.matcher.AbstractStringMatcher.NoneMatcher#isMatch(char[],int,int,int)"
    ],
    "org.apache.commons.text.similarity.JaccardSimilarity#apply(CharSequence,CharSequence)": ["org.apache.commons.text.similarity.JaccardSimilarity#calculateJaccardSimilarity(CharSequence,CharSequence)"],
    "org.apache.commons.text.StringTokenizer#reset(char[])": ["org.apache.commons.text.StringTokenizer#reset()"],
    "org.apache.commons.text.StringTokenizer#StringTokenizer(char[],StringMatcher)": [
        "org.apache.commons.text.StringTokenizer#setDelimiterMatcher(StringMatcher)",
        "org.apache.commons.text.StringTokenizer#StringTokenizer(char[])"
    ],
    "org.apache.commons.text.io.StringSubstitutorReader#read(char[],int,int)": [
        "org.apache.commons.text.matcher.AbstractStringMatcher.CharMatcher#size()",
        "org.apache.commons.text.TextStringBuilder#length()",
        "org.apache.commons.text.io.StringSubstitutorReader#isBufferMatchAt(StringMatcher,int)",
        "org.apache.commons.text.StringSubstitutor#replaceIn(TextStringBuilder)",
        "org.apache.commons.text.StringSubstitutor#getVariableSuffixMatcher()",
        "org.apache.commons.text.matcher.AbstractStringMatcher.AndStringMatcher#size()",
        "org.apache.commons.text.TextStringBuilder#isEmpty()",
        "org.apache.commons.text.io.StringSubstitutorReader#readCount(int,int)",
        "org.apache.commons.text.io.StringSubstitutorReader.<staticinit>()",
        "org.apache.commons.text.matcher.AbstractStringMatcher.CharSetMatcher#size()",
        "org.apache.commons.text.TextStringBuilder#size()",
        "org.apache.commons.text.matcher.AbstractStringMatcher.TrimMatcher#size()",
        "org.apache.commons.text.io.StringSubstitutorReader#buffer(int)",
        "org.apache.commons.text.StringSubstitutor#replaceIn(TextStringBuilder,int,int)",
        "org.apache.commons.text.matcher.AbstractStringMatcher.CharArrayMatcher#size()",
        "org.apache.commons.text.io.StringSubstitutorReader#drain(char[],int,int)",
        "org.apache.commons.text.io.StringSubstitutorReader#isDraining()",
        "org.apache.commons.text.matcher.StringMatcher#size()",
        "org.apache.commons.text.matcher.AbstractStringMatcher.NoneMatcher#size()",
        "org.apache.commons.text.io.StringSubstitutorReader#bufferOrDrainOnEos(int,char[],int,int)",
        "org.apache.commons.text.StringSubstitutor#getVariablePrefixMatcher()"
    ],
    "org.apache.commons.text.StrSubstitutor#setVariableSuffix(String)": [
        "org.apache.commons.text.StrSubstitutor#setVariableSuffixMatcher(StrMatcher)",
        "org.apache.commons.text.StrMatcher.stringMatcher(String)"
    ],
    "org.apache.commons.text.StrBuilder#getChars(char[])": ["org.apache.commons.text.StrBuilder#length()"],
    "org.apache.commons.text.TextStringBuilder#setLength(int)": ["org.apache.commons.text.TextStringBuilder#ensureCapacityInternal(int)"],
    "org.apache.commons.text.StrSubstitutor#replace(char[])": [
        "org.apache.commons.text.StrBuilder#StrBuilder(int)",
        "org.apache.commons.text.StrBuilder#toString()",
        "org.apache.commons.text.StrSubstitutor#substitute(StrBuilder,int,int)",
        "org.apache.commons.text.StrBuilder#append(char[])"
    ],
    "org.apache.commons.text.StringSubstitutor#replace(char[],int,int)": [
        "org.apache.commons.text.StringSubstitutor#substitute(TextStringBuilder,int,int)",
        "org.apache.commons.text.TextStringBuilder#TextStringBuilder(int)",
        "org.apache.commons.text.TextStringBuilder#toString()",
        "org.apache.commons.text.TextStringBuilder#append(char[],int,int)"
    ],
    "org.apache.commons.text.StringSubstitutor#replace(StringBuffer,int,int)": [
        "org.apache.commons.text.TextStringBuilder#append(StringBuffer,int,int)",
        "org.apache.commons.text.StringSubstitutor#substitute(TextStringBuilder,int,int)",
        "org.apache.commons.text.TextStringBuilder#TextStringBuilder(int)",
        "org.apache.commons.text.TextStringBuilder#toString()"
    ],
    "org.apache.commons.text.StrBuilder#appendln(Object)": [
        "org.apache.commons.text.StrBuilder#appendNewLine()",
        "org.apache.commons.text.StrBuilder#append(Object)"
    ],
    "org.apache.commons.text.TextStringBuilder#append(double)": ["org.apache.commons.text.TextStringBuilder#append(char)"],
    "org.apache.commons.text.matcher.AbstractStringMatcher.AndStringMatcher#isMatch(CharSequence,int,int,int)": [
        "org.apache.commons.text.matcher.AbstractStringMatcher.CharSetMatcher#isMatch(CharSequence,int,int,int)",
        "org.apache.commons.text.matcher.AbstractStringMatcher.CharMatcher#isMatch(CharSequence,int,int,int)",
        "org.apache.commons.text.matcher.AbstractStringMatcher.NoneMatcher#isMatch(CharSequence,int,int,int)",
        "org.apache.commons.text.matcher.AbstractStringMatcher.AndStringMatcher#isMatch(CharSequence,int,int,int)",
        "org.apache.commons.text.matcher.StringMatcher#isMatch(CharSequence,int,int,int)",
        "org.apache.commons.text.matcher.AbstractStringMatcher.TrimMatcher#isMatch(CharSequence,int,int,int)",
        "org.apache.commons.text.matcher.AbstractStringMatcher.CharArrayMatcher#isMatch(CharSequence,int,int,int)"
    ],
    "org.apache.commons.text.TextStringBuilder#replaceFirst(String,String)": [
        "org.apache.commons.text.TextStringBuilder#indexOf(String,int)",
        "org.apache.commons.text.TextStringBuilder#replaceImpl(int,int,int,String,int)"
    ],
    "org.apache.commons.text.WordUtils.uncapitalize(String)": ["org.apache.commons.text.WordUtils.uncapitalize(String,char[]...)"],
    "org.apache.commons.text.StrBuilder#appendln(String,int,int)": [
        "org.apache.commons.text.StrBuilder#appendNewLine()",
        "org.apache.commons.text.StrBuilder#append(String,int,int)"
    ],
    "org.apache.commons.text.StrBuilder#append(boolean)": ["org.apache.commons.text.StrBuilder#ensureCapacity(int)"],
    "org.apache.commons.text.TextStringBuilder#append(StringBuilder,int,int)": [
        "org.apache.commons.text.TextStringBuilder#ensureCapacityInternal(int)",
        "org.apache.commons.text.TextStringBuilder#length()",
        "org.apache.commons.text.TextStringBuilder#appendNull()"
    ],
    "org.apache.commons.text.numbers.ParsedDecimal#appendWhole(int,FormatOptions)": [
        "org.apache.commons.text.numbers.ParsedDecimal#appendLocalizedDigit(int,char[])",
        "org.apache.commons.text.numbers.ParsedDecimal#shouldIncludeMinus(FormatOptions)",
        "org.apache.commons.text.numbers.ParsedDecimal#append(char)",
        "org.apache.commons.text.numbers.DoubleFormat.AbstractDoubleFormat#getMinusSign()",
        "org.apache.commons.text.numbers.DoubleFormat.AbstractDoubleFormat#getDigits()"
    ],
    "org.apache.commons.text.TextStringBuilder#insert(int,float)": ["org.apache.commons.text.TextStringBuilder#insert(int,char[])"],
    "org.apache.commons.text.StrBuilder#deleteFirst(char)": ["org.apache.commons.text.StrBuilder#deleteImpl(int,int,int)"],
    "org.apache.commons.text.numbers.DoubleFormat.Builder.getDigitString(DecimalFormatSymbols)": ["org.apache.commons.text.numbers.DoubleFormat.Builder.<staticinit>()"],
    "org.apache.commons.text.StrTokenizer#setQuoteChar(char)": [
        "org.apache.commons.text.StrMatcher.charMatcher(char)",
        "org.apache.commons.text.StrTokenizer#setQuoteMatcher(StrMatcher)"
    ],
    "org.apache.commons.text.similarity.LongestCommonSubsequence#apply(CharSequence,CharSequence)": [
        "org.apache.commons.text.similarity.LongestCommonSubsequence.algorithmB(CharSequence,CharSequence)",
        "org.apache.commons.text.TextStringBuilder#length()",
        "org.apache.commons.text.StrBuilder#length()"
    ],
    "org.apache.commons.text.translate.JavaUnicodeEscaper.above(int)": ["org.apache.commons.text.translate.JavaUnicodeEscaper.outsideOf(int,int)"],
    "org.apache.commons.text.StringSubstitutor#replace(TextStringBuilder)": [
        "org.apache.commons.text.TextStringBuilder#append(TextStringBuilder)",
        "org.apache.commons.text.TextStringBuilder#length()",
        "org.apache.commons.text.StringSubstitutor#substitute(TextStringBuilder,int,int)",
        "org.apache.commons.text.TextStringBuilder#TextStringBuilder(int)",
        "org.apache.commons.text.TextStringBuilder#toString()"
    ],
    "org.apache.commons.text.translate.UnicodeEscaper#toUtf16Escape(int)": ["org.apache.commons.text.translate.CharSequenceTranslator.hex(int)"],
    "org.apache.commons.text.StrBuilder#replaceFirst(StrMatcher,String)": ["org.apache.commons.text.StrBuilder#replace(StrMatcher,String,int,int,int)"],
    "org.apache.commons.text.StrTokenizer#reset(String)": ["org.apache.commons.text.StrTokenizer#reset()"],
    "org.apache.commons.text.CompositeFormat#parseObject(String,ParsePosition)": ["org.apache.commons.text.CompositeFormat#parseObject(String,ParsePosition)"],
    "org.apache.commons.text.TextStringBuilder#insert(int,char[],int,int)": [
        "org.apache.commons.text.TextStringBuilder#insert(int,String)",
        "org.apache.commons.text.TextStringBuilder#ensureCapacityInternal(int)",
        "org.apache.commons.text.TextStringBuilder#validateIndex(int)"
    ],
    "org.apache.commons.text.TextStringBuilder#replace(int,int,String)": [
        "org.apache.commons.text.TextStringBuilder#replaceImpl(int,int,int,String,int)",
        "org.apache.commons.text.TextStringBuilder#validateRange(int,int)"
    ],
    "org.apache.commons.text.matcher.AbstractStringMatcher.CharMatcher#CharMatcher(char)": [
        "org.apache.commons.text.matcher.AbstractStringMatcher.CharMatcher.<init>()",
        "org.apache.commons.text.matcher.AbstractStringMatcher#AbstractStringMatcher()"
    ],
    "org.apache.commons.text.similarity.IntersectionSimilarity#apply(CharSequence,CharSequence)": [
        "org.apache.commons.text.similarity.IntersectionSimilarity.getIntersection(Set<T>,Set<T>)",
        "org.apache.commons.text.similarity.IntersectionSimilarity.TinyBag#uniqueElementSize()",
        "org.apache.commons.text.similarity.IntersectionResult#IntersectionResult(int,int,int)",
        "org.apache.commons.text.similarity.IntersectionSimilarity#toBag(Collection<T>)",
        "org.apache.commons.text.similarity.RegexTokenizer#apply(CharSequence)",
        "org.apache.commons.text.similarity.IntersectionSimilarity#getIntersection(TinyBag,TinyBag)"
    ],
    "org.apache.commons.text.StrSubstitutor#StrSubstitutor(StrLookup<?>,StrMatcher,StrMatcher,char)": [
        "org.apache.commons.text.StrSubstitutor#StrSubstitutor(StrLookup<?>,StrMatcher,StrMatcher,char,StrMatcher)",
        "org.apache.commons.text.StrSubstitutor.<staticinit>()"
    ],
    "org.apache.commons.text.translate.JavaUnicodeEscaper.between(int,int)": ["org.apache.commons.text.translate.JavaUnicodeEscaper#JavaUnicodeEscaper(int,int,boolean)"],
    "org.apache.commons.text.StrLookup.systemPropertiesLookup()": ["org.apache.commons.text.StrLookup.<staticinit>()"],
    "org.apache.commons.text.StrBuilder#contains(StrMatcher)": ["org.apache.commons.text.StrBuilder#indexOf(StrMatcher,int)"],
    "org.apache.commons.text.StrBuilder#appendln(int)": [
        "org.apache.commons.text.StrBuilder#append(int)",
        "org.apache.commons.text.StrBuilder#appendNewLine()"
    ],
    "org.apache.commons.text.numbers.DoubleFormat.ScientificDoubleFormat#applyFiniteInternal(ParsedDecimal)": ["org.apache.commons.text.numbers.ParsedDecimal#toScientificString(FormatOptions)"],
    "org.apache.commons.text.StringSubstitutor.<staticinit>()": [
        "org.apache.commons.text.matcher.StringMatcherFactory#stringMatcher(String)",
        "org.apache.commons.text.matcher.StringMatcherFactory.<staticinit>()"
    ],
    "org.apache.commons.text.StringTokenizer#StringTokenizer(String,StringMatcher)": [
        "org.apache.commons.text.StringTokenizer#StringTokenizer(String)",
        "org.apache.commons.text.StringTokenizer#setDelimiterMatcher(StringMatcher)"
    ],
    "org.apache.commons.text.translate.CsvTranslators.CsvUnescaper#translateWhole(CharSequence,Writer)": [
        "org.apache.commons.text.translate.CsvTranslators.<staticinit>()",
        "org.apache.commons.text.TextStringBuilder#length()",
        "org.apache.commons.text.StrBuilder.StrBuilderWriter#write(int)",
        "org.apache.commons.text.StrBuilder#toString()",
        "org.apache.commons.text.StrBuilder#charAt(int)",
        "org.apache.commons.text.TextStringBuilder#charAt(int)",
        "org.apache.commons.text.TextStringBuilder.TextStringBuilderWriter#write(String)",
        "org.apache.commons.text.StrBuilder.StrBuilderWriter#write(String)",
        "org.apache.commons.text.TextStringBuilder#toString()",
        "org.apache.commons.text.TextStringBuilder.TextStringBuilderWriter#write(char[])",
        "org.apache.commons.text.TextStringBuilder#subSequence(int,int)",
        "org.apache.commons.text.StrBuilder#length()",
        "org.apache.commons.text.StrBuilder#subSequence(int,int)"
    ],
    "org.apache.commons.text.StrBuilder#appendFixedWidthPadLeft(int,int,char)": ["org.apache.commons.text.StrBuilder#appendFixedWidthPadLeft(int,int,char)"],
    "org.apache.commons.text.CompositeFormat#CompositeFormat(Format,Format)": ["org.apache.commons.text.CompositeFormat.<init>()"],
    "org.apache.commons.text.TextStringBuilder#appendln(StringBuffer,int,int)": [
        "org.apache.commons.text.TextStringBuilder#append(StringBuffer,int,int)",
        "org.apache.commons.text.TextStringBuilder#appendNewLine()"
    ],
    "org.apache.commons.text.numbers.ParsedDecimal.from(double)": [
        "org.apache.commons.text.numbers.ParsedDecimal.digitValue(char)",
        "org.apache.commons.text.numbers.ParsedDecimal#ParsedDecimal(boolean,int[],int,int)",
        "org.apache.commons.text.numbers.ParsedDecimal.<staticinit>()",
        "org.apache.commons.text.numbers.ParsedDecimal.parseExponent(char[],int)"
    ],
    "org.apache.commons.text.StrSubstitutor#StrSubstitutor(Map<String, V>,String,String,char)": [
        "org.apache.commons.text.StrSubstitutor#StrSubstitutor(StrLookup<?>,String,String,char)",
        "org.apache.commons.text.StrLookup.mapLookup(Map<String, V>)"
    ],
    "org.apache.commons.text.translate.JavaUnicodeEscaper.outsideOf(int,int)": ["org.apache.commons.text.translate.JavaUnicodeEscaper#JavaUnicodeEscaper(int,int,boolean)"],
    "org.apache.commons.text.lookup.InetAddressKeys#InetAddressKeys()": ["org.apache.commons.text.lookup.InetAddressKeys.<init>()"],
    "org.apache.commons.text.StringTokenizer#setDelimiterChar(char)": [
        "org.apache.commons.text.matcher.StringMatcherFactory.<staticinit>()",
        "org.apache.commons.text.StringTokenizer#setDelimiterMatcher(StringMatcher)",
        "org.apache.commons.text.matcher.StringMatcherFactory#charMatcher(char)"
    ],
    "org.apache.commons.text.StrTokenizer#StrTokenizer(char[],char)": [
        "org.apache.commons.text.StrTokenizer#setDelimiterChar(char)",
        "org.apache.commons.text.StrTokenizer#StrTokenizer(char[])"
    ],
    "org.apache.commons.text.StrMatcher.singleQuoteMatcher()": ["org.apache.commons.text.StrMatcher.<staticinit>()"],
    "org.apache.commons.text.StrTokenizer#StrTokenizer(String,String)": [
        "org.apache.commons.text.StrTokenizer#setDelimiterString(String)",
        "org.apache.commons.text.StrTokenizer#StrTokenizer(String)"
    ],
    "org.apache.commons.text.translate.UnicodeUnpairedSurrogateRemover.<init>()": ["org.apache.commons.text.translate.CodePointTranslator.<init>()"],
    "org.apache.commons.text.StrBuilder#appendFixedWidthPadRight(int,int,char)": ["org.apache.commons.text.StrBuilder#appendFixedWidthPadRight(Object,int,char)"],
    "org.apache.commons.text.matcher.AbstractStringMatcher.TrimMatcher#isMatch(CharSequence,int,int,int)": [
        "org.apache.commons.text.matcher.AbstractStringMatcher.TrimMatcher.<staticinit>()",
        "org.apache.commons.text.StrBuilder#charAt(int)",
        "org.apache.commons.text.TextStringBuilder#charAt(int)"
    ],
    "org.apache.commons.text.StringTokenizer.getCSVInstance()": ["org.apache.commons.text.StringTokenizer.getCSVClone()"],
    "org.apache.commons.text.TextStringBuilder#lastIndexOf(String,int)": ["org.apache.commons.text.TextStringBuilder#lastIndexOf(String,int)"],
    "org.apache.commons.text.StrTokenizer#previous()": ["org.apache.commons.text.StrTokenizer#hasPrevious()"],
    "org.apache.commons.text.StringSubstitutor#replaceIn(TextStringBuilder,int,int)": ["org.apache.commons.text.StringSubstitutor#substitute(TextStringBuilder,int,int)"],
    "org.apache.commons.text.similarity.IntersectionSimilarity#IntersectionSimilarity(Function<CharSequence, Collection<T>>)": ["org.apache.commons.text.similarity.IntersectionSimilarity.<init>()"],
    "org.apache.commons.text.StrMatcher.noneMatcher()": ["org.apache.commons.text.StrMatcher.<staticinit>()"],
    "org.apache.commons.text.lookup.StringLookupFactory#resourceBundleStringLookup(String)": ["org.apache.commons.text.lookup.ResourceBundleStringLookup#ResourceBundleStringLookup(String)"],
    "org.apache.commons.text.translate.UnicodeUnescaper.<init>()": ["org.apache.commons.text.translate.CharSequenceTranslator.<init>()"],
    "org.apache.commons.text.TextStringBuilder.TextStringBuilderReader#read()": [
        "org.apache.commons.text.TextStringBuilder.TextStringBuilderReader#ready()",
        "org.apache.commons.text.TextStringBuilder#charAt(int)"
    ],
    "org.apache.commons.text.StrSubstitutor#replace(char[],int,int)": [
        "org.apache.commons.text.StrBuilder#StrBuilder(int)",
        "org.apache.commons.text.StrBuilder#toString()",
        "org.apache.commons.text.StrSubstitutor#substitute(StrBuilder,int,int)",
        "org.apache.commons.text.StrBuilder#append(char[],int,int)"
    ],
    "org.apache.commons.text.numbers.DoubleFormat.Builder#alwaysIncludeExponent(boolean)": ["org.apache.commons.text.numbers.DoubleFormat.<staticinit>()"],
    "org.apache.commons.text.similarity.IntersectionSimilarity.TinyBag#getCount(Object)": ["org.apache.commons.text.similarity.IntersectionSimilarity.BagCount.<staticinit>()"],
    "org.apache.commons.text.lookup.LocalHostStringLookup.<staticinit>()": ["org.apache.commons.text.lookup.LocalHostStringLookup#LocalHostStringLookup()"],
    "org.apache.commons.text.StrSubstitutor#checkCyclicSubstitution(String,List<String>)": [
        "org.apache.commons.text.StrBuilder#appendWithSeparators(Iterable<?>,String)",
        "org.apache.commons.text.StrBuilder#StrBuilder(int)",
        "org.apache.commons.text.StrBuilder#append(String)",
        "org.apache.commons.text.StrBuilder#toString()",
        "org.apache.commons.text.StrBuilder#append(float)"
    ],
    "org.apache.commons.text.lookup.StringLookupFactory#urlStringLookup()": [
        "org.apache.commons.text.lookup.UrlStringLookup.<staticinit>()",
        "org.apache.commons.text.lookup.StringLookupFactory.<staticinit>()"
    ],
    "org.apache.commons.text.lookup.JavaPlatformStringLookup#getVirtualMachine()": ["org.apache.commons.text.lookup.JavaPlatformStringLookup#getSystemProperty(String)"],
    "org.apache.commons.text.similarity.JaccardDistance#apply(CharSequence,CharSequence)": [
        "org.apache.commons.text.similarity.JaccardSimilarity.<staticinit>()",
        "org.apache.commons.text.similarity.JaccardSimilarity#apply(CharSequence,CharSequence)"
    ],
    "org.apache.commons.text.StrBuilder#appendSeparator(String,int)": ["org.apache.commons.text.StrBuilder#append(String)"],
    "org.apache.commons.text.TextStringBuilder.TextStringBuilderTokenizer#tokenize(char[],int,int)": [
        "org.apache.commons.text.TextStringBuilder#size()",
        "org.apache.commons.text.TextStringBuilder#getBuffer()",
        "org.apache.commons.text.StringTokenizer#tokenize(char[],int,int)"
    ],
    "org.apache.commons.text.StringEscapeUtils#StringEscapeUtils()": ["org.apache.commons.text.StringEscapeUtils.<init>()"],
    "org.apache.commons.text.numbers.DoubleFormat.AbstractDoubleFormat#AbstractDoubleFormat(Builder)": ["org.apache.commons.text.numbers.DoubleFormat.AbstractDoubleFormat.<init>()"],
    "org.apache.commons.text.TextStringBuilder#appendln(String,Object[]...)": [
        "org.apache.commons.text.TextStringBuilder#append(String,Object[]...)",
        "org.apache.commons.text.TextStringBuilder#appendNewLine()"
    ],
    "org.apache.commons.text.translate.CharSequenceTranslator#translate(CharSequence)": [
        "org.apache.commons.text.translate.CharSequenceTranslator#translate(CharSequence,Writer)",
        "org.apache.commons.text.TextStringBuilder#length()",
        "org.apache.commons.text.StrBuilder#length()"
    ],
    "org.apache.commons.text.TextStringBuilder#appendTo(Appendable)": [
        "org.apache.commons.text.StrBuilder.StrBuilderWriter#write(char[],int,int)",
        "org.apache.commons.text.TextStringBuilder.TextStringBuilderWriter#write(char[],int,int)"
    ],
    "org.apache.commons.text.translate.NumericEntityEscaper#NumericEntityEscaper(int,int,boolean)": [
        "org.apache.commons.text.translate.NumericEntityEscaper.<init>()",
        "org.apache.commons.text.translate.CodePointTranslator.<init>()"
    ],
    "org.apache.commons.text.diff.ReplacementsFinder#ReplacementsFinder(ReplacementsHandler<T>)": ["org.apache.commons.text.diff.ReplacementsFinder.<init>()"],
    "org.apache.commons.text.lookup.JavaPlatformStringLookup#getLocale()": ["org.apache.commons.text.lookup.JavaPlatformStringLookup#getSystemProperty(String)"],
    "org.apache.commons.text.lookup.StringLookupFactory#constantStringLookup()": ["org.apache.commons.text.lookup.ConstantStringLookup.<staticinit>()"],
    "org.apache.commons.text.lookup.DnsStringLookup#lookup(String)": ["org.apache.commons.text.lookup.InetAddressKeys.<staticinit>()"],
    "org.apache.commons.text.StrBuilder.StrBuilderWriter#write(String)": ["org.apache.commons.text.StrBuilder#append(String)"],
    "org.apache.commons.text.lookup.ResourceBundleStringLookup.<staticinit>()": ["org.apache.commons.text.lookup.ResourceBundleStringLookup#ResourceBundleStringLookup()"],
    "org.apache.commons.text.io.StringSubstitutorReader#drain(char[],int,int)": [
        "org.apache.commons.text.TextStringBuilder#length()",
        "org.apache.commons.text.TextStringBuilder#isEmpty()",
        "org.apache.commons.text.TextStringBuilder#drainChars(int,int,char[],int)"
    ],
    "org.apache.commons.text.numbers.DoubleFormat.MixedDoubleFormat#MixedDoubleFormat(Builder)": [
        "org.apache.commons.text.numbers.DoubleFormat.AbstractDoubleFormat#AbstractDoubleFormat(Builder)",
        "org.apache.commons.text.numbers.DoubleFormat.MixedDoubleFormat.<init>()"
    ],
    "org.apache.commons.text.lookup.AbstractPathFencedLookup#AbstractPathFencedLookup(Path[]...)": [
        "org.apache.commons.text.lookup.AbstractStringLookup.<init>()",
        "org.apache.commons.text.lookup.AbstractPathFencedLookup.<init>()"
    ],
    "org.apache.commons.text.TextStringBuilder.TextStringBuilderTokenizer#getContent()": [
        "org.apache.commons.text.TextStringBuilder#toString()",
        "org.apache.commons.text.StringTokenizer#getContent()"
    ],
    "org.apache.commons.text.translate.CsvTranslators.CsvEscaper#translateWhole(CharSequence,Writer)": [
        "org.apache.commons.text.translate.CsvTranslators.<staticinit>()",
        "org.apache.commons.text.StrBuilder.StrBuilderWriter#write(String)",
        "org.apache.commons.text.StrBuilder#toString()",
        "org.apache.commons.text.StrBuilder.StrBuilderWriter#write(int)",
        "org.apache.commons.text.TextStringBuilder#toString()",
        "org.apache.commons.text.TextStringBuilder.TextStringBuilderWriter#write(char[])",
        "org.apache.commons.text.TextStringBuilder.TextStringBuilderWriter#write(String)"
    ],
    "org.apache.commons.text.lookup.StringLookupFactory#interpolatorStringLookup()": ["org.apache.commons.text.lookup.InterpolatorStringLookup.<staticinit>()"],
    "org.apache.commons.text.TextStringBuilder#insert(int,double)": ["org.apache.commons.text.TextStringBuilder#insert(int,char[])"],
    "org.apache.commons.text.numbers.ParsedDecimal#round(int)": [
        "org.apache.commons.text.numbers.ParsedDecimal#maxPrecision(int)",
        "org.apache.commons.text.numbers.ParsedDecimal#shouldRoundUp(int)",
        "org.apache.commons.text.numbers.ParsedDecimal#setSingleDigitValue(int,int)"
    ],
    "org.apache.commons.text.similarity.LevenshteinDistance#apply(CharSequence,CharSequence)": [
        "org.apache.commons.text.similarity.LevenshteinDistance.limitedCompare(CharSequence,CharSequence,int)",
        "org.apache.commons.text.similarity.LevenshteinDistance.unlimitedCompare(CharSequence,CharSequence)"
    ],
    "org.apache.commons.text.StrTokenizer#StrTokenizer(char[],char,char)": [
        "org.apache.commons.text.StrTokenizer#StrTokenizer(char[],char)",
        "org.apache.commons.text.StrTokenizer#setQuoteChar(char)"
    ],
    "org.apache.commons.text.StrTokenizer#hasPrevious()": ["org.apache.commons.text.StrTokenizer#checkTokenized()"],
    "org.apache.commons.text.StringSubstitutor#StringSubstitutor(Map<String, V>,String,String,char,String)": [
        "org.apache.commons.text.lookup.StringLookupFactory.<staticinit>()",
        "org.apache.commons.text.lookup.StringLookupFactory#mapStringLookup(Map<String, V>)",
        "org.apache.commons.text.StringSubstitutor#StringSubstitutor(StringLookup,String,String,char,String)"
    ],
    "org.apache.commons.text.lookup.StringLookupFactory#dateStringLookup()": ["org.apache.commons.text.lookup.DateStringLookup.<staticinit>()"],
    "org.apache.commons.text.translate.OctalUnescaper#translate(CharSequence,int,Writer)": [
        "org.apache.commons.text.TextStringBuilder#length()",
        "org.apache.commons.text.StrBuilder.StrBuilderWriter#write(int)",
        "org.apache.commons.text.translate.OctalUnescaper#isZeroToThree(char)",
        "org.apache.commons.text.TextStringBuilder.TextStringBuilderWriter#write(char[])",
        "org.apache.commons.text.StrBuilder#charAt(int)",
        "org.apache.commons.text.StrBuilder#length()",
        "org.apache.commons.text.translate.OctalUnescaper#isOctalDigit(char)",
        "org.apache.commons.text.TextStringBuilder#charAt(int)"
    ],
    "org.apache.commons.text.numbers.ParsedDecimal#shouldIncludeExponent(int,FormatOptions)": ["org.apache.commons.text.numbers.DoubleFormat.AbstractDoubleFormat#isAlwaysIncludeExponent()"],
    "org.apache.commons.text.StrBuilder#insert(int,String)": [
        "org.apache.commons.text.StrBuilder#validateIndex(int)",
        "org.apache.commons.text.StrBuilder#ensureCapacity(int)"
    ],
    "org.apache.commons.text.lookup.ResourceBundleStringLookup#getString(String,String)": ["org.apache.commons.text.lookup.ResourceBundleStringLookup#getBundle(String)"],
    "org.apache.commons.text.StrSubstitutor#replaceIn(StringBuilder,int,int)": [
        "org.apache.commons.text.StrBuilder#StrBuilder(int)",
        "org.apache.commons.text.StrBuilder#toString()",
        "org.apache.commons.text.StrSubstitutor#substitute(StrBuilder,int,int)",
        "org.apache.commons.text.StrBuilder#append(StringBuilder,int,int)"
    ],
    "org.apache.commons.text.matcher.StringMatcherFactory#tabMatcher()": ["org.apache.commons.text.matcher.StringMatcherFactory.<staticinit>()"],
    "org.apache.commons.text.TextStringBuilder#append(char[],int,int)": [
        "org.apache.commons.text.TextStringBuilder#length()",
        "org.apache.commons.text.TextStringBuilder#ensureCapacityInternal(int)",
        "org.apache.commons.text.TextStringBuilder#appendNull()"
    ],
    "org.apache.commons.text.StringSubstitutor#replace(TextStringBuilder,int,int)": [
        "org.apache.commons.text.StringSubstitutor#substitute(TextStringBuilder,int,int)",
        "org.apache.commons.text.TextStringBuilder#TextStringBuilder(int)",
        "org.apache.commons.text.TextStringBuilder#toString()",
        "org.apache.commons.text.TextStringBuilder#append(TextStringBuilder,int,int)"
    ],
    "org.apache.commons.text.StrBuilder#appendln(String)": [
        "org.apache.commons.text.StrBuilder#appendNewLine()",
        "org.apache.commons.text.StrBuilder#append(String)"
    ],
    "org.apache.commons.text.StrSubstitutor#StrSubstitutor(StrLookup<?>,StrMatcher,StrMatcher,char,StrMatcher)": [
        "org.apache.commons.text.StrSubstitutor#setEscapeChar(char)",
        "org.apache.commons.text.StrSubstitutor#setVariableSuffixMatcher(StrMatcher)",
        "org.apache.commons.text.StrSubstitutor#setValueDelimiterMatcher(StrMatcher)",
        "org.apache.commons.text.StrSubstitutor#setVariableResolver(StrLookup<?>)",
        "org.apache.commons.text.StrSubstitutor.<init>()",
        "org.apache.commons.text.StrSubstitutor#setVariablePrefixMatcher(StrMatcher)"
    ],
    "org.apache.commons.text.translate.SinglePassTranslator.<init>()": ["org.apache.commons.text.translate.CharSequenceTranslator.<init>()"],
    "org.apache.commons.text.numbers.ParsedDecimal#shouldIncludeMinus(FormatOptions)": [
        "org.apache.commons.text.numbers.ParsedDecimal#isZero()",
        "org.apache.commons.text.numbers.DoubleFormat.AbstractDoubleFormat#isSignedZero()"
    ],
    "org.apache.commons.text.StrBuilder#appendSeparator(String)": ["org.apache.commons.text.StrBuilder#appendSeparator(String,String)"],
    "org.apache.commons.text.ExtendedMessageFormat#applyPattern(String)": [
        "org.apache.commons.text.ExtendedMessageFormat.<staticinit>()",
        "org.apache.commons.text.ExtendedMessageFormat#seekNonWs(String,ParsePosition)",
        "org.apache.commons.text.ExtendedMessageFormat#getFormat(String)",
        "org.apache.commons.text.ExtendedMessageFormat#insertFormats(String,ArrayList<String>)",
        "org.apache.commons.text.ExtendedMessageFormat#containsElements(Collection<?>)",
        "org.apache.commons.text.ExtendedMessageFormat#parseFormatDescription(String,ParsePosition)",
        "org.apache.commons.text.ExtendedMessageFormat#appendQuotedString(String,ParsePosition,StringBuilder)",
        "org.apache.commons.text.ExtendedMessageFormat#next(ParsePosition)",
        "org.apache.commons.text.ExtendedMessageFormat#readArgumentIndex(String,ParsePosition)"
    ],
    "org.apache.commons.text.StrBuilder#lastIndexOf(StrMatcher,int)": [
        "org.apache.commons.text.StrMatcher.NoMatcher#isMatch(char[],int,int,int)",
        "org.apache.commons.text.StrMatcher.TrimMatcher#isMatch(char[],int,int,int)",
        "org.apache.commons.text.StrMatcher.CharSetMatcher#isMatch(char[],int,int,int)",
        "org.apache.commons.text.StrMatcher.StringMatcher#isMatch(char[],int,int,int)",
        "org.apache.commons.text.StrMatcher.CharMatcher#isMatch(char[],int,int,int)"
    ],
    "org.apache.commons.text.lookup.StringLookupFactory#StringLookupFactory(Path[])": ["org.apache.commons.text.lookup.StringLookupFactory.<init>()"],
    "org.apache.commons.text.StringEscapeUtils.escapeXml11(String)": [
        "org.apache.commons.text.StringEscapeUtils.<staticinit>()",
        "org.apache.commons.text.translate.CharSequenceTranslator#translate(CharSequence)"
    ],
    "org.apache.commons.text.TextStringBuilder#append(CharSequence)": [
        "org.apache.commons.text.TextStringBuilder#append(TextStringBuilder)",
        "org.apache.commons.text.TextStringBuilder#append(StringBuffer)",
        "org.apache.commons.text.StrBuilder#toString()",
        "org.apache.commons.text.TextStringBuilder#appendNull()",
        "org.apache.commons.text.TextStringBuilder#toString()",
        "org.apache.commons.text.TextStringBuilder#append(char)",
        "org.apache.commons.text.TextStringBuilder#append(StringBuilder)",
        "org.apache.commons.text.TextStringBuilder#append(CharBuffer)"
    ],
    "org.apache.commons.text.StrTokenizer.getCSVInstance()": ["org.apache.commons.text.StrTokenizer.getCSVClone()"],
    "org.apache.commons.text.StrBuilder#appendln(String,Object[]...)": [
        "org.apache.commons.text.StrBuilder#append(String,Object[]...)",
        "org.apache.commons.text.StrBuilder#appendNewLine()"
    ],
    "org.apache.commons.text.StrBuilder#appendln(char)": [
        "org.apache.commons.text.StrBuilder#appendNewLine()",
        "org.apache.commons.text.StrBuilder#append(char)"
    ],
    "org.apache.commons.text.TextStringBuilder#appendln(char[])": [
        "org.apache.commons.text.TextStringBuilder#append(char[])",
        "org.apache.commons.text.TextStringBuilder#appendNewLine()"
    ],
    "org.apache.commons.text.matcher.AbstractStringMatcher.NoneMatcher#NoneMatcher()": [
        "org.apache.commons.text.matcher.AbstractStringMatcher.NoneMatcher.<init>()",
        "org.apache.commons.text.matcher.AbstractStringMatcher#AbstractStringMatcher()"
    ],
    "org.apache.commons.text.TextStringBuilder#appendln(char[],int,int)": [
        "org.apache.commons.text.TextStringBuilder#appendNewLine()",
        "org.apache.commons.text.TextStringBuilder#append(char[],int,int)"
    ],
    "org.apache.commons.text.StringTokenizer#StringTokenizer(char[],char,char)": [
        "org.apache.commons.text.StringTokenizer#setQuoteChar(char)",
        "org.apache.commons.text.StringTokenizer#StringTokenizer(char[],char)"
    ],
    "org.apache.commons.text.lookup.ConstantStringLookup#resolveField(String,String)": ["org.apache.commons.text.lookup.ConstantStringLookup#fetchClass(String)"],
    "org.apache.commons.text.StrTokenizer#tokenize(char[],int,int)": [
        "org.apache.commons.text.StrBuilder#StrBuilder()",
        "org.apache.commons.text.StrTokenizer#readNextToken(char[],int,int,StrBuilder,List<String>)",
        "org.apache.commons.text.StrTokenizer#addToken(List<String>,String)"
    ],
    "org.apache.commons.text.translate.LookupTranslator#LookupTranslator(Map<CharSequence, CharSequence>)": [
        "org.apache.commons.text.translate.LookupTranslator.<init>()",
        "org.apache.commons.text.translate.CharSequenceTranslator.<init>()"
    ],
    "org.apache.commons.text.similarity.LevenshteinDistance.limitedCompare(CharSequence,CharSequence,int)": [
        "org.apache.commons.text.StrBuilder#charAt(int)",
        "org.apache.commons.text.TextStringBuilder#length()",
        "org.apache.commons.text.StrBuilder#length()",
        "org.apache.commons.text.TextStringBuilder#charAt(int)"
    ],
    "org.apache.commons.text.diff.StringsComparator#getScript()": [
        "org.apache.commons.text.diff.EditScript#EditScript()",
        "org.apache.commons.text.diff.StringsComparator#buildScript(int,int,int,int,EditScript<Character>)"
    ],
    "org.apache.commons.text.StrBuilder#indexOf(char)": ["org.apache.commons.text.StrBuilder#indexOf(char,int)"],
    "org.apache.commons.text.TextStringBuilder#append(boolean)": [
        "org.apache.commons.text.TextStringBuilder#appendTrue(int)",
        "org.apache.commons.text.TextStringBuilder.<staticinit>()",
        "org.apache.commons.text.TextStringBuilder#ensureCapacityInternal(int)",
        "org.apache.commons.text.TextStringBuilder#appendFalse(int)"
    ],
    "org.apache.commons.text.lookup.StringLookupFactory#xmlStringLookup()": [
        "org.apache.commons.text.lookup.XmlStringLookup.<staticinit>()",
        "org.apache.commons.text.lookup.StringLookupFactory#xmlStringLookup(Map<String, Boolean>,Path[]...)"
    ],
    "org.apache.commons.text.lookup.StringLookupFactory#javaPlatformStringLookup()": ["org.apache.commons.text.lookup.JavaPlatformStringLookup.<staticinit>()"],
    "org.apache.commons.text.lookup.JavaPlatformStringLookup#getHardware()": [
        "org.apache.commons.text.lookup.JavaPlatformStringLookup#getSystemProperty(String,String)",
        "org.apache.commons.text.lookup.JavaPlatformStringLookup#getSystemProperty(String)"
    ],
    "org.apache.commons.text.lookup.UrlEncoderStringLookup.<staticinit>()": ["org.apache.commons.text.lookup.UrlEncoderStringLookup#UrlEncoderStringLookup()"],
    "org.apache.commons.text.TextStringBuilder#subSequence(int,int)": ["org.apache.commons.text.TextStringBuilder#substring(int,int)"],
    "org.apache.commons.text.StrMatcher.CharMatcher#CharMatcher(char)": [
        "org.apache.commons.text.StrMatcher.CharMatcher.<init>()",
        "org.apache.commons.text.StrMatcher#StrMatcher()"
    ],
    "org.apache.commons.text.FormattableUtils.append(CharSequence,Formatter,int,int,int)": ["org.apache.commons.text.FormattableUtils.append(CharSequence,Formatter,int,int,int,char,CharSequence)"],
    "org.apache.commons.text.TextStringBuilder#TextStringBuilder(int)": [
        "org.apache.commons.text.TextStringBuilder.<init>()",
        "org.apache.commons.text.TextStringBuilder.<staticinit>()"
    ],
    "org.apache.commons.text.lookup.JavaPlatformStringLookup#getOperatingSystem()": [
        "org.apache.commons.text.lookup.JavaPlatformStringLookup#getSystemProperty(String,String)",
        "org.apache.commons.text.lookup.JavaPlatformStringLookup#getSystemProperty(String)"
    ],
    "org.apache.commons.text.StrSubstitutor#replace(String)": [
        "org.apache.commons.text.StrBuilder#toString()",
        "org.apache.commons.text.StrSubstitutor#substitute(StrBuilder,int,int)",
        "org.apache.commons.text.StrBuilder#StrBuilder(String)"
    ],
    "org.apache.commons.text.diff.StringsComparator.Snake#Snake(int,int,int)": ["org.apache.commons.text.diff.StringsComparator.Snake.<init>()"],
    "org.apache.commons.text.diff.StringsComparator#buildScript(int,int,int,int,EditScript<Character>)": [
        "org.apache.commons.text.diff.StringsComparator.Snake#getEnd()",
        "org.apache.commons.text.diff.EditScript#append(DeleteCommand<T>)",
        "org.apache.commons.text.diff.EditScript#append(InsertCommand<T>)",
        "org.apache.commons.text.diff.KeepCommand#KeepCommand(T)",
        "org.apache.commons.text.diff.StringsComparator.Snake#getStart()",
        "org.apache.commons.text.diff.StringsComparator.Snake#getDiag()",
        "org.apache.commons.text.diff.StringsComparator#buildScript(int,int,int,int,EditScript<Character>)",
        "org.apache.commons.text.diff.EditScript#append(KeepCommand<T>)",
        "org.apache.commons.text.diff.StringsComparator#getMiddleSnake(int,int,int,int)",
        "org.apache.commons.text.diff.InsertCommand#InsertCommand(T)",
        "org.apache.commons.text.diff.DeleteCommand#DeleteCommand(T)"
    ],
    "org.apache.commons.text.WordUtils.containsAllWords(CharSequence,CharSequence[]...)": [
        "org.apache.commons.text.TextStringBuilder#toString()",
        "org.apache.commons.text.StrBuilder#toString()"
    ],
    "org.apache.commons.text.StrBuilder#appendln(StringBuilder,int,int)": [
        "org.apache.commons.text.StrBuilder#appendNewLine()",
        "org.apache.commons.text.StrBuilder#append(StringBuilder,int,int)"
    ],
    "org.apache.commons.text.StringTokenizer#setDelimiterMatcher(StringMatcher)": [
        "org.apache.commons.text.matcher.StringMatcherFactory.<staticinit>()",
        "org.apache.commons.text.matcher.StringMatcherFactory#noneMatcher()"
    ],
    "org.apache.commons.text.StrBuilder#appendln(StringBuffer)": [
        "org.apache.commons.text.StrBuilder#appendNewLine()",
        "org.apache.commons.text.StrBuilder#append(StringBuffer)"
    ],
    "org.apache.commons.text.StrBuilder.StrBuilderReader#read()": [
        "org.apache.commons.text.StrBuilder.StrBuilderReader#ready()",
        "org.apache.commons.text.StrBuilder#charAt(int)"
    ],
    "org.apache.commons.text.numbers.ParsedDecimal#ParsedDecimal(boolean,int[],int,int)": ["org.apache.commons.text.numbers.ParsedDecimal.<init>()"],
    "org.apache.commons.text.lookup.UrlStringLookup#UrlStringLookup()": [
        "org.apache.commons.text.lookup.AbstractStringLookup.<init>()",
        "org.apache.commons.text.lookup.UrlStringLookup.<init>()"
    ],
    "org.apache.commons.text.TextStringBuilder#append(StringBuffer)": ["org.apache.commons.text.TextStringBuilder#append(StringBuffer,int,int)"],
    "org.apache.commons.text.TextStringBuilder#insert(int,long)": ["org.apache.commons.text.TextStringBuilder#insert(int,char[])"],
    "org.apache.commons.text.numbers.DoubleFormat.Builder#build()": ["org.apache.commons.text.numbers.DoubleFormat.Builder#get()"],
    "org.apache.commons.text.numbers.ParsedDecimal.parseExponent(char[],int)": [
        "org.apache.commons.text.numbers.ParsedDecimal.digitValue(char)",
        "org.apache.commons.text.numbers.ParsedDecimal.<staticinit>()"
    ],
    "org.apache.commons.text.translate.CharSequenceTranslator#translate(CharSequence,Writer)": [
        "org.apache.commons.text.TextStringBuilder#length()",
        "org.apache.commons.text.translate.UnicodeUnescaper#translate(CharSequence,int,Writer)",
        "org.apache.commons.text.translate.LookupTranslator#translate(CharSequence,int,Writer)",
        "org.apache.commons.text.StringEscapeUtils.XsiUnescaper#translate(CharSequence,int,Writer)",
        "org.apache.commons.text.StrBuilder#charAt(int)",
        "org.apache.commons.text.translate.SinglePassTranslator#translate(CharSequence,int,Writer)",
        "org.apache.commons.text.translate.CodePointTranslator#translate(CharSequence,int,Writer)",
        "org.apache.commons.text.translate.NumericEntityUnescaper#translate(CharSequence,int,Writer)",
        "org.apache.commons.text.StrBuilder#length()",
        "org.apache.commons.text.TextStringBuilder#charAt(int)",
        "org.apache.commons.text.translate.OctalUnescaper#translate(CharSequence,int,Writer)",
        "org.apache.commons.text.translate.AggregateTranslator#translate(CharSequence,int,Writer)"
    ],
    "org.apache.commons.text.StrBuilder#trim()": ["org.apache.commons.text.StrBuilder#delete(int,int)"],
    "org.apache.commons.text.TextStringBuilder#deleteCharAt(int)": [
        "org.apache.commons.text.TextStringBuilder#deleteImpl(int,int,int)",
        "org.apache.commons.text.TextStringBuilder#validateIndex(int)"
    ],
    "org.apache.commons.text.translate.CsvTranslators.CsvUnescaper.<init>()": ["org.apache.commons.text.translate.SinglePassTranslator.<init>()"],
    "org.apache.commons.text.StrSubstitutor#setVariablePrefix(char)": [
        "org.apache.commons.text.StrMatcher.charMatcher(char)",
        "org.apache.commons.text.StrSubstitutor#setVariablePrefixMatcher(StrMatcher)"
    ],
    "org.apache.commons.text.StringTokenizer.getTSVClone()": [
        "org.apache.commons.text.StringTokenizer#clone()",
        "org.apache.commons.text.StringTokenizer.<staticinit>()"
    ],
    "org.apache.commons.text.translate.UnicodeEscaper.outsideOf(int,int)": ["org.apache.commons.text.translate.UnicodeEscaper#UnicodeEscaper(int,int,boolean)"],
    "org.apache.commons.text.similarity.JaroWinklerDistance.matches(CharSequence,CharSequence)": ["org.apache.commons.text.similarity.JaroWinklerSimilarity.matches(CharSequence,CharSequence)"],
    "org.apache.commons.text.lookup.StringLookupFactory.clear()": ["org.apache.commons.text.lookup.ConstantStringLookup.clear()"],
    "org.apache.commons.text.matcher.StringMatcherFactory.<staticinit>()": [
        "org.apache.commons.text.matcher.StringMatcherFactory#StringMatcherFactory()",
        "org.apache.commons.text.matcher.AbstractStringMatcher.TrimMatcher#TrimMatcher()",
        "org.apache.commons.text.matcher.AbstractStringMatcher.CharMatcher#CharMatcher(char)",
        "org.apache.commons.text.matcher.AbstractStringMatcher.CharSetMatcher#CharSetMatcher(char[])",
        "org.apache.commons.text.matcher.AbstractStringMatcher.NoneMatcher#NoneMatcher()"
    ],
    "org.apache.commons.text.StrTokenizer#setDelimiterMatcher(StrMatcher)": ["org.apache.commons.text.StrMatcher.noneMatcher()"],
    "org.apache.commons.text.StringSubstitutor#StringSubstitutor(Map<String, V>)": [
        "org.apache.commons.text.lookup.StringLookupFactory#mapStringLookup(Map<String, V>)",
        "org.apache.commons.text.lookup.StringLookupFactory.<staticinit>()",
        "org.apache.commons.text.StringSubstitutor.<staticinit>()",
        "org.apache.commons.text.StringSubstitutor#StringSubstitutor(StringLookup,StringMatcher,StringMatcher,char)"
    ],
    "org.apache.commons.text.StringTokenizer#getTokenList()": ["org.apache.commons.text.StringTokenizer#checkTokenized()"],
    "org.apache.commons.text.StringSubstitutor.replace(Object,Properties)": [
        "org.apache.commons.text.lookup.ResourceBundleStringLookup#toString()",
        "org.apache.commons.text.matcher.AbstractStringMatcher.CharMatcher#toString()",
        "org.apache.commons.text.StrLookup.MapStrLookup#toString()",
        "org.apache.commons.text.lookup.InterpolatorStringLookup#toString()",
        "org.apache.commons.text.matcher.AbstractStringMatcher.CharArrayMatcher#toString()",
        "org.apache.commons.text.StringSubstitutor.replace(Object,Map<String, V>)",
        "org.apache.commons.text.StrLookup.ResourceBundleLookup#toString()",
        "org.apache.commons.text.matcher.AbstractStringMatcher.CharSetMatcher#toString()",
        "org.apache.commons.text.lookup.FunctionStringLookup#toString()",
        "org.apache.commons.text.StrMatcher.StringMatcher#toString()"
    ],
    "org.apache.commons.text.lookup.XmlStringLookup#lookup(String)": [
        "org.apache.commons.text.lookup.AbstractStringLookup.<staticinit>()",
        "org.apache.commons.text.lookup.AbstractPathFencedLookup#getPath(String)"
    ],
    "org.apache.commons.text.FormattableUtils.append(CharSequence,Formatter,int,int,int,CharSequence)": ["org.apache.commons.text.FormattableUtils.append(CharSequence,Formatter,int,int,int,char,CharSequence)"],
    "org.apache.commons.text.lookup.PropertiesStringLookup.toPropertyKey(String,String)": [
        "org.apache.commons.text.lookup.AbstractStringLookup.toLookupKey(String,String,String)",
        "org.apache.commons.text.lookup.PropertiesStringLookup.<staticinit>()"
    ],
    "org.apache.commons.text.lookup.BiFunctionStringLookup#lookup(String)": ["org.apache.commons.text.lookup.BiFunctionStringLookup#lookup(String,P)"],
    "org.apache.commons.text.numbers.ParsedDecimal#toScientificString(FormatOptions)": ["org.apache.commons.text.numbers.ParsedDecimal#toScientificString(int,FormatOptions)"],
    "org.apache.commons.text.TextStringBuilder.TextStringBuilderTokenizer#TextStringBuilderTokenizer()": [
        "org.apache.commons.text.TextStringBuilder.TextStringBuilderTokenizer.<init>()",
        "org.apache.commons.text.StringTokenizer#StringTokenizer()"
    ],
    "org.apache.commons.text.StrBuilder#deleteAll(char)": ["org.apache.commons.text.StrBuilder#deleteImpl(int,int,int)"],
    "org.apache.commons.text.StrBuilder#replaceAll(StrMatcher,String)": ["org.apache.commons.text.StrBuilder#replace(StrMatcher,String,int,int,int)"],
    "org.apache.commons.text.lookup.DateStringLookup#DateStringLookup()": [
        "org.apache.commons.text.lookup.AbstractStringLookup.<init>()",
        "org.apache.commons.text.lookup.DateStringLookup.<init>()"
    ],
    "org.apache.commons.text.lookup.ScriptStringLookup#ScriptStringLookup()": [
        "org.apache.commons.text.lookup.AbstractStringLookup.<init>()",
        "org.apache.commons.text.lookup.ScriptStringLookup.<init>()"
    ],
    "org.apache.commons.text.similarity.JaroWinklerDistance#apply(CharSequence,CharSequence)": [
        "org.apache.commons.text.similarity.JaroWinklerSimilarity#apply(CharSequence,CharSequence)",
        "org.apache.commons.text.similarity.JaroWinklerSimilarity.<staticinit>()"
    ],
    "org.apache.commons.text.lookup.UrlEncoderStringLookup#lookup(String)": ["org.apache.commons.text.lookup.UrlEncoderStringLookup#encode(String,String)"],
    "org.apache.commons.text.numbers.DoubleFormat.Builder#groupThousands(boolean)": ["org.apache.commons.text.numbers.DoubleFormat.<staticinit>()"],
    "org.apache.commons.text.StrSubstitutor#setValueDelimiter(String)": [
        "org.apache.commons.text.StrSubstitutor#setValueDelimiterMatcher(StrMatcher)",
        "org.apache.commons.text.StrMatcher.stringMatcher(String)"
    ],
    "org.apache.commons.text.ExtendedMessageFormat#seekNonWs(String,ParsePosition)": [
        "org.apache.commons.text.matcher.AbstractStringMatcher.CharSetMatcher#isMatch(char[],int,int,int)",
        "org.apache.commons.text.matcher.AbstractStringMatcher.CharMatcher#isMatch(char[],int,int,int)",
        "org.apache.commons.text.matcher.AbstractStringMatcher.AndStringMatcher#isMatch(char[],int,int,int)",
        "org.apache.commons.text.matcher.AbstractStringMatcher.TrimMatcher#isMatch(char[],int,int,int)",
        "org.apache.commons.text.matcher.StringMatcherFactory#splitMatcher()",
        "org.apache.commons.text.matcher.StringMatcherFactory.<staticinit>()",
        "org.apache.commons.text.matcher.AbstractStringMatcher.CharArrayMatcher#isMatch(char[],int,int,int)",
        "org.apache.commons.text.matcher.AbstractStringMatcher.NoneMatcher#isMatch(char[],int,int,int)"
    ],
    "org.apache.commons.text.similarity.LevenshteinDistance.getDefaultInstance()": ["org.apache.commons.text.similarity.LevenshteinDistance.<staticinit>()"],
    "org.apache.commons.text.io.StringSubstitutorReader#drainOnEos(int,char[],int,int)": [
        "org.apache.commons.text.io.StringSubstitutorReader#drain(char[],int,int)",
        "org.apache.commons.text.TextStringBuilder#size()",
        "org.apache.commons.text.io.StringSubstitutorReader.<staticinit>()",
        "org.apache.commons.text.TextStringBuilder#isNotEmpty()"
    ],
    "org.apache.commons.text.TextStringBuilder#readFrom(Reader,int)": [
        "org.apache.commons.text.TextStringBuilder.TextStringBuilderReader#read(char[],int,int)",
        "org.apache.commons.text.TextStringBuilder.<staticinit>()",
        "org.apache.commons.text.TextStringBuilder#ensureCapacityInternal(int)",
        "org.apache.commons.text.StrBuilder.StrBuilderReader#read(char[],int,int)"
    ],
    "org.apache.commons.text.TextStringBuilder.wrap(char[],int)": ["org.apache.commons.text.TextStringBuilder#TextStringBuilder(char[],int)"],
    "org.apache.commons.text.lookup.JavaPlatformStringLookup.<staticinit>()": ["org.apache.commons.text.lookup.JavaPlatformStringLookup#JavaPlatformStringLookup()"],
    "org.apache.commons.text.TextStringBuilder#appendPadding(int,char)": ["org.apache.commons.text.TextStringBuilder#ensureCapacityInternal(int)"],
    "org.apache.commons.text.StrBuilder#append(String)": [
        "org.apache.commons.text.StrBuilder#ensureCapacity(int)",
        "org.apache.commons.text.StrBuilder#length()",
        "org.apache.commons.text.StrBuilder#appendNull()"
    ],
    "org.apache.commons.text.StrBuilder#append(String,int,int)": [
        "org.apache.commons.text.StrBuilder#ensureCapacity(int)",
        "org.apache.commons.text.StrBuilder#length()",
        "org.apache.commons.text.StrBuilder#appendNull()"
    ],
    "org.apache.commons.text.similarity.CosineSimilarity#cosineSimilarity(Map<CharSequence, Integer>,Map<CharSequence, Integer>)": [
        "org.apache.commons.text.similarity.CosineSimilarity#dot(Map<CharSequence, Integer>,Map<CharSequence, Integer>,Set<CharSequence>)",
        "org.apache.commons.text.similarity.CosineSimilarity#getIntersection(Map<CharSequence, Integer>,Map<CharSequence, Integer>)"
    ],
    "org.apache.commons.text.numbers.ParsedDecimal#toPlainString(FormatOptions)": [
        "org.apache.commons.text.numbers.DoubleFormat.AbstractDoubleFormat#isGroupThousands()",
        "org.apache.commons.text.numbers.ParsedDecimal#outputString()",
        "org.apache.commons.text.numbers.ParsedDecimal#getPlainStringSize(int,FormatOptions)",
        "org.apache.commons.text.numbers.ParsedDecimal#appendWholeGrouped(int,FormatOptions)",
        "org.apache.commons.text.numbers.ParsedDecimal#prepareOutput(int)",
        "org.apache.commons.text.numbers.ParsedDecimal#appendFraction(int,int,FormatOptions)",
        "org.apache.commons.text.numbers.ParsedDecimal#appendWhole(int,FormatOptions)"
    ],
    "org.apache.commons.text.StringSubstitutor#checkCyclicSubstitution(String,List<String>)": [
        "org.apache.commons.text.TextStringBuilder#append(String)",
        "org.apache.commons.text.TextStringBuilder#TextStringBuilder(int)",
        "org.apache.commons.text.TextStringBuilder#appendWithSeparators(Iterable<?>,String)",
        "org.apache.commons.text.TextStringBuilder#toString()",
        "org.apache.commons.text.TextStringBuilder#append(char)"
    ],
    "org.apache.commons.text.StringSubstitutor#StringSubstitutor(StringLookup,String,String,char)": [
        "org.apache.commons.text.StringSubstitutor.<init>()",
        "org.apache.commons.text.StringSubstitutor#setVariablePrefix(String)",
        "org.apache.commons.text.StringSubstitutor#setVariableResolver(StringLookup)",
        "org.apache.commons.text.StringSubstitutor#setEscapeChar(char)",
        "org.apache.commons.text.StringSubstitutor#setVariableSuffix(String)",
        "org.apache.commons.text.StringSubstitutor.<staticinit>()",
        "org.apache.commons.text.StringSubstitutor#setValueDelimiterMatcher(StringMatcher)"
    ],
    "org.apache.commons.text.similarity.LevenshteinDetailedDistance#apply(CharSequence,CharSequence)": [
        "org.apache.commons.text.similarity.LevenshteinDetailedDistance.unlimitedCompare(CharSequence,CharSequence)",
        "org.apache.commons.text.similarity.LevenshteinDetailedDistance.limitedCompare(CharSequence,CharSequence,int)"
    ],
    "org.apache.commons.text.StrBuilder#append(long)": ["org.apache.commons.text.StrBuilder#append(float)"],
    "org.apache.commons.text.StrTokenizer#StrTokenizer(String)": ["org.apache.commons.text.StrTokenizer.<init>()"],
    "org.apache.commons.text.StrBuilder#appendNewLine()": [
        "org.apache.commons.text.StrBuilder#append(String)",
        "org.apache.commons.text.StrBuilder#append(float)"
    ],
    "org.apache.commons.text.translate.NumericEntityUnescaper#NumericEntityUnescaper(OPTION[]...)": [
        "org.apache.commons.text.translate.NumericEntityUnescaper.<init>()",
        "org.apache.commons.text.translate.CharSequenceTranslator.<init>()",
        "org.apache.commons.text.translate.NumericEntityUnescaper.<staticinit>()"
    ],
    "org.apache.commons.text.lookup.UrlStringLookup#lookup(String)": ["org.apache.commons.text.lookup.AbstractStringLookup.<staticinit>()"],
    "org.apache.commons.text.StringTokenizer#next()": ["org.apache.commons.text.StringTokenizer#hasNext()"],
    "org.apache.commons.text.TextStringBuilder#deleteFirst(String)": [
        "org.apache.commons.text.TextStringBuilder#indexOf(String,int)",
        "org.apache.commons.text.TextStringBuilder#deleteImpl(int,int,int)"
    ],
    "org.apache.commons.text.TextStringBuilder#appendFixedWidthPadRight(int,int,char)": ["org.apache.commons.text.TextStringBuilder#appendFixedWidthPadRight(int,int,char)"],
    "org.apache.commons.text.StrBuilder#substring(int,int)": ["org.apache.commons.text.StrBuilder#validateRange(int,int)"],
    "org.apache.commons.text.lookup.IllegalArgumentExceptions#IllegalArgumentExceptions()": ["org.apache.commons.text.lookup.IllegalArgumentExceptions.<init>()"],
    "org.apache.commons.text.StringSubstitutor#setValueDelimiter(char)": [
        "org.apache.commons.text.matcher.StringMatcherFactory.<staticinit>()",
        "org.apache.commons.text.StringSubstitutor#setValueDelimiterMatcher(StringMatcher)",
        "org.apache.commons.text.matcher.StringMatcherFactory#charMatcher(char)"
    ],
    "org.apache.commons.text.WordUtils.wrap(String,int,String,boolean)": ["org.apache.commons.text.WordUtils.wrap(String,int,String,boolean,String)"],
    "org.apache.commons.text.StringTokenizer#StringTokenizer(String,char,char)": [
        "org.apache.commons.text.StringTokenizer#setQuoteChar(char)",
        "org.apache.commons.text.StringTokenizer#StringTokenizer(String,char)"
    ],
    "org.apache.commons.text.StrLookup.noneLookup()": ["org.apache.commons.text.StrLookup.<staticinit>()"],
    "org.apache.commons.text.TextStringBuilder#readFrom(Readable)": [
        "org.apache.commons.text.TextStringBuilder#readFrom(CharBuffer)",
        "org.apache.commons.text.TextStringBuilder#ensureCapacityInternal(int)",
        "org.apache.commons.text.TextStringBuilder.<staticinit>()",
        "org.apache.commons.text.TextStringBuilder#readFrom(Reader)"
    ],
    "org.apache.commons.text.translate.NumericEntityEscaper.above(int)": ["org.apache.commons.text.translate.NumericEntityEscaper.outsideOf(int,int)"],
    "org.apache.commons.text.similarity.JaccardSimilarity.<staticinit>()": ["org.apache.commons.text.similarity.JaccardSimilarity.<init>()"],
    "org.apache.commons.text.StrMatcher.spaceMatcher()": ["org.apache.commons.text.StrMatcher.<staticinit>()"],
    "org.apache.commons.text.diff.InsertCommand#accept(CommandVisitor<T>)": [
        "org.apache.commons.text.diff.ReplacementsFinder#visitInsertCommand(T)",
        "org.apache.commons.text.diff.EditCommand#getObject()"
    ],
    "org.apache.commons.text.lookup.UrlStringLookup.<staticinit>()": ["org.apache.commons.text.lookup.UrlStringLookup#UrlStringLookup()"],
    "org.apache.commons.text.lookup.StringLookupFactory#base64EncoderStringLookup()": ["org.apache.commons.text.lookup.StringLookupFactory.<staticinit>()"],
    "org.apache.commons.text.StrSubstitutor.replace(Object,Map<String, V>)": [
        "org.apache.commons.text.StrSubstitutor#StrSubstitutor(Map<String, V>)",
        "org.apache.commons.text.StrSubstitutor#replace(Object)"
    ],
    "org.apache.commons.text.TextStringBuilder#contains(StringMatcher)": ["org.apache.commons.text.TextStringBuilder#indexOf(StringMatcher,int)"],
    "org.apache.commons.text.StringTokenizer#setIgnoredChar(char)": [
        "org.apache.commons.text.matcher.StringMatcherFactory.<staticinit>()",
        "org.apache.commons.text.StringTokenizer#setIgnoredMatcher(StringMatcher)",
        "org.apache.commons.text.matcher.StringMatcherFactory#charMatcher(char)"
    ],
    "org.apache.commons.text.TextStringBuilder#lastIndexOf(StringMatcher)": ["org.apache.commons.text.TextStringBuilder#lastIndexOf(StringMatcher,int)"],
    "org.apache.commons.text.StringSubstitutor#replaceIn(TextStringBuilder)": [
        "org.apache.commons.text.TextStringBuilder#length()",
        "org.apache.commons.text.StringSubstitutor#substitute(TextStringBuilder,int,int)"
    ],
    "org.apache.commons.text.lookup.JavaPlatformStringLookup.main(String[])": [
        "org.apache.commons.text.lookup.JavaPlatformStringLookup.<staticinit>()",
        "org.apache.commons.text.lookup.JavaPlatformStringLookup#lookup(String)"
    ],
    "org.apache.commons.text.StrSubstitutor#StrSubstitutor(StrLookup<?>,String,String,char)": [
        "org.apache.commons.text.StrSubstitutor#setEscapeChar(char)",
        "org.apache.commons.text.StrSubstitutor#setValueDelimiterMatcher(StrMatcher)",
        "org.apache.commons.text.StrSubstitutor.<staticinit>()",
        "org.apache.commons.text.StrSubstitutor#setVariableSuffix(String)",
        "org.apache.commons.text.StrSubstitutor.<init>()",
        "org.apache.commons.text.StrSubstitutor#setVariableResolver(StrLookup<?>)",
        "org.apache.commons.text.StrSubstitutor#setVariablePrefix(String)"
    ],
    "org.apache.commons.text.StringEscapeUtils.escapeXSI(String)": [
        "org.apache.commons.text.StringEscapeUtils.<staticinit>()",
        "org.apache.commons.text.translate.CharSequenceTranslator#translate(CharSequence)"
    ],
    "org.apache.commons.text.lookup.XmlStringLookup.<staticinit>()": ["org.apache.commons.text.lookup.XmlStringLookup#XmlStringLookup(Map<String, Boolean>,Path[]...)"],
    "org.apache.commons.text.TextStringBuilder#append(CharBuffer)": ["org.apache.commons.text.TextStringBuilder#append(CharBuffer,int,int)"],
    "org.apache.commons.text.lookup.StringLookupFactory#fileStringLookup()": [
        "org.apache.commons.text.lookup.FileStringLookup.<staticinit>()",
        "org.apache.commons.text.lookup.StringLookupFactory#fileStringLookup(Path[]...)",
        "org.apache.commons.text.lookup.StringLookupFactory.<staticinit>()"
    ],
    "org.apache.commons.text.similarity.IntersectionResult#IntersectionResult(int,int,int)": ["org.apache.commons.text.similarity.IntersectionResult.<init>()"],
    "org.apache.commons.text.StringSubstitutor#setValueDelimiter(String)": [
        "org.apache.commons.text.matcher.StringMatcherFactory.<staticinit>()",
        "org.apache.commons.text.matcher.StringMatcherFactory#stringMatcher(String)",
        "org.apache.commons.text.StringSubstitutor#setValueDelimiterMatcher(StringMatcher)"
    ],
    "org.apache.commons.text.translate.EntityArrays.<staticinit>()": ["org.apache.commons.text.translate.EntityArrays.invert(Map<CharSequence, CharSequence>)"],
    "org.apache.commons.text.lookup.StringLookupFactory#StringLookupFactory()": ["org.apache.commons.text.lookup.StringLookupFactory#StringLookupFactory(Path[])"],
    "org.apache.commons.text.StringSubstitutor.replace(Object,Map<String, V>,String,String)": [
        "org.apache.commons.text.StringSubstitutor#StringSubstitutor(Map<String, V>,String,String)",
        "org.apache.commons.text.StringSubstitutor#replace(Object)"
    ],
    "org.apache.commons.text.lookup.StringLookupFactory.DefaultStringLookupsHolder.createDefaultStringLookups()": [
        "org.apache.commons.text.lookup.StringLookupFactory.DefaultStringLookupsHolder.addLookup(DefaultStringLookup,Map<String, StringLookup>)",
        "org.apache.commons.text.lookup.DefaultStringLookup.<staticinit>()"
    ],
    "org.apache.commons.text.lookup.ConstantStringLookup.clear()": ["org.apache.commons.text.lookup.ConstantStringLookup.<staticinit>()"],
    "org.apache.commons.text.numbers.DoubleFormat.Builder.<init>()": ["org.apache.commons.text.numbers.DoubleFormat.Builder.<staticinit>()"],
    "org.apache.commons.text.lookup.AbstractStringLookup.toLookupKey(String,String)": [
        "org.apache.commons.text.lookup.AbstractStringLookup.<staticinit>()",
        "org.apache.commons.text.lookup.AbstractStringLookup.toLookupKey(String,String,String)"
    ],
    "org.apache.commons.text.translate.JavaUnicodeEscaper.below(int)": ["org.apache.commons.text.translate.JavaUnicodeEscaper.outsideOf(int,int)"],
    "org.apache.commons.text.StringTokenizer#toString()": ["org.apache.commons.text.StringTokenizer#getTokenList()"],
    "org.apache.commons.text.StrSubstitutor#replaceIn(StrBuilder,int,int)": ["org.apache.commons.text.StrSubstitutor#substitute(StrBuilder,int,int)"],
    "org.apache.commons.text.similarity.JaccardSimilarity#calculateJaccardSimilarity(CharSequence,CharSequence)": [
        "org.apache.commons.text.StrBuilder#charAt(int)",
        "org.apache.commons.text.TextStringBuilder#length()",
        "org.apache.commons.text.StrBuilder#length()",
        "org.apache.commons.text.TextStringBuilder#charAt(int)"
    ],
    "org.apache.commons.text.StrBuilder#insert(int,char[],int,int)": [
        "org.apache.commons.text.StrBuilder#validateIndex(int)",
        "org.apache.commons.text.StrBuilder#ensureCapacity(int)",
        "org.apache.commons.text.StrBuilder#insert(int,String)"
    ],
    "org.apache.commons.text.TextStringBuilder.TextStringBuilderWriter#write(String,int,int)": ["org.apache.commons.text.TextStringBuilder#append(String,int,int)"],
    "org.apache.commons.text.TextStringBuilder#ensureCapacity(int)": ["org.apache.commons.text.TextStringBuilder#ensureCapacityInternal(int)"],
    "org.apache.commons.text.StringSubstitutor#substitute(TextStringBuilder,int,int)": ["org.apache.commons.text.StringSubstitutor#substitute(TextStringBuilder,int,int,List<String>)"],
    "org.apache.commons.text.lookup.JavaPlatformStringLookup#getSystemProperty(String,String)": ["org.apache.commons.text.lookup.JavaPlatformStringLookup#getSystemProperty(String)"],
    "org.apache.commons.text.StrSubstitutor#resolveVariable(String,StrBuilder,int,int)": [
        "org.apache.commons.text.lookup.FunctionStringLookup#lookup(String)",
        "org.apache.commons.text.lookup.FileStringLookup#lookup(String)",
        "org.apache.commons.text.lookup.JavaPlatformStringLookup#lookup(String)",
        "org.apache.commons.text.StrLookup.MapStrLookup#lookup(String)",
        "org.apache.commons.text.lookup.ConstantStringLookup#lookup(String)",
        "org.apache.commons.text.lookup.XmlStringLookup#lookup(String)",
        "org.apache.commons.text.lookup.ScriptStringLookup#lookup(String)",
        "org.apache.commons.text.lookup.PropertiesStringLookup#lookup(String)",
        "org.apache.commons.text.lookup.BiFunctionStringLookup#lookup(String)",
        "org.apache.commons.text.lookup.InterpolatorStringLookup#lookup(String)",
        "org.apache.commons.text.lookup.LocalHostStringLookup#lookup(String)",
        "org.apache.commons.text.lookup.DnsStringLookup#lookup(String)",
        "org.apache.commons.text.StrLookup.SystemPropertiesStrLookup#lookup(String)",
        "org.apache.commons.text.StrLookup.ResourceBundleLookup#lookup(String)",
        "org.apache.commons.text.StrSubstitutor#getVariableResolver()",
        "org.apache.commons.text.lookup.DateStringLookup#lookup(String)",
        "org.apache.commons.text.lookup.XmlDecoderStringLookup#lookup(String)",
        "org.apache.commons.text.lookup.XmlEncoderStringLookup#lookup(String)",
        "org.apache.commons.text.lookup.UrlStringLookup#lookup(String)",
        "org.apache.commons.text.lookup.ResourceBundleStringLookup#lookup(String)",
        "org.apache.commons.text.lookup.UrlDecoderStringLookup#lookup(String)",
        "org.apache.commons.text.lookup.UrlEncoderStringLookup#lookup(String)"
    ],
    "org.apache.commons.text.AlphabetConverter#toString()": [
        "org.apache.commons.text.AlphabetConverter.codePointToString(int)",
        "org.apache.commons.text.AlphabetConverter.<staticinit>()"
    ],
    "org.apache.commons.text.TextStringBuilder#getChars(char[])": ["org.apache.commons.text.TextStringBuilder#length()"],
    "org.apache.commons.text.matcher.StringMatcherFactory#trimMatcher()": ["org.apache.commons.text.matcher.StringMatcherFactory.<staticinit>()"],
    "org.apache.commons.text.StrMatcher.commaMatcher()": ["org.apache.commons.text.StrMatcher.<staticinit>()"],
    "org.apache.commons.text.StringTokenizer.getCSVInstance(char[])": [
        "org.apache.commons.text.StringTokenizer.getCSVClone()",
        "org.apache.commons.text.StringTokenizer#reset(char[])"
    ],
    "org.apache.commons.text.numbers.DoubleFormat.EngineeringDoubleFormat#EngineeringDoubleFormat(Builder)": [
        "org.apache.commons.text.numbers.DoubleFormat.EngineeringDoubleFormat.<init>()",
        "org.apache.commons.text.numbers.DoubleFormat.AbstractDoubleFormat#AbstractDoubleFormat(Builder)"
    ],
    "org.apache.commons.text.TextStringBuilder.createPositiveCapacity(int)": ["org.apache.commons.text.TextStringBuilder.<staticinit>()"],
    "org.apache.commons.text.RandomStringGenerator#RandomStringGenerator(int,int,Set<CharacterPredicate>,TextRandomProvider,List<Character>)": ["org.apache.commons.text.RandomStringGenerator.<init>()"],
    "org.apache.commons.text.StrBuilder#insert(int,int)": ["org.apache.commons.text.StrBuilder#insert(int,char)"],
    "org.apache.commons.text.TextStringBuilder#deleteAll(char)": ["org.apache.commons.text.TextStringBuilder#deleteImpl(int,int,int)"],
    "org.apache.commons.text.StrTokenizer#readNextToken(char[],int,int,StrBuilder,List<String>)": [
        "org.apache.commons.text.StrMatcher.NoMatcher#isMatch(char[],int,int,int)",
        "org.apache.commons.text.StrTokenizer#addToken(List<String>,String)",
        "org.apache.commons.text.StrMatcher.CharSetMatcher#isMatch(char[],int,int,int)",
        "org.apache.commons.text.StrTokenizer#getTrimmerMatcher()",
        "org.apache.commons.text.StrTokenizer#getDelimiterMatcher()",
        "org.apache.commons.text.StrTokenizer#getIgnoredMatcher()",
        "org.apache.commons.text.StrMatcher.CharMatcher#isMatch(char[],int,int,int)",
        "org.apache.commons.text.StrMatcher.TrimMatcher#isMatch(char[],int,int,int)",
        "org.apache.commons.text.StrTokenizer#getQuoteMatcher()",
        "org.apache.commons.text.StrMatcher.StringMatcher#isMatch(char[],int,int,int)",
        "org.apache.commons.text.StrTokenizer#readWithQuotes(char[],int,int,StrBuilder,List<String>,int,int)"
    ],
    "org.apache.commons.text.diff.DeleteCommand#accept(CommandVisitor<T>)": [
        "org.apache.commons.text.diff.ReplacementsFinder#visitDeleteCommand(T)",
        "org.apache.commons.text.diff.EditCommand#getObject()"
    ],
    "org.apache.commons.text.StrSubstitutor#replace(CharSequence)": [
        "org.apache.commons.text.TextStringBuilder#length()",
        "org.apache.commons.text.StrBuilder#length()",
        "org.apache.commons.text.StrSubstitutor#replace(CharSequence,int,int)"
    ],
    "org.apache.commons.text.RandomStringGenerator.Builder.<init>()": ["org.apache.commons.text.RandomStringGenerator.Builder.<staticinit>()"],
    "org.apache.commons.text.StrBuilder#appendFixedWidthPadRight(Object,int,char)": [
        "org.apache.commons.text.lookup.ResourceBundleStringLookup#toString()",
        "org.apache.commons.text.StrBuilder#ensureCapacity(int)",
        "org.apache.commons.text.matcher.AbstractStringMatcher.CharMatcher#toString()",
        "org.apache.commons.text.StrLookup.MapStrLookup#toString()",
        "org.apache.commons.text.lookup.InterpolatorStringLookup#toString()",
        "org.apache.commons.text.matcher.AbstractStringMatcher.CharArrayMatcher#toString()",
        "org.apache.commons.text.StrBuilder#getNullText()",
        "org.apache.commons.text.StrLookup.ResourceBundleLookup#toString()",
        "org.apache.commons.text.matcher.AbstractStringMatcher.CharSetMatcher#toString()",
        "org.apache.commons.text.lookup.FunctionStringLookup#toString()",
        "org.apache.commons.text.StrMatcher.StringMatcher#toString()"
    ],
    "org.apache.commons.text.StrTokenizer#getTokenArray()": ["org.apache.commons.text.StrTokenizer#checkTokenized()"],
    "org.apache.commons.text.similarity.FuzzyScore#fuzzyScore(CharSequence,CharSequence)": [
        "org.apache.commons.text.TextStringBuilder#toString()",
        "org.apache.commons.text.StrBuilder#toString()"
    ],
    "org.apache.commons.text.StrMatcher.NoMatcher#NoMatcher()": [
        "org.apache.commons.text.StrMatcher.NoMatcher.<init>()",
        "org.apache.commons.text.StrMatcher#StrMatcher()"
    ],
    "org.apache.commons.text.similarity.JaroWinklerSimilarity.<staticinit>()": ["org.apache.commons.text.similarity.JaroWinklerSimilarity.<init>()"],
    "org.apache.commons.text.StringSubstitutor#StringSubstitutor(Map<String, V>,String,String,char)": [
        "org.apache.commons.text.lookup.StringLookupFactory.<staticinit>()",
        "org.apache.commons.text.lookup.StringLookupFactory#mapStringLookup(Map<String, V>)",
        "org.apache.commons.text.StringSubstitutor#StringSubstitutor(StringLookup,String,String,char)"
    ],
    "org.apache.commons.text.similarity.LevenshteinDetailedDistance.getDefaultInstance()": ["org.apache.commons.text.similarity.LevenshteinDetailedDistance.<staticinit>()"],
    "org.apache.commons.text.numbers.ParsedDecimal#toScientificString(int,FormatOptions)": [
        "org.apache.commons.text.numbers.ParsedDecimal.<staticinit>()",
        "org.apache.commons.text.numbers.DoubleFormat.AbstractDoubleFormat#getDigits()",
        "org.apache.commons.text.numbers.ParsedDecimal#outputString()",
        "org.apache.commons.text.numbers.ParsedDecimal#append(char[])",
        "org.apache.commons.text.numbers.ParsedDecimal#getDigitStringSize(int,FormatOptions)",
        "org.apache.commons.text.numbers.ParsedDecimal#append(char)",
        "org.apache.commons.text.numbers.DoubleFormat.AbstractDoubleFormat#getMinusSign()",
        "org.apache.commons.text.numbers.ParsedDecimal#prepareOutput(int)",
        "org.apache.commons.text.numbers.ParsedDecimal#appendFraction(int,int,FormatOptions)",
        "org.apache.commons.text.numbers.ParsedDecimal#shouldIncludeExponent(int,FormatOptions)",
        "org.apache.commons.text.numbers.ParsedDecimal#appendWhole(int,FormatOptions)",
        "org.apache.commons.text.numbers.DoubleFormat.AbstractDoubleFormat#getExponentSeparatorChars()"
    ],
    "org.apache.commons.text.TextStringBuilder#TextStringBuilder(char[],int)": ["org.apache.commons.text.TextStringBuilder.<init>()"],
    "org.apache.commons.text.TextStringBuilder#appendSeparator(String)": ["org.apache.commons.text.TextStringBuilder#appendSeparator(String,int)"],
    "org.apache.commons.text.matcher.StringMatcherFactory#charSetMatcher(String)": [
        "org.apache.commons.text.matcher.StringMatcherFactory.<staticinit>()",
        "org.apache.commons.text.matcher.AbstractStringMatcher.CharMatcher#CharMatcher(char)",
        "org.apache.commons.text.matcher.AbstractStringMatcher.CharSetMatcher#CharSetMatcher(char[])"
    ],
    "org.apache.commons.text.TextStringBuilder#readFrom(Reader)": [
        "org.apache.commons.text.TextStringBuilder.TextStringBuilderReader#read(char[],int,int)",
        "org.apache.commons.text.TextStringBuilder#ensureCapacityInternal(int)",
        "org.apache.commons.text.TextStringBuilder.<staticinit>()",
        "org.apache.commons.text.StrBuilder.StrBuilderReader#read(char[],int,int)"
    ],
    "org.apache.commons.text.StrBuilder.StrBuilderReader#ready()": ["org.apache.commons.text.StrBuilder#size()"],
    "org.apache.commons.text.StringTokenizer#StringTokenizer(char[])": ["org.apache.commons.text.StringTokenizer.<init>()"],
    "org.apache.commons.text.StrTokenizer#setDelimiterString(String)": [
        "org.apache.commons.text.StrTokenizer#setDelimiterMatcher(StrMatcher)",
        "org.apache.commons.text.StrMatcher.stringMatcher(String)"
    ],
    "org.apache.commons.text.translate.CharSequenceTranslator#with(CharSequenceTranslator[]...)": ["org.apache.commons.text.translate.AggregateTranslator#AggregateTranslator(CharSequenceTranslator[]...)"],
    "org.apache.commons.text.StrBuilder#contains(String)": ["org.apache.commons.text.StrBuilder#indexOf(String,int)"],
    "org.apache.commons.text.StringTokenizer.<init>()": [
        "org.apache.commons.text.matcher.StringMatcherFactory.<staticinit>()",
        "org.apache.commons.text.matcher.StringMatcherFactory#noneMatcher()",
        "org.apache.commons.text.matcher.StringMatcherFactory#splitMatcher()"
    ],
    "org.apache.commons.text.TextStringBuilder#delete(int,int)": [
        "org.apache.commons.text.TextStringBuilder#deleteImpl(int,int,int)",
        "org.apache.commons.text.TextStringBuilder#validateRange(int,int)"
    ],
    "org.apache.commons.text.numbers.DoubleFormat#DoubleFormat(Function<Builder, DoubleFunction<String>>)": ["org.apache.commons.text.numbers.DoubleFormat.<init>()"],
    "org.apache.commons.text.StrSubstitutor#StrSubstitutor(Map<String, V>)": [
        "org.apache.commons.text.StrSubstitutor.<staticinit>()",
        "org.apache.commons.text.StrSubstitutor#StrSubstitutor(StrLookup<?>,StrMatcher,StrMatcher,char)",
        "org.apache.commons.text.StrLookup.mapLookup(Map<String, V>)"
    ],
    "org.apache.commons.text.StrBuilder#minimizeCapacity()": ["org.apache.commons.text.StrBuilder#length()"],
    "org.apache.commons.text.TextStringBuilder#append(Object)": [
        "org.apache.commons.text.lookup.ResourceBundleStringLookup#toString()",
        "org.apache.commons.text.TextStringBuilder#appendNull()",
        "org.apache.commons.text.matcher.AbstractStringMatcher.CharMatcher#toString()",
        "org.apache.commons.text.StrLookup.MapStrLookup#toString()",
        "org.apache.commons.text.lookup.InterpolatorStringLookup#toString()",
        "org.apache.commons.text.matcher.AbstractStringMatcher.CharArrayMatcher#toString()",
        "org.apache.commons.text.TextStringBuilder#append(char)",
        "org.apache.commons.text.TextStringBuilder#append(CharSequence)",
        "org.apache.commons.text.StrLookup.ResourceBundleLookup#toString()",
        "org.apache.commons.text.matcher.AbstractStringMatcher.CharSetMatcher#toString()",
        "org.apache.commons.text.lookup.FunctionStringLookup#toString()",
        "org.apache.commons.text.StrMatcher.StringMatcher#toString()"
    ],
    "org.apache.commons.text.numbers.ParsedDecimal#requiresGroupingSeparatorAfterPosition(int)": ["org.apache.commons.text.numbers.ParsedDecimal.<staticinit>()"],
    "org.apache.commons.text.StrBuilder#append(StringBuilder,int,int)": [
        "org.apache.commons.text.StrBuilder#ensureCapacity(int)",
        "org.apache.commons.text.StrBuilder#length()",
        "org.apache.commons.text.StrBuilder#appendNull()"
    ],
    "org.apache.commons.text.diff.KeepCommand#accept(CommandVisitor<T>)": [
        "org.apache.commons.text.diff.ReplacementsFinder#visitKeepCommand(T)",
        "org.apache.commons.text.diff.EditCommand#getObject()"
    ],
    "org.apache.commons.text.StrTokenizer.getTSVInstance(char[])": [
        "org.apache.commons.text.StrTokenizer.getTSVClone()",
        "org.apache.commons.text.StrTokenizer#reset(char[])"
    ],
    "org.apache.commons.text.TextStringBuilder#appendFixedWidthPadLeft(int,int,char)": ["org.apache.commons.text.TextStringBuilder#appendFixedWidthPadLeft(int,int,char)"],
    "org.apache.commons.text.similarity.SimilarityScoreFrom#SimilarityScoreFrom(SimilarityScore<R>,CharSequence)": ["org.apache.commons.text.similarity.SimilarityScoreFrom.<init>()"],
    "org.apache.commons.text.StrBuilder#appendNull()": ["org.apache.commons.text.StrBuilder#append(String)"],
    "org.apache.commons.text.TextStringBuilder#append(String)": ["org.apache.commons.text.TextStringBuilder#append(String,int,int)"],
    "org.apache.commons.text.StrBuilder#substring(int)": ["org.apache.commons.text.StrBuilder#substring(int,int)"],
    "org.apache.commons.text.lookup.FunctionStringLookup#FunctionStringLookup(Function<String, V>)": [
        "org.apache.commons.text.lookup.AbstractStringLookup.<init>()",
        "org.apache.commons.text.lookup.FunctionStringLookup.<init>()"
    ],
    "org.apache.commons.text.StrMatcher.trimMatcher()": ["org.apache.commons.text.StrMatcher.<staticinit>()"],
    "org.apache.commons.text.lookup.JavaPlatformStringLookup#lookup(String)": [
        "org.apache.commons.text.lookup.JavaPlatformStringLookup.<staticinit>()",
        "org.apache.commons.text.lookup.JavaPlatformStringLookup#getLocale()",
        "org.apache.commons.text.lookup.JavaPlatformStringLookup#getOperatingSystem()",
        "org.apache.commons.text.lookup.JavaPlatformStringLookup#getRuntime()",
        "org.apache.commons.text.lookup.JavaPlatformStringLookup#getHardware()",
        "org.apache.commons.text.lookup.JavaPlatformStringLookup#getSystemProperty(String)",
        "org.apache.commons.text.lookup.JavaPlatformStringLookup#getVirtualMachine()"
    ],
    "org.apache.commons.text.StrBuilder#lastIndexOf(String,int)": ["org.apache.commons.text.StrBuilder#lastIndexOf(StrMatcher,int)"],
    "org.apache.commons.text.lookup.StringLookupFactory.DefaultStringLookupsHolder.parseStringLookups(String)": ["org.apache.commons.text.lookup.StringLookupFactory.DefaultStringLookupsHolder.addLookup(DefaultStringLookup,Map<String, StringLookup>)"],
    "org.apache.commons.text.StrMatcher#StrMatcher()": ["org.apache.commons.text.StrMatcher.<init>()"],
    "org.apache.commons.text.similarity.HammingDistance#apply(CharSequence,CharSequence)": [
        "org.apache.commons.text.TextStringBuilder#length()",
        "org.apache.commons.text.StrBuilder#charAt(int)",
        "org.apache.commons.text.StrBuilder#length()",
        "org.apache.commons.text.TextStringBuilder#charAt(int)"
    ],
    "org.apache.commons.text.lookup.BiStringLookup#lookup(String,U)": [
        "org.apache.commons.text.lookup.FunctionStringLookup#lookup(String)",
        "org.apache.commons.text.lookup.FileStringLookup#lookup(String)",
        "org.apache.commons.text.lookup.JavaPlatformStringLookup#lookup(String)",
        "org.apache.commons.text.StrLookup.MapStrLookup#lookup(String)",
        "org.apache.commons.text.lookup.ConstantStringLookup#lookup(String)",
        "org.apache.commons.text.lookup.XmlStringLookup#lookup(String)",
        "org.apache.commons.text.lookup.ScriptStringLookup#lookup(String)",
        "org.apache.commons.text.lookup.PropertiesStringLookup#lookup(String)",
        "org.apache.commons.text.lookup.BiFunctionStringLookup#lookup(String)",
        "org.apache.commons.text.lookup.InterpolatorStringLookup#lookup(String)",
        "org.apache.commons.text.lookup.LocalHostStringLookup#lookup(String)",
        "org.apache.commons.text.lookup.DnsStringLookup#lookup(String)",
        "org.apache.commons.text.StrLookup.SystemPropertiesStrLookup#lookup(String)",
        "org.apache.commons.text.StrLookup.ResourceBundleLookup#lookup(String)",
        "org.apache.commons.text.lookup.DateStringLookup#lookup(String)",
        "org.apache.commons.text.lookup.XmlDecoderStringLookup#lookup(String)",
        "org.apache.commons.text.lookup.XmlEncoderStringLookup#lookup(String)",
        "org.apache.commons.text.lookup.UrlStringLookup#lookup(String)",
        "org.apache.commons.text.lookup.ResourceBundleStringLookup#lookup(String)",
        "org.apache.commons.text.lookup.UrlDecoderStringLookup#lookup(String)",
        "org.apache.commons.text.lookup.UrlEncoderStringLookup#lookup(String)"
    ],
    "org.apache.commons.text.TextStringBuilder#TextStringBuilder(CharSequence)": [
        "org.apache.commons.text.TextStringBuilder#append(CharSequence)",
        "org.apache.commons.text.TextStringBuilder.<staticinit>()",
        "org.apache.commons.text.TextStringBuilder#TextStringBuilder(int)"
    ],
    "org.apache.commons.text.WordUtils.uncapitalize(String,char[]...)": ["org.apache.commons.text.WordUtils.generateIsDelimiterFunction(char[])"],
    "org.apache.commons.text.TextStringBuilder#appendln(TextStringBuilder)": [
        "org.apache.commons.text.TextStringBuilder#append(TextStringBuilder)",
        "org.apache.commons.text.TextStringBuilder#appendNewLine()"
    ],
    "org.apache.commons.text.ExtendedMessageFormat#parseFormatDescription(String,ParsePosition)": [
        "org.apache.commons.text.ExtendedMessageFormat.<staticinit>()",
        "org.apache.commons.text.ExtendedMessageFormat#next(ParsePosition)",
        "org.apache.commons.text.ExtendedMessageFormat#seekNonWs(String,ParsePosition)",
        "org.apache.commons.text.ExtendedMessageFormat#getQuotedString(String,ParsePosition)"
    ],
    "org.apache.commons.text.similarity.IntersectionSimilarity.BagCount.<staticinit>()": ["org.apache.commons.text.similarity.IntersectionSimilarity.BagCount#BagCount()"],
    "org.apache.commons.text.StrBuilder#build()": ["org.apache.commons.text.StrBuilder#toString()"],
    "org.apache.commons.text.StrBuilder#append(char[],int,int)": [
        "org.apache.commons.text.StrBuilder#ensureCapacity(int)",
        "org.apache.commons.text.StrBuilder#length()",
        "org.apache.commons.text.StrBuilder#appendNull()"
    ],
    "org.apache.commons.text.lookup.StringLookupFactory#interpolatorStringLookup(Map<String, StringLookup>,StringLookup,boolean)": ["org.apache.commons.text.lookup.InterpolatorStringLookup#InterpolatorStringLookup(Map<String, StringLookup>,StringLookup,boolean)"],
    "org.apache.commons.text.similarity.JaroWinklerSimilarity.matches(CharSequence,CharSequence)": [
        "org.apache.commons.text.StrBuilder#charAt(int)",
        "org.apache.commons.text.TextStringBuilder#length()",
        "org.apache.commons.text.StrBuilder#length()",
        "org.apache.commons.text.TextStringBuilder#charAt(int)"
    ],
    "org.apache.commons.text.lookup.StringLookupFactory#mapStringLookup(Map<String, V>)": ["org.apache.commons.text.lookup.FunctionStringLookup.on(Map<String, V>)"],
    "org.apache.commons.text.StrBuilder#asWriter()": ["org.apache.commons.text.StrBuilder.StrBuilderWriter#StrBuilderWriter()"],
    "org.apache.commons.text.lookup.StringLookupFactory#dnsStringLookup()": [
        "org.apache.commons.text.lookup.StringLookupFactory.<staticinit>()",
        "org.apache.commons.text.lookup.DnsStringLookup.<staticinit>()"
    ],
    "org.apache.commons.text.numbers.DoubleFormat.Builder#Builder(Function<Builder, DoubleFunction<String>>)": ["org.apache.commons.text.numbers.DoubleFormat.Builder.<init>()"],
    "org.apache.commons.text.numbers.ParsedDecimal#getPlainStringSize(int,FormatOptions)": [
        "org.apache.commons.text.numbers.ParsedDecimal#getDigitStringSize(int,FormatOptions)",
        "org.apache.commons.text.numbers.DoubleFormat.AbstractDoubleFormat#isGroupThousands()",
        "org.apache.commons.text.numbers.ParsedDecimal.<staticinit>()"
    ],
    "org.apache.commons.text.StrTokenizer#checkTokenized()": [
        "org.apache.commons.text.StrBuilder.StrBuilderTokenizer#tokenize(char[],int,int)",
        "org.apache.commons.text.StrTokenizer#tokenize(char[],int,int)"
    ],
    "org.apache.commons.text.TextStringBuilder#appendSeparator(char,int)": ["org.apache.commons.text.TextStringBuilder#append(char)"],
    "org.apache.commons.text.matcher.AbstractStringMatcher.CharArrayMatcher#CharArrayMatcher(char[]...)": [
        "org.apache.commons.text.matcher.AbstractStringMatcher.CharArrayMatcher.<init>()",
        "org.apache.commons.text.matcher.AbstractStringMatcher#AbstractStringMatcher()"
    ],
    "org.apache.commons.text.TextStringBuilder#appendSeparator(char)": [
        "org.apache.commons.text.TextStringBuilder#isNotEmpty()",
        "org.apache.commons.text.TextStringBuilder#append(char)"
    ],
    "org.apache.commons.text.StrTokenizer#getTokenList()": ["org.apache.commons.text.StrTokenizer#checkTokenized()"],
    "org.apache.commons.text.TextStringBuilder#deleteFirst(char)": ["org.apache.commons.text.TextStringBuilder#deleteImpl(int,int,int)"],
    "org.apache.commons.text.TextStringBuilder#append(TextStringBuilder)": ["org.apache.commons.text.TextStringBuilder#append(TextStringBuilder,int,int)"],
    "org.apache.commons.text.similarity.LongestCommonSubsequence#longestCommonSubsequence(CharSequence,CharSequence)": [
        "org.apache.commons.text.TextStringBuilder#length()",
        "org.apache.commons.text.similarity.LongestCommonSubsequence.algorithmC(CharSequence,CharSequence)",
        "org.apache.commons.text.StrBuilder#length()"
    ],
    "org.apache.commons.text.StringSubstitutor#replace(CharSequence)": [
        "org.apache.commons.text.TextStringBuilder#length()",
        "org.apache.commons.text.StrBuilder#length()",
        "org.apache.commons.text.StringSubstitutor#replace(CharSequence,int,int)"
    ],
    "org.apache.commons.text.matcher.AbstractStringMatcher.TrimMatcher#isMatch(char[],int,int,int)": ["org.apache.commons.text.matcher.AbstractStringMatcher.TrimMatcher.<staticinit>()"],
    "org.apache.commons.text.TextStringBuilder#getChars(int,int,char[],int)": ["org.apache.commons.text.TextStringBuilder#length()"],
    "org.apache.commons.text.WordUtils#WordUtils()": ["org.apache.commons.text.WordUtils.<init>()"],
    "org.apache.commons.text.StrBuilder#getChars(int,int,char[],int)": ["org.apache.commons.text.StrBuilder#length()"],
    "org.apache.commons.text.TextStringBuilder#insert(int,char[])": [
        "org.apache.commons.text.TextStringBuilder#insert(int,String)",
        "org.apache.commons.text.TextStringBuilder#ensureCapacityInternal(int)",
        "org.apache.commons.text.TextStringBuilder#validateIndex(int)"
    ],
    "org.apache.commons.text.StringSubstitutor.createInterpolator()": [
        "org.apache.commons.text.lookup.StringLookupFactory#interpolatorStringLookup()",
        "org.apache.commons.text.lookup.StringLookupFactory.<staticinit>()",
        "org.apache.commons.text.StringSubstitutor#StringSubstitutor(StringLookup)"
    ],
    "org.apache.commons.text.FormattableUtils.append(CharSequence,Formatter,int,int,int,char)": ["org.apache.commons.text.FormattableUtils.append(CharSequence,Formatter,int,int,int,char,CharSequence)"],
    "org.apache.commons.text.TextStringBuilder#appendNewLine()": [
        "org.apache.commons.text.TextStringBuilder#append(String)",
        "org.apache.commons.text.TextStringBuilder#append(char)"
    ],
    "org.apache.commons.text.StrSubstitutor#StrSubstitutor()": [
        "org.apache.commons.text.StrSubstitutor.<staticinit>()",
        "org.apache.commons.text.StrSubstitutor#StrSubstitutor(StrLookup<?>,StrMatcher,StrMatcher,char)"
    ],
    "org.apache.commons.text.StrTokenizer#cloneReset()": ["org.apache.commons.text.StrTokenizer#reset()"],
    "org.apache.commons.text.translate.OctalUnescaper.<init>()": ["org.apache.commons.text.translate.CharSequenceTranslator.<init>()"],
    "org.apache.commons.text.translate.SinglePassTranslator#translate(CharSequence,int,Writer)": [
        "org.apache.commons.text.translate.CsvTranslators.CsvUnescaper#translateWhole(CharSequence,Writer)",
        "org.apache.commons.text.TextStringBuilder#length()",
        "org.apache.commons.text.StrBuilder#length()",
        "org.apache.commons.text.translate.CsvTranslators.CsvEscaper#translateWhole(CharSequence,Writer)",
        "org.apache.commons.text.translate.SinglePassTranslator#getClassName()"
    ],
    "org.apache.commons.text.FormattableUtils#FormattableUtils()": ["org.apache.commons.text.FormattableUtils.<init>()"],
    "org.apache.commons.text.TextStringBuilder#asWriter()": ["org.apache.commons.text.TextStringBuilder.TextStringBuilderWriter#TextStringBuilderWriter()"],
    "org.apache.commons.text.translate.NumericEntityEscaper.outsideOf(int,int)": ["org.apache.commons.text.translate.NumericEntityEscaper#NumericEntityEscaper(int,int,boolean)"],
    "org.apache.commons.text.TextStringBuilder#appendln(String,int,int)": [
        "org.apache.commons.text.TextStringBuilder#append(String,int,int)",
        "org.apache.commons.text.TextStringBuilder#appendNewLine()"
    ],
    "org.apache.commons.text.TextStringBuilder#readFrom(CharBuffer)": ["org.apache.commons.text.TextStringBuilder#ensureCapacityInternal(int)"],
    "org.apache.commons.text.StrSubstitutor#replace(Object)": [
        "org.apache.commons.text.StrBuilder#append(Object)",
        "org.apache.commons.text.StrBuilder#length()",
        "org.apache.commons.text.StrBuilder#toString()",
        "org.apache.commons.text.StrSubstitutor#substitute(StrBuilder,int,int)",
        "org.apache.commons.text.StrBuilder#StrBuilder()"
    ],
    "org.apache.commons.text.StringSubstitutor#replace(char[])": [
        "org.apache.commons.text.StringSubstitutor#substitute(TextStringBuilder,int,int)",
        "org.apache.commons.text.TextStringBuilder#TextStringBuilder(int)",
        "org.apache.commons.text.TextStringBuilder#append(char[])",
        "org.apache.commons.text.TextStringBuilder#toString()"
    ],
    "org.apache.commons.text.translate.CodePointTranslator.<init>()": ["org.apache.commons.text.translate.CharSequenceTranslator.<init>()"],
    "org.apache.commons.text.TextStringBuilder.TextStringBuilderWriter#write(char[],int,int)": ["org.apache.commons.text.TextStringBuilder#append(char[],int,int)"],
    "org.apache.commons.text.StringEscapeUtils.unescapeXSI(String)": [
        "org.apache.commons.text.StringEscapeUtils.<staticinit>()",
        "org.apache.commons.text.translate.CharSequenceTranslator#translate(CharSequence)"
    ],
    "org.apache.commons.text.StrBuilder#append(String,Object[]...)": ["org.apache.commons.text.StrBuilder#append(float)"],
    "org.apache.commons.text.StringEscapeUtils.unescapeEcmaScript(String)": [
        "org.apache.commons.text.StringEscapeUtils.<staticinit>()",
        "org.apache.commons.text.translate.CharSequenceTranslator#translate(CharSequence)"
    ],
    "org.apache.commons.text.StrBuilder#indexOf(String,int)": ["org.apache.commons.text.StrBuilder#indexOf(String,int)"],
    "org.apache.commons.text.StrBuilder#append(double)": ["org.apache.commons.text.StrBuilder#append(float)"],
    "org.apache.commons.text.TextStringBuilder#replaceFirst(StringMatcher,String)": ["org.apache.commons.text.TextStringBuilder#replace(StringMatcher,String,int,int,int)"],
    "org.apache.commons.text.TextStringBuilder#resizeBuffer(int)": [
        "org.apache.commons.text.TextStringBuilder.createPositiveCapacity(int)",
        "org.apache.commons.text.TextStringBuilder#reallocate(int)",
        "org.apache.commons.text.TextStringBuilder.<staticinit>()"
    ],
    "org.apache.commons.text.StrBuilder#replaceImpl(StrMatcher,String,int,int,int)": [
        "org.apache.commons.text.StrMatcher.NoMatcher#isMatch(char[],int,int,int)",
        "org.apache.commons.text.StrMatcher.TrimMatcher#isMatch(char[],int,int,int)",
        "org.apache.commons.text.StrMatcher.CharSetMatcher#isMatch(char[],int,int,int)",
        "org.apache.commons.text.StrBuilder#replaceImpl(int,int,int,String,int)",
        "org.apache.commons.text.StrMatcher.StringMatcher#isMatch(char[],int,int,int)",
        "org.apache.commons.text.StrMatcher.CharMatcher#isMatch(char[],int,int,int)"
    ],
    "org.apache.commons.text.StrMatcher.splitMatcher()": ["org.apache.commons.text.StrMatcher.<staticinit>()"],
    "org.apache.commons.text.StringTokenizer#setDelimiterString(String)": [
        "org.apache.commons.text.matcher.StringMatcherFactory.<staticinit>()",
        "org.apache.commons.text.matcher.StringMatcherFactory#stringMatcher(String)",
        "org.apache.commons.text.StringTokenizer#setDelimiterMatcher(StringMatcher)"
    ],
    "org.apache.commons.text.translate.UnicodeUnescaper#translate(CharSequence,int,Writer)": [
        "org.apache.commons.text.TextStringBuilder#length()",
        "org.apache.commons.text.StrBuilder#toString()",
        "org.apache.commons.text.TextStringBuilder#toString()",
        "org.apache.commons.text.TextStringBuilder#subSequence(int,int)",
        "org.apache.commons.text.StrBuilder#charAt(int)",
        "org.apache.commons.text.StrBuilder#length()",
        "org.apache.commons.text.TextStringBuilder#charAt(int)",
        "org.apache.commons.text.StrBuilder#subSequence(int,int)"
    ],
    "org.apache.commons.text.TextStringBuilder#appendSeparator(String,int)": ["org.apache.commons.text.TextStringBuilder#append(String)"],
    "org.apache.commons.text.numbers.ParsedDecimal#maxPrecision(int)": [
        "org.apache.commons.text.numbers.ParsedDecimal#shouldRoundUp(int)",
        "org.apache.commons.text.numbers.ParsedDecimal#roundUp(int)",
        "org.apache.commons.text.numbers.ParsedDecimal#truncate(int)"
    ],
    "org.apache.commons.text.StringSubstitutor#replace(StringBuffer)": [
        "org.apache.commons.text.TextStringBuilder#append(StringBuffer)",
        "org.apache.commons.text.TextStringBuilder#length()",
        "org.apache.commons.text.StringSubstitutor#substitute(TextStringBuilder,int,int)",
        "org.apache.commons.text.TextStringBuilder#TextStringBuilder(String)",
        "org.apache.commons.text.TextStringBuilder#toString()"
    ],
    "org.apache.commons.text.StrBuilder#appendln(char[],int,int)": [
        "org.apache.commons.text.StrBuilder#appendNewLine()",
        "org.apache.commons.text.StrBuilder#append(char[],int,int)"
    ],
    "org.apache.commons.text.lookup.PropertiesStringLookup.<staticinit>()": ["org.apache.commons.text.lookup.PropertiesStringLookup#PropertiesStringLookup(Path[]...)"],
    "org.apache.commons.text.similarity.LevenshteinDistance.unlimitedCompare(CharSequence,CharSequence)": [
        "org.apache.commons.text.StrBuilder#charAt(int)",
        "org.apache.commons.text.TextStringBuilder#length()",
        "org.apache.commons.text.StrBuilder#length()",
        "org.apache.commons.text.TextStringBuilder#charAt(int)"
    ],
    "org.apache.commons.text.diff.KeepCommand#KeepCommand(T)": [
        "org.apache.commons.text.diff.EditCommand#EditCommand(T)",
        "org.apache.commons.text.diff.KeepCommand.<init>()"
    ],
    "org.apache.commons.text.TextStringBuilder#append(String,Object[]...)": ["org.apache.commons.text.TextStringBuilder#append(char)"],
    "org.apache.commons.text.matcher.AbstractStringMatcher.CharSetMatcher#isMatch(CharSequence,int,int,int)": [
        "org.apache.commons.text.StrBuilder#charAt(int)",
        "org.apache.commons.text.TextStringBuilder#charAt(int)"
    ],
    "org.apache.commons.text.StringTokenizer#getTokenArray()": ["org.apache.commons.text.StringTokenizer#checkTokenized()"],
    "org.apache.commons.text.ExtendedMessageFormat#readArgumentIndex(String,ParsePosition)": [
        "org.apache.commons.text.ExtendedMessageFormat#next(ParsePosition)",
        "org.apache.commons.text.ExtendedMessageFormat#seekNonWs(String,ParsePosition)",
        "org.apache.commons.text.ExtendedMessageFormat.<staticinit>()"
    ],
    "org.apache.commons.text.lookup.FileStringLookup#FileStringLookup(Path[]...)": [
        "org.apache.commons.text.lookup.AbstractPathFencedLookup#AbstractPathFencedLookup(Path[]...)",
        "org.apache.commons.text.lookup.FileStringLookup.<init>()"
    ],
    "org.apache.commons.text.TextStringBuilder#lastIndexOf(StringMatcher,int)": [
        "org.apache.commons.text.matcher.AbstractStringMatcher.CharSetMatcher#isMatch(char[],int,int,int)",
        "org.apache.commons.text.matcher.AbstractStringMatcher.CharMatcher#isMatch(char[],int,int,int)",
        "org.apache.commons.text.matcher.AbstractStringMatcher.AndStringMatcher#isMatch(char[],int,int,int)",
        "org.apache.commons.text.matcher.AbstractStringMatcher.TrimMatcher#isMatch(char[],int,int,int)",
        "org.apache.commons.text.matcher.AbstractStringMatcher.CharArrayMatcher#isMatch(char[],int,int,int)",
        "org.apache.commons.text.matcher.AbstractStringMatcher.NoneMatcher#isMatch(char[],int,int,int)"
    ],
    "org.apache.commons.text.numbers.DoubleFormat.Builder#get()": ["org.apache.commons.text.similarity.RegexTokenizer#apply(CharSequence)"],
    "org.apache.commons.text.StrSubstitutor#setValueDelimiter(char)": [
        "org.apache.commons.text.StrMatcher.charMatcher(char)",
        "org.apache.commons.text.StrSubstitutor#setValueDelimiterMatcher(StrMatcher)"
    ],
    "org.apache.commons.text.TextStringBuilder#append(CharSequence,int,int)": [
        "org.apache.commons.text.StrBuilder#toString()",
        "org.apache.commons.text.TextStringBuilder#appendNull()",
        "org.apache.commons.text.TextStringBuilder#toString()",
        "org.apache.commons.text.TextStringBuilder#append(char[],int,int)"
    ],
    "org.apache.commons.text.StrTokenizer.getTSVClone()": [
        "org.apache.commons.text.StrTokenizer#clone()",
        "org.apache.commons.text.StrTokenizer.<staticinit>()"
    ],
    "org.apache.commons.text.StrBuilder#deleteFirst(StrMatcher)": ["org.apache.commons.text.StrBuilder#replace(StrMatcher,String,int,int,int)"],
    "org.apache.commons.text.StrBuilder#lastIndexOf(StrMatcher)": ["org.apache.commons.text.StrBuilder#lastIndexOf(StrMatcher,int)"],
    "org.apache.commons.text.lookup.StringLookupFactory.Builder#get()": ["org.apache.commons.text.lookup.StringLookupFactory#StringLookupFactory(Path[])"],
    "org.apache.commons.text.numbers.DoubleFormat.ScientificDoubleFormat#ScientificDoubleFormat(Builder)": [
        "org.apache.commons.text.numbers.DoubleFormat.ScientificDoubleFormat.<init>()",
        "org.apache.commons.text.numbers.DoubleFormat.AbstractDoubleFormat#AbstractDoubleFormat(Builder)"
    ],
    "org.apache.commons.text.matcher.AbstractStringMatcher.AndStringMatcher#AndStringMatcher(StringMatcher[]...)": [
        "org.apache.commons.text.matcher.AbstractStringMatcher#AbstractStringMatcher()",
        "org.apache.commons.text.matcher.AbstractStringMatcher.AndStringMatcher.<init>()"
    ],
    "org.apache.commons.text.StrBuilder.StrBuilderTokenizer#StrBuilderTokenizer()": [
        "org.apache.commons.text.StrTokenizer#StrTokenizer()",
        "org.apache.commons.text.StrBuilder.StrBuilderTokenizer.<init>()"
    ],
    "org.apache.commons.text.translate.NumericEntityUnescaper.<staticinit>()": ["org.apache.commons.text.translate.NumericEntityUnescaper.OPTION.<staticinit>()"],
    "org.apache.commons.text.TextStringBuilder#appendln(boolean)": [
        "org.apache.commons.text.TextStringBuilder#append(boolean)",
        "org.apache.commons.text.TextStringBuilder#appendNewLine()"
    ],
    "org.apache.commons.text.StrMatcher.stringMatcher(String)": [
        "org.apache.commons.text.StrMatcher.StringMatcher#StringMatcher(String)",
        "org.apache.commons.text.StrMatcher.<staticinit>()"
    ],
    "org.apache.commons.text.StringTokenizer#hasNext()": ["org.apache.commons.text.StringTokenizer#checkTokenized()"],
    "org.apache.commons.text.RandomStringGenerator#generate(int,int)": [
        "org.apache.commons.text.RandomStringGenerator#generateRandomNumber(int,int)",
        "org.apache.commons.text.RandomStringGenerator#generate(int)"
    ],
    "org.apache.commons.text.StrBuilder#indexOf(StrMatcher,int)": [
        "org.apache.commons.text.StrMatcher.NoMatcher#isMatch(char[],int,int,int)",
        "org.apache.commons.text.StrMatcher.TrimMatcher#isMatch(char[],int,int,int)",
        "org.apache.commons.text.StrMatcher.CharSetMatcher#isMatch(char[],int,int,int)",
        "org.apache.commons.text.StrMatcher.StringMatcher#isMatch(char[],int,int,int)",
        "org.apache.commons.text.StrMatcher.CharMatcher#isMatch(char[],int,int,int)"
    ],
    "org.apache.commons.text.similarity.LevenshteinDetailedDistance#LevenshteinDetailedDistance()": ["org.apache.commons.text.similarity.LevenshteinDetailedDistance#LevenshteinDetailedDistance(Integer)"],
    "org.apache.commons.text.StrTokenizer#toString()": ["org.apache.commons.text.StrTokenizer#getTokenList()"],
    "org.apache.commons.text.AlphabetConverter.createConverterFromMap(Map<Integer, String>)": [
        "org.apache.commons.text.AlphabetConverter#AlphabetConverter(Map<Integer, String>,Map<String, String>,int)",
        "org.apache.commons.text.AlphabetConverter.codePointToString(int)"
    ],
    "org.apache.commons.text.StringTokenizer#StringTokenizer(String,char)": [
        "org.apache.commons.text.StringTokenizer#StringTokenizer(String)",
        "org.apache.commons.text.StringTokenizer#setDelimiterChar(char)"
    ],
    "org.apache.commons.text.StringEscapeUtils.unescapeJson(String)": [
        "org.apache.commons.text.StringEscapeUtils.<staticinit>()",
        "org.apache.commons.text.translate.CharSequenceTranslator#translate(CharSequence)"
    ],
    "org.apache.commons.text.lookup.InterpolatorStringLookup#InterpolatorStringLookup(Map<String, V>)": [
        "org.apache.commons.text.lookup.InterpolatorStringLookup#InterpolatorStringLookup(StringLookup)",
        "org.apache.commons.text.lookup.StringLookupFactory.<staticinit>()",
        "org.apache.commons.text.lookup.StringLookupFactory#mapStringLookup(Map<String, V>)"
    ],
    "org.apache.commons.text.StrMatcher.StringMatcher#StringMatcher(String)": [
        "org.apache.commons.text.StrMatcher.StringMatcher.<init>()",
        "org.apache.commons.text.StrMatcher#StrMatcher()"
    ],
    "org.apache.commons.text.TextStringBuilder#appendFixedWidthPadLeft(Object,int,char)": [
        "org.apache.commons.text.lookup.ResourceBundleStringLookup#toString()",
        "org.apache.commons.text.matcher.AbstractStringMatcher.CharMatcher#toString()",
        "org.apache.commons.text.StrLookup.MapStrLookup#toString()",
        "org.apache.commons.text.lookup.InterpolatorStringLookup#toString()",
        "org.apache.commons.text.matcher.AbstractStringMatcher.CharArrayMatcher#toString()",
        "org.apache.commons.text.TextStringBuilder#ensureCapacityInternal(int)",
        "org.apache.commons.text.TextStringBuilder#getNullText()",
        "org.apache.commons.text.StrLookup.ResourceBundleLookup#toString()",
        "org.apache.commons.text.matcher.AbstractStringMatcher.CharSetMatcher#toString()",
        "org.apache.commons.text.lookup.FunctionStringLookup#toString()",
        "org.apache.commons.text.StrMatcher.StringMatcher#toString()"
    ],
    "org.apache.commons.text.StrBuilder.StrBuilderReader#skip(long)": ["org.apache.commons.text.StrBuilder#size()"],
    "org.apache.commons.text.lookup.PropertiesStringLookup#PropertiesStringLookup(Path[]...)": [
        "org.apache.commons.text.lookup.PropertiesStringLookup.<init>()",
        "org.apache.commons.text.lookup.AbstractPathFencedLookup#AbstractPathFencedLookup(Path[]...)"
    ],
    "org.apache.commons.text.StrBuilder#deleteCharAt(int)": ["org.apache.commons.text.StrBuilder#deleteImpl(int,int,int)"],
    "org.apache.commons.text.StringTokenizer#StringTokenizer(String,String)": [
        "org.apache.commons.text.StringTokenizer#StringTokenizer(String)",
        "org.apache.commons.text.StringTokenizer#setDelimiterString(String)"
    ],
    "org.apache.commons.text.TextStringBuilder#TextStringBuilder()": [
        "org.apache.commons.text.TextStringBuilder.<staticinit>()",
        "org.apache.commons.text.TextStringBuilder#TextStringBuilder(int)"
    ],
    "org.apache.commons.text.TextStringBuilder#appendln(long)": [
        "org.apache.commons.text.TextStringBuilder#appendNewLine()",
        "org.apache.commons.text.TextStringBuilder#append(long)"
    ],
    "org.apache.commons.text.TextStringBuilder#appendln(String)": [
        "org.apache.commons.text.TextStringBuilder#append(String)",
        "org.apache.commons.text.TextStringBuilder#appendNewLine()"
    ],
    "org.apache.commons.text.lookup.StringLookupFactory#nullStringLookup()": ["org.apache.commons.text.lookup.StringLookupFactory.<staticinit>()"],
    "org.apache.commons.text.StringEscapeUtils.escapeXml10(String)": [
        "org.apache.commons.text.StringEscapeUtils.<staticinit>()",
        "org.apache.commons.text.translate.CharSequenceTranslator#translate(CharSequence)"
    ],
    "org.apache.commons.text.StrBuilder#appendln(char[])": [
        "org.apache.commons.text.StrBuilder#appendNewLine()",
        "org.apache.commons.text.StrBuilder#append(char[])"
    ],
    "org.apache.commons.text.lookup.LocalHostStringLookup#lookup(String)": ["org.apache.commons.text.lookup.InetAddressKeys.<staticinit>()"],
    "org.apache.commons.text.StrBuilder#asTokenizer()": ["org.apache.commons.text.StrBuilder.StrBuilderTokenizer#StrBuilderTokenizer()"],
    "org.apache.commons.text.io.StringSubstitutorReader#buffer(int)": [
        "org.apache.commons.text.io.StringSubstitutorReader.<staticinit>()",
        "org.apache.commons.text.TextStringBuilder#readFrom(Reader,int)"
    ],
    "org.apache.commons.text.StrBuilder.StrBuilderWriter#write(char[])": ["org.apache.commons.text.StrBuilder#append(char[])"],
    "org.apache.commons.text.lookup.ConstantStringLookup.<staticinit>()": ["org.apache.commons.text.lookup.ConstantStringLookup.<init>()"],
    "org.apache.commons.text.TextStringBuilder#append(StringBuilder)": ["org.apache.commons.text.TextStringBuilder#append(StringBuilder,int,int)"],
    "org.apache.commons.text.numbers.DoubleFormat.AbstractDoubleFormat#applyFinite(double)": [
        "org.apache.commons.text.numbers.ParsedDecimal#getExponent()",
        "org.apache.commons.text.numbers.DoubleFormat.MixedDoubleFormat#applyFiniteInternal(ParsedDecimal)",
        "org.apache.commons.text.numbers.ParsedDecimal.from(double)",
        "org.apache.commons.text.numbers.DoubleFormat.ScientificDoubleFormat#applyFiniteInternal(ParsedDecimal)",
        "org.apache.commons.text.numbers.DoubleFormat.PlainDoubleFormat#applyFiniteInternal(ParsedDecimal)",
        "org.apache.commons.text.numbers.DoubleFormat.EngineeringDoubleFormat#applyFiniteInternal(ParsedDecimal)",
        "org.apache.commons.text.numbers.ParsedDecimal#getScientificExponent()",
        "org.apache.commons.text.numbers.ParsedDecimal#round(int)"
    ],
    "org.apache.commons.text.lookup.ResourceBundleStringLookup#lookup(String)": [
        "org.apache.commons.text.lookup.AbstractStringLookup.<staticinit>()",
        "org.apache.commons.text.lookup.ResourceBundleStringLookup#getString(String,String)"
    ],
    "org.apache.commons.text.TextStringBuilder#set(CharSequence)": [
        "org.apache.commons.text.TextStringBuilder#clear()",
        "org.apache.commons.text.TextStringBuilder#append(CharSequence)"
    ],
    "org.apache.commons.text.TextStringBuilder#appendWithSeparators(Iterator<?>,String)": [
        "org.apache.commons.text.TextStringBuilder#append(String)",
        "org.apache.commons.text.TextStringBuilder#append(char)"
    ],
    "org.apache.commons.text.StringSubstitutor.replaceSystemProperties(Object)": [
        "org.apache.commons.text.lookup.StringLookupFactory#systemPropertyStringLookup()",
        "org.apache.commons.text.StringSubstitutor#StringSubstitutor(StringLookup)",
        "org.apache.commons.text.StringSubstitutor#replace(Object)",
        "org.apache.commons.text.lookup.StringLookupFactory.<staticinit>()"
    ],
    "org.apache.commons.text.lookup.StringLookupFactory#interpolatorStringLookup(StringLookup)": ["org.apache.commons.text.lookup.InterpolatorStringLookup#InterpolatorStringLookup(StringLookup)"],
    "org.apache.commons.text.StrBuilder#replaceFirst(String,String)": [
        "org.apache.commons.text.StrBuilder#replaceImpl(int,int,int,String,int)",
        "org.apache.commons.text.StrBuilder#indexOf(String,int)"
    ],
    "org.apache.commons.text.TextStringBuilder#trim()": [
        "org.apache.commons.text.TextStringBuilder.<staticinit>()",
        "org.apache.commons.text.TextStringBuilder#delete(int,int)"
    ],
    "org.apache.commons.text.lookup.BiFunctionStringLookup.on(Map<String, T>)": ["org.apache.commons.text.lookup.BiFunctionStringLookup.on(BiFunction<String, U, T>)"],
    "org.apache.commons.text.StringTokenizer#readNextToken(char[],int,int,TextStringBuilder,List<String>)": [
        "org.apache.commons.text.matcher.AbstractStringMatcher.CharSetMatcher#isMatch(char[],int,int,int)",
        "org.apache.commons.text.matcher.AbstractStringMatcher.CharMatcher#isMatch(char[],int,int,int)",
        "org.apache.commons.text.matcher.AbstractStringMatcher.AndStringMatcher#isMatch(char[],int,int,int)",
        "org.apache.commons.text.matcher.AbstractStringMatcher.TrimMatcher#isMatch(char[],int,int,int)",
        "org.apache.commons.text.StringTokenizer#getIgnoredMatcher()",
        "org.apache.commons.text.StringTokenizer#readWithQuotes(char[],int,int,TextStringBuilder,List<String>,int,int)",
        "org.apache.commons.text.StringTokenizer#getQuoteMatcher()",
        "org.apache.commons.text.StringTokenizer#getTrimmerMatcher()",
        "org.apache.commons.text.StringTokenizer#getDelimiterMatcher()",
        "org.apache.commons.text.StringTokenizer#addToken(List<String>,String)",
        "org.apache.commons.text.matcher.AbstractStringMatcher.CharArrayMatcher#isMatch(char[],int,int,int)",
        "org.apache.commons.text.matcher.AbstractStringMatcher.NoneMatcher#isMatch(char[],int,int,int)"
    ],
    "org.apache.commons.text.similarity.EditDistanceFrom#apply(CharSequence)": [
        "org.apache.commons.text.similarity.LevenshteinDistance#apply(CharSequence,CharSequence)",
        "org.apache.commons.text.similarity.JaccardDistance#apply(CharSequence,CharSequence)",
        "org.apache.commons.text.similarity.HammingDistance#apply(CharSequence,CharSequence)",
        "org.apache.commons.text.similarity.CosineDistance#apply(CharSequence,CharSequence)",
        "org.apache.commons.text.similarity.JaroWinklerDistance#apply(CharSequence,CharSequence)",
        "org.apache.commons.text.similarity.LongestCommonSubsequenceDistance#apply(CharSequence,CharSequence)",
        "org.apache.commons.text.similarity.LevenshteinDetailedDistance#apply(CharSequence,CharSequence)"
    ],
    "org.apache.commons.text.TextStringBuilder.TextStringBuilderWriter#write(String)": ["org.apache.commons.text.TextStringBuilder#append(String)"],
    "org.apache.commons.text.StringSubstitutor#replaceIn(StringBuilder,int,int)": [
        "org.apache.commons.text.StringSubstitutor#substitute(TextStringBuilder,int,int)",
        "org.apache.commons.text.TextStringBuilder#TextStringBuilder(int)",
        "org.apache.commons.text.TextStringBuilder#toString()",
        "org.apache.commons.text.TextStringBuilder#append(StringBuilder,int,int)"
    ],
    "org.apache.commons.text.RandomStringGenerator.Builder#get()": ["org.apache.commons.text.RandomStringGenerator#RandomStringGenerator(int,int,Set<CharacterPredicate>,TextRandomProvider,List<Character>)"],
    "org.apache.commons.text.TextStringBuilder.TextStringBuilderWriter#write(int)": ["org.apache.commons.text.TextStringBuilder#append(char)"],
    "org.apache.commons.text.similarity.JaroWinklerSimilarity#apply(CharSequence,CharSequence)": [
        "org.apache.commons.text.TextStringBuilder#length()",
        "org.apache.commons.text.similarity.JaroWinklerSimilarity.matches(CharSequence,CharSequence)",
        "org.apache.commons.text.StrBuilder#length()"
    ],
    "org.apache.commons.text.TextStringBuilder#append(String,int,int)": [
        "org.apache.commons.text.TextStringBuilder#ensureCapacityInternal(int)",
        "org.apache.commons.text.TextStringBuilder#length()",
        "org.apache.commons.text.TextStringBuilder#appendNull()"
    ],
    "org.apache.commons.text.similarity.LongestCommonSubsequence.<staticinit>()": ["org.apache.commons.text.similarity.LongestCommonSubsequence.<init>()"],
    "org.apache.commons.text.lookup.LocalHostStringLookup#LocalHostStringLookup()": [
        "org.apache.commons.text.lookup.LocalHostStringLookup.<init>()",
        "org.apache.commons.text.lookup.AbstractStringLookup.<init>()"
    ],
    "org.apache.commons.text.StrSubstitutor#replaceIn(StringBuffer,int,int)": [
        "org.apache.commons.text.StrBuilder#StrBuilder(int)",
        "org.apache.commons.text.StrBuilder#toString()",
        "org.apache.commons.text.StrSubstitutor#substitute(StrBuilder,int,int)",
        "org.apache.commons.text.StrBuilder#append(StringBuffer,int,int)"
    ],
    "org.apache.commons.text.TextStringBuilder#appendln(char)": [
        "org.apache.commons.text.TextStringBuilder#appendNewLine()",
        "org.apache.commons.text.TextStringBuilder#append(char)"
    ],
    "org.apache.commons.text.TextStringBuilder#indexOf(char)": ["org.apache.commons.text.TextStringBuilder#indexOf(char,int)"],
    "org.apache.commons.text.StrBuilder#append(StrBuilder,int,int)": [
        "org.apache.commons.text.StrBuilder#getChars(int,int,char[],int)",
        "org.apache.commons.text.StrBuilder#ensureCapacity(int)",
        "org.apache.commons.text.StrBuilder#length()",
        "org.apache.commons.text.StrBuilder#appendNull()"
    ],
    "org.apache.commons.text.translate.JavaUnicodeEscaper#JavaUnicodeEscaper(int,int,boolean)": [
        "org.apache.commons.text.translate.JavaUnicodeEscaper.<init>()",
        "org.apache.commons.text.translate.UnicodeEscaper#UnicodeEscaper(int,int,boolean)"
    ],
    "org.apache.commons.text.io.StringSubstitutorReader#read()": [
        "org.apache.commons.text.io.StringSubstitutorReader.<staticinit>()",
        "org.apache.commons.text.io.StringSubstitutorReader#read(char[],int,int)"
    ],
    "org.apache.commons.text.StrBuilder#replace(int,int,String)": [
        "org.apache.commons.text.StrBuilder#replaceImpl(int,int,int,String,int)",
        "org.apache.commons.text.StrBuilder#validateRange(int,int)"
    ],
    "org.apache.commons.text.lookup.StringLookupFactory#xmlStringLookup(Map<String, Boolean>,Path[]...)": ["org.apache.commons.text.lookup.XmlStringLookup#XmlStringLookup(Map<String, Boolean>,Path[]...)"],
    "org.apache.commons.text.lookup.StringLookupFactory#xmlStringLookup(Map<String, Boolean>)": ["org.apache.commons.text.lookup.StringLookupFactory#xmlStringLookup(Map<String, Boolean>,Path[]...)"],
    "org.apache.commons.text.TextStringBuilder#insert(int,Object)": [
        "org.apache.commons.text.lookup.ResourceBundleStringLookup#toString()",
        "org.apache.commons.text.TextStringBuilder#insert(int,char[])",
        "org.apache.commons.text.matcher.AbstractStringMatcher.CharMatcher#toString()",
        "org.apache.commons.text.StrLookup.MapStrLookup#toString()",
        "org.apache.commons.text.TextStringBuilder#insert(int,String)",
        "org.apache.commons.text.lookup.InterpolatorStringLookup#toString()",
        "org.apache.commons.text.matcher.AbstractStringMatcher.CharArrayMatcher#toString()",
        "org.apache.commons.text.StrLookup.ResourceBundleLookup#toString()",
        "org.apache.commons.text.matcher.AbstractStringMatcher.CharSetMatcher#toString()",
        "org.apache.commons.text.lookup.FunctionStringLookup#toString()",
        "org.apache.commons.text.StrMatcher.StringMatcher#toString()"
    ],
    "org.apache.commons.text.lookup.UrlEncoderStringLookup#UrlEncoderStringLookup()": [
        "org.apache.commons.text.lookup.AbstractStringLookup.<init>()",
        "org.apache.commons.text.lookup.UrlEncoderStringLookup.<init>()"
    ],
    "org.apache.commons.text.StrBuilder#append(char)": [
        "org.apache.commons.text.StrBuilder#ensureCapacity(int)",
        "org.apache.commons.text.StrBuilder#length()"
    ],
    "org.apache.commons.text.lookup.StringLookupFactory#scriptStringLookup()": [
        "org.apache.commons.text.lookup.ScriptStringLookup.<staticinit>()",
        "org.apache.commons.text.lookup.StringLookupFactory.<staticinit>()"
    ],
    "org.apache.commons.text.TextStringBuilder#appendTrue(int)": ["org.apache.commons.text.TextStringBuilder.<staticinit>()"],
    "org.apache.commons.text.WordUtils.capitalize(String,char[]...)": ["org.apache.commons.text.WordUtils.generateIsDelimiterFunction(char[])"],
    "org.apache.commons.text.numbers.DoubleFormat.Builder#formatSymbols(DecimalFormatSymbols)": [
        "org.apache.commons.text.numbers.DoubleFormat.Builder#minusSign(char)",
        "org.apache.commons.text.numbers.DoubleFormat.Builder#exponentSeparator(String)",
        "org.apache.commons.text.numbers.DoubleFormat.Builder#nan(String)",
        "org.apache.commons.text.numbers.DoubleFormat.Builder#groupingSeparator(char)",
        "org.apache.commons.text.numbers.DoubleFormat.Builder#infinity(String)",
        "org.apache.commons.text.numbers.DoubleFormat.Builder.getDigitString(DecimalFormatSymbols)",
        "org.apache.commons.text.numbers.DoubleFormat.Builder#decimalSeparator(char)",
        "org.apache.commons.text.numbers.DoubleFormat.Builder#digits(String)"
    ],
    "org.apache.commons.text.lookup.StringLookupFactory.DefaultStringLookupsHolder.addLookup(DefaultStringLookup,Map<String, StringLookup>)": [
        "org.apache.commons.text.lookup.DefaultStringLookup#getKey()",
        "org.apache.commons.text.lookup.StringLookupFactory.toKey(String)",
        "org.apache.commons.text.lookup.DefaultStringLookup#getStringLookup()",
        "org.apache.commons.text.lookup.DefaultStringLookup.<staticinit>()"
    ],
    "org.apache.commons.text.matcher.AbstractStringMatcher.AndStringMatcher#isMatch(char[],int,int,int)": [
        "org.apache.commons.text.matcher.AbstractStringMatcher.CharSetMatcher#isMatch(char[],int,int,int)",
        "org.apache.commons.text.matcher.AbstractStringMatcher.CharMatcher#isMatch(char[],int,int,int)",
        "org.apache.commons.text.matcher.AbstractStringMatcher.AndStringMatcher#isMatch(char[],int,int,int)",
        "org.apache.commons.text.matcher.AbstractStringMatcher.TrimMatcher#isMatch(char[],int,int,int)",
        "org.apache.commons.text.matcher.AbstractStringMatcher.CharArrayMatcher#isMatch(char[],int,int,int)",
        "org.apache.commons.text.matcher.AbstractStringMatcher.NoneMatcher#isMatch(char[],int,int,int)"
    ],
    "org.apache.commons.text.StrTokenizer#hasNext()": ["org.apache.commons.text.StrTokenizer#checkTokenized()"],
    "org.apache.commons.text.similarity.LevenshteinDetailedDistance.<staticinit>()": ["org.apache.commons.text.similarity.LevenshteinDetailedDistance#LevenshteinDetailedDistance()"],
    "org.apache.commons.text.StrBuilder#appendln(StringBuilder)": [
        "org.apache.commons.text.StrBuilder#appendNewLine()",
        "org.apache.commons.text.StrBuilder#append(StringBuilder)"
    ],
    "org.apache.commons.text.TextStringBuilder#appendSeparator(char,char)": [
        "org.apache.commons.text.TextStringBuilder#isEmpty()",
        "org.apache.commons.text.TextStringBuilder#append(char)"
    ],
    "org.apache.commons.text.StringSubstitutor#StringSubstitutor(StringLookup)": [
        "org.apache.commons.text.StringSubstitutor.<staticinit>()",
        "org.apache.commons.text.StringSubstitutor#StringSubstitutor(StringLookup,StringMatcher,StringMatcher,char)"
    ],
    "org.apache.commons.text.StrBuilder#insert(int,long)": ["org.apache.commons.text.StrBuilder#insert(int,char)"],
    "org.apache.commons.text.similarity.Counter#Counter()": ["org.apache.commons.text.similarity.Counter.<init>()"],
    "org.apache.commons.text.StrLookup.mapLookup(Map<String, V>)": ["org.apache.commons.text.StrLookup.MapStrLookup#MapStrLookup(Map<String, V>)"],
    "org.apache.commons.text.StrSubstitutor#replace(String,int,int)": [
        "org.apache.commons.text.StrBuilder#StrBuilder(int)",
        "org.apache.commons.text.StrBuilder#toString()",
        "org.apache.commons.text.StrSubstitutor#substitute(StrBuilder,int,int)",
        "org.apache.commons.text.StrBuilder#append(String,int,int)"
    ],
    "org.apache.commons.text.StringTokenizer#setQuoteChar(char)": [
        "org.apache.commons.text.StringTokenizer#setQuoteMatcher(StringMatcher)",
        "org.apache.commons.text.matcher.StringMatcherFactory.<staticinit>()",
        "org.apache.commons.text.matcher.StringMatcherFactory#charMatcher(char)"
    ],
    "org.apache.commons.text.lookup.DefaultStringLookup#DefaultStringLookup(String,StringLookup)": ["org.apache.commons.text.lookup.DefaultStringLookup.<init>()"],
    "org.apache.commons.text.StrBuilder#append(int)": ["org.apache.commons.text.StrBuilder#append(float)"],
    "org.apache.commons.text.StrTokenizer#clone()": ["org.apache.commons.text.StrTokenizer#cloneReset()"],
    "org.apache.commons.text.StrSubstitutor#StrSubstitutor(StrLookup<?>,String,String,char,String)": [
        "org.apache.commons.text.StrSubstitutor#setValueDelimiter(String)",
        "org.apache.commons.text.StrSubstitutor#setVariableSuffix(String)",
        "org.apache.commons.text.StrSubstitutor#setEscapeChar(char)",
        "org.apache.commons.text.StrSubstitutor#setVariableResolver(StrLookup<?>)",
        "org.apache.commons.text.StrSubstitutor.<init>()",
        "org.apache.commons.text.StrSubstitutor#setVariablePrefix(String)"
    ],
    "org.apache.commons.text.TextStringBuilder#get()": ["org.apache.commons.text.TextStringBuilder#toString()"],
    "org.apache.commons.text.lookup.UrlDecoderStringLookup.<staticinit>()": ["org.apache.commons.text.lookup.UrlDecoderStringLookup#UrlDecoderStringLookup()"],
    "org.apache.commons.text.lookup.StringLookupFactory#environmentVariableStringLookup()": ["org.apache.commons.text.lookup.StringLookupFactory.<staticinit>()"],
    "org.apache.commons.text.similarity.LevenshteinDistance#LevenshteinDistance(Integer)": ["org.apache.commons.text.similarity.LevenshteinDistance.<init>()"],
    "org.apache.commons.text.StringSubstitutor#setVariableSuffix(String)": [
        "org.apache.commons.text.matcher.StringMatcherFactory.<staticinit>()",
        "org.apache.commons.text.matcher.StringMatcherFactory#stringMatcher(String)",
        "org.apache.commons.text.StringSubstitutor#setVariableSuffixMatcher(StringMatcher)"
    ],
    "org.apache.commons.text.StrBuilder.StrBuilderTokenizer#tokenize(char[],int,int)": [
        "org.apache.commons.text.StrTokenizer#tokenize(char[],int,int)",
        "org.apache.commons.text.StrBuilder#size()"
    ],
    "org.apache.commons.text.io.StringSubstitutorReader#isBufferMatchAt(StringMatcher,int)": [
        "org.apache.commons.text.matcher.AbstractStringMatcher.CharMatcher#size()",
        "org.apache.commons.text.matcher.AbstractStringMatcher.TrimMatcher#size()",
        "org.apache.commons.text.matcher.AbstractStringMatcher.CharArrayMatcher#size()",
        "org.apache.commons.text.matcher.StringMatcher#isMatch(CharSequence,int)",
        "org.apache.commons.text.matcher.AbstractStringMatcher.AndStringMatcher#size()",
        "org.apache.commons.text.matcher.StringMatcher#size()",
        "org.apache.commons.text.matcher.AbstractStringMatcher.NoneMatcher#size()",
        "org.apache.commons.text.matcher.AbstractStringMatcher.CharSetMatcher#size()"
    ],
    "org.apache.commons.text.translate.UnicodeEscaper#UnicodeEscaper(int,int,boolean)": [
        "org.apache.commons.text.translate.UnicodeEscaper.<init>()",
        "org.apache.commons.text.translate.CodePointTranslator.<init>()"
    ],
    "org.apache.commons.text.StrTokenizer#nextToken()": ["org.apache.commons.text.StrTokenizer#hasNext()"],
    "org.apache.commons.text.StrBuilder#insert(int,char[])": [
        "org.apache.commons.text.StrBuilder#validateIndex(int)",
        "org.apache.commons.text.StrBuilder#ensureCapacity(int)",
        "org.apache.commons.text.StrBuilder#insert(int,String)"
    ],
    "org.apache.commons.text.TextStringBuilder#appendln(float)": [
        "org.apache.commons.text.TextStringBuilder#appendNewLine()",
        "org.apache.commons.text.TextStringBuilder#append(float)"
    ],
    "org.apache.commons.text.StrSubstitutor#replace(StringBuffer,int,int)": [
        "org.apache.commons.text.StrBuilder#StrBuilder(int)",
        "org.apache.commons.text.StrBuilder#toString()",
        "org.apache.commons.text.StrSubstitutor#substitute(StrBuilder,int,int)",
        "org.apache.commons.text.StrBuilder#append(StringBuffer,int,int)"
    ],
    "org.apache.commons.text.ExtendedMessageFormat#ExtendedMessageFormat(String,Locale,Map<String, ? extends FormatFactory>)": [
        "org.apache.commons.text.ExtendedMessageFormat.<init>()",
        "org.apache.commons.text.ExtendedMessageFormat.<staticinit>()",
        "org.apache.commons.text.ExtendedMessageFormat#applyPattern(String)"
    ],
    "org.apache.commons.text.numbers.ParsedDecimal#getDigitStringSize(int,FormatOptions)": [
        "org.apache.commons.text.numbers.DoubleFormat.AbstractDoubleFormat#isIncludeFractionPlaceholder()",
        "org.apache.commons.text.numbers.ParsedDecimal#shouldIncludeMinus(FormatOptions)"
    ],
    "org.apache.commons.text.matcher.AbstractStringMatcher.CharMatcher#isMatch(CharSequence,int,int,int)": [
        "org.apache.commons.text.StrBuilder#charAt(int)",
        "org.apache.commons.text.TextStringBuilder#charAt(int)"
    ],
    "org.apache.commons.text.similarity.LevenshteinDistance.<staticinit>()": ["org.apache.commons.text.similarity.LevenshteinDistance#LevenshteinDistance()"],
    "org.apache.commons.text.StrBuilder#replaceAll(String,String)": [
        "org.apache.commons.text.StrBuilder#replaceImpl(int,int,int,String,int)",
        "org.apache.commons.text.StrBuilder#indexOf(String,int)"
    ],
    "org.apache.commons.text.translate.UnicodeEscaper#UnicodeEscaper()": ["org.apache.commons.text.translate.UnicodeEscaper#UnicodeEscaper(int,int,boolean)"],
    "org.apache.commons.text.StrBuilder#appendln(double)": [
        "org.apache.commons.text.StrBuilder#appendNewLine()",
        "org.apache.commons.text.StrBuilder#append(double)"
    ],
    "org.apache.commons.text.lookup.XmlEncoderStringLookup.<staticinit>()": ["org.apache.commons.text.lookup.XmlEncoderStringLookup#XmlEncoderStringLookup()"],
    "org.apache.commons.text.matcher.StringMatcherFactory#stringMatcher(char[]...)": [
        "org.apache.commons.text.matcher.StringMatcherFactory.<staticinit>()",
        "org.apache.commons.text.matcher.AbstractStringMatcher.CharMatcher#CharMatcher(char)",
        "org.apache.commons.text.matcher.AbstractStringMatcher.CharArrayMatcher#CharArrayMatcher(char[]...)"
    ],
    "org.apache.commons.text.numbers.ParsedDecimal#appendWholeGrouped(int,FormatOptions)": [
        "org.apache.commons.text.numbers.ParsedDecimal#appendLocalizedDigit(int,char[])",
        "org.apache.commons.text.numbers.DoubleFormat.AbstractDoubleFormat#getDigits()",
        "org.apache.commons.text.numbers.ParsedDecimal#requiresGroupingSeparatorAfterPosition(int)",
        "org.apache.commons.text.numbers.ParsedDecimal#shouldIncludeMinus(FormatOptions)",
        "org.apache.commons.text.numbers.ParsedDecimal#append(char)",
        "org.apache.commons.text.numbers.DoubleFormat.AbstractDoubleFormat#getGroupingSeparator()",
        "org.apache.commons.text.numbers.DoubleFormat.AbstractDoubleFormat#getMinusSign()"
    ],
    "org.apache.commons.text.StrMatcher.tabMatcher()": ["org.apache.commons.text.StrMatcher.<staticinit>()"],
    "org.apache.commons.text.matcher.StringMatcherFactory#charSetMatcher(char[]...)": [
        "org.apache.commons.text.matcher.StringMatcherFactory.<staticinit>()",
        "org.apache.commons.text.matcher.AbstractStringMatcher.CharMatcher#CharMatcher(char)",
        "org.apache.commons.text.matcher.AbstractStringMatcher.CharSetMatcher#CharSetMatcher(char[])"
    ],
    "org.apache.commons.text.StrTokenizer#StrTokenizer(String,StrMatcher,StrMatcher)": [
        "org.apache.commons.text.StrTokenizer#StrTokenizer(String,StrMatcher)",
        "org.apache.commons.text.StrTokenizer#setQuoteMatcher(StrMatcher)"
    ],
    "org.apache.commons.text.TextStringBuilder#appendln(TextStringBuilder,int,int)": [
        "org.apache.commons.text.TextStringBuilder#appendNewLine()",
        "org.apache.commons.text.TextStringBuilder#append(TextStringBuilder,int,int)"
    ],
    "org.apache.commons.text.StrBuilder#StrBuilder(String)": [
        "org.apache.commons.text.StrBuilder.<init>()",
        "org.apache.commons.text.StrBuilder.<staticinit>()",
        "org.apache.commons.text.StrBuilder#append(String)"
    ],
    "org.apache.commons.text.lookup.BiFunctionStringLookup#BiFunctionStringLookup(BiFunction<String, P, R>)": ["org.apache.commons.text.lookup.BiFunctionStringLookup.<init>()"],
    "org.apache.commons.text.TextStringBuilder#insert(int,char)": [
        "org.apache.commons.text.TextStringBuilder#ensureCapacityInternal(int)",
        "org.apache.commons.text.TextStringBuilder#validateIndex(int)"
    ],
    "org.apache.commons.text.StringTokenizer#addToken(List<String>,String)": [
        "org.apache.commons.text.StringTokenizer#isEmptyTokenAsNull()",
        "org.apache.commons.text.StringTokenizer#isIgnoreEmptyTokens()"
    ],
    "org.apache.commons.text.matcher.StringMatcher#isMatch(CharSequence,int,int,int)": [
        "org.apache.commons.text.matcher.AbstractStringMatcher.CharSetMatcher#isMatch(CharSequence,int,int,int)",
        "org.apache.commons.text.matcher.AbstractStringMatcher.CharMatcher#isMatch(CharSequence,int,int,int)",
        "org.apache.commons.text.matcher.AbstractStringMatcher.NoneMatcher#isMatch(CharSequence,int,int,int)",
        "org.apache.commons.text.matcher.AbstractStringMatcher.AndStringMatcher#isMatch(CharSequence,int,int,int)",
        "org.apache.commons.text.matcher.StringMatcher#isMatch(CharSequence,int,int,int)",
        "org.apache.commons.text.matcher.AbstractStringMatcher.TrimMatcher#isMatch(CharSequence,int,int,int)",
        "org.apache.commons.text.matcher.AbstractStringMatcher.CharArrayMatcher#isMatch(CharSequence,int,int,int)"
    ],
    "org.apache.commons.text.similarity.LongestCommonSubsequenceDistance#apply(CharSequence,CharSequence)": [
        "org.apache.commons.text.TextStringBuilder#length()",
        "org.apache.commons.text.StrBuilder#length()",
        "org.apache.commons.text.similarity.LongestCommonSubsequence#apply(CharSequence,CharSequence)",
        "org.apache.commons.text.similarity.LongestCommonSubsequence.<staticinit>()"
    ],
    "org.apache.commons.text.translate.NumericEntityEscaper.below(int)": ["org.apache.commons.text.translate.NumericEntityEscaper.outsideOf(int,int)"],
    "org.apache.commons.text.translate.LookupTranslator#translate(CharSequence,int,Writer)": [
        "org.apache.commons.text.TextStringBuilder#length()",
        "org.apache.commons.text.StrBuilder.StrBuilderWriter#write(String)",
        "org.apache.commons.text.StrBuilder#toString()",
        "org.apache.commons.text.TextStringBuilder#toString()",
        "org.apache.commons.text.TextStringBuilder#subSequence(int,int)",
        "org.apache.commons.text.StrBuilder#charAt(int)",
        "org.apache.commons.text.StrBuilder#length()",
        "org.apache.commons.text.TextStringBuilder#charAt(int)",
        "org.apache.commons.text.StrBuilder#subSequence(int,int)",
        "org.apache.commons.text.TextStringBuilder.TextStringBuilderWriter#write(String)"
    ],
    "org.apache.commons.text.StringSubstitutor#StringSubstitutor(StringLookup,StringMatcher,StringMatcher,char)": [
        "org.apache.commons.text.StringSubstitutor#StringSubstitutor(StringLookup,StringMatcher,StringMatcher,char,StringMatcher)",
        "org.apache.commons.text.StringSubstitutor.<staticinit>()"
    ],
    "org.apache.commons.text.matcher.AbstractStringMatcher.AndStringMatcher#size()": [
        "org.apache.commons.text.matcher.AbstractStringMatcher.CharMatcher#size()",
        "org.apache.commons.text.matcher.AbstractStringMatcher.TrimMatcher#size()",
        "org.apache.commons.text.matcher.AbstractStringMatcher.CharArrayMatcher#size()",
        "org.apache.commons.text.matcher.AbstractStringMatcher.AndStringMatcher#size()",
        "org.apache.commons.text.matcher.StringMatcher#size()",
        "org.apache.commons.text.matcher.AbstractStringMatcher.NoneMatcher#size()",
        "org.apache.commons.text.matcher.AbstractStringMatcher.CharSetMatcher#size()"
    ],
    "org.apache.commons.text.StrBuilder#StrBuilder(int)": [
        "org.apache.commons.text.StrBuilder.<init>()",
        "org.apache.commons.text.StrBuilder.<staticinit>()"
    ],
    "org.apache.commons.text.StrSubstitutor#setVariablePrefix(String)": [
        "org.apache.commons.text.StrSubstitutor#setVariablePrefixMatcher(StrMatcher)",
        "org.apache.commons.text.StrMatcher.stringMatcher(String)"
    ],
    "org.apache.commons.text.StringSubstitutor#setVariablePrefix(char)": [
        "org.apache.commons.text.matcher.StringMatcherFactory.<staticinit>()",
        "org.apache.commons.text.StringSubstitutor#setVariablePrefixMatcher(StringMatcher)",
        "org.apache.commons.text.matcher.StringMatcherFactory#charMatcher(char)"
    ],
    "org.apache.commons.text.translate.NumericEntityEscaper#NumericEntityEscaper()": ["org.apache.commons.text.translate.NumericEntityEscaper#NumericEntityEscaper(int,int,boolean)"],
    "org.apache.commons.text.StrSubstitutor#StrSubstitutor(Map<String, V>,String,String,char,String)": [
        "org.apache.commons.text.StrSubstitutor#StrSubstitutor(StrLookup<?>,String,String,char,String)",
        "org.apache.commons.text.StrLookup.mapLookup(Map<String, V>)"
    ],
    "org.apache.commons.text.TextStringBuilder#appendFixedWidthPadRight(Object,int,char)": [
        "org.apache.commons.text.lookup.ResourceBundleStringLookup#toString()",
        "org.apache.commons.text.matcher.AbstractStringMatcher.CharMatcher#toString()",
        "org.apache.commons.text.StrLookup.MapStrLookup#toString()",
        "org.apache.commons.text.TextStringBuilder#ensureCapacityInternal(int)",
        "org.apache.commons.text.lookup.InterpolatorStringLookup#toString()",
        "org.apache.commons.text.matcher.AbstractStringMatcher.CharArrayMatcher#toString()",
        "org.apache.commons.text.TextStringBuilder#getNullText()",
        "org.apache.commons.text.StrLookup.ResourceBundleLookup#toString()",
        "org.apache.commons.text.matcher.AbstractStringMatcher.CharSetMatcher#toString()",
        "org.apache.commons.text.lookup.FunctionStringLookup#toString()",
        "org.apache.commons.text.StrMatcher.StringMatcher#toString()"
    ],
    "org.apache.commons.text.StringEscapeUtils.escapeCsv(String)": [
        "org.apache.commons.text.StringEscapeUtils.<staticinit>()",
        "org.apache.commons.text.translate.CharSequenceTranslator#translate(CharSequence)"
    ],
    "org.apache.commons.text.StrTokenizer.getCSVInstance(char[])": [
        "org.apache.commons.text.StrTokenizer#reset(char[])",
        "org.apache.commons.text.StrTokenizer.getCSVClone()"
    ],
    "org.apache.commons.text.similarity.LevenshteinResults#LevenshteinResults(Integer,Integer,Integer,Integer)": ["org.apache.commons.text.similarity.LevenshteinResults.<init>()"],
    "org.apache.commons.text.lookup.StringLookupFactory.DefaultStringLookupsHolder#DefaultStringLookupsHolder(Properties)": [
        "org.apache.commons.text.lookup.StringLookupFactory.DefaultStringLookupsHolder.parseStringLookups(String)",
        "org.apache.commons.text.lookup.StringLookupFactory.DefaultStringLookupsHolder.<init>()",
        "org.apache.commons.text.lookup.StringLookupFactory.DefaultStringLookupsHolder.createDefaultStringLookups()",
        "org.apache.commons.text.lookup.StringLookupFactory.<staticinit>()"
    ],
    "org.apache.commons.text.WordUtils.capitalizeFully(String)": ["org.apache.commons.text.WordUtils.capitalizeFully(String,char[]...)"],
    "org.apache.commons.text.StrBuilder#deleteFirst(String)": [
        "org.apache.commons.text.StrBuilder#deleteImpl(int,int,int)",
        "org.apache.commons.text.StrBuilder#indexOf(String,int)"
    ],
    "org.apache.commons.text.StringEscapeUtils.Builder#escape(String)": ["org.apache.commons.text.translate.CharSequenceTranslator#translate(CharSequence)"],
    "org.apache.commons.text.lookup.FunctionStringLookup.on(Function<String, R>)": ["org.apache.commons.text.lookup.FunctionStringLookup#FunctionStringLookup(Function<String, V>)"],
    "org.apache.commons.text.TextStringBuilder#append(char)": [
        "org.apache.commons.text.TextStringBuilder#ensureCapacityInternal(int)",
        "org.apache.commons.text.TextStringBuilder#length()"
    ],
    "org.apache.commons.text.diff.InsertCommand#InsertCommand(T)": [
        "org.apache.commons.text.diff.EditCommand#EditCommand(T)",
        "org.apache.commons.text.diff.InsertCommand.<init>()"
    ],
    "org.apache.commons.text.StrTokenizer#StrTokenizer(String,char)": [
        "org.apache.commons.text.StrTokenizer#setDelimiterChar(char)",
        "org.apache.commons.text.StrTokenizer#StrTokenizer(String)"
    ],
    "org.apache.commons.text.lookup.StringLookupFactory#biFunctionStringLookup(BiFunction<String, U, R>)": ["org.apache.commons.text.lookup.BiFunctionStringLookup.on(BiFunction<String, U, T>)"],
    "org.apache.commons.text.StringSubstitutor#replaceIn(StringBuffer,int,int)": [
        "org.apache.commons.text.TextStringBuilder#append(StringBuffer,int,int)",
        "org.apache.commons.text.StringSubstitutor#substitute(TextStringBuilder,int,int)",
        "org.apache.commons.text.TextStringBuilder#TextStringBuilder(int)",
        "org.apache.commons.text.TextStringBuilder#toString()"
    ],
    "org.apache.commons.text.matcher.StringMatcherFactory#noneMatcher()": ["org.apache.commons.text.matcher.StringMatcherFactory.<staticinit>()"],
    "org.apache.commons.text.ExtendedMessageFormat#insertFormats(String,ArrayList<String>)": [
        "org.apache.commons.text.ExtendedMessageFormat.<staticinit>()",
        "org.apache.commons.text.ExtendedMessageFormat#containsElements(Collection<?>)",
        "org.apache.commons.text.ExtendedMessageFormat#next(ParsePosition)",
        "org.apache.commons.text.ExtendedMessageFormat#appendQuotedString(String,ParsePosition,StringBuilder)",
        "org.apache.commons.text.ExtendedMessageFormat#readArgumentIndex(String,ParsePosition)"
    ],
    "org.apache.commons.text.TextStringBuilder.TextStringBuilderReader#ready()": ["org.apache.commons.text.TextStringBuilder#size()"],
    "org.apache.commons.text.StrSubstitutor#StrSubstitutor(StrLookup<?>)": [
        "org.apache.commons.text.StrSubstitutor.<staticinit>()",
        "org.apache.commons.text.StrSubstitutor#StrSubstitutor(StrLookup<?>,StrMatcher,StrMatcher,char)"
    ],
    "org.apache.commons.text.matcher.AbstractStringMatcher.CharArrayMatcher#isMatch(char[],int,int,int)": ["org.apache.commons.text.matcher.AbstractStringMatcher.CharArrayMatcher#size()"],
    "org.apache.commons.text.matcher.AbstractStringMatcher.CharArrayMatcher#isMatch(CharSequence,int,int,int)": [
        "org.apache.commons.text.matcher.AbstractStringMatcher.CharArrayMatcher#size()",
        "org.apache.commons.text.StrBuilder#charAt(int)",
        "org.apache.commons.text.TextStringBuilder#charAt(int)"
    ],
    "org.apache.commons.text.matcher.StringMatcher#isMatch(CharSequence,int)": [
        "org.apache.commons.text.TextStringBuilder#length()",
        "org.apache.commons.text.matcher.AbstractStringMatcher.CharSetMatcher#isMatch(CharSequence,int,int,int)",
        "org.apache.commons.text.matcher.AbstractStringMatcher.CharMatcher#isMatch(CharSequence,int,int,int)",
        "org.apache.commons.text.matcher.AbstractStringMatcher.NoneMatcher#isMatch(CharSequence,int,int,int)",
        "org.apache.commons.text.StrBuilder#length()",
        "org.apache.commons.text.matcher.AbstractStringMatcher.AndStringMatcher#isMatch(CharSequence,int,int,int)",
        "org.apache.commons.text.matcher.StringMatcher#isMatch(CharSequence,int,int,int)",
        "org.apache.commons.text.matcher.AbstractStringMatcher.TrimMatcher#isMatch(CharSequence,int,int,int)",
        "org.apache.commons.text.matcher.AbstractStringMatcher.CharArrayMatcher#isMatch(CharSequence,int,int,int)"
    ],
    "org.apache.commons.text.StringEscapeUtils.unescapeHtml4(String)": [
        "org.apache.commons.text.StringEscapeUtils.<staticinit>()",
        "org.apache.commons.text.translate.CharSequenceTranslator#translate(CharSequence)"
    ],
    "org.apache.commons.text.lookup.DnsStringLookup#DnsStringLookup()": [
        "org.apache.commons.text.lookup.AbstractStringLookup.<init>()",
        "org.apache.commons.text.lookup.DnsStringLookup.<init>()"
    ],
    "org.apache.commons.text.AlphabetConverter#AlphabetConverter(Map<Integer, String>,Map<String, String>,int)": ["org.apache.commons.text.AlphabetConverter.<init>()"],
    "org.apache.commons.text.StrBuilder#appendWithSeparators(Object[],String)": [
        "org.apache.commons.text.StrBuilder#append(Object)",
        "org.apache.commons.text.StrBuilder#append(String)"
    ],
    "org.apache.commons.text.TextStringBuilder#appendln(StringBuilder,int,int)": [
        "org.apache.commons.text.TextStringBuilder#appendNewLine()",
        "org.apache.commons.text.TextStringBuilder#append(StringBuilder,int,int)"
    ],
    "org.apache.commons.text.StrSubstitutor.replace(Object,Map<String, V>,String,String)": [
        "org.apache.commons.text.StrSubstitutor#StrSubstitutor(Map<String, V>,String,String)",
        "org.apache.commons.text.StrSubstitutor#replace(Object)"
    ],
    "org.apache.commons.text.StrLookup.resourceBundleLookup(ResourceBundle)": ["org.apache.commons.text.StrLookup.ResourceBundleLookup#ResourceBundleLookup(ResourceBundle)"],
    "org.apache.commons.text.StringTokenizer.getTSVInstance(String)": [
        "org.apache.commons.text.StringTokenizer.getTSVClone()",
        "org.apache.commons.text.StringTokenizer#reset(String)"
    ],
    "org.apache.commons.text.StrBuilder#insert(int,Object)": [
        "org.apache.commons.text.lookup.ResourceBundleStringLookup#toString()",
        "org.apache.commons.text.matcher.AbstractStringMatcher.CharMatcher#toString()",
        "org.apache.commons.text.StrLookup.MapStrLookup#toString()",
        "org.apache.commons.text.lookup.InterpolatorStringLookup#toString()",
        "org.apache.commons.text.matcher.AbstractStringMatcher.CharArrayMatcher#toString()",
        "org.apache.commons.text.StrLookup.ResourceBundleLookup#toString()",
        "org.apache.commons.text.matcher.AbstractStringMatcher.CharSetMatcher#toString()",
        "org.apache.commons.text.lookup.FunctionStringLookup#toString()",
        "org.apache.commons.text.StrMatcher.StringMatcher#toString()",
        "org.apache.commons.text.StrBuilder#insert(int,char)",
        "org.apache.commons.text.StrBuilder#insert(int,String)"
    ],
    "org.apache.commons.text.similarity.LevenshteinDetailedDistance.findDetailedResults(CharSequence,CharSequence,int[][],boolean)": [
        "org.apache.commons.text.StrBuilder#charAt(int)",
        "org.apache.commons.text.TextStringBuilder#length()",
        "org.apache.commons.text.similarity.LevenshteinResults#LevenshteinResults(Integer,Integer,Integer,Integer)",
        "org.apache.commons.text.StrBuilder#length()",
        "org.apache.commons.text.TextStringBuilder#charAt(int)"
    ],
    "org.apache.commons.text.lookup.StringLookupFactory.DefaultStringLookupsHolder.<staticinit>()": ["org.apache.commons.text.lookup.StringLookupFactory.DefaultStringLookupsHolder#DefaultStringLookupsHolder(Properties)"],
    "org.apache.commons.text.StrBuilder#lastIndexOf(char)": ["org.apache.commons.text.StrBuilder#lastIndexOf(char,int)"],
    "org.apache.commons.text.matcher.StringMatcherFactory#StringMatcherFactory()": ["org.apache.commons.text.matcher.StringMatcherFactory.<init>()"],
    "org.apache.commons.text.StringEscapeUtils.escapeHtml4(String)": [
        "org.apache.commons.text.StringEscapeUtils.<staticinit>()",
        "org.apache.commons.text.translate.CharSequenceTranslator#translate(CharSequence)"
    ],
    "org.apache.commons.text.StrMatcher.charMatcher(char)": ["org.apache.commons.text.StrMatcher.CharMatcher#CharMatcher(char)"],
    "org.apache.commons.text.numbers.ParsedDecimal#append(char[])": ["org.apache.commons.text.numbers.ParsedDecimal#append(char)"],
    "org.apache.commons.text.StrBuilder.StrBuilderWriter#write(String,int,int)": ["org.apache.commons.text.StrBuilder#append(String,int,int)"],
    "org.apache.commons.text.matcher.AbstractStringMatcher#AbstractStringMatcher()": ["org.apache.commons.text.matcher.AbstractStringMatcher.<init>()"],
    "org.apache.commons.text.StrBuilder#appendln(boolean)": [
        "org.apache.commons.text.StrBuilder#appendNewLine()",
        "org.apache.commons.text.StrBuilder#append(boolean)"
    ],
    "org.apache.commons.text.StrBuilder#append(char[])": [
        "org.apache.commons.text.StrBuilder#ensureCapacity(int)",
        "org.apache.commons.text.StrBuilder#length()",
        "org.apache.commons.text.StrBuilder#appendNull()"
    ],
    "org.apache.commons.text.lookup.StringLookupFactory.builder()": ["org.apache.commons.text.lookup.StringLookupFactory.Builder.<init>()"],
    "org.apache.commons.text.lookup.DefaultStringLookup.<staticinit>()": [
        "org.apache.commons.text.lookup.StringLookupFactory#base64DecoderStringLookup()",
        "org.apache.commons.text.lookup.StringLookupFactory#urlEncoderStringLookup()",
        "org.apache.commons.text.lookup.StringLookupFactory#localHostStringLookup()",
        "org.apache.commons.text.lookup.StringLookupFactory#constantStringLookup()",
        "org.apache.commons.text.lookup.StringLookupFactory#systemPropertyStringLookup()",
        "org.apache.commons.text.lookup.StringLookupFactory#propertiesStringLookup()",
        "org.apache.commons.text.lookup.StringLookupFactory#urlStringLookup()",
        "org.apache.commons.text.lookup.StringLookupFactory#dateStringLookup()",
        "org.apache.commons.text.lookup.StringLookupFactory#scriptStringLookup()",
        "org.apache.commons.text.lookup.StringLookupFactory#dnsStringLookup()",
        "org.apache.commons.text.lookup.StringLookupFactory#fileStringLookup()",
        "org.apache.commons.text.lookup.StringLookupFactory#urlDecoderStringLookup()",
        "org.apache.commons.text.lookup.StringLookupFactory#xmlStringLookup()",
        "org.apache.commons.text.lookup.StringLookupFactory#javaPlatformStringLookup()",
        "org.apache.commons.text.lookup.StringLookupFactory#xmlEncoderStringLookup()",
        "org.apache.commons.text.lookup.StringLookupFactory#environmentVariableStringLookup()",
        "org.apache.commons.text.lookup.StringLookupFactory#xmlDecoderStringLookup()",
        "org.apache.commons.text.lookup.StringLookupFactory.<staticinit>()",
        "org.apache.commons.text.lookup.StringLookupFactory#base64EncoderStringLookup()",
        "org.apache.commons.text.lookup.StringLookupFactory#resourceBundleStringLookup()"
    ],
    "org.apache.commons.text.TextStringBuilder#toCharArray(int,int)": ["org.apache.commons.text.TextStringBuilder#validateRange(int,int)"],
    "org.apache.commons.text.TextStringBuilder#replaceImpl(int,int,int,String,int)": ["org.apache.commons.text.TextStringBuilder#ensureCapacityInternal(int)"],
    "org.apache.commons.text.StringSubstitutor#setVariableSuffix(char)": [
        "org.apache.commons.text.matcher.StringMatcherFactory.<staticinit>()",
        "org.apache.commons.text.StringSubstitutor#setVariableSuffixMatcher(StringMatcher)",
        "org.apache.commons.text.matcher.StringMatcherFactory#charMatcher(char)"
    ],
    "org.apache.commons.text.StrSubstitutor#setVariableSuffix(char)": [
        "org.apache.commons.text.StrSubstitutor#setVariableSuffixMatcher(StrMatcher)",
        "org.apache.commons.text.StrMatcher.charMatcher(char)"
    ],
    "org.apache.commons.text.similarity.EditDistanceFrom#EditDistanceFrom(EditDistance<R>,CharSequence)": ["org.apache.commons.text.similarity.EditDistanceFrom.<init>()"],
    "org.apache.commons.text.TextStringBuilder.wrap(char[])": ["org.apache.commons.text.TextStringBuilder#TextStringBuilder(char[],int)"],
    "org.apache.commons.text.matcher.StringMatcherFactory#quoteMatcher()": ["org.apache.commons.text.matcher.StringMatcherFactory.<staticinit>()"],
    "org.apache.commons.text.StrTokenizer#StrTokenizer(char[],StrMatcher,StrMatcher)": [
        "org.apache.commons.text.StrTokenizer#StrTokenizer(char[],StrMatcher)",
        "org.apache.commons.text.StrTokenizer#setQuoteMatcher(StrMatcher)"
    ],
    "org.apache.commons.text.similarity.LongestCommonSubsequence#logestCommonSubsequence(CharSequence,CharSequence)": ["org.apache.commons.text.similarity.LongestCommonSubsequence#longestCommonSubsequence(CharSequence,CharSequence)"],
    "org.apache.commons.text.StringSubstitutor#replace(CharSequence,int,int)": [
        "org.apache.commons.text.StrBuilder#toString()",
        "org.apache.commons.text.StringSubstitutor#substitute(TextStringBuilder,int,int)",
        "org.apache.commons.text.TextStringBuilder#TextStringBuilder(int)",
        "org.apache.commons.text.TextStringBuilder#toString()",
        "org.apache.commons.text.TextStringBuilder#append(char[],int,int)"
    ],
    "org.apache.commons.text.StringTokenizer#StringTokenizer(char[],String)": [
        "org.apache.commons.text.StringTokenizer#setDelimiterString(String)",
        "org.apache.commons.text.StringTokenizer#StringTokenizer(char[])"
    ],
    "org.apache.commons.text.matcher.StringMatcherFactory#andMatcher(StringMatcher[]...)": [
        "org.apache.commons.text.matcher.StringMatcherFactory.<staticinit>()",
        "org.apache.commons.text.matcher.AbstractStringMatcher.AndStringMatcher#AndStringMatcher(StringMatcher[]...)"
    ],
    "org.apache.commons.text.StringTokenizer#cloneReset()": ["org.apache.commons.text.StringTokenizer#reset()"],
    "org.apache.commons.text.ExtendedMessageFormat#ExtendedMessageFormat(String,Locale)": ["org.apache.commons.text.ExtendedMessageFormat#ExtendedMessageFormat(String,Locale,Map<String, ? extends FormatFactory>)"],
    "org.apache.commons.text.StrBuilder#appendFixedWidthPadLeft(Object,int,char)": [
        "org.apache.commons.text.lookup.ResourceBundleStringLookup#toString()",
        "org.apache.commons.text.StrBuilder#ensureCapacity(int)",
        "org.apache.commons.text.matcher.AbstractStringMatcher.CharMatcher#toString()",
        "org.apache.commons.text.StrLookup.MapStrLookup#toString()",
        "org.apache.commons.text.lookup.InterpolatorStringLookup#toString()",
        "org.apache.commons.text.matcher.AbstractStringMatcher.CharArrayMatcher#toString()",
        "org.apache.commons.text.StrBuilder#getNullText()",
        "org.apache.commons.text.StrLookup.ResourceBundleLookup#toString()",
        "org.apache.commons.text.matcher.AbstractStringMatcher.CharSetMatcher#toString()",
        "org.apache.commons.text.lookup.FunctionStringLookup#toString()",
        "org.apache.commons.text.StrMatcher.StringMatcher#toString()"
    ],
    "org.apache.commons.text.matcher.StringMatcherFactory#splitMatcher()": ["org.apache.commons.text.matcher.StringMatcherFactory.<staticinit>()"],
    "org.apache.commons.text.lookup.DnsStringLookup.<staticinit>()": ["org.apache.commons.text.lookup.DnsStringLookup#DnsStringLookup()"],
    "org.apache.commons.text.diff.EditScript#EditScript()": ["org.apache.commons.text.diff.EditScript.<init>()"],
    "org.apache.commons.text.numbers.ParsedDecimal#appendFraction(int,int,FormatOptions)": [
        "org.apache.commons.text.numbers.ParsedDecimal#appendLocalizedDigit(int,char[])",
        "org.apache.commons.text.numbers.ParsedDecimal#append(char)",
        "org.apache.commons.text.numbers.DoubleFormat.AbstractDoubleFormat#getDecimalSeparator()",
        "org.apache.commons.text.numbers.DoubleFormat.AbstractDoubleFormat#getDigits()",
        "org.apache.commons.text.numbers.DoubleFormat.AbstractDoubleFormat#isIncludeFractionPlaceholder()"
    ],
    "org.apache.commons.text.similarity.IntersectionSimilarity#toBag(Collection<T>)": ["org.apache.commons.text.similarity.IntersectionSimilarity.TinyBag#TinyBag(int)"],
    "org.apache.commons.text.similarity.IntersectionSimilarity.BagCount#BagCount()": ["org.apache.commons.text.similarity.IntersectionSimilarity.BagCount.<init>()"],
    "org.apache.commons.text.lookup.FileStringLookup.<staticinit>()": ["org.apache.commons.text.lookup.FileStringLookup#FileStringLookup(Path[]...)"],
    "org.apache.commons.text.lookup.JavaPlatformStringLookup#JavaPlatformStringLookup()": [
        "org.apache.commons.text.lookup.AbstractStringLookup.<init>()",
        "org.apache.commons.text.lookup.JavaPlatformStringLookup.<init>()"
    ],
    "org.apache.commons.text.ExtendedMessageFormat#ExtendedMessageFormat(String,Map<String, ? extends FormatFactory>)": ["org.apache.commons.text.ExtendedMessageFormat#ExtendedMessageFormat(String,Locale,Map<String, ? extends FormatFactory>)"],
    "org.apache.commons.text.WordUtils.wrap(String,int)": ["org.apache.commons.text.WordUtils.wrap(String,int,String,boolean)"],
    "org.apache.commons.text.StrTokenizer.<init>()": [
        "org.apache.commons.text.StrMatcher.noneMatcher()",
        "org.apache.commons.text.StrMatcher.splitMatcher()"
    ],
    "org.apache.commons.text.FormattableUtils.toString(Formattable)": ["org.apache.commons.text.FormattableUtils.<staticinit>()"],
    "org.apache.commons.text.TextStringBuilder#deleteFirst(StringMatcher)": ["org.apache.commons.text.TextStringBuilder#replace(StringMatcher,String,int,int,int)"],
    "org.apache.commons.text.StringEscapeUtils.XsiUnescaper.<init>()": ["org.apache.commons.text.translate.CharSequenceTranslator.<init>()"],
    "org.apache.commons.text.matcher.StringMatcherFactory#stringMatcher(String)": [
        "org.apache.commons.text.matcher.StringMatcherFactory.<staticinit>()",
        "org.apache.commons.text.matcher.StringMatcherFactory#stringMatcher(String)"
    ],
    "org.apache.commons.text.StrBuilder#appendPadding(int,char)": ["org.apache.commons.text.StrBuilder#ensureCapacity(int)"],
    "org.apache.commons.text.numbers.DoubleFormat.Builder#digits(String)": ["org.apache.commons.text.numbers.DoubleFormat.Builder.<staticinit>()"],
    "org.apache.commons.text.StrBuilder#readFrom(Readable)": [
        "org.apache.commons.text.TextStringBuilder.TextStringBuilderReader#read(char[],int,int)",
        "org.apache.commons.text.StrBuilder#ensureCapacity(int)",
        "org.apache.commons.text.StrBuilder.StrBuilderReader#read(char[],int,int)"
    ],
    "org.apache.commons.text.RandomStringGenerator#generate(int)": [
        "org.apache.commons.text.RandomStringGenerator#generateRandomNumber(List<Character>)",
        "org.apache.commons.text.RandomStringGenerator#generateRandomNumber(int,int)",
        "org.apache.commons.text.CharacterPredicates$CharacterPredicates$1#test(int)"
    ],
    "org.apache.commons.text.StringTokenizer#StringTokenizer(String)": ["org.apache.commons.text.StringTokenizer.<init>()"],
    "org.apache.commons.text.StringTokenizer#StringTokenizer()": ["org.apache.commons.text.StringTokenizer.<init>()"],
    "org.apache.commons.text.TextStringBuilder#append(TextStringBuilder,int,int)": [
        "org.apache.commons.text.TextStringBuilder#length()",
        "org.apache.commons.text.TextStringBuilder#appendNull()",
        "org.apache.commons.text.TextStringBuilder#getChars(int,int,char[],int)",
        "org.apache.commons.text.TextStringBuilder#ensureCapacityInternal(int)"
    ],
    "org.apache.commons.text.numbers.DoubleFormat.EngineeringDoubleFormat#applyFiniteInternal(ParsedDecimal)": ["org.apache.commons.text.numbers.ParsedDecimal#toEngineeringString(FormatOptions)"],
    "org.apache.commons.text.StrSubstitutor#substitute(StrBuilder,int,int,List<String>)": [
        "org.apache.commons.text.StrSubstitutor#getEscapeChar()",
        "org.apache.commons.text.StrMatcher.NoMatcher#isMatch(char[],int,int,int)",
        "org.apache.commons.text.StrSubstitutor#isDisableSubstitutionInValues()",
        "org.apache.commons.text.StrBuilder#toString()",
        "org.apache.commons.text.StrBuilder#deleteCharAt(int)",
        "org.apache.commons.text.StrSubstitutor#getVariablePrefixMatcher()",
        "org.apache.commons.text.StrSubstitutor#isEnableSubstitutionInVariables()",
        "org.apache.commons.text.StrSubstitutor#getValueDelimiterMatcher()",
        "org.apache.commons.text.StrSubstitutor#resolveVariable(String,StrBuilder,int,int)",
        "org.apache.commons.text.StrBuilder#replace(int,int,String)",
        "org.apache.commons.text.StrMatcher#isMatch(char[],int)",
        "org.apache.commons.text.StrMatcher.TrimMatcher#isMatch(char[],int,int,int)",
        "org.apache.commons.text.StrSubstitutor#checkCyclicSubstitution(String,List<String>)",
        "org.apache.commons.text.StrSubstitutor#substitute(StrBuilder,int,int,List<String>)",
        "org.apache.commons.text.StrMatcher.StringMatcher#isMatch(char[],int,int,int)",
        "org.apache.commons.text.StrSubstitutor#getVariableSuffixMatcher()",
        "org.apache.commons.text.StrMatcher.CharSetMatcher#isMatch(char[],int,int,int)",
        "org.apache.commons.text.StrSubstitutor#substitute(StrBuilder,int,int)",
        "org.apache.commons.text.StrBuilder#StrBuilder(String)",
        "org.apache.commons.text.StrMatcher.CharMatcher#isMatch(char[],int,int,int)",
        "org.apache.commons.text.StrBuilder#length()"
    ],
    "org.apache.commons.text.TextStringBuilder#appendln(double)": [
        "org.apache.commons.text.TextStringBuilder#append(double)",
        "org.apache.commons.text.TextStringBuilder#appendNewLine()"
    ],
    "org.apache.commons.text.StrTokenizer#readWithQuotes(char[],int,int,StrBuilder,List<String>,int,int)": [
        "org.apache.commons.text.StrMatcher.NoMatcher#isMatch(char[],int,int,int)",
        "org.apache.commons.text.StrBuilder#substring(int,int)",
        "org.apache.commons.text.StrBuilder#append(char[],int,int)",
        "org.apache.commons.text.StrTokenizer#getDelimiterMatcher()",
        "org.apache.commons.text.StrMatcher.TrimMatcher#isMatch(char[],int,int,int)",
        "org.apache.commons.text.StrTokenizer#isQuote(char[],int,int,int,int)",
        "org.apache.commons.text.StrBuilder#append(char)",
        "org.apache.commons.text.StrMatcher.StringMatcher#isMatch(char[],int,int,int)",
        "org.apache.commons.text.StrTokenizer#addToken(List<String>,String)",
        "org.apache.commons.text.StrMatcher.CharSetMatcher#isMatch(char[],int,int,int)",
        "org.apache.commons.text.StrBuilder#size()",
        "org.apache.commons.text.StrTokenizer#getTrimmerMatcher()",
        "org.apache.commons.text.StrTokenizer#getIgnoredMatcher()",
        "org.apache.commons.text.StrMatcher.CharMatcher#isMatch(char[],int,int,int)",
        "org.apache.commons.text.StrBuilder#clear()"
    ],
    "org.apache.commons.text.lookup.InterpolatorStringLookup#InterpolatorStringLookup(Map<String, StringLookup>,StringLookup,boolean)": [
        "org.apache.commons.text.lookup.StringLookupFactory#addDefaultStringLookups(Map<String, StringLookup>)",
        "org.apache.commons.text.lookup.AbstractStringLookup.<init>()",
        "org.apache.commons.text.lookup.InterpolatorStringLookup.<init>()",
        "org.apache.commons.text.lookup.StringLookupFactory.toKey(String)",
        "org.apache.commons.text.lookup.StringLookupFactory.<staticinit>()"
    ],
    "org.apache.commons.text.StringSubstitutor#StringSubstitutor(StringLookup,StringMatcher,StringMatcher,char,StringMatcher)": [
        "org.apache.commons.text.StringSubstitutor#setEscapeChar(char)",
        "org.apache.commons.text.StringSubstitutor#setVariablePrefixMatcher(StringMatcher)",
        "org.apache.commons.text.StringSubstitutor#setVariableSuffixMatcher(StringMatcher)",
        "org.apache.commons.text.StringSubstitutor.<init>()",
        "org.apache.commons.text.StringSubstitutor#setVariableResolver(StringLookup)",
        "org.apache.commons.text.StringSubstitutor#setValueDelimiterMatcher(StringMatcher)"
    ],
    "org.apache.commons.text.lookup.XmlEncoderStringLookup#XmlEncoderStringLookup()": [
        "org.apache.commons.text.lookup.AbstractStringLookup.<init>()",
        "org.apache.commons.text.lookup.XmlEncoderStringLookup.<init>()"
    ],
    "org.apache.commons.text.StrTokenizer.getTSVInstance(String)": [
        "org.apache.commons.text.StrTokenizer.getTSVClone()",
        "org.apache.commons.text.StrTokenizer#reset(String)"
    ],
    "org.apache.commons.text.StrBuilder#setCharAt(int,char)": ["org.apache.commons.text.StrBuilder#length()"],
    "org.apache.commons.text.TextStringBuilder#append(StringBuffer,int,int)": [
        "org.apache.commons.text.TextStringBuilder#ensureCapacityInternal(int)",
        "org.apache.commons.text.TextStringBuilder#length()",
        "org.apache.commons.text.TextStringBuilder#appendNull()"
    ],
    "org.apache.commons.text.lookup.InterpolatorStringLookup#InterpolatorStringLookup()": ["org.apache.commons.text.lookup.InterpolatorStringLookup#InterpolatorStringLookup(Map<String, V>)"],
    "org.apache.commons.text.TextStringBuilder#deleteAll(String)": [
        "org.apache.commons.text.TextStringBuilder#indexOf(String,int)",
        "org.apache.commons.text.TextStringBuilder#deleteImpl(int,int,int)"
    ],
    "org.apache.commons.text.CompositeFormat#format(Object,StringBuffer,FieldPosition)": ["org.apache.commons.text.CompositeFormat#format(Object,StringBuffer,FieldPosition)"],
    "org.apache.commons.text.StrBuilder#appendWithSeparators(Iterator<?>,String)": [
        "org.apache.commons.text.StrBuilder#append(String)",
        "org.apache.commons.text.StrBuilder#append(float)"
    ],
    "org.apache.commons.text.TextStringBuilder#asTokenizer()": ["org.apache.commons.text.TextStringBuilder.TextStringBuilderTokenizer#TextStringBuilderTokenizer()"],
    "org.apache.commons.text.StrBuilder#toCharArray(int,int)": ["org.apache.commons.text.StrBuilder#validateRange(int,int)"],
    "org.apache.commons.text.StringTokenizer#tokenize(char[],int,int)": [
        "org.apache.commons.text.StringTokenizer#addToken(List<String>,String)",
        "org.apache.commons.text.TextStringBuilder#TextStringBuilder()",
        "org.apache.commons.text.StringTokenizer#readNextToken(char[],int,int,TextStringBuilder,List<String>)"
    ],
    "org.apache.commons.text.StrBuilder#setLength(int)": ["org.apache.commons.text.StrBuilder#ensureCapacity(int)"],
    "org.apache.commons.text.StrLookup.<staticinit>()": [
        "org.apache.commons.text.StrLookup.MapStrLookup#MapStrLookup(Map<String, V>)",
        "org.apache.commons.text.StrLookup.SystemPropertiesStrLookup.<init>()"
    ],
    "org.apache.commons.text.matcher.StringMatcher#andThen(StringMatcher)": [
        "org.apache.commons.text.matcher.StringMatcherFactory.<staticinit>()",
        "org.apache.commons.text.matcher.StringMatcherFactory#andMatcher(StringMatcher[]...)"
    ],
    "org.apache.commons.text.TextStringBuilder.TextStringBuilderReader#TextStringBuilderReader()": ["org.apache.commons.text.TextStringBuilder.TextStringBuilderReader.<init>()"],
    "org.apache.commons.text.io.StringSubstitutorReader#StringSubstitutorReader(Reader,StringSubstitutor)": [
        "org.apache.commons.text.StringSubstitutor#getEscapeChar()",
        "org.apache.commons.text.StringSubstitutor#StringSubstitutor(StringSubstitutor)",
        "org.apache.commons.text.matcher.StringMatcherFactory.<staticinit>()",
        "org.apache.commons.text.io.StringSubstitutorReader.<init>()",
        "org.apache.commons.text.matcher.StringMatcherFactory#charMatcher(char)",
        "org.apache.commons.text.StringSubstitutor#getVariablePrefixMatcher()",
        "org.apache.commons.text.matcher.StringMatcher#andThen(StringMatcher)"
    ],
    "org.apache.commons.text.lookup.ResourceBundleStringLookup#ResourceBundleStringLookup()": ["org.apache.commons.text.lookup.ResourceBundleStringLookup#ResourceBundleStringLookup(String)"],
    "org.apache.commons.text.lookup.UrlDecoderStringLookup#UrlDecoderStringLookup()": [
        "org.apache.commons.text.lookup.AbstractStringLookup.<init>()",
        "org.apache.commons.text.lookup.UrlDecoderStringLookup.<init>()"
    ],
    "org.apache.commons.text.StringTokenizer#nextToken()": ["org.apache.commons.text.StringTokenizer#hasNext()"],
    "org.apache.commons.text.lookup.StringLookupFactory#addDefaultStringLookups(Map<String, StringLookup>)": [
        "org.apache.commons.text.lookup.StringLookupFactory.DefaultStringLookupsHolder.<staticinit>()",
        "org.apache.commons.text.lookup.StringLookupFactory.DefaultStringLookupsHolder#getDefaultStringLookups()",
        "org.apache.commons.text.lookup.StringLookupFactory.<staticinit>()"
    ],
    "org.apache.commons.text.TextStringBuilder#append(long)": ["org.apache.commons.text.TextStringBuilder#append(char)"],
    "org.apache.commons.text.translate.UnicodeEscaper#translate(int,Writer)": [
        "org.apache.commons.text.translate.CharSequenceTranslator.<staticinit>()",
        "org.apache.commons.text.StrBuilder.StrBuilderWriter#write(String)",
        "org.apache.commons.text.translate.JavaUnicodeEscaper#toUtf16Escape(int)",
        "org.apache.commons.text.translate.UnicodeEscaper#toUtf16Escape(int)",
        "org.apache.commons.text.TextStringBuilder.TextStringBuilderWriter#write(String)"
    ],
    "org.apache.commons.text.StringTokenizer.<staticinit>()": [
        "org.apache.commons.text.StringTokenizer#StringTokenizer()",
        "org.apache.commons.text.matcher.StringMatcherFactory#doubleQuoteMatcher()",
        "org.apache.commons.text.matcher.StringMatcherFactory#commaMatcher()",
        "org.apache.commons.text.matcher.StringMatcherFactory#trimMatcher()",
        "org.apache.commons.text.StringTokenizer#setIgnoredMatcher(StringMatcher)",
        "org.apache.commons.text.StringTokenizer#setTrimmerMatcher(StringMatcher)",
        "org.apache.commons.text.StringTokenizer#setQuoteMatcher(StringMatcher)",
        "org.apache.commons.text.matcher.StringMatcherFactory#tabMatcher()",
        "org.apache.commons.text.StringTokenizer#setDelimiterMatcher(StringMatcher)",
        "org.apache.commons.text.matcher.StringMatcherFactory#noneMatcher()",
        "org.apache.commons.text.StringTokenizer#setIgnoreEmptyTokens(boolean)",
        "org.apache.commons.text.matcher.StringMatcherFactory.<staticinit>()",
        "org.apache.commons.text.StringTokenizer#setEmptyTokenAsNull(boolean)"
    ],
    "org.apache.commons.text.WordUtils.initials(String,char[]...)": ["org.apache.commons.text.WordUtils.generateIsDelimiterFunction(char[])"],
    "org.apache.commons.text.StrBuilder#insert(int,double)": ["org.apache.commons.text.StrBuilder#insert(int,char)"],
    "org.apache.commons.text.translate.CsvTranslators.CsvEscaper.<init>()": ["org.apache.commons.text.translate.SinglePassTranslator.<init>()"],
    "org.apache.commons.text.StringEscapeUtils.escapeJson(String)": [
        "org.apache.commons.text.StringEscapeUtils.<staticinit>()",
        "org.apache.commons.text.translate.CharSequenceTranslator#translate(CharSequence)"
    ],
    "org.apache.commons.text.TextStringBuilder#indexOf(String)": ["org.apache.commons.text.TextStringBuilder#indexOf(String,int)"],
    "org.apache.commons.text.lookup.StringLookupFactory#resourceBundleStringLookup()": ["org.apache.commons.text.lookup.ResourceBundleStringLookup.<staticinit>()"],
    "org.apache.commons.text.StrTokenizer.getCSVClone()": [
        "org.apache.commons.text.StrTokenizer#clone()",
        "org.apache.commons.text.StrTokenizer.<staticinit>()"
    ],
    "org.apache.commons.text.ExtendedMessageFormat#getFormat(String)": ["org.apache.commons.text.ExtendedMessageFormat.<staticinit>()"],
    "org.apache.commons.text.TextStringBuilder#equals(Object)": ["org.apache.commons.text.TextStringBuilder#equals(TextStringBuilder)"],
    "org.apache.commons.text.TextStringBuilder#drainChar(int)": [
        "org.apache.commons.text.TextStringBuilder#deleteCharAt(int)",
        "org.apache.commons.text.TextStringBuilder#validateIndex(int)"
    ],
    "org.apache.commons.text.StringSubstitutor#substitute(TextStringBuilder,int,int,List<String>)": [
        "org.apache.commons.text.StringSubstitutor#isDisableSubstitutionInValues()",
        "org.apache.commons.text.StringSubstitutor#isPreserveEscapes()",
        "org.apache.commons.text.matcher.AbstractStringMatcher.TrimMatcher#isMatch(char[],int,int,int)",
        "org.apache.commons.text.StringSubstitutor#resolveVariable(String,TextStringBuilder,int,int)",
        "org.apache.commons.text.StringSubstitutor#getVariableSuffixMatcher()",
        "org.apache.commons.text.matcher.AbstractStringMatcher.NoneMatcher#isMatch(CharSequence,int,int,int)",
        "org.apache.commons.text.matcher.AbstractStringMatcher.AndStringMatcher#isMatch(CharSequence,int,int,int)",
        "org.apache.commons.text.TextStringBuilder#deleteCharAt(int)",
        "org.apache.commons.text.StringSubstitutor#getValueDelimiterMatcher()",
        "org.apache.commons.text.StringSubstitutor#isEnableUndefinedVariableException()",
        "org.apache.commons.text.StringSubstitutor#getEscapeChar()",
        "org.apache.commons.text.matcher.AbstractStringMatcher.AndStringMatcher#isMatch(char[],int,int,int)",
        "org.apache.commons.text.TextStringBuilder#toString()",
        "org.apache.commons.text.StringSubstitutor.Result#Result(boolean,int)",
        "org.apache.commons.text.matcher.AbstractStringMatcher.CharMatcher#isMatch(CharSequence,int,int,int)",
        "org.apache.commons.text.TextStringBuilder#midString(int,int)",
        "org.apache.commons.text.StringSubstitutor#isEnableSubstitutionInVariables()",
        "org.apache.commons.text.StringSubstitutor#checkCyclicSubstitution(String,List<String>)",
        "org.apache.commons.text.StringSubstitutor#getVariablePrefixMatcher()",
        "org.apache.commons.text.TextStringBuilder#length()",
        "org.apache.commons.text.StringSubstitutor#substitute(TextStringBuilder,int,int)",
        "org.apache.commons.text.TextStringBuilder#TextStringBuilder(String)",
        "org.apache.commons.text.TextStringBuilder#charAt(int)",
        "org.apache.commons.text.matcher.AbstractStringMatcher.TrimMatcher#isMatch(CharSequence,int,int,int)",
        "org.apache.commons.text.StringSubstitutor#substitute(TextStringBuilder,int,int,List<String>)",
        "org.apache.commons.text.matcher.AbstractStringMatcher.NoneMatcher#isMatch(char[],int,int,int)",
        "org.apache.commons.text.matcher.AbstractStringMatcher.CharSetMatcher#isMatch(char[],int,int,int)",
        "org.apache.commons.text.TextStringBuilder#replace(int,int,String)",
        "org.apache.commons.text.matcher.AbstractStringMatcher.CharMatcher#isMatch(char[],int,int,int)",
        "org.apache.commons.text.matcher.AbstractStringMatcher.CharSetMatcher#isMatch(CharSequence,int,int,int)",
        "org.apache.commons.text.matcher.StringMatcher#isMatch(CharSequence,int,int,int)",
        "org.apache.commons.text.matcher.AbstractStringMatcher.CharArrayMatcher#isMatch(CharSequence,int,int,int)",
        "org.apache.commons.text.matcher.AbstractStringMatcher.CharArrayMatcher#isMatch(char[],int,int,int)"
    ],
    "org.apache.commons.text.StrLookup.ResourceBundleLookup#ResourceBundleLookup(ResourceBundle)": [
        "org.apache.commons.text.StrLookup.ResourceBundleLookup.<init>()",
        "org.apache.commons.text.StrLookup#StrLookup()"
    ],
    "org.apache.commons.text.StrMatcher.charSetMatcher(char[]...)": [
        "org.apache.commons.text.StrMatcher.CharMatcher#CharMatcher(char)",
        "org.apache.commons.text.StrMatcher.<staticinit>()",
        "org.apache.commons.text.StrMatcher.CharSetMatcher#CharSetMatcher(char[])"
    ],
    "org.apache.commons.text.StrTokenizer#addToken(List<String>,String)": [
        "org.apache.commons.text.StrTokenizer#isIgnoreEmptyTokens()",
        "org.apache.commons.text.StrTokenizer#isEmptyTokenAsNull()"
    ],
    "org.apache.commons.text.StrBuilder#replaceImpl(int,int,int,String,int)": ["org.apache.commons.text.StrBuilder#ensureCapacity(int)"],
    "org.apache.commons.text.StrLookup.SystemPropertiesStrLookup.<init>()": ["org.apache.commons.text.StrLookup#StrLookup()"],
    "org.apache.commons.text.lookup.StringLookupFactory#base64StringLookup()": ["org.apache.commons.text.lookup.StringLookupFactory.<staticinit>()"],
    "org.apache.commons.text.WordUtils.initials(String)": ["org.apache.commons.text.WordUtils.initials(String,char[]...)"],
    "org.apache.commons.text.matcher.StringMatcherFactory#charMatcher(char)": ["org.apache.commons.text.matcher.AbstractStringMatcher.CharMatcher#CharMatcher(char)"],
    "org.apache.commons.text.numbers.ParsedDecimal#appendLocalizedDigit(int,char[])": ["org.apache.commons.text.numbers.ParsedDecimal#append(char)"],
    "org.apache.commons.text.StrSubstitutor.replaceSystemProperties(Object)": [
        "org.apache.commons.text.StrLookup.systemPropertiesLookup()",
        "org.apache.commons.text.StrSubstitutor#replace(Object)",
        "org.apache.commons.text.StrSubstitutor#StrSubstitutor(StrLookup<?>)"
    ],
    "org.apache.commons.text.lookup.StringLookupFactory#localHostStringLookup()": ["org.apache.commons.text.lookup.LocalHostStringLookup.<staticinit>()"],
    "org.apache.commons.text.StrBuilder#appendln(StrBuilder)": [
        "org.apache.commons.text.StrBuilder#appendNewLine()",
        "org.apache.commons.text.StrBuilder#append(StrBuilder)"
    ],
    "org.apache.commons.text.StringTokenizer#previous()": ["org.apache.commons.text.StringTokenizer#hasPrevious()"],
    "org.apache.commons.text.lookup.StringLookupFactory#propertiesStringLookup()": [
        "org.apache.commons.text.lookup.StringLookupFactory#propertiesStringLookup(Path[]...)",
        "org.apache.commons.text.lookup.StringLookupFactory.<staticinit>()",
        "org.apache.commons.text.lookup.PropertiesStringLookup.<staticinit>()"
    ],
    "org.apache.commons.text.translate.UnicodeEscaper.below(int)": ["org.apache.commons.text.translate.UnicodeEscaper.outsideOf(int,int)"],
    "org.apache.commons.text.StrLookup.MapStrLookup#MapStrLookup(Map<String, V>)": [
        "org.apache.commons.text.StrLookup.MapStrLookup.<init>()",
        "org.apache.commons.text.StrLookup#StrLookup()"
    ],
    "org.apache.commons.text.StrMatcher.<staticinit>()": [
        "org.apache.commons.text.StrMatcher.TrimMatcher#TrimMatcher()",
        "org.apache.commons.text.StrMatcher.CharSetMatcher#CharSetMatcher(char[])",
        "org.apache.commons.text.StrMatcher.NoMatcher#NoMatcher()",
        "org.apache.commons.text.StrMatcher.CharMatcher#CharMatcher(char)"
    ],
    "org.apache.commons.text.similarity.CosineSimilarity.<staticinit>()": ["org.apache.commons.text.similarity.CosineSimilarity.<init>()"],
    "org.apache.commons.text.lookup.XmlDecoderStringLookup.<staticinit>()": ["org.apache.commons.text.lookup.XmlDecoderStringLookup#XmlDecoderStringLookup()"],
    "org.apache.commons.text.StrTokenizer#StrTokenizer(String,char,char)": [
        "org.apache.commons.text.StrTokenizer#setQuoteChar(char)",
        "org.apache.commons.text.StrTokenizer#StrTokenizer(String,char)"
    ],
    "org.apache.commons.text.TextStringBuilder#appendln(int)": [
        "org.apache.commons.text.TextStringBuilder#append(int)",
        "org.apache.commons.text.TextStringBuilder#appendNewLine()"
    ],
    "org.apache.commons.text.TextStringBuilder#indexOf(String,int)": ["org.apache.commons.text.TextStringBuilder#indexOf(String,int)"],
    "org.apache.commons.text.similarity.IntersectionSimilarity.TinyBag#TinyBag(int)": ["org.apache.commons.text.similarity.IntersectionSimilarity.TinyBag.<init>()"],
    "org.apache.commons.text.similarity.CosineDistance#apply(CharSequence,CharSequence)": [
        "org.apache.commons.text.similarity.Counter.of(CharSequence[])",
        "org.apache.commons.text.similarity.RegexTokenizer#apply(CharSequence)",
        "org.apache.commons.text.similarity.CosineSimilarity.<staticinit>()",
        "org.apache.commons.text.similarity.RegexTokenizer.<staticinit>()",
        "org.apache.commons.text.similarity.CosineSimilarity#cosineSimilarity(Map<CharSequence, Integer>,Map<CharSequence, Integer>)"
    ],
    "org.apache.commons.text.RandomStringGenerator.builder()": ["org.apache.commons.text.RandomStringGenerator.Builder.<init>()"],
    "org.apache.commons.text.WordUtils.capitalizeFully(String,char[]...)": ["org.apache.commons.text.WordUtils.capitalize(String,char[]...)"],
    "org.apache.commons.text.StrBuilder.StrBuilderWriter#StrBuilderWriter()": ["org.apache.commons.text.StrBuilder.StrBuilderWriter.<init>()"],
    "org.apache.commons.text.lookup.InterpolatorStringLookup#InterpolatorStringLookup(StringLookup)": ["org.apache.commons.text.lookup.InterpolatorStringLookup#InterpolatorStringLookup(Map<String, StringLookup>,StringLookup,boolean)"],
    "org.apache.commons.text.CaseUtils.toCamelCase(String,boolean,char[]...)": ["org.apache.commons.text.CaseUtils.toDelimiterSet(char[])"],
    "org.apache.commons.text.ExtendedMessageFormat#appendQuotedString(String,ParsePosition,StringBuilder)": [
        "org.apache.commons.text.ExtendedMessageFormat#next(ParsePosition)",
        "org.apache.commons.text.ExtendedMessageFormat.<staticinit>()"
    ],
    "org.apache.commons.text.lookup.StringLookupFactory#functionStringLookup(Function<String, R>)": ["org.apache.commons.text.lookup.FunctionStringLookup.on(Function<String, R>)"],
    "org.apache.commons.text.StrMatcher.CharSetMatcher#CharSetMatcher(char[])": [
        "org.apache.commons.text.StrMatcher#StrMatcher()",
        "org.apache.commons.text.StrMatcher.CharSetMatcher.<init>()"
    ],
    "org.apache.commons.text.TextStringBuilder#appendWithSeparators(Iterable<?>,String)": ["org.apache.commons.text.TextStringBuilder#appendWithSeparators(Iterator<?>,String)"],
    "org.apache.commons.text.StrTokenizer#next()": ["org.apache.commons.text.StrTokenizer#hasNext()"],
    "org.apache.commons.text.lookup.ConstantStringLookup.<init>()": ["org.apache.commons.text.lookup.AbstractStringLookup.<init>()"],
    "org.apache.commons.text.StrMatcher#isMatch(char[],int)": [
        "org.apache.commons.text.StrMatcher.NoMatcher#isMatch(char[],int,int,int)",
        "org.apache.commons.text.StrMatcher.TrimMatcher#isMatch(char[],int,int,int)",
        "org.apache.commons.text.StrMatcher.CharSetMatcher#isMatch(char[],int,int,int)",
        "org.apache.commons.text.StrMatcher.StringMatcher#isMatch(char[],int,int,int)",
        "org.apache.commons.text.StrMatcher.CharMatcher#isMatch(char[],int,int,int)"
    ],
    "org.apache.commons.text.StringEscapeUtils.unescapeHtml3(String)": [
        "org.apache.commons.text.StringEscapeUtils.<staticinit>()",
        "org.apache.commons.text.translate.CharSequenceTranslator#translate(CharSequence)"
    ],
    "org.apache.commons.text.StrTokenizer#reset(char[])": ["org.apache.commons.text.StrTokenizer#reset()"],
    "org.apache.commons.text.StrBuilder#insert(int,char)": [
        "org.apache.commons.text.StrBuilder#validateIndex(int)",
        "org.apache.commons.text.StrBuilder#ensureCapacity(int)"
    ],
    "org.apache.commons.text.StrBuilder#indexOf(StrMatcher)": ["org.apache.commons.text.StrBuilder#indexOf(StrMatcher,int)"],
    "org.apache.commons.text.StrBuilder#append(StringBuilder)": [
        "org.apache.commons.text.StrBuilder#ensureCapacity(int)",
        "org.apache.commons.text.StrBuilder#length()",
        "org.apache.commons.text.StrBuilder#appendNull()"
    ],
    "org.apache.commons.text.StringSubstitutor.replace(Object,Map<String, V>)": [
        "org.apache.commons.text.StringSubstitutor#StringSubstitutor(Map<String, V>)",
        "org.apache.commons.text.StringSubstitutor#replace(Object)"
    ],
    "org.apache.commons.text.matcher.StringMatcher#isMatch(char[],int)": [
        "org.apache.commons.text.matcher.AbstractStringMatcher.CharSetMatcher#isMatch(char[],int,int,int)",
        "org.apache.commons.text.matcher.AbstractStringMatcher.CharMatcher#isMatch(char[],int,int,int)",
        "org.apache.commons.text.matcher.AbstractStringMatcher.AndStringMatcher#isMatch(char[],int,int,int)",
        "org.apache.commons.text.matcher.AbstractStringMatcher.TrimMatcher#isMatch(char[],int,int,int)",
        "org.apache.commons.text.matcher.AbstractStringMatcher.CharArrayMatcher#isMatch(char[],int,int,int)",
        "org.apache.commons.text.matcher.AbstractStringMatcher.NoneMatcher#isMatch(char[],int,int,int)"
    ],
    "org.apache.commons.text.CharacterPredicates$CharacterPredicates$1.<init>()": ["org.apache.commons.text.CharacterPredicates.<init>()"],
    "org.apache.commons.text.StringSubstitutor#replace(Object)": [
        "org.apache.commons.text.TextStringBuilder#length()",
        "org.apache.commons.text.StringSubstitutor#substitute(TextStringBuilder,int,int)",
        "org.apache.commons.text.TextStringBuilder#TextStringBuilder()",
        "org.apache.commons.text.TextStringBuilder#toString()",
        "org.apache.commons.text.TextStringBuilder#append(Object)"
    ],
    "org.apache.commons.text.TextStringBuilder#appendln(Object)": [
        "org.apache.commons.text.TextStringBuilder#append(Object)",
        "org.apache.commons.text.TextStringBuilder#appendNewLine()"
    ],
    "org.apache.commons.text.StrSubstitutor#StrSubstitutor(Map<String, V>,String,String)": [
        "org.apache.commons.text.StrSubstitutor#StrSubstitutor(StrLookup<?>,String,String,char)",
        "org.apache.commons.text.StrSubstitutor.<staticinit>()",
        "org.apache.commons.text.StrLookup.mapLookup(Map<String, V>)"
    ],
    "org.apache.commons.text.lookup.ResourceBundleStringLookup#ResourceBundleStringLookup(String)": [
        "org.apache.commons.text.lookup.ResourceBundleStringLookup.<init>()",
        "org.apache.commons.text.lookup.AbstractStringLookup.<init>()"
    ],
    "org.apache.commons.text.numbers.DoubleFormat.AbstractDoubleFormat#apply(double)": ["org.apache.commons.text.numbers.DoubleFormat.AbstractDoubleFormat#applyFinite(double)"],
    "org.apache.commons.text.StringSubstitutor#replace(String,int,int)": [
        "org.apache.commons.text.StringSubstitutor#substitute(TextStringBuilder,int,int)",
        "org.apache.commons.text.TextStringBuilder#TextStringBuilder(int)",
        "org.apache.commons.text.TextStringBuilder#toString()",
        "org.apache.commons.text.TextStringBuilder#append(String,int,int)"
    ],
    "org.apache.commons.text.StrSubstitutor#replaceIn(StringBuilder)": ["org.apache.commons.text.StrSubstitutor#replaceIn(StringBuilder,int,int)"],
    "org.apache.commons.text.TextStringBuilder#insert(int,String)": [
        "org.apache.commons.text.TextStringBuilder#ensureCapacityInternal(int)",
        "org.apache.commons.text.TextStringBuilder#validateIndex(int)"
    ],
    "org.apache.commons.text.StrBuilder.StrBuilderReader#read(char[],int,int)": [
        "org.apache.commons.text.StrBuilder#getChars(int,int,char[],int)",
        "org.apache.commons.text.StrBuilder#size()"
    ],
    "org.apache.commons.text.lookup.StringLookupFactory#xmlEncoderStringLookup()": ["org.apache.commons.text.lookup.XmlEncoderStringLookup.<staticinit>()"],
    "org.apache.commons.text.lookup.XmlDecoderStringLookup#lookup(String)": ["org.apache.commons.text.StringEscapeUtils.unescapeXml(String)"],
    "org.apache.commons.text.lookup.StringLookupFactory#urlEncoderStringLookup()": ["org.apache.commons.text.lookup.UrlEncoderStringLookup.<staticinit>()"],
    "org.apache.commons.text.StrBuilder#charAt(int)": ["org.apache.commons.text.StrBuilder#length()"],
    "org.apache.commons.text.StringEscapeUtils.escapeJava(String)": [
        "org.apache.commons.text.StringEscapeUtils.<staticinit>()",
        "org.apache.commons.text.translate.CharSequenceTranslator#translate(CharSequence)"
    ],
    "org.apache.commons.text.lookup.StringLookupFactory#interpolatorStringLookup(Map<String, V>)": ["org.apache.commons.text.lookup.InterpolatorStringLookup#InterpolatorStringLookup(Map<String, V>)"],
    "org.apache.commons.text.TextStringBuilder.TextStringBuilderReader#read(char[],int,int)": [
        "org.apache.commons.text.TextStringBuilder#getChars(int,int,char[],int)",
        "org.apache.commons.text.TextStringBuilder#size()"
    ],
    "org.apache.commons.text.StringTokenizer#clone()": ["org.apache.commons.text.StringTokenizer#cloneReset()"],
    "org.apache.commons.text.StringEscapeUtils.Builder#Builder(CharSequenceTranslator)": ["org.apache.commons.text.StringEscapeUtils.Builder.<init>()"],
    "org.apache.commons.text.lookup.XmlEncoderStringLookup#lookup(String)": ["org.apache.commons.text.StringEscapeUtils.escapeXml10(String)"],
    "org.apache.commons.text.StringSubstitutor#StringSubstitutor(StringSubstitutor)": [
        "org.apache.commons.text.StringSubstitutor#getEscapeChar()",
        "org.apache.commons.text.StringSubstitutor#isDisableSubstitutionInValues()",
        "org.apache.commons.text.StringSubstitutor#getStringLookup()",
        "org.apache.commons.text.StringSubstitutor.<init>()",
        "org.apache.commons.text.StringSubstitutor#isPreserveEscapes()",
        "org.apache.commons.text.StringSubstitutor#getVariableSuffixMatcher()",
        "org.apache.commons.text.StringSubstitutor#getValueDelimiterMatcher()",
        "org.apache.commons.text.StringSubstitutor#isEnableSubstitutionInVariables()",
        "org.apache.commons.text.StringSubstitutor#isEnableUndefinedVariableException()",
        "org.apache.commons.text.StringSubstitutor#getVariablePrefixMatcher()"
    ],
    "org.apache.commons.text.AlphabetConverter#decode(String)": ["org.apache.commons.text.AlphabetConverter.codePointToString(int)"],
    "org.apache.commons.text.TextStringBuilder#append(float)": ["org.apache.commons.text.TextStringBuilder#append(char)"],
    "org.apache.commons.text.StrBuilder#append(StringBuffer,int,int)": [
        "org.apache.commons.text.StrBuilder#ensureCapacity(int)",
        "org.apache.commons.text.StrBuilder#length()",
        "org.apache.commons.text.StrBuilder#appendNull()"
    ],
    "org.apache.commons.text.matcher.StringMatcherFactory#singleQuoteMatcher()": ["org.apache.commons.text.matcher.StringMatcherFactory.<staticinit>()"],
    "org.apache.commons.text.lookup.JavaPlatformStringLookup#getRuntime()": ["org.apache.commons.text.lookup.JavaPlatformStringLookup#getSystemProperty(String)"],
    "org.apache.commons.text.translate.CsvTranslators#CsvTranslators()": ["org.apache.commons.text.translate.CsvTranslators.<init>()"],
    "org.apache.commons.text.StringTokenizer#checkTokenized()": [
        "org.apache.commons.text.StringTokenizer#tokenize(char[],int,int)",
        "org.apache.commons.text.TextStringBuilder.TextStringBuilderTokenizer#tokenize(char[],int,int)"
    ],
    "org.apache.commons.text.StrLookup#StrLookup()": ["org.apache.commons.text.StrLookup.<init>()"],
    "org.apache.commons.text.StrBuilder.StrBuilderReader#StrBuilderReader()": ["org.apache.commons.text.StrBuilder.StrBuilderReader.<init>()"],
    "org.apache.commons.text.StrBuilder#get()": ["org.apache.commons.text.StrBuilder#toString()"],
    "org.apache.commons.text.TextStringBuilder.TextStringBuilderWriter#TextStringBuilderWriter()": ["org.apache.commons.text.TextStringBuilder.TextStringBuilderWriter.<init>()"],
    "org.apache.commons.text.TextStringBuilder#replaceAll(StringMatcher,String)": ["org.apache.commons.text.TextStringBuilder#replace(StringMatcher,String,int,int,int)"],
    "org.apache.commons.text.translate.UnicodeEscaper.between(int,int)": ["org.apache.commons.text.translate.UnicodeEscaper#UnicodeEscaper(int,int,boolean)"],
    "org.apache.commons.text.StrBuilder#indexOf(String)": ["org.apache.commons.text.StrBuilder#indexOf(String,int)"],
    "org.apache.commons.text.translate.NumericEntityEscaper.between(int,int)": ["org.apache.commons.text.translate.NumericEntityEscaper#NumericEntityEscaper(int,int,boolean)"],
    "org.apache.commons.text.io.StringSubstitutorReader#readCount(int,int)": ["org.apache.commons.text.TextStringBuilder#size()"],
    "org.apache.commons.text.diff.EditScript#visit(CommandVisitor<T>)": [
        "org.apache.commons.text.diff.KeepCommand#accept(CommandVisitor<T>)",
        "org.apache.commons.text.diff.DeleteCommand#accept(CommandVisitor<T>)",
        "org.apache.commons.text.diff.InsertCommand#accept(CommandVisitor<T>)"
    ],
    "org.apache.commons.text.StrBuilder#equals(Object)": ["org.apache.commons.text.StrBuilder#equals(StrBuilder)"],
    "org.apache.commons.text.StrBuilder#insert(int,boolean)": [
        "org.apache.commons.text.StrBuilder#validateIndex(int)",
        "org.apache.commons.text.StrBuilder#ensureCapacity(int)"
    ],
    "org.apache.commons.text.StringSubstitutor#StringSubstitutor(StringLookup,String,String,char,String)": [
        "org.apache.commons.text.StringSubstitutor#setEscapeChar(char)",
        "org.apache.commons.text.StringSubstitutor#setVariablePrefix(String)",
        "org.apache.commons.text.StringSubstitutor.<init>()",
        "org.apache.commons.text.StringSubstitutor#setVariableResolver(StringLookup)",
        "org.apache.commons.text.StringSubstitutor#setVariableSuffix(String)",
        "org.apache.commons.text.StringSubstitutor#setValueDelimiter(String)"
    ],
    "org.apache.commons.text.StringEscapeUtils.XsiUnescaper#translate(CharSequence,int,Writer)": [
        "org.apache.commons.text.TextStringBuilder#length()",
        "org.apache.commons.text.StrBuilder.StrBuilderWriter#write(int)",
        "org.apache.commons.text.StrBuilder#toString()",
        "org.apache.commons.text.TextStringBuilder#toString()",
        "org.apache.commons.text.TextStringBuilder.TextStringBuilderWriter#write(char[])",
        "org.apache.commons.text.StrBuilder#length()",
        "org.apache.commons.text.StringEscapeUtils.XsiUnescaper.<staticinit>()"
    ],
    "org.apache.commons.text.StringTokenizer#StringTokenizer(char[],StringMatcher,StringMatcher)": [
        "org.apache.commons.text.StringTokenizer#setQuoteMatcher(StringMatcher)",
        "org.apache.commons.text.StringTokenizer#StringTokenizer(char[],StringMatcher)"
    ],
    "org.apache.commons.text.StringTokenizer#StringTokenizer(String,StringMatcher,StringMatcher)": [
        "org.apache.commons.text.StringTokenizer#setQuoteMatcher(StringMatcher)",
        "org.apache.commons.text.StringTokenizer#StringTokenizer(String,StringMatcher)"
    ],
    "org.apache.commons.text.TextStringBuilder#appendFalse(int)": ["org.apache.commons.text.TextStringBuilder.<staticinit>()"],
    "org.apache.commons.text.StrSubstitutor#replace(CharSequence,int,int)": [
        "org.apache.commons.text.StrBuilder#StrBuilder(int)",
        "org.apache.commons.text.StrBuilder#toString()",
        "org.apache.commons.text.StrSubstitutor#substitute(StrBuilder,int,int)",
        "org.apache.commons.text.StrBuilder#append(CharSequence,int,int)"
    ],
    "org.apache.commons.text.StrSubstitutor#replaceIn(StringBuffer)": ["org.apache.commons.text.StrSubstitutor#replaceIn(StringBuffer,int,int)"],
    "org.apache.commons.text.StrBuilder#deleteAll(String)": [
        "org.apache.commons.text.StrBuilder#deleteImpl(int,int,int)",
        "org.apache.commons.text.StrBuilder#indexOf(String,int)"
    ],
    "org.apache.commons.text.TextStringBuilder#minimizeCapacity()": ["org.apache.commons.text.TextStringBuilder#reallocate(int)"],
    "org.apache.commons.text.StrBuilder#append(CharSequence)": [
        "org.apache.commons.text.StrBuilder#toString()",
        "org.apache.commons.text.StrBuilder#append(CharBuffer)",
        "org.apache.commons.text.TextStringBuilder#toString()",
        "org.apache.commons.text.StrBuilder#append(StrBuilder)",
        "org.apache.commons.text.StrBuilder#append(float)",
        "org.apache.commons.text.StrBuilder#append(StringBuilder)",
        "org.apache.commons.text.StrBuilder#append(StringBuffer)",
        "org.apache.commons.text.StrBuilder#appendNull()"
    ],
    "org.apache.commons.text.ExtendedMessageFormat#ExtendedMessageFormat(String)": ["org.apache.commons.text.ExtendedMessageFormat#ExtendedMessageFormat(String,Locale)"],
    "org.apache.commons.text.matcher.AbstractStringMatcher.CharSetMatcher#CharSetMatcher(char[])": [
        "org.apache.commons.text.matcher.AbstractStringMatcher.CharSetMatcher.<init>()",
        "org.apache.commons.text.matcher.AbstractStringMatcher#AbstractStringMatcher()"
    ],
    "org.apache.commons.text.TextStringBuilder#lastIndexOf(char)": ["org.apache.commons.text.TextStringBuilder#lastIndexOf(char,int)"],
    "org.apache.commons.text.diff.EditCommand#EditCommand(T)": ["org.apache.commons.text.diff.EditCommand.<init>()"],
    "org.apache.commons.text.lookup.StringLookupFactory#urlDecoderStringLookup()": ["org.apache.commons.text.lookup.UrlDecoderStringLookup.<staticinit>()"],
    "org.apache.commons.text.StrBuilder#append(CharSequence,int,int)": [
        "org.apache.commons.text.StrBuilder#toString()",
        "org.apache.commons.text.TextStringBuilder#toString()",
        "org.apache.commons.text.StrBuilder#appendNull()",
        "org.apache.commons.text.StrBuilder#append(StringBuilder,int,int)"
    ],
    "org.apache.commons.text.lookup.JavaPlatformStringLookup#getSystemProperty(String)": [
        "org.apache.commons.text.lookup.FunctionStringLookup#lookup(String)",
        "org.apache.commons.text.lookup.StringLookupFactory.<staticinit>()"
    ],
    "org.apache.commons.text.StringEscapeUtils.unescapeXml(String)": [
        "org.apache.commons.text.StringEscapeUtils.<staticinit>()",
        "org.apache.commons.text.translate.CharSequenceTranslator#translate(CharSequence)"
    ],
    "org.apache.commons.text.ExtendedMessageFormat#hashCode()": ["org.apache.commons.text.ExtendedMessageFormat.<staticinit>()"],
    "org.apache.commons.text.lookup.DateStringLookup#lookup(String)": ["org.apache.commons.text.lookup.DateStringLookup#formatDate(long,String)"],
    "org.apache.commons.text.StrBuilder#appendSeparator(char,char)": [
        "org.apache.commons.text.StrBuilder#isNotEmpty()",
        "org.apache.commons.text.StrBuilder#append(char)"
    ],
    "org.apache.commons.text.TextStringBuilder#appendAll(T[]...)": ["org.apache.commons.text.TextStringBuilder#append(Object)"],
    "org.apache.commons.text.TextStringBuilder#substring(int,int)": ["org.apache.commons.text.TextStringBuilder#validateRange(int,int)"],
    "org.apache.commons.text.similarity.IntersectionSimilarity#getIntersection(TinyBag,TinyBag)": [
        "org.apache.commons.text.similarity.IntersectionSimilarity.TinyBag#entrySet()",
        "org.apache.commons.text.similarity.IntersectionSimilarity.TinyBag#getCount(Object)"
    ],
    "org.apache.commons.text.StringTokenizer#size()": ["org.apache.commons.text.StringTokenizer#checkTokenized()"],
    "org.apache.commons.text.StringSubstitutor.Result#Result(boolean,int)": ["org.apache.commons.text.StringSubstitutor.Result.<init>()"],
    "org.apache.commons.text.lookup.XmlDecoderStringLookup#XmlDecoderStringLookup()": [
        "org.apache.commons.text.lookup.AbstractStringLookup.<init>()",
        "org.apache.commons.text.lookup.XmlDecoderStringLookup.<init>()"
    ],
    "org.apache.commons.text.StrBuilder#appendln(long)": [
        "org.apache.commons.text.StrBuilder#appendNewLine()",
        "org.apache.commons.text.StrBuilder#append(long)"
    ],
    "org.apache.commons.text.lookup.FunctionStringLookup.on(Map<String, V>)": [
        "org.apache.commons.text.lookup.FunctionStringLookup.on(Function<String, R>)",
        "org.apache.commons.text.lookup.StringLookupFactory.toMap(Map<K, V>)"
    ],
    "org.apache.commons.text.diff.StringsComparator#buildSnake(int,int,int,int)": ["org.apache.commons.text.diff.StringsComparator.Snake#Snake(int,int,int)"],
    "org.apache.commons.text.diff.DeleteCommand#DeleteCommand(T)": [
        "org.apache.commons.text.diff.EditCommand#EditCommand(T)",
        "org.apache.commons.text.diff.DeleteCommand.<init>()"
    ],
    "org.apache.commons.text.StrTokenizer#StrTokenizer(char[])": ["org.apache.commons.text.StrTokenizer.<init>()"],
    "org.apache.commons.text.CharacterPredicates$CharacterPredicates$1#test(int)": [
        "org.apache.commons.text.CharacterPredicates$CharacterPredicates$1#test(int)",
        "org.apache.commons.text.CharacterPredicates.<staticinit>()"
    ],
    "org.apache.commons.text.StringTokenizer#previousToken()": ["org.apache.commons.text.StringTokenizer#hasPrevious()"],
    "org.apache.commons.text.StrBuilder#appendSeparator(String,String)": [
        "org.apache.commons.text.StrBuilder#append(String)",
        "org.apache.commons.text.StrBuilder#isEmpty()"
    ],
    "org.apache.commons.text.StrBuilder#append(CharBuffer,int,int)": [
        "org.apache.commons.text.StrBuilder#ensureCapacity(int)",
        "org.apache.commons.text.StrBuilder#length()",
        "org.apache.commons.text.StrBuilder#append(StringBuilder,int,int)",
        "org.apache.commons.text.StrBuilder#appendNull()"
    ],
    "org.apache.commons.text.AlphabetConverter.createConverterFromChars(Character[],Character[],Character[])": [
        "org.apache.commons.text.AlphabetConverter.convertCharsToIntegers(Character[])",
        "org.apache.commons.text.AlphabetConverter.createConverter(Integer[],Integer[],Integer[])"
    ],
    "org.apache.commons.text.translate.CodePointTranslator#translate(CharSequence,int,Writer)": [
        "org.apache.commons.text.translate.UnicodeUnpairedSurrogateRemover#translate(int,Writer)",
        "org.apache.commons.text.translate.NumericEntityEscaper#translate(int,Writer)",
        "org.apache.commons.text.translate.UnicodeEscaper#translate(int,Writer)"
    ],
    "org.apache.commons.text.similarity.LongestCommonSubsequence.algorithmC(CharSequence,CharSequence)": [
        "org.apache.commons.text.TextStringBuilder#length()",
        "org.apache.commons.text.TextStringBuilder#subSequence(int,int)",
        "org.apache.commons.text.similarity.LongestCommonSubsequence.algorithmC(CharSequence,CharSequence)",
        "org.apache.commons.text.StrBuilder#charAt(int)",
        "org.apache.commons.text.StrBuilder#length()",
        "org.apache.commons.text.similarity.LongestCommonSubsequence.reverse(CharSequence)",
        "org.apache.commons.text.TextStringBuilder#charAt(int)",
        "org.apache.commons.text.similarity.LongestCommonSubsequence.algorithmB(CharSequence,CharSequence)",
        "org.apache.commons.text.StrBuilder#subSequence(int,int)"
    ],
    "org.apache.commons.text.lookup.StringLookupFactory#propertiesStringLookup(Path[]...)": ["org.apache.commons.text.lookup.PropertiesStringLookup#PropertiesStringLookup(Path[]...)"],
    "org.apache.commons.text.StrTokenizer.<staticinit>()": [
        "org.apache.commons.text.StrTokenizer#setTrimmerMatcher(StrMatcher)",
        "org.apache.commons.text.StrMatcher.trimMatcher()",
        "org.apache.commons.text.StrTokenizer#setIgnoredMatcher(StrMatcher)",
        "org.apache.commons.text.StrTokenizer#setIgnoreEmptyTokens(boolean)",
        "org.apache.commons.text.StrTokenizer#setQuoteMatcher(StrMatcher)",
        "org.apache.commons.text.StrMatcher.tabMatcher()",
        "org.apache.commons.text.StrMatcher.noneMatcher()",
        "org.apache.commons.text.StrMatcher.doubleQuoteMatcher()",
        "org.apache.commons.text.StrMatcher.commaMatcher()",
        "org.apache.commons.text.StrTokenizer#StrTokenizer()",
        "org.apache.commons.text.StrTokenizer#setDelimiterMatcher(StrMatcher)",
        "org.apache.commons.text.StrTokenizer#setEmptyTokenAsNull(boolean)"
    ],
    "org.apache.commons.text.similarity.RegexTokenizer.<staticinit>()": ["org.apache.commons.text.similarity.RegexTokenizer.<init>()"],
    "org.apache.commons.text.StringTokenizer.getTSVInstance()": ["org.apache.commons.text.StringTokenizer.getTSVClone()"],
    "org.apache.commons.text.StringEscapeUtils.builder(CharSequenceTranslator)": ["org.apache.commons.text.StringEscapeUtils.Builder#Builder(CharSequenceTranslator)"],
    "org.apache.commons.text.TextStringBuilder#setCharAt(int,char)": ["org.apache.commons.text.TextStringBuilder#validateIndex(int)"],
    "org.apache.commons.text.ExtendedMessageFormat#getQuotedString(String,ParsePosition)": ["org.apache.commons.text.ExtendedMessageFormat#appendQuotedString(String,ParsePosition,StringBuilder)"],
    "org.apache.commons.text.lookup.BiFunctionStringLookup.on(BiFunction<String, U, T>)": ["org.apache.commons.text.lookup.BiFunctionStringLookup#BiFunctionStringLookup(BiFunction<String, P, R>)"],
    "org.apache.commons.text.StrTokenizer#setIgnoredChar(char)": [
        "org.apache.commons.text.StrMatcher.charMatcher(char)",
        "org.apache.commons.text.StrTokenizer#setIgnoredMatcher(StrMatcher)"
    ],
    "org.apache.commons.text.StrBuilder#appendAll(Iterator<?>)": ["org.apache.commons.text.StrBuilder#append(float)"],
    "org.apache.commons.text.translate.AggregateTranslator#translate(CharSequence,int,Writer)": [
        "org.apache.commons.text.translate.UnicodeUnescaper#translate(CharSequence,int,Writer)",
        "org.apache.commons.text.translate.LookupTranslator#translate(CharSequence,int,Writer)",
        "org.apache.commons.text.StringEscapeUtils.XsiUnescaper#translate(CharSequence,int,Writer)",
        "org.apache.commons.text.translate.SinglePassTranslator#translate(CharSequence,int,Writer)",
        "org.apache.commons.text.translate.CodePointTranslator#translate(CharSequence,int,Writer)",
        "org.apache.commons.text.translate.NumericEntityUnescaper#translate(CharSequence,int,Writer)",
        "org.apache.commons.text.translate.OctalUnescaper#translate(CharSequence,int,Writer)",
        "org.apache.commons.text.translate.AggregateTranslator#translate(CharSequence,int,Writer)"
    ],
    "org.apache.commons.text.TextStringBuilder#appendNull()": ["org.apache.commons.text.TextStringBuilder#append(String)"],
    "org.apache.commons.text.AlphabetConverter#addSingleEncoding(int,String,Collection<Integer>,Iterator<Integer>,Map<Integer, String>)": [
        "org.apache.commons.text.AlphabetConverter#addSingleEncoding(int,String,Collection<Integer>,Iterator<Integer>,Map<Integer, String>)",
        "org.apache.commons.text.AlphabetConverter.codePointToString(int)"
    ],
    "org.apache.commons.text.StrBuilder#append(float)": ["org.apache.commons.text.StrBuilder#append(float)"],
    "org.apache.commons.text.StringEscapeUtils.unescapeCsv(String)": [
        "org.apache.commons.text.StringEscapeUtils.<staticinit>()",
        "org.apache.commons.text.translate.CharSequenceTranslator#translate(CharSequence)"
    ],
    "org.apache.commons.text.lookup.InterpolatorStringLookup.<staticinit>()": ["org.apache.commons.text.lookup.InterpolatorStringLookup#InterpolatorStringLookup()"],
    "org.apache.commons.text.lookup.PropertiesStringLookup#lookup(String)": [
        "org.apache.commons.text.lookup.PropertiesStringLookup.toPropertyKey(String,String)",
        "org.apache.commons.text.lookup.PropertiesStringLookup.<staticinit>()",
        "org.apache.commons.text.lookup.AbstractPathFencedLookup#getPath(String)"
    ],
    "org.apache.commons.text.translate.NumericEntityEscaper#translate(int,Writer)": [
        "org.apache.commons.text.TextStringBuilder.TextStringBuilderWriter#write(char[])",
        "org.apache.commons.text.StrBuilder.StrBuilderWriter#write(String)",
        "org.apache.commons.text.StrBuilder.StrBuilderWriter#write(int)",
        "org.apache.commons.text.TextStringBuilder.TextStringBuilderWriter#write(String)"
    ],
    "org.apache.commons.text.TextStringBuilder#lastIndexOf(String)": ["org.apache.commons.text.TextStringBuilder#lastIndexOf(String,int)"],
    "org.apache.commons.text.StringSubstitutor#replaceIn(StringBuilder)": ["org.apache.commons.text.StringSubstitutor#replaceIn(StringBuilder,int,int)"],
    "org.apache.commons.text.StrBuilder#append(CharBuffer)": [
        "org.apache.commons.text.StrBuilder#ensureCapacity(int)",
        "org.apache.commons.text.StrBuilder#length()",
        "org.apache.commons.text.StrBuilder#append(float)",
        "org.apache.commons.text.StrBuilder#appendNull()"
    ],
    "org.apache.commons.text.lookup.DateStringLookup.<staticinit>()": ["org.apache.commons.text.lookup.DateStringLookup#DateStringLookup()"],
    "org.apache.commons.text.TextStringBuilder#appendln(StringBuffer)": [
        "org.apache.commons.text.TextStringBuilder#append(StringBuffer)",
        "org.apache.commons.text.TextStringBuilder#appendNewLine()"
    ],
    "org.apache.commons.text.StrMatcher.quoteMatcher()": ["org.apache.commons.text.StrMatcher.<staticinit>()"],
    "org.apache.commons.text.StringTokenizer#reset(String)": ["org.apache.commons.text.StringTokenizer#reset()"],
    "org.apache.commons.text.StrSubstitutor#replaceIn(StrBuilder)": [
        "org.apache.commons.text.StrBuilder#length()",
        "org.apache.commons.text.StrSubstitutor#substitute(StrBuilder,int,int)"
    ],
    "org.apache.commons.text.numbers.DoubleFormat#builder()": ["org.apache.commons.text.numbers.DoubleFormat.Builder#Builder(Function<Builder, DoubleFunction<String>>)"],
    "org.apache.commons.text.StringTokenizer#hasPrevious()": ["org.apache.commons.text.StringTokenizer#checkTokenized()"],
    "org.apache.commons.text.lookup.FunctionStringLookup#lookup(String)": ["org.apache.commons.text.similarity.RegexTokenizer#apply(CharSequence)"],
    "org.apache.commons.text.lookup.ScriptStringLookup#lookup(String)": ["org.apache.commons.text.lookup.AbstractStringLookup.<staticinit>()"],
    "org.apache.commons.text.TextStringBuilder#charAt(int)": ["org.apache.commons.text.TextStringBuilder#validateIndex(int)"],
    "org.apache.commons.text.StrTokenizer#StrTokenizer(char[],StrMatcher)": [
        "org.apache.commons.text.StrTokenizer#StrTokenizer(char[])",
        "org.apache.commons.text.StrTokenizer#setDelimiterMatcher(StrMatcher)"
    ],
    "org.apache.commons.text.AlphabetConverter#encode(String)": ["org.apache.commons.text.AlphabetConverter.codePointToString(int)"],
    "org.apache.commons.text.StringTokenizer.getCSVInstance(String)": [
        "org.apache.commons.text.StringTokenizer.getCSVClone()",
        "org.apache.commons.text.StringTokenizer#reset(String)"
    ],
    "org.apache.commons.text.TextStringBuilder.TextStringBuilderWriter#write(char[])": ["org.apache.commons.text.TextStringBuilder#append(char[])"],
    "org.apache.commons.text.StrBuilder.StrBuilderTokenizer#getContent()": [
        "org.apache.commons.text.StrBuilder#toString()",
        "org.apache.commons.text.StrTokenizer#getContent()"
    ],
    "org.apache.commons.text.matcher.AbstractStringMatcher.TrimMatcher#TrimMatcher()": [
        "org.apache.commons.text.matcher.AbstractStringMatcher#AbstractStringMatcher()",
        "org.apache.commons.text.matcher.AbstractStringMatcher.TrimMatcher.<init>()"
    ],
    "org.apache.commons.text.StrTokenizer#setDelimiterChar(char)": [
        "org.apache.commons.text.StrMatcher.charMatcher(char)",
        "org.apache.commons.text.StrTokenizer#setDelimiterMatcher(StrMatcher)"
    ]
}