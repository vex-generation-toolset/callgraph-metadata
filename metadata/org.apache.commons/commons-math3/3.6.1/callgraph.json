{
    "org.apache.commons.math3.userguide.genetics.HelloWorldExample.StringChromosome#toString()": [
        "org.apache.commons.math3.genetics.Chromosome#getFitness()",
        "org.apache.commons.math3.genetics.AbstractListChromosome#getRepresentation()"
    ],
    "org.apache.commons.math3.stat.inference.TTest#homoscedasticT(StatisticalSummary,StatisticalSummary)": [
        "org.apache.commons.math3.stat.descriptive.SummaryStatistics#getVariance()",
        "org.apache.commons.math3.stat.descriptive.StatisticalSummaryValues#getVariance()",
        "org.apache.commons.math3.stat.descriptive.DescriptiveStatistics#getN()",
        "org.apache.commons.math3.stat.descriptive.AggregateSummaryStatistics#getMean()",
        "org.apache.commons.math3.stat.descriptive.SummaryStatistics#getMean()",
        "org.apache.commons.math3.stat.descriptive.SynchronizedSummaryStatistics#getVariance()",
        "org.apache.commons.math3.stat.inference.TTest#homoscedasticT(double,double,double,double,double,double)",
        "org.apache.commons.math3.stat.descriptive.StatisticalSummaryValues#getN()",
        "org.apache.commons.math3.stat.descriptive.SummaryStatistics#getN()",
        "org.apache.commons.math3.stat.descriptive.StatisticalSummaryValues#getMean()",
        "org.apache.commons.math3.stat.descriptive.AggregateSummaryStatistics#getN()",
        "org.apache.commons.math3.stat.inference.TTest#checkSampleData(StatisticalSummary)",
        "org.apache.commons.math3.stat.descriptive.SynchronizedSummaryStatistics#getN()",
        "org.apache.commons.math3.stat.descriptive.AggregateSummaryStatistics#getVariance()",
        "org.apache.commons.math3.stat.descriptive.DescriptiveStatistics#getMean()",
        "org.apache.commons.math3.stat.descriptive.SynchronizedDescriptiveStatistics#getN()",
        "org.apache.commons.math3.stat.descriptive.SynchronizedSummaryStatistics#getMean()",
        "org.apache.commons.math3.stat.descriptive.DescriptiveStatistics#getVariance()"
    ],
    "org.apache.commons.math3.transform.FastSineTransformer#fst(double[])": [
        "org.apache.commons.math3.transform.DftNormalization.<staticinit>()",
        "org.apache.commons.math3.transform.FastFourierTransformer#transform(double[],TransformType)",
        "org.apache.commons.math3.complex.Complex#getReal()",
        "org.apache.commons.math3.util.ArithmeticUtils.isPowerOfTwo(long)",
        "org.apache.commons.math3.complex.Complex#getImaginary()",
        "org.apache.commons.math3.transform.TransformType.<staticinit>()",
        "org.apache.commons.math3.exception.util.LocalizedFormats.<staticinit>()",
        "org.apache.commons.math3.util.FastMath.sin(double)",
        "org.apache.commons.math3.util.FastMath.<staticinit>()",
        "org.apache.commons.math3.transform.FastFourierTransformer#FastFourierTransformer(DftNormalization)"
    ],
    "org.apache.commons.math3.stat.descriptive.AggregateSummaryStatistics#getMean()": [
        "org.apache.commons.math3.stat.descriptive.SynchronizedSummaryStatistics#getMean()",
        "org.apache.commons.math3.stat.descriptive.SummaryStatistics#getMean()"
    ],
    "org.apache.commons.math3.distribution.TDistribution#TDistribution(RandomGenerator,double,double)": [
        "org.apache.commons.math3.distribution.AbstractRealDistribution#AbstractRealDistribution(RandomGenerator)",
        "org.apache.commons.math3.special.Gamma.logGamma(double)",
        "org.apache.commons.math3.exception.util.LocalizedFormats.<staticinit>()",
        "org.apache.commons.math3.distribution.TDistribution.<staticinit>()",
        "org.apache.commons.math3.distribution.TDistribution.<init>()",
        "org.apache.commons.math3.util.FastMath.log(double)",
        "org.apache.commons.math3.util.FastMath.<staticinit>()"
    ],
    "org.apache.commons.math3.ode.JacobianMatrices.JacobiansSecondaryEquations#computeDerivatives(double,double[],double[],double[],double[])": [
        "org.apache.commons.math3.ode.ParameterConfiguration#getParameterName()",
        "org.apache.commons.math3.ode.ParameterJacobianWrapper#computeParameterJacobian(double,double[],double[],String,double[])",
        "org.apache.commons.math3.ode.ParameterJacobianWrapper#ParameterJacobianWrapper(FirstOrderDifferentialEquations,ParameterizedODE,ParameterConfiguration[])",
        "org.apache.commons.math3.ode.AbstractParameterizable#isSupported(String)",
        "org.apache.commons.math3.ode.ParameterizedWrapper#isSupported(String)",
        "org.apache.commons.math3.ode.ParameterJacobianWrapper#isSupported(String)",
        "org.apache.commons.math3.ode.JacobianMatrices.MainStateJacobianWrapper#computeMainStateJacobian(double,double[],double[],double[][])"
    ],
    "org.apache.commons.math3.random.EmpiricalDistribution#getNumericalMean()": [
        "org.apache.commons.math3.stat.descriptive.SynchronizedSummaryStatistics#getMean()",
        "org.apache.commons.math3.stat.descriptive.SummaryStatistics#getMean()"
    ],
    "org.apache.commons.math3.linear.OpenMapRealVector#sparseIterator()": ["org.apache.commons.math3.linear.OpenMapRealVector.OpenMapSparseIterator#OpenMapSparseIterator()"],
    "org.apache.commons.math3.geometry.euclidean.twod.Vector2D#equals(Object)": [
        "org.apache.commons.math3.geometry.euclidean.twod.Vector2D#isNaN()",
        "org.apache.commons.math3.geometry.euclidean.twod.Vector2D.<staticinit>()"
    ],
    "org.apache.commons.math3.analysis.differentiation.FiniteDifferencesDifferentiator#differentiate(UnivariateMatrixFunction)": ["org.apache.commons.math3.analysis.differentiation.FiniteDifferencesDifferentiator#differentiate(UnivariateMatrixFunction)$UnivariateDifferentiableMatrixFunction$1.<init>()"],
    "org.apache.commons.math3.fraction.BigFraction#BigFraction(int,int)": ["org.apache.commons.math3.fraction.BigFraction#BigFraction(BigInteger,BigInteger)"],
    "org.apache.commons.math3.optim.PointVectorValuePair#PointVectorValuePair(double[],double[],boolean)": [
        "org.apache.commons.math3.optim.PointVectorValuePair.<init>()",
        "org.apache.commons.math3.util.Pair#Pair(K,V)"
    ],
    "org.apache.commons.math3.stat.descriptive.MultivariateSummaryStatistics#getSumSq()": ["org.apache.commons.math3.stat.descriptive.MultivariateSummaryStatistics#getResults(StorelessUnivariateStatistic[])"],
    "org.apache.commons.math3.fitting.GaussianCurveFitter.ParameterGuesser#interpolateXAtY(WeightedObservedPoint[],int,int,double)": [
        "org.apache.commons.math3.fitting.WeightedObservedPoint#getX()",
        "org.apache.commons.math3.fitting.GaussianCurveFitter.ParameterGuesser#getInterpolationPointsForY(WeightedObservedPoint[],int,int,double)",
        "org.apache.commons.math3.fitting.WeightedObservedPoint#getY()",
        "org.apache.commons.math3.exception.ZeroException#ZeroException()"
    ],
    "org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet#buildNew(BSPTree<Euclidean2D>)": [
        "org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet#PolygonsSet(BSPTree<Euclidean2D>,double)",
        "org.apache.commons.math3.geometry.partitioning.AbstractRegion#getTolerance()"
    ],
    "org.apache.commons.math3.stat.descriptive.AggregateSummaryStatistics.AggregatingSummaryStatistics#AggregatingSummaryStatistics(SummaryStatistics)": [
        "org.apache.commons.math3.stat.descriptive.SummaryStatistics#SummaryStatistics()",
        "org.apache.commons.math3.stat.descriptive.AggregateSummaryStatistics.AggregatingSummaryStatistics.<init>()"
    ],
    "org.apache.commons.math3.ml.clustering.FuzzyKMeansClusterer#FuzzyKMeansClusterer(int,double,int,DistanceMeasure,double,RandomGenerator)": [
        "org.apache.commons.math3.ml.clustering.FuzzyKMeansClusterer.<init>()",
        "org.apache.commons.math3.ml.clustering.Clusterer#Clusterer(DistanceMeasure)"
    ],
    "org.apache.commons.math3.stat.descriptive.moment.StandardDeviation#evaluate(double[],double,int,int)": [
        "org.apache.commons.math3.util.FastMath.sqrt(double)",
        "org.apache.commons.math3.stat.descriptive.moment.Variance#evaluate(double[],double,int,int)"
    ],
    "org.apache.commons.math3.linear.BlockRealMatrix#walkInOptimizedOrder(RealMatrixChangingVisitor,int,int,int,int)": [
        "org.apache.commons.math3.linear.AbstractRealMatrix#getSubMatrix(int[],int[])$DefaultRealMatrixChangingVisitor$1#visit(int,int,double)",
        "org.apache.commons.math3.linear.DefaultRealMatrixChangingVisitor#end()",
        "org.apache.commons.math3.linear.MatrixUtils.checkSubMatrixIndex(AnyMatrix,int,int,int,int)",
        "org.apache.commons.math3.util.FastMath.max(int,int)",
        "org.apache.commons.math3.linear.BlockRealMatrix#blockWidth(int)",
        "org.apache.commons.math3.linear.DefaultRealMatrixChangingVisitor#visit(int,int,double)",
        "org.apache.commons.math3.util.FastMath.min(int,int)",
        "org.apache.commons.math3.linear.BlockRealMatrix.<staticinit>()",
        "org.apache.commons.math3.linear.DefaultRealMatrixChangingVisitor#start(int,int,int,int,int,int)"
    ],
    "org.apache.commons.math3.analysis.function.Asin#value(DerivativeStructure)": ["org.apache.commons.math3.analysis.differentiation.DerivativeStructure#asin()"],
    "org.apache.commons.math3.stat.StatUtils#StatUtils()": ["org.apache.commons.math3.stat.StatUtils.<init>()"],
    "org.apache.commons.math3.complex.Quaternion.<staticinit>()": ["org.apache.commons.math3.complex.Quaternion#Quaternion(double,double,double,double)"],
    "org.apache.commons.math3.ode.sampling.NordsieckStepInterpolator#rescale(double)": ["org.apache.commons.math3.linear.Array2DRowRealMatrix#getDataRef()"],
    "org.apache.commons.math3.geometry.euclidean.threed.FieldRotation#compose(Rotation,RotationConvention)": [
        "org.apache.commons.math3.geometry.euclidean.threed.FieldRotation.applyTo(Rotation,FieldRotation<T extends RealFieldElement>)",
        "org.apache.commons.math3.geometry.euclidean.threed.FieldRotation#composeInternal(Rotation)",
        "org.apache.commons.math3.geometry.euclidean.threed.RotationConvention.<staticinit>()"
    ],
    "org.apache.commons.math3.distribution.FDistribution#density(double)": [
        "org.apache.commons.math3.distribution.FDistribution#logDensity(double)",
        "org.apache.commons.math3.util.FastMath.exp(double)"
    ],
    "org.apache.commons.math3.linear.LUDecomposition#getSolver()": ["org.apache.commons.math3.linear.LUDecomposition.Solver#Solver(double[][],int[],boolean)"],
    "org.apache.commons.math3.linear.BlockRealMatrix#blockWidth(int)": ["org.apache.commons.math3.linear.BlockRealMatrix.<staticinit>()"],
    "org.apache.commons.math3.geometry.euclidean.threed.FieldRotation#revert()": ["org.apache.commons.math3.geometry.euclidean.threed.FieldRotation#FieldRotation(T extends RealFieldElement,T extends RealFieldElement,T extends RealFieldElement,T extends RealFieldElement,boolean)"],
    "org.apache.commons.math3.stat.descriptive.moment.Variance#Variance(boolean)": [
        "org.apache.commons.math3.stat.descriptive.moment.SecondMoment#SecondMoment()",
        "org.apache.commons.math3.stat.descriptive.moment.Variance.<init>()",
        "org.apache.commons.math3.stat.descriptive.AbstractStorelessUnivariateStatistic.<init>()"
    ],
    "org.apache.commons.math3.analysis.solvers.BaseAbstractUnivariateSolver#isBracketing(double,double)": ["org.apache.commons.math3.analysis.solvers.UnivariateSolverUtils.isBracketing(UnivariateFunction,double,double)"],
    "org.apache.commons.math3.genetics.RandomKey#decode(List<T>)": [
        "org.apache.commons.math3.genetics.AbstractListChromosome#getRepresentation()",
        "org.apache.commons.math3.genetics.RandomKey.decodeGeneric(List<S>,List<Double>,List<Double>)"
    ],
    "org.apache.commons.math3.util.CombinatoricsUtils.factorialLog(int)": [
        "org.apache.commons.math3.util.FastMath.log(double)",
        "org.apache.commons.math3.util.CombinatoricsUtils.<staticinit>()",
        "org.apache.commons.math3.exception.util.LocalizedFormats.<staticinit>()"
    ],
    "org.apache.commons.math3.distribution.LevyDistribution#inverseCumulativeProbability(double)": ["org.apache.commons.math3.special.Erf.erfcInv(double)"],
    "org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet#PolyhedronsSet(BSPTree<Euclidean3D>)": [
        "org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet#PolyhedronsSet(BSPTree<Euclidean3D>,double)",
        "org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet.<staticinit>()"
    ],
    "org.apache.commons.math3.geometry.euclidean.threed.Rotation#composeInverse(Rotation,RotationConvention)": [
        "org.apache.commons.math3.geometry.euclidean.threed.Rotation#revert()",
        "org.apache.commons.math3.geometry.euclidean.threed.Rotation#composeInternal(Rotation)",
        "org.apache.commons.math3.geometry.euclidean.threed.RotationConvention.<staticinit>()",
        "org.apache.commons.math3.geometry.euclidean.threed.Rotation#composeInverseInternal(Rotation)"
    ],
    "org.apache.commons.math3.linear.AbstractFieldMatrix#multiply(FieldMatrix<T extends FieldElement>)": [
        "org.apache.commons.math3.linear.DiagonalMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.Array2DRowRealMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.BlockFieldMatrix#getColumnDimension()",
        "org.apache.commons.math3.util.BigRealField#getZero()",
        "org.apache.commons.math3.linear.OpenMapRealMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.SparseFieldMatrix#setEntry(int,int,T extends FieldElement)",
        "org.apache.commons.math3.linear.BlockFieldMatrix#setEntry(int,int,T extends FieldElement)",
        "org.apache.commons.math3.linear.BlockFieldMatrix#createMatrix(int,int)",
        "org.apache.commons.math3.dfp.DfpField#getZero()",
        "org.apache.commons.math3.linear.BlockFieldMatrix#getRowDimension()",
        "org.apache.commons.math3.fraction.FractionField#getZero()",
        "org.apache.commons.math3.linear.SparseFieldMatrix#createMatrix(int,int)",
        "org.apache.commons.math3.complex.ComplexField#getZero()",
        "org.apache.commons.math3.linear.BlockFieldMatrix#getEntry(int,int)",
        "org.apache.commons.math3.linear.SparseFieldMatrix#getEntry(int,int)",
        "org.apache.commons.math3.linear.AbstractFieldMatrix#checkMultiplicationCompatible(FieldMatrix<T extends FieldElement>)",
        "org.apache.commons.math3.analysis.differentiation.SparseGradient#getField()$Field$1#getZero()",
        "org.apache.commons.math3.linear.SparseFieldMatrix#getRowDimension()",
        "org.apache.commons.math3.util.Decimal64Field#getZero()",
        "org.apache.commons.math3.linear.Array2DRowFieldMatrix#setEntry(int,int,T extends FieldElement)",
        "org.apache.commons.math3.linear.Array2DRowFieldMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.SparseFieldMatrix#getColumnDimension()",
        "org.apache.commons.math3.analysis.differentiation.DerivativeStructure#getField()$Field$1#getZero()",
        "org.apache.commons.math3.linear.Array2DRowFieldMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.BlockRealMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.Array2DRowFieldMatrix#getEntry(int,int)",
        "org.apache.commons.math3.fraction.BigFractionField#getZero()",
        "org.apache.commons.math3.linear.Array2DRowFieldMatrix#createMatrix(int,int)"
    ],
    "org.apache.commons.math3.geometry.spherical.oned.ArcsSet#asList()": [
        "org.apache.commons.math3.geometry.spherical.oned.Arc#Arc(double,double,double)",
        "org.apache.commons.math3.geometry.partitioning.AbstractRegion#getTolerance()"
    ],
    "org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D#crossProduct(Vector3D)": [
        "org.apache.commons.math3.geometry.euclidean.threed.Vector3D#getX()",
        "org.apache.commons.math3.geometry.euclidean.threed.Vector3D#getZ()",
        "org.apache.commons.math3.geometry.euclidean.threed.Vector3D#getY()",
        "org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D#FieldVector3D(T extends RealFieldElement,T extends RealFieldElement,T extends RealFieldElement)"
    ],
    "org.apache.commons.math3.util.OpenIntToFieldHashMap.Iterator#advance()": ["org.apache.commons.math3.util.OpenIntToFieldHashMap.<staticinit>()"],
    "org.apache.commons.math3.linear.SparseFieldVector#SparseFieldVector(SparseFieldVector<T extends FieldElement>)": [
        "org.apache.commons.math3.linear.SparseFieldVector#getEntries()",
        "org.apache.commons.math3.linear.SparseFieldVector#getDimension()",
        "org.apache.commons.math3.linear.SparseFieldVector.<init>()",
        "org.apache.commons.math3.util.OpenIntToFieldHashMap#OpenIntToFieldHashMap(OpenIntToFieldHashMap<T extends FieldElement>)"
    ],
    "org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.ConnectableSegment#ConnectableSegment(Vector2D,Vector2D,Line,BSPTree<Euclidean2D>,BSPTree<Euclidean2D>,BSPTree<Euclidean2D>)": [
        "org.apache.commons.math3.geometry.euclidean.twod.Segment#Segment(Vector2D,Vector2D,Line)",
        "org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.ConnectableSegment.<init>()"
    ],
    "org.apache.commons.math3.optim.linear.LinearObjectiveFunction#writeObject(ObjectOutputStream)": ["org.apache.commons.math3.linear.MatrixUtils.serializeRealVector(RealVector,ObjectOutputStream)"],
    "org.apache.commons.math3.optimization.general.AbstractScalarDifferentiableOptimizer#optimize(int,MultivariateDifferentiableFunction,GoalType,double[])": [
        "org.apache.commons.math3.optimization.GoalType.<staticinit>()",
        "org.apache.commons.math3.analysis.FunctionUtils.toDifferentiableMultivariateFunction(MultivariateDifferentiableFunction)",
        "org.apache.commons.math3.optimization.general.AbstractScalarDifferentiableOptimizer#optimizeInternal(int,DifferentiableMultivariateFunction,GoalType,double[])"
    ],
    "org.apache.commons.math3.linear.AbstractFieldMatrix#getColumnMatrix(int)": [
        "org.apache.commons.math3.linear.SparseFieldMatrix#getEntry(int,int)",
        "org.apache.commons.math3.linear.SparseFieldMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.SparseFieldMatrix#setEntry(int,int,T extends FieldElement)",
        "org.apache.commons.math3.linear.Array2DRowFieldMatrix#setEntry(int,int,T extends FieldElement)",
        "org.apache.commons.math3.linear.BlockFieldMatrix#setEntry(int,int,T extends FieldElement)",
        "org.apache.commons.math3.linear.BlockFieldMatrix#createMatrix(int,int)",
        "org.apache.commons.math3.linear.BlockFieldMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.Array2DRowFieldMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.SparseFieldMatrix#createMatrix(int,int)",
        "org.apache.commons.math3.linear.Array2DRowFieldMatrix#getEntry(int,int)",
        "org.apache.commons.math3.linear.Array2DRowFieldMatrix#createMatrix(int,int)",
        "org.apache.commons.math3.linear.AbstractFieldMatrix#checkColumnIndex(int)",
        "org.apache.commons.math3.linear.BlockFieldMatrix#getEntry(int,int)"
    ],
    "org.apache.commons.math3.util.Decimal64#add(double)": ["org.apache.commons.math3.util.Decimal64#Decimal64(double)"],
    "org.apache.commons.math3.geometry.spherical.oned.ArcsSet#ArcsSet(double)": [
        "org.apache.commons.math3.geometry.partitioning.AbstractRegion#AbstractRegion(double)",
        "org.apache.commons.math3.geometry.spherical.oned.ArcsSet.<init>()"
    ],
    "org.apache.commons.math3.stat.regression.MillerUpdatingRegression#singcheck()": [
        "org.apache.commons.math3.util.FastMath.abs(double)",
        "org.apache.commons.math3.util.FastMath.sqrt(double)",
        "org.apache.commons.math3.stat.regression.MillerUpdatingRegression#include(double[],double,double)"
    ],
    "org.apache.commons.math3.util.FastMath.multiplyExact(int,int)": ["org.apache.commons.math3.exception.util.LocalizedFormats.<staticinit>()"],
    "org.apache.commons.math3.geometry.spherical.oned.ArcsSet#createSplitPart(List<Double>)": [
        "org.apache.commons.math3.geometry.partitioning.BSPTree#BSPTree(Object)",
        "org.apache.commons.math3.util.MathUtils.<staticinit>()",
        "org.apache.commons.math3.util.FastMath.abs(double)",
        "org.apache.commons.math3.geometry.partitioning.BSPTree#getCut()",
        "org.apache.commons.math3.geometry.partitioning.AbstractRegion#getTolerance()",
        "org.apache.commons.math3.geometry.spherical.oned.ArcsSet#addArcLimit(BSPTree<Sphere1D>,double,boolean)",
        "org.apache.commons.math3.util.MathUtils.normalizeAngle(double,double)",
        "org.apache.commons.math3.geometry.spherical.oned.ArcsSet#ArcsSet(BSPTree<Sphere1D>,double)",
        "org.apache.commons.math3.util.FastMath.<staticinit>()"
    ],
    "org.apache.commons.math3.ml.neuralnet.sofm.NeighbourhoodSizeFunctionFactory.exponentialDecay(double,double,long)$NeighbourhoodSizeFunction$1.<init>()": ["org.apache.commons.math3.ml.neuralnet.sofm.util.ExponentialDecayFunction#ExponentialDecayFunction(double,double,long)"],
    "org.apache.commons.math3.geometry.euclidean.oned.Vector1D#subtract(double,Vector<Euclidean1D>)": [
        "org.apache.commons.math3.geometry.euclidean.oned.Vector1D#Vector1D(double)",
        "org.apache.commons.math3.geometry.euclidean.oned.Vector1D#getX()"
    ],
    "org.apache.commons.math3.fitting.leastsquares.LeastSquaresBuilder#target(double[])": [
        "org.apache.commons.math3.linear.ArrayRealVector#ArrayRealVector(double[],boolean)",
        "org.apache.commons.math3.fitting.leastsquares.LeastSquaresBuilder#target(RealVector)"
    ],
    "org.apache.commons.math3.stat.descriptive.moment.FourthMoment.copy(FourthMoment,FourthMoment)": [
        "org.apache.commons.math3.util.MathUtils.checkNotNull(Object)",
        "org.apache.commons.math3.stat.descriptive.moment.ThirdMoment.copy(ThirdMoment,ThirdMoment)"
    ],
    "org.apache.commons.math3.analysis.interpolation.HermiteInterpolator#value(double)": ["org.apache.commons.math3.analysis.interpolation.HermiteInterpolator#checkInterpolation()"],
    "org.apache.commons.math3.linear.SymmLQ.State.checkSymmetry(RealLinearOperator,RealVector,RealVector,RealVector)": [
        "org.apache.commons.math3.exception.MathIllegalArgumentException#getContext()",
        "org.apache.commons.math3.linear.SymmLQ.State.<staticinit>()",
        "org.apache.commons.math3.linear.SymmLQ.<staticinit>()",
        "org.apache.commons.math3.util.FastMath.abs(double)",
        "org.apache.commons.math3.exception.util.ExceptionContext#setValue(String,Object)",
        "org.apache.commons.math3.linear.ArrayRealVector#dotProduct(RealVector)",
        "org.apache.commons.math3.linear.RealVector#dotProduct(RealVector)",
        "org.apache.commons.math3.linear.RealVector.unmodifiableRealVector(RealVector)$RealVector$1#dotProduct(RealVector)",
        "org.apache.commons.math3.linear.NonSelfAdjointOperatorException#NonSelfAdjointOperatorException()"
    ],
    "org.apache.commons.math3.analysis.FunctionUtils.compose(UnivariateDifferentiableFunction[]...)": ["org.apache.commons.math3.analysis.FunctionUtils.compose(UnivariateDifferentiableFunction[]...)$UnivariateDifferentiableFunction$1.<init>()"],
    "org.apache.commons.math3.stat.inference.KolmogorovSmirnovTest#pelzGood(double,int)": [
        "org.apache.commons.math3.util.MathUtils.<staticinit>()",
        "org.apache.commons.math3.util.FastMath.abs(double)",
        "org.apache.commons.math3.stat.inference.KolmogorovSmirnovTest.<staticinit>()",
        "org.apache.commons.math3.util.FastMath.exp(double)",
        "org.apache.commons.math3.util.FastMath.sqrt(double)",
        "org.apache.commons.math3.util.FastMath.<staticinit>()"
    ],
    "org.apache.commons.math3.linear.BlockRealMatrix#createMatrix(int,int)": ["org.apache.commons.math3.linear.BlockRealMatrix#BlockRealMatrix(int,int)"],
    "org.apache.commons.math3.util.FastMath.tan(double)": [
        "org.apache.commons.math3.util.FastMath.tanQ(double,double,boolean)",
        "org.apache.commons.math3.util.FastMath.CodyWaite#getK()",
        "org.apache.commons.math3.util.FastMath.CodyWaite#getRemB()",
        "org.apache.commons.math3.util.FastMath.CodyWaite#CodyWaite(double)",
        "org.apache.commons.math3.util.FastMath.CodyWaite#getRemA()",
        "org.apache.commons.math3.util.FastMath.reducePayneHanek(double,double[])"
    ],
    "org.apache.commons.math3.analysis.function.Sinc#derivative()": [
        "org.apache.commons.math3.analysis.function.Log10#derivative()",
        "org.apache.commons.math3.analysis.function.Power#derivative()",
        "org.apache.commons.math3.analysis.function.Sin#derivative()",
        "org.apache.commons.math3.analysis.function.Exp#derivative()",
        "org.apache.commons.math3.analysis.function.HarmonicOscillator#derivative()",
        "org.apache.commons.math3.analysis.polynomials.PolynomialFunction#derivative()",
        "org.apache.commons.math3.analysis.function.Logit#derivative()",
        "org.apache.commons.math3.analysis.function.Cbrt#derivative()",
        "org.apache.commons.math3.analysis.FunctionUtils.toDifferentiableUnivariateFunction(UnivariateDifferentiableFunction)",
        "org.apache.commons.math3.analysis.FunctionUtils.toDifferentiableUnivariateFunction(UnivariateDifferentiableFunction)$DifferentiableUnivariateFunction$1#derivative()",
        "org.apache.commons.math3.analysis.polynomials.PolynomialSplineFunction#derivative()",
        "org.apache.commons.math3.analysis.function.Cosh#derivative()",
        "org.apache.commons.math3.analysis.function.Identity#derivative()",
        "org.apache.commons.math3.analysis.function.Inverse#derivative()",
        "org.apache.commons.math3.analysis.function.Acosh#derivative()",
        "org.apache.commons.math3.analysis.function.Acos#derivative()",
        "org.apache.commons.math3.analysis.function.Atan#derivative()",
        "org.apache.commons.math3.analysis.function.Log#derivative()",
        "org.apache.commons.math3.analysis.function.Sqrt#derivative()",
        "org.apache.commons.math3.analysis.function.Logistic#derivative()",
        "org.apache.commons.math3.analysis.function.Expm1#derivative()",
        "org.apache.commons.math3.analysis.function.Asinh#derivative()",
        "org.apache.commons.math3.analysis.function.Gaussian#derivative()",
        "org.apache.commons.math3.analysis.function.Sinc#derivative()",
        "org.apache.commons.math3.analysis.function.Sigmoid#derivative()",
        "org.apache.commons.math3.analysis.function.Constant#derivative()",
        "org.apache.commons.math3.analysis.function.Sinh#derivative()",
        "org.apache.commons.math3.analysis.function.Tanh#derivative()",
        "org.apache.commons.math3.analysis.function.Asin#derivative()",
        "org.apache.commons.math3.analysis.function.Minus#derivative()",
        "org.apache.commons.math3.analysis.FunctionUtils.compose(DifferentiableUnivariateFunction[]...)$DifferentiableUnivariateFunction$1#derivative()",
        "org.apache.commons.math3.analysis.FunctionUtils.add(DifferentiableUnivariateFunction[]...)$DifferentiableUnivariateFunction$1#derivative()",
        "org.apache.commons.math3.analysis.FunctionUtils.multiply(DifferentiableUnivariateFunction[]...)$DifferentiableUnivariateFunction$1#derivative()",
        "org.apache.commons.math3.analysis.function.Log1p#derivative()",
        "org.apache.commons.math3.analysis.function.Tan#derivative()",
        "org.apache.commons.math3.analysis.function.Cos#derivative()",
        "org.apache.commons.math3.analysis.function.Atanh#derivative()"
    ],
    "org.apache.commons.math3.linear.AbstractRealMatrix#getFrobeniusNorm()": [
        "org.apache.commons.math3.linear.BlockRealMatrix#walkInOptimizedOrder(RealMatrixPreservingVisitor)",
        "org.apache.commons.math3.linear.AbstractRealMatrix#getFrobeniusNorm()$RealMatrixPreservingVisitor$1.<init>()",
        "org.apache.commons.math3.linear.AbstractRealMatrix#walkInOptimizedOrder(RealMatrixPreservingVisitor)"
    ],
    "org.apache.commons.math3.analysis.function.Cos#value(double)": ["org.apache.commons.math3.util.FastMath.cos(double)"],
    "org.apache.commons.math3.util.OpenIntToFieldHashMap#get(int)": [
        "org.apache.commons.math3.util.OpenIntToFieldHashMap#containsKey(int,int)",
        "org.apache.commons.math3.util.OpenIntToFieldHashMap.probe(int,int)",
        "org.apache.commons.math3.util.OpenIntToFieldHashMap.hashOf(int)",
        "org.apache.commons.math3.util.OpenIntToFieldHashMap.<staticinit>()",
        "org.apache.commons.math3.util.OpenIntToFieldHashMap.perturb(int)"
    ],
    "org.apache.commons.math3.stat.StatUtils.sumLog(double[],int,int)": [
        "org.apache.commons.math3.stat.descriptive.moment.Skewness#evaluate(double[],int,int)",
        "org.apache.commons.math3.stat.descriptive.moment.Variance#evaluate(double[],int,int)",
        "org.apache.commons.math3.stat.descriptive.moment.SemiVariance#evaluate(double[],int,int)",
        "org.apache.commons.math3.stat.descriptive.moment.GeometricMean#evaluate(double[],int,int)",
        "org.apache.commons.math3.stat.descriptive.summary.SumOfLogs#evaluate(double[],int,int)",
        "org.apache.commons.math3.stat.descriptive.moment.StandardDeviation#evaluate(double[],int,int)",
        "org.apache.commons.math3.stat.descriptive.summary.Sum#evaluate(double[],int,int)",
        "org.apache.commons.math3.stat.descriptive.rank.Min#evaluate(double[],int,int)",
        "org.apache.commons.math3.stat.descriptive.rank.Percentile#evaluate(double[],int,int)",
        "org.apache.commons.math3.stat.StatUtils.<staticinit>()",
        "org.apache.commons.math3.stat.descriptive.rank.Max#evaluate(double[],int,int)",
        "org.apache.commons.math3.stat.descriptive.summary.SumOfSquares#evaluate(double[],int,int)",
        "org.apache.commons.math3.stat.descriptive.moment.Mean#evaluate(double[],int,int)",
        "org.apache.commons.math3.stat.descriptive.summary.Product#evaluate(double[],int,int)",
        "org.apache.commons.math3.stat.descriptive.moment.Kurtosis#evaluate(double[],int,int)",
        "org.apache.commons.math3.stat.descriptive.AbstractStorelessUnivariateStatistic#evaluate(double[],int,int)"
    ],
    "org.apache.commons.math3.geometry.spherical.twod.Circle.CircleTransform#apply(Point<Sphere2D>)": [
        "org.apache.commons.math3.geometry.euclidean.threed.Rotation#applyTo(Vector3D)",
        "org.apache.commons.math3.geometry.spherical.twod.S2Point#S2Point(Vector3D)",
        "org.apache.commons.math3.geometry.spherical.twod.S2Point#getVector()"
    ],
    "org.apache.commons.math3.stat.descriptive.moment.Kurtosis#clear()": ["org.apache.commons.math3.stat.descriptive.moment.FourthMoment#clear()"],
    "org.apache.commons.math3.analysis.solvers.LaguerreSolver#solveAllComplex(double[],double)": ["org.apache.commons.math3.analysis.solvers.LaguerreSolver#solveAllComplex(double[],double,int)"],
    "org.apache.commons.math3.ml.neuralnet.sofm.KohonenUpdateAction#computeFeatures(double[],double[],double)": [
        "org.apache.commons.math3.linear.ArrayRealVector#mapMultiplyToSelf(double)",
        "org.apache.commons.math3.linear.ArrayRealVector#add(RealVector)",
        "org.apache.commons.math3.linear.ArrayRealVector#subtract(RealVector)",
        "org.apache.commons.math3.linear.OpenMapRealVector#add(RealVector)",
        "org.apache.commons.math3.linear.OpenMapRealVector#toArray()",
        "org.apache.commons.math3.linear.RealVector#toArray()",
        "org.apache.commons.math3.linear.RealVector.unmodifiableRealVector(RealVector)$RealVector$1#add(RealVector)",
        "org.apache.commons.math3.linear.ArrayRealVector#ArrayRealVector(double[],boolean)",
        "org.apache.commons.math3.linear.RealVector.unmodifiableRealVector(RealVector)$RealVector$1#toArray()",
        "org.apache.commons.math3.linear.RealVector#add(RealVector)",
        "org.apache.commons.math3.linear.ArrayRealVector#toArray()"
    ],
    "org.apache.commons.math3.userguide.geometry.GeometryExample.createCircle(int)": [
        "org.apache.commons.math3.geometry.euclidean.twod.Vector2D#add(Vector<Euclidean2D>)",
        "org.apache.commons.math3.geometry.euclidean.twod.Vector2D#Vector2D(double,double)",
        "org.apache.commons.math3.util.FastMath.sin(double)",
        "org.apache.commons.math3.geometry.euclidean.twod.Vector2D#scalarMultiply(double)",
        "org.apache.commons.math3.util.FastMath.<staticinit>()",
        "org.apache.commons.math3.util.FastMath.cos(double)"
    ],
    "org.apache.commons.math3.analysis.differentiation.DerivativeStructure#getFreeParameters()": ["org.apache.commons.math3.analysis.differentiation.DSCompiler#getFreeParameters()"],
    "org.apache.commons.math3.complex.Complex.equalsWithRelativeTolerance(Complex,Complex,double)": ["org.apache.commons.math3.util.Precision.equalsWithRelativeTolerance(double,double,double)"],
    "org.apache.commons.math3.ode.nonstiff.DormandPrince54FieldIntegrator#createInterpolator(boolean,T extends RealFieldElement[][],FieldODEStateAndDerivative<T extends RealFieldElement>,FieldODEStateAndDerivative<T extends RealFieldElement>,FieldEquationsMapper<T extends RealFieldElement>)": [
        "org.apache.commons.math3.ode.AbstractFieldIntegrator#getField()",
        "org.apache.commons.math3.ode.nonstiff.DormandPrince54FieldStepInterpolator#DormandPrince54FieldStepInterpolator(Field<T extends RealFieldElement>,boolean,T extends RealFieldElement[][],FieldODEStateAndDerivative<T extends RealFieldElement>,FieldODEStateAndDerivative<T extends RealFieldElement>,FieldODEStateAndDerivative<T extends RealFieldElement>,FieldODEStateAndDerivative<T extends RealFieldElement>,FieldEquationsMapper<T extends RealFieldElement>)"
    ],
    "org.apache.commons.math3.optim.nonlinear.scalar.MultivariateFunctionMappingAdapter.LowerUpperBoundMapper#LowerUpperBoundMapper(double,double)": [
        "org.apache.commons.math3.analysis.function.Sigmoid#Sigmoid(double,double)",
        "org.apache.commons.math3.analysis.function.Logit#Logit(double,double)",
        "org.apache.commons.math3.optim.nonlinear.scalar.MultivariateFunctionMappingAdapter.LowerUpperBoundMapper.<init>()"
    ],
    "org.apache.commons.math3.linear.AbstractRealMatrix#add(RealMatrix)": [
        "org.apache.commons.math3.linear.DiagonalMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.Array2DRowRealMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.Array2DRowRealMatrix#setEntry(int,int,double)",
        "org.apache.commons.math3.linear.DiagonalMatrix#getEntry(int,int)",
        "org.apache.commons.math3.linear.OpenMapRealMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.BlockRealMatrix#setEntry(int,int,double)",
        "org.apache.commons.math3.linear.OpenMapRealMatrix#setEntry(int,int,double)",
        "org.apache.commons.math3.linear.OpenMapRealMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.DiagonalMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.OpenMapRealMatrix#getEntry(int,int)",
        "org.apache.commons.math3.linear.MatrixUtils.checkAdditionCompatible(AnyMatrix,AnyMatrix)",
        "org.apache.commons.math3.linear.DiagonalMatrix#createMatrix(int,int)",
        "org.apache.commons.math3.linear.BlockRealMatrix#getEntry(int,int)",
        "org.apache.commons.math3.linear.Array2DRowRealMatrix#getEntry(int,int)",
        "org.apache.commons.math3.linear.BlockRealMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.Array2DRowRealMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.OpenMapRealMatrix#createMatrix(int,int)",
        "org.apache.commons.math3.linear.BlockRealMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.Array2DRowRealMatrix#createMatrix(int,int)",
        "org.apache.commons.math3.linear.DiagonalMatrix#setEntry(int,int,double)",
        "org.apache.commons.math3.linear.BlockRealMatrix#createMatrix(int,int)"
    ],
    "org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet#boundaryFacet(Vector3D,BSPTree<Euclidean3D>)": [
        "org.apache.commons.math3.geometry.partitioning.AbstractRegion#checkPoint(Point<S extends Space>)",
        "org.apache.commons.math3.geometry.partitioning.BoundaryAttribute#getPlusOutside()",
        "org.apache.commons.math3.geometry.partitioning.BSPTree#getCut()",
        "org.apache.commons.math3.geometry.partitioning.BoundaryAttribute#getPlusInside()",
        "org.apache.commons.math3.geometry.partitioning.Region.Location.<staticinit>()",
        "org.apache.commons.math3.geometry.partitioning.BSPTree#getAttribute()",
        "org.apache.commons.math3.geometry.euclidean.threed.Plane#toSubSpace(Point<Euclidean3D>)",
        "org.apache.commons.math3.geometry.partitioning.AbstractSubHyperplane#getRemainingRegion()",
        "org.apache.commons.math3.geometry.partitioning.AbstractSubHyperplane#getHyperplane()"
    ],
    "org.apache.commons.math3.linear.SparseFieldVector#copy()": ["org.apache.commons.math3.linear.SparseFieldVector#SparseFieldVector(SparseFieldVector<T extends FieldElement>)"],
    "org.apache.commons.math3.optim.linear.SimplexTableau#getSolution()": [
        "org.apache.commons.math3.optim.linear.SimplexTableau#getBasicRow(int)",
        "org.apache.commons.math3.optim.PointValuePair#PointValuePair(double[],double)",
        "org.apache.commons.math3.optim.linear.SimplexTableau.<staticinit>()",
        "org.apache.commons.math3.optim.linear.SimplexTableau#getRhsOffset()",
        "org.apache.commons.math3.optim.linear.SimplexTableau#getOriginalNumDecisionVariables()",
        "org.apache.commons.math3.optim.linear.LinearObjectiveFunction#value(double[])",
        "org.apache.commons.math3.optim.linear.SimplexTableau#getEntry(int,int)"
    ],
    "org.apache.commons.math3.optimization.linear.SimplexTableau#getWidth()": [
        "org.apache.commons.math3.linear.SparseFieldMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.DiagonalMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.Array2DRowRealMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.BlockFieldMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.OpenMapRealMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.BlockRealMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.Array2DRowFieldMatrix#getColumnDimension()"
    ],
    "org.apache.commons.math3.optimization.direct.SimplexOptimizer#SimplexOptimizer(ConvergenceChecker<PointValuePair>)": [
        "org.apache.commons.math3.optimization.direct.BaseAbstractMultivariateOptimizer#BaseAbstractMultivariateOptimizer(ConvergenceChecker<PointValuePair>)",
        "org.apache.commons.math3.optimization.direct.SimplexOptimizer.<init>()"
    ],
    "org.apache.commons.math3.stat.inference.KolmogorovSmirnovTest#kolmogorovSmirnovStatistic(RealDistribution,double[])": [
        "org.apache.commons.math3.distribution.BetaDistribution#cumulativeProbability(double)",
        "org.apache.commons.math3.stat.inference.KolmogorovSmirnovTest#checkArray(double[])",
        "org.apache.commons.math3.distribution.ConstantRealDistribution#cumulativeProbability(double)",
        "org.apache.commons.math3.util.FastMath.max(double,double)",
        "org.apache.commons.math3.distribution.NormalDistribution#cumulativeProbability(double)",
        "org.apache.commons.math3.distribution.ChiSquaredDistribution#cumulativeProbability(double)",
        "org.apache.commons.math3.distribution.UniformRealDistribution#cumulativeProbability(double)",
        "org.apache.commons.math3.distribution.ParetoDistribution#cumulativeProbability(double)",
        "org.apache.commons.math3.distribution.GumbelDistribution#cumulativeProbability(double)",
        "org.apache.commons.math3.distribution.LevyDistribution#cumulativeProbability(double)",
        "org.apache.commons.math3.distribution.LaplaceDistribution#cumulativeProbability(double)",
        "org.apache.commons.math3.distribution.EnumeratedRealDistribution#cumulativeProbability(double)",
        "org.apache.commons.math3.distribution.TriangularDistribution#cumulativeProbability(double)",
        "org.apache.commons.math3.random.EmpiricalDistribution#cumulativeProbability(double)",
        "org.apache.commons.math3.distribution.WeibullDistribution#cumulativeProbability(double)",
        "org.apache.commons.math3.distribution.TDistribution#cumulativeProbability(double)",
        "org.apache.commons.math3.distribution.LogisticDistribution#cumulativeProbability(double)",
        "org.apache.commons.math3.distribution.GammaDistribution#cumulativeProbability(double)",
        "org.apache.commons.math3.distribution.LogNormalDistribution#cumulativeProbability(double)",
        "org.apache.commons.math3.distribution.ExponentialDistribution#cumulativeProbability(double)",
        "org.apache.commons.math3.distribution.FDistribution#cumulativeProbability(double)",
        "org.apache.commons.math3.distribution.CauchyDistribution#cumulativeProbability(double)",
        "org.apache.commons.math3.distribution.NakagamiDistribution#cumulativeProbability(double)"
    ],
    "org.apache.commons.math3.util.Decimal64Field.<staticinit>()": ["org.apache.commons.math3.util.Decimal64Field#Decimal64Field()"],
    "org.apache.commons.math3.util.FastMath.ExpFracTable.<staticinit>()": [
        "org.apache.commons.math3.util.FastMathCalc.slowexp(double,double[])",
        "org.apache.commons.math3.util.FastMathLiteralArrays.loadExpFracA()",
        "org.apache.commons.math3.util.FastMathLiteralArrays.loadExpFracB()",
        "org.apache.commons.math3.util.FastMath.<staticinit>()"
    ],
    "org.apache.commons.math3.linear.FieldLUDecomposition.Solver#solve(FieldMatrix<T extends FieldElement>)": [
        "org.apache.commons.math3.linear.SparseFieldMatrix#getEntry(int,int)",
        "org.apache.commons.math3.linear.DiagonalMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.Array2DRowRealMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.BlockFieldMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.SparseFieldMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.OpenMapRealMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.SingularMatrixException#SingularMatrixException()",
        "org.apache.commons.math3.linear.OpenMapRealMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.DiagonalMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.Array2DRowFieldMatrix#Array2DRowFieldMatrix(Field<T extends FieldElement>,T extends FieldElement[][],boolean)",
        "org.apache.commons.math3.linear.Array2DRowFieldMatrix#getColumnDimension()",
        "org.apache.commons.math3.exception.DimensionMismatchException#DimensionMismatchException(int,int)",
        "org.apache.commons.math3.linear.BlockFieldMatrix#getRowDimension()",
        "org.apache.commons.math3.util.MathArrays.buildArray(Field<T>,int,int)",
        "org.apache.commons.math3.linear.SparseFieldMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.BlockRealMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.Array2DRowRealMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.Array2DRowFieldMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.BlockRealMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.Array2DRowFieldMatrix#getEntry(int,int)",
        "org.apache.commons.math3.linear.BlockFieldMatrix#getEntry(int,int)"
    ],
    "org.apache.commons.math3.geometry.euclidean.twod.Line#distance(Vector2D)": [
        "org.apache.commons.math3.util.FastMath.abs(double)",
        "org.apache.commons.math3.geometry.euclidean.twod.Line#getOffset(Vector<Euclidean2D>)"
    ],
    "org.apache.commons.math3.ml.neuralnet.Network.NeuronIdentifierComparator#compare(Neuron,Neuron)": ["org.apache.commons.math3.ml.neuralnet.Neuron#getIdentifier()"],
    "org.apache.commons.math3.stat.inference.WilcoxonSignedRankTest#calculateAsymptoticPValue(double,int)": [
        "org.apache.commons.math3.distribution.NormalDistribution#cumulativeProbability(double)",
        "org.apache.commons.math3.distribution.NormalDistribution#NormalDistribution(double,double,double)",
        "org.apache.commons.math3.util.FastMath.sqrt(double)"
    ],
    "org.apache.commons.math3.special.Erf.erfc(double)": [
        "org.apache.commons.math3.util.FastMath.abs(double)",
        "org.apache.commons.math3.special.Gamma.regularizedGammaQ(double,double,double,int)"
    ],
    "org.apache.commons.math3.linear.AbstractFieldMatrix#power(int)": [
        "org.apache.commons.math3.linear.SparseFieldMatrix#copy()",
        "org.apache.commons.math3.linear.BlockFieldMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.AbstractFieldMatrix#multiply(FieldMatrix<T extends FieldElement>)",
        "org.apache.commons.math3.linear.SparseFieldMatrix#getRowDimension()",
        "org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile.FixedCapacityList#add(E)",
        "org.apache.commons.math3.linear.Array2DRowFieldMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.BlockFieldMatrix#copy()",
        "org.apache.commons.math3.linear.BlockFieldMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.SparseFieldMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.AbstractFieldMatrix#getField()",
        "org.apache.commons.math3.linear.NonSquareMatrixException#NonSquareMatrixException(int,int)",
        "org.apache.commons.math3.linear.AbstractFieldMatrix#isSquare()",
        "org.apache.commons.math3.linear.Array2DRowFieldMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.Array2DRowFieldMatrix#copy()",
        "org.apache.commons.math3.linear.MatrixUtils.createFieldIdentityMatrix(Field<T extends FieldElement>,int)",
        "org.apache.commons.math3.linear.BlockFieldMatrix#multiply(FieldMatrix<T extends FieldElement>)"
    ],
    "org.apache.commons.math3.geometry.partitioning.BoundarySizeVisitor#BoundarySizeVisitor()": ["org.apache.commons.math3.geometry.partitioning.BoundarySizeVisitor.<init>()"],
    "org.apache.commons.math3.stat.correlation.Covariance#Covariance(double[][],boolean)": [
        "org.apache.commons.math3.stat.correlation.Covariance#Covariance(RealMatrix,boolean)",
        "org.apache.commons.math3.linear.BlockRealMatrix#BlockRealMatrix(double[][])"
    ],
    "org.apache.commons.math3.ml.clustering.FuzzyKMeansClusterer#getObjectiveFunctionValue()": [
        "org.apache.commons.math3.util.FastMath.pow(double,double)",
        "org.apache.commons.math3.ml.clustering.CentroidCluster#getCenter()",
        "org.apache.commons.math3.ml.clustering.Clusterer#distance(Clusterable,Clusterable)",
        "org.apache.commons.math3.exception.MathIllegalStateException#MathIllegalStateException()"
    ],
    "org.apache.commons.math3.linear.Array2DRowRealMatrix#walkInColumnOrder(RealMatrixChangingVisitor)": [
        "org.apache.commons.math3.linear.AbstractRealMatrix#getSubMatrix(int[],int[])$DefaultRealMatrixChangingVisitor$1#visit(int,int,double)",
        "org.apache.commons.math3.linear.Array2DRowRealMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.DefaultRealMatrixChangingVisitor#visit(int,int,double)",
        "org.apache.commons.math3.linear.DefaultRealMatrixChangingVisitor#end()",
        "org.apache.commons.math3.linear.Array2DRowRealMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.DefaultRealMatrixChangingVisitor#start(int,int,int,int,int,int)"
    ],
    "org.apache.commons.math3.geometry.euclidean.threed.Plane#project(Point<Euclidean3D>)": [
        "org.apache.commons.math3.geometry.euclidean.threed.Plane#toSpace(Vector<Euclidean2D>)",
        "org.apache.commons.math3.geometry.euclidean.threed.Plane#toSubSpace(Point<Euclidean3D>)"
    ],
    "org.apache.commons.math3.util.IntegerSequence.Incrementor#next()": ["org.apache.commons.math3.util.IntegerSequence.Incrementor#increment()"],
    "org.apache.commons.math3.analysis.solvers.AbstractUnivariateDifferentiableSolver#computeObjectiveValueAndDerivative(double)": [
        "org.apache.commons.math3.analysis.polynomials.PolynomialFunctionNewtonForm#value(DerivativeStructure)",
        "org.apache.commons.math3.analysis.function.HarmonicOscillator#value(DerivativeStructure)",
        "org.apache.commons.math3.analysis.function.Power#value(DerivativeStructure)",
        "org.apache.commons.math3.analysis.function.Exp#value(DerivativeStructure)",
        "org.apache.commons.math3.analysis.function.Minus#value(DerivativeStructure)",
        "org.apache.commons.math3.analysis.function.Logit#value(DerivativeStructure)",
        "org.apache.commons.math3.analysis.FunctionUtils.multiply(UnivariateDifferentiableFunction[]...)$UnivariateDifferentiableFunction$1#value(DerivativeStructure)",
        "org.apache.commons.math3.analysis.differentiation.DerivativeStructure#DerivativeStructure(int,int,int,double)",
        "org.apache.commons.math3.analysis.function.Cosh#value(DerivativeStructure)",
        "org.apache.commons.math3.analysis.function.Sqrt#value(DerivativeStructure)",
        "org.apache.commons.math3.analysis.function.Gaussian#value(DerivativeStructure)",
        "org.apache.commons.math3.analysis.function.Cos#value(DerivativeStructure)",
        "org.apache.commons.math3.analysis.FunctionUtils.compose(UnivariateDifferentiableFunction[]...)$UnivariateDifferentiableFunction$1#value(DerivativeStructure)",
        "org.apache.commons.math3.analysis.function.Log1p#value(DerivativeStructure)",
        "org.apache.commons.math3.analysis.function.Inverse#value(DerivativeStructure)",
        "org.apache.commons.math3.analysis.function.Log10#value(DerivativeStructure)",
        "org.apache.commons.math3.analysis.function.Logistic#value(DerivativeStructure)",
        "org.apache.commons.math3.analysis.solvers.BaseAbstractUnivariateSolver#incrementEvaluationCount()",
        "org.apache.commons.math3.analysis.FunctionUtils.toUnivariateDifferential(DifferentiableUnivariateFunction)$UnivariateDifferentiableFunction$1#value(DerivativeStructure)",
        "org.apache.commons.math3.analysis.function.Acos#value(DerivativeStructure)",
        "org.apache.commons.math3.analysis.polynomials.PolynomialFunction#value(DerivativeStructure)",
        "org.apache.commons.math3.analysis.FunctionUtils.add(UnivariateDifferentiableFunction[]...)$UnivariateDifferentiableFunction$1#value(DerivativeStructure)",
        "org.apache.commons.math3.analysis.function.Cbrt#value(DerivativeStructure)",
        "org.apache.commons.math3.analysis.function.Atan#value(DerivativeStructure)",
        "org.apache.commons.math3.analysis.function.Sinh#value(DerivativeStructure)",
        "org.apache.commons.math3.analysis.function.Constant#value(DerivativeStructure)",
        "org.apache.commons.math3.analysis.function.Atanh#value(DerivativeStructure)",
        "org.apache.commons.math3.analysis.function.Sinc#value(DerivativeStructure)",
        "org.apache.commons.math3.analysis.function.Acosh#value(DerivativeStructure)",
        "org.apache.commons.math3.analysis.function.Tan#value(DerivativeStructure)",
        "org.apache.commons.math3.analysis.function.Identity#value(DerivativeStructure)",
        "org.apache.commons.math3.analysis.function.Asinh#value(DerivativeStructure)",
        "org.apache.commons.math3.analysis.function.Sin#value(DerivativeStructure)",
        "org.apache.commons.math3.analysis.function.Sigmoid#value(DerivativeStructure)",
        "org.apache.commons.math3.analysis.function.Asin#value(DerivativeStructure)",
        "org.apache.commons.math3.analysis.differentiation.FiniteDifferencesDifferentiator#differentiate(UnivariateFunction)$UnivariateDifferentiableFunction$1#value(DerivativeStructure)",
        "org.apache.commons.math3.analysis.function.Expm1#value(DerivativeStructure)",
        "org.apache.commons.math3.analysis.polynomials.PolynomialSplineFunction#value(DerivativeStructure)",
        "org.apache.commons.math3.analysis.function.Tanh#value(DerivativeStructure)",
        "org.apache.commons.math3.analysis.function.Log#value(DerivativeStructure)"
    ],
    "org.apache.commons.math3.ode.nonstiff.ClassicalRungeKuttaStepInterpolator#ClassicalRungeKuttaStepInterpolator()": [
        "org.apache.commons.math3.ode.nonstiff.ClassicalRungeKuttaStepInterpolator.<init>()",
        "org.apache.commons.math3.ode.nonstiff.RungeKuttaStepInterpolator#RungeKuttaStepInterpolator()"
    ],
    "org.apache.commons.math3.random.RandomDataImpl#nextExponential(double)": ["org.apache.commons.math3.random.RandomDataGenerator#nextExponential(double)"],
    "org.apache.commons.math3.stat.descriptive.moment.Mean#getN()": ["org.apache.commons.math3.stat.descriptive.moment.FirstMoment#getN()"],
    "org.apache.commons.math3.geometry.spherical.twod.EdgesBuilder#visitInternalNode(BSPTree<Sphere2D>)": [
        "org.apache.commons.math3.geometry.spherical.twod.EdgesBuilder#addContribution(SubCircle,boolean,BSPTree<Sphere2D>)",
        "org.apache.commons.math3.geometry.partitioning.BoundaryAttribute#getPlusOutside()",
        "org.apache.commons.math3.geometry.partitioning.BSPTree#getAttribute()",
        "org.apache.commons.math3.geometry.partitioning.BoundaryAttribute#getPlusInside()"
    ],
    "org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet#PolyhedronsSet(double,double,double,double,double,double,double)": [
        "org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet.<init>()",
        "org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet.buildBoundary(double,double,double,double,double,double,double)",
        "org.apache.commons.math3.geometry.partitioning.AbstractRegion#AbstractRegion(BSPTree<S extends Space>,double)"
    ],
    "org.apache.commons.math3.linear.RealVector#walkInOptimizedOrder(RealVectorPreservingVisitor,int,int)": [
        "org.apache.commons.math3.linear.RealVector#walkInDefaultOrder(RealVectorPreservingVisitor,int,int)",
        "org.apache.commons.math3.linear.ArrayRealVector#walkInDefaultOrder(RealVectorPreservingVisitor,int,int)"
    ],
    "org.apache.commons.math3.ml.neuralnet.FeatureInitializerFactory.uniform(double,double)": [
        "org.apache.commons.math3.ml.neuralnet.FeatureInitializerFactory.randomize(RealDistribution,FeatureInitializer)",
        "org.apache.commons.math3.distribution.UniformRealDistribution#UniformRealDistribution(double,double)",
        "org.apache.commons.math3.analysis.function.Constant#Constant(double)",
        "org.apache.commons.math3.ml.neuralnet.FeatureInitializerFactory.function(UnivariateFunction,double,double)"
    ],
    "org.apache.commons.math3.genetics.NPointCrossover#mate(AbstractListChromosome<T>,AbstractListChromosome<T>)": [
        "org.apache.commons.math3.exception.DimensionMismatchException#DimensionMismatchException(int,int)",
        "org.apache.commons.math3.genetics.AbstractListChromosome#getRepresentation()",
        "org.apache.commons.math3.genetics.ChromosomePair#ChromosomePair(Chromosome,Chromosome)",
        "org.apache.commons.math3.genetics.GeneticAlgorithm.getRandomGenerator()",
        "org.apache.commons.math3.random.RandomGeneratorFactory.createRandomGenerator(Random)$RandomGenerator$1#nextInt(int)",
        "org.apache.commons.math3.random.BitsStreamGenerator#nextInt(int)",
        "org.apache.commons.math3.random.AbstractRandomGenerator#nextInt(int)",
        "org.apache.commons.math3.random.SynchronizedRandomGenerator#nextInt(int)",
        "org.apache.commons.math3.random.RandomAdaptor#nextInt(int)",
        "org.apache.commons.math3.genetics.AbstractListChromosome#getLength()"
    ],
    "org.apache.commons.math3.stat.descriptive.AggregateSummaryStatistics.AggregatingSummaryStatistics#hashCode()": [
        "org.apache.commons.math3.stat.descriptive.AggregateSummaryStatistics.AggregatingSummaryStatistics#hashCode()",
        "org.apache.commons.math3.stat.descriptive.SummaryStatistics#hashCode()",
        "org.apache.commons.math3.stat.descriptive.SynchronizedSummaryStatistics#hashCode()"
    ],
    "org.apache.commons.math3.ode.nonstiff.RungeKuttaFieldIntegrator#fraction(int,int)": [
        "org.apache.commons.math3.ode.AbstractFieldIntegrator#getField()",
        "org.apache.commons.math3.util.BigRealField#getZero()",
        "org.apache.commons.math3.analysis.differentiation.SparseGradient#getField()$Field$1#getZero()",
        "org.apache.commons.math3.util.Decimal64Field#getZero()",
        "org.apache.commons.math3.dfp.DfpField#getZero()",
        "org.apache.commons.math3.analysis.differentiation.SparseGradient#add(double)",
        "org.apache.commons.math3.analysis.differentiation.DerivativeStructure#add(double)",
        "org.apache.commons.math3.analysis.differentiation.DerivativeStructure#getField()$Field$1#getZero()",
        "org.apache.commons.math3.fraction.FractionField#getZero()",
        "org.apache.commons.math3.complex.ComplexField#getZero()",
        "org.apache.commons.math3.fraction.BigFractionField#getZero()",
        "org.apache.commons.math3.util.Decimal64#add(double)",
        "org.apache.commons.math3.dfp.Dfp#add(double)"
    ],
    "org.apache.commons.math3.genetics.TournamentSelection#tournament(ListPopulation)": [
        "org.apache.commons.math3.genetics.ListPopulation#getPopulationSize()",
        "org.apache.commons.math3.genetics.GeneticAlgorithm.getRandomGenerator()",
        "org.apache.commons.math3.genetics.ListPopulation#addChromosome(Chromosome)",
        "org.apache.commons.math3.genetics.ListPopulation#getFittestChromosome()",
        "org.apache.commons.math3.exception.util.LocalizedFormats.<staticinit>()",
        "org.apache.commons.math3.random.RandomGeneratorFactory.createRandomGenerator(Random)$RandomGenerator$1#nextInt(int)",
        "org.apache.commons.math3.genetics.ListPopulation#getChromosomes()",
        "org.apache.commons.math3.random.BitsStreamGenerator#nextInt(int)",
        "org.apache.commons.math3.random.AbstractRandomGenerator#nextInt(int)",
        "org.apache.commons.math3.random.SynchronizedRandomGenerator#nextInt(int)",
        "org.apache.commons.math3.genetics.TournamentSelection#tournament(ListPopulation)$ListPopulation$1.<init>()",
        "org.apache.commons.math3.random.RandomAdaptor#nextInt(int)"
    ],
    "org.apache.commons.math3.analysis.solvers.BrentSolver#BrentSolver()": [
        "org.apache.commons.math3.analysis.solvers.BrentSolver#BrentSolver(double)",
        "org.apache.commons.math3.analysis.solvers.BrentSolver.<staticinit>()"
    ],
    "org.apache.commons.math3.linear.ArrayFieldVector#ArrayFieldVector(Field<T extends FieldElement>,T extends FieldElement[],int,int)": [
        "org.apache.commons.math3.util.MathUtils.checkNotNull(Object)",
        "org.apache.commons.math3.linear.ArrayFieldVector.<init>()",
        "org.apache.commons.math3.util.MathArrays.buildArray(Field<T>,int)"
    ],
    "org.apache.commons.math3.fitting.leastsquares.EvaluationRmsChecker#converged(int,Evaluation,Evaluation)": [
        "org.apache.commons.math3.util.Precision.equals(double,double,double)",
        "org.apache.commons.math3.util.Precision.equalsWithRelativeTolerance(double,double,double)",
        "org.apache.commons.math3.fitting.leastsquares.AbstractEvaluation#getRMS()",
        "org.apache.commons.math3.fitting.leastsquares.OptimumImpl#getRMS()"
    ],
    "org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D#Euclidean1D()": ["org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D.<init>()"],
    "org.apache.commons.math3.stat.Frequency#getCumPct(Comparable<?>)": [
        "org.apache.commons.math3.stat.Frequency#getSumFreq()",
        "org.apache.commons.math3.stat.Frequency#getCumFreq(Comparable<?>)"
    ],
    "org.apache.commons.math3.optimization.MultivariateMultiStartOptimizer#MultivariateMultiStartOptimizer(MultivariateOptimizer,int,RandomVectorGenerator)": [
        "org.apache.commons.math3.optimization.BaseMultivariateMultiStartOptimizer#BaseMultivariateMultiStartOptimizer(BaseMultivariateOptimizer<FUNC extends MultivariateFunction>,int,RandomVectorGenerator)",
        "org.apache.commons.math3.optimization.MultivariateMultiStartOptimizer.<init>()"
    ],
    "org.apache.commons.math3.random.UncorrelatedRandomVectorGenerator#UncorrelatedRandomVectorGenerator(int,NormalizedRandomGenerator)": ["org.apache.commons.math3.random.UncorrelatedRandomVectorGenerator.<init>()"],
    "org.apache.commons.math3.optim.BaseOptimizer#optimize(OptimizationData[]...)": [
        "org.apache.commons.math3.optim.nonlinear.vector.jacobian.AbstractLeastSquaresOptimizer#parseOptimizationData(OptimizationData[]...)",
        "org.apache.commons.math3.optim.nonlinear.vector.jacobian.GaussNewtonOptimizer#doOptimize()",
        "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.BOBYQAOptimizer#doOptimize()",
        "org.apache.commons.math3.optim.nonlinear.scalar.GradientMultivariateOptimizer#parseOptimizationData(OptimizationData[]...)",
        "org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizer#doOptimize()",
        "org.apache.commons.math3.optim.nonlinear.vector.MultivariateVectorOptimizer#parseOptimizationData(OptimizationData[]...)",
        "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer#parseOptimizationData(OptimizationData[]...)",
        "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizer#parseOptimizationData(OptimizationData[]...)",
        "org.apache.commons.math3.optim.nonlinear.scalar.gradient.NonLinearConjugateGradientOptimizer#doOptimize()",
        "org.apache.commons.math3.optim.BaseOptimizer#parseOptimizationData(OptimizationData[]...)",
        "org.apache.commons.math3.optim.linear.SimplexSolver#doOptimize()",
        "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer#doOptimize()",
        "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.PowellOptimizer#doOptimize()",
        "org.apache.commons.math3.optim.nonlinear.vector.JacobianMultivariateVectorOptimizer#parseOptimizationData(OptimizationData[]...)",
        "org.apache.commons.math3.optim.nonlinear.scalar.MultivariateOptimizer#parseOptimizationData(OptimizationData[]...)",
        "org.apache.commons.math3.optim.univariate.MultiStartUnivariateOptimizer#doOptimize()",
        "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizer#doOptimize()",
        "org.apache.commons.math3.optim.BaseMultivariateOptimizer#parseOptimizationData(OptimizationData[]...)",
        "org.apache.commons.math3.optim.linear.LinearOptimizer#parseOptimizationData(OptimizationData[]...)",
        "org.apache.commons.math3.optim.linear.SimplexSolver#parseOptimizationData(OptimizationData[]...)",
        "org.apache.commons.math3.optim.univariate.UnivariateOptimizer#parseOptimizationData(OptimizationData[]...)",
        "org.apache.commons.math3.optim.univariate.BrentOptimizer#doOptimize()",
        "org.apache.commons.math3.util.Incrementor.wrap(Incrementor)$Incrementor$1#resetCount()",
        "org.apache.commons.math3.optim.nonlinear.scalar.gradient.NonLinearConjugateGradientOptimizer#parseOptimizationData(OptimizationData[]...)",
        "org.apache.commons.math3.util.Incrementor#resetCount()",
        "org.apache.commons.math3.optim.BaseMultiStartMultivariateOptimizer#doOptimize()"
    ],
    "org.apache.commons.math3.exception.NullArgumentException#NullArgumentException(Localizable,Object[]...)": [
        "org.apache.commons.math3.exception.MathIllegalArgumentException#MathIllegalArgumentException(Localizable,Object[]...)",
        "org.apache.commons.math3.exception.NullArgumentException.<init>()"
    ],
    "org.apache.commons.math3.stat.descriptive.rank.Percentile.EstimationType#evaluate(double[],double,KthSelector)": ["org.apache.commons.math3.stat.descriptive.rank.Percentile.EstimationType#evaluate(double[],int[],double,KthSelector)"],
    "org.apache.commons.math3.random.RandomGeneratorFactory.createRandomGenerator(Random)$RandomGenerator$1#nextBytes(byte[])": ["org.apache.commons.math3.random.RandomAdaptor#nextBytes(byte[])"],
    "org.apache.commons.math3.distribution.MixtureMultivariateRealDistribution#getComponents()": ["org.apache.commons.math3.util.Pair#Pair(K,V)"],
    "org.apache.commons.math3.ode.nonstiff.ThreeEighthesFieldStepInterpolator#computeInterpolatedStateAndDerivatives(FieldEquationsMapper<T extends RealFieldElement>,T extends RealFieldElement,T extends RealFieldElement,T extends RealFieldElement,T extends RealFieldElement)": [
        "org.apache.commons.math3.ode.nonstiff.RungeKuttaFieldStepInterpolator#currentStateLinearCombination(T extends RealFieldElement[]...)",
        "org.apache.commons.math3.ode.nonstiff.RungeKuttaFieldStepInterpolator#previousStateLinearCombination(T extends RealFieldElement[]...)",
        "org.apache.commons.math3.ode.nonstiff.RungeKuttaFieldStepInterpolator#derivativeLinearCombination(T extends RealFieldElement[]...)",
        "org.apache.commons.math3.ode.sampling.AbstractFieldStepInterpolator#getGlobalPreviousState()",
        "org.apache.commons.math3.ode.FieldODEStateAndDerivative#FieldODEStateAndDerivative(T extends RealFieldElement,T extends RealFieldElement[],T extends RealFieldElement[])"
    ],
    "org.apache.commons.math3.analysis.interpolation.BicubicInterpolatingFunction#computeSplineCoefficients(double[])": ["org.apache.commons.math3.analysis.interpolation.BicubicInterpolatingFunction.<staticinit>()"],
    "org.apache.commons.math3.ode.nonstiff.ClassicalRungeKuttaFieldIntegrator#getA()": [
        "org.apache.commons.math3.ode.AbstractFieldIntegrator#getField()",
        "org.apache.commons.math3.ode.nonstiff.RungeKuttaFieldIntegrator#fraction(int,int)",
        "org.apache.commons.math3.fraction.BigFractionField#getOne()",
        "org.apache.commons.math3.fraction.FractionField#getOne()",
        "org.apache.commons.math3.util.BigRealField#getZero()",
        "org.apache.commons.math3.analysis.differentiation.SparseGradient#getField()$Field$1#getZero()",
        "org.apache.commons.math3.analysis.differentiation.SparseGradient#getField()$Field$1#getOne()",
        "org.apache.commons.math3.util.Decimal64Field#getZero()",
        "org.apache.commons.math3.dfp.DfpField#getZero()",
        "org.apache.commons.math3.complex.ComplexField#getOne()",
        "org.apache.commons.math3.util.BigRealField#getOne()",
        "org.apache.commons.math3.util.MathArrays.buildArray(Field<T>,int,int)",
        "org.apache.commons.math3.analysis.differentiation.DerivativeStructure#getField()$Field$1#getZero()",
        "org.apache.commons.math3.fraction.FractionField#getZero()",
        "org.apache.commons.math3.complex.ComplexField#getZero()",
        "org.apache.commons.math3.fraction.BigFractionField#getZero()",
        "org.apache.commons.math3.dfp.DfpField#getOne()",
        "org.apache.commons.math3.analysis.differentiation.DerivativeStructure#getField()$Field$1#getOne()",
        "org.apache.commons.math3.util.MathArrays.buildArray(Field<T>,int)",
        "org.apache.commons.math3.util.Decimal64Field#getOne()"
    ],
    "org.apache.commons.math3.ode.nonstiff.AdaptiveStepsizeIntegrator#AdaptiveStepsizeIntegrator(String,double,double,double[],double[])": [
        "org.apache.commons.math3.ode.nonstiff.AdaptiveStepsizeIntegrator#setStepSizeControl(double,double,double[],double[])",
        "org.apache.commons.math3.ode.nonstiff.AdaptiveStepsizeIntegrator.<init>()",
        "org.apache.commons.math3.ode.AbstractIntegrator#AbstractIntegrator(String)",
        "org.apache.commons.math3.ode.nonstiff.AdaptiveStepsizeIntegrator#resetInternalState()"
    ],
    "org.apache.commons.math3.geometry.spherical.twod.Circle#revertSelf()": ["org.apache.commons.math3.geometry.euclidean.threed.Vector3D#negate()"],
    "org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D#orthogonal()": [
        "org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D#getNorm()",
        "org.apache.commons.math3.util.FastMath.abs(double)",
        "org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D#FieldVector3D(T extends RealFieldElement,T extends RealFieldElement,T extends RealFieldElement)",
        "org.apache.commons.math3.exception.util.LocalizedFormats.<staticinit>()"
    ],
    "org.apache.commons.math3.stat.inference.TestUtils.pairedT(double[],double[])": [
        "org.apache.commons.math3.stat.inference.TestUtils.<staticinit>()",
        "org.apache.commons.math3.stat.inference.TTest#pairedT(double[],double[])"
    ],
    "org.apache.commons.math3.fraction.BigFraction#BigFraction(BigInteger,BigInteger)": [
        "org.apache.commons.math3.fraction.BigFraction.<init>()",
        "org.apache.commons.math3.exception.util.LocalizedFormats.<staticinit>()"
    ],
    "org.apache.commons.math3.analysis.function.Constant#value(DerivativeStructure)": [
        "org.apache.commons.math3.analysis.differentiation.DerivativeStructure#DerivativeStructure(int,int,double[]...)",
        "org.apache.commons.math3.analysis.differentiation.DerivativeStructure#getFreeParameters()",
        "org.apache.commons.math3.analysis.differentiation.DerivativeStructure#getOrder()"
    ],
    "org.apache.commons.math3.random.ValueServer#getMu()": ["org.apache.commons.math3.random.ValueServer.<staticinit>()"],
    "org.apache.commons.math3.geometry.euclidean.threed.Plane#Plane(Vector3D,double)": [
        "org.apache.commons.math3.geometry.euclidean.threed.Plane#setFrame()",
        "org.apache.commons.math3.geometry.euclidean.threed.Plane#setNormal(Vector3D)",
        "org.apache.commons.math3.geometry.euclidean.threed.Plane.<init>()"
    ],
    "org.apache.commons.math3.geometry.partitioning.BSPTree#recurseCloseCuts(Point<S extends Space>,double,List<BSPTree<S extends Space>>)": [
        "org.apache.commons.math3.geometry.partitioning.BSPTree#recurseCloseCuts(Point<S extends Space>,double,List<BSPTree<S extends Space>>)",
        "org.apache.commons.math3.geometry.partitioning.AbstractSubHyperplane#getHyperplane()"
    ],
    "org.apache.commons.math3.stat.inference.TTest#homoscedasticTTest(double[],double[],double)": [
        "org.apache.commons.math3.stat.inference.TTest#homoscedasticTTest(double[],double[])",
        "org.apache.commons.math3.stat.inference.TTest#checkSignificanceLevel(double)"
    ],
    "org.apache.commons.math3.fraction.Fraction.<staticinit>()": ["org.apache.commons.math3.fraction.Fraction#Fraction(int,int)"],
    "org.apache.commons.math3.random.RandomDataImpl#reSeed()": ["org.apache.commons.math3.random.RandomDataGenerator#reSeed()"],
    "org.apache.commons.math3.linear.SparseRealVector.<init>()": ["org.apache.commons.math3.linear.RealVector.<init>()"],
    "org.apache.commons.math3.dfp.Dfp#acosh()": [
        "org.apache.commons.math3.dfp.Dfp#add(Dfp)",
        "org.apache.commons.math3.dfp.Dfp#log()",
        "org.apache.commons.math3.dfp.Dfp#getOne()",
        "org.apache.commons.math3.dfp.Dfp#sqrt()",
        "org.apache.commons.math3.dfp.Dfp#subtract(Dfp)",
        "org.apache.commons.math3.dfp.Dfp#multiply(Dfp)"
    ],
    "org.apache.commons.math3.analysis.differentiation.DSCompiler#rootN(double[],int,int,double[],int)": [
        "org.apache.commons.math3.util.FastMath.pow(double,int)",
        "org.apache.commons.math3.util.FastMath.cbrt(double)",
        "org.apache.commons.math3.util.FastMath.sqrt(double)",
        "org.apache.commons.math3.analysis.differentiation.DSCompiler#compose(double[],int,double[],double[],int)"
    ],
    "org.apache.commons.math3.ode.nonstiff.GraggBulirschStoerIntegrator#integrate(ExpandableStatefulODE,double)": [
        "org.apache.commons.math3.ode.nonstiff.GraggBulirschStoerIntegrator#tryStep(double,double[],double,int,double[],double[][],double[],double[],double[])",
        "org.apache.commons.math3.ode.nonstiff.AdaptiveStepsizeIntegrator#filterStep(double,boolean,boolean)",
        "org.apache.commons.math3.util.FastMath.max(double,double)",
        "org.apache.commons.math3.ode.nonstiff.DormandPrince54StepInterpolator#storeTime(double)",
        "org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator#storeTime(double)",
        "org.apache.commons.math3.ode.ExpandableStatefulODE#getTime()",
        "org.apache.commons.math3.ode.nonstiff.RungeKuttaStepInterpolator#shift()",
        "org.apache.commons.math3.ode.nonstiff.GraggBulirschStoerStepInterpolator#estimateError(double[])",
        "org.apache.commons.math3.util.FastMath.min(double,double)",
        "org.apache.commons.math3.ode.ExpandableStatefulODE#getPrimaryMapper()",
        "org.apache.commons.math3.ode.nonstiff.GraggBulirschStoerIntegrator#rescale(double[],double[],double[])",
        "org.apache.commons.math3.ode.ExpandableStatefulODE#getSecondaryMappers()",
        "org.apache.commons.math3.ode.nonstiff.GraggBulirschStoerStepInterpolator#computeCoefficients(int,double)",
        "org.apache.commons.math3.ode.AbstractIntegrator#initIntegration(double,double[],double)",
        "org.apache.commons.math3.util.FastMath.abs(double)",
        "org.apache.commons.math3.ode.sampling.AbstractStepInterpolator#storeTime(double)",
        "org.apache.commons.math3.util.FastMath.sqrt(double)",
        "org.apache.commons.math3.util.FastMath.floor(double)",
        "org.apache.commons.math3.ode.ExpandableStatefulODE#getCompleteState()",
        "org.apache.commons.math3.ode.ExpandableStatefulODE#setTime(double)",
        "org.apache.commons.math3.ode.AbstractIntegrator#setEquations(ExpandableStatefulODE)",
        "org.apache.commons.math3.ode.nonstiff.AdaptiveStepsizeIntegrator#initializeStep(boolean,int,double[],double,double[],double[],double[],double[])",
        "org.apache.commons.math3.ode.ExpandableStatefulODE#setCompleteState(double[])",
        "org.apache.commons.math3.util.FastMath.pow(double,double)",
        "org.apache.commons.math3.ode.AbstractIntegrator#computeDerivatives(double,double[],double[])",
        "org.apache.commons.math3.ode.nonstiff.GraggBulirschStoerStepInterpolator#GraggBulirschStoerStepInterpolator(double[],double[],double[],double[],double[][],boolean,EquationsMapper,EquationsMapper[])",
        "org.apache.commons.math3.ode.AbstractIntegrator#acceptStep(AbstractStepInterpolator,double[],double[],double)",
        "org.apache.commons.math3.util.FastMath.max(int,int)",
        "org.apache.commons.math3.ode.nonstiff.AdaptiveStepsizeIntegrator#resetInternalState()",
        "org.apache.commons.math3.util.FastMath.pow(double,int)",
        "org.apache.commons.math3.util.FastMath.min(int,int)",
        "org.apache.commons.math3.util.FastMath.log10(double)",
        "org.apache.commons.math3.ode.nonstiff.AdaptiveStepsizeIntegrator#getMaxStep()",
        "org.apache.commons.math3.ode.sampling.AbstractStepInterpolator#shift()",
        "org.apache.commons.math3.ode.nonstiff.AdaptiveStepsizeIntegrator#sanityChecks(ExpandableStatefulODE,double)",
        "org.apache.commons.math3.ode.nonstiff.GraggBulirschStoerIntegrator#extrapolate(int,int,double[][],double[])"
    ],
    "org.apache.commons.math3.geometry.euclidean.twod.Line.LineTransform#apply(Hyperplane<Euclidean2D>)": [
        "org.apache.commons.math3.util.MathArrays.linearCombination(double,double,double,double)",
        "org.apache.commons.math3.util.MathArrays.linearCombination(double,double,double,double,double,double)",
        "org.apache.commons.math3.geometry.euclidean.twod.Line#Line(double,double,double,double,double)",
        "org.apache.commons.math3.util.FastMath.<staticinit>()",
        "org.apache.commons.math3.util.FastMath.atan2(double,double)",
        "org.apache.commons.math3.util.FastMath.sqrt(double)"
    ],
    "org.apache.commons.math3.geometry.partitioning.utilities.AVLTree#getSmallest()": ["org.apache.commons.math3.geometry.partitioning.utilities.AVLTree.Node#getSmallest()"],
    "org.apache.commons.math3.stat.regression.AbstractMultipleLinearRegression#newYSampleData(double[])": [
        "org.apache.commons.math3.linear.ArrayRealVector#ArrayRealVector(double[])",
        "org.apache.commons.math3.exception.NoDataException#NoDataException()",
        "org.apache.commons.math3.exception.NullArgumentException#NullArgumentException()"
    ],
    "org.apache.commons.math3.util.Decimal64#linearCombination(Decimal64,Decimal64,Decimal64,Decimal64)": [
        "org.apache.commons.math3.util.Decimal64#Decimal64(double)",
        "org.apache.commons.math3.util.MathArrays.linearCombination(double,double,double,double)"
    ],
    "org.apache.commons.math3.transform.TransformUtils.scaleArray(Complex[],double)": [
        "org.apache.commons.math3.complex.Complex#getImaginary()",
        "org.apache.commons.math3.complex.Complex#getReal()",
        "org.apache.commons.math3.complex.Complex#Complex(double,double)"
    ],
    "org.apache.commons.math3.stat.interval.IntervalUtils.getWilsonScoreInterval(int,int,double)": [
        "org.apache.commons.math3.stat.interval.IntervalUtils.<staticinit>()",
        "org.apache.commons.math3.stat.interval.WilsonScoreInterval#createInterval(int,int,double)",
        "org.apache.commons.math3.stat.interval.NormalApproximationInterval#createInterval(int,int,double)",
        "org.apache.commons.math3.stat.interval.AgrestiCoullInterval#createInterval(int,int,double)",
        "org.apache.commons.math3.stat.interval.ClopperPearsonInterval#createInterval(int,int,double)"
    ],
    "org.apache.commons.math3.linear.MatrixUtils.blockInverse(RealMatrix,int)": [
        "org.apache.commons.math3.linear.Array2DRowRealMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.BlockFieldMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.CholeskyDecomposition.Solver#getInverse()",
        "org.apache.commons.math3.linear.EigenDecomposition.Solver#getInverse()",
        "org.apache.commons.math3.linear.BlockRealMatrix#getSubMatrix(int,int,int,int)",
        "org.apache.commons.math3.linear.OpenMapRealMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.SingularMatrixException#SingularMatrixException()",
        "org.apache.commons.math3.linear.SingularValueDecomposition#SingularValueDecomposition(RealMatrix)",
        "org.apache.commons.math3.linear.BlockFieldMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.RRQRDecomposition.Solver#getInverse()",
        "org.apache.commons.math3.linear.BlockRealMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.SingularValueDecomposition#getSolver()",
        "org.apache.commons.math3.linear.DiagonalMatrix#multiply(RealMatrix)",
        "org.apache.commons.math3.linear.QRDecomposition.Solver#isNonSingular()",
        "org.apache.commons.math3.linear.LUDecomposition.Solver#isNonSingular()",
        "org.apache.commons.math3.linear.CholeskyDecomposition.Solver#isNonSingular()",
        "org.apache.commons.math3.linear.OpenMapRealMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.BlockRealMatrix#subtract(RealMatrix)",
        "org.apache.commons.math3.linear.SparseFieldMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.QRDecomposition.Solver#getInverse()",
        "org.apache.commons.math3.linear.OpenMapRealMatrix#subtract(RealMatrix)",
        "org.apache.commons.math3.linear.Array2DRowRealMatrix#getData()",
        "org.apache.commons.math3.linear.Array2DRowFieldMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.BlockRealMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.DiagonalMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.OpenMapRealMatrix#multiply(RealMatrix)",
        "org.apache.commons.math3.linear.DiagonalMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.DiagonalMatrix#getData()",
        "org.apache.commons.math3.linear.AbstractRealMatrix#getData()",
        "org.apache.commons.math3.linear.SingularValueDecomposition.Solver#getInverse()",
        "org.apache.commons.math3.linear.AbstractRealMatrix#setSubMatrix(double[][],int,int)",
        "org.apache.commons.math3.linear.NonSquareMatrixException#NonSquareMatrixException(int,int)",
        "org.apache.commons.math3.linear.RRQRDecomposition.Solver#isNonSingular()",
        "org.apache.commons.math3.linear.Array2DRowRealMatrix#setSubMatrix(double[][],int,int)",
        "org.apache.commons.math3.linear.BlockRealMatrix#multiply(RealMatrix)",
        "org.apache.commons.math3.linear.BlockRealMatrix#setSubMatrix(double[][],int,int)",
        "org.apache.commons.math3.linear.LUDecomposition.Solver#getInverse()",
        "org.apache.commons.math3.linear.AbstractRealMatrix#subtract(RealMatrix)",
        "org.apache.commons.math3.linear.SingularValueDecomposition.Solver#isNonSingular()",
        "org.apache.commons.math3.linear.SparseFieldMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.BlockRealMatrix#scalarMultiply(double)",
        "org.apache.commons.math3.linear.Array2DRowRealMatrix#Array2DRowRealMatrix(int,int)",
        "org.apache.commons.math3.linear.Array2DRowFieldMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.Array2DRowRealMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.AbstractRealMatrix#multiply(RealMatrix)",
        "org.apache.commons.math3.linear.AbstractRealMatrix#scalarMultiply(double)",
        "org.apache.commons.math3.linear.EigenDecomposition.Solver#isNonSingular()",
        "org.apache.commons.math3.linear.AbstractRealMatrix#getSubMatrix(int,int,int,int)",
        "org.apache.commons.math3.linear.BlockRealMatrix#getData()"
    ],
    "org.apache.commons.math3.optimization.SimplePointChecker#converged(int,PAIR extends Pair,PAIR extends Pair)": [
        "org.apache.commons.math3.optimization.SimplePointChecker.<staticinit>()",
        "org.apache.commons.math3.util.FastMath.abs(double)",
        "org.apache.commons.math3.optimization.AbstractConvergenceChecker#getRelativeThreshold()",
        "org.apache.commons.math3.util.FastMath.max(double,double)",
        "org.apache.commons.math3.optimization.AbstractConvergenceChecker#getAbsoluteThreshold()"
    ],
    "org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile#copy()": [
        "org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile.Markers#clone()",
        "org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile#PSquarePercentile(double)"
    ],
    "org.apache.commons.math3.util.DefaultTransformer#transform(Object)": [
        "org.apache.commons.math3.userguide.genetics.HelloWorldExample.StringChromosome#toString()",
        "org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile#toString()",
        "org.apache.commons.math3.stat.descriptive.SynchronizedDescriptiveStatistics#toString()",
        "org.apache.commons.math3.genetics.RandomKey#toString()",
        "org.apache.commons.math3.userguide.genetics.PolygonChromosome#toString()",
        "org.apache.commons.math3.exception.util.LocalizedFormats.<staticinit>()",
        "org.apache.commons.math3.genetics.AbstractListChromosome#toString()",
        "org.apache.commons.math3.linear.ArrayRealVector#toString()",
        "org.apache.commons.math3.stat.descriptive.SynchronizedMultivariateSummaryStatistics#toString()",
        "org.apache.commons.math3.linear.AbstractRealMatrix#toString()",
        "org.apache.commons.math3.stat.descriptive.SynchronizedSummaryStatistics#toString()"
    ],
    "org.apache.commons.math3.distribution.HypergeometricDistribution#getUpperDomain(int,int)": ["org.apache.commons.math3.util.FastMath.min(int,int)"],
    "org.apache.commons.math3.util.OpenIntToDoubleHashMap#put(int,double)": [
        "org.apache.commons.math3.util.OpenIntToDoubleHashMap#findInsertionIndex(int)",
        "org.apache.commons.math3.util.OpenIntToDoubleHashMap.<staticinit>()",
        "org.apache.commons.math3.util.OpenIntToDoubleHashMap#growTable()",
        "org.apache.commons.math3.util.OpenIntToDoubleHashMap.changeIndexSign(int)",
        "org.apache.commons.math3.util.OpenIntToDoubleHashMap#shouldGrowTable()"
    ],
    "org.apache.commons.math3.geometry.spherical.oned.S1Point.distance(S1Point,S1Point)": ["org.apache.commons.math3.geometry.euclidean.twod.Vector2D.angle(Vector2D,Vector2D)"],
    "org.apache.commons.math3.geometry.euclidean.oned.Vector1D.distanceSq(Vector1D,Vector1D)": ["org.apache.commons.math3.geometry.euclidean.oned.Vector1D#distanceSq(Vector<Euclidean1D>)"],
    "org.apache.commons.math3.util.MathArrays.ebeDivide(double[],double[])": ["org.apache.commons.math3.util.MathArrays.checkEqualLength(double[],double[])"],
    "org.apache.commons.math3.geometry.euclidean.threed.Vector3D#getAlpha()": ["org.apache.commons.math3.util.FastMath.atan2(double,double)"],
    "org.apache.commons.math3.userguide.ClusterAlgorithmComparison.normalize(List<Vector2D>,double,double,double,double)": [
        "org.apache.commons.math3.geometry.euclidean.twod.Vector2D#toArray()",
        "org.apache.commons.math3.ml.clustering.DoublePoint#DoublePoint(double[])"
    ],
    "org.apache.commons.math3.distribution.BetaDistribution#BetaDistribution(RandomGenerator,double,double)": [
        "org.apache.commons.math3.distribution.BetaDistribution#BetaDistribution(RandomGenerator,double,double,double)",
        "org.apache.commons.math3.distribution.BetaDistribution.<staticinit>()"
    ],
    "org.apache.commons.math3.fraction.FractionFormat#parse(String)": [
        "org.apache.commons.math3.fraction.ProperFractionFormat#parse(String,ParsePosition)",
        "org.apache.commons.math3.exception.MathParseException#MathParseException(String,int,Class<?>)",
        "org.apache.commons.math3.fraction.FractionFormat#parse(String,ParsePosition)"
    ],
    "org.apache.commons.math3.ode.nonstiff.EmbeddedRungeKuttaFieldIntegrator#EmbeddedRungeKuttaFieldIntegrator(Field<T extends RealFieldElement>,String,int,double,double,double,double)": [
        "org.apache.commons.math3.analysis.differentiation.DerivativeStructure#divide(double)",
        "org.apache.commons.math3.util.BigRealField#getZero()",
        "org.apache.commons.math3.ode.nonstiff.EulerFieldIntegrator#getC()",
        "org.apache.commons.math3.ode.nonstiff.DormandPrince853FieldIntegrator#getB()",
        "org.apache.commons.math3.util.BigRealField#getOne()",
        "org.apache.commons.math3.ode.nonstiff.EulerFieldIntegrator#getA()",
        "org.apache.commons.math3.ode.nonstiff.LutherFieldIntegrator#getA()",
        "org.apache.commons.math3.ode.nonstiff.GillFieldIntegrator#getC()",
        "org.apache.commons.math3.fraction.FractionField#getZero()",
        "org.apache.commons.math3.ode.nonstiff.ClassicalRungeKuttaFieldIntegrator#getC()",
        "org.apache.commons.math3.ode.nonstiff.MidpointFieldIntegrator#getB()",
        "org.apache.commons.math3.complex.ComplexField#getZero()",
        "org.apache.commons.math3.util.Decimal64#divide(double)",
        "org.apache.commons.math3.ode.nonstiff.GillFieldIntegrator#getA()",
        "org.apache.commons.math3.ode.nonstiff.ClassicalRungeKuttaFieldIntegrator#getA()",
        "org.apache.commons.math3.ode.nonstiff.DormandPrince853FieldIntegrator#getOrder()",
        "org.apache.commons.math3.ode.nonstiff.HighamHall54FieldIntegrator#getA()",
        "org.apache.commons.math3.fraction.BigFractionField#getOne()",
        "org.apache.commons.math3.ode.nonstiff.HighamHall54FieldIntegrator#getC()",
        "org.apache.commons.math3.analysis.differentiation.SparseGradient#getField()$Field$1#getZero()",
        "org.apache.commons.math3.analysis.differentiation.SparseGradient#getField()$Field$1#getOne()",
        "org.apache.commons.math3.ode.nonstiff.DormandPrince54FieldIntegrator#getC()",
        "org.apache.commons.math3.analysis.differentiation.SparseGradient#add(double)",
        "org.apache.commons.math3.complex.ComplexField#getOne()",
        "org.apache.commons.math3.ode.nonstiff.DormandPrince54FieldIntegrator#getA()",
        "org.apache.commons.math3.ode.nonstiff.ThreeEighthesFieldIntegrator#getB()",
        "org.apache.commons.math3.ode.nonstiff.LutherFieldIntegrator#getC()",
        "org.apache.commons.math3.analysis.differentiation.DerivativeStructure#add(double)",
        "org.apache.commons.math3.fraction.BigFractionField#getZero()",
        "org.apache.commons.math3.dfp.DfpField#getOne()",
        "org.apache.commons.math3.analysis.differentiation.DerivativeStructure#getField()$Field$1#getOne()",
        "org.apache.commons.math3.util.Decimal64Field#getOne()",
        "org.apache.commons.math3.dfp.Dfp#add(double)",
        "org.apache.commons.math3.dfp.DfpField#getZero()",
        "org.apache.commons.math3.ode.nonstiff.EmbeddedRungeKuttaFieldIntegrator.<init>()",
        "org.apache.commons.math3.ode.nonstiff.EulerFieldIntegrator#getB()",
        "org.apache.commons.math3.ode.nonstiff.DormandPrince853FieldIntegrator#getA()",
        "org.apache.commons.math3.ode.nonstiff.LutherFieldIntegrator#getB()",
        "org.apache.commons.math3.ode.nonstiff.DormandPrince853FieldIntegrator#getC()",
        "org.apache.commons.math3.dfp.Dfp#divide(double)",
        "org.apache.commons.math3.ode.nonstiff.HighamHall54FieldIntegrator#getOrder()",
        "org.apache.commons.math3.ode.nonstiff.MidpointFieldIntegrator#getC()",
        "org.apache.commons.math3.ode.nonstiff.ClassicalRungeKuttaFieldIntegrator#getB()",
        "org.apache.commons.math3.ode.nonstiff.MidpointFieldIntegrator#getA()",
        "org.apache.commons.math3.ode.nonstiff.AdaptiveStepsizeFieldIntegrator#AdaptiveStepsizeFieldIntegrator(Field<T extends RealFieldElement>,String,double,double,double,double)",
        "org.apache.commons.math3.ode.nonstiff.GillFieldIntegrator#getB()",
        "org.apache.commons.math3.ode.nonstiff.HighamHall54FieldIntegrator#getB()",
        "org.apache.commons.math3.fraction.FractionField#getOne()",
        "org.apache.commons.math3.util.Decimal64Field#getZero()",
        "org.apache.commons.math3.analysis.differentiation.SparseGradient#divide(double)",
        "org.apache.commons.math3.ode.nonstiff.DormandPrince54FieldIntegrator#getOrder()",
        "org.apache.commons.math3.ode.nonstiff.DormandPrince54FieldIntegrator#getB()",
        "org.apache.commons.math3.ode.nonstiff.ThreeEighthesFieldIntegrator#getC()",
        "org.apache.commons.math3.ode.nonstiff.ThreeEighthesFieldIntegrator#getA()",
        "org.apache.commons.math3.analysis.differentiation.DerivativeStructure#getField()$Field$1#getZero()",
        "org.apache.commons.math3.util.Decimal64#add(double)"
    ],
    "org.apache.commons.math3.linear.RealVector#addToEntry(int,double)": [
        "org.apache.commons.math3.linear.ArrayRealVector#getEntry(int)",
        "org.apache.commons.math3.linear.OpenMapRealVector#getEntry(int)",
        "org.apache.commons.math3.linear.RealVector.unmodifiableRealVector(RealVector)$RealVector$1#setEntry(int,double)",
        "org.apache.commons.math3.linear.ArrayRealVector#setEntry(int,double)",
        "org.apache.commons.math3.linear.OpenMapRealVector#setEntry(int,double)",
        "org.apache.commons.math3.linear.RealVector.unmodifiableRealVector(RealVector)$RealVector$1#getEntry(int)"
    ],
    "org.apache.commons.math3.distribution.NormalDistribution#NormalDistribution()": ["org.apache.commons.math3.distribution.NormalDistribution#NormalDistribution(double,double)"],
    "org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet.FacetsContributionVisitor#addContribution(SubHyperplane<Euclidean3D>,boolean)": [
        "org.apache.commons.math3.geometry.euclidean.threed.Vector3D.<staticinit>()",
        "org.apache.commons.math3.geometry.euclidean.threed.Plane#getNormal()",
        "org.apache.commons.math3.geometry.partitioning.AbstractRegion#getSize()",
        "org.apache.commons.math3.geometry.partitioning.AbstractRegion#setSize(double)",
        "org.apache.commons.math3.geometry.partitioning.AbstractRegion#setBarycenter(Point<S extends Space>)",
        "org.apache.commons.math3.geometry.euclidean.threed.Plane#toSpace(Point<Euclidean2D>)",
        "org.apache.commons.math3.geometry.partitioning.AbstractSubHyperplane#getRemainingRegion()",
        "org.apache.commons.math3.geometry.euclidean.threed.Vector3D#Vector3D(double,Vector3D,double,Vector3D)",
        "org.apache.commons.math3.geometry.partitioning.AbstractSubHyperplane#getHyperplane()",
        "org.apache.commons.math3.geometry.euclidean.threed.Vector3D#dotProduct(Vector<Euclidean3D>)",
        "org.apache.commons.math3.geometry.partitioning.AbstractRegion#getBarycenter()"
    ],
    "org.apache.commons.math3.geometry.partitioning.utilities.OrderedTuple#encode(int)": ["org.apache.commons.math3.geometry.partitioning.utilities.OrderedTuple#getBit(int,int)"],
    "org.apache.commons.math3.optimization.direct.PowellOptimizer#PowellOptimizer(double,double,double,double)": ["org.apache.commons.math3.optimization.direct.PowellOptimizer#PowellOptimizer(double,double,double,double,ConvergenceChecker<PointValuePair>)"],
    "org.apache.commons.math3.geometry.spherical.oned.Sphere1D.LazyHolder.<staticinit>()": ["org.apache.commons.math3.geometry.spherical.oned.Sphere1D#Sphere1D()"],
    "org.apache.commons.math3.util.OpenIntToFieldHashMap#put(int,T extends FieldElement)": [
        "org.apache.commons.math3.util.OpenIntToFieldHashMap#findInsertionIndex(int)",
        "org.apache.commons.math3.util.OpenIntToFieldHashMap#growTable()",
        "org.apache.commons.math3.util.OpenIntToFieldHashMap.changeIndexSign(int)",
        "org.apache.commons.math3.util.OpenIntToFieldHashMap#shouldGrowTable()",
        "org.apache.commons.math3.util.OpenIntToFieldHashMap.<staticinit>()"
    ],
    "org.apache.commons.math3.random.EmpiricalDistribution#load(File)": [
        "org.apache.commons.math3.random.EmpiricalDistribution#fillBinStats(DataAdapter)",
        "org.apache.commons.math3.random.EmpiricalDistribution.<staticinit>()",
        "org.apache.commons.math3.util.MathUtils.checkNotNull(Object)",
        "org.apache.commons.math3.random.EmpiricalDistribution.StreamDataAdapter#StreamDataAdapter(BufferedReader)",
        "org.apache.commons.math3.random.EmpiricalDistribution.ArrayDataAdapter#computeStats()",
        "org.apache.commons.math3.random.EmpiricalDistribution.StreamDataAdapter#computeStats()"
    ],
    "org.apache.commons.math3.util.OpenIntToDoubleHashMap.Iterator#advance()": ["org.apache.commons.math3.util.OpenIntToDoubleHashMap.<staticinit>()"],
    "org.apache.commons.math3.geometry.spherical.twod.Circle.CircleTransform#CircleTransform(Rotation)": ["org.apache.commons.math3.geometry.spherical.twod.Circle.CircleTransform.<init>()"],
    "org.apache.commons.math3.geometry.spherical.oned.ArcsSet#getAngle(BSPTree<Sphere1D>)": [
        "org.apache.commons.math3.geometry.spherical.oned.S1Point#getAlpha()",
        "org.apache.commons.math3.geometry.spherical.oned.LimitAngle#getLocation()",
        "org.apache.commons.math3.geometry.partitioning.BSPTree#getCut()",
        "org.apache.commons.math3.geometry.partitioning.AbstractSubHyperplane#getHyperplane()"
    ],
    "org.apache.commons.math3.random.RandomDataGenerator#nextHypergeometric(int,int,int)": [
        "org.apache.commons.math3.distribution.UniformIntegerDistribution#sample()",
        "org.apache.commons.math3.distribution.PoissonDistribution#sample()",
        "org.apache.commons.math3.distribution.HypergeometricDistribution#HypergeometricDistribution(RandomGenerator,int,int,int)",
        "org.apache.commons.math3.random.RandomDataGenerator#getRandomGenerator()",
        "org.apache.commons.math3.distribution.AbstractIntegerDistribution#sample()",
        "org.apache.commons.math3.distribution.ZipfDistribution#sample()",
        "org.apache.commons.math3.distribution.EnumeratedIntegerDistribution#sample()"
    ],
    "org.apache.commons.math3.util.CompositeFormat.parseNumber(String,NumberFormat,ParsePosition)": ["org.apache.commons.math3.util.CompositeFormat.parseNumber(String,double,ParsePosition)"],
    "org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D#getSubSpace()": ["org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D.getInstance()"],
    "org.apache.commons.math3.stat.Frequency#getCount(char)": ["org.apache.commons.math3.stat.Frequency#getCount(Comparable<?>)"],
    "org.apache.commons.math3.distribution.LogNormalDistribution#cumulativeProbability(double)": [
        "org.apache.commons.math3.util.FastMath.abs(double)",
        "org.apache.commons.math3.special.Erf.erf(double)",
        "org.apache.commons.math3.util.FastMath.log(double)",
        "org.apache.commons.math3.distribution.LogNormalDistribution.<staticinit>()"
    ],
    "org.apache.commons.math3.geometry.spherical.twod.Vertex#Vertex(S2Point)": ["org.apache.commons.math3.geometry.spherical.twod.Vertex.<init>()"],
    "org.apache.commons.math3.optimization.PointVectorValuePair#PointVectorValuePair(double[],double[],boolean)": [
        "org.apache.commons.math3.optimization.PointVectorValuePair.<init>()",
        "org.apache.commons.math3.util.Pair#Pair(K,V)"
    ],
    "org.apache.commons.math3.random.RandomDataGenerator#nextPoisson(double)": [
        "org.apache.commons.math3.distribution.PoissonDistribution.<staticinit>()",
        "org.apache.commons.math3.random.RandomDataGenerator#getRandomGenerator()",
        "org.apache.commons.math3.distribution.PoissonDistribution#sample()",
        "org.apache.commons.math3.distribution.PoissonDistribution#PoissonDistribution(RandomGenerator,double,double,int)"
    ],
    "org.apache.commons.math3.analysis.differentiation.DerivativeStructure#exp()": [
        "org.apache.commons.math3.analysis.differentiation.DerivativeStructure#DerivativeStructure(DSCompiler)",
        "org.apache.commons.math3.analysis.differentiation.DSCompiler#exp(double[],int,double[],int)"
    ],
    "org.apache.commons.math3.geometry.euclidean.twod.Vector2D#distanceInf(Vector<Euclidean2D>)": [
        "org.apache.commons.math3.util.FastMath.max(double,double)",
        "org.apache.commons.math3.util.FastMath.abs(double)"
    ],
    "org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile.Markers#Markers(Marker[])": [
        "org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile.Marker#next(Marker)",
        "org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile.Markers.<init>()",
        "org.apache.commons.math3.util.MathUtils.checkNotNull(Object)",
        "org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile.Marker#previous(Marker)",
        "org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile.<staticinit>()",
        "org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile.Marker#index(int)"
    ],
    "org.apache.commons.math3.stat.descriptive.MultivariateSummaryStatistics#setSumImpl(StorelessUnivariateStatistic[])": ["org.apache.commons.math3.stat.descriptive.MultivariateSummaryStatistics#setImpl(StorelessUnivariateStatistic[],StorelessUnivariateStatistic[])"],
    "org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet#childBefore(BSPTree<Euclidean1D>)": [
        "org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet#isDirect(BSPTree<Euclidean1D>)",
        "org.apache.commons.math3.geometry.partitioning.BSPTree#getPlus()",
        "org.apache.commons.math3.geometry.partitioning.BSPTree#getMinus()"
    ],
    "org.apache.commons.math3.stat.descriptive.MultivariateSummaryStatistics#getStandardDeviation()": [
        "org.apache.commons.math3.stat.descriptive.MultivariateSummaryStatistics#getN()",
        "org.apache.commons.math3.stat.descriptive.SynchronizedMultivariateSummaryStatistics#getN()",
        "org.apache.commons.math3.linear.Array2DRowRealMatrix#getEntry(int,int)",
        "org.apache.commons.math3.util.FastMath.sqrt(double)",
        "org.apache.commons.math3.linear.DiagonalMatrix#getEntry(int,int)",
        "org.apache.commons.math3.stat.descriptive.moment.VectorialCovariance#getResult()",
        "org.apache.commons.math3.linear.OpenMapRealMatrix#getEntry(int,int)",
        "org.apache.commons.math3.linear.BlockRealMatrix#getEntry(int,int)"
    ],
    "org.apache.commons.math3.linear.QRDecomposition#getSolver()": ["org.apache.commons.math3.linear.QRDecomposition.Solver#Solver(double[][],double[],double)"],
    "org.apache.commons.math3.distribution.ZipfDistribution#probability(int)": [
        "org.apache.commons.math3.distribution.ZipfDistribution#generalizedHarmonic(int,double)",
        "org.apache.commons.math3.util.FastMath.pow(double,double)"
    ],
    "org.apache.commons.math3.ode.FieldODEState#FieldODEState(T extends RealFieldElement,T extends RealFieldElement[],T extends RealFieldElement[][])": [
        "org.apache.commons.math3.ode.FieldODEState#copy(Field<T extends RealFieldElement>,T extends RealFieldElement[][])",
        "org.apache.commons.math3.ode.FieldODEState.<init>()"
    ],
    "org.apache.commons.math3.linear.SparseFieldVector#SparseFieldVector(SparseFieldVector<T extends FieldElement>,int)": [
        "org.apache.commons.math3.util.OpenIntToFieldHashMap#OpenIntToFieldHashMap(OpenIntToFieldHashMap<T extends FieldElement>)",
        "org.apache.commons.math3.linear.SparseFieldVector#getDimension()",
        "org.apache.commons.math3.linear.SparseFieldVector.<init>()"
    ],
    "org.apache.commons.math3.special.Beta.deltaMinusDeltaSum(double,double)": ["org.apache.commons.math3.special.Beta.<staticinit>()"],
    "org.apache.commons.math3.dfp.Dfp#getRadixDigits()": ["org.apache.commons.math3.dfp.DfpField#getRadixDigits()"],
    "org.apache.commons.math3.stat.inference.GTest#entropy(long[])": ["org.apache.commons.math3.util.FastMath.log(double)"],
    "org.apache.commons.math3.fraction.Fraction#reciprocal()": ["org.apache.commons.math3.fraction.Fraction#Fraction(int,int)"],
    "org.apache.commons.math3.optimization.direct.CMAESOptimizer.max(RealMatrix)": [
        "org.apache.commons.math3.linear.DiagonalMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.Array2DRowRealMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.BlockFieldMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.SparseFieldMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.DiagonalMatrix#getEntry(int,int)",
        "org.apache.commons.math3.linear.OpenMapRealMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.OpenMapRealMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.DiagonalMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.OpenMapRealMatrix#getEntry(int,int)",
        "org.apache.commons.math3.linear.BlockRealMatrix#getEntry(int,int)",
        "org.apache.commons.math3.linear.Array2DRowFieldMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.BlockFieldMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.SparseFieldMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.BlockRealMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.Array2DRowRealMatrix#getEntry(int,int)",
        "org.apache.commons.math3.linear.Array2DRowRealMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.Array2DRowFieldMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.BlockRealMatrix#getColumnDimension()"
    ],
    "org.apache.commons.math3.util.FastMath.round(double)": ["org.apache.commons.math3.util.FastMath.floor(double)"],
    "org.apache.commons.math3.ml.neuralnet.twod.NeuronSquareMesh2D#writeReplace()": [
        "org.apache.commons.math3.ml.neuralnet.twod.NeuronSquareMesh2D#getNeuron(int,int)",
        "org.apache.commons.math3.ml.neuralnet.twod.NeuronSquareMesh2D.SerializationProxy#SerializationProxy(boolean,boolean,SquareNeighbourhood,double[][][])",
        "org.apache.commons.math3.ml.neuralnet.Neuron#getFeatures()"
    ],
    "org.apache.commons.math3.optimization.AbstractConvergenceChecker.<staticinit>()": ["org.apache.commons.math3.util.Precision.<staticinit>()"],
    "org.apache.commons.math3.distribution.LogNormalDistribution#density(double)": [
        "org.apache.commons.math3.util.FastMath.log(double)",
        "org.apache.commons.math3.util.FastMath.exp(double)",
        "org.apache.commons.math3.distribution.LogNormalDistribution.<staticinit>()"
    ],
    "org.apache.commons.math3.geometry.euclidean.threed.SphericalCoordinates#toCartesianGradient(double[])": ["org.apache.commons.math3.geometry.euclidean.threed.SphericalCoordinates#computeJacobian()"],
    "org.apache.commons.math3.stat.descriptive.moment.Skewness#increment(double)": [
        "org.apache.commons.math3.stat.descriptive.moment.ThirdMoment#increment(double)",
        "org.apache.commons.math3.stat.descriptive.moment.FourthMoment#increment(double)"
    ],
    "org.apache.commons.math3.analysis.differentiation.DerivativeStructure#DerivativeStructure(int,int,double)": ["org.apache.commons.math3.analysis.differentiation.DerivativeStructure#DerivativeStructure(int,int)"],
    "org.apache.commons.math3.linear.Array2DRowFieldMatrix#Array2DRowFieldMatrix(T extends FieldElement[])": [
        "org.apache.commons.math3.linear.AbstractFieldMatrix.extractField(T extends FieldElement[])",
        "org.apache.commons.math3.linear.Array2DRowFieldMatrix#Array2DRowFieldMatrix(Field<T extends FieldElement>,T extends FieldElement[])"
    ],
    "org.apache.commons.math3.complex.Complex#subtract(Complex)": [
        "org.apache.commons.math3.util.MathUtils.checkNotNull(Object)",
        "org.apache.commons.math3.complex.Complex#getReal()",
        "org.apache.commons.math3.complex.Complex.<staticinit>()",
        "org.apache.commons.math3.complex.Complex#createComplex(double,double)",
        "org.apache.commons.math3.complex.Complex#getImaginary()"
    ],
    "org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile.Marker#readObject(ObjectInputStream)": ["org.apache.commons.math3.analysis.interpolation.LinearInterpolator.<init>()"],
    "org.apache.commons.math3.geometry.euclidean.threed.Rotation#Rotation(Vector3D,double,RotationConvention)": [
        "org.apache.commons.math3.geometry.euclidean.threed.Vector3D#getNorm()",
        "org.apache.commons.math3.geometry.euclidean.threed.Vector3D#getZ()",
        "org.apache.commons.math3.geometry.euclidean.threed.Vector3D#getY()",
        "org.apache.commons.math3.exception.util.LocalizedFormats.<staticinit>()",
        "org.apache.commons.math3.util.FastMath.sin(double)",
        "org.apache.commons.math3.geometry.euclidean.threed.Vector3D#getX()",
        "org.apache.commons.math3.geometry.euclidean.threed.Rotation.<init>()",
        "org.apache.commons.math3.geometry.euclidean.threed.RotationConvention.<staticinit>()",
        "org.apache.commons.math3.util.FastMath.cos(double)"
    ],
    "org.apache.commons.math3.linear.RealVector.unmodifiableRealVector(RealVector)$Iterator$1$Iterator$1#iterator()$Iterator$1#next()": [
        "org.apache.commons.math3.linear.RealVector#iterator()$Iterator$1#next()",
        "org.apache.commons.math3.linear.RealVector.unmodifiableRealVector(RealVector)$Iterator$1$Iterator$1#iterator()$Iterator$1#next()",
        "org.apache.commons.math3.linear.RealVector.SparseEntryIterator#next()",
        "org.apache.commons.math3.linear.RealVector.unmodifiableRealVector(RealVector)$Iterator$1$Iterator$1#sparseIterator()$Iterator$1#next()",
        "org.apache.commons.math3.linear.RealVector.Entry#setIndex(int)"
    ],
    "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.BOBYQAOptimizer#setup(double[],double[])": [
        "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.BOBYQAOptimizer.printMethod()",
        "org.apache.commons.math3.optim.BaseMultivariateOptimizer#getStartPoint()",
        "org.apache.commons.math3.linear.ArrayRealVector#ArrayRealVector(int)",
        "org.apache.commons.math3.exception.util.LocalizedFormats.<staticinit>()",
        "org.apache.commons.math3.util.FastMath.min(double,double)",
        "org.apache.commons.math3.linear.Array2DRowRealMatrix#Array2DRowRealMatrix(int,int)",
        "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.BOBYQAOptimizer.<staticinit>()"
    ],
    "org.apache.commons.math3.analysis.FunctionUtils.toDifferentiableMultivariateFunction(MultivariateDifferentiableFunction)$DifferentiableMultivariateFunction$1#gradient()": ["org.apache.commons.math3.analysis.FunctionUtils.toDifferentiableMultivariateFunction(MultivariateDifferentiableFunction)$MultivariateVectorFunction$1$MultivariateVectorFunction$1#gradient()$MultivariateVectorFunction$1.<init>()"],
    "org.apache.commons.math3.linear.RealVector.unmodifiableRealVector(RealVector)$RealVector$1#mapAdd(double)": [
        "org.apache.commons.math3.linear.RealVector.unmodifiableRealVector(RealVector)$RealVector$1#mapAdd(double)",
        "org.apache.commons.math3.linear.RealVector#mapAdd(double)",
        "org.apache.commons.math3.linear.OpenMapRealVector#mapAdd(double)"
    ],
    "org.apache.commons.math3.stat.inference.OneWayAnova#anovaTest(Collection<double[]>,double)": [
        "org.apache.commons.math3.stat.inference.OneWayAnova#anovaPValue(Collection<double[]>)",
        "org.apache.commons.math3.exception.util.LocalizedFormats.<staticinit>()"
    ],
    "org.apache.commons.math3.geometry.spherical.oned.S1Point#distance(Point<Sphere1D>)": ["org.apache.commons.math3.geometry.spherical.oned.S1Point.distance(S1Point,S1Point)"],
    "org.apache.commons.math3.userguide.ExampleUtils.showExampleFrame(ExampleFrame)": ["org.apache.commons.math3.userguide.ExampleUtils.showExampleFrame(ExampleFrame)$Runnable$1.<init>()"],
    "org.apache.commons.math3.special.Beta.sumDeltaMinusDeltaSum(double,double)": [
        "org.apache.commons.math3.special.Beta.<staticinit>()",
        "org.apache.commons.math3.util.FastMath.max(double,double)",
        "org.apache.commons.math3.special.Beta.deltaMinusDeltaSum(double,double)",
        "org.apache.commons.math3.util.FastMath.min(double,double)"
    ],
    "org.apache.commons.math3.geometry.euclidean.threed.FieldRotation#getAxis(RotationConvention)": [
        "org.apache.commons.math3.util.BigRealField#getZero()",
        "org.apache.commons.math3.dfp.DfpField#getZero()",
        "org.apache.commons.math3.util.BigRealField#getOne()",
        "org.apache.commons.math3.fraction.FractionField#getZero()",
        "org.apache.commons.math3.complex.ComplexField#getZero()",
        "org.apache.commons.math3.fraction.Fraction#negate()",
        "org.apache.commons.math3.util.Decimal64#negate()",
        "org.apache.commons.math3.analysis.differentiation.DerivativeStructure#negate()",
        "org.apache.commons.math3.fraction.BigFractionField#getOne()",
        "org.apache.commons.math3.fraction.FractionField#getOne()",
        "org.apache.commons.math3.complex.Complex#negate()",
        "org.apache.commons.math3.analysis.differentiation.SparseGradient#getField()$Field$1#getZero()",
        "org.apache.commons.math3.analysis.differentiation.SparseGradient#getField()$Field$1#getOne()",
        "org.apache.commons.math3.util.Decimal64Field#getZero()",
        "org.apache.commons.math3.geometry.euclidean.threed.RotationConvention.<staticinit>()",
        "org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D#FieldVector3D(T extends RealFieldElement,T extends RealFieldElement,T extends RealFieldElement)",
        "org.apache.commons.math3.complex.ComplexField#getOne()",
        "org.apache.commons.math3.analysis.differentiation.SparseGradient#negate()",
        "org.apache.commons.math3.analysis.differentiation.DerivativeStructure#getField()$Field$1#getZero()",
        "org.apache.commons.math3.fraction.BigFraction#negate()",
        "org.apache.commons.math3.dfp.Dfp#negate()",
        "org.apache.commons.math3.fraction.BigFractionField#getZero()",
        "org.apache.commons.math3.dfp.DfpField#getOne()",
        "org.apache.commons.math3.analysis.differentiation.DerivativeStructure#getField()$Field$1#getOne()",
        "org.apache.commons.math3.util.Decimal64Field#getOne()",
        "org.apache.commons.math3.util.BigReal#negate()"
    ],
    "org.apache.commons.math3.optimization.direct.CMAESOptimizer#updateCovariance(boolean,RealMatrix,RealMatrix,int[],RealMatrix)": [
        "org.apache.commons.math3.optimization.direct.CMAESOptimizer.sumRows(RealMatrix)",
        "org.apache.commons.math3.linear.BlockRealMatrix#getRow(int)",
        "org.apache.commons.math3.linear.OpenMapRealMatrix#multiply(RealMatrix)",
        "org.apache.commons.math3.linear.DiagonalMatrix#getEntry(int,int)",
        "org.apache.commons.math3.optimization.direct.CMAESOptimizer.selectColumns(RealMatrix,int[])",
        "org.apache.commons.math3.optimization.direct.CMAESOptimizer.reverse(int[])",
        "org.apache.commons.math3.linear.BlockRealMatrix#getEntry(int,int)",
        "org.apache.commons.math3.optimization.direct.CMAESOptimizer#updateBD(double)",
        "org.apache.commons.math3.linear.AbstractRealMatrix#getRow(int)",
        "org.apache.commons.math3.linear.DiagonalMatrix#multiply(RealMatrix)",
        "org.apache.commons.math3.optimization.direct.CMAESOptimizer.diag(RealMatrix)",
        "org.apache.commons.math3.linear.BlockRealMatrix#multiply(RealMatrix)",
        "org.apache.commons.math3.linear.AbstractRealMatrix#subtract(RealMatrix)",
        "org.apache.commons.math3.optimization.direct.CMAESOptimizer.sqrt(RealMatrix)",
        "org.apache.commons.math3.util.FastMath.pow(double,double)",
        "org.apache.commons.math3.optimization.direct.CMAESOptimizer.times(RealMatrix,RealMatrix)",
        "org.apache.commons.math3.linear.BlockRealMatrix#scalarMultiply(double)",
        "org.apache.commons.math3.optimization.direct.CMAESOptimizer.square(RealMatrix)",
        "org.apache.commons.math3.linear.BlockRealMatrix#transpose()",
        "org.apache.commons.math3.linear.BlockRealMatrix#subtract(RealMatrix)",
        "org.apache.commons.math3.linear.OpenMapRealMatrix#getEntry(int,int)",
        "org.apache.commons.math3.optimization.direct.CMAESOptimizer.inverse(int[])",
        "org.apache.commons.math3.linear.Array2DRowRealMatrix#getEntry(int,int)",
        "org.apache.commons.math3.util.MathArrays.copyOf(int[],int)",
        "org.apache.commons.math3.linear.OpenMapRealMatrix#subtract(RealMatrix)",
        "org.apache.commons.math3.linear.AbstractRealMatrix#multiply(RealMatrix)",
        "org.apache.commons.math3.optimization.direct.CMAESOptimizer.divide(RealMatrix,RealMatrix)",
        "org.apache.commons.math3.linear.BlockRealMatrix#add(RealMatrix)",
        "org.apache.commons.math3.linear.AbstractRealMatrix#scalarMultiply(double)",
        "org.apache.commons.math3.linear.AbstractRealMatrix#transpose()",
        "org.apache.commons.math3.linear.AbstractRealMatrix#add(RealMatrix)",
        "org.apache.commons.math3.optimization.direct.CMAESOptimizer.repmat(RealMatrix,int,int)",
        "org.apache.commons.math3.optimization.direct.CMAESOptimizer#sortedIndices(double[])"
    ],
    "org.apache.commons.math3.special.Gamma#Gamma()": ["org.apache.commons.math3.special.Gamma.<init>()"],
    "org.apache.commons.math3.random.Well44497a#Well44497a(long)": [
        "org.apache.commons.math3.random.Well44497a.<init>()",
        "org.apache.commons.math3.random.Well44497a.<staticinit>()",
        "org.apache.commons.math3.random.AbstractWell#AbstractWell(int,int,int,int,long)"
    ],
    "org.apache.commons.math3.distribution.LogisticDistribution#density(double)": ["org.apache.commons.math3.util.FastMath.exp(double)"],
    "org.apache.commons.math3.linear.IterativeLinearSolverEvent#IterativeLinearSolverEvent(Object,int)": [
        "org.apache.commons.math3.util.IterationEvent#IterationEvent(Object,int)",
        "org.apache.commons.math3.linear.IterativeLinearSolverEvent.<init>()"
    ],
    "org.apache.commons.math3.fitting.leastsquares.LeastSquaresBuilder#start(double[])": [
        "org.apache.commons.math3.linear.ArrayRealVector#ArrayRealVector(double[],boolean)",
        "org.apache.commons.math3.fitting.leastsquares.LeastSquaresBuilder#start(RealVector)"
    ],
    "org.apache.commons.math3.optimization.direct.CMAESOptimizer#sortedIndices(double[])": ["org.apache.commons.math3.optimization.direct.CMAESOptimizer.DoubleIndex#DoubleIndex(double,int)"],
    "org.apache.commons.math3.geometry.euclidean.threed.Plane#Plane(Vector3D)": [
        "org.apache.commons.math3.geometry.euclidean.threed.Plane#Plane(Vector3D,double)",
        "org.apache.commons.math3.geometry.euclidean.threed.Plane.<staticinit>()"
    ],
    "org.apache.commons.math3.stat.descriptive.moment.SemiVariance#SemiVariance(Direction)": [
        "org.apache.commons.math3.stat.descriptive.moment.SemiVariance.<init>()",
        "org.apache.commons.math3.stat.descriptive.AbstractUnivariateStatistic.<init>()"
    ],
    "org.apache.commons.math3.geometry.euclidean.threed.Rotation#getAxis()": [
        "org.apache.commons.math3.geometry.euclidean.threed.RotationConvention.<staticinit>()",
        "org.apache.commons.math3.geometry.euclidean.threed.Rotation#getAxis(RotationConvention)"
    ],
    "org.apache.commons.math3.stat.descriptive.moment.ThirdMoment#ThirdMoment(ThirdMoment)": [
        "org.apache.commons.math3.stat.descriptive.moment.SecondMoment#SecondMoment()",
        "org.apache.commons.math3.stat.descriptive.moment.ThirdMoment.<init>()",
        "org.apache.commons.math3.stat.descriptive.moment.ThirdMoment.copy(ThirdMoment,ThirdMoment)"
    ],
    "org.apache.commons.math3.linear.OpenMapRealMatrix#copy()": ["org.apache.commons.math3.linear.OpenMapRealMatrix#OpenMapRealMatrix(OpenMapRealMatrix)"],
    "org.apache.commons.math3.dfp.Dfp#multiply(int)": [
        "org.apache.commons.math3.dfp.DfpDec#newInstance(int)",
        "org.apache.commons.math3.dfp.Dfp.<staticinit>()",
        "org.apache.commons.math3.dfp.Dfp#multiplyFast(int)",
        "org.apache.commons.math3.dfp.Dfp#newInstance(int)",
        "org.apache.commons.math3.dfp.Dfp#multiply(Dfp)"
    ],
    "org.apache.commons.math3.fraction.BigFraction#BigFraction(long)": ["org.apache.commons.math3.fraction.BigFraction#BigFraction(BigInteger,BigInteger)"],
    "org.apache.commons.math3.optim.nonlinear.scalar.GradientMultivariateOptimizer#parseOptimizationData(OptimizationData[]...)": [
        "org.apache.commons.math3.optim.nonlinear.scalar.MultivariateOptimizer#parseOptimizationData(OptimizationData[]...)",
        "org.apache.commons.math3.optim.nonlinear.scalar.ObjectiveFunctionGradient#getObjectiveFunctionGradient()"
    ],
    "org.apache.commons.math3.dfp.DfpMath#DfpMath()": ["org.apache.commons.math3.dfp.DfpMath.<init>()"],
    "org.apache.commons.math3.dfp.Dfp#linearCombination(double[],Dfp[])": [
        "org.apache.commons.math3.exception.DimensionMismatchException#DimensionMismatchException(int,int)",
        "org.apache.commons.math3.dfp.Dfp#add(Dfp)",
        "org.apache.commons.math3.dfp.Dfp#multiply(double)",
        "org.apache.commons.math3.dfp.Dfp#getZero()"
    ],
    "org.apache.commons.math3.genetics.NPointCrossover#NPointCrossover(int)": ["org.apache.commons.math3.genetics.NPointCrossover.<init>()"],
    "org.apache.commons.math3.geometry.euclidean.oned.OrientedPoint#getOffset(Point<Euclidean1D>)": ["org.apache.commons.math3.geometry.euclidean.oned.Vector1D#getX()"],
    "org.apache.commons.math3.stat.inference.WilcoxonSignedRankTest#wilcoxonSignedRank(double[],double[])": [
        "org.apache.commons.math3.stat.inference.WilcoxonSignedRankTest#calculateAbsoluteDifferences(double[])",
        "org.apache.commons.math3.stat.inference.WilcoxonSignedRankTest#calculateDifferences(double[],double[])",
        "org.apache.commons.math3.stat.ranking.NaturalRanking#rank(double[])",
        "org.apache.commons.math3.util.FastMath.max(double,double)",
        "org.apache.commons.math3.stat.inference.WilcoxonSignedRankTest#ensureDataConformance(double[],double[])"
    ],
    "org.apache.commons.math3.optimization.direct.BaseAbstractMultivariateOptimizer#checkParameters()": ["org.apache.commons.math3.exception.DimensionMismatchException#DimensionMismatchException(int,int)"],
    "org.apache.commons.math3.geometry.euclidean.twod.Vector2DFormat.getInstance(Locale)": [
        "org.apache.commons.math3.geometry.euclidean.twod.Vector2DFormat#Vector2DFormat(NumberFormat)",
        "org.apache.commons.math3.util.CompositeFormat.getDefaultNumberFormat(Locale)"
    ],
    "org.apache.commons.math3.analysis.interpolation.BicubicSplineInterpolatingFunction#partialDerivativeX(double,double)": ["org.apache.commons.math3.analysis.interpolation.BicubicSplineInterpolatingFunction#partialDerivative(int,double,double)"],
    "org.apache.commons.math3.optim.PointValuePair#getPointRef()": ["org.apache.commons.math3.util.Pair#getKey()"],
    "org.apache.commons.math3.exception.NumberIsTooLargeException#NumberIsTooLargeException(Number,Number,boolean)": [
        "org.apache.commons.math3.exception.NumberIsTooLargeException#NumberIsTooLargeException(Localizable,Number,Number,boolean)",
        "org.apache.commons.math3.exception.util.LocalizedFormats.<staticinit>()"
    ],
    "org.apache.commons.math3.stat.inference.TTest#homoscedasticTTest(double,double,double,double,double,double)": [
        "org.apache.commons.math3.distribution.TDistribution#TDistribution(double,double)",
        "org.apache.commons.math3.stat.inference.TTest#homoscedasticT(double,double,double,double,double,double)",
        "org.apache.commons.math3.util.FastMath.abs(double)",
        "org.apache.commons.math3.distribution.TDistribution#cumulativeProbability(double)"
    ],
    "org.apache.commons.math3.optim.nonlinear.scalar.MultiStartMultivariateOptimizer#MultiStartMultivariateOptimizer(MultivariateOptimizer,int,RandomVectorGenerator)": [
        "org.apache.commons.math3.optim.nonlinear.scalar.MultiStartMultivariateOptimizer.<init>()",
        "org.apache.commons.math3.optim.BaseMultiStartMultivariateOptimizer#BaseMultiStartMultivariateOptimizer(BaseMultivariateOptimizer<PAIR>,int,RandomVectorGenerator)"
    ],
    "org.apache.commons.math3.linear.IterativeLinearSolver#solve(RealLinearOperator,RealVector)": [
        "org.apache.commons.math3.linear.OpenMapRealVector#set(double)",
        "org.apache.commons.math3.linear.DiagonalMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.Array2DRowRealMatrix#getColumnDimension()",
        "org.apache.commons.math3.util.MathUtils.checkNotNull(Object)",
        "org.apache.commons.math3.linear.PreconditionedIterativeLinearSolver#solveInPlace(RealLinearOperator,RealVector,RealVector)",
        "org.apache.commons.math3.linear.ArrayRealVector#ArrayRealVector(int)",
        "org.apache.commons.math3.linear.RealVector.unmodifiableRealVector(RealVector)$RealVector$1#set(double)",
        "org.apache.commons.math3.linear.OpenMapRealMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.JacobiPreconditioner#getColumnDimension()",
        "org.apache.commons.math3.linear.JacobiPreconditioner#sqrt()$RealLinearOperator$1#getColumnDimension()",
        "org.apache.commons.math3.linear.SymmLQ#solveInPlace(RealLinearOperator,RealVector,RealVector)",
        "org.apache.commons.math3.linear.ArrayRealVector#set(double)",
        "org.apache.commons.math3.linear.RealVector#set(double)",
        "org.apache.commons.math3.linear.BlockRealMatrix#getColumnDimension()"
    ],
    "org.apache.commons.math3.geometry.euclidean.threed.Segment#Segment(Vector3D,Vector3D,Line)": ["org.apache.commons.math3.geometry.euclidean.threed.Segment.<init>()"],
    "org.apache.commons.math3.dfp.BracketingNthOrderBrentSolverDFP#getRelativeAccuracy()": ["org.apache.commons.math3.analysis.solvers.FieldBracketingNthOrderBrentSolver#getRelativeAccuracy()"],
    "org.apache.commons.math3.ml.clustering.KMeansPlusPlusClusterer#KMeansPlusPlusClusterer(int)": ["org.apache.commons.math3.ml.clustering.KMeansPlusPlusClusterer#KMeansPlusPlusClusterer(int,int)"],
    "org.apache.commons.math3.analysis.integration.BaseAbstractUnivariateIntegrator#getIterations()": ["org.apache.commons.math3.util.IntegerSequence.Incrementor#getCount()"],
    "org.apache.commons.math3.analysis.differentiation.DSCompiler.convertIndex(int,int,int[][],int,int,int[][])": [
        "org.apache.commons.math3.util.FastMath.min(int,int)",
        "org.apache.commons.math3.analysis.differentiation.DSCompiler.getPartialDerivativeIndex(int,int,int[][],int[]...)"
    ],
    "org.apache.commons.math3.util.Decimal64#divide(Decimal64)": ["org.apache.commons.math3.util.Decimal64#Decimal64(double)"],
    "org.apache.commons.math3.optimization.univariate.BaseAbstractUnivariateOptimizer#optimize(int,UnivariateFunction,GoalType,double,double)": ["org.apache.commons.math3.optimization.univariate.BaseAbstractUnivariateOptimizer#optimize(int,UnivariateFunction,GoalType,double,double,double)"],
    "org.apache.commons.math3.random.SobolSequenceGenerator#initFromStream(InputStream)": [
        "org.apache.commons.math3.random.SobolSequenceGenerator#initDirectionVector(int,int,int[])",
        "org.apache.commons.math3.exception.MathParseException#MathParseException(String,int)",
        "org.apache.commons.math3.random.SobolSequenceGenerator.<staticinit>()"
    ],
    "org.apache.commons.math3.dfp.DfpField#setRoundingMode(RoundingMode)": ["org.apache.commons.math3.dfp.DfpField.RoundingMode.<staticinit>()"],
    "org.apache.commons.math3.fitting.leastsquares.OptimumImpl#getCovariances(double)": [
        "org.apache.commons.math3.fitting.leastsquares.OptimumImpl#getCovariances(double)",
        "org.apache.commons.math3.fitting.leastsquares.AbstractEvaluation#getCovariances(double)"
    ],
    "org.apache.commons.math3.linear.OpenMapRealVector#OpenMapRealVector(Double[],double)": [
        "org.apache.commons.math3.util.OpenIntToDoubleHashMap#put(int,double)",
        "org.apache.commons.math3.linear.OpenMapRealVector.<init>()",
        "org.apache.commons.math3.linear.SparseRealVector.<init>()",
        "org.apache.commons.math3.util.OpenIntToDoubleHashMap#OpenIntToDoubleHashMap(double)",
        "org.apache.commons.math3.linear.OpenMapRealVector#isDefaultValue(double)"
    ],
    "org.apache.commons.math3.distribution.EnumeratedRealDistribution#density(double)": ["org.apache.commons.math3.distribution.EnumeratedRealDistribution#probability(double)"],
    "org.apache.commons.math3.geometry.euclidean.threed.Vector3D#hashCode()": [
        "org.apache.commons.math3.util.MathUtils.hash(double)",
        "org.apache.commons.math3.geometry.euclidean.threed.Vector3D#isNaN()"
    ],
    "org.apache.commons.math3.util.CentralPivotingStrategy#pivotIndex(double[],int,int)": ["org.apache.commons.math3.util.MathArrays.verifyValues(double[],int,int)"],
    "org.apache.commons.math3.random.Well512a#Well512a()": [
        "org.apache.commons.math3.random.AbstractWell#AbstractWell(int,int,int,int)",
        "org.apache.commons.math3.random.Well512a.<staticinit>()",
        "org.apache.commons.math3.random.Well512a.<init>()"
    ],
    "org.apache.commons.math3.ode.sampling.AbstractStepInterpolator#AbstractStepInterpolator(double[],boolean,EquationsMapper,EquationsMapper[])": [
        "org.apache.commons.math3.ode.sampling.AbstractStepInterpolator#allocateInterpolatedArrays(int)",
        "org.apache.commons.math3.ode.sampling.AbstractStepInterpolator.<init>()"
    ],
    "org.apache.commons.math3.geometry.spherical.oned.ArcsSet#ArcsSet(Collection<SubHyperplane<Sphere1D>>,double)": [
        "org.apache.commons.math3.geometry.partitioning.AbstractRegion#AbstractRegion(Collection<SubHyperplane<S extends Space>>,double)",
        "org.apache.commons.math3.geometry.spherical.oned.ArcsSet.<init>()",
        "org.apache.commons.math3.geometry.spherical.oned.ArcsSet#check2PiConsistency()"
    ],
    "org.apache.commons.math3.analysis.integration.RombergIntegrator#RombergIntegrator()": [
        "org.apache.commons.math3.analysis.integration.RombergIntegrator.<init>()",
        "org.apache.commons.math3.analysis.integration.RombergIntegrator.<staticinit>()",
        "org.apache.commons.math3.analysis.integration.BaseAbstractUnivariateIntegrator#BaseAbstractUnivariateIntegrator(int,int)",
        "org.apache.commons.math3.analysis.integration.BaseAbstractUnivariateIntegrator.<staticinit>()"
    ],
    "org.apache.commons.math3.ode.nonstiff.AdaptiveStepsizeFieldIntegrator#AdaptiveStepsizeFieldIntegrator(Field<T extends RealFieldElement>,String,double,double,double,double)": [
        "org.apache.commons.math3.ode.nonstiff.AdaptiveStepsizeFieldIntegrator#setStepSizeControl(double,double,double,double)",
        "org.apache.commons.math3.ode.AbstractFieldIntegrator#AbstractFieldIntegrator(Field<T extends RealFieldElement>,String)",
        "org.apache.commons.math3.ode.nonstiff.AdaptiveStepsizeFieldIntegrator.<init>()",
        "org.apache.commons.math3.ode.nonstiff.AdaptiveStepsizeFieldIntegrator#resetInternalState()"
    ],
    "org.apache.commons.math3.linear.ArrayFieldVector#mapDivideToSelf(T extends FieldElement)": ["org.apache.commons.math3.util.MathUtils.checkNotNull(Object)"],
    "org.apache.commons.math3.distribution.WeibullDistribution#WeibullDistribution(double,double)": [
        "org.apache.commons.math3.distribution.WeibullDistribution#WeibullDistribution(double,double,double)",
        "org.apache.commons.math3.distribution.WeibullDistribution.<staticinit>()"
    ],
    "org.apache.commons.math3.fraction.Fraction#intValue()": ["org.apache.commons.math3.fraction.Fraction#doubleValue()"],
    "org.apache.commons.math3.geometry.euclidean.threed.Vector3D#add(Vector<Euclidean3D>)": ["org.apache.commons.math3.geometry.euclidean.threed.Vector3D#Vector3D(double,double,double)"],
    "org.apache.commons.math3.util.FastMath.Split.<staticinit>()": ["org.apache.commons.math3.util.FastMath.Split#Split(double,double)"],
    "org.apache.commons.math3.analysis.differentiation.DerivativeStructure#DerivativeStructure(double,DerivativeStructure,double,DerivativeStructure,double,DerivativeStructure,double,DerivativeStructure)": [
        "org.apache.commons.math3.analysis.differentiation.DSCompiler#linearCombination(double,double[],int,double,double[],int,double,double[],int,double,double[],int,double[],int)",
        "org.apache.commons.math3.analysis.differentiation.DerivativeStructure#DerivativeStructure(DSCompiler)",
        "org.apache.commons.math3.analysis.differentiation.DSCompiler#checkCompatibility(DSCompiler)"
    ],
    "org.apache.commons.math3.ml.neuralnet.Network#getNeighbours(Neuron)": ["org.apache.commons.math3.ml.neuralnet.Network#getNeighbours(Neuron,Iterable<Neuron>)"],
    "org.apache.commons.math3.analysis.differentiation.DSCompiler#log(double[],int,double[],int)": [
        "org.apache.commons.math3.util.FastMath.log(double)",
        "org.apache.commons.math3.analysis.differentiation.DSCompiler#compose(double[],int,double[],double[],int)"
    ],
    "org.apache.commons.math3.stat.descriptive.SummaryStatistics#getMean()": [
        "org.apache.commons.math3.stat.descriptive.moment.FirstMoment#getResult()",
        "org.apache.commons.math3.stat.descriptive.rank.Min#getResult()",
        "org.apache.commons.math3.stat.descriptive.moment.GeometricMean#getResult()",
        "org.apache.commons.math3.stat.descriptive.moment.Variance#getResult()",
        "org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile#getResult()",
        "org.apache.commons.math3.stat.descriptive.summary.Sum#getResult()",
        "org.apache.commons.math3.stat.descriptive.moment.FourthMoment#getResult()",
        "org.apache.commons.math3.stat.descriptive.moment.StandardDeviation#getResult()",
        "org.apache.commons.math3.stat.descriptive.summary.SumOfLogs#getResult()",
        "org.apache.commons.math3.stat.descriptive.summary.Product#getResult()",
        "org.apache.commons.math3.stat.descriptive.summary.SumOfSquares#getResult()",
        "org.apache.commons.math3.stat.descriptive.moment.Skewness#getResult()",
        "org.apache.commons.math3.stat.descriptive.moment.Kurtosis#getResult()",
        "org.apache.commons.math3.stat.descriptive.rank.Max#getResult()",
        "org.apache.commons.math3.stat.descriptive.moment.SecondMoment#getResult()",
        "org.apache.commons.math3.stat.descriptive.moment.ThirdMoment#getResult()",
        "org.apache.commons.math3.stat.descriptive.moment.Mean#getResult()"
    ],
    "org.apache.commons.math3.analysis.differentiation.SparseGradient#asinh()": [
        "org.apache.commons.math3.analysis.differentiation.SparseGradient#SparseGradient(double,double,Map<Integer, Double>)",
        "org.apache.commons.math3.util.FastMath.sqrt(double)",
        "org.apache.commons.math3.util.FastMath.asinh(double)"
    ],
    "org.apache.commons.math3.linear.ArrayFieldVector#walkInOptimizedOrder(FieldVectorChangingVisitor<T extends FieldElement>)": ["org.apache.commons.math3.linear.ArrayFieldVector#walkInDefaultOrder(FieldVectorChangingVisitor<T extends FieldElement>)"],
    "org.apache.commons.math3.stat.descriptive.SynchronizedMultivariateSummaryStatistics#setMeanImpl(StorelessUnivariateStatistic[])": ["org.apache.commons.math3.stat.descriptive.MultivariateSummaryStatistics#setMeanImpl(StorelessUnivariateStatistic[])"],
    "org.apache.commons.math3.filter.KalmanFilter#predict(RealVector)": [
        "org.apache.commons.math3.linear.DiagonalMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.Array2DRowRealMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.BlockFieldMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.ArrayRealVector#add(RealVector)",
        "org.apache.commons.math3.linear.OpenMapRealVector#add(RealVector)",
        "org.apache.commons.math3.linear.ArrayRealVector#getDimension()",
        "org.apache.commons.math3.linear.OpenMapRealMatrix#multiply(RealMatrix)",
        "org.apache.commons.math3.linear.OpenMapRealMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.RealVector.unmodifiableRealVector(RealVector)$RealVector$1#add(RealVector)",
        "org.apache.commons.math3.filter.DefaultProcessModel#getProcessNoise()",
        "org.apache.commons.math3.linear.Array2DRowFieldMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.SparseFieldMatrix#getColumnDimension()",
        "org.apache.commons.math3.exception.DimensionMismatchException#DimensionMismatchException(int,int)",
        "org.apache.commons.math3.linear.OpenMapRealVector#getDimension()",
        "org.apache.commons.math3.linear.AbstractRealMatrix#multiply(RealMatrix)",
        "org.apache.commons.math3.linear.BlockRealMatrix#add(RealMatrix)",
        "org.apache.commons.math3.linear.AbstractRealMatrix#operate(RealVector)",
        "org.apache.commons.math3.linear.BlockRealMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.RealVector#add(RealVector)",
        "org.apache.commons.math3.linear.AbstractRealMatrix#add(RealMatrix)",
        "org.apache.commons.math3.linear.DiagonalMatrix#multiply(RealMatrix)",
        "org.apache.commons.math3.linear.RealVector.unmodifiableRealVector(RealVector)$RealVector$1#getDimension()",
        "org.apache.commons.math3.linear.BlockRealMatrix#multiply(RealMatrix)"
    ],
    "org.apache.commons.math3.stat.descriptive.SummaryStatistics#getSummary()": [
        "org.apache.commons.math3.stat.descriptive.SummaryStatistics#getVariance()",
        "org.apache.commons.math3.stat.descriptive.SummaryStatistics#getMax()",
        "org.apache.commons.math3.stat.descriptive.SynchronizedSummaryStatistics#getMin()",
        "org.apache.commons.math3.stat.descriptive.SynchronizedSummaryStatistics#getSum()",
        "org.apache.commons.math3.stat.descriptive.SummaryStatistics#getSum()",
        "org.apache.commons.math3.stat.descriptive.SummaryStatistics#getMean()",
        "org.apache.commons.math3.stat.descriptive.SynchronizedSummaryStatistics#getVariance()",
        "org.apache.commons.math3.stat.descriptive.SummaryStatistics#getN()",
        "org.apache.commons.math3.stat.descriptive.StatisticalSummaryValues#StatisticalSummaryValues(double,double,long,double,double,double)",
        "org.apache.commons.math3.stat.descriptive.SynchronizedSummaryStatistics#getN()",
        "org.apache.commons.math3.stat.descriptive.SynchronizedSummaryStatistics#getMax()",
        "org.apache.commons.math3.stat.descriptive.SynchronizedSummaryStatistics#getMean()",
        "org.apache.commons.math3.stat.descriptive.SummaryStatistics#getMin()"
    ],
    "org.apache.commons.math3.stat.descriptive.DescriptiveStatistics#clear()": ["org.apache.commons.math3.util.ResizableDoubleArray#clear()"],
    "org.apache.commons.math3.analysis.FunctionUtils.collector(BivariateFunction,UnivariateFunction,double)": ["org.apache.commons.math3.analysis.FunctionUtils.collector(BivariateFunction,UnivariateFunction,double)$MultivariateFunction$1.<init>()"],
    "org.apache.commons.math3.distribution.ChiSquaredDistribution#getNumericalVariance()": ["org.apache.commons.math3.distribution.ChiSquaredDistribution#getDegreesOfFreedom()"],
    "org.apache.commons.math3.ode.ExpandableStatefulODE#setSecondaryState(int,double[])": ["org.apache.commons.math3.exception.DimensionMismatchException#DimensionMismatchException(int,int)"],
    "org.apache.commons.math3.stat.descriptive.rank.Percentile#Percentile(double)": [
        "org.apache.commons.math3.stat.descriptive.rank.Percentile.EstimationType.<staticinit>()",
        "org.apache.commons.math3.stat.ranking.NaNStrategy.<staticinit>()",
        "org.apache.commons.math3.stat.descriptive.rank.Percentile#Percentile(double,EstimationType,NaNStrategy,KthSelector)",
        "org.apache.commons.math3.util.MedianOf3PivotingStrategy.<init>()",
        "org.apache.commons.math3.util.KthSelector#KthSelector(PivotingStrategyInterface)"
    ],
    "org.apache.commons.math3.fitting.HarmonicCurveFitter#withStartPoint(double[])": ["org.apache.commons.math3.fitting.HarmonicCurveFitter#HarmonicCurveFitter(double[],int)"],
    "org.apache.commons.math3.optim.nonlinear.vector.jacobian.AbstractLeastSquaresOptimizer#optimize(OptimizationData[]...)": ["org.apache.commons.math3.optim.nonlinear.vector.JacobianMultivariateVectorOptimizer#optimize(OptimizationData[]...)"],
    "org.apache.commons.math3.optimization.linear.LinearOptimizer#optimize(LinearObjectiveFunction,Collection<LinearConstraint>,GoalType,boolean)": ["org.apache.commons.math3.optimization.GoalType.<staticinit>()"],
    "org.apache.commons.math3.linear.BlockFieldMatrix#getSubMatrix(int,int,int,int)": [
        "org.apache.commons.math3.linear.BlockFieldMatrix#blockWidth(int)",
        "org.apache.commons.math3.linear.BlockFieldMatrix#blockHeight(int)",
        "org.apache.commons.math3.linear.BlockFieldMatrix#copyBlockPart(T extends FieldElement[],int,int,int,int,int,T extends FieldElement[],int,int,int)",
        "org.apache.commons.math3.linear.AbstractFieldMatrix#getField()",
        "org.apache.commons.math3.linear.AbstractFieldMatrix#checkSubMatrixIndex(int,int,int,int)",
        "org.apache.commons.math3.linear.BlockFieldMatrix.<staticinit>()",
        "org.apache.commons.math3.linear.BlockFieldMatrix#BlockFieldMatrix(Field<T extends FieldElement>,int,int)"
    ],
    "org.apache.commons.math3.analysis.solvers.LaguerreSolver#doSolve()": [
        "org.apache.commons.math3.analysis.solvers.BaseAbstractUnivariateSolver#getMin()",
        "org.apache.commons.math3.analysis.solvers.BaseAbstractUnivariateSolver#computeObjectiveValue(double)",
        "org.apache.commons.math3.analysis.solvers.BaseAbstractUnivariateSolver#getFunctionValueAccuracy()",
        "org.apache.commons.math3.util.FastMath.abs(double)",
        "org.apache.commons.math3.analysis.solvers.BaseAbstractUnivariateSolver#verifySequence(double,double,double)",
        "org.apache.commons.math3.analysis.solvers.BaseAbstractUnivariateSolver#getStartValue()",
        "org.apache.commons.math3.analysis.solvers.LaguerreSolver#laguerre(double,double,double,double)",
        "org.apache.commons.math3.analysis.solvers.BaseAbstractUnivariateSolver#getMax()",
        "org.apache.commons.math3.exception.NoBracketingException#NoBracketingException(double,double,double,double)"
    ],
    "org.apache.commons.math3.stat.descriptive.SummaryStatistics#getStandardDeviation()": [
        "org.apache.commons.math3.stat.descriptive.SummaryStatistics#getVariance()",
        "org.apache.commons.math3.stat.descriptive.SynchronizedSummaryStatistics#getVariance()",
        "org.apache.commons.math3.stat.descriptive.SynchronizedSummaryStatistics#getN()",
        "org.apache.commons.math3.util.FastMath.sqrt(double)",
        "org.apache.commons.math3.stat.descriptive.SummaryStatistics#getN()"
    ],
    "org.apache.commons.math3.stat.correlation.SpearmansCorrelation#SpearmansCorrelation()": [
        "org.apache.commons.math3.stat.correlation.SpearmansCorrelation#SpearmansCorrelation(RankingAlgorithm)",
        "org.apache.commons.math3.stat.ranking.NaturalRanking#NaturalRanking()"
    ],
    "org.apache.commons.math3.exception.util.LocalizedFormats#LocalizedFormats(String)": ["org.apache.commons.math3.exception.util.LocalizedFormats.<init>()"],
    "org.apache.commons.math3.optimization.SimplePointChecker#SimplePointChecker(double,double)": [
        "org.apache.commons.math3.optimization.SimplePointChecker.<staticinit>()",
        "org.apache.commons.math3.optimization.AbstractConvergenceChecker#AbstractConvergenceChecker(double,double)",
        "org.apache.commons.math3.optimization.SimplePointChecker.<init>()"
    ],
    "org.apache.commons.math3.stat.regression.GLSMultipleLinearRegression#calculateBetaVariance()": [
        "org.apache.commons.math3.linear.LUDecomposition.Solver#getInverse()",
        "org.apache.commons.math3.linear.CholeskyDecomposition.Solver#getInverse()",
        "org.apache.commons.math3.linear.EigenDecomposition.Solver#getInverse()",
        "org.apache.commons.math3.linear.LUDecomposition#getSolver()",
        "org.apache.commons.math3.linear.OpenMapRealMatrix#multiply(RealMatrix)",
        "org.apache.commons.math3.linear.BlockRealMatrix#transpose()",
        "org.apache.commons.math3.linear.SingularValueDecomposition.Solver#getInverse()",
        "org.apache.commons.math3.linear.RRQRDecomposition.Solver#getInverse()",
        "org.apache.commons.math3.linear.LUDecomposition#LUDecomposition(RealMatrix)",
        "org.apache.commons.math3.linear.QRDecomposition.Solver#getInverse()",
        "org.apache.commons.math3.linear.AbstractRealMatrix#multiply(RealMatrix)",
        "org.apache.commons.math3.linear.AbstractRealMatrix#transpose()",
        "org.apache.commons.math3.stat.regression.GLSMultipleLinearRegression#getOmegaInverse()",
        "org.apache.commons.math3.stat.regression.AbstractMultipleLinearRegression#getX()",
        "org.apache.commons.math3.linear.DiagonalMatrix#multiply(RealMatrix)",
        "org.apache.commons.math3.linear.BlockRealMatrix#multiply(RealMatrix)"
    ],
    "org.apache.commons.math3.optim.nonlinear.vector.jacobian.AbstractLeastSquaresOptimizer#parseOptimizationData(OptimizationData[]...)": [
        "org.apache.commons.math3.optim.nonlinear.vector.Weight#getWeight()",
        "org.apache.commons.math3.optim.nonlinear.vector.JacobianMultivariateVectorOptimizer#parseOptimizationData(OptimizationData[]...)",
        "org.apache.commons.math3.optim.nonlinear.vector.jacobian.AbstractLeastSquaresOptimizer#squareRoot(RealMatrix)"
    ],
    "org.apache.commons.math3.genetics.Chromosome.<init>()": ["org.apache.commons.math3.genetics.Chromosome.<staticinit>()"],
    "org.apache.commons.math3.analysis.interpolation.HermiteInterpolator#polynomial(double[]...)": ["org.apache.commons.math3.analysis.polynomials.PolynomialFunction#PolynomialFunction(double[])"],
    "org.apache.commons.math3.analysis.solvers.RegulaFalsiSolver#RegulaFalsiSolver(double,double,double)": [
        "org.apache.commons.math3.analysis.solvers.BaseSecantSolver.Method.<staticinit>()",
        "org.apache.commons.math3.analysis.solvers.BaseSecantSolver#BaseSecantSolver(double,double,double,Method)",
        "org.apache.commons.math3.analysis.solvers.RegulaFalsiSolver.<init>()"
    ],
    "org.apache.commons.math3.linear.RealVector.unmodifiableRealVector(RealVector)$RealVector$1#getDistance(RealVector)": [
        "org.apache.commons.math3.linear.RealVector#getDistance(RealVector)",
        "org.apache.commons.math3.linear.OpenMapRealVector#getDistance(RealVector)",
        "org.apache.commons.math3.linear.RealVector.unmodifiableRealVector(RealVector)$RealVector$1#getDistance(RealVector)",
        "org.apache.commons.math3.linear.ArrayRealVector#getDistance(RealVector)"
    ],
    "org.apache.commons.math3.fitting.GaussianFitter.ParameterGuesser#basicGuess(WeightedObservedPoint[])": [
        "org.apache.commons.math3.fitting.WeightedObservedPoint#getX()",
        "org.apache.commons.math3.fitting.GaussianFitter.ParameterGuesser#findMaxY(WeightedObservedPoint[])",
        "org.apache.commons.math3.fitting.GaussianFitter.ParameterGuesser#interpolateXAtY(WeightedObservedPoint[],int,int,double)",
        "org.apache.commons.math3.util.FastMath.log(double)",
        "org.apache.commons.math3.util.FastMath.sqrt(double)",
        "org.apache.commons.math3.fitting.WeightedObservedPoint#getY()"
    ],
    "org.apache.commons.math3.analysis.function.Logistic.Parametric#validateParameters(double[])": [
        "org.apache.commons.math3.exception.DimensionMismatchException#DimensionMismatchException(int,int)",
        "org.apache.commons.math3.exception.NullArgumentException#NullArgumentException()"
    ],
    "org.apache.commons.math3.util.CombinatoricsUtils.binomialCoefficient(int,int)": [
        "org.apache.commons.math3.util.CombinatoricsUtils.binomialCoefficient(int,int)",
        "org.apache.commons.math3.util.ArithmeticUtils.gcd(int,int)",
        "org.apache.commons.math3.util.CombinatoricsUtils.checkBinomial(int,int)",
        "org.apache.commons.math3.util.ArithmeticUtils.mulAndCheck(long,long)"
    ],
    "org.apache.commons.math3.stat.descriptive.moment.StandardDeviation#setBiasCorrected(boolean)": ["org.apache.commons.math3.stat.descriptive.moment.Variance#setBiasCorrected(boolean)"],
    "org.apache.commons.math3.linear.BlockRealMatrix#getColumn(int)": [
        "org.apache.commons.math3.linear.BlockRealMatrix#blockHeight(int)",
        "org.apache.commons.math3.linear.BlockRealMatrix.<staticinit>()",
        "org.apache.commons.math3.linear.MatrixUtils.checkColumnIndex(AnyMatrix,int)",
        "org.apache.commons.math3.linear.BlockRealMatrix#blockWidth(int)"
    ],
    "org.apache.commons.math3.stat.clustering.DBSCANClusterer#DBSCANClusterer(double,int)": ["org.apache.commons.math3.stat.clustering.DBSCANClusterer.<init>()"],
    "org.apache.commons.math3.optimization.general.LevenbergMarquardtOptimizer#determineLMParameter(double[],double,double[],double[],double[],double[])": [
        "org.apache.commons.math3.optimization.general.LevenbergMarquardtOptimizer#determineLMDirection(double[],double[],double[],double[])",
        "org.apache.commons.math3.util.FastMath.abs(double)",
        "org.apache.commons.math3.util.FastMath.max(double,double)",
        "org.apache.commons.math3.util.FastMath.sqrt(double)",
        "org.apache.commons.math3.util.FastMath.min(double,double)"
    ],
    "org.apache.commons.math3.genetics.Chromosome#searchForFitnessUpdate(Population)": [
        "org.apache.commons.math3.genetics.Chromosome#getFitness()",
        "org.apache.commons.math3.genetics.Chromosome#findSameChromosome(Population)"
    ],
    "org.apache.commons.math3.stat.StatUtils.geometricMean(double[],int,int)": [
        "org.apache.commons.math3.stat.StatUtils.<staticinit>()",
        "org.apache.commons.math3.stat.descriptive.moment.GeometricMean#evaluate(double[],int,int)"
    ],
    "org.apache.commons.math3.ode.nonstiff.GillFieldIntegrator#GillFieldIntegrator(Field<T extends RealFieldElement>,T extends RealFieldElement)": [
        "org.apache.commons.math3.ode.nonstiff.GillFieldIntegrator.<init>()",
        "org.apache.commons.math3.ode.nonstiff.RungeKuttaFieldIntegrator#RungeKuttaFieldIntegrator(Field<T extends RealFieldElement>,String,T extends RealFieldElement)"
    ],
    "org.apache.commons.math3.fraction.Fraction#add(Fraction)": ["org.apache.commons.math3.fraction.Fraction#addSub(Fraction,boolean)"],
    "org.apache.commons.math3.linear.SymmLQ.State.daxpy(double,RealVector,RealVector)": [
        "org.apache.commons.math3.linear.OpenMapRealVector#getDimension()",
        "org.apache.commons.math3.linear.ArrayRealVector#getDimension()",
        "org.apache.commons.math3.linear.OpenMapRealVector#setEntry(int,double)",
        "org.apache.commons.math3.linear.ArrayRealVector#getEntry(int)",
        "org.apache.commons.math3.linear.RealVector.unmodifiableRealVector(RealVector)$RealVector$1#getDimension()",
        "org.apache.commons.math3.linear.OpenMapRealVector#getEntry(int)",
        "org.apache.commons.math3.linear.RealVector.unmodifiableRealVector(RealVector)$RealVector$1#setEntry(int,double)",
        "org.apache.commons.math3.linear.ArrayRealVector#setEntry(int,double)",
        "org.apache.commons.math3.linear.RealVector.unmodifiableRealVector(RealVector)$RealVector$1#getEntry(int)"
    ],
    "org.apache.commons.math3.linear.RealVector#iterator()$Iterator$1#next()": ["org.apache.commons.math3.linear.RealVector.Entry#setIndex(int)"],
    "org.apache.commons.math3.userguide.filter.CannonballExample.Cannonball#getMeasuredY()": [
        "org.apache.commons.math3.random.RandomAdaptor#nextGaussian()",
        "org.apache.commons.math3.random.SynchronizedRandomGenerator#nextGaussian()",
        "org.apache.commons.math3.random.RandomGeneratorFactory.createRandomGenerator(Random)$RandomGenerator$1#nextGaussian()",
        "org.apache.commons.math3.random.BitsStreamGenerator#nextGaussian()",
        "org.apache.commons.math3.random.AbstractRandomGenerator#nextGaussian()"
    ],
    "org.apache.commons.math3.distribution.KolmogorovSmirnovDistribution#exactK(double)": [
        "org.apache.commons.math3.distribution.KolmogorovSmirnovDistribution#createH(double)",
        "org.apache.commons.math3.util.FastMath.ceil(double)",
        "org.apache.commons.math3.fraction.BigFraction#bigDecimalValue(int,int)",
        "org.apache.commons.math3.fraction.BigFraction#multiply(int)",
        "org.apache.commons.math3.linear.AbstractFieldMatrix#power(int)",
        "org.apache.commons.math3.fraction.BigFraction#divide(int)"
    ],
    "org.apache.commons.math3.analysis.interpolation.FieldHermiteInterpolator#addSamplePoint(T extends FieldElement,T extends FieldElement[][]...)": [
        "org.apache.commons.math3.util.MathUtils.checkNotNull(Object)",
        "org.apache.commons.math3.exception.util.LocalizedFormats.<staticinit>()"
    ],
    "org.apache.commons.math3.ode.ContinuousOutputModel#setInterpolatedTime(double)": [
        "org.apache.commons.math3.ode.ContinuousOutputModel#locatePoint(double,StepInterpolator)",
        "org.apache.commons.math3.ode.sampling.AbstractStepInterpolator#setInterpolatedTime(double)",
        "org.apache.commons.math3.util.FastMath.abs(double)",
        "org.apache.commons.math3.util.FastMath.rint(double)",
        "org.apache.commons.math3.util.FastMath.max(int,int)",
        "org.apache.commons.math3.ode.sampling.AbstractStepInterpolator#getCurrentTime()",
        "org.apache.commons.math3.util.FastMath.min(int,int)",
        "org.apache.commons.math3.ode.sampling.AbstractStepInterpolator#getPreviousTime()"
    ],
    "org.apache.commons.math3.linear.BlockRealMatrix#operate(double[])": [
        "org.apache.commons.math3.exception.DimensionMismatchException#DimensionMismatchException(int,int)",
        "org.apache.commons.math3.linear.BlockRealMatrix.<staticinit>()",
        "org.apache.commons.math3.util.FastMath.min(int,int)"
    ],
    "org.apache.commons.math3.optimization.DifferentiableMultivariateVectorMultiStartOptimizer#DifferentiableMultivariateVectorMultiStartOptimizer(DifferentiableMultivariateVectorOptimizer,int,RandomVectorGenerator)": [
        "org.apache.commons.math3.optimization.DifferentiableMultivariateVectorMultiStartOptimizer.<init>()",
        "org.apache.commons.math3.optimization.BaseMultivariateVectorMultiStartOptimizer#BaseMultivariateVectorMultiStartOptimizer(BaseMultivariateVectorOptimizer<FUNC extends MultivariateVectorFunction>,int,RandomVectorGenerator)"
    ],
    "org.apache.commons.math3.analysis.FunctionUtils.toDifferentiableMultivariateVectorFunction(MultivariateDifferentiableVectorFunction)$MultivariateMatrixFunction$1$MultivariateMatrixFunction$1#jacobian()$MultivariateMatrixFunction$1#value(double[])": [
        "org.apache.commons.math3.analysis.FunctionUtils.toMultivariateDifferentiableVectorFunction(DifferentiableMultivariateVectorFunction)$MultivariateDifferentiableVectorFunction$1#value(DerivativeStructure[])",
        "org.apache.commons.math3.analysis.differentiation.DerivativeStructure#DerivativeStructure(int,int,int,double)",
        "org.apache.commons.math3.analysis.differentiation.DerivativeStructure#getPartialDerivative(int[]...)",
        "org.apache.commons.math3.optimization.fitting.CurveFitter.TheoreticalValuesFunction#value(DerivativeStructure[])"
    ],
    "org.apache.commons.math3.stat.descriptive.DescriptiveStatistics#replaceMostRecentValue(double)": ["org.apache.commons.math3.util.ResizableDoubleArray#substituteMostRecentElement(double)"],
    "org.apache.commons.math3.fitting.GaussianFitter.ParameterGuesser#interpolateXAtY(WeightedObservedPoint[],int,int,double)": [
        "org.apache.commons.math3.fitting.WeightedObservedPoint#getX()",
        "org.apache.commons.math3.fitting.WeightedObservedPoint#getY()",
        "org.apache.commons.math3.fitting.GaussianFitter.ParameterGuesser#getInterpolationPointsForY(WeightedObservedPoint[],int,int,double)",
        "org.apache.commons.math3.exception.ZeroException#ZeroException()"
    ],
    "org.apache.commons.math3.ml.clustering.KMeansPlusPlusClusterer#getFarthestPoint(Collection<CentroidCluster<T extends Clusterable>>)": [
        "org.apache.commons.math3.ml.clustering.Cluster#getPoints()",
        "org.apache.commons.math3.ml.clustering.CentroidCluster#getCenter()",
        "org.apache.commons.math3.ml.clustering.Clusterer#distance(Clusterable,Clusterable)",
        "org.apache.commons.math3.exception.util.LocalizedFormats.<staticinit>()"
    ],
    "org.apache.commons.math3.linear.OpenMapRealVector.OpenMapEntry#getValue()": ["org.apache.commons.math3.util.OpenIntToDoubleHashMap.Iterator#value()"],
    "org.apache.commons.math3.analysis.solvers.AbstractPolynomialSolver#setup(int,PolynomialFunction,double,double,double)": ["org.apache.commons.math3.analysis.solvers.BaseAbstractUnivariateSolver#setup(int,FUNC extends UnivariateFunction,double,double,double)"],
    "org.apache.commons.math3.analysis.differentiation.FiniteDifferencesDifferentiator#FiniteDifferencesDifferentiator(int,double,double,double)": [
        "org.apache.commons.math3.util.FastMath.ulp(double)",
        "org.apache.commons.math3.analysis.differentiation.FiniteDifferencesDifferentiator.<init>()"
    ],
    "org.apache.commons.math3.analysis.function.Asinh#value(double)": ["org.apache.commons.math3.util.FastMath.asinh(double)"],
    "org.apache.commons.math3.optimization.direct.MultiDirectionalSimplex#evaluateNewSimplex(MultivariateFunction,PointValuePair[],double,Comparator<PointValuePair>)": [
        "org.apache.commons.math3.optimization.direct.AbstractSimplex#getSize()",
        "org.apache.commons.math3.optimization.direct.AbstractSimplex#getDimension()",
        "org.apache.commons.math3.optimization.PointValuePair#getPointRef()",
        "org.apache.commons.math3.optimization.direct.AbstractSimplex#evaluate(MultivariateFunction,Comparator<PointValuePair>)",
        "org.apache.commons.math3.optimization.direct.AbstractSimplex#setPoint(int,PointValuePair)",
        "org.apache.commons.math3.optimization.direct.AbstractSimplex#getPoint(int)",
        "org.apache.commons.math3.optimization.PointValuePair#PointValuePair(double[],double,boolean)"
    ],
    "org.apache.commons.math3.geometry.euclidean.twod.SubLine#SubLine(Hyperplane<Euclidean2D>,Region<Euclidean1D>)": [
        "org.apache.commons.math3.geometry.partitioning.AbstractSubHyperplane#AbstractSubHyperplane(Hyperplane<S extends Space>,Region<T extends Space>)",
        "org.apache.commons.math3.geometry.euclidean.twod.SubLine.<init>()"
    ],
    "org.apache.commons.math3.analysis.differentiation.SparseGradient#tanh()": [
        "org.apache.commons.math3.analysis.differentiation.SparseGradient#SparseGradient(double,double,Map<Integer, Double>)",
        "org.apache.commons.math3.util.FastMath.tanh(double)"
    ],
    "org.apache.commons.math3.linear.AbstractFieldMatrix#isSquare()": [
        "org.apache.commons.math3.linear.BlockFieldMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.SparseFieldMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.Array2DRowFieldMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.BlockFieldMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.SparseFieldMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.Array2DRowFieldMatrix#getColumnDimension()"
    ],
    "org.apache.commons.math3.geometry.euclidean.threed.OutlineExtractor.BoundaryProjector#BoundaryProjector(double)": [
        "org.apache.commons.math3.geometry.euclidean.threed.OutlineExtractor.BoundaryProjector.<init>()",
        "org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet#PolygonsSet(BSPTree<Euclidean2D>,double)",
        "org.apache.commons.math3.geometry.partitioning.BSPTree#BSPTree(Object)"
    ],
    "org.apache.commons.math3.analysis.interpolation.SmoothingPolynomialBicubicSplineInterpolator#interpolate(double[],double[],double[][])": [
        "org.apache.commons.math3.exception.DimensionMismatchException#DimensionMismatchException(int,int)",
        "org.apache.commons.math3.fitting.CurveFitter#clearObservations()",
        "org.apache.commons.math3.util.MathArrays.checkOrder(double[])",
        "org.apache.commons.math3.analysis.interpolation.BicubicSplineInterpolator#interpolate(double[],double[],double[][])",
        "org.apache.commons.math3.analysis.polynomials.PolynomialFunction#PolynomialFunction(double[])",
        "org.apache.commons.math3.exception.NoDataException#NoDataException()",
        "org.apache.commons.math3.fitting.PolynomialFitter#fit(double[])",
        "org.apache.commons.math3.analysis.polynomials.PolynomialFunction#value(double)",
        "org.apache.commons.math3.fitting.CurveFitter#addObservedPoint(double,double,double)"
    ],
    "org.apache.commons.math3.analysis.FunctionUtils.add(UnivariateFunction[]...)$UnivariateFunction$1#value(double)": [
        "org.apache.commons.math3.analysis.FunctionUtils.multiply(DifferentiableUnivariateFunction[]...)$UnivariateFunction$1$UnivariateFunction$1#derivative()$UnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.polynomials.PolynomialSplineFunction#value(double)",
        "org.apache.commons.math3.analysis.function.Gaussian#value(double)",
        "org.apache.commons.math3.analysis.function.Tanh#value(double)",
        "org.apache.commons.math3.analysis.function.Inverse#value(double)",
        "org.apache.commons.math3.analysis.function.HarmonicOscillator#value(double)",
        "org.apache.commons.math3.analysis.FunctionUtils.fix1stArgument(BivariateFunction,double)$UnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.function.Asin#value(double)",
        "org.apache.commons.math3.analysis.function.Asinh#value(double)",
        "org.apache.commons.math3.analysis.FunctionUtils.multiply(UnivariateFunction[]...)$UnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.function.Atan#value(double)",
        "org.apache.commons.math3.analysis.FunctionUtils.toDifferentiableUnivariateFunction(UnivariateDifferentiableFunction)$DifferentiableUnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.function.Cbrt#value(double)",
        "org.apache.commons.math3.analysis.polynomials.PolynomialFunctionLagrangeForm#value(double)",
        "org.apache.commons.math3.analysis.function.Exp#value(double)",
        "org.apache.commons.math3.special.BesselJ#value(double)",
        "org.apache.commons.math3.analysis.polynomials.PolynomialFunctionNewtonForm#value(double)",
        "org.apache.commons.math3.analysis.FunctionUtils.add(UnivariateFunction[]...)$UnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.function.Sin#value(double)",
        "org.apache.commons.math3.analysis.function.Cos#value(double)",
        "org.apache.commons.math3.analysis.interpolation.UnivariatePeriodicInterpolator#interpolate(double[],double[])$UnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.function.Log10#value(double)",
        "org.apache.commons.math3.analysis.function.Sqrt#value(double)",
        "org.apache.commons.math3.analysis.function.Log#value(double)",
        "org.apache.commons.math3.analysis.function.Sinc#value(double)",
        "org.apache.commons.math3.ode.events.EventState#evaluateStep(StepInterpolator)$UnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.function.Minus#value(double)",
        "org.apache.commons.math3.analysis.integration.IterativeLegendreGaussIntegrator#stage(int)$UnivariateFunction$1#value(double)",
        "org.apache.commons.math3.optimization.general.NonLinearConjugateGradientOptimizer.LineSearchFunction#value(double)",
        "org.apache.commons.math3.analysis.function.Floor#value(double)",
        "org.apache.commons.math3.analysis.FunctionUtils.multiply(DifferentiableUnivariateFunction[]...)$DifferentiableUnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.FunctionUtils.combine(BivariateFunction,UnivariateFunction,UnivariateFunction)$UnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.FunctionUtils.add(DifferentiableUnivariateFunction[]...)$UnivariateFunction$1$UnivariateFunction$1#derivative()$UnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.function.Sinh#value(double)",
        "org.apache.commons.math3.analysis.FunctionUtils.multiply(UnivariateDifferentiableFunction[]...)$UnivariateDifferentiableFunction$1#value(double)",
        "org.apache.commons.math3.analysis.function.Tan#value(double)",
        "org.apache.commons.math3.distribution.AbstractRealDistribution#inverseCumulativeProbability(double)$UnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.FunctionUtils.add(DifferentiableUnivariateFunction[]...)$DifferentiableUnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.function.Ceil#value(double)",
        "org.apache.commons.math3.analysis.function.Logistic#value(double)",
        "org.apache.commons.math3.analysis.function.Signum#value(double)",
        "org.apache.commons.math3.analysis.function.Constant#value(double)",
        "org.apache.commons.math3.analysis.function.Atanh#value(double)",
        "org.apache.commons.math3.analysis.FunctionUtils.compose(DifferentiableUnivariateFunction[]...)$UnivariateFunction$1$UnivariateFunction$1#derivative()$UnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.FunctionUtils.add(UnivariateDifferentiableFunction[]...)$UnivariateDifferentiableFunction$1#value(double)",
        "org.apache.commons.math3.analysis.function.Abs#value(double)",
        "org.apache.commons.math3.analysis.differentiation.FiniteDifferencesDifferentiator#differentiate(UnivariateFunction)$UnivariateDifferentiableFunction$1#value(double)",
        "org.apache.commons.math3.analysis.function.Identity#value(double)",
        "org.apache.commons.math3.analysis.function.Expm1#value(double)",
        "org.apache.commons.math3.analysis.function.Logit#value(double)",
        "org.apache.commons.math3.analysis.function.Log1p#value(double)",
        "org.apache.commons.math3.analysis.FunctionUtils.fix2ndArgument(BivariateFunction,double)$UnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.FunctionUtils.toUnivariateDifferential(DifferentiableUnivariateFunction)$UnivariateDifferentiableFunction$1#value(double)",
        "org.apache.commons.math3.analysis.FunctionUtils.toDifferentiableUnivariateFunction(UnivariateDifferentiableFunction)$UnivariateFunction$1$UnivariateFunction$1#derivative()$UnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.polynomials.PolynomialFunction#value(double)",
        "org.apache.commons.math3.analysis.function.Rint#value(double)",
        "org.apache.commons.math3.analysis.FunctionUtils.compose(UnivariateFunction[]...)$UnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.function.Cosh#value(double)",
        "org.apache.commons.math3.optimization.direct.PowellOptimizer.LineSearch#search(double[],double[])$UnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.FunctionUtils.compose(DifferentiableUnivariateFunction[]...)$DifferentiableUnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.function.Acosh#value(double)",
        "org.apache.commons.math3.analysis.function.StepFunction#value(double)",
        "org.apache.commons.math3.analysis.FunctionUtils.compose(UnivariateDifferentiableFunction[]...)$UnivariateDifferentiableFunction$1#value(double)",
        "org.apache.commons.math3.analysis.function.Acos#value(double)",
        "org.apache.commons.math3.analysis.function.Power#value(double)",
        "org.apache.commons.math3.optim.nonlinear.scalar.LineSearch#search(double[],double[])$UnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.function.Sigmoid#value(double)",
        "org.apache.commons.math3.analysis.function.Ulp#value(double)"
    ],
    "org.apache.commons.math3.linear.BlockFieldMatrix#setColumnVector(int,FieldVector<T extends FieldElement>)": [
        "org.apache.commons.math3.linear.AbstractFieldMatrix#setColumnVector(int,FieldVector<T extends FieldElement>)",
        "org.apache.commons.math3.linear.BlockFieldMatrix#setColumn(int,T extends FieldElement[])",
        "org.apache.commons.math3.linear.ArrayFieldVector#getDataRef()"
    ],
    "org.apache.commons.math3.stat.descriptive.SynchronizedMultivariateSummaryStatistics#setSumLogImpl(StorelessUnivariateStatistic[])": ["org.apache.commons.math3.stat.descriptive.MultivariateSummaryStatistics#setSumLogImpl(StorelessUnivariateStatistic[])"],
    "org.apache.commons.math3.userguide.sofm.ChineseRingsClassifier#computeTopographicError()": [
        "org.apache.commons.math3.ml.neuralnet.twod.NeuronSquareMesh2D#getNetwork()",
        "org.apache.commons.math3.userguide.sofm.ChineseRingsClassifier#createIterable()",
        "org.apache.commons.math3.ml.neuralnet.MapUtils.computeTopographicError(Iterable<double[]>,Network,DistanceMeasure)"
    ],
    "org.apache.commons.math3.random.RandomDataGenerator#nextSecureInt(int,int)": [
        "org.apache.commons.math3.distribution.UniformIntegerDistribution#sample()",
        "org.apache.commons.math3.distribution.UniformIntegerDistribution#UniformIntegerDistribution(RandomGenerator,int,int)",
        "org.apache.commons.math3.random.RandomDataGenerator#getSecRan()"
    ],
    "org.apache.commons.math3.ode.ParameterJacobianWrapper#getParametersNames()": [
        "org.apache.commons.math3.ode.AbstractParameterizable#getParametersNames()",
        "org.apache.commons.math3.ode.ParameterJacobianWrapper#getParametersNames()",
        "org.apache.commons.math3.ode.ParameterizedWrapper#getParametersNames()"
    ],
    "org.apache.commons.math3.util.FastMath.doubleHighPart(double)": [
        "org.apache.commons.math3.util.FastMath.<staticinit>()",
        "org.apache.commons.math3.util.Precision.<staticinit>()"
    ],
    "org.apache.commons.math3.util.ResizableDoubleArray#checkContractExpand(float,float)": ["org.apache.commons.math3.util.ResizableDoubleArray#checkContractExpand(double,double)"],
    "org.apache.commons.math3.linear.SparseFieldVector#subtract(FieldVector<T extends FieldElement>)": [
        "org.apache.commons.math3.linear.SparseFieldVector#checkVectorDimensions(int)",
        "org.apache.commons.math3.util.OpenIntToFieldHashMap#get(int)",
        "org.apache.commons.math3.linear.SparseFieldVector#getEntry(int)",
        "org.apache.commons.math3.linear.ArrayFieldVector#getDimension()",
        "org.apache.commons.math3.util.BigRealField#getZero()",
        "org.apache.commons.math3.analysis.differentiation.SparseGradient#getField()$Field$1#getZero()",
        "org.apache.commons.math3.util.Decimal64Field#getZero()",
        "org.apache.commons.math3.linear.ArrayFieldVector#getEntry(int)",
        "org.apache.commons.math3.dfp.DfpField#getZero()",
        "org.apache.commons.math3.linear.SparseFieldVector#SparseFieldVector(SparseFieldVector<T extends FieldElement>)",
        "org.apache.commons.math3.util.OpenIntToFieldHashMap#containsKey(int)",
        "org.apache.commons.math3.analysis.differentiation.DerivativeStructure#getField()$Field$1#getZero()",
        "org.apache.commons.math3.fraction.FractionField#getZero()",
        "org.apache.commons.math3.linear.SparseFieldVector#setEntry(int,T extends FieldElement)",
        "org.apache.commons.math3.linear.SparseFieldVector#getDimension()",
        "org.apache.commons.math3.complex.ComplexField#getZero()",
        "org.apache.commons.math3.fraction.BigFractionField#getZero()",
        "org.apache.commons.math3.linear.SparseFieldVector#subtract(SparseFieldVector<T extends FieldElement>)"
    ],
    "org.apache.commons.math3.userguide.filter.CannonballExample.Cannonball#Cannonball(double,double,double,double,int)": [
        "org.apache.commons.math3.userguide.filter.CannonballExample.Cannonball.<init>()",
        "org.apache.commons.math3.util.FastMath.toRadians(double)",
        "org.apache.commons.math3.util.FastMath.sin(double)",
        "org.apache.commons.math3.random.Well19937c#Well19937c(int)",
        "org.apache.commons.math3.util.FastMath.cos(double)"
    ],
    "org.apache.commons.math3.optim.linear.LinearOptimizer#parseOptimizationData(OptimizationData[]...)": [
        "org.apache.commons.math3.optim.linear.LinearConstraintSet#getConstraints()",
        "org.apache.commons.math3.optim.linear.NonNegativeConstraint#isRestrictedToNonNegative()",
        "org.apache.commons.math3.optim.nonlinear.scalar.MultivariateOptimizer#parseOptimizationData(OptimizationData[]...)"
    ],
    "org.apache.commons.math3.ode.nonstiff.ThreeEighthesFieldIntegrator#getB()": [
        "org.apache.commons.math3.ode.AbstractFieldIntegrator#getField()",
        "org.apache.commons.math3.util.MathArrays.buildArray(Field<T>,int)",
        "org.apache.commons.math3.ode.nonstiff.RungeKuttaFieldIntegrator#fraction(int,int)"
    ],
    "org.apache.commons.math3.analysis.FunctionUtils.add(DifferentiableUnivariateFunction[]...)$UnivariateFunction$1$UnivariateFunction$1#derivative()$UnivariateFunction$1#value(double)": [
        "org.apache.commons.math3.analysis.polynomials.PolynomialSplineFunction#value(double)",
        "org.apache.commons.math3.analysis.function.Power#derivative()",
        "org.apache.commons.math3.analysis.function.Tanh#value(double)",
        "org.apache.commons.math3.analysis.function.Exp#derivative()",
        "org.apache.commons.math3.analysis.function.HarmonicOscillator#derivative()",
        "org.apache.commons.math3.analysis.polynomials.PolynomialFunction#derivative()",
        "org.apache.commons.math3.analysis.function.Logit#derivative()",
        "org.apache.commons.math3.analysis.function.HarmonicOscillator#value(double)",
        "org.apache.commons.math3.analysis.polynomials.PolynomialSplineFunction#derivative()",
        "org.apache.commons.math3.analysis.FunctionUtils.fix1stArgument(BivariateFunction,double)$UnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.function.Asinh#value(double)",
        "org.apache.commons.math3.analysis.function.Inverse#derivative()",
        "org.apache.commons.math3.analysis.FunctionUtils.toDifferentiableUnivariateFunction(UnivariateDifferentiableFunction)$DifferentiableUnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.function.Cbrt#value(double)",
        "org.apache.commons.math3.analysis.function.Atan#derivative()",
        "org.apache.commons.math3.analysis.function.Expm1#derivative()",
        "org.apache.commons.math3.analysis.FunctionUtils.add(UnivariateFunction[]...)$UnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.function.Sin#value(double)",
        "org.apache.commons.math3.analysis.function.Sigmoid#derivative()",
        "org.apache.commons.math3.analysis.interpolation.UnivariatePeriodicInterpolator#interpolate(double[],double[])$UnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.function.Sqrt#value(double)",
        "org.apache.commons.math3.analysis.function.Sinc#value(double)",
        "org.apache.commons.math3.ode.events.EventState#evaluateStep(StepInterpolator)$UnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.integration.IterativeLegendreGaussIntegrator#stage(int)$UnivariateFunction$1#value(double)",
        "org.apache.commons.math3.optimization.general.NonLinearConjugateGradientOptimizer.LineSearchFunction#value(double)",
        "org.apache.commons.math3.analysis.function.Floor#value(double)",
        "org.apache.commons.math3.analysis.FunctionUtils.multiply(DifferentiableUnivariateFunction[]...)$DifferentiableUnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.FunctionUtils.add(DifferentiableUnivariateFunction[]...)$DifferentiableUnivariateFunction$1#derivative()",
        "org.apache.commons.math3.analysis.function.Log1p#derivative()",
        "org.apache.commons.math3.analysis.FunctionUtils.combine(BivariateFunction,UnivariateFunction,UnivariateFunction)$UnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.FunctionUtils.add(DifferentiableUnivariateFunction[]...)$UnivariateFunction$1$UnivariateFunction$1#derivative()$UnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.function.Tan#derivative()",
        "org.apache.commons.math3.analysis.function.Sinh#value(double)",
        "org.apache.commons.math3.analysis.function.Tan#value(double)",
        "org.apache.commons.math3.distribution.AbstractRealDistribution#inverseCumulativeProbability(double)$UnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.FunctionUtils.add(DifferentiableUnivariateFunction[]...)$DifferentiableUnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.function.Cos#derivative()",
        "org.apache.commons.math3.analysis.function.Atanh#derivative()",
        "org.apache.commons.math3.analysis.function.Ceil#value(double)",
        "org.apache.commons.math3.analysis.function.Atanh#value(double)",
        "org.apache.commons.math3.analysis.FunctionUtils.compose(DifferentiableUnivariateFunction[]...)$UnivariateFunction$1$UnivariateFunction$1#derivative()$UnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.FunctionUtils.toDifferentiableUnivariateFunction(UnivariateDifferentiableFunction)$DifferentiableUnivariateFunction$1#derivative()",
        "org.apache.commons.math3.analysis.function.Logit#value(double)",
        "org.apache.commons.math3.analysis.function.Log1p#value(double)",
        "org.apache.commons.math3.analysis.FunctionUtils.toUnivariateDifferential(DifferentiableUnivariateFunction)$UnivariateDifferentiableFunction$1#value(double)",
        "org.apache.commons.math3.analysis.FunctionUtils.toDifferentiableUnivariateFunction(UnivariateDifferentiableFunction)$UnivariateFunction$1$UnivariateFunction$1#derivative()$UnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.function.Log#derivative()",
        "org.apache.commons.math3.analysis.function.Logistic#derivative()",
        "org.apache.commons.math3.analysis.function.Asinh#derivative()",
        "org.apache.commons.math3.analysis.FunctionUtils.compose(UnivariateFunction[]...)$UnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.function.Cosh#value(double)",
        "org.apache.commons.math3.analysis.FunctionUtils.compose(DifferentiableUnivariateFunction[]...)$DifferentiableUnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.function.Constant#derivative()",
        "org.apache.commons.math3.analysis.function.StepFunction#value(double)",
        "org.apache.commons.math3.analysis.function.Acos#value(double)",
        "org.apache.commons.math3.analysis.function.Tanh#derivative()",
        "org.apache.commons.math3.analysis.function.Minus#derivative()",
        "org.apache.commons.math3.analysis.FunctionUtils.compose(DifferentiableUnivariateFunction[]...)$DifferentiableUnivariateFunction$1#derivative()",
        "org.apache.commons.math3.optim.nonlinear.scalar.LineSearch#search(double[],double[])$UnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.function.Sigmoid#value(double)",
        "org.apache.commons.math3.analysis.FunctionUtils.multiply(DifferentiableUnivariateFunction[]...)$DifferentiableUnivariateFunction$1#derivative()",
        "org.apache.commons.math3.analysis.function.Ulp#value(double)",
        "org.apache.commons.math3.analysis.function.Log10#derivative()",
        "org.apache.commons.math3.analysis.FunctionUtils.multiply(DifferentiableUnivariateFunction[]...)$UnivariateFunction$1$UnivariateFunction$1#derivative()$UnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.function.Gaussian#value(double)",
        "org.apache.commons.math3.analysis.function.Inverse#value(double)",
        "org.apache.commons.math3.analysis.function.Cbrt#derivative()",
        "org.apache.commons.math3.analysis.function.Asin#value(double)",
        "org.apache.commons.math3.analysis.FunctionUtils.multiply(UnivariateFunction[]...)$UnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.function.Atan#value(double)",
        "org.apache.commons.math3.analysis.function.Identity#derivative()",
        "org.apache.commons.math3.analysis.polynomials.PolynomialFunctionLagrangeForm#value(double)",
        "org.apache.commons.math3.analysis.function.Sqrt#derivative()",
        "org.apache.commons.math3.analysis.function.Exp#value(double)",
        "org.apache.commons.math3.special.BesselJ#value(double)",
        "org.apache.commons.math3.analysis.polynomials.PolynomialFunctionNewtonForm#value(double)",
        "org.apache.commons.math3.analysis.function.Gaussian#derivative()",
        "org.apache.commons.math3.analysis.function.Sinc#derivative()",
        "org.apache.commons.math3.analysis.function.Cos#value(double)",
        "org.apache.commons.math3.analysis.function.Sinh#derivative()",
        "org.apache.commons.math3.analysis.function.Log10#value(double)",
        "org.apache.commons.math3.analysis.function.Log#value(double)",
        "org.apache.commons.math3.analysis.function.Minus#value(double)",
        "org.apache.commons.math3.analysis.FunctionUtils.multiply(UnivariateDifferentiableFunction[]...)$UnivariateDifferentiableFunction$1#value(double)",
        "org.apache.commons.math3.analysis.function.Logistic#value(double)",
        "org.apache.commons.math3.analysis.function.Signum#value(double)",
        "org.apache.commons.math3.analysis.function.Constant#value(double)",
        "org.apache.commons.math3.analysis.function.Sin#derivative()",
        "org.apache.commons.math3.analysis.FunctionUtils.add(UnivariateDifferentiableFunction[]...)$UnivariateDifferentiableFunction$1#value(double)",
        "org.apache.commons.math3.analysis.function.Abs#value(double)",
        "org.apache.commons.math3.analysis.differentiation.FiniteDifferencesDifferentiator#differentiate(UnivariateFunction)$UnivariateDifferentiableFunction$1#value(double)",
        "org.apache.commons.math3.analysis.function.Identity#value(double)",
        "org.apache.commons.math3.analysis.function.Expm1#value(double)",
        "org.apache.commons.math3.analysis.function.Cosh#derivative()",
        "org.apache.commons.math3.analysis.FunctionUtils.fix2ndArgument(BivariateFunction,double)$UnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.function.Acosh#derivative()",
        "org.apache.commons.math3.analysis.polynomials.PolynomialFunction#value(double)",
        "org.apache.commons.math3.analysis.function.Acos#derivative()",
        "org.apache.commons.math3.analysis.function.Rint#value(double)",
        "org.apache.commons.math3.optimization.direct.PowellOptimizer.LineSearch#search(double[],double[])$UnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.function.Acosh#value(double)",
        "org.apache.commons.math3.analysis.FunctionUtils.compose(UnivariateDifferentiableFunction[]...)$UnivariateDifferentiableFunction$1#value(double)",
        "org.apache.commons.math3.analysis.function.Asin#derivative()",
        "org.apache.commons.math3.analysis.function.Power#value(double)"
    ],
    "org.apache.commons.math3.complex.Complex#sin()": [
        "org.apache.commons.math3.util.FastMath.cosh(double)",
        "org.apache.commons.math3.util.FastMath.sin(double)",
        "org.apache.commons.math3.complex.Complex.<staticinit>()",
        "org.apache.commons.math3.util.FastMath.sinh(double)",
        "org.apache.commons.math3.complex.Complex#createComplex(double,double)",
        "org.apache.commons.math3.util.FastMath.cos(double)"
    ],
    "org.apache.commons.math3.linear.AbstractFieldMatrix#walkInColumnOrder(FieldMatrixChangingVisitor<T extends FieldElement>)": [
        "org.apache.commons.math3.linear.SparseFieldMatrix#getEntry(int,int)",
        "org.apache.commons.math3.linear.BlockFieldMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.DefaultFieldMatrixChangingVisitor#start(int,int,int,int,int,int)",
        "org.apache.commons.math3.linear.SparseFieldMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.SparseFieldMatrix#setEntry(int,int,T extends FieldElement)",
        "org.apache.commons.math3.linear.Array2DRowFieldMatrix#setEntry(int,int,T extends FieldElement)",
        "org.apache.commons.math3.linear.BlockFieldMatrix#setEntry(int,int,T extends FieldElement)",
        "org.apache.commons.math3.linear.DefaultFieldMatrixChangingVisitor#end()",
        "org.apache.commons.math3.linear.Array2DRowFieldMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.SparseFieldMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.BlockFieldMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.DefaultFieldMatrixChangingVisitor#visit(int,int,T extends FieldElement)",
        "org.apache.commons.math3.linear.Array2DRowFieldMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.AbstractFieldMatrix#getSubMatrix(int[],int[])$DefaultFieldMatrixChangingVisitor$1#visit(int,int,T extends FieldElement)",
        "org.apache.commons.math3.linear.Array2DRowFieldMatrix#getEntry(int,int)",
        "org.apache.commons.math3.linear.BlockFieldMatrix#getEntry(int,int)"
    ],
    "org.apache.commons.math3.stat.inference.TestUtils.t(double[],double[])": [
        "org.apache.commons.math3.stat.inference.TestUtils.<staticinit>()",
        "org.apache.commons.math3.stat.inference.TTest#t(double[],double[])"
    ],
    "org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet.RotationTransform#apply(Point<Euclidean3D>)": [
        "org.apache.commons.math3.geometry.euclidean.threed.Vector3D#Vector3D(double,Vector3D,double,Vector3D)",
        "org.apache.commons.math3.geometry.euclidean.threed.Rotation#applyTo(Vector3D)",
        "org.apache.commons.math3.geometry.euclidean.threed.Vector3D#subtract(Vector<Euclidean3D>)"
    ],
    "org.apache.commons.math3.linear.OpenMapRealVector#OpenMapRealVector(int)": [
        "org.apache.commons.math3.linear.OpenMapRealVector#OpenMapRealVector(int,double)",
        "org.apache.commons.math3.linear.OpenMapRealVector.<staticinit>()"
    ],
    "org.apache.commons.math3.analysis.integration.gauss.GaussIntegratorFactory#legendre(int,double,double)": [
        "org.apache.commons.math3.analysis.integration.gauss.GaussIntegrator#GaussIntegrator(Pair<double[], double[]>)",
        "org.apache.commons.math3.analysis.integration.gauss.GaussIntegratorFactory.getRule(BaseRuleFactory<? extends Number>,int)",
        "org.apache.commons.math3.analysis.integration.gauss.GaussIntegratorFactory.transform(Pair<double[], double[]>,double,double)"
    ],
    "org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D#Euclidean2D()": ["org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D.<init>()"],
    "org.apache.commons.math3.analysis.integration.BaseAbstractUnivariateIntegrator#incrementCount()": ["org.apache.commons.math3.util.IntegerSequence.Incrementor#increment()"],
    "org.apache.commons.math3.geometry.spherical.twod.Circle#Circle(Vector3D,double)": [
        "org.apache.commons.math3.geometry.spherical.twod.Circle#reset(Vector3D)",
        "org.apache.commons.math3.geometry.spherical.twod.Circle.<init>()"
    ],
    "org.apache.commons.math3.geometry.euclidean.threed.Vector3DFormat#parse(String,ParsePosition)": [
        "org.apache.commons.math3.geometry.VectorFormat#parseCoordinates(int,String,ParsePosition)",
        "org.apache.commons.math3.geometry.euclidean.threed.Vector3D#Vector3D(double,double,double)"
    ],
    "org.apache.commons.math3.linear.ArrayFieldVector#ArrayFieldVector(ArrayFieldVector<T extends FieldElement>,boolean)": [
        "org.apache.commons.math3.linear.ArrayFieldVector#getField()",
        "org.apache.commons.math3.linear.ArrayFieldVector.<init>()",
        "org.apache.commons.math3.util.MathUtils.checkNotNull(Object)"
    ],
    "org.apache.commons.math3.ml.neuralnet.twod.util.UnifiedDistanceMatrix#individualDistances(NeuronSquareMesh2D)": [
        "org.apache.commons.math3.ml.distance.EuclideanDistance#compute(double[],double[])",
        "org.apache.commons.math3.ml.neuralnet.twod.NeuronSquareMesh2D.HorizontalDirection.<staticinit>()",
        "org.apache.commons.math3.ml.neuralnet.twod.NeuronSquareMesh2D#getNumberOfRows()",
        "org.apache.commons.math3.ml.neuralnet.twod.NeuronSquareMesh2D#getNeuron(int,int)",
        "org.apache.commons.math3.ml.distance.CanberraDistance#compute(double[],double[])",
        "org.apache.commons.math3.ml.neuralnet.twod.NeuronSquareMesh2D.VerticalDirection.<staticinit>()",
        "org.apache.commons.math3.ml.distance.ChebyshevDistance#compute(double[],double[])",
        "org.apache.commons.math3.ml.distance.ManhattanDistance#compute(double[],double[])",
        "org.apache.commons.math3.ml.distance.EarthMoversDistance#compute(double[],double[])",
        "org.apache.commons.math3.ml.neuralnet.Neuron#getFeatures()",
        "org.apache.commons.math3.ml.neuralnet.twod.NeuronSquareMesh2D#getNeuron(int,int,HorizontalDirection,VerticalDirection)",
        "org.apache.commons.math3.ml.neuralnet.twod.NeuronSquareMesh2D#getNumberOfColumns()"
    ],
    "org.apache.commons.math3.distribution.ExponentialDistribution#density(double)": [
        "org.apache.commons.math3.util.FastMath.exp(double)",
        "org.apache.commons.math3.distribution.ExponentialDistribution#logDensity(double)"
    ],
    "org.apache.commons.math3.dfp.DfpDec#newInstance(Dfp)": [
        "org.apache.commons.math3.dfp.DfpDec#newInstance(Dfp)",
        "org.apache.commons.math3.dfp.Dfp.<staticinit>()",
        "org.apache.commons.math3.dfp.Dfp#dotrap(int,String,Dfp,Dfp)",
        "org.apache.commons.math3.dfp.DfpField.<staticinit>()",
        "org.apache.commons.math3.dfp.DfpField#getRadixDigits()",
        "org.apache.commons.math3.dfp.DfpField#setIEEEFlagsBits(int)",
        "org.apache.commons.math3.dfp.DfpDec#DfpDec(Dfp)",
        "org.apache.commons.math3.dfp.Dfp#getField()",
        "org.apache.commons.math3.dfp.Dfp#getZero()"
    ],
    "org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile.newMarkers(List<Double>,double)": ["org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile.Markers#Markers(List<Double>,double)"],
    "org.apache.commons.math3.analysis.differentiation.DerivativeStructure.hypot(DerivativeStructure,DerivativeStructure)": ["org.apache.commons.math3.analysis.differentiation.DerivativeStructure#hypot(DerivativeStructure)"],
    "org.apache.commons.math3.linear.RealVector.unmodifiableRealVector(RealVector)$RealVector$1#getL1Norm()": [
        "org.apache.commons.math3.linear.RealVector.unmodifiableRealVector(RealVector)$RealVector$1#getL1Norm()",
        "org.apache.commons.math3.linear.ArrayRealVector#getL1Norm()",
        "org.apache.commons.math3.linear.RealVector#getL1Norm()"
    ],
    "org.apache.commons.math3.linear.RealVector.unmodifiableRealVector(RealVector)$RealVector$1#getDimension()": [
        "org.apache.commons.math3.linear.ArrayRealVector#getDimension()",
        "org.apache.commons.math3.linear.OpenMapRealVector#getDimension()",
        "org.apache.commons.math3.linear.RealVector.unmodifiableRealVector(RealVector)$RealVector$1#getDimension()"
    ],
    "org.apache.commons.math3.ode.nonstiff.RungeKuttaFieldStepInterpolator#create(boolean,FieldODEStateAndDerivative<T extends RealFieldElement>,FieldODEStateAndDerivative<T extends RealFieldElement>,FieldODEStateAndDerivative<T extends RealFieldElement>,FieldODEStateAndDerivative<T extends RealFieldElement>,FieldEquationsMapper<T extends RealFieldElement>)": [
        "org.apache.commons.math3.ode.nonstiff.ThreeEighthesFieldStepInterpolator#create(Field<T extends RealFieldElement>,boolean,T extends RealFieldElement[][],FieldODEStateAndDerivative<T extends RealFieldElement>,FieldODEStateAndDerivative<T extends RealFieldElement>,FieldODEStateAndDerivative<T extends RealFieldElement>,FieldODEStateAndDerivative<T extends RealFieldElement>,FieldEquationsMapper<T extends RealFieldElement>)",
        "org.apache.commons.math3.ode.nonstiff.LutherFieldStepInterpolator#create(Field<T extends RealFieldElement>,boolean,T extends RealFieldElement[][],FieldODEStateAndDerivative<T extends RealFieldElement>,FieldODEStateAndDerivative<T extends RealFieldElement>,FieldODEStateAndDerivative<T extends RealFieldElement>,FieldODEStateAndDerivative<T extends RealFieldElement>,FieldEquationsMapper<T extends RealFieldElement>)",
        "org.apache.commons.math3.ode.nonstiff.DormandPrince853FieldStepInterpolator#create(Field<T extends RealFieldElement>,boolean,T extends RealFieldElement[][],FieldODEStateAndDerivative<T extends RealFieldElement>,FieldODEStateAndDerivative<T extends RealFieldElement>,FieldODEStateAndDerivative<T extends RealFieldElement>,FieldODEStateAndDerivative<T extends RealFieldElement>,FieldEquationsMapper<T extends RealFieldElement>)",
        "org.apache.commons.math3.ode.nonstiff.HighamHall54FieldStepInterpolator#create(Field<T extends RealFieldElement>,boolean,T extends RealFieldElement[][],FieldODEStateAndDerivative<T extends RealFieldElement>,FieldODEStateAndDerivative<T extends RealFieldElement>,FieldODEStateAndDerivative<T extends RealFieldElement>,FieldODEStateAndDerivative<T extends RealFieldElement>,FieldEquationsMapper<T extends RealFieldElement>)",
        "org.apache.commons.math3.ode.nonstiff.DormandPrince54FieldStepInterpolator#create(Field<T extends RealFieldElement>,boolean,T extends RealFieldElement[][],FieldODEStateAndDerivative<T extends RealFieldElement>,FieldODEStateAndDerivative<T extends RealFieldElement>,FieldODEStateAndDerivative<T extends RealFieldElement>,FieldODEStateAndDerivative<T extends RealFieldElement>,FieldEquationsMapper<T extends RealFieldElement>)",
        "org.apache.commons.math3.ode.nonstiff.ClassicalRungeKuttaFieldStepInterpolator#create(Field<T extends RealFieldElement>,boolean,T extends RealFieldElement[][],FieldODEStateAndDerivative<T extends RealFieldElement>,FieldODEStateAndDerivative<T extends RealFieldElement>,FieldODEStateAndDerivative<T extends RealFieldElement>,FieldODEStateAndDerivative<T extends RealFieldElement>,FieldEquationsMapper<T extends RealFieldElement>)",
        "org.apache.commons.math3.ode.nonstiff.GillFieldStepInterpolator#create(Field<T extends RealFieldElement>,boolean,T extends RealFieldElement[][],FieldODEStateAndDerivative<T extends RealFieldElement>,FieldODEStateAndDerivative<T extends RealFieldElement>,FieldODEStateAndDerivative<T extends RealFieldElement>,FieldODEStateAndDerivative<T extends RealFieldElement>,FieldEquationsMapper<T extends RealFieldElement>)",
        "org.apache.commons.math3.ode.nonstiff.MidpointFieldStepInterpolator#create(Field<T extends RealFieldElement>,boolean,T extends RealFieldElement[][],FieldODEStateAndDerivative<T extends RealFieldElement>,FieldODEStateAndDerivative<T extends RealFieldElement>,FieldODEStateAndDerivative<T extends RealFieldElement>,FieldODEStateAndDerivative<T extends RealFieldElement>,FieldEquationsMapper<T extends RealFieldElement>)",
        "org.apache.commons.math3.ode.nonstiff.EulerFieldStepInterpolator#create(Field<T extends RealFieldElement>,boolean,T extends RealFieldElement[][],FieldODEStateAndDerivative<T extends RealFieldElement>,FieldODEStateAndDerivative<T extends RealFieldElement>,FieldODEStateAndDerivative<T extends RealFieldElement>,FieldODEStateAndDerivative<T extends RealFieldElement>,FieldEquationsMapper<T extends RealFieldElement>)"
    ],
    "org.apache.commons.math3.linear.LUDecomposition.Solver#getInverse()": [
        "org.apache.commons.math3.linear.LUDecomposition.Solver#solve(RealMatrix)",
        "org.apache.commons.math3.linear.MatrixUtils.createRealIdentityMatrix(int)"
    ],
    "org.apache.commons.math3.analysis.function.Cosh#value(double)": ["org.apache.commons.math3.util.FastMath.cosh(double)"],
    "org.apache.commons.math3.analysis.differentiation.DerivativeStructure#DerivativeStructure(DerivativeStructure)": ["org.apache.commons.math3.analysis.differentiation.DerivativeStructure.<init>()"],
    "org.apache.commons.math3.exception.MathUnsupportedOperationException#MathUnsupportedOperationException(Localizable,Object[]...)": [
        "org.apache.commons.math3.exception.util.ExceptionContext#addMessage(Localizable,Object[]...)",
        "org.apache.commons.math3.exception.MathUnsupportedOperationException.<init>()",
        "org.apache.commons.math3.exception.util.ExceptionContext#ExceptionContext(Throwable)"
    ],
    "org.apache.commons.math3.geometry.spherical.oned.LimitAngle#getReverse()": ["org.apache.commons.math3.geometry.spherical.oned.LimitAngle#LimitAngle(S1Point,boolean,double)"],
    "org.apache.commons.math3.linear.AbstractFieldMatrix#walkInOptimizedOrder(FieldMatrixChangingVisitor<T extends FieldElement>,int,int,int,int)": [
        "org.apache.commons.math3.linear.Array2DRowFieldMatrix#walkInRowOrder(FieldMatrixChangingVisitor<T extends FieldElement>,int,int,int,int)",
        "org.apache.commons.math3.linear.AbstractFieldMatrix#walkInRowOrder(FieldMatrixChangingVisitor<T extends FieldElement>,int,int,int,int)",
        "org.apache.commons.math3.linear.BlockFieldMatrix#walkInRowOrder(FieldMatrixChangingVisitor<T extends FieldElement>,int,int,int,int)"
    ],
    "org.apache.commons.math3.analysis.differentiation.DSCompiler#asinh(double[],int,double[],int)": [
        "org.apache.commons.math3.util.FastMath.sqrt(double)",
        "org.apache.commons.math3.util.FastMath.asinh(double)",
        "org.apache.commons.math3.analysis.differentiation.DSCompiler#compose(double[],int,double[],double[],int)"
    ],
    "org.apache.commons.math3.analysis.integration.BaseAbstractUnivariateIntegrator#setup(int,UnivariateFunction,double,double)": [
        "org.apache.commons.math3.util.IntegerSequence.Incrementor#withStart(int)",
        "org.apache.commons.math3.analysis.solvers.UnivariateSolverUtils.verifyInterval(double,double)",
        "org.apache.commons.math3.util.MathUtils.checkNotNull(Object)",
        "org.apache.commons.math3.util.IntegerSequence.Incrementor#withMaximalCount(int)"
    ],
    "org.apache.commons.math3.linear.MatrixUtils.checkMatrixIndex(AnyMatrix,int,int)": [
        "org.apache.commons.math3.linear.MatrixUtils.checkRowIndex(AnyMatrix,int)",
        "org.apache.commons.math3.linear.MatrixUtils.checkColumnIndex(AnyMatrix,int)"
    ],
    "org.apache.commons.math3.complex.Complex#acos()": [
        "org.apache.commons.math3.complex.Complex#log()",
        "org.apache.commons.math3.complex.Complex#sqrt1z()",
        "org.apache.commons.math3.complex.Complex#add(Complex)",
        "org.apache.commons.math3.complex.Complex.<staticinit>()",
        "org.apache.commons.math3.complex.Complex#multiply(Complex)",
        "org.apache.commons.math3.complex.Complex#negate()"
    ],
    "org.apache.commons.math3.optimization.linear.SimplexTableau#normalizeConstraints(Collection<LinearConstraint>)": ["org.apache.commons.math3.optimization.linear.SimplexTableau#normalize(LinearConstraint)"],
    "org.apache.commons.math3.ode.nonstiff.DormandPrince853FieldStepInterpolator#DormandPrince853FieldStepInterpolator(Field<T extends RealFieldElement>,boolean,T extends RealFieldElement[][],FieldODEStateAndDerivative<T extends RealFieldElement>,FieldODEStateAndDerivative<T extends RealFieldElement>,FieldODEStateAndDerivative<T extends RealFieldElement>,FieldODEStateAndDerivative<T extends RealFieldElement>,FieldEquationsMapper<T extends RealFieldElement>)": [
        "org.apache.commons.math3.util.MathArrays.buildArray(Field<T>,int,int)",
        "org.apache.commons.math3.ode.nonstiff.RungeKuttaFieldStepInterpolator#RungeKuttaFieldStepInterpolator(Field<T extends RealFieldElement>,boolean,T extends RealFieldElement[][],FieldODEStateAndDerivative<T extends RealFieldElement>,FieldODEStateAndDerivative<T extends RealFieldElement>,FieldODEStateAndDerivative<T extends RealFieldElement>,FieldODEStateAndDerivative<T extends RealFieldElement>,FieldEquationsMapper<T extends RealFieldElement>)",
        "org.apache.commons.math3.util.BigRealField#getZero()",
        "org.apache.commons.math3.analysis.differentiation.SparseGradient#getField()$Field$1#getZero()",
        "org.apache.commons.math3.analysis.differentiation.DerivativeStructure#getField()$Field$1#getZero()",
        "org.apache.commons.math3.fraction.FractionField#getZero()",
        "org.apache.commons.math3.ode.nonstiff.DormandPrince853FieldStepInterpolator.<init>()",
        "org.apache.commons.math3.util.Decimal64Field#getZero()",
        "org.apache.commons.math3.dfp.DfpField#getZero()",
        "org.apache.commons.math3.complex.ComplexField#getZero()",
        "org.apache.commons.math3.fraction.BigFractionField#getZero()",
        "org.apache.commons.math3.ode.nonstiff.DormandPrince853FieldStepInterpolator#fraction(Field<T extends RealFieldElement>,double,double)"
    ],
    "org.apache.commons.math3.geometry.spherical.twod.SubCircle#split(Hyperplane<Sphere2D>)": [
        "org.apache.commons.math3.geometry.spherical.twod.Circle#getInsideArc(Circle)",
        "org.apache.commons.math3.geometry.spherical.twod.Circle#getPole()",
        "org.apache.commons.math3.geometry.partitioning.SubHyperplane.SplitSubHyperplane#SplitSubHyperplane(SubHyperplane<U extends Space>,SubHyperplane<U extends Space>)",
        "org.apache.commons.math3.geometry.spherical.twod.Circle#copySelf()",
        "org.apache.commons.math3.geometry.spherical.oned.ArcsSet.Split#getPlus()",
        "org.apache.commons.math3.util.FastMath.<staticinit>()",
        "org.apache.commons.math3.geometry.spherical.oned.ArcsSet#split(Arc)",
        "org.apache.commons.math3.geometry.spherical.twod.Circle#getTolerance()",
        "org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(Vector3D,Vector3D)",
        "org.apache.commons.math3.geometry.spherical.twod.SubCircle#SubCircle(Hyperplane<Sphere2D>,Region<Sphere1D>)",
        "org.apache.commons.math3.geometry.partitioning.AbstractSubHyperplane#getHyperplane()",
        "org.apache.commons.math3.geometry.partitioning.AbstractSubHyperplane#getRemainingRegion()",
        "org.apache.commons.math3.geometry.spherical.oned.ArcsSet.Split#getMinus()"
    ],
    "org.apache.commons.math3.optim.nonlinear.vector.MultiStartMultivariateVectorOptimizer#getPairComparator()$Comparator$1.<init>()": [
        "org.apache.commons.math3.linear.ArrayRealVector#ArrayRealVector(double[],boolean)",
        "org.apache.commons.math3.optim.nonlinear.vector.MultivariateVectorOptimizer#getTarget()",
        "org.apache.commons.math3.optim.nonlinear.vector.MultivariateVectorOptimizer#getWeight()"
    ],
    "org.apache.commons.math3.stat.ranking.NaturalRanking#fill(double[],List<Integer>,double)": [
        "org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet.SubIntervalsIterator#hasNext()",
        "org.apache.commons.math3.util.MultidimensionalCounter.Iterator#next()",
        "org.apache.commons.math3.linear.RealVector#iterator()$Iterator$1#hasNext()",
        "org.apache.commons.math3.userguide.sofm.ChineseRingsClassifier#createRandomIterator(long)$Iterator$1#hasNext()",
        "org.apache.commons.math3.util.IntegerSequence.Incrementor#hasNext()",
        "org.apache.commons.math3.linear.RealVector.unmodifiableRealVector(RealVector)$Iterator$1$Iterator$1#sparseIterator()$Iterator$1#hasNext()",
        "org.apache.commons.math3.geometry.spherical.oned.ArcsSet.SubArcsIterator#hasNext()",
        "org.apache.commons.math3.util.Combinations.LexicographicIterator#hasNext()",
        "org.apache.commons.math3.util.IntegerSequence.Incrementor#next()",
        "org.apache.commons.math3.linear.RealVector.SparseEntryIterator#hasNext()",
        "org.apache.commons.math3.userguide.sofm.ChineseRingsClassifier#createIterable()$Iterator$1$Iterator$1#iterator()$Iterator$1#hasNext()",
        "org.apache.commons.math3.linear.RealVector.unmodifiableRealVector(RealVector)$Iterator$1$Iterator$1#iterator()$Iterator$1#hasNext()",
        "org.apache.commons.math3.util.Combinations.SingletonIterator#hasNext()",
        "org.apache.commons.math3.util.MultidimensionalCounter.Iterator#hasNext()"
    ],
    "org.apache.commons.math3.optimization.general.AbstractLeastSquaresOptimizer#setUp()": [
        "org.apache.commons.math3.optimization.direct.BaseAbstractMultivariateVectorOptimizer#getObjectiveFunction()",
        "org.apache.commons.math3.analysis.FunctionUtils.toMultivariateDifferentiableVectorFunction(DifferentiableMultivariateVectorFunction)",
        "org.apache.commons.math3.optimization.general.AbstractLeastSquaresOptimizer#squareRoot(RealMatrix)",
        "org.apache.commons.math3.optimization.direct.BaseAbstractMultivariateVectorOptimizer#getStartPoint()",
        "org.apache.commons.math3.optimization.direct.BaseAbstractMultivariateVectorOptimizer#setUp()",
        "org.apache.commons.math3.optimization.direct.BaseAbstractMultivariateVectorOptimizer#getTarget()",
        "org.apache.commons.math3.optimization.direct.BaseAbstractMultivariateVectorOptimizer#getWeight()"
    ],
    "org.apache.commons.math3.distribution.ZipfDistribution.ZipfRejectionInversionSampler#hIntegral(double)": [
        "org.apache.commons.math3.util.FastMath.log(double)",
        "org.apache.commons.math3.distribution.ZipfDistribution.ZipfRejectionInversionSampler.helper2(double)"
    ],
    "org.apache.commons.math3.linear.AbstractRealMatrix#setRowVector(int,RealVector)": [
        "org.apache.commons.math3.linear.DiagonalMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.Array2DRowRealMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.Array2DRowRealMatrix#setEntry(int,int,double)",
        "org.apache.commons.math3.linear.ArrayRealVector#getDimension()",
        "org.apache.commons.math3.linear.OpenMapRealMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.BlockRealMatrix#setEntry(int,int,double)",
        "org.apache.commons.math3.linear.OpenMapRealMatrix#setEntry(int,int,double)",
        "org.apache.commons.math3.linear.ArrayRealVector#getEntry(int)",
        "org.apache.commons.math3.linear.OpenMapRealVector#getDimension()",
        "org.apache.commons.math3.linear.BlockRealMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.MatrixDimensionMismatchException#MatrixDimensionMismatchException(int,int,int,int)",
        "org.apache.commons.math3.linear.RealVector.unmodifiableRealVector(RealVector)$RealVector$1#getDimension()",
        "org.apache.commons.math3.linear.OpenMapRealVector#getEntry(int)",
        "org.apache.commons.math3.linear.MatrixUtils.checkRowIndex(AnyMatrix,int)",
        "org.apache.commons.math3.linear.DiagonalMatrix#setEntry(int,int,double)",
        "org.apache.commons.math3.linear.RealVector.unmodifiableRealVector(RealVector)$RealVector$1#getEntry(int)"
    ],
    "org.apache.commons.math3.genetics.GeneticAlgorithm.<staticinit>()": ["org.apache.commons.math3.random.JDKRandomGenerator#JDKRandomGenerator()"],
    "org.apache.commons.math3.geometry.spherical.twod.EdgesBuilder#getEdges()": [
        "org.apache.commons.math3.geometry.spherical.twod.EdgesBuilder#getFollowingEdge(Edge)",
        "org.apache.commons.math3.geometry.spherical.twod.Edge#setNextEdge(Edge)"
    ],
    "org.apache.commons.math3.random.AbstractRandomGenerator#nextBytes(byte[])": ["org.apache.commons.math3.random.AbstractRandomGenerator#nextInt()"],
    "org.apache.commons.math3.geometry.euclidean.threed.Vector3DFormat#format(Vector<Euclidean3D>,StringBuffer,FieldPosition)": [
        "org.apache.commons.math3.geometry.VectorFormat#format(StringBuffer,FieldPosition,double[]...)",
        "org.apache.commons.math3.geometry.euclidean.threed.Vector3D#getX()",
        "org.apache.commons.math3.geometry.euclidean.threed.Vector3D#getZ()",
        "org.apache.commons.math3.geometry.euclidean.threed.Vector3D#getY()"
    ],
    "org.apache.commons.math3.geometry.euclidean.threed.Vector3D#distance(Point<Euclidean3D>)": ["org.apache.commons.math3.util.FastMath.sqrt(double)"],
    "org.apache.commons.math3.analysis.function.Pow#value(double,double)": ["org.apache.commons.math3.util.FastMath.pow(double,double)"],
    "org.apache.commons.math3.linear.OpenMapRealVector#OpenMapRealVector(RealVector)": [
        "org.apache.commons.math3.linear.OpenMapRealVector#getDimension()",
        "org.apache.commons.math3.linear.OpenMapRealVector.<init>()",
        "org.apache.commons.math3.linear.SparseRealVector.<init>()",
        "org.apache.commons.math3.linear.OpenMapRealVector.<staticinit>()",
        "org.apache.commons.math3.linear.ArrayRealVector#getDimension()",
        "org.apache.commons.math3.linear.OpenMapRealVector#isDefaultValue(double)",
        "org.apache.commons.math3.util.OpenIntToDoubleHashMap#put(int,double)",
        "org.apache.commons.math3.util.OpenIntToDoubleHashMap#OpenIntToDoubleHashMap(double)",
        "org.apache.commons.math3.linear.RealVector.unmodifiableRealVector(RealVector)$RealVector$1#getDimension()",
        "org.apache.commons.math3.linear.ArrayRealVector#getEntry(int)",
        "org.apache.commons.math3.linear.OpenMapRealVector#getEntry(int)",
        "org.apache.commons.math3.linear.RealVector.unmodifiableRealVector(RealVector)$RealVector$1#getEntry(int)"
    ],
    "org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D#getSubSpace()": ["org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D.NoSubSpaceException#NoSubSpaceException()"],
    "org.apache.commons.math3.filter.DefaultMeasurementModel#DefaultMeasurementModel(double[][],double[][])": [
        "org.apache.commons.math3.linear.Array2DRowRealMatrix#Array2DRowRealMatrix(double[][])",
        "org.apache.commons.math3.filter.DefaultMeasurementModel#DefaultMeasurementModel(RealMatrix,RealMatrix)"
    ],
    "org.apache.commons.math3.distribution.ChiSquaredDistribution#ChiSquaredDistribution(double)": [
        "org.apache.commons.math3.distribution.ChiSquaredDistribution.<staticinit>()",
        "org.apache.commons.math3.distribution.ChiSquaredDistribution#ChiSquaredDistribution(double,double)"
    ],
    "org.apache.commons.math3.stat.descriptive.AbstractStorelessUnivariateStatistic#evaluate(double[],int,int)": [
        "org.apache.commons.math3.stat.descriptive.moment.Variance#clear()",
        "org.apache.commons.math3.stat.descriptive.moment.FirstMoment#getResult()",
        "org.apache.commons.math3.stat.descriptive.moment.StandardDeviation#clear()",
        "org.apache.commons.math3.stat.descriptive.rank.Min#getResult()",
        "org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile#getResult()",
        "org.apache.commons.math3.stat.descriptive.moment.SecondMoment#clear()",
        "org.apache.commons.math3.stat.descriptive.moment.FourthMoment#clear()",
        "org.apache.commons.math3.stat.descriptive.moment.GeometricMean#clear()",
        "org.apache.commons.math3.stat.descriptive.moment.FourthMoment#getResult()",
        "org.apache.commons.math3.stat.descriptive.summary.Product#getResult()",
        "org.apache.commons.math3.stat.descriptive.summary.Sum#clear()",
        "org.apache.commons.math3.stat.descriptive.summary.SumOfSquares#getResult()",
        "org.apache.commons.math3.stat.descriptive.moment.Skewness#getResult()",
        "org.apache.commons.math3.stat.descriptive.summary.SumOfSquares#clear()",
        "org.apache.commons.math3.stat.descriptive.moment.Kurtosis#getResult()",
        "org.apache.commons.math3.stat.descriptive.moment.Skewness#clear()",
        "org.apache.commons.math3.stat.descriptive.moment.ThirdMoment#getResult()",
        "org.apache.commons.math3.stat.descriptive.moment.Mean#getResult()",
        "org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile#clear()",
        "org.apache.commons.math3.stat.descriptive.AbstractUnivariateStatistic#test(double[],int,int)",
        "org.apache.commons.math3.stat.descriptive.AbstractStorelessUnivariateStatistic#incrementAll(double[],int,int)",
        "org.apache.commons.math3.stat.descriptive.moment.Kurtosis#clear()",
        "org.apache.commons.math3.stat.descriptive.rank.Max#clear()",
        "org.apache.commons.math3.stat.descriptive.moment.GeometricMean#getResult()",
        "org.apache.commons.math3.stat.descriptive.moment.Mean#clear()",
        "org.apache.commons.math3.stat.descriptive.moment.Variance#getResult()",
        "org.apache.commons.math3.stat.descriptive.moment.ThirdMoment#clear()",
        "org.apache.commons.math3.stat.descriptive.summary.Sum#getResult()",
        "org.apache.commons.math3.stat.descriptive.moment.StandardDeviation#getResult()",
        "org.apache.commons.math3.stat.descriptive.summary.SumOfLogs#getResult()",
        "org.apache.commons.math3.stat.descriptive.summary.SumOfLogs#clear()",
        "org.apache.commons.math3.stat.descriptive.rank.Min#clear()",
        "org.apache.commons.math3.stat.descriptive.summary.Product#clear()",
        "org.apache.commons.math3.stat.descriptive.moment.FirstMoment#clear()",
        "org.apache.commons.math3.stat.descriptive.rank.Max#getResult()",
        "org.apache.commons.math3.stat.descriptive.moment.SecondMoment#getResult()"
    ],
    "org.apache.commons.math3.exception.util.ExceptionContext#serializeMessages(ObjectOutputStream)": ["org.apache.commons.math3.exception.util.ExceptionContext#nonSerializableReplacement(Object)"],
    "org.apache.commons.math3.stat.inference.OneWayAnova#anovaPValue(Collection<SummaryStatistics>,boolean)": [
        "org.apache.commons.math3.stat.inference.OneWayAnova#anovaStats(Collection<SummaryStatistics>,boolean)",
        "org.apache.commons.math3.distribution.FDistribution#cumulativeProbability(double)",
        "org.apache.commons.math3.distribution.FDistribution#FDistribution(double,double,double)"
    ],
    "org.apache.commons.math3.geometry.euclidean.oned.Vector1D#distance(Point<Euclidean1D>)": ["org.apache.commons.math3.util.FastMath.abs(double)"],
    "org.apache.commons.math3.optim.univariate.UnivariateOptimizer#computeObjectiveValue(double)": [
        "org.apache.commons.math3.analysis.FunctionUtils.multiply(DifferentiableUnivariateFunction[]...)$UnivariateFunction$1$UnivariateFunction$1#derivative()$UnivariateFunction$1#value(double)",
        "org.apache.commons.math3.optim.BaseOptimizer#incrementEvaluationCount()",
        "org.apache.commons.math3.analysis.polynomials.PolynomialSplineFunction#value(double)",
        "org.apache.commons.math3.analysis.function.Gaussian#value(double)",
        "org.apache.commons.math3.analysis.function.Tanh#value(double)",
        "org.apache.commons.math3.analysis.function.Inverse#value(double)",
        "org.apache.commons.math3.analysis.function.HarmonicOscillator#value(double)",
        "org.apache.commons.math3.analysis.FunctionUtils.fix1stArgument(BivariateFunction,double)$UnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.function.Asin#value(double)",
        "org.apache.commons.math3.analysis.function.Asinh#value(double)",
        "org.apache.commons.math3.analysis.FunctionUtils.multiply(UnivariateFunction[]...)$UnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.function.Atan#value(double)",
        "org.apache.commons.math3.analysis.FunctionUtils.toDifferentiableUnivariateFunction(UnivariateDifferentiableFunction)$DifferentiableUnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.function.Cbrt#value(double)",
        "org.apache.commons.math3.analysis.polynomials.PolynomialFunctionLagrangeForm#value(double)",
        "org.apache.commons.math3.analysis.function.Exp#value(double)",
        "org.apache.commons.math3.special.BesselJ#value(double)",
        "org.apache.commons.math3.analysis.polynomials.PolynomialFunctionNewtonForm#value(double)",
        "org.apache.commons.math3.analysis.FunctionUtils.add(UnivariateFunction[]...)$UnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.function.Sin#value(double)",
        "org.apache.commons.math3.analysis.function.Cos#value(double)",
        "org.apache.commons.math3.analysis.interpolation.UnivariatePeriodicInterpolator#interpolate(double[],double[])$UnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.function.Log10#value(double)",
        "org.apache.commons.math3.analysis.function.Sqrt#value(double)",
        "org.apache.commons.math3.analysis.function.Log#value(double)",
        "org.apache.commons.math3.analysis.function.Sinc#value(double)",
        "org.apache.commons.math3.ode.events.EventState#evaluateStep(StepInterpolator)$UnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.function.Minus#value(double)",
        "org.apache.commons.math3.analysis.integration.IterativeLegendreGaussIntegrator#stage(int)$UnivariateFunction$1#value(double)",
        "org.apache.commons.math3.optimization.general.NonLinearConjugateGradientOptimizer.LineSearchFunction#value(double)",
        "org.apache.commons.math3.analysis.function.Floor#value(double)",
        "org.apache.commons.math3.analysis.FunctionUtils.multiply(DifferentiableUnivariateFunction[]...)$DifferentiableUnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.FunctionUtils.combine(BivariateFunction,UnivariateFunction,UnivariateFunction)$UnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.FunctionUtils.add(DifferentiableUnivariateFunction[]...)$UnivariateFunction$1$UnivariateFunction$1#derivative()$UnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.function.Sinh#value(double)",
        "org.apache.commons.math3.analysis.FunctionUtils.multiply(UnivariateDifferentiableFunction[]...)$UnivariateDifferentiableFunction$1#value(double)",
        "org.apache.commons.math3.analysis.function.Tan#value(double)",
        "org.apache.commons.math3.distribution.AbstractRealDistribution#inverseCumulativeProbability(double)$UnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.FunctionUtils.add(DifferentiableUnivariateFunction[]...)$DifferentiableUnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.function.Ceil#value(double)",
        "org.apache.commons.math3.analysis.function.Logistic#value(double)",
        "org.apache.commons.math3.analysis.function.Signum#value(double)",
        "org.apache.commons.math3.analysis.function.Constant#value(double)",
        "org.apache.commons.math3.analysis.function.Atanh#value(double)",
        "org.apache.commons.math3.analysis.FunctionUtils.compose(DifferentiableUnivariateFunction[]...)$UnivariateFunction$1$UnivariateFunction$1#derivative()$UnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.FunctionUtils.add(UnivariateDifferentiableFunction[]...)$UnivariateDifferentiableFunction$1#value(double)",
        "org.apache.commons.math3.analysis.function.Abs#value(double)",
        "org.apache.commons.math3.analysis.differentiation.FiniteDifferencesDifferentiator#differentiate(UnivariateFunction)$UnivariateDifferentiableFunction$1#value(double)",
        "org.apache.commons.math3.analysis.function.Identity#value(double)",
        "org.apache.commons.math3.analysis.function.Expm1#value(double)",
        "org.apache.commons.math3.analysis.function.Logit#value(double)",
        "org.apache.commons.math3.analysis.function.Log1p#value(double)",
        "org.apache.commons.math3.analysis.FunctionUtils.fix2ndArgument(BivariateFunction,double)$UnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.FunctionUtils.toUnivariateDifferential(DifferentiableUnivariateFunction)$UnivariateDifferentiableFunction$1#value(double)",
        "org.apache.commons.math3.analysis.FunctionUtils.toDifferentiableUnivariateFunction(UnivariateDifferentiableFunction)$UnivariateFunction$1$UnivariateFunction$1#derivative()$UnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.polynomials.PolynomialFunction#value(double)",
        "org.apache.commons.math3.analysis.function.Rint#value(double)",
        "org.apache.commons.math3.analysis.FunctionUtils.compose(UnivariateFunction[]...)$UnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.function.Cosh#value(double)",
        "org.apache.commons.math3.optimization.direct.PowellOptimizer.LineSearch#search(double[],double[])$UnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.FunctionUtils.compose(DifferentiableUnivariateFunction[]...)$DifferentiableUnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.function.Acosh#value(double)",
        "org.apache.commons.math3.analysis.function.StepFunction#value(double)",
        "org.apache.commons.math3.analysis.FunctionUtils.compose(UnivariateDifferentiableFunction[]...)$UnivariateDifferentiableFunction$1#value(double)",
        "org.apache.commons.math3.analysis.function.Acos#value(double)",
        "org.apache.commons.math3.analysis.function.Power#value(double)",
        "org.apache.commons.math3.optim.nonlinear.scalar.LineSearch#search(double[],double[])$UnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.function.Sigmoid#value(double)",
        "org.apache.commons.math3.analysis.function.Ulp#value(double)"
    ],
    "org.apache.commons.math3.stat.descriptive.rank.Median#withKthSelector(KthSelector)": [
        "org.apache.commons.math3.stat.descriptive.rank.Percentile#getEstimationType()",
        "org.apache.commons.math3.stat.descriptive.rank.Percentile#getNaNStrategy()",
        "org.apache.commons.math3.stat.descriptive.rank.Median#Median(EstimationType,NaNStrategy,KthSelector)"
    ],
    "org.apache.commons.math3.dfp.Dfp#sin()": ["org.apache.commons.math3.dfp.DfpMath.sin(Dfp)"],
    "org.apache.commons.math3.genetics.GeneticAlgorithm#nextGeneration(Population)": [
        "org.apache.commons.math3.genetics.GeneticAlgorithm#getSelectionPolicy()",
        "org.apache.commons.math3.genetics.ElitisticListPopulation#nextGeneration()",
        "org.apache.commons.math3.genetics.NPointCrossover#crossover(Chromosome,Chromosome)",
        "org.apache.commons.math3.userguide.genetics.RandomPolygonMutation#mutate(Chromosome)",
        "org.apache.commons.math3.genetics.GeneticAlgorithm#getCrossoverPolicy()",
        "org.apache.commons.math3.genetics.OnePointCrossover#crossover(Chromosome,Chromosome)",
        "org.apache.commons.math3.genetics.UniformCrossover#crossover(Chromosome,Chromosome)",
        "org.apache.commons.math3.genetics.TournamentSelection#tournament(ListPopulation)$ListPopulation$1#nextGeneration()",
        "org.apache.commons.math3.genetics.CycleCrossover#crossover(Chromosome,Chromosome)",
        "org.apache.commons.math3.genetics.ChromosomePair#getFirst()",
        "org.apache.commons.math3.genetics.ListPopulation#getPopulationSize()",
        "org.apache.commons.math3.genetics.GeneticAlgorithm#getMutationPolicy()",
        "org.apache.commons.math3.genetics.ListPopulation#addChromosome(Chromosome)",
        "org.apache.commons.math3.genetics.BinaryMutation#mutate(Chromosome)",
        "org.apache.commons.math3.genetics.GeneticAlgorithm#getMutationRate()",
        "org.apache.commons.math3.genetics.RandomKeyMutation#mutate(Chromosome)",
        "org.apache.commons.math3.genetics.OrderedCrossover#crossover(Chromosome,Chromosome)",
        "org.apache.commons.math3.random.BitsStreamGenerator#nextDouble()",
        "org.apache.commons.math3.random.SynchronizedRandomGenerator#nextDouble()",
        "org.apache.commons.math3.genetics.ChromosomePair#ChromosomePair(Chromosome,Chromosome)",
        "org.apache.commons.math3.random.RandomAdaptor#nextDouble()",
        "org.apache.commons.math3.genetics.GeneticAlgorithm.getRandomGenerator()",
        "org.apache.commons.math3.userguide.genetics.HelloWorldExample.RandomCharacterMutation#mutate(Chromosome)",
        "org.apache.commons.math3.genetics.GeneticAlgorithm#getCrossoverRate()",
        "org.apache.commons.math3.genetics.ChromosomePair#getSecond()",
        "org.apache.commons.math3.genetics.ListPopulation#getPopulationLimit()",
        "org.apache.commons.math3.random.RandomGeneratorFactory.createRandomGenerator(Random)$RandomGenerator$1#nextDouble()",
        "org.apache.commons.math3.genetics.TournamentSelection#select(Population)"
    ],
    "org.apache.commons.math3.dfp.DfpField.computeStringConstants(int)": [
        "org.apache.commons.math3.dfp.DfpField#DfpField(int,boolean)",
        "org.apache.commons.math3.dfp.Dfp#Dfp(DfpField,int)",
        "org.apache.commons.math3.dfp.Dfp#divide(Dfp)",
        "org.apache.commons.math3.dfp.DfpField.computeLn(Dfp,Dfp,Dfp)",
        "org.apache.commons.math3.dfp.DfpField.<staticinit>()",
        "org.apache.commons.math3.dfp.DfpField.computePi(Dfp,Dfp,Dfp)",
        "org.apache.commons.math3.dfp.Dfp#toString()",
        "org.apache.commons.math3.dfp.Dfp#sqrt()",
        "org.apache.commons.math3.dfp.DfpField.computeExp(Dfp,Dfp)"
    ],
    "org.apache.commons.math3.linear.BlockFieldMatrix#copy()": [
        "org.apache.commons.math3.linear.BlockFieldMatrix#BlockFieldMatrix(Field<T extends FieldElement>,int,int)",
        "org.apache.commons.math3.linear.AbstractFieldMatrix#getField()"
    ],
    "org.apache.commons.math3.distribution.ZipfDistribution.ZipfRejectionInversionSampler.helper1(double)": [
        "org.apache.commons.math3.util.FastMath.abs(double)",
        "org.apache.commons.math3.util.FastMath.log1p(double)"
    ],
    "org.apache.commons.math3.analysis.interpolation.BicubicSplineInterpolatingFunction#partialDerivativeXY(double,double)": ["org.apache.commons.math3.analysis.interpolation.BicubicSplineInterpolatingFunction#partialDerivative(int,double,double)"],
    "org.apache.commons.math3.ode.ContinuousOutputFieldModel#checkDimensionsEquality(int,int)": ["org.apache.commons.math3.exception.DimensionMismatchException#DimensionMismatchException(int,int)"],
    "org.apache.commons.math3.complex.Complex#add(Complex)": [
        "org.apache.commons.math3.util.MathUtils.checkNotNull(Object)",
        "org.apache.commons.math3.complex.Complex#getReal()",
        "org.apache.commons.math3.complex.Complex.<staticinit>()",
        "org.apache.commons.math3.complex.Complex#getImaginary()",
        "org.apache.commons.math3.complex.Complex#createComplex(double,double)"
    ],
    "org.apache.commons.math3.analysis.differentiation.DSCompiler.compileCompositionIndirection(int,int,DSCompiler,DSCompiler,int[][],int[][])": [
        "org.apache.commons.math3.analysis.differentiation.DSCompiler.convertIndex(int,int,int[][],int,int,int[][])",
        "org.apache.commons.math3.analysis.differentiation.DSCompiler.getPartialDerivativeIndex(int,int,int[][],int[]...)"
    ],
    "org.apache.commons.math3.stat.StatUtils.max(double[])": [
        "org.apache.commons.math3.stat.descriptive.moment.StandardDeviation#evaluate(double[])",
        "org.apache.commons.math3.stat.descriptive.moment.Variance#evaluate(double[])",
        "org.apache.commons.math3.stat.StatUtils.<staticinit>()",
        "org.apache.commons.math3.stat.descriptive.AbstractUnivariateStatistic#evaluate(double[])",
        "org.apache.commons.math3.stat.descriptive.AbstractStorelessUnivariateStatistic#evaluate(double[])"
    ],
    "org.apache.commons.math3.util.CombinatoricsUtils.factorial(int)": [
        "org.apache.commons.math3.exception.MathArithmeticException#MathArithmeticException()",
        "org.apache.commons.math3.util.CombinatoricsUtils.<staticinit>()",
        "org.apache.commons.math3.exception.util.LocalizedFormats.<staticinit>()"
    ],
    "org.apache.commons.math3.optim.linear.SimplexTableau#getSlackVariableOffset()": ["org.apache.commons.math3.optim.linear.SimplexTableau#getNumObjectiveFunctions()"],
    "org.apache.commons.math3.fraction.BigFractionFormat.getProperInstance(Locale)": [
        "org.apache.commons.math3.fraction.AbstractFormat.getDefaultNumberFormat(Locale)",
        "org.apache.commons.math3.fraction.ProperBigFractionFormat#ProperBigFractionFormat(NumberFormat)"
    ],
    "org.apache.commons.math3.util.ResizableDoubleArray#ResizableDoubleArray(int)": [
        "org.apache.commons.math3.util.ResizableDoubleArray.<staticinit>()",
        "org.apache.commons.math3.util.ResizableDoubleArray#ResizableDoubleArray(int,double)"
    ],
    "org.apache.commons.math3.random.RandomDataGenerator#nextInt(int,int)": [
        "org.apache.commons.math3.distribution.UniformIntegerDistribution#sample()",
        "org.apache.commons.math3.distribution.UniformIntegerDistribution#UniformIntegerDistribution(RandomGenerator,int,int)",
        "org.apache.commons.math3.random.RandomDataGenerator#getRandomGenerator()"
    ],
    "org.apache.commons.math3.random.RandomDataImpl#RandomDataImpl()": [
        "org.apache.commons.math3.random.RandomDataGenerator#RandomDataGenerator()",
        "org.apache.commons.math3.random.RandomDataImpl.<init>()"
    ],
    "org.apache.commons.math3.filter.KalmanFilter#getStateEstimationVector()": [
        "org.apache.commons.math3.linear.OpenMapRealVector#copy()",
        "org.apache.commons.math3.linear.ArrayRealVector#copy()",
        "org.apache.commons.math3.linear.RealVector.unmodifiableRealVector(RealVector)$RealVector$1#copy()"
    ],
    "org.apache.commons.math3.optimization.direct.CMAESOptimizer.diag(RealMatrix)": [
        "org.apache.commons.math3.linear.DiagonalMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.Array2DRowRealMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.BlockFieldMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.SparseFieldMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.DiagonalMatrix#getEntry(int,int)",
        "org.apache.commons.math3.linear.OpenMapRealMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.OpenMapRealMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.DiagonalMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.OpenMapRealMatrix#getEntry(int,int)",
        "org.apache.commons.math3.linear.Array2DRowRealMatrix#Array2DRowRealMatrix(double[][],boolean)",
        "org.apache.commons.math3.linear.Array2DRowFieldMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.BlockRealMatrix#getEntry(int,int)",
        "org.apache.commons.math3.linear.SparseFieldMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.BlockFieldMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.BlockRealMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.Array2DRowRealMatrix#getEntry(int,int)",
        "org.apache.commons.math3.linear.Array2DRowRealMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.Array2DRowFieldMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.BlockRealMatrix#getColumnDimension()"
    ],
    "org.apache.commons.math3.analysis.function.Rint#value(double)": ["org.apache.commons.math3.util.FastMath.rint(double)"],
    "org.apache.commons.math3.util.MathArrays.buildArray(Field<T>,int)": [
        "org.apache.commons.math3.util.BigRealField#getZero()",
        "org.apache.commons.math3.analysis.differentiation.SparseGradient#getField()$Field$1#getZero()",
        "org.apache.commons.math3.analysis.differentiation.DerivativeStructure#getField()$Field$1#getZero()",
        "org.apache.commons.math3.fraction.FractionField#getZero()",
        "org.apache.commons.math3.util.Decimal64Field#getZero()",
        "org.apache.commons.math3.dfp.DfpField#getZero()",
        "org.apache.commons.math3.complex.ComplexField#getZero()",
        "org.apache.commons.math3.fraction.BigFractionField#getZero()"
    ],
    "org.apache.commons.math3.stat.inference.WilcoxonSignedRankTest#wilcoxonSignedRankTest(double[],double[],boolean)": [
        "org.apache.commons.math3.stat.inference.WilcoxonSignedRankTest#calculateAsymptoticPValue(double,int)",
        "org.apache.commons.math3.stat.inference.WilcoxonSignedRankTest#wilcoxonSignedRank(double[],double[])",
        "org.apache.commons.math3.stat.inference.WilcoxonSignedRankTest#calculateExactPValue(double,int)",
        "org.apache.commons.math3.stat.inference.WilcoxonSignedRankTest#ensureDataConformance(double[],double[])"
    ],
    "org.apache.commons.math3.fraction.AbstractFormat#AbstractFormat(NumberFormat,NumberFormat)": ["org.apache.commons.math3.fraction.AbstractFormat.<init>()"],
    "org.apache.commons.math3.linear.ArrayRealVector#setSubVector(int,RealVector)": [
        "org.apache.commons.math3.linear.OpenMapRealVector#getDimension()",
        "org.apache.commons.math3.linear.ArrayRealVector#getDimension()",
        "org.apache.commons.math3.linear.ArrayRealVector#setSubVector(int,double[])",
        "org.apache.commons.math3.linear.RealVector#checkIndex(int)",
        "org.apache.commons.math3.linear.RealVector.unmodifiableRealVector(RealVector)$RealVector$1#getDimension()",
        "org.apache.commons.math3.linear.ArrayRealVector#getEntry(int)",
        "org.apache.commons.math3.linear.OpenMapRealVector#getEntry(int)",
        "org.apache.commons.math3.linear.RealVector.unmodifiableRealVector(RealVector)$RealVector$1#getEntry(int)"
    ],
    "org.apache.commons.math3.util.OpenIntToFieldHashMap#doRemove(int)": ["org.apache.commons.math3.util.OpenIntToFieldHashMap.<staticinit>()"],
    "org.apache.commons.math3.stat.ranking.NaturalRanking#NaturalRanking(RandomGenerator)": [
        "org.apache.commons.math3.stat.ranking.NaturalRanking.<staticinit>()",
        "org.apache.commons.math3.stat.ranking.NaturalRanking.<init>()",
        "org.apache.commons.math3.random.RandomDataGenerator#RandomDataGenerator(RandomGenerator)",
        "org.apache.commons.math3.stat.ranking.TiesStrategy.<staticinit>()"
    ],
    "org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D#toVector3D()": ["org.apache.commons.math3.geometry.euclidean.threed.Vector3D#Vector3D(double,double,double)"],
    "org.apache.commons.math3.util.OpenIntToDoubleHashMap#containsKey(int,int)": ["org.apache.commons.math3.util.OpenIntToDoubleHashMap.<staticinit>()"],
    "org.apache.commons.math3.linear.ArrayFieldVector#ArrayFieldVector(T extends FieldElement[],boolean)": [
        "org.apache.commons.math3.util.MathUtils.checkNotNull(Object)",
        "org.apache.commons.math3.linear.ArrayFieldVector.<init>()",
        "org.apache.commons.math3.exception.util.LocalizedFormats.<staticinit>()"
    ],
    "org.apache.commons.math3.linear.RealVector#getMinValue()": [
        "org.apache.commons.math3.linear.RealVector#getMinIndex()",
        "org.apache.commons.math3.linear.ArrayRealVector#getEntry(int)",
        "org.apache.commons.math3.linear.OpenMapRealVector#getEntry(int)",
        "org.apache.commons.math3.linear.RealVector.unmodifiableRealVector(RealVector)$RealVector$1#getEntry(int)"
    ],
    "org.apache.commons.math3.complex.Complex#multiply(int)": [
        "org.apache.commons.math3.complex.Complex.<staticinit>()",
        "org.apache.commons.math3.complex.Complex#createComplex(double,double)"
    ],
    "org.apache.commons.math3.random.RandomDataGenerator#setSecureAlgorithm(String,String)": ["org.apache.commons.math3.random.RandomGeneratorFactory.createRandomGenerator(Random)"],
    "org.apache.commons.math3.ml.neuralnet.twod.util.TopographicErrorHistogram#computeImage(NeuronSquareMesh2D,Iterable<double[]>)": [
        "org.apache.commons.math3.ml.neuralnet.twod.NeuronSquareMesh2D#getNetwork()",
        "org.apache.commons.math3.ml.neuralnet.twod.NeuronSquareMesh2D#getNumberOfRows()",
        "org.apache.commons.math3.ml.neuralnet.twod.util.LocationFinder.Location#getRow()",
        "org.apache.commons.math3.util.Pair#getSecond()",
        "org.apache.commons.math3.ml.neuralnet.Network#getNeighbours(Neuron)",
        "org.apache.commons.math3.ml.neuralnet.twod.util.LocationFinder#LocationFinder(NeuronSquareMesh2D)",
        "org.apache.commons.math3.ml.neuralnet.twod.util.LocationFinder.Location#getColumn()",
        "org.apache.commons.math3.ml.neuralnet.twod.util.LocationFinder#getLocation(Neuron)",
        "org.apache.commons.math3.util.Pair#getFirst()",
        "org.apache.commons.math3.ml.neuralnet.MapUtils.findBestAndSecondBest(double[],Iterable<Neuron>,DistanceMeasure)",
        "org.apache.commons.math3.ml.neuralnet.twod.NeuronSquareMesh2D#getNumberOfColumns()"
    ],
    "org.apache.commons.math3.linear.BlockRealMatrix#add(BlockRealMatrix)": [
        "org.apache.commons.math3.linear.MatrixUtils.checkAdditionCompatible(AnyMatrix,AnyMatrix)",
        "org.apache.commons.math3.linear.BlockRealMatrix#BlockRealMatrix(int,int)"
    ],
    "org.apache.commons.math3.userguide.filter.CannonballExample.Display#Display()": [
        "org.apache.commons.math3.userguide.ExampleUtils.ExampleFrame.<init>()",
        "org.apache.commons.math3.userguide.filter.CannonballExample.Display.<init>()",
        "org.apache.commons.math3.userguide.filter.CannonballExample.createComponent()"
    ],
    "org.apache.commons.math3.geometry.euclidean.threed.SphericalCoordinates#writeReplace()": [
        "org.apache.commons.math3.geometry.euclidean.threed.Vector3D#getX()",
        "org.apache.commons.math3.geometry.euclidean.threed.Vector3D#getZ()",
        "org.apache.commons.math3.geometry.euclidean.threed.Vector3D#getY()",
        "org.apache.commons.math3.geometry.euclidean.threed.SphericalCoordinates.DataTransferObject#DataTransferObject(double,double,double)"
    ],
    "org.apache.commons.math3.stat.descriptive.SynchronizedDescriptiveStatistics#addValue(double)": ["org.apache.commons.math3.stat.descriptive.DescriptiveStatistics#addValue(double)"],
    "org.apache.commons.math3.analysis.differentiation.SparseGradient#linearCombination(SparseGradient,SparseGradient,SparseGradient,SparseGradient,SparseGradient,SparseGradient,SparseGradient,SparseGradient)": [
        "org.apache.commons.math3.analysis.differentiation.SparseGradient#add(SparseGradient)",
        "org.apache.commons.math3.analysis.differentiation.SparseGradient#multiply(SparseGradient)",
        "org.apache.commons.math3.util.MathArrays.linearCombination(double,double,double,double,double,double,double,double)"
    ],
    "org.apache.commons.math3.linear.AbstractFieldMatrix#scalarMultiply(T extends FieldElement)": [
        "org.apache.commons.math3.linear.SparseFieldMatrix#getEntry(int,int)",
        "org.apache.commons.math3.linear.BlockFieldMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.SparseFieldMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.SparseFieldMatrix#setEntry(int,int,T extends FieldElement)",
        "org.apache.commons.math3.linear.BlockFieldMatrix#createMatrix(int,int)",
        "org.apache.commons.math3.linear.Array2DRowFieldMatrix#setEntry(int,int,T extends FieldElement)",
        "org.apache.commons.math3.linear.BlockFieldMatrix#setEntry(int,int,T extends FieldElement)",
        "org.apache.commons.math3.linear.Array2DRowFieldMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.SparseFieldMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.BlockFieldMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.SparseFieldMatrix#createMatrix(int,int)",
        "org.apache.commons.math3.linear.Array2DRowFieldMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.Array2DRowFieldMatrix#getEntry(int,int)",
        "org.apache.commons.math3.linear.Array2DRowFieldMatrix#createMatrix(int,int)",
        "org.apache.commons.math3.linear.BlockFieldMatrix#getEntry(int,int)"
    ],
    "org.apache.commons.math3.geometry.euclidean.threed.FieldRotation#applyTo(Vector3D)": [
        "org.apache.commons.math3.geometry.euclidean.threed.Vector3D#getX()",
        "org.apache.commons.math3.geometry.euclidean.threed.Vector3D#getZ()",
        "org.apache.commons.math3.geometry.euclidean.threed.Vector3D#getY()",
        "org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D#FieldVector3D(T extends RealFieldElement,T extends RealFieldElement,T extends RealFieldElement)"
    ],
    "org.apache.commons.math3.optimization.univariate.BracketFinder#getMaxEvaluations()": ["org.apache.commons.math3.util.Incrementor#getMaximalCount()"],
    "org.apache.commons.math3.linear.FieldLUDecomposition#getP()": [
        "org.apache.commons.math3.fraction.BigFractionField#getOne()",
        "org.apache.commons.math3.fraction.FractionField#getOne()",
        "org.apache.commons.math3.analysis.differentiation.SparseGradient#getField()$Field$1#getOne()",
        "org.apache.commons.math3.linear.Array2DRowFieldMatrix#Array2DRowFieldMatrix(Field<T extends FieldElement>,int,int)",
        "org.apache.commons.math3.linear.SparseFieldMatrix#setEntry(int,int,T extends FieldElement)",
        "org.apache.commons.math3.linear.Array2DRowFieldMatrix#setEntry(int,int,T extends FieldElement)",
        "org.apache.commons.math3.linear.BlockFieldMatrix#setEntry(int,int,T extends FieldElement)",
        "org.apache.commons.math3.dfp.DfpField#getOne()",
        "org.apache.commons.math3.analysis.differentiation.DerivativeStructure#getField()$Field$1#getOne()",
        "org.apache.commons.math3.util.Decimal64Field#getOne()",
        "org.apache.commons.math3.complex.ComplexField#getOne()",
        "org.apache.commons.math3.util.BigRealField#getOne()"
    ],
    "org.apache.commons.math3.geometry.spherical.twod.PropertiesComputer#visitLeafNode(BSPTree<Sphere2D>)": [
        "org.apache.commons.math3.geometry.spherical.twod.PropertiesComputer#convexCellBarycenter(Vertex)",
        "org.apache.commons.math3.exception.MathInternalError#MathInternalError()",
        "org.apache.commons.math3.geometry.spherical.twod.SphericalPolygonsSet#SphericalPolygonsSet(BSPTree<Sphere2D>,double)",
        "org.apache.commons.math3.geometry.spherical.twod.PropertiesComputer#convexCellArea(Vertex)",
        "org.apache.commons.math3.geometry.spherical.twod.SphericalPolygonsSet#getBoundaryLoops()",
        "org.apache.commons.math3.geometry.partitioning.BSPTree#pruneAroundConvexCell(Object,Object,Object)",
        "org.apache.commons.math3.geometry.partitioning.BSPTree#getAttribute()",
        "org.apache.commons.math3.geometry.euclidean.threed.Vector3D#Vector3D(double,Vector3D,double,Vector3D)"
    ],
    "org.apache.commons.math3.stat.regression.MillerUpdatingRegression#MillerUpdatingRegression()": ["org.apache.commons.math3.stat.regression.MillerUpdatingRegression#MillerUpdatingRegression(int,boolean,double)"],
    "org.apache.commons.math3.userguide.ClusterAlgorithmComparison.generateNoiseVector(NormalDistribution)": [
        "org.apache.commons.math3.geometry.euclidean.twod.Vector2D#Vector2D(double,double)",
        "org.apache.commons.math3.distribution.NormalDistribution#sample()"
    ],
    "org.apache.commons.math3.optimization.general.AbstractLeastSquaresOptimizer#updateJacobian()": [
        "org.apache.commons.math3.linear.Array2DRowRealMatrix#getData()",
        "org.apache.commons.math3.linear.BlockRealMatrix#scalarMultiply(double)",
        "org.apache.commons.math3.optimization.general.AbstractLeastSquaresOptimizer#computeWeightedJacobian(double[])",
        "org.apache.commons.math3.linear.AbstractRealMatrix#scalarMultiply(double)",
        "org.apache.commons.math3.linear.DiagonalMatrix#getData()",
        "org.apache.commons.math3.linear.AbstractRealMatrix#getData()",
        "org.apache.commons.math3.linear.BlockRealMatrix#getData()"
    ],
    "org.apache.commons.math3.distribution.ChiSquaredDistribution#getDegreesOfFreedom()": ["org.apache.commons.math3.distribution.GammaDistribution#getShape()"],
    "org.apache.commons.math3.geometry.spherical.twod.Circle.CircleTransform#apply(Hyperplane<Sphere2D>)": [
        "org.apache.commons.math3.geometry.spherical.twod.Circle#Circle(Vector3D,Vector3D,Vector3D,double)",
        "org.apache.commons.math3.geometry.euclidean.threed.Rotation#applyTo(Vector3D)"
    ],
    "org.apache.commons.math3.geometry.spherical.oned.LimitAngle#wholeSpace()": ["org.apache.commons.math3.geometry.spherical.oned.ArcsSet#ArcsSet(double)"],
    "org.apache.commons.math3.geometry.partitioning.BSPTree#merge(BSPTree<S extends Space>,LeafMerger<S extends Space>)": ["org.apache.commons.math3.geometry.partitioning.BSPTree#merge(BSPTree<S extends Space>,LeafMerger<S extends Space>,BSPTree<S extends Space>,boolean)"],
    "org.apache.commons.math3.linear.RealVector.unmodifiableRealVector(RealVector)$RealVector$1#setEntry(int,double)": ["org.apache.commons.math3.exception.MathUnsupportedOperationException#MathUnsupportedOperationException()"],
    "org.apache.commons.math3.optim.nonlinear.vector.jacobian.AbstractLeastSquaresOptimizer#getWeightSquareRoot()": [
        "org.apache.commons.math3.linear.Array2DRowRealMatrix#copy()",
        "org.apache.commons.math3.linear.BlockRealMatrix#copy()",
        "org.apache.commons.math3.linear.DiagonalMatrix#copy()",
        "org.apache.commons.math3.linear.OpenMapRealMatrix#copy()"
    ],
    "org.apache.commons.math3.ode.nonstiff.ThreeEighthesFieldStepInterpolator#create(Field<T extends RealFieldElement>,boolean,T extends RealFieldElement[][],FieldODEStateAndDerivative<T extends RealFieldElement>,FieldODEStateAndDerivative<T extends RealFieldElement>,FieldODEStateAndDerivative<T extends RealFieldElement>,FieldODEStateAndDerivative<T extends RealFieldElement>,FieldEquationsMapper<T extends RealFieldElement>)": ["org.apache.commons.math3.ode.nonstiff.ThreeEighthesFieldStepInterpolator#ThreeEighthesFieldStepInterpolator(Field<T extends RealFieldElement>,boolean,T extends RealFieldElement[][],FieldODEStateAndDerivative<T extends RealFieldElement>,FieldODEStateAndDerivative<T extends RealFieldElement>,FieldODEStateAndDerivative<T extends RealFieldElement>,FieldODEStateAndDerivative<T extends RealFieldElement>,FieldEquationsMapper<T extends RealFieldElement>)"],
    "org.apache.commons.math3.optimization.general.NonLinearConjugateGradientOptimizer.LineSearchFunction#value(double)": ["org.apache.commons.math3.optimization.general.AbstractScalarDifferentiableOptimizer#computeObjectiveGradient(double[])"],
    "org.apache.commons.math3.linear.ArrayRealVector#append(RealVector)": [
        "org.apache.commons.math3.linear.ArrayRealVector#ArrayRealVector(ArrayRealVector,RealVector)",
        "org.apache.commons.math3.linear.ArrayRealVector#ArrayRealVector(ArrayRealVector,ArrayRealVector)"
    ],
    "org.apache.commons.math3.optimization.direct.CMAESOptimizer.FitnessFunction#repair(double[])": [
        "org.apache.commons.math3.optimization.direct.BaseAbstractMultivariateOptimizer#getUpperBound()",
        "org.apache.commons.math3.optimization.direct.BaseAbstractMultivariateOptimizer#getLowerBound()"
    ],
    "org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D.LazyHolder.<staticinit>()": ["org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D#Euclidean2D()"],
    "org.apache.commons.math3.optimization.univariate.BrentOptimizer#doOptimize()": [
        "org.apache.commons.math3.optimization.univariate.BaseAbstractUnivariateOptimizer#getConvergenceChecker()",
        "org.apache.commons.math3.util.Precision.equals(double,double)",
        "org.apache.commons.math3.optimization.univariate.BaseAbstractUnivariateOptimizer#getMax()",
        "org.apache.commons.math3.util.FastMath.abs(double)",
        "org.apache.commons.math3.optimization.GoalType.<staticinit>()",
        "org.apache.commons.math3.optimization.univariate.BaseAbstractUnivariateOptimizer#computeObjectiveValue(double)",
        "org.apache.commons.math3.optimization.univariate.BaseAbstractUnivariateOptimizer#getMin()",
        "org.apache.commons.math3.optimization.univariate.BaseAbstractUnivariateOptimizer#getGoalType()",
        "org.apache.commons.math3.optimization.univariate.BrentOptimizer#best(UnivariatePointValuePair,UnivariatePointValuePair,boolean)",
        "org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair#UnivariatePointValuePair(double,double)",
        "org.apache.commons.math3.optimization.univariate.BaseAbstractUnivariateOptimizer#getStartValue()",
        "org.apache.commons.math3.optimization.univariate.BrentOptimizer.<staticinit>()"
    ],
    "org.apache.commons.math3.ode.FieldEquationsMapper#checkIndex(int)": ["org.apache.commons.math3.exception.util.LocalizedFormats.<staticinit>()"],
    "org.apache.commons.math3.fitting.HarmonicCurveFitter.ParameterGuesser#sortObservations(Collection<WeightedObservedPoint>)": ["org.apache.commons.math3.fitting.WeightedObservedPoint#getX()"],
    "org.apache.commons.math3.util.MultidimensionalCounter#iterator()": ["org.apache.commons.math3.util.MultidimensionalCounter.Iterator#Iterator()"],
    "org.apache.commons.math3.linear.RealVector#walkInDefaultOrder(RealVectorChangingVisitor,int,int)": [
        "org.apache.commons.math3.linear.OpenMapRealVector#getDimension()",
        "org.apache.commons.math3.linear.ArrayRealVector#getDimension()",
        "org.apache.commons.math3.linear.RealVector#checkIndices(int,int)",
        "org.apache.commons.math3.linear.OpenMapRealVector#setEntry(int,double)",
        "org.apache.commons.math3.linear.ArrayRealVector#getEntry(int)",
        "org.apache.commons.math3.linear.RealVector.unmodifiableRealVector(RealVector)$RealVector$1#getDimension()",
        "org.apache.commons.math3.linear.OpenMapRealVector#getEntry(int)",
        "org.apache.commons.math3.linear.RealVector.unmodifiableRealVector(RealVector)$RealVector$1#setEntry(int,double)",
        "org.apache.commons.math3.linear.ArrayRealVector#setEntry(int,double)",
        "org.apache.commons.math3.linear.RealVector.unmodifiableRealVector(RealVector)$RealVector$1#getEntry(int)"
    ],
    "org.apache.commons.math3.optimization.univariate.SimpleUnivariateValueChecker#SimpleUnivariateValueChecker(double,double)": [
        "org.apache.commons.math3.optimization.univariate.SimpleUnivariateValueChecker.<init>()",
        "org.apache.commons.math3.optimization.AbstractConvergenceChecker#AbstractConvergenceChecker(double,double)",
        "org.apache.commons.math3.optimization.univariate.SimpleUnivariateValueChecker.<staticinit>()"
    ],
    "org.apache.commons.math3.fraction.BigFraction#multiply(int)": [
        "org.apache.commons.math3.fraction.BigFraction#multiply(BigInteger)",
        "org.apache.commons.math3.fraction.BigFraction.<staticinit>()"
    ],
    "org.apache.commons.math3.linear.RealVector#walkInDefaultOrder(RealVectorPreservingVisitor,int,int)": [
        "org.apache.commons.math3.linear.OpenMapRealVector#getDimension()",
        "org.apache.commons.math3.linear.ArrayRealVector#getDimension()",
        "org.apache.commons.math3.linear.RealVector#checkIndices(int,int)",
        "org.apache.commons.math3.linear.ArrayRealVector#getEntry(int)",
        "org.apache.commons.math3.linear.RealVector.unmodifiableRealVector(RealVector)$RealVector$1#getDimension()",
        "org.apache.commons.math3.linear.OpenMapRealVector#getEntry(int)",
        "org.apache.commons.math3.linear.RealVector.unmodifiableRealVector(RealVector)$RealVector$1#getEntry(int)"
    ],
    "org.apache.commons.math3.userguide.LowDiscrepancyGeneratorComparison.normalize(List<Vector2D>)": [
        "org.apache.commons.math3.geometry.euclidean.twod.Vector2D#getX()",
        "org.apache.commons.math3.geometry.euclidean.twod.Vector2D#toArray()",
        "org.apache.commons.math3.geometry.euclidean.twod.Vector2D#Vector2D(double[])",
        "org.apache.commons.math3.util.FastMath.abs(double)",
        "org.apache.commons.math3.util.FastMath.max(double,double)",
        "org.apache.commons.math3.util.FastMath.sqrt(double)",
        "org.apache.commons.math3.util.FastMath.min(double,double)"
    ],
    "org.apache.commons.math3.distribution.GumbelDistribution#getNumericalMean()": ["org.apache.commons.math3.distribution.GumbelDistribution.<staticinit>()"],
    "org.apache.commons.math3.util.FastMathLiteralArrays.loadExpIntB()": ["org.apache.commons.math3.util.FastMathLiteralArrays.<staticinit>()"],
    "org.apache.commons.math3.linear.OpenMapRealVector#getLInfDistance(OpenMapRealVector)": [
        "org.apache.commons.math3.linear.OpenMapRealVector#getDimension()",
        "org.apache.commons.math3.util.OpenIntToDoubleHashMap.Iterator#value()",
        "org.apache.commons.math3.util.OpenIntToDoubleHashMap#iterator()",
        "org.apache.commons.math3.linear.RealVector#checkVectorDimensions(int)",
        "org.apache.commons.math3.util.FastMath.abs(double)",
        "org.apache.commons.math3.util.OpenIntToDoubleHashMap#containsKey(int)",
        "org.apache.commons.math3.util.OpenIntToDoubleHashMap.Iterator#advance()",
        "org.apache.commons.math3.linear.OpenMapRealVector#getEntries()",
        "org.apache.commons.math3.linear.ArrayRealVector#checkVectorDimensions(int)",
        "org.apache.commons.math3.util.OpenIntToDoubleHashMap.Iterator#key()",
        "org.apache.commons.math3.linear.OpenMapRealVector#getEntry(int)",
        "org.apache.commons.math3.util.OpenIntToDoubleHashMap.Iterator#hasNext()"
    ],
    "org.apache.commons.math3.analysis.function.Logit.Parametric#validateParameters(double[])": [
        "org.apache.commons.math3.exception.DimensionMismatchException#DimensionMismatchException(int,int)",
        "org.apache.commons.math3.exception.NullArgumentException#NullArgumentException()"
    ],
    "org.apache.commons.math3.linear.SparseFieldVector#SparseFieldVector(Field<T extends FieldElement>,T extends FieldElement[])": [
        "org.apache.commons.math3.util.MathUtils.checkNotNull(Object)",
        "org.apache.commons.math3.linear.SparseFieldVector.<init>()",
        "org.apache.commons.math3.util.OpenIntToFieldHashMap#put(int,T extends FieldElement)",
        "org.apache.commons.math3.util.OpenIntToFieldHashMap#OpenIntToFieldHashMap(Field<T extends FieldElement>)"
    ],
    "org.apache.commons.math3.analysis.polynomials.PolynomialFunctionLagrangeForm.evaluateInternal(double[],double[],double)": ["org.apache.commons.math3.util.FastMath.abs(double)"],
    "org.apache.commons.math3.ode.nonstiff.MidpointStepInterpolator#MidpointStepInterpolator(MidpointStepInterpolator)": [
        "org.apache.commons.math3.ode.nonstiff.RungeKuttaStepInterpolator#RungeKuttaStepInterpolator(RungeKuttaStepInterpolator)",
        "org.apache.commons.math3.ode.nonstiff.MidpointStepInterpolator.<init>()"
    ],
    "org.apache.commons.math3.filter.DefaultProcessModel#DefaultProcessModel(RealMatrix,RealMatrix,RealMatrix,RealVector,RealMatrix)": ["org.apache.commons.math3.filter.DefaultProcessModel.<init>()"],
    "org.apache.commons.math3.distribution.MixtureMultivariateRealDistribution#MixtureMultivariateRealDistribution(RandomGenerator,List<Pair<Double, T extends MultivariateRealDistribution>>)": [
        "org.apache.commons.math3.exception.DimensionMismatchException#DimensionMismatchException(int,int)",
        "org.apache.commons.math3.distribution.MixtureMultivariateRealDistribution.<init>()",
        "org.apache.commons.math3.util.Pair#getSecond()",
        "org.apache.commons.math3.exception.util.LocalizedFormats.<staticinit>()",
        "org.apache.commons.math3.distribution.AbstractMultivariateRealDistribution#AbstractMultivariateRealDistribution(RandomGenerator,int)",
        "org.apache.commons.math3.util.Pair#getFirst()",
        "org.apache.commons.math3.distribution.AbstractMultivariateRealDistribution#getDimension()"
    ],
    "org.apache.commons.math3.optimization.general.AbstractLeastSquaresOptimizer#getCovariances()": [
        "org.apache.commons.math3.optimization.general.AbstractLeastSquaresOptimizer.<staticinit>()",
        "org.apache.commons.math3.optimization.general.AbstractLeastSquaresOptimizer#getCovariances(double)"
    ],
    "org.apache.commons.math3.fraction.FractionField.getInstance()": ["org.apache.commons.math3.fraction.FractionField.LazyHolder.<staticinit>()"],
    "org.apache.commons.math3.linear.Array2DRowFieldMatrix#setSubMatrix(T extends FieldElement[][],int,int)": [
        "org.apache.commons.math3.exception.NoDataException#NoDataException(Localizable)",
        "org.apache.commons.math3.exception.DimensionMismatchException#DimensionMismatchException(int,int)",
        "org.apache.commons.math3.util.MathArrays.buildArray(Field<T>,int,int)",
        "org.apache.commons.math3.linear.AbstractFieldMatrix#getField()",
        "org.apache.commons.math3.linear.AbstractFieldMatrix#setSubMatrix(T extends FieldElement[][],int,int)",
        "org.apache.commons.math3.exception.util.LocalizedFormats.<staticinit>()"
    ],
    "org.apache.commons.math3.optimization.direct.BaseAbstractMultivariateSimpleBoundsOptimizer#optimize(int,FUNC extends MultivariateFunction,GoalType,double[],double[],double[])": [
        "org.apache.commons.math3.optimization.InitialGuess#InitialGuess(double[])",
        "org.apache.commons.math3.optimization.SimpleBounds#SimpleBounds(double[],double[])"
    ],
    "org.apache.commons.math3.optimization.BaseMultivariateVectorMultiStartOptimizer#getConvergenceChecker()": [
        "org.apache.commons.math3.optimization.univariate.BaseAbstractUnivariateOptimizer#getConvergenceChecker()",
        "org.apache.commons.math3.optimization.direct.BaseAbstractMultivariateVectorOptimizer#getConvergenceChecker()",
        "org.apache.commons.math3.optimization.univariate.UnivariateMultiStartOptimizer#getConvergenceChecker()",
        "org.apache.commons.math3.optimization.direct.BaseAbstractMultivariateOptimizer#getConvergenceChecker()",
        "org.apache.commons.math3.optimization.BaseMultivariateVectorMultiStartOptimizer#getConvergenceChecker()",
        "org.apache.commons.math3.optimization.BaseMultivariateMultiStartOptimizer#getConvergenceChecker()"
    ],
    "org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.verticesToTree(double,Vector2D[]...)": [
        "org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.Edge#Edge(Vertex,Vertex,Line)",
        "org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.insertEdges(double,BSPTree<Euclidean2D>,List<Edge>)",
        "org.apache.commons.math3.geometry.partitioning.BSPTree#BSPTree()",
        "org.apache.commons.math3.geometry.partitioning.BSPTree#BSPTree(Object)",
        "org.apache.commons.math3.util.FastMath.abs(double)",
        "org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.Vertex#bindWith(Line)",
        "org.apache.commons.math3.geometry.euclidean.twod.Line#Line(Vector2D,Vector2D,double)",
        "org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.Vertex#Vertex(Vector2D)",
        "org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.Vertex#getLocation()",
        "org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.Vertex#sharedLineWith(Vertex)",
        "org.apache.commons.math3.geometry.euclidean.twod.Line#getOffset(Point<Euclidean2D>)"
    ],
    "org.apache.commons.math3.geometry.partitioning.Characterization#characterize(BSPTree<S extends Space>,SubHyperplane<S extends Space>,List<BSPTree<S extends Space>>)": [
        "org.apache.commons.math3.exception.MathInternalError#MathInternalError()",
        "org.apache.commons.math3.geometry.partitioning.Characterization#characterize(BSPTree<S extends Space>,SubHyperplane<S extends Space>,List<BSPTree<S extends Space>>)",
        "org.apache.commons.math3.geometry.partitioning.SubHyperplane.SplitSubHyperplane#getMinus()",
        "org.apache.commons.math3.geometry.partitioning.Side.<staticinit>()",
        "org.apache.commons.math3.geometry.partitioning.SubHyperplane.SplitSubHyperplane#getPlus()",
        "org.apache.commons.math3.geometry.partitioning.BSPTree#getAttribute()",
        "org.apache.commons.math3.geometry.partitioning.Characterization#addOutsideTouching(SubHyperplane<S extends Space>,List<BSPTree<S extends Space>>)",
        "org.apache.commons.math3.geometry.partitioning.Characterization#addInsideTouching(SubHyperplane<S extends Space>,List<BSPTree<S extends Space>>)",
        "org.apache.commons.math3.geometry.partitioning.SubHyperplane.SplitSubHyperplane#getSide()",
        "org.apache.commons.math3.geometry.partitioning.BSPTree#getPlus()",
        "org.apache.commons.math3.geometry.partitioning.BSPTree#getCut()",
        "org.apache.commons.math3.geometry.partitioning.BSPTree#getMinus()",
        "org.apache.commons.math3.geometry.partitioning.AbstractSubHyperplane#getHyperplane()"
    ],
    "org.apache.commons.math3.linear.ArrayFieldVector#set(int,ArrayFieldVector<T extends FieldElement>)": ["org.apache.commons.math3.linear.ArrayFieldVector#checkIndex(int)"],
    "org.apache.commons.math3.fraction.BigFraction#subtract(long)": ["org.apache.commons.math3.fraction.BigFraction#subtract(int)"],
    "org.apache.commons.math3.analysis.differentiation.DSCompiler#expm1(double[],int,double[],int)": [
        "org.apache.commons.math3.util.FastMath.exp(double)",
        "org.apache.commons.math3.util.FastMath.expm1(double)",
        "org.apache.commons.math3.analysis.differentiation.DSCompiler#compose(double[],int,double[],double[],int)"
    ],
    "org.apache.commons.math3.optimization.linear.SimplexTableau#getData()": [
        "org.apache.commons.math3.linear.DiagonalMatrix#getData()",
        "org.apache.commons.math3.linear.AbstractRealMatrix#getData()",
        "org.apache.commons.math3.linear.Array2DRowRealMatrix#getData()",
        "org.apache.commons.math3.linear.BlockRealMatrix#getData()"
    ],
    "org.apache.commons.math3.linear.SparseFieldVector#walkInOptimizedOrder(FieldVectorPreservingVisitor<T extends FieldElement>,int,int)": ["org.apache.commons.math3.linear.SparseFieldVector#walkInDefaultOrder(FieldVectorPreservingVisitor<T extends FieldElement>,int,int)"],
    "org.apache.commons.math3.stat.descriptive.moment.StandardDeviation#StandardDeviation()": [
        "org.apache.commons.math3.stat.descriptive.moment.StandardDeviation.<init>()",
        "org.apache.commons.math3.stat.descriptive.moment.Variance#Variance()",
        "org.apache.commons.math3.stat.descriptive.AbstractStorelessUnivariateStatistic.<init>()"
    ],
    "org.apache.commons.math3.analysis.integration.gauss.GaussIntegratorFactory#legendreHighPrecision(int,double,double)": [
        "org.apache.commons.math3.analysis.integration.gauss.GaussIntegrator#GaussIntegrator(Pair<double[], double[]>)",
        "org.apache.commons.math3.analysis.integration.gauss.GaussIntegratorFactory.transform(Pair<double[], double[]>,double,double)",
        "org.apache.commons.math3.analysis.integration.gauss.GaussIntegratorFactory.getRule(BaseRuleFactory<? extends Number>,int)"
    ],
    "org.apache.commons.math3.stat.descriptive.rank.Percentile#withEstimationType(EstimationType)": ["org.apache.commons.math3.stat.descriptive.rank.Percentile#Percentile(double,EstimationType,NaNStrategy,KthSelector)"],
    "org.apache.commons.math3.random.EmpiricalDistribution#EmpiricalDistribution(int,RandomDataGenerator)": [
        "org.apache.commons.math3.random.EmpiricalDistribution.<init>()",
        "org.apache.commons.math3.distribution.AbstractRealDistribution#AbstractRealDistribution(RandomGenerator)",
        "org.apache.commons.math3.random.RandomDataGenerator#getRandomGenerator()"
    ],
    "org.apache.commons.math3.linear.QRDecomposition.Solver#isNonSingular()": ["org.apache.commons.math3.util.FastMath.abs(double)"],
    "org.apache.commons.math3.ode.nonstiff.RungeKuttaStepInterpolator#reinitialize(AbstractIntegrator,double[],double[][],boolean,EquationsMapper,EquationsMapper[])": [
        "org.apache.commons.math3.ode.sampling.NordsieckStepInterpolator#reinitialize(double[],boolean,EquationsMapper,EquationsMapper[])",
        "org.apache.commons.math3.ode.sampling.AbstractStepInterpolator#reinitialize(double[],boolean,EquationsMapper,EquationsMapper[])"
    ],
    "org.apache.commons.math3.optim.univariate.MultiStartUnivariateOptimizer#MultiStartUnivariateOptimizer(UnivariateOptimizer,int,RandomGenerator)": [
        "org.apache.commons.math3.optim.univariate.UnivariateOptimizer#UnivariateOptimizer(ConvergenceChecker<UnivariatePointValuePair>)",
        "org.apache.commons.math3.optim.univariate.MultiStartUnivariateOptimizer.<init>()",
        "org.apache.commons.math3.optim.BaseOptimizer#getConvergenceChecker()"
    ],
    "org.apache.commons.math3.geometry.partitioning.BSPTree#chopOffMinus(Hyperplane<S extends Space>,VanishingCutHandler<S extends Space>)": [
        "org.apache.commons.math3.geometry.partitioning.BSPTree#insertInTree(BSPTree<S extends Space>,boolean)$VanishingCutHandler$1#fixNode(BSPTree<S extends Space>)",
        "org.apache.commons.math3.geometry.partitioning.RegionFactory.VanishingToLeaf#fixNode(BSPTree<S extends Space>)",
        "org.apache.commons.math3.geometry.partitioning.BSPTree#chopOffMinus(Hyperplane<S extends Space>,VanishingCutHandler<S extends Space>)",
        "org.apache.commons.math3.geometry.partitioning.RegionFactory.DifferenceMerger#fixNode(BSPTree<S extends Space>)",
        "org.apache.commons.math3.geometry.partitioning.SubHyperplane.SplitSubHyperplane#getPlus()"
    ],
    "org.apache.commons.math3.analysis.differentiation.JacobianFunction#value(double[])": [
        "org.apache.commons.math3.analysis.FunctionUtils.toMultivariateDifferentiableVectorFunction(DifferentiableMultivariateVectorFunction)$MultivariateDifferentiableVectorFunction$1#value(DerivativeStructure[])",
        "org.apache.commons.math3.analysis.differentiation.DerivativeStructure#DerivativeStructure(int,int,int,double)",
        "org.apache.commons.math3.analysis.differentiation.DerivativeStructure#getPartialDerivative(int[]...)",
        "org.apache.commons.math3.optimization.fitting.CurveFitter.TheoreticalValuesFunction#value(DerivativeStructure[])"
    ],
    "org.apache.commons.math3.optim.MaxEval#MaxEval(int)": ["org.apache.commons.math3.optim.MaxEval.<init>()"],
    "org.apache.commons.math3.dfp.DfpField#newDfp(byte,byte)": [
        "org.apache.commons.math3.dfp.Dfp#Dfp(DfpField,byte,byte)",
        "org.apache.commons.math3.dfp.Dfp.<staticinit>()"
    ],
    "org.apache.commons.math3.ode.nonstiff.AdaptiveStepsizeFieldIntegrator#initializeStep(boolean,int,T extends RealFieldElement[],FieldODEStateAndDerivative<T extends RealFieldElement>,FieldEquationsMapper<T extends RealFieldElement>)": [
        "org.apache.commons.math3.ode.AbstractFieldIntegrator#getField()",
        "org.apache.commons.math3.ode.FieldEquationsMapper#mapState(FieldODEState<T extends RealFieldElement>)",
        "org.apache.commons.math3.util.BigRealField#getZero()",
        "org.apache.commons.math3.analysis.differentiation.SparseGradient#getField()$Field$1#getZero()",
        "org.apache.commons.math3.util.Decimal64Field#getZero()",
        "org.apache.commons.math3.dfp.DfpField#getZero()",
        "org.apache.commons.math3.ode.FieldODEState#getTime()",
        "org.apache.commons.math3.util.MathUtils.min(T extends RealFieldElement,T extends RealFieldElement)",
        "org.apache.commons.math3.analysis.differentiation.SparseGradient#add(double)",
        "org.apache.commons.math3.analysis.differentiation.DerivativeStructure#add(double)",
        "org.apache.commons.math3.analysis.differentiation.DerivativeStructure#getField()$Field$1#getZero()",
        "org.apache.commons.math3.ode.AbstractFieldIntegrator#computeDerivatives(T extends RealFieldElement,T extends RealFieldElement[])",
        "org.apache.commons.math3.fraction.FractionField#getZero()",
        "org.apache.commons.math3.ode.FieldEquationsMapper#mapDerivative(FieldODEStateAndDerivative<T extends RealFieldElement>)",
        "org.apache.commons.math3.util.MathUtils.max(T extends RealFieldElement,T extends RealFieldElement)",
        "org.apache.commons.math3.complex.ComplexField#getZero()",
        "org.apache.commons.math3.fraction.BigFractionField#getZero()",
        "org.apache.commons.math3.util.Decimal64#add(double)",
        "org.apache.commons.math3.util.MathArrays.buildArray(Field<T>,int)",
        "org.apache.commons.math3.dfp.Dfp#add(double)"
    ],
    "org.apache.commons.math3.linear.MatrixUtils.bigFractionMatrixToRealMatrix(FieldMatrix<BigFraction>)": [
        "org.apache.commons.math3.linear.AbstractFieldMatrix#walkInOptimizedOrder(FieldMatrixPreservingVisitor<T extends FieldElement>)",
        "org.apache.commons.math3.linear.MatrixUtils.BigFractionMatrixConverter#getConvertedMatrix()",
        "org.apache.commons.math3.linear.BlockFieldMatrix#walkInOptimizedOrder(FieldMatrixPreservingVisitor<T extends FieldElement>)",
        "org.apache.commons.math3.linear.MatrixUtils.BigFractionMatrixConverter#BigFractionMatrixConverter()"
    ],
    "org.apache.commons.math3.stat.descriptive.SynchronizedMultivariateSummaryStatistics#getSumLog()": ["org.apache.commons.math3.stat.descriptive.MultivariateSummaryStatistics#getSumLog()"],
    "org.apache.commons.math3.geometry.partitioning.AbstractRegion#isEmpty()": ["org.apache.commons.math3.geometry.partitioning.AbstractRegion#isEmpty(BSPTree<S extends Space>)"],
    "org.apache.commons.math3.ode.EquationsMapper#extractEquationData(double[],double[])": ["org.apache.commons.math3.exception.DimensionMismatchException#DimensionMismatchException(int,int)"],
    "org.apache.commons.math3.stat.inference.TTest#tTest(double,StatisticalSummary)": [
        "org.apache.commons.math3.stat.descriptive.SummaryStatistics#getVariance()",
        "org.apache.commons.math3.stat.descriptive.StatisticalSummaryValues#getVariance()",
        "org.apache.commons.math3.stat.inference.TTest#tTest(double,double,double,double)",
        "org.apache.commons.math3.stat.descriptive.DescriptiveStatistics#getN()",
        "org.apache.commons.math3.stat.descriptive.AggregateSummaryStatistics#getMean()",
        "org.apache.commons.math3.stat.descriptive.SummaryStatistics#getMean()",
        "org.apache.commons.math3.stat.descriptive.SynchronizedSummaryStatistics#getVariance()",
        "org.apache.commons.math3.stat.descriptive.StatisticalSummaryValues#getN()",
        "org.apache.commons.math3.stat.descriptive.SummaryStatistics#getN()",
        "org.apache.commons.math3.stat.descriptive.StatisticalSummaryValues#getMean()",
        "org.apache.commons.math3.stat.descriptive.AggregateSummaryStatistics#getN()",
        "org.apache.commons.math3.stat.inference.TTest#checkSampleData(StatisticalSummary)",
        "org.apache.commons.math3.stat.descriptive.SynchronizedSummaryStatistics#getN()",
        "org.apache.commons.math3.stat.descriptive.AggregateSummaryStatistics#getVariance()",
        "org.apache.commons.math3.stat.descriptive.DescriptiveStatistics#getMean()",
        "org.apache.commons.math3.stat.descriptive.SynchronizedDescriptiveStatistics#getN()",
        "org.apache.commons.math3.stat.descriptive.SynchronizedSummaryStatistics#getMean()",
        "org.apache.commons.math3.stat.descriptive.DescriptiveStatistics#getVariance()"
    ],
    "org.apache.commons.math3.geometry.spherical.twod.S2Point#distance(Point<Sphere2D>)": ["org.apache.commons.math3.geometry.spherical.twod.S2Point.distance(S2Point,S2Point)"],
    "org.apache.commons.math3.analysis.polynomials.PolynomialsUtils.createLaguerrePolynomial(int)$RecurrenceCoefficientsGenerator$1#generate(int)": ["org.apache.commons.math3.fraction.BigFraction#BigFraction(int,int)"],
    "org.apache.commons.math3.random.ValueServer#setSigma(double)": ["org.apache.commons.math3.random.ValueServer.<staticinit>()"],
    "org.apache.commons.math3.exception.MultiDimensionMismatchException#MultiDimensionMismatchException(Localizable,Integer[],Integer[])": ["org.apache.commons.math3.exception.MultiDimensionMismatchException.<init>()"],
    "org.apache.commons.math3.util.Precision.equalsIncludingNaN(double,double,double)": [
        "org.apache.commons.math3.util.FastMath.abs(double)",
        "org.apache.commons.math3.util.Precision.equalsIncludingNaN(double,double)"
    ],
    "org.apache.commons.math3.util.FastMath.decrementExact(int)": ["org.apache.commons.math3.exception.util.LocalizedFormats.<staticinit>()"],
    "org.apache.commons.math3.optim.InitialGuess#InitialGuess(double[])": ["org.apache.commons.math3.optim.InitialGuess.<init>()"],
    "org.apache.commons.math3.linear.AbstractRealMatrix#addToEntry(int,int,double)": [
        "org.apache.commons.math3.linear.MatrixUtils.checkMatrixIndex(AnyMatrix,int,int)",
        "org.apache.commons.math3.linear.Array2DRowRealMatrix#getEntry(int,int)",
        "org.apache.commons.math3.linear.Array2DRowRealMatrix#setEntry(int,int,double)",
        "org.apache.commons.math3.linear.DiagonalMatrix#getEntry(int,int)",
        "org.apache.commons.math3.linear.BlockRealMatrix#setEntry(int,int,double)",
        "org.apache.commons.math3.linear.OpenMapRealMatrix#setEntry(int,int,double)",
        "org.apache.commons.math3.linear.OpenMapRealMatrix#getEntry(int,int)",
        "org.apache.commons.math3.linear.DiagonalMatrix#setEntry(int,int,double)",
        "org.apache.commons.math3.linear.BlockRealMatrix#getEntry(int,int)"
    ],
    "org.apache.commons.math3.dfp.Dfp#log1p()": [
        "org.apache.commons.math3.dfp.Dfp#getOne()",
        "org.apache.commons.math3.dfp.Dfp#add(Dfp)",
        "org.apache.commons.math3.dfp.DfpMath.log(Dfp)"
    ],
    "org.apache.commons.math3.stat.descriptive.moment.FourthMoment#FourthMoment()": [
        "org.apache.commons.math3.stat.descriptive.moment.FourthMoment.<init>()",
        "org.apache.commons.math3.stat.descriptive.moment.ThirdMoment#ThirdMoment()"
    ],
    "org.apache.commons.math3.geometry.partitioning.BSPTree#insertInTree(BSPTree<S extends Space>,boolean,VanishingCutHandler<S extends Space>)": [
        "org.apache.commons.math3.geometry.partitioning.BSPTree#condense()",
        "org.apache.commons.math3.geometry.partitioning.RegionFactory.DifferenceMerger#fixNode(BSPTree<S extends Space>)",
        "org.apache.commons.math3.geometry.partitioning.BSPTree#chopOffMinus(Hyperplane<S extends Space>,VanishingCutHandler<S extends Space>)",
        "org.apache.commons.math3.geometry.partitioning.SubHyperplane.SplitSubHyperplane#getMinus()",
        "org.apache.commons.math3.geometry.partitioning.SubHyperplane.SplitSubHyperplane#getPlus()",
        "org.apache.commons.math3.geometry.partitioning.BSPTree#insertInTree(BSPTree<S extends Space>,boolean)$VanishingCutHandler$1#fixNode(BSPTree<S extends Space>)",
        "org.apache.commons.math3.geometry.partitioning.RegionFactory.VanishingToLeaf#fixNode(BSPTree<S extends Space>)",
        "org.apache.commons.math3.geometry.partitioning.BSPTree#chopOffPlus(Hyperplane<S extends Space>,VanishingCutHandler<S extends Space>)",
        "org.apache.commons.math3.geometry.partitioning.AbstractSubHyperplane#getHyperplane()"
    ],
    "org.apache.commons.math3.dfp.DfpDec#newInstance(double)": [
        "org.apache.commons.math3.dfp.DfpDec#DfpDec(DfpField,double)",
        "org.apache.commons.math3.dfp.Dfp#getField()"
    ],
    "org.apache.commons.math3.analysis.integration.RombergIntegrator#RombergIntegrator(int,int)": [
        "org.apache.commons.math3.analysis.integration.RombergIntegrator.<init>()",
        "org.apache.commons.math3.analysis.integration.BaseAbstractUnivariateIntegrator#BaseAbstractUnivariateIntegrator(int,int)",
        "org.apache.commons.math3.analysis.integration.RombergIntegrator.<staticinit>()"
    ],
    "org.apache.commons.math3.geometry.spherical.twod.S2Point#equals(Object)": [
        "org.apache.commons.math3.geometry.spherical.twod.S2Point.<staticinit>()",
        "org.apache.commons.math3.geometry.spherical.twod.S2Point#isNaN()"
    ],
    "org.apache.commons.math3.genetics.CycleCrossover#CycleCrossover(boolean)": ["org.apache.commons.math3.genetics.CycleCrossover.<init>()"],
    "org.apache.commons.math3.distribution.NormalDistribution#density(double)": [
        "org.apache.commons.math3.distribution.NormalDistribution#logDensity(double)",
        "org.apache.commons.math3.util.FastMath.exp(double)"
    ],
    "org.apache.commons.math3.analysis.function.HarmonicOscillator.value(double,double)": ["org.apache.commons.math3.util.FastMath.cos(double)"],
    "org.apache.commons.math3.genetics.ListPopulation#ListPopulation(int)": ["org.apache.commons.math3.genetics.ListPopulation#ListPopulation(List<Chromosome>,int)"],
    "org.apache.commons.math3.ode.sampling.NordsieckStepInterpolator#NordsieckStepInterpolator(NordsieckStepInterpolator)": [
        "org.apache.commons.math3.ode.sampling.AbstractStepInterpolator#AbstractStepInterpolator(AbstractStepInterpolator)",
        "org.apache.commons.math3.linear.Array2DRowRealMatrix#getDataRef()",
        "org.apache.commons.math3.ode.sampling.NordsieckStepInterpolator.<init>()",
        "org.apache.commons.math3.linear.Array2DRowRealMatrix#Array2DRowRealMatrix(double[][],boolean)"
    ],
    "org.apache.commons.math3.dfp.DfpField#clearIEEEFlags()": ["org.apache.commons.math3.dfp.DfpField.<staticinit>()"],
    "org.apache.commons.math3.random.EmpiricalDistribution.ArrayDataAdapter#computeBinStats()": [
        "org.apache.commons.math3.stat.descriptive.SummaryStatistics#addValue(double)",
        "org.apache.commons.math3.stat.descriptive.AggregateSummaryStatistics.AggregatingSummaryStatistics#addValue(double)",
        "org.apache.commons.math3.stat.descriptive.SynchronizedSummaryStatistics#addValue(double)",
        "org.apache.commons.math3.random.EmpiricalDistribution#findBin(double)"
    ],
    "org.apache.commons.math3.analysis.interpolation.SmoothingPolynomialBicubicSplineInterpolator#SmoothingPolynomialBicubicSplineInterpolator()": ["org.apache.commons.math3.analysis.interpolation.SmoothingPolynomialBicubicSplineInterpolator#SmoothingPolynomialBicubicSplineInterpolator(int)"],
    "org.apache.commons.math3.random.UncorrelatedRandomVectorGenerator#nextVector()": [
        "org.apache.commons.math3.random.GaussianRandomGenerator#nextNormalizedDouble()",
        "org.apache.commons.math3.random.StableRandomGenerator#nextNormalizedDouble()",
        "org.apache.commons.math3.random.UniformRandomGenerator#nextNormalizedDouble()"
    ],
    "org.apache.commons.math3.linear.OpenMapRealVector#OpenMapRealVector(double[])": [
        "org.apache.commons.math3.linear.OpenMapRealVector#OpenMapRealVector(Double[],double)",
        "org.apache.commons.math3.linear.OpenMapRealVector.<staticinit>()"
    ],
    "org.apache.commons.math3.linear.OpenMapRealVector#append(OpenMapRealVector)": [
        "org.apache.commons.math3.linear.OpenMapRealVector#getDimension()",
        "org.apache.commons.math3.util.OpenIntToDoubleHashMap.Iterator#value()",
        "org.apache.commons.math3.util.OpenIntToDoubleHashMap#iterator()",
        "org.apache.commons.math3.linear.OpenMapRealVector#setEntry(int,double)",
        "org.apache.commons.math3.util.OpenIntToDoubleHashMap.Iterator#advance()",
        "org.apache.commons.math3.linear.OpenMapRealVector#OpenMapRealVector(OpenMapRealVector,int)",
        "org.apache.commons.math3.util.OpenIntToDoubleHashMap.Iterator#key()",
        "org.apache.commons.math3.util.OpenIntToDoubleHashMap.Iterator#hasNext()"
    ],
    "org.apache.commons.math3.stat.descriptive.rank.Percentile#Percentile(Percentile)": [
        "org.apache.commons.math3.stat.descriptive.rank.Percentile#getKthSelector()",
        "org.apache.commons.math3.stat.descriptive.rank.Percentile#getEstimationType()",
        "org.apache.commons.math3.util.MathUtils.checkNotNull(Object)",
        "org.apache.commons.math3.stat.descriptive.rank.Percentile#setData(double[])",
        "org.apache.commons.math3.stat.descriptive.AbstractUnivariateStatistic#getDataRef()",
        "org.apache.commons.math3.stat.descriptive.rank.Percentile#setQuantile(double)",
        "org.apache.commons.math3.stat.descriptive.rank.Percentile.<init>()",
        "org.apache.commons.math3.stat.descriptive.AbstractUnivariateStatistic.<init>()",
        "org.apache.commons.math3.stat.descriptive.rank.Percentile#getNaNStrategy()"
    ],
    "org.apache.commons.math3.optim.nonlinear.vector.jacobian.AbstractLeastSquaresOptimizer#computeSigma(double[],double)": [
        "org.apache.commons.math3.optim.nonlinear.vector.jacobian.AbstractLeastSquaresOptimizer#computeCovariances(double[],double)",
        "org.apache.commons.math3.util.FastMath.sqrt(double)"
    ],
    "org.apache.commons.math3.distribution.PoissonDistribution#PoissonDistribution(double)": [
        "org.apache.commons.math3.distribution.PoissonDistribution.<staticinit>()",
        "org.apache.commons.math3.distribution.PoissonDistribution#PoissonDistribution(double,double,int)"
    ],
    "org.apache.commons.math3.ode.nonstiff.GraggBulirschStoerIntegrator#addStepHandler(StepHandler)": [
        "org.apache.commons.math3.ode.nonstiff.GraggBulirschStoerIntegrator#initializeArrays()",
        "org.apache.commons.math3.ode.AbstractIntegrator#addStepHandler(StepHandler)"
    ],
    "org.apache.commons.math3.geometry.euclidean.threed.Line#Line(Line)": ["org.apache.commons.math3.geometry.euclidean.threed.Line.<init>()"],
    "org.apache.commons.math3.linear.AbstractFieldMatrix#preMultiply(FieldMatrix<T extends FieldElement>)": [
        "org.apache.commons.math3.linear.AbstractFieldMatrix#multiply(FieldMatrix<T extends FieldElement>)",
        "org.apache.commons.math3.linear.BlockFieldMatrix#multiply(FieldMatrix<T extends FieldElement>)"
    ],
    "org.apache.commons.math3.random.Well1024a#Well1024a()": [
        "org.apache.commons.math3.random.AbstractWell#AbstractWell(int,int,int,int)",
        "org.apache.commons.math3.random.Well1024a.<staticinit>()",
        "org.apache.commons.math3.random.Well1024a.<init>()"
    ],
    "org.apache.commons.math3.linear.ArrayFieldVector#checkVectorDimensions(int)": ["org.apache.commons.math3.exception.DimensionMismatchException#DimensionMismatchException(int,int)"],
    "org.apache.commons.math3.analysis.polynomials.PolynomialSplineFunction#value(double)": ["org.apache.commons.math3.analysis.polynomials.PolynomialFunction#value(double)"],
    "org.apache.commons.math3.linear.DiagonalMatrix#addToEntry(int,int,double)": [
        "org.apache.commons.math3.linear.MatrixUtils.checkRowIndex(AnyMatrix,int)",
        "org.apache.commons.math3.linear.DiagonalMatrix#ensureZero(double)"
    ],
    "org.apache.commons.math3.util.FastMath.Split#Split(double,double,double)": ["org.apache.commons.math3.util.FastMath.Split.<init>()"],
    "org.apache.commons.math3.analysis.solvers.BaseSecantSolver#BaseSecantSolver(double,Method)": [
        "org.apache.commons.math3.analysis.solvers.AllowedSolution.<staticinit>()",
        "org.apache.commons.math3.analysis.solvers.BaseSecantSolver.<init>()",
        "org.apache.commons.math3.analysis.solvers.AbstractUnivariateSolver#AbstractUnivariateSolver(double)"
    ],
    "org.apache.commons.math3.geometry.partitioning.BSPTree#insertInTree(BSPTree<S extends Space>,boolean)": [
        "org.apache.commons.math3.geometry.partitioning.BSPTree#insertInTree(BSPTree<S extends Space>,boolean)$VanishingCutHandler$1.<init>()",
        "org.apache.commons.math3.geometry.partitioning.BSPTree#insertInTree(BSPTree<S extends Space>,boolean,VanishingCutHandler<S extends Space>)"
    ],
    "org.apache.commons.math3.geometry.enclosing.WelzlEncloser#moveToFrontBall(List<P extends Point>,int,List<P extends Point>)": [
        "org.apache.commons.math3.geometry.enclosing.EnclosingBall#getCenter()",
        "org.apache.commons.math3.geometry.enclosing.EnclosingBall#contains(P extends Point,double)",
        "org.apache.commons.math3.geometry.enclosing.EnclosingBall#getSupportSize()",
        "org.apache.commons.math3.geometry.enclosing.WelzlEncloser#moveToFrontBall(List<P extends Point>,int,List<P extends Point>)"
    ],
    "org.apache.commons.math3.util.OpenIntToFieldHashMap#remove(int)": [
        "org.apache.commons.math3.util.OpenIntToFieldHashMap#containsKey(int,int)",
        "org.apache.commons.math3.util.OpenIntToFieldHashMap.probe(int,int)",
        "org.apache.commons.math3.util.OpenIntToFieldHashMap#doRemove(int)",
        "org.apache.commons.math3.util.OpenIntToFieldHashMap.hashOf(int)",
        "org.apache.commons.math3.util.OpenIntToFieldHashMap.<staticinit>()",
        "org.apache.commons.math3.util.OpenIntToFieldHashMap.perturb(int)"
    ],
    "org.apache.commons.math3.geometry.euclidean.threed.FieldRotation#getMatrix()": ["org.apache.commons.math3.util.MathArrays.buildArray(Field<T>,int,int)"],
    "org.apache.commons.math3.stat.descriptive.moment.Kurtosis#copy()": [
        "org.apache.commons.math3.stat.descriptive.moment.Kurtosis.copy(Kurtosis,Kurtosis)",
        "org.apache.commons.math3.stat.descriptive.moment.Kurtosis#Kurtosis()"
    ],
    "org.apache.commons.math3.stat.descriptive.MultivariateSummaryStatistics#clear()": [
        "org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile#clear()",
        "org.apache.commons.math3.stat.descriptive.moment.Variance#clear()",
        "org.apache.commons.math3.stat.descriptive.moment.Kurtosis#clear()",
        "org.apache.commons.math3.stat.descriptive.moment.StandardDeviation#clear()",
        "org.apache.commons.math3.stat.descriptive.rank.Max#clear()",
        "org.apache.commons.math3.stat.descriptive.moment.Mean#clear()",
        "org.apache.commons.math3.stat.descriptive.moment.ThirdMoment#clear()",
        "org.apache.commons.math3.stat.descriptive.moment.SecondMoment#clear()",
        "org.apache.commons.math3.stat.descriptive.moment.FourthMoment#clear()",
        "org.apache.commons.math3.stat.descriptive.moment.GeometricMean#clear()",
        "org.apache.commons.math3.stat.descriptive.summary.SumOfLogs#clear()",
        "org.apache.commons.math3.stat.descriptive.summary.Sum#clear()",
        "org.apache.commons.math3.stat.descriptive.rank.Min#clear()",
        "org.apache.commons.math3.stat.descriptive.moment.VectorialCovariance#clear()",
        "org.apache.commons.math3.stat.descriptive.summary.SumOfSquares#clear()",
        "org.apache.commons.math3.stat.descriptive.summary.Product#clear()",
        "org.apache.commons.math3.stat.descriptive.moment.FirstMoment#clear()",
        "org.apache.commons.math3.stat.descriptive.moment.Skewness#clear()"
    ],
    "org.apache.commons.math3.util.FastMath.exp(double,double,double[])": [
        "org.apache.commons.math3.util.FastMath.ExpIntTable.<staticinit>()",
        "org.apache.commons.math3.util.FastMath.<staticinit>()",
        "org.apache.commons.math3.util.FastMath.exp(double,double,double[])",
        "org.apache.commons.math3.util.FastMath.ExpFracTable.<staticinit>()"
    ],
    "org.apache.commons.math3.optim.nonlinear.scalar.ObjectiveFunctionGradient#ObjectiveFunctionGradient(MultivariateVectorFunction)": ["org.apache.commons.math3.optim.nonlinear.scalar.ObjectiveFunctionGradient.<init>()"],
    "org.apache.commons.math3.exception.MathInternalError#MathInternalError(Localizable,Object[]...)": [
        "org.apache.commons.math3.exception.MathInternalError.<init>()",
        "org.apache.commons.math3.exception.MathIllegalStateException#MathIllegalStateException(Localizable,Object[]...)"
    ],
    "org.apache.commons.math3.stat.descriptive.rank.Percentile.EstimationType#evaluate(double[],int[],double,KthSelector)": [
        "org.apache.commons.math3.stat.descriptive.rank.Percentile.EstimationType#estimate(double[],int[],double,int,KthSelector)",
        "org.apache.commons.math3.util.MathUtils.checkNotNull(Object)",
        "org.apache.commons.math3.stat.descriptive.rank.Percentile.EstimationType$EstimationType$1#estimate(double[],int[],double,int,KthSelector)",
        "org.apache.commons.math3.stat.descriptive.rank.Percentile.EstimationType$EstimationType$1#index(double,int)",
        "org.apache.commons.math3.exception.util.LocalizedFormats.<staticinit>()"
    ],
    "org.apache.commons.math3.util.FastMathCalc.quadMult(double[],double[],double[])": [
        "org.apache.commons.math3.util.FastMathCalc.split(double,double[])",
        "org.apache.commons.math3.util.FastMathCalc.splitMult(double[],double[],double[])"
    ],
    "org.apache.commons.math3.linear.ArrayFieldVector#projection(FieldVector<T extends FieldElement>)": [
        "org.apache.commons.math3.linear.ArrayFieldVector#mapMultiply(T extends FieldElement)",
        "org.apache.commons.math3.linear.SparseFieldVector#dotProduct(FieldVector<T extends FieldElement>)",
        "org.apache.commons.math3.linear.ArrayFieldVector#dotProduct(FieldVector<T extends FieldElement>)",
        "org.apache.commons.math3.linear.SparseFieldVector#mapMultiply(T extends FieldElement)"
    ],
    "org.apache.commons.math3.linear.BlockRealMatrix#walkInRowOrder(RealMatrixChangingVisitor)": [
        "org.apache.commons.math3.linear.AbstractRealMatrix#getSubMatrix(int[],int[])$DefaultRealMatrixChangingVisitor$1#visit(int,int,double)",
        "org.apache.commons.math3.linear.DefaultRealMatrixChangingVisitor#end()",
        "org.apache.commons.math3.linear.BlockRealMatrix#blockWidth(int)",
        "org.apache.commons.math3.linear.DefaultRealMatrixChangingVisitor#visit(int,int,double)",
        "org.apache.commons.math3.util.FastMath.min(int,int)",
        "org.apache.commons.math3.linear.BlockRealMatrix.<staticinit>()",
        "org.apache.commons.math3.linear.DefaultRealMatrixChangingVisitor#start(int,int,int,int,int,int)"
    ],
    "org.apache.commons.math3.geometry.spherical.oned.Sphere1D.getInstance()": ["org.apache.commons.math3.geometry.spherical.oned.Sphere1D.LazyHolder.<staticinit>()"],
    "org.apache.commons.math3.dfp.Dfp#log()": ["org.apache.commons.math3.dfp.DfpMath.log(Dfp)"],
    "org.apache.commons.math3.ml.neuralnet.sofm.NeighbourhoodSizeFunctionFactory#NeighbourhoodSizeFunctionFactory()": ["org.apache.commons.math3.ml.neuralnet.sofm.NeighbourhoodSizeFunctionFactory.<init>()"],
    "org.apache.commons.math3.stat.descriptive.MultivariateSummaryStatistics#setGeoMeanImpl(StorelessUnivariateStatistic[])": ["org.apache.commons.math3.stat.descriptive.MultivariateSummaryStatistics#setImpl(StorelessUnivariateStatistic[],StorelessUnivariateStatistic[])"],
    "org.apache.commons.math3.util.FastMath.acos(double)": [
        "org.apache.commons.math3.util.FastMath.atan(double,double,boolean)",
        "org.apache.commons.math3.util.FastMath.doubleHighPart(double)",
        "org.apache.commons.math3.util.FastMath.<staticinit>()",
        "org.apache.commons.math3.util.FastMath.sqrt(double)"
    ],
    "org.apache.commons.math3.analysis.solvers.BaseSecantSolver#solve(int,UnivariateFunction,double,double,double,AllowedSolution)": ["org.apache.commons.math3.analysis.solvers.BaseAbstractUnivariateSolver#solve(int,FUNC extends UnivariateFunction,double,double,double)"],
    "org.apache.commons.math3.transform.FastFourierTransformer#FastFourierTransformer(DftNormalization)": ["org.apache.commons.math3.transform.FastFourierTransformer.<init>()"],
    "org.apache.commons.math3.random.ValueServer#ValueServer()": [
        "org.apache.commons.math3.random.ValueServer.<init>()",
        "org.apache.commons.math3.random.RandomDataGenerator#RandomDataGenerator()"
    ],
    "org.apache.commons.math3.analysis.differentiation.SparseGradient#multiply(SparseGradient)": ["org.apache.commons.math3.analysis.differentiation.SparseGradient#SparseGradient(double,Map<Integer, Double>)"],
    "org.apache.commons.math3.exception.MathIllegalArgumentException#getLocalizedMessage()": ["org.apache.commons.math3.exception.util.ExceptionContext#getLocalizedMessage()"],
    "org.apache.commons.math3.ode.nonstiff.ClassicalRungeKuttaFieldIntegrator#getB()": [
        "org.apache.commons.math3.ode.AbstractFieldIntegrator#getField()",
        "org.apache.commons.math3.util.MathArrays.buildArray(Field<T>,int)",
        "org.apache.commons.math3.ode.nonstiff.RungeKuttaFieldIntegrator#fraction(int,int)"
    ],
    "org.apache.commons.math3.stat.descriptive.DescriptiveStatistics#getVariance()": [
        "org.apache.commons.math3.stat.descriptive.DescriptiveStatistics#apply(UnivariateStatistic)",
        "org.apache.commons.math3.stat.descriptive.SynchronizedDescriptiveStatistics#apply(UnivariateStatistic)"
    ],
    "org.apache.commons.math3.linear.RealVectorFormat.getInstance(Locale)": [
        "org.apache.commons.math3.util.CompositeFormat.getDefaultNumberFormat(Locale)",
        "org.apache.commons.math3.linear.RealVectorFormat#RealVectorFormat(NumberFormat)"
    ],
    "org.apache.commons.math3.util.MathArrays.equals(double[],double[])": ["org.apache.commons.math3.util.Precision.equals(double,double)"],
    "org.apache.commons.math3.analysis.interpolation.BicubicSplineFunction#BicubicSplineFunction(double[],boolean)$BivariateFunction$4#value(double,double)": ["org.apache.commons.math3.analysis.interpolation.BicubicSplineFunction#apply(double[],double[],double[][])"],
    "org.apache.commons.math3.ode.nonstiff.RungeKuttaStepInterpolator#RungeKuttaStepInterpolator()": [
        "org.apache.commons.math3.ode.nonstiff.RungeKuttaStepInterpolator.<init>()",
        "org.apache.commons.math3.ode.sampling.AbstractStepInterpolator#AbstractStepInterpolator()"
    ],
    "org.apache.commons.math3.ode.AbstractFieldIntegrator#setMaxEvaluations(int)": ["org.apache.commons.math3.util.IntegerSequence.Incrementor#withMaximalCount(int)"],
    "org.apache.commons.math3.analysis.differentiation.DSCompiler#log10(double[],int,double[],int)": [
        "org.apache.commons.math3.util.FastMath.log10(double)",
        "org.apache.commons.math3.util.FastMath.log(double)",
        "org.apache.commons.math3.analysis.differentiation.DSCompiler#compose(double[],int,double[],double[],int)"
    ],
    "org.apache.commons.math3.geometry.euclidean.threed.Plane#wholeSpace()": ["org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet#PolyhedronsSet(double)"],
    "org.apache.commons.math3.ode.sampling.StepNormalizer#StepNormalizer(double,FixedStepHandler,StepNormalizerMode,StepNormalizerBounds)": [
        "org.apache.commons.math3.util.FastMath.abs(double)",
        "org.apache.commons.math3.ode.sampling.StepNormalizer.<init>()"
    ],
    "org.apache.commons.math3.random.RandomDataImpl#nextT(double)": ["org.apache.commons.math3.random.RandomDataGenerator#nextT(double)"],
    "org.apache.commons.math3.fitting.GaussianCurveFitter#withStartPoint(double[])": ["org.apache.commons.math3.fitting.GaussianCurveFitter#GaussianCurveFitter(double[],int)"],
    "org.apache.commons.math3.linear.BlockFieldMatrix#walkInRowOrder(FieldMatrixPreservingVisitor<T extends FieldElement>,int,int,int,int)": [
        "org.apache.commons.math3.linear.BlockFieldMatrix#blockWidth(int)",
        "org.apache.commons.math3.util.FastMath.max(int,int)",
        "org.apache.commons.math3.linear.AbstractFieldMatrix#checkSubMatrixIndex(int,int,int,int)",
        "org.apache.commons.math3.linear.AbstractFieldMatrix#transpose()$DefaultFieldMatrixPreservingVisitor$1#visit(int,int,T extends FieldElement)",
        "org.apache.commons.math3.util.FastMath.min(int,int)",
        "org.apache.commons.math3.linear.DefaultFieldMatrixPreservingVisitor#start(int,int,int,int,int,int)",
        "org.apache.commons.math3.linear.DefaultFieldMatrixPreservingVisitor#end()",
        "org.apache.commons.math3.linear.MatrixUtils.FractionMatrixConverter#start(int,int,int,int,int,int)",
        "org.apache.commons.math3.linear.DefaultFieldMatrixPreservingVisitor#visit(int,int,T extends FieldElement)",
        "org.apache.commons.math3.linear.MatrixUtils.BigFractionMatrixConverter#start(int,int,int,int,int,int)",
        "org.apache.commons.math3.linear.AbstractFieldMatrix#copySubMatrix(int,int,int,int,T extends FieldElement[][])$DefaultFieldMatrixPreservingVisitor$1#start(int,int,int,int,int,int)",
        "org.apache.commons.math3.ode.nonstiff.AdamsMoultonFieldIntegrator.Corrector#start(int,int,int,int,int,int)",
        "org.apache.commons.math3.linear.BlockFieldMatrix.<staticinit>()",
        "org.apache.commons.math3.linear.AbstractFieldMatrix#copySubMatrix(int,int,int,int,T extends FieldElement[][])$DefaultFieldMatrixPreservingVisitor$1#visit(int,int,T extends FieldElement)",
        "org.apache.commons.math3.ode.nonstiff.AdamsMoultonFieldIntegrator.Corrector#end()"
    ],
    "org.apache.commons.math3.stat.inference.KolmogorovSmirnovTest#kolmogorovSmirnovTest(double[],double[])": ["org.apache.commons.math3.stat.inference.KolmogorovSmirnovTest#kolmogorovSmirnovTest(double[],double[],boolean)"],
    "org.apache.commons.math3.userguide.genetics.Polygon.randomPolygon(int)": [
        "org.apache.commons.math3.random.AbstractRandomGenerator#nextFloat()",
        "org.apache.commons.math3.random.SynchronizedRandomGenerator#nextFloat()",
        "org.apache.commons.math3.genetics.GeneticAlgorithm.getRandomGenerator()",
        "org.apache.commons.math3.random.RandomGeneratorFactory.createRandomGenerator(Random)$RandomGenerator$1#nextFloat()",
        "org.apache.commons.math3.util.FastMath.max(float,float)",
        "org.apache.commons.math3.random.BitsStreamGenerator#nextFloat()",
        "org.apache.commons.math3.userguide.genetics.Polygon.<init>()",
        "org.apache.commons.math3.random.RandomAdaptor#nextFloat()"
    ],
    "org.apache.commons.math3.linear.OpenMapRealVector#dotProduct(OpenMapRealVector)": [
        "org.apache.commons.math3.linear.RealVector#dotProduct(RealVector)",
        "org.apache.commons.math3.linear.ArrayRealVector#dotProduct(RealVector)",
        "org.apache.commons.math3.linear.RealVector.unmodifiableRealVector(RealVector)$RealVector$1#dotProduct(RealVector)"
    ],
    "org.apache.commons.math3.distribution.EnumeratedDistribution#EnumeratedDistribution(List<Pair<T, Double>>)": [
        "org.apache.commons.math3.distribution.EnumeratedDistribution#EnumeratedDistribution(RandomGenerator,List<Pair<T, Double>>)",
        "org.apache.commons.math3.random.Well19937c#Well19937c()"
    ],
    "org.apache.commons.math3.dfp.Dfp#Dfp(DfpField,byte)": ["org.apache.commons.math3.dfp.Dfp#Dfp(DfpField,long)"],
    "org.apache.commons.math3.ml.neuralnet.MapUtils.sort(double[],Iterable<Neuron>,DistanceMeasure)": [
        "org.apache.commons.math3.ml.distance.EuclideanDistance#compute(double[],double[])",
        "org.apache.commons.math3.ml.distance.CanberraDistance#compute(double[],double[])",
        "org.apache.commons.math3.ml.distance.ChebyshevDistance#compute(double[],double[])",
        "org.apache.commons.math3.ml.distance.ManhattanDistance#compute(double[],double[])",
        "org.apache.commons.math3.ml.distance.EarthMoversDistance#compute(double[],double[])",
        "org.apache.commons.math3.ml.neuralnet.MapUtils.PairNeuronDouble.<staticinit>()",
        "org.apache.commons.math3.ml.neuralnet.MapUtils.PairNeuronDouble#PairNeuronDouble(Neuron,double)",
        "org.apache.commons.math3.ml.neuralnet.Neuron#getFeatures()"
    ],
    "org.apache.commons.math3.linear.SparseFieldVector#add(FieldVector<T extends FieldElement>)": [
        "org.apache.commons.math3.linear.SparseFieldVector#checkVectorDimensions(int)",
        "org.apache.commons.math3.linear.SparseFieldVector#add(SparseFieldVector<T extends FieldElement>)",
        "org.apache.commons.math3.linear.ArrayFieldVector#getDimension()",
        "org.apache.commons.math3.linear.SparseFieldVector#getEntry(int)",
        "org.apache.commons.math3.linear.SparseFieldVector#setEntry(int,T extends FieldElement)",
        "org.apache.commons.math3.linear.SparseFieldVector#getDimension()",
        "org.apache.commons.math3.linear.ArrayFieldVector#getEntry(int)",
        "org.apache.commons.math3.linear.SparseFieldVector#SparseFieldVector(Field<T extends FieldElement>,int)"
    ],
    "org.apache.commons.math3.exception.util.ArgUtils.flatten(Object[])": ["org.apache.commons.math3.exception.util.ArgUtils.flatten(Object[])"],
    "org.apache.commons.math3.distribution.EnumeratedRealDistribution#probability(double)": ["org.apache.commons.math3.distribution.EnumeratedDistribution#probability(T)"],
    "org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet#isAfterParent(BSPTree<Euclidean1D>)": [
        "org.apache.commons.math3.geometry.partitioning.BSPTree#getParent()",
        "org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet#childAfter(BSPTree<Euclidean1D>)"
    ],
    "org.apache.commons.math3.geometry.partitioning.SubHyperplane.SplitSubHyperplane#getSide()": [
        "org.apache.commons.math3.geometry.partitioning.AbstractSubHyperplane#isEmpty()",
        "org.apache.commons.math3.geometry.spherical.oned.SubLimitAngle#isEmpty()",
        "org.apache.commons.math3.geometry.partitioning.Side.<staticinit>()",
        "org.apache.commons.math3.geometry.euclidean.oned.SubOrientedPoint#isEmpty()"
    ],
    "org.apache.commons.math3.ml.clustering.KMeansPlusPlusClusterer#centroidOf(Collection<T extends Clusterable>,int)": ["org.apache.commons.math3.ml.clustering.DoublePoint#DoublePoint(double[])"],
    "org.apache.commons.math3.linear.SparseFieldVector#dotProduct(FieldVector<T extends FieldElement>)": [
        "org.apache.commons.math3.linear.SparseFieldVector#checkVectorDimensions(int)",
        "org.apache.commons.math3.util.OpenIntToFieldHashMap.Iterator#hasNext()",
        "org.apache.commons.math3.linear.SparseFieldVector#getEntry(int)",
        "org.apache.commons.math3.linear.ArrayFieldVector#getDimension()",
        "org.apache.commons.math3.util.OpenIntToFieldHashMap.Iterator#key()",
        "org.apache.commons.math3.util.OpenIntToFieldHashMap.Iterator#value()",
        "org.apache.commons.math3.util.BigRealField#getZero()",
        "org.apache.commons.math3.analysis.differentiation.SparseGradient#getField()$Field$1#getZero()",
        "org.apache.commons.math3.util.Decimal64Field#getZero()",
        "org.apache.commons.math3.linear.ArrayFieldVector#getEntry(int)",
        "org.apache.commons.math3.dfp.DfpField#getZero()",
        "org.apache.commons.math3.util.OpenIntToFieldHashMap.Iterator#advance()",
        "org.apache.commons.math3.analysis.differentiation.DerivativeStructure#getField()$Field$1#getZero()",
        "org.apache.commons.math3.fraction.FractionField#getZero()",
        "org.apache.commons.math3.linear.SparseFieldVector#getDimension()",
        "org.apache.commons.math3.util.OpenIntToFieldHashMap#iterator()",
        "org.apache.commons.math3.complex.ComplexField#getZero()",
        "org.apache.commons.math3.fraction.BigFractionField#getZero()"
    ],
    "org.apache.commons.math3.stat.Frequency#getPct(long)": ["org.apache.commons.math3.stat.Frequency#getPct(long)"],
    "org.apache.commons.math3.distribution.TDistribution#density(double)": [
        "org.apache.commons.math3.distribution.TDistribution#logDensity(double)",
        "org.apache.commons.math3.util.FastMath.exp(double)"
    ],
    "org.apache.commons.math3.fraction.BigFraction#abs()": ["org.apache.commons.math3.fraction.BigFraction#negate()"],
    "org.apache.commons.math3.util.CombinatoricsUtils#CombinatoricsUtils()": ["org.apache.commons.math3.util.CombinatoricsUtils.<init>()"],
    "org.apache.commons.math3.ml.clustering.evaluation.SumOfClusterVariances#score(List<? extends Cluster<T extends Clusterable>>)": [
        "org.apache.commons.math3.ml.clustering.Cluster#getPoints()",
        "org.apache.commons.math3.stat.descriptive.moment.Variance#Variance()",
        "org.apache.commons.math3.ml.clustering.evaluation.ClusterEvaluator#distance(Clusterable,Clusterable)",
        "org.apache.commons.math3.stat.descriptive.moment.Variance#getResult()",
        "org.apache.commons.math3.ml.clustering.evaluation.ClusterEvaluator#centroidOf(Cluster<T extends Clusterable>)",
        "org.apache.commons.math3.stat.descriptive.moment.Variance#increment(double)"
    ],
    "org.apache.commons.math3.linear.SparseFieldVector#projection(FieldVector<T extends FieldElement>)": [
        "org.apache.commons.math3.linear.SparseFieldVector#checkVectorDimensions(int)",
        "org.apache.commons.math3.linear.ArrayFieldVector#getDimension()",
        "org.apache.commons.math3.linear.SparseFieldVector#dotProduct(FieldVector<T extends FieldElement>)",
        "org.apache.commons.math3.linear.SparseFieldVector#mapMultiply(T extends FieldElement)",
        "org.apache.commons.math3.linear.ArrayFieldVector#dotProduct(FieldVector<T extends FieldElement>)",
        "org.apache.commons.math3.linear.SparseFieldVector#getDimension()",
        "org.apache.commons.math3.linear.ArrayFieldVector#mapMultiply(T extends FieldElement)"
    ],
    "org.apache.commons.math3.random.HaltonSequenceGenerator#HaltonSequenceGenerator(int)": [
        "org.apache.commons.math3.random.HaltonSequenceGenerator#HaltonSequenceGenerator(int,int[],int[])",
        "org.apache.commons.math3.random.HaltonSequenceGenerator.<staticinit>()"
    ],
    "org.apache.commons.math3.util.FastMath.ulp(float)": ["org.apache.commons.math3.util.FastMath.abs(float)"],
    "org.apache.commons.math3.random.Well19937a#Well19937a(int[])": [
        "org.apache.commons.math3.random.AbstractWell#AbstractWell(int,int,int,int,int[])",
        "org.apache.commons.math3.random.Well19937a.<staticinit>()",
        "org.apache.commons.math3.random.Well19937a.<init>()"
    ],
    "org.apache.commons.math3.geometry.euclidean.threed.Plane#intersection(Plane)": [
        "org.apache.commons.math3.geometry.euclidean.threed.Vector3D#add(Vector<Euclidean3D>)",
        "org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(Vector3D,Vector3D)",
        "org.apache.commons.math3.geometry.euclidean.threed.Plane.intersection(Plane,Plane,Plane)",
        "org.apache.commons.math3.geometry.euclidean.threed.Vector3D#getNorm()",
        "org.apache.commons.math3.geometry.euclidean.threed.Plane#Plane(Vector3D,double)",
        "org.apache.commons.math3.geometry.euclidean.threed.Line#Line(Vector3D,Vector3D,double)"
    ],
    "org.apache.commons.math3.stat.clustering.EuclideanIntegerPoint#centroidOf(Collection<EuclideanIntegerPoint>)": [
        "org.apache.commons.math3.stat.clustering.EuclideanIntegerPoint#getPoint()",
        "org.apache.commons.math3.stat.clustering.EuclideanIntegerPoint#EuclideanIntegerPoint(int[])"
    ],
    "org.apache.commons.math3.stat.correlation.SpearmansCorrelation#SpearmansCorrelation(RealMatrix)": [
        "org.apache.commons.math3.stat.correlation.SpearmansCorrelation#SpearmansCorrelation(RealMatrix,RankingAlgorithm)",
        "org.apache.commons.math3.stat.ranking.NaturalRanking#NaturalRanking()"
    ],
    "org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D#add(double,Vector3D)": [
        "org.apache.commons.math3.geometry.euclidean.threed.Vector3D#getX()",
        "org.apache.commons.math3.geometry.euclidean.threed.Vector3D#getZ()",
        "org.apache.commons.math3.geometry.euclidean.threed.Vector3D#getY()",
        "org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D#FieldVector3D(T extends RealFieldElement,T extends RealFieldElement,T extends RealFieldElement)"
    ],
    "org.apache.commons.math3.fitting.HarmonicCurveFitter.ParameterGuesser#guessPhi(WeightedObservedPoint[])": [
        "org.apache.commons.math3.fitting.WeightedObservedPoint#getX()",
        "org.apache.commons.math3.util.FastMath.sin(double)",
        "org.apache.commons.math3.util.FastMath.atan2(double,double)",
        "org.apache.commons.math3.fitting.WeightedObservedPoint#getY()",
        "org.apache.commons.math3.util.FastMath.cos(double)"
    ],
    "org.apache.commons.math3.ode.JacobianMatrices#JacobianMatrices(MainStateJacobianProvider,String[]...)": [
        "org.apache.commons.math3.ode.JacobianMatrices.MainStateJacobianWrapper#getDimension()",
        "org.apache.commons.math3.ode.JacobianMatrices.<init>()",
        "org.apache.commons.math3.ode.MultistepIntegrator#start(double,double[],double)$FirstOrderDifferentialEquations$1#getDimension()",
        "org.apache.commons.math3.ode.ParameterConfiguration#ParameterConfiguration(String,double)",
        "org.apache.commons.math3.ode.FirstOrderConverter#getDimension()"
    ],
    "org.apache.commons.math3.linear.OpenMapRealVector#subtract(RealVector)": [
        "org.apache.commons.math3.linear.OpenMapRealVector#getDimension()",
        "org.apache.commons.math3.linear.RealVector#checkVectorDimensions(int)",
        "org.apache.commons.math3.linear.ArrayRealVector#getDimension()",
        "org.apache.commons.math3.linear.ArrayRealVector#checkVectorDimensions(int)",
        "org.apache.commons.math3.linear.RealVector#subtract(RealVector)",
        "org.apache.commons.math3.linear.OpenMapRealVector#subtract(OpenMapRealVector)",
        "org.apache.commons.math3.linear.RealVector.unmodifiableRealVector(RealVector)$RealVector$1#getDimension()"
    ],
    "org.apache.commons.math3.optim.nonlinear.vector.jacobian.AbstractLeastSquaresOptimizer#AbstractLeastSquaresOptimizer(ConvergenceChecker<PointVectorValuePair>)": [
        "org.apache.commons.math3.optim.nonlinear.vector.jacobian.AbstractLeastSquaresOptimizer.<init>()",
        "org.apache.commons.math3.optim.nonlinear.vector.JacobianMultivariateVectorOptimizer#JacobianMultivariateVectorOptimizer(ConvergenceChecker<PointVectorValuePair>)"
    ],
    "org.apache.commons.math3.linear.ArrayRealVector#combine(double,double,RealVector)": [
        "org.apache.commons.math3.linear.ArrayRealVector#copy()",
        "org.apache.commons.math3.linear.ArrayRealVector#combineToSelf(double,double,RealVector)"
    ],
    "org.apache.commons.math3.stat.correlation.Covariance#Covariance()": ["org.apache.commons.math3.stat.correlation.Covariance.<init>()"],
    "org.apache.commons.math3.special.BesselJ.BesselJResult#BesselJResult(double[],int)": [
        "org.apache.commons.math3.util.MathArrays.copyOf(double[],int)",
        "org.apache.commons.math3.special.BesselJ.BesselJResult.<init>()"
    ],
    "org.apache.commons.math3.stat.descriptive.SynchronizedSummaryStatistics#getQuadraticMean()": ["org.apache.commons.math3.stat.descriptive.SummaryStatistics#getQuadraticMean()"],
    "org.apache.commons.math3.linear.ArrayRealVector#walkInOptimizedOrder(RealVectorPreservingVisitor,int,int)": ["org.apache.commons.math3.linear.ArrayRealVector#walkInDefaultOrder(RealVectorPreservingVisitor,int,int)"],
    "org.apache.commons.math3.stat.descriptive.moment.FourthMoment#FourthMoment(FourthMoment)": [
        "org.apache.commons.math3.stat.descriptive.moment.FourthMoment.copy(FourthMoment,FourthMoment)",
        "org.apache.commons.math3.stat.descriptive.moment.FourthMoment.<init>()",
        "org.apache.commons.math3.stat.descriptive.moment.ThirdMoment#ThirdMoment()"
    ],
    "org.apache.commons.math3.fitting.leastsquares.LeastSquaresFactory.LocalLeastSquaresProblem#getObservationSize()": [
        "org.apache.commons.math3.linear.ArrayRealVector#getDimension()",
        "org.apache.commons.math3.linear.OpenMapRealVector#getDimension()",
        "org.apache.commons.math3.linear.RealVector.unmodifiableRealVector(RealVector)$RealVector$1#getDimension()"
    ],
    "org.apache.commons.math3.ode.sampling.AbstractStepInterpolator#readBaseExternal(ObjectInput)": ["org.apache.commons.math3.ode.sampling.AbstractStepInterpolator#allocateInterpolatedArrays(int)"],
    "org.apache.commons.math3.ml.neuralnet.oned.NeuronString#writeReplace()": [
        "org.apache.commons.math3.ml.neuralnet.oned.NeuronString.SerializationProxy#SerializationProxy(boolean,double[][])",
        "org.apache.commons.math3.ml.neuralnet.oned.NeuronString#getFeatures(int)"
    ],
    "org.apache.commons.math3.linear.ArrayFieldVector#ArrayFieldVector(T extends FieldElement[],FieldVector<T extends FieldElement>)": [
        "org.apache.commons.math3.util.MathUtils.checkNotNull(Object)",
        "org.apache.commons.math3.linear.SparseFieldVector#getField()",
        "org.apache.commons.math3.linear.ArrayFieldVector#toArray()",
        "org.apache.commons.math3.linear.ArrayFieldVector.<init>()",
        "org.apache.commons.math3.linear.ArrayFieldVector#getField()",
        "org.apache.commons.math3.linear.SparseFieldVector#toArray()",
        "org.apache.commons.math3.util.MathArrays.buildArray(Field<T>,int)"
    ],
    "org.apache.commons.math3.optim.nonlinear.scalar.GradientMultivariateOptimizer#GradientMultivariateOptimizer(ConvergenceChecker<PointValuePair>)": [
        "org.apache.commons.math3.optim.nonlinear.scalar.GradientMultivariateOptimizer.<init>()",
        "org.apache.commons.math3.optim.nonlinear.scalar.MultivariateOptimizer#MultivariateOptimizer(ConvergenceChecker<PointValuePair>)"
    ],
    "org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizer#LevenbergMarquardtOptimizer()": [
        "org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizer#LevenbergMarquardtOptimizer(double,double,double,double,double)",
        "org.apache.commons.math3.util.Precision.<staticinit>()"
    ],
    "org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile#PSquarePercentile()": [
        "org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile#PSquarePercentile(double)",
        "org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile.<staticinit>()"
    ],
    "org.apache.commons.math3.fraction.Fraction#multiply(int)": [
        "org.apache.commons.math3.fraction.Fraction#Fraction(int)",
        "org.apache.commons.math3.fraction.Fraction#multiply(Fraction)"
    ],
    "org.apache.commons.math3.distribution.HypergeometricDistribution#HypergeometricDistribution(RandomGenerator,int,int,int)": [
        "org.apache.commons.math3.distribution.AbstractIntegerDistribution#AbstractIntegerDistribution(RandomGenerator)",
        "org.apache.commons.math3.distribution.HypergeometricDistribution.<init>()",
        "org.apache.commons.math3.exception.util.LocalizedFormats.<staticinit>()"
    ],
    "org.apache.commons.math3.geometry.euclidean.threed.SubLine#SubLine(Vector3D,Vector3D,double)": [
        "org.apache.commons.math3.geometry.euclidean.threed.Line#Line(Vector3D,Vector3D,double)",
        "org.apache.commons.math3.geometry.euclidean.threed.SubLine.buildIntervalSet(Vector3D,Vector3D,double)",
        "org.apache.commons.math3.geometry.euclidean.threed.SubLine#SubLine(Line,IntervalsSet)"
    ],
    "org.apache.commons.math3.linear.Array2DRowFieldMatrix#multiplyEntry(int,int,T extends FieldElement)": [
        "org.apache.commons.math3.linear.AbstractFieldMatrix#checkColumnIndex(int)",
        "org.apache.commons.math3.linear.AbstractFieldMatrix#checkRowIndex(int)"
    ],
    "org.apache.commons.math3.random.ValueServer#getNextUniform()": ["org.apache.commons.math3.random.RandomDataGenerator#nextUniform(double,double)"],
    "org.apache.commons.math3.util.FastMathCalc#FastMathCalc()": ["org.apache.commons.math3.util.FastMathCalc.<init>()"],
    "org.apache.commons.math3.dfp.DfpField#setIEEEFlagsBits(int)": ["org.apache.commons.math3.dfp.DfpField.<staticinit>()"],
    "org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile#maximum()": [
        "org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile.Markers#height(int)",
        "org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile.<staticinit>()"
    ],
    "org.apache.commons.math3.geometry.euclidean.oned.Vector1D#scalarMultiply(double)": ["org.apache.commons.math3.geometry.euclidean.oned.Vector1D#Vector1D(double)"],
    "org.apache.commons.math3.linear.BlockFieldMatrix#getEntry(int,int)": [
        "org.apache.commons.math3.linear.BlockFieldMatrix#blockWidth(int)",
        "org.apache.commons.math3.linear.AbstractFieldMatrix#checkColumnIndex(int)",
        "org.apache.commons.math3.linear.BlockFieldMatrix.<staticinit>()",
        "org.apache.commons.math3.linear.AbstractFieldMatrix#checkRowIndex(int)"
    ],
    "org.apache.commons.math3.random.EmpiricalDistribution#kB(int)": [
        "org.apache.commons.math3.distribution.LogNormalDistribution#cumulativeProbability(double,double)",
        "org.apache.commons.math3.random.EmpiricalDistribution#getKernel(SummaryStatistics)",
        "org.apache.commons.math3.distribution.NormalDistribution#cumulativeProbability(double,double)",
        "org.apache.commons.math3.distribution.AbstractRealDistribution#cumulativeProbability(double,double)",
        "org.apache.commons.math3.distribution.ParetoDistribution#cumulativeProbability(double,double)",
        "org.apache.commons.math3.random.EmpiricalDistribution#getUpperBounds()"
    ],
    "org.apache.commons.math3.distribution.NormalDistribution#cumulativeProbability(double)": [
        "org.apache.commons.math3.util.FastMath.abs(double)",
        "org.apache.commons.math3.special.Erf.erfc(double)",
        "org.apache.commons.math3.distribution.NormalDistribution.<staticinit>()"
    ],
    "org.apache.commons.math3.random.AbstractWell#AbstractWell(int,int,int,int,int[])": [
        "org.apache.commons.math3.random.AbstractWell#setSeed(int[])",
        "org.apache.commons.math3.random.AbstractWell.<init>()",
        "org.apache.commons.math3.random.BitsStreamGenerator#BitsStreamGenerator()"
    ],
    "org.apache.commons.math3.stat.descriptive.SynchronizedSummaryStatistics#equals(Object)": ["org.apache.commons.math3.stat.descriptive.SummaryStatistics#equals(Object)"],
    "org.apache.commons.math3.linear.Array2DRowFieldMatrix#walkInRowOrder(FieldMatrixChangingVisitor<T extends FieldElement>)": [
        "org.apache.commons.math3.linear.Array2DRowFieldMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.AbstractFieldMatrix#getSubMatrix(int[],int[])$DefaultFieldMatrixChangingVisitor$1#visit(int,int,T extends FieldElement)",
        "org.apache.commons.math3.linear.DefaultFieldMatrixChangingVisitor#start(int,int,int,int,int,int)",
        "org.apache.commons.math3.linear.DefaultFieldMatrixChangingVisitor#visit(int,int,T extends FieldElement)",
        "org.apache.commons.math3.linear.DefaultFieldMatrixChangingVisitor#end()",
        "org.apache.commons.math3.linear.Array2DRowFieldMatrix#getColumnDimension()"
    ],
    "org.apache.commons.math3.optimization.direct.PowellOptimizer.LineSearch#search(double[],double[])": [
        "org.apache.commons.math3.optimization.univariate.BracketFinder#getHi()",
        "org.apache.commons.math3.optimization.univariate.BracketFinder#getLo()",
        "org.apache.commons.math3.optimization.univariate.BaseAbstractUnivariateOptimizer#optimize(int,UnivariateFunction,GoalType,double,double,double)",
        "org.apache.commons.math3.optimization.direct.BaseAbstractMultivariateOptimizer#getGoalType()",
        "org.apache.commons.math3.optimization.univariate.BracketFinder#search(UnivariateFunction,GoalType,double,double)",
        "org.apache.commons.math3.optimization.direct.PowellOptimizer.LineSearch#search(double[],double[])$UnivariateFunction$1.<init>()",
        "org.apache.commons.math3.optimization.univariate.BracketFinder#getMid()"
    ],
    "org.apache.commons.math3.util.MathArrays.distance(double[],double[])": [
        "org.apache.commons.math3.util.FastMath.sqrt(double)",
        "org.apache.commons.math3.util.MathArrays.checkEqualLength(double[],double[])"
    ],
    "org.apache.commons.math3.linear.ArrayFieldVector#ArrayFieldVector(T extends FieldElement[])": [
        "org.apache.commons.math3.util.MathUtils.checkNotNull(Object)",
        "org.apache.commons.math3.linear.ArrayFieldVector.<init>()",
        "org.apache.commons.math3.exception.util.LocalizedFormats.<staticinit>()"
    ],
    "org.apache.commons.math3.linear.AbstractFieldMatrix#hashCode()": [
        "org.apache.commons.math3.linear.BlockFieldMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.SparseFieldMatrix#getEntry(int,int)",
        "org.apache.commons.math3.linear.SparseFieldMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.BlockFieldMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.SparseFieldMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.Array2DRowFieldMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.Array2DRowFieldMatrix#getEntry(int,int)",
        "org.apache.commons.math3.linear.BlockFieldMatrix#getEntry(int,int)",
        "org.apache.commons.math3.linear.Array2DRowFieldMatrix#getColumnDimension()"
    ],
    "org.apache.commons.math3.stat.descriptive.MultivariateSummaryStatistics#checkEmpty()": ["org.apache.commons.math3.exception.util.LocalizedFormats.<staticinit>()"],
    "org.apache.commons.math3.geometry.partitioning.RegionFactory#recurseComplement(BSPTree<S extends Space>,Map<BSPTree<S extends Space>, BSPTree<S extends Space>>)": [
        "org.apache.commons.math3.geometry.partitioning.NodesSet#NodesSet()",
        "org.apache.commons.math3.geometry.partitioning.BoundaryAttribute#getPlusOutside()",
        "org.apache.commons.math3.geometry.partitioning.BSPTree#BSPTree(Object)",
        "org.apache.commons.math3.geometry.partitioning.BSPTree#getPlus()",
        "org.apache.commons.math3.geometry.partitioning.BSPTree#getCut()",
        "org.apache.commons.math3.geometry.partitioning.BoundaryAttribute#getPlusInside()",
        "org.apache.commons.math3.geometry.partitioning.AbstractSubHyperplane#copySelf()",
        "org.apache.commons.math3.geometry.partitioning.BSPTree#getMinus()",
        "org.apache.commons.math3.geometry.partitioning.RegionFactory#recurseComplement(BSPTree<S extends Space>,Map<BSPTree<S extends Space>, BSPTree<S extends Space>>)",
        "org.apache.commons.math3.geometry.partitioning.BSPTree#getAttribute()",
        "org.apache.commons.math3.geometry.partitioning.BoundaryAttribute#BoundaryAttribute(SubHyperplane<S extends Space>,SubHyperplane<S extends Space>,NodesSet<S extends Space>)",
        "org.apache.commons.math3.geometry.partitioning.BSPTree#BSPTree(SubHyperplane<S extends Space>,BSPTree<S extends Space>,BSPTree<S extends Space>,Object)"
    ],
    "org.apache.commons.math3.analysis.solvers.LaguerreSolver#solveComplex(double[],double,int)": [
        "org.apache.commons.math3.analysis.solvers.LaguerreSolver.ComplexSolver#solve(Complex[],Complex)",
        "org.apache.commons.math3.analysis.solvers.AbstractPolynomialSolver#setup(int,PolynomialFunction,double,double,double)",
        "org.apache.commons.math3.complex.ComplexUtils.convertToComplex(double[])",
        "org.apache.commons.math3.complex.Complex#Complex(double,double)",
        "org.apache.commons.math3.analysis.polynomials.PolynomialFunction#PolynomialFunction(double[])"
    ],
    "org.apache.commons.math3.random.RandomDataGenerator#nextWeibull(double,double)": [
        "org.apache.commons.math3.distribution.ExponentialDistribution#sample()",
        "org.apache.commons.math3.random.RandomDataGenerator#getRandomGenerator()",
        "org.apache.commons.math3.distribution.AbstractRealDistribution#sample()",
        "org.apache.commons.math3.distribution.WeibullDistribution.<staticinit>()",
        "org.apache.commons.math3.distribution.EnumeratedRealDistribution#sample()",
        "org.apache.commons.math3.distribution.WeibullDistribution#WeibullDistribution(RandomGenerator,double,double,double)",
        "org.apache.commons.math3.distribution.BetaDistribution#sample()",
        "org.apache.commons.math3.distribution.LogNormalDistribution#sample()",
        "org.apache.commons.math3.distribution.ParetoDistribution#sample()",
        "org.apache.commons.math3.distribution.UniformRealDistribution#sample()",
        "org.apache.commons.math3.distribution.NormalDistribution#sample()",
        "org.apache.commons.math3.distribution.ConstantRealDistribution#sample()",
        "org.apache.commons.math3.distribution.GammaDistribution#sample()"
    ],
    "org.apache.commons.math3.analysis.FunctionUtils.combine(BivariateFunction,UnivariateFunction,UnivariateFunction)": ["org.apache.commons.math3.analysis.FunctionUtils.combine(BivariateFunction,UnivariateFunction,UnivariateFunction)$UnivariateFunction$1.<init>()"],
    "org.apache.commons.math3.linear.AbstractRealMatrix#walkInColumnOrder(RealMatrixPreservingVisitor)": [
        "org.apache.commons.math3.linear.DiagonalMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.Array2DRowRealMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.DefaultRealMatrixPreservingVisitor#visit(int,int,double)",
        "org.apache.commons.math3.linear.SingularValueDecomposition#getCovariance(double)$DefaultRealMatrixPreservingVisitor$1#visit(int,int,double)",
        "org.apache.commons.math3.linear.DiagonalMatrix#getEntry(int,int)",
        "org.apache.commons.math3.linear.OpenMapRealMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.DiagonalMatrix#getRowDimension()",
        "org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator.Corrector#start(int,int,int,int,int,int)",
        "org.apache.commons.math3.linear.BlockRealMatrix#getEntry(int,int)",
        "org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator.Corrector#visit(int,int,double)",
        "org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator.Corrector#end()",
        "org.apache.commons.math3.linear.BlockRealMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.AbstractRealMatrix#getNorm()$RealMatrixPreservingVisitor$1#start(int,int,int,int,int,int)",
        "org.apache.commons.math3.linear.AbstractRealMatrix#transpose()$DefaultRealMatrixPreservingVisitor$1#visit(int,int,double)",
        "org.apache.commons.math3.linear.DefaultRealMatrixPreservingVisitor#start(int,int,int,int,int,int)",
        "org.apache.commons.math3.linear.AbstractRealMatrix#copySubMatrix(int,int,int,int,double[][])$DefaultRealMatrixPreservingVisitor$1#start(int,int,int,int,int,int)",
        "org.apache.commons.math3.linear.AbstractRealMatrix#getNorm()$RealMatrixPreservingVisitor$1#end()",
        "org.apache.commons.math3.linear.AbstractRealMatrix#getFrobeniusNorm()$RealMatrixPreservingVisitor$1#end()",
        "org.apache.commons.math3.linear.OpenMapRealMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.AbstractRealMatrix#getFrobeniusNorm()$RealMatrixPreservingVisitor$1#visit(int,int,double)",
        "org.apache.commons.math3.linear.DefaultRealMatrixPreservingVisitor#end()",
        "org.apache.commons.math3.linear.AbstractRealMatrix#getFrobeniusNorm()$RealMatrixPreservingVisitor$1#start(int,int,int,int,int,int)",
        "org.apache.commons.math3.linear.OpenMapRealMatrix#getEntry(int,int)",
        "org.apache.commons.math3.linear.AbstractRealMatrix#getNorm()$RealMatrixPreservingVisitor$1#visit(int,int,double)",
        "org.apache.commons.math3.linear.AbstractRealMatrix#copySubMatrix(int,int,int,int,double[][])$DefaultRealMatrixPreservingVisitor$1#visit(int,int,double)",
        "org.apache.commons.math3.linear.Array2DRowRealMatrix#getEntry(int,int)",
        "org.apache.commons.math3.linear.Array2DRowRealMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.BlockRealMatrix#getColumnDimension()"
    ],
    "org.apache.commons.math3.stat.descriptive.MultivariateSummaryStatistics#getMax()": ["org.apache.commons.math3.stat.descriptive.MultivariateSummaryStatistics#getResults(StorelessUnivariateStatistic[])"],
    "org.apache.commons.math3.analysis.solvers.FieldBracketingNthOrderBrentSolver#solve(int,RealFieldUnivariateFunction<T extends RealFieldElement>,T extends RealFieldElement,T extends RealFieldElement,T extends RealFieldElement,AllowedSolution)": [
        "org.apache.commons.math3.util.MathUtils.checkNotNull(Object)",
        "org.apache.commons.math3.analysis.solvers.FieldBracketingNthOrderBrentSolver.<staticinit>()",
        "org.apache.commons.math3.util.BigRealField#getZero()",
        "org.apache.commons.math3.analysis.differentiation.SparseGradient#getField()$Field$1#getZero()",
        "org.apache.commons.math3.util.Decimal64Field#getZero()",
        "org.apache.commons.math3.dfp.DfpField#getZero()",
        "org.apache.commons.math3.util.Precision.equals(double,double,int)",
        "org.apache.commons.math3.exception.MathInternalError#MathInternalError(Throwable)",
        "org.apache.commons.math3.ode.events.FieldEventState#evaluateStep(FieldStepInterpolator<T extends RealFieldElement>)$RealFieldUnivariateFunction$1#value(T extends RealFieldElement)",
        "org.apache.commons.math3.exception.NoBracketingException#NoBracketingException(double,double,double,double)",
        "org.apache.commons.math3.util.IntegerSequence.Incrementor#withMaximalCount(int)",
        "org.apache.commons.math3.util.IntegerSequence.Incrementor#withStart(int)",
        "org.apache.commons.math3.analysis.solvers.FieldBracketingNthOrderBrentSolver#guessX(T extends RealFieldElement,T extends RealFieldElement[],T extends RealFieldElement[],int,int)",
        "org.apache.commons.math3.util.IntegerSequence.Incrementor#increment()",
        "org.apache.commons.math3.analysis.differentiation.DerivativeStructure#getField()$Field$1#getZero()",
        "org.apache.commons.math3.fraction.FractionField#getZero()",
        "org.apache.commons.math3.analysis.solvers.AllowedSolution.<staticinit>()",
        "org.apache.commons.math3.complex.ComplexField#getZero()",
        "org.apache.commons.math3.fraction.BigFractionField#getZero()",
        "org.apache.commons.math3.util.MathArrays.buildArray(Field<T>,int)"
    ],
    "org.apache.commons.math3.optimization.SimpleVectorValueChecker#SimpleVectorValueChecker(double,double,int)": [
        "org.apache.commons.math3.optimization.SimpleVectorValueChecker.<init>()",
        "org.apache.commons.math3.optimization.AbstractConvergenceChecker#AbstractConvergenceChecker(double,double)"
    ],
    "org.apache.commons.math3.stat.inference.KolmogorovSmirnovTest.fillBooleanArrayRandomlyWithFixedNumberTrueValues(boolean[],int,RandomGenerator)": [
        "org.apache.commons.math3.random.BitsStreamGenerator#nextInt(int)",
        "org.apache.commons.math3.random.AbstractRandomGenerator#nextInt(int)",
        "org.apache.commons.math3.random.SynchronizedRandomGenerator#nextInt(int)",
        "org.apache.commons.math3.random.RandomAdaptor#nextInt(int)",
        "org.apache.commons.math3.random.RandomGeneratorFactory.createRandomGenerator(Random)$RandomGenerator$1#nextInt(int)"
    ],
    "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer.max(RealMatrix)": [
        "org.apache.commons.math3.linear.DiagonalMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.Array2DRowRealMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.BlockFieldMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.SparseFieldMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.DiagonalMatrix#getEntry(int,int)",
        "org.apache.commons.math3.linear.OpenMapRealMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.OpenMapRealMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.DiagonalMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.OpenMapRealMatrix#getEntry(int,int)",
        "org.apache.commons.math3.linear.BlockRealMatrix#getEntry(int,int)",
        "org.apache.commons.math3.linear.Array2DRowFieldMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.SparseFieldMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.BlockFieldMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.Array2DRowRealMatrix#getEntry(int,int)",
        "org.apache.commons.math3.linear.BlockRealMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.Array2DRowRealMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.Array2DRowFieldMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.BlockRealMatrix#getColumnDimension()"
    ],
    "org.apache.commons.math3.geometry.euclidean.twod.Line#isParallelTo(Line)": [
        "org.apache.commons.math3.util.FastMath.abs(double)",
        "org.apache.commons.math3.util.MathArrays.linearCombination(double,double,double,double)"
    ],
    "org.apache.commons.math3.userguide.genetics.ImageEvolutionExample.Display.ImagePainter#ImagePainter(int,int)": ["org.apache.commons.math3.userguide.genetics.ImageEvolutionExample.Display.ImagePainter.<init>()"],
    "org.apache.commons.math3.util.TransformerMap#transform(Object)": [
        "org.apache.commons.math3.util.DefaultTransformer#transform(Object)",
        "org.apache.commons.math3.util.TransformerMap#transform(Object)",
        "org.apache.commons.math3.util.TransformerMap#getTransformer(Class<?>)"
    ],
    "org.apache.commons.math3.analysis.differentiation.DSCompiler#checkCompatibility(DSCompiler)": ["org.apache.commons.math3.exception.DimensionMismatchException#DimensionMismatchException(int,int)"],
    "org.apache.commons.math3.analysis.integration.BaseAbstractUnivariateIntegrator#computeObjectiveValue(double)": [
        "org.apache.commons.math3.analysis.FunctionUtils.multiply(DifferentiableUnivariateFunction[]...)$UnivariateFunction$1$UnivariateFunction$1#derivative()$UnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.polynomials.PolynomialSplineFunction#value(double)",
        "org.apache.commons.math3.analysis.function.Gaussian#value(double)",
        "org.apache.commons.math3.analysis.function.Tanh#value(double)",
        "org.apache.commons.math3.analysis.function.Inverse#value(double)",
        "org.apache.commons.math3.analysis.function.HarmonicOscillator#value(double)",
        "org.apache.commons.math3.analysis.FunctionUtils.fix1stArgument(BivariateFunction,double)$UnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.function.Asin#value(double)",
        "org.apache.commons.math3.analysis.function.Asinh#value(double)",
        "org.apache.commons.math3.analysis.FunctionUtils.multiply(UnivariateFunction[]...)$UnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.function.Atan#value(double)",
        "org.apache.commons.math3.analysis.FunctionUtils.toDifferentiableUnivariateFunction(UnivariateDifferentiableFunction)$DifferentiableUnivariateFunction$1#value(double)",
        "org.apache.commons.math3.exception.MaxCountExceededException#getMax()",
        "org.apache.commons.math3.analysis.function.Cbrt#value(double)",
        "org.apache.commons.math3.analysis.polynomials.PolynomialFunctionLagrangeForm#value(double)",
        "org.apache.commons.math3.analysis.function.Exp#value(double)",
        "org.apache.commons.math3.special.BesselJ#value(double)",
        "org.apache.commons.math3.analysis.polynomials.PolynomialFunctionNewtonForm#value(double)",
        "org.apache.commons.math3.analysis.FunctionUtils.add(UnivariateFunction[]...)$UnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.function.Sin#value(double)",
        "org.apache.commons.math3.analysis.function.Cos#value(double)",
        "org.apache.commons.math3.analysis.interpolation.UnivariatePeriodicInterpolator#interpolate(double[],double[])$UnivariateFunction$1#value(double)",
        "org.apache.commons.math3.exception.TooManyEvaluationsException#TooManyEvaluationsException(Number)",
        "org.apache.commons.math3.analysis.function.Log10#value(double)",
        "org.apache.commons.math3.analysis.function.Sqrt#value(double)",
        "org.apache.commons.math3.analysis.function.Log#value(double)",
        "org.apache.commons.math3.analysis.function.Sinc#value(double)",
        "org.apache.commons.math3.ode.events.EventState#evaluateStep(StepInterpolator)$UnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.function.Minus#value(double)",
        "org.apache.commons.math3.analysis.integration.IterativeLegendreGaussIntegrator#stage(int)$UnivariateFunction$1#value(double)",
        "org.apache.commons.math3.optimization.general.NonLinearConjugateGradientOptimizer.LineSearchFunction#value(double)",
        "org.apache.commons.math3.analysis.function.Floor#value(double)",
        "org.apache.commons.math3.analysis.FunctionUtils.multiply(DifferentiableUnivariateFunction[]...)$DifferentiableUnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.FunctionUtils.combine(BivariateFunction,UnivariateFunction,UnivariateFunction)$UnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.FunctionUtils.add(DifferentiableUnivariateFunction[]...)$UnivariateFunction$1$UnivariateFunction$1#derivative()$UnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.function.Sinh#value(double)",
        "org.apache.commons.math3.analysis.FunctionUtils.multiply(UnivariateDifferentiableFunction[]...)$UnivariateDifferentiableFunction$1#value(double)",
        "org.apache.commons.math3.analysis.function.Tan#value(double)",
        "org.apache.commons.math3.distribution.AbstractRealDistribution#inverseCumulativeProbability(double)$UnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.FunctionUtils.add(DifferentiableUnivariateFunction[]...)$DifferentiableUnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.function.Ceil#value(double)",
        "org.apache.commons.math3.analysis.function.Logistic#value(double)",
        "org.apache.commons.math3.analysis.function.Signum#value(double)",
        "org.apache.commons.math3.analysis.function.Constant#value(double)",
        "org.apache.commons.math3.analysis.function.Atanh#value(double)",
        "org.apache.commons.math3.analysis.FunctionUtils.compose(DifferentiableUnivariateFunction[]...)$UnivariateFunction$1$UnivariateFunction$1#derivative()$UnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.FunctionUtils.add(UnivariateDifferentiableFunction[]...)$UnivariateDifferentiableFunction$1#value(double)",
        "org.apache.commons.math3.analysis.function.Abs#value(double)",
        "org.apache.commons.math3.analysis.differentiation.FiniteDifferencesDifferentiator#differentiate(UnivariateFunction)$UnivariateDifferentiableFunction$1#value(double)",
        "org.apache.commons.math3.analysis.function.Identity#value(double)",
        "org.apache.commons.math3.analysis.function.Expm1#value(double)",
        "org.apache.commons.math3.analysis.function.Logit#value(double)",
        "org.apache.commons.math3.analysis.function.Log1p#value(double)",
        "org.apache.commons.math3.analysis.FunctionUtils.fix2ndArgument(BivariateFunction,double)$UnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.FunctionUtils.toUnivariateDifferential(DifferentiableUnivariateFunction)$UnivariateDifferentiableFunction$1#value(double)",
        "org.apache.commons.math3.analysis.FunctionUtils.toDifferentiableUnivariateFunction(UnivariateDifferentiableFunction)$UnivariateFunction$1$UnivariateFunction$1#derivative()$UnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.polynomials.PolynomialFunction#value(double)",
        "org.apache.commons.math3.analysis.function.Rint#value(double)",
        "org.apache.commons.math3.analysis.FunctionUtils.compose(UnivariateFunction[]...)$UnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.function.Cosh#value(double)",
        "org.apache.commons.math3.optimization.direct.PowellOptimizer.LineSearch#search(double[],double[])$UnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.FunctionUtils.compose(DifferentiableUnivariateFunction[]...)$DifferentiableUnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.function.Acosh#value(double)",
        "org.apache.commons.math3.analysis.function.StepFunction#value(double)",
        "org.apache.commons.math3.analysis.FunctionUtils.compose(UnivariateDifferentiableFunction[]...)$UnivariateDifferentiableFunction$1#value(double)",
        "org.apache.commons.math3.analysis.function.Acos#value(double)",
        "org.apache.commons.math3.analysis.function.Power#value(double)",
        "org.apache.commons.math3.optim.nonlinear.scalar.LineSearch#search(double[],double[])$UnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.function.Sigmoid#value(double)",
        "org.apache.commons.math3.util.IntegerSequence.Incrementor#increment()",
        "org.apache.commons.math3.analysis.function.Ulp#value(double)"
    ],
    "org.apache.commons.math3.analysis.interpolation.BicubicSplineInterpolatingFunction#computeSplineCoefficients(double[])": ["org.apache.commons.math3.analysis.interpolation.BicubicSplineInterpolatingFunction.<staticinit>()"],
    "org.apache.commons.math3.ode.nonstiff.AdamsNordsieckFieldTransformer#buildP(int)": [
        "org.apache.commons.math3.linear.Array2DRowFieldMatrix#Array2DRowFieldMatrix(T extends FieldElement[][],boolean)",
        "org.apache.commons.math3.util.BigRealField#getZero()",
        "org.apache.commons.math3.analysis.differentiation.SparseGradient#getField()$Field$1#getZero()",
        "org.apache.commons.math3.util.Decimal64Field#getZero()",
        "org.apache.commons.math3.dfp.DfpField#getZero()",
        "org.apache.commons.math3.analysis.differentiation.SparseGradient#add(double)",
        "org.apache.commons.math3.util.MathArrays.buildArray(Field<T>,int,int)",
        "org.apache.commons.math3.analysis.differentiation.DerivativeStructure#add(double)",
        "org.apache.commons.math3.analysis.differentiation.DerivativeStructure#getField()$Field$1#getZero()",
        "org.apache.commons.math3.fraction.FractionField#getZero()",
        "org.apache.commons.math3.complex.ComplexField#getZero()",
        "org.apache.commons.math3.fraction.BigFractionField#getZero()",
        "org.apache.commons.math3.util.Decimal64#add(double)",
        "org.apache.commons.math3.dfp.Dfp#add(double)"
    ],
    "org.apache.commons.math3.analysis.polynomials.PolynomialFunctionLagrangeForm#getCoefficients()": ["org.apache.commons.math3.analysis.polynomials.PolynomialFunctionLagrangeForm#computeCoefficients()"],
    "org.apache.commons.math3.util.Decimal64#getField()": ["org.apache.commons.math3.util.Decimal64Field.getInstance()"],
    "org.apache.commons.math3.analysis.FunctionUtils.toDifferentiableMultivariateVectorFunction(MultivariateDifferentiableVectorFunction)$DifferentiableMultivariateVectorFunction$1#value(double[])": [
        "org.apache.commons.math3.fitting.AbstractCurveFitter.TheoreticalValuesFunction#getModelFunction()$MultivariateVectorFunction$1#value(double[])",
        "org.apache.commons.math3.optimization.fitting.CurveFitter.TheoreticalValuesFunction#value(double[])",
        "org.apache.commons.math3.analysis.FunctionUtils.toDifferentiableMultivariateFunction(MultivariateDifferentiableFunction)$MultivariateVectorFunction$1$MultivariateVectorFunction$1#gradient()$MultivariateVectorFunction$1#value(double[])",
        "org.apache.commons.math3.analysis.FunctionUtils.toMultivariateDifferentiableVectorFunction(DifferentiableMultivariateVectorFunction)$MultivariateDifferentiableVectorFunction$1#value(double[])",
        "org.apache.commons.math3.analysis.FunctionUtils.toDifferentiableMultivariateVectorFunction(MultivariateDifferentiableVectorFunction)$DifferentiableMultivariateVectorFunction$1#value(double[])",
        "org.apache.commons.math3.fitting.CurveFitter.TheoreticalValuesFunction#getModelFunction()$MultivariateVectorFunction$1#value(double[])",
        "org.apache.commons.math3.analysis.differentiation.GradientFunction#value(double[])",
        "org.apache.commons.math3.optimization.fitting.CurveFitter.OldTheoreticalValuesFunction#value(double[])"
    ],
    "org.apache.commons.math3.analysis.differentiation.DSCompiler#getPartialDerivativeIndex(int[]...)": [
        "org.apache.commons.math3.exception.DimensionMismatchException#DimensionMismatchException(int,int)",
        "org.apache.commons.math3.analysis.differentiation.DSCompiler#getFreeParameters()",
        "org.apache.commons.math3.analysis.differentiation.DSCompiler.getPartialDerivativeIndex(int,int,int[][],int[]...)"
    ],
    "org.apache.commons.math3.analysis.integration.IterativeLegendreGaussIntegrator#IterativeLegendreGaussIntegrator(int,double,double)": [
        "org.apache.commons.math3.analysis.integration.BaseAbstractUnivariateIntegrator.<staticinit>()",
        "org.apache.commons.math3.analysis.integration.IterativeLegendreGaussIntegrator#IterativeLegendreGaussIntegrator(int,double,double,int,int)"
    ],
    "org.apache.commons.math3.stat.descriptive.summary.Sum#Sum(Sum)": [
        "org.apache.commons.math3.stat.descriptive.summary.Sum.copy(Sum,Sum)",
        "org.apache.commons.math3.stat.descriptive.summary.Sum.<init>()",
        "org.apache.commons.math3.stat.descriptive.AbstractStorelessUnivariateStatistic.<init>()"
    ],
    "org.apache.commons.math3.optimization.fitting.CurveFitter#CurveFitter(DifferentiableMultivariateVectorOptimizer)": ["org.apache.commons.math3.optimization.fitting.CurveFitter.<init>()"],
    "org.apache.commons.math3.util.BigReal#BigReal(BigInteger,MathContext)": ["org.apache.commons.math3.util.BigReal.<init>()"],
    "org.apache.commons.math3.optimization.linear.SimplexTableau#hashCode()": ["org.apache.commons.math3.optimization.linear.LinearObjectiveFunction#hashCode()"],
    "org.apache.commons.math3.userguide.ExampleUtils.showExampleFrame(ExampleFrame)$ActionListener$1$ActionListener$1#run()$ActionListener$1#actionPerformed(ActionEvent)": [
        "org.apache.commons.math3.userguide.geometry.GeometryExample.Display#getMainPanel()",
        "org.apache.commons.math3.userguide.ExampleUtils.ExampleFrame#getMainPanel()",
        "org.apache.commons.math3.userguide.RealDistributionComparison.Display#getMainPanel()",
        "org.apache.commons.math3.userguide.filter.CannonballExample.Display#getMainPanel()",
        "org.apache.commons.math3.userguide.ExampleUtils.getScreenShot(Component)",
        "org.apache.commons.math3.userguide.filter.ConstantVoltageExample.Display#getMainPanel()"
    ],
    "org.apache.commons.math3.optimization.direct.MultiDirectionalSimplex#MultiDirectionalSimplex(double[],double,double)": [
        "org.apache.commons.math3.optimization.direct.AbstractSimplex#AbstractSimplex(double[])",
        "org.apache.commons.math3.optimization.direct.MultiDirectionalSimplex.<init>()"
    ],
    "org.apache.commons.math3.optim.MaxIter.unlimited()": ["org.apache.commons.math3.optim.MaxIter#MaxIter(int)"],
    "org.apache.commons.math3.genetics.RandomKeyMutation#mutate(Chromosome)": [
        "org.apache.commons.math3.random.SynchronizedRandomGenerator#nextDouble()",
        "org.apache.commons.math3.genetics.AbstractListChromosome#getRepresentation()",
        "org.apache.commons.math3.genetics.GeneticAlgorithm.getRandomGenerator()",
        "org.apache.commons.math3.random.RandomAdaptor#nextDouble()",
        "org.apache.commons.math3.random.RandomGeneratorFactory.createRandomGenerator(Random)$RandomGenerator$1#nextInt(int)",
        "org.apache.commons.math3.exception.util.LocalizedFormats.<staticinit>()",
        "org.apache.commons.math3.random.BitsStreamGenerator#nextInt(int)",
        "org.apache.commons.math3.random.AbstractRandomGenerator#nextInt(int)",
        "org.apache.commons.math3.random.SynchronizedRandomGenerator#nextInt(int)",
        "org.apache.commons.math3.random.RandomAdaptor#nextInt(int)",
        "org.apache.commons.math3.random.RandomGeneratorFactory.createRandomGenerator(Random)$RandomGenerator$1#nextDouble()",
        "org.apache.commons.math3.random.BitsStreamGenerator#nextDouble()"
    ],
    "org.apache.commons.math3.userguide.genetics.HelloWorldExample.getInitialPopulation()": [
        "org.apache.commons.math3.userguide.genetics.HelloWorldExample.<staticinit>()",
        "org.apache.commons.math3.userguide.genetics.HelloWorldExample.randomRepresentation(int)",
        "org.apache.commons.math3.userguide.genetics.HelloWorldExample.StringChromosome#StringChromosome(List<Character>)",
        "org.apache.commons.math3.genetics.ElitisticListPopulation#ElitisticListPopulation(List<Chromosome>,int,double)"
    ],
    "org.apache.commons.math3.optimization.linear.SimplexTableau#writeObject(ObjectOutputStream)": ["org.apache.commons.math3.linear.MatrixUtils.serializeRealMatrix(RealMatrix,ObjectOutputStream)"],
    "org.apache.commons.math3.stat.regression.MillerUpdatingRegression#vmove(int,int)": [
        "org.apache.commons.math3.util.FastMath.abs(double)",
        "org.apache.commons.math3.stat.regression.MillerUpdatingRegression#ss()",
        "org.apache.commons.math3.util.FastMath.sqrt(double)"
    ],
    "org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile.Marker#next(Marker)": ["org.apache.commons.math3.util.MathUtils.checkNotNull(Object)"],
    "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer.triu(RealMatrix,int)": [
        "org.apache.commons.math3.linear.DiagonalMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.Array2DRowRealMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.BlockFieldMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.SparseFieldMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.DiagonalMatrix#getEntry(int,int)",
        "org.apache.commons.math3.linear.OpenMapRealMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.OpenMapRealMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.DiagonalMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.OpenMapRealMatrix#getEntry(int,int)",
        "org.apache.commons.math3.linear.Array2DRowRealMatrix#Array2DRowRealMatrix(double[][],boolean)",
        "org.apache.commons.math3.linear.BlockRealMatrix#getEntry(int,int)",
        "org.apache.commons.math3.linear.Array2DRowFieldMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.BlockFieldMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.SparseFieldMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.BlockRealMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.Array2DRowRealMatrix#getEntry(int,int)",
        "org.apache.commons.math3.linear.Array2DRowRealMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.Array2DRowFieldMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.BlockRealMatrix#getColumnDimension()"
    ],
    "org.apache.commons.math3.geometry.partitioning.BSPTree#getCell(Vector<S extends Space>)": ["org.apache.commons.math3.geometry.partitioning.BSPTree#getCell(Point<S extends Space>,double)"],
    "org.apache.commons.math3.stat.descriptive.StatisticalSummaryValues#getStandardDeviation()": ["org.apache.commons.math3.util.FastMath.sqrt(double)"],
    "org.apache.commons.math3.analysis.integration.gauss.HermiteRuleFactory.<init>()": ["org.apache.commons.math3.analysis.integration.gauss.BaseRuleFactory.<init>()"],
    "org.apache.commons.math3.fraction.FractionFormat#FractionFormat(NumberFormat,NumberFormat)": [
        "org.apache.commons.math3.fraction.AbstractFormat#AbstractFormat(NumberFormat,NumberFormat)",
        "org.apache.commons.math3.fraction.FractionFormat.<init>()"
    ],
    "org.apache.commons.math3.distribution.EnumeratedIntegerDistribution#EnumeratedIntegerDistribution(int[],double[])": [
        "org.apache.commons.math3.random.Well19937c#Well19937c()",
        "org.apache.commons.math3.distribution.EnumeratedIntegerDistribution#EnumeratedIntegerDistribution(RandomGenerator,int[],double[])"
    ],
    "org.apache.commons.math3.stat.descriptive.moment.VectorialMean#getResult()": ["org.apache.commons.math3.stat.descriptive.moment.Mean#getResult()"],
    "org.apache.commons.math3.util.BigReal#BigReal(long)": ["org.apache.commons.math3.util.BigReal.<init>()"],
    "org.apache.commons.math3.optimization.fitting.HarmonicFitter.ParameterGuesser#sortObservations(WeightedObservedPoint[])": ["org.apache.commons.math3.optimization.fitting.WeightedObservedPoint#getX()"],
    "org.apache.commons.math3.ode.nonstiff.GraggBulirschStoerStepInterpolator#computeCoefficients(int,double)": ["org.apache.commons.math3.ode.nonstiff.GraggBulirschStoerStepInterpolator#resetTables(int)"],
    "org.apache.commons.math3.exception.util.ExceptionContext#writeObject(ObjectOutputStream)": [
        "org.apache.commons.math3.exception.util.ExceptionContext#serializeContext(ObjectOutputStream)",
        "org.apache.commons.math3.exception.util.ExceptionContext#serializeMessages(ObjectOutputStream)"
    ],
    "org.apache.commons.math3.optimization.general.AbstractScalarDifferentiableOptimizer#AbstractScalarDifferentiableOptimizer(ConvergenceChecker<PointValuePair>)": [
        "org.apache.commons.math3.optimization.direct.BaseAbstractMultivariateOptimizer#BaseAbstractMultivariateOptimizer(ConvergenceChecker<PointValuePair>)",
        "org.apache.commons.math3.optimization.general.AbstractScalarDifferentiableOptimizer.<init>()"
    ],
    "org.apache.commons.math3.distribution.WeibullDistribution#getNumericalMean()": ["org.apache.commons.math3.distribution.WeibullDistribution#calculateNumericalMean()"],
    "org.apache.commons.math3.geometry.euclidean.twod.Line#Line(Vector2D,double)": [
        "org.apache.commons.math3.geometry.euclidean.twod.Line.<staticinit>()",
        "org.apache.commons.math3.geometry.euclidean.twod.Line#Line(Vector2D,double,double)"
    ],
    "org.apache.commons.math3.distribution.AbstractRealDistribution#inverseCumulativeProbability(double)": [
        "org.apache.commons.math3.distribution.CauchyDistribution#getNumericalMean()",
        "org.apache.commons.math3.distribution.ChiSquaredDistribution#getSupportUpperBound()",
        "org.apache.commons.math3.distribution.LevyDistribution#getSupportUpperBound()",
        "org.apache.commons.math3.distribution.LaplaceDistribution#getSupportUpperBound()",
        "org.apache.commons.math3.distribution.EnumeratedRealDistribution#isSupportConnected()",
        "org.apache.commons.math3.distribution.TDistribution#getNumericalMean()",
        "org.apache.commons.math3.distribution.EnumeratedRealDistribution#getNumericalMean()",
        "org.apache.commons.math3.random.EmpiricalDistribution#getNumericalMean()",
        "org.apache.commons.math3.distribution.UniformRealDistribution#getNumericalVariance()",
        "org.apache.commons.math3.distribution.WeibullDistribution#getSolverAbsoluteAccuracy()",
        "org.apache.commons.math3.distribution.TDistribution#getNumericalVariance()",
        "org.apache.commons.math3.distribution.WeibullDistribution#cumulativeProbability(double)",
        "org.apache.commons.math3.distribution.WeibullDistribution#isSupportConnected()",
        "org.apache.commons.math3.distribution.GumbelDistribution#getSupportUpperBound()",
        "org.apache.commons.math3.distribution.EnumeratedRealDistribution#getNumericalVariance()",
        "org.apache.commons.math3.random.EmpiricalDistribution#getSupportLowerBound()",
        "org.apache.commons.math3.analysis.solvers.UnivariateSolverUtils.solve(UnivariateFunction,double,double,double)",
        "org.apache.commons.math3.distribution.FDistribution#getSolverAbsoluteAccuracy()",
        "org.apache.commons.math3.distribution.ParetoDistribution#getNumericalVariance()",
        "org.apache.commons.math3.distribution.LogisticDistribution#getNumericalVariance()",
        "org.apache.commons.math3.distribution.WeibullDistribution#getSupportLowerBound()",
        "org.apache.commons.math3.distribution.GammaDistribution#getNumericalMean()",
        "org.apache.commons.math3.distribution.TDistribution#isSupportConnected()",
        "org.apache.commons.math3.distribution.NakagamiDistribution#getSolverAbsoluteAccuracy()",
        "org.apache.commons.math3.distribution.CauchyDistribution#getNumericalVariance()",
        "org.apache.commons.math3.distribution.TriangularDistribution#getNumericalMean()",
        "org.apache.commons.math3.distribution.NormalDistribution#getSupportLowerBound()",
        "org.apache.commons.math3.distribution.ConstantRealDistribution#getSupportUpperBound()",
        "org.apache.commons.math3.distribution.GumbelDistribution#getSupportLowerBound()",
        "org.apache.commons.math3.distribution.LogisticDistribution#cumulativeProbability(double)",
        "org.apache.commons.math3.distribution.NormalDistribution#isSupportConnected()",
        "org.apache.commons.math3.distribution.NakagamiDistribution#cumulativeProbability(double)",
        "org.apache.commons.math3.distribution.ConstantRealDistribution#cumulativeProbability(double)",
        "org.apache.commons.math3.distribution.GammaDistribution#getNumericalVariance()",
        "org.apache.commons.math3.distribution.ExponentialDistribution#getSupportLowerBound()",
        "org.apache.commons.math3.distribution.LogNormalDistribution#getNumericalMean()",
        "org.apache.commons.math3.distribution.WeibullDistribution#getSupportUpperBound()",
        "org.apache.commons.math3.distribution.LogisticDistribution#getNumericalMean()",
        "org.apache.commons.math3.distribution.ExponentialDistribution#getNumericalVariance()",
        "org.apache.commons.math3.distribution.ExponentialDistribution#isSupportConnected()",
        "org.apache.commons.math3.distribution.NormalDistribution#getNumericalMean()",
        "org.apache.commons.math3.util.FastMath.sqrt(double)",
        "org.apache.commons.math3.distribution.WeibullDistribution#getNumericalMean()",
        "org.apache.commons.math3.distribution.LogNormalDistribution#getSupportUpperBound()",
        "org.apache.commons.math3.distribution.TriangularDistribution#getNumericalVariance()",
        "org.apache.commons.math3.distribution.GumbelDistribution#isSupportConnected()",
        "org.apache.commons.math3.distribution.FDistribution#isSupportConnected()",
        "org.apache.commons.math3.distribution.BetaDistribution#getSupportUpperBound()",
        "org.apache.commons.math3.distribution.GumbelDistribution#getNumericalMean()",
        "org.apache.commons.math3.distribution.TriangularDistribution#getSupportLowerBound()",
        "org.apache.commons.math3.distribution.FDistribution#getSupportUpperBound()",
        "org.apache.commons.math3.distribution.CauchyDistribution#isSupportConnected()",
        "org.apache.commons.math3.distribution.ConstantRealDistribution#getNumericalVariance()",
        "org.apache.commons.math3.distribution.ChiSquaredDistribution#cumulativeProbability(double)",
        "org.apache.commons.math3.distribution.UniformRealDistribution#cumulativeProbability(double)",
        "org.apache.commons.math3.distribution.CauchyDistribution#getSupportLowerBound()",
        "org.apache.commons.math3.distribution.ChiSquaredDistribution#getSupportLowerBound()",
        "org.apache.commons.math3.distribution.AbstractRealDistribution#inverseCumulativeProbability(double)$UnivariateFunction$1.<init>()",
        "org.apache.commons.math3.distribution.ParetoDistribution#cumulativeProbability(double)",
        "org.apache.commons.math3.distribution.NakagamiDistribution#getNumericalMean()",
        "org.apache.commons.math3.distribution.LevyDistribution#cumulativeProbability(double)",
        "org.apache.commons.math3.random.EmpiricalDistribution#cumulativeProbability(double)",
        "org.apache.commons.math3.distribution.NormalDistribution#getNumericalVariance()",
        "org.apache.commons.math3.distribution.LevyDistribution#isSupportConnected()",
        "org.apache.commons.math3.distribution.LogisticDistribution#getSupportLowerBound()",
        "org.apache.commons.math3.distribution.ParetoDistribution#getSupportLowerBound()",
        "org.apache.commons.math3.random.EmpiricalDistribution#getSupportUpperBound()",
        "org.apache.commons.math3.distribution.CauchyDistribution#cumulativeProbability(double)",
        "org.apache.commons.math3.distribution.GammaDistribution#getSolverAbsoluteAccuracy()",
        "org.apache.commons.math3.distribution.NakagamiDistribution#getSupportUpperBound()",
        "org.apache.commons.math3.distribution.LogNormalDistribution#isSupportConnected()",
        "org.apache.commons.math3.distribution.UniformRealDistribution#getSupportLowerBound()",
        "org.apache.commons.math3.distribution.LaplaceDistribution#cumulativeProbability(double)",
        "org.apache.commons.math3.distribution.TriangularDistribution#cumulativeProbability(double)",
        "org.apache.commons.math3.distribution.LogisticDistribution#isSupportConnected()",
        "org.apache.commons.math3.distribution.EnumeratedRealDistribution#getSupportLowerBound()",
        "org.apache.commons.math3.distribution.TriangularDistribution#getSolverAbsoluteAccuracy()",
        "org.apache.commons.math3.distribution.LaplaceDistribution#isSupportConnected()",
        "org.apache.commons.math3.distribution.TDistribution#getSupportLowerBound()",
        "org.apache.commons.math3.distribution.LogNormalDistribution#cumulativeProbability(double)",
        "org.apache.commons.math3.distribution.FDistribution#getNumericalMean()",
        "org.apache.commons.math3.distribution.ParetoDistribution#getSupportUpperBound()",
        "org.apache.commons.math3.distribution.FDistribution#cumulativeProbability(double)",
        "org.apache.commons.math3.random.EmpiricalDistribution#getNumericalVariance()",
        "org.apache.commons.math3.distribution.ExponentialDistribution#getSolverAbsoluteAccuracy()",
        "org.apache.commons.math3.distribution.LevyDistribution#getNumericalMean()",
        "org.apache.commons.math3.distribution.ChiSquaredDistribution#getSolverAbsoluteAccuracy()",
        "org.apache.commons.math3.distribution.NakagamiDistribution#getSupportLowerBound()",
        "org.apache.commons.math3.distribution.ChiSquaredDistribution#getNumericalVariance()",
        "org.apache.commons.math3.distribution.ParetoDistribution#getNumericalMean()",
        "org.apache.commons.math3.distribution.TDistribution#getSolverAbsoluteAccuracy()",
        "org.apache.commons.math3.distribution.LaplaceDistribution#getNumericalVariance()",
        "org.apache.commons.math3.distribution.LevyDistribution#getNumericalVariance()",
        "org.apache.commons.math3.distribution.UniformRealDistribution#getSupportUpperBound()",
        "org.apache.commons.math3.distribution.GammaDistribution#getSupportUpperBound()",
        "org.apache.commons.math3.distribution.TDistribution#getSupportUpperBound()",
        "org.apache.commons.math3.distribution.EnumeratedRealDistribution#getSupportUpperBound()",
        "org.apache.commons.math3.distribution.NakagamiDistribution#isSupportConnected()",
        "org.apache.commons.math3.distribution.TDistribution#cumulativeProbability(double)",
        "org.apache.commons.math3.distribution.TriangularDistribution#isSupportConnected()",
        "org.apache.commons.math3.distribution.UniformRealDistribution#getNumericalMean()",
        "org.apache.commons.math3.distribution.LogNormalDistribution#getSolverAbsoluteAccuracy()",
        "org.apache.commons.math3.distribution.LogNormalDistribution#getSupportLowerBound()",
        "org.apache.commons.math3.distribution.ExponentialDistribution#cumulativeProbability(double)",
        "org.apache.commons.math3.distribution.ParetoDistribution#isSupportConnected()",
        "org.apache.commons.math3.distribution.BetaDistribution#getSupportLowerBound()",
        "org.apache.commons.math3.distribution.FDistribution#getSupportLowerBound()",
        "org.apache.commons.math3.distribution.BetaDistribution#getNumericalMean()",
        "org.apache.commons.math3.distribution.BetaDistribution#cumulativeProbability(double)",
        "org.apache.commons.math3.distribution.BetaDistribution#isSupportConnected()",
        "org.apache.commons.math3.distribution.AbstractRealDistribution#getSolverAbsoluteAccuracy()",
        "org.apache.commons.math3.distribution.CauchyDistribution#getSolverAbsoluteAccuracy()",
        "org.apache.commons.math3.distribution.BetaDistribution#getNumericalVariance()",
        "org.apache.commons.math3.distribution.CauchyDistribution#getSupportUpperBound()",
        "org.apache.commons.math3.distribution.GumbelDistribution#getNumericalVariance()",
        "org.apache.commons.math3.distribution.GammaDistribution#getSupportLowerBound()",
        "org.apache.commons.math3.distribution.ConstantRealDistribution#isSupportConnected()",
        "org.apache.commons.math3.distribution.ConstantRealDistribution#getNumericalMean()",
        "org.apache.commons.math3.distribution.ConstantRealDistribution#getSupportLowerBound()",
        "org.apache.commons.math3.distribution.EnumeratedRealDistribution#cumulativeProbability(double)",
        "org.apache.commons.math3.distribution.NormalDistribution#getSupportUpperBound()",
        "org.apache.commons.math3.random.EmpiricalDistribution#isSupportConnected()",
        "org.apache.commons.math3.distribution.UniformRealDistribution#isSupportConnected()",
        "org.apache.commons.math3.distribution.LogisticDistribution#getSupportUpperBound()",
        "org.apache.commons.math3.distribution.ExponentialDistribution#getNumericalMean()",
        "org.apache.commons.math3.distribution.ExponentialDistribution#getSupportUpperBound()",
        "org.apache.commons.math3.distribution.ChiSquaredDistribution#getNumericalMean()",
        "org.apache.commons.math3.distribution.NormalDistribution#cumulativeProbability(double)",
        "org.apache.commons.math3.distribution.ChiSquaredDistribution#isSupportConnected()",
        "org.apache.commons.math3.distribution.BetaDistribution#getSolverAbsoluteAccuracy()",
        "org.apache.commons.math3.distribution.LaplaceDistribution#getSupportLowerBound()",
        "org.apache.commons.math3.distribution.LevyDistribution#getSupportLowerBound()",
        "org.apache.commons.math3.distribution.WeibullDistribution#getNumericalVariance()",
        "org.apache.commons.math3.distribution.GumbelDistribution#cumulativeProbability(double)",
        "org.apache.commons.math3.distribution.NakagamiDistribution#getNumericalVariance()",
        "org.apache.commons.math3.distribution.LogNormalDistribution#getNumericalVariance()",
        "org.apache.commons.math3.distribution.GammaDistribution#cumulativeProbability(double)",
        "org.apache.commons.math3.distribution.LaplaceDistribution#getNumericalMean()",
        "org.apache.commons.math3.distribution.GammaDistribution#isSupportConnected()",
        "org.apache.commons.math3.distribution.ParetoDistribution#getSolverAbsoluteAccuracy()",
        "org.apache.commons.math3.distribution.TriangularDistribution#getSupportUpperBound()",
        "org.apache.commons.math3.distribution.NormalDistribution#getSolverAbsoluteAccuracy()",
        "org.apache.commons.math3.distribution.FDistribution#getNumericalVariance()"
    ],
    "org.apache.commons.math3.stat.inference.KolmogorovSmirnovTest.n(int,int,int,int,long,boolean)": ["org.apache.commons.math3.stat.inference.KolmogorovSmirnovTest.c(int,int,int,int,long,boolean)"],
    "org.apache.commons.math3.geometry.euclidean.twod.Vector2D.distanceInf(Vector2D,Vector2D)": ["org.apache.commons.math3.geometry.euclidean.twod.Vector2D#distanceInf(Vector<Euclidean2D>)"],
    "org.apache.commons.math3.exception.MathIllegalNumberException#MathIllegalNumberException(Localizable,Number,Object[]...)": ["org.apache.commons.math3.exception.MathIllegalNumberException.<init>()"],
    "org.apache.commons.math3.optimization.general.AbstractLeastSquaresOptimizer#getCovariances(double)": ["org.apache.commons.math3.optimization.general.AbstractLeastSquaresOptimizer#computeCovariances(double[],double)"],
    "org.apache.commons.math3.analysis.solvers.RiddersSolver#doSolve()": [
        "org.apache.commons.math3.analysis.solvers.BaseAbstractUnivariateSolver#getMin()",
        "org.apache.commons.math3.analysis.solvers.BaseAbstractUnivariateSolver#getAbsoluteAccuracy()",
        "org.apache.commons.math3.analysis.solvers.BaseAbstractUnivariateSolver#computeObjectiveValue(double)",
        "org.apache.commons.math3.analysis.solvers.BaseAbstractUnivariateSolver#getFunctionValueAccuracy()",
        "org.apache.commons.math3.util.FastMath.abs(double)",
        "org.apache.commons.math3.util.FastMath.max(double,double)",
        "org.apache.commons.math3.util.FastMath.sqrt(double)",
        "org.apache.commons.math3.analysis.solvers.BaseAbstractUnivariateSolver#getRelativeAccuracy()",
        "org.apache.commons.math3.util.FastMath.signum(double)",
        "org.apache.commons.math3.analysis.solvers.BaseAbstractUnivariateSolver#getMax()",
        "org.apache.commons.math3.analysis.solvers.BaseAbstractUnivariateSolver#verifyBracketing(double,double)"
    ],
    "org.apache.commons.math3.fitting.leastsquares.LeastSquaresAdapter#getParameterSize()": [
        "org.apache.commons.math3.fitting.leastsquares.LeastSquaresFactory.LocalLeastSquaresProblem#getParameterSize()",
        "org.apache.commons.math3.fitting.leastsquares.LeastSquaresAdapter#getParameterSize()"
    ],
    "org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet.successors(List<Vector3D>,List<int[]>,int[][])": [
        "org.apache.commons.math3.geometry.euclidean.threed.Vector3D#getX()",
        "org.apache.commons.math3.geometry.euclidean.threed.Vector3D#getZ()",
        "org.apache.commons.math3.geometry.euclidean.threed.Vector3D#getY()",
        "org.apache.commons.math3.exception.util.LocalizedFormats.<staticinit>()"
    ],
    "org.apache.commons.math3.analysis.function.Sigmoid#value(double)": ["org.apache.commons.math3.analysis.function.Sigmoid.value(double,double,double)"],
    "org.apache.commons.math3.util.ArithmeticUtils.pow(BigInteger,int)": ["org.apache.commons.math3.exception.util.LocalizedFormats.<staticinit>()"],
    "org.apache.commons.math3.linear.Array2DRowFieldMatrix#walkInColumnOrder(FieldMatrixPreservingVisitor<T extends FieldElement>)": [
        "org.apache.commons.math3.linear.DefaultFieldMatrixPreservingVisitor#end()",
        "org.apache.commons.math3.linear.MatrixUtils.FractionMatrixConverter#start(int,int,int,int,int,int)",
        "org.apache.commons.math3.linear.DefaultFieldMatrixPreservingVisitor#visit(int,int,T extends FieldElement)",
        "org.apache.commons.math3.linear.MatrixUtils.BigFractionMatrixConverter#start(int,int,int,int,int,int)",
        "org.apache.commons.math3.linear.Array2DRowFieldMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.AbstractFieldMatrix#copySubMatrix(int,int,int,int,T extends FieldElement[][])$DefaultFieldMatrixPreservingVisitor$1#start(int,int,int,int,int,int)",
        "org.apache.commons.math3.linear.AbstractFieldMatrix#transpose()$DefaultFieldMatrixPreservingVisitor$1#visit(int,int,T extends FieldElement)",
        "org.apache.commons.math3.ode.nonstiff.AdamsMoultonFieldIntegrator.Corrector#start(int,int,int,int,int,int)",
        "org.apache.commons.math3.linear.DefaultFieldMatrixPreservingVisitor#start(int,int,int,int,int,int)",
        "org.apache.commons.math3.ode.nonstiff.AdamsMoultonFieldIntegrator.Corrector#end()",
        "org.apache.commons.math3.linear.Array2DRowFieldMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.AbstractFieldMatrix#copySubMatrix(int,int,int,int,T extends FieldElement[][])$DefaultFieldMatrixPreservingVisitor$1#visit(int,int,T extends FieldElement)"
    ],
    "org.apache.commons.math3.random.RandomDataGenerator#nextPascal(int,double)": [
        "org.apache.commons.math3.distribution.UniformIntegerDistribution#sample()",
        "org.apache.commons.math3.distribution.PoissonDistribution#sample()",
        "org.apache.commons.math3.random.RandomDataGenerator#getRandomGenerator()",
        "org.apache.commons.math3.distribution.AbstractIntegerDistribution#sample()",
        "org.apache.commons.math3.distribution.ZipfDistribution#sample()",
        "org.apache.commons.math3.distribution.EnumeratedIntegerDistribution#sample()",
        "org.apache.commons.math3.distribution.PascalDistribution#PascalDistribution(RandomGenerator,int,double)"
    ],
    "org.apache.commons.math3.optim.linear.SimplexTableau.getInvertedCoefficientSum(RealVector)": [
        "org.apache.commons.math3.linear.RealVector.unmodifiableRealVector(RealVector)$RealVector$1#toArray()",
        "org.apache.commons.math3.linear.OpenMapRealVector#toArray()",
        "org.apache.commons.math3.linear.RealVector#toArray()",
        "org.apache.commons.math3.linear.ArrayRealVector#toArray()"
    ],
    "org.apache.commons.math3.fraction.AbstractFormat#format(long,StringBuffer,FieldPosition)": ["org.apache.commons.math3.fraction.AbstractFormat#format(double,StringBuffer,FieldPosition)"],
    "org.apache.commons.math3.geometry.euclidean.oned.Vector1D#getNorm1()": ["org.apache.commons.math3.util.FastMath.abs(double)"],
    "org.apache.commons.math3.stat.regression.OLSMultipleLinearRegression#OLSMultipleLinearRegression()": ["org.apache.commons.math3.stat.regression.OLSMultipleLinearRegression#OLSMultipleLinearRegression(double)"],
    "org.apache.commons.math3.ml.neuralnet.oned.NeuronString#getFeatures(int)": [
        "org.apache.commons.math3.ml.neuralnet.Network#getNeuron(long)",
        "org.apache.commons.math3.ml.neuralnet.Neuron#getFeatures()"
    ],
    "org.apache.commons.math3.linear.ArrayRealVector#getLInfDistance(RealVector)": [
        "org.apache.commons.math3.linear.ArrayRealVector#checkVectorDimensions(RealVector)",
        "org.apache.commons.math3.util.FastMath.max(double,double)",
        "org.apache.commons.math3.util.FastMath.abs(double)",
        "org.apache.commons.math3.linear.ArrayRealVector#checkVectorDimensions(int)",
        "org.apache.commons.math3.linear.ArrayRealVector#getEntry(int)",
        "org.apache.commons.math3.linear.OpenMapRealVector#getEntry(int)",
        "org.apache.commons.math3.linear.RealVector.unmodifiableRealVector(RealVector)$RealVector$1#getEntry(int)"
    ],
    "org.apache.commons.math3.fraction.BigFractionFormat.getImproperInstance()": ["org.apache.commons.math3.fraction.BigFractionFormat.getImproperInstance(Locale)"],
    "org.apache.commons.math3.fitting.leastsquares.OptimumImpl#getResiduals()": [
        "org.apache.commons.math3.fitting.leastsquares.DenseWeightedEvaluation#getResiduals()",
        "org.apache.commons.math3.fitting.leastsquares.LeastSquaresFactory.LocalLeastSquaresProblem.LazyUnweightedEvaluation#getResiduals()",
        "org.apache.commons.math3.fitting.leastsquares.LeastSquaresFactory.LocalLeastSquaresProblem.UnweightedEvaluation#getResiduals()",
        "org.apache.commons.math3.fitting.leastsquares.OptimumImpl#getResiduals()"
    ],
    "org.apache.commons.math3.stat.interval.IntervalUtils.getNormalApproximationInterval(int,int,double)": [
        "org.apache.commons.math3.stat.interval.IntervalUtils.<staticinit>()",
        "org.apache.commons.math3.stat.interval.WilsonScoreInterval#createInterval(int,int,double)",
        "org.apache.commons.math3.stat.interval.NormalApproximationInterval#createInterval(int,int,double)",
        "org.apache.commons.math3.stat.interval.AgrestiCoullInterval#createInterval(int,int,double)",
        "org.apache.commons.math3.stat.interval.ClopperPearsonInterval#createInterval(int,int,double)"
    ],
    "org.apache.commons.math3.geometry.euclidean.threed.Line#distance(Line)": [
        "org.apache.commons.math3.util.Precision.<staticinit>()",
        "org.apache.commons.math3.geometry.euclidean.threed.Vector3D#getNorm()",
        "org.apache.commons.math3.util.FastMath.abs(double)",
        "org.apache.commons.math3.geometry.euclidean.threed.Line#distance(Vector3D)",
        "org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(Vector3D,Vector3D)",
        "org.apache.commons.math3.geometry.euclidean.threed.Vector3D#dotProduct(Vector<Euclidean3D>)",
        "org.apache.commons.math3.geometry.euclidean.threed.Vector3D#subtract(Vector<Euclidean3D>)"
    ],
    "org.apache.commons.math3.analysis.interpolation.MicrosphereInterpolatingFunction#MicrosphereInterpolatingFunction(double[][],double[],int,int,UnitSphereRandomVectorGenerator)": [
        "org.apache.commons.math3.exception.DimensionMismatchException#DimensionMismatchException(int,int)",
        "org.apache.commons.math3.exception.NullArgumentException#NullArgumentException()",
        "org.apache.commons.math3.linear.ArrayRealVector#ArrayRealVector(double[])",
        "org.apache.commons.math3.exception.NoDataException#NoDataException()",
        "org.apache.commons.math3.random.UnitSphereRandomVectorGenerator#nextVector()",
        "org.apache.commons.math3.analysis.interpolation.MicrosphereInterpolatingFunction.MicrosphereSurfaceElement#MicrosphereSurfaceElement(double[])",
        "org.apache.commons.math3.analysis.interpolation.MicrosphereInterpolatingFunction.<init>()"
    ],
    "org.apache.commons.math3.fitting.GaussianFitter#fit(double[])$Parametric$1.<init>()": ["org.apache.commons.math3.analysis.function.Gaussian.Parametric.<init>()"],
    "org.apache.commons.math3.geometry.euclidean.threed.Rotation#composeInternal(Rotation)": ["org.apache.commons.math3.geometry.euclidean.threed.Rotation#Rotation(double,double,double,double,boolean)"],
    "org.apache.commons.math3.linear.LUDecomposition#LUDecomposition(RealMatrix,double)": [
        "org.apache.commons.math3.linear.DiagonalMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.Array2DRowRealMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.BlockFieldMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.LUDecomposition.<init>()",
        "org.apache.commons.math3.linear.SparseFieldMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.OpenMapRealMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.OpenMapRealMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.DiagonalMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.DiagonalMatrix#getData()",
        "org.apache.commons.math3.linear.AbstractRealMatrix#getData()",
        "org.apache.commons.math3.linear.Array2DRowFieldMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.SparseFieldMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.AbstractRealMatrix#isSquare()",
        "org.apache.commons.math3.linear.BlockFieldMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.BlockRealMatrix#getRowDimension()",
        "org.apache.commons.math3.util.FastMath.abs(double)",
        "org.apache.commons.math3.linear.NonSquareMatrixException#NonSquareMatrixException(int,int)",
        "org.apache.commons.math3.linear.Array2DRowRealMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.Array2DRowRealMatrix#getData()",
        "org.apache.commons.math3.linear.AbstractFieldMatrix#isSquare()",
        "org.apache.commons.math3.linear.Array2DRowFieldMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.BlockRealMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.BlockRealMatrix#getData()"
    ],
    "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.BOBYQAOptimizer#prelim(double[],double[])": [
        "org.apache.commons.math3.optim.univariate.MultiStartUnivariateOptimizer#getEvaluations()",
        "org.apache.commons.math3.optim.nonlinear.scalar.MultivariateOptimizer#computeObjectiveValue(double[])",
        "org.apache.commons.math3.linear.Array2DRowRealMatrix#setEntry(int,int,double)",
        "org.apache.commons.math3.optim.BaseOptimizer#getEvaluations()",
        "org.apache.commons.math3.util.FastMath.max(double,double)",
        "org.apache.commons.math3.linear.ArrayRealVector#getDimension()",
        "org.apache.commons.math3.util.FastMath.min(double,double)",
        "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.BOBYQAOptimizer.<staticinit>()",
        "org.apache.commons.math3.linear.ArrayRealVector#getEntry(int)",
        "org.apache.commons.math3.linear.ArrayRealVector#setEntry(int,double)",
        "org.apache.commons.math3.optim.BaseMultiStartMultivariateOptimizer#getEvaluations()",
        "org.apache.commons.math3.linear.Array2DRowRealMatrix#getEntry(int,int)",
        "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.BOBYQAOptimizer.printMethod()",
        "org.apache.commons.math3.linear.Array2DRowRealMatrix#getRowDimension()",
        "org.apache.commons.math3.util.FastMath.sqrt(double)",
        "org.apache.commons.math3.linear.ArrayRealVector#toArray()"
    ],
    "org.apache.commons.math3.linear.OpenMapRealMatrix#createMatrix(int,int)": ["org.apache.commons.math3.linear.OpenMapRealMatrix#OpenMapRealMatrix(int,int)"],
    "org.apache.commons.math3.linear.AbstractRealMatrix#getRow(int)": [
        "org.apache.commons.math3.linear.DiagonalMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.Array2DRowRealMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.Array2DRowRealMatrix#getEntry(int,int)",
        "org.apache.commons.math3.linear.DiagonalMatrix#getEntry(int,int)",
        "org.apache.commons.math3.linear.OpenMapRealMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.BlockRealMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.OpenMapRealMatrix#getEntry(int,int)",
        "org.apache.commons.math3.linear.MatrixUtils.checkRowIndex(AnyMatrix,int)",
        "org.apache.commons.math3.linear.BlockRealMatrix#getEntry(int,int)"
    ],
    "org.apache.commons.math3.ml.neuralnet.Network#getNeighbours(Iterable<Neuron>)": ["org.apache.commons.math3.ml.neuralnet.Network#getNeighbours(Iterable<Neuron>,Iterable<Neuron>)"],
    "org.apache.commons.math3.special.BesselJ.BesselJResult#getVals()": ["org.apache.commons.math3.util.MathArrays.copyOf(double[],int)"],
    "org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizer#checkParameters()": [
        "org.apache.commons.math3.optim.BaseMultivariateOptimizer#getLowerBound()",
        "org.apache.commons.math3.optim.BaseMultivariateOptimizer#getUpperBound()",
        "org.apache.commons.math3.exception.util.LocalizedFormats.<staticinit>()"
    ],
    "org.apache.commons.math3.stat.Frequency#getCumFreq(Comparable<?>)": [
        "org.apache.commons.math3.stat.Frequency.NaturalComparator.<init>()",
        "org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet.SubIntervalsIterator#hasNext()",
        "org.apache.commons.math3.linear.RealVector#iterator()$Iterator$1#hasNext()",
        "org.apache.commons.math3.userguide.sofm.ChineseRingsClassifier#createRandomIterator(long)$Iterator$1#hasNext()",
        "org.apache.commons.math3.util.IntegerSequence.Incrementor#hasNext()",
        "org.apache.commons.math3.linear.RealVector.unmodifiableRealVector(RealVector)$Iterator$1$Iterator$1#sparseIterator()$Iterator$1#hasNext()",
        "org.apache.commons.math3.geometry.spherical.oned.ArcsSet.SubArcsIterator#hasNext()",
        "org.apache.commons.math3.util.Combinations.LexicographicIterator#hasNext()",
        "org.apache.commons.math3.stat.Frequency#getCumFreq(Comparable<?>)",
        "org.apache.commons.math3.stat.Frequency#valuesIterator()",
        "org.apache.commons.math3.stat.Frequency#getSumFreq()",
        "org.apache.commons.math3.linear.RealVector.SparseEntryIterator#hasNext()",
        "org.apache.commons.math3.userguide.sofm.ChineseRingsClassifier#createIterable()$Iterator$1$Iterator$1#iterator()$Iterator$1#hasNext()",
        "org.apache.commons.math3.stat.Frequency#getCount(Comparable<?>)",
        "org.apache.commons.math3.linear.RealVector.unmodifiableRealVector(RealVector)$Iterator$1$Iterator$1#iterator()$Iterator$1#hasNext()",
        "org.apache.commons.math3.util.Combinations.SingletonIterator#hasNext()",
        "org.apache.commons.math3.util.MultidimensionalCounter.Iterator#hasNext()",
        "org.apache.commons.math3.stat.Frequency.NaturalComparator#compare(Comparable<T extends Comparable>,Comparable<T extends Comparable>)"
    ],
    "org.apache.commons.math3.analysis.FunctionUtils.add(DifferentiableUnivariateFunction[]...)": ["org.apache.commons.math3.analysis.FunctionUtils.add(DifferentiableUnivariateFunction[]...)$DifferentiableUnivariateFunction$1.<init>()"],
    "org.apache.commons.math3.optimization.univariate.UnivariateMultiStartOptimizer#getOptima()": ["org.apache.commons.math3.exception.util.LocalizedFormats.<staticinit>()"],
    "org.apache.commons.math3.analysis.function.Logit.Parametric#gradient(double,double[]...)": ["org.apache.commons.math3.analysis.function.Logit.Parametric#validateParameters(double[])"],
    "org.apache.commons.math3.userguide.filter.CannonballExample.Cannonball#getMeasuredX()": [
        "org.apache.commons.math3.random.RandomAdaptor#nextGaussian()",
        "org.apache.commons.math3.random.SynchronizedRandomGenerator#nextGaussian()",
        "org.apache.commons.math3.random.RandomGeneratorFactory.createRandomGenerator(Random)$RandomGenerator$1#nextGaussian()",
        "org.apache.commons.math3.random.BitsStreamGenerator#nextGaussian()",
        "org.apache.commons.math3.random.AbstractRandomGenerator#nextGaussian()"
    ],
    "org.apache.commons.math3.stat.descriptive.SynchronizedMultivariateSummaryStatistics#getSumsqImpl()": ["org.apache.commons.math3.stat.descriptive.MultivariateSummaryStatistics#getSumsqImpl()"],
    "org.apache.commons.math3.random.SynchronizedRandomGenerator#nextFloat()": [
        "org.apache.commons.math3.random.AbstractRandomGenerator#nextFloat()",
        "org.apache.commons.math3.random.SynchronizedRandomGenerator#nextFloat()",
        "org.apache.commons.math3.random.BitsStreamGenerator#nextFloat()",
        "org.apache.commons.math3.random.RandomGeneratorFactory.createRandomGenerator(Random)$RandomGenerator$1#nextFloat()",
        "org.apache.commons.math3.random.RandomAdaptor#nextFloat()"
    ],
    "org.apache.commons.math3.stat.descriptive.SynchronizedDescriptiveStatistics#getStandardDeviation()": ["org.apache.commons.math3.stat.descriptive.DescriptiveStatistics#getStandardDeviation()"],
    "org.apache.commons.math3.linear.Array2DRowFieldMatrix#Array2DRowFieldMatrix(T extends FieldElement[][])": [
        "org.apache.commons.math3.linear.AbstractFieldMatrix.extractField(T extends FieldElement[][])",
        "org.apache.commons.math3.linear.Array2DRowFieldMatrix#Array2DRowFieldMatrix(Field<T extends FieldElement>,T extends FieldElement[][])"
    ],
    "org.apache.commons.math3.special.Gamma.logGamma(double)": [
        "org.apache.commons.math3.special.Gamma.<staticinit>()",
        "org.apache.commons.math3.special.Gamma.lanczos(double)",
        "org.apache.commons.math3.util.FastMath.log(double)",
        "org.apache.commons.math3.special.Gamma.logGamma1p(double)",
        "org.apache.commons.math3.util.FastMath.floor(double)"
    ],
    "org.apache.commons.math3.util.Precision.equals(float,float,float)": [
        "org.apache.commons.math3.util.Precision.equals(float,float,int)",
        "org.apache.commons.math3.util.FastMath.abs(float)"
    ],
    "org.apache.commons.math3.optim.MaxEval.unlimited()": ["org.apache.commons.math3.optim.MaxEval#MaxEval(int)"],
    "org.apache.commons.math3.util.MathArrays.sortInPlace(double[],OrderDirection,double[][]...)$Comparator$2#compare(PairDoubleInteger,PairDoubleInteger)": ["org.apache.commons.math3.util.MathArrays.PairDoubleInteger#getKey()"],
    "org.apache.commons.math3.linear.AbstractRealMatrix#copySubMatrix(int[],int[],double[][])": [
        "org.apache.commons.math3.linear.Array2DRowRealMatrix#getEntry(int,int)",
        "org.apache.commons.math3.linear.MatrixDimensionMismatchException#MatrixDimensionMismatchException(int,int,int,int)",
        "org.apache.commons.math3.linear.MatrixUtils.checkSubMatrixIndex(AnyMatrix,int[],int[])",
        "org.apache.commons.math3.linear.OpenMapRealMatrix#getEntry(int,int)",
        "org.apache.commons.math3.linear.DiagonalMatrix#getEntry(int,int)",
        "org.apache.commons.math3.linear.BlockRealMatrix#getEntry(int,int)"
    ],
    "org.apache.commons.math3.util.FastMath.lnMant.<staticinit>()": [
        "org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant()",
        "org.apache.commons.math3.util.FastMath.<staticinit>()",
        "org.apache.commons.math3.util.FastMathCalc.slowLog(double)"
    ],
    "org.apache.commons.math3.optimization.direct.BaseAbstractMultivariateVectorOptimizer#getMaxEvaluations()": ["org.apache.commons.math3.util.Incrementor#getMaximalCount()"],
    "org.apache.commons.math3.stat.inference.GTest#g(double[],long[])": [
        "org.apache.commons.math3.exception.DimensionMismatchException#DimensionMismatchException(int,int)",
        "org.apache.commons.math3.util.MathArrays.checkPositive(double[])",
        "org.apache.commons.math3.util.MathArrays.checkNonNegative(long[])",
        "org.apache.commons.math3.util.FastMath.abs(double)",
        "org.apache.commons.math3.util.FastMath.log(double)"
    ],
    "org.apache.commons.math3.util.Pair.create(K,V)": ["org.apache.commons.math3.util.Pair#Pair(K,V)"],
    "org.apache.commons.math3.stat.descriptive.moment.Skewness#getResult()": [
        "org.apache.commons.math3.util.FastMath.sqrt(double)",
        "org.apache.commons.math3.stat.descriptive.moment.FirstMoment#getN()"
    ],
    "org.apache.commons.math3.stat.inference.TestUtils.g(double[],long[])": [
        "org.apache.commons.math3.stat.inference.GTest#g(double[],long[])",
        "org.apache.commons.math3.stat.inference.TestUtils.<staticinit>()"
    ],
    "org.apache.commons.math3.fitting.leastsquares.GaussNewtonOptimizer.Decomposition$Decomposition$1.<init>()": ["org.apache.commons.math3.fitting.leastsquares.GaussNewtonOptimizer.Decomposition.<init>()"],
    "org.apache.commons.math3.distribution.MultivariateNormalDistribution#getStandardDeviations()": [
        "org.apache.commons.math3.linear.DiagonalMatrix#getData()",
        "org.apache.commons.math3.linear.AbstractRealMatrix#getData()",
        "org.apache.commons.math3.linear.Array2DRowRealMatrix#getData()",
        "org.apache.commons.math3.distribution.AbstractMultivariateRealDistribution#getDimension()",
        "org.apache.commons.math3.linear.BlockRealMatrix#getData()",
        "org.apache.commons.math3.util.FastMath.sqrt(double)"
    ],
    "org.apache.commons.math3.linear.ArrayFieldVector#append(FieldVector<T extends FieldElement>)": [
        "org.apache.commons.math3.linear.ArrayFieldVector#append(ArrayFieldVector<T extends FieldElement>)",
        "org.apache.commons.math3.linear.ArrayFieldVector#ArrayFieldVector(ArrayFieldVector<T extends FieldElement>,ArrayFieldVector<T extends FieldElement>)",
        "org.apache.commons.math3.linear.ArrayFieldVector#ArrayFieldVector(FieldVector<T extends FieldElement>)"
    ],
    "org.apache.commons.math3.fitting.leastsquares.LevenbergMarquardtOptimizer.InternalData#InternalData(double[][],int[],int,double[],double[],double[])": ["org.apache.commons.math3.fitting.leastsquares.LevenbergMarquardtOptimizer.InternalData.<init>()"],
    "org.apache.commons.math3.ml.clustering.DBSCANClusterer#DBSCANClusterer(double,int)": [
        "org.apache.commons.math3.ml.clustering.DBSCANClusterer#DBSCANClusterer(double,int,DistanceMeasure)",
        "org.apache.commons.math3.ml.distance.EuclideanDistance.<init>()"
    ],
    "org.apache.commons.math3.util.Incrementor#Incrementor(int,MaxCountExceededCallback)": [
        "org.apache.commons.math3.exception.NullArgumentException#NullArgumentException()",
        "org.apache.commons.math3.util.Incrementor.<init>()"
    ],
    "org.apache.commons.math3.linear.AbstractRealMatrix#equals(Object)": [
        "org.apache.commons.math3.linear.DiagonalMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.Array2DRowRealMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.BlockFieldMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.SparseFieldMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.DiagonalMatrix#getEntry(int,int)",
        "org.apache.commons.math3.linear.OpenMapRealMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.OpenMapRealMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.DiagonalMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.OpenMapRealMatrix#getEntry(int,int)",
        "org.apache.commons.math3.linear.Array2DRowFieldMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.BlockRealMatrix#getEntry(int,int)",
        "org.apache.commons.math3.linear.SparseFieldMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.BlockFieldMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.Array2DRowRealMatrix#getEntry(int,int)",
        "org.apache.commons.math3.linear.BlockRealMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.Array2DRowRealMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.Array2DRowFieldMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.BlockRealMatrix#getColumnDimension()"
    ],
    "org.apache.commons.math3.exception.NotPositiveException#NotPositiveException(Localizable,Number)": [
        "org.apache.commons.math3.exception.NotPositiveException.<init>()",
        "org.apache.commons.math3.exception.MathIllegalNumberException.<staticinit>()"
    ],
    "org.apache.commons.math3.ml.neuralnet.sofm.NeighbourhoodSizeFunctionFactory.exponentialDecay(double,double,long)": ["org.apache.commons.math3.ml.neuralnet.sofm.NeighbourhoodSizeFunctionFactory.exponentialDecay(double,double,long)$NeighbourhoodSizeFunction$1.<init>()"],
    "org.apache.commons.math3.geometry.euclidean.threed.Plane#toSubSpace(Point<Euclidean3D>)": [
        "org.apache.commons.math3.geometry.euclidean.threed.Vector3D#dotProduct(Vector<Euclidean3D>)",
        "org.apache.commons.math3.geometry.euclidean.twod.Vector2D#Vector2D(double,double)"
    ],
    "org.apache.commons.math3.optimization.direct.CMAESOptimizer.<staticinit>()": ["org.apache.commons.math3.random.MersenneTwister#MersenneTwister()"],
    "org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet#PolygonsSet()": [
        "org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.<staticinit>()",
        "org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet#PolygonsSet(double)"
    ],
    "org.apache.commons.math3.ode.events.EventState#stepAccepted(double,double[])": [
        "org.apache.commons.math3.util.FastMath.abs(double)",
        "org.apache.commons.math3.ode.events.EventFilter#g(double,double[])",
        "org.apache.commons.math3.ode.events.EventHandler.Action.<staticinit>()",
        "org.apache.commons.math3.ode.events.EventFilter#eventOccurred(double,double[],boolean)"
    ],
    "org.apache.commons.math3.geometry.partitioning.utilities.AVLTree.Node#rebalanceLeftGrown()": [
        "org.apache.commons.math3.geometry.partitioning.utilities.AVLTree.Skew.<staticinit>()",
        "org.apache.commons.math3.geometry.partitioning.utilities.AVLTree.Node#rotateCW()",
        "org.apache.commons.math3.geometry.partitioning.utilities.AVLTree.Node#rotateCCW()"
    ],
    "org.apache.commons.math3.optimization.direct.CMAESOptimizer#CMAESOptimizer(int,double[],int,double,boolean,int,int,RandomGenerator,boolean,ConvergenceChecker<PointValuePair>)": [
        "org.apache.commons.math3.optimization.direct.CMAESOptimizer.<init>()",
        "org.apache.commons.math3.optimization.direct.BaseAbstractMultivariateSimpleBoundsOptimizer#BaseAbstractMultivariateSimpleBoundsOptimizer(ConvergenceChecker<PointValuePair>)"
    ],
    "org.apache.commons.math3.analysis.solvers.BaseAbstractUnivariateSolver#BaseAbstractUnivariateSolver(double)": [
        "org.apache.commons.math3.analysis.solvers.BaseAbstractUnivariateSolver#BaseAbstractUnivariateSolver(double,double,double)",
        "org.apache.commons.math3.analysis.solvers.BaseAbstractUnivariateSolver.<staticinit>()"
    ],
    "org.apache.commons.math3.geometry.euclidean.twod.Line.getTransform(double,double,double,double,double,double)": ["org.apache.commons.math3.geometry.euclidean.twod.Line.LineTransform#LineTransform(double,double,double,double,double,double)"],
    "org.apache.commons.math3.userguide.filter.ConstantVoltageExample.constantVoltageTest(Chart,Chart)": [
        "org.apache.commons.math3.filter.KalmanFilter#correct(double[])",
        "org.apache.commons.math3.filter.KalmanFilter#KalmanFilter(ProcessModel,MeasurementModel)",
        "org.apache.commons.math3.userguide.filter.ConstantVoltageExample.VoltMeter#VoltMeter(double,double,double,int)",
        "org.apache.commons.math3.filter.KalmanFilter#getErrorCovariance()",
        "org.apache.commons.math3.userguide.filter.ConstantVoltageExample.VoltMeter#getVoltage()",
        "org.apache.commons.math3.userguide.filter.ConstantVoltageExample.VoltMeter#getMeasuredVoltage()",
        "org.apache.commons.math3.linear.Array2DRowRealMatrix#Array2DRowRealMatrix(double[])",
        "org.apache.commons.math3.filter.DefaultMeasurementModel#DefaultMeasurementModel(RealMatrix,RealMatrix)",
        "org.apache.commons.math3.filter.KalmanFilter#predict()",
        "org.apache.commons.math3.filter.DefaultProcessModel#DefaultProcessModel(RealMatrix,RealMatrix,RealMatrix,RealVector,RealMatrix)",
        "org.apache.commons.math3.linear.ArrayRealVector#ArrayRealVector(double[])",
        "org.apache.commons.math3.filter.KalmanFilter#getStateEstimation()",
        "org.apache.commons.math3.userguide.filter.ConstantVoltageExample.VoltMeter#step()"
    ],
    "org.apache.commons.math3.linear.ArrayRealVector#checkVectorDimensions(int)": ["org.apache.commons.math3.exception.DimensionMismatchException#DimensionMismatchException(int,int)"],
    "org.apache.commons.math3.linear.RealVector#getLInfDistance(RealVector)": [
        "org.apache.commons.math3.linear.RealVector.Entry#getValue()",
        "org.apache.commons.math3.linear.RealVector#iterator()",
        "org.apache.commons.math3.util.FastMath.max(double,double)",
        "org.apache.commons.math3.linear.RealVector#iterator()$Iterator$1#hasNext()",
        "org.apache.commons.math3.linear.RealVector.unmodifiableRealVector(RealVector)$Iterator$1$Iterator$1#sparseIterator()$Iterator$1#hasNext()",
        "org.apache.commons.math3.linear.RealVector.unmodifiableRealVector(RealVector)$RealVector$1#iterator()",
        "org.apache.commons.math3.geometry.spherical.oned.ArcsSet.SubArcsIterator#hasNext()",
        "org.apache.commons.math3.util.Combinations.LexicographicIterator#hasNext()",
        "org.apache.commons.math3.linear.OpenMapRealVector.OpenMapEntry#getValue()",
        "org.apache.commons.math3.linear.RealVector.unmodifiableRealVector(RealVector).UnmodifiableEntry.UnmodifiableEntry#getValue()",
        "org.apache.commons.math3.linear.RealVector.SparseEntryIterator#hasNext()",
        "org.apache.commons.math3.util.FastMath.abs(double)",
        "org.apache.commons.math3.userguide.sofm.ChineseRingsClassifier#createIterable()$Iterator$1$Iterator$1#iterator()$Iterator$1#hasNext()",
        "org.apache.commons.math3.linear.RealVector.unmodifiableRealVector(RealVector)$Iterator$1$Iterator$1#sparseIterator()$Iterator$1#next()",
        "org.apache.commons.math3.util.MultidimensionalCounter.Iterator#hasNext()",
        "org.apache.commons.math3.linear.RealVector.unmodifiableRealVector(RealVector)$Iterator$1$Iterator$1#iterator()$Iterator$1#next()",
        "org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet.SubIntervalsIterator#hasNext()",
        "org.apache.commons.math3.linear.OpenMapRealVector.OpenMapEntry#getIndex()",
        "org.apache.commons.math3.linear.ArrayRealVector#checkVectorDimensions(RealVector)",
        "org.apache.commons.math3.userguide.sofm.ChineseRingsClassifier#createRandomIterator(long)$Iterator$1#hasNext()",
        "org.apache.commons.math3.util.IntegerSequence.Incrementor#hasNext()",
        "org.apache.commons.math3.linear.RealVector.Entry#getIndex()",
        "org.apache.commons.math3.linear.RealVector#iterator()$Iterator$1#next()",
        "org.apache.commons.math3.linear.ArrayRealVector#getEntry(int)",
        "org.apache.commons.math3.linear.RealVector#checkVectorDimensions(RealVector)",
        "org.apache.commons.math3.linear.RealVector.unmodifiableRealVector(RealVector)$Iterator$1$Iterator$1#iterator()$Iterator$1#hasNext()",
        "org.apache.commons.math3.util.Combinations.SingletonIterator#hasNext()",
        "org.apache.commons.math3.linear.RealVector.SparseEntryIterator#next()",
        "org.apache.commons.math3.linear.OpenMapRealVector#getEntry(int)",
        "org.apache.commons.math3.linear.RealVector.unmodifiableRealVector(RealVector)$RealVector$1#getEntry(int)"
    ],
    "org.apache.commons.math3.linear.EigenDecomposition#findEigenVectors(double[][])": [
        "org.apache.commons.math3.linear.ArrayRealVector#ArrayRealVector(double[])",
        "org.apache.commons.math3.util.Precision.<staticinit>()",
        "org.apache.commons.math3.util.FastMath.abs(double)",
        "org.apache.commons.math3.util.FastMath.sqrt(double)",
        "org.apache.commons.math3.exception.util.LocalizedFormats.<staticinit>()"
    ],
    "org.apache.commons.math3.random.RandomGeneratorFactory#RandomGeneratorFactory()": ["org.apache.commons.math3.random.RandomGeneratorFactory.<init>()"],
    "org.apache.commons.math3.stat.descriptive.DescriptiveStatistics#DescriptiveStatistics()": ["org.apache.commons.math3.stat.descriptive.DescriptiveStatistics.<init>()"],
    "org.apache.commons.math3.linear.ArrayFieldVector#append(T extends FieldElement)": [
        "org.apache.commons.math3.linear.ArrayFieldVector#ArrayFieldVector(Field<T extends FieldElement>,T extends FieldElement[],boolean)",
        "org.apache.commons.math3.util.MathArrays.buildArray(Field<T>,int)"
    ],
    "org.apache.commons.math3.userguide.genetics.PolygonChromosome#newFixedLengthChromosome(List<Polygon>)": ["org.apache.commons.math3.userguide.genetics.PolygonChromosome#PolygonChromosome(List<Polygon>)"],
    "org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet#PolyhedronsSet(Collection<SubHyperplane<Euclidean3D>>)": [
        "org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet#PolyhedronsSet(Collection<SubHyperplane<Euclidean3D>>,double)",
        "org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet.<staticinit>()"
    ],
    "org.apache.commons.math3.analysis.integration.IterativeLegendreGaussIntegrator#doIntegrate()": [
        "org.apache.commons.math3.analysis.integration.BaseAbstractUnivariateIntegrator#getAbsoluteAccuracy()",
        "org.apache.commons.math3.util.FastMath.max(double,double)",
        "org.apache.commons.math3.analysis.integration.BaseAbstractUnivariateIntegrator#getMinimalIterationCount()",
        "org.apache.commons.math3.util.FastMath.abs(double)",
        "org.apache.commons.math3.analysis.integration.BaseAbstractUnivariateIntegrator#getRelativeAccuracy()",
        "org.apache.commons.math3.util.FastMath.max(int,int)",
        "org.apache.commons.math3.util.FastMath.min(double,double)",
        "org.apache.commons.math3.analysis.integration.IterativeLegendreGaussIntegrator#stage(int)",
        "org.apache.commons.math3.util.FastMath.pow(double,int)",
        "org.apache.commons.math3.analysis.integration.BaseAbstractUnivariateIntegrator#incrementCount()",
        "org.apache.commons.math3.analysis.integration.BaseAbstractUnivariateIntegrator#getIterations()"
    ],
    "org.apache.commons.math3.stat.descriptive.DescriptiveStatistics#getQuadraticMean()": [
        "org.apache.commons.math3.stat.descriptive.DescriptiveStatistics#getSumsq()",
        "org.apache.commons.math3.util.FastMath.sqrt(double)",
        "org.apache.commons.math3.stat.descriptive.DescriptiveStatistics#getN()",
        "org.apache.commons.math3.stat.descriptive.SynchronizedDescriptiveStatistics#getN()"
    ],
    "org.apache.commons.math3.stat.descriptive.DescriptiveStatistics#getSumsq()": [
        "org.apache.commons.math3.stat.descriptive.DescriptiveStatistics#apply(UnivariateStatistic)",
        "org.apache.commons.math3.stat.descriptive.SynchronizedDescriptiveStatistics#apply(UnivariateStatistic)"
    ],
    "org.apache.commons.math3.util.MathArrays.normalizeArray(double[],double)": ["org.apache.commons.math3.exception.util.LocalizedFormats.<staticinit>()"],
    "org.apache.commons.math3.stat.descriptive.AbstractStorelessUnivariateStatistic#equals(Object)": [
        "org.apache.commons.math3.stat.descriptive.moment.FirstMoment#getResult()",
        "org.apache.commons.math3.stat.descriptive.moment.Variance#getN()",
        "org.apache.commons.math3.stat.descriptive.rank.Min#getResult()",
        "org.apache.commons.math3.stat.descriptive.moment.Kurtosis#getN()",
        "org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile#getResult()",
        "org.apache.commons.math3.stat.descriptive.moment.FirstMoment#getN()",
        "org.apache.commons.math3.stat.descriptive.moment.FourthMoment#getResult()",
        "org.apache.commons.math3.stat.descriptive.summary.Product#getResult()",
        "org.apache.commons.math3.stat.descriptive.rank.Max#getN()",
        "org.apache.commons.math3.stat.descriptive.summary.SumOfSquares#getResult()",
        "org.apache.commons.math3.stat.descriptive.moment.Skewness#getResult()",
        "org.apache.commons.math3.stat.descriptive.moment.GeometricMean#getN()",
        "org.apache.commons.math3.stat.descriptive.moment.Kurtosis#getResult()",
        "org.apache.commons.math3.stat.descriptive.moment.ThirdMoment#getResult()",
        "org.apache.commons.math3.stat.descriptive.moment.Mean#getResult()",
        "org.apache.commons.math3.stat.descriptive.summary.Sum#getN()",
        "org.apache.commons.math3.util.Precision.equalsIncludingNaN(float,float)",
        "org.apache.commons.math3.stat.descriptive.summary.SumOfSquares#getN()",
        "org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile#getN()",
        "org.apache.commons.math3.stat.descriptive.moment.GeometricMean#getResult()",
        "org.apache.commons.math3.stat.descriptive.moment.Variance#getResult()",
        "org.apache.commons.math3.util.Precision.equalsIncludingNaN(double,double)",
        "org.apache.commons.math3.stat.descriptive.moment.StandardDeviation#getN()",
        "org.apache.commons.math3.stat.descriptive.summary.Sum#getResult()",
        "org.apache.commons.math3.stat.descriptive.rank.Min#getN()",
        "org.apache.commons.math3.stat.descriptive.moment.Mean#getN()",
        "org.apache.commons.math3.stat.descriptive.moment.StandardDeviation#getResult()",
        "org.apache.commons.math3.stat.descriptive.summary.SumOfLogs#getN()",
        "org.apache.commons.math3.stat.descriptive.moment.Skewness#getN()",
        "org.apache.commons.math3.stat.descriptive.summary.SumOfLogs#getResult()",
        "org.apache.commons.math3.stat.descriptive.rank.Max#getResult()",
        "org.apache.commons.math3.stat.descriptive.moment.SecondMoment#getResult()",
        "org.apache.commons.math3.stat.descriptive.summary.Product#getN()"
    ],
    "org.apache.commons.math3.optim.linear.LinearConstraint#LinearConstraint(RealVector,double,Relationship,RealVector,double)": [
        "org.apache.commons.math3.linear.OpenMapRealVector#subtract(RealVector)",
        "org.apache.commons.math3.linear.RealVector#subtract(RealVector)",
        "org.apache.commons.math3.linear.ArrayRealVector#subtract(RealVector)",
        "org.apache.commons.math3.optim.linear.LinearConstraint.<init>()",
        "org.apache.commons.math3.linear.RealVector.unmodifiableRealVector(RealVector)$RealVector$1#subtract(RealVector)"
    ],
    "org.apache.commons.math3.special.Beta.logBeta(double,double,double,int)": ["org.apache.commons.math3.special.Beta.logBeta(double,double)"],
    "org.apache.commons.math3.fitting.leastsquares.LeastSquaresFactory.LocalLeastSquaresProblem#LocalLeastSquaresProblem(MultivariateJacobianFunction,RealVector,RealVector,ConvergenceChecker<Evaluation>,int,int,boolean,ParameterValidator)": [
        "org.apache.commons.math3.fitting.leastsquares.LeastSquaresFactory.LocalLeastSquaresProblem.<init>()",
        "org.apache.commons.math3.optim.AbstractOptimizationProblem#AbstractOptimizationProblem(int,int,ConvergenceChecker<PAIR>)",
        "org.apache.commons.math3.exception.util.LocalizedFormats.<staticinit>()"
    ],
    "org.apache.commons.math3.analysis.interpolation.PiecewiseBicubicSplineInterpolatingFunction#PiecewiseBicubicSplineInterpolatingFunction(double[],double[],double[][])": [
        "org.apache.commons.math3.exception.DimensionMismatchException#DimensionMismatchException(int,int)",
        "org.apache.commons.math3.exception.NullArgumentException#NullArgumentException()",
        "org.apache.commons.math3.exception.InsufficientDataException#InsufficientDataException()",
        "org.apache.commons.math3.util.MathArrays.checkOrder(double[])",
        "org.apache.commons.math3.exception.NoDataException#NoDataException()",
        "org.apache.commons.math3.analysis.interpolation.PiecewiseBicubicSplineInterpolatingFunction.<init>()",
        "org.apache.commons.math3.analysis.interpolation.PiecewiseBicubicSplineInterpolatingFunction.<staticinit>()"
    ],
    "org.apache.commons.math3.linear.EigenDecomposition.Solver#eigenvalueNorm(int)": ["org.apache.commons.math3.util.FastMath.sqrt(double)"],
    "org.apache.commons.math3.userguide.sofm.ChineseRingsClassifier#makeInitializers()": [
        "org.apache.commons.math3.stat.descriptive.AggregateSummaryStatistics.AggregatingSummaryStatistics#addValue(double)",
        "org.apache.commons.math3.stat.descriptive.SynchronizedSummaryStatistics#addValue(double)",
        "org.apache.commons.math3.stat.descriptive.SynchronizedSummaryStatistics#getStandardDeviation()",
        "org.apache.commons.math3.stat.descriptive.SummaryStatistics#getMean()",
        "org.apache.commons.math3.stat.descriptive.SummaryStatistics#addValue(double)",
        "org.apache.commons.math3.userguide.sofm.ChineseRings#getPoints()",
        "org.apache.commons.math3.stat.descriptive.SummaryStatistics#getStandardDeviation()",
        "org.apache.commons.math3.geometry.euclidean.threed.Vector3D#getZ()",
        "org.apache.commons.math3.geometry.euclidean.threed.Vector3D#getY()",
        "org.apache.commons.math3.geometry.euclidean.threed.Vector3D#getX()",
        "org.apache.commons.math3.ml.neuralnet.FeatureInitializerFactory.uniform(double,double)",
        "org.apache.commons.math3.stat.descriptive.SynchronizedSummaryStatistics#getMean()",
        "org.apache.commons.math3.stat.descriptive.SummaryStatistics#SummaryStatistics()"
    ],
    "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.BOBYQAOptimizer.PathIsExploredException#PathIsExploredException()": [
        "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.BOBYQAOptimizer.PathIsExploredException.<init>()",
        "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.BOBYQAOptimizer.PathIsExploredException.<staticinit>()",
        "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.BOBYQAOptimizer.caller(int)"
    ],
    "org.apache.commons.math3.random.EmpiricalDistribution#EmpiricalDistribution(int,RandomGenerator)": [
        "org.apache.commons.math3.random.EmpiricalDistribution#EmpiricalDistribution(int,RandomDataGenerator)",
        "org.apache.commons.math3.random.RandomDataGenerator#RandomDataGenerator(RandomGenerator)"
    ],
    "org.apache.commons.math3.distribution.fitting.MultivariateNormalMixtureExpectationMaximization.DataRow#equals(Object)": ["org.apache.commons.math3.util.MathArrays.equals(double[],double[])"],
    "org.apache.commons.math3.ode.events.EventFilter#resetState(double,double[])": ["org.apache.commons.math3.ode.events.EventFilter#resetState(double,double[])"],
    "org.apache.commons.math3.distribution.NormalDistribution#getNumericalMean()": ["org.apache.commons.math3.distribution.NormalDistribution#getMean()"],
    "org.apache.commons.math3.analysis.integration.TrapezoidIntegrator#TrapezoidIntegrator(int,int)": [
        "org.apache.commons.math3.analysis.integration.BaseAbstractUnivariateIntegrator#BaseAbstractUnivariateIntegrator(int,int)",
        "org.apache.commons.math3.analysis.integration.TrapezoidIntegrator.<init>()",
        "org.apache.commons.math3.analysis.integration.TrapezoidIntegrator.<staticinit>()"
    ],
    "org.apache.commons.math3.exception.MaxCountExceededException#MaxCountExceededException(Number)": ["org.apache.commons.math3.exception.util.LocalizedFormats.<staticinit>()"],
    "org.apache.commons.math3.analysis.interpolation.FieldHermiteInterpolator#FieldHermiteInterpolator()": ["org.apache.commons.math3.analysis.interpolation.FieldHermiteInterpolator.<init>()"],
    "org.apache.commons.math3.optimization.linear.SimplexTableau#isOptimal()": [
        "org.apache.commons.math3.linear.Array2DRowRealMatrix#getEntry(int,int)",
        "org.apache.commons.math3.util.Precision.compareTo(double,double,double)",
        "org.apache.commons.math3.linear.DiagonalMatrix#getEntry(int,int)",
        "org.apache.commons.math3.optimization.linear.SimplexTableau#getNumObjectiveFunctions()",
        "org.apache.commons.math3.linear.OpenMapRealMatrix#getEntry(int,int)",
        "org.apache.commons.math3.optimization.linear.SimplexTableau#getWidth()",
        "org.apache.commons.math3.linear.BlockRealMatrix#getEntry(int,int)"
    ],
    "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.NelderMeadSimplex#NelderMeadSimplex(double[][],double,double,double,double)": [
        "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.AbstractSimplex#AbstractSimplex(double[][])",
        "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.NelderMeadSimplex.<init>()"
    ],
    "org.apache.commons.math3.primes.SmallPrimes.millerRabinPrimeTest(int)": ["org.apache.commons.math3.primes.SmallPrimes.<staticinit>()"],
    "org.apache.commons.math3.util.MathArrays.unique(double[])": [
        "org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet.SubIntervalsIterator#hasNext()",
        "org.apache.commons.math3.linear.RealVector.SparseEntryIterator#hasNext()",
        "org.apache.commons.math3.linear.RealVector#iterator()$Iterator$1#hasNext()",
        "org.apache.commons.math3.userguide.sofm.ChineseRingsClassifier#createIterable()$Iterator$1$Iterator$1#iterator()$Iterator$1#hasNext()",
        "org.apache.commons.math3.userguide.sofm.ChineseRingsClassifier#createRandomIterator(long)$Iterator$1#hasNext()",
        "org.apache.commons.math3.util.IntegerSequence.Incrementor#hasNext()",
        "org.apache.commons.math3.linear.RealVector.unmodifiableRealVector(RealVector)$Iterator$1$Iterator$1#sparseIterator()$Iterator$1#hasNext()",
        "org.apache.commons.math3.geometry.spherical.oned.ArcsSet.SubArcsIterator#hasNext()",
        "org.apache.commons.math3.util.Combinations.LexicographicIterator#hasNext()",
        "org.apache.commons.math3.linear.RealVector.unmodifiableRealVector(RealVector)$Iterator$1$Iterator$1#iterator()$Iterator$1#hasNext()",
        "org.apache.commons.math3.util.Combinations.SingletonIterator#hasNext()",
        "org.apache.commons.math3.util.MultidimensionalCounter.Iterator#hasNext()"
    ],
    "org.apache.commons.math3.util.Incrementor#Incrementor(int)": [
        "org.apache.commons.math3.util.Incrementor#Incrementor(int)$MaxCountExceededCallback$1.<init>()",
        "org.apache.commons.math3.util.Incrementor#Incrementor(int,MaxCountExceededCallback)"
    ],
    "org.apache.commons.math3.linear.SymmLQ#SymmLQ(int,double,boolean)": [
        "org.apache.commons.math3.linear.SymmLQ.<init>()",
        "org.apache.commons.math3.linear.PreconditionedIterativeLinearSolver#PreconditionedIterativeLinearSolver(int)"
    ],
    "org.apache.commons.math3.optimization.general.NonLinearConjugateGradientOptimizer.LineSearchFunction#LineSearchFunction(double[])": ["org.apache.commons.math3.optimization.general.NonLinearConjugateGradientOptimizer.LineSearchFunction.<init>()"],
    "org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet#splitEdgeConnections(List<ConnectableSegment>)": [
        "org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.ConnectableSegment#setPrevious(ConnectableSegment)",
        "org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.ConnectableSegment#getNext()",
        "org.apache.commons.math3.geometry.partitioning.BSPTree#getCut()",
        "org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.ConnectableSegment#getEndNode()",
        "org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.ConnectableSegment#getPrevious()",
        "org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.ConnectableSegment#setNext(ConnectableSegment)",
        "org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.ConnectableSegment#getNode()",
        "org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.ConnectableSegment#getStartNode()",
        "org.apache.commons.math3.geometry.partitioning.AbstractSubHyperplane#getHyperplane()"
    ],
    "org.apache.commons.math3.random.EmpiricalDistribution.StreamDataAdapter#computeStats()": [
        "org.apache.commons.math3.stat.descriptive.SummaryStatistics#addValue(double)",
        "org.apache.commons.math3.stat.descriptive.AggregateSummaryStatistics.AggregatingSummaryStatistics#addValue(double)",
        "org.apache.commons.math3.stat.descriptive.SynchronizedSummaryStatistics#addValue(double)",
        "org.apache.commons.math3.stat.descriptive.SummaryStatistics#SummaryStatistics()"
    ],
    "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer.DoubleIndex#DoubleIndex(double,int)": ["org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer.DoubleIndex.<init>()"],
    "org.apache.commons.math3.analysis.interpolation.InterpolatingMicrosphere2D#InterpolatingMicrosphere2D(InterpolatingMicrosphere2D)": [
        "org.apache.commons.math3.analysis.interpolation.InterpolatingMicrosphere#InterpolatingMicrosphere(InterpolatingMicrosphere)",
        "org.apache.commons.math3.analysis.interpolation.InterpolatingMicrosphere2D.<init>()"
    ],
    "org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet#IntervalsSet(Collection<SubHyperplane<Euclidean1D>>,double)": [
        "org.apache.commons.math3.geometry.partitioning.AbstractRegion#AbstractRegion(Collection<SubHyperplane<S extends Space>>,double)",
        "org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet.<init>()"
    ],
    "org.apache.commons.math3.ode.nonstiff.ClassicalRungeKuttaFieldStepInterpolator#ClassicalRungeKuttaFieldStepInterpolator(Field<T extends RealFieldElement>,boolean,T extends RealFieldElement[][],FieldODEStateAndDerivative<T extends RealFieldElement>,FieldODEStateAndDerivative<T extends RealFieldElement>,FieldODEStateAndDerivative<T extends RealFieldElement>,FieldODEStateAndDerivative<T extends RealFieldElement>,FieldEquationsMapper<T extends RealFieldElement>)": [
        "org.apache.commons.math3.ode.nonstiff.RungeKuttaFieldStepInterpolator#RungeKuttaFieldStepInterpolator(Field<T extends RealFieldElement>,boolean,T extends RealFieldElement[][],FieldODEStateAndDerivative<T extends RealFieldElement>,FieldODEStateAndDerivative<T extends RealFieldElement>,FieldODEStateAndDerivative<T extends RealFieldElement>,FieldODEStateAndDerivative<T extends RealFieldElement>,FieldEquationsMapper<T extends RealFieldElement>)",
        "org.apache.commons.math3.ode.nonstiff.ClassicalRungeKuttaFieldStepInterpolator.<init>()"
    ],
    "org.apache.commons.math3.linear.Array2DRowFieldMatrix#copy()": [
        "org.apache.commons.math3.linear.Array2DRowFieldMatrix#copyOut()",
        "org.apache.commons.math3.linear.AbstractFieldMatrix#getField()",
        "org.apache.commons.math3.linear.Array2DRowFieldMatrix#Array2DRowFieldMatrix(Field<T extends FieldElement>,T extends FieldElement[][],boolean)"
    ],
    "org.apache.commons.math3.dfp.DfpField.computeExp(Dfp,Dfp)": [
        "org.apache.commons.math3.dfp.Dfp#add(Dfp)",
        "org.apache.commons.math3.dfp.Dfp#Dfp(Dfp)",
        "org.apache.commons.math3.dfp.Dfp#equals(Object)",
        "org.apache.commons.math3.dfp.Dfp#divide(Dfp)",
        "org.apache.commons.math3.dfp.Dfp#multiply(Dfp)"
    ],
    "org.apache.commons.math3.geometry.euclidean.threed.Vector3D#subtract(Vector<Euclidean3D>)": ["org.apache.commons.math3.geometry.euclidean.threed.Vector3D#Vector3D(double,double,double)"],
    "org.apache.commons.math3.geometry.partitioning.AbstractRegion#intersection(SubHyperplane<S extends Space>)": ["org.apache.commons.math3.geometry.partitioning.AbstractRegion#recurseIntersection(BSPTree<S extends Space>,SubHyperplane<S extends Space>)"],
    "org.apache.commons.math3.linear.MatrixUtils.checkSymmetric(RealMatrix,double)": ["org.apache.commons.math3.linear.MatrixUtils.isSymmetricInternal(RealMatrix,double,boolean)"],
    "org.apache.commons.math3.distribution.PascalDistribution#PascalDistribution(int,double)": [
        "org.apache.commons.math3.random.Well19937c#Well19937c()",
        "org.apache.commons.math3.distribution.PascalDistribution#PascalDistribution(RandomGenerator,int,double)"
    ],
    "org.apache.commons.math3.genetics.GeneticAlgorithm#GeneticAlgorithm(CrossoverPolicy,double,MutationPolicy,double,SelectionPolicy)": [
        "org.apache.commons.math3.genetics.GeneticAlgorithm.<init>()",
        "org.apache.commons.math3.exception.util.LocalizedFormats.<staticinit>()"
    ],
    "org.apache.commons.math3.linear.BlockFieldMatrix#setEntry(int,int,T extends FieldElement)": [
        "org.apache.commons.math3.linear.BlockFieldMatrix#blockWidth(int)",
        "org.apache.commons.math3.linear.AbstractFieldMatrix#checkColumnIndex(int)",
        "org.apache.commons.math3.linear.BlockFieldMatrix.<staticinit>()",
        "org.apache.commons.math3.linear.AbstractFieldMatrix#checkRowIndex(int)"
    ],
    "org.apache.commons.math3.distribution.BinomialDistribution#BinomialDistribution(int,double)": [
        "org.apache.commons.math3.random.Well19937c#Well19937c()",
        "org.apache.commons.math3.distribution.BinomialDistribution#BinomialDistribution(RandomGenerator,int,double)"
    ],
    "org.apache.commons.math3.stat.descriptive.SummaryStatistics#equals(Object)": [
        "org.apache.commons.math3.stat.descriptive.SummaryStatistics#getVariance()",
        "org.apache.commons.math3.stat.descriptive.SummaryStatistics#getMax()",
        "org.apache.commons.math3.stat.descriptive.SynchronizedSummaryStatistics#getMin()",
        "org.apache.commons.math3.util.Precision.equalsIncludingNaN(float,float)",
        "org.apache.commons.math3.stat.descriptive.SynchronizedSummaryStatistics#getSum()",
        "org.apache.commons.math3.stat.descriptive.SummaryStatistics#getSum()",
        "org.apache.commons.math3.stat.descriptive.SummaryStatistics#getMean()",
        "org.apache.commons.math3.stat.descriptive.SynchronizedSummaryStatistics#getVariance()",
        "org.apache.commons.math3.stat.descriptive.SynchronizedSummaryStatistics#getGeometricMean()",
        "org.apache.commons.math3.util.Precision.equalsIncludingNaN(double,double)",
        "org.apache.commons.math3.stat.descriptive.SynchronizedSummaryStatistics#getSumsq()",
        "org.apache.commons.math3.stat.descriptive.SummaryStatistics#getN()",
        "org.apache.commons.math3.stat.descriptive.SummaryStatistics#getSumsq()",
        "org.apache.commons.math3.stat.descriptive.SynchronizedSummaryStatistics#getN()",
        "org.apache.commons.math3.stat.descriptive.SummaryStatistics#getGeometricMean()",
        "org.apache.commons.math3.stat.descriptive.SynchronizedSummaryStatistics#getMax()",
        "org.apache.commons.math3.stat.descriptive.SummaryStatistics#getMin()",
        "org.apache.commons.math3.stat.descriptive.SynchronizedSummaryStatistics#getMean()"
    ],
    "org.apache.commons.math3.ode.AbstractIntegrator#initIntegration(double,double[],double)": [
        "org.apache.commons.math3.util.IntegerSequence.Incrementor#withStart(int)",
        "org.apache.commons.math3.ode.MultistepIntegrator.NordsieckInitializer#init(double,double[],double)",
        "org.apache.commons.math3.ode.events.EventFilter#init(double,double[],double)",
        "org.apache.commons.math3.ode.events.EventState#setExpandable(ExpandableStatefulODE)",
        "org.apache.commons.math3.ode.sampling.DummyStepHandler#init(double,double[],double)",
        "org.apache.commons.math3.ode.events.EventState#getEventHandler()",
        "org.apache.commons.math3.ode.ContinuousOutputModel#init(double,double[],double)",
        "org.apache.commons.math3.ode.AbstractIntegrator#setStateInitialized(boolean)",
        "org.apache.commons.math3.ode.sampling.StepNormalizer#init(double,double[],double)"
    ],
    "org.apache.commons.math3.linear.MatrixUtils.FractionMatrixConverter#FractionMatrixConverter()": [
        "org.apache.commons.math3.linear.DefaultFieldMatrixPreservingVisitor#DefaultFieldMatrixPreservingVisitor(T extends FieldElement)",
        "org.apache.commons.math3.fraction.Fraction.<staticinit>()",
        "org.apache.commons.math3.linear.MatrixUtils.FractionMatrixConverter.<init>()"
    ],
    "org.apache.commons.math3.optim.BaseMultiStartMultivariateOptimizer#BaseMultiStartMultivariateOptimizer(BaseMultivariateOptimizer<PAIR>,int,RandomVectorGenerator)": [
        "org.apache.commons.math3.optim.BaseMultivariateOptimizer#BaseMultivariateOptimizer(ConvergenceChecker<PAIR>)",
        "org.apache.commons.math3.optim.BaseMultiStartMultivariateOptimizer.<init>()",
        "org.apache.commons.math3.optim.BaseOptimizer#getConvergenceChecker()"
    ],
    "org.apache.commons.math3.optimization.linear.LinearObjectiveFunction#LinearObjectiveFunction(RealVector,double)": ["org.apache.commons.math3.optimization.linear.LinearObjectiveFunction.<init>()"],
    "org.apache.commons.math3.optimization.LeastSquaresConverter#value(double[])": [
        "org.apache.commons.math3.linear.Array2DRowRealMatrix#operate(double[])",
        "org.apache.commons.math3.linear.DiagonalMatrix#operate(double[])",
        "org.apache.commons.math3.fitting.CurveFitter.TheoreticalValuesFunction#getModelFunction()$MultivariateVectorFunction$1#value(double[])",
        "org.apache.commons.math3.linear.AbstractRealMatrix#operate(double[])",
        "org.apache.commons.math3.optimization.fitting.CurveFitter.OldTheoreticalValuesFunction#value(double[])",
        "org.apache.commons.math3.exception.DimensionMismatchException#DimensionMismatchException(int,int)",
        "org.apache.commons.math3.fitting.AbstractCurveFitter.TheoreticalValuesFunction#getModelFunction()$MultivariateVectorFunction$1#value(double[])",
        "org.apache.commons.math3.optimization.fitting.CurveFitter.TheoreticalValuesFunction#value(double[])",
        "org.apache.commons.math3.analysis.FunctionUtils.toDifferentiableMultivariateFunction(MultivariateDifferentiableFunction)$MultivariateVectorFunction$1$MultivariateVectorFunction$1#gradient()$MultivariateVectorFunction$1#value(double[])",
        "org.apache.commons.math3.analysis.FunctionUtils.toMultivariateDifferentiableVectorFunction(DifferentiableMultivariateVectorFunction)$MultivariateDifferentiableVectorFunction$1#value(double[])",
        "org.apache.commons.math3.analysis.FunctionUtils.toDifferentiableMultivariateVectorFunction(MultivariateDifferentiableVectorFunction)$DifferentiableMultivariateVectorFunction$1#value(double[])",
        "org.apache.commons.math3.linear.BlockRealMatrix#operate(double[])",
        "org.apache.commons.math3.analysis.differentiation.GradientFunction#value(double[])"
    ],
    "org.apache.commons.math3.util.OpenIntToDoubleHashMap#OpenIntToDoubleHashMap(int,double)": [
        "org.apache.commons.math3.util.OpenIntToDoubleHashMap.computeCapacity(int)",
        "org.apache.commons.math3.util.OpenIntToDoubleHashMap.<init>()"
    ],
    "org.apache.commons.math3.stat.regression.MillerUpdatingRegression#MillerUpdatingRegression(int,boolean)": [
        "org.apache.commons.math3.stat.regression.MillerUpdatingRegression#MillerUpdatingRegression(int,boolean,double)",
        "org.apache.commons.math3.util.Precision.<staticinit>()"
    ],
    "org.apache.commons.math3.stat.inference.TTest#tTest(double,double,double,double)": [
        "org.apache.commons.math3.distribution.TDistribution#TDistribution(double,double)",
        "org.apache.commons.math3.stat.inference.TTest#t(double,double,double,double)",
        "org.apache.commons.math3.util.FastMath.abs(double)",
        "org.apache.commons.math3.distribution.TDistribution#cumulativeProbability(double)"
    ],
    "org.apache.commons.math3.geometry.euclidean.twod.SubLine#getSegments()": [
        "org.apache.commons.math3.geometry.euclidean.oned.Interval#getInf()",
        "org.apache.commons.math3.geometry.euclidean.oned.Vector1D#Vector1D(double)",
        "org.apache.commons.math3.geometry.euclidean.oned.Interval#getSup()",
        "org.apache.commons.math3.geometry.euclidean.twod.Line#toSpace(Point<Euclidean1D>)",
        "org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet#asList()",
        "org.apache.commons.math3.geometry.euclidean.twod.Segment#Segment(Vector2D,Vector2D,Line)",
        "org.apache.commons.math3.geometry.partitioning.AbstractSubHyperplane#getRemainingRegion()",
        "org.apache.commons.math3.geometry.partitioning.AbstractSubHyperplane#getHyperplane()"
    ],
    "org.apache.commons.math3.ode.nonstiff.ThreeEighthesFieldStepInterpolator#ThreeEighthesFieldStepInterpolator(Field<T extends RealFieldElement>,boolean,T extends RealFieldElement[][],FieldODEStateAndDerivative<T extends RealFieldElement>,FieldODEStateAndDerivative<T extends RealFieldElement>,FieldODEStateAndDerivative<T extends RealFieldElement>,FieldODEStateAndDerivative<T extends RealFieldElement>,FieldEquationsMapper<T extends RealFieldElement>)": [
        "org.apache.commons.math3.ode.nonstiff.RungeKuttaFieldStepInterpolator#RungeKuttaFieldStepInterpolator(Field<T extends RealFieldElement>,boolean,T extends RealFieldElement[][],FieldODEStateAndDerivative<T extends RealFieldElement>,FieldODEStateAndDerivative<T extends RealFieldElement>,FieldODEStateAndDerivative<T extends RealFieldElement>,FieldODEStateAndDerivative<T extends RealFieldElement>,FieldEquationsMapper<T extends RealFieldElement>)",
        "org.apache.commons.math3.ode.nonstiff.ThreeEighthesFieldStepInterpolator.<init>()"
    ],
    "org.apache.commons.math3.linear.SparseFieldVector#SparseFieldVector(Field<T extends FieldElement>)": ["org.apache.commons.math3.linear.SparseFieldVector#SparseFieldVector(Field<T extends FieldElement>,int)"],
    "org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator#DormandPrince853StepInterpolator()": [
        "org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator.<init>()",
        "org.apache.commons.math3.ode.nonstiff.RungeKuttaStepInterpolator#RungeKuttaStepInterpolator()"
    ],
    "org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile.Marker#estimate()": [
        "org.apache.commons.math3.analysis.FunctionUtils.multiply(DifferentiableUnivariateFunction[]...)$UnivariateFunction$1$UnivariateFunction$1#derivative()$UnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.polynomials.PolynomialSplineFunction#value(double)",
        "org.apache.commons.math3.analysis.function.Gaussian#value(double)",
        "org.apache.commons.math3.analysis.function.Tanh#value(double)",
        "org.apache.commons.math3.analysis.function.Inverse#value(double)",
        "org.apache.commons.math3.analysis.function.HarmonicOscillator#value(double)",
        "org.apache.commons.math3.analysis.interpolation.DividedDifferenceInterpolator#interpolate(double[],double[])",
        "org.apache.commons.math3.analysis.FunctionUtils.fix1stArgument(BivariateFunction,double)$UnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.function.Asin#value(double)",
        "org.apache.commons.math3.analysis.function.Asinh#value(double)",
        "org.apache.commons.math3.analysis.FunctionUtils.multiply(UnivariateFunction[]...)$UnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.function.Atan#value(double)",
        "org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile.Marker#isEstimateBad(double[],double)",
        "org.apache.commons.math3.analysis.FunctionUtils.toDifferentiableUnivariateFunction(UnivariateDifferentiableFunction)$DifferentiableUnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.function.Cbrt#value(double)",
        "org.apache.commons.math3.analysis.polynomials.PolynomialFunctionLagrangeForm#value(double)",
        "org.apache.commons.math3.analysis.function.Exp#value(double)",
        "org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile.Marker#difference()",
        "org.apache.commons.math3.special.BesselJ#value(double)",
        "org.apache.commons.math3.analysis.polynomials.PolynomialFunctionNewtonForm#value(double)",
        "org.apache.commons.math3.analysis.FunctionUtils.add(UnivariateFunction[]...)$UnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.function.Sin#value(double)",
        "org.apache.commons.math3.analysis.function.Cos#value(double)",
        "org.apache.commons.math3.analysis.interpolation.LoessInterpolator#interpolate(double[],double[])",
        "org.apache.commons.math3.analysis.interpolation.UnivariatePeriodicInterpolator#interpolate(double[],double[])$UnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.function.Log10#value(double)",
        "org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile.Marker#incrementPosition(int)",
        "org.apache.commons.math3.analysis.function.Sqrt#value(double)",
        "org.apache.commons.math3.analysis.interpolation.UnivariatePeriodicInterpolator#interpolate(double[],double[])",
        "org.apache.commons.math3.analysis.function.Log#value(double)",
        "org.apache.commons.math3.analysis.function.Sinc#value(double)",
        "org.apache.commons.math3.ode.events.EventState#evaluateStep(StepInterpolator)$UnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.function.Minus#value(double)",
        "org.apache.commons.math3.analysis.integration.IterativeLegendreGaussIntegrator#stage(int)$UnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.interpolation.AkimaSplineInterpolator#interpolate(double[],double[])",
        "org.apache.commons.math3.optimization.general.NonLinearConjugateGradientOptimizer.LineSearchFunction#value(double)",
        "org.apache.commons.math3.analysis.function.Floor#value(double)",
        "org.apache.commons.math3.analysis.FunctionUtils.multiply(DifferentiableUnivariateFunction[]...)$DifferentiableUnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.FunctionUtils.combine(BivariateFunction,UnivariateFunction,UnivariateFunction)$UnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.FunctionUtils.add(DifferentiableUnivariateFunction[]...)$UnivariateFunction$1$UnivariateFunction$1#derivative()$UnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.function.Sinh#value(double)",
        "org.apache.commons.math3.analysis.FunctionUtils.multiply(UnivariateDifferentiableFunction[]...)$UnivariateDifferentiableFunction$1#value(double)",
        "org.apache.commons.math3.analysis.function.Tan#value(double)",
        "org.apache.commons.math3.distribution.AbstractRealDistribution#inverseCumulativeProbability(double)$UnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.FunctionUtils.add(DifferentiableUnivariateFunction[]...)$DifferentiableUnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.function.Ceil#value(double)",
        "org.apache.commons.math3.analysis.function.Logistic#value(double)",
        "org.apache.commons.math3.analysis.function.Signum#value(double)",
        "org.apache.commons.math3.analysis.function.Constant#value(double)",
        "org.apache.commons.math3.analysis.function.Atanh#value(double)",
        "org.apache.commons.math3.analysis.interpolation.SplineInterpolator#interpolate(double[],double[])",
        "org.apache.commons.math3.analysis.FunctionUtils.compose(DifferentiableUnivariateFunction[]...)$UnivariateFunction$1$UnivariateFunction$1#derivative()$UnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.FunctionUtils.add(UnivariateDifferentiableFunction[]...)$UnivariateDifferentiableFunction$1#value(double)",
        "org.apache.commons.math3.analysis.function.Abs#value(double)",
        "org.apache.commons.math3.analysis.differentiation.FiniteDifferencesDifferentiator#differentiate(UnivariateFunction)$UnivariateDifferentiableFunction$1#value(double)",
        "org.apache.commons.math3.analysis.function.Identity#value(double)",
        "org.apache.commons.math3.analysis.function.Expm1#value(double)",
        "org.apache.commons.math3.analysis.interpolation.LinearInterpolator#interpolate(double[],double[])",
        "org.apache.commons.math3.analysis.function.Logit#value(double)",
        "org.apache.commons.math3.analysis.function.Log1p#value(double)",
        "org.apache.commons.math3.analysis.FunctionUtils.fix2ndArgument(BivariateFunction,double)$UnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.FunctionUtils.toUnivariateDifferential(DifferentiableUnivariateFunction)$UnivariateDifferentiableFunction$1#value(double)",
        "org.apache.commons.math3.analysis.FunctionUtils.toDifferentiableUnivariateFunction(UnivariateDifferentiableFunction)$UnivariateFunction$1$UnivariateFunction$1#derivative()$UnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.polynomials.PolynomialFunction#value(double)",
        "org.apache.commons.math3.analysis.function.Rint#value(double)",
        "org.apache.commons.math3.analysis.FunctionUtils.compose(UnivariateFunction[]...)$UnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.function.Cosh#value(double)",
        "org.apache.commons.math3.optimization.direct.PowellOptimizer.LineSearch#search(double[],double[])$UnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.FunctionUtils.compose(DifferentiableUnivariateFunction[]...)$DifferentiableUnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.function.Acosh#value(double)",
        "org.apache.commons.math3.analysis.function.StepFunction#value(double)",
        "org.apache.commons.math3.analysis.FunctionUtils.compose(UnivariateDifferentiableFunction[]...)$UnivariateDifferentiableFunction$1#value(double)",
        "org.apache.commons.math3.analysis.interpolation.NevilleInterpolator#interpolate(double[],double[])",
        "org.apache.commons.math3.analysis.function.Acos#value(double)",
        "org.apache.commons.math3.analysis.function.Power#value(double)",
        "org.apache.commons.math3.optim.nonlinear.scalar.LineSearch#search(double[],double[])$UnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.function.Sigmoid#value(double)",
        "org.apache.commons.math3.analysis.function.Ulp#value(double)"
    ],
    "org.apache.commons.math3.ode.events.Transformer.<staticinit>()": ["org.apache.commons.math3.util.Precision.<staticinit>()"],
    "org.apache.commons.math3.stat.interval.IntervalUtils.getClopperPearsonInterval(int,int,double)": [
        "org.apache.commons.math3.stat.interval.WilsonScoreInterval#createInterval(int,int,double)",
        "org.apache.commons.math3.stat.interval.IntervalUtils.<staticinit>()",
        "org.apache.commons.math3.stat.interval.NormalApproximationInterval#createInterval(int,int,double)",
        "org.apache.commons.math3.stat.interval.AgrestiCoullInterval#createInterval(int,int,double)",
        "org.apache.commons.math3.stat.interval.ClopperPearsonInterval#createInterval(int,int,double)"
    ],
    "org.apache.commons.math3.filter.DefaultProcessModel#DefaultProcessModel(double[][],double[][],double[][],double[],double[][])": [
        "org.apache.commons.math3.filter.DefaultProcessModel#DefaultProcessModel(RealMatrix,RealMatrix,RealMatrix,RealVector,RealMatrix)",
        "org.apache.commons.math3.linear.ArrayRealVector#ArrayRealVector(double[])",
        "org.apache.commons.math3.linear.Array2DRowRealMatrix#Array2DRowRealMatrix(double[][])"
    ],
    "org.apache.commons.math3.geometry.euclidean.twod.Vector2D#crossProduct(Vector2D,Vector2D)": [
        "org.apache.commons.math3.geometry.euclidean.twod.Vector2D#getY()",
        "org.apache.commons.math3.geometry.euclidean.twod.Vector2D#getX()",
        "org.apache.commons.math3.util.MathArrays.linearCombination(double,double,double,double)"
    ],
    "org.apache.commons.math3.analysis.interpolation.InterpolatingMicrosphere#clear()": ["org.apache.commons.math3.analysis.interpolation.InterpolatingMicrosphere.FacetData#FacetData(double,double)"],
    "org.apache.commons.math3.dfp.Dfp#abs()": [
        "org.apache.commons.math3.dfp.DfpDec#newInstance(Dfp)",
        "org.apache.commons.math3.dfp.Dfp#newInstance(Dfp)"
    ],
    "org.apache.commons.math3.dfp.Dfp#cosh()": [
        "org.apache.commons.math3.dfp.Dfp#add(Dfp)",
        "org.apache.commons.math3.dfp.Dfp#negate()",
        "org.apache.commons.math3.dfp.DfpMath.exp(Dfp)",
        "org.apache.commons.math3.dfp.Dfp#divide(int)"
    ],
    "org.apache.commons.math3.distribution.TriangularDistribution#inverseCumulativeProbability(double)": ["org.apache.commons.math3.util.FastMath.sqrt(double)"],
    "org.apache.commons.math3.optim.nonlinear.vector.MultivariateVectorOptimizer#checkParameters()": [
        "org.apache.commons.math3.linear.SparseFieldMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.DiagonalMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.Array2DRowRealMatrix#getColumnDimension()",
        "org.apache.commons.math3.exception.DimensionMismatchException#DimensionMismatchException(int,int)",
        "org.apache.commons.math3.linear.BlockFieldMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.OpenMapRealMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.BlockRealMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.Array2DRowFieldMatrix#getColumnDimension()"
    ],
    "org.apache.commons.math3.util.MultidimensionalCounter#MultidimensionalCounter(int[]...)": [
        "org.apache.commons.math3.util.MultidimensionalCounter.<init>()",
        "org.apache.commons.math3.util.MathArrays.copyOf(int[])"
    ],
    "org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet#getUnprocessed(List<ConnectableSegment>)": ["org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.ConnectableSegment#isProcessed()"],
    "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizer#SimplexOptimizer(double,double)": [
        "org.apache.commons.math3.optim.SimpleValueChecker#SimpleValueChecker(double,double)",
        "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizer#SimplexOptimizer(ConvergenceChecker<PointValuePair>)"
    ],
    "org.apache.commons.math3.geometry.spherical.oned.LimitAngle#getOffset(Point<Sphere1D>)": ["org.apache.commons.math3.geometry.spherical.oned.S1Point#getAlpha()"],
    "org.apache.commons.math3.ode.nonstiff.GraggBulirschStoerIntegrator#rescale(double[],double[],double[])": [
        "org.apache.commons.math3.util.FastMath.abs(double)",
        "org.apache.commons.math3.util.FastMath.max(double,double)"
    ],
    "org.apache.commons.math3.dfp.Dfp#Dfp(DfpField,byte,byte)": [
        "org.apache.commons.math3.dfp.Dfp.<staticinit>()",
        "org.apache.commons.math3.dfp.Dfp.<init>()",
        "org.apache.commons.math3.dfp.DfpField#getRadixDigits()"
    ],
    "org.apache.commons.math3.util.BigReal#BigReal(int)": ["org.apache.commons.math3.util.BigReal.<init>()"],
    "org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.SegmentsBuilder#SegmentsBuilder(double)": ["org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.SegmentsBuilder.<init>()"],
    "org.apache.commons.math3.genetics.BinaryChromosome#checkValidity(List<Integer>)": ["org.apache.commons.math3.exception.util.LocalizedFormats.<staticinit>()"],
    "org.apache.commons.math3.geometry.spherical.oned.LimitAngle#wholeHyperplane()": ["org.apache.commons.math3.geometry.spherical.oned.SubLimitAngle#SubLimitAngle(Hyperplane<Sphere1D>,Region<Sphere1D>)"],
    "org.apache.commons.math3.dfp.Dfp#floor()": [
        "org.apache.commons.math3.dfp.Dfp#trunc(RoundingMode)",
        "org.apache.commons.math3.dfp.DfpField.RoundingMode.<staticinit>()"
    ],
    "org.apache.commons.math3.analysis.function.Log10#value(DerivativeStructure)": ["org.apache.commons.math3.analysis.differentiation.DerivativeStructure#log10()"],
    "org.apache.commons.math3.optim.linear.LinearConstraintSet#LinearConstraintSet(LinearConstraint[]...)": ["org.apache.commons.math3.optim.linear.LinearConstraintSet.<init>()"],
    "org.apache.commons.math3.stat.correlation.KendallsCorrelation#KendallsCorrelation(double[][])": [
        "org.apache.commons.math3.stat.correlation.KendallsCorrelation#KendallsCorrelation(RealMatrix)",
        "org.apache.commons.math3.linear.MatrixUtils.createRealMatrix(double[][])"
    ],
    "org.apache.commons.math3.genetics.ListPopulation#setPopulationLimit(int)": ["org.apache.commons.math3.exception.util.LocalizedFormats.<staticinit>()"],
    "org.apache.commons.math3.linear.RealVector#map(UnivariateFunction)": [
        "org.apache.commons.math3.linear.ArrayRealVector#copy()",
        "org.apache.commons.math3.linear.RealVector.unmodifiableRealVector(RealVector)$RealVector$1#copy()",
        "org.apache.commons.math3.linear.RealVector.unmodifiableRealVector(RealVector)$RealVector$1#mapToSelf(UnivariateFunction)",
        "org.apache.commons.math3.linear.ArrayRealVector#mapToSelf(UnivariateFunction)",
        "org.apache.commons.math3.linear.OpenMapRealVector#copy()",
        "org.apache.commons.math3.linear.RealVector#mapToSelf(UnivariateFunction)"
    ],
    "org.apache.commons.math3.linear.EigenDecomposition#hasComplexEigenvalues()": [
        "org.apache.commons.math3.util.Precision.equals(double,double,double)",
        "org.apache.commons.math3.linear.EigenDecomposition.<staticinit>()"
    ],
    "org.apache.commons.math3.analysis.differentiation.SparseGradient#divide(double)": ["org.apache.commons.math3.analysis.differentiation.SparseGradient#SparseGradient(double,double,Map<Integer, Double>)"],
    "org.apache.commons.math3.geometry.euclidean.threed.FieldRotation#mat2quat(T extends RealFieldElement[][])": ["org.apache.commons.math3.util.MathArrays.buildArray(Field<T>,int)"],
    "org.apache.commons.math3.stat.Frequency#addValue(long)": ["org.apache.commons.math3.stat.Frequency#addValue(long)"],
    "org.apache.commons.math3.distribution.GumbelDistribution#cumulativeProbability(double)": ["org.apache.commons.math3.util.FastMath.exp(double)"],
    "org.apache.commons.math3.distribution.ExponentialDistribution.<staticinit>()": [
        "org.apache.commons.math3.util.CombinatoricsUtils.factorial(int)",
        "org.apache.commons.math3.util.FastMath.pow(double,int)",
        "org.apache.commons.math3.util.ResizableDoubleArray#addElement(double)",
        "org.apache.commons.math3.util.FastMath.log(double)",
        "org.apache.commons.math3.util.ResizableDoubleArray#ResizableDoubleArray(int)",
        "org.apache.commons.math3.util.ResizableDoubleArray#getElements()"
    ],
    "org.apache.commons.math3.userguide.genetics.HelloWorldExample.StringChromosome#checkValidity(List<Character>)": ["org.apache.commons.math3.exception.util.LocalizedFormats.<staticinit>()"],
    "org.apache.commons.math3.optimization.general.AbstractScalarDifferentiableOptimizer#AbstractScalarDifferentiableOptimizer()": [
        "org.apache.commons.math3.optimization.direct.BaseAbstractMultivariateOptimizer#BaseAbstractMultivariateOptimizer()",
        "org.apache.commons.math3.optimization.general.AbstractScalarDifferentiableOptimizer.<init>()"
    ],
    "org.apache.commons.math3.ode.nonstiff.ThreeEighthesFieldIntegrator#getA()": [
        "org.apache.commons.math3.util.Decimal64#negate()",
        "org.apache.commons.math3.analysis.differentiation.DerivativeStructure#negate()",
        "org.apache.commons.math3.ode.nonstiff.RungeKuttaFieldIntegrator#fraction(int,int)",
        "org.apache.commons.math3.ode.AbstractFieldIntegrator#getField()",
        "org.apache.commons.math3.fraction.BigFractionField#getOne()",
        "org.apache.commons.math3.fraction.FractionField#getOne()",
        "org.apache.commons.math3.analysis.differentiation.SparseGradient#getField()$Field$1#getOne()",
        "org.apache.commons.math3.complex.Complex#negate()",
        "org.apache.commons.math3.complex.ComplexField#getOne()",
        "org.apache.commons.math3.util.BigRealField#getOne()",
        "org.apache.commons.math3.analysis.differentiation.SparseGradient#negate()",
        "org.apache.commons.math3.util.MathArrays.buildArray(Field<T>,int,int)",
        "org.apache.commons.math3.fraction.BigFraction#negate()",
        "org.apache.commons.math3.dfp.DfpField#getOne()",
        "org.apache.commons.math3.dfp.Dfp#negate()",
        "org.apache.commons.math3.analysis.differentiation.DerivativeStructure#getField()$Field$1#getOne()",
        "org.apache.commons.math3.util.MathArrays.buildArray(Field<T>,int)",
        "org.apache.commons.math3.fraction.Fraction#negate()",
        "org.apache.commons.math3.util.Decimal64Field#getOne()",
        "org.apache.commons.math3.util.BigReal#negate()"
    ],
    "org.apache.commons.math3.linear.Array2DRowFieldMatrix#Array2DRowFieldMatrix(Field<T extends FieldElement>,T extends FieldElement[][])": [
        "org.apache.commons.math3.linear.AbstractFieldMatrix#AbstractFieldMatrix(Field<T extends FieldElement>)",
        "org.apache.commons.math3.linear.Array2DRowFieldMatrix.<init>()",
        "org.apache.commons.math3.linear.Array2DRowFieldMatrix#copyIn(T extends FieldElement[][])"
    ],
    "org.apache.commons.math3.optimization.univariate.BaseAbstractUnivariateOptimizer#computeObjectiveValue(double)": [
        "org.apache.commons.math3.analysis.FunctionUtils.multiply(DifferentiableUnivariateFunction[]...)$UnivariateFunction$1$UnivariateFunction$1#derivative()$UnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.polynomials.PolynomialSplineFunction#value(double)",
        "org.apache.commons.math3.analysis.function.Gaussian#value(double)",
        "org.apache.commons.math3.analysis.function.Tanh#value(double)",
        "org.apache.commons.math3.analysis.function.Inverse#value(double)",
        "org.apache.commons.math3.analysis.function.HarmonicOscillator#value(double)",
        "org.apache.commons.math3.analysis.FunctionUtils.fix1stArgument(BivariateFunction,double)$UnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.function.Asin#value(double)",
        "org.apache.commons.math3.analysis.function.Asinh#value(double)",
        "org.apache.commons.math3.analysis.FunctionUtils.multiply(UnivariateFunction[]...)$UnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.function.Atan#value(double)",
        "org.apache.commons.math3.analysis.FunctionUtils.toDifferentiableUnivariateFunction(UnivariateDifferentiableFunction)$DifferentiableUnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.function.Cbrt#value(double)",
        "org.apache.commons.math3.exception.MaxCountExceededException#getMax()",
        "org.apache.commons.math3.analysis.polynomials.PolynomialFunctionLagrangeForm#value(double)",
        "org.apache.commons.math3.analysis.function.Exp#value(double)",
        "org.apache.commons.math3.special.BesselJ#value(double)",
        "org.apache.commons.math3.analysis.polynomials.PolynomialFunctionNewtonForm#value(double)",
        "org.apache.commons.math3.analysis.FunctionUtils.add(UnivariateFunction[]...)$UnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.function.Sin#value(double)",
        "org.apache.commons.math3.analysis.function.Cos#value(double)",
        "org.apache.commons.math3.analysis.interpolation.UnivariatePeriodicInterpolator#interpolate(double[],double[])$UnivariateFunction$1#value(double)",
        "org.apache.commons.math3.exception.TooManyEvaluationsException#TooManyEvaluationsException(Number)",
        "org.apache.commons.math3.analysis.function.Log10#value(double)",
        "org.apache.commons.math3.analysis.function.Sqrt#value(double)",
        "org.apache.commons.math3.analysis.function.Log#value(double)",
        "org.apache.commons.math3.analysis.function.Sinc#value(double)",
        "org.apache.commons.math3.ode.events.EventState#evaluateStep(StepInterpolator)$UnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.function.Minus#value(double)",
        "org.apache.commons.math3.analysis.integration.IterativeLegendreGaussIntegrator#stage(int)$UnivariateFunction$1#value(double)",
        "org.apache.commons.math3.optimization.general.NonLinearConjugateGradientOptimizer.LineSearchFunction#value(double)",
        "org.apache.commons.math3.analysis.function.Floor#value(double)",
        "org.apache.commons.math3.analysis.FunctionUtils.multiply(DifferentiableUnivariateFunction[]...)$DifferentiableUnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.FunctionUtils.combine(BivariateFunction,UnivariateFunction,UnivariateFunction)$UnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.FunctionUtils.add(DifferentiableUnivariateFunction[]...)$UnivariateFunction$1$UnivariateFunction$1#derivative()$UnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.function.Sinh#value(double)",
        "org.apache.commons.math3.analysis.FunctionUtils.multiply(UnivariateDifferentiableFunction[]...)$UnivariateDifferentiableFunction$1#value(double)",
        "org.apache.commons.math3.analysis.function.Tan#value(double)",
        "org.apache.commons.math3.distribution.AbstractRealDistribution#inverseCumulativeProbability(double)$UnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.FunctionUtils.add(DifferentiableUnivariateFunction[]...)$DifferentiableUnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.function.Ceil#value(double)",
        "org.apache.commons.math3.analysis.function.Logistic#value(double)",
        "org.apache.commons.math3.analysis.function.Signum#value(double)",
        "org.apache.commons.math3.analysis.function.Constant#value(double)",
        "org.apache.commons.math3.analysis.function.Atanh#value(double)",
        "org.apache.commons.math3.analysis.FunctionUtils.compose(DifferentiableUnivariateFunction[]...)$UnivariateFunction$1$UnivariateFunction$1#derivative()$UnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.FunctionUtils.add(UnivariateDifferentiableFunction[]...)$UnivariateDifferentiableFunction$1#value(double)",
        "org.apache.commons.math3.analysis.function.Abs#value(double)",
        "org.apache.commons.math3.analysis.differentiation.FiniteDifferencesDifferentiator#differentiate(UnivariateFunction)$UnivariateDifferentiableFunction$1#value(double)",
        "org.apache.commons.math3.analysis.function.Identity#value(double)",
        "org.apache.commons.math3.analysis.function.Expm1#value(double)",
        "org.apache.commons.math3.util.Incrementor.wrap(Incrementor)$Incrementor$1#incrementCount()",
        "org.apache.commons.math3.analysis.function.Logit#value(double)",
        "org.apache.commons.math3.analysis.function.Log1p#value(double)",
        "org.apache.commons.math3.analysis.FunctionUtils.fix2ndArgument(BivariateFunction,double)$UnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.FunctionUtils.toUnivariateDifferential(DifferentiableUnivariateFunction)$UnivariateDifferentiableFunction$1#value(double)",
        "org.apache.commons.math3.analysis.FunctionUtils.toDifferentiableUnivariateFunction(UnivariateDifferentiableFunction)$UnivariateFunction$1$UnivariateFunction$1#derivative()$UnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.polynomials.PolynomialFunction#value(double)",
        "org.apache.commons.math3.analysis.function.Rint#value(double)",
        "org.apache.commons.math3.analysis.FunctionUtils.compose(UnivariateFunction[]...)$UnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.function.Cosh#value(double)",
        "org.apache.commons.math3.optimization.direct.PowellOptimizer.LineSearch#search(double[],double[])$UnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.FunctionUtils.compose(DifferentiableUnivariateFunction[]...)$DifferentiableUnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.function.Acosh#value(double)",
        "org.apache.commons.math3.analysis.function.StepFunction#value(double)",
        "org.apache.commons.math3.analysis.FunctionUtils.compose(UnivariateDifferentiableFunction[]...)$UnivariateDifferentiableFunction$1#value(double)",
        "org.apache.commons.math3.analysis.function.Acos#value(double)",
        "org.apache.commons.math3.analysis.function.Power#value(double)",
        "org.apache.commons.math3.util.Incrementor#incrementCount()",
        "org.apache.commons.math3.optim.nonlinear.scalar.LineSearch#search(double[],double[])$UnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.function.Sigmoid#value(double)",
        "org.apache.commons.math3.analysis.function.Ulp#value(double)"
    ],
    "org.apache.commons.math3.ode.nonstiff.DormandPrince54StepInterpolator#DormandPrince54StepInterpolator()": [
        "org.apache.commons.math3.ode.nonstiff.DormandPrince54StepInterpolator.<init>()",
        "org.apache.commons.math3.ode.nonstiff.RungeKuttaStepInterpolator#RungeKuttaStepInterpolator()"
    ],
    "org.apache.commons.math3.random.RandomDataGenerator#nextExponential(double)": [
        "org.apache.commons.math3.distribution.ExponentialDistribution#sample()",
        "org.apache.commons.math3.distribution.ExponentialDistribution#ExponentialDistribution(RandomGenerator,double,double)",
        "org.apache.commons.math3.random.RandomDataGenerator#getRandomGenerator()",
        "org.apache.commons.math3.distribution.ExponentialDistribution.<staticinit>()"
    ],
    "org.apache.commons.math3.stat.descriptive.DescriptiveStatistics#getSkewness()": [
        "org.apache.commons.math3.stat.descriptive.DescriptiveStatistics#apply(UnivariateStatistic)",
        "org.apache.commons.math3.stat.descriptive.SynchronizedDescriptiveStatistics#apply(UnivariateStatistic)"
    ],
    "org.apache.commons.math3.random.ISAACRandom#initState()": [
        "org.apache.commons.math3.random.ISAACRandom.<staticinit>()",
        "org.apache.commons.math3.random.ISAACRandom#setState(int)",
        "org.apache.commons.math3.random.ISAACRandom#shuffle()",
        "org.apache.commons.math3.random.BitsStreamGenerator#clear()",
        "org.apache.commons.math3.random.ISAACRandom#isaac()"
    ],
    "org.apache.commons.math3.analysis.function.Power#derivative()": [
        "org.apache.commons.math3.analysis.function.Log10#derivative()",
        "org.apache.commons.math3.analysis.function.Power#derivative()",
        "org.apache.commons.math3.analysis.function.Sin#derivative()",
        "org.apache.commons.math3.analysis.function.Exp#derivative()",
        "org.apache.commons.math3.analysis.function.HarmonicOscillator#derivative()",
        "org.apache.commons.math3.analysis.polynomials.PolynomialFunction#derivative()",
        "org.apache.commons.math3.analysis.function.Logit#derivative()",
        "org.apache.commons.math3.analysis.function.Cbrt#derivative()",
        "org.apache.commons.math3.analysis.FunctionUtils.toDifferentiableUnivariateFunction(UnivariateDifferentiableFunction)",
        "org.apache.commons.math3.analysis.FunctionUtils.toDifferentiableUnivariateFunction(UnivariateDifferentiableFunction)$DifferentiableUnivariateFunction$1#derivative()",
        "org.apache.commons.math3.analysis.polynomials.PolynomialSplineFunction#derivative()",
        "org.apache.commons.math3.analysis.function.Cosh#derivative()",
        "org.apache.commons.math3.analysis.function.Identity#derivative()",
        "org.apache.commons.math3.analysis.function.Inverse#derivative()",
        "org.apache.commons.math3.analysis.function.Acosh#derivative()",
        "org.apache.commons.math3.analysis.function.Acos#derivative()",
        "org.apache.commons.math3.analysis.function.Atan#derivative()",
        "org.apache.commons.math3.analysis.function.Log#derivative()",
        "org.apache.commons.math3.analysis.function.Sqrt#derivative()",
        "org.apache.commons.math3.analysis.function.Logistic#derivative()",
        "org.apache.commons.math3.analysis.function.Expm1#derivative()",
        "org.apache.commons.math3.analysis.function.Asinh#derivative()",
        "org.apache.commons.math3.analysis.function.Gaussian#derivative()",
        "org.apache.commons.math3.analysis.function.Sinc#derivative()",
        "org.apache.commons.math3.analysis.function.Sigmoid#derivative()",
        "org.apache.commons.math3.analysis.function.Constant#derivative()",
        "org.apache.commons.math3.analysis.function.Sinh#derivative()",
        "org.apache.commons.math3.analysis.function.Tanh#derivative()",
        "org.apache.commons.math3.analysis.function.Asin#derivative()",
        "org.apache.commons.math3.analysis.function.Minus#derivative()",
        "org.apache.commons.math3.analysis.FunctionUtils.compose(DifferentiableUnivariateFunction[]...)$DifferentiableUnivariateFunction$1#derivative()",
        "org.apache.commons.math3.analysis.FunctionUtils.add(DifferentiableUnivariateFunction[]...)$DifferentiableUnivariateFunction$1#derivative()",
        "org.apache.commons.math3.analysis.FunctionUtils.multiply(DifferentiableUnivariateFunction[]...)$DifferentiableUnivariateFunction$1#derivative()",
        "org.apache.commons.math3.analysis.function.Log1p#derivative()",
        "org.apache.commons.math3.analysis.function.Tan#derivative()",
        "org.apache.commons.math3.analysis.function.Cos#derivative()",
        "org.apache.commons.math3.analysis.function.Atanh#derivative()"
    ],
    "org.apache.commons.math3.ode.nonstiff.HighamHall54StepInterpolator#HighamHall54StepInterpolator(HighamHall54StepInterpolator)": [
        "org.apache.commons.math3.ode.nonstiff.HighamHall54StepInterpolator.<init>()",
        "org.apache.commons.math3.ode.nonstiff.RungeKuttaStepInterpolator#RungeKuttaStepInterpolator(RungeKuttaStepInterpolator)"
    ],
    "org.apache.commons.math3.linear.EigenDecomposition.Solver#solve(RealVector)": [
        "org.apache.commons.math3.linear.OpenMapRealVector#getDimension()",
        "org.apache.commons.math3.exception.DimensionMismatchException#DimensionMismatchException(int,int)",
        "org.apache.commons.math3.linear.ArrayRealVector#getDimension()",
        "org.apache.commons.math3.linear.ArrayRealVector#dotProduct(RealVector)",
        "org.apache.commons.math3.linear.SingularMatrixException#SingularMatrixException()",
        "org.apache.commons.math3.linear.ArrayRealVector#ArrayRealVector(double[],boolean)",
        "org.apache.commons.math3.linear.ArrayRealVector#getDataRef()",
        "org.apache.commons.math3.linear.EigenDecomposition.Solver#isNonSingular()",
        "org.apache.commons.math3.linear.RealVector.unmodifiableRealVector(RealVector)$RealVector$1#getDimension()"
    ],
    "org.apache.commons.math3.optimization.univariate.BracketFinder#getEvaluations()": ["org.apache.commons.math3.util.Incrementor#getCount()"],
    "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.NelderMeadSimplex#NelderMeadSimplex(int,double)": [
        "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.NelderMeadSimplex#NelderMeadSimplex(int,double,double,double,double,double)",
        "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.NelderMeadSimplex.<staticinit>()"
    ],
    "org.apache.commons.math3.fitting.leastsquares.LeastSquaresFactory.LocalLeastSquaresProblem.LazyUnweightedEvaluation#LazyUnweightedEvaluation(ValueAndJacobianFunction,RealVector,RealVector)": [
        "org.apache.commons.math3.linear.OpenMapRealVector#getDimension()",
        "org.apache.commons.math3.linear.ArrayRealVector#getDimension()",
        "org.apache.commons.math3.linear.RealVector.unmodifiableRealVector(RealVector)$RealVector$1#getDimension()",
        "org.apache.commons.math3.fitting.leastsquares.AbstractEvaluation#AbstractEvaluation(int)",
        "org.apache.commons.math3.fitting.leastsquares.LeastSquaresFactory.LocalLeastSquaresProblem.LazyUnweightedEvaluation.<init>()"
    ],
    "org.apache.commons.math3.util.RandomPivotingStrategy#pivotIndex(double[],int,int)": [
        "org.apache.commons.math3.random.BitsStreamGenerator#nextInt(int)",
        "org.apache.commons.math3.random.AbstractRandomGenerator#nextInt(int)",
        "org.apache.commons.math3.random.SynchronizedRandomGenerator#nextInt(int)",
        "org.apache.commons.math3.random.RandomAdaptor#nextInt(int)",
        "org.apache.commons.math3.util.MathArrays.verifyValues(double[],int,int)",
        "org.apache.commons.math3.random.RandomGeneratorFactory.createRandomGenerator(Random)$RandomGenerator$1#nextInt(int)"
    ],
    "org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D.distanceSq(FieldVector3D<T extends RealFieldElement>,FieldVector3D<T extends RealFieldElement>)": ["org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D#distanceSq(FieldVector3D<T extends RealFieldElement>)"],
    "org.apache.commons.math3.dfp.Dfp#round()": [
        "org.apache.commons.math3.dfp.Dfp#toDouble()",
        "org.apache.commons.math3.util.FastMath.round(double)"
    ],
    "org.apache.commons.math3.stat.correlation.PearsonsCorrelation#PearsonsCorrelation(RealMatrix,int)": [
        "org.apache.commons.math3.stat.correlation.PearsonsCorrelation#covarianceToCorrelation(RealMatrix)",
        "org.apache.commons.math3.stat.correlation.PearsonsCorrelation.<init>()"
    ],
    "org.apache.commons.math3.analysis.differentiation.SparseGradient#equals(Object)": [
        "org.apache.commons.math3.util.Precision.equals(float,float,int)",
        "org.apache.commons.math3.util.Precision.equals(double,double,int)"
    ],
    "org.apache.commons.math3.analysis.solvers.UnivariateSolverUtils.solve(UnivariateFunction,double,double)": [
        "org.apache.commons.math3.analysis.solvers.BrentSolver#BrentSolver()",
        "org.apache.commons.math3.exception.util.LocalizedFormats.<staticinit>()",
        "org.apache.commons.math3.analysis.solvers.BaseAbstractUnivariateSolver#solve(int,FUNC extends UnivariateFunction,double,double)"
    ],
    "org.apache.commons.math3.analysis.solvers.BisectionSolver#BisectionSolver(double)": [
        "org.apache.commons.math3.analysis.solvers.AbstractUnivariateSolver#AbstractUnivariateSolver(double)",
        "org.apache.commons.math3.analysis.solvers.BisectionSolver.<init>()"
    ],
    "org.apache.commons.math3.linear.ArrayRealVector#walkInDefaultOrder(RealVectorChangingVisitor,int,int)": ["org.apache.commons.math3.linear.RealVector#checkIndices(int,int)"],
    "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer#updateBD(double)": [
        "org.apache.commons.math3.linear.EigenDecomposition#EigenDecomposition(RealMatrix)",
        "org.apache.commons.math3.linear.Array2DRowRealMatrix#setEntry(int,int,double)",
        "org.apache.commons.math3.linear.DiagonalMatrix#getEntry(int,int)",
        "org.apache.commons.math3.linear.BlockRealMatrix#getEntry(int,int)",
        "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer.repmat(RealMatrix,int,int)",
        "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer.sqrt(RealMatrix)",
        "org.apache.commons.math3.linear.DiagonalMatrix#setEntry(int,int,double)",
        "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer.eye(int,int)",
        "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer.ones(int,int)",
        "org.apache.commons.math3.linear.EigenDecomposition#getD()",
        "org.apache.commons.math3.linear.BlockRealMatrix#scalarMultiply(double)",
        "org.apache.commons.math3.linear.BlockRealMatrix#transpose()",
        "org.apache.commons.math3.linear.BlockRealMatrix#setEntry(int,int,double)",
        "org.apache.commons.math3.linear.OpenMapRealMatrix#setEntry(int,int,double)",
        "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer.diag(RealMatrix)",
        "org.apache.commons.math3.linear.OpenMapRealMatrix#getEntry(int,int)",
        "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer.min(RealMatrix)",
        "org.apache.commons.math3.linear.Array2DRowRealMatrix#getEntry(int,int)",
        "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer.times(RealMatrix,RealMatrix)",
        "org.apache.commons.math3.linear.EigenDecomposition#getV()",
        "org.apache.commons.math3.linear.BlockRealMatrix#add(RealMatrix)",
        "org.apache.commons.math3.linear.AbstractRealMatrix#scalarMultiply(double)",
        "org.apache.commons.math3.linear.AbstractRealMatrix#transpose()",
        "org.apache.commons.math3.linear.AbstractRealMatrix#add(RealMatrix)",
        "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer.triu(RealMatrix,int)",
        "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer.max(RealMatrix)"
    ],
    "org.apache.commons.math3.linear.RealVectorFormat.getInstance()": ["org.apache.commons.math3.linear.RealVectorFormat.getInstance(Locale)"],
    "org.apache.commons.math3.userguide.sofm.ChineseRingsClassifier#createRandomIterator(long)$Iterator$1#next()": [
        "org.apache.commons.math3.random.BitsStreamGenerator#nextInt(int)",
        "org.apache.commons.math3.random.AbstractRandomGenerator#nextInt(int)",
        "org.apache.commons.math3.random.SynchronizedRandomGenerator#nextInt(int)",
        "org.apache.commons.math3.random.RandomAdaptor#nextInt(int)",
        "org.apache.commons.math3.geometry.euclidean.threed.Vector3D#toArray()",
        "org.apache.commons.math3.random.RandomGeneratorFactory.createRandomGenerator(Random)$RandomGenerator$1#nextInt(int)"
    ],
    "org.apache.commons.math3.fraction.BigFractionFormat.getImproperInstance(Locale)": [
        "org.apache.commons.math3.fraction.AbstractFormat.getDefaultNumberFormat(Locale)",
        "org.apache.commons.math3.fraction.BigFractionFormat#BigFractionFormat(NumberFormat)"
    ],
    "org.apache.commons.math3.stat.correlation.Covariance#checkSufficientData(RealMatrix)": [
        "org.apache.commons.math3.linear.DiagonalMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.Array2DRowRealMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.BlockFieldMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.SparseFieldMatrix#getRowDimension()",
        "org.apache.commons.math3.exception.util.LocalizedFormats.<staticinit>()",
        "org.apache.commons.math3.linear.OpenMapRealMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.OpenMapRealMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.DiagonalMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.Array2DRowFieldMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.SparseFieldMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.BlockFieldMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.BlockRealMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.Array2DRowRealMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.Array2DRowFieldMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.BlockRealMatrix#getColumnDimension()"
    ],
    "org.apache.commons.math3.linear.SingularValueDecomposition#getUT()": [
        "org.apache.commons.math3.linear.BlockRealMatrix#transpose()",
        "org.apache.commons.math3.linear.AbstractRealMatrix#transpose()",
        "org.apache.commons.math3.linear.SingularValueDecomposition#getU()"
    ],
    "org.apache.commons.math3.stat.correlation.SpearmansCorrelation#SpearmansCorrelation(RealMatrix,RankingAlgorithm)": [
        "org.apache.commons.math3.stat.correlation.SpearmansCorrelation.<init>()",
        "org.apache.commons.math3.stat.correlation.PearsonsCorrelation#PearsonsCorrelation(RealMatrix)",
        "org.apache.commons.math3.stat.ranking.NaNStrategy.<staticinit>()",
        "org.apache.commons.math3.stat.correlation.SpearmansCorrelation#rankTransform(RealMatrix)"
    ],
    "org.apache.commons.math3.stat.inference.TestUtils.pairedTTest(double[],double[],double)": [
        "org.apache.commons.math3.stat.inference.TTest#pairedTTest(double[],double[],double)",
        "org.apache.commons.math3.stat.inference.TestUtils.<staticinit>()"
    ],
    "org.apache.commons.math3.exception.DimensionMismatchException#DimensionMismatchException(Localizable,int,int)": ["org.apache.commons.math3.exception.DimensionMismatchException.<init>()"],
    "org.apache.commons.math3.analysis.function.Logit#value(DerivativeStructure)": [
        "org.apache.commons.math3.analysis.differentiation.DerivativeStructure#getValue()",
        "org.apache.commons.math3.util.FastMath.log(double)",
        "org.apache.commons.math3.analysis.differentiation.DerivativeStructure#compose(double[]...)",
        "org.apache.commons.math3.analysis.differentiation.DerivativeStructure#getOrder()"
    ],
    "org.apache.commons.math3.genetics.OnePointCrossover#crossover(Chromosome,Chromosome)": [
        "org.apache.commons.math3.exception.util.LocalizedFormats.<staticinit>()",
        "org.apache.commons.math3.genetics.OnePointCrossover#crossover(AbstractListChromosome<T>,AbstractListChromosome<T>)"
    ],
    "org.apache.commons.math3.linear.SingularValueDecomposition.Solver#solve(RealVector)": ["org.apache.commons.math3.linear.AbstractRealMatrix#operate(RealVector)"],
    "org.apache.commons.math3.analysis.function.Cos#value(DerivativeStructure)": ["org.apache.commons.math3.analysis.differentiation.DerivativeStructure#cos()"],
    "org.apache.commons.math3.stat.regression.AbstractMultipleLinearRegression#validateSampleData(double[][],double[])": [
        "org.apache.commons.math3.exception.DimensionMismatchException#DimensionMismatchException(int,int)",
        "org.apache.commons.math3.exception.NullArgumentException#NullArgumentException()",
        "org.apache.commons.math3.exception.NoDataException#NoDataException()",
        "org.apache.commons.math3.exception.util.LocalizedFormats.<staticinit>()"
    ],
    "org.apache.commons.math3.geometry.euclidean.twod.Line#intersection(Line)": [
        "org.apache.commons.math3.util.FastMath.abs(double)",
        "org.apache.commons.math3.geometry.euclidean.twod.Vector2D#Vector2D(double,double)",
        "org.apache.commons.math3.util.MathArrays.linearCombination(double,double,double,double)"
    ],
    "org.apache.commons.math3.util.MathUtils#MathUtils()": ["org.apache.commons.math3.util.MathUtils.<init>()"],
    "org.apache.commons.math3.stat.regression.SimpleRegression#getRegressionSumSquares()": [
        "org.apache.commons.math3.stat.regression.SimpleRegression#getSlope()",
        "org.apache.commons.math3.stat.regression.SimpleRegression#getRegressionSumSquares(double)"
    ],
    "org.apache.commons.math3.analysis.differentiation.SparseGradient#rint()": [
        "org.apache.commons.math3.util.FastMath.rint(double)",
        "org.apache.commons.math3.analysis.differentiation.SparseGradient.createConstant(double)"
    ],
    "org.apache.commons.math3.stat.clustering.Cluster#Cluster(T extends Clusterable)": ["org.apache.commons.math3.stat.clustering.Cluster.<init>()"],
    "org.apache.commons.math3.ode.MultistepFieldIntegrator#MultistepFieldIntegrator(Field<T extends RealFieldElement>,String,int,int,double,double,double[],double[])": [
        "org.apache.commons.math3.ode.MultistepFieldIntegrator.<init>()",
        "org.apache.commons.math3.ode.nonstiff.DormandPrince853FieldIntegrator#DormandPrince853FieldIntegrator(Field<T extends RealFieldElement>,double,double,double[],double[])",
        "org.apache.commons.math3.util.FastMath.pow(double,double)",
        "org.apache.commons.math3.ode.nonstiff.AdaptiveStepsizeFieldIntegrator#AdaptiveStepsizeFieldIntegrator(Field<T extends RealFieldElement>,String,double,double,double[],double[])",
        "org.apache.commons.math3.ode.MultistepFieldIntegrator#setMaxGrowth(double)",
        "org.apache.commons.math3.ode.MultistepFieldIntegrator#setMinReduction(double)",
        "org.apache.commons.math3.ode.MultistepFieldIntegrator#setSafety(double)"
    ],
    "org.apache.commons.math3.analysis.FunctionUtils.compose(DifferentiableUnivariateFunction[]...)$DifferentiableUnivariateFunction$1#derivative()": ["org.apache.commons.math3.analysis.FunctionUtils.compose(DifferentiableUnivariateFunction[]...)$UnivariateFunction$1$UnivariateFunction$1#derivative()$UnivariateFunction$1.<init>()"],
    "org.apache.commons.math3.util.ContinuedFraction#evaluate(double)": [
        "org.apache.commons.math3.util.ContinuedFraction#evaluate(double,double,int)",
        "org.apache.commons.math3.util.ContinuedFraction.<staticinit>()"
    ],
    "org.apache.commons.math3.analysis.differentiation.SparseGradient#exp()": [
        "org.apache.commons.math3.analysis.differentiation.SparseGradient#SparseGradient(double,double,Map<Integer, Double>)",
        "org.apache.commons.math3.util.FastMath.exp(double)"
    ],
    "org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile.Marker#toString()": ["org.apache.commons.math3.util.Precision.round(double,int)"],
    "org.apache.commons.math3.fraction.Fraction#add(int)": ["org.apache.commons.math3.fraction.Fraction#Fraction(int,int)"],
    "org.apache.commons.math3.stat.descriptive.moment.VectorialCovariance#increment(double[])": ["org.apache.commons.math3.exception.DimensionMismatchException#DimensionMismatchException(int,int)"],
    "org.apache.commons.math3.optimization.univariate.UnivariateMultiStartOptimizer#optimize(int,FUNC extends UnivariateFunction,GoalType,double,double,double)": [
        "org.apache.commons.math3.optimization.univariate.UnivariateMultiStartOptimizer#optimize(int,FUNC extends UnivariateFunction,GoalType,double,double,double)",
        "org.apache.commons.math3.random.SynchronizedRandomGenerator#nextDouble()",
        "org.apache.commons.math3.optimization.univariate.UnivariateMultiStartOptimizer#getEvaluations()",
        "org.apache.commons.math3.random.RandomAdaptor#nextDouble()",
        "org.apache.commons.math3.optimization.direct.BaseAbstractMultivariateOptimizer#getEvaluations()",
        "org.apache.commons.math3.optimization.BaseMultivariateMultiStartOptimizer#getEvaluations()",
        "org.apache.commons.math3.optimization.direct.BaseAbstractMultivariateVectorOptimizer#getEvaluations()",
        "org.apache.commons.math3.optimization.univariate.UnivariateMultiStartOptimizer#sortPairs(GoalType)",
        "org.apache.commons.math3.optimization.univariate.BaseAbstractUnivariateOptimizer#getEvaluations()",
        "org.apache.commons.math3.optimization.BaseMultivariateVectorMultiStartOptimizer#getEvaluations()",
        "org.apache.commons.math3.random.RandomGeneratorFactory.createRandomGenerator(Random)$RandomGenerator$1#nextDouble()",
        "org.apache.commons.math3.random.BitsStreamGenerator#nextDouble()"
    ],
    "org.apache.commons.math3.optimization.linear.LinearObjectiveFunction#readObject(ObjectInputStream)": ["org.apache.commons.math3.linear.MatrixUtils.deserializeRealVector(Object,String,ObjectInputStream)"],
    "org.apache.commons.math3.analysis.differentiation.SparseGradient#remainder(SparseGradient)": [
        "org.apache.commons.math3.analysis.differentiation.SparseGradient#multiply(double)",
        "org.apache.commons.math3.util.FastMath.rint(double)",
        "org.apache.commons.math3.analysis.differentiation.SparseGradient#subtract(SparseGradient)",
        "org.apache.commons.math3.util.FastMath.IEEEremainder(double,double)"
    ],
    "org.apache.commons.math3.ode.FieldEquationsMapper#mapState(FieldODEState<T extends RealFieldElement>)": [
        "org.apache.commons.math3.ode.FieldEquationsMapper#insertEquationData(int,T extends RealFieldElement[],T extends RealFieldElement[])",
        "org.apache.commons.math3.ode.FieldODEState#getState()",
        "org.apache.commons.math3.ode.FieldEquationsMapper#getTotalDimension()",
        "org.apache.commons.math3.ode.FieldODEState#getSecondaryState(int)",
        "org.apache.commons.math3.ode.FieldODEState#getTime()",
        "org.apache.commons.math3.ode.FieldEquationsMapper#getNumberOfEquations()",
        "org.apache.commons.math3.util.MathArrays.buildArray(Field<T>,int)"
    ],
    "org.apache.commons.math3.optim.nonlinear.vector.Weight#Weight(RealMatrix)": [
        "org.apache.commons.math3.linear.DiagonalMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.Array2DRowRealMatrix#getColumnDimension()",
        "org.apache.commons.math3.optim.nonlinear.vector.Weight.<init>()",
        "org.apache.commons.math3.linear.BlockFieldMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.BlockRealMatrix#copy()",
        "org.apache.commons.math3.linear.SparseFieldMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.OpenMapRealMatrix#copy()",
        "org.apache.commons.math3.linear.OpenMapRealMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.OpenMapRealMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.DiagonalMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.Array2DRowFieldMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.BlockFieldMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.SparseFieldMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.BlockRealMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.Array2DRowRealMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.NonSquareMatrixException#NonSquareMatrixException(int,int)",
        "org.apache.commons.math3.linear.Array2DRowFieldMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.Array2DRowRealMatrix#copy()",
        "org.apache.commons.math3.linear.BlockRealMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.DiagonalMatrix#copy()"
    ],
    "org.apache.commons.math3.linear.SymmLQ.State#update()": [
        "org.apache.commons.math3.linear.RealVector#mapMultiply(double)",
        "org.apache.commons.math3.util.FastMath.max(double,double)",
        "org.apache.commons.math3.linear.ArrayRealVector#getDimension()",
        "org.apache.commons.math3.linear.RealVector.unmodifiableRealVector(RealVector)$RealVector$1#mapMultiply(double)",
        "org.apache.commons.math3.linear.OpenMapRealVector#setEntry(int,double)",
        "org.apache.commons.math3.linear.ArrayRealVector#dotProduct(RealVector)",
        "org.apache.commons.math3.linear.SymmLQ.State.daxpy(double,RealVector,RealVector)",
        "org.apache.commons.math3.util.FastMath.min(double,double)",
        "org.apache.commons.math3.linear.JacobiPreconditioner#operate(RealVector)",
        "org.apache.commons.math3.linear.RealVector#dotProduct(RealVector)",
        "org.apache.commons.math3.linear.RealVector.unmodifiableRealVector(RealVector)$RealVector$1#dotProduct(RealVector)",
        "org.apache.commons.math3.linear.ArrayRealVector#getEntry(int)",
        "org.apache.commons.math3.linear.RealVector.unmodifiableRealVector(RealVector)$RealVector$1#setEntry(int,double)",
        "org.apache.commons.math3.linear.ArrayRealVector#setEntry(int,double)",
        "org.apache.commons.math3.linear.OpenMapRealVector#getDimension()",
        "org.apache.commons.math3.util.FastMath.sqrt(double)",
        "org.apache.commons.math3.linear.SymmLQ.State#updateNorms()",
        "org.apache.commons.math3.linear.AbstractRealMatrix#operate(RealVector)",
        "org.apache.commons.math3.linear.RealVector.unmodifiableRealVector(RealVector)$RealVector$1#getDimension()",
        "org.apache.commons.math3.linear.JacobiPreconditioner#sqrt()$RealLinearOperator$1#operate(RealVector)",
        "org.apache.commons.math3.linear.OpenMapRealVector#getEntry(int)",
        "org.apache.commons.math3.linear.SymmLQ.State.throwNPDLOException(RealLinearOperator,RealVector)",
        "org.apache.commons.math3.linear.RealVector.unmodifiableRealVector(RealVector)$RealVector$1#getEntry(int)",
        "org.apache.commons.math3.linear.SymmLQ.State.daxpbypz(double,RealVector,double,RealVector,RealVector)"
    ],
    "org.apache.commons.math3.stat.descriptive.SynchronizedSummaryStatistics#getGeometricMean()": ["org.apache.commons.math3.stat.descriptive.SummaryStatistics#getGeometricMean()"],
    "org.apache.commons.math3.geometry.partitioning.AbstractRegion#recurseTransform(BSPTree<S extends Space>,Transform<S extends Space, T extends Space>,Map<BSPTree<S extends Space>, BSPTree<S extends Space>>)": [
        "org.apache.commons.math3.geometry.partitioning.NodesSet#NodesSet()",
        "org.apache.commons.math3.geometry.partitioning.AbstractRegion#recurseTransform(BSPTree<S extends Space>,Transform<S extends Space, T extends Space>,Map<BSPTree<S extends Space>, BSPTree<S extends Space>>)",
        "org.apache.commons.math3.geometry.partitioning.BoundaryAttribute#getPlusOutside()",
        "org.apache.commons.math3.geometry.partitioning.BSPTree#BSPTree(Object)",
        "org.apache.commons.math3.geometry.partitioning.BSPTree#getCut()",
        "org.apache.commons.math3.geometry.partitioning.BSPTree#getPlus()",
        "org.apache.commons.math3.geometry.partitioning.AbstractSubHyperplane#applyTransform(Transform<S extends Space, T extends Space>)",
        "org.apache.commons.math3.geometry.partitioning.BoundaryAttribute#getPlusInside()",
        "org.apache.commons.math3.geometry.partitioning.BSPTree#getMinus()",
        "org.apache.commons.math3.geometry.partitioning.BSPTree#getAttribute()",
        "org.apache.commons.math3.geometry.partitioning.BoundaryAttribute#BoundaryAttribute(SubHyperplane<S extends Space>,SubHyperplane<S extends Space>,NodesSet<S extends Space>)",
        "org.apache.commons.math3.geometry.partitioning.BSPTree#BSPTree(SubHyperplane<S extends Space>,BSPTree<S extends Space>,BSPTree<S extends Space>,Object)"
    ],
    "org.apache.commons.math3.stat.descriptive.moment.VectorialMean#increment(double[])": [
        "org.apache.commons.math3.exception.DimensionMismatchException#DimensionMismatchException(int,int)",
        "org.apache.commons.math3.stat.descriptive.moment.Mean#increment(double)"
    ],
    "org.apache.commons.math3.geometry.euclidean.twod.Vector2D#getNorm1()": ["org.apache.commons.math3.util.FastMath.abs(double)"],
    "org.apache.commons.math3.linear.EigenDecomposition#cdiv(double,double,double,double)": [
        "org.apache.commons.math3.complex.Complex#divide(Complex)",
        "org.apache.commons.math3.complex.Complex#Complex(double,double)"
    ],
    "org.apache.commons.math3.util.FastMath.expm1(double,double[])": [
        "org.apache.commons.math3.util.FastMath.<staticinit>()",
        "org.apache.commons.math3.util.FastMath.exp(double,double,double[])",
        "org.apache.commons.math3.util.FastMath.ExpFracTable.<staticinit>()"
    ],
    "org.apache.commons.math3.geometry.partitioning.utilities.AVLTree.Node#Node(T extends Comparable,Node)": [
        "org.apache.commons.math3.geometry.partitioning.utilities.AVLTree.Node.<init>()",
        "org.apache.commons.math3.geometry.partitioning.utilities.AVLTree.Skew.<staticinit>()"
    ],
    "org.apache.commons.math3.stat.regression.RegressionResults#getTotalSumSquares()": ["org.apache.commons.math3.stat.regression.RegressionResults.<staticinit>()"],
    "org.apache.commons.math3.linear.MatrixUtils.deserializeRealVector(Object,String,ObjectInputStream)": ["org.apache.commons.math3.linear.ArrayRealVector#ArrayRealVector(double[],boolean)"],
    "org.apache.commons.math3.genetics.GeneticAlgorithm.setRandomGenerator(RandomGenerator)": ["org.apache.commons.math3.genetics.GeneticAlgorithm.<staticinit>()"],
    "org.apache.commons.math3.optim.nonlinear.scalar.MultiStartMultivariateOptimizer#getOptima()": ["org.apache.commons.math3.optim.nonlinear.scalar.MultiStartMultivariateOptimizer#getPairComparator()"],
    "org.apache.commons.math3.linear.BlockFieldMatrix#getColumnVector(int)": [
        "org.apache.commons.math3.linear.BlockFieldMatrix#blockWidth(int)",
        "org.apache.commons.math3.linear.BlockFieldMatrix#blockHeight(int)",
        "org.apache.commons.math3.linear.AbstractFieldMatrix#getField()",
        "org.apache.commons.math3.linear.ArrayFieldVector#ArrayFieldVector(Field<T extends FieldElement>,T extends FieldElement[],boolean)",
        "org.apache.commons.math3.linear.BlockFieldMatrix.<staticinit>()",
        "org.apache.commons.math3.linear.AbstractFieldMatrix#checkColumnIndex(int)",
        "org.apache.commons.math3.util.MathArrays.buildArray(Field<T>,int)"
    ],
    "org.apache.commons.math3.ml.neuralnet.twod.NeuronSquareMesh2D#iterator()": ["org.apache.commons.math3.ml.neuralnet.Network#iterator()"],
    "org.apache.commons.math3.stat.descriptive.moment.FirstMoment.copy(FirstMoment,FirstMoment)": [
        "org.apache.commons.math3.util.MathUtils.checkNotNull(Object)",
        "org.apache.commons.math3.stat.descriptive.AbstractUnivariateStatistic#setData(double[])",
        "org.apache.commons.math3.stat.descriptive.rank.Percentile#setData(double[])",
        "org.apache.commons.math3.stat.descriptive.AbstractUnivariateStatistic#getDataRef()"
    ],
    "org.apache.commons.math3.special.Erf#Erf()": ["org.apache.commons.math3.special.Erf.<init>()"],
    "org.apache.commons.math3.analysis.differentiation.DerivativeStructure#DerivativeStructure(int,int,double[]...)": [
        "org.apache.commons.math3.exception.DimensionMismatchException#DimensionMismatchException(int,int)",
        "org.apache.commons.math3.analysis.differentiation.DerivativeStructure#DerivativeStructure(int,int)"
    ],
    "org.apache.commons.math3.fitting.leastsquares.LeastSquaresAdapter#LeastSquaresAdapter(LeastSquaresProblem)": ["org.apache.commons.math3.fitting.leastsquares.LeastSquaresAdapter.<init>()"],
    "org.apache.commons.math3.stat.inference.ChiSquareTest#chiSquareTest(double[],long[],double)": [
        "org.apache.commons.math3.stat.inference.ChiSquareTest#chiSquareTest(double[],long[])",
        "org.apache.commons.math3.exception.util.LocalizedFormats.<staticinit>()"
    ],
    "org.apache.commons.math3.random.RandomDataImpl#nextZipf(int,double)": ["org.apache.commons.math3.random.RandomDataGenerator#nextZipf(int,double)"],
    "org.apache.commons.math3.ode.nonstiff.HighamHall54FieldStepInterpolator#HighamHall54FieldStepInterpolator(Field<T extends RealFieldElement>,boolean,T extends RealFieldElement[][],FieldODEStateAndDerivative<T extends RealFieldElement>,FieldODEStateAndDerivative<T extends RealFieldElement>,FieldODEStateAndDerivative<T extends RealFieldElement>,FieldODEStateAndDerivative<T extends RealFieldElement>,FieldEquationsMapper<T extends RealFieldElement>)": [
        "org.apache.commons.math3.ode.nonstiff.HighamHall54FieldStepInterpolator.<init>()",
        "org.apache.commons.math3.ode.nonstiff.RungeKuttaFieldStepInterpolator#RungeKuttaFieldStepInterpolator(Field<T extends RealFieldElement>,boolean,T extends RealFieldElement[][],FieldODEStateAndDerivative<T extends RealFieldElement>,FieldODEStateAndDerivative<T extends RealFieldElement>,FieldODEStateAndDerivative<T extends RealFieldElement>,FieldODEStateAndDerivative<T extends RealFieldElement>,FieldEquationsMapper<T extends RealFieldElement>)"
    ],
    "org.apache.commons.math3.userguide.RealDistributionComparison.addCDFSeries(Chart,RealDistribution,String,int,int)": [
        "org.apache.commons.math3.distribution.BetaDistribution#cumulativeProbability(double)",
        "org.apache.commons.math3.distribution.ConstantRealDistribution#cumulativeProbability(double)",
        "org.apache.commons.math3.distribution.NormalDistribution#cumulativeProbability(double)",
        "org.apache.commons.math3.distribution.ChiSquaredDistribution#cumulativeProbability(double)",
        "org.apache.commons.math3.distribution.UniformRealDistribution#cumulativeProbability(double)",
        "org.apache.commons.math3.distribution.ParetoDistribution#cumulativeProbability(double)",
        "org.apache.commons.math3.distribution.GumbelDistribution#cumulativeProbability(double)",
        "org.apache.commons.math3.distribution.LevyDistribution#cumulativeProbability(double)",
        "org.apache.commons.math3.distribution.LaplaceDistribution#cumulativeProbability(double)",
        "org.apache.commons.math3.distribution.EnumeratedRealDistribution#cumulativeProbability(double)",
        "org.apache.commons.math3.distribution.TriangularDistribution#cumulativeProbability(double)",
        "org.apache.commons.math3.random.EmpiricalDistribution#cumulativeProbability(double)",
        "org.apache.commons.math3.distribution.WeibullDistribution#cumulativeProbability(double)",
        "org.apache.commons.math3.distribution.TDistribution#cumulativeProbability(double)",
        "org.apache.commons.math3.distribution.LogisticDistribution#cumulativeProbability(double)",
        "org.apache.commons.math3.distribution.GammaDistribution#cumulativeProbability(double)",
        "org.apache.commons.math3.distribution.LogNormalDistribution#cumulativeProbability(double)",
        "org.apache.commons.math3.distribution.ExponentialDistribution#cumulativeProbability(double)",
        "org.apache.commons.math3.distribution.FDistribution#cumulativeProbability(double)",
        "org.apache.commons.math3.distribution.CauchyDistribution#cumulativeProbability(double)",
        "org.apache.commons.math3.distribution.NakagamiDistribution#cumulativeProbability(double)"
    ],
    "org.apache.commons.math3.complex.ComplexFormat.getInstance(Locale)": [
        "org.apache.commons.math3.util.CompositeFormat.getDefaultNumberFormat(Locale)",
        "org.apache.commons.math3.complex.ComplexFormat#ComplexFormat(NumberFormat)"
    ],
    "org.apache.commons.math3.linear.RealVector.unmodifiableRealVector(RealVector)$RealVector$1#combine(double,double,RealVector)": [
        "org.apache.commons.math3.linear.ArrayRealVector#combine(double,double,RealVector)",
        "org.apache.commons.math3.linear.RealVector.unmodifiableRealVector(RealVector)$RealVector$1#combine(double,double,RealVector)",
        "org.apache.commons.math3.linear.RealVector#combine(double,double,RealVector)"
    ],
    "org.apache.commons.math3.util.Decimal64#log10()": [
        "org.apache.commons.math3.util.FastMath.log10(double)",
        "org.apache.commons.math3.util.Decimal64#Decimal64(double)"
    ],
    "org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet#getAngle(BSPTree<Euclidean1D>)": [
        "org.apache.commons.math3.geometry.euclidean.oned.OrientedPoint#getLocation()",
        "org.apache.commons.math3.geometry.partitioning.BSPTree#getCut()",
        "org.apache.commons.math3.geometry.partitioning.AbstractSubHyperplane#getHyperplane()",
        "org.apache.commons.math3.geometry.euclidean.oned.Vector1D#getX()"
    ],
    "org.apache.commons.math3.linear.ArrayFieldVector#ebeMultiply(ArrayFieldVector<T extends FieldElement>)": [
        "org.apache.commons.math3.linear.ArrayFieldVector#ArrayFieldVector(Field<T extends FieldElement>,T extends FieldElement[],boolean)",
        "org.apache.commons.math3.util.MathArrays.buildArray(Field<T>,int)",
        "org.apache.commons.math3.linear.ArrayFieldVector#checkVectorDimensions(int)"
    ],
    "org.apache.commons.math3.distribution.ChiSquaredDistribution#getNumericalMean()": ["org.apache.commons.math3.distribution.ChiSquaredDistribution#getDegreesOfFreedom()"],
    "org.apache.commons.math3.stat.descriptive.SynchronizedMultivariateSummaryStatistics#getMean()": ["org.apache.commons.math3.stat.descriptive.MultivariateSummaryStatistics#getMean()"],
    "org.apache.commons.math3.analysis.integration.LegendreGaussIntegrator#stage(int)": [
        "org.apache.commons.math3.analysis.integration.BaseAbstractUnivariateIntegrator#getMin()",
        "org.apache.commons.math3.analysis.integration.BaseAbstractUnivariateIntegrator#computeObjectiveValue(double)",
        "org.apache.commons.math3.analysis.integration.BaseAbstractUnivariateIntegrator#getMax()"
    ],
    "org.apache.commons.math3.optimization.general.AbstractLeastSquaresOptimizer#optimize(int,DifferentiableMultivariateVectorFunction,double[],double[],double[])": [
        "org.apache.commons.math3.analysis.FunctionUtils.toMultivariateDifferentiableVectorFunction(DifferentiableMultivariateVectorFunction)",
        "org.apache.commons.math3.optimization.InitialGuess#InitialGuess(double[])",
        "org.apache.commons.math3.optimization.Target#Target(double[])",
        "org.apache.commons.math3.optimization.Weight#Weight(double[])"
    ],
    "org.apache.commons.math3.userguide.genetics.PolygonChromosome#fitness()": [
        "org.apache.commons.math3.userguide.genetics.PolygonChromosome.<staticinit>()",
        "org.apache.commons.math3.userguide.genetics.PolygonChromosome#draw(Graphics2D,int,int)"
    ],
    "org.apache.commons.math3.stat.inference.GTest#gTest(double[],long[],double)": [
        "org.apache.commons.math3.stat.inference.GTest#gTest(double[],long[])",
        "org.apache.commons.math3.exception.util.LocalizedFormats.<staticinit>()"
    ],
    "org.apache.commons.math3.complex.ComplexFormat#ComplexFormat()": [
        "org.apache.commons.math3.complex.ComplexFormat.<init>()",
        "org.apache.commons.math3.complex.ComplexFormat.<staticinit>()",
        "org.apache.commons.math3.util.CompositeFormat.getDefaultNumberFormat()"
    ],
    "org.apache.commons.math3.linear.RealVector.unmodifiableRealVector(RealVector)$RealVector$1#mapDivide(double)": [
        "org.apache.commons.math3.linear.RealVector.unmodifiableRealVector(RealVector)$RealVector$1#mapDivide(double)",
        "org.apache.commons.math3.linear.RealVector#mapDivide(double)"
    ],
    "org.apache.commons.math3.analysis.function.Exp#derivative()": [
        "org.apache.commons.math3.analysis.function.Log10#derivative()",
        "org.apache.commons.math3.analysis.function.Power#derivative()",
        "org.apache.commons.math3.analysis.function.Sin#derivative()",
        "org.apache.commons.math3.analysis.function.Exp#derivative()",
        "org.apache.commons.math3.analysis.function.HarmonicOscillator#derivative()",
        "org.apache.commons.math3.analysis.polynomials.PolynomialFunction#derivative()",
        "org.apache.commons.math3.analysis.function.Logit#derivative()",
        "org.apache.commons.math3.analysis.function.Cbrt#derivative()",
        "org.apache.commons.math3.analysis.FunctionUtils.toDifferentiableUnivariateFunction(UnivariateDifferentiableFunction)",
        "org.apache.commons.math3.analysis.FunctionUtils.toDifferentiableUnivariateFunction(UnivariateDifferentiableFunction)$DifferentiableUnivariateFunction$1#derivative()",
        "org.apache.commons.math3.analysis.polynomials.PolynomialSplineFunction#derivative()",
        "org.apache.commons.math3.analysis.function.Cosh#derivative()",
        "org.apache.commons.math3.analysis.function.Identity#derivative()",
        "org.apache.commons.math3.analysis.function.Inverse#derivative()",
        "org.apache.commons.math3.analysis.function.Acosh#derivative()",
        "org.apache.commons.math3.analysis.function.Acos#derivative()",
        "org.apache.commons.math3.analysis.function.Atan#derivative()",
        "org.apache.commons.math3.analysis.function.Log#derivative()",
        "org.apache.commons.math3.analysis.function.Sqrt#derivative()",
        "org.apache.commons.math3.analysis.function.Logistic#derivative()",
        "org.apache.commons.math3.analysis.function.Expm1#derivative()",
        "org.apache.commons.math3.analysis.function.Asinh#derivative()",
        "org.apache.commons.math3.analysis.function.Gaussian#derivative()",
        "org.apache.commons.math3.analysis.function.Sinc#derivative()",
        "org.apache.commons.math3.analysis.function.Sigmoid#derivative()",
        "org.apache.commons.math3.analysis.function.Constant#derivative()",
        "org.apache.commons.math3.analysis.function.Sinh#derivative()",
        "org.apache.commons.math3.analysis.function.Tanh#derivative()",
        "org.apache.commons.math3.analysis.function.Asin#derivative()",
        "org.apache.commons.math3.analysis.function.Minus#derivative()",
        "org.apache.commons.math3.analysis.FunctionUtils.compose(DifferentiableUnivariateFunction[]...)$DifferentiableUnivariateFunction$1#derivative()",
        "org.apache.commons.math3.analysis.FunctionUtils.add(DifferentiableUnivariateFunction[]...)$DifferentiableUnivariateFunction$1#derivative()",
        "org.apache.commons.math3.analysis.FunctionUtils.multiply(DifferentiableUnivariateFunction[]...)$DifferentiableUnivariateFunction$1#derivative()",
        "org.apache.commons.math3.analysis.function.Log1p#derivative()",
        "org.apache.commons.math3.analysis.function.Tan#derivative()",
        "org.apache.commons.math3.analysis.function.Cos#derivative()",
        "org.apache.commons.math3.analysis.function.Atanh#derivative()"
    ],
    "org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D#FieldVector3D(double,FieldVector3D<T extends RealFieldElement>,double,FieldVector3D<T extends RealFieldElement>,double,FieldVector3D<T extends RealFieldElement>)": [
        "org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D#getZ()",
        "org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D#getY()",
        "org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D#getX()",
        "org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D.<init>()"
    ],
    "org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator#reinitialize(AbstractIntegrator,double[],double[][],boolean,EquationsMapper,EquationsMapper[])": ["org.apache.commons.math3.ode.nonstiff.RungeKuttaStepInterpolator#reinitialize(AbstractIntegrator,double[],double[][],boolean,EquationsMapper,EquationsMapper[])"],
    "org.apache.commons.math3.analysis.function.Logit#Logit(double,double)": ["org.apache.commons.math3.analysis.function.Logit.<init>()"],
    "org.apache.commons.math3.linear.BlockRealMatrix#getRowVector(int)": [
        "org.apache.commons.math3.linear.ArrayRealVector#ArrayRealVector(double[],boolean)",
        "org.apache.commons.math3.linear.MatrixUtils.checkRowIndex(AnyMatrix,int)",
        "org.apache.commons.math3.linear.BlockRealMatrix.<staticinit>()",
        "org.apache.commons.math3.linear.BlockRealMatrix#blockWidth(int)"
    ],
    "org.apache.commons.math3.stat.correlation.KendallsCorrelation#KendallsCorrelation()": ["org.apache.commons.math3.stat.correlation.KendallsCorrelation.<init>()"],
    "org.apache.commons.math3.util.ArithmeticUtils.binomialCoefficient(int,int)": ["org.apache.commons.math3.util.CombinatoricsUtils.binomialCoefficient(int,int)"],
    "org.apache.commons.math3.stat.correlation.StorelessCovariance#setElement(int,int,StorelessBivariateCovariance)": ["org.apache.commons.math3.stat.correlation.StorelessCovariance#indexOf(int,int)"],
    "org.apache.commons.math3.geometry.euclidean.oned.OrientedPoint#OrientedPoint(Vector1D,boolean)": [
        "org.apache.commons.math3.geometry.euclidean.oned.OrientedPoint.<staticinit>()",
        "org.apache.commons.math3.geometry.euclidean.oned.OrientedPoint#OrientedPoint(Vector1D,boolean,double)"
    ],
    "org.apache.commons.math3.linear.ArrayRealVector#walkInOptimizedOrder(RealVectorPreservingVisitor)": ["org.apache.commons.math3.linear.ArrayRealVector#walkInDefaultOrder(RealVectorPreservingVisitor)"],
    "org.apache.commons.math3.linear.RealVector.unmodifiableRealVector(RealVector)$RealVector$1#getLInfNorm()": [
        "org.apache.commons.math3.linear.ArrayRealVector#getLInfNorm()",
        "org.apache.commons.math3.linear.RealVector#getLInfNorm()",
        "org.apache.commons.math3.linear.RealVector.unmodifiableRealVector(RealVector)$RealVector$1#getLInfNorm()"
    ],
    "org.apache.commons.math3.fitting.leastsquares.LeastSquaresFactory.LocalLeastSquaresProblem.LazyUnweightedEvaluation#getJacobian()": [
        "org.apache.commons.math3.linear.RealVector.unmodifiableRealVector(RealVector)$RealVector$1#toArray()",
        "org.apache.commons.math3.linear.OpenMapRealVector#toArray()",
        "org.apache.commons.math3.linear.RealVector#toArray()",
        "org.apache.commons.math3.fitting.leastsquares.LeastSquaresFactory.LocalValueAndJacobianFunction#computeJacobian(double[])",
        "org.apache.commons.math3.linear.ArrayRealVector#toArray()"
    ],
    "org.apache.commons.math3.analysis.polynomials.PolynomialsUtils#PolynomialsUtils()": ["org.apache.commons.math3.analysis.polynomials.PolynomialsUtils.<init>()"],
    "org.apache.commons.math3.distribution.NormalDistribution#sample()": [
        "org.apache.commons.math3.random.RandomAdaptor#nextGaussian()",
        "org.apache.commons.math3.random.SynchronizedRandomGenerator#nextGaussian()",
        "org.apache.commons.math3.random.RandomGeneratorFactory.createRandomGenerator(Random)$RandomGenerator$1#nextGaussian()",
        "org.apache.commons.math3.random.BitsStreamGenerator#nextGaussian()",
        "org.apache.commons.math3.random.AbstractRandomGenerator#nextGaussian()"
    ],
    "org.apache.commons.math3.analysis.differentiation.DSCompiler#tan(double[],int,double[],int)": [
        "org.apache.commons.math3.util.FastMath.tan(double)",
        "org.apache.commons.math3.analysis.differentiation.DSCompiler#compose(double[],int,double[],double[],int)"
    ],
    "org.apache.commons.math3.analysis.differentiation.DerivativeStructure#sinh()": [
        "org.apache.commons.math3.analysis.differentiation.DSCompiler#sinh(double[],int,double[],int)",
        "org.apache.commons.math3.analysis.differentiation.DerivativeStructure#DerivativeStructure(DSCompiler)"
    ],
    "org.apache.commons.math3.distribution.NakagamiDistribution#density(double)": [
        "org.apache.commons.math3.util.FastMath.pow(double,int)",
        "org.apache.commons.math3.util.FastMath.pow(double,double)",
        "org.apache.commons.math3.util.FastMath.exp(double)",
        "org.apache.commons.math3.special.Gamma.gamma(double)"
    ],
    "org.apache.commons.math3.util.FastMath.main(String[])": [
        "org.apache.commons.math3.util.FastMathCalc.printarray(PrintStream,String,int,double[][])",
        "org.apache.commons.math3.util.FastMath.ExpIntTable.<staticinit>()",
        "org.apache.commons.math3.util.FastMath.lnMant.<staticinit>()",
        "org.apache.commons.math3.util.FastMath.<staticinit>()",
        "org.apache.commons.math3.util.FastMathCalc.printarray(PrintStream,String,int,double[])",
        "org.apache.commons.math3.util.FastMath.ExpFracTable.<staticinit>()"
    ],
    "org.apache.commons.math3.fitting.leastsquares.LevenbergMarquardtOptimizer#qrDecomposition(RealMatrix,int)": [
        "org.apache.commons.math3.linear.Array2DRowRealMatrix#getData()",
        "org.apache.commons.math3.util.FastMath.sqrt(double)",
        "org.apache.commons.math3.linear.BlockRealMatrix#scalarMultiply(double)",
        "org.apache.commons.math3.fitting.leastsquares.LevenbergMarquardtOptimizer.InternalData#InternalData(double[][],int[],int,double[],double[],double[])",
        "org.apache.commons.math3.exception.util.LocalizedFormats.<staticinit>()",
        "org.apache.commons.math3.linear.AbstractRealMatrix#scalarMultiply(double)",
        "org.apache.commons.math3.linear.DiagonalMatrix#getData()",
        "org.apache.commons.math3.linear.AbstractRealMatrix#getData()",
        "org.apache.commons.math3.linear.BlockRealMatrix#getData()"
    ],
    "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.MultiDirectionalSimplex#MultiDirectionalSimplex(double[][],double,double)": [
        "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.AbstractSimplex#AbstractSimplex(double[][])",
        "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.MultiDirectionalSimplex.<init>()"
    ],
    "org.apache.commons.math3.ode.nonstiff.AdamsNordsieckTransformer#buildP(int)": [
        "org.apache.commons.math3.linear.Array2DRowFieldMatrix#Array2DRowFieldMatrix(T extends FieldElement[][],boolean)",
        "org.apache.commons.math3.fraction.BigFraction#BigFraction(int)"
    ],
    "org.apache.commons.math3.util.IterationManager#getMaxIterations()": ["org.apache.commons.math3.util.IntegerSequence.Incrementor#getMaximalCount()"],
    "org.apache.commons.math3.distribution.LogNormalDistribution#LogNormalDistribution()": ["org.apache.commons.math3.distribution.LogNormalDistribution#LogNormalDistribution(double,double)"],
    "org.apache.commons.math3.stat.descriptive.SynchronizedMultivariateSummaryStatistics#getStandardDeviation()": ["org.apache.commons.math3.stat.descriptive.MultivariateSummaryStatistics#getStandardDeviation()"],
    "org.apache.commons.math3.userguide.geometry.GeometryExample.createCross()": ["org.apache.commons.math3.geometry.euclidean.twod.Vector2D#Vector2D(double,double)"],
    "org.apache.commons.math3.complex.Complex.<staticinit>()": ["org.apache.commons.math3.complex.Complex#Complex(double,double)"],
    "org.apache.commons.math3.geometry.euclidean.threed.Vector3D#Vector3D(double,Vector3D)": ["org.apache.commons.math3.geometry.euclidean.threed.Vector3D.<init>()"],
    "org.apache.commons.math3.optimization.direct.PowellOptimizer#doOptimize()": [
        "org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair#getPoint()",
        "org.apache.commons.math3.optimization.direct.PowellOptimizer.LineSearch#search(double[],double[])",
        "org.apache.commons.math3.optimization.direct.PowellOptimizer#newPointAndDirection(double[],double[],double)",
        "org.apache.commons.math3.util.FastMath.abs(double)",
        "org.apache.commons.math3.optimization.GoalType.<staticinit>()",
        "org.apache.commons.math3.optimization.direct.BaseAbstractMultivariateOptimizer#getGoalType()",
        "org.apache.commons.math3.optimization.direct.BaseAbstractMultivariateOptimizer#getConvergenceChecker()",
        "org.apache.commons.math3.optimization.direct.BaseAbstractMultivariateOptimizer#computeObjectiveValue(double[])",
        "org.apache.commons.math3.util.MathArrays.copyOf(double[])",
        "org.apache.commons.math3.optimization.PointValuePair#PointValuePair(double[],double)",
        "org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair#getValue()",
        "org.apache.commons.math3.optimization.direct.BaseAbstractMultivariateOptimizer#getStartPoint()"
    ],
    "org.apache.commons.math3.stat.descriptive.rank.Percentile.replaceAndSlice(double[],int,int,double,double)": [
        "org.apache.commons.math3.util.Precision.equalsIncludingNaN(double,double)",
        "org.apache.commons.math3.stat.descriptive.rank.Percentile.copyOf(double[],int,int)"
    ],
    "org.apache.commons.math3.ml.clustering.FuzzyKMeansClusterer#updateMembershipMatrix()": [
        "org.apache.commons.math3.util.FastMath.pow(double,double)",
        "org.apache.commons.math3.ml.clustering.CentroidCluster#getCenter()",
        "org.apache.commons.math3.ml.clustering.Clusterer#distance(Clusterable,Clusterable)",
        "org.apache.commons.math3.util.FastMath.abs(double)"
    ],
    "org.apache.commons.math3.random.HaltonSequenceGenerator#nextVector()": ["org.apache.commons.math3.random.HaltonSequenceGenerator#scramble(int,int,int,int)"],
    "org.apache.commons.math3.ode.nonstiff.RungeKuttaFieldStepInterpolator#RungeKuttaFieldStepInterpolator(Field<T extends RealFieldElement>,boolean,T extends RealFieldElement[][],FieldODEStateAndDerivative<T extends RealFieldElement>,FieldODEStateAndDerivative<T extends RealFieldElement>,FieldODEStateAndDerivative<T extends RealFieldElement>,FieldODEStateAndDerivative<T extends RealFieldElement>,FieldEquationsMapper<T extends RealFieldElement>)": [
        "org.apache.commons.math3.util.MathArrays.buildArray(Field<T>,int,int)",
        "org.apache.commons.math3.ode.nonstiff.RungeKuttaFieldStepInterpolator.<init>()",
        "org.apache.commons.math3.ode.sampling.AbstractFieldStepInterpolator#AbstractFieldStepInterpolator(boolean,FieldODEStateAndDerivative<T extends RealFieldElement>,FieldODEStateAndDerivative<T extends RealFieldElement>,FieldODEStateAndDerivative<T extends RealFieldElement>,FieldODEStateAndDerivative<T extends RealFieldElement>,FieldEquationsMapper<T extends RealFieldElement>)"
    ],
    "org.apache.commons.math3.optim.nonlinear.vector.MultiStartMultivariateVectorOptimizer#getPairComparator()$Comparator$1#weightedResidual(PointVectorValuePair)": [
        "org.apache.commons.math3.linear.ArrayRealVector#subtract(RealVector)",
        "org.apache.commons.math3.linear.ArrayRealVector#dotProduct(RealVector)",
        "org.apache.commons.math3.linear.ArrayRealVector#ArrayRealVector(double[],boolean)",
        "org.apache.commons.math3.optim.PointVectorValuePair#getValueRef()",
        "org.apache.commons.math3.linear.AbstractRealMatrix#operate(RealVector)",
        "org.apache.commons.math3.linear.OpenMapRealVector#subtract(RealVector)",
        "org.apache.commons.math3.linear.RealVector#subtract(RealVector)",
        "org.apache.commons.math3.linear.RealVector#dotProduct(RealVector)",
        "org.apache.commons.math3.linear.RealVector.unmodifiableRealVector(RealVector)$RealVector$1#dotProduct(RealVector)",
        "org.apache.commons.math3.linear.RealVector.unmodifiableRealVector(RealVector)$RealVector$1#subtract(RealVector)"
    ],
    "org.apache.commons.math3.stat.descriptive.SynchronizedSummaryStatistics#getMinImpl()": ["org.apache.commons.math3.stat.descriptive.SummaryStatistics#getMinImpl()"],
    "org.apache.commons.math3.util.ArithmeticUtils.addAndCheck(int,int)": ["org.apache.commons.math3.exception.util.LocalizedFormats.<staticinit>()"],
    "org.apache.commons.math3.linear.OpenMapRealVector#OpenMapRealVector(double[],double)": [
        "org.apache.commons.math3.util.OpenIntToDoubleHashMap#put(int,double)",
        "org.apache.commons.math3.linear.OpenMapRealVector.<init>()",
        "org.apache.commons.math3.linear.SparseRealVector.<init>()",
        "org.apache.commons.math3.util.OpenIntToDoubleHashMap#OpenIntToDoubleHashMap(double)",
        "org.apache.commons.math3.linear.OpenMapRealVector#isDefaultValue(double)"
    ],
    "org.apache.commons.math3.stat.descriptive.AggregateSummaryStatistics#AggregateSummaryStatistics(SummaryStatistics,SummaryStatistics)": [
        "org.apache.commons.math3.stat.descriptive.AggregateSummaryStatistics.<init>()",
        "org.apache.commons.math3.stat.descriptive.SummaryStatistics#SummaryStatistics()"
    ],
    "org.apache.commons.math3.stat.correlation.KendallsCorrelation#correlation(double[],double[])": [
        "org.apache.commons.math3.exception.DimensionMismatchException#DimensionMismatchException(int,int)",
        "org.apache.commons.math3.stat.correlation.KendallsCorrelation#correlation(double[],double[])$Comparator$1.<init>()",
        "org.apache.commons.math3.util.Pair#getSecond()",
        "org.apache.commons.math3.util.FastMath.sqrt(double)",
        "org.apache.commons.math3.util.Pair#Pair(K,V)",
        "org.apache.commons.math3.stat.correlation.KendallsCorrelation.sum(long)",
        "org.apache.commons.math3.util.Pair#getFirst()",
        "org.apache.commons.math3.util.FastMath.min(int,int)"
    ],
    "org.apache.commons.math3.geometry.spherical.oned.S1Point#getSpace()": ["org.apache.commons.math3.geometry.spherical.oned.Sphere1D.getInstance()"],
    "org.apache.commons.math3.analysis.interpolation.HermiteInterpolator#HermiteInterpolator()": ["org.apache.commons.math3.analysis.interpolation.HermiteInterpolator.<init>()"],
    "org.apache.commons.math3.optim.nonlinear.scalar.gradient.NonLinearConjugateGradientOptimizer#NonLinearConjugateGradientOptimizer(Formula,ConvergenceChecker<PointValuePair>,UnivariateSolver,Preconditioner)": [
        "org.apache.commons.math3.analysis.solvers.BaseAbstractUnivariateSolver#getAbsoluteAccuracy()",
        "org.apache.commons.math3.analysis.solvers.BaseAbstractUnivariateSolver#getRelativeAccuracy()",
        "org.apache.commons.math3.optim.nonlinear.scalar.gradient.NonLinearConjugateGradientOptimizer#NonLinearConjugateGradientOptimizer(Formula,ConvergenceChecker<PointValuePair>,double,double,double,Preconditioner)",
        "org.apache.commons.math3.optim.nonlinear.scalar.gradient.NonLinearConjugateGradientOptimizer.Formula.<staticinit>()"
    ],
    "org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet.TranslationTransform#apply(SubHyperplane<Euclidean2D>,Hyperplane<Euclidean3D>,Hyperplane<Euclidean3D>)": [
        "org.apache.commons.math3.geometry.euclidean.twod.Vector2D#getY()",
        "org.apache.commons.math3.geometry.euclidean.twod.Vector2D#getX()",
        "org.apache.commons.math3.geometry.partitioning.AbstractSubHyperplane#applyTransform(Transform<S extends Space, T extends Space>)",
        "org.apache.commons.math3.geometry.euclidean.twod.Line.getTransform(double,double,double,double,double,double)",
        "org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet.TranslationTransform#apply(Point<Euclidean3D>)",
        "org.apache.commons.math3.geometry.euclidean.threed.Plane#toSubSpace(Point<Euclidean3D>)",
        "org.apache.commons.math3.geometry.euclidean.threed.Plane#getOrigin()"
    ],
    "org.apache.commons.math3.fraction.BigFractionFormat#BigFractionFormat(NumberFormat)": [
        "org.apache.commons.math3.fraction.AbstractFormat#AbstractFormat(NumberFormat)",
        "org.apache.commons.math3.fraction.BigFractionFormat.<init>()"
    ],
    "org.apache.commons.math3.analysis.interpolation.BicubicSplineFunction#BicubicSplineFunction(double[],boolean)$BivariateFunction$5#value(double,double)": ["org.apache.commons.math3.analysis.interpolation.BicubicSplineFunction#apply(double[],double[],double[][])"],
    "org.apache.commons.math3.stat.descriptive.SynchronizedSummaryStatistics#copy()": [
        "org.apache.commons.math3.stat.descriptive.SynchronizedSummaryStatistics.copy(SynchronizedSummaryStatistics,SynchronizedSummaryStatistics)",
        "org.apache.commons.math3.stat.descriptive.SynchronizedSummaryStatistics#SynchronizedSummaryStatistics()"
    ],
    "org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(float[],float[])": ["org.apache.commons.math3.util.Precision.equalsIncludingNaN(float,float)"],
    "org.apache.commons.math3.exception.MathParseException#MathParseException(String,int,Class<?>)": [
        "org.apache.commons.math3.exception.MathParseException.<init>()",
        "org.apache.commons.math3.exception.MathIllegalStateException#MathIllegalStateException()",
        "org.apache.commons.math3.exception.util.LocalizedFormats.<staticinit>()",
        "org.apache.commons.math3.exception.MathIllegalStateException#getContext()"
    ],
    "org.apache.commons.math3.linear.ArrayRealVector#walkInOptimizedOrder(RealVectorChangingVisitor)": ["org.apache.commons.math3.linear.ArrayRealVector#walkInDefaultOrder(RealVectorChangingVisitor)"],
    "org.apache.commons.math3.util.FastMathCalc.resplit(double[])": ["org.apache.commons.math3.util.FastMathCalc.<staticinit>()"],
    "org.apache.commons.math3.userguide.genetics.PolygonChromosome#draw(Graphics2D,int,int)": [
        "org.apache.commons.math3.userguide.genetics.Polygon#draw(Graphics2D,int,int)",
        "org.apache.commons.math3.userguide.genetics.PolygonChromosome#getPolygonRepresentation()"
    ],
    "org.apache.commons.math3.stat.descriptive.moment.SemiVariance#SemiVariance()": [
        "org.apache.commons.math3.stat.descriptive.moment.SemiVariance.<init>()",
        "org.apache.commons.math3.stat.descriptive.AbstractUnivariateStatistic.<init>()"
    ],
    "org.apache.commons.math3.optimization.linear.SimplexTableau#initializeColumnLabels()": [
        "org.apache.commons.math3.optimization.linear.SimplexTableau#getNumArtificialVariables()",
        "org.apache.commons.math3.optimization.linear.SimplexTableau#getOriginalNumDecisionVariables()",
        "org.apache.commons.math3.optimization.linear.SimplexTableau.<staticinit>()",
        "org.apache.commons.math3.optimization.linear.SimplexTableau#getNumObjectiveFunctions()",
        "org.apache.commons.math3.optimization.linear.SimplexTableau#getNumSlackVariables()"
    ],
    "org.apache.commons.math3.random.SobolSequenceGenerator#skipTo(int)": [
        "org.apache.commons.math3.random.SobolSequenceGenerator#nextVector()",
        "org.apache.commons.math3.random.SobolSequenceGenerator.<staticinit>()"
    ],
    "org.apache.commons.math3.optimization.general.GaussNewtonOptimizer#GaussNewtonOptimizer(ConvergenceChecker<PointVectorValuePair>)": ["org.apache.commons.math3.optimization.general.GaussNewtonOptimizer#GaussNewtonOptimizer(boolean,ConvergenceChecker<PointVectorValuePair>)"],
    "org.apache.commons.math3.stat.correlation.KendallsCorrelation#correlation(double[],double[])$Comparator$1#compare(Pair<Double, Double>,Pair<Double, Double>)": [
        "org.apache.commons.math3.util.Pair#getFirst()",
        "org.apache.commons.math3.util.Pair#getSecond()"
    ],
    "org.apache.commons.math3.util.IntegerSequence.Incrementor#remove()": ["org.apache.commons.math3.exception.MathUnsupportedOperationException#MathUnsupportedOperationException()"],
    "org.apache.commons.math3.stat.clustering.KMeansPlusPlusClusterer#cluster(Collection<T extends Clusterable>,int,int)": [
        "org.apache.commons.math3.stat.clustering.KMeansPlusPlusClusterer.assignPointsToClusters(List<Cluster<T extends Clusterable>>,Collection<T extends Clusterable>,int[])",
        "org.apache.commons.math3.stat.clustering.KMeansPlusPlusClusterer#getPointFromLargestNumberCluster(Collection<Cluster<T extends Clusterable>>)",
        "org.apache.commons.math3.util.MathUtils.checkNotNull(Object)",
        "org.apache.commons.math3.stat.clustering.Cluster#getCenter()",
        "org.apache.commons.math3.stat.clustering.KMeansPlusPlusClusterer.chooseInitialCenters(Collection<T extends Clusterable>,int,Random)",
        "org.apache.commons.math3.stat.clustering.Cluster#getPoints()",
        "org.apache.commons.math3.stat.clustering.KMeansPlusPlusClusterer#getPointFromLargestVarianceCluster(Collection<Cluster<T extends Clusterable>>)",
        "org.apache.commons.math3.stat.clustering.Cluster#Cluster(T extends Clusterable)",
        "org.apache.commons.math3.exception.util.LocalizedFormats.<staticinit>()",
        "org.apache.commons.math3.stat.clustering.KMeansPlusPlusClusterer#getFarthestPoint(Collection<Cluster<T extends Clusterable>>)",
        "org.apache.commons.math3.stat.clustering.KMeansPlusPlusClusterer.EmptyClusterStrategy.<staticinit>()"
    ],
    "org.apache.commons.math3.stat.clustering.KMeansPlusPlusClusterer#getPointFromLargestVarianceCluster(Collection<Cluster<T extends Clusterable>>)": [
        "org.apache.commons.math3.stat.descriptive.moment.Variance#Variance()",
        "org.apache.commons.math3.stat.clustering.Cluster#getCenter()",
        "org.apache.commons.math3.stat.clustering.Cluster#getPoints()",
        "org.apache.commons.math3.exception.util.LocalizedFormats.<staticinit>()",
        "org.apache.commons.math3.random.RandomAdaptor#nextInt(int)",
        "org.apache.commons.math3.stat.descriptive.moment.Variance#getResult()",
        "org.apache.commons.math3.stat.descriptive.moment.Variance#increment(double)"
    ],
    "org.apache.commons.math3.optimization.direct.NelderMeadSimplex#NelderMeadSimplex(int,double,double,double,double)": ["org.apache.commons.math3.optimization.direct.NelderMeadSimplex#NelderMeadSimplex(int,double,double,double,double,double)"],
    "org.apache.commons.math3.analysis.function.Sqrt#derivative()": [
        "org.apache.commons.math3.analysis.function.Log10#derivative()",
        "org.apache.commons.math3.analysis.function.Power#derivative()",
        "org.apache.commons.math3.analysis.function.Sin#derivative()",
        "org.apache.commons.math3.analysis.function.Exp#derivative()",
        "org.apache.commons.math3.analysis.function.HarmonicOscillator#derivative()",
        "org.apache.commons.math3.analysis.polynomials.PolynomialFunction#derivative()",
        "org.apache.commons.math3.analysis.FunctionUtils.toDifferentiableUnivariateFunction(UnivariateDifferentiableFunction)",
        "org.apache.commons.math3.analysis.function.Logit#derivative()",
        "org.apache.commons.math3.analysis.function.Cbrt#derivative()",
        "org.apache.commons.math3.analysis.FunctionUtils.toDifferentiableUnivariateFunction(UnivariateDifferentiableFunction)$DifferentiableUnivariateFunction$1#derivative()",
        "org.apache.commons.math3.analysis.polynomials.PolynomialSplineFunction#derivative()",
        "org.apache.commons.math3.analysis.function.Cosh#derivative()",
        "org.apache.commons.math3.analysis.function.Identity#derivative()",
        "org.apache.commons.math3.analysis.function.Inverse#derivative()",
        "org.apache.commons.math3.analysis.function.Acosh#derivative()",
        "org.apache.commons.math3.analysis.function.Acos#derivative()",
        "org.apache.commons.math3.analysis.function.Atan#derivative()",
        "org.apache.commons.math3.analysis.function.Log#derivative()",
        "org.apache.commons.math3.analysis.function.Sqrt#derivative()",
        "org.apache.commons.math3.analysis.function.Logistic#derivative()",
        "org.apache.commons.math3.analysis.function.Expm1#derivative()",
        "org.apache.commons.math3.analysis.function.Asinh#derivative()",
        "org.apache.commons.math3.analysis.function.Gaussian#derivative()",
        "org.apache.commons.math3.analysis.function.Sinc#derivative()",
        "org.apache.commons.math3.analysis.function.Sigmoid#derivative()",
        "org.apache.commons.math3.analysis.function.Constant#derivative()",
        "org.apache.commons.math3.analysis.function.Sinh#derivative()",
        "org.apache.commons.math3.analysis.function.Tanh#derivative()",
        "org.apache.commons.math3.analysis.function.Asin#derivative()",
        "org.apache.commons.math3.analysis.function.Minus#derivative()",
        "org.apache.commons.math3.analysis.FunctionUtils.compose(DifferentiableUnivariateFunction[]...)$DifferentiableUnivariateFunction$1#derivative()",
        "org.apache.commons.math3.analysis.FunctionUtils.add(DifferentiableUnivariateFunction[]...)$DifferentiableUnivariateFunction$1#derivative()",
        "org.apache.commons.math3.analysis.FunctionUtils.multiply(DifferentiableUnivariateFunction[]...)$DifferentiableUnivariateFunction$1#derivative()",
        "org.apache.commons.math3.analysis.function.Log1p#derivative()",
        "org.apache.commons.math3.analysis.function.Tan#derivative()",
        "org.apache.commons.math3.analysis.function.Cos#derivative()",
        "org.apache.commons.math3.analysis.function.Atanh#derivative()"
    ],
    "org.apache.commons.math3.geometry.spherical.twod.SubCircle#buildNew(Hyperplane<Sphere2D>,Region<Sphere1D>)": ["org.apache.commons.math3.geometry.spherical.twod.SubCircle#SubCircle(Hyperplane<Sphere2D>,Region<Sphere1D>)"],
    "org.apache.commons.math3.stat.Frequency#incrementValue(int,long)": ["org.apache.commons.math3.stat.Frequency#incrementValue(int,long)"],
    "org.apache.commons.math3.fitting.leastsquares.LeastSquaresFactory.weightMatrix(LeastSquaresProblem,RealMatrix)$LeastSquaresAdapter$1.<init>()": ["org.apache.commons.math3.fitting.leastsquares.LeastSquaresAdapter#LeastSquaresAdapter(LeastSquaresProblem)"],
    "org.apache.commons.math3.optim.univariate.MultiStartUnivariateOptimizer#sortPairs(GoalType)": ["org.apache.commons.math3.optim.univariate.MultiStartUnivariateOptimizer#sortPairs(GoalType)$Comparator$1.<init>()"],
    "org.apache.commons.math3.fitting.GaussianCurveFitter.ParameterGuesser#ParameterGuesser(Collection<WeightedObservedPoint>)": [
        "org.apache.commons.math3.fitting.GaussianCurveFitter.ParameterGuesser#sortObservations(Collection<WeightedObservedPoint>)",
        "org.apache.commons.math3.fitting.GaussianCurveFitter.ParameterGuesser#basicGuess(WeightedObservedPoint[])",
        "org.apache.commons.math3.fitting.GaussianCurveFitter.ParameterGuesser.<init>()",
        "org.apache.commons.math3.exception.util.LocalizedFormats.<staticinit>()"
    ],
    "org.apache.commons.math3.dfp.BracketingNthOrderBrentSolverDFP#getFunctionValueAccuracy()": ["org.apache.commons.math3.analysis.solvers.FieldBracketingNthOrderBrentSolver#getFunctionValueAccuracy()"],
    "org.apache.commons.math3.util.Precision.compareTo(double,double,int)": ["org.apache.commons.math3.util.Precision.equals(double,double,int)"],
    "org.apache.commons.math3.fraction.FractionConversionException#FractionConversionException(double,int)": [
        "org.apache.commons.math3.fraction.FractionConversionException.<init>()",
        "org.apache.commons.math3.exception.util.LocalizedFormats.<staticinit>()"
    ],
    "org.apache.commons.math3.analysis.differentiation.SparseGradient#subtract(double)": ["org.apache.commons.math3.analysis.differentiation.SparseGradient#SparseGradient(double,Map<Integer, Double>)"],
    "org.apache.commons.math3.dfp.Dfp#atanh()": [
        "org.apache.commons.math3.dfp.Dfp#add(Dfp)",
        "org.apache.commons.math3.dfp.Dfp#log()",
        "org.apache.commons.math3.dfp.Dfp#getOne()",
        "org.apache.commons.math3.dfp.Dfp#subtract(Dfp)",
        "org.apache.commons.math3.dfp.Dfp#divide(Dfp)",
        "org.apache.commons.math3.dfp.Dfp#divide(int)"
    ],
    "org.apache.commons.math3.optimization.direct.AbstractSimplex#AbstractSimplex(double[])": [
        "org.apache.commons.math3.optimization.direct.AbstractSimplex.<init>()",
        "org.apache.commons.math3.exception.NullArgumentException#NullArgumentException()",
        "org.apache.commons.math3.exception.ZeroException#ZeroException()",
        "org.apache.commons.math3.exception.util.LocalizedFormats.<staticinit>()"
    ],
    "org.apache.commons.math3.dfp.Dfp#copySign(Dfp)": ["org.apache.commons.math3.dfp.Dfp#negate()"],
    "org.apache.commons.math3.linear.FieldLUDecomposition#getDeterminant()": [
        "org.apache.commons.math3.fraction.BigFractionField#getOne()",
        "org.apache.commons.math3.fraction.FractionField#getOne()",
        "org.apache.commons.math3.analysis.differentiation.SparseGradient#getField()$Field$1#getOne()",
        "org.apache.commons.math3.util.BigRealField#getZero()",
        "org.apache.commons.math3.analysis.differentiation.SparseGradient#getField()$Field$1#getZero()",
        "org.apache.commons.math3.util.Decimal64Field#getZero()",
        "org.apache.commons.math3.dfp.DfpField#getZero()",
        "org.apache.commons.math3.complex.ComplexField#getOne()",
        "org.apache.commons.math3.util.BigRealField#getOne()",
        "org.apache.commons.math3.analysis.differentiation.DerivativeStructure#getField()$Field$1#getZero()",
        "org.apache.commons.math3.fraction.FractionField#getZero()",
        "org.apache.commons.math3.complex.ComplexField#getZero()",
        "org.apache.commons.math3.dfp.DfpField#getOne()",
        "org.apache.commons.math3.fraction.BigFractionField#getZero()",
        "org.apache.commons.math3.analysis.differentiation.DerivativeStructure#getField()$Field$1#getOne()",
        "org.apache.commons.math3.util.Decimal64Field#getOne()"
    ],
    "org.apache.commons.math3.analysis.interpolation.BicubicFunction#apply(double[],double[],double[][])": [
        "org.apache.commons.math3.analysis.interpolation.BicubicFunction.<staticinit>()",
        "org.apache.commons.math3.util.MathArrays.linearCombination(double[],double[])"
    ],
    "org.apache.commons.math3.analysis.solvers.NewtonSolver#solve(int,DifferentiableUnivariateFunction,double,double)": [
        "org.apache.commons.math3.analysis.solvers.UnivariateSolverUtils.midpoint(double,double)",
        "org.apache.commons.math3.analysis.solvers.BaseAbstractUnivariateSolver#solve(int,FUNC extends UnivariateFunction,double)"
    ],
    "org.apache.commons.math3.distribution.LogNormalDistribution#logDensity(double)": ["org.apache.commons.math3.util.FastMath.log(double)"],
    "org.apache.commons.math3.geometry.euclidean.threed.FieldRotation.applyInverseTo(Rotation,FieldVector3D<T extends RealFieldElement>)": [
        "org.apache.commons.math3.geometry.euclidean.threed.Rotation#getQ3()",
        "org.apache.commons.math3.geometry.euclidean.threed.Rotation#getQ2()",
        "org.apache.commons.math3.geometry.euclidean.threed.Rotation#getQ1()",
        "org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D#getZ()",
        "org.apache.commons.math3.geometry.euclidean.threed.Rotation#getQ0()",
        "org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D#getY()",
        "org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D#getX()",
        "org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D#FieldVector3D(T extends RealFieldElement,T extends RealFieldElement,T extends RealFieldElement)"
    ],
    "org.apache.commons.math3.fitting.leastsquares.AbstractEvaluation#getCost()": [
        "org.apache.commons.math3.fitting.leastsquares.DenseWeightedEvaluation#getResiduals()",
        "org.apache.commons.math3.util.FastMath.sqrt(double)",
        "org.apache.commons.math3.linear.ArrayRealVector#dotProduct(RealVector)",
        "org.apache.commons.math3.fitting.leastsquares.LeastSquaresFactory.LocalLeastSquaresProblem.LazyUnweightedEvaluation#getResiduals()",
        "org.apache.commons.math3.fitting.leastsquares.LeastSquaresFactory.LocalLeastSquaresProblem.UnweightedEvaluation#getResiduals()",
        "org.apache.commons.math3.linear.ArrayRealVector#ArrayRealVector(RealVector)",
        "org.apache.commons.math3.fitting.leastsquares.OptimumImpl#getResiduals()"
    ],
    "org.apache.commons.math3.linear.AbstractRealMatrix#setColumnVector(int,RealVector)": [
        "org.apache.commons.math3.linear.Array2DRowRealMatrix#setEntry(int,int,double)",
        "org.apache.commons.math3.linear.ArrayRealVector#getDimension()",
        "org.apache.commons.math3.linear.MatrixUtils.checkColumnIndex(AnyMatrix,int)",
        "org.apache.commons.math3.linear.OpenMapRealMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.DiagonalMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.BlockRealMatrix#setEntry(int,int,double)",
        "org.apache.commons.math3.linear.OpenMapRealMatrix#setEntry(int,int,double)",
        "org.apache.commons.math3.linear.ArrayRealVector#getEntry(int)",
        "org.apache.commons.math3.linear.OpenMapRealVector#getDimension()",
        "org.apache.commons.math3.linear.BlockRealMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.Array2DRowRealMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.MatrixDimensionMismatchException#MatrixDimensionMismatchException(int,int,int,int)",
        "org.apache.commons.math3.linear.RealVector.unmodifiableRealVector(RealVector)$RealVector$1#getDimension()",
        "org.apache.commons.math3.linear.OpenMapRealVector#getEntry(int)",
        "org.apache.commons.math3.linear.DiagonalMatrix#setEntry(int,int,double)",
        "org.apache.commons.math3.linear.RealVector.unmodifiableRealVector(RealVector)$RealVector$1#getEntry(int)"
    ],
    "org.apache.commons.math3.geometry.enclosing.WelzlEncloser#selectFarthest(Iterable<P extends Point>,EnclosingBall<S extends Space, P extends Point>)": ["org.apache.commons.math3.geometry.enclosing.EnclosingBall#getCenter()"],
    "org.apache.commons.math3.ode.sampling.AbstractStepInterpolator#getInterpolatedState()": [
        "org.apache.commons.math3.ode.EquationsMapper#extractEquationData(double[],double[])",
        "org.apache.commons.math3.ode.sampling.AbstractStepInterpolator#evaluateCompleteInterpolatedState()"
    ],
    "org.apache.commons.math3.geometry.euclidean.threed.Vector3DFormat.getInstance(Locale)": [
        "org.apache.commons.math3.util.CompositeFormat.getDefaultNumberFormat(Locale)",
        "org.apache.commons.math3.geometry.euclidean.threed.Vector3DFormat#Vector3DFormat(NumberFormat)"
    ],
    "org.apache.commons.math3.linear.EigenDecomposition#getSquareRoot()": [
        "org.apache.commons.math3.linear.EigenDecomposition#getV()",
        "org.apache.commons.math3.linear.AbstractRealMatrix#multiply(RealMatrix)",
        "org.apache.commons.math3.util.FastMath.sqrt(double)",
        "org.apache.commons.math3.linear.OpenMapRealMatrix#multiply(RealMatrix)",
        "org.apache.commons.math3.linear.EigenDecomposition#getVT()",
        "org.apache.commons.math3.linear.DiagonalMatrix#multiply(RealMatrix)",
        "org.apache.commons.math3.linear.MatrixUtils.createRealDiagonalMatrix(double[])",
        "org.apache.commons.math3.exception.MathUnsupportedOperationException#MathUnsupportedOperationException()",
        "org.apache.commons.math3.linear.BlockRealMatrix#multiply(RealMatrix)"
    ],
    "org.apache.commons.math3.stat.descriptive.summary.Sum#Sum()": [
        "org.apache.commons.math3.stat.descriptive.summary.Sum.<init>()",
        "org.apache.commons.math3.stat.descriptive.AbstractStorelessUnivariateStatistic.<init>()"
    ],
    "org.apache.commons.math3.complex.ComplexFormat#ComplexFormat(String)": [
        "org.apache.commons.math3.complex.ComplexFormat#ComplexFormat(String,NumberFormat)",
        "org.apache.commons.math3.util.CompositeFormat.getDefaultNumberFormat()"
    ],
    "org.apache.commons.math3.ml.neuralnet.sofm.LearningFactorFunctionFactory.quasiSigmoidDecay(double,double,long)$LearningFactorFunction$1.<init>()": ["org.apache.commons.math3.ml.neuralnet.sofm.util.QuasiSigmoidDecayFunction#QuasiSigmoidDecayFunction(double,double,long)"],
    "org.apache.commons.math3.optimization.general.NonLinearConjugateGradientOptimizer#NonLinearConjugateGradientOptimizer(ConjugateGradientFormula)": [
        "org.apache.commons.math3.optimization.general.NonLinearConjugateGradientOptimizer#NonLinearConjugateGradientOptimizer(ConjugateGradientFormula,ConvergenceChecker<PointValuePair>)",
        "org.apache.commons.math3.optimization.general.ConjugateGradientFormula.<staticinit>()",
        "org.apache.commons.math3.optimization.SimpleValueChecker#SimpleValueChecker()"
    ],
    "org.apache.commons.math3.dfp.DfpMath.atan(Dfp)": [
        "org.apache.commons.math3.dfp.DfpMath.splitDiv(Dfp[],Dfp[])",
        "org.apache.commons.math3.dfp.DfpField#getPiSplit()",
        "org.apache.commons.math3.dfp.Dfp#divide(int)",
        "org.apache.commons.math3.dfp.Dfp#newInstance(Dfp)",
        "org.apache.commons.math3.dfp.Dfp#add(Dfp)",
        "org.apache.commons.math3.dfp.DfpField#getZero()",
        "org.apache.commons.math3.dfp.Dfp#Dfp(Dfp)",
        "org.apache.commons.math3.dfp.Dfp#getField()",
        "org.apache.commons.math3.dfp.Dfp#subtract(Dfp)",
        "org.apache.commons.math3.dfp.DfpField#getSqr2Split()",
        "org.apache.commons.math3.dfp.DfpMath.splitMult(Dfp[],Dfp[])",
        "org.apache.commons.math3.dfp.DfpDec#newInstance(Dfp)",
        "org.apache.commons.math3.dfp.Dfp#lessThan(Dfp)",
        "org.apache.commons.math3.dfp.DfpMath.split(Dfp)",
        "org.apache.commons.math3.dfp.Dfp#divide(Dfp)",
        "org.apache.commons.math3.dfp.Dfp#negate()",
        "org.apache.commons.math3.dfp.DfpField#getOne()",
        "org.apache.commons.math3.dfp.Dfp#greaterThan(Dfp)",
        "org.apache.commons.math3.dfp.DfpMath.atanInternal(Dfp)"
    ],
    "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer#randn(int)": [
        "org.apache.commons.math3.random.RandomAdaptor#nextGaussian()",
        "org.apache.commons.math3.random.SynchronizedRandomGenerator#nextGaussian()",
        "org.apache.commons.math3.random.RandomGeneratorFactory.createRandomGenerator(Random)$RandomGenerator$1#nextGaussian()",
        "org.apache.commons.math3.random.BitsStreamGenerator#nextGaussian()",
        "org.apache.commons.math3.random.AbstractRandomGenerator#nextGaussian()"
    ],
    "org.apache.commons.math3.stat.regression.OLSMultipleLinearRegression#newXSampleData(double[][])": [
        "org.apache.commons.math3.linear.QRDecomposition#QRDecomposition(RealMatrix,double)",
        "org.apache.commons.math3.stat.regression.AbstractMultipleLinearRegression#newXSampleData(double[][])",
        "org.apache.commons.math3.stat.regression.AbstractMultipleLinearRegression#getX()"
    ],
    "org.apache.commons.math3.optim.BaseOptimizer#parseOptimizationData(OptimizationData[]...)": [
        "org.apache.commons.math3.optim.MaxIter#getMaxIter()",
        "org.apache.commons.math3.util.Incrementor.wrap(Incrementor)$Incrementor$1#setMaximalCount(int)",
        "org.apache.commons.math3.util.Incrementor#setMaximalCount(int)",
        "org.apache.commons.math3.optim.MaxEval#getMaxEval()"
    ],
    "org.apache.commons.math3.util.OpenIntToFieldHashMap#growTable()": [
        "org.apache.commons.math3.util.OpenIntToFieldHashMap#buildArray(int)",
        "org.apache.commons.math3.util.OpenIntToFieldHashMap.findInsertionIndex(int[],byte[],int,int)",
        "org.apache.commons.math3.util.OpenIntToFieldHashMap.<staticinit>()"
    ],
    "org.apache.commons.math3.geometry.spherical.twod.S2Point#negate()": [
        "org.apache.commons.math3.geometry.spherical.twod.S2Point#S2Point(double,double,Vector3D)",
        "org.apache.commons.math3.util.FastMath.<staticinit>()",
        "org.apache.commons.math3.geometry.euclidean.threed.Vector3D#negate()"
    ],
    "org.apache.commons.math3.random.RandomDataImpl#nextSecureInt(int,int)": ["org.apache.commons.math3.random.RandomDataGenerator#nextSecureInt(int,int)"],
    "org.apache.commons.math3.linear.DiagonalMatrix#setEntry(int,int,double)": [
        "org.apache.commons.math3.linear.MatrixUtils.checkRowIndex(AnyMatrix,int)",
        "org.apache.commons.math3.linear.DiagonalMatrix#ensureZero(double)"
    ],
    "org.apache.commons.math3.dfp.DfpDec#DfpDec(DfpField,int)": [
        "org.apache.commons.math3.dfp.DfpDec.<init>()",
        "org.apache.commons.math3.dfp.Dfp#Dfp(DfpField,int)"
    ],
    "org.apache.commons.math3.geometry.euclidean.oned.Interval#getUpper()": ["org.apache.commons.math3.geometry.euclidean.oned.Interval#getSup()"],
    "org.apache.commons.math3.ode.nonstiff.DormandPrince853Integrator#estimateError(double[][],double[],double[],double)": [
        "org.apache.commons.math3.ode.nonstiff.DormandPrince853Integrator.<staticinit>()",
        "org.apache.commons.math3.util.FastMath.abs(double)",
        "org.apache.commons.math3.util.FastMath.max(double,double)",
        "org.apache.commons.math3.util.FastMath.sqrt(double)"
    ],
    "org.apache.commons.math3.optimization.direct.PowellOptimizer.LineSearch#search(double[],double[])$UnivariateFunction$1#value(double)": ["org.apache.commons.math3.optimization.direct.BaseAbstractMultivariateOptimizer#computeObjectiveValue(double[])"],
    "org.apache.commons.math3.analysis.interpolation.UnivariatePeriodicInterpolator#UnivariatePeriodicInterpolator(UnivariateInterpolator,double,int)": ["org.apache.commons.math3.analysis.interpolation.UnivariatePeriodicInterpolator.<init>()"],
    "org.apache.commons.math3.stat.Frequency#addValue(Comparable<?>)": ["org.apache.commons.math3.stat.Frequency#incrementValue(Comparable<?>,long)"],
    "org.apache.commons.math3.analysis.differentiation.DSCompiler#sinh(double[],int,double[],int)": [
        "org.apache.commons.math3.util.FastMath.cosh(double)",
        "org.apache.commons.math3.util.FastMath.sinh(double)",
        "org.apache.commons.math3.analysis.differentiation.DSCompiler#compose(double[],int,double[],double[],int)"
    ],
    "org.apache.commons.math3.geometry.euclidean.threed.SubLine#SubLine(Line,IntervalsSet)": ["org.apache.commons.math3.geometry.euclidean.threed.SubLine.<init>()"],
    "org.apache.commons.math3.optim.SimplePointChecker#SimplePointChecker(double,double)": [
        "org.apache.commons.math3.optim.AbstractConvergenceChecker#AbstractConvergenceChecker(double,double)",
        "org.apache.commons.math3.optim.SimplePointChecker.<init>()",
        "org.apache.commons.math3.optim.SimplePointChecker.<staticinit>()"
    ],
    "org.apache.commons.math3.ml.neuralnet.twod.NeuronSquareMesh2D#createLinks()": [
        "org.apache.commons.math3.ml.neuralnet.SquareNeighbourhood.<staticinit>()",
        "org.apache.commons.math3.ml.neuralnet.Network#getNeuron(long)",
        "org.apache.commons.math3.exception.MathInternalError#MathInternalError()",
        "org.apache.commons.math3.ml.neuralnet.Network#addLink(Neuron,Neuron)"
    ],
    "org.apache.commons.math3.random.Well19937c#Well19937c(int[])": [
        "org.apache.commons.math3.random.Well19937c.<staticinit>()",
        "org.apache.commons.math3.random.AbstractWell#AbstractWell(int,int,int,int,int[])",
        "org.apache.commons.math3.random.Well19937c.<init>()"
    ],
    "org.apache.commons.math3.userguide.ClusterAlgorithmComparison.ClusterPlot#ClusterPlot(List<? extends Cluster<DoublePoint>>,long)": ["org.apache.commons.math3.userguide.ClusterAlgorithmComparison.ClusterPlot.<init>()"],
    "org.apache.commons.math3.stat.descriptive.moment.GeometricMean#evaluate(double[],int,int)": [
        "org.apache.commons.math3.stat.descriptive.moment.Skewness#evaluate(double[],int,int)",
        "org.apache.commons.math3.stat.descriptive.moment.Variance#evaluate(double[],int,int)",
        "org.apache.commons.math3.stat.descriptive.moment.SemiVariance#evaluate(double[],int,int)",
        "org.apache.commons.math3.stat.descriptive.moment.GeometricMean#evaluate(double[],int,int)",
        "org.apache.commons.math3.stat.descriptive.summary.SumOfLogs#evaluate(double[],int,int)",
        "org.apache.commons.math3.stat.descriptive.moment.StandardDeviation#evaluate(double[],int,int)",
        "org.apache.commons.math3.util.FastMath.exp(double)",
        "org.apache.commons.math3.stat.descriptive.summary.Sum#evaluate(double[],int,int)",
        "org.apache.commons.math3.stat.descriptive.rank.Min#evaluate(double[],int,int)",
        "org.apache.commons.math3.stat.descriptive.rank.Percentile#evaluate(double[],int,int)",
        "org.apache.commons.math3.stat.descriptive.rank.Max#evaluate(double[],int,int)",
        "org.apache.commons.math3.stat.descriptive.summary.SumOfSquares#evaluate(double[],int,int)",
        "org.apache.commons.math3.stat.descriptive.moment.Mean#evaluate(double[],int,int)",
        "org.apache.commons.math3.stat.descriptive.summary.Product#evaluate(double[],int,int)",
        "org.apache.commons.math3.stat.descriptive.moment.Kurtosis#evaluate(double[],int,int)",
        "org.apache.commons.math3.stat.descriptive.AbstractStorelessUnivariateStatistic#evaluate(double[],int,int)"
    ],
    "org.apache.commons.math3.ode.nonstiff.AdamsNordsieckFieldTransformer#updateHighOrderDerivativesPhase2(T extends RealFieldElement[],T extends RealFieldElement[],Array2DRowFieldMatrix<T extends RealFieldElement>)": ["org.apache.commons.math3.linear.Array2DRowFieldMatrix#getDataRef()"],
    "org.apache.commons.math3.geometry.euclidean.twod.Vector2D#scalarMultiply(double)": ["org.apache.commons.math3.geometry.euclidean.twod.Vector2D#Vector2D(double,double)"],
    "org.apache.commons.math3.optimization.general.NonLinearConjugateGradientOptimizer#NonLinearConjugateGradientOptimizer(ConjugateGradientFormula,ConvergenceChecker<PointValuePair>,UnivariateSolver)": [
        "org.apache.commons.math3.optimization.general.NonLinearConjugateGradientOptimizer#NonLinearConjugateGradientOptimizer(ConjugateGradientFormula,ConvergenceChecker<PointValuePair>,UnivariateSolver,Preconditioner)",
        "org.apache.commons.math3.optimization.general.ConjugateGradientFormula.<staticinit>()",
        "org.apache.commons.math3.optimization.general.NonLinearConjugateGradientOptimizer.IdentityPreconditioner.<init>()"
    ],
    "org.apache.commons.math3.analysis.FunctionUtils.multiply(DifferentiableUnivariateFunction[]...)": ["org.apache.commons.math3.analysis.FunctionUtils.multiply(DifferentiableUnivariateFunction[]...)$DifferentiableUnivariateFunction$1.<init>()"],
    "org.apache.commons.math3.analysis.function.Expm1#value(DerivativeStructure)": ["org.apache.commons.math3.analysis.differentiation.DerivativeStructure#expm1()"],
    "org.apache.commons.math3.random.RandomDataGenerator#initRan()": ["org.apache.commons.math3.random.Well19937c#Well19937c(int)"],
    "org.apache.commons.math3.optimization.fitting.HarmonicFitter#fit()": [
        "org.apache.commons.math3.optimization.fitting.HarmonicFitter#fit(double[])",
        "org.apache.commons.math3.optimization.fitting.HarmonicFitter.ParameterGuesser#ParameterGuesser(WeightedObservedPoint[])",
        "org.apache.commons.math3.optimization.fitting.CurveFitter#getObservations()",
        "org.apache.commons.math3.optimization.fitting.HarmonicFitter.ParameterGuesser#guess()"
    ],
    "org.apache.commons.math3.stat.descriptive.DescriptiveStatistics#getPercentile(double)": [
        "org.apache.commons.math3.stat.descriptive.DescriptiveStatistics#apply(UnivariateStatistic)",
        "org.apache.commons.math3.stat.descriptive.DescriptiveStatistics.<staticinit>()",
        "org.apache.commons.math3.stat.descriptive.rank.Percentile#setQuantile(double)",
        "org.apache.commons.math3.exception.util.LocalizedFormats.<staticinit>()",
        "org.apache.commons.math3.stat.descriptive.SynchronizedDescriptiveStatistics#apply(UnivariateStatistic)"
    ],
    "org.apache.commons.math3.optimization.general.AbstractLeastSquaresOptimizer#squareRoot(RealMatrix)": [
        "org.apache.commons.math3.linear.EigenDecomposition#EigenDecomposition(RealMatrix)",
        "org.apache.commons.math3.linear.Array2DRowRealMatrix#setEntry(int,int,double)",
        "org.apache.commons.math3.linear.SparseFieldMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.DiagonalMatrix#getEntry(int,int)",
        "org.apache.commons.math3.linear.BlockRealMatrix#setEntry(int,int,double)",
        "org.apache.commons.math3.linear.OpenMapRealMatrix#setEntry(int,int,double)",
        "org.apache.commons.math3.linear.OpenMapRealMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.DiagonalMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.OpenMapRealMatrix#getEntry(int,int)",
        "org.apache.commons.math3.linear.EigenDecomposition#getSquareRoot()",
        "org.apache.commons.math3.linear.BlockRealMatrix#getEntry(int,int)",
        "org.apache.commons.math3.linear.BlockFieldMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.Array2DRowRealMatrix#getEntry(int,int)",
        "org.apache.commons.math3.linear.BlockRealMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.Array2DRowRealMatrix#getRowDimension()",
        "org.apache.commons.math3.util.FastMath.sqrt(double)",
        "org.apache.commons.math3.linear.Array2DRowFieldMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.DiagonalMatrix#setEntry(int,int,double)",
        "org.apache.commons.math3.linear.DiagonalMatrix#DiagonalMatrix(int)"
    ],
    "org.apache.commons.math3.random.ISAACRandom#setSeed(int)": ["org.apache.commons.math3.random.ISAACRandom#setSeed(int[])"],
    "org.apache.commons.math3.analysis.solvers.MullerSolver2#MullerSolver2(double)": [
        "org.apache.commons.math3.analysis.solvers.MullerSolver2.<init>()",
        "org.apache.commons.math3.analysis.solvers.AbstractUnivariateSolver#AbstractUnivariateSolver(double)"
    ],
    "org.apache.commons.math3.analysis.differentiation.DerivativeStructure#expm1()": [
        "org.apache.commons.math3.analysis.differentiation.DSCompiler#expm1(double[],int,double[],int)",
        "org.apache.commons.math3.analysis.differentiation.DerivativeStructure#DerivativeStructure(DSCompiler)"
    ],
    "org.apache.commons.math3.analysis.interpolation.MicrosphereInterpolatingFunction#cosAngle(RealVector,RealVector)": [
        "org.apache.commons.math3.linear.RealVector#getNorm()",
        "org.apache.commons.math3.linear.RealVector#dotProduct(RealVector)",
        "org.apache.commons.math3.linear.RealVector.unmodifiableRealVector(RealVector)$RealVector$1#getNorm()",
        "org.apache.commons.math3.linear.ArrayRealVector#getNorm()",
        "org.apache.commons.math3.linear.RealVector.unmodifiableRealVector(RealVector)$RealVector$1#dotProduct(RealVector)",
        "org.apache.commons.math3.linear.ArrayRealVector#dotProduct(RealVector)"
    ],
    "org.apache.commons.math3.distribution.PascalDistribution#getNumericalVariance()": [
        "org.apache.commons.math3.distribution.PascalDistribution#getProbabilityOfSuccess()",
        "org.apache.commons.math3.distribution.PascalDistribution#getNumberOfSuccesses()"
    ],
    "org.apache.commons.math3.geometry.euclidean.oned.Vector1DFormat#parse(String)": [
        "org.apache.commons.math3.geometry.euclidean.oned.Vector1DFormat#parse(String,ParsePosition)",
        "org.apache.commons.math3.exception.MathParseException#MathParseException(String,int,Class<?>)"
    ],
    "org.apache.commons.math3.linear.RealVector#hashCode()": ["org.apache.commons.math3.exception.MathUnsupportedOperationException#MathUnsupportedOperationException()"],
    "org.apache.commons.math3.linear.RealVector.unmodifiableRealVector(RealVector)$RealVector$1#isNaN()": [
        "org.apache.commons.math3.linear.RealVector.unmodifiableRealVector(RealVector)$RealVector$1#isNaN()",
        "org.apache.commons.math3.linear.ArrayRealVector#isNaN()",
        "org.apache.commons.math3.linear.OpenMapRealVector#isNaN()"
    ],
    "org.apache.commons.math3.random.RandomDataImpl#nextPascal(int,double)": ["org.apache.commons.math3.random.RandomDataGenerator#nextPascal(int,double)"],
    "org.apache.commons.math3.dfp.Dfp#linearCombination(double,Dfp,double,Dfp,double,Dfp)": [
        "org.apache.commons.math3.dfp.Dfp#add(Dfp)",
        "org.apache.commons.math3.dfp.Dfp#multiply(double)"
    ],
    "org.apache.commons.math3.geometry.partitioning.AbstractRegion#contains(Region<S extends Space>)": [
        "org.apache.commons.math3.geometry.partitioning.RegionFactory#RegionFactory()",
        "org.apache.commons.math3.geometry.partitioning.RegionFactory#difference(Region<S extends Space>,Region<S extends Space>)",
        "org.apache.commons.math3.geometry.partitioning.AbstractRegion#isEmpty()"
    ],
    "org.apache.commons.math3.analysis.integration.gauss.GaussIntegratorFactory.<init>()": [
        "org.apache.commons.math3.analysis.integration.gauss.LegendreRuleFactory.<init>()",
        "org.apache.commons.math3.analysis.integration.gauss.LegendreHighPrecisionRuleFactory#LegendreHighPrecisionRuleFactory()",
        "org.apache.commons.math3.analysis.integration.gauss.HermiteRuleFactory.<init>()"
    ],
    "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer.PopulationSize#PopulationSize(int)": ["org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer.PopulationSize.<init>()"],
    "org.apache.commons.math3.random.RandomDataGenerator#nextHexString(int)": [
        "org.apache.commons.math3.random.RandomDataGenerator#getRandomGenerator()",
        "org.apache.commons.math3.random.BitsStreamGenerator#nextBytes(byte[])",
        "org.apache.commons.math3.random.AbstractRandomGenerator#nextBytes(byte[])",
        "org.apache.commons.math3.exception.util.LocalizedFormats.<staticinit>()",
        "org.apache.commons.math3.random.RandomGeneratorFactory.createRandomGenerator(Random)$RandomGenerator$1#nextBytes(byte[])",
        "org.apache.commons.math3.random.SynchronizedRandomGenerator#nextBytes(byte[])",
        "org.apache.commons.math3.random.RandomAdaptor#nextBytes(byte[])"
    ],
    "org.apache.commons.math3.optimization.direct.MultivariateFunctionMappingAdapter#MultivariateFunctionMappingAdapter(MultivariateFunction,double[],double[])": [
        "org.apache.commons.math3.optimization.direct.MultivariateFunctionMappingAdapter.UpperBoundMapper#UpperBoundMapper(double)",
        "org.apache.commons.math3.exception.DimensionMismatchException#DimensionMismatchException(int,int)",
        "org.apache.commons.math3.optimization.direct.MultivariateFunctionMappingAdapter.LowerBoundMapper#LowerBoundMapper(double)",
        "org.apache.commons.math3.util.MathUtils.checkNotNull(Object)",
        "org.apache.commons.math3.optimization.direct.MultivariateFunctionMappingAdapter.LowerUpperBoundMapper#LowerUpperBoundMapper(double,double)",
        "org.apache.commons.math3.optimization.direct.MultivariateFunctionMappingAdapter.<init>()",
        "org.apache.commons.math3.optimization.direct.MultivariateFunctionMappingAdapter.NoBoundsMapper#NoBoundsMapper()"
    ],
    "org.apache.commons.math3.ml.clustering.KMeansPlusPlusClusterer#getPointFromLargestNumberCluster(Collection<? extends Cluster<T extends Clusterable>>)": [
        "org.apache.commons.math3.exception.util.LocalizedFormats.<staticinit>()",
        "org.apache.commons.math3.random.RandomGeneratorFactory.createRandomGenerator(Random)$RandomGenerator$1#nextInt(int)",
        "org.apache.commons.math3.ml.clustering.Cluster#getPoints()",
        "org.apache.commons.math3.random.BitsStreamGenerator#nextInt(int)",
        "org.apache.commons.math3.random.AbstractRandomGenerator#nextInt(int)",
        "org.apache.commons.math3.random.SynchronizedRandomGenerator#nextInt(int)",
        "org.apache.commons.math3.random.RandomAdaptor#nextInt(int)"
    ],
    "org.apache.commons.math3.ode.events.EventState#getCompleteState(StepInterpolator)": [
        "org.apache.commons.math3.ode.sampling.AbstractStepInterpolator#getInterpolatedSecondaryState(int)",
        "org.apache.commons.math3.ode.ExpandableStatefulODE#getPrimaryMapper()",
        "org.apache.commons.math3.ode.ExpandableStatefulODE#getSecondaryMappers()",
        "org.apache.commons.math3.ode.sampling.AbstractStepInterpolator#getInterpolatedState()",
        "org.apache.commons.math3.ode.ExpandableStatefulODE#getTotalDimension()",
        "org.apache.commons.math3.ode.EquationsMapper#insertEquationData(double[],double[])"
    ],
    "org.apache.commons.math3.geometry.euclidean.threed.Line#closestPoint(Line)": [
        "org.apache.commons.math3.util.Precision.<staticinit>()",
        "org.apache.commons.math3.geometry.euclidean.threed.Vector3D#Vector3D(double,Vector3D,double,Vector3D)",
        "org.apache.commons.math3.geometry.euclidean.threed.Vector3D#dotProduct(Vector<Euclidean3D>)",
        "org.apache.commons.math3.geometry.euclidean.threed.Vector3D#subtract(Vector<Euclidean3D>)"
    ],
    "org.apache.commons.math3.fraction.BigFractionField.getInstance()": ["org.apache.commons.math3.fraction.BigFractionField.LazyHolder.<staticinit>()"],
    "org.apache.commons.math3.util.FastMathCalc.slowCos(double,double[])": [
        "org.apache.commons.math3.util.FastMathCalc.split(double,double[])",
        "org.apache.commons.math3.util.FastMathCalc.splitAdd(double[],double[],double[])",
        "org.apache.commons.math3.util.FastMathCalc.<staticinit>()",
        "org.apache.commons.math3.util.FastMathCalc.splitMult(double[],double[],double[])",
        "org.apache.commons.math3.util.FastMathCalc.splitReciprocal(double[],double[])"
    ],
    "org.apache.commons.math3.complex.Complex#multiply(Complex)": [
        "org.apache.commons.math3.complex.Complex.<staticinit>()",
        "org.apache.commons.math3.util.MathUtils.checkNotNull(Object)",
        "org.apache.commons.math3.complex.Complex#createComplex(double,double)"
    ],
    "org.apache.commons.math3.ode.ContinuousOutputModel#append(ContinuousOutputModel)": [
        "org.apache.commons.math3.exception.DimensionMismatchException#DimensionMismatchException(int,int)",
        "org.apache.commons.math3.ode.ContinuousOutputModel#getInterpolatedState()",
        "org.apache.commons.math3.util.FastMath.abs(double)",
        "org.apache.commons.math3.ode.sampling.AbstractStepInterpolator#copy()",
        "org.apache.commons.math3.exception.util.LocalizedFormats.<staticinit>()",
        "org.apache.commons.math3.ode.sampling.AbstractStepInterpolator#getCurrentTime()",
        "org.apache.commons.math3.ode.sampling.AbstractStepInterpolator#getPreviousTime()",
        "org.apache.commons.math3.ode.ContinuousOutputModel#getInitialTime()"
    ],
    "org.apache.commons.math3.geometry.euclidean.twod.Vector2DFormat#format(Vector<Euclidean2D>,StringBuffer,FieldPosition)": [
        "org.apache.commons.math3.geometry.euclidean.twod.Vector2D#getY()",
        "org.apache.commons.math3.geometry.VectorFormat#format(StringBuffer,FieldPosition,double[]...)",
        "org.apache.commons.math3.geometry.euclidean.twod.Vector2D#getX()"
    ],
    "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer#sortedIndices(double[])": ["org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer.DoubleIndex#DoubleIndex(double,int)"],
    "org.apache.commons.math3.linear.RealVector#cosine(RealVector)": [
        "org.apache.commons.math3.linear.RealVector#getNorm()",
        "org.apache.commons.math3.linear.ArrayRealVector#dotProduct(RealVector)",
        "org.apache.commons.math3.exception.util.LocalizedFormats.<staticinit>()",
        "org.apache.commons.math3.linear.RealVector.unmodifiableRealVector(RealVector)$RealVector$1#getNorm()",
        "org.apache.commons.math3.linear.ArrayRealVector#getNorm()",
        "org.apache.commons.math3.linear.RealVector#dotProduct(RealVector)",
        "org.apache.commons.math3.linear.RealVector.unmodifiableRealVector(RealVector)$RealVector$1#dotProduct(RealVector)"
    ],
    "org.apache.commons.math3.stat.correlation.PearsonsCorrelation#getCorrelationPValues()": [
        "org.apache.commons.math3.linear.DiagonalMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.Array2DRowRealMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.BlockFieldMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.DiagonalMatrix#getEntry(int,int)",
        "org.apache.commons.math3.linear.OpenMapRealMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.OpenMapRealMatrix#getEntry(int,int)",
        "org.apache.commons.math3.linear.BlockRealMatrix#getEntry(int,int)",
        "org.apache.commons.math3.linear.Array2DRowFieldMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.SparseFieldMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.BlockRealMatrix#BlockRealMatrix(double[][])",
        "org.apache.commons.math3.linear.Array2DRowRealMatrix#getEntry(int,int)",
        "org.apache.commons.math3.distribution.TDistribution#cumulativeProbability(double)",
        "org.apache.commons.math3.util.FastMath.abs(double)",
        "org.apache.commons.math3.distribution.TDistribution#TDistribution(double)",
        "org.apache.commons.math3.util.FastMath.sqrt(double)",
        "org.apache.commons.math3.linear.BlockRealMatrix#getColumnDimension()"
    ],
    "org.apache.commons.math3.linear.EigenDecomposition#getEigenvector(int)": ["org.apache.commons.math3.linear.ArrayRealVector#copy()"],
    "org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile#equals(Object)": ["org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile#getN()"],
    "org.apache.commons.math3.userguide.genetics.HelloWorldExample.RandomCharacterMutation#mutate(Chromosome)": [
        "org.apache.commons.math3.genetics.GeneticAlgorithm.getRandomGenerator()",
        "org.apache.commons.math3.random.RandomGeneratorFactory.createRandomGenerator(Random)$RandomGenerator$1#nextInt(int)",
        "org.apache.commons.math3.userguide.genetics.HelloWorldExample.StringChromosome#newFixedLengthChromosome(List<Character>)",
        "org.apache.commons.math3.random.BitsStreamGenerator#nextInt(int)",
        "org.apache.commons.math3.random.AbstractRandomGenerator#nextInt(int)",
        "org.apache.commons.math3.random.SynchronizedRandomGenerator#nextInt(int)",
        "org.apache.commons.math3.random.RandomAdaptor#nextInt(int)",
        "org.apache.commons.math3.userguide.genetics.HelloWorldExample.StringChromosome#getStringRepresentation()"
    ],
    "org.apache.commons.math3.stat.inference.TestUtils.chiSquareTest(long[][],double)": [
        "org.apache.commons.math3.stat.inference.TestUtils.<staticinit>()",
        "org.apache.commons.math3.stat.inference.ChiSquareTest#chiSquareTest(long[][],double)"
    ],
    "org.apache.commons.math3.util.FastMathCalc.checkLen(int,int)": ["org.apache.commons.math3.exception.DimensionMismatchException#DimensionMismatchException(int,int)"],
    "org.apache.commons.math3.util.Combinations.SingletonIterator#SingletonIterator(int[])": ["org.apache.commons.math3.util.Combinations.SingletonIterator.<init>()"],
    "org.apache.commons.math3.stat.inference.TestUtils.homoscedasticT(StatisticalSummary,StatisticalSummary)": [
        "org.apache.commons.math3.stat.inference.TTest#homoscedasticT(StatisticalSummary,StatisticalSummary)",
        "org.apache.commons.math3.stat.inference.TestUtils.<staticinit>()"
    ],
    "org.apache.commons.math3.fitting.leastsquares.LeastSquaresBuilder#model(MultivariateVectorFunction,MultivariateMatrixFunction)": [
        "org.apache.commons.math3.fitting.leastsquares.LeastSquaresFactory.model(MultivariateVectorFunction,MultivariateMatrixFunction)",
        "org.apache.commons.math3.fitting.leastsquares.LeastSquaresBuilder#model(MultivariateJacobianFunction)"
    ],
    "org.apache.commons.math3.geometry.euclidean.threed.Plane#wholeHyperplane()": [
        "org.apache.commons.math3.geometry.euclidean.threed.SubPlane#SubPlane(Hyperplane<Euclidean3D>,Region<Euclidean2D>)",
        "org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet#PolygonsSet(double)"
    ],
    "org.apache.commons.math3.util.MathArrays.checkEqualLength(double[],double[])": ["org.apache.commons.math3.util.MathArrays.checkEqualLength(double[],double[],boolean)"],
    "org.apache.commons.math3.genetics.BinaryChromosome.randomBinaryRepresentation(int)": [
        "org.apache.commons.math3.random.BitsStreamGenerator#nextInt(int)",
        "org.apache.commons.math3.random.AbstractRandomGenerator#nextInt(int)",
        "org.apache.commons.math3.random.SynchronizedRandomGenerator#nextInt(int)",
        "org.apache.commons.math3.random.RandomAdaptor#nextInt(int)",
        "org.apache.commons.math3.genetics.GeneticAlgorithm.getRandomGenerator()",
        "org.apache.commons.math3.random.RandomGeneratorFactory.createRandomGenerator(Random)$RandomGenerator$1#nextInt(int)"
    ],
    "org.apache.commons.math3.random.RandomDataImpl#nextGaussian(double,double)": ["org.apache.commons.math3.random.RandomDataGenerator#nextGaussian(double,double)"],
    "org.apache.commons.math3.optim.nonlinear.vector.MultivariateVectorOptimizer#parseOptimizationData(OptimizationData[]...)": [
        "org.apache.commons.math3.optim.nonlinear.vector.ModelFunction#getModelFunction()",
        "org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizer#checkParameters()",
        "org.apache.commons.math3.optim.nonlinear.vector.Weight#getWeight()",
        "org.apache.commons.math3.optim.nonlinear.vector.jacobian.GaussNewtonOptimizer#checkParameters()",
        "org.apache.commons.math3.optim.nonlinear.vector.MultivariateVectorOptimizer#checkParameters()",
        "org.apache.commons.math3.optim.nonlinear.vector.Target#getTarget()",
        "org.apache.commons.math3.optim.BaseMultivariateOptimizer#parseOptimizationData(OptimizationData[]...)"
    ],
    "org.apache.commons.math3.optimization.direct.BaseAbstractMultivariateVectorOptimizer#checkParameters()": [
        "org.apache.commons.math3.linear.SparseFieldMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.DiagonalMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.Array2DRowRealMatrix#getColumnDimension()",
        "org.apache.commons.math3.exception.DimensionMismatchException#DimensionMismatchException(int,int)",
        "org.apache.commons.math3.linear.BlockFieldMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.OpenMapRealMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.BlockRealMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.Array2DRowFieldMatrix#getColumnDimension()"
    ],
    "org.apache.commons.math3.stat.descriptive.summary.SumOfLogs#copy()": [
        "org.apache.commons.math3.stat.descriptive.summary.SumOfLogs#SumOfLogs()",
        "org.apache.commons.math3.stat.descriptive.summary.SumOfLogs.copy(SumOfLogs,SumOfLogs)"
    ],
    "org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet#PolyhedronsSet(List<Vector3D>,List<int[]>,double)": [
        "org.apache.commons.math3.geometry.partitioning.AbstractRegion#AbstractRegion(Collection<SubHyperplane<S extends Space>>,double)",
        "org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet.<init>()",
        "org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet.buildBoundary(List<Vector3D>,List<int[]>,double)"
    ],
    "org.apache.commons.math3.stat.descriptive.moment.GeometricMean#GeometricMean(SumOfLogs)": [
        "org.apache.commons.math3.stat.descriptive.moment.GeometricMean.<init>()",
        "org.apache.commons.math3.stat.descriptive.AbstractStorelessUnivariateStatistic.<init>()"
    ],
    "org.apache.commons.math3.optimization.univariate.BrentOptimizer#BrentOptimizer(double,double)": ["org.apache.commons.math3.optimization.univariate.BrentOptimizer#BrentOptimizer(double,double,ConvergenceChecker<UnivariatePointValuePair>)"],
    "org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizer#LevenbergMarquardtOptimizer(double,double,double)": [
        "org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizer#LevenbergMarquardtOptimizer(double,double,double,double,double)",
        "org.apache.commons.math3.util.Precision.<staticinit>()"
    ],
    "org.apache.commons.math3.stat.descriptive.moment.Skewness#Skewness(ThirdMoment)": [
        "org.apache.commons.math3.stat.descriptive.AbstractStorelessUnivariateStatistic.<init>()",
        "org.apache.commons.math3.stat.descriptive.moment.Skewness.<init>()"
    ],
    "org.apache.commons.math3.analysis.interpolation.LoessInterpolator#smooth(double[],double[],double[])": [
        "org.apache.commons.math3.exception.DimensionMismatchException#DimensionMismatchException(int,int)",
        "org.apache.commons.math3.analysis.interpolation.LoessInterpolator.checkAllFiniteReal(double[])",
        "org.apache.commons.math3.util.FastMath.abs(double)",
        "org.apache.commons.math3.analysis.interpolation.LoessInterpolator.updateBandwidthInterval(double[],double[],int,int[])",
        "org.apache.commons.math3.util.MathArrays.checkOrder(double[])",
        "org.apache.commons.math3.util.FastMath.sqrt(double)",
        "org.apache.commons.math3.analysis.interpolation.LoessInterpolator.tricube(double)",
        "org.apache.commons.math3.exception.util.LocalizedFormats.<staticinit>()",
        "org.apache.commons.math3.exception.NoDataException#NoDataException()"
    ],
    "org.apache.commons.math3.complex.ComplexFormat#ComplexFormat(NumberFormat)": [
        "org.apache.commons.math3.complex.ComplexFormat.<init>()",
        "org.apache.commons.math3.complex.ComplexFormat.<staticinit>()",
        "org.apache.commons.math3.exception.util.LocalizedFormats.<staticinit>()"
    ],
    "org.apache.commons.math3.linear.RealVector#getMaxIndex()": [
        "org.apache.commons.math3.linear.RealVector.Entry#getValue()",
        "org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet.SubIntervalsIterator#hasNext()",
        "org.apache.commons.math3.linear.RealVector.unmodifiableRealVector(RealVector)$Iterator$1$Iterator$1#iterator()$Iterator$1#next()",
        "org.apache.commons.math3.linear.RealVector#iterator()",
        "org.apache.commons.math3.linear.OpenMapRealVector.OpenMapEntry#getIndex()",
        "org.apache.commons.math3.linear.RealVector#iterator()$Iterator$1#hasNext()",
        "org.apache.commons.math3.linear.RealVector.unmodifiableRealVector(RealVector)$RealVector$1#iterator()",
        "org.apache.commons.math3.userguide.sofm.ChineseRingsClassifier#createRandomIterator(long)$Iterator$1#hasNext()",
        "org.apache.commons.math3.util.IntegerSequence.Incrementor#hasNext()",
        "org.apache.commons.math3.linear.RealVector.unmodifiableRealVector(RealVector)$Iterator$1$Iterator$1#sparseIterator()$Iterator$1#hasNext()",
        "org.apache.commons.math3.geometry.spherical.oned.ArcsSet.SubArcsIterator#hasNext()",
        "org.apache.commons.math3.linear.RealVector.Entry#getIndex()",
        "org.apache.commons.math3.linear.RealVector#iterator()$Iterator$1#next()",
        "org.apache.commons.math3.util.Combinations.LexicographicIterator#hasNext()",
        "org.apache.commons.math3.linear.OpenMapRealVector.OpenMapEntry#getValue()",
        "org.apache.commons.math3.linear.RealVector.unmodifiableRealVector(RealVector).UnmodifiableEntry.UnmodifiableEntry#getValue()",
        "org.apache.commons.math3.linear.RealVector.SparseEntryIterator#hasNext()",
        "org.apache.commons.math3.userguide.sofm.ChineseRingsClassifier#createIterable()$Iterator$1$Iterator$1#iterator()$Iterator$1#hasNext()",
        "org.apache.commons.math3.linear.RealVector.unmodifiableRealVector(RealVector)$Iterator$1$Iterator$1#iterator()$Iterator$1#hasNext()",
        "org.apache.commons.math3.util.Combinations.SingletonIterator#hasNext()",
        "org.apache.commons.math3.linear.RealVector.SparseEntryIterator#next()",
        "org.apache.commons.math3.util.MultidimensionalCounter.Iterator#hasNext()",
        "org.apache.commons.math3.linear.RealVector.unmodifiableRealVector(RealVector)$Iterator$1$Iterator$1#sparseIterator()$Iterator$1#next()"
    ],
    "org.apache.commons.math3.analysis.interpolation.UnivariatePeriodicInterpolator#UnivariatePeriodicInterpolator(UnivariateInterpolator,double)": [
        "org.apache.commons.math3.analysis.interpolation.UnivariatePeriodicInterpolator.<staticinit>()",
        "org.apache.commons.math3.analysis.interpolation.UnivariatePeriodicInterpolator#UnivariatePeriodicInterpolator(UnivariateInterpolator,double,int)"
    ],
    "org.apache.commons.math3.util.Decimal64#exp()": [
        "org.apache.commons.math3.util.Decimal64#Decimal64(double)",
        "org.apache.commons.math3.util.FastMath.exp(double)"
    ],
    "org.apache.commons.math3.util.ArithmeticUtils.mulAndCheck(long,long)": [
        "org.apache.commons.math3.util.ArithmeticUtils.mulAndCheck(long,long)",
        "org.apache.commons.math3.exception.MathArithmeticException#MathArithmeticException()"
    ],
    "org.apache.commons.math3.analysis.function.Ulp#value(double)": ["org.apache.commons.math3.util.FastMath.ulp(double)"],
    "org.apache.commons.math3.optimization.fitting.CurveFitter#CurveFitter(MultivariateDifferentiableVectorOptimizer)": ["org.apache.commons.math3.optimization.fitting.CurveFitter.<init>()"],
    "org.apache.commons.math3.linear.Array2DRowFieldMatrix#walkInColumnOrder(FieldMatrixPreservingVisitor<T extends FieldElement>,int,int,int,int)": [
        "org.apache.commons.math3.linear.AbstractFieldMatrix#checkSubMatrixIndex(int,int,int,int)",
        "org.apache.commons.math3.linear.AbstractFieldMatrix#transpose()$DefaultFieldMatrixPreservingVisitor$1#visit(int,int,T extends FieldElement)",
        "org.apache.commons.math3.linear.DefaultFieldMatrixPreservingVisitor#start(int,int,int,int,int,int)",
        "org.apache.commons.math3.linear.Array2DRowFieldMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.DefaultFieldMatrixPreservingVisitor#end()",
        "org.apache.commons.math3.linear.MatrixUtils.FractionMatrixConverter#start(int,int,int,int,int,int)",
        "org.apache.commons.math3.linear.DefaultFieldMatrixPreservingVisitor#visit(int,int,T extends FieldElement)",
        "org.apache.commons.math3.linear.MatrixUtils.BigFractionMatrixConverter#start(int,int,int,int,int,int)",
        "org.apache.commons.math3.linear.Array2DRowFieldMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.AbstractFieldMatrix#copySubMatrix(int,int,int,int,T extends FieldElement[][])$DefaultFieldMatrixPreservingVisitor$1#start(int,int,int,int,int,int)",
        "org.apache.commons.math3.ode.nonstiff.AdamsMoultonFieldIntegrator.Corrector#start(int,int,int,int,int,int)",
        "org.apache.commons.math3.ode.nonstiff.AdamsMoultonFieldIntegrator.Corrector#end()",
        "org.apache.commons.math3.linear.AbstractFieldMatrix#copySubMatrix(int,int,int,int,T extends FieldElement[][])$DefaultFieldMatrixPreservingVisitor$1#visit(int,int,T extends FieldElement)"
    ],
    "org.apache.commons.math3.linear.AbstractFieldMatrix#setSubMatrix(T extends FieldElement[][],int,int)": [
        "org.apache.commons.math3.exception.DimensionMismatchException#DimensionMismatchException(int,int)",
        "org.apache.commons.math3.exception.NullArgumentException#NullArgumentException()",
        "org.apache.commons.math3.exception.util.LocalizedFormats.<staticinit>()",
        "org.apache.commons.math3.linear.SparseFieldMatrix#setEntry(int,int,T extends FieldElement)",
        "org.apache.commons.math3.linear.Array2DRowFieldMatrix#setEntry(int,int,T extends FieldElement)",
        "org.apache.commons.math3.linear.BlockFieldMatrix#setEntry(int,int,T extends FieldElement)",
        "org.apache.commons.math3.exception.NoDataException#NoDataException(Localizable)",
        "org.apache.commons.math3.linear.AbstractFieldMatrix#checkColumnIndex(int)",
        "org.apache.commons.math3.linear.AbstractFieldMatrix#checkRowIndex(int)"
    ],
    "org.apache.commons.math3.geometry.euclidean.threed.Plane#Plane(Vector3D,Vector3D,double)": [
        "org.apache.commons.math3.geometry.euclidean.threed.Plane.<init>()",
        "org.apache.commons.math3.geometry.euclidean.threed.Plane#setNormal(Vector3D)",
        "org.apache.commons.math3.geometry.euclidean.threed.Vector3D#dotProduct(Vector<Euclidean3D>)",
        "org.apache.commons.math3.geometry.euclidean.threed.Plane#setFrame()"
    ],
    "org.apache.commons.math3.ml.neuralnet.Network#createNeuron(double[])": [
        "org.apache.commons.math3.exception.DimensionMismatchException#DimensionMismatchException(int,int)",
        "org.apache.commons.math3.ml.neuralnet.Neuron#Neuron(long,double[])",
        "org.apache.commons.math3.ml.neuralnet.Network#createNextId()"
    ],
    "org.apache.commons.math3.linear.CholeskyDecomposition.Solver#getInverse()": [
        "org.apache.commons.math3.linear.CholeskyDecomposition.Solver#solve(RealMatrix)",
        "org.apache.commons.math3.linear.MatrixUtils.createRealIdentityMatrix(int)"
    ],
    "org.apache.commons.math3.linear.Array2DRowFieldMatrix#Array2DRowFieldMatrix(T extends FieldElement[][],boolean)": [
        "org.apache.commons.math3.linear.AbstractFieldMatrix.extractField(T extends FieldElement[][])",
        "org.apache.commons.math3.linear.Array2DRowFieldMatrix#Array2DRowFieldMatrix(Field<T extends FieldElement>,T extends FieldElement[][],boolean)"
    ],
    "org.apache.commons.math3.linear.LUDecomposition#getU()": [
        "org.apache.commons.math3.linear.BlockRealMatrix#setEntry(int,int,double)",
        "org.apache.commons.math3.linear.OpenMapRealMatrix#setEntry(int,int,double)",
        "org.apache.commons.math3.linear.MatrixUtils.createRealMatrix(int,int)",
        "org.apache.commons.math3.linear.Array2DRowRealMatrix#setEntry(int,int,double)",
        "org.apache.commons.math3.linear.DiagonalMatrix#setEntry(int,int,double)"
    ],
    "org.apache.commons.math3.geometry.partitioning.BSPTree#copySelf()": [
        "org.apache.commons.math3.geometry.partitioning.BSPTree#copySelf()",
        "org.apache.commons.math3.geometry.partitioning.BSPTree#BSPTree(Object)",
        "org.apache.commons.math3.geometry.partitioning.BSPTree#BSPTree(SubHyperplane<S extends Space>,BSPTree<S extends Space>,BSPTree<S extends Space>,Object)",
        "org.apache.commons.math3.geometry.partitioning.AbstractSubHyperplane#copySelf()"
    ],
    "org.apache.commons.math3.analysis.FunctionUtils.fix1stArgument(BivariateFunction,double)": ["org.apache.commons.math3.analysis.FunctionUtils.fix1stArgument(BivariateFunction,double)$UnivariateFunction$1.<init>()"],
    "org.apache.commons.math3.util.Precision.round(double,int,int)": ["org.apache.commons.math3.util.Precision.<staticinit>()"],
    "org.apache.commons.math3.analysis.differentiation.DerivativeStructure#multiply(double)": ["org.apache.commons.math3.analysis.differentiation.DerivativeStructure#DerivativeStructure(DerivativeStructure)"],
    "org.apache.commons.math3.complex.ComplexFormat.getInstance(String,Locale)": [
        "org.apache.commons.math3.util.CompositeFormat.getDefaultNumberFormat(Locale)",
        "org.apache.commons.math3.complex.ComplexFormat#ComplexFormat(String,NumberFormat)"
    ],
    "org.apache.commons.math3.linear.SymmLQ.State.throwNPDLOException(RealLinearOperator,RealVector)": [
        "org.apache.commons.math3.exception.MathIllegalArgumentException#getContext()",
        "org.apache.commons.math3.linear.NonPositiveDefiniteOperatorException#NonPositiveDefiniteOperatorException()",
        "org.apache.commons.math3.linear.SymmLQ.<staticinit>()",
        "org.apache.commons.math3.exception.util.ExceptionContext#setValue(String,Object)"
    ],
    "org.apache.commons.math3.ode.MultistepIntegrator#start(double,double[],double)$FirstOrderDifferentialEquations$1#computeDerivatives(double,double[],double[])": [
        "org.apache.commons.math3.ode.ExpandableStatefulODE#computeDerivatives(double,double[],double[])",
        "org.apache.commons.math3.ode.AbstractIntegrator#getExpandable()"
    ],
    "org.apache.commons.math3.optimization.direct.SimplexOptimizer#optimizeInternal(int,MultivariateFunction,GoalType,OptimizationData[]...)": ["org.apache.commons.math3.optimization.direct.SimplexOptimizer#parseOptimizationData(OptimizationData[]...)"],
    "org.apache.commons.math3.linear.SparseFieldVector#mapInvToSelf()": [
        "org.apache.commons.math3.fraction.BigFractionField#getOne()",
        "org.apache.commons.math3.linear.SparseFieldVector#getEntry(int)",
        "org.apache.commons.math3.fraction.FractionField#getOne()",
        "org.apache.commons.math3.analysis.differentiation.SparseGradient#getField()$Field$1#getOne()",
        "org.apache.commons.math3.dfp.DfpField#getOne()",
        "org.apache.commons.math3.analysis.differentiation.DerivativeStructure#getField()$Field$1#getOne()",
        "org.apache.commons.math3.util.Decimal64Field#getOne()",
        "org.apache.commons.math3.complex.ComplexField#getOne()",
        "org.apache.commons.math3.util.BigRealField#getOne()"
    ],
    "org.apache.commons.math3.geometry.partitioning.AbstractRegion#copySelf()": ["org.apache.commons.math3.geometry.partitioning.BSPTree#copySelf()"],
    "org.apache.commons.math3.optim.linear.SimplexSolver#SimplexSolver(double)": [
        "org.apache.commons.math3.optim.linear.SimplexSolver#SimplexSolver(double,int,double)",
        "org.apache.commons.math3.optim.linear.SimplexSolver.<staticinit>()"
    ],
    "org.apache.commons.math3.fraction.FractionField#readResolve()": ["org.apache.commons.math3.fraction.FractionField.LazyHolder.<staticinit>()"],
    "org.apache.commons.math3.special.Gamma.gamma(double)": [
        "org.apache.commons.math3.util.FastMath.pow(double,double)",
        "org.apache.commons.math3.special.Gamma.invGamma1pm1(double)",
        "org.apache.commons.math3.util.FastMath.rint(double)",
        "org.apache.commons.math3.util.FastMath.abs(double)",
        "org.apache.commons.math3.util.FastMath.exp(double)",
        "org.apache.commons.math3.util.FastMath.sin(double)",
        "org.apache.commons.math3.special.Gamma.<staticinit>()",
        "org.apache.commons.math3.special.Gamma.lanczos(double)",
        "org.apache.commons.math3.util.FastMath.<staticinit>()"
    ],
    "org.apache.commons.math3.geometry.partitioning.AbstractRegion#getBarycenter()": [
        "org.apache.commons.math3.geometry.spherical.oned.ArcsSet#computeGeometricalProperties()",
        "org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet#computeGeometricalProperties()",
        "org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet#computeGeometricalProperties()",
        "org.apache.commons.math3.geometry.spherical.twod.SphericalPolygonsSet#computeGeometricalProperties()",
        "org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet#computeGeometricalProperties()"
    ],
    "org.apache.commons.math3.util.BigRealField.getInstance()": ["org.apache.commons.math3.util.BigRealField.LazyHolder.<staticinit>()"],
    "org.apache.commons.math3.util.OpenIntToDoubleHashMap.computeCapacity(int)": [
        "org.apache.commons.math3.util.OpenIntToDoubleHashMap.<staticinit>()",
        "org.apache.commons.math3.util.FastMath.ceil(double)",
        "org.apache.commons.math3.util.OpenIntToDoubleHashMap.nextPowerOfTwo(int)"
    ],
    "org.apache.commons.math3.geometry.euclidean.twod.Line#Line(Vector2D,Vector2D)": [
        "org.apache.commons.math3.geometry.euclidean.twod.Line#Line(Vector2D,Vector2D,double)",
        "org.apache.commons.math3.geometry.euclidean.twod.Line.<staticinit>()"
    ],
    "org.apache.commons.math3.ode.nonstiff.DormandPrince853FieldStepInterpolator#computeInterpolatedStateAndDerivatives(FieldEquationsMapper<T extends RealFieldElement>,T extends RealFieldElement,T extends RealFieldElement,T extends RealFieldElement,T extends RealFieldElement)": [
        "org.apache.commons.math3.ode.nonstiff.RungeKuttaFieldStepInterpolator#currentStateLinearCombination(T extends RealFieldElement[]...)",
        "org.apache.commons.math3.ode.nonstiff.RungeKuttaFieldStepInterpolator#previousStateLinearCombination(T extends RealFieldElement[]...)",
        "org.apache.commons.math3.ode.nonstiff.RungeKuttaFieldStepInterpolator#derivativeLinearCombination(T extends RealFieldElement[]...)",
        "org.apache.commons.math3.util.MathArrays.buildArray(Field<T>,int)",
        "org.apache.commons.math3.ode.sampling.AbstractFieldStepInterpolator#getGlobalPreviousState()",
        "org.apache.commons.math3.ode.FieldODEStateAndDerivative#FieldODEStateAndDerivative(T extends RealFieldElement,T extends RealFieldElement[],T extends RealFieldElement[])"
    ],
    "org.apache.commons.math3.dfp.Dfp#linearCombination(Dfp,Dfp,Dfp,Dfp,Dfp,Dfp,Dfp,Dfp)": [
        "org.apache.commons.math3.dfp.Dfp#add(Dfp)",
        "org.apache.commons.math3.dfp.Dfp#multiply(Dfp)"
    ],
    "org.apache.commons.math3.complex.Complex#pow(Complex)": [
        "org.apache.commons.math3.util.MathUtils.checkNotNull(Object)",
        "org.apache.commons.math3.complex.Complex#log()",
        "org.apache.commons.math3.complex.Complex#multiply(Complex)",
        "org.apache.commons.math3.complex.Complex.<staticinit>()",
        "org.apache.commons.math3.complex.Complex#exp()"
    ],
    "org.apache.commons.math3.complex.Quaternion#equals(Quaternion,double)": [
        "org.apache.commons.math3.util.Precision.equals(double,double,double)",
        "org.apache.commons.math3.complex.Quaternion#getQ3()",
        "org.apache.commons.math3.complex.Quaternion#getQ2()",
        "org.apache.commons.math3.complex.Quaternion#getQ1()",
        "org.apache.commons.math3.complex.Quaternion#getQ0()"
    ],
    "org.apache.commons.math3.distribution.EnumeratedIntegerDistribution#sample()": ["org.apache.commons.math3.distribution.EnumeratedDistribution#sample()"],
    "org.apache.commons.math3.ode.sampling.StepNormalizer#isNextInStep(double,StepInterpolator)": ["org.apache.commons.math3.ode.sampling.AbstractStepInterpolator#getCurrentTime()"],
    "org.apache.commons.math3.dfp.DfpField#DfpField(int,boolean)": [
        "org.apache.commons.math3.dfp.DfpField.RoundingMode.<staticinit>()",
        "org.apache.commons.math3.dfp.Dfp#Dfp(DfpField,int)",
        "org.apache.commons.math3.dfp.Dfp#Dfp(DfpField,String)",
        "org.apache.commons.math3.dfp.DfpField.<init>()",
        "org.apache.commons.math3.dfp.DfpField.<staticinit>()",
        "org.apache.commons.math3.dfp.DfpField#split(String)",
        "org.apache.commons.math3.dfp.DfpField.computeStringConstants(int)"
    ],
    "org.apache.commons.math3.fitting.GaussianFitter#GaussianFitter(MultivariateVectorOptimizer)": [
        "org.apache.commons.math3.fitting.GaussianFitter.<init>()",
        "org.apache.commons.math3.fitting.CurveFitter#CurveFitter(MultivariateVectorOptimizer)"
    ],
    "org.apache.commons.math3.ode.AbstractIntegrator#getEvaluationsCounter()": ["org.apache.commons.math3.util.Incrementor.wrap(Incrementor)"],
    "org.apache.commons.math3.geometry.euclidean.twod.Vector2D#Vector2D(double,Vector2D,double,Vector2D,double,Vector2D,double,Vector2D)": ["org.apache.commons.math3.geometry.euclidean.twod.Vector2D.<init>()"],
    "org.apache.commons.math3.geometry.spherical.twod.PropertiesComputer#convexCellArea(Vertex)": [
        "org.apache.commons.math3.geometry.spherical.twod.Edge#getCircle()",
        "org.apache.commons.math3.geometry.spherical.twod.Circle#getPole()",
        "org.apache.commons.math3.util.MathUtils.<staticinit>()",
        "org.apache.commons.math3.geometry.spherical.twod.Vertex#getLocation()",
        "org.apache.commons.math3.geometry.spherical.twod.Edge#getStart()",
        "org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(Vector3D,Vector3D)",
        "org.apache.commons.math3.geometry.spherical.twod.Vertex#getOutgoing()",
        "org.apache.commons.math3.geometry.spherical.twod.Edge#getEnd()",
        "org.apache.commons.math3.geometry.euclidean.threed.Vector3D.dotProduct(Vector3D,Vector3D)",
        "org.apache.commons.math3.geometry.spherical.twod.S2Point#getVector()",
        "org.apache.commons.math3.util.FastMath.atan2(double,double)",
        "org.apache.commons.math3.util.FastMath.<staticinit>()"
    ],
    "org.apache.commons.math3.analysis.solvers.LaguerreSolver#LaguerreSolver()": [
        "org.apache.commons.math3.analysis.solvers.LaguerreSolver#LaguerreSolver(double)",
        "org.apache.commons.math3.analysis.solvers.LaguerreSolver.<staticinit>()"
    ],
    "org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet#isIntervalStart(BSPTree<Euclidean1D>)": [
        "org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet#leafBefore(BSPTree<Euclidean1D>)",
        "org.apache.commons.math3.geometry.partitioning.BSPTree#getAttribute()",
        "org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet#leafAfter(BSPTree<Euclidean1D>)"
    ],
    "org.apache.commons.math3.linear.SparseFieldVector#mapSubtractToSelf(T extends FieldElement)": [
        "org.apache.commons.math3.util.BigRealField#getZero()",
        "org.apache.commons.math3.analysis.differentiation.SparseGradient#getField()$Field$1#getZero()",
        "org.apache.commons.math3.analysis.differentiation.DerivativeStructure#getField()$Field$1#getZero()",
        "org.apache.commons.math3.fraction.FractionField#getZero()",
        "org.apache.commons.math3.util.Decimal64Field#getZero()",
        "org.apache.commons.math3.dfp.DfpField#getZero()",
        "org.apache.commons.math3.complex.ComplexField#getZero()",
        "org.apache.commons.math3.fraction.BigFractionField#getZero()"
    ],
    "org.apache.commons.math3.geometry.euclidean.threed.Vector3D#Vector3D(double,Vector3D,double,Vector3D,double,Vector3D)": [
        "org.apache.commons.math3.util.MathArrays.linearCombination(double,double,double,double,double,double)",
        "org.apache.commons.math3.geometry.euclidean.threed.Vector3D.<init>()"
    ],
    "org.apache.commons.math3.geometry.euclidean.threed.OutlineExtractor.BoundaryProjector#visitInternalNode(BSPTree<Euclidean3D>)": [
        "org.apache.commons.math3.geometry.euclidean.threed.OutlineExtractor.BoundaryProjector#addContribution(SubHyperplane<Euclidean3D>,boolean)",
        "org.apache.commons.math3.geometry.partitioning.BoundaryAttribute#getPlusOutside()",
        "org.apache.commons.math3.geometry.partitioning.BSPTree#getAttribute()",
        "org.apache.commons.math3.geometry.partitioning.BoundaryAttribute#getPlusInside()"
    ],
    "org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D.angle(FieldVector3D<T extends RealFieldElement>,Vector3D)": [
        "org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D.dotProduct(FieldVector3D<T extends RealFieldElement>,Vector3D)",
        "org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D#getNorm()",
        "org.apache.commons.math3.geometry.euclidean.threed.Vector3D#getNorm()",
        "org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D.crossProduct(FieldVector3D<T extends RealFieldElement>,Vector3D)",
        "org.apache.commons.math3.util.FastMath.<staticinit>()",
        "org.apache.commons.math3.exception.util.LocalizedFormats.<staticinit>()"
    ],
    "org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.SegmentsBuilder#selectClosest(Vector2D,Iterable<BSPTree<Euclidean2D>>)": [
        "org.apache.commons.math3.geometry.partitioning.BSPTree#getCut()",
        "org.apache.commons.math3.util.FastMath.abs(double)",
        "org.apache.commons.math3.geometry.partitioning.AbstractSubHyperplane#getHyperplane()"
    ],
    "org.apache.commons.math3.analysis.interpolation.BicubicSplineFunction#BicubicSplineFunction(double[])": ["org.apache.commons.math3.analysis.interpolation.BicubicSplineFunction#BicubicSplineFunction(double[],boolean)"],
    "org.apache.commons.math3.ode.nonstiff.GillStepInterpolator.<staticinit>()": ["org.apache.commons.math3.util.FastMath.sqrt(double)"],
    "org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D#negate()": ["org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D#FieldVector3D(T extends RealFieldElement,T extends RealFieldElement,T extends RealFieldElement)"],
    "org.apache.commons.math3.ml.clustering.DoublePoint#DoublePoint(double[])": ["org.apache.commons.math3.ml.clustering.DoublePoint.<init>()"],
    "org.apache.commons.math3.geometry.euclidean.threed.Line#isSimilarTo(Line)": [
        "org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(Vector3D,Vector3D)",
        "org.apache.commons.math3.geometry.euclidean.threed.Line#contains(Vector3D)",
        "org.apache.commons.math3.util.FastMath.<staticinit>()"
    ],
    "org.apache.commons.math3.ode.events.FieldEventState#reset(FieldODEStateAndDerivative<T extends RealFieldElement>)": [
        "org.apache.commons.math3.ode.FieldODEState#getTime()",
        "org.apache.commons.math3.ode.events.Action.<staticinit>()"
    ],
    "org.apache.commons.math3.stat.inference.TTest#t(double,double,double,double,double,double)": ["org.apache.commons.math3.util.FastMath.sqrt(double)"],
    "org.apache.commons.math3.optimization.direct.MultivariateFunctionMappingAdapter.UpperBoundMapper#unboundedToBounded(double)": ["org.apache.commons.math3.util.FastMath.exp(double)"],
    "org.apache.commons.math3.linear.IterativeLinearSolver#solve(RealLinearOperator,RealVector,RealVector)": [
        "org.apache.commons.math3.linear.ArrayRealVector#copy()",
        "org.apache.commons.math3.util.MathUtils.checkNotNull(Object)",
        "org.apache.commons.math3.linear.RealVector.unmodifiableRealVector(RealVector)$RealVector$1#copy()",
        "org.apache.commons.math3.linear.PreconditionedIterativeLinearSolver#solveInPlace(RealLinearOperator,RealVector,RealVector)",
        "org.apache.commons.math3.linear.OpenMapRealVector#copy()",
        "org.apache.commons.math3.linear.SymmLQ#solveInPlace(RealLinearOperator,RealVector,RealVector)"
    ],
    "org.apache.commons.math3.util.ResizableDoubleArray#ResizableDoubleArray(int,float,float,int)": [
        "org.apache.commons.math3.util.ResizableDoubleArray.<staticinit>()",
        "org.apache.commons.math3.util.ResizableDoubleArray#setExpansionMode(int)",
        "org.apache.commons.math3.util.ResizableDoubleArray.ExpansionMode.<staticinit>()"
    ],
    "org.apache.commons.math3.stat.regression.MillerUpdatingRegression#regress(int)": [
        "org.apache.commons.math3.stat.regression.MillerUpdatingRegression#tolset()",
        "org.apache.commons.math3.stat.regression.MillerUpdatingRegression#cov(int)",
        "org.apache.commons.math3.exception.util.LocalizedFormats.<staticinit>()",
        "org.apache.commons.math3.stat.regression.MillerUpdatingRegression#regcf(int)",
        "org.apache.commons.math3.stat.regression.RegressionResults#RegressionResults(double[],double[][],boolean,long,int,double,double,double,boolean,boolean)",
        "org.apache.commons.math3.stat.regression.MillerUpdatingRegression#ss()",
        "org.apache.commons.math3.stat.regression.MillerUpdatingRegression#singcheck()"
    ],
    "org.apache.commons.math3.linear.QRDecomposition#performHouseholderReflection(int,double[][])": ["org.apache.commons.math3.util.FastMath.sqrt(double)"],
    "org.apache.commons.math3.optimization.PointVectorValuePair#getValue()": ["org.apache.commons.math3.util.Pair#getValue()"],
    "org.apache.commons.math3.linear.FieldLUDecomposition.Solver#getInverse()": [
        "org.apache.commons.math3.fraction.BigFractionField#getOne()",
        "org.apache.commons.math3.fraction.FractionField#getOne()",
        "org.apache.commons.math3.analysis.differentiation.SparseGradient#getField()$Field$1#getOne()",
        "org.apache.commons.math3.linear.SparseFieldMatrix#setEntry(int,int,T extends FieldElement)",
        "org.apache.commons.math3.linear.Array2DRowFieldMatrix#setEntry(int,int,T extends FieldElement)",
        "org.apache.commons.math3.linear.BlockFieldMatrix#setEntry(int,int,T extends FieldElement)",
        "org.apache.commons.math3.complex.ComplexField#getOne()",
        "org.apache.commons.math3.util.BigRealField#getOne()",
        "org.apache.commons.math3.linear.FieldLUDecomposition.Solver#solve(FieldMatrix<T extends FieldElement>)",
        "org.apache.commons.math3.linear.Array2DRowFieldMatrix#Array2DRowFieldMatrix(Field<T extends FieldElement>,int,int)",
        "org.apache.commons.math3.dfp.DfpField#getOne()",
        "org.apache.commons.math3.analysis.differentiation.DerivativeStructure#getField()$Field$1#getOne()",
        "org.apache.commons.math3.util.Decimal64Field#getOne()"
    ],
    "org.apache.commons.math3.stat.descriptive.rank.Percentile#withNaNStrategy(NaNStrategy)": ["org.apache.commons.math3.stat.descriptive.rank.Percentile#Percentile(double,EstimationType,NaNStrategy,KthSelector)"],
    "org.apache.commons.math3.stat.regression.MillerUpdatingRegression#regress(int[])": [
        "org.apache.commons.math3.stat.regression.MillerUpdatingRegression#tolset()",
        "org.apache.commons.math3.stat.regression.MillerUpdatingRegression#reorderRegressors(int[],int)",
        "org.apache.commons.math3.stat.regression.MillerUpdatingRegression#regcf(int)",
        "org.apache.commons.math3.stat.regression.MillerUpdatingRegression#cov(int)",
        "org.apache.commons.math3.exception.util.LocalizedFormats.<staticinit>()",
        "org.apache.commons.math3.stat.regression.RegressionResults#RegressionResults(double[],double[][],boolean,long,int,double,double,double,boolean,boolean)",
        "org.apache.commons.math3.stat.regression.MillerUpdatingRegression#ss()",
        "org.apache.commons.math3.stat.regression.MillerUpdatingRegression#singcheck()"
    ],
    "org.apache.commons.math3.linear.IllConditionedOperatorException#IllConditionedOperatorException(double)": [
        "org.apache.commons.math3.linear.IllConditionedOperatorException.<init>()",
        "org.apache.commons.math3.exception.util.LocalizedFormats.<staticinit>()"
    ],
    "org.apache.commons.math3.linear.ArrayFieldVector#dotProduct(FieldVector<T extends FieldElement>)": [
        "org.apache.commons.math3.linear.ArrayFieldVector#dotProduct(ArrayFieldVector<T extends FieldElement>)",
        "org.apache.commons.math3.linear.SparseFieldVector#getEntry(int)",
        "org.apache.commons.math3.util.BigRealField#getZero()",
        "org.apache.commons.math3.analysis.differentiation.SparseGradient#getField()$Field$1#getZero()",
        "org.apache.commons.math3.analysis.differentiation.DerivativeStructure#getField()$Field$1#getZero()",
        "org.apache.commons.math3.fraction.FractionField#getZero()",
        "org.apache.commons.math3.util.Decimal64Field#getZero()",
        "org.apache.commons.math3.linear.ArrayFieldVector#getEntry(int)",
        "org.apache.commons.math3.dfp.DfpField#getZero()",
        "org.apache.commons.math3.complex.ComplexField#getZero()",
        "org.apache.commons.math3.fraction.BigFractionField#getZero()",
        "org.apache.commons.math3.linear.ArrayFieldVector#checkVectorDimensions(FieldVector<T extends FieldElement>)"
    ],
    "org.apache.commons.math3.distribution.HypergeometricDistribution#innerCumulativeProbability(int,int,int)": ["org.apache.commons.math3.distribution.HypergeometricDistribution#probability(int)"],
    "org.apache.commons.math3.stat.descriptive.SynchronizedSummaryStatistics#getStandardDeviation()": ["org.apache.commons.math3.stat.descriptive.SummaryStatistics#getStandardDeviation()"],
    "org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile.Markers#readObject(ObjectInputStream)": [
        "org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile.Marker#next(Marker)",
        "org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile.Marker#previous(Marker)",
        "org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile.<staticinit>()",
        "org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile.Marker#index(int)"
    ],
    "org.apache.commons.math3.stat.descriptive.AggregateSummaryStatistics#getSumsq()": [
        "org.apache.commons.math3.stat.descriptive.SummaryStatistics#getSumsq()",
        "org.apache.commons.math3.stat.descriptive.SynchronizedSummaryStatistics#getSumsq()"
    ],
    "org.apache.commons.math3.linear.RealVector#checkVectorDimensions(int)": [
        "org.apache.commons.math3.linear.OpenMapRealVector#getDimension()",
        "org.apache.commons.math3.exception.DimensionMismatchException#DimensionMismatchException(int,int)",
        "org.apache.commons.math3.linear.ArrayRealVector#getDimension()",
        "org.apache.commons.math3.linear.RealVector.unmodifiableRealVector(RealVector)$RealVector$1#getDimension()"
    ],
    "org.apache.commons.math3.linear.ArrayFieldVector#append(ArrayFieldVector<T extends FieldElement>)": ["org.apache.commons.math3.linear.ArrayFieldVector#ArrayFieldVector(ArrayFieldVector<T extends FieldElement>,ArrayFieldVector<T extends FieldElement>)"],
    "org.apache.commons.math3.util.MathArrays.convolve(double[],double[])": [
        "org.apache.commons.math3.util.MathUtils.checkNotNull(Object)",
        "org.apache.commons.math3.exception.NoDataException#NoDataException()",
        "org.apache.commons.math3.util.FastMath.max(int,int)"
    ],
    "org.apache.commons.math3.linear.RealVectorFormat.getAvailableLocales()": [
        "org.apache.commons.math3.fraction.BigFractionFormat.getAvailableLocales()",
        "org.apache.commons.math3.fraction.FractionFormat.getAvailableLocales()"
    ],
    "org.apache.commons.math3.ode.nonstiff.AdamsMoultonFieldIntegrator#AdamsMoultonFieldIntegrator(Field<T extends RealFieldElement>,int,double,double,double[],double[])": [
        "org.apache.commons.math3.ode.nonstiff.AdamsMoultonFieldIntegrator.<staticinit>()",
        "org.apache.commons.math3.ode.nonstiff.AdamsMoultonFieldIntegrator.<init>()",
        "org.apache.commons.math3.ode.nonstiff.AdamsFieldIntegrator#AdamsFieldIntegrator(Field<T extends RealFieldElement>,String,int,int,double,double,double[],double[])"
    ],
    "org.apache.commons.math3.geometry.partitioning.InsideFinder#InsideFinder(Region<S extends Space>)": ["org.apache.commons.math3.geometry.partitioning.InsideFinder.<init>()"],
    "org.apache.commons.math3.stat.descriptive.AggregateSummaryStatistics#getSecondMoment()": ["org.apache.commons.math3.stat.descriptive.SummaryStatistics#getSecondMoment()"],
    "org.apache.commons.math3.exception.MathIllegalArgumentException#MathIllegalArgumentException(Localizable,Object[]...)": [
        "org.apache.commons.math3.exception.util.ExceptionContext#addMessage(Localizable,Object[]...)",
        "org.apache.commons.math3.exception.MathIllegalArgumentException.<init>()",
        "org.apache.commons.math3.exception.util.ExceptionContext#ExceptionContext(Throwable)"
    ],
    "org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet#getInf()": [
        "org.apache.commons.math3.geometry.partitioning.BSPTree#getPlus()",
        "org.apache.commons.math3.geometry.partitioning.BSPTree#getCut()",
        "org.apache.commons.math3.geometry.euclidean.oned.Vector1D#getX()",
        "org.apache.commons.math3.geometry.partitioning.BSPTree#getMinus()",
        "org.apache.commons.math3.geometry.euclidean.oned.OrientedPoint#getLocation()",
        "org.apache.commons.math3.geometry.partitioning.AbstractRegion#getTree(boolean)",
        "org.apache.commons.math3.geometry.partitioning.BSPTree#getAttribute()",
        "org.apache.commons.math3.geometry.euclidean.oned.OrientedPoint#isDirect()",
        "org.apache.commons.math3.geometry.partitioning.AbstractSubHyperplane#getHyperplane()"
    ],
    "org.apache.commons.math3.ode.nonstiff.DormandPrince54FieldIntegrator#DormandPrince54FieldIntegrator(Field<T extends RealFieldElement>,double,double,double[],double[])": [
        "org.apache.commons.math3.ode.nonstiff.EmbeddedRungeKuttaFieldIntegrator#fraction(int,int)",
        "org.apache.commons.math3.ode.nonstiff.DormandPrince54FieldIntegrator.<init>()",
        "org.apache.commons.math3.ode.nonstiff.DormandPrince54FieldIntegrator.<staticinit>()",
        "org.apache.commons.math3.ode.nonstiff.EmbeddedRungeKuttaFieldIntegrator#EmbeddedRungeKuttaFieldIntegrator(Field<T extends RealFieldElement>,String,int,double,double,double[],double[])"
    ],
    "org.apache.commons.math3.analysis.function.Tan#derivative()": [
        "org.apache.commons.math3.analysis.function.Log10#derivative()",
        "org.apache.commons.math3.analysis.function.Power#derivative()",
        "org.apache.commons.math3.analysis.function.Sin#derivative()",
        "org.apache.commons.math3.analysis.function.Exp#derivative()",
        "org.apache.commons.math3.analysis.function.HarmonicOscillator#derivative()",
        "org.apache.commons.math3.analysis.polynomials.PolynomialFunction#derivative()",
        "org.apache.commons.math3.analysis.function.Logit#derivative()",
        "org.apache.commons.math3.analysis.function.Cbrt#derivative()",
        "org.apache.commons.math3.analysis.FunctionUtils.toDifferentiableUnivariateFunction(UnivariateDifferentiableFunction)",
        "org.apache.commons.math3.analysis.FunctionUtils.toDifferentiableUnivariateFunction(UnivariateDifferentiableFunction)$DifferentiableUnivariateFunction$1#derivative()",
        "org.apache.commons.math3.analysis.polynomials.PolynomialSplineFunction#derivative()",
        "org.apache.commons.math3.analysis.function.Cosh#derivative()",
        "org.apache.commons.math3.analysis.function.Identity#derivative()",
        "org.apache.commons.math3.analysis.function.Inverse#derivative()",
        "org.apache.commons.math3.analysis.function.Acosh#derivative()",
        "org.apache.commons.math3.analysis.function.Acos#derivative()",
        "org.apache.commons.math3.analysis.function.Atan#derivative()",
        "org.apache.commons.math3.analysis.function.Log#derivative()",
        "org.apache.commons.math3.analysis.function.Sqrt#derivative()",
        "org.apache.commons.math3.analysis.function.Logistic#derivative()",
        "org.apache.commons.math3.analysis.function.Expm1#derivative()",
        "org.apache.commons.math3.analysis.function.Asinh#derivative()",
        "org.apache.commons.math3.analysis.function.Gaussian#derivative()",
        "org.apache.commons.math3.analysis.function.Sinc#derivative()",
        "org.apache.commons.math3.analysis.function.Sigmoid#derivative()",
        "org.apache.commons.math3.analysis.function.Constant#derivative()",
        "org.apache.commons.math3.analysis.function.Sinh#derivative()",
        "org.apache.commons.math3.analysis.function.Tanh#derivative()",
        "org.apache.commons.math3.analysis.function.Asin#derivative()",
        "org.apache.commons.math3.analysis.function.Minus#derivative()",
        "org.apache.commons.math3.analysis.FunctionUtils.compose(DifferentiableUnivariateFunction[]...)$DifferentiableUnivariateFunction$1#derivative()",
        "org.apache.commons.math3.analysis.FunctionUtils.add(DifferentiableUnivariateFunction[]...)$DifferentiableUnivariateFunction$1#derivative()",
        "org.apache.commons.math3.analysis.FunctionUtils.multiply(DifferentiableUnivariateFunction[]...)$DifferentiableUnivariateFunction$1#derivative()",
        "org.apache.commons.math3.analysis.function.Log1p#derivative()",
        "org.apache.commons.math3.analysis.function.Tan#derivative()",
        "org.apache.commons.math3.analysis.function.Cos#derivative()",
        "org.apache.commons.math3.analysis.function.Atanh#derivative()"
    ],
    "org.apache.commons.math3.linear.ArrayRealVector#ebeMultiply(RealVector)": [
        "org.apache.commons.math3.linear.ArrayRealVector#checkVectorDimensions(RealVector)",
        "org.apache.commons.math3.linear.ArrayRealVector#ArrayRealVector(int)",
        "org.apache.commons.math3.linear.ArrayRealVector#ArrayRealVector(double[],boolean)",
        "org.apache.commons.math3.linear.ArrayRealVector#checkVectorDimensions(int)",
        "org.apache.commons.math3.linear.ArrayRealVector#getEntry(int)",
        "org.apache.commons.math3.linear.OpenMapRealVector#getEntry(int)",
        "org.apache.commons.math3.linear.RealVector.unmodifiableRealVector(RealVector)$RealVector$1#getEntry(int)"
    ],
    "org.apache.commons.math3.analysis.differentiation.SparseGradient#atan()": [
        "org.apache.commons.math3.util.FastMath.atan(double)",
        "org.apache.commons.math3.analysis.differentiation.SparseGradient#SparseGradient(double,double,Map<Integer, Double>)"
    ],
    "org.apache.commons.math3.fraction.FractionFormat#format(Object,StringBuffer,FieldPosition)": [
        "org.apache.commons.math3.fraction.Fraction#Fraction(double)",
        "org.apache.commons.math3.fraction.ProperFractionFormat#format(Fraction,StringBuffer,FieldPosition)",
        "org.apache.commons.math3.fraction.FractionFormat#format(Fraction,StringBuffer,FieldPosition)",
        "org.apache.commons.math3.exception.util.LocalizedFormats.<staticinit>()"
    ],
    "org.apache.commons.math3.linear.BlockRealMatrix#copy()": ["org.apache.commons.math3.linear.BlockRealMatrix#BlockRealMatrix(int,int)"],
    "org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D#FieldVector3D(T extends RealFieldElement,Vector3D)": [
        "org.apache.commons.math3.geometry.euclidean.threed.Vector3D#getX()",
        "org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D.<init>()",
        "org.apache.commons.math3.geometry.euclidean.threed.Vector3D#getZ()",
        "org.apache.commons.math3.geometry.euclidean.threed.Vector3D#getY()"
    ],
    "org.apache.commons.math3.geometry.euclidean.threed.Plane#Plane(Vector3D,Vector3D)": [
        "org.apache.commons.math3.geometry.euclidean.threed.Plane#Plane(Vector3D,Vector3D,double)",
        "org.apache.commons.math3.geometry.euclidean.threed.Plane.<staticinit>()"
    ],
    "org.apache.commons.math3.analysis.FunctionUtils.collector(BivariateFunction,double)": [
        "org.apache.commons.math3.analysis.FunctionUtils.collector(BivariateFunction,UnivariateFunction,double)",
        "org.apache.commons.math3.analysis.function.Identity.<init>()"
    ],
    "org.apache.commons.math3.distribution.KolmogorovSmirnovDistribution#cdf(double)": ["org.apache.commons.math3.distribution.KolmogorovSmirnovDistribution#cdf(double,boolean)"],
    "org.apache.commons.math3.geometry.spherical.oned.Sphere1D#Sphere1D()": ["org.apache.commons.math3.geometry.spherical.oned.Sphere1D.<init>()"],
    "org.apache.commons.math3.analysis.interpolation.BicubicSplineInterpolatingFunction#partialDerivative(int,double,double)": [
        "org.apache.commons.math3.analysis.interpolation.BicubicFunction#value(double,double)",
        "org.apache.commons.math3.analysis.interpolation.BicubicSplineFunction#BicubicSplineFunction(double[],boolean)$BivariateFunction$3#value(double,double)",
        "org.apache.commons.math3.analysis.interpolation.BicubicInterpolatingFunction#value(double,double)",
        "org.apache.commons.math3.analysis.interpolation.BicubicSplineFunction#BicubicSplineFunction(double[],boolean)$BivariateFunction$4#value(double,double)",
        "org.apache.commons.math3.analysis.interpolation.BicubicSplineInterpolatingFunction#searchIndex(double,double[])",
        "org.apache.commons.math3.analysis.interpolation.PiecewiseBicubicSplineInterpolatingFunction#value(double,double)",
        "org.apache.commons.math3.analysis.function.Multiply#value(double,double)",
        "org.apache.commons.math3.analysis.function.Max#value(double,double)",
        "org.apache.commons.math3.analysis.function.Subtract#value(double,double)",
        "org.apache.commons.math3.analysis.function.Pow#value(double,double)",
        "org.apache.commons.math3.analysis.interpolation.BicubicSplineInterpolatingFunction#value(double,double)",
        "org.apache.commons.math3.analysis.interpolation.BicubicSplineFunction#BicubicSplineFunction(double[],boolean)$BivariateFunction$5#value(double,double)",
        "org.apache.commons.math3.analysis.function.Divide#value(double,double)",
        "org.apache.commons.math3.analysis.interpolation.BicubicSplineFunction#BicubicSplineFunction(double[],boolean)$BivariateFunction$1#value(double,double)",
        "org.apache.commons.math3.analysis.function.Add#value(double,double)",
        "org.apache.commons.math3.analysis.interpolation.BicubicSplineFunction#value(double,double)",
        "org.apache.commons.math3.analysis.function.Min#value(double,double)",
        "org.apache.commons.math3.analysis.interpolation.BicubicSplineFunction#BicubicSplineFunction(double[],boolean)$BivariateFunction$2#value(double,double)",
        "org.apache.commons.math3.analysis.function.Atan2#value(double,double)"
    ],
    "org.apache.commons.math3.dfp.Dfp#asin()": ["org.apache.commons.math3.dfp.DfpMath.asin(Dfp)"],
    "org.apache.commons.math3.ode.nonstiff.GraggBulirschStoerStepInterpolator#writeExternal(ObjectOutput)": ["org.apache.commons.math3.ode.sampling.AbstractStepInterpolator#writeBaseExternal(ObjectOutput)"],
    "org.apache.commons.math3.linear.ArrayFieldVector#checkIndex(int)": [
        "org.apache.commons.math3.exception.util.LocalizedFormats.<staticinit>()",
        "org.apache.commons.math3.linear.ArrayFieldVector#getDimension()"
    ],
    "org.apache.commons.math3.analysis.FunctionUtils.sample(UnivariateFunction,double,double,int)": [
        "org.apache.commons.math3.analysis.FunctionUtils.multiply(DifferentiableUnivariateFunction[]...)$UnivariateFunction$1$UnivariateFunction$1#derivative()$UnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.polynomials.PolynomialSplineFunction#value(double)",
        "org.apache.commons.math3.analysis.function.Gaussian#value(double)",
        "org.apache.commons.math3.analysis.function.Tanh#value(double)",
        "org.apache.commons.math3.exception.util.LocalizedFormats.<staticinit>()",
        "org.apache.commons.math3.analysis.function.Inverse#value(double)",
        "org.apache.commons.math3.exception.NotStrictlyPositiveException#NotStrictlyPositiveException(Localizable,Number)",
        "org.apache.commons.math3.analysis.function.HarmonicOscillator#value(double)",
        "org.apache.commons.math3.analysis.FunctionUtils.fix1stArgument(BivariateFunction,double)$UnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.function.Asin#value(double)",
        "org.apache.commons.math3.analysis.function.Asinh#value(double)",
        "org.apache.commons.math3.analysis.FunctionUtils.multiply(UnivariateFunction[]...)$UnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.function.Atan#value(double)",
        "org.apache.commons.math3.analysis.FunctionUtils.toDifferentiableUnivariateFunction(UnivariateDifferentiableFunction)$DifferentiableUnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.function.Cbrt#value(double)",
        "org.apache.commons.math3.analysis.polynomials.PolynomialFunctionLagrangeForm#value(double)",
        "org.apache.commons.math3.analysis.function.Exp#value(double)",
        "org.apache.commons.math3.special.BesselJ#value(double)",
        "org.apache.commons.math3.analysis.polynomials.PolynomialFunctionNewtonForm#value(double)",
        "org.apache.commons.math3.analysis.FunctionUtils.add(UnivariateFunction[]...)$UnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.function.Sin#value(double)",
        "org.apache.commons.math3.analysis.function.Cos#value(double)",
        "org.apache.commons.math3.analysis.interpolation.UnivariatePeriodicInterpolator#interpolate(double[],double[])$UnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.function.Log10#value(double)",
        "org.apache.commons.math3.analysis.function.Sqrt#value(double)",
        "org.apache.commons.math3.analysis.function.Log#value(double)",
        "org.apache.commons.math3.analysis.function.Sinc#value(double)",
        "org.apache.commons.math3.ode.events.EventState#evaluateStep(StepInterpolator)$UnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.function.Minus#value(double)",
        "org.apache.commons.math3.analysis.integration.IterativeLegendreGaussIntegrator#stage(int)$UnivariateFunction$1#value(double)",
        "org.apache.commons.math3.optimization.general.NonLinearConjugateGradientOptimizer.LineSearchFunction#value(double)",
        "org.apache.commons.math3.analysis.function.Floor#value(double)",
        "org.apache.commons.math3.analysis.FunctionUtils.multiply(DifferentiableUnivariateFunction[]...)$DifferentiableUnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.FunctionUtils.combine(BivariateFunction,UnivariateFunction,UnivariateFunction)$UnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.FunctionUtils.add(DifferentiableUnivariateFunction[]...)$UnivariateFunction$1$UnivariateFunction$1#derivative()$UnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.function.Sinh#value(double)",
        "org.apache.commons.math3.analysis.FunctionUtils.multiply(UnivariateDifferentiableFunction[]...)$UnivariateDifferentiableFunction$1#value(double)",
        "org.apache.commons.math3.analysis.function.Tan#value(double)",
        "org.apache.commons.math3.distribution.AbstractRealDistribution#inverseCumulativeProbability(double)$UnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.FunctionUtils.add(DifferentiableUnivariateFunction[]...)$DifferentiableUnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.function.Ceil#value(double)",
        "org.apache.commons.math3.analysis.function.Logistic#value(double)",
        "org.apache.commons.math3.analysis.function.Signum#value(double)",
        "org.apache.commons.math3.analysis.function.Constant#value(double)",
        "org.apache.commons.math3.analysis.function.Atanh#value(double)",
        "org.apache.commons.math3.analysis.FunctionUtils.compose(DifferentiableUnivariateFunction[]...)$UnivariateFunction$1$UnivariateFunction$1#derivative()$UnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.FunctionUtils.add(UnivariateDifferentiableFunction[]...)$UnivariateDifferentiableFunction$1#value(double)",
        "org.apache.commons.math3.analysis.function.Abs#value(double)",
        "org.apache.commons.math3.analysis.differentiation.FiniteDifferencesDifferentiator#differentiate(UnivariateFunction)$UnivariateDifferentiableFunction$1#value(double)",
        "org.apache.commons.math3.analysis.function.Identity#value(double)",
        "org.apache.commons.math3.analysis.function.Expm1#value(double)",
        "org.apache.commons.math3.analysis.function.Logit#value(double)",
        "org.apache.commons.math3.analysis.function.Log1p#value(double)",
        "org.apache.commons.math3.analysis.FunctionUtils.fix2ndArgument(BivariateFunction,double)$UnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.FunctionUtils.toUnivariateDifferential(DifferentiableUnivariateFunction)$UnivariateDifferentiableFunction$1#value(double)",
        "org.apache.commons.math3.analysis.FunctionUtils.toDifferentiableUnivariateFunction(UnivariateDifferentiableFunction)$UnivariateFunction$1$UnivariateFunction$1#derivative()$UnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.polynomials.PolynomialFunction#value(double)",
        "org.apache.commons.math3.analysis.function.Rint#value(double)",
        "org.apache.commons.math3.analysis.FunctionUtils.compose(UnivariateFunction[]...)$UnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.function.Cosh#value(double)",
        "org.apache.commons.math3.optimization.direct.PowellOptimizer.LineSearch#search(double[],double[])$UnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.FunctionUtils.compose(DifferentiableUnivariateFunction[]...)$DifferentiableUnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.function.Acosh#value(double)",
        "org.apache.commons.math3.analysis.function.StepFunction#value(double)",
        "org.apache.commons.math3.analysis.FunctionUtils.compose(UnivariateDifferentiableFunction[]...)$UnivariateDifferentiableFunction$1#value(double)",
        "org.apache.commons.math3.analysis.function.Acos#value(double)",
        "org.apache.commons.math3.analysis.function.Power#value(double)",
        "org.apache.commons.math3.optim.nonlinear.scalar.LineSearch#search(double[],double[])$UnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.function.Sigmoid#value(double)",
        "org.apache.commons.math3.analysis.function.Ulp#value(double)"
    ],
    "org.apache.commons.math3.analysis.interpolation.BicubicInterpolator#interpolate(double[],double[],double[][])$BicubicInterpolatingFunction$1.<init>()": ["org.apache.commons.math3.analysis.interpolation.BicubicInterpolatingFunction#BicubicInterpolatingFunction(double[],double[],double[][],double[][],double[][],double[][])"],
    "org.apache.commons.math3.analysis.interpolation.BicubicInterpolatingFunction#value(double,double)": [
        "org.apache.commons.math3.analysis.interpolation.BicubicFunction#value(double,double)",
        "org.apache.commons.math3.analysis.interpolation.BicubicInterpolatingFunction#searchIndex(double,double[])"
    ],
    "org.apache.commons.math3.util.BigRealField#readResolve()": ["org.apache.commons.math3.util.BigRealField.LazyHolder.<staticinit>()"],
    "org.apache.commons.math3.geometry.euclidean.threed.Rotation#applyInverseTo(Rotation)": [
        "org.apache.commons.math3.geometry.euclidean.threed.RotationConvention.<staticinit>()",
        "org.apache.commons.math3.geometry.euclidean.threed.Rotation#composeInverse(Rotation,RotationConvention)"
    ],
    "org.apache.commons.math3.userguide.geometry.GeometryExample.createCanvas()$PBasicInputEventHandler$1#mouseMoved(PInputEvent)": ["org.apache.commons.math3.userguide.geometry.GeometryExample.createCanvas()$PBasicInputEventHandler$1#updateToolTip(PInputEvent)"],
    "org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D.distance(FieldVector3D<T extends RealFieldElement>,Vector3D)": ["org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D#distance(Vector3D)"],
    "org.apache.commons.math3.fitting.HarmonicFitter.ParameterGuesser#ParameterGuesser(WeightedObservedPoint[])": [
        "org.apache.commons.math3.fitting.HarmonicFitter.ParameterGuesser#sortObservations(WeightedObservedPoint[])",
        "org.apache.commons.math3.fitting.HarmonicFitter.ParameterGuesser#guessAOmega(WeightedObservedPoint[])",
        "org.apache.commons.math3.fitting.HarmonicFitter.ParameterGuesser#guessPhi(WeightedObservedPoint[])",
        "org.apache.commons.math3.fitting.HarmonicFitter.ParameterGuesser.<init>()",
        "org.apache.commons.math3.exception.util.LocalizedFormats.<staticinit>()"
    ],
    "org.apache.commons.math3.fraction.ProperBigFractionFormat#ProperBigFractionFormat(NumberFormat)": ["org.apache.commons.math3.fraction.ProperBigFractionFormat#ProperBigFractionFormat(NumberFormat,NumberFormat,NumberFormat)"],
    "org.apache.commons.math3.geometry.partitioning.AbstractSubHyperplane#recurseTransform(BSPTree<T extends Space>,Hyperplane<S extends Space>,Transform<S extends Space, T extends Space>,Map<BSPTree<T extends Space>, BSPTree<T extends Space>>)": [
        "org.apache.commons.math3.geometry.partitioning.NodesSet#NodesSet()",
        "org.apache.commons.math3.geometry.partitioning.BoundaryAttribute#getPlusOutside()",
        "org.apache.commons.math3.geometry.partitioning.BSPTree#BSPTree(Object)",
        "org.apache.commons.math3.geometry.partitioning.BSPTree#getPlus()",
        "org.apache.commons.math3.geometry.partitioning.BSPTree#getCut()",
        "org.apache.commons.math3.geometry.partitioning.BoundaryAttribute#getPlusInside()",
        "org.apache.commons.math3.geometry.partitioning.BSPTree#getMinus()",
        "org.apache.commons.math3.geometry.partitioning.BoundaryAttribute#BoundaryAttribute(SubHyperplane<S extends Space>,SubHyperplane<S extends Space>,NodesSet<S extends Space>)",
        "org.apache.commons.math3.geometry.partitioning.BSPTree#getAttribute()",
        "org.apache.commons.math3.geometry.partitioning.BSPTree#BSPTree(SubHyperplane<S extends Space>,BSPTree<S extends Space>,BSPTree<S extends Space>,Object)",
        "org.apache.commons.math3.geometry.partitioning.AbstractSubHyperplane#recurseTransform(BSPTree<T extends Space>,Hyperplane<S extends Space>,Transform<S extends Space, T extends Space>,Map<BSPTree<T extends Space>, BSPTree<T extends Space>>)"
    ],
    "org.apache.commons.math3.optimization.fitting.CurveFitter.OldTheoreticalValuesFunction#value(double[])": [
        "org.apache.commons.math3.fitting.GaussianCurveFitter$Parametric$1#value(double,double[]...)",
        "org.apache.commons.math3.analysis.function.Logit.Parametric#value(double,double[]...)",
        "org.apache.commons.math3.analysis.polynomials.PolynomialFunction.Parametric#value(double,double[]...)",
        "org.apache.commons.math3.analysis.function.Sigmoid.Parametric#value(double,double[]...)",
        "org.apache.commons.math3.analysis.function.Logistic.Parametric#value(double,double[]...)",
        "org.apache.commons.math3.analysis.function.Gaussian.Parametric#value(double,double[]...)",
        "org.apache.commons.math3.optimization.fitting.WeightedObservedPoint#getX()",
        "org.apache.commons.math3.optimization.fitting.GaussianFitter#fit(double[])$Parametric$1#value(double,double[]...)",
        "org.apache.commons.math3.analysis.function.HarmonicOscillator.Parametric#value(double,double[]...)",
        "org.apache.commons.math3.fitting.GaussianFitter#fit(double[])$Parametric$1#value(double,double[]...)"
    ],
    "org.apache.commons.math3.stat.descriptive.moment.StandardDeviation#copy()": [
        "org.apache.commons.math3.stat.descriptive.moment.StandardDeviation.copy(StandardDeviation,StandardDeviation)",
        "org.apache.commons.math3.stat.descriptive.moment.StandardDeviation#StandardDeviation()"
    ],
    "org.apache.commons.math3.linear.ArrayRealVector#setSubVector(int,double[])": ["org.apache.commons.math3.linear.RealVector#checkIndex(int)"],
    "org.apache.commons.math3.util.FastMath.sin(double)": [
        "org.apache.commons.math3.util.FastMath.CodyWaite#getK()",
        "org.apache.commons.math3.util.FastMath.CodyWaite#CodyWaite(double)",
        "org.apache.commons.math3.util.FastMath.cosQ(double,double)",
        "org.apache.commons.math3.util.FastMath.sinQ(double,double)",
        "org.apache.commons.math3.util.FastMath.CodyWaite#getRemB()",
        "org.apache.commons.math3.util.FastMath.CodyWaite#getRemA()",
        "org.apache.commons.math3.util.FastMath.reducePayneHanek(double,double[])"
    ],
    "org.apache.commons.math3.linear.AbstractFieldMatrix#getSubMatrix(int[],int[])": [
        "org.apache.commons.math3.util.BigRealField#getZero()",
        "org.apache.commons.math3.analysis.differentiation.SparseGradient#getField()$Field$1#getZero()",
        "org.apache.commons.math3.util.Decimal64Field#getZero()",
        "org.apache.commons.math3.linear.BlockFieldMatrix#createMatrix(int,int)",
        "org.apache.commons.math3.dfp.DfpField#getZero()",
        "org.apache.commons.math3.linear.AbstractFieldMatrix#getSubMatrix(int[],int[])$DefaultFieldMatrixChangingVisitor$1.<init>()",
        "org.apache.commons.math3.analysis.differentiation.DerivativeStructure#getField()$Field$1#getZero()",
        "org.apache.commons.math3.fraction.FractionField#getZero()",
        "org.apache.commons.math3.linear.BlockFieldMatrix#walkInOptimizedOrder(FieldMatrixChangingVisitor<T extends FieldElement>)",
        "org.apache.commons.math3.linear.SparseFieldMatrix#createMatrix(int,int)",
        "org.apache.commons.math3.complex.ComplexField#getZero()",
        "org.apache.commons.math3.fraction.BigFractionField#getZero()",
        "org.apache.commons.math3.linear.Array2DRowFieldMatrix#createMatrix(int,int)",
        "org.apache.commons.math3.linear.AbstractFieldMatrix#walkInOptimizedOrder(FieldMatrixChangingVisitor<T extends FieldElement>)",
        "org.apache.commons.math3.linear.AbstractFieldMatrix#checkSubMatrixIndex(int[],int[])"
    ],
    "org.apache.commons.math3.optim.nonlinear.scalar.gradient.NonLinearConjugateGradientOptimizer#parseOptimizationData(OptimizationData[]...)": [
        "org.apache.commons.math3.optim.nonlinear.scalar.GradientMultivariateOptimizer#parseOptimizationData(OptimizationData[]...)",
        "org.apache.commons.math3.optim.nonlinear.scalar.gradient.NonLinearConjugateGradientOptimizer#checkParameters()"
    ],
    "org.apache.commons.math3.ode.AbstractIntegrator#getEventHandlers()": ["org.apache.commons.math3.ode.events.EventState#getEventHandler()"],
    "org.apache.commons.math3.fitting.leastsquares.LeastSquaresFactory.LocalLeastSquaresProblem.UnweightedEvaluation#UnweightedEvaluation(RealVector,RealMatrix,RealVector,RealVector)": [
        "org.apache.commons.math3.linear.OpenMapRealVector#getDimension()",
        "org.apache.commons.math3.linear.ArrayRealVector#subtract(RealVector)",
        "org.apache.commons.math3.linear.ArrayRealVector#getDimension()",
        "org.apache.commons.math3.linear.OpenMapRealVector#subtract(RealVector)",
        "org.apache.commons.math3.linear.RealVector#subtract(RealVector)",
        "org.apache.commons.math3.linear.RealVector.unmodifiableRealVector(RealVector)$RealVector$1#getDimension()",
        "org.apache.commons.math3.fitting.leastsquares.AbstractEvaluation#AbstractEvaluation(int)",
        "org.apache.commons.math3.fitting.leastsquares.LeastSquaresFactory.LocalLeastSquaresProblem.UnweightedEvaluation.<init>()",
        "org.apache.commons.math3.linear.RealVector.unmodifiableRealVector(RealVector)$RealVector$1#subtract(RealVector)"
    ],
    "org.apache.commons.math3.linear.HessenbergTransformer#getH()": ["org.apache.commons.math3.linear.MatrixUtils.createRealMatrix(double[][])"],
    "org.apache.commons.math3.ode.ContinuousOutputFieldModel#getInterpolatedState(T extends RealFieldElement)": [
        "org.apache.commons.math3.ode.sampling.AbstractFieldStepInterpolator#getPreviousState()",
        "org.apache.commons.math3.ode.sampling.AbstractFieldStepInterpolator#getInterpolatedState(T extends RealFieldElement)",
        "org.apache.commons.math3.util.FastMath.rint(double)",
        "org.apache.commons.math3.util.FastMath.max(int,int)",
        "org.apache.commons.math3.ode.ContinuousOutputFieldModel#locatePoint(T extends RealFieldElement,FieldStepInterpolator<T extends RealFieldElement>)",
        "org.apache.commons.math3.ode.sampling.AbstractFieldStepInterpolator#getCurrentState()",
        "org.apache.commons.math3.ode.FieldODEState#getTime()",
        "org.apache.commons.math3.util.FastMath.min(int,int)"
    ],
    "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer.FitnessFunction#value(double[])": [
        "org.apache.commons.math3.optim.nonlinear.scalar.MultivariateOptimizer#computeObjectiveValue(double[])",
        "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer.ValuePenaltyPair#ValuePenaltyPair(double,double)",
        "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer.FitnessFunction#repair(double[])",
        "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer.FitnessFunction#penalty(double[],double[])"
    ],
    "org.apache.commons.math3.linear.SparseFieldVector#walkInDefaultOrder(FieldVectorPreservingVisitor<T extends FieldElement>,int,int)": [
        "org.apache.commons.math3.linear.SparseFieldVector#getDimension()",
        "org.apache.commons.math3.linear.SparseFieldVector#checkIndices(int,int)",
        "org.apache.commons.math3.linear.SparseFieldVector#getEntry(int)"
    ],
    "org.apache.commons.math3.ode.nonstiff.DormandPrince853FieldIntegrator#getB()": [
        "org.apache.commons.math3.ode.AbstractFieldIntegrator#getField()",
        "org.apache.commons.math3.util.BigRealField#getZero()",
        "org.apache.commons.math3.analysis.differentiation.SparseGradient#getField()$Field$1#getZero()",
        "org.apache.commons.math3.analysis.differentiation.DerivativeStructure#getField()$Field$1#getZero()",
        "org.apache.commons.math3.fraction.FractionField#getZero()",
        "org.apache.commons.math3.util.Decimal64Field#getZero()",
        "org.apache.commons.math3.ode.nonstiff.EmbeddedRungeKuttaFieldIntegrator#fraction(double,double)",
        "org.apache.commons.math3.ode.nonstiff.EmbeddedRungeKuttaFieldIntegrator#fraction(int,int)",
        "org.apache.commons.math3.dfp.DfpField#getZero()",
        "org.apache.commons.math3.complex.ComplexField#getZero()",
        "org.apache.commons.math3.fraction.BigFractionField#getZero()",
        "org.apache.commons.math3.util.MathArrays.buildArray(Field<T>,int)"
    ],
    "org.apache.commons.math3.optim.nonlinear.scalar.LineSearch.<init>()": ["org.apache.commons.math3.optim.univariate.BracketFinder#BracketFinder()"],
    "org.apache.commons.math3.ode.events.FieldEventState#evaluateStep(FieldStepInterpolator<T extends RealFieldElement>)": [
        "org.apache.commons.math3.analysis.solvers.FieldBracketingNthOrderBrentSolver#solve(int,RealFieldUnivariateFunction<T extends RealFieldElement>,T extends RealFieldElement,T extends RealFieldElement,AllowedSolution)",
        "org.apache.commons.math3.util.FastMath.ceil(double)",
        "org.apache.commons.math3.ode.sampling.AbstractFieldStepInterpolator#getInterpolatedState(T extends RealFieldElement)",
        "org.apache.commons.math3.util.FastMath.abs(double)",
        "org.apache.commons.math3.ode.events.FieldEventState#evaluateStep(FieldStepInterpolator<T extends RealFieldElement>)$RealFieldUnivariateFunction$1.<init>()",
        "org.apache.commons.math3.ode.sampling.AbstractFieldStepInterpolator#isForward()",
        "org.apache.commons.math3.analysis.solvers.AllowedSolution.<staticinit>()",
        "org.apache.commons.math3.util.FastMath.max(int,int)",
        "org.apache.commons.math3.ode.sampling.AbstractFieldStepInterpolator#getCurrentState()",
        "org.apache.commons.math3.ode.FieldODEState#getTime()",
        "org.apache.commons.math3.ode.events.FieldEventState#evaluateStep(FieldStepInterpolator<T extends RealFieldElement>)$RealFieldUnivariateFunction$1#value(T extends RealFieldElement)"
    ],
    "org.apache.commons.math3.stat.descriptive.moment.StandardDeviation#increment(double)": ["org.apache.commons.math3.stat.descriptive.moment.Variance#increment(double)"],
    "org.apache.commons.math3.ode.nonstiff.LutherFieldIntegrator#getA()": [
        "org.apache.commons.math3.ode.AbstractFieldIntegrator#getField()",
        "org.apache.commons.math3.ode.nonstiff.RungeKuttaFieldIntegrator#fraction(int,int)",
        "org.apache.commons.math3.fraction.BigFractionField#getOne()",
        "org.apache.commons.math3.fraction.FractionField#getOne()",
        "org.apache.commons.math3.analysis.differentiation.SparseGradient#getField()$Field$1#getOne()",
        "org.apache.commons.math3.util.BigRealField#getZero()",
        "org.apache.commons.math3.analysis.differentiation.SparseGradient#getField()$Field$1#getZero()",
        "org.apache.commons.math3.util.Decimal64Field#getZero()",
        "org.apache.commons.math3.dfp.DfpField#getZero()",
        "org.apache.commons.math3.analysis.differentiation.SparseGradient#add(double)",
        "org.apache.commons.math3.complex.ComplexField#getOne()",
        "org.apache.commons.math3.util.BigRealField#getOne()",
        "org.apache.commons.math3.util.MathArrays.buildArray(Field<T>,int,int)",
        "org.apache.commons.math3.analysis.differentiation.DerivativeStructure#add(double)",
        "org.apache.commons.math3.analysis.differentiation.DerivativeStructure#getField()$Field$1#getZero()",
        "org.apache.commons.math3.fraction.FractionField#getZero()",
        "org.apache.commons.math3.complex.ComplexField#getZero()",
        "org.apache.commons.math3.dfp.DfpField#getOne()",
        "org.apache.commons.math3.fraction.BigFractionField#getZero()",
        "org.apache.commons.math3.analysis.differentiation.DerivativeStructure#getField()$Field$1#getOne()",
        "org.apache.commons.math3.util.Decimal64#add(double)",
        "org.apache.commons.math3.util.MathArrays.buildArray(Field<T>,int)",
        "org.apache.commons.math3.util.Decimal64Field#getOne()",
        "org.apache.commons.math3.dfp.Dfp#add(double)"
    ],
    "org.apache.commons.math3.linear.RealVector.Entry#Entry()": [
        "org.apache.commons.math3.linear.RealVector.Entry.<init>()",
        "org.apache.commons.math3.linear.RealVector.Entry#setIndex(int)"
    ],
    "org.apache.commons.math3.fraction.BigFraction#BigFraction(int)": ["org.apache.commons.math3.fraction.BigFraction#BigFraction(BigInteger,BigInteger)"],
    "org.apache.commons.math3.util.FastMath.floor(double)": ["org.apache.commons.math3.util.FastMath.<staticinit>()"],
    "org.apache.commons.math3.random.BitsStreamGenerator#nextLong(long)": [
        "org.apache.commons.math3.random.ISAACRandom#next(int)",
        "org.apache.commons.math3.random.MersenneTwister#next(int)",
        "org.apache.commons.math3.random.Well19937a#next(int)",
        "org.apache.commons.math3.random.Well1024a#next(int)",
        "org.apache.commons.math3.random.Well44497b#next(int)",
        "org.apache.commons.math3.random.Well512a#next(int)",
        "org.apache.commons.math3.random.Well44497a#next(int)",
        "org.apache.commons.math3.random.Well19937c#next(int)"
    ],
    "org.apache.commons.math3.optim.univariate.BracketFinder#BracketFinder(double,int)": [
        "org.apache.commons.math3.optim.univariate.BracketFinder.<init>()",
        "org.apache.commons.math3.util.IntegerSequence.Incrementor.create()",
        "org.apache.commons.math3.util.IntegerSequence.Incrementor#withMaximalCount(int)"
    ],
    "org.apache.commons.math3.linear.ArrayRealVector#add(RealVector)": [
        "org.apache.commons.math3.linear.RealVector.Entry#getValue()",
        "org.apache.commons.math3.linear.RealVector#iterator()",
        "org.apache.commons.math3.linear.RealVector#iterator()$Iterator$1#hasNext()",
        "org.apache.commons.math3.linear.RealVector.unmodifiableRealVector(RealVector)$Iterator$1$Iterator$1#sparseIterator()$Iterator$1#hasNext()",
        "org.apache.commons.math3.linear.RealVector.unmodifiableRealVector(RealVector)$RealVector$1#iterator()",
        "org.apache.commons.math3.geometry.spherical.oned.ArcsSet.SubArcsIterator#hasNext()",
        "org.apache.commons.math3.linear.ArrayRealVector#checkVectorDimensions(int)",
        "org.apache.commons.math3.util.Combinations.LexicographicIterator#hasNext()",
        "org.apache.commons.math3.linear.OpenMapRealVector.OpenMapEntry#getValue()",
        "org.apache.commons.math3.linear.RealVector.unmodifiableRealVector(RealVector).UnmodifiableEntry.UnmodifiableEntry#getValue()",
        "org.apache.commons.math3.linear.RealVector.SparseEntryIterator#hasNext()",
        "org.apache.commons.math3.userguide.sofm.ChineseRingsClassifier#createIterable()$Iterator$1$Iterator$1#iterator()$Iterator$1#hasNext()",
        "org.apache.commons.math3.linear.ArrayRealVector#ArrayRealVector(double[],boolean)",
        "org.apache.commons.math3.linear.RealVector.unmodifiableRealVector(RealVector)$Iterator$1$Iterator$1#sparseIterator()$Iterator$1#next()",
        "org.apache.commons.math3.util.MultidimensionalCounter.Iterator#hasNext()",
        "org.apache.commons.math3.linear.RealVector.unmodifiableRealVector(RealVector)$Iterator$1$Iterator$1#iterator()$Iterator$1#next()",
        "org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet.SubIntervalsIterator#hasNext()",
        "org.apache.commons.math3.linear.OpenMapRealVector.OpenMapEntry#getIndex()",
        "org.apache.commons.math3.linear.ArrayRealVector#checkVectorDimensions(RealVector)",
        "org.apache.commons.math3.userguide.sofm.ChineseRingsClassifier#createRandomIterator(long)$Iterator$1#hasNext()",
        "org.apache.commons.math3.util.IntegerSequence.Incrementor#hasNext()",
        "org.apache.commons.math3.linear.ArrayRealVector#ArrayRealVector(int)",
        "org.apache.commons.math3.linear.RealVector.Entry#getIndex()",
        "org.apache.commons.math3.linear.RealVector#iterator()$Iterator$1#next()",
        "org.apache.commons.math3.linear.RealVector.unmodifiableRealVector(RealVector)$Iterator$1$Iterator$1#iterator()$Iterator$1#hasNext()",
        "org.apache.commons.math3.util.Combinations.SingletonIterator#hasNext()",
        "org.apache.commons.math3.linear.RealVector.SparseEntryIterator#next()"
    ],
    "org.apache.commons.math3.random.BitsStreamGenerator#nextBytesFill(byte[],int,int)": [
        "org.apache.commons.math3.random.ISAACRandom#next(int)",
        "org.apache.commons.math3.random.MersenneTwister#next(int)",
        "org.apache.commons.math3.random.Well19937a#next(int)",
        "org.apache.commons.math3.random.Well1024a#next(int)",
        "org.apache.commons.math3.random.Well44497b#next(int)",
        "org.apache.commons.math3.random.Well512a#next(int)",
        "org.apache.commons.math3.random.Well44497a#next(int)",
        "org.apache.commons.math3.random.Well19937c#next(int)"
    ],
    "org.apache.commons.math3.stat.Frequency#merge(Frequency)": [
        "org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet.SubIntervalsIterator#hasNext()",
        "org.apache.commons.math3.linear.RealVector#iterator()$Iterator$1#hasNext()",
        "org.apache.commons.math3.userguide.sofm.ChineseRingsClassifier#createRandomIterator(long)$Iterator$1#hasNext()",
        "org.apache.commons.math3.util.IntegerSequence.Incrementor#hasNext()",
        "org.apache.commons.math3.linear.RealVector.unmodifiableRealVector(RealVector)$Iterator$1$Iterator$1#sparseIterator()$Iterator$1#hasNext()",
        "org.apache.commons.math3.stat.Frequency#entrySetIterator()",
        "org.apache.commons.math3.exception.util.LocalizedFormats.<staticinit>()",
        "org.apache.commons.math3.geometry.spherical.oned.ArcsSet.SubArcsIterator#hasNext()",
        "org.apache.commons.math3.util.Combinations.LexicographicIterator#hasNext()",
        "org.apache.commons.math3.linear.RealVector.SparseEntryIterator#hasNext()",
        "org.apache.commons.math3.userguide.sofm.ChineseRingsClassifier#createIterable()$Iterator$1$Iterator$1#iterator()$Iterator$1#hasNext()",
        "org.apache.commons.math3.linear.RealVector.unmodifiableRealVector(RealVector)$Iterator$1$Iterator$1#iterator()$Iterator$1#hasNext()",
        "org.apache.commons.math3.util.Combinations.SingletonIterator#hasNext()",
        "org.apache.commons.math3.util.MultidimensionalCounter.Iterator#hasNext()",
        "org.apache.commons.math3.stat.Frequency#incrementValue(int,long)"
    ],
    "org.apache.commons.math3.util.FastMath.addExact(long,long)": ["org.apache.commons.math3.exception.util.LocalizedFormats.<staticinit>()"],
    "org.apache.commons.math3.optimization.general.GaussNewtonOptimizer#GaussNewtonOptimizer(boolean,ConvergenceChecker<PointVectorValuePair>)": [
        "org.apache.commons.math3.optimization.general.AbstractLeastSquaresOptimizer#AbstractLeastSquaresOptimizer(ConvergenceChecker<PointVectorValuePair>)",
        "org.apache.commons.math3.optimization.general.GaussNewtonOptimizer.<init>()"
    ],
    "org.apache.commons.math3.geometry.euclidean.threed.Plane#isSimilarTo(Plane)": [
        "org.apache.commons.math3.util.FastMath.abs(double)",
        "org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(Vector3D,Vector3D)",
        "org.apache.commons.math3.util.FastMath.<staticinit>()"
    ],
    "org.apache.commons.math3.stat.descriptive.rank.Percentile.EstimationType#EstimationType(String)": ["org.apache.commons.math3.stat.descriptive.rank.Percentile.EstimationType.<init>()"],
    "org.apache.commons.math3.analysis.differentiation.SparseGradient#cosh()": [
        "org.apache.commons.math3.analysis.differentiation.SparseGradient#SparseGradient(double,double,Map<Integer, Double>)",
        "org.apache.commons.math3.util.FastMath.sinh(double)",
        "org.apache.commons.math3.util.FastMath.cosh(double)"
    ],
    "org.apache.commons.math3.geometry.euclidean.oned.Vector1D#Vector1D(double,Vector1D,double,Vector1D,double,Vector1D,double,Vector1D)": ["org.apache.commons.math3.geometry.euclidean.oned.Vector1D.<init>()"],
    "org.apache.commons.math3.ml.clustering.FuzzyKMeansClusterer#initializeMembershipMatrix()": [
        "org.apache.commons.math3.random.SynchronizedRandomGenerator#nextDouble()",
        "org.apache.commons.math3.util.MathArrays.normalizeArray(double[],double)",
        "org.apache.commons.math3.random.RandomGeneratorFactory.createRandomGenerator(Random)$RandomGenerator$1#nextDouble()",
        "org.apache.commons.math3.random.RandomAdaptor#nextDouble()",
        "org.apache.commons.math3.random.BitsStreamGenerator#nextDouble()"
    ],
    "org.apache.commons.math3.optim.nonlinear.scalar.gradient.NonLinearConjugateGradientOptimizer#NonLinearConjugateGradientOptimizer(Formula,ConvergenceChecker<PointValuePair>,double,double,double)": [
        "org.apache.commons.math3.optim.nonlinear.scalar.gradient.NonLinearConjugateGradientOptimizer.IdentityPreconditioner.<init>()",
        "org.apache.commons.math3.optim.nonlinear.scalar.gradient.NonLinearConjugateGradientOptimizer#NonLinearConjugateGradientOptimizer(Formula,ConvergenceChecker<PointValuePair>,double,double,double,Preconditioner)",
        "org.apache.commons.math3.optim.nonlinear.scalar.gradient.NonLinearConjugateGradientOptimizer.Formula.<staticinit>()"
    ],
    "org.apache.commons.math3.userguide.genetics.ImageEvolutionExample.Display.ImagePainter#getMaximumSize()": ["org.apache.commons.math3.userguide.genetics.ImageEvolutionExample.Display.ImagePainter#getPreferredSize()"],
    "org.apache.commons.math3.analysis.function.Logistic#value(double)": ["org.apache.commons.math3.analysis.function.Logistic.value(double,double,double,double,double,double)"],
    "org.apache.commons.math3.random.AbstractWell#setSeed(int)": ["org.apache.commons.math3.random.AbstractWell#setSeed(int[])"],
    "org.apache.commons.math3.distribution.ExponentialDistribution#inverseCumulativeProbability(double)": ["org.apache.commons.math3.util.FastMath.log(double)"],
    "org.apache.commons.math3.geometry.euclidean.threed.Plane#toSpace(Vector<Euclidean2D>)": ["org.apache.commons.math3.geometry.euclidean.threed.Plane#toSpace(Point<Euclidean2D>)"],
    "org.apache.commons.math3.stat.descriptive.moment.Kurtosis#increment(double)": ["org.apache.commons.math3.stat.descriptive.moment.FourthMoment#increment(double)"],
    "org.apache.commons.math3.linear.BlockFieldMatrix#walkInRowOrder(FieldMatrixPreservingVisitor<T extends FieldElement>)": [
        "org.apache.commons.math3.linear.BlockFieldMatrix#blockWidth(int)",
        "org.apache.commons.math3.linear.AbstractFieldMatrix#transpose()$DefaultFieldMatrixPreservingVisitor$1#visit(int,int,T extends FieldElement)",
        "org.apache.commons.math3.util.FastMath.min(int,int)",
        "org.apache.commons.math3.linear.DefaultFieldMatrixPreservingVisitor#start(int,int,int,int,int,int)",
        "org.apache.commons.math3.linear.DefaultFieldMatrixPreservingVisitor#end()",
        "org.apache.commons.math3.linear.MatrixUtils.FractionMatrixConverter#start(int,int,int,int,int,int)",
        "org.apache.commons.math3.linear.DefaultFieldMatrixPreservingVisitor#visit(int,int,T extends FieldElement)",
        "org.apache.commons.math3.linear.MatrixUtils.BigFractionMatrixConverter#start(int,int,int,int,int,int)",
        "org.apache.commons.math3.linear.AbstractFieldMatrix#copySubMatrix(int,int,int,int,T extends FieldElement[][])$DefaultFieldMatrixPreservingVisitor$1#start(int,int,int,int,int,int)",
        "org.apache.commons.math3.ode.nonstiff.AdamsMoultonFieldIntegrator.Corrector#start(int,int,int,int,int,int)",
        "org.apache.commons.math3.linear.BlockFieldMatrix.<staticinit>()",
        "org.apache.commons.math3.ode.nonstiff.AdamsMoultonFieldIntegrator.Corrector#end()",
        "org.apache.commons.math3.linear.AbstractFieldMatrix#copySubMatrix(int,int,int,int,T extends FieldElement[][])$DefaultFieldMatrixPreservingVisitor$1#visit(int,int,T extends FieldElement)"
    ],
    "org.apache.commons.math3.stat.descriptive.moment.GeometricMean.copy(GeometricMean,GeometricMean)": [
        "org.apache.commons.math3.stat.descriptive.moment.ThirdMoment#copy()",
        "org.apache.commons.math3.util.MathUtils.checkNotNull(Object)",
        "org.apache.commons.math3.stat.descriptive.AbstractUnivariateStatistic#setData(double[])",
        "org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile#copy()",
        "org.apache.commons.math3.stat.descriptive.rank.Percentile#setData(double[])",
        "org.apache.commons.math3.stat.descriptive.rank.Max#copy()",
        "org.apache.commons.math3.stat.descriptive.summary.SumOfSquares#copy()",
        "org.apache.commons.math3.stat.descriptive.AbstractUnivariateStatistic#getDataRef()",
        "org.apache.commons.math3.stat.descriptive.moment.Variance#copy()",
        "org.apache.commons.math3.stat.descriptive.moment.FourthMoment#copy()",
        "org.apache.commons.math3.stat.descriptive.summary.Product#copy()",
        "org.apache.commons.math3.stat.descriptive.moment.SecondMoment#copy()",
        "org.apache.commons.math3.stat.descriptive.moment.Mean#copy()",
        "org.apache.commons.math3.stat.descriptive.moment.FirstMoment#copy()",
        "org.apache.commons.math3.stat.descriptive.moment.Skewness#copy()",
        "org.apache.commons.math3.stat.descriptive.summary.SumOfLogs#copy()",
        "org.apache.commons.math3.stat.descriptive.moment.GeometricMean#copy()",
        "org.apache.commons.math3.stat.descriptive.moment.StandardDeviation#copy()",
        "org.apache.commons.math3.stat.descriptive.rank.Min#copy()",
        "org.apache.commons.math3.stat.descriptive.moment.Kurtosis#copy()",
        "org.apache.commons.math3.stat.descriptive.summary.Sum#copy()"
    ],
    "org.apache.commons.math3.distribution.PoissonDistribution#PoissonDistribution(double,int)": [
        "org.apache.commons.math3.distribution.PoissonDistribution.<staticinit>()",
        "org.apache.commons.math3.distribution.PoissonDistribution#PoissonDistribution(double,double,int)"
    ],
    "org.apache.commons.math3.optimization.direct.PowellOptimizer#PowellOptimizer(double,double)": ["org.apache.commons.math3.optimization.direct.PowellOptimizer#PowellOptimizer(double,double,ConvergenceChecker<PointValuePair>)"],
    "org.apache.commons.math3.optimization.general.LevenbergMarquardtOptimizer#LevenbergMarquardtOptimizer()": [
        "org.apache.commons.math3.optimization.general.LevenbergMarquardtOptimizer#LevenbergMarquardtOptimizer(double,double,double,double,double)",
        "org.apache.commons.math3.util.Precision.<staticinit>()"
    ],
    "org.apache.commons.math3.ode.events.FieldEventState#FieldEventState(FieldEventHandler<T extends RealFieldElement>,double,T extends RealFieldElement,int,BracketedRealFieldUnivariateSolver<T extends RealFieldElement>)": [
        "org.apache.commons.math3.ode.events.FieldEventState.<init>()",
        "org.apache.commons.math3.ode.events.Action.<staticinit>()"
    ],
    "org.apache.commons.math3.ode.sampling.FieldStepNormalizer#FieldStepNormalizer(double,FieldFixedStepHandler<T extends RealFieldElement>,StepNormalizerBounds)": [
        "org.apache.commons.math3.ode.sampling.StepNormalizerMode.<staticinit>()",
        "org.apache.commons.math3.ode.sampling.FieldStepNormalizer#FieldStepNormalizer(double,FieldFixedStepHandler<T extends RealFieldElement>,StepNormalizerMode,StepNormalizerBounds)"
    ],
    "org.apache.commons.math3.util.FastMath.subtractExact(int,int)": ["org.apache.commons.math3.exception.util.LocalizedFormats.<staticinit>()"],
    "org.apache.commons.math3.stat.Frequency#merge(Collection<Frequency>)": [
        "org.apache.commons.math3.stat.Frequency#merge(Frequency)",
        "org.apache.commons.math3.exception.util.LocalizedFormats.<staticinit>()"
    ],
    "org.apache.commons.math3.stat.descriptive.AbstractStorelessUnivariateStatistic#hashCode()": [
        "org.apache.commons.math3.stat.descriptive.moment.FirstMoment#getResult()",
        "org.apache.commons.math3.stat.descriptive.moment.Variance#getN()",
        "org.apache.commons.math3.stat.descriptive.rank.Min#getResult()",
        "org.apache.commons.math3.stat.descriptive.moment.Kurtosis#getN()",
        "org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile#getResult()",
        "org.apache.commons.math3.stat.descriptive.moment.FirstMoment#getN()",
        "org.apache.commons.math3.stat.descriptive.moment.FourthMoment#getResult()",
        "org.apache.commons.math3.stat.descriptive.summary.Product#getResult()",
        "org.apache.commons.math3.stat.descriptive.rank.Max#getN()",
        "org.apache.commons.math3.stat.descriptive.summary.SumOfSquares#getResult()",
        "org.apache.commons.math3.stat.descriptive.moment.Skewness#getResult()",
        "org.apache.commons.math3.stat.descriptive.moment.GeometricMean#getN()",
        "org.apache.commons.math3.stat.descriptive.moment.Kurtosis#getResult()",
        "org.apache.commons.math3.stat.descriptive.moment.ThirdMoment#getResult()",
        "org.apache.commons.math3.stat.descriptive.moment.Mean#getResult()",
        "org.apache.commons.math3.stat.descriptive.summary.Sum#getN()",
        "org.apache.commons.math3.util.MathUtils.hash(double)",
        "org.apache.commons.math3.stat.descriptive.summary.SumOfSquares#getN()",
        "org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile#getN()",
        "org.apache.commons.math3.stat.descriptive.moment.GeometricMean#getResult()",
        "org.apache.commons.math3.stat.descriptive.moment.Variance#getResult()",
        "org.apache.commons.math3.stat.descriptive.moment.StandardDeviation#getN()",
        "org.apache.commons.math3.stat.descriptive.summary.Sum#getResult()",
        "org.apache.commons.math3.stat.descriptive.rank.Min#getN()",
        "org.apache.commons.math3.stat.descriptive.moment.Mean#getN()",
        "org.apache.commons.math3.stat.descriptive.moment.StandardDeviation#getResult()",
        "org.apache.commons.math3.stat.descriptive.summary.SumOfLogs#getN()",
        "org.apache.commons.math3.stat.descriptive.moment.Skewness#getN()",
        "org.apache.commons.math3.stat.descriptive.summary.SumOfLogs#getResult()",
        "org.apache.commons.math3.stat.descriptive.rank.Max#getResult()",
        "org.apache.commons.math3.stat.descriptive.moment.SecondMoment#getResult()",
        "org.apache.commons.math3.stat.descriptive.summary.Product#getN()"
    ],
    "org.apache.commons.math3.dfp.Dfp#divide(int)": [
        "org.apache.commons.math3.dfp.Dfp#shiftLeft()",
        "org.apache.commons.math3.dfp.DfpDec#newInstance(Dfp)",
        "org.apache.commons.math3.dfp.Dfp.<staticinit>()",
        "org.apache.commons.math3.dfp.Dfp#dotrap(int,String,Dfp,Dfp)",
        "org.apache.commons.math3.dfp.Dfp#newInstance(Dfp)",
        "org.apache.commons.math3.dfp.DfpField.<staticinit>()",
        "org.apache.commons.math3.dfp.DfpDec#round(int)",
        "org.apache.commons.math3.dfp.Dfp#round(int)",
        "org.apache.commons.math3.dfp.DfpField#setIEEEFlagsBits(int)",
        "org.apache.commons.math3.dfp.Dfp#isNaN()",
        "org.apache.commons.math3.dfp.Dfp#getZero()"
    ],
    "org.apache.commons.math3.optimization.direct.CMAESOptimizer.copyColumn(RealMatrix,int,RealMatrix,int)": [
        "org.apache.commons.math3.linear.Array2DRowRealMatrix#setEntry(int,int,double)",
        "org.apache.commons.math3.linear.SparseFieldMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.DiagonalMatrix#getEntry(int,int)",
        "org.apache.commons.math3.linear.OpenMapRealMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.DiagonalMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.BlockRealMatrix#setEntry(int,int,double)",
        "org.apache.commons.math3.linear.OpenMapRealMatrix#setEntry(int,int,double)",
        "org.apache.commons.math3.linear.OpenMapRealMatrix#getEntry(int,int)",
        "org.apache.commons.math3.linear.BlockRealMatrix#getEntry(int,int)",
        "org.apache.commons.math3.linear.BlockFieldMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.BlockRealMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.Array2DRowRealMatrix#getEntry(int,int)",
        "org.apache.commons.math3.linear.Array2DRowRealMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.Array2DRowFieldMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.DiagonalMatrix#setEntry(int,int,double)"
    ],
    "org.apache.commons.math3.distribution.WeibullDistribution#density(double)": [
        "org.apache.commons.math3.util.FastMath.pow(double,int)",
        "org.apache.commons.math3.util.FastMath.exp(double)"
    ],
    "org.apache.commons.math3.ml.clustering.KMeansPlusPlusClusterer#getNearestCluster(Collection<CentroidCluster<T extends Clusterable>>,T extends Clusterable)": [
        "org.apache.commons.math3.ml.clustering.CentroidCluster#getCenter()",
        "org.apache.commons.math3.ml.clustering.Clusterer#distance(Clusterable,Clusterable)"
    ],
    "org.apache.commons.math3.linear.AbstractFieldMatrix#getRowMatrix(int)": [
        "org.apache.commons.math3.linear.SparseFieldMatrix#getEntry(int,int)",
        "org.apache.commons.math3.linear.BlockFieldMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.SparseFieldMatrix#setEntry(int,int,T extends FieldElement)",
        "org.apache.commons.math3.linear.Array2DRowFieldMatrix#setEntry(int,int,T extends FieldElement)",
        "org.apache.commons.math3.linear.BlockFieldMatrix#setEntry(int,int,T extends FieldElement)",
        "org.apache.commons.math3.linear.BlockFieldMatrix#createMatrix(int,int)",
        "org.apache.commons.math3.linear.Array2DRowFieldMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.SparseFieldMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.SparseFieldMatrix#createMatrix(int,int)",
        "org.apache.commons.math3.linear.Array2DRowFieldMatrix#getEntry(int,int)",
        "org.apache.commons.math3.linear.Array2DRowFieldMatrix#createMatrix(int,int)",
        "org.apache.commons.math3.linear.BlockFieldMatrix#getEntry(int,int)",
        "org.apache.commons.math3.linear.AbstractFieldMatrix#checkRowIndex(int)"
    ],
    "org.apache.commons.math3.ode.sampling.AbstractStepInterpolator#writeBaseExternal(ObjectOutput)": [
        "org.apache.commons.math3.exception.MathIllegalStateException#getLocalizedMessage()",
        "org.apache.commons.math3.ode.sampling.AbstractStepInterpolator#finalizeStep()"
    ],
    "org.apache.commons.math3.geometry.euclidean.threed.Vector3D#getDelta()": [
        "org.apache.commons.math3.geometry.euclidean.threed.Vector3D#getNorm()",
        "org.apache.commons.math3.util.FastMath.asin(double)"
    ],
    "org.apache.commons.math3.genetics.AbstractListChromosome#AbstractListChromosome(List<T>,boolean)": [
        "org.apache.commons.math3.genetics.AbstractListChromosome.<init>()",
        "org.apache.commons.math3.genetics.Chromosome.<init>()"
    ],
    "org.apache.commons.math3.ml.clustering.KMeansPlusPlusClusterer#getPointFromLargestVarianceCluster(Collection<CentroidCluster<T extends Clusterable>>)": [
        "org.apache.commons.math3.ml.clustering.Clusterer#distance(Clusterable,Clusterable)",
        "org.apache.commons.math3.stat.descriptive.moment.Variance#Variance()",
        "org.apache.commons.math3.ml.clustering.CentroidCluster#getCenter()",
        "org.apache.commons.math3.random.RandomGeneratorFactory.createRandomGenerator(Random)$RandomGenerator$1#nextInt(int)",
        "org.apache.commons.math3.exception.util.LocalizedFormats.<staticinit>()",
        "org.apache.commons.math3.ml.clustering.Cluster#getPoints()",
        "org.apache.commons.math3.random.BitsStreamGenerator#nextInt(int)",
        "org.apache.commons.math3.random.AbstractRandomGenerator#nextInt(int)",
        "org.apache.commons.math3.random.SynchronizedRandomGenerator#nextInt(int)",
        "org.apache.commons.math3.random.RandomAdaptor#nextInt(int)",
        "org.apache.commons.math3.stat.descriptive.moment.Variance#getResult()",
        "org.apache.commons.math3.stat.descriptive.moment.Variance#increment(double)"
    ],
    "org.apache.commons.math3.linear.RealVector.unmodifiableRealVector(RealVector)$RealVector$1#setSubVector(int,RealVector)": ["org.apache.commons.math3.exception.MathUnsupportedOperationException#MathUnsupportedOperationException()"],
    "org.apache.commons.math3.dfp.DfpDec#getDecimalDigits()": ["org.apache.commons.math3.dfp.Dfp#getRadixDigits()"],
    "org.apache.commons.math3.analysis.solvers.AbstractUnivariateSolver#AbstractUnivariateSolver(double,double,double)": [
        "org.apache.commons.math3.analysis.solvers.AbstractUnivariateSolver.<init>()",
        "org.apache.commons.math3.analysis.solvers.BaseAbstractUnivariateSolver#BaseAbstractUnivariateSolver(double,double,double)"
    ],
    "org.apache.commons.math3.fraction.FractionFormat#format(Fraction,StringBuffer,FieldPosition)": [
        "org.apache.commons.math3.fraction.AbstractFormat#getNumeratorFormat()",
        "org.apache.commons.math3.fraction.BigFractionFormat#format(Object,StringBuffer,FieldPosition)",
        "org.apache.commons.math3.fraction.AbstractFormat#getDenominatorFormat()",
        "org.apache.commons.math3.fraction.AbstractFormat#format(double,StringBuffer,FieldPosition)",
        "org.apache.commons.math3.fraction.Fraction#getDenominator()",
        "org.apache.commons.math3.fraction.Fraction#getNumerator()",
        "org.apache.commons.math3.fraction.FractionFormat#format(Object,StringBuffer,FieldPosition)"
    ],
    "org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D.NoSubSpaceException#NoSubSpaceException()": [
        "org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D.NoSubSpaceException.<init>()",
        "org.apache.commons.math3.exception.util.LocalizedFormats.<staticinit>()"
    ],
    "org.apache.commons.math3.genetics.OnePointCrossover#crossover(AbstractListChromosome<T>,AbstractListChromosome<T>)": [
        "org.apache.commons.math3.exception.DimensionMismatchException#DimensionMismatchException(int,int)",
        "org.apache.commons.math3.genetics.AbstractListChromosome#getRepresentation()",
        "org.apache.commons.math3.genetics.ChromosomePair#ChromosomePair(Chromosome,Chromosome)",
        "org.apache.commons.math3.genetics.GeneticAlgorithm.getRandomGenerator()",
        "org.apache.commons.math3.random.RandomGeneratorFactory.createRandomGenerator(Random)$RandomGenerator$1#nextInt(int)",
        "org.apache.commons.math3.random.BitsStreamGenerator#nextInt(int)",
        "org.apache.commons.math3.random.AbstractRandomGenerator#nextInt(int)",
        "org.apache.commons.math3.random.SynchronizedRandomGenerator#nextInt(int)",
        "org.apache.commons.math3.random.RandomAdaptor#nextInt(int)",
        "org.apache.commons.math3.genetics.AbstractListChromosome#getLength()"
    ],
    "org.apache.commons.math3.analysis.solvers.UnivariateSolverUtils.bracket(UnivariateFunction,double,double,double,double,double,int)": [
        "org.apache.commons.math3.analysis.FunctionUtils.multiply(DifferentiableUnivariateFunction[]...)$UnivariateFunction$1$UnivariateFunction$1#derivative()$UnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.polynomials.PolynomialSplineFunction#value(double)",
        "org.apache.commons.math3.analysis.function.Gaussian#value(double)",
        "org.apache.commons.math3.analysis.function.Tanh#value(double)",
        "org.apache.commons.math3.util.FastMath.min(double,double)",
        "org.apache.commons.math3.exception.util.LocalizedFormats.<staticinit>()",
        "org.apache.commons.math3.analysis.function.Inverse#value(double)",
        "org.apache.commons.math3.analysis.function.HarmonicOscillator#value(double)",
        "org.apache.commons.math3.analysis.FunctionUtils.fix1stArgument(BivariateFunction,double)$UnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.function.Asin#value(double)",
        "org.apache.commons.math3.exception.NoBracketingException#NoBracketingException(double,double,double,double)",
        "org.apache.commons.math3.analysis.function.Asinh#value(double)",
        "org.apache.commons.math3.analysis.FunctionUtils.multiply(UnivariateFunction[]...)$UnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.function.Atan#value(double)",
        "org.apache.commons.math3.analysis.FunctionUtils.toDifferentiableUnivariateFunction(UnivariateDifferentiableFunction)$DifferentiableUnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.function.Cbrt#value(double)",
        "org.apache.commons.math3.analysis.polynomials.PolynomialFunctionLagrangeForm#value(double)",
        "org.apache.commons.math3.analysis.function.Exp#value(double)",
        "org.apache.commons.math3.special.BesselJ#value(double)",
        "org.apache.commons.math3.analysis.polynomials.PolynomialFunctionNewtonForm#value(double)",
        "org.apache.commons.math3.analysis.FunctionUtils.add(UnivariateFunction[]...)$UnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.function.Sin#value(double)",
        "org.apache.commons.math3.analysis.function.Cos#value(double)",
        "org.apache.commons.math3.analysis.solvers.UnivariateSolverUtils.verifySequence(double,double,double)",
        "org.apache.commons.math3.analysis.interpolation.UnivariatePeriodicInterpolator#interpolate(double[],double[])$UnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.function.Log10#value(double)",
        "org.apache.commons.math3.analysis.function.Sqrt#value(double)",
        "org.apache.commons.math3.analysis.function.Log#value(double)",
        "org.apache.commons.math3.analysis.function.Sinc#value(double)",
        "org.apache.commons.math3.ode.events.EventState#evaluateStep(StepInterpolator)$UnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.function.Minus#value(double)",
        "org.apache.commons.math3.analysis.integration.IterativeLegendreGaussIntegrator#stage(int)$UnivariateFunction$1#value(double)",
        "org.apache.commons.math3.optimization.general.NonLinearConjugateGradientOptimizer.LineSearchFunction#value(double)",
        "org.apache.commons.math3.analysis.function.Floor#value(double)",
        "org.apache.commons.math3.analysis.FunctionUtils.multiply(DifferentiableUnivariateFunction[]...)$DifferentiableUnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.FunctionUtils.combine(BivariateFunction,UnivariateFunction,UnivariateFunction)$UnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.FunctionUtils.add(DifferentiableUnivariateFunction[]...)$UnivariateFunction$1$UnivariateFunction$1#derivative()$UnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.function.Sinh#value(double)",
        "org.apache.commons.math3.analysis.FunctionUtils.multiply(UnivariateDifferentiableFunction[]...)$UnivariateDifferentiableFunction$1#value(double)",
        "org.apache.commons.math3.analysis.function.Tan#value(double)",
        "org.apache.commons.math3.distribution.AbstractRealDistribution#inverseCumulativeProbability(double)$UnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.FunctionUtils.add(DifferentiableUnivariateFunction[]...)$DifferentiableUnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.function.Ceil#value(double)",
        "org.apache.commons.math3.analysis.function.Logistic#value(double)",
        "org.apache.commons.math3.analysis.function.Signum#value(double)",
        "org.apache.commons.math3.analysis.function.Constant#value(double)",
        "org.apache.commons.math3.analysis.function.Atanh#value(double)",
        "org.apache.commons.math3.analysis.FunctionUtils.compose(DifferentiableUnivariateFunction[]...)$UnivariateFunction$1$UnivariateFunction$1#derivative()$UnivariateFunction$1#value(double)",
        "org.apache.commons.math3.util.FastMath.max(double,double)",
        "org.apache.commons.math3.analysis.FunctionUtils.add(UnivariateDifferentiableFunction[]...)$UnivariateDifferentiableFunction$1#value(double)",
        "org.apache.commons.math3.analysis.function.Abs#value(double)",
        "org.apache.commons.math3.analysis.differentiation.FiniteDifferencesDifferentiator#differentiate(UnivariateFunction)$UnivariateDifferentiableFunction$1#value(double)",
        "org.apache.commons.math3.analysis.function.Identity#value(double)",
        "org.apache.commons.math3.analysis.function.Expm1#value(double)",
        "org.apache.commons.math3.analysis.function.Logit#value(double)",
        "org.apache.commons.math3.analysis.function.Log1p#value(double)",
        "org.apache.commons.math3.analysis.FunctionUtils.fix2ndArgument(BivariateFunction,double)$UnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.FunctionUtils.toUnivariateDifferential(DifferentiableUnivariateFunction)$UnivariateDifferentiableFunction$1#value(double)",
        "org.apache.commons.math3.analysis.FunctionUtils.toDifferentiableUnivariateFunction(UnivariateDifferentiableFunction)$UnivariateFunction$1$UnivariateFunction$1#derivative()$UnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.polynomials.PolynomialFunction#value(double)",
        "org.apache.commons.math3.analysis.function.Rint#value(double)",
        "org.apache.commons.math3.analysis.FunctionUtils.compose(UnivariateFunction[]...)$UnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.function.Cosh#value(double)",
        "org.apache.commons.math3.optimization.direct.PowellOptimizer.LineSearch#search(double[],double[])$UnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.FunctionUtils.compose(DifferentiableUnivariateFunction[]...)$DifferentiableUnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.function.Acosh#value(double)",
        "org.apache.commons.math3.analysis.function.StepFunction#value(double)",
        "org.apache.commons.math3.analysis.FunctionUtils.compose(UnivariateDifferentiableFunction[]...)$UnivariateDifferentiableFunction$1#value(double)",
        "org.apache.commons.math3.analysis.function.Acos#value(double)",
        "org.apache.commons.math3.analysis.function.Power#value(double)",
        "org.apache.commons.math3.optim.nonlinear.scalar.LineSearch#search(double[],double[])$UnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.function.Sigmoid#value(double)",
        "org.apache.commons.math3.analysis.function.Ulp#value(double)"
    ],
    "org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet#buildNew(BSPTree<Euclidean3D>)": [
        "org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet#PolyhedronsSet(BSPTree<Euclidean3D>,double)",
        "org.apache.commons.math3.geometry.partitioning.AbstractRegion#getTolerance()"
    ],
    "org.apache.commons.math3.analysis.polynomials.PolynomialsUtils.JacobiKey#JacobiKey(int,int)": ["org.apache.commons.math3.analysis.polynomials.PolynomialsUtils.JacobiKey.<init>()"],
    "org.apache.commons.math3.util.Decimal64#pow(int)": [
        "org.apache.commons.math3.util.FastMath.pow(double,int)",
        "org.apache.commons.math3.util.Decimal64#Decimal64(double)"
    ],
    "org.apache.commons.math3.analysis.differentiation.SparseGradient#linearCombination(double,SparseGradient,double,SparseGradient)": [
        "org.apache.commons.math3.analysis.differentiation.SparseGradient#multiply(double)",
        "org.apache.commons.math3.analysis.differentiation.SparseGradient#add(SparseGradient)",
        "org.apache.commons.math3.util.MathArrays.linearCombination(double,double,double,double)"
    ],
    "org.apache.commons.math3.linear.SchurTransformer#performDoubleQRStep(int,int,int,ShiftInfo,double[])": [
        "org.apache.commons.math3.util.Precision.equals(double,double,double)",
        "org.apache.commons.math3.util.FastMath.abs(double)",
        "org.apache.commons.math3.util.FastMath.min(int,int)",
        "org.apache.commons.math3.util.FastMath.sqrt(double)"
    ],
    "org.apache.commons.math3.stat.inference.TestUtils.chiSquareTest(long[][])": [
        "org.apache.commons.math3.stat.inference.ChiSquareTest#chiSquareTest(long[][])",
        "org.apache.commons.math3.stat.inference.TestUtils.<staticinit>()"
    ],
    "org.apache.commons.math3.geometry.euclidean.twod.Vector2DFormat.getInstance()": ["org.apache.commons.math3.geometry.euclidean.twod.Vector2DFormat.getInstance(Locale)"],
    "org.apache.commons.math3.stat.descriptive.moment.VectorialCovariance#getResult()": [
        "org.apache.commons.math3.linear.BlockRealMatrix#setEntry(int,int,double)",
        "org.apache.commons.math3.linear.OpenMapRealMatrix#setEntry(int,int,double)",
        "org.apache.commons.math3.linear.MatrixUtils.createRealMatrix(int,int)",
        "org.apache.commons.math3.linear.Array2DRowRealMatrix#setEntry(int,int,double)",
        "org.apache.commons.math3.linear.DiagonalMatrix#setEntry(int,int,double)"
    ],
    "org.apache.commons.math3.ode.sampling.DummyStepHandler#DummyStepHandler()": ["org.apache.commons.math3.ode.sampling.DummyStepHandler.<init>()"],
    "org.apache.commons.math3.util.FastMath.toIntExact(long)": ["org.apache.commons.math3.exception.util.LocalizedFormats.<staticinit>()"],
    "org.apache.commons.math3.optim.linear.SimplexTableau#getData()": ["org.apache.commons.math3.linear.Array2DRowRealMatrix#getData()"],
    "org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D#FieldVector3D(T extends RealFieldElement,T extends RealFieldElement,T extends RealFieldElement)": ["org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D.<init>()"],
    "org.apache.commons.math3.stat.descriptive.SynchronizedMultivariateSummaryStatistics#SynchronizedMultivariateSummaryStatistics(int,boolean)": [
        "org.apache.commons.math3.stat.descriptive.MultivariateSummaryStatistics#MultivariateSummaryStatistics(int,boolean)",
        "org.apache.commons.math3.stat.descriptive.SynchronizedMultivariateSummaryStatistics.<init>()"
    ],
    "org.apache.commons.math3.stat.StatUtils.populationVariance(double[],double)": [
        "org.apache.commons.math3.stat.descriptive.moment.Variance#evaluate(double[],double)",
        "org.apache.commons.math3.stat.descriptive.moment.Variance#Variance(boolean)"
    ],
    "org.apache.commons.math3.stat.descriptive.moment.SecondMoment#SecondMoment()": [
        "org.apache.commons.math3.stat.descriptive.moment.SecondMoment.<init>()",
        "org.apache.commons.math3.stat.descriptive.moment.FirstMoment#FirstMoment()"
    ],
    "org.apache.commons.math3.optim.SimpleVectorValueChecker#SimpleVectorValueChecker(double,double,int)": [
        "org.apache.commons.math3.optim.SimpleVectorValueChecker.<init>()",
        "org.apache.commons.math3.optim.AbstractConvergenceChecker#AbstractConvergenceChecker(double,double)"
    ],
    "org.apache.commons.math3.linear.RealVector#mapSubtract(double)": [
        "org.apache.commons.math3.linear.ArrayRealVector#copy()",
        "org.apache.commons.math3.linear.RealVector.unmodifiableRealVector(RealVector)$RealVector$1#copy()",
        "org.apache.commons.math3.linear.RealVector#mapSubtractToSelf(double)",
        "org.apache.commons.math3.linear.OpenMapRealVector#copy()",
        "org.apache.commons.math3.linear.RealVector.unmodifiableRealVector(RealVector)$RealVector$1#mapSubtractToSelf(double)",
        "org.apache.commons.math3.linear.ArrayRealVector#mapSubtractToSelf(double)"
    ],
    "org.apache.commons.math3.dfp.Dfp#newInstance(byte)": [
        "org.apache.commons.math3.dfp.Dfp#getField()",
        "org.apache.commons.math3.dfp.Dfp#Dfp(DfpField,byte)"
    ],
    "org.apache.commons.math3.stat.Frequency#getCount(int)": ["org.apache.commons.math3.stat.Frequency#getCount(Comparable<?>)"],
    "org.apache.commons.math3.analysis.differentiation.DerivativeStructure#reciprocal()": [
        "org.apache.commons.math3.analysis.differentiation.DerivativeStructure#DerivativeStructure(DSCompiler)",
        "org.apache.commons.math3.analysis.differentiation.DSCompiler#pow(double[],int,int,double[],int)"
    ],
    "org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D.distance(FieldVector3D<T extends RealFieldElement>,FieldVector3D<T extends RealFieldElement>)": ["org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D#distance(FieldVector3D<T extends RealFieldElement>)"],
    "org.apache.commons.math3.stat.regression.MillerUpdatingRegression#addObservations(double[][],double[])": [
        "org.apache.commons.math3.stat.regression.MillerUpdatingRegression#addObservation(double[],double)",
        "org.apache.commons.math3.exception.util.LocalizedFormats.<staticinit>()"
    ],
    "org.apache.commons.math3.optimization.univariate.BaseAbstractUnivariateOptimizer#getEvaluations()": ["org.apache.commons.math3.util.Incrementor#getCount()"],
    "org.apache.commons.math3.linear.RealVector.unmodifiableRealVector(RealVector)$RealVector$1#dotProduct(RealVector)": [
        "org.apache.commons.math3.linear.RealVector#dotProduct(RealVector)",
        "org.apache.commons.math3.linear.ArrayRealVector#dotProduct(RealVector)",
        "org.apache.commons.math3.linear.RealVector.unmodifiableRealVector(RealVector)$RealVector$1#dotProduct(RealVector)"
    ],
    "org.apache.commons.math3.stat.correlation.PearsonsCorrelation#computeCorrelationMatrix(double[][])": [
        "org.apache.commons.math3.stat.correlation.PearsonsCorrelation#computeCorrelationMatrix(RealMatrix)",
        "org.apache.commons.math3.linear.BlockRealMatrix#BlockRealMatrix(double[][])"
    ],
    "org.apache.commons.math3.optim.nonlinear.scalar.MultivariateFunctionPenaltyAdapter#value(double[])": [
        "org.apache.commons.math3.optim.nonlinear.scalar.MultivariateFunctionMappingAdapter#value(double[])",
        "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizer#doOptimize()$MultivariateFunction$1#value(double[])",
        "org.apache.commons.math3.optimization.direct.MultivariateFunctionMappingAdapter#value(double[])",
        "org.apache.commons.math3.analysis.FunctionUtils.toMultivariateDifferentiableFunction(DifferentiableMultivariateFunction)$MultivariateDifferentiableFunction$1#value(double[])",
        "org.apache.commons.math3.analysis.FunctionUtils.toDifferentiableMultivariateFunction(MultivariateDifferentiableFunction)$DifferentiableMultivariateFunction$1#value(double[])",
        "org.apache.commons.math3.analysis.interpolation.MicrosphereInterpolatingFunction#value(double[])",
        "org.apache.commons.math3.analysis.interpolation.MicrosphereProjectionInterpolator#interpolate(double[][],double[])$MultivariateFunction$1#value(double[])",
        "org.apache.commons.math3.optimization.direct.MultivariateFunctionPenaltyAdapter#value(double[])",
        "org.apache.commons.math3.optim.nonlinear.scalar.MultivariateFunctionPenaltyAdapter#value(double[])",
        "org.apache.commons.math3.optim.linear.LinearObjectiveFunction#value(double[])",
        "org.apache.commons.math3.analysis.FunctionUtils.collector(BivariateFunction,UnivariateFunction,double)$MultivariateFunction$1#value(double[])",
        "org.apache.commons.math3.util.FastMath.sqrt(double)",
        "org.apache.commons.math3.optim.nonlinear.scalar.LeastSquaresConverter#value(double[])",
        "org.apache.commons.math3.analysis.FunctionUtils.toDifferentiableMultivariateFunction(MultivariateDifferentiableFunction)$MultivariateFunction$1$MultivariateFunction$1#partialDerivative(int)$MultivariateFunction$1#value(double[])",
        "org.apache.commons.math3.optimization.LeastSquaresConverter#value(double[])",
        "org.apache.commons.math3.optimization.direct.SimplexOptimizer#doOptimize()$MultivariateFunction$1#value(double[])"
    ],
    "org.apache.commons.math3.stat.clustering.KMeansPlusPlusClusterer#getPointFromLargestNumberCluster(Collection<Cluster<T extends Clusterable>>)": [
        "org.apache.commons.math3.random.RandomAdaptor#nextInt(int)",
        "org.apache.commons.math3.stat.clustering.Cluster#getPoints()",
        "org.apache.commons.math3.exception.util.LocalizedFormats.<staticinit>()"
    ],
    "org.apache.commons.math3.analysis.function.Log1p#value(double)": ["org.apache.commons.math3.util.FastMath.log1p(double)"],
    "org.apache.commons.math3.geometry.euclidean.twod.Vector2D#dotProduct(Vector<Euclidean2D>)": ["org.apache.commons.math3.util.MathArrays.linearCombination(double,double,double,double)"],
    "org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D#crossProduct(FieldVector3D<T extends RealFieldElement>)": ["org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D#FieldVector3D(T extends RealFieldElement,T extends RealFieldElement,T extends RealFieldElement)"],
    "org.apache.commons.math3.optim.PointValuePair.DataTransferObject#readResolve()": ["org.apache.commons.math3.optim.PointValuePair#PointValuePair(double[],double,boolean)"],
    "org.apache.commons.math3.util.Precision.equalsWithRelativeTolerance(double,double,double)": [
        "org.apache.commons.math3.util.FastMath.abs(double)",
        "org.apache.commons.math3.util.FastMath.max(double,double)",
        "org.apache.commons.math3.util.Precision.equals(double,double,int)"
    ],
    "org.apache.commons.math3.optim.univariate.SimpleUnivariateValueChecker#converged(int,UnivariatePointValuePair,UnivariatePointValuePair)": [
        "org.apache.commons.math3.optim.univariate.UnivariatePointValuePair#getValue()",
        "org.apache.commons.math3.util.FastMath.max(double,double)",
        "org.apache.commons.math3.util.FastMath.abs(double)",
        "org.apache.commons.math3.optim.univariate.SimpleUnivariateValueChecker.<staticinit>()",
        "org.apache.commons.math3.optim.AbstractConvergenceChecker#getRelativeThreshold()",
        "org.apache.commons.math3.optim.AbstractConvergenceChecker#getAbsoluteThreshold()"
    ],
    "org.apache.commons.math3.distribution.AbstractMultivariateRealDistribution#reseedRandomGenerator(long)": [
        "org.apache.commons.math3.random.RandomGeneratorFactory.createRandomGenerator(Random)$RandomGenerator$1#setSeed(long)",
        "org.apache.commons.math3.random.AbstractWell#setSeed(long)",
        "org.apache.commons.math3.random.RandomAdaptor#setSeed(long)",
        "org.apache.commons.math3.random.SynchronizedRandomGenerator#setSeed(long)",
        "org.apache.commons.math3.random.MersenneTwister#setSeed(long)",
        "org.apache.commons.math3.random.ISAACRandom#setSeed(long)"
    ],
    "org.apache.commons.math3.stat.descriptive.DescriptiveStatistics#toString()": [
        "org.apache.commons.math3.stat.descriptive.DescriptiveStatistics#getPercentile(double)",
        "org.apache.commons.math3.stat.descriptive.SynchronizedDescriptiveStatistics#getStandardDeviation()",
        "org.apache.commons.math3.stat.descriptive.DescriptiveStatistics#getMax()",
        "org.apache.commons.math3.stat.descriptive.DescriptiveStatistics#getN()",
        "org.apache.commons.math3.stat.descriptive.DescriptiveStatistics#getMin()",
        "org.apache.commons.math3.stat.descriptive.DescriptiveStatistics#getStandardDeviation()",
        "org.apache.commons.math3.stat.descriptive.DescriptiveStatistics#getKurtosis()",
        "org.apache.commons.math3.stat.descriptive.DescriptiveStatistics#getMean()",
        "org.apache.commons.math3.stat.descriptive.SynchronizedDescriptiveStatistics#getN()",
        "org.apache.commons.math3.stat.descriptive.DescriptiveStatistics#getSkewness()"
    ],
    "org.apache.commons.math3.linear.ArrayFieldVector#dotProduct(ArrayFieldVector<T extends FieldElement>)": [
        "org.apache.commons.math3.linear.ArrayFieldVector#checkVectorDimensions(int)",
        "org.apache.commons.math3.util.BigRealField#getZero()",
        "org.apache.commons.math3.analysis.differentiation.SparseGradient#getField()$Field$1#getZero()",
        "org.apache.commons.math3.analysis.differentiation.DerivativeStructure#getField()$Field$1#getZero()",
        "org.apache.commons.math3.fraction.FractionField#getZero()",
        "org.apache.commons.math3.util.Decimal64Field#getZero()",
        "org.apache.commons.math3.dfp.DfpField#getZero()",
        "org.apache.commons.math3.complex.ComplexField#getZero()",
        "org.apache.commons.math3.fraction.BigFractionField#getZero()"
    ],
    "org.apache.commons.math3.fraction.FractionField#getOne()": ["org.apache.commons.math3.fraction.Fraction.<staticinit>()"],
    "org.apache.commons.math3.random.SobolSequenceGenerator.<staticinit>()": ["org.apache.commons.math3.util.FastMath.pow(double,int)"],
    "org.apache.commons.math3.ode.AbstractParameterizable#complainIfNotSupported(String)": [
        "org.apache.commons.math3.ode.AbstractParameterizable#isSupported(String)",
        "org.apache.commons.math3.ode.UnknownParameterException#UnknownParameterException(String)"
    ],
    "org.apache.commons.math3.random.RandomDataGenerator#reSeedSecure()": [
        "org.apache.commons.math3.random.RandomGeneratorFactory.createRandomGenerator(Random)$RandomGenerator$1#setSeed(long)",
        "org.apache.commons.math3.random.SynchronizedRandomGenerator#setSeed(long)",
        "org.apache.commons.math3.random.MersenneTwister#setSeed(long)",
        "org.apache.commons.math3.random.AbstractWell#setSeed(long)",
        "org.apache.commons.math3.random.RandomAdaptor#setSeed(long)",
        "org.apache.commons.math3.random.RandomDataGenerator#getSecRan()",
        "org.apache.commons.math3.random.ISAACRandom#setSeed(long)"
    ],
    "org.apache.commons.math3.optimization.PointValuePair.DataTransferObject#DataTransferObject(double[],double)": ["org.apache.commons.math3.optimization.PointValuePair.DataTransferObject.<init>()"],
    "org.apache.commons.math3.exception.MathInternalError#MathInternalError(Throwable)": [
        "org.apache.commons.math3.exception.MathInternalError.<init>()",
        "org.apache.commons.math3.exception.util.LocalizedFormats.<staticinit>()",
        "org.apache.commons.math3.exception.MathInternalError.<staticinit>()"
    ],
    "org.apache.commons.math3.ml.neuralnet.Network#getNeighbours(Iterable<Neuron>,Iterable<Neuron>)": [
        "org.apache.commons.math3.ml.neuralnet.Neuron#getIdentifier()",
        "org.apache.commons.math3.ml.neuralnet.Network#getNeuron(long)"
    ],
    "org.apache.commons.math3.linear.AbstractFieldMatrix#getSubMatrix(int[],int[])$DefaultFieldMatrixChangingVisitor$1.<init>()": ["org.apache.commons.math3.linear.DefaultFieldMatrixChangingVisitor#DefaultFieldMatrixChangingVisitor(T extends FieldElement)"],
    "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.NelderMeadSimplex#NelderMeadSimplex(int)": ["org.apache.commons.math3.optim.nonlinear.scalar.noderiv.NelderMeadSimplex#NelderMeadSimplex(int,double)"],
    "org.apache.commons.math3.ode.nonstiff.ThreeEighthesStepInterpolator#ThreeEighthesStepInterpolator(ThreeEighthesStepInterpolator)": [
        "org.apache.commons.math3.ode.nonstiff.ThreeEighthesStepInterpolator.<init>()",
        "org.apache.commons.math3.ode.nonstiff.RungeKuttaStepInterpolator#RungeKuttaStepInterpolator(RungeKuttaStepInterpolator)"
    ],
    "org.apache.commons.math3.analysis.integration.IterativeLegendreGaussIntegrator#stage(int)": [
        "org.apache.commons.math3.analysis.integration.gauss.SymmetricGaussIntegrator#integrate(UnivariateFunction)",
        "org.apache.commons.math3.analysis.integration.IterativeLegendreGaussIntegrator.<staticinit>()",
        "org.apache.commons.math3.analysis.integration.gauss.GaussIntegratorFactory#legendreHighPrecision(int,double,double)",
        "org.apache.commons.math3.analysis.integration.IterativeLegendreGaussIntegrator#stage(int)$UnivariateFunction$1.<init>()",
        "org.apache.commons.math3.analysis.integration.BaseAbstractUnivariateIntegrator#getMax()",
        "org.apache.commons.math3.analysis.integration.BaseAbstractUnivariateIntegrator#getMin()",
        "org.apache.commons.math3.analysis.integration.gauss.GaussIntegrator#integrate(UnivariateFunction)"
    ],
    "org.apache.commons.math3.ode.MultistepIntegrator.InitializationCompletedMarkerException#InitializationCompletedMarkerException()": ["org.apache.commons.math3.ode.MultistepIntegrator.InitializationCompletedMarkerException.<init>()"],
    "org.apache.commons.math3.optimization.PointValuePair#PointValuePair(double[],double,boolean)": [
        "org.apache.commons.math3.optimization.PointValuePair.<init>()",
        "org.apache.commons.math3.util.Pair#Pair(K,V)"
    ],
    "org.apache.commons.math3.linear.RealVector.unmodifiableRealVector(RealVector)$Iterator$1$Iterator$1#sparseIterator()$Iterator$1#hasNext()": [
        "org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet.SubIntervalsIterator#hasNext()",
        "org.apache.commons.math3.linear.RealVector.SparseEntryIterator#hasNext()",
        "org.apache.commons.math3.linear.RealVector#iterator()$Iterator$1#hasNext()",
        "org.apache.commons.math3.userguide.sofm.ChineseRingsClassifier#createIterable()$Iterator$1$Iterator$1#iterator()$Iterator$1#hasNext()",
        "org.apache.commons.math3.userguide.sofm.ChineseRingsClassifier#createRandomIterator(long)$Iterator$1#hasNext()",
        "org.apache.commons.math3.util.IntegerSequence.Incrementor#hasNext()",
        "org.apache.commons.math3.linear.RealVector.unmodifiableRealVector(RealVector)$Iterator$1$Iterator$1#sparseIterator()$Iterator$1#hasNext()",
        "org.apache.commons.math3.geometry.spherical.oned.ArcsSet.SubArcsIterator#hasNext()",
        "org.apache.commons.math3.util.Combinations.LexicographicIterator#hasNext()",
        "org.apache.commons.math3.linear.RealVector.unmodifiableRealVector(RealVector)$Iterator$1$Iterator$1#iterator()$Iterator$1#hasNext()",
        "org.apache.commons.math3.util.Combinations.SingletonIterator#hasNext()",
        "org.apache.commons.math3.util.MultidimensionalCounter.Iterator#hasNext()"
    ],
    "org.apache.commons.math3.stat.inference.TestUtils.gTestIntrinsic(double[],long[])": [
        "org.apache.commons.math3.stat.inference.TestUtils.<staticinit>()",
        "org.apache.commons.math3.stat.inference.GTest#gTestIntrinsic(double[],long[])"
    ],
    "org.apache.commons.math3.complex.ComplexFormat#ComplexFormat(String,NumberFormat,NumberFormat)": [
        "org.apache.commons.math3.exception.NoDataException#NoDataException()",
        "org.apache.commons.math3.exception.NullArgumentException#NullArgumentException()",
        "org.apache.commons.math3.complex.ComplexFormat.<init>()",
        "org.apache.commons.math3.exception.util.LocalizedFormats.<staticinit>()"
    ],
    "org.apache.commons.math3.distribution.NakagamiDistribution#NakagamiDistribution(RandomGenerator,double,double,double)": [
        "org.apache.commons.math3.distribution.NakagamiDistribution.<staticinit>()",
        "org.apache.commons.math3.distribution.NakagamiDistribution.<init>()",
        "org.apache.commons.math3.distribution.AbstractRealDistribution#AbstractRealDistribution(RandomGenerator)",
        "org.apache.commons.math3.exception.util.LocalizedFormats.<staticinit>()"
    ],
    "org.apache.commons.math3.userguide.sofm.ChineseRingsClassifier#createIterable()": ["org.apache.commons.math3.userguide.sofm.ChineseRingsClassifier#createIterable()$Iterable$1.<init>()"],
    "org.apache.commons.math3.stat.descriptive.SynchronizedMultivariateSummaryStatistics#addValue(double[])": ["org.apache.commons.math3.stat.descriptive.MultivariateSummaryStatistics#addValue(double[])"],
    "org.apache.commons.math3.stat.regression.ModelSpecificationException#ModelSpecificationException(Localizable,Object[]...)": [
        "org.apache.commons.math3.stat.regression.ModelSpecificationException.<init>()",
        "org.apache.commons.math3.exception.MathIllegalArgumentException#MathIllegalArgumentException(Localizable,Object[]...)"
    ],
    "org.apache.commons.math3.fraction.FractionConversionException#FractionConversionException(double,long,long)": [
        "org.apache.commons.math3.fraction.FractionConversionException.<init>()",
        "org.apache.commons.math3.exception.util.LocalizedFormats.<staticinit>()"
    ],
    "org.apache.commons.math3.util.MathArrays.distance(int[],int[])": [
        "org.apache.commons.math3.util.MathArrays.checkEqualLength(int[],int[])",
        "org.apache.commons.math3.util.FastMath.sqrt(double)"
    ],
    "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer#doOptimize()": [
        "org.apache.commons.math3.linear.BlockRealMatrix#setColumn(int,double[])",
        "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer.FitnessFunction#value(double[])",
        "org.apache.commons.math3.util.FastMath.min(double,double)",
        "org.apache.commons.math3.optim.BaseMultivariateOptimizer#getStartPoint()",
        "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer#updateEvolutionPaths(RealMatrix,RealMatrix)",
        "org.apache.commons.math3.linear.AbstractRealMatrix#getColumnMatrix(int)",
        "org.apache.commons.math3.linear.DiagonalMatrix#multiply(RealMatrix)",
        "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer.FitnessFunction#repair(double[])",
        "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer.zeros(int,int)",
        "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer.FitnessFunction#FitnessFunction()",
        "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer.max(double[])",
        "org.apache.commons.math3.linear.AbstractRealMatrix#setColumn(int,double[])",
        "org.apache.commons.math3.optim.nonlinear.scalar.MultivariateOptimizer#getGoalType()",
        "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer#sortedIndices(double[])",
        "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer.min(RealMatrix)",
        "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer.times(RealMatrix,RealMatrix)",
        "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer#updateCovarianceDiagonalOnly(boolean,RealMatrix)",
        "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer.FitnessFunction#isFeasible(double[])",
        "org.apache.commons.math3.linear.BlockRealMatrix#add(RealMatrix)",
        "org.apache.commons.math3.optim.PointValuePair#PointValuePair(double[],double)",
        "org.apache.commons.math3.linear.AbstractRealMatrix#add(RealMatrix)",
        "org.apache.commons.math3.optim.BaseOptimizer#getConvergenceChecker()",
        "org.apache.commons.math3.util.FastMath.max(double,double)",
        "org.apache.commons.math3.linear.OpenMapRealMatrix#multiply(RealMatrix)",
        "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer.push(double[],double)",
        "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer.selectColumns(RealMatrix,int[])",
        "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer#randn1(int,int)",
        "org.apache.commons.math3.util.FastMath.abs(double)",
        "org.apache.commons.math3.util.FastMath.exp(double)",
        "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer.sqrt(RealMatrix)",
        "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer#randn(int)",
        "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer.min(double[])",
        "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer#updateCovariance(boolean,RealMatrix,RealMatrix,int[],RealMatrix)",
        "org.apache.commons.math3.linear.AbstractRealMatrix#getColumn(int)",
        "org.apache.commons.math3.linear.BlockRealMatrix#getColumn(int)",
        "org.apache.commons.math3.linear.BlockRealMatrix#multiply(RealMatrix)",
        "org.apache.commons.math3.optim.nonlinear.scalar.GoalType.<staticinit>()",
        "org.apache.commons.math3.linear.BlockRealMatrix#scalarMultiply(double)",
        "org.apache.commons.math3.linear.BlockRealMatrix#transpose()",
        "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer.copyColumn(RealMatrix,int,RealMatrix,int)",
        "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer#valueRange(ValuePenaltyPair[])",
        "org.apache.commons.math3.linear.BlockRealMatrix#getColumnMatrix(int)",
        "org.apache.commons.math3.util.MathArrays.copyOf(int[],int)",
        "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer#initializeCMA(double[])",
        "org.apache.commons.math3.linear.AbstractRealMatrix#multiply(RealMatrix)",
        "org.apache.commons.math3.linear.AbstractRealMatrix#scalarMultiply(double)",
        "org.apache.commons.math3.linear.AbstractRealMatrix#transpose()",
        "org.apache.commons.math3.optim.BaseOptimizer#incrementIterationCount()",
        "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer.max(RealMatrix)"
    ],
    "org.apache.commons.math3.util.ContinuedFraction#evaluate(double,int)": [
        "org.apache.commons.math3.util.ContinuedFraction#evaluate(double,double,int)",
        "org.apache.commons.math3.util.ContinuedFraction.<staticinit>()"
    ],
    "org.apache.commons.math3.ode.JacobianMatrices#getCurrentMainSetJacobian(double[][])": ["org.apache.commons.math3.ode.ExpandableStatefulODE#getSecondaryState(int)"],
    "org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile.Markers.createMarkerArray(List<Double>,double)": [
        "org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile.Marker#Marker(double,double,double,double)",
        "org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile.<staticinit>()",
        "org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile.Marker#Marker()",
        "org.apache.commons.math3.exception.util.LocalizedFormats.<staticinit>()"
    ],
    "org.apache.commons.math3.util.CompositeFormat.parseAndIgnoreWhitespace(String,ParsePosition)": ["org.apache.commons.math3.util.CompositeFormat.parseNextCharacter(String,ParsePosition)"],
    "org.apache.commons.math3.ode.sampling.FieldStepNormalizer#FieldStepNormalizer(double,FieldFixedStepHandler<T extends RealFieldElement>,StepNormalizerMode,StepNormalizerBounds)": [
        "org.apache.commons.math3.util.FastMath.abs(double)",
        "org.apache.commons.math3.ode.sampling.FieldStepNormalizer.<init>()"
    ],
    "org.apache.commons.math3.optim.linear.SimplexTableau#performRowOperations(int,int)": [
        "org.apache.commons.math3.optim.linear.SimplexTableau#getBasicVariable(int)",
        "org.apache.commons.math3.optim.linear.SimplexTableau#divideRow(int,double)",
        "org.apache.commons.math3.optim.linear.SimplexTableau#subtractRow(int,int,double)",
        "org.apache.commons.math3.optim.linear.SimplexTableau#getHeight()",
        "org.apache.commons.math3.optim.linear.SimplexTableau#getEntry(int,int)"
    ],
    "org.apache.commons.math3.fraction.AbstractFormat#format(double,StringBuffer,FieldPosition)": ["org.apache.commons.math3.fraction.AbstractFormat#format(double,StringBuffer,FieldPosition)"],
    "org.apache.commons.math3.optimization.univariate.UnivariateMultiStartOptimizer#UnivariateMultiStartOptimizer(BaseUnivariateOptimizer<FUNC extends UnivariateFunction>,int,RandomGenerator)": [
        "org.apache.commons.math3.optimization.univariate.UnivariateMultiStartOptimizer.<init>()",
        "org.apache.commons.math3.exception.NullArgumentException#NullArgumentException()"
    ],
    "org.apache.commons.math3.linear.RealVector.unmodifiableRealVector(RealVector)$RealVector$1#getLInfDistance(RealVector)": [
        "org.apache.commons.math3.linear.RealVector#getLInfDistance(RealVector)",
        "org.apache.commons.math3.linear.RealVector.unmodifiableRealVector(RealVector)$RealVector$1#getLInfDistance(RealVector)",
        "org.apache.commons.math3.linear.ArrayRealVector#getLInfDistance(RealVector)",
        "org.apache.commons.math3.linear.OpenMapRealVector#getLInfDistance(RealVector)"
    ],
    "org.apache.commons.math3.analysis.differentiation.SparseGradient#negate()": ["org.apache.commons.math3.analysis.differentiation.SparseGradient#SparseGradient(double,double,Map<Integer, Double>)"],
    "org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet#previousInternalNode(BSPTree<Euclidean1D>)": [
        "org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet#childBefore(BSPTree<Euclidean1D>)",
        "org.apache.commons.math3.geometry.partitioning.BSPTree#getCut()",
        "org.apache.commons.math3.geometry.partitioning.BSPTree#getParent()",
        "org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet#leafBefore(BSPTree<Euclidean1D>)",
        "org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet#isBeforeParent(BSPTree<Euclidean1D>)"
    ],
    "org.apache.commons.math3.linear.ArrayFieldVector#ArrayFieldVector(ArrayFieldVector<T extends FieldElement>,ArrayFieldVector<T extends FieldElement>)": ["org.apache.commons.math3.linear.ArrayFieldVector#ArrayFieldVector(FieldVector<T extends FieldElement>,FieldVector<T extends FieldElement>)"],
    "org.apache.commons.math3.optimization.general.AbstractDifferentiableOptimizer#computeObjectiveGradient(double[])": [
        "org.apache.commons.math3.fitting.AbstractCurveFitter.TheoreticalValuesFunction#getModelFunction()$MultivariateVectorFunction$1#value(double[])",
        "org.apache.commons.math3.optimization.fitting.CurveFitter.TheoreticalValuesFunction#value(double[])",
        "org.apache.commons.math3.analysis.FunctionUtils.toDifferentiableMultivariateFunction(MultivariateDifferentiableFunction)$MultivariateVectorFunction$1$MultivariateVectorFunction$1#gradient()$MultivariateVectorFunction$1#value(double[])",
        "org.apache.commons.math3.analysis.FunctionUtils.toMultivariateDifferentiableVectorFunction(DifferentiableMultivariateVectorFunction)$MultivariateDifferentiableVectorFunction$1#value(double[])",
        "org.apache.commons.math3.analysis.FunctionUtils.toDifferentiableMultivariateVectorFunction(MultivariateDifferentiableVectorFunction)$DifferentiableMultivariateVectorFunction$1#value(double[])",
        "org.apache.commons.math3.fitting.CurveFitter.TheoreticalValuesFunction#getModelFunction()$MultivariateVectorFunction$1#value(double[])",
        "org.apache.commons.math3.analysis.differentiation.GradientFunction#value(double[])",
        "org.apache.commons.math3.optimization.fitting.CurveFitter.OldTheoreticalValuesFunction#value(double[])"
    ],
    "org.apache.commons.math3.util.CompositeFormat#CompositeFormat()": ["org.apache.commons.math3.util.CompositeFormat.<init>()"],
    "org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet#getSup()": [
        "org.apache.commons.math3.geometry.partitioning.BSPTree#getCut()",
        "org.apache.commons.math3.geometry.partitioning.BSPTree#getPlus()",
        "org.apache.commons.math3.geometry.euclidean.oned.Vector1D#getX()",
        "org.apache.commons.math3.geometry.partitioning.BSPTree#getMinus()",
        "org.apache.commons.math3.geometry.euclidean.oned.OrientedPoint#getLocation()",
        "org.apache.commons.math3.geometry.partitioning.AbstractRegion#getTree(boolean)",
        "org.apache.commons.math3.geometry.partitioning.BSPTree#getAttribute()",
        "org.apache.commons.math3.geometry.euclidean.oned.OrientedPoint#isDirect()",
        "org.apache.commons.math3.geometry.partitioning.AbstractSubHyperplane#getHyperplane()"
    ],
    "org.apache.commons.math3.util.FastMath.nextUp(double)": ["org.apache.commons.math3.util.FastMath.nextAfter(double,double)"],
    "org.apache.commons.math3.ode.events.FieldEventHandler#resetState(FieldODEStateAndDerivative<T extends RealFieldElement>)": ["org.apache.commons.math3.ode.events.Action.<staticinit>()"],
    "org.apache.commons.math3.geometry.euclidean.threed.Rotation.mat2quat(double[][])": ["org.apache.commons.math3.util.FastMath.sqrt(double)"],
    "org.apache.commons.math3.linear.ArrayRealVector#dotProduct(RealVector)": [
        "org.apache.commons.math3.linear.ArrayRealVector#checkVectorDimensions(int)",
        "org.apache.commons.math3.linear.RealVector#dotProduct(RealVector)"
    ],
    "org.apache.commons.math3.geometry.partitioning.AbstractSubHyperplane#getSize()": ["org.apache.commons.math3.geometry.partitioning.AbstractRegion#getSize()"],
    "org.apache.commons.math3.geometry.euclidean.threed.Plane.intersection(Plane,Plane,Plane)": [
        "org.apache.commons.math3.geometry.euclidean.threed.Vector3D#getX()",
        "org.apache.commons.math3.util.FastMath.abs(double)",
        "org.apache.commons.math3.geometry.euclidean.threed.Vector3D#getZ()",
        "org.apache.commons.math3.geometry.euclidean.threed.Vector3D#Vector3D(double,double,double)",
        "org.apache.commons.math3.geometry.euclidean.threed.Vector3D#getY()"
    ],
    "org.apache.commons.math3.userguide.LowDiscrepancyGeneratorComparison.makeRandom(int,RandomVectorGenerator)": [
        "org.apache.commons.math3.random.HaltonSequenceGenerator#nextVector()",
        "org.apache.commons.math3.random.CorrelatedRandomVectorGenerator#nextVector()",
        "org.apache.commons.math3.random.SobolSequenceGenerator#nextVector()",
        "org.apache.commons.math3.geometry.euclidean.twod.Vector2D#Vector2D(double[])",
        "org.apache.commons.math3.random.UncorrelatedRandomVectorGenerator#nextVector()",
        "org.apache.commons.math3.userguide.LowDiscrepancyGeneratorComparison.Display#Display()$RandomVectorGenerator$1#nextVector()",
        "org.apache.commons.math3.random.UnitSphereRandomVectorGenerator#nextVector()",
        "org.apache.commons.math3.userguide.LowDiscrepancyGeneratorComparison.normalize(List<Vector2D>)"
    ],
    "org.apache.commons.math3.filter.KalmanFilter#getMeasurementDimension()": [
        "org.apache.commons.math3.linear.BlockFieldMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.BlockRealMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.Array2DRowRealMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.SparseFieldMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.OpenMapRealMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.DiagonalMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.Array2DRowFieldMatrix#getRowDimension()"
    ],
    "org.apache.commons.math3.optimization.direct.BOBYQAOptimizer#update(double,double,int)": [
        "org.apache.commons.math3.linear.Array2DRowRealMatrix#getEntry(int,int)",
        "org.apache.commons.math3.linear.Array2DRowRealMatrix#setEntry(int,int,double)",
        "org.apache.commons.math3.util.FastMath.max(double,double)",
        "org.apache.commons.math3.util.FastMath.abs(double)",
        "org.apache.commons.math3.linear.ArrayRealVector#getDimension()",
        "org.apache.commons.math3.optimization.direct.BOBYQAOptimizer.<staticinit>()",
        "org.apache.commons.math3.util.FastMath.sqrt(double)",
        "org.apache.commons.math3.optimization.direct.BOBYQAOptimizer.printMethod()",
        "org.apache.commons.math3.linear.ArrayRealVector#ArrayRealVector(int)",
        "org.apache.commons.math3.linear.ArrayRealVector#getEntry(int)",
        "org.apache.commons.math3.linear.ArrayRealVector#setEntry(int,double)"
    ],
    "org.apache.commons.math3.util.FastMath.floorDiv(long,long)": ["org.apache.commons.math3.exception.util.LocalizedFormats.<staticinit>()"],
    "org.apache.commons.math3.distribution.NormalDistribution#NormalDistribution(RandomGenerator,double,double)": [
        "org.apache.commons.math3.distribution.NormalDistribution#NormalDistribution(RandomGenerator,double,double,double)",
        "org.apache.commons.math3.distribution.NormalDistribution.<staticinit>()"
    ],
    "org.apache.commons.math3.linear.AbstractFieldMatrix#getSubMatrix(int[],int[])$DefaultFieldMatrixChangingVisitor$1#visit(int,int,T extends FieldElement)": [
        "org.apache.commons.math3.linear.SparseFieldMatrix#getEntry(int,int)",
        "org.apache.commons.math3.linear.BlockFieldMatrix#getEntry(int,int)",
        "org.apache.commons.math3.linear.Array2DRowFieldMatrix#getEntry(int,int)"
    ],
    "org.apache.commons.math3.genetics.CycleCrossover#CycleCrossover()": ["org.apache.commons.math3.genetics.CycleCrossover#CycleCrossover(boolean)"],
    "org.apache.commons.math3.geometry.euclidean.twod.Line#getOffset(Point<Euclidean2D>)": [
        "org.apache.commons.math3.geometry.euclidean.twod.Vector2D#getY()",
        "org.apache.commons.math3.util.MathArrays.linearCombination(double,double,double,double,double,double)",
        "org.apache.commons.math3.geometry.euclidean.twod.Vector2D#getX()"
    ],
    "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer.eye(int,int)": ["org.apache.commons.math3.linear.Array2DRowRealMatrix#Array2DRowRealMatrix(double[][],boolean)"],
    "org.apache.commons.math3.analysis.integration.SimpsonIntegrator#doIntegrate()": [
        "org.apache.commons.math3.analysis.integration.BaseAbstractUnivariateIntegrator#getAbsoluteAccuracy()",
        "org.apache.commons.math3.util.FastMath.abs(double)",
        "org.apache.commons.math3.analysis.integration.BaseAbstractUnivariateIntegrator#getMinimalIterationCount()",
        "org.apache.commons.math3.analysis.integration.BaseAbstractUnivariateIntegrator#getRelativeAccuracy()",
        "org.apache.commons.math3.analysis.integration.TrapezoidIntegrator#TrapezoidIntegrator()",
        "org.apache.commons.math3.analysis.integration.TrapezoidIntegrator#stage(BaseAbstractUnivariateIntegrator,int)",
        "org.apache.commons.math3.analysis.integration.BaseAbstractUnivariateIntegrator#incrementCount()",
        "org.apache.commons.math3.analysis.integration.BaseAbstractUnivariateIntegrator#getIterations()"
    ],
    "org.apache.commons.math3.dfp.Dfp#isNaN()": ["org.apache.commons.math3.dfp.Dfp.<staticinit>()"],
    "org.apache.commons.math3.linear.CholeskyDecomposition#CholeskyDecomposition(RealMatrix)": [
        "org.apache.commons.math3.linear.CholeskyDecomposition#CholeskyDecomposition(RealMatrix,double,double)",
        "org.apache.commons.math3.linear.CholeskyDecomposition.<staticinit>()"
    ],
    "org.apache.commons.math3.optim.nonlinear.vector.jacobian.AbstractLeastSquaresOptimizer#computeResiduals(double[])": [
        "org.apache.commons.math3.exception.DimensionMismatchException#DimensionMismatchException(int,int)",
        "org.apache.commons.math3.optim.nonlinear.vector.MultivariateVectorOptimizer#getTarget()"
    ],
    "org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet#PolygonsSet(double,double,double,double,double)": [
        "org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.boxBoundary(double,double,double,double,double)",
        "org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.<init>()",
        "org.apache.commons.math3.geometry.partitioning.AbstractRegion#AbstractRegion(Hyperplane<S extends Space>[],double)"
    ],
    "org.apache.commons.math3.linear.ArrayFieldVector#ArrayFieldVector(Field<T extends FieldElement>,T extends FieldElement[],boolean)": [
        "org.apache.commons.math3.util.MathUtils.checkNotNull(Object)",
        "org.apache.commons.math3.linear.ArrayFieldVector.<init>()"
    ],
    "org.apache.commons.math3.util.Decimal64#atan()": [
        "org.apache.commons.math3.util.FastMath.atan(double)",
        "org.apache.commons.math3.util.Decimal64#Decimal64(double)"
    ],
    "org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator#computeInterpolatedStateAndDerivatives(double,double)": [
        "org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator.<staticinit>()",
        "org.apache.commons.math3.ode.sampling.AbstractStepInterpolator#finalizeStep()"
    ],
    "org.apache.commons.math3.fraction.BigFraction#negate()": ["org.apache.commons.math3.fraction.BigFraction#BigFraction(BigInteger,BigInteger)"],
    "org.apache.commons.math3.util.Decimal64Field#Decimal64Field()": ["org.apache.commons.math3.util.Decimal64Field.<init>()"],
    "org.apache.commons.math3.util.Decimal64#hypot(Decimal64)": [
        "org.apache.commons.math3.util.Decimal64#Decimal64(double)",
        "org.apache.commons.math3.util.FastMath.hypot(double,double)"
    ],
    "org.apache.commons.math3.analysis.integration.gauss.LegendreHighPrecisionRuleFactory#LegendreHighPrecisionRuleFactory(MathContext)": [
        "org.apache.commons.math3.analysis.integration.gauss.BaseRuleFactory.<init>()",
        "org.apache.commons.math3.analysis.integration.gauss.LegendreHighPrecisionRuleFactory.<init>()"
    ],
    "org.apache.commons.math3.random.UncorrelatedRandomVectorGenerator#UncorrelatedRandomVectorGenerator(double[],double[],NormalizedRandomGenerator)": [
        "org.apache.commons.math3.exception.DimensionMismatchException#DimensionMismatchException(int,int)",
        "org.apache.commons.math3.random.UncorrelatedRandomVectorGenerator.<init>()"
    ],
    "org.apache.commons.math3.analysis.differentiation.SparseGradient#linearCombination(double,SparseGradient,double,SparseGradient,double,SparseGradient)": [
        "org.apache.commons.math3.util.MathArrays.linearCombination(double,double,double,double,double,double)",
        "org.apache.commons.math3.analysis.differentiation.SparseGradient#multiply(double)",
        "org.apache.commons.math3.analysis.differentiation.SparseGradient#add(SparseGradient)"
    ],
    "org.apache.commons.math3.stat.descriptive.rank.Max.copy(Max,Max)": [
        "org.apache.commons.math3.util.MathUtils.checkNotNull(Object)",
        "org.apache.commons.math3.stat.descriptive.AbstractUnivariateStatistic#setData(double[])",
        "org.apache.commons.math3.stat.descriptive.rank.Percentile#setData(double[])",
        "org.apache.commons.math3.stat.descriptive.AbstractUnivariateStatistic#getDataRef()"
    ],
    "org.apache.commons.math3.linear.AbstractFieldMatrix#transpose()$DefaultFieldMatrixPreservingVisitor$1#visit(int,int,T extends FieldElement)": [
        "org.apache.commons.math3.linear.Array2DRowFieldMatrix#setEntry(int,int,T extends FieldElement)",
        "org.apache.commons.math3.linear.BlockFieldMatrix#setEntry(int,int,T extends FieldElement)",
        "org.apache.commons.math3.linear.SparseFieldMatrix#setEntry(int,int,T extends FieldElement)"
    ],
    "org.apache.commons.math3.stat.descriptive.SummaryStatistics#setVarianceImpl(StorelessUnivariateStatistic)": ["org.apache.commons.math3.stat.descriptive.SummaryStatistics#checkEmpty()"],
    "org.apache.commons.math3.analysis.function.Logistic.Parametric#gradient(double,double[]...)": [
        "org.apache.commons.math3.analysis.function.Logistic.Parametric#validateParameters(double[])",
        "org.apache.commons.math3.util.FastMath.pow(double,double)",
        "org.apache.commons.math3.analysis.function.Logistic.value(double,double,double,double,double,double)",
        "org.apache.commons.math3.util.FastMath.log(double)",
        "org.apache.commons.math3.util.FastMath.exp(double)"
    ],
    "org.apache.commons.math3.util.OpenIntToFieldHashMap#OpenIntToFieldHashMap(Field<T extends FieldElement>)": [
        "org.apache.commons.math3.util.BigRealField#getZero()",
        "org.apache.commons.math3.analysis.differentiation.SparseGradient#getField()$Field$1#getZero()",
        "org.apache.commons.math3.analysis.differentiation.DerivativeStructure#getField()$Field$1#getZero()",
        "org.apache.commons.math3.fraction.FractionField#getZero()",
        "org.apache.commons.math3.util.Decimal64Field#getZero()",
        "org.apache.commons.math3.util.OpenIntToFieldHashMap.<staticinit>()",
        "org.apache.commons.math3.dfp.DfpField#getZero()",
        "org.apache.commons.math3.complex.ComplexField#getZero()",
        "org.apache.commons.math3.util.OpenIntToFieldHashMap#OpenIntToFieldHashMap(Field<T extends FieldElement>,int,T extends FieldElement)",
        "org.apache.commons.math3.fraction.BigFractionField#getZero()"
    ],
    "org.apache.commons.math3.random.RandomGeneratorFactory.createRandomGenerator(Random)$RandomGenerator$1#nextLong()": ["org.apache.commons.math3.random.RandomAdaptor#nextLong()"],
    "org.apache.commons.math3.geometry.euclidean.threed.Rotation#applyInverseTo(Vector3D)": [
        "org.apache.commons.math3.geometry.euclidean.threed.Vector3D#getX()",
        "org.apache.commons.math3.geometry.euclidean.threed.Vector3D#getZ()",
        "org.apache.commons.math3.geometry.euclidean.threed.Vector3D#Vector3D(double,double,double)",
        "org.apache.commons.math3.geometry.euclidean.threed.Vector3D#getY()"
    ],
    "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer#parseOptimizationData(OptimizationData[]...)": [
        "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer.PopulationSize#getPopulationSize()",
        "org.apache.commons.math3.optim.nonlinear.scalar.MultivariateOptimizer#parseOptimizationData(OptimizationData[]...)",
        "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer.Sigma#getSigma()",
        "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer#checkParameters()"
    ],
    "org.apache.commons.math3.optim.linear.SimplexTableau#SimplexTableau(LinearObjectiveFunction,Collection<LinearConstraint>,GoalType,boolean,double,int)": [
        "org.apache.commons.math3.optim.linear.SimplexTableau#normalizeConstraints(Collection<LinearConstraint>)",
        "org.apache.commons.math3.optim.nonlinear.scalar.GoalType.<staticinit>()",
        "org.apache.commons.math3.linear.ArrayRealVector#getDimension()",
        "org.apache.commons.math3.optim.linear.Relationship.<staticinit>()",
        "org.apache.commons.math3.optim.linear.SimplexTableau#getSlackVariableOffset()",
        "org.apache.commons.math3.optim.linear.SimplexTableau#initializeColumnLabels()",
        "org.apache.commons.math3.optim.linear.SimplexTableau#createTableau(boolean)",
        "org.apache.commons.math3.optim.linear.SimplexTableau.<init>()",
        "org.apache.commons.math3.linear.OpenMapRealVector#getDimension()",
        "org.apache.commons.math3.optim.linear.LinearObjectiveFunction#getCoefficients()",
        "org.apache.commons.math3.linear.RealVector.unmodifiableRealVector(RealVector)$RealVector$1#getDimension()",
        "org.apache.commons.math3.optim.linear.SimplexTableau#getConstraintTypeCounts(Relationship)",
        "org.apache.commons.math3.optim.linear.SimplexTableau#initializeBasicVariables(int)"
    ],
    "org.apache.commons.math3.random.RandomDataImpl#setSecureAlgorithm(String,String)": ["org.apache.commons.math3.random.RandomDataGenerator#setSecureAlgorithm(String,String)"],
    "org.apache.commons.math3.stat.descriptive.SummaryStatistics#setSumLogImpl(StorelessUnivariateStatistic)": [
        "org.apache.commons.math3.stat.descriptive.SummaryStatistics#checkEmpty()",
        "org.apache.commons.math3.stat.descriptive.moment.GeometricMean#setSumLogImpl(StorelessUnivariateStatistic)"
    ],
    "org.apache.commons.math3.linear.RealVector#getDistance(RealVector)": [
        "org.apache.commons.math3.linear.RealVector.Entry#getValue()",
        "org.apache.commons.math3.linear.RealVector#iterator()",
        "org.apache.commons.math3.linear.RealVector#iterator()$Iterator$1#hasNext()",
        "org.apache.commons.math3.linear.RealVector.unmodifiableRealVector(RealVector)$Iterator$1$Iterator$1#sparseIterator()$Iterator$1#hasNext()",
        "org.apache.commons.math3.linear.RealVector.unmodifiableRealVector(RealVector)$RealVector$1#iterator()",
        "org.apache.commons.math3.geometry.spherical.oned.ArcsSet.SubArcsIterator#hasNext()",
        "org.apache.commons.math3.util.Combinations.LexicographicIterator#hasNext()",
        "org.apache.commons.math3.linear.OpenMapRealVector.OpenMapEntry#getValue()",
        "org.apache.commons.math3.linear.RealVector.unmodifiableRealVector(RealVector).UnmodifiableEntry.UnmodifiableEntry#getValue()",
        "org.apache.commons.math3.linear.RealVector.SparseEntryIterator#hasNext()",
        "org.apache.commons.math3.userguide.sofm.ChineseRingsClassifier#createIterable()$Iterator$1$Iterator$1#iterator()$Iterator$1#hasNext()",
        "org.apache.commons.math3.util.FastMath.sqrt(double)",
        "org.apache.commons.math3.linear.RealVector.unmodifiableRealVector(RealVector)$Iterator$1$Iterator$1#sparseIterator()$Iterator$1#next()",
        "org.apache.commons.math3.util.MultidimensionalCounter.Iterator#hasNext()",
        "org.apache.commons.math3.linear.RealVector.unmodifiableRealVector(RealVector)$Iterator$1$Iterator$1#iterator()$Iterator$1#next()",
        "org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet.SubIntervalsIterator#hasNext()",
        "org.apache.commons.math3.linear.OpenMapRealVector.OpenMapEntry#getIndex()",
        "org.apache.commons.math3.linear.ArrayRealVector#checkVectorDimensions(RealVector)",
        "org.apache.commons.math3.userguide.sofm.ChineseRingsClassifier#createRandomIterator(long)$Iterator$1#hasNext()",
        "org.apache.commons.math3.util.IntegerSequence.Incrementor#hasNext()",
        "org.apache.commons.math3.linear.RealVector.Entry#getIndex()",
        "org.apache.commons.math3.linear.RealVector#iterator()$Iterator$1#next()",
        "org.apache.commons.math3.linear.ArrayRealVector#getEntry(int)",
        "org.apache.commons.math3.linear.RealVector#checkVectorDimensions(RealVector)",
        "org.apache.commons.math3.linear.RealVector.unmodifiableRealVector(RealVector)$Iterator$1$Iterator$1#iterator()$Iterator$1#hasNext()",
        "org.apache.commons.math3.util.Combinations.SingletonIterator#hasNext()",
        "org.apache.commons.math3.linear.RealVector.SparseEntryIterator#next()",
        "org.apache.commons.math3.linear.OpenMapRealVector#getEntry(int)",
        "org.apache.commons.math3.linear.RealVector.unmodifiableRealVector(RealVector)$RealVector$1#getEntry(int)"
    ],
    "org.apache.commons.math3.ode.MultistepIntegrator#MultistepIntegrator(String,int,int,double,double,double[],double[])": [
        "org.apache.commons.math3.ode.nonstiff.AdaptiveStepsizeIntegrator#AdaptiveStepsizeIntegrator(String,double,double,double[],double[])",
        "org.apache.commons.math3.util.FastMath.pow(double,double)",
        "org.apache.commons.math3.ode.MultistepIntegrator#setSafety(double)",
        "org.apache.commons.math3.ode.MultistepIntegrator#setMinReduction(double)",
        "org.apache.commons.math3.ode.MultistepIntegrator.<init>()",
        "org.apache.commons.math3.ode.MultistepIntegrator#setMaxGrowth(double)",
        "org.apache.commons.math3.ode.nonstiff.DormandPrince853Integrator#DormandPrince853Integrator(double,double,double[],double[])"
    ],
    "org.apache.commons.math3.complex.Complex.equals(Complex,Complex,int)": ["org.apache.commons.math3.util.Precision.equals(double,double,int)"],
    "org.apache.commons.math3.analysis.differentiation.SparseGradient#cos()": [
        "org.apache.commons.math3.analysis.differentiation.SparseGradient#SparseGradient(double,double,Map<Integer, Double>)",
        "org.apache.commons.math3.util.FastMath.sin(double)",
        "org.apache.commons.math3.util.FastMath.cos(double)"
    ],
    "org.apache.commons.math3.special.Gamma.regularizedGammaQ(double,double,double,int)$ContinuedFraction$1.<init>()": ["org.apache.commons.math3.util.ContinuedFraction#ContinuedFraction()"],
    "org.apache.commons.math3.stat.descriptive.moment.Variance#increment(double)": [
        "org.apache.commons.math3.stat.descriptive.moment.ThirdMoment#increment(double)",
        "org.apache.commons.math3.stat.descriptive.moment.SecondMoment#increment(double)",
        "org.apache.commons.math3.stat.descriptive.moment.FourthMoment#increment(double)"
    ],
    "org.apache.commons.math3.stat.clustering.KMeansPlusPlusClusterer#KMeansPlusPlusClusterer(Random)": [
        "org.apache.commons.math3.stat.clustering.KMeansPlusPlusClusterer.EmptyClusterStrategy.<staticinit>()",
        "org.apache.commons.math3.stat.clustering.KMeansPlusPlusClusterer#KMeansPlusPlusClusterer(Random,EmptyClusterStrategy)"
    ],
    "org.apache.commons.math3.random.RandomGeneratorFactory.createRandomGenerator(Random)$RandomGenerator$1#nextInt(int)": ["org.apache.commons.math3.random.RandomAdaptor#nextInt(int)"],
    "org.apache.commons.math3.geometry.euclidean.threed.Vector3DFormat#Vector3DFormat()": [
        "org.apache.commons.math3.geometry.euclidean.threed.Vector3DFormat.<init>()",
        "org.apache.commons.math3.geometry.VectorFormat#VectorFormat(String,String,String,NumberFormat)",
        "org.apache.commons.math3.util.CompositeFormat.getDefaultNumberFormat()",
        "org.apache.commons.math3.geometry.VectorFormat.<staticinit>()"
    ],
    "org.apache.commons.math3.util.FastMath.Split#multiply(Split)": [
        "org.apache.commons.math3.util.FastMath.Split#Split(double)",
        "org.apache.commons.math3.util.FastMath.Split#Split(double,double)"
    ],
    "org.apache.commons.math3.ml.clustering.MultiKMeansPlusPlusClusterer#MultiKMeansPlusPlusClusterer(KMeansPlusPlusClusterer<T extends Clusterable>,int)": [
        "org.apache.commons.math3.ml.clustering.MultiKMeansPlusPlusClusterer#MultiKMeansPlusPlusClusterer(KMeansPlusPlusClusterer<T extends Clusterable>,int,ClusterEvaluator<T extends Clusterable>)",
        "org.apache.commons.math3.ml.clustering.evaluation.SumOfClusterVariances#SumOfClusterVariances(DistanceMeasure)",
        "org.apache.commons.math3.ml.clustering.Clusterer#getDistanceMeasure()"
    ],
    "org.apache.commons.math3.random.RandomDataImpl#nextPermutation(int,int)": ["org.apache.commons.math3.random.RandomDataGenerator#nextPermutation(int,int)"],
    "org.apache.commons.math3.stat.inference.TestUtils.t(StatisticalSummary,StatisticalSummary)": [
        "org.apache.commons.math3.stat.inference.TTest#t(StatisticalSummary,StatisticalSummary)",
        "org.apache.commons.math3.stat.inference.TestUtils.<staticinit>()"
    ],
    "org.apache.commons.math3.stat.regression.SimpleRegression#addData(double[][])": [
        "org.apache.commons.math3.stat.regression.SimpleRegression#addData(double,double)",
        "org.apache.commons.math3.exception.util.LocalizedFormats.<staticinit>()"
    ],
    "org.apache.commons.math3.optim.linear.SimplexSolver#SimplexSolver(double,int)": [
        "org.apache.commons.math3.optim.linear.SimplexSolver#SimplexSolver(double,int,double)",
        "org.apache.commons.math3.optim.linear.SimplexSolver.<staticinit>()"
    ],
    "org.apache.commons.math3.ml.neuralnet.twod.NeuronSquareMesh2D#NeuronSquareMesh2D(boolean,boolean,SquareNeighbourhood,double[][][])": [
        "org.apache.commons.math3.ml.neuralnet.Network#createNeuron(double[])",
        "org.apache.commons.math3.ml.neuralnet.twod.NeuronSquareMesh2D#createLinks()",
        "org.apache.commons.math3.ml.neuralnet.Network#Network(long,int)",
        "org.apache.commons.math3.ml.neuralnet.twod.NeuronSquareMesh2D.<init>()"
    ],
    "org.apache.commons.math3.util.Decimal64#cos()": [
        "org.apache.commons.math3.util.Decimal64#Decimal64(double)",
        "org.apache.commons.math3.util.FastMath.cos(double)"
    ],
    "org.apache.commons.math3.primes.Primes.primeFactors(int)": [
        "org.apache.commons.math3.primes.SmallPrimes.trialDivision(int)",
        "org.apache.commons.math3.exception.util.LocalizedFormats.<staticinit>()"
    ],
    "org.apache.commons.math3.complex.ComplexFormat#parse(String,ParsePosition)": [
        "org.apache.commons.math3.util.CompositeFormat.parseNumber(String,NumberFormat,ParsePosition)",
        "org.apache.commons.math3.util.CompositeFormat.parseAndIgnoreWhitespace(String,ParsePosition)",
        "org.apache.commons.math3.complex.Complex#Complex(double,double)",
        "org.apache.commons.math3.util.CompositeFormat.parseFixedstring(String,String,ParsePosition)",
        "org.apache.commons.math3.complex.ComplexFormat#getRealFormat()",
        "org.apache.commons.math3.util.CompositeFormat.parseNextCharacter(String,ParsePosition)",
        "org.apache.commons.math3.complex.ComplexFormat#getImaginaryCharacter()"
    ],
    "org.apache.commons.math3.exception.MathRuntimeException#MathRuntimeException(Localizable,Object[]...)": [
        "org.apache.commons.math3.exception.util.ExceptionContext#addMessage(Localizable,Object[]...)",
        "org.apache.commons.math3.exception.MathRuntimeException.<init>()",
        "org.apache.commons.math3.exception.util.ExceptionContext#ExceptionContext(Throwable)"
    ],
    "org.apache.commons.math3.geometry.euclidean.twod.hull.AklToussaintHeuristic.insideQuadrilateral(Vector2D,List<Vector2D>)": [
        "org.apache.commons.math3.geometry.euclidean.twod.Vector2D#equals(Object)",
        "org.apache.commons.math3.geometry.euclidean.twod.Vector2D#crossProduct(Vector2D,Vector2D)"
    ],
    "org.apache.commons.math3.util.Combinations#Combinations(int,int)": [
        "org.apache.commons.math3.util.Combinations#Combinations(int,int,IterationOrder)",
        "org.apache.commons.math3.util.Combinations.IterationOrder.<staticinit>()"
    ],
    "org.apache.commons.math3.linear.MatrixDimensionMismatchException#MatrixDimensionMismatchException(int,int,int,int)": [
        "org.apache.commons.math3.linear.MatrixDimensionMismatchException.<init>()",
        "org.apache.commons.math3.exception.MultiDimensionMismatchException#MultiDimensionMismatchException(Localizable,Integer[],Integer[])",
        "org.apache.commons.math3.exception.util.LocalizedFormats.<staticinit>()"
    ],
    "org.apache.commons.math3.geometry.euclidean.oned.Vector1D.distance(Vector1D,Vector1D)": ["org.apache.commons.math3.geometry.euclidean.oned.Vector1D#distance(Vector<Euclidean1D>)"],
    "org.apache.commons.math3.linear.MatrixUtils.deserializeRealMatrix(Object,String,ObjectInputStream)": ["org.apache.commons.math3.linear.Array2DRowRealMatrix#Array2DRowRealMatrix(double[][],boolean)"],
    "org.apache.commons.math3.stat.descriptive.moment.SemiVariance.Direction#Direction(boolean)": ["org.apache.commons.math3.stat.descriptive.moment.SemiVariance.Direction.<init>()"],
    "org.apache.commons.math3.genetics.RandomKey#toString()": ["org.apache.commons.math3.genetics.Chromosome#getFitness()"],
    "org.apache.commons.math3.ode.ContinuousOutputModel#ContinuousOutputModel()": ["org.apache.commons.math3.ode.ContinuousOutputModel.<init>()"],
    "org.apache.commons.math3.util.BigReal.<staticinit>()": ["org.apache.commons.math3.util.BigReal#BigReal(BigDecimal)"],
    "org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(Vector3D,Vector3D)": [
        "org.apache.commons.math3.geometry.euclidean.threed.Vector3D#getNorm()",
        "org.apache.commons.math3.util.FastMath.asin(double)",
        "org.apache.commons.math3.exception.util.LocalizedFormats.<staticinit>()",
        "org.apache.commons.math3.util.FastMath.acos(double)",
        "org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(Vector3D,Vector3D)",
        "org.apache.commons.math3.util.FastMath.<staticinit>()",
        "org.apache.commons.math3.geometry.euclidean.threed.Vector3D#dotProduct(Vector<Euclidean3D>)"
    ],
    "org.apache.commons.math3.ode.nonstiff.ClassicalRungeKuttaFieldIntegrator#createInterpolator(boolean,T extends RealFieldElement[][],FieldODEStateAndDerivative<T extends RealFieldElement>,FieldODEStateAndDerivative<T extends RealFieldElement>,FieldEquationsMapper<T extends RealFieldElement>)": [
        "org.apache.commons.math3.ode.AbstractFieldIntegrator#getField()",
        "org.apache.commons.math3.ode.nonstiff.ClassicalRungeKuttaFieldStepInterpolator#ClassicalRungeKuttaFieldStepInterpolator(Field<T extends RealFieldElement>,boolean,T extends RealFieldElement[][],FieldODEStateAndDerivative<T extends RealFieldElement>,FieldODEStateAndDerivative<T extends RealFieldElement>,FieldODEStateAndDerivative<T extends RealFieldElement>,FieldODEStateAndDerivative<T extends RealFieldElement>,FieldEquationsMapper<T extends RealFieldElement>)"
    ],
    "org.apache.commons.math3.util.MathArrays.distanceInf(int[],int[])": [
        "org.apache.commons.math3.util.MathArrays.checkEqualLength(int[],int[])",
        "org.apache.commons.math3.util.FastMath.abs(int)",
        "org.apache.commons.math3.util.FastMath.max(int,int)"
    ],
    "org.apache.commons.math3.geometry.euclidean.threed.FieldRotation#applyTo(FieldRotation<T extends RealFieldElement>)": [
        "org.apache.commons.math3.geometry.euclidean.threed.FieldRotation#compose(FieldRotation<T extends RealFieldElement>,RotationConvention)",
        "org.apache.commons.math3.geometry.euclidean.threed.RotationConvention.<staticinit>()"
    ],
    "org.apache.commons.math3.geometry.spherical.twod.Circle#getPhase(Vector3D)": [
        "org.apache.commons.math3.geometry.euclidean.threed.Vector3D#dotProduct(Vector<Euclidean3D>)",
        "org.apache.commons.math3.util.FastMath.<staticinit>()",
        "org.apache.commons.math3.util.FastMath.atan2(double,double)"
    ],
    "org.apache.commons.math3.linear.DiagonalMatrix#inverse()": ["org.apache.commons.math3.linear.DiagonalMatrix#inverse(double)"],
    "org.apache.commons.math3.genetics.Chromosome#getFitness()": [
        "org.apache.commons.math3.genetics.Chromosome.<staticinit>()",
        "org.apache.commons.math3.userguide.genetics.HelloWorldExample.StringChromosome#fitness()",
        "org.apache.commons.math3.userguide.genetics.PolygonChromosome#fitness()"
    ],
    "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.BOBYQAOptimizer#doOptimize()": [
        "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.BOBYQAOptimizer#setup(double[],double[])",
        "org.apache.commons.math3.optim.nonlinear.scalar.GoalType.<staticinit>()",
        "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.BOBYQAOptimizer#bobyqa(double[],double[])",
        "org.apache.commons.math3.optim.BaseMultivariateOptimizer#getStartPoint()",
        "org.apache.commons.math3.optim.BaseMultivariateOptimizer#getUpperBound()",
        "org.apache.commons.math3.optim.BaseMultivariateOptimizer#getLowerBound()",
        "org.apache.commons.math3.linear.ArrayRealVector#getDataRef()",
        "org.apache.commons.math3.linear.ArrayRealVector#ArrayRealVector(double[])",
        "org.apache.commons.math3.optim.PointValuePair#PointValuePair(double[],double)",
        "org.apache.commons.math3.optim.nonlinear.scalar.MultivariateOptimizer#getGoalType()"
    ],
    "org.apache.commons.math3.geometry.euclidean.twod.hull.AklToussaintHeuristic.reducePoints(Collection<Vector2D>)": [
        "org.apache.commons.math3.geometry.euclidean.twod.Vector2D#getY()",
        "org.apache.commons.math3.geometry.euclidean.twod.Vector2D#getX()",
        "org.apache.commons.math3.geometry.euclidean.twod.hull.AklToussaintHeuristic.buildQuadrilateral(Vector2D[]...)",
        "org.apache.commons.math3.geometry.euclidean.twod.hull.AklToussaintHeuristic.insideQuadrilateral(Vector2D,List<Vector2D>)"
    ],
    "org.apache.commons.math3.ode.FieldEquationsMapper#extractEquationData(int,T extends RealFieldElement[])": [
        "org.apache.commons.math3.exception.DimensionMismatchException#DimensionMismatchException(int,int)",
        "org.apache.commons.math3.util.MathArrays.buildArray(Field<T>,int)",
        "org.apache.commons.math3.ode.FieldEquationsMapper#checkIndex(int)"
    ],
    "org.apache.commons.math3.util.Decimal64#pow(Decimal64)": [
        "org.apache.commons.math3.util.Decimal64#Decimal64(double)",
        "org.apache.commons.math3.util.FastMath.pow(double,double)"
    ],
    "org.apache.commons.math3.analysis.differentiation.SparseGradient#cbrt()": [
        "org.apache.commons.math3.util.FastMath.cbrt(double)",
        "org.apache.commons.math3.analysis.differentiation.SparseGradient#SparseGradient(double,double,Map<Integer, Double>)"
    ],
    "org.apache.commons.math3.analysis.differentiation.DSCompiler#atan(double[],int,double[],int)": [
        "org.apache.commons.math3.util.FastMath.atan(double)",
        "org.apache.commons.math3.analysis.differentiation.DSCompiler#compose(double[],int,double[],double[],int)"
    ],
    "org.apache.commons.math3.stat.descriptive.SynchronizedSummaryStatistics#getMeanImpl()": ["org.apache.commons.math3.stat.descriptive.SummaryStatistics#getMeanImpl()"],
    "org.apache.commons.math3.geometry.euclidean.threed.OutlineExtractor.BoundaryProjector#visitOrder(BSPTree<Euclidean3D>)": ["org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor.Order.<staticinit>()"],
    "org.apache.commons.math3.analysis.integration.LegendreGaussIntegrator#LegendreGaussIntegrator(int,double,double,int,int)": [
        "org.apache.commons.math3.analysis.integration.LegendreGaussIntegrator.<init>()",
        "org.apache.commons.math3.analysis.integration.BaseAbstractUnivariateIntegrator#BaseAbstractUnivariateIntegrator(double,double,int,int)",
        "org.apache.commons.math3.exception.util.LocalizedFormats.<staticinit>()",
        "org.apache.commons.math3.analysis.integration.LegendreGaussIntegrator.<staticinit>()"
    ],
    "org.apache.commons.math3.random.JDKRandomGenerator#JDKRandomGenerator(int)": [
        "org.apache.commons.math3.random.JDKRandomGenerator.<init>()",
        "org.apache.commons.math3.random.JDKRandomGenerator#setSeed(int)"
    ],
    "org.apache.commons.math3.geometry.euclidean.twod.hull.ConvexHull2D#createRegion()": [
        "org.apache.commons.math3.geometry.partitioning.RegionFactory#buildConvex(Hyperplane<S extends Space>[]...)",
        "org.apache.commons.math3.geometry.euclidean.twod.hull.ConvexHull2D#retrieveLineSegments()",
        "org.apache.commons.math3.geometry.partitioning.RegionFactory#RegionFactory()",
        "org.apache.commons.math3.geometry.euclidean.twod.Segment#getLine()",
        "org.apache.commons.math3.exception.InsufficientDataException#InsufficientDataException()"
    ],
    "org.apache.commons.math3.ml.clustering.KMeansPlusPlusClusterer#KMeansPlusPlusClusterer(int,int,DistanceMeasure,RandomGenerator)": [
        "org.apache.commons.math3.ml.clustering.KMeansPlusPlusClusterer#KMeansPlusPlusClusterer(int,int,DistanceMeasure,RandomGenerator,EmptyClusterStrategy)",
        "org.apache.commons.math3.ml.clustering.KMeansPlusPlusClusterer.EmptyClusterStrategy.<staticinit>()"
    ],
    "org.apache.commons.math3.fraction.BigFractionField#getOne()": ["org.apache.commons.math3.fraction.BigFraction.<staticinit>()"],
    "org.apache.commons.math3.linear.BlockRealMatrix.createBlocksLayout(int,int)": [
        "org.apache.commons.math3.util.FastMath.min(int,int)",
        "org.apache.commons.math3.linear.BlockRealMatrix.<staticinit>()"
    ],
    "org.apache.commons.math3.stat.inference.MannWhitneyUTest#calculateAsymptoticPValue(double,int,int)": [
        "org.apache.commons.math3.distribution.NormalDistribution#NormalDistribution(double,double,double)",
        "org.apache.commons.math3.distribution.NormalDistribution#cumulativeProbability(double)",
        "org.apache.commons.math3.util.FastMath.sqrt(double)"
    ],
    "org.apache.commons.math3.stat.inference.OneWayAnova.AnovaStats#AnovaStats(int,int,double)": ["org.apache.commons.math3.stat.inference.OneWayAnova.AnovaStats.<init>()"],
    "org.apache.commons.math3.optimization.BaseMultivariateMultiStartOptimizer#optimize(int,FUNC extends MultivariateFunction,GoalType,double[])": [
        "org.apache.commons.math3.random.HaltonSequenceGenerator#nextVector()",
        "org.apache.commons.math3.random.SobolSequenceGenerator#nextVector()",
        "org.apache.commons.math3.optimization.univariate.UnivariateMultiStartOptimizer#getEvaluations()",
        "org.apache.commons.math3.optimization.direct.BaseAbstractMultivariateSimpleBoundsOptimizer#optimize(int,FUNC extends MultivariateFunction,GoalType,double[])",
        "org.apache.commons.math3.optimization.BaseMultivariateMultiStartOptimizer#sortPairs(GoalType)",
        "org.apache.commons.math3.optimization.BaseMultivariateMultiStartOptimizer#getEvaluations()",
        "org.apache.commons.math3.userguide.LowDiscrepancyGeneratorComparison.Display#Display()$RandomVectorGenerator$1#nextVector()",
        "org.apache.commons.math3.optimization.direct.BaseAbstractMultivariateVectorOptimizer#getEvaluations()",
        "org.apache.commons.math3.random.UnitSphereRandomVectorGenerator#nextVector()",
        "org.apache.commons.math3.optimization.univariate.BaseAbstractUnivariateOptimizer#getEvaluations()",
        "org.apache.commons.math3.optimization.BaseMultivariateMultiStartOptimizer#optimize(int,FUNC extends MultivariateFunction,GoalType,double[])",
        "org.apache.commons.math3.random.CorrelatedRandomVectorGenerator#nextVector()",
        "org.apache.commons.math3.optimization.direct.BaseAbstractMultivariateOptimizer#optimize(int,FUNC extends MultivariateFunction,GoalType,double[])",
        "org.apache.commons.math3.random.UncorrelatedRandomVectorGenerator#nextVector()",
        "org.apache.commons.math3.optimization.direct.BaseAbstractMultivariateOptimizer#getEvaluations()",
        "org.apache.commons.math3.optimization.BaseMultivariateVectorMultiStartOptimizer#getEvaluations()"
    ],
    "org.apache.commons.math3.ode.nonstiff.EulerStepInterpolator#doCopy()": ["org.apache.commons.math3.ode.nonstiff.EulerStepInterpolator#EulerStepInterpolator(EulerStepInterpolator)"],
    "org.apache.commons.math3.complex.Complex#hashCode()": ["org.apache.commons.math3.util.MathUtils.hash(double)"],
    "org.apache.commons.math3.analysis.differentiation.DerivativeStructure#linearCombination(DerivativeStructure[],DerivativeStructure[])": [
        "org.apache.commons.math3.analysis.differentiation.DerivativeStructure#getField()",
        "org.apache.commons.math3.analysis.differentiation.DerivativeStructure#add(DerivativeStructure)",
        "org.apache.commons.math3.util.BigRealField#getZero()",
        "org.apache.commons.math3.analysis.differentiation.SparseGradient#getField()$Field$1#getZero()",
        "org.apache.commons.math3.util.Decimal64Field#getZero()",
        "org.apache.commons.math3.analysis.differentiation.DerivativeStructure#multiply(DerivativeStructure)",
        "org.apache.commons.math3.dfp.DfpField#getZero()",
        "org.apache.commons.math3.analysis.differentiation.DerivativeStructure#getAllDerivatives()",
        "org.apache.commons.math3.analysis.differentiation.DerivativeStructure#getFreeParameters()",
        "org.apache.commons.math3.util.MathArrays.linearCombination(double[],double[])",
        "org.apache.commons.math3.analysis.differentiation.DerivativeStructure#getValue()",
        "org.apache.commons.math3.analysis.differentiation.DerivativeStructure#DerivativeStructure(int,int,double[]...)",
        "org.apache.commons.math3.analysis.differentiation.DerivativeStructure#getField()$Field$1#getZero()",
        "org.apache.commons.math3.fraction.FractionField#getZero()",
        "org.apache.commons.math3.analysis.differentiation.DerivativeStructure#getOrder()",
        "org.apache.commons.math3.complex.ComplexField#getZero()",
        "org.apache.commons.math3.fraction.BigFractionField#getZero()"
    ],
    "org.apache.commons.math3.geometry.euclidean.threed.Plane#intersection(Line)": [
        "org.apache.commons.math3.util.FastMath.abs(double)",
        "org.apache.commons.math3.geometry.euclidean.oned.Vector1D.<staticinit>()",
        "org.apache.commons.math3.geometry.euclidean.threed.Line#toSpace(Point<Euclidean1D>)",
        "org.apache.commons.math3.geometry.euclidean.threed.Line#getDirection()",
        "org.apache.commons.math3.geometry.euclidean.threed.Vector3D#Vector3D(double,Vector3D,double,Vector3D)",
        "org.apache.commons.math3.geometry.euclidean.threed.Vector3D#dotProduct(Vector<Euclidean3D>)"
    ],
    "org.apache.commons.math3.ode.events.EventState#EventState(EventHandler,double,double,int,UnivariateSolver)": [
        "org.apache.commons.math3.util.FastMath.abs(double)",
        "org.apache.commons.math3.ode.events.EventHandler.Action.<staticinit>()",
        "org.apache.commons.math3.ode.events.EventState.<init>()"
    ],
    "org.apache.commons.math3.linear.AbstractFieldMatrix#toString()": [
        "org.apache.commons.math3.linear.BlockFieldMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.SparseFieldMatrix#getEntry(int,int)",
        "org.apache.commons.math3.linear.SparseFieldMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.BlockFieldMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.SparseFieldMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.Array2DRowFieldMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.Array2DRowFieldMatrix#getEntry(int,int)",
        "org.apache.commons.math3.linear.BlockFieldMatrix#getEntry(int,int)",
        "org.apache.commons.math3.linear.Array2DRowFieldMatrix#getColumnDimension()"
    ],
    "org.apache.commons.math3.util.ArithmeticUtils.pow(BigInteger,BigInteger)": ["org.apache.commons.math3.exception.util.LocalizedFormats.<staticinit>()"],
    "org.apache.commons.math3.linear.AbstractFieldMatrix#checkRowIndex(int)": [
        "org.apache.commons.math3.linear.BlockFieldMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.Array2DRowFieldMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.SparseFieldMatrix#getRowDimension()",
        "org.apache.commons.math3.exception.util.LocalizedFormats.<staticinit>()"
    ],
    "org.apache.commons.math3.distribution.LogNormalDistribution#probability(double,double)": [
        "org.apache.commons.math3.special.Erf.erf(double,double)",
        "org.apache.commons.math3.distribution.AbstractRealDistribution#probability(double,double)",
        "org.apache.commons.math3.util.FastMath.log(double)",
        "org.apache.commons.math3.exception.util.LocalizedFormats.<staticinit>()",
        "org.apache.commons.math3.distribution.LogNormalDistribution.<staticinit>()"
    ],
    "org.apache.commons.math3.distribution.PoissonDistribution#normalApproximateProbability(int)": ["org.apache.commons.math3.distribution.NormalDistribution#cumulativeProbability(double)"],
    "org.apache.commons.math3.geometry.partitioning.utilities.OrderedTuple#getBit(int,int)": [
        "org.apache.commons.math3.geometry.partitioning.utilities.OrderedTuple.exponent(long)",
        "org.apache.commons.math3.geometry.partitioning.utilities.OrderedTuple.sign(long)",
        "org.apache.commons.math3.geometry.partitioning.utilities.OrderedTuple.mantissa(long)"
    ],
    "org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D.LazyHolder.<staticinit>()": ["org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D#Euclidean1D()"],
    "org.apache.commons.math3.linear.ArrayFieldVector#ArrayFieldVector(Field<T extends FieldElement>,T extends FieldElement[],T extends FieldElement[])": [
        "org.apache.commons.math3.util.MathUtils.checkNotNull(Object)",
        "org.apache.commons.math3.linear.ArrayFieldVector.<init>()",
        "org.apache.commons.math3.util.MathArrays.buildArray(Field<T>,int)",
        "org.apache.commons.math3.exception.util.LocalizedFormats.<staticinit>()"
    ],
    "org.apache.commons.math3.analysis.polynomials.PolynomialFunction.differentiate(double[])": [
        "org.apache.commons.math3.exception.NoDataException#NoDataException(Localizable)",
        "org.apache.commons.math3.util.MathUtils.checkNotNull(Object)",
        "org.apache.commons.math3.exception.util.LocalizedFormats.<staticinit>()"
    ],
    "org.apache.commons.math3.ode.JacobianMatrices#setParameterStep(String,double)": [
        "org.apache.commons.math3.ode.ParameterConfiguration#setHP(double)",
        "org.apache.commons.math3.ode.ParameterConfiguration#getParameterName()",
        "org.apache.commons.math3.ode.UnknownParameterException#UnknownParameterException(String)"
    ],
    "org.apache.commons.math3.distribution.ExponentialDistribution#getNumericalMean()": ["org.apache.commons.math3.distribution.ExponentialDistribution#getMean()"],
    "org.apache.commons.math3.util.ArithmeticUtils.pow(int,long)": ["org.apache.commons.math3.exception.util.LocalizedFormats.<staticinit>()"],
    "org.apache.commons.math3.ode.ExpandableStatefulODE#setCompleteState(double[])": [
        "org.apache.commons.math3.ode.EquationsMapper#extractEquationData(double[],double[])",
        "org.apache.commons.math3.exception.DimensionMismatchException#DimensionMismatchException(int,int)",
        "org.apache.commons.math3.ode.ExpandableStatefulODE#getTotalDimension()"
    ],
    "org.apache.commons.math3.geometry.euclidean.oned.OrientedPoint#wholeSpace()": ["org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet#IntervalsSet(double)"],
    "org.apache.commons.math3.linear.BlockRealMatrix.toBlocksLayout(double[][])": [
        "org.apache.commons.math3.exception.DimensionMismatchException#DimensionMismatchException(int,int)",
        "org.apache.commons.math3.linear.BlockRealMatrix.<staticinit>()",
        "org.apache.commons.math3.util.FastMath.min(int,int)"
    ],
    "org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet#buildNew(BSPTree<Euclidean1D>)": [
        "org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet#IntervalsSet(BSPTree<Euclidean1D>,double)",
        "org.apache.commons.math3.geometry.partitioning.AbstractRegion#getTolerance()"
    ],
    "org.apache.commons.math3.stat.inference.MannWhitneyUTest#mannWhitneyU(double[],double[])": [
        "org.apache.commons.math3.stat.inference.MannWhitneyUTest#concatenateSamples(double[],double[])",
        "org.apache.commons.math3.util.FastMath.max(double,double)",
        "org.apache.commons.math3.stat.ranking.NaturalRanking#rank(double[])",
        "org.apache.commons.math3.stat.inference.MannWhitneyUTest#ensureDataConformance(double[],double[])"
    ],
    "org.apache.commons.math3.analysis.solvers.IllinoisSolver#IllinoisSolver(double,double)": [
        "org.apache.commons.math3.analysis.solvers.BaseSecantSolver.Method.<staticinit>()",
        "org.apache.commons.math3.analysis.solvers.IllinoisSolver.<init>()",
        "org.apache.commons.math3.analysis.solvers.BaseSecantSolver#BaseSecantSolver(double,double,Method)"
    ],
    "org.apache.commons.math3.distribution.SaddlePointExpansion.getStirlingError(double)": [
        "org.apache.commons.math3.distribution.SaddlePointExpansion.<staticinit>()",
        "org.apache.commons.math3.util.FastMath.log(double)",
        "org.apache.commons.math3.special.Gamma.logGamma(double)",
        "org.apache.commons.math3.util.FastMath.floor(double)"
    ],
    "org.apache.commons.math3.distribution.ChiSquaredDistribution#ChiSquaredDistribution(RandomGenerator,double)": [
        "org.apache.commons.math3.distribution.ChiSquaredDistribution.<staticinit>()",
        "org.apache.commons.math3.distribution.ChiSquaredDistribution#ChiSquaredDistribution(RandomGenerator,double,double)"
    ],
    "org.apache.commons.math3.geometry.euclidean.threed.Plane#reset(Vector3D,Vector3D)": [
        "org.apache.commons.math3.geometry.euclidean.threed.Vector3D#dotProduct(Vector<Euclidean3D>)",
        "org.apache.commons.math3.geometry.euclidean.threed.Plane#setNormal(Vector3D)",
        "org.apache.commons.math3.geometry.euclidean.threed.Plane#setFrame()"
    ],
    "org.apache.commons.math3.ode.nonstiff.GraggBulirschStoerStepInterpolator#readExternal(ObjectInput)": [
        "org.apache.commons.math3.ode.nonstiff.GraggBulirschStoerStepInterpolator#resetTables(int)",
        "org.apache.commons.math3.ode.sampling.AbstractStepInterpolator#setInterpolatedTime(double)",
        "org.apache.commons.math3.ode.sampling.AbstractStepInterpolator#readBaseExternal(ObjectInput)"
    ],
    "org.apache.commons.math3.special.Beta.regularizedBeta(double,double,double,double)": ["org.apache.commons.math3.special.Beta.regularizedBeta(double,double,double,double,int)"],
    "org.apache.commons.math3.geometry.spherical.oned.ArcsSet#isArcEnd(BSPTree<Sphere1D>)": [
        "org.apache.commons.math3.geometry.spherical.oned.ArcsSet#leafBefore(BSPTree<Sphere1D>)",
        "org.apache.commons.math3.geometry.spherical.oned.ArcsSet#leafAfter(BSPTree<Sphere1D>)",
        "org.apache.commons.math3.geometry.partitioning.BSPTree#getAttribute()"
    ],
    "org.apache.commons.math3.linear.RealVector#iterator()": [
        "org.apache.commons.math3.linear.OpenMapRealVector#getDimension()",
        "org.apache.commons.math3.linear.RealVector#iterator()$Iterator$1.<init>()",
        "org.apache.commons.math3.linear.ArrayRealVector#getDimension()",
        "org.apache.commons.math3.linear.RealVector.unmodifiableRealVector(RealVector)$RealVector$1#getDimension()"
    ],
    "org.apache.commons.math3.distribution.BetaDistribution#BetaDistribution(double,double,double)": [
        "org.apache.commons.math3.distribution.BetaDistribution#BetaDistribution(RandomGenerator,double,double,double)",
        "org.apache.commons.math3.random.Well19937c#Well19937c()",
        "org.apache.commons.math3.distribution.BetaDistribution.<staticinit>()"
    ],
    "org.apache.commons.math3.stat.descriptive.summary.SumOfSquares#SumOfSquares()": [
        "org.apache.commons.math3.stat.descriptive.summary.SumOfSquares.<init>()",
        "org.apache.commons.math3.stat.descriptive.AbstractStorelessUnivariateStatistic.<init>()"
    ],
    "org.apache.commons.math3.ml.neuralnet.FeatureInitializerFactory.function(UnivariateFunction,double,double)$FeatureInitializer$1#value()": [
        "org.apache.commons.math3.analysis.FunctionUtils.multiply(DifferentiableUnivariateFunction[]...)$UnivariateFunction$1$UnivariateFunction$1#derivative()$UnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.polynomials.PolynomialSplineFunction#value(double)",
        "org.apache.commons.math3.analysis.function.Gaussian#value(double)",
        "org.apache.commons.math3.analysis.function.Tanh#value(double)",
        "org.apache.commons.math3.analysis.function.Inverse#value(double)",
        "org.apache.commons.math3.analysis.function.HarmonicOscillator#value(double)",
        "org.apache.commons.math3.analysis.FunctionUtils.fix1stArgument(BivariateFunction,double)$UnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.function.Asin#value(double)",
        "org.apache.commons.math3.analysis.function.Asinh#value(double)",
        "org.apache.commons.math3.analysis.FunctionUtils.multiply(UnivariateFunction[]...)$UnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.function.Atan#value(double)",
        "org.apache.commons.math3.analysis.FunctionUtils.toDifferentiableUnivariateFunction(UnivariateDifferentiableFunction)$DifferentiableUnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.function.Cbrt#value(double)",
        "org.apache.commons.math3.analysis.polynomials.PolynomialFunctionLagrangeForm#value(double)",
        "org.apache.commons.math3.analysis.function.Exp#value(double)",
        "org.apache.commons.math3.special.BesselJ#value(double)",
        "org.apache.commons.math3.analysis.polynomials.PolynomialFunctionNewtonForm#value(double)",
        "org.apache.commons.math3.analysis.FunctionUtils.add(UnivariateFunction[]...)$UnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.function.Sin#value(double)",
        "org.apache.commons.math3.analysis.function.Cos#value(double)",
        "org.apache.commons.math3.analysis.interpolation.UnivariatePeriodicInterpolator#interpolate(double[],double[])$UnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.function.Log10#value(double)",
        "org.apache.commons.math3.analysis.function.Sqrt#value(double)",
        "org.apache.commons.math3.analysis.function.Log#value(double)",
        "org.apache.commons.math3.analysis.function.Sinc#value(double)",
        "org.apache.commons.math3.ode.events.EventState#evaluateStep(StepInterpolator)$UnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.function.Minus#value(double)",
        "org.apache.commons.math3.analysis.integration.IterativeLegendreGaussIntegrator#stage(int)$UnivariateFunction$1#value(double)",
        "org.apache.commons.math3.optimization.general.NonLinearConjugateGradientOptimizer.LineSearchFunction#value(double)",
        "org.apache.commons.math3.analysis.function.Floor#value(double)",
        "org.apache.commons.math3.analysis.FunctionUtils.multiply(DifferentiableUnivariateFunction[]...)$DifferentiableUnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.FunctionUtils.combine(BivariateFunction,UnivariateFunction,UnivariateFunction)$UnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.FunctionUtils.add(DifferentiableUnivariateFunction[]...)$UnivariateFunction$1$UnivariateFunction$1#derivative()$UnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.function.Sinh#value(double)",
        "org.apache.commons.math3.analysis.FunctionUtils.multiply(UnivariateDifferentiableFunction[]...)$UnivariateDifferentiableFunction$1#value(double)",
        "org.apache.commons.math3.analysis.function.Tan#value(double)",
        "org.apache.commons.math3.distribution.AbstractRealDistribution#inverseCumulativeProbability(double)$UnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.FunctionUtils.add(DifferentiableUnivariateFunction[]...)$DifferentiableUnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.function.Ceil#value(double)",
        "org.apache.commons.math3.analysis.function.Logistic#value(double)",
        "org.apache.commons.math3.analysis.function.Signum#value(double)",
        "org.apache.commons.math3.analysis.function.Constant#value(double)",
        "org.apache.commons.math3.analysis.function.Atanh#value(double)",
        "org.apache.commons.math3.analysis.FunctionUtils.compose(DifferentiableUnivariateFunction[]...)$UnivariateFunction$1$UnivariateFunction$1#derivative()$UnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.FunctionUtils.add(UnivariateDifferentiableFunction[]...)$UnivariateDifferentiableFunction$1#value(double)",
        "org.apache.commons.math3.analysis.function.Abs#value(double)",
        "org.apache.commons.math3.analysis.differentiation.FiniteDifferencesDifferentiator#differentiate(UnivariateFunction)$UnivariateDifferentiableFunction$1#value(double)",
        "org.apache.commons.math3.analysis.function.Identity#value(double)",
        "org.apache.commons.math3.analysis.function.Expm1#value(double)",
        "org.apache.commons.math3.analysis.function.Logit#value(double)",
        "org.apache.commons.math3.analysis.function.Log1p#value(double)",
        "org.apache.commons.math3.analysis.FunctionUtils.fix2ndArgument(BivariateFunction,double)$UnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.FunctionUtils.toUnivariateDifferential(DifferentiableUnivariateFunction)$UnivariateDifferentiableFunction$1#value(double)",
        "org.apache.commons.math3.analysis.FunctionUtils.toDifferentiableUnivariateFunction(UnivariateDifferentiableFunction)$UnivariateFunction$1$UnivariateFunction$1#derivative()$UnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.polynomials.PolynomialFunction#value(double)",
        "org.apache.commons.math3.analysis.function.Rint#value(double)",
        "org.apache.commons.math3.analysis.FunctionUtils.compose(UnivariateFunction[]...)$UnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.function.Cosh#value(double)",
        "org.apache.commons.math3.optimization.direct.PowellOptimizer.LineSearch#search(double[],double[])$UnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.FunctionUtils.compose(DifferentiableUnivariateFunction[]...)$DifferentiableUnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.function.Acosh#value(double)",
        "org.apache.commons.math3.analysis.function.StepFunction#value(double)",
        "org.apache.commons.math3.analysis.FunctionUtils.compose(UnivariateDifferentiableFunction[]...)$UnivariateDifferentiableFunction$1#value(double)",
        "org.apache.commons.math3.analysis.function.Acos#value(double)",
        "org.apache.commons.math3.analysis.function.Power#value(double)",
        "org.apache.commons.math3.optim.nonlinear.scalar.LineSearch#search(double[],double[])$UnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.function.Sigmoid#value(double)",
        "org.apache.commons.math3.analysis.function.Ulp#value(double)"
    ],
    "org.apache.commons.math3.distribution.EnumeratedRealDistribution#getNumericalMean()": [
        "org.apache.commons.math3.util.Pair#getValue()",
        "org.apache.commons.math3.distribution.EnumeratedDistribution#getPmf()",
        "org.apache.commons.math3.util.Pair#getKey()",
        "org.apache.commons.math3.optim.PointVectorValuePair#getValue()",
        "org.apache.commons.math3.optimization.PointVectorValuePair#getValue()"
    ],
    "org.apache.commons.math3.stat.descriptive.SynchronizedSummaryStatistics#setMeanImpl(StorelessUnivariateStatistic)": ["org.apache.commons.math3.stat.descriptive.SummaryStatistics#setMeanImpl(StorelessUnivariateStatistic)"],
    "org.apache.commons.math3.util.MathArrays.ebeMultiply(double[],double[])": ["org.apache.commons.math3.util.MathArrays.checkEqualLength(double[],double[])"],
    "org.apache.commons.math3.exception.MathArithmeticException#MathArithmeticException()": [
        "org.apache.commons.math3.exception.MathArithmeticException.<init>()",
        "org.apache.commons.math3.exception.util.ExceptionContext#ExceptionContext(Throwable)",
        "org.apache.commons.math3.exception.util.LocalizedFormats.<staticinit>()"
    ],
    "org.apache.commons.math3.geometry.partitioning.AbstractSubHyperplane#copySelf()": [
        "org.apache.commons.math3.geometry.euclidean.twod.Line#copySelf()",
        "org.apache.commons.math3.geometry.euclidean.oned.OrientedPoint#copySelf()",
        "org.apache.commons.math3.geometry.spherical.oned.LimitAngle#copySelf()",
        "org.apache.commons.math3.geometry.euclidean.threed.Plane#copySelf()",
        "org.apache.commons.math3.geometry.spherical.twod.Circle#copySelf()"
    ],
    "org.apache.commons.math3.optim.PointVectorValuePair#getValue()": ["org.apache.commons.math3.util.Pair#getValue()"],
    "org.apache.commons.math3.optimization.direct.CMAESOptimizer#optimizeInternal(int,MultivariateFunction,GoalType,OptimizationData[]...)": ["org.apache.commons.math3.optimization.direct.CMAESOptimizer#parseOptimizationData(OptimizationData[]...)"],
    "org.apache.commons.math3.distribution.TriangularDistribution#TriangularDistribution(RandomGenerator,double,double,double)": [
        "org.apache.commons.math3.distribution.TriangularDistribution.<init>()",
        "org.apache.commons.math3.util.FastMath.ulp(double)",
        "org.apache.commons.math3.util.FastMath.max(double,double)",
        "org.apache.commons.math3.distribution.AbstractRealDistribution#AbstractRealDistribution(RandomGenerator)",
        "org.apache.commons.math3.exception.util.LocalizedFormats.<staticinit>()"
    ],
    "org.apache.commons.math3.linear.ArrayFieldVector#walkInDefaultOrder(FieldVectorPreservingVisitor<T extends FieldElement>)": [
        "org.apache.commons.math3.linear.ArrayFieldVector#getEntry(int)",
        "org.apache.commons.math3.linear.ArrayFieldVector#getDimension()"
    ],
    "org.apache.commons.math3.util.ContinuedFraction#evaluate(double,double)": ["org.apache.commons.math3.util.ContinuedFraction#evaluate(double,double,int)"],
    "org.apache.commons.math3.dfp.DfpDec#DfpDec(DfpField,byte)": [
        "org.apache.commons.math3.dfp.DfpDec.<init>()",
        "org.apache.commons.math3.dfp.Dfp#Dfp(DfpField,byte)"
    ],
    "org.apache.commons.math3.optimization.general.GaussNewtonOptimizer#GaussNewtonOptimizer()": ["org.apache.commons.math3.optimization.general.GaussNewtonOptimizer#GaussNewtonOptimizer(boolean)"],
    "org.apache.commons.math3.stat.descriptive.moment.SecondMoment#increment(double)": ["org.apache.commons.math3.stat.descriptive.moment.FirstMoment#increment(double)"],
    "org.apache.commons.math3.linear.BlockRealMatrix#BlockRealMatrix(double[][])": [
        "org.apache.commons.math3.linear.BlockRealMatrix.toBlocksLayout(double[][])",
        "org.apache.commons.math3.linear.BlockRealMatrix#BlockRealMatrix(int,int,double[][],boolean)"
    ],
    "org.apache.commons.math3.random.RandomAdaptor#nextDouble()": [
        "org.apache.commons.math3.random.SynchronizedRandomGenerator#nextDouble()",
        "org.apache.commons.math3.random.RandomGeneratorFactory.createRandomGenerator(Random)$RandomGenerator$1#nextDouble()",
        "org.apache.commons.math3.random.RandomAdaptor#nextDouble()",
        "org.apache.commons.math3.random.BitsStreamGenerator#nextDouble()"
    ],
    "org.apache.commons.math3.stat.correlation.PearsonsCorrelation#computeCorrelationMatrix(RealMatrix)": [
        "org.apache.commons.math3.linear.DiagonalMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.Array2DRowRealMatrix#getColumnDimension()",
        "org.apache.commons.math3.stat.correlation.PearsonsCorrelation#checkSufficientData(RealMatrix)",
        "org.apache.commons.math3.linear.BlockFieldMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.Array2DRowRealMatrix#setEntry(int,int,double)",
        "org.apache.commons.math3.linear.OpenMapRealMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.BlockRealMatrix#setEntry(int,int,double)",
        "org.apache.commons.math3.linear.OpenMapRealMatrix#setEntry(int,int,double)",
        "org.apache.commons.math3.linear.Array2DRowFieldMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.BlockRealMatrix#BlockRealMatrix(int,int)",
        "org.apache.commons.math3.linear.SparseFieldMatrix#getColumnDimension()",
        "org.apache.commons.math3.stat.correlation.PearsonsCorrelation#correlation(double[],double[])",
        "org.apache.commons.math3.linear.BlockRealMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.AbstractRealMatrix#getColumn(int)",
        "org.apache.commons.math3.linear.BlockRealMatrix#getColumn(int)",
        "org.apache.commons.math3.linear.DiagonalMatrix#setEntry(int,int,double)"
    ],
    "org.apache.commons.math3.dfp.Dfp#tan()": ["org.apache.commons.math3.dfp.DfpMath.tan(Dfp)"],
    "org.apache.commons.math3.analysis.integration.gauss.HermiteRuleFactory#computeRule(int)": [
        "org.apache.commons.math3.analysis.integration.gauss.HermiteRuleFactory.<staticinit>()",
        "org.apache.commons.math3.analysis.integration.gauss.BaseRuleFactory#getRuleInternal(int)",
        "org.apache.commons.math3.util.Pair#getFirst()",
        "org.apache.commons.math3.util.FastMath.sqrt(double)",
        "org.apache.commons.math3.util.Pair#Pair(K,V)"
    ],
    "org.apache.commons.math3.analysis.function.Atanh#value(double)": ["org.apache.commons.math3.util.FastMath.atanh(double)"],
    "org.apache.commons.math3.stat.inference.ChiSquareTest#checkArray(long[][])": [
        "org.apache.commons.math3.exception.DimensionMismatchException#DimensionMismatchException(int,int)",
        "org.apache.commons.math3.util.MathArrays.checkNonNegative(long[][])",
        "org.apache.commons.math3.util.MathArrays.checkRectangular(long[][])"
    ],
    "org.apache.commons.math3.stat.descriptive.moment.Variance#evaluate(double[])": [
        "org.apache.commons.math3.exception.util.LocalizedFormats.<staticinit>()",
        "org.apache.commons.math3.stat.descriptive.moment.Variance#evaluate(double[],int,int)"
    ],
    "org.apache.commons.math3.geometry.euclidean.threed.Line#contains(Vector3D)": ["org.apache.commons.math3.geometry.euclidean.threed.Line#distance(Vector3D)"],
    "org.apache.commons.math3.userguide.filter.CannonballExample.createComponent()": [
        "org.apache.commons.math3.userguide.filter.CannonballExample.cannonballTest(Chart)",
        "org.apache.commons.math3.userguide.filter.CannonballExample.createChart(String,LegendPosition)"
    ],
    "org.apache.commons.math3.analysis.polynomials.PolynomialsUtils.buildPolynomial(int,List<BigFraction>,RecurrenceCoefficientsGenerator)": [
        "org.apache.commons.math3.util.FastMath.sqrt(double)",
        "org.apache.commons.math3.analysis.polynomials.PolynomialsUtils.computeUpToDegree(int,int,RecurrenceCoefficientsGenerator,List<BigFraction>)",
        "org.apache.commons.math3.analysis.polynomials.PolynomialFunction#PolynomialFunction(double[])",
        "org.apache.commons.math3.util.FastMath.floor(double)"
    ],
    "org.apache.commons.math3.geometry.euclidean.twod.Line#contains(Vector2D)": [
        "org.apache.commons.math3.util.FastMath.abs(double)",
        "org.apache.commons.math3.geometry.euclidean.twod.Line#getOffset(Vector<Euclidean2D>)"
    ],
    "org.apache.commons.math3.ml.neuralnet.Network#addLink(Neuron,Neuron)": [
        "org.apache.commons.math3.ml.neuralnet.Neuron#getIdentifier()",
        "org.apache.commons.math3.ml.neuralnet.Network#addLinkToLinkSet(Set<Long>,long)",
        "org.apache.commons.math3.ml.neuralnet.Network#getNeuron(long)"
    ],
    "org.apache.commons.math3.analysis.interpolation.TricubicInterpolatingFunction#computeCoefficients(double[])": ["org.apache.commons.math3.analysis.interpolation.TricubicInterpolatingFunction.<staticinit>()"],
    "org.apache.commons.math3.util.MultidimensionalCounter#getCount(int[]...)": ["org.apache.commons.math3.exception.DimensionMismatchException#DimensionMismatchException(int,int)"],
    "org.apache.commons.math3.linear.ArrayRealVector#ArrayRealVector(Double[])": [
        "org.apache.commons.math3.linear.RealVector.<init>()",
        "org.apache.commons.math3.linear.ArrayRealVector.<init>()"
    ],
    "org.apache.commons.math3.optim.linear.LinearObjectiveFunction#value(double[])": [
        "org.apache.commons.math3.linear.ArrayRealVector#ArrayRealVector(double[],boolean)",
        "org.apache.commons.math3.optim.linear.LinearObjectiveFunction#value(RealVector)"
    ],
    "org.apache.commons.math3.genetics.ListPopulation#iterator()": ["org.apache.commons.math3.genetics.ListPopulation#getChromosomes()"],
    "org.apache.commons.math3.ode.nonstiff.DormandPrince853FieldIntegrator#getC()": [
        "org.apache.commons.math3.ode.AbstractFieldIntegrator#getField()",
        "org.apache.commons.math3.analysis.differentiation.SparseGradient#multiply(double)",
        "org.apache.commons.math3.fraction.BigFractionField#getOne()",
        "org.apache.commons.math3.fraction.FractionField#getOne()",
        "org.apache.commons.math3.dfp.Dfp#multiply(double)",
        "org.apache.commons.math3.analysis.differentiation.SparseGradient#getField()$Field$1#getOne()",
        "org.apache.commons.math3.ode.nonstiff.EmbeddedRungeKuttaFieldIntegrator#fraction(int,int)",
        "org.apache.commons.math3.complex.ComplexField#getOne()",
        "org.apache.commons.math3.util.BigRealField#getOne()",
        "org.apache.commons.math3.util.Decimal64#multiply(double)",
        "org.apache.commons.math3.ode.nonstiff.EmbeddedRungeKuttaFieldIntegrator#fraction(double,double)",
        "org.apache.commons.math3.analysis.differentiation.DerivativeStructure#multiply(double)",
        "org.apache.commons.math3.dfp.DfpField#getOne()",
        "org.apache.commons.math3.analysis.differentiation.DerivativeStructure#getField()$Field$1#getOne()",
        "org.apache.commons.math3.util.MathArrays.buildArray(Field<T>,int)",
        "org.apache.commons.math3.util.Decimal64Field#getOne()"
    ],
    "org.apache.commons.math3.analysis.solvers.BracketingNthOrderBrentSolver#BracketingNthOrderBrentSolver(double,double,int)": [
        "org.apache.commons.math3.analysis.solvers.BracketingNthOrderBrentSolver.<init>()",
        "org.apache.commons.math3.analysis.solvers.AbstractUnivariateSolver#AbstractUnivariateSolver(double,double)",
        "org.apache.commons.math3.analysis.solvers.AllowedSolution.<staticinit>()"
    ],
    "org.apache.commons.math3.dfp.Dfp#atan2(Dfp)": [
        "org.apache.commons.math3.dfp.Dfp#atan()",
        "org.apache.commons.math3.dfp.DfpDec#newInstance(double)",
        "org.apache.commons.math3.dfp.Dfp#divide(Dfp)",
        "org.apache.commons.math3.dfp.Dfp#getTwo()",
        "org.apache.commons.math3.dfp.Dfp#multiply(Dfp)",
        "org.apache.commons.math3.dfp.Dfp#add(Dfp)",
        "org.apache.commons.math3.dfp.Dfp#sqrt()",
        "org.apache.commons.math3.util.FastMath.<staticinit>()",
        "org.apache.commons.math3.dfp.Dfp#subtract(Dfp)",
        "org.apache.commons.math3.dfp.Dfp#newInstance(double)"
    ],
    "org.apache.commons.math3.linear.SparseFieldVector#ebeDivide(FieldVector<T extends FieldElement>)": [
        "org.apache.commons.math3.linear.SparseFieldVector#checkVectorDimensions(int)",
        "org.apache.commons.math3.util.OpenIntToFieldHashMap.Iterator#hasNext()",
        "org.apache.commons.math3.linear.SparseFieldVector#getEntry(int)",
        "org.apache.commons.math3.linear.ArrayFieldVector#getDimension()",
        "org.apache.commons.math3.util.OpenIntToFieldHashMap.Iterator#key()",
        "org.apache.commons.math3.util.OpenIntToFieldHashMap.Iterator#value()",
        "org.apache.commons.math3.linear.SparseFieldVector#setEntry(int,T extends FieldElement)",
        "org.apache.commons.math3.linear.ArrayFieldVector#getEntry(int)",
        "org.apache.commons.math3.linear.SparseFieldVector#getDimension()",
        "org.apache.commons.math3.util.OpenIntToFieldHashMap#iterator()",
        "org.apache.commons.math3.util.OpenIntToFieldHashMap.Iterator#advance()",
        "org.apache.commons.math3.linear.SparseFieldVector#SparseFieldVector(SparseFieldVector<T extends FieldElement>)"
    ],
    "org.apache.commons.math3.stat.correlation.StorelessBivariateCovariance#StorelessBivariateCovariance(boolean)": ["org.apache.commons.math3.stat.correlation.StorelessBivariateCovariance.<init>()"],
    "org.apache.commons.math3.special.Gamma.lanczos(double)": ["org.apache.commons.math3.special.Gamma.<staticinit>()"],
    "org.apache.commons.math3.geometry.euclidean.twod.Vector2DFormat#Vector2DFormat(String,String,String,NumberFormat)": [
        "org.apache.commons.math3.geometry.VectorFormat#VectorFormat(String,String,String,NumberFormat)",
        "org.apache.commons.math3.geometry.euclidean.twod.Vector2DFormat.<init>()"
    ],
    "org.apache.commons.math3.random.ValueServer#getValuesFileURL()": ["org.apache.commons.math3.random.ValueServer.<staticinit>()"],
    "org.apache.commons.math3.linear.SchurTransformer#computeShift(int,int,int,ShiftInfo)": [
        "org.apache.commons.math3.util.FastMath.abs(double)",
        "org.apache.commons.math3.util.FastMath.sqrt(double)"
    ],
    "org.apache.commons.math3.distribution.GammaDistribution#logDensity(double)": [
        "org.apache.commons.math3.util.FastMath.log1p(double)",
        "org.apache.commons.math3.util.FastMath.log(double)",
        "org.apache.commons.math3.special.Gamma.<staticinit>()"
    ],
    "org.apache.commons.math3.linear.SparseFieldVector#mapMultiply(T extends FieldElement)": [
        "org.apache.commons.math3.linear.SparseFieldVector#copy()",
        "org.apache.commons.math3.linear.ArrayFieldVector#mapMultiplyToSelf(T extends FieldElement)",
        "org.apache.commons.math3.linear.SparseFieldVector#mapMultiplyToSelf(T extends FieldElement)"
    ],
    "org.apache.commons.math3.optim.linear.Relationship#oppositeRelationship()": ["org.apache.commons.math3.optim.linear.Relationship.<staticinit>()"],
    "org.apache.commons.math3.random.AbstractWell#AbstractWell(int,int,int,int)": ["org.apache.commons.math3.random.AbstractWell#AbstractWell(int,int,int,int,int)"],
    "org.apache.commons.math3.distribution.AbstractIntegerDistribution#sample(int)": [
        "org.apache.commons.math3.distribution.AbstractIntegerDistribution#sample()",
        "org.apache.commons.math3.distribution.UniformIntegerDistribution#sample()",
        "org.apache.commons.math3.distribution.PoissonDistribution#sample()",
        "org.apache.commons.math3.distribution.ZipfDistribution#sample()",
        "org.apache.commons.math3.distribution.EnumeratedIntegerDistribution#sample()",
        "org.apache.commons.math3.exception.util.LocalizedFormats.<staticinit>()"
    ],
    "org.apache.commons.math3.geometry.euclidean.oned.Vector1D#equals(Object)": [
        "org.apache.commons.math3.geometry.euclidean.oned.Vector1D.<staticinit>()",
        "org.apache.commons.math3.geometry.euclidean.oned.Vector1D#isNaN()"
    ],
    "org.apache.commons.math3.optim.AbstractOptimizationProblem#getIterationCounter()": [
        "org.apache.commons.math3.util.Incrementor#Incrementor(int,MaxCountExceededCallback)",
        "org.apache.commons.math3.optim.AbstractOptimizationProblem.<staticinit>()"
    ],
    "org.apache.commons.math3.util.Decimal64#linearCombination(Decimal64,Decimal64,Decimal64,Decimal64,Decimal64,Decimal64,Decimal64,Decimal64)": [
        "org.apache.commons.math3.util.Decimal64#Decimal64(double)",
        "org.apache.commons.math3.util.MathArrays.linearCombination(double,double,double,double,double,double,double,double)"
    ],
    "org.apache.commons.math3.fraction.Fraction#Fraction(int)": ["org.apache.commons.math3.fraction.Fraction#Fraction(int,int)"],
    "org.apache.commons.math3.analysis.differentiation.DerivativeStructure#getField()$Field$1#getZero()": [
        "org.apache.commons.math3.analysis.differentiation.DerivativeStructure#DerivativeStructure(int,int,double[]...)",
        "org.apache.commons.math3.analysis.differentiation.DSCompiler#getOrder()",
        "org.apache.commons.math3.analysis.differentiation.DSCompiler#getFreeParameters()"
    ],
    "org.apache.commons.math3.linear.EigenDecomposition.Solver#isNonSingular()": [
        "org.apache.commons.math3.util.Precision.equals(double,double,double)",
        "org.apache.commons.math3.linear.EigenDecomposition.<staticinit>()",
        "org.apache.commons.math3.linear.EigenDecomposition.Solver#eigenvalueNorm(int)",
        "org.apache.commons.math3.util.FastMath.max(double,double)"
    ],
    "org.apache.commons.math3.linear.RRQRDecomposition#getSolver()": [
        "org.apache.commons.math3.linear.QRDecomposition#getSolver()",
        "org.apache.commons.math3.linear.RRQRDecomposition#getP()",
        "org.apache.commons.math3.linear.RRQRDecomposition.Solver#Solver(DecompositionSolver,RealMatrix)"
    ],
    "org.apache.commons.math3.stat.descriptive.moment.Mean#Mean()": [
        "org.apache.commons.math3.stat.descriptive.moment.Mean.<init>()",
        "org.apache.commons.math3.stat.descriptive.moment.FirstMoment#FirstMoment()",
        "org.apache.commons.math3.stat.descriptive.AbstractStorelessUnivariateStatistic.<init>()"
    ],
    "org.apache.commons.math3.distribution.NormalDistribution#probability(double,double)": [
        "org.apache.commons.math3.special.Erf.erf(double,double)",
        "org.apache.commons.math3.distribution.NormalDistribution.<staticinit>()",
        "org.apache.commons.math3.exception.util.LocalizedFormats.<staticinit>()"
    ],
    "org.apache.commons.math3.linear.TriDiagonalTransformer#getQ()": [
        "org.apache.commons.math3.linear.TriDiagonalTransformer#getQT()",
        "org.apache.commons.math3.linear.BlockRealMatrix#transpose()",
        "org.apache.commons.math3.linear.AbstractRealMatrix#transpose()"
    ],
    "org.apache.commons.math3.geometry.euclidean.twod.NestedLoops#add(Vector2D[])": [
        "org.apache.commons.math3.geometry.euclidean.twod.NestedLoops#NestedLoops(Vector2D[],double)",
        "org.apache.commons.math3.geometry.euclidean.twod.NestedLoops#add(NestedLoops)"
    ],
    "org.apache.commons.math3.exception.NumberIsTooLargeException#NumberIsTooLargeException(Localizable,Number,Number,boolean)": ["org.apache.commons.math3.exception.NumberIsTooLargeException.<init>()"],
    "org.apache.commons.math3.util.IntegerSequence.Incrementor.<staticinit>()": ["org.apache.commons.math3.util.IntegerSequence.Incrementor$MaxCountExceededCallback$1.<init>()"],
    "org.apache.commons.math3.util.FastMath.nextUp(float)": ["org.apache.commons.math3.util.FastMath.nextAfter(float,double)"],
    "org.apache.commons.math3.geometry.euclidean.threed.Vector3D#subtract(double,Vector<Euclidean3D>)": ["org.apache.commons.math3.geometry.euclidean.threed.Vector3D#Vector3D(double,Vector3D,double,Vector3D)"],
    "org.apache.commons.math3.stat.descriptive.SynchronizedDescriptiveStatistics#toString()": ["org.apache.commons.math3.stat.descriptive.DescriptiveStatistics#toString()"],
    "org.apache.commons.math3.dfp.Dfp#remainder(Dfp)": [
        "org.apache.commons.math3.dfp.Dfp#rint()",
        "org.apache.commons.math3.dfp.Dfp#subtract(Dfp)",
        "org.apache.commons.math3.dfp.Dfp#divide(Dfp)",
        "org.apache.commons.math3.dfp.Dfp#multiply(Dfp)"
    ],
    "org.apache.commons.math3.ml.neuralnet.twod.NeuronSquareMesh2D#NeuronSquareMesh2D(int,boolean,int,boolean,SquareNeighbourhood,FeatureInitializer[])": [
        "org.apache.commons.math3.ml.neuralnet.Network#createNeuron(double[])",
        "org.apache.commons.math3.ml.neuralnet.FeatureInitializerFactory.randomize(RealDistribution,FeatureInitializer)$FeatureInitializer$1#value()",
        "org.apache.commons.math3.ml.neuralnet.twod.NeuronSquareMesh2D#createLinks()",
        "org.apache.commons.math3.ml.neuralnet.Network#Network(long,int)",
        "org.apache.commons.math3.ml.neuralnet.FeatureInitializerFactory.function(UnivariateFunction,double,double)$FeatureInitializer$1#value()",
        "org.apache.commons.math3.ml.neuralnet.twod.NeuronSquareMesh2D.<init>()"
    ],
    "org.apache.commons.math3.linear.BlockRealMatrix#BlockRealMatrix(int,int,double[][],boolean)": [
        "org.apache.commons.math3.exception.DimensionMismatchException#DimensionMismatchException(int,int)",
        "org.apache.commons.math3.linear.AbstractRealMatrix#AbstractRealMatrix(int,int)",
        "org.apache.commons.math3.linear.BlockRealMatrix#blockHeight(int)",
        "org.apache.commons.math3.linear.BlockRealMatrix.<init>()",
        "org.apache.commons.math3.linear.BlockRealMatrix.<staticinit>()",
        "org.apache.commons.math3.linear.BlockRealMatrix#blockWidth(int)"
    ],
    "org.apache.commons.math3.analysis.interpolation.InterpolatingMicrosphere#illuminate(double[],double,double)": [
        "org.apache.commons.math3.util.MathArrays.cosAngle(double[],double[])",
        "org.apache.commons.math3.analysis.interpolation.InterpolatingMicrosphere.FacetData#FacetData(double,double)"
    ],
    "org.apache.commons.math3.distribution.EnumeratedRealDistribution#sample()": ["org.apache.commons.math3.distribution.EnumeratedDistribution#sample()"],
    "org.apache.commons.math3.optim.univariate.BrentOptimizer#best(UnivariatePointValuePair,UnivariatePointValuePair,boolean)": ["org.apache.commons.math3.optim.univariate.UnivariatePointValuePair#getValue()"],
    "org.apache.commons.math3.fitting.CurveFitter#addObservedPoint(double,double)": ["org.apache.commons.math3.fitting.CurveFitter#addObservedPoint(double,double,double)"],
    "org.apache.commons.math3.analysis.function.Asin#value(double)": ["org.apache.commons.math3.util.FastMath.asin(double)"],
    "org.apache.commons.math3.linear.RealVector.unmodifiableRealVector(RealVector)$RealVector$1#mapAddToSelf(double)": ["org.apache.commons.math3.exception.MathUnsupportedOperationException#MathUnsupportedOperationException()"],
    "org.apache.commons.math3.analysis.differentiation.DerivativeStructure#compose(double[]...)": [
        "org.apache.commons.math3.exception.DimensionMismatchException#DimensionMismatchException(int,int)",
        "org.apache.commons.math3.analysis.differentiation.DerivativeStructure#DerivativeStructure(DSCompiler)",
        "org.apache.commons.math3.analysis.differentiation.DSCompiler#compose(double[],int,double[],double[],int)",
        "org.apache.commons.math3.analysis.differentiation.DerivativeStructure#getOrder()"
    ],
    "org.apache.commons.math3.linear.RealVectorFormat#RealVectorFormat()": [
        "org.apache.commons.math3.linear.RealVectorFormat#RealVectorFormat(String,String,String,NumberFormat)",
        "org.apache.commons.math3.linear.RealVectorFormat.<staticinit>()",
        "org.apache.commons.math3.util.CompositeFormat.getDefaultNumberFormat()"
    ],
    "org.apache.commons.math3.optim.univariate.SimpleUnivariateValueChecker#SimpleUnivariateValueChecker(double,double,int)": [
        "org.apache.commons.math3.optim.univariate.SimpleUnivariateValueChecker.<init>()",
        "org.apache.commons.math3.optim.AbstractConvergenceChecker#AbstractConvergenceChecker(double,double)"
    ],
    "org.apache.commons.math3.stat.regression.OLSMultipleLinearRegression#calculateAdjustedRSquared()": [
        "org.apache.commons.math3.linear.DiagonalMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.Array2DRowRealMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.BlockFieldMatrix#getColumnDimension()",
        "org.apache.commons.math3.stat.regression.OLSMultipleLinearRegression#calculateRSquared()",
        "org.apache.commons.math3.linear.SparseFieldMatrix#getRowDimension()",
        "org.apache.commons.math3.stat.regression.OLSMultipleLinearRegression#calculateTotalSumOfSquares()",
        "org.apache.commons.math3.linear.OpenMapRealMatrix#getColumnDimension()",
        "org.apache.commons.math3.stat.regression.OLSMultipleLinearRegression#calculateResidualSumOfSquares()",
        "org.apache.commons.math3.linear.OpenMapRealMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.DiagonalMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.Array2DRowFieldMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.SparseFieldMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.BlockFieldMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.BlockRealMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.Array2DRowRealMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.Array2DRowFieldMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.BlockRealMatrix#getColumnDimension()",
        "org.apache.commons.math3.stat.regression.AbstractMultipleLinearRegression#getX()",
        "org.apache.commons.math3.stat.regression.AbstractMultipleLinearRegression#isNoIntercept()"
    ],
    "org.apache.commons.math3.distribution.EnumeratedRealDistribution#getSupportLowerBound()": [
        "org.apache.commons.math3.util.Pair#getValue()",
        "org.apache.commons.math3.distribution.EnumeratedDistribution#getPmf()",
        "org.apache.commons.math3.util.Pair#getKey()",
        "org.apache.commons.math3.optim.PointVectorValuePair#getValue()",
        "org.apache.commons.math3.optimization.PointVectorValuePair#getValue()"
    ],
    "org.apache.commons.math3.distribution.MultivariateNormalDistribution#density(double[])": [
        "org.apache.commons.math3.exception.DimensionMismatchException#DimensionMismatchException(int,int)",
        "org.apache.commons.math3.util.FastMath.pow(double,int)",
        "org.apache.commons.math3.util.FastMath.pow(double,double)",
        "org.apache.commons.math3.distribution.AbstractMultivariateRealDistribution#getDimension()",
        "org.apache.commons.math3.util.FastMath.<staticinit>()",
        "org.apache.commons.math3.distribution.MultivariateNormalDistribution#getExponentTerm(double[])"
    ],
    "org.apache.commons.math3.geometry.partitioning.AbstractRegion#getBoundarySize()": [
        "org.apache.commons.math3.geometry.partitioning.AbstractRegion#getTree(boolean)",
        "org.apache.commons.math3.geometry.partitioning.BoundarySizeVisitor#BoundarySizeVisitor()",
        "org.apache.commons.math3.geometry.partitioning.BSPTree#visit(BSPTreeVisitor<S extends Space>)",
        "org.apache.commons.math3.geometry.partitioning.BoundarySizeVisitor#getSize()"
    ],
    "org.apache.commons.math3.linear.ArrayRealVector#getNorm()": ["org.apache.commons.math3.util.FastMath.sqrt(double)"],
    "org.apache.commons.math3.geometry.spherical.twod.S2Point#getSpace()": ["org.apache.commons.math3.geometry.spherical.twod.Sphere2D.getInstance()"],
    "org.apache.commons.math3.random.RandomDataImpl#nextGamma(double,double)": ["org.apache.commons.math3.random.RandomDataGenerator#nextGamma(double,double)"],
    "org.apache.commons.math3.linear.OpenMapRealVector#unitize()": [
        "org.apache.commons.math3.linear.RealVector#getNorm()",
        "org.apache.commons.math3.util.OpenIntToDoubleHashMap.Iterator#value()",
        "org.apache.commons.math3.util.OpenIntToDoubleHashMap#iterator()",
        "org.apache.commons.math3.linear.OpenMapRealVector#isDefaultValue(double)",
        "org.apache.commons.math3.exception.util.LocalizedFormats.<staticinit>()",
        "org.apache.commons.math3.util.OpenIntToDoubleHashMap.Iterator#advance()",
        "org.apache.commons.math3.util.OpenIntToDoubleHashMap#put(int,double)",
        "org.apache.commons.math3.linear.RealVector.unmodifiableRealVector(RealVector)$RealVector$1#getNorm()",
        "org.apache.commons.math3.linear.ArrayRealVector#getNorm()",
        "org.apache.commons.math3.util.OpenIntToDoubleHashMap.Iterator#key()",
        "org.apache.commons.math3.util.OpenIntToDoubleHashMap.Iterator#hasNext()"
    ],
    "org.apache.commons.math3.analysis.solvers.NewtonRaphsonSolver#solve(int,UnivariateDifferentiableFunction,double,double)": [
        "org.apache.commons.math3.analysis.solvers.UnivariateSolverUtils.midpoint(double,double)",
        "org.apache.commons.math3.analysis.solvers.BaseAbstractUnivariateSolver#solve(int,FUNC extends UnivariateFunction,double)"
    ],
    "org.apache.commons.math3.complex.Complex#log()": [
        "org.apache.commons.math3.complex.Complex.<staticinit>()",
        "org.apache.commons.math3.complex.Complex#abs()",
        "org.apache.commons.math3.util.FastMath.log(double)",
        "org.apache.commons.math3.complex.Complex#createComplex(double,double)",
        "org.apache.commons.math3.util.FastMath.atan2(double,double)"
    ],
    "org.apache.commons.math3.random.RandomDataImpl#nextInt(int,int)": ["org.apache.commons.math3.random.RandomDataGenerator#nextInt(int,int)"],
    "org.apache.commons.math3.util.BigReal#BigReal(char[])": ["org.apache.commons.math3.util.BigReal.<init>()"],
    "org.apache.commons.math3.fraction.BigFraction#add(BigFraction)": [
        "org.apache.commons.math3.fraction.BigFraction.<staticinit>()",
        "org.apache.commons.math3.fraction.BigFraction#BigFraction(BigInteger,BigInteger)",
        "org.apache.commons.math3.exception.util.LocalizedFormats.<staticinit>()"
    ],
    "org.apache.commons.math3.stat.inference.OneWayAnova#anovaPValue(Collection<double[]>)": [
        "org.apache.commons.math3.distribution.FDistribution#cumulativeProbability(double)",
        "org.apache.commons.math3.stat.inference.OneWayAnova#anovaStats(Collection<double[]>)",
        "org.apache.commons.math3.distribution.FDistribution#FDistribution(double,double,double)"
    ],
    "org.apache.commons.math3.analysis.integration.BaseAbstractUnivariateIntegrator#getMaximalIterationCount()": ["org.apache.commons.math3.util.IntegerSequence.Incrementor#getMaximalCount()"],
    "org.apache.commons.math3.util.Decimal64.<staticinit>()": ["org.apache.commons.math3.util.Decimal64#Decimal64(double)"],
    "org.apache.commons.math3.geometry.euclidean.threed.FieldRotation#FieldRotation(FieldVector3D<T extends RealFieldElement>,FieldVector3D<T extends RealFieldElement>,FieldVector3D<T extends RealFieldElement>,FieldVector3D<T extends RealFieldElement>)": [
        "org.apache.commons.math3.util.MathArrays.buildArray(Field<T>,int,int)",
        "org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D.crossProduct(FieldVector3D<T extends RealFieldElement>,FieldVector3D<T extends RealFieldElement>)",
        "org.apache.commons.math3.geometry.euclidean.threed.FieldRotation#mat2quat(T extends RealFieldElement[][])",
        "org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D#getZ()",
        "org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D#normalize()",
        "org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D#getY()",
        "org.apache.commons.math3.geometry.euclidean.threed.FieldRotation.<init>()",
        "org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D#getX()"
    ],
    "org.apache.commons.math3.optimization.direct.CMAESOptimizer#CMAESOptimizer(int)": [
        "org.apache.commons.math3.optimization.direct.CMAESOptimizer#CMAESOptimizer(int,double[],int,double,boolean,int,int,RandomGenerator,boolean,ConvergenceChecker<PointValuePair>)",
        "org.apache.commons.math3.optimization.direct.CMAESOptimizer.<staticinit>()"
    ],
    "org.apache.commons.math3.distribution.BetaDistribution#getNumericalMean()": [
        "org.apache.commons.math3.distribution.BetaDistribution#getAlpha()",
        "org.apache.commons.math3.distribution.BetaDistribution#getBeta()"
    ],
    "org.apache.commons.math3.random.RandomDataGenerator#nextLong(long,long)": [
        "org.apache.commons.math3.random.RandomDataGenerator#getRandomGenerator()",
        "org.apache.commons.math3.random.RandomDataGenerator.nextLong(RandomGenerator,long)",
        "org.apache.commons.math3.exception.util.LocalizedFormats.<staticinit>()",
        "org.apache.commons.math3.random.BitsStreamGenerator#nextInt(int)",
        "org.apache.commons.math3.random.RandomAdaptor#nextLong()",
        "org.apache.commons.math3.random.RandomAdaptor#nextInt(int)",
        "org.apache.commons.math3.random.RandomGeneratorFactory.createRandomGenerator(Random)$RandomGenerator$1#nextLong()",
        "org.apache.commons.math3.random.AbstractRandomGenerator#nextLong()",
        "org.apache.commons.math3.random.RandomGeneratorFactory.createRandomGenerator(Random)$RandomGenerator$1#nextInt(int)",
        "org.apache.commons.math3.random.BitsStreamGenerator#nextLong()",
        "org.apache.commons.math3.random.AbstractRandomGenerator#nextInt(int)",
        "org.apache.commons.math3.random.SynchronizedRandomGenerator#nextInt(int)",
        "org.apache.commons.math3.random.SynchronizedRandomGenerator#nextLong()"
    ],
    "org.apache.commons.math3.geometry.partitioning.utilities.AVLTree#insert(T extends Comparable)": [
        "org.apache.commons.math3.geometry.partitioning.utilities.AVLTree.Node#insert(T extends Comparable)",
        "org.apache.commons.math3.geometry.partitioning.utilities.AVLTree.Node#Node(T extends Comparable,Node)"
    ],
    "org.apache.commons.math3.linear.ArrayRealVector#ArrayRealVector(double[],int,int)": [
        "org.apache.commons.math3.linear.RealVector.<init>()",
        "org.apache.commons.math3.exception.NullArgumentException#NullArgumentException()",
        "org.apache.commons.math3.linear.ArrayRealVector.<init>()"
    ],
    "org.apache.commons.math3.analysis.interpolation.InterpolatingMicrosphere2D#InterpolatingMicrosphere2D(int,double,double,double)": [
        "org.apache.commons.math3.analysis.interpolation.InterpolatingMicrosphere#add(double[],boolean)",
        "org.apache.commons.math3.analysis.interpolation.InterpolatingMicrosphere#InterpolatingMicrosphere(int,int,double,double,double)",
        "org.apache.commons.math3.analysis.interpolation.InterpolatingMicrosphere2D.<init>()",
        "org.apache.commons.math3.util.MathUtils.<staticinit>()",
        "org.apache.commons.math3.analysis.interpolation.InterpolatingMicrosphere2D.<staticinit>()",
        "org.apache.commons.math3.util.FastMath.sin(double)",
        "org.apache.commons.math3.util.FastMath.cos(double)"
    ],
    "org.apache.commons.math3.linear.ArrayRealVector.<staticinit>()": ["org.apache.commons.math3.linear.RealVectorFormat.getInstance()"],
    "org.apache.commons.math3.linear.MatrixUtils.serializeRealMatrix(RealMatrix,ObjectOutputStream)": [
        "org.apache.commons.math3.linear.DiagonalMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.Array2DRowRealMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.BlockFieldMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.SparseFieldMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.DiagonalMatrix#getEntry(int,int)",
        "org.apache.commons.math3.linear.OpenMapRealMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.OpenMapRealMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.DiagonalMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.OpenMapRealMatrix#getEntry(int,int)",
        "org.apache.commons.math3.linear.Array2DRowFieldMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.BlockRealMatrix#getEntry(int,int)",
        "org.apache.commons.math3.linear.SparseFieldMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.BlockFieldMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.BlockRealMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.Array2DRowRealMatrix#getEntry(int,int)",
        "org.apache.commons.math3.linear.Array2DRowRealMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.Array2DRowFieldMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.BlockRealMatrix#getColumnDimension()"
    ],
    "org.apache.commons.math3.analysis.interpolation.InterpolatingMicrosphere.Facet#Facet(double[])": ["org.apache.commons.math3.analysis.interpolation.InterpolatingMicrosphere.Facet.<init>()"],
    "org.apache.commons.math3.analysis.polynomials.PolynomialFunction#value(double)": ["org.apache.commons.math3.analysis.polynomials.PolynomialFunction.evaluate(double[],double)"],
    "org.apache.commons.math3.exception.util.DummyLocalizable#DummyLocalizable(String)": ["org.apache.commons.math3.exception.util.DummyLocalizable.<init>()"],
    "org.apache.commons.math3.optimization.univariate.BracketFinder#BracketFinder(double,int)": [
        "org.apache.commons.math3.util.Incrementor#setMaximalCount(int)",
        "org.apache.commons.math3.optimization.univariate.BracketFinder.<init>()",
        "org.apache.commons.math3.util.Incrementor.wrap(Incrementor)$Incrementor$1#setMaximalCount(int)"
    ],
    "org.apache.commons.math3.transform.FastCosineTransformer#transform(UnivariateFunction,double,double,int,TransformType)": [
        "org.apache.commons.math3.transform.FastCosineTransformer#transform(double[],TransformType)",
        "org.apache.commons.math3.analysis.FunctionUtils.sample(UnivariateFunction,double,double,int)"
    ],
    "org.apache.commons.math3.distribution.BetaDistribution.ChengBetaSampler.sample(RandomGenerator,double,double)": [
        "org.apache.commons.math3.distribution.BetaDistribution.ChengBetaSampler.algorithmBB(RandomGenerator,double,double,double)",
        "org.apache.commons.math3.distribution.BetaDistribution.ChengBetaSampler.algorithmBC(RandomGenerator,double,double,double)",
        "org.apache.commons.math3.util.FastMath.max(double,double)",
        "org.apache.commons.math3.util.FastMath.min(double,double)"
    ],
    "org.apache.commons.math3.linear.SparseFieldVector#mapAddToSelf(T extends FieldElement)": [
        "org.apache.commons.math3.linear.SparseFieldVector#setEntry(int,T extends FieldElement)",
        "org.apache.commons.math3.linear.SparseFieldVector#getEntry(int)"
    ],
    "org.apache.commons.math3.stat.descriptive.moment.StandardDeviation#StandardDeviation(boolean,SecondMoment)": [
        "org.apache.commons.math3.stat.descriptive.moment.StandardDeviation.<init>()",
        "org.apache.commons.math3.stat.descriptive.AbstractStorelessUnivariateStatistic.<init>()",
        "org.apache.commons.math3.stat.descriptive.moment.Variance#Variance(boolean,SecondMoment)"
    ],
    "org.apache.commons.math3.geometry.euclidean.twod.Vector2D#add(double,Vector<Euclidean2D>)": [
        "org.apache.commons.math3.geometry.euclidean.twod.Vector2D#getY()",
        "org.apache.commons.math3.geometry.euclidean.twod.Vector2D#getX()",
        "org.apache.commons.math3.geometry.euclidean.twod.Vector2D#Vector2D(double,double)"
    ],
    "org.apache.commons.math3.random.RandomAdaptor#setSeed(int)": [
        "org.apache.commons.math3.random.RandomGeneratorFactory.createRandomGenerator(Random)$RandomGenerator$1#setSeed(int)",
        "org.apache.commons.math3.random.ISAACRandom#setSeed(int)",
        "org.apache.commons.math3.random.AbstractWell#setSeed(int)",
        "org.apache.commons.math3.random.JDKRandomGenerator#setSeed(int)",
        "org.apache.commons.math3.random.MersenneTwister#setSeed(int)",
        "org.apache.commons.math3.random.RandomAdaptor#setSeed(int)",
        "org.apache.commons.math3.random.AbstractRandomGenerator#setSeed(int)",
        "org.apache.commons.math3.random.SynchronizedRandomGenerator#setSeed(int)"
    ],
    "org.apache.commons.math3.stat.correlation.PearsonsCorrelation#getCorrelationStandardErrors()": [
        "org.apache.commons.math3.linear.DiagonalMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.Array2DRowRealMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.BlockFieldMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.DiagonalMatrix#getEntry(int,int)",
        "org.apache.commons.math3.linear.OpenMapRealMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.OpenMapRealMatrix#getEntry(int,int)",
        "org.apache.commons.math3.linear.Array2DRowFieldMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.BlockRealMatrix#getEntry(int,int)",
        "org.apache.commons.math3.linear.SparseFieldMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.Array2DRowRealMatrix#getEntry(int,int)",
        "org.apache.commons.math3.linear.BlockRealMatrix#BlockRealMatrix(double[][])",
        "org.apache.commons.math3.util.FastMath.sqrt(double)",
        "org.apache.commons.math3.linear.BlockRealMatrix#getColumnDimension()"
    ],
    "org.apache.commons.math3.geometry.spherical.twod.EdgesBuilder#visitOrder(BSPTree<Sphere2D>)": ["org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor.Order.<staticinit>()"],
    "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.AbstractSimplex#replaceWorstPoint(PointValuePair,Comparator<PointValuePair>)": [
        "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizer#doOptimize()$Comparator$1#compare(PointValuePair,PointValuePair)",
        "org.apache.commons.math3.optim.nonlinear.scalar.MultiStartMultivariateOptimizer#getPairComparator()$Comparator$1#compare(PointValuePair,PointValuePair)",
        "org.apache.commons.math3.stat.correlation.KendallsCorrelation#correlation(double[],double[])$Comparator$1#compare(Pair<Double, Double>,Pair<Double, Double>)",
        "org.apache.commons.math3.stat.Frequency.NaturalComparator#compare(Comparable<T extends Comparable>,Comparable<T extends Comparable>)"
    ],
    "org.apache.commons.math3.fraction.FractionFormat.getDefaultNumberFormat()": ["org.apache.commons.math3.fraction.AbstractFormat.getDefaultNumberFormat(Locale)"],
    "org.apache.commons.math3.util.Combinations.LexicographicComparator#lexNorm(int[])": ["org.apache.commons.math3.util.ArithmeticUtils.pow(int,int)"],
    "org.apache.commons.math3.analysis.polynomials.PolynomialFunction#toString()": [
        "org.apache.commons.math3.analysis.polynomials.PolynomialFunction.toString(double)",
        "org.apache.commons.math3.util.FastMath.abs(double)"
    ],
    "org.apache.commons.math3.geometry.euclidean.twod.Line#Line(Vector2D,double,double)": [
        "org.apache.commons.math3.geometry.euclidean.twod.Line.<init>()",
        "org.apache.commons.math3.geometry.euclidean.twod.Line#reset(Vector2D,double)"
    ],
    "org.apache.commons.math3.distribution.FDistribution#calculateNumericalVariance()": [
        "org.apache.commons.math3.distribution.FDistribution#getDenominatorDegreesOfFreedom()",
        "org.apache.commons.math3.distribution.FDistribution#getNumeratorDegreesOfFreedom()"
    ],
    "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizer#SimplexOptimizer(ConvergenceChecker<PointValuePair>)": [
        "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizer.<init>()",
        "org.apache.commons.math3.optim.nonlinear.scalar.MultivariateOptimizer#MultivariateOptimizer(ConvergenceChecker<PointValuePair>)"
    ],
    "org.apache.commons.math3.fitting.CurveFitter.TheoreticalValuesFunction#TheoreticalValuesFunction(ParametricUnivariateFunction)": ["org.apache.commons.math3.fitting.CurveFitter.TheoreticalValuesFunction.<init>()"],
    "org.apache.commons.math3.stat.interval.AgrestiCoullInterval#createInterval(int,int,double)": [
        "org.apache.commons.math3.util.FastMath.pow(double,int)",
        "org.apache.commons.math3.stat.interval.IntervalUtils.checkParameters(int,int,double)",
        "org.apache.commons.math3.distribution.NormalDistribution#NormalDistribution()",
        "org.apache.commons.math3.stat.interval.ConfidenceInterval#ConfidenceInterval(double,double,double)",
        "org.apache.commons.math3.util.FastMath.sqrt(double)",
        "org.apache.commons.math3.distribution.NormalDistribution#inverseCumulativeProbability(double)"
    ],
    "org.apache.commons.math3.analysis.solvers.RiddersSolver#RiddersSolver()": [
        "org.apache.commons.math3.analysis.solvers.RiddersSolver#RiddersSolver(double)",
        "org.apache.commons.math3.analysis.solvers.RiddersSolver.<staticinit>()"
    ],
    "org.apache.commons.math3.random.SynchronizedRandomGenerator#setSeed(long)": [
        "org.apache.commons.math3.random.RandomGeneratorFactory.createRandomGenerator(Random)$RandomGenerator$1#setSeed(long)",
        "org.apache.commons.math3.random.AbstractWell#setSeed(long)",
        "org.apache.commons.math3.random.RandomAdaptor#setSeed(long)",
        "org.apache.commons.math3.random.SynchronizedRandomGenerator#setSeed(long)",
        "org.apache.commons.math3.random.MersenneTwister#setSeed(long)",
        "org.apache.commons.math3.random.ISAACRandom#setSeed(long)"
    ],
    "org.apache.commons.math3.geometry.partitioning.RegionFactory#getComplement(Region<S extends Space>)": [
        "org.apache.commons.math3.geometry.partitioning.RegionFactory#recurseComplement(BSPTree<S extends Space>)",
        "org.apache.commons.math3.geometry.partitioning.AbstractRegion#getTree(boolean)"
    ],
    "org.apache.commons.math3.optimization.linear.LinearObjectiveFunction#writeObject(ObjectOutputStream)": ["org.apache.commons.math3.linear.MatrixUtils.serializeRealVector(RealVector,ObjectOutputStream)"],
    "org.apache.commons.math3.special.Beta.regularizedBeta(double,double,double,int)": [
        "org.apache.commons.math3.special.Beta.<staticinit>()",
        "org.apache.commons.math3.special.Beta.regularizedBeta(double,double,double,double,int)"
    ],
    "org.apache.commons.math3.linear.AbstractRealMatrix#copySubMatrix(int,int,int,int,double[][])$DefaultRealMatrixPreservingVisitor$1.<init>()": ["org.apache.commons.math3.linear.DefaultRealMatrixPreservingVisitor.<init>()"],
    "org.apache.commons.math3.geometry.partitioning.BoundarySizeVisitor#visitOrder(BSPTree<S extends Space>)": ["org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor.Order.<staticinit>()"],
    "org.apache.commons.math3.ml.neuralnet.Neuron.SerializationProxy#readResolve()": ["org.apache.commons.math3.ml.neuralnet.Neuron#Neuron(long,double[])"],
    "org.apache.commons.math3.dfp.Dfp#Dfp(DfpField,long)": [
        "org.apache.commons.math3.dfp.Dfp.<staticinit>()",
        "org.apache.commons.math3.dfp.Dfp.<init>()",
        "org.apache.commons.math3.dfp.DfpField#getRadixDigits()"
    ],
    "org.apache.commons.math3.fraction.ProperBigFractionFormat#parse(String,ParsePosition)": [
        "org.apache.commons.math3.fraction.BigFractionFormat#parseNextBigInteger(String,ParsePosition)",
        "org.apache.commons.math3.fraction.BigFraction#BigFraction(BigInteger)",
        "org.apache.commons.math3.fraction.BigFraction#BigFraction(BigInteger,BigInteger)",
        "org.apache.commons.math3.fraction.BigFractionFormat#parse(String,ParsePosition)",
        "org.apache.commons.math3.fraction.AbstractFormat.parseAndIgnoreWhitespace(String,ParsePosition)",
        "org.apache.commons.math3.fraction.AbstractFormat.parseNextCharacter(String,ParsePosition)"
    ],
    "org.apache.commons.math3.dfp.Dfp#newInstance(int)": [
        "org.apache.commons.math3.dfp.Dfp#getField()",
        "org.apache.commons.math3.dfp.Dfp#Dfp(DfpField,int)"
    ],
    "org.apache.commons.math3.complex.Complex#abs()": [
        "org.apache.commons.math3.complex.Complex#isInfinite()",
        "org.apache.commons.math3.util.FastMath.abs(double)",
        "org.apache.commons.math3.util.FastMath.sqrt(double)"
    ],
    "org.apache.commons.math3.stat.inference.KolmogorovSmirnovTest#kolmogorovSmirnovTest(RealDistribution,double[],boolean)": [
        "org.apache.commons.math3.stat.inference.KolmogorovSmirnovTest#kolmogorovSmirnovStatistic(RealDistribution,double[])",
        "org.apache.commons.math3.stat.inference.KolmogorovSmirnovTest#cdf(double,int,boolean)"
    ],
    "org.apache.commons.math3.ode.AbstractIntegrator#sanityChecks(ExpandableStatefulODE,double)": [
        "org.apache.commons.math3.util.FastMath.abs(double)",
        "org.apache.commons.math3.util.FastMath.max(double,double)",
        "org.apache.commons.math3.util.FastMath.ulp(double)",
        "org.apache.commons.math3.ode.ExpandableStatefulODE#getTime()",
        "org.apache.commons.math3.exception.util.LocalizedFormats.<staticinit>()"
    ],
    "org.apache.commons.math3.ode.nonstiff.EulerFieldStepInterpolator#EulerFieldStepInterpolator(Field<T extends RealFieldElement>,boolean,T extends RealFieldElement[][],FieldODEStateAndDerivative<T extends RealFieldElement>,FieldODEStateAndDerivative<T extends RealFieldElement>,FieldODEStateAndDerivative<T extends RealFieldElement>,FieldODEStateAndDerivative<T extends RealFieldElement>,FieldEquationsMapper<T extends RealFieldElement>)": [
        "org.apache.commons.math3.ode.nonstiff.RungeKuttaFieldStepInterpolator#RungeKuttaFieldStepInterpolator(Field<T extends RealFieldElement>,boolean,T extends RealFieldElement[][],FieldODEStateAndDerivative<T extends RealFieldElement>,FieldODEStateAndDerivative<T extends RealFieldElement>,FieldODEStateAndDerivative<T extends RealFieldElement>,FieldODEStateAndDerivative<T extends RealFieldElement>,FieldEquationsMapper<T extends RealFieldElement>)",
        "org.apache.commons.math3.ode.nonstiff.EulerFieldStepInterpolator.<init>()"
    ],
    "org.apache.commons.math3.stat.descriptive.moment.FourthMoment#increment(double)": ["org.apache.commons.math3.stat.descriptive.moment.ThirdMoment#increment(double)"],
    "org.apache.commons.math3.linear.ArrayFieldVector#getSubVector(int,int)": [
        "org.apache.commons.math3.linear.ArrayFieldVector#ArrayFieldVector(Field<T extends FieldElement>,int)",
        "org.apache.commons.math3.linear.ArrayFieldVector#checkIndex(int)",
        "org.apache.commons.math3.exception.util.LocalizedFormats.<staticinit>()"
    ],
    "org.apache.commons.math3.linear.IterativeLinearSolver#IterativeLinearSolver(IterationManager)": [
        "org.apache.commons.math3.linear.IterativeLinearSolver.<init>()",
        "org.apache.commons.math3.util.MathUtils.checkNotNull(Object)"
    ],
    "org.apache.commons.math3.distribution.BinomialDistribution#probability(int)": [
        "org.apache.commons.math3.distribution.BinomialDistribution#logProbability(int)",
        "org.apache.commons.math3.util.FastMath.exp(double)"
    ],
    "org.apache.commons.math3.geometry.euclidean.twod.Vector2D#Vector2D(double,Vector2D,double,Vector2D)": ["org.apache.commons.math3.geometry.euclidean.twod.Vector2D.<init>()"],
    "org.apache.commons.math3.optimization.linear.SimplexTableau#createTableau(boolean)": [
        "org.apache.commons.math3.optimization.linear.SimplexTableau.getInvertedCoefficientSum(RealVector)",
        "org.apache.commons.math3.linear.Array2DRowRealMatrix#setEntry(int,int,double)",
        "org.apache.commons.math3.linear.RealVector#mapMultiply(double)",
        "org.apache.commons.math3.linear.OpenMapRealVector#toArray()",
        "org.apache.commons.math3.linear.RealVector.unmodifiableRealVector(RealVector)$RealVector$1#mapMultiply(double)",
        "org.apache.commons.math3.optimization.linear.Relationship.<staticinit>()",
        "org.apache.commons.math3.optimization.linear.SimplexTableau#getSlackVariableOffset()",
        "org.apache.commons.math3.optimization.linear.SimplexTableau#getNumObjectiveFunctions()",
        "org.apache.commons.math3.linear.AbstractRealMatrix#getRowVector(int)",
        "org.apache.commons.math3.optimization.linear.LinearConstraint#getCoefficients()",
        "org.apache.commons.math3.optimization.linear.LinearConstraint#getValue()",
        "org.apache.commons.math3.optimization.linear.LinearObjectiveFunction#getCoefficients()",
        "org.apache.commons.math3.linear.RealVector#toArray()",
        "org.apache.commons.math3.optimization.linear.SimplexTableau#getArtificialVariableOffset()",
        "org.apache.commons.math3.optimization.linear.LinearConstraint#getRelationship()",
        "org.apache.commons.math3.linear.RealVector.unmodifiableRealVector(RealVector)$RealVector$1#subtract(RealVector)",
        "org.apache.commons.math3.linear.BlockRealMatrix#getRowVector(int)",
        "org.apache.commons.math3.optimization.linear.LinearObjectiveFunction#getConstantTerm()",
        "org.apache.commons.math3.linear.RealVector.unmodifiableRealVector(RealVector)$RealVector$1#toArray()",
        "org.apache.commons.math3.linear.RealVector#subtract(RealVector)",
        "org.apache.commons.math3.linear.Array2DRowRealMatrix#Array2DRowRealMatrix(int,int)",
        "org.apache.commons.math3.linear.BlockRealMatrix#setRowVector(int,RealVector)",
        "org.apache.commons.math3.optimization.linear.SimplexTableau#copyArray(double[],double[])",
        "org.apache.commons.math3.linear.ArrayRealVector#subtract(RealVector)",
        "org.apache.commons.math3.linear.OpenMapRealVector#subtract(RealVector)",
        "org.apache.commons.math3.linear.Array2DRowRealMatrix#getDataRef()",
        "org.apache.commons.math3.linear.AbstractRealMatrix#setRowVector(int,RealVector)",
        "org.apache.commons.math3.linear.ArrayRealVector#toArray()"
    ],
    "org.apache.commons.math3.linear.BlockRealMatrix#setRowMatrix(int,BlockRealMatrix)": [
        "org.apache.commons.math3.linear.BlockRealMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.BlockRealMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.MatrixDimensionMismatchException#MatrixDimensionMismatchException(int,int,int,int)",
        "org.apache.commons.math3.linear.BlockRealMatrix.<staticinit>()",
        "org.apache.commons.math3.linear.MatrixUtils.checkRowIndex(AnyMatrix,int)",
        "org.apache.commons.math3.linear.BlockRealMatrix#blockWidth(int)"
    ],
    "org.apache.commons.math3.fitting.AbstractCurveFitter.TheoreticalValuesFunction#TheoreticalValuesFunction(ParametricUnivariateFunction,Collection<WeightedObservedPoint>)": [
        "org.apache.commons.math3.fitting.AbstractCurveFitter.TheoreticalValuesFunction.<init>()",
        "org.apache.commons.math3.fitting.WeightedObservedPoint#getX()"
    ],
    "org.apache.commons.math3.geometry.partitioning.AbstractRegion#isFull(BSPTree<S extends Space>)": [
        "org.apache.commons.math3.geometry.partitioning.BSPTree#getMinus()",
        "org.apache.commons.math3.geometry.partitioning.BSPTree#getAttribute()",
        "org.apache.commons.math3.geometry.partitioning.BSPTree#getCut()",
        "org.apache.commons.math3.geometry.partitioning.BSPTree#getPlus()",
        "org.apache.commons.math3.geometry.partitioning.AbstractRegion#isFull(BSPTree<S extends Space>)"
    ],
    "org.apache.commons.math3.dfp.Dfp.copysign(Dfp,Dfp)": [
        "org.apache.commons.math3.dfp.DfpDec#newInstance(Dfp)",
        "org.apache.commons.math3.dfp.Dfp#newInstance(Dfp)"
    ],
    "org.apache.commons.math3.linear.ArrayFieldVector#subtract(ArrayFieldVector<T extends FieldElement>)": [
        "org.apache.commons.math3.util.MathArrays.buildArray(Field<T>,int)",
        "org.apache.commons.math3.linear.ArrayFieldVector#ArrayFieldVector(Field<T extends FieldElement>,T extends FieldElement[],boolean)",
        "org.apache.commons.math3.linear.ArrayFieldVector#checkVectorDimensions(int)"
    ],
    "org.apache.commons.math3.geometry.partitioning.RegionFactory.XorMerger#merge(BSPTree<S extends Space>,BSPTree<S extends Space>,BSPTree<S extends Space>,boolean,boolean)": [
        "org.apache.commons.math3.geometry.partitioning.BSPTree#insertInTree(BSPTree<S extends Space>,boolean,VanishingCutHandler<S extends Space>)",
        "org.apache.commons.math3.geometry.partitioning.BSPTree#getAttribute()",
        "org.apache.commons.math3.geometry.partitioning.RegionFactory#recurseComplement(BSPTree<S extends Space>)",
        "org.apache.commons.math3.geometry.partitioning.RegionFactory.VanishingToLeaf#VanishingToLeaf(boolean)"
    ],
    "org.apache.commons.math3.fitting.WeightedObservedPoint#WeightedObservedPoint(double,double,double)": ["org.apache.commons.math3.fitting.WeightedObservedPoint.<init>()"],
    "org.apache.commons.math3.geometry.euclidean.twod.Line#getReverse()": [
        "org.apache.commons.math3.geometry.euclidean.twod.Line#Line(double,double,double,double,double)",
        "org.apache.commons.math3.util.FastMath.<staticinit>()"
    ],
    "org.apache.commons.math3.linear.RealVector.unmodifiableRealVector(RealVector)$RealVector$1#mapSubtractToSelf(double)": ["org.apache.commons.math3.exception.MathUnsupportedOperationException#MathUnsupportedOperationException()"],
    "org.apache.commons.math3.linear.OpenMapRealMatrix#add(OpenMapRealMatrix)": [
        "org.apache.commons.math3.linear.OpenMapRealMatrix#OpenMapRealMatrix(OpenMapRealMatrix)",
        "org.apache.commons.math3.util.OpenIntToDoubleHashMap.Iterator#value()",
        "org.apache.commons.math3.util.OpenIntToDoubleHashMap#iterator()",
        "org.apache.commons.math3.util.OpenIntToDoubleHashMap.Iterator#advance()",
        "org.apache.commons.math3.linear.OpenMapRealMatrix#setEntry(int,int,double)",
        "org.apache.commons.math3.util.OpenIntToDoubleHashMap.Iterator#key()",
        "org.apache.commons.math3.linear.MatrixUtils.checkAdditionCompatible(AnyMatrix,AnyMatrix)",
        "org.apache.commons.math3.linear.OpenMapRealMatrix#getEntry(int,int)",
        "org.apache.commons.math3.util.OpenIntToDoubleHashMap.Iterator#hasNext()"
    ],
    "org.apache.commons.math3.ode.nonstiff.LutherFieldIntegrator#getB()": [
        "org.apache.commons.math3.ode.nonstiff.RungeKuttaFieldIntegrator#fraction(int,int)",
        "org.apache.commons.math3.ode.AbstractFieldIntegrator#getField()",
        "org.apache.commons.math3.util.BigRealField#getZero()",
        "org.apache.commons.math3.analysis.differentiation.SparseGradient#getField()$Field$1#getZero()",
        "org.apache.commons.math3.analysis.differentiation.DerivativeStructure#getField()$Field$1#getZero()",
        "org.apache.commons.math3.fraction.FractionField#getZero()",
        "org.apache.commons.math3.util.Decimal64Field#getZero()",
        "org.apache.commons.math3.dfp.DfpField#getZero()",
        "org.apache.commons.math3.complex.ComplexField#getZero()",
        "org.apache.commons.math3.fraction.BigFractionField#getZero()",
        "org.apache.commons.math3.util.MathArrays.buildArray(Field<T>,int)"
    ],
    "org.apache.commons.math3.ode.nonstiff.GillFieldIntegrator#createInterpolator(boolean,T extends RealFieldElement[][],FieldODEStateAndDerivative<T extends RealFieldElement>,FieldODEStateAndDerivative<T extends RealFieldElement>,FieldEquationsMapper<T extends RealFieldElement>)": [
        "org.apache.commons.math3.ode.AbstractFieldIntegrator#getField()",
        "org.apache.commons.math3.ode.nonstiff.GillFieldStepInterpolator#GillFieldStepInterpolator(Field<T extends RealFieldElement>,boolean,T extends RealFieldElement[][],FieldODEStateAndDerivative<T extends RealFieldElement>,FieldODEStateAndDerivative<T extends RealFieldElement>,FieldODEStateAndDerivative<T extends RealFieldElement>,FieldODEStateAndDerivative<T extends RealFieldElement>,FieldEquationsMapper<T extends RealFieldElement>)"
    ],
    "org.apache.commons.math3.stat.descriptive.SummaryStatistics#getSecondMoment()": [
        "org.apache.commons.math3.stat.descriptive.moment.ThirdMoment#getResult()",
        "org.apache.commons.math3.stat.descriptive.moment.FourthMoment#getResult()",
        "org.apache.commons.math3.stat.descriptive.moment.SecondMoment#getResult()"
    ],
    "org.apache.commons.math3.analysis.differentiation.DerivativeStructure#DerivativeStructure(double,DerivativeStructure,double,DerivativeStructure,double,DerivativeStructure)": [
        "org.apache.commons.math3.analysis.differentiation.DerivativeStructure#DerivativeStructure(DSCompiler)",
        "org.apache.commons.math3.analysis.differentiation.DSCompiler#linearCombination(double,double[],int,double,double[],int,double,double[],int,double[],int)",
        "org.apache.commons.math3.analysis.differentiation.DSCompiler#checkCompatibility(DSCompiler)"
    ],
    "org.apache.commons.math3.distribution.WeibullDistribution#calculateNumericalVariance()": [
        "org.apache.commons.math3.distribution.WeibullDistribution#getScale()",
        "org.apache.commons.math3.util.FastMath.exp(double)",
        "org.apache.commons.math3.special.Gamma.logGamma(double)",
        "org.apache.commons.math3.distribution.WeibullDistribution#getNumericalMean()",
        "org.apache.commons.math3.distribution.WeibullDistribution#getShape()"
    ],
    "org.apache.commons.math3.stat.regression.RegressionResults#getAdjustedRSquared()": ["org.apache.commons.math3.stat.regression.RegressionResults.<staticinit>()"],
    "org.apache.commons.math3.geometry.partitioning.RegionFactory.UnionMerger#merge(BSPTree<S extends Space>,BSPTree<S extends Space>,BSPTree<S extends Space>,boolean,boolean)": [
        "org.apache.commons.math3.geometry.partitioning.RegionFactory.VanishingToLeaf#VanishingToLeaf(boolean)",
        "org.apache.commons.math3.geometry.partitioning.BSPTree#insertInTree(BSPTree<S extends Space>,boolean,VanishingCutHandler<S extends Space>)",
        "org.apache.commons.math3.geometry.partitioning.BSPTree#getAttribute()"
    ],
    "org.apache.commons.math3.linear.RealVector#getL1Norm()": [
        "org.apache.commons.math3.linear.RealVector.Entry#getValue()",
        "org.apache.commons.math3.linear.RealVector.unmodifiableRealVector(RealVector)$Iterator$1$Iterator$1#iterator()$Iterator$1#next()",
        "org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet.SubIntervalsIterator#hasNext()",
        "org.apache.commons.math3.linear.RealVector#iterator()",
        "org.apache.commons.math3.linear.RealVector#iterator()$Iterator$1#hasNext()",
        "org.apache.commons.math3.linear.RealVector.unmodifiableRealVector(RealVector)$RealVector$1#iterator()",
        "org.apache.commons.math3.userguide.sofm.ChineseRingsClassifier#createRandomIterator(long)$Iterator$1#hasNext()",
        "org.apache.commons.math3.util.IntegerSequence.Incrementor#hasNext()",
        "org.apache.commons.math3.linear.RealVector.unmodifiableRealVector(RealVector)$Iterator$1$Iterator$1#sparseIterator()$Iterator$1#hasNext()",
        "org.apache.commons.math3.geometry.spherical.oned.ArcsSet.SubArcsIterator#hasNext()",
        "org.apache.commons.math3.linear.RealVector#iterator()$Iterator$1#next()",
        "org.apache.commons.math3.util.Combinations.LexicographicIterator#hasNext()",
        "org.apache.commons.math3.linear.OpenMapRealVector.OpenMapEntry#getValue()",
        "org.apache.commons.math3.linear.RealVector.unmodifiableRealVector(RealVector).UnmodifiableEntry.UnmodifiableEntry#getValue()",
        "org.apache.commons.math3.linear.RealVector.SparseEntryIterator#hasNext()",
        "org.apache.commons.math3.util.FastMath.abs(double)",
        "org.apache.commons.math3.userguide.sofm.ChineseRingsClassifier#createIterable()$Iterator$1$Iterator$1#iterator()$Iterator$1#hasNext()",
        "org.apache.commons.math3.linear.RealVector.unmodifiableRealVector(RealVector)$Iterator$1$Iterator$1#iterator()$Iterator$1#hasNext()",
        "org.apache.commons.math3.util.Combinations.SingletonIterator#hasNext()",
        "org.apache.commons.math3.linear.RealVector.SparseEntryIterator#next()",
        "org.apache.commons.math3.linear.RealVector.unmodifiableRealVector(RealVector)$Iterator$1$Iterator$1#sparseIterator()$Iterator$1#next()",
        "org.apache.commons.math3.util.MultidimensionalCounter.Iterator#hasNext()"
    ],
    "org.apache.commons.math3.linear.MatrixUtils.createRealMatrix(int,int)": [
        "org.apache.commons.math3.linear.Array2DRowRealMatrix#Array2DRowRealMatrix(int,int)",
        "org.apache.commons.math3.linear.BlockRealMatrix#BlockRealMatrix(int,int)"
    ],
    "org.apache.commons.math3.linear.OpenMapRealMatrix#OpenMapRealMatrix(OpenMapRealMatrix)": [
        "org.apache.commons.math3.linear.AbstractRealMatrix#AbstractRealMatrix()",
        "org.apache.commons.math3.linear.OpenMapRealMatrix.<init>()",
        "org.apache.commons.math3.util.OpenIntToDoubleHashMap#OpenIntToDoubleHashMap(OpenIntToDoubleHashMap)"
    ],
    "org.apache.commons.math3.ml.neuralnet.sofm.KohonenTrainingTask#run()": [
        "org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet.SubIntervalsIterator#hasNext()",
        "org.apache.commons.math3.linear.RealVector#iterator()$Iterator$1#hasNext()",
        "org.apache.commons.math3.userguide.sofm.ChineseRingsClassifier#createRandomIterator(long)$Iterator$1#hasNext()",
        "org.apache.commons.math3.util.IntegerSequence.Incrementor#hasNext()",
        "org.apache.commons.math3.linear.RealVector.unmodifiableRealVector(RealVector)$Iterator$1$Iterator$1#sparseIterator()$Iterator$1#hasNext()",
        "org.apache.commons.math3.geometry.spherical.oned.ArcsSet.SubArcsIterator#hasNext()",
        "org.apache.commons.math3.util.Combinations.LexicographicIterator#hasNext()",
        "org.apache.commons.math3.userguide.sofm.ChineseRingsClassifier#createIterable()$Iterator$1$Iterator$1#iterator()$Iterator$1#next()",
        "org.apache.commons.math3.linear.RealVector.SparseEntryIterator#hasNext()",
        "org.apache.commons.math3.geometry.spherical.oned.ArcsSet.SubArcsIterator#next()",
        "org.apache.commons.math3.userguide.sofm.ChineseRingsClassifier#createIterable()$Iterator$1$Iterator$1#iterator()$Iterator$1#hasNext()",
        "org.apache.commons.math3.ml.neuralnet.sofm.KohonenUpdateAction#update(Network,double[])",
        "org.apache.commons.math3.userguide.sofm.ChineseRingsClassifier#createRandomIterator(long)$Iterator$1#next()",
        "org.apache.commons.math3.linear.RealVector.unmodifiableRealVector(RealVector)$Iterator$1$Iterator$1#iterator()$Iterator$1#hasNext()",
        "org.apache.commons.math3.util.Combinations.SingletonIterator#hasNext()",
        "org.apache.commons.math3.util.MultidimensionalCounter.Iterator#hasNext()",
        "org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet.SubIntervalsIterator#next()"
    ],
    "org.apache.commons.math3.fraction.ProperBigFractionFormat#ProperBigFractionFormat(NumberFormat,NumberFormat,NumberFormat)": [
        "org.apache.commons.math3.fraction.BigFractionFormat#BigFractionFormat(NumberFormat,NumberFormat)",
        "org.apache.commons.math3.fraction.ProperBigFractionFormat#setWholeFormat(NumberFormat)",
        "org.apache.commons.math3.fraction.ProperBigFractionFormat.<init>()"
    ],
    "org.apache.commons.math3.stat.descriptive.moment.SemiVariance#SemiVariance(boolean)": [
        "org.apache.commons.math3.stat.descriptive.moment.SemiVariance.<init>()",
        "org.apache.commons.math3.stat.descriptive.AbstractUnivariateStatistic.<init>()"
    ],
    "org.apache.commons.math3.fraction.BigFraction#divide(BigInteger)": [
        "org.apache.commons.math3.fraction.BigFraction#BigFraction(BigInteger,BigInteger)",
        "org.apache.commons.math3.fraction.BigFraction.<staticinit>()",
        "org.apache.commons.math3.exception.util.LocalizedFormats.<staticinit>()"
    ],
    "org.apache.commons.math3.geometry.euclidean.threed.Vector3D#distanceInf(Vector<Euclidean3D>)": [
        "org.apache.commons.math3.util.FastMath.abs(double)",
        "org.apache.commons.math3.util.FastMath.max(double,double)"
    ],
    "org.apache.commons.math3.optimization.BaseMultivariateSimpleBoundsOptimizer#optimize(int,FUNC extends MultivariateFunction,GoalType,double[],double[],double[])": ["org.apache.commons.math3.optimization.GoalType.<staticinit>()"],
    "org.apache.commons.math3.util.Decimal64#linearCombination(double,Decimal64,double,Decimal64,double,Decimal64)": [
        "org.apache.commons.math3.util.MathArrays.linearCombination(double,double,double,double,double,double)",
        "org.apache.commons.math3.util.Decimal64#Decimal64(double)"
    ],
    "org.apache.commons.math3.util.OpenIntToDoubleHashMap#shouldGrowTable()": ["org.apache.commons.math3.util.OpenIntToDoubleHashMap.<staticinit>()"],
    "org.apache.commons.math3.geometry.euclidean.threed.SubLine.buildIntervalSet(Vector3D,Vector3D,double)": [
        "org.apache.commons.math3.geometry.euclidean.threed.Line#toSubSpace(Point<Euclidean3D>)",
        "org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet#IntervalsSet(double,double,double)",
        "org.apache.commons.math3.geometry.euclidean.threed.Line#Line(Vector3D,Vector3D,double)",
        "org.apache.commons.math3.geometry.euclidean.oned.Vector1D#getX()"
    ],
    "org.apache.commons.math3.util.FastMath.rint(double)": ["org.apache.commons.math3.util.FastMath.floor(double)"],
    "org.apache.commons.math3.stat.descriptive.SynchronizedDescriptiveStatistics#clear()": ["org.apache.commons.math3.stat.descriptive.DescriptiveStatistics#clear()"],
    "org.apache.commons.math3.analysis.differentiation.DerivativeStructure#asinh()": [
        "org.apache.commons.math3.analysis.differentiation.DSCompiler#asinh(double[],int,double[],int)",
        "org.apache.commons.math3.analysis.differentiation.DerivativeStructure#DerivativeStructure(DSCompiler)"
    ],
    "org.apache.commons.math3.analysis.interpolation.TricubicSplineFunction.<init>()": ["org.apache.commons.math3.analysis.interpolation.TricubicSplineFunction.<staticinit>()"],
    "org.apache.commons.math3.analysis.FunctionUtils.multiply(DifferentiableUnivariateFunction[]...)$UnivariateFunction$1$UnivariateFunction$1#derivative()$UnivariateFunction$1#value(double)": [
        "org.apache.commons.math3.analysis.polynomials.PolynomialSplineFunction#value(double)",
        "org.apache.commons.math3.analysis.function.Tanh#value(double)",
        "org.apache.commons.math3.analysis.function.Power#derivative()",
        "org.apache.commons.math3.analysis.function.Exp#derivative()",
        "org.apache.commons.math3.analysis.function.HarmonicOscillator#derivative()",
        "org.apache.commons.math3.analysis.polynomials.PolynomialFunction#derivative()",
        "org.apache.commons.math3.analysis.function.HarmonicOscillator#value(double)",
        "org.apache.commons.math3.analysis.function.Logit#derivative()",
        "org.apache.commons.math3.analysis.polynomials.PolynomialSplineFunction#derivative()",
        "org.apache.commons.math3.analysis.FunctionUtils.fix1stArgument(BivariateFunction,double)$UnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.function.Asinh#value(double)",
        "org.apache.commons.math3.analysis.function.Inverse#derivative()",
        "org.apache.commons.math3.analysis.FunctionUtils.toDifferentiableUnivariateFunction(UnivariateDifferentiableFunction)$DifferentiableUnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.function.Cbrt#value(double)",
        "org.apache.commons.math3.analysis.function.Atan#derivative()",
        "org.apache.commons.math3.analysis.FunctionUtils.add(UnivariateFunction[]...)$UnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.function.Sin#value(double)",
        "org.apache.commons.math3.analysis.function.Expm1#derivative()",
        "org.apache.commons.math3.analysis.function.Sigmoid#derivative()",
        "org.apache.commons.math3.analysis.interpolation.UnivariatePeriodicInterpolator#interpolate(double[],double[])$UnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.function.Sqrt#value(double)",
        "org.apache.commons.math3.analysis.function.Sinc#value(double)",
        "org.apache.commons.math3.ode.events.EventState#evaluateStep(StepInterpolator)$UnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.integration.IterativeLegendreGaussIntegrator#stage(int)$UnivariateFunction$1#value(double)",
        "org.apache.commons.math3.optimization.general.NonLinearConjugateGradientOptimizer.LineSearchFunction#value(double)",
        "org.apache.commons.math3.analysis.function.Floor#value(double)",
        "org.apache.commons.math3.analysis.FunctionUtils.multiply(DifferentiableUnivariateFunction[]...)$DifferentiableUnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.FunctionUtils.combine(BivariateFunction,UnivariateFunction,UnivariateFunction)$UnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.FunctionUtils.add(DifferentiableUnivariateFunction[]...)$UnivariateFunction$1$UnivariateFunction$1#derivative()$UnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.FunctionUtils.add(DifferentiableUnivariateFunction[]...)$DifferentiableUnivariateFunction$1#derivative()",
        "org.apache.commons.math3.analysis.function.Log1p#derivative()",
        "org.apache.commons.math3.analysis.function.Tan#derivative()",
        "org.apache.commons.math3.analysis.function.Sinh#value(double)",
        "org.apache.commons.math3.analysis.function.Tan#value(double)",
        "org.apache.commons.math3.distribution.AbstractRealDistribution#inverseCumulativeProbability(double)$UnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.FunctionUtils.add(DifferentiableUnivariateFunction[]...)$DifferentiableUnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.function.Cos#derivative()",
        "org.apache.commons.math3.analysis.function.Atanh#derivative()",
        "org.apache.commons.math3.analysis.function.Ceil#value(double)",
        "org.apache.commons.math3.analysis.function.Atanh#value(double)",
        "org.apache.commons.math3.analysis.FunctionUtils.compose(DifferentiableUnivariateFunction[]...)$UnivariateFunction$1$UnivariateFunction$1#derivative()$UnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.FunctionUtils.toDifferentiableUnivariateFunction(UnivariateDifferentiableFunction)$DifferentiableUnivariateFunction$1#derivative()",
        "org.apache.commons.math3.analysis.function.Logit#value(double)",
        "org.apache.commons.math3.analysis.function.Log1p#value(double)",
        "org.apache.commons.math3.analysis.FunctionUtils.toUnivariateDifferential(DifferentiableUnivariateFunction)$UnivariateDifferentiableFunction$1#value(double)",
        "org.apache.commons.math3.analysis.FunctionUtils.toDifferentiableUnivariateFunction(UnivariateDifferentiableFunction)$UnivariateFunction$1$UnivariateFunction$1#derivative()$UnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.function.Log#derivative()",
        "org.apache.commons.math3.analysis.function.Logistic#derivative()",
        "org.apache.commons.math3.analysis.FunctionUtils.compose(UnivariateFunction[]...)$UnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.function.Asinh#derivative()",
        "org.apache.commons.math3.analysis.function.Cosh#value(double)",
        "org.apache.commons.math3.analysis.FunctionUtils.compose(DifferentiableUnivariateFunction[]...)$DifferentiableUnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.function.StepFunction#value(double)",
        "org.apache.commons.math3.analysis.function.Constant#derivative()",
        "org.apache.commons.math3.analysis.function.Acos#value(double)",
        "org.apache.commons.math3.analysis.function.Tanh#derivative()",
        "org.apache.commons.math3.analysis.function.Minus#derivative()",
        "org.apache.commons.math3.analysis.FunctionUtils.compose(DifferentiableUnivariateFunction[]...)$DifferentiableUnivariateFunction$1#derivative()",
        "org.apache.commons.math3.optim.nonlinear.scalar.LineSearch#search(double[],double[])$UnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.function.Sigmoid#value(double)",
        "org.apache.commons.math3.analysis.FunctionUtils.multiply(DifferentiableUnivariateFunction[]...)$DifferentiableUnivariateFunction$1#derivative()",
        "org.apache.commons.math3.analysis.function.Ulp#value(double)",
        "org.apache.commons.math3.analysis.FunctionUtils.multiply(DifferentiableUnivariateFunction[]...)$UnivariateFunction$1$UnivariateFunction$1#derivative()$UnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.function.Log10#derivative()",
        "org.apache.commons.math3.analysis.function.Gaussian#value(double)",
        "org.apache.commons.math3.analysis.function.Inverse#value(double)",
        "org.apache.commons.math3.analysis.function.Cbrt#derivative()",
        "org.apache.commons.math3.analysis.function.Asin#value(double)",
        "org.apache.commons.math3.analysis.FunctionUtils.multiply(UnivariateFunction[]...)$UnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.function.Atan#value(double)",
        "org.apache.commons.math3.analysis.function.Identity#derivative()",
        "org.apache.commons.math3.analysis.polynomials.PolynomialFunctionLagrangeForm#value(double)",
        "org.apache.commons.math3.analysis.function.Exp#value(double)",
        "org.apache.commons.math3.analysis.function.Sqrt#derivative()",
        "org.apache.commons.math3.special.BesselJ#value(double)",
        "org.apache.commons.math3.analysis.polynomials.PolynomialFunctionNewtonForm#value(double)",
        "org.apache.commons.math3.analysis.function.Cos#value(double)",
        "org.apache.commons.math3.analysis.function.Gaussian#derivative()",
        "org.apache.commons.math3.analysis.function.Sinc#derivative()",
        "org.apache.commons.math3.analysis.function.Log10#value(double)",
        "org.apache.commons.math3.analysis.function.Sinh#derivative()",
        "org.apache.commons.math3.analysis.function.Log#value(double)",
        "org.apache.commons.math3.analysis.function.Minus#value(double)",
        "org.apache.commons.math3.analysis.FunctionUtils.multiply(UnivariateDifferentiableFunction[]...)$UnivariateDifferentiableFunction$1#value(double)",
        "org.apache.commons.math3.analysis.function.Logistic#value(double)",
        "org.apache.commons.math3.analysis.function.Signum#value(double)",
        "org.apache.commons.math3.analysis.function.Constant#value(double)",
        "org.apache.commons.math3.analysis.FunctionUtils.add(UnivariateDifferentiableFunction[]...)$UnivariateDifferentiableFunction$1#value(double)",
        "org.apache.commons.math3.analysis.function.Sin#derivative()",
        "org.apache.commons.math3.analysis.function.Abs#value(double)",
        "org.apache.commons.math3.analysis.differentiation.FiniteDifferencesDifferentiator#differentiate(UnivariateFunction)$UnivariateDifferentiableFunction$1#value(double)",
        "org.apache.commons.math3.analysis.function.Identity#value(double)",
        "org.apache.commons.math3.analysis.function.Expm1#value(double)",
        "org.apache.commons.math3.analysis.function.Cosh#derivative()",
        "org.apache.commons.math3.analysis.FunctionUtils.fix2ndArgument(BivariateFunction,double)$UnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.function.Acosh#derivative()",
        "org.apache.commons.math3.analysis.polynomials.PolynomialFunction#value(double)",
        "org.apache.commons.math3.analysis.function.Acos#derivative()",
        "org.apache.commons.math3.analysis.function.Rint#value(double)",
        "org.apache.commons.math3.optimization.direct.PowellOptimizer.LineSearch#search(double[],double[])$UnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.function.Acosh#value(double)",
        "org.apache.commons.math3.analysis.FunctionUtils.compose(UnivariateDifferentiableFunction[]...)$UnivariateDifferentiableFunction$1#value(double)",
        "org.apache.commons.math3.analysis.function.Asin#derivative()",
        "org.apache.commons.math3.analysis.function.Power#value(double)"
    ],
    "org.apache.commons.math3.userguide.genetics.ImageEvolutionExample.Display.ImagePainter#getMinimumSize()": ["org.apache.commons.math3.userguide.genetics.ImageEvolutionExample.Display.ImagePainter#getPreferredSize()"],
    "org.apache.commons.math3.linear.OpenMapRealVector#add(RealVector)": [
        "org.apache.commons.math3.linear.OpenMapRealVector#getDimension()",
        "org.apache.commons.math3.linear.ArrayRealVector#getDimension()",
        "org.apache.commons.math3.linear.RealVector#checkVectorDimensions(int)",
        "org.apache.commons.math3.linear.OpenMapRealVector#add(OpenMapRealVector)",
        "org.apache.commons.math3.linear.ArrayRealVector#checkVectorDimensions(int)",
        "org.apache.commons.math3.linear.RealVector#add(RealVector)",
        "org.apache.commons.math3.linear.RealVector.unmodifiableRealVector(RealVector)$RealVector$1#getDimension()"
    ],
    "org.apache.commons.math3.linear.RealVector.unmodifiableRealVector(RealVector).UnmodifiableEntry.UnmodifiableEntry#setValue(double)": ["org.apache.commons.math3.exception.MathUnsupportedOperationException#MathUnsupportedOperationException()"],
    "org.apache.commons.math3.analysis.differentiation.SparseGradient#subtract(SparseGradient)": ["org.apache.commons.math3.analysis.differentiation.SparseGradient#SparseGradient(double,Map<Integer, Double>)"],
    "org.apache.commons.math3.geometry.partitioning.AbstractSubHyperplane#AbstractSubHyperplane(Hyperplane<S extends Space>,Region<T extends Space>)": ["org.apache.commons.math3.geometry.partitioning.AbstractSubHyperplane.<init>()"],
    "org.apache.commons.math3.random.EmpiricalDistribution#getKernel(SummaryStatistics)": [
        "org.apache.commons.math3.stat.descriptive.SummaryStatistics#getVariance()",
        "org.apache.commons.math3.stat.descriptive.SummaryStatistics#getStandardDeviation()",
        "org.apache.commons.math3.random.RandomDataGenerator#getRandomGenerator()",
        "org.apache.commons.math3.distribution.NormalDistribution#NormalDistribution(RandomGenerator,double,double,double)",
        "org.apache.commons.math3.distribution.NormalDistribution.<staticinit>()",
        "org.apache.commons.math3.stat.descriptive.SynchronizedSummaryStatistics#getStandardDeviation()",
        "org.apache.commons.math3.stat.descriptive.SummaryStatistics#getMean()",
        "org.apache.commons.math3.stat.descriptive.SynchronizedSummaryStatistics#getVariance()",
        "org.apache.commons.math3.stat.descriptive.SynchronizedSummaryStatistics#getN()",
        "org.apache.commons.math3.stat.descriptive.SynchronizedSummaryStatistics#getMean()",
        "org.apache.commons.math3.stat.descriptive.SummaryStatistics#getN()",
        "org.apache.commons.math3.distribution.ConstantRealDistribution#ConstantRealDistribution(double)"
    ],
    "org.apache.commons.math3.distribution.HypergeometricDistribution#getLowerDomain(int,int,int)": ["org.apache.commons.math3.util.FastMath.max(int,int)"],
    "org.apache.commons.math3.optimization.fitting.WeightedObservedPoint#WeightedObservedPoint(double,double,double)": ["org.apache.commons.math3.optimization.fitting.WeightedObservedPoint.<init>()"],
    "org.apache.commons.math3.optimization.linear.SimplexTableau#getOriginalNumDecisionVariables()": [
        "org.apache.commons.math3.linear.OpenMapRealVector#getDimension()",
        "org.apache.commons.math3.optimization.linear.LinearObjectiveFunction#getCoefficients()",
        "org.apache.commons.math3.linear.ArrayRealVector#getDimension()",
        "org.apache.commons.math3.linear.RealVector.unmodifiableRealVector(RealVector)$RealVector$1#getDimension()"
    ],
    "org.apache.commons.math3.ode.ExpandableStatefulODE#getCompleteState()": [
        "org.apache.commons.math3.ode.ExpandableStatefulODE#getTotalDimension()",
        "org.apache.commons.math3.ode.EquationsMapper#insertEquationData(double[],double[])"
    ],
    "org.apache.commons.math3.stat.inference.TTest#tTest(double,double[])": [
        "org.apache.commons.math3.stat.inference.TTest#tTest(double,double,double,double)",
        "org.apache.commons.math3.stat.StatUtils.mean(double[])",
        "org.apache.commons.math3.stat.inference.TTest#checkSampleData(double[])",
        "org.apache.commons.math3.stat.StatUtils.variance(double[])"
    ],
    "org.apache.commons.math3.analysis.FunctionUtils.toUnivariateDifferential(DifferentiableUnivariateFunction)": ["org.apache.commons.math3.analysis.FunctionUtils.toUnivariateDifferential(DifferentiableUnivariateFunction)$UnivariateDifferentiableFunction$1.<init>()"],
    "org.apache.commons.math3.stat.inference.TestUtils.approximateP(double,int,int)": [
        "org.apache.commons.math3.stat.inference.KolmogorovSmirnovTest#approximateP(double,int,int)",
        "org.apache.commons.math3.stat.inference.TestUtils.<staticinit>()"
    ],
    "org.apache.commons.math3.ml.distance.CanberraDistance#compute(double[],double[])": [
        "org.apache.commons.math3.util.FastMath.abs(double)",
        "org.apache.commons.math3.util.MathArrays.checkEqualLength(double[],double[])"
    ],
    "org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile.Marker#previous(Marker)": ["org.apache.commons.math3.util.MathUtils.checkNotNull(Object)"],
    "org.apache.commons.math3.distribution.HypergeometricDistribution#probability(int)": [
        "org.apache.commons.math3.util.FastMath.exp(double)",
        "org.apache.commons.math3.distribution.HypergeometricDistribution#logProbability(int)"
    ],
    "org.apache.commons.math3.random.BitsStreamGenerator#BitsStreamGenerator()": ["org.apache.commons.math3.random.BitsStreamGenerator.<init>()"],
    "org.apache.commons.math3.util.Decimal64#copySign(Decimal64)": [
        "org.apache.commons.math3.util.Decimal64#Decimal64(double)",
        "org.apache.commons.math3.util.FastMath.copySign(double,double)"
    ],
    "org.apache.commons.math3.complex.ComplexUtils.polar2Complex(double,double)": [
        "org.apache.commons.math3.util.FastMath.sin(double)",
        "org.apache.commons.math3.complex.Complex.<staticinit>()",
        "org.apache.commons.math3.exception.util.LocalizedFormats.<staticinit>()",
        "org.apache.commons.math3.util.FastMath.cos(double)",
        "org.apache.commons.math3.complex.Complex#Complex(double,double)"
    ],
    "org.apache.commons.math3.linear.ArrayFieldVector#ArrayFieldVector(T extends FieldElement[],ArrayFieldVector<T extends FieldElement>)": ["org.apache.commons.math3.linear.ArrayFieldVector#ArrayFieldVector(T extends FieldElement[],FieldVector<T extends FieldElement>)"],
    "org.apache.commons.math3.fraction.Fraction#divide(int)": [
        "org.apache.commons.math3.fraction.Fraction#Fraction(int)",
        "org.apache.commons.math3.fraction.Fraction#divide(Fraction)"
    ],
    "org.apache.commons.math3.linear.RealMatrixFormat#RealMatrixFormat(String,String,String,String,String,String)": [
        "org.apache.commons.math3.linear.RealMatrixFormat#RealMatrixFormat(String,String,String,String,String,String,NumberFormat)",
        "org.apache.commons.math3.util.CompositeFormat.getDefaultNumberFormat()"
    ],
    "org.apache.commons.math3.geometry.euclidean.twod.Vector2D.<staticinit>()": ["org.apache.commons.math3.geometry.euclidean.twod.Vector2D#Vector2D(double,double)"],
    "org.apache.commons.math3.analysis.function.Signum#value(double)": ["org.apache.commons.math3.util.FastMath.signum(double)"],
    "org.apache.commons.math3.random.ValueServer#getEmpiricalDistribution()": ["org.apache.commons.math3.random.ValueServer.<staticinit>()"],
    "org.apache.commons.math3.linear.ArrayFieldVector#checkIndices(int,int)": [
        "org.apache.commons.math3.exception.util.LocalizedFormats.<staticinit>()",
        "org.apache.commons.math3.linear.ArrayFieldVector#getDimension()"
    ],
    "org.apache.commons.math3.linear.ArrayFieldVector#ArrayFieldVector(T extends FieldElement[],int,int)": [
        "org.apache.commons.math3.linear.ArrayFieldVector.<init>()",
        "org.apache.commons.math3.util.MathUtils.checkNotNull(Object)",
        "org.apache.commons.math3.util.MathArrays.buildArray(Field<T>,int)"
    ],
    "org.apache.commons.math3.distribution.GammaDistribution#GammaDistribution(double,double,double)": [
        "org.apache.commons.math3.random.Well19937c#Well19937c()",
        "org.apache.commons.math3.distribution.GammaDistribution#GammaDistribution(RandomGenerator,double,double,double)",
        "org.apache.commons.math3.distribution.GammaDistribution.<staticinit>()"
    ],
    "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer.sqrt(RealMatrix)": [
        "org.apache.commons.math3.linear.DiagonalMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.Array2DRowRealMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.BlockFieldMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.SparseFieldMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.DiagonalMatrix#getEntry(int,int)",
        "org.apache.commons.math3.linear.OpenMapRealMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.OpenMapRealMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.DiagonalMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.OpenMapRealMatrix#getEntry(int,int)",
        "org.apache.commons.math3.linear.Array2DRowFieldMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.Array2DRowRealMatrix#Array2DRowRealMatrix(double[][],boolean)",
        "org.apache.commons.math3.linear.BlockRealMatrix#getEntry(int,int)",
        "org.apache.commons.math3.linear.SparseFieldMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.BlockFieldMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.BlockRealMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.Array2DRowRealMatrix#getEntry(int,int)",
        "org.apache.commons.math3.linear.Array2DRowRealMatrix#getRowDimension()",
        "org.apache.commons.math3.util.FastMath.sqrt(double)",
        "org.apache.commons.math3.linear.Array2DRowFieldMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.BlockRealMatrix#getColumnDimension()"
    ],
    "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.NelderMeadSimplex#NelderMeadSimplex(double[],double,double,double,double)": [
        "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.NelderMeadSimplex.<init>()",
        "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.AbstractSimplex#AbstractSimplex(double[])"
    ],
    "org.apache.commons.math3.optim.nonlinear.vector.jacobian.AbstractLeastSquaresOptimizer#computeCost(double[])": [
        "org.apache.commons.math3.linear.ArrayRealVector#ArrayRealVector(double[])",
        "org.apache.commons.math3.linear.AbstractRealMatrix#operate(RealVector)",
        "org.apache.commons.math3.optim.nonlinear.vector.MultivariateVectorOptimizer#getWeight()",
        "org.apache.commons.math3.util.FastMath.sqrt(double)",
        "org.apache.commons.math3.linear.ArrayRealVector#dotProduct(RealVector)"
    ],
    "org.apache.commons.math3.analysis.differentiation.SparseGradient#taylor(double[]...)": ["org.apache.commons.math3.analysis.differentiation.SparseGradient#getDerivative(int)"],
    "org.apache.commons.math3.analysis.solvers.IllinoisSolver#IllinoisSolver(double,double,double)": [
        "org.apache.commons.math3.analysis.solvers.BaseSecantSolver.Method.<staticinit>()",
        "org.apache.commons.math3.analysis.solvers.IllinoisSolver.<init>()",
        "org.apache.commons.math3.analysis.solvers.BaseSecantSolver#BaseSecantSolver(double,double,double,Method)"
    ],
    "org.apache.commons.math3.optim.BaseMultivariateOptimizer#optimize(OptimizationData[]...)": ["org.apache.commons.math3.optim.BaseOptimizer#optimize(OptimizationData[]...)"],
    "org.apache.commons.math3.linear.MatrixUtils.FractionMatrixConverter#visit(int,int,Fraction)": ["org.apache.commons.math3.fraction.Fraction#doubleValue()"],
    "org.apache.commons.math3.stat.StatUtils.min(double[])": [
        "org.apache.commons.math3.stat.descriptive.moment.StandardDeviation#evaluate(double[])",
        "org.apache.commons.math3.stat.descriptive.moment.Variance#evaluate(double[])",
        "org.apache.commons.math3.stat.descriptive.AbstractUnivariateStatistic#evaluate(double[])",
        "org.apache.commons.math3.stat.StatUtils.<staticinit>()",
        "org.apache.commons.math3.stat.descriptive.AbstractStorelessUnivariateStatistic#evaluate(double[])"
    ],
    "org.apache.commons.math3.geometry.VectorFormat.getAvailableLocales()": [
        "org.apache.commons.math3.fraction.BigFractionFormat.getAvailableLocales()",
        "org.apache.commons.math3.fraction.FractionFormat.getAvailableLocales()"
    ],
    "org.apache.commons.math3.linear.Array2DRowRealMatrix#multiplyEntry(int,int,double)": ["org.apache.commons.math3.linear.MatrixUtils.checkMatrixIndex(AnyMatrix,int,int)"],
    "org.apache.commons.math3.linear.RealVector.unmodifiableRealVector(RealVector)$RealVector$1#unitVector()": [
        "org.apache.commons.math3.linear.RealVector#unitVector()",
        "org.apache.commons.math3.linear.OpenMapRealVector#unitVector()",
        "org.apache.commons.math3.linear.RealVector.unmodifiableRealVector(RealVector)$RealVector$1#unitVector()"
    ],
    "org.apache.commons.math3.stat.Frequency#getCumFreq(long)": ["org.apache.commons.math3.stat.Frequency#getCumFreq(Comparable<?>)"],
    "org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile.Markers#clone()": [
        "org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile.Marker#clone()",
        "org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile.Marker#Marker()",
        "org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile.Markers#Markers(Marker[])"
    ],
    "org.apache.commons.math3.stat.descriptive.SummaryStatistics.copy(SummaryStatistics,SummaryStatistics)": [
        "org.apache.commons.math3.util.MathUtils.checkNotNull(Object)",
        "org.apache.commons.math3.stat.descriptive.moment.ThirdMoment#copy()",
        "org.apache.commons.math3.stat.descriptive.moment.Variance#copy()",
        "org.apache.commons.math3.stat.descriptive.moment.FourthMoment#copy()",
        "org.apache.commons.math3.stat.descriptive.rank.Max.copy(Max,Max)",
        "org.apache.commons.math3.stat.descriptive.moment.SecondMoment#copy()",
        "org.apache.commons.math3.stat.descriptive.moment.GeometricMean.copy(GeometricMean,GeometricMean)",
        "org.apache.commons.math3.stat.descriptive.moment.FirstMoment#copy()",
        "org.apache.commons.math3.stat.descriptive.summary.SumOfLogs#copy()",
        "org.apache.commons.math3.stat.descriptive.moment.GeometricMean#copy()",
        "org.apache.commons.math3.stat.descriptive.SynchronizedSummaryStatistics#getVarianceImpl()",
        "org.apache.commons.math3.stat.descriptive.moment.Mean.copy(Mean,Mean)",
        "org.apache.commons.math3.stat.descriptive.moment.GeometricMean#GeometricMean(SumOfLogs)",
        "org.apache.commons.math3.stat.descriptive.moment.Mean#Mean(FirstMoment)",
        "org.apache.commons.math3.stat.descriptive.rank.Min.copy(Min,Min)",
        "org.apache.commons.math3.stat.descriptive.moment.Kurtosis#copy()",
        "org.apache.commons.math3.stat.descriptive.summary.SumOfSquares.copy(SumOfSquares,SumOfSquares)",
        "org.apache.commons.math3.stat.descriptive.SummaryStatistics#getVarianceImpl()",
        "org.apache.commons.math3.stat.descriptive.moment.Variance#Variance(SecondMoment)",
        "org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile#copy()",
        "org.apache.commons.math3.stat.descriptive.summary.SumOfLogs.copy(SumOfLogs,SumOfLogs)",
        "org.apache.commons.math3.stat.descriptive.rank.Max#copy()",
        "org.apache.commons.math3.stat.descriptive.summary.SumOfSquares#copy()",
        "org.apache.commons.math3.stat.descriptive.summary.Sum.copy(Sum,Sum)",
        "org.apache.commons.math3.stat.descriptive.moment.Variance.copy(Variance,Variance)",
        "org.apache.commons.math3.stat.descriptive.summary.Product#copy()",
        "org.apache.commons.math3.stat.descriptive.moment.Mean#copy()",
        "org.apache.commons.math3.stat.descriptive.SummaryStatistics#getGeoMeanImpl()",
        "org.apache.commons.math3.stat.descriptive.moment.Skewness#copy()",
        "org.apache.commons.math3.stat.descriptive.SynchronizedSummaryStatistics#getGeoMeanImpl()",
        "org.apache.commons.math3.stat.descriptive.moment.StandardDeviation#copy()",
        "org.apache.commons.math3.stat.descriptive.rank.Min#copy()",
        "org.apache.commons.math3.stat.descriptive.summary.Sum#copy()"
    ],
    "org.apache.commons.math3.linear.ArrayFieldVector#walkInOptimizedOrder(FieldVectorPreservingVisitor<T extends FieldElement>,int,int)": ["org.apache.commons.math3.linear.ArrayFieldVector#walkInDefaultOrder(FieldVectorPreservingVisitor<T extends FieldElement>,int,int)"],
    "org.apache.commons.math3.optimization.direct.CMAESOptimizer.min(RealMatrix)": [
        "org.apache.commons.math3.linear.DiagonalMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.Array2DRowRealMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.BlockFieldMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.SparseFieldMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.DiagonalMatrix#getEntry(int,int)",
        "org.apache.commons.math3.linear.OpenMapRealMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.OpenMapRealMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.DiagonalMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.OpenMapRealMatrix#getEntry(int,int)",
        "org.apache.commons.math3.linear.BlockRealMatrix#getEntry(int,int)",
        "org.apache.commons.math3.linear.Array2DRowFieldMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.SparseFieldMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.BlockFieldMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.Array2DRowRealMatrix#getEntry(int,int)",
        "org.apache.commons.math3.linear.BlockRealMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.Array2DRowRealMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.Array2DRowFieldMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.BlockRealMatrix#getColumnDimension()"
    ],
    "org.apache.commons.math3.fraction.BigFraction#divide(int)": ["org.apache.commons.math3.fraction.BigFraction#divide(BigInteger)"],
    "org.apache.commons.math3.analysis.solvers.LaguerreSolver.ComplexSolver#isRoot(double,double,Complex)": [
        "org.apache.commons.math3.analysis.solvers.BaseAbstractUnivariateSolver#getAbsoluteAccuracy()",
        "org.apache.commons.math3.complex.Complex#getReal()",
        "org.apache.commons.math3.analysis.solvers.BaseAbstractUnivariateSolver#isSequence(double,double,double)",
        "org.apache.commons.math3.analysis.solvers.BaseAbstractUnivariateSolver#getFunctionValueAccuracy()",
        "org.apache.commons.math3.util.FastMath.abs(double)",
        "org.apache.commons.math3.util.FastMath.max(double,double)",
        "org.apache.commons.math3.complex.Complex#getImaginary()",
        "org.apache.commons.math3.analysis.solvers.BaseAbstractUnivariateSolver#getRelativeAccuracy()",
        "org.apache.commons.math3.complex.Complex#abs()"
    ],
    "org.apache.commons.math3.random.StableRandomGenerator#nextNormalizedDouble()": [
        "org.apache.commons.math3.random.SynchronizedRandomGenerator#nextDouble()",
        "org.apache.commons.math3.util.FastMath.pow(double,double)",
        "org.apache.commons.math3.util.FastMath.abs(double)",
        "org.apache.commons.math3.random.RandomAdaptor#nextDouble()",
        "org.apache.commons.math3.util.FastMath.sqrt(double)",
        "org.apache.commons.math3.util.FastMath.sin(double)",
        "org.apache.commons.math3.random.RandomGeneratorFactory.createRandomGenerator(Random)$RandomGenerator$1#nextDouble()",
        "org.apache.commons.math3.util.FastMath.log(double)",
        "org.apache.commons.math3.random.BitsStreamGenerator#nextDouble()",
        "org.apache.commons.math3.util.FastMath.tan(double)",
        "org.apache.commons.math3.util.FastMath.<staticinit>()",
        "org.apache.commons.math3.util.FastMath.cos(double)"
    ],
    "org.apache.commons.math3.analysis.differentiation.DerivativeStructure#pow(DerivativeStructure)": [
        "org.apache.commons.math3.analysis.differentiation.DerivativeStructure#DerivativeStructure(DSCompiler)",
        "org.apache.commons.math3.analysis.differentiation.DSCompiler#checkCompatibility(DSCompiler)",
        "org.apache.commons.math3.analysis.differentiation.DSCompiler#pow(double[],int,double[],int,double[],int)"
    ],
    "org.apache.commons.math3.distribution.FDistribution#getNumericalVariance()": ["org.apache.commons.math3.distribution.FDistribution#calculateNumericalVariance()"],
    "org.apache.commons.math3.random.ISAACRandom#isaac3()": ["org.apache.commons.math3.random.ISAACRandom.<staticinit>()"],
    "org.apache.commons.math3.stat.ranking.NaturalRanking#getNanPositions(IntDoublePair[])": [
        "org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile.FixedCapacityList#add(E)",
        "org.apache.commons.math3.stat.ranking.NaturalRanking.IntDoublePair#getValue()"
    ],
    "org.apache.commons.math3.stat.descriptive.SynchronizedDescriptiveStatistics#copy()": [
        "org.apache.commons.math3.stat.descriptive.SynchronizedDescriptiveStatistics#SynchronizedDescriptiveStatistics()",
        "org.apache.commons.math3.stat.descriptive.SynchronizedDescriptiveStatistics.copy(SynchronizedDescriptiveStatistics,SynchronizedDescriptiveStatistics)"
    ],
    "org.apache.commons.math3.optimization.direct.BOBYQAOptimizer#setup(double[],double[])": [
        "org.apache.commons.math3.optimization.direct.BOBYQAOptimizer.<staticinit>()",
        "org.apache.commons.math3.exception.util.LocalizedFormats.<staticinit>()",
        "org.apache.commons.math3.linear.ArrayRealVector#ArrayRealVector(int)",
        "org.apache.commons.math3.optimization.direct.BOBYQAOptimizer.printMethod()",
        "org.apache.commons.math3.util.FastMath.min(double,double)",
        "org.apache.commons.math3.linear.Array2DRowRealMatrix#Array2DRowRealMatrix(int,int)",
        "org.apache.commons.math3.optimization.direct.BaseAbstractMultivariateOptimizer#getStartPoint()"
    ],
    "org.apache.commons.math3.dfp.Dfp#Dfp(DfpField,String)": [
        "org.apache.commons.math3.dfp.DfpDec#round(int)",
        "org.apache.commons.math3.dfp.Dfp#round(int)",
        "org.apache.commons.math3.dfp.DfpField#getRadixDigits()",
        "org.apache.commons.math3.dfp.Dfp.<staticinit>()",
        "org.apache.commons.math3.dfp.Dfp#getRadixDigits()",
        "org.apache.commons.math3.dfp.Dfp.<init>()"
    ],
    "org.apache.commons.math3.dfp.DfpMath.splitPow(Dfp[],int)": [
        "org.apache.commons.math3.dfp.Dfp#add(Dfp)",
        "org.apache.commons.math3.dfp.DfpMath.splitMult(Dfp[],Dfp[])",
        "org.apache.commons.math3.dfp.Dfp#Dfp(Dfp)",
        "org.apache.commons.math3.dfp.Dfp#getOne()",
        "org.apache.commons.math3.dfp.Dfp#divide(Dfp)",
        "org.apache.commons.math3.dfp.Dfp#getZero()"
    ],
    "org.apache.commons.math3.userguide.geometry.GeometryExample.createCanvas()": ["org.apache.commons.math3.userguide.geometry.GeometryExample.createCanvas()$PBasicInputEventHandler$1.<init>()"],
    "org.apache.commons.math3.geometry.euclidean.twod.Vector2D#distance1(Vector<Euclidean2D>)": ["org.apache.commons.math3.util.FastMath.abs(double)"],
    "org.apache.commons.math3.stat.correlation.PearsonsCorrelation#correlation(double[],double[])": [
        "org.apache.commons.math3.exception.DimensionMismatchException#DimensionMismatchException(int,int)",
        "org.apache.commons.math3.stat.regression.SimpleRegression#addData(double,double)",
        "org.apache.commons.math3.stat.regression.SimpleRegression#getR()",
        "org.apache.commons.math3.stat.regression.SimpleRegression#SimpleRegression()",
        "org.apache.commons.math3.exception.util.LocalizedFormats.<staticinit>()"
    ],
    "org.apache.commons.math3.distribution.AbstractRealDistribution#cumulativeProbability(double,double)": [
        "org.apache.commons.math3.distribution.NormalDistribution#probability(double,double)",
        "org.apache.commons.math3.distribution.LogNormalDistribution#probability(double,double)",
        "org.apache.commons.math3.distribution.AbstractRealDistribution#probability(double,double)"
    ],
    "org.apache.commons.math3.exception.util.ExceptionContext#ExceptionContext(Throwable)": ["org.apache.commons.math3.exception.util.ExceptionContext.<init>()"],
    "org.apache.commons.math3.distribution.EnumeratedRealDistribution#getNumericalVariance()": [
        "org.apache.commons.math3.util.Pair#getValue()",
        "org.apache.commons.math3.distribution.EnumeratedDistribution#getPmf()",
        "org.apache.commons.math3.util.Pair#getKey()",
        "org.apache.commons.math3.optim.PointVectorValuePair#getValue()",
        "org.apache.commons.math3.optimization.PointVectorValuePair#getValue()"
    ],
    "org.apache.commons.math3.geometry.euclidean.oned.Vector1DFormat.getInstance(Locale)": [
        "org.apache.commons.math3.geometry.euclidean.oned.Vector1DFormat#Vector1DFormat(NumberFormat)",
        "org.apache.commons.math3.util.CompositeFormat.getDefaultNumberFormat(Locale)"
    ],
    "org.apache.commons.math3.analysis.interpolation.TricubicSplineInterpolatingFunction#value(double,double,double)": [
        "org.apache.commons.math3.analysis.interpolation.TricubicSplineInterpolatingFunction#searchIndex(double,double[])",
        "org.apache.commons.math3.analysis.interpolation.TricubicSplineFunction#value(double,double,double)"
    ],
    "org.apache.commons.math3.exception.util.ExceptionContext#serializeContext(ObjectOutputStream)": ["org.apache.commons.math3.exception.util.ExceptionContext#nonSerializableReplacement(Object)"],
    "org.apache.commons.math3.util.ResizableDoubleArray#setContractionCriteria(float)": [
        "org.apache.commons.math3.util.ResizableDoubleArray#getExpansionFactor()",
        "org.apache.commons.math3.util.ResizableDoubleArray#checkContractExpand(float,float)"
    ],
    "org.apache.commons.math3.optim.linear.LinearConstraint#LinearConstraint(RealVector,Relationship,double)": ["org.apache.commons.math3.optim.linear.LinearConstraint.<init>()"],
    "org.apache.commons.math3.analysis.function.Expm1#derivative()": [
        "org.apache.commons.math3.analysis.function.Log10#derivative()",
        "org.apache.commons.math3.analysis.function.Power#derivative()",
        "org.apache.commons.math3.analysis.function.Sin#derivative()",
        "org.apache.commons.math3.analysis.function.Exp#derivative()",
        "org.apache.commons.math3.analysis.function.HarmonicOscillator#derivative()",
        "org.apache.commons.math3.analysis.polynomials.PolynomialFunction#derivative()",
        "org.apache.commons.math3.analysis.FunctionUtils.toDifferentiableUnivariateFunction(UnivariateDifferentiableFunction)",
        "org.apache.commons.math3.analysis.function.Logit#derivative()",
        "org.apache.commons.math3.analysis.function.Cbrt#derivative()",
        "org.apache.commons.math3.analysis.FunctionUtils.toDifferentiableUnivariateFunction(UnivariateDifferentiableFunction)$DifferentiableUnivariateFunction$1#derivative()",
        "org.apache.commons.math3.analysis.polynomials.PolynomialSplineFunction#derivative()",
        "org.apache.commons.math3.analysis.function.Cosh#derivative()",
        "org.apache.commons.math3.analysis.function.Identity#derivative()",
        "org.apache.commons.math3.analysis.function.Inverse#derivative()",
        "org.apache.commons.math3.analysis.function.Acosh#derivative()",
        "org.apache.commons.math3.analysis.function.Acos#derivative()",
        "org.apache.commons.math3.analysis.function.Atan#derivative()",
        "org.apache.commons.math3.analysis.function.Log#derivative()",
        "org.apache.commons.math3.analysis.function.Sqrt#derivative()",
        "org.apache.commons.math3.analysis.function.Logistic#derivative()",
        "org.apache.commons.math3.analysis.function.Expm1#derivative()",
        "org.apache.commons.math3.analysis.function.Asinh#derivative()",
        "org.apache.commons.math3.analysis.function.Gaussian#derivative()",
        "org.apache.commons.math3.analysis.function.Sinc#derivative()",
        "org.apache.commons.math3.analysis.function.Sigmoid#derivative()",
        "org.apache.commons.math3.analysis.function.Constant#derivative()",
        "org.apache.commons.math3.analysis.function.Sinh#derivative()",
        "org.apache.commons.math3.analysis.function.Tanh#derivative()",
        "org.apache.commons.math3.analysis.function.Asin#derivative()",
        "org.apache.commons.math3.analysis.function.Minus#derivative()",
        "org.apache.commons.math3.analysis.FunctionUtils.compose(DifferentiableUnivariateFunction[]...)$DifferentiableUnivariateFunction$1#derivative()",
        "org.apache.commons.math3.analysis.FunctionUtils.add(DifferentiableUnivariateFunction[]...)$DifferentiableUnivariateFunction$1#derivative()",
        "org.apache.commons.math3.analysis.FunctionUtils.multiply(DifferentiableUnivariateFunction[]...)$DifferentiableUnivariateFunction$1#derivative()",
        "org.apache.commons.math3.analysis.function.Log1p#derivative()",
        "org.apache.commons.math3.analysis.function.Tan#derivative()",
        "org.apache.commons.math3.analysis.function.Cos#derivative()",
        "org.apache.commons.math3.analysis.function.Atanh#derivative()"
    ],
    "org.apache.commons.math3.ode.nonstiff.HighamHall54FieldIntegrator#getC()": [
        "org.apache.commons.math3.ode.AbstractFieldIntegrator#getField()",
        "org.apache.commons.math3.fraction.BigFractionField#getOne()",
        "org.apache.commons.math3.fraction.FractionField#getOne()",
        "org.apache.commons.math3.analysis.differentiation.SparseGradient#getField()$Field$1#getOne()",
        "org.apache.commons.math3.ode.nonstiff.EmbeddedRungeKuttaFieldIntegrator#fraction(int,int)",
        "org.apache.commons.math3.dfp.DfpField#getOne()",
        "org.apache.commons.math3.analysis.differentiation.DerivativeStructure#getField()$Field$1#getOne()",
        "org.apache.commons.math3.util.MathArrays.buildArray(Field<T>,int)",
        "org.apache.commons.math3.util.Decimal64Field#getOne()",
        "org.apache.commons.math3.complex.ComplexField#getOne()",
        "org.apache.commons.math3.util.BigRealField#getOne()"
    ],
    "org.apache.commons.math3.linear.RealMatrixFormat#parse(String)": [
        "org.apache.commons.math3.linear.RealMatrixFormat#parse(String,ParsePosition)",
        "org.apache.commons.math3.exception.MathParseException#MathParseException(String,int,Class<?>)"
    ],
    "org.apache.commons.math3.linear.OpenMapRealVector#unitVector()": [
        "org.apache.commons.math3.linear.OpenMapRealVector#copy()",
        "org.apache.commons.math3.linear.OpenMapRealVector#unitize()"
    ],
    "org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distanceSq(Vector3D,Vector3D)": ["org.apache.commons.math3.geometry.euclidean.threed.Vector3D#distanceSq(Vector<Euclidean3D>)"],
    "org.apache.commons.math3.stat.clustering.KMeansPlusPlusClusterer#cluster(Collection<T extends Clusterable>,int,int,int)": [
        "org.apache.commons.math3.stat.clustering.KMeansPlusPlusClusterer#cluster(Collection<T extends Clusterable>,int,int)",
        "org.apache.commons.math3.stat.descriptive.moment.Variance#Variance()",
        "org.apache.commons.math3.stat.clustering.Cluster#getCenter()",
        "org.apache.commons.math3.stat.clustering.Cluster#getPoints()",
        "org.apache.commons.math3.stat.descriptive.moment.Variance#getResult()",
        "org.apache.commons.math3.stat.descriptive.moment.Variance#increment(double)"
    ],
    "org.apache.commons.math3.util.FastMath.pow(double,int)": ["org.apache.commons.math3.util.FastMath.pow(double,long)"],
    "org.apache.commons.math3.analysis.solvers.MullerSolver2#MullerSolver2(double,double)": [
        "org.apache.commons.math3.analysis.solvers.MullerSolver2.<init>()",
        "org.apache.commons.math3.analysis.solvers.AbstractUnivariateSolver#AbstractUnivariateSolver(double,double)"
    ],
    "org.apache.commons.math3.linear.ArrayFieldVector#mapInv()": [
        "org.apache.commons.math3.fraction.BigFractionField#getOne()",
        "org.apache.commons.math3.fraction.FractionField#getOne()",
        "org.apache.commons.math3.linear.ArrayFieldVector#ArrayFieldVector(Field<T extends FieldElement>,T extends FieldElement[],boolean)",
        "org.apache.commons.math3.analysis.differentiation.SparseGradient#getField()$Field$1#getOne()",
        "org.apache.commons.math3.exception.util.LocalizedFormats.<staticinit>()",
        "org.apache.commons.math3.dfp.DfpField#getOne()",
        "org.apache.commons.math3.analysis.differentiation.DerivativeStructure#getField()$Field$1#getOne()",
        "org.apache.commons.math3.util.MathArrays.buildArray(Field<T>,int)",
        "org.apache.commons.math3.util.Decimal64Field#getOne()",
        "org.apache.commons.math3.complex.ComplexField#getOne()",
        "org.apache.commons.math3.util.BigRealField#getOne()"
    ],
    "org.apache.commons.math3.analysis.interpolation.HermiteInterpolator#checkInterpolation()": [
        "org.apache.commons.math3.exception.NoDataException#NoDataException(Localizable)",
        "org.apache.commons.math3.exception.util.LocalizedFormats.<staticinit>()"
    ],
    "org.apache.commons.math3.ml.neuralnet.twod.NeuronSquareMesh2D#NeuronSquareMesh2D(boolean,boolean,SquareNeighbourhood,Network,long[][])": ["org.apache.commons.math3.ml.neuralnet.twod.NeuronSquareMesh2D.<init>()"],
    "org.apache.commons.math3.geometry.euclidean.twod.Vector2D#hashCode()": [
        "org.apache.commons.math3.util.MathUtils.hash(double)",
        "org.apache.commons.math3.geometry.euclidean.twod.Vector2D#isNaN()"
    ],
    "org.apache.commons.math3.stat.clustering.KMeansPlusPlusClusterer.assignPointsToClusters(List<Cluster<T extends Clusterable>>,Collection<T extends Clusterable>,int[])": [
        "org.apache.commons.math3.stat.clustering.KMeansPlusPlusClusterer.getNearestCluster(Collection<Cluster<T extends Clusterable>>,T extends Clusterable)",
        "org.apache.commons.math3.stat.clustering.Cluster#addPoint(T extends Clusterable)"
    ],
    "org.apache.commons.math3.optimization.direct.MultiDirectionalSimplex#MultiDirectionalSimplex(int,double,double)": ["org.apache.commons.math3.optimization.direct.MultiDirectionalSimplex#MultiDirectionalSimplex(int,double,double,double)"],
    "org.apache.commons.math3.distribution.fitting.MultivariateNormalMixtureExpectationMaximization.estimate(double[][],int)": [
        "org.apache.commons.math3.distribution.fitting.MultivariateNormalMixtureExpectationMaximization.DataRow#DataRow(double[])",
        "org.apache.commons.math3.distribution.fitting.MultivariateNormalMixtureExpectationMaximization.DataRow#getRow()",
        "org.apache.commons.math3.util.Pair#Pair(K,V)",
        "org.apache.commons.math3.stat.correlation.StorelessCovariance#getCovarianceMatrix()",
        "org.apache.commons.math3.linear.DiagonalMatrix#getData()",
        "org.apache.commons.math3.linear.AbstractRealMatrix#getData()",
        "org.apache.commons.math3.util.MathArrays.scaleInPlace(double,double[])",
        "org.apache.commons.math3.distribution.MixtureMultivariateNormalDistribution#MixtureMultivariateNormalDistribution(List<Pair<Double, MultivariateNormalDistribution>>)",
        "org.apache.commons.math3.linear.Array2DRowRealMatrix#getData()",
        "org.apache.commons.math3.stat.correlation.Covariance#getCovarianceMatrix()",
        "org.apache.commons.math3.stat.correlation.Covariance#Covariance(double[][])",
        "org.apache.commons.math3.distribution.MultivariateNormalDistribution#MultivariateNormalDistribution(double[],double[][])",
        "org.apache.commons.math3.linear.BlockRealMatrix#getData()"
    ],
    "org.apache.commons.math3.linear.RealVector#equals(Object)": ["org.apache.commons.math3.exception.MathUnsupportedOperationException#MathUnsupportedOperationException()"],
    "org.apache.commons.math3.util.BigReal#BigReal(double)": ["org.apache.commons.math3.util.BigReal.<init>()"],
    "org.apache.commons.math3.geometry.euclidean.threed.Vector3DFormat.getInstance()": ["org.apache.commons.math3.geometry.euclidean.threed.Vector3DFormat.getInstance(Locale)"],
    "org.apache.commons.math3.ode.nonstiff.AdamsIntegrator#updateHighOrderDerivativesPhase2(double[],double[],Array2DRowRealMatrix)": ["org.apache.commons.math3.ode.nonstiff.AdamsNordsieckTransformer#updateHighOrderDerivativesPhase2(double[],double[],Array2DRowRealMatrix)"],
    "org.apache.commons.math3.analysis.solvers.BaseSecantSolver#solve(int,UnivariateFunction,double,double,AllowedSolution)": ["org.apache.commons.math3.analysis.solvers.BaseSecantSolver#solve(int,UnivariateFunction,double,double,double,AllowedSolution)"],
    "org.apache.commons.math3.geometry.euclidean.oned.OrientedPoint#wholeHyperplane()": ["org.apache.commons.math3.geometry.euclidean.oned.SubOrientedPoint#SubOrientedPoint(Hyperplane<Euclidean1D>,Region<Euclidean1D>)"],
    "org.apache.commons.math3.ode.sampling.AbstractFieldStepInterpolator#restrictStep(FieldODEStateAndDerivative<T extends RealFieldElement>,FieldODEStateAndDerivative<T extends RealFieldElement>)": [
        "org.apache.commons.math3.ode.nonstiff.AdamsFieldStepInterpolator#create(boolean,FieldODEStateAndDerivative<T extends RealFieldElement>,FieldODEStateAndDerivative<T extends RealFieldElement>,FieldODEStateAndDerivative<T extends RealFieldElement>,FieldODEStateAndDerivative<T extends RealFieldElement>,FieldEquationsMapper<T extends RealFieldElement>)",
        "org.apache.commons.math3.ode.nonstiff.RungeKuttaFieldStepInterpolator#create(boolean,FieldODEStateAndDerivative<T extends RealFieldElement>,FieldODEStateAndDerivative<T extends RealFieldElement>,FieldODEStateAndDerivative<T extends RealFieldElement>,FieldODEStateAndDerivative<T extends RealFieldElement>,FieldEquationsMapper<T extends RealFieldElement>)"
    ],
    "org.apache.commons.math3.fraction.BigFraction#BigFraction(double)": [
        "org.apache.commons.math3.fraction.BigFraction.<init>()",
        "org.apache.commons.math3.exception.util.LocalizedFormats.<staticinit>()"
    ],
    "org.apache.commons.math3.util.Decimal64#floor()": [
        "org.apache.commons.math3.util.Decimal64#Decimal64(double)",
        "org.apache.commons.math3.util.FastMath.floor(double)"
    ],
    "org.apache.commons.math3.optim.AbstractOptimizationProblem#getEvaluationCounter()": [
        "org.apache.commons.math3.util.Incrementor#Incrementor(int,MaxCountExceededCallback)",
        "org.apache.commons.math3.optim.AbstractOptimizationProblem.<staticinit>()"
    ],
    "org.apache.commons.math3.analysis.interpolation.BicubicInterpolator#interpolate(double[],double[],double[][])": [
        "org.apache.commons.math3.exception.DimensionMismatchException#DimensionMismatchException(int,int)",
        "org.apache.commons.math3.exception.NoDataException#NoDataException()",
        "org.apache.commons.math3.util.MathArrays.checkOrder(double[])",
        "org.apache.commons.math3.analysis.interpolation.BicubicInterpolator#interpolate(double[],double[],double[][])$BicubicInterpolatingFunction$1.<init>()"
    ],
    "org.apache.commons.math3.linear.RealVectorFormat#format(RealVector,StringBuffer,FieldPosition)": [
        "org.apache.commons.math3.linear.OpenMapRealVector#getDimension()",
        "org.apache.commons.math3.linear.ArrayRealVector#getDimension()",
        "org.apache.commons.math3.util.CompositeFormat.formatDouble(double,NumberFormat,StringBuffer,FieldPosition)",
        "org.apache.commons.math3.linear.RealVector.unmodifiableRealVector(RealVector)$RealVector$1#getDimension()",
        "org.apache.commons.math3.linear.ArrayRealVector#getEntry(int)",
        "org.apache.commons.math3.linear.OpenMapRealVector#getEntry(int)",
        "org.apache.commons.math3.linear.RealVector.unmodifiableRealVector(RealVector)$RealVector$1#getEntry(int)"
    ],
    "org.apache.commons.math3.stat.descriptive.SynchronizedSummaryStatistics#getVarianceImpl()": ["org.apache.commons.math3.stat.descriptive.SummaryStatistics#getVarianceImpl()"],
    "org.apache.commons.math3.linear.SparseFieldVector#hashCode()": [
        "org.apache.commons.math3.util.OpenIntToFieldHashMap.Iterator#hasNext()",
        "org.apache.commons.math3.util.OpenIntToFieldHashMap#iterator()",
        "org.apache.commons.math3.util.OpenIntToFieldHashMap.Iterator#value()",
        "org.apache.commons.math3.util.OpenIntToFieldHashMap.Iterator#advance()"
    ],
    "org.apache.commons.math3.analysis.FunctionUtils.toDifferentiableUnivariateFunction(UnivariateDifferentiableFunction)$UnivariateFunction$1$UnivariateFunction$1#derivative()$UnivariateFunction$1#value(double)": [
        "org.apache.commons.math3.analysis.polynomials.PolynomialFunctionNewtonForm#value(DerivativeStructure)",
        "org.apache.commons.math3.analysis.function.HarmonicOscillator#value(DerivativeStructure)",
        "org.apache.commons.math3.analysis.function.Power#value(DerivativeStructure)",
        "org.apache.commons.math3.analysis.function.Exp#value(DerivativeStructure)",
        "org.apache.commons.math3.analysis.function.Minus#value(DerivativeStructure)",
        "org.apache.commons.math3.analysis.function.Logit#value(DerivativeStructure)",
        "org.apache.commons.math3.analysis.FunctionUtils.multiply(UnivariateDifferentiableFunction[]...)$UnivariateDifferentiableFunction$1#value(DerivativeStructure)",
        "org.apache.commons.math3.analysis.differentiation.DerivativeStructure#DerivativeStructure(int,int,int,double)",
        "org.apache.commons.math3.analysis.function.Cosh#value(DerivativeStructure)",
        "org.apache.commons.math3.analysis.function.Sqrt#value(DerivativeStructure)",
        "org.apache.commons.math3.analysis.function.Gaussian#value(DerivativeStructure)",
        "org.apache.commons.math3.analysis.function.Cos#value(DerivativeStructure)",
        "org.apache.commons.math3.analysis.FunctionUtils.compose(UnivariateDifferentiableFunction[]...)$UnivariateDifferentiableFunction$1#value(DerivativeStructure)",
        "org.apache.commons.math3.analysis.function.Log1p#value(DerivativeStructure)",
        "org.apache.commons.math3.analysis.function.Inverse#value(DerivativeStructure)",
        "org.apache.commons.math3.analysis.function.Log10#value(DerivativeStructure)",
        "org.apache.commons.math3.analysis.function.Logistic#value(DerivativeStructure)",
        "org.apache.commons.math3.analysis.FunctionUtils.toUnivariateDifferential(DifferentiableUnivariateFunction)$UnivariateDifferentiableFunction$1#value(DerivativeStructure)",
        "org.apache.commons.math3.analysis.function.Acos#value(DerivativeStructure)",
        "org.apache.commons.math3.analysis.polynomials.PolynomialFunction#value(DerivativeStructure)",
        "org.apache.commons.math3.analysis.differentiation.DerivativeStructure#getPartialDerivative(int[]...)",
        "org.apache.commons.math3.analysis.FunctionUtils.add(UnivariateDifferentiableFunction[]...)$UnivariateDifferentiableFunction$1#value(DerivativeStructure)",
        "org.apache.commons.math3.analysis.function.Cbrt#value(DerivativeStructure)",
        "org.apache.commons.math3.analysis.function.Atan#value(DerivativeStructure)",
        "org.apache.commons.math3.analysis.function.Sinh#value(DerivativeStructure)",
        "org.apache.commons.math3.analysis.function.Constant#value(DerivativeStructure)",
        "org.apache.commons.math3.analysis.function.Atanh#value(DerivativeStructure)",
        "org.apache.commons.math3.analysis.function.Sinc#value(DerivativeStructure)",
        "org.apache.commons.math3.analysis.function.Acosh#value(DerivativeStructure)",
        "org.apache.commons.math3.analysis.function.Tan#value(DerivativeStructure)",
        "org.apache.commons.math3.analysis.function.Identity#value(DerivativeStructure)",
        "org.apache.commons.math3.analysis.function.Asinh#value(DerivativeStructure)",
        "org.apache.commons.math3.analysis.function.Sin#value(DerivativeStructure)",
        "org.apache.commons.math3.analysis.function.Sigmoid#value(DerivativeStructure)",
        "org.apache.commons.math3.analysis.function.Asin#value(DerivativeStructure)",
        "org.apache.commons.math3.analysis.differentiation.FiniteDifferencesDifferentiator#differentiate(UnivariateFunction)$UnivariateDifferentiableFunction$1#value(DerivativeStructure)",
        "org.apache.commons.math3.analysis.function.Expm1#value(DerivativeStructure)",
        "org.apache.commons.math3.analysis.polynomials.PolynomialSplineFunction#value(DerivativeStructure)",
        "org.apache.commons.math3.analysis.function.Tanh#value(DerivativeStructure)",
        "org.apache.commons.math3.analysis.function.Log#value(DerivativeStructure)"
    ],
    "org.apache.commons.math3.geometry.spherical.oned.ArcsSet#childAfter(BSPTree<Sphere1D>)": [
        "org.apache.commons.math3.geometry.spherical.oned.ArcsSet#isDirect(BSPTree<Sphere1D>)",
        "org.apache.commons.math3.geometry.partitioning.BSPTree#getMinus()",
        "org.apache.commons.math3.geometry.partitioning.BSPTree#getPlus()"
    ],
    "org.apache.commons.math3.stat.interval.ConfidenceInterval#checkParameters(double,double,double)": ["org.apache.commons.math3.exception.util.LocalizedFormats.<staticinit>()"],
    "org.apache.commons.math3.complex.Complex.valueOf(double)": [
        "org.apache.commons.math3.complex.Complex.<staticinit>()",
        "org.apache.commons.math3.complex.Complex#Complex(double)"
    ],
    "org.apache.commons.math3.stat.descriptive.SynchronizedDescriptiveStatistics#SynchronizedDescriptiveStatistics(SynchronizedDescriptiveStatistics)": [
        "org.apache.commons.math3.stat.descriptive.DescriptiveStatistics#DescriptiveStatistics()",
        "org.apache.commons.math3.stat.descriptive.SynchronizedDescriptiveStatistics.<init>()",
        "org.apache.commons.math3.stat.descriptive.SynchronizedDescriptiveStatistics.copy(SynchronizedDescriptiveStatistics,SynchronizedDescriptiveStatistics)"
    ],
    "org.apache.commons.math3.util.FastMath.log(double,double[])": [
        "org.apache.commons.math3.util.FastMath.lnMant.<staticinit>()",
        "org.apache.commons.math3.util.FastMath.<staticinit>()"
    ],
    "org.apache.commons.math3.linear.AbstractFieldMatrix#setColumnVector(int,FieldVector<T extends FieldElement>)": [
        "org.apache.commons.math3.linear.BlockFieldMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.ArrayFieldVector#getDimension()",
        "org.apache.commons.math3.linear.SparseFieldVector#getEntry(int)",
        "org.apache.commons.math3.linear.SparseFieldMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.SparseFieldMatrix#setEntry(int,int,T extends FieldElement)",
        "org.apache.commons.math3.linear.Array2DRowFieldMatrix#setEntry(int,int,T extends FieldElement)",
        "org.apache.commons.math3.linear.BlockFieldMatrix#setEntry(int,int,T extends FieldElement)",
        "org.apache.commons.math3.linear.Array2DRowFieldMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.SparseFieldVector#getDimension()",
        "org.apache.commons.math3.linear.ArrayFieldVector#getEntry(int)",
        "org.apache.commons.math3.linear.MatrixDimensionMismatchException#MatrixDimensionMismatchException(int,int,int,int)",
        "org.apache.commons.math3.linear.AbstractFieldMatrix#checkColumnIndex(int)"
    ],
    "org.apache.commons.math3.optim.nonlinear.scalar.MultivariateOptimizer#parseOptimizationData(OptimizationData[]...)": [
        "org.apache.commons.math3.optim.nonlinear.scalar.ObjectiveFunction#getObjectiveFunction()",
        "org.apache.commons.math3.optim.BaseMultivariateOptimizer#parseOptimizationData(OptimizationData[]...)"
    ],
    "org.apache.commons.math3.ml.neuralnet.sofm.LearningFactorFunctionFactory.exponentialDecay(double,double,long)": ["org.apache.commons.math3.ml.neuralnet.sofm.LearningFactorFunctionFactory.exponentialDecay(double,double,long)$LearningFactorFunction$1.<init>()"],
    "org.apache.commons.math3.linear.SymmLQ.State#init()": [
        "org.apache.commons.math3.linear.ArrayRealVector#copy()",
        "org.apache.commons.math3.linear.RealVector#mapMultiply(double)",
        "org.apache.commons.math3.linear.RealVector.unmodifiableRealVector(RealVector)$RealVector$1#mapMultiply(double)",
        "org.apache.commons.math3.linear.RealVector.unmodifiableRealVector(RealVector)$RealVector$1#set(double)",
        "org.apache.commons.math3.linear.ArrayRealVector#dotProduct(RealVector)",
        "org.apache.commons.math3.linear.JacobiPreconditioner#operate(RealVector)",
        "org.apache.commons.math3.linear.DiagonalMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.RealVector#dotProduct(RealVector)",
        "org.apache.commons.math3.linear.RealVector.unmodifiableRealVector(RealVector)$RealVector$1#dotProduct(RealVector)",
        "org.apache.commons.math3.linear.SymmLQ.State.<staticinit>()",
        "org.apache.commons.math3.linear.SymmLQ.State.checkSymmetry(RealLinearOperator,RealVector,RealVector,RealVector)",
        "org.apache.commons.math3.linear.BlockRealMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.JacobiPreconditioner#sqrt()$RealLinearOperator$1#getRowDimension()",
        "org.apache.commons.math3.util.FastMath.abs(double)",
        "org.apache.commons.math3.util.FastMath.sqrt(double)",
        "org.apache.commons.math3.linear.SymmLQ.State#updateNorms()",
        "org.apache.commons.math3.linear.RealVector.unmodifiableRealVector(RealVector)$RealVector$1#copy()",
        "org.apache.commons.math3.linear.JacobiPreconditioner#sqrt()$RealLinearOperator$1#operate(RealVector)",
        "org.apache.commons.math3.linear.SymmLQ.State.throwNPDLOException(RealLinearOperator,RealVector)",
        "org.apache.commons.math3.linear.OpenMapRealVector#set(double)",
        "org.apache.commons.math3.linear.JacobiPreconditioner#getRowDimension()",
        "org.apache.commons.math3.linear.SymmLQ.State.daxpy(double,RealVector,RealVector)",
        "org.apache.commons.math3.linear.ArrayRealVector#ArrayRealVector(int)",
        "org.apache.commons.math3.linear.OpenMapRealMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.Array2DRowRealMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.ArrayRealVector#set(double)",
        "org.apache.commons.math3.linear.RealVector#set(double)",
        "org.apache.commons.math3.linear.AbstractRealMatrix#operate(RealVector)",
        "org.apache.commons.math3.linear.OpenMapRealVector#copy()"
    ],
    "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer.copyColumn(RealMatrix,int,RealMatrix,int)": [
        "org.apache.commons.math3.linear.Array2DRowRealMatrix#setEntry(int,int,double)",
        "org.apache.commons.math3.linear.SparseFieldMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.DiagonalMatrix#getEntry(int,int)",
        "org.apache.commons.math3.linear.OpenMapRealMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.DiagonalMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.BlockRealMatrix#setEntry(int,int,double)",
        "org.apache.commons.math3.linear.OpenMapRealMatrix#setEntry(int,int,double)",
        "org.apache.commons.math3.linear.OpenMapRealMatrix#getEntry(int,int)",
        "org.apache.commons.math3.linear.BlockRealMatrix#getEntry(int,int)",
        "org.apache.commons.math3.linear.BlockFieldMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.Array2DRowRealMatrix#getEntry(int,int)",
        "org.apache.commons.math3.linear.BlockRealMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.Array2DRowRealMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.Array2DRowFieldMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.DiagonalMatrix#setEntry(int,int,double)"
    ],
    "org.apache.commons.math3.exception.ZeroException#ZeroException()": ["org.apache.commons.math3.exception.util.LocalizedFormats.<staticinit>()"],
    "org.apache.commons.math3.distribution.LevyDistribution#LevyDistribution(RandomGenerator,double,double)": [
        "org.apache.commons.math3.distribution.AbstractRealDistribution#AbstractRealDistribution(RandomGenerator)",
        "org.apache.commons.math3.distribution.LevyDistribution.<init>()"
    ],
    "org.apache.commons.math3.optim.linear.SimplexTableau#setEntry(int,int,double)": ["org.apache.commons.math3.linear.Array2DRowRealMatrix#setEntry(int,int,double)"],
    "org.apache.commons.math3.userguide.LowDiscrepancyGeneratorComparison.main(String[])": [
        "org.apache.commons.math3.userguide.ExampleUtils.showExampleFrame(ExampleFrame)",
        "org.apache.commons.math3.userguide.LowDiscrepancyGeneratorComparison.Display#Display()"
    ],
    "org.apache.commons.math3.distribution.UniformIntegerDistribution#UniformIntegerDistribution(RandomGenerator,int,int)": [
        "org.apache.commons.math3.distribution.UniformIntegerDistribution.<init>()",
        "org.apache.commons.math3.distribution.AbstractIntegerDistribution#AbstractIntegerDistribution(RandomGenerator)",
        "org.apache.commons.math3.exception.util.LocalizedFormats.<staticinit>()"
    ],
    "org.apache.commons.math3.random.EmpiricalDistribution#getNextValue()": [
        "org.apache.commons.math3.distribution.ExponentialDistribution#sample()",
        "org.apache.commons.math3.distribution.AbstractRealDistribution#sample()",
        "org.apache.commons.math3.distribution.ParetoDistribution#sample()",
        "org.apache.commons.math3.exception.util.LocalizedFormats.<staticinit>()",
        "org.apache.commons.math3.distribution.UniformRealDistribution#sample()",
        "org.apache.commons.math3.distribution.NormalDistribution#sample()",
        "org.apache.commons.math3.distribution.ConstantRealDistribution#sample()",
        "org.apache.commons.math3.distribution.EnumeratedRealDistribution#sample()",
        "org.apache.commons.math3.distribution.GammaDistribution#sample()",
        "org.apache.commons.math3.distribution.BetaDistribution#sample()",
        "org.apache.commons.math3.distribution.LogNormalDistribution#sample()"
    ],
    "org.apache.commons.math3.util.TransformerMap#TransformerMap()": [
        "org.apache.commons.math3.util.TransformerMap.<init>()",
        "org.apache.commons.math3.util.DefaultTransformer.<init>()"
    ],
    "org.apache.commons.math3.exception.util.ExceptionContext#addMessage(Localizable,Object[]...)": ["org.apache.commons.math3.exception.util.ArgUtils.flatten(Object[])"],
    "org.apache.commons.math3.linear.DiagonalMatrix#DiagonalMatrix(double[])": ["org.apache.commons.math3.linear.DiagonalMatrix#DiagonalMatrix(double[],boolean)"],
    "org.apache.commons.math3.random.RandomAdaptor#nextBytes(byte[])": [
        "org.apache.commons.math3.random.RandomGeneratorFactory.createRandomGenerator(Random)$RandomGenerator$1#nextBytes(byte[])",
        "org.apache.commons.math3.random.SynchronizedRandomGenerator#nextBytes(byte[])",
        "org.apache.commons.math3.random.RandomAdaptor#nextBytes(byte[])",
        "org.apache.commons.math3.random.BitsStreamGenerator#nextBytes(byte[])",
        "org.apache.commons.math3.random.AbstractRandomGenerator#nextBytes(byte[])"
    ],
    "org.apache.commons.math3.genetics.RandomKey.randomPermutation(int)": [
        "org.apache.commons.math3.random.SynchronizedRandomGenerator#nextDouble()",
        "org.apache.commons.math3.random.RandomGeneratorFactory.createRandomGenerator(Random)$RandomGenerator$1#nextDouble()",
        "org.apache.commons.math3.random.RandomAdaptor#nextDouble()",
        "org.apache.commons.math3.genetics.GeneticAlgorithm.getRandomGenerator()",
        "org.apache.commons.math3.random.BitsStreamGenerator#nextDouble()"
    ],
    "org.apache.commons.math3.dfp.DfpDec#newInstance(int)": [
        "org.apache.commons.math3.dfp.Dfp#getField()",
        "org.apache.commons.math3.dfp.DfpDec#DfpDec(DfpField,int)"
    ],
    "org.apache.commons.math3.stat.descriptive.moment.Variance#evaluate(double[],int,int)": [
        "org.apache.commons.math3.stat.descriptive.moment.Variance#clear()",
        "org.apache.commons.math3.stat.descriptive.AbstractUnivariateStatistic#test(double[],int,int)",
        "org.apache.commons.math3.stat.descriptive.moment.Variance#evaluate(double[],double,int,int)",
        "org.apache.commons.math3.stat.descriptive.moment.Mean#Mean()",
        "org.apache.commons.math3.stat.descriptive.moment.Mean#evaluate(double[],int,int)"
    ],
    "org.apache.commons.math3.stat.descriptive.rank.Median#withEstimationType(EstimationType)": [
        "org.apache.commons.math3.stat.descriptive.rank.Percentile#getKthSelector()",
        "org.apache.commons.math3.stat.descriptive.rank.Percentile#getNaNStrategy()",
        "org.apache.commons.math3.stat.descriptive.rank.Median#Median(EstimationType,NaNStrategy,KthSelector)"
    ],
    "org.apache.commons.math3.stat.descriptive.SynchronizedSummaryStatistics#getMaxImpl()": ["org.apache.commons.math3.stat.descriptive.SummaryStatistics#getMaxImpl()"],
    "org.apache.commons.math3.analysis.function.Gaussian#value(double)": ["org.apache.commons.math3.analysis.function.Gaussian.value(double,double,double)"],
    "org.apache.commons.math3.complex.Quaternion#isPureQuaternion(double)": [
        "org.apache.commons.math3.util.FastMath.abs(double)",
        "org.apache.commons.math3.complex.Quaternion#getQ0()"
    ],
    "org.apache.commons.math3.analysis.FunctionUtils.toDifferentiableUnivariateFunction(UnivariateDifferentiableFunction)": ["org.apache.commons.math3.analysis.FunctionUtils.toDifferentiableUnivariateFunction(UnivariateDifferentiableFunction)$DifferentiableUnivariateFunction$1.<init>()"],
    "org.apache.commons.math3.stat.descriptive.moment.Mean.copy(Mean,Mean)": [
        "org.apache.commons.math3.stat.descriptive.moment.FirstMoment#copy()",
        "org.apache.commons.math3.util.MathUtils.checkNotNull(Object)",
        "org.apache.commons.math3.stat.descriptive.moment.ThirdMoment#copy()",
        "org.apache.commons.math3.stat.descriptive.AbstractUnivariateStatistic#setData(double[])",
        "org.apache.commons.math3.stat.descriptive.rank.Percentile#setData(double[])",
        "org.apache.commons.math3.stat.descriptive.AbstractUnivariateStatistic#getDataRef()",
        "org.apache.commons.math3.stat.descriptive.moment.FourthMoment#copy()",
        "org.apache.commons.math3.stat.descriptive.moment.SecondMoment#copy()"
    ],
    "org.apache.commons.math3.linear.BlockFieldMatrix#getRow(int)": [
        "org.apache.commons.math3.linear.BlockFieldMatrix#blockWidth(int)",
        "org.apache.commons.math3.linear.AbstractFieldMatrix#getField()",
        "org.apache.commons.math3.linear.BlockFieldMatrix.<staticinit>()",
        "org.apache.commons.math3.util.MathArrays.buildArray(Field<T>,int)",
        "org.apache.commons.math3.linear.AbstractFieldMatrix#checkRowIndex(int)"
    ],
    "org.apache.commons.math3.dfp.BracketingNthOrderBrentSolverDFP#solve(int,UnivariateDfpFunction,Dfp,Dfp,AllowedSolution)": [
        "org.apache.commons.math3.dfp.Dfp#add(Dfp)",
        "org.apache.commons.math3.dfp.BracketingNthOrderBrentSolverDFP#solve(int,UnivariateDfpFunction,Dfp,Dfp,Dfp,AllowedSolution)",
        "org.apache.commons.math3.dfp.Dfp#divide(int)"
    ],
    "org.apache.commons.math3.distribution.FDistribution#cumulativeProbability(double)": ["org.apache.commons.math3.special.Beta.regularizedBeta(double,double,double)"],
    "org.apache.commons.math3.userguide.sofm.ChineseRingsClassifier#computeQuantizationError()": [
        "org.apache.commons.math3.ml.neuralnet.twod.NeuronSquareMesh2D#getNetwork()",
        "org.apache.commons.math3.userguide.sofm.ChineseRingsClassifier#createIterable()",
        "org.apache.commons.math3.ml.neuralnet.MapUtils.computeQuantizationError(Iterable<double[]>,Iterable<Neuron>,DistanceMeasure)"
    ],
    "org.apache.commons.math3.linear.Array2DRowRealMatrix#createMatrix(int,int)": ["org.apache.commons.math3.linear.Array2DRowRealMatrix#Array2DRowRealMatrix(int,int)"],
    "org.apache.commons.math3.linear.RealVectorFormat#parse(String)": [
        "org.apache.commons.math3.exception.MathParseException#MathParseException(String,int,Class<?>)",
        "org.apache.commons.math3.linear.RealVectorFormat#parse(String,ParsePosition)"
    ],
    "org.apache.commons.math3.stat.descriptive.SummaryStatistics#clear()": [
        "org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile#clear()",
        "org.apache.commons.math3.stat.descriptive.moment.Variance#clear()",
        "org.apache.commons.math3.stat.descriptive.moment.Kurtosis#clear()",
        "org.apache.commons.math3.stat.descriptive.moment.StandardDeviation#clear()",
        "org.apache.commons.math3.stat.descriptive.rank.Max#clear()",
        "org.apache.commons.math3.stat.descriptive.moment.Mean#clear()",
        "org.apache.commons.math3.stat.descriptive.moment.ThirdMoment#clear()",
        "org.apache.commons.math3.stat.descriptive.moment.SecondMoment#clear()",
        "org.apache.commons.math3.stat.descriptive.moment.FourthMoment#clear()",
        "org.apache.commons.math3.stat.descriptive.moment.GeometricMean#clear()",
        "org.apache.commons.math3.stat.descriptive.summary.SumOfLogs#clear()",
        "org.apache.commons.math3.stat.descriptive.summary.Sum#clear()",
        "org.apache.commons.math3.stat.descriptive.rank.Min#clear()",
        "org.apache.commons.math3.stat.descriptive.summary.SumOfSquares#clear()",
        "org.apache.commons.math3.stat.descriptive.summary.Product#clear()",
        "org.apache.commons.math3.stat.descriptive.moment.FirstMoment#clear()",
        "org.apache.commons.math3.stat.descriptive.moment.Skewness#clear()"
    ],
    "org.apache.commons.math3.distribution.EnumeratedRealDistribution#inverseCumulativeProbability(double)": [
        "org.apache.commons.math3.distribution.EnumeratedRealDistribution#getSupportLowerBound()",
        "org.apache.commons.math3.util.Pair#getValue()",
        "org.apache.commons.math3.distribution.EnumeratedDistribution#getPmf()",
        "org.apache.commons.math3.util.Pair#getKey()",
        "org.apache.commons.math3.optim.PointVectorValuePair#getValue()",
        "org.apache.commons.math3.optimization.PointVectorValuePair#getValue()"
    ],
    "org.apache.commons.math3.linear.MatrixUtils.createRealIdentityMatrix(int)": [
        "org.apache.commons.math3.linear.BlockRealMatrix#setEntry(int,int,double)",
        "org.apache.commons.math3.linear.OpenMapRealMatrix#setEntry(int,int,double)",
        "org.apache.commons.math3.linear.MatrixUtils.createRealMatrix(int,int)",
        "org.apache.commons.math3.linear.Array2DRowRealMatrix#setEntry(int,int,double)",
        "org.apache.commons.math3.linear.DiagonalMatrix#setEntry(int,int,double)"
    ],
    "org.apache.commons.math3.complex.Quaternion.subtract(Quaternion,Quaternion)": [
        "org.apache.commons.math3.complex.Quaternion#getQ3()",
        "org.apache.commons.math3.complex.Quaternion#getQ2()",
        "org.apache.commons.math3.complex.Quaternion#getQ1()",
        "org.apache.commons.math3.complex.Quaternion#getQ0()",
        "org.apache.commons.math3.complex.Quaternion#Quaternion(double,double,double,double)"
    ],
    "org.apache.commons.math3.ml.clustering.CentroidCluster#CentroidCluster(Clusterable)": [
        "org.apache.commons.math3.ml.clustering.CentroidCluster.<init>()",
        "org.apache.commons.math3.ml.clustering.Cluster#Cluster()"
    ],
    "org.apache.commons.math3.fitting.GaussianCurveFitter.<staticinit>()": ["org.apache.commons.math3.fitting.GaussianCurveFitter$Parametric$1.<init>()"],
    "org.apache.commons.math3.random.BitsStreamGenerator#nextInt(int)": [
        "org.apache.commons.math3.random.ISAACRandom#next(int)",
        "org.apache.commons.math3.random.MersenneTwister#next(int)",
        "org.apache.commons.math3.random.Well19937a#next(int)",
        "org.apache.commons.math3.random.Well1024a#next(int)",
        "org.apache.commons.math3.random.Well44497b#next(int)",
        "org.apache.commons.math3.random.Well512a#next(int)",
        "org.apache.commons.math3.random.Well44497a#next(int)",
        "org.apache.commons.math3.random.Well19937c#next(int)"
    ],
    "org.apache.commons.math3.optim.nonlinear.scalar.LeastSquaresConverter#LeastSquaresConverter(MultivariateVectorFunction,double[],RealMatrix)": [
        "org.apache.commons.math3.linear.DiagonalMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.Array2DRowRealMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.BlockFieldMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.BlockRealMatrix#copy()",
        "org.apache.commons.math3.linear.OpenMapRealMatrix#copy()",
        "org.apache.commons.math3.linear.OpenMapRealMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.Array2DRowFieldMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.SparseFieldMatrix#getColumnDimension()",
        "org.apache.commons.math3.exception.DimensionMismatchException#DimensionMismatchException(int,int)",
        "org.apache.commons.math3.optim.nonlinear.scalar.LeastSquaresConverter.<init>()",
        "org.apache.commons.math3.linear.Array2DRowRealMatrix#copy()",
        "org.apache.commons.math3.linear.BlockRealMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.DiagonalMatrix#copy()"
    ],
    "org.apache.commons.math3.linear.SparseFieldMatrix#SparseFieldMatrix(Field<T extends FieldElement>)": [
        "org.apache.commons.math3.linear.AbstractFieldMatrix#AbstractFieldMatrix(Field<T extends FieldElement>)",
        "org.apache.commons.math3.linear.SparseFieldMatrix.<init>()",
        "org.apache.commons.math3.util.OpenIntToFieldHashMap#OpenIntToFieldHashMap(Field<T extends FieldElement>)"
    ],
    "org.apache.commons.math3.genetics.GeneticAlgorithm.getRandomGenerator()": ["org.apache.commons.math3.genetics.GeneticAlgorithm.<staticinit>()"],
    "org.apache.commons.math3.geometry.euclidean.threed.NotARotationMatrixException#NotARotationMatrixException(Localizable,Object[]...)": [
        "org.apache.commons.math3.exception.MathIllegalArgumentException#MathIllegalArgumentException(Localizable,Object[]...)",
        "org.apache.commons.math3.geometry.euclidean.threed.NotARotationMatrixException.<init>()"
    ],
    "org.apache.commons.math3.optim.nonlinear.scalar.GradientMultivariateOptimizer#computeObjectiveGradient(double[])": [
        "org.apache.commons.math3.fitting.AbstractCurveFitter.TheoreticalValuesFunction#getModelFunction()$MultivariateVectorFunction$1#value(double[])",
        "org.apache.commons.math3.optimization.fitting.CurveFitter.TheoreticalValuesFunction#value(double[])",
        "org.apache.commons.math3.analysis.FunctionUtils.toDifferentiableMultivariateFunction(MultivariateDifferentiableFunction)$MultivariateVectorFunction$1$MultivariateVectorFunction$1#gradient()$MultivariateVectorFunction$1#value(double[])",
        "org.apache.commons.math3.analysis.FunctionUtils.toMultivariateDifferentiableVectorFunction(DifferentiableMultivariateVectorFunction)$MultivariateDifferentiableVectorFunction$1#value(double[])",
        "org.apache.commons.math3.analysis.FunctionUtils.toDifferentiableMultivariateVectorFunction(MultivariateDifferentiableVectorFunction)$DifferentiableMultivariateVectorFunction$1#value(double[])",
        "org.apache.commons.math3.fitting.CurveFitter.TheoreticalValuesFunction#getModelFunction()$MultivariateVectorFunction$1#value(double[])",
        "org.apache.commons.math3.analysis.differentiation.GradientFunction#value(double[])",
        "org.apache.commons.math3.optimization.fitting.CurveFitter.OldTheoreticalValuesFunction#value(double[])"
    ],
    "org.apache.commons.math3.random.HaltonSequenceGenerator#HaltonSequenceGenerator(int,int[],int[])": [
        "org.apache.commons.math3.exception.DimensionMismatchException#DimensionMismatchException(int,int)",
        "org.apache.commons.math3.util.MathUtils.checkNotNull(Object)",
        "org.apache.commons.math3.random.HaltonSequenceGenerator.<staticinit>()",
        "org.apache.commons.math3.random.HaltonSequenceGenerator.<init>()"
    ],
    "org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet#IntervalsSet()": [
        "org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet.<staticinit>()",
        "org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet#IntervalsSet(double)"
    ],
    "org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet.TranslationTransform#apply(Hyperplane<Euclidean3D>)": ["org.apache.commons.math3.geometry.euclidean.threed.Plane#translate(Vector3D)"],
    "org.apache.commons.math3.util.ResizableDoubleArray#addElement(double)": ["org.apache.commons.math3.util.ResizableDoubleArray#expand()"],
    "org.apache.commons.math3.util.FastMathCalc.splitMult(double[],double[],double[])": ["org.apache.commons.math3.util.FastMathCalc.resplit(double[])"],
    "org.apache.commons.math3.stat.regression.RegressionResults#getParameterEstimates()": ["org.apache.commons.math3.util.MathArrays.copyOf(double[])"],
    "org.apache.commons.math3.fraction.Fraction#addSub(Fraction,boolean)": [
        "org.apache.commons.math3.util.ArithmeticUtils.subAndCheck(int,int)",
        "org.apache.commons.math3.util.ArithmeticUtils.addAndCheck(int,int)",
        "org.apache.commons.math3.util.ArithmeticUtils.mulAndCheck(int,int)",
        "org.apache.commons.math3.exception.util.LocalizedFormats.<staticinit>()",
        "org.apache.commons.math3.fraction.Fraction#Fraction(double,int)",
        "org.apache.commons.math3.util.ArithmeticUtils.gcd(int,int)",
        "org.apache.commons.math3.fraction.Fraction#negate()",
        "org.apache.commons.math3.fraction.Fraction#Fraction(int,int)"
    ],
    "org.apache.commons.math3.stat.inference.MannWhitneyUTest#ensureDataConformance(double[],double[])": [
        "org.apache.commons.math3.exception.NoDataException#NoDataException()",
        "org.apache.commons.math3.exception.NullArgumentException#NullArgumentException()"
    ],
    "org.apache.commons.math3.stat.regression.SimpleRegression#predict(double)": [
        "org.apache.commons.math3.stat.regression.SimpleRegression#getSlope()",
        "org.apache.commons.math3.stat.regression.SimpleRegression#getIntercept(double)"
    ],
    "org.apache.commons.math3.fitting.leastsquares.LevenbergMarquardtOptimizer#determineLMDirection(double[],double[],double[],InternalData,int,double[],double[])": [
        "org.apache.commons.math3.util.FastMath.abs(double)",
        "org.apache.commons.math3.util.FastMath.sqrt(double)"
    ],
    "org.apache.commons.math3.optimization.direct.BaseAbstractMultivariateVectorOptimizer#computeObjectiveValue(double[])": [
        "org.apache.commons.math3.exception.TooManyEvaluationsException#TooManyEvaluationsException(Number)",
        "org.apache.commons.math3.exception.MaxCountExceededException#getMax()",
        "org.apache.commons.math3.util.Incrementor#incrementCount()",
        "org.apache.commons.math3.util.Incrementor.wrap(Incrementor)$Incrementor$1#incrementCount()"
    ],
    "org.apache.commons.math3.userguide.RealDistributionComparison.addPDFSeries(Chart,RealDistribution,String,int,int)": [
        "org.apache.commons.math3.distribution.EnumeratedRealDistribution#density(double)",
        "org.apache.commons.math3.distribution.LogNormalDistribution#density(double)",
        "org.apache.commons.math3.distribution.TriangularDistribution#density(double)",
        "org.apache.commons.math3.distribution.ParetoDistribution#density(double)",
        "org.apache.commons.math3.distribution.GammaDistribution#density(double)",
        "org.apache.commons.math3.distribution.ConstantRealDistribution#density(double)",
        "org.apache.commons.math3.distribution.ChiSquaredDistribution#density(double)",
        "org.apache.commons.math3.distribution.FDistribution#density(double)",
        "org.apache.commons.math3.distribution.LevyDistribution#density(double)",
        "org.apache.commons.math3.distribution.GumbelDistribution#density(double)",
        "org.apache.commons.math3.distribution.WeibullDistribution#density(double)",
        "org.apache.commons.math3.distribution.CauchyDistribution#density(double)",
        "org.apache.commons.math3.random.EmpiricalDistribution#density(double)",
        "org.apache.commons.math3.distribution.ExponentialDistribution#density(double)",
        "org.apache.commons.math3.distribution.LogisticDistribution#density(double)",
        "org.apache.commons.math3.distribution.TDistribution#density(double)",
        "org.apache.commons.math3.distribution.BetaDistribution#density(double)",
        "org.apache.commons.math3.distribution.UniformRealDistribution#density(double)",
        "org.apache.commons.math3.distribution.NakagamiDistribution#density(double)",
        "org.apache.commons.math3.distribution.LaplaceDistribution#density(double)",
        "org.apache.commons.math3.distribution.NormalDistribution#density(double)"
    ],
    "org.apache.commons.math3.ode.AbstractFieldIntegrator#getMaxEvaluations()": ["org.apache.commons.math3.util.IntegerSequence.Incrementor#getMaximalCount()"],
    "org.apache.commons.math3.linear.ArrayRealVector#ArrayRealVector(RealVector)": [
        "org.apache.commons.math3.linear.OpenMapRealVector#getDimension()",
        "org.apache.commons.math3.exception.NullArgumentException#NullArgumentException()",
        "org.apache.commons.math3.linear.ArrayRealVector#getDimension()",
        "org.apache.commons.math3.linear.RealVector.unmodifiableRealVector(RealVector)$RealVector$1#getDimension()",
        "org.apache.commons.math3.linear.ArrayRealVector#getEntry(int)",
        "org.apache.commons.math3.linear.RealVector.<init>()",
        "org.apache.commons.math3.linear.OpenMapRealVector#getEntry(int)",
        "org.apache.commons.math3.linear.ArrayRealVector.<init>()",
        "org.apache.commons.math3.linear.RealVector.unmodifiableRealVector(RealVector)$RealVector$1#getEntry(int)"
    ],
    "org.apache.commons.math3.util.Decimal64#subtract(double)": ["org.apache.commons.math3.util.Decimal64#Decimal64(double)"],
    "org.apache.commons.math3.util.FastMath.nextDown(double)": ["org.apache.commons.math3.util.FastMath.nextAfter(double,double)"],
    "org.apache.commons.math3.analysis.FunctionUtils.fix2ndArgument(BivariateFunction,double)$UnivariateFunction$1#value(double)": [
        "org.apache.commons.math3.analysis.interpolation.BicubicFunction#value(double,double)",
        "org.apache.commons.math3.analysis.interpolation.BicubicSplineFunction#BicubicSplineFunction(double[],boolean)$BivariateFunction$3#value(double,double)",
        "org.apache.commons.math3.analysis.interpolation.BicubicInterpolatingFunction#value(double,double)",
        "org.apache.commons.math3.analysis.interpolation.BicubicSplineFunction#BicubicSplineFunction(double[],boolean)$BivariateFunction$4#value(double,double)",
        "org.apache.commons.math3.analysis.interpolation.PiecewiseBicubicSplineInterpolatingFunction#value(double,double)",
        "org.apache.commons.math3.analysis.function.Multiply#value(double,double)",
        "org.apache.commons.math3.analysis.function.Max#value(double,double)",
        "org.apache.commons.math3.analysis.function.Subtract#value(double,double)",
        "org.apache.commons.math3.analysis.function.Pow#value(double,double)",
        "org.apache.commons.math3.analysis.interpolation.BicubicSplineInterpolatingFunction#value(double,double)",
        "org.apache.commons.math3.analysis.interpolation.BicubicSplineFunction#BicubicSplineFunction(double[],boolean)$BivariateFunction$5#value(double,double)",
        "org.apache.commons.math3.analysis.function.Divide#value(double,double)",
        "org.apache.commons.math3.analysis.interpolation.BicubicSplineFunction#BicubicSplineFunction(double[],boolean)$BivariateFunction$1#value(double,double)",
        "org.apache.commons.math3.analysis.function.Add#value(double,double)",
        "org.apache.commons.math3.analysis.interpolation.BicubicSplineFunction#value(double,double)",
        "org.apache.commons.math3.analysis.function.Min#value(double,double)",
        "org.apache.commons.math3.analysis.interpolation.BicubicSplineFunction#BicubicSplineFunction(double[],boolean)$BivariateFunction$2#value(double,double)",
        "org.apache.commons.math3.analysis.function.Atan2#value(double,double)"
    ],
    "org.apache.commons.math3.dfp.DfpMath.log(Dfp)": [
        "org.apache.commons.math3.dfp.Dfp#classify()",
        "org.apache.commons.math3.dfp.DfpDec#newInstance(int)",
        "org.apache.commons.math3.dfp.DfpField#getLn5Split()",
        "org.apache.commons.math3.dfp.Dfp.<staticinit>()",
        "org.apache.commons.math3.dfp.Dfp#dotrap(int,String,Dfp,Dfp)",
        "org.apache.commons.math3.dfp.Dfp#newInstance(Dfp)",
        "org.apache.commons.math3.dfp.DfpField#getLn2Split()",
        "org.apache.commons.math3.dfp.Dfp#Dfp(Dfp)",
        "org.apache.commons.math3.dfp.Dfp#getField()",
        "org.apache.commons.math3.dfp.DfpDec#newInstance(byte,byte)",
        "org.apache.commons.math3.dfp.DfpDec#newInstance(Dfp)",
        "org.apache.commons.math3.dfp.Dfp#lessThan(Dfp)",
        "org.apache.commons.math3.dfp.DfpMath.split(Dfp)",
        "org.apache.commons.math3.dfp.Dfp#newInstance(int)",
        "org.apache.commons.math3.dfp.Dfp#getTwo()",
        "org.apache.commons.math3.dfp.DfpMath.pow(Dfp,int)",
        "org.apache.commons.math3.dfp.DfpMath.logInternal(Dfp[])",
        "org.apache.commons.math3.dfp.Dfp#floor()",
        "org.apache.commons.math3.dfp.Dfp#newInstance(byte,byte)",
        "org.apache.commons.math3.dfp.DfpField#setIEEEFlagsBits(int)",
        "org.apache.commons.math3.dfp.Dfp#greaterThan(Dfp)",
        "org.apache.commons.math3.dfp.Dfp#equals(Object)",
        "org.apache.commons.math3.dfp.Dfp#getZero()",
        "org.apache.commons.math3.dfp.Dfp#intValue()",
        "org.apache.commons.math3.dfp.Dfp#divide(int)",
        "org.apache.commons.math3.dfp.Dfp#newInstance(String)",
        "org.apache.commons.math3.dfp.Dfp#add(Dfp)",
        "org.apache.commons.math3.dfp.DfpDec#newInstance(String)",
        "org.apache.commons.math3.dfp.Dfp#isNaN()",
        "org.apache.commons.math3.dfp.DfpMath.splitMult(Dfp[],Dfp[])",
        "org.apache.commons.math3.dfp.Dfp#divide(Dfp)",
        "org.apache.commons.math3.dfp.DfpField.<staticinit>()",
        "org.apache.commons.math3.dfp.Dfp#log10K()"
    ],
    "org.apache.commons.math3.exception.OutOfRangeException#OutOfRangeException(Localizable,Number,Number,Number)": ["org.apache.commons.math3.exception.OutOfRangeException.<init>()"],
    "org.apache.commons.math3.geometry.euclidean.threed.Rotation#Rotation(Vector3D,Vector3D,Vector3D,Vector3D)": [
        "org.apache.commons.math3.geometry.euclidean.threed.Vector3D#normalize()",
        "org.apache.commons.math3.geometry.euclidean.threed.Vector3D#crossProduct(Vector<Euclidean3D>)",
        "org.apache.commons.math3.geometry.euclidean.threed.Vector3D#getZ()",
        "org.apache.commons.math3.geometry.euclidean.threed.Vector3D#getY()",
        "org.apache.commons.math3.geometry.euclidean.threed.Rotation.mat2quat(double[][])",
        "org.apache.commons.math3.geometry.euclidean.threed.Vector3D#getX()",
        "org.apache.commons.math3.geometry.euclidean.threed.Rotation.<init>()",
        "org.apache.commons.math3.util.MathArrays.linearCombination(double,double,double,double,double,double)"
    ],
    "org.apache.commons.math3.distribution.AbstractRealDistribution#sample(int)": [
        "org.apache.commons.math3.distribution.ExponentialDistribution#sample()",
        "org.apache.commons.math3.distribution.AbstractRealDistribution#sample()",
        "org.apache.commons.math3.distribution.ParetoDistribution#sample()",
        "org.apache.commons.math3.exception.util.LocalizedFormats.<staticinit>()",
        "org.apache.commons.math3.distribution.UniformRealDistribution#sample()",
        "org.apache.commons.math3.distribution.NormalDistribution#sample()",
        "org.apache.commons.math3.distribution.ConstantRealDistribution#sample()",
        "org.apache.commons.math3.distribution.EnumeratedRealDistribution#sample()",
        "org.apache.commons.math3.distribution.GammaDistribution#sample()",
        "org.apache.commons.math3.distribution.BetaDistribution#sample()",
        "org.apache.commons.math3.distribution.LogNormalDistribution#sample()"
    ],
    "org.apache.commons.math3.dfp.Dfp#rint()": [
        "org.apache.commons.math3.dfp.Dfp#trunc(RoundingMode)",
        "org.apache.commons.math3.dfp.DfpField.RoundingMode.<staticinit>()"
    ],
    "org.apache.commons.math3.util.Decimal64#multiply(int)": ["org.apache.commons.math3.util.Decimal64#Decimal64(double)"],
    "org.apache.commons.math3.optimization.direct.BaseAbstractMultivariateOptimizer#optimizeInternal(int,FUNC extends MultivariateFunction,GoalType,double[])": [
        "org.apache.commons.math3.optimization.GoalType.<staticinit>()",
        "org.apache.commons.math3.optimization.InitialGuess#InitialGuess(double[])"
    ],
    "org.apache.commons.math3.random.ISAACRandom#ISAACRandom()": [
        "org.apache.commons.math3.random.ISAACRandom.<init>()",
        "org.apache.commons.math3.random.BitsStreamGenerator#BitsStreamGenerator()",
        "org.apache.commons.math3.random.ISAACRandom#setSeed(long)"
    ],
    "org.apache.commons.math3.ode.UnknownParameterException#UnknownParameterException(String)": [
        "org.apache.commons.math3.ode.UnknownParameterException.<init>()",
        "org.apache.commons.math3.exception.util.LocalizedFormats.<staticinit>()"
    ],
    "org.apache.commons.math3.linear.RealVector.unmodifiableRealVector(RealVector)$RealVector$1#ebeMultiply(RealVector)": [
        "org.apache.commons.math3.linear.ArrayRealVector#ebeMultiply(RealVector)",
        "org.apache.commons.math3.linear.RealVector.unmodifiableRealVector(RealVector)$RealVector$1#ebeMultiply(RealVector)",
        "org.apache.commons.math3.linear.OpenMapRealVector#ebeMultiply(RealVector)"
    ],
    "org.apache.commons.math3.linear.Array2DRowRealMatrix#Array2DRowRealMatrix(double[])": [
        "org.apache.commons.math3.linear.AbstractRealMatrix#AbstractRealMatrix()",
        "org.apache.commons.math3.linear.Array2DRowRealMatrix.<init>()"
    ],
    "org.apache.commons.math3.analysis.differentiation.SparseGradient#atan2(SparseGradient)": [
        "org.apache.commons.math3.analysis.differentiation.SparseGradient#sqrt()",
        "org.apache.commons.math3.analysis.differentiation.SparseGradient#multiply(int)",
        "org.apache.commons.math3.analysis.differentiation.SparseGradient#multiply(SparseGradient)",
        "org.apache.commons.math3.analysis.differentiation.SparseGradient#divide(SparseGradient)",
        "org.apache.commons.math3.analysis.differentiation.SparseGradient#atan()",
        "org.apache.commons.math3.analysis.differentiation.SparseGradient#subtract(SparseGradient)",
        "org.apache.commons.math3.analysis.differentiation.SparseGradient#add(double)",
        "org.apache.commons.math3.analysis.differentiation.SparseGradient#add(SparseGradient)",
        "org.apache.commons.math3.util.FastMath.atan2(double,double)",
        "org.apache.commons.math3.util.FastMath.<staticinit>()"
    ],
    "org.apache.commons.math3.util.MathUtils.copySign(byte,byte)": ["org.apache.commons.math3.exception.util.LocalizedFormats.<staticinit>()"],
    "org.apache.commons.math3.geometry.euclidean.oned.OrientedPoint#getOffset(Vector<Euclidean1D>)": ["org.apache.commons.math3.geometry.euclidean.oned.OrientedPoint#getOffset(Point<Euclidean1D>)"],
    "org.apache.commons.math3.util.IntegerSequence.Incrementor#withIncrement(int)": [
        "org.apache.commons.math3.util.IntegerSequence.Incrementor#Incrementor(int,int,int,MaxCountExceededCallback)",
        "org.apache.commons.math3.exception.ZeroException#ZeroException()"
    ],
    "org.apache.commons.math3.util.Precision.round(float,int,int)": [
        "org.apache.commons.math3.util.FastMath.pow(double,int)",
        "org.apache.commons.math3.util.FastMath.copySign(float,float)",
        "org.apache.commons.math3.util.Precision.roundUnscaled(double,double,int)"
    ],
    "org.apache.commons.math3.linear.BlockFieldMatrix#operate(T extends FieldElement[])": [
        "org.apache.commons.math3.util.BigRealField#getZero()",
        "org.apache.commons.math3.analysis.differentiation.SparseGradient#getField()$Field$1#getZero()",
        "org.apache.commons.math3.util.Decimal64Field#getZero()",
        "org.apache.commons.math3.dfp.DfpField#getZero()",
        "org.apache.commons.math3.util.FastMath.min(int,int)",
        "org.apache.commons.math3.exception.DimensionMismatchException#DimensionMismatchException(int,int)",
        "org.apache.commons.math3.linear.AbstractFieldMatrix#getField()",
        "org.apache.commons.math3.analysis.differentiation.DerivativeStructure#getField()$Field$1#getZero()",
        "org.apache.commons.math3.fraction.FractionField#getZero()",
        "org.apache.commons.math3.complex.ComplexField#getZero()",
        "org.apache.commons.math3.fraction.BigFractionField#getZero()",
        "org.apache.commons.math3.linear.BlockFieldMatrix.<staticinit>()",
        "org.apache.commons.math3.util.MathArrays.buildArray(Field<T>,int)"
    ],
    "org.apache.commons.math3.analysis.integration.gauss.GaussIntegratorFactory#hermite(int)": [
        "org.apache.commons.math3.analysis.integration.gauss.SymmetricGaussIntegrator#SymmetricGaussIntegrator(Pair<double[], double[]>)",
        "org.apache.commons.math3.analysis.integration.gauss.GaussIntegratorFactory.getRule(BaseRuleFactory<? extends Number>,int)"
    ],
    "org.apache.commons.math3.optimization.linear.SimplexTableau#getEntry(int,int)": [
        "org.apache.commons.math3.linear.Array2DRowRealMatrix#getEntry(int,int)",
        "org.apache.commons.math3.linear.OpenMapRealMatrix#getEntry(int,int)",
        "org.apache.commons.math3.linear.DiagonalMatrix#getEntry(int,int)",
        "org.apache.commons.math3.linear.BlockRealMatrix#getEntry(int,int)"
    ],
    "org.apache.commons.math3.linear.SingularMatrixException#SingularMatrixException()": [
        "org.apache.commons.math3.linear.SingularMatrixException.<init>()",
        "org.apache.commons.math3.exception.util.LocalizedFormats.<staticinit>()"
    ],
    "org.apache.commons.math3.linear.RealVector.unmodifiableRealVector(RealVector)$RealVector$1#ebeDivide(RealVector)": [
        "org.apache.commons.math3.linear.ArrayRealVector#ebeDivide(RealVector)",
        "org.apache.commons.math3.linear.RealVector.unmodifiableRealVector(RealVector)$RealVector$1#ebeDivide(RealVector)",
        "org.apache.commons.math3.linear.OpenMapRealVector#ebeDivide(RealVector)"
    ],
    "org.apache.commons.math3.util.FastMath.ulp(double)": ["org.apache.commons.math3.util.FastMath.abs(double)"],
    "org.apache.commons.math3.linear.SingularValueDecomposition#SingularValueDecomposition(RealMatrix)": [
        "org.apache.commons.math3.linear.DiagonalMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.Array2DRowRealMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.BlockFieldMatrix#getColumnDimension()",
        "org.apache.commons.math3.util.FastMath.max(double,double)",
        "org.apache.commons.math3.linear.SingularValueDecomposition.<staticinit>()",
        "org.apache.commons.math3.linear.OpenMapRealMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.DiagonalMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.DiagonalMatrix#getData()",
        "org.apache.commons.math3.linear.AbstractRealMatrix#getData()",
        "org.apache.commons.math3.linear.SingularValueDecomposition.<init>()",
        "org.apache.commons.math3.linear.BlockFieldMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.BlockRealMatrix#getRowDimension()",
        "org.apache.commons.math3.util.Precision.<staticinit>()",
        "org.apache.commons.math3.util.FastMath.abs(double)",
        "org.apache.commons.math3.util.FastMath.sqrt(double)",
        "org.apache.commons.math3.linear.MatrixUtils.createRealMatrix(double[][])",
        "org.apache.commons.math3.linear.SparseFieldMatrix#getRowDimension()",
        "org.apache.commons.math3.util.FastMath.max(int,int)",
        "org.apache.commons.math3.linear.BlockRealMatrix#transpose()",
        "org.apache.commons.math3.linear.OpenMapRealMatrix#getRowDimension()",
        "org.apache.commons.math3.util.FastMath.min(int,int)",
        "org.apache.commons.math3.util.FastMath.hypot(double,double)",
        "org.apache.commons.math3.linear.Array2DRowFieldMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.SparseFieldMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.Array2DRowRealMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.Array2DRowRealMatrix#getData()",
        "org.apache.commons.math3.linear.AbstractRealMatrix#transpose()",
        "org.apache.commons.math3.linear.Array2DRowFieldMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.BlockRealMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.BlockRealMatrix#getData()"
    ],
    "org.apache.commons.math3.linear.BlockFieldMatrix#BlockFieldMatrix(T extends FieldElement[][])": [
        "org.apache.commons.math3.linear.BlockFieldMatrix#BlockFieldMatrix(int,int,T extends FieldElement[][],boolean)",
        "org.apache.commons.math3.linear.BlockFieldMatrix.toBlocksLayout(T extends FieldElement[][])"
    ],
    "org.apache.commons.math3.analysis.differentiation.SparseGradient.hypot(SparseGradient,SparseGradient)": ["org.apache.commons.math3.analysis.differentiation.SparseGradient#hypot(SparseGradient)"],
    "org.apache.commons.math3.linear.MatrixUtils.checkRowIndex(AnyMatrix,int)": [
        "org.apache.commons.math3.linear.BlockFieldMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.BlockRealMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.Array2DRowRealMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.SparseFieldMatrix#getRowDimension()",
        "org.apache.commons.math3.exception.util.LocalizedFormats.<staticinit>()",
        "org.apache.commons.math3.linear.OpenMapRealMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.DiagonalMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.Array2DRowFieldMatrix#getRowDimension()"
    ],
    "org.apache.commons.math3.geometry.euclidean.threed.Plane#toSpace(Point<Euclidean2D>)": [
        "org.apache.commons.math3.geometry.euclidean.twod.Vector2D#getY()",
        "org.apache.commons.math3.geometry.euclidean.threed.Vector3D#Vector3D(double,Vector3D,double,Vector3D,double,Vector3D)",
        "org.apache.commons.math3.geometry.euclidean.twod.Vector2D#getX()"
    ],
    "org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizer#qrDecomposition(RealMatrix)": [
        "org.apache.commons.math3.linear.Array2DRowRealMatrix#getData()",
        "org.apache.commons.math3.util.FastMath.sqrt(double)",
        "org.apache.commons.math3.linear.BlockRealMatrix#scalarMultiply(double)",
        "org.apache.commons.math3.exception.util.LocalizedFormats.<staticinit>()",
        "org.apache.commons.math3.linear.AbstractRealMatrix#scalarMultiply(double)",
        "org.apache.commons.math3.linear.DiagonalMatrix#getData()",
        "org.apache.commons.math3.linear.AbstractRealMatrix#getData()",
        "org.apache.commons.math3.linear.BlockRealMatrix#getData()"
    ],
    "org.apache.commons.math3.linear.Array2DRowRealMatrix#walkInRowOrder(RealMatrixChangingVisitor)": [
        "org.apache.commons.math3.linear.AbstractRealMatrix#getSubMatrix(int[],int[])$DefaultRealMatrixChangingVisitor$1#visit(int,int,double)",
        "org.apache.commons.math3.linear.Array2DRowRealMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.DefaultRealMatrixChangingVisitor#visit(int,int,double)",
        "org.apache.commons.math3.linear.DefaultRealMatrixChangingVisitor#end()",
        "org.apache.commons.math3.linear.Array2DRowRealMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.DefaultRealMatrixChangingVisitor#start(int,int,int,int,int,int)"
    ],
    "org.apache.commons.math3.analysis.function.Gaussian#Gaussian(double,double,double)": ["org.apache.commons.math3.analysis.function.Gaussian.<init>()"],
    "org.apache.commons.math3.stat.ranking.NaturalRanking.IntDoublePair#IntDoublePair(double,int)": ["org.apache.commons.math3.stat.ranking.NaturalRanking.IntDoublePair.<init>()"],
    "org.apache.commons.math3.linear.SparseFieldMatrix#multiplyEntry(int,int,T extends FieldElement)": [
        "org.apache.commons.math3.util.OpenIntToFieldHashMap#get(int)",
        "org.apache.commons.math3.util.BigRealField#getZero()",
        "org.apache.commons.math3.analysis.differentiation.SparseGradient#getField()$Field$1#getZero()",
        "org.apache.commons.math3.util.Decimal64Field#getZero()",
        "org.apache.commons.math3.dfp.DfpField#getZero()",
        "org.apache.commons.math3.linear.AbstractFieldMatrix#getField()",
        "org.apache.commons.math3.util.OpenIntToFieldHashMap#remove(int)",
        "org.apache.commons.math3.analysis.differentiation.DerivativeStructure#getField()$Field$1#getZero()",
        "org.apache.commons.math3.fraction.FractionField#getZero()",
        "org.apache.commons.math3.complex.ComplexField#getZero()",
        "org.apache.commons.math3.linear.SparseFieldMatrix#computeKey(int,int)",
        "org.apache.commons.math3.fraction.BigFractionField#getZero()",
        "org.apache.commons.math3.linear.AbstractFieldMatrix#checkColumnIndex(int)",
        "org.apache.commons.math3.util.OpenIntToFieldHashMap#put(int,T extends FieldElement)",
        "org.apache.commons.math3.linear.AbstractFieldMatrix#checkRowIndex(int)"
    ],
    "org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D#add(FieldVector3D<T extends RealFieldElement>)": ["org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D#FieldVector3D(T extends RealFieldElement,T extends RealFieldElement,T extends RealFieldElement)"],
    "org.apache.commons.math3.analysis.FunctionUtils.toDifferentiableMultivariateFunction(MultivariateDifferentiableFunction)$DifferentiableMultivariateFunction$1#partialDerivative(int)": ["org.apache.commons.math3.analysis.FunctionUtils.toDifferentiableMultivariateFunction(MultivariateDifferentiableFunction)$MultivariateFunction$1$MultivariateFunction$1#partialDerivative(int)$MultivariateFunction$1.<init>()"],
    "org.apache.commons.math3.ode.events.EventHandler#eventOccurred(double,double[],boolean)": ["org.apache.commons.math3.ode.events.EventHandler.Action.<staticinit>()"],
    "org.apache.commons.math3.analysis.interpolation.BicubicSplineInterpolatingFunction#partialDerivativeYY(double,double)": ["org.apache.commons.math3.analysis.interpolation.BicubicSplineInterpolatingFunction#partialDerivative(int,double,double)"],
    "org.apache.commons.math3.linear.Array2DRowRealMatrix#getEntry(int,int)": ["org.apache.commons.math3.linear.MatrixUtils.checkMatrixIndex(AnyMatrix,int,int)"],
    "org.apache.commons.math3.stat.descriptive.summary.SumOfSquares#SumOfSquares(SumOfSquares)": [
        "org.apache.commons.math3.stat.descriptive.summary.SumOfSquares.copy(SumOfSquares,SumOfSquares)",
        "org.apache.commons.math3.stat.descriptive.summary.SumOfSquares.<init>()",
        "org.apache.commons.math3.stat.descriptive.AbstractStorelessUnivariateStatistic.<init>()"
    ],
    "org.apache.commons.math3.geometry.spherical.oned.ArcsSet.Split#getSide()": ["org.apache.commons.math3.geometry.partitioning.Side.<staticinit>()"],
    "org.apache.commons.math3.stat.regression.MillerUpdatingRegression#reorderRegressors(int[],int)": ["org.apache.commons.math3.stat.regression.MillerUpdatingRegression#vmove(int,int)"],
    "org.apache.commons.math3.geometry.euclidean.threed.Rotation#applyTo(Vector3D)": [
        "org.apache.commons.math3.geometry.euclidean.threed.Vector3D#getX()",
        "org.apache.commons.math3.geometry.euclidean.threed.Vector3D#getZ()",
        "org.apache.commons.math3.geometry.euclidean.threed.Vector3D#Vector3D(double,double,double)",
        "org.apache.commons.math3.geometry.euclidean.threed.Vector3D#getY()"
    ],
    "org.apache.commons.math3.geometry.partitioning.BoundaryProjector#boundaryRegions(BSPTree<S extends Space>)": [
        "org.apache.commons.math3.geometry.partitioning.BoundaryAttribute#getPlusOutside()",
        "org.apache.commons.math3.geometry.partitioning.BSPTree#getAttribute()",
        "org.apache.commons.math3.geometry.partitioning.BoundaryAttribute#getPlusInside()",
        "org.apache.commons.math3.geometry.partitioning.BoundaryProjector#addRegion(SubHyperplane<S extends Space>,List<Region<T extends Space>>)"
    ],
    "org.apache.commons.math3.ml.neuralnet.sofm.LearningFactorFunctionFactory.exponentialDecay(double,double,long)$LearningFactorFunction$1.<init>()": ["org.apache.commons.math3.ml.neuralnet.sofm.util.ExponentialDecayFunction#ExponentialDecayFunction(double,double,long)"],
    "org.apache.commons.math3.dfp.Dfp#negate()": [
        "org.apache.commons.math3.dfp.DfpDec#newInstance(Dfp)",
        "org.apache.commons.math3.dfp.Dfp#newInstance(Dfp)"
    ],
    "org.apache.commons.math3.primes.Primes#Primes()": ["org.apache.commons.math3.primes.Primes.<init>()"],
    "org.apache.commons.math3.ode.nonstiff.LutherStepInterpolator#doCopy()": ["org.apache.commons.math3.ode.nonstiff.LutherStepInterpolator#LutherStepInterpolator(LutherStepInterpolator)"],
    "org.apache.commons.math3.stat.regression.SimpleRegression#regress(int[])": [
        "org.apache.commons.math3.stat.regression.SimpleRegression#regress()",
        "org.apache.commons.math3.stat.regression.RegressionResults#RegressionResults(double[],double[][],boolean,long,int,double,double,double,boolean,boolean)",
        "org.apache.commons.math3.util.FastMath.max(double,double)",
        "org.apache.commons.math3.exception.util.LocalizedFormats.<staticinit>()"
    ],
    "org.apache.commons.math3.geometry.euclidean.threed.FieldRotation#vector(double,double,double)": ["org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D#FieldVector3D(T extends RealFieldElement,T extends RealFieldElement,T extends RealFieldElement)"],
    "org.apache.commons.math3.random.RandomAdaptor#setSeed(int[])": [
        "org.apache.commons.math3.random.ISAACRandom#setSeed(int[])",
        "org.apache.commons.math3.random.AbstractRandomGenerator#setSeed(int[])",
        "org.apache.commons.math3.random.JDKRandomGenerator#setSeed(int[])",
        "org.apache.commons.math3.random.MersenneTwister#setSeed(int[])",
        "org.apache.commons.math3.random.AbstractWell#setSeed(int[])",
        "org.apache.commons.math3.random.RandomAdaptor#setSeed(int[])",
        "org.apache.commons.math3.random.SynchronizedRandomGenerator#setSeed(int[])",
        "org.apache.commons.math3.random.RandomGeneratorFactory.createRandomGenerator(Random)$RandomGenerator$1#setSeed(int[])"
    ],
    "org.apache.commons.math3.distribution.LogNormalDistribution#LogNormalDistribution(double,double)": [
        "org.apache.commons.math3.distribution.LogNormalDistribution.<staticinit>()",
        "org.apache.commons.math3.distribution.LogNormalDistribution#LogNormalDistribution(double,double,double)"
    ],
    "org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D#scalarMultiply(T extends RealFieldElement)": ["org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D#FieldVector3D(T extends RealFieldElement,T extends RealFieldElement,T extends RealFieldElement)"],
    "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer#randn1(int,int)": [
        "org.apache.commons.math3.random.RandomAdaptor#nextGaussian()",
        "org.apache.commons.math3.random.SynchronizedRandomGenerator#nextGaussian()",
        "org.apache.commons.math3.random.RandomGeneratorFactory.createRandomGenerator(Random)$RandomGenerator$1#nextGaussian()",
        "org.apache.commons.math3.random.BitsStreamGenerator#nextGaussian()",
        "org.apache.commons.math3.random.AbstractRandomGenerator#nextGaussian()",
        "org.apache.commons.math3.linear.Array2DRowRealMatrix#Array2DRowRealMatrix(double[][],boolean)"
    ],
    "org.apache.commons.math3.userguide.ClusterAlgorithmComparison.makeBlobs(int,int,double,double,double,boolean,RandomGenerator)": [
        "org.apache.commons.math3.random.SynchronizedRandomGenerator#nextDouble()",
        "org.apache.commons.math3.random.RandomAdaptor#nextDouble()",
        "org.apache.commons.math3.distribution.NormalDistribution#NormalDistribution(RandomGenerator,double,double,double)",
        "org.apache.commons.math3.geometry.euclidean.twod.Vector2D#add(Vector<Euclidean2D>)",
        "org.apache.commons.math3.geometry.euclidean.twod.Vector2D#Vector2D(double,double)",
        "org.apache.commons.math3.distribution.NormalDistribution#sample()",
        "org.apache.commons.math3.random.RandomGeneratorFactory.createRandomGenerator(Random)$RandomGenerator$1#nextDouble()",
        "org.apache.commons.math3.random.RandomAdaptor#RandomAdaptor(RandomGenerator)",
        "org.apache.commons.math3.random.BitsStreamGenerator#nextDouble()"
    ],
    "org.apache.commons.math3.ode.nonstiff.AdamsMoultonFieldIntegrator.Corrector#Corrector(T extends RealFieldElement[],T extends RealFieldElement[],T extends RealFieldElement[])": ["org.apache.commons.math3.ode.nonstiff.AdamsMoultonFieldIntegrator.Corrector.<init>()"],
    "org.apache.commons.math3.geometry.euclidean.twod.Vector2D#subtract(Vector<Euclidean2D>)": ["org.apache.commons.math3.geometry.euclidean.twod.Vector2D#Vector2D(double,double)"],
    "org.apache.commons.math3.ode.nonstiff.AdamsMoultonFieldIntegrator#AdamsMoultonFieldIntegrator(Field<T extends RealFieldElement>,int,double,double,double,double)": [
        "org.apache.commons.math3.ode.nonstiff.AdamsMoultonFieldIntegrator.<staticinit>()",
        "org.apache.commons.math3.ode.nonstiff.AdamsMoultonFieldIntegrator.<init>()",
        "org.apache.commons.math3.ode.nonstiff.AdamsFieldIntegrator#AdamsFieldIntegrator(Field<T extends RealFieldElement>,String,int,int,double,double,double,double)"
    ],
    "org.apache.commons.math3.geometry.spherical.oned.S1Point#hashCode()": [
        "org.apache.commons.math3.geometry.spherical.oned.S1Point#isNaN()",
        "org.apache.commons.math3.util.MathUtils.hash(double)"
    ],
    "org.apache.commons.math3.optimization.direct.CMAESOptimizer.ones(int,int)": ["org.apache.commons.math3.linear.Array2DRowRealMatrix#Array2DRowRealMatrix(double[][],boolean)"],
    "org.apache.commons.math3.linear.JacobiPreconditioner#getRowDimension()": ["org.apache.commons.math3.linear.ArrayRealVector#getDimension()"],
    "org.apache.commons.math3.optimization.linear.SimplexSolver#solvePhase1(SimplexTableau)": [
        "org.apache.commons.math3.optimization.linear.SimplexSolver#doIteration(SimplexTableau)",
        "org.apache.commons.math3.util.Precision.equals(double,double,double)",
        "org.apache.commons.math3.optimization.linear.NoFeasibleSolutionException#NoFeasibleSolutionException()",
        "org.apache.commons.math3.optimization.linear.SimplexTableau#getRhsOffset()",
        "org.apache.commons.math3.optimization.linear.SimplexTableau#getEntry(int,int)",
        "org.apache.commons.math3.optimization.linear.SimplexTableau#getNumArtificialVariables()",
        "org.apache.commons.math3.optimization.linear.SimplexTableau#isOptimal()"
    ],
    "org.apache.commons.math3.linear.SparseFieldMatrix#copy()": ["org.apache.commons.math3.linear.SparseFieldMatrix#SparseFieldMatrix(SparseFieldMatrix<T extends FieldElement>)"],
    "org.apache.commons.math3.stat.descriptive.DescriptiveStatistics#getMin()": [
        "org.apache.commons.math3.stat.descriptive.DescriptiveStatistics#apply(UnivariateStatistic)",
        "org.apache.commons.math3.stat.descriptive.SynchronizedDescriptiveStatistics#apply(UnivariateStatistic)"
    ],
    "org.apache.commons.math3.util.KthSelector#KthSelector()": [
        "org.apache.commons.math3.util.MedianOf3PivotingStrategy.<init>()",
        "org.apache.commons.math3.util.KthSelector.<init>()"
    ],
    "org.apache.commons.math3.linear.MatrixUtils.createRowFieldMatrix(T extends FieldElement[])": [
        "org.apache.commons.math3.exception.NullArgumentException#NullArgumentException()",
        "org.apache.commons.math3.linear.SparseFieldMatrix#setEntry(int,int,T extends FieldElement)",
        "org.apache.commons.math3.linear.MatrixUtils.createFieldMatrix(Field<T extends FieldElement>,int,int)",
        "org.apache.commons.math3.exception.util.LocalizedFormats.<staticinit>()",
        "org.apache.commons.math3.exception.NoDataException#NoDataException(Localizable)",
        "org.apache.commons.math3.linear.Array2DRowFieldMatrix#setEntry(int,int,T extends FieldElement)",
        "org.apache.commons.math3.linear.BlockFieldMatrix#setEntry(int,int,T extends FieldElement)"
    ],
    "org.apache.commons.math3.stat.descriptive.SynchronizedMultivariateSummaryStatistics#setMinImpl(StorelessUnivariateStatistic[])": ["org.apache.commons.math3.stat.descriptive.MultivariateSummaryStatistics#setMinImpl(StorelessUnivariateStatistic[])"],
    "org.apache.commons.math3.ode.sampling.NordsieckStepInterpolator#reinitialize(double,double,double[],Array2DRowRealMatrix)": [
        "org.apache.commons.math3.ode.sampling.AbstractStepInterpolator#getInterpolatedTime()",
        "org.apache.commons.math3.ode.sampling.AbstractStepInterpolator#setInterpolatedTime(double)"
    ],
    "org.apache.commons.math3.geometry.spherical.twod.Edge#getPointAt(double)": [
        "org.apache.commons.math3.geometry.spherical.twod.Circle#getPhase(Vector3D)",
        "org.apache.commons.math3.geometry.spherical.twod.Circle#getPointAt(double)",
        "org.apache.commons.math3.geometry.spherical.twod.Vertex#getLocation()",
        "org.apache.commons.math3.geometry.spherical.twod.S2Point#getVector()"
    ],
    "org.apache.commons.math3.stat.inference.TestUtils.gTest(double[],long[])": [
        "org.apache.commons.math3.stat.inference.TestUtils.<staticinit>()",
        "org.apache.commons.math3.stat.inference.GTest#gTest(double[],long[])"
    ],
    "org.apache.commons.math3.linear.BlockRealMatrix#getData()": [
        "org.apache.commons.math3.linear.BlockRealMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.BlockRealMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.BlockRealMatrix.<staticinit>()",
        "org.apache.commons.math3.util.FastMath.min(int,int)"
    ],
    "org.apache.commons.math3.stat.descriptive.moment.Variance#Variance(boolean,SecondMoment)": [
        "org.apache.commons.math3.stat.descriptive.moment.Variance.<init>()",
        "org.apache.commons.math3.stat.descriptive.AbstractStorelessUnivariateStatistic.<init>()"
    ],
    "org.apache.commons.math3.util.FastMath.log1p(double)": [
        "org.apache.commons.math3.util.FastMath.log(double,double[])",
        "org.apache.commons.math3.util.FastMath.<staticinit>()"
    ],
    "org.apache.commons.math3.linear.ArrayRealVector#addToEntry(int,double)": ["org.apache.commons.math3.exception.util.LocalizedFormats.<staticinit>()"],
    "org.apache.commons.math3.optimization.direct.BaseAbstractMultivariateOptimizer#getMaxEvaluations()": ["org.apache.commons.math3.util.Incrementor#getMaximalCount()"],
    "org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D#subtract(double,Vector3D)": [
        "org.apache.commons.math3.geometry.euclidean.threed.Vector3D#getX()",
        "org.apache.commons.math3.geometry.euclidean.threed.Vector3D#getZ()",
        "org.apache.commons.math3.geometry.euclidean.threed.Vector3D#getY()",
        "org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D#FieldVector3D(T extends RealFieldElement,T extends RealFieldElement,T extends RealFieldElement)"
    ],
    "org.apache.commons.math3.util.BigReal#BigReal(BigInteger,int)": ["org.apache.commons.math3.util.BigReal.<init>()"],
    "org.apache.commons.math3.exception.MathUnsupportedOperationException#getLocalizedMessage()": ["org.apache.commons.math3.exception.util.ExceptionContext#getLocalizedMessage()"],
    "org.apache.commons.math3.geometry.euclidean.threed.Vector3D#Vector3D(double,double,double)": ["org.apache.commons.math3.geometry.euclidean.threed.Vector3D.<init>()"],
    "org.apache.commons.math3.util.IntegerSequence.Incrementor#withCallback(MaxCountExceededCallback)": ["org.apache.commons.math3.util.IntegerSequence.Incrementor#Incrementor(int,int,int,MaxCountExceededCallback)"],
    "org.apache.commons.math3.fitting.GaussianFitter#fit(double[])$Parametric$1#gradient(double,double[]...)": ["org.apache.commons.math3.analysis.function.Gaussian.Parametric#gradient(double,double[]...)"],
    "org.apache.commons.math3.linear.RealVector#walkInOptimizedOrder(RealVectorPreservingVisitor)": [
        "org.apache.commons.math3.linear.RealVector#walkInDefaultOrder(RealVectorPreservingVisitor)",
        "org.apache.commons.math3.linear.ArrayRealVector#walkInDefaultOrder(RealVectorPreservingVisitor)"
    ],
    "org.apache.commons.math3.ode.nonstiff.ClassicalRungeKuttaIntegrator#ClassicalRungeKuttaIntegrator(double)": [
        "org.apache.commons.math3.ode.nonstiff.ClassicalRungeKuttaIntegrator.<init>()",
        "org.apache.commons.math3.ode.nonstiff.ClassicalRungeKuttaIntegrator.<staticinit>()",
        "org.apache.commons.math3.ode.nonstiff.ClassicalRungeKuttaStepInterpolator#ClassicalRungeKuttaStepInterpolator()",
        "org.apache.commons.math3.ode.nonstiff.RungeKuttaIntegrator#RungeKuttaIntegrator(String,double[],double[][],double[],RungeKuttaStepInterpolator,double)"
    ],
    "org.apache.commons.math3.linear.LUDecomposition.Solver#solve(RealVector)": [
        "org.apache.commons.math3.linear.OpenMapRealVector#getDimension()",
        "org.apache.commons.math3.exception.DimensionMismatchException#DimensionMismatchException(int,int)",
        "org.apache.commons.math3.linear.ArrayRealVector#getDimension()",
        "org.apache.commons.math3.linear.SingularMatrixException#SingularMatrixException()",
        "org.apache.commons.math3.linear.ArrayRealVector#ArrayRealVector(double[],boolean)",
        "org.apache.commons.math3.linear.RealVector.unmodifiableRealVector(RealVector)$RealVector$1#getDimension()",
        "org.apache.commons.math3.linear.ArrayRealVector#getEntry(int)",
        "org.apache.commons.math3.linear.OpenMapRealVector#getEntry(int)",
        "org.apache.commons.math3.linear.RealVector.unmodifiableRealVector(RealVector)$RealVector$1#getEntry(int)"
    ],
    "org.apache.commons.math3.stat.inference.TestUtils.t(double,double[])": [
        "org.apache.commons.math3.stat.inference.TestUtils.<staticinit>()",
        "org.apache.commons.math3.stat.inference.TTest#t(double,double[])"
    ],
    "org.apache.commons.math3.random.ISAACRandom#ISAACRandom(long)": [
        "org.apache.commons.math3.random.ISAACRandom.<init>()",
        "org.apache.commons.math3.random.BitsStreamGenerator#BitsStreamGenerator()",
        "org.apache.commons.math3.random.ISAACRandom#setSeed(long)"
    ],
    "org.apache.commons.math3.stat.descriptive.moment.GeometricMean#GeometricMean(GeometricMean)": [
        "org.apache.commons.math3.stat.descriptive.moment.GeometricMean.copy(GeometricMean,GeometricMean)",
        "org.apache.commons.math3.stat.descriptive.moment.GeometricMean.<init>()",
        "org.apache.commons.math3.stat.descriptive.AbstractStorelessUnivariateStatistic.<init>()"
    ],
    "org.apache.commons.math3.linear.BlockFieldMatrix#blockWidth(int)": ["org.apache.commons.math3.linear.BlockFieldMatrix.<staticinit>()"],
    "org.apache.commons.math3.linear.Array2DRowRealMatrix#operate(double[])": [
        "org.apache.commons.math3.exception.DimensionMismatchException#DimensionMismatchException(int,int)",
        "org.apache.commons.math3.linear.Array2DRowRealMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.Array2DRowRealMatrix#getRowDimension()"
    ],
    "org.apache.commons.math3.geometry.partitioning.BSPTree#visit(BSPTreeVisitor<S extends Space>)": [
        "org.apache.commons.math3.geometry.partitioning.BoundaryBuilder#visitLeafNode(BSPTree<S extends Space>)",
        "org.apache.commons.math3.geometry.partitioning.RegionFactory.NodesCleaner#visitInternalNode(BSPTree<S extends Space>)",
        "org.apache.commons.math3.geometry.partitioning.BoundaryProjector#visitInternalNode(BSPTree<S extends Space>)",
        "org.apache.commons.math3.exception.MathInternalError#MathInternalError()",
        "org.apache.commons.math3.geometry.partitioning.BSPTree#visit(BSPTreeVisitor<S extends Space>)",
        "org.apache.commons.math3.geometry.partitioning.RegionFactory.NodesCleaner#visitLeafNode(BSPTree<S extends Space>)",
        "org.apache.commons.math3.geometry.partitioning.BoundaryProjector#visitOrder(BSPTree<S extends Space>)",
        "org.apache.commons.math3.geometry.partitioning.BoundaryBuilder#visitOrder(BSPTree<S extends Space>)",
        "org.apache.commons.math3.geometry.partitioning.BoundarySizeVisitor#visitInternalNode(BSPTree<S extends Space>)",
        "org.apache.commons.math3.geometry.partitioning.BoundarySizeVisitor#visitOrder(BSPTree<S extends Space>)",
        "org.apache.commons.math3.geometry.partitioning.BoundaryBuilder#visitInternalNode(BSPTree<S extends Space>)",
        "org.apache.commons.math3.geometry.partitioning.BoundaryProjector#visitLeafNode(BSPTree<S extends Space>)",
        "org.apache.commons.math3.geometry.partitioning.AbstractRegion#AbstractRegion(Collection<SubHyperplane<S extends Space>>,double)$BSPTreeVisitor$1#visitOrder(BSPTree<S extends Space>)",
        "org.apache.commons.math3.geometry.partitioning.RegionFactory.NodesCleaner#visitOrder(BSPTree<S extends Space>)",
        "org.apache.commons.math3.geometry.partitioning.AbstractRegion#AbstractRegion(Collection<SubHyperplane<S extends Space>>,double)$BSPTreeVisitor$1#visitLeafNode(BSPTree<S extends Space>)",
        "org.apache.commons.math3.geometry.partitioning.AbstractRegion#AbstractRegion(Collection<SubHyperplane<S extends Space>>,double)$BSPTreeVisitor$1#visitInternalNode(BSPTree<S extends Space>)",
        "org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor.Order.<staticinit>()",
        "org.apache.commons.math3.geometry.partitioning.BoundarySizeVisitor#visitLeafNode(BSPTree<S extends Space>)"
    ],
    "org.apache.commons.math3.ode.nonstiff.AdamsNordsieckFieldTransformer#initializeHighOrderDerivatives(T extends RealFieldElement,T extends RealFieldElement[],T extends RealFieldElement[][],T extends RealFieldElement[][])": [
        "org.apache.commons.math3.linear.SparseFieldMatrix#getEntry(int,int)",
        "org.apache.commons.math3.linear.DiagonalMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.Array2DRowRealMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.BlockFieldMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.SparseFieldMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.Array2DRowFieldMatrix#Array2DRowFieldMatrix(T extends FieldElement[][],boolean)",
        "org.apache.commons.math3.linear.OpenMapRealMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.Array2DRowFieldMatrix#setEntry(int,int,T extends FieldElement)",
        "org.apache.commons.math3.linear.OpenMapRealMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.DiagonalMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.FieldLUDecomposition#getSolver()",
        "org.apache.commons.math3.linear.Array2DRowFieldMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.FieldLUDecomposition.Solver#solve(FieldMatrix<T extends FieldElement>)",
        "org.apache.commons.math3.linear.BlockFieldMatrix#getRowDimension()",
        "org.apache.commons.math3.util.MathArrays.buildArray(Field<T>,int,int)",
        "org.apache.commons.math3.linear.SparseFieldMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.BlockRealMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.Array2DRowRealMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.Array2DRowFieldMatrix#Array2DRowFieldMatrix(Field<T extends FieldElement>,int,int)",
        "org.apache.commons.math3.linear.FieldLUDecomposition#FieldLUDecomposition(FieldMatrix<T extends FieldElement>)",
        "org.apache.commons.math3.linear.Array2DRowFieldMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.BlockRealMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.Array2DRowFieldMatrix#getEntry(int,int)",
        "org.apache.commons.math3.linear.BlockFieldMatrix#getEntry(int,int)"
    ],
    "org.apache.commons.math3.ode.sampling.AbstractStepInterpolator#AbstractStepInterpolator(AbstractStepInterpolator)": [
        "org.apache.commons.math3.ode.sampling.AbstractStepInterpolator.<init>()",
        "org.apache.commons.math3.ode.sampling.AbstractStepInterpolator#allocateInterpolatedArrays(int)"
    ],
    "org.apache.commons.math3.special.BesselJ.value(double,double)": [
        "org.apache.commons.math3.special.BesselJ.rjBesl(double,double,int)",
        "org.apache.commons.math3.util.FastMath.abs(double)",
        "org.apache.commons.math3.exception.util.LocalizedFormats.<staticinit>()"
    ],
    "org.apache.commons.math3.optimization.direct.MultivariateFunctionMappingAdapter#boundedToUnbounded(double[])": [
        "org.apache.commons.math3.optimization.direct.MultivariateFunctionMappingAdapter.NoBoundsMapper#boundedToUnbounded(double)",
        "org.apache.commons.math3.optimization.direct.MultivariateFunctionMappingAdapter.UpperBoundMapper#boundedToUnbounded(double)",
        "org.apache.commons.math3.optimization.direct.MultivariateFunctionMappingAdapter.LowerBoundMapper#boundedToUnbounded(double)",
        "org.apache.commons.math3.optimization.direct.MultivariateFunctionMappingAdapter.LowerUpperBoundMapper#boundedToUnbounded(double)"
    ],
    "org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet#IntervalsSet(double,double)": [
        "org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet.<staticinit>()",
        "org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet#IntervalsSet(double,double,double)"
    ],
    "org.apache.commons.math3.ode.nonstiff.DormandPrince853FieldIntegrator#estimateError(T extends RealFieldElement[][],T extends RealFieldElement[],T extends RealFieldElement[],T extends RealFieldElement)": ["org.apache.commons.math3.util.MathUtils.max(T extends RealFieldElement,T extends RealFieldElement)"],
    "org.apache.commons.math3.dfp.DfpDec#DfpDec(DfpField,long)": [
        "org.apache.commons.math3.dfp.DfpDec.<init>()",
        "org.apache.commons.math3.dfp.Dfp#Dfp(DfpField,long)"
    ],
    "org.apache.commons.math3.fraction.ProperFractionFormat#setWholeFormat(NumberFormat)": ["org.apache.commons.math3.exception.util.LocalizedFormats.<staticinit>()"],
    "org.apache.commons.math3.stat.descriptive.moment.GeometricMean#GeometricMean()": [
        "org.apache.commons.math3.stat.descriptive.moment.GeometricMean.<init>()",
        "org.apache.commons.math3.stat.descriptive.summary.SumOfLogs#SumOfLogs()",
        "org.apache.commons.math3.stat.descriptive.AbstractStorelessUnivariateStatistic.<init>()"
    ],
    "org.apache.commons.math3.stat.clustering.EuclideanDoublePoint#distanceFrom(EuclideanDoublePoint)": [
        "org.apache.commons.math3.stat.clustering.EuclideanDoublePoint#getPoint()",
        "org.apache.commons.math3.util.MathArrays.distance(double[],double[])"
    ],
    "org.apache.commons.math3.stat.descriptive.moment.Variance#clear()": [
        "org.apache.commons.math3.stat.descriptive.moment.FourthMoment#clear()",
        "org.apache.commons.math3.stat.descriptive.moment.ThirdMoment#clear()",
        "org.apache.commons.math3.stat.descriptive.moment.SecondMoment#clear()"
    ],
    "org.apache.commons.math3.analysis.differentiation.DerivativeStructure#getField()": ["org.apache.commons.math3.analysis.differentiation.DerivativeStructure#getField()$Field$1.<init>()"],
    "org.apache.commons.math3.linear.BlockFieldMatrix#copyBlockPart(T extends FieldElement[],int,int,int,int,int,T extends FieldElement[],int,int,int)": ["org.apache.commons.math3.linear.BlockFieldMatrix.<staticinit>()"],
    "org.apache.commons.math3.random.ValueServer#getSigma()": ["org.apache.commons.math3.random.ValueServer.<staticinit>()"],
    "org.apache.commons.math3.special.Erf.erfInv(double)": [
        "org.apache.commons.math3.util.FastMath.log(double)",
        "org.apache.commons.math3.util.FastMath.sqrt(double)"
    ],
    "org.apache.commons.math3.userguide.filter.ConstantVoltageExample.VoltMeter#VoltMeter(double,double,double,int)": [
        "org.apache.commons.math3.random.Well19937c#Well19937c(int)",
        "org.apache.commons.math3.userguide.filter.ConstantVoltageExample.VoltMeter.<init>()"
    ],
    "org.apache.commons.math3.linear.OpenMapRealVector#add(OpenMapRealVector)": [
        "org.apache.commons.math3.util.OpenIntToDoubleHashMap#iterator()",
        "org.apache.commons.math3.util.OpenIntToDoubleHashMap#size()",
        "org.apache.commons.math3.util.OpenIntToDoubleHashMap#containsKey(int)",
        "org.apache.commons.math3.linear.OpenMapRealVector#setEntry(int,double)",
        "org.apache.commons.math3.util.OpenIntToDoubleHashMap.Iterator#advance()",
        "org.apache.commons.math3.linear.ArrayRealVector#checkVectorDimensions(int)",
        "org.apache.commons.math3.linear.OpenMapRealVector#getDimension()",
        "org.apache.commons.math3.util.OpenIntToDoubleHashMap.Iterator#value()",
        "org.apache.commons.math3.linear.RealVector#checkVectorDimensions(int)",
        "org.apache.commons.math3.util.OpenIntToDoubleHashMap.Iterator#key()",
        "org.apache.commons.math3.util.OpenIntToDoubleHashMap#get(int)",
        "org.apache.commons.math3.linear.OpenMapRealVector#copy()",
        "org.apache.commons.math3.util.OpenIntToDoubleHashMap.Iterator#hasNext()"
    ],
    "org.apache.commons.math3.analysis.FunctionUtils.toMultivariateDifferentiableFunction(DifferentiableMultivariateFunction)$MultivariateDifferentiableFunction$1#value(double[])": [
        "org.apache.commons.math3.optim.nonlinear.scalar.MultivariateFunctionMappingAdapter#value(double[])",
        "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizer#doOptimize()$MultivariateFunction$1#value(double[])",
        "org.apache.commons.math3.optimization.direct.MultivariateFunctionMappingAdapter#value(double[])",
        "org.apache.commons.math3.analysis.FunctionUtils.toMultivariateDifferentiableFunction(DifferentiableMultivariateFunction)$MultivariateDifferentiableFunction$1#value(double[])",
        "org.apache.commons.math3.analysis.FunctionUtils.toDifferentiableMultivariateFunction(MultivariateDifferentiableFunction)$DifferentiableMultivariateFunction$1#value(double[])",
        "org.apache.commons.math3.analysis.interpolation.MicrosphereInterpolatingFunction#value(double[])",
        "org.apache.commons.math3.analysis.interpolation.MicrosphereProjectionInterpolator#interpolate(double[][],double[])$MultivariateFunction$1#value(double[])",
        "org.apache.commons.math3.optimization.direct.MultivariateFunctionPenaltyAdapter#value(double[])",
        "org.apache.commons.math3.optim.nonlinear.scalar.MultivariateFunctionPenaltyAdapter#value(double[])",
        "org.apache.commons.math3.optim.linear.LinearObjectiveFunction#value(double[])",
        "org.apache.commons.math3.analysis.FunctionUtils.collector(BivariateFunction,UnivariateFunction,double)$MultivariateFunction$1#value(double[])",
        "org.apache.commons.math3.optim.nonlinear.scalar.LeastSquaresConverter#value(double[])",
        "org.apache.commons.math3.analysis.FunctionUtils.toDifferentiableMultivariateFunction(MultivariateDifferentiableFunction)$MultivariateFunction$1$MultivariateFunction$1#partialDerivative(int)$MultivariateFunction$1#value(double[])",
        "org.apache.commons.math3.optimization.LeastSquaresConverter#value(double[])",
        "org.apache.commons.math3.optimization.direct.SimplexOptimizer#doOptimize()$MultivariateFunction$1#value(double[])"
    ],
    "org.apache.commons.math3.optimization.linear.SimplexTableau#SimplexTableau(LinearObjectiveFunction,Collection<LinearConstraint>,GoalType,boolean,double,int)": [
        "org.apache.commons.math3.linear.OpenMapRealVector#getDimension()",
        "org.apache.commons.math3.optimization.linear.SimplexTableau#normalizeConstraints(Collection<LinearConstraint>)",
        "org.apache.commons.math3.optimization.linear.SimplexTableau#initializeColumnLabels()",
        "org.apache.commons.math3.linear.ArrayRealVector#getDimension()",
        "org.apache.commons.math3.optimization.linear.LinearObjectiveFunction#getCoefficients()",
        "org.apache.commons.math3.optimization.GoalType.<staticinit>()",
        "org.apache.commons.math3.optimization.linear.Relationship.<staticinit>()",
        "org.apache.commons.math3.linear.RealVector.unmodifiableRealVector(RealVector)$RealVector$1#getDimension()",
        "org.apache.commons.math3.optimization.linear.SimplexTableau.<init>()",
        "org.apache.commons.math3.optimization.linear.SimplexTableau#createTableau(boolean)",
        "org.apache.commons.math3.optimization.linear.SimplexTableau#getConstraintTypeCounts(Relationship)"
    ],
    "org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet#IntervalsSet(double,double,double)": [
        "org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet.buildTree(double,double,double)",
        "org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet.<init>()",
        "org.apache.commons.math3.geometry.partitioning.AbstractRegion#AbstractRegion(BSPTree<S extends Space>,double)"
    ],
    "org.apache.commons.math3.util.ResizableDoubleArray#discardExtremeElements(int,boolean)": [
        "org.apache.commons.math3.util.ResizableDoubleArray#shouldContract()",
        "org.apache.commons.math3.exception.util.LocalizedFormats.<staticinit>()",
        "org.apache.commons.math3.util.ResizableDoubleArray#contract()"
    ],
    "org.apache.commons.math3.util.FastMath.ExpIntTable.<staticinit>()": [
        "org.apache.commons.math3.util.FastMathCalc.splitReciprocal(double[],double[])",
        "org.apache.commons.math3.util.FastMathLiteralArrays.loadExpIntA()",
        "org.apache.commons.math3.util.FastMathLiteralArrays.loadExpIntB()",
        "org.apache.commons.math3.util.FastMath.<staticinit>()",
        "org.apache.commons.math3.util.FastMathCalc.expint(int,double[])"
    ],
    "org.apache.commons.math3.stat.descriptive.rank.Percentile#setQuantile(double)": ["org.apache.commons.math3.exception.util.LocalizedFormats.<staticinit>()"],
    "org.apache.commons.math3.ode.sampling.NordsieckStepInterpolator#NordsieckStepInterpolator()": [
        "org.apache.commons.math3.ode.sampling.NordsieckStepInterpolator.<init>()",
        "org.apache.commons.math3.ode.sampling.AbstractStepInterpolator#AbstractStepInterpolator()"
    ],
    "org.apache.commons.math3.geometry.partitioning.AbstractRegion#checkPoint(Vector<S extends Space>)": [
        "org.apache.commons.math3.geometry.partitioning.AbstractRegion#checkPoint(Point<S extends Space>)",
        "org.apache.commons.math3.geometry.partitioning.Region.Location.<staticinit>()"
    ],
    "org.apache.commons.math3.linear.EigenDecomposition#EigenDecomposition(double[],double[],double)": ["org.apache.commons.math3.linear.EigenDecomposition#EigenDecomposition(double[],double[])"],
    "org.apache.commons.math3.stat.StatUtils.<staticinit>()": [
        "org.apache.commons.math3.stat.descriptive.summary.Sum#Sum()",
        "org.apache.commons.math3.stat.descriptive.moment.Variance#Variance()",
        "org.apache.commons.math3.stat.descriptive.summary.Product#Product()",
        "org.apache.commons.math3.stat.descriptive.rank.Max#Max()",
        "org.apache.commons.math3.stat.descriptive.summary.SumOfSquares#SumOfSquares()",
        "org.apache.commons.math3.stat.descriptive.rank.Percentile#Percentile()",
        "org.apache.commons.math3.stat.descriptive.summary.SumOfLogs#SumOfLogs()",
        "org.apache.commons.math3.stat.descriptive.moment.Mean#Mean()",
        "org.apache.commons.math3.stat.descriptive.rank.Min#Min()",
        "org.apache.commons.math3.stat.descriptive.moment.GeometricMean#GeometricMean()"
    ],
    "org.apache.commons.math3.complex.Complex#Complex(double)": ["org.apache.commons.math3.complex.Complex#Complex(double,double)"],
    "org.apache.commons.math3.linear.BlockRealMatrix#blockHeight(int)": ["org.apache.commons.math3.linear.BlockRealMatrix.<staticinit>()"],
    "org.apache.commons.math3.random.RandomDataImpl#nextUniform(double,double,boolean)": ["org.apache.commons.math3.random.RandomDataGenerator#nextUniform(double,double,boolean)"],
    "org.apache.commons.math3.analysis.integration.BaseAbstractUnivariateIntegrator#BaseAbstractUnivariateIntegrator(double,double)": [
        "org.apache.commons.math3.analysis.integration.BaseAbstractUnivariateIntegrator#BaseAbstractUnivariateIntegrator(double,double,int,int)",
        "org.apache.commons.math3.analysis.integration.BaseAbstractUnivariateIntegrator.<staticinit>()"
    ],
    "org.apache.commons.math3.genetics.RandomKey.comparatorPermutation(List<S>,Comparator<S>)": ["org.apache.commons.math3.genetics.RandomKey.inducedPermutation(List<S>,List<S>)"],
    "org.apache.commons.math3.ml.neuralnet.twod.util.LocationFinder.Location#Location(int,int)": ["org.apache.commons.math3.ml.neuralnet.twod.util.LocationFinder.Location.<init>()"],
    "org.apache.commons.math3.exception.MathArithmeticException#getLocalizedMessage()": ["org.apache.commons.math3.exception.util.ExceptionContext#getLocalizedMessage()"],
    "org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet.FacetsContributionVisitor#visitOrder(BSPTree<Euclidean3D>)": ["org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor.Order.<staticinit>()"],
    "org.apache.commons.math3.linear.MatrixUtils.isSymmetric(RealMatrix,double)": ["org.apache.commons.math3.linear.MatrixUtils.isSymmetricInternal(RealMatrix,double,boolean)"],
    "org.apache.commons.math3.linear.OpenMapRealVector.OpenMapEntry#OpenMapEntry(Iterator)": [
        "org.apache.commons.math3.linear.RealVector.Entry#Entry()",
        "org.apache.commons.math3.linear.OpenMapRealVector.OpenMapEntry.<init>()"
    ],
    "org.apache.commons.math3.random.RandomDataImpl#nextInversionDeviate(RealDistribution)": [
        "org.apache.commons.math3.distribution.EnumeratedRealDistribution#inverseCumulativeProbability(double)",
        "org.apache.commons.math3.distribution.AbstractRealDistribution#inverseCumulativeProbability(double)",
        "org.apache.commons.math3.distribution.ExponentialDistribution#inverseCumulativeProbability(double)",
        "org.apache.commons.math3.distribution.CauchyDistribution#inverseCumulativeProbability(double)",
        "org.apache.commons.math3.distribution.LaplaceDistribution#inverseCumulativeProbability(double)",
        "org.apache.commons.math3.distribution.UniformRealDistribution#inverseCumulativeProbability(double)",
        "org.apache.commons.math3.random.EmpiricalDistribution#inverseCumulativeProbability(double)",
        "org.apache.commons.math3.distribution.GumbelDistribution#inverseCumulativeProbability(double)",
        "org.apache.commons.math3.distribution.LogisticDistribution#inverseCumulativeProbability(double)",
        "org.apache.commons.math3.distribution.ConstantRealDistribution#inverseCumulativeProbability(double)",
        "org.apache.commons.math3.distribution.LevyDistribution#inverseCumulativeProbability(double)",
        "org.apache.commons.math3.random.RandomDataImpl#nextUniform(double,double)",
        "org.apache.commons.math3.distribution.TriangularDistribution#inverseCumulativeProbability(double)",
        "org.apache.commons.math3.distribution.WeibullDistribution#inverseCumulativeProbability(double)",
        "org.apache.commons.math3.distribution.NormalDistribution#inverseCumulativeProbability(double)"
    ],
    "org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distance(Vector3D,Vector3D)": ["org.apache.commons.math3.geometry.euclidean.threed.Vector3D#distance(Vector<Euclidean3D>)"],
    "org.apache.commons.math3.linear.RealVector.unmodifiableRealVector(RealVector)$RealVector$1#set(double)": ["org.apache.commons.math3.exception.MathUnsupportedOperationException#MathUnsupportedOperationException()"],
    "org.apache.commons.math3.analysis.function.Logit#derivative()": [
        "org.apache.commons.math3.analysis.function.Log10#derivative()",
        "org.apache.commons.math3.analysis.function.Power#derivative()",
        "org.apache.commons.math3.analysis.function.Sin#derivative()",
        "org.apache.commons.math3.analysis.function.Exp#derivative()",
        "org.apache.commons.math3.analysis.function.HarmonicOscillator#derivative()",
        "org.apache.commons.math3.analysis.polynomials.PolynomialFunction#derivative()",
        "org.apache.commons.math3.analysis.function.Logit#derivative()",
        "org.apache.commons.math3.analysis.function.Cbrt#derivative()",
        "org.apache.commons.math3.analysis.FunctionUtils.toDifferentiableUnivariateFunction(UnivariateDifferentiableFunction)",
        "org.apache.commons.math3.analysis.FunctionUtils.toDifferentiableUnivariateFunction(UnivariateDifferentiableFunction)$DifferentiableUnivariateFunction$1#derivative()",
        "org.apache.commons.math3.analysis.polynomials.PolynomialSplineFunction#derivative()",
        "org.apache.commons.math3.analysis.function.Cosh#derivative()",
        "org.apache.commons.math3.analysis.function.Identity#derivative()",
        "org.apache.commons.math3.analysis.function.Inverse#derivative()",
        "org.apache.commons.math3.analysis.function.Acosh#derivative()",
        "org.apache.commons.math3.analysis.function.Acos#derivative()",
        "org.apache.commons.math3.analysis.function.Atan#derivative()",
        "org.apache.commons.math3.analysis.function.Log#derivative()",
        "org.apache.commons.math3.analysis.function.Sqrt#derivative()",
        "org.apache.commons.math3.analysis.function.Logistic#derivative()",
        "org.apache.commons.math3.analysis.function.Expm1#derivative()",
        "org.apache.commons.math3.analysis.function.Asinh#derivative()",
        "org.apache.commons.math3.analysis.function.Gaussian#derivative()",
        "org.apache.commons.math3.analysis.function.Sinc#derivative()",
        "org.apache.commons.math3.analysis.function.Sigmoid#derivative()",
        "org.apache.commons.math3.analysis.function.Constant#derivative()",
        "org.apache.commons.math3.analysis.function.Sinh#derivative()",
        "org.apache.commons.math3.analysis.function.Tanh#derivative()",
        "org.apache.commons.math3.analysis.function.Asin#derivative()",
        "org.apache.commons.math3.analysis.function.Minus#derivative()",
        "org.apache.commons.math3.analysis.FunctionUtils.compose(DifferentiableUnivariateFunction[]...)$DifferentiableUnivariateFunction$1#derivative()",
        "org.apache.commons.math3.analysis.FunctionUtils.add(DifferentiableUnivariateFunction[]...)$DifferentiableUnivariateFunction$1#derivative()",
        "org.apache.commons.math3.analysis.FunctionUtils.multiply(DifferentiableUnivariateFunction[]...)$DifferentiableUnivariateFunction$1#derivative()",
        "org.apache.commons.math3.analysis.function.Log1p#derivative()",
        "org.apache.commons.math3.analysis.function.Tan#derivative()",
        "org.apache.commons.math3.analysis.function.Cos#derivative()",
        "org.apache.commons.math3.analysis.function.Atanh#derivative()"
    ],
    "org.apache.commons.math3.distribution.ZipfDistribution.ZipfRejectionInversionSampler#hIntegralInverse(double)": [
        "org.apache.commons.math3.distribution.ZipfDistribution.ZipfRejectionInversionSampler.helper1(double)",
        "org.apache.commons.math3.util.FastMath.exp(double)"
    ],
    "org.apache.commons.math3.stat.StatUtils.meanDifference(double[],double[])": ["org.apache.commons.math3.stat.StatUtils.sumDifference(double[],double[])"],
    "org.apache.commons.math3.stat.descriptive.summary.SumOfLogs#evaluate(double[],int,int)": [
        "org.apache.commons.math3.stat.descriptive.AbstractUnivariateStatistic#test(double[],int,int,boolean)",
        "org.apache.commons.math3.util.FastMath.log(double)"
    ],
    "org.apache.commons.math3.complex.Complex#getField()": ["org.apache.commons.math3.complex.ComplexField.getInstance()"],
    "org.apache.commons.math3.optimization.general.AbstractDifferentiableOptimizer#optimizeInternal(int,MultivariateDifferentiableFunction,GoalType,OptimizationData[]...)": ["org.apache.commons.math3.analysis.differentiation.GradientFunction#GradientFunction(MultivariateDifferentiableFunction)"],
    "org.apache.commons.math3.stat.interval.IntervalUtils.getAgrestiCoullInterval(int,int,double)": [
        "org.apache.commons.math3.stat.interval.IntervalUtils.<staticinit>()",
        "org.apache.commons.math3.stat.interval.WilsonScoreInterval#createInterval(int,int,double)",
        "org.apache.commons.math3.stat.interval.NormalApproximationInterval#createInterval(int,int,double)",
        "org.apache.commons.math3.stat.interval.AgrestiCoullInterval#createInterval(int,int,double)",
        "org.apache.commons.math3.stat.interval.ClopperPearsonInterval#createInterval(int,int,double)"
    ],
    "org.apache.commons.math3.complex.Complex#pow(double)": [
        "org.apache.commons.math3.complex.Complex#log()",
        "org.apache.commons.math3.complex.Complex#multiply(double)",
        "org.apache.commons.math3.complex.Complex#exp()"
    ],
    "org.apache.commons.math3.random.RandomDataGenerator#nextF(double,double)": [
        "org.apache.commons.math3.distribution.ExponentialDistribution#sample()",
        "org.apache.commons.math3.random.RandomDataGenerator#getRandomGenerator()",
        "org.apache.commons.math3.distribution.AbstractRealDistribution#sample()",
        "org.apache.commons.math3.distribution.FDistribution.<staticinit>()",
        "org.apache.commons.math3.distribution.EnumeratedRealDistribution#sample()",
        "org.apache.commons.math3.distribution.BetaDistribution#sample()",
        "org.apache.commons.math3.distribution.LogNormalDistribution#sample()",
        "org.apache.commons.math3.distribution.FDistribution#FDistribution(RandomGenerator,double,double,double)",
        "org.apache.commons.math3.distribution.ParetoDistribution#sample()",
        "org.apache.commons.math3.distribution.UniformRealDistribution#sample()",
        "org.apache.commons.math3.distribution.NormalDistribution#sample()",
        "org.apache.commons.math3.distribution.ConstantRealDistribution#sample()",
        "org.apache.commons.math3.distribution.GammaDistribution#sample()"
    ],
    "org.apache.commons.math3.util.FastMath.cosh(double)": [
        "org.apache.commons.math3.util.FastMath.exp(double)",
        "org.apache.commons.math3.util.FastMath.<staticinit>()",
        "org.apache.commons.math3.util.FastMath.exp(double,double,double[])"
    ],
    "org.apache.commons.math3.stat.descriptive.rank.Max#copy()": [
        "org.apache.commons.math3.stat.descriptive.rank.Max.copy(Max,Max)",
        "org.apache.commons.math3.stat.descriptive.rank.Max#Max()"
    ],
    "org.apache.commons.math3.distribution.EnumeratedDistribution#EnumeratedDistribution(RandomGenerator,List<Pair<T, Double>>)": [
        "org.apache.commons.math3.distribution.EnumeratedDistribution.<init>()",
        "org.apache.commons.math3.util.Pair#getKey()",
        "org.apache.commons.math3.optim.PointVectorValuePair#getValue()",
        "org.apache.commons.math3.optimization.PointVectorValuePair#getValue()",
        "org.apache.commons.math3.util.MathArrays.normalizeArray(double[],double)",
        "org.apache.commons.math3.exception.NotANumberException#NotANumberException()",
        "org.apache.commons.math3.util.Pair#getValue()"
    ],
    "org.apache.commons.math3.ode.nonstiff.AdamsFieldStepInterpolator.taylor(FieldODEStateAndDerivative<S extends RealFieldElement>,S extends RealFieldElement,S extends RealFieldElement,S extends RealFieldElement[],Array2DRowFieldMatrix<S extends RealFieldElement>)": [
        "org.apache.commons.math3.ode.FieldODEState#getState()",
        "org.apache.commons.math3.linear.Array2DRowFieldMatrix#getDataRef()",
        "org.apache.commons.math3.ode.FieldODEState#getTime()",
        "org.apache.commons.math3.util.MathArrays.buildArray(Field<T>,int)",
        "org.apache.commons.math3.ode.FieldODEStateAndDerivative#FieldODEStateAndDerivative(T extends RealFieldElement,T extends RealFieldElement[],T extends RealFieldElement[])"
    ],
    "org.apache.commons.math3.random.ValueServer#getNextExponential()": ["org.apache.commons.math3.random.RandomDataGenerator#nextExponential(double)"],
    "org.apache.commons.math3.dfp.DfpField#DfpField(int)": ["org.apache.commons.math3.dfp.DfpField#DfpField(int,boolean)"],
    "org.apache.commons.math3.geometry.spherical.twod.Vertex#setIncoming(Edge)": [
        "org.apache.commons.math3.geometry.spherical.twod.Edge#getCircle()",
        "org.apache.commons.math3.geometry.spherical.twod.Vertex#bindWith(Circle)"
    ],
    "org.apache.commons.math3.dfp.Dfp#nextAfter(Dfp)": [
        "org.apache.commons.math3.dfp.Dfp#classify()",
        "org.apache.commons.math3.dfp.Dfp.<staticinit>()",
        "org.apache.commons.math3.dfp.Dfp#dotrap(int,String,Dfp,Dfp)",
        "org.apache.commons.math3.dfp.Dfp#newInstance(Dfp)",
        "org.apache.commons.math3.dfp.Dfp#add(Dfp)",
        "org.apache.commons.math3.dfp.DfpField#getRadixDigits()",
        "org.apache.commons.math3.dfp.Dfp.compare(Dfp,Dfp)",
        "org.apache.commons.math3.dfp.Dfp#subtract(Dfp)",
        "org.apache.commons.math3.dfp.Dfp#lessThan(Dfp)",
        "org.apache.commons.math3.dfp.DfpDec#newInstance(Dfp)",
        "org.apache.commons.math3.dfp.Dfp#getOne()",
        "org.apache.commons.math3.dfp.DfpField.<staticinit>()",
        "org.apache.commons.math3.dfp.DfpField#setIEEEFlagsBits(int)",
        "org.apache.commons.math3.dfp.Dfp#equals(Object)",
        "org.apache.commons.math3.dfp.Dfp#getZero()"
    ],
    "org.apache.commons.math3.util.RandomPivotingStrategy#RandomPivotingStrategy(RandomGenerator)": ["org.apache.commons.math3.util.RandomPivotingStrategy.<init>()"],
    "org.apache.commons.math3.optimization.direct.CMAESOptimizer#initializeCMA(double[])": [
        "org.apache.commons.math3.optimization.direct.CMAESOptimizer.sequence(double,double,double)",
        "org.apache.commons.math3.linear.AbstractRealMatrix#scalarAdd(double)",
        "org.apache.commons.math3.util.FastMath.max(double,double)",
        "org.apache.commons.math3.linear.OpenMapRealMatrix#multiply(RealMatrix)",
        "org.apache.commons.math3.linear.BlockRealMatrix#getFrobeniusNorm()",
        "org.apache.commons.math3.linear.DiagonalMatrix#getEntry(int,int)",
        "org.apache.commons.math3.optimization.direct.CMAESOptimizer.eye(int,int)",
        "org.apache.commons.math3.util.FastMath.min(double,double)",
        "org.apache.commons.math3.optimization.direct.CMAESOptimizer.zeros(int,int)",
        "org.apache.commons.math3.linear.BlockRealMatrix#getEntry(int,int)",
        "org.apache.commons.math3.util.FastMath.sqrt(double)",
        "org.apache.commons.math3.optimization.direct.CMAESOptimizer.ones(int,int)",
        "org.apache.commons.math3.linear.DiagonalMatrix#multiply(RealMatrix)",
        "org.apache.commons.math3.optimization.direct.CMAESOptimizer.diag(RealMatrix)",
        "org.apache.commons.math3.linear.BlockRealMatrix#multiply(RealMatrix)",
        "org.apache.commons.math3.linear.AbstractRealMatrix#getFrobeniusNorm()",
        "org.apache.commons.math3.linear.BlockRealMatrix#scalarAdd(double)",
        "org.apache.commons.math3.linear.BlockRealMatrix#scalarMultiply(double)",
        "org.apache.commons.math3.optimization.direct.CMAESOptimizer.times(RealMatrix,RealMatrix)",
        "org.apache.commons.math3.optimization.direct.CMAESOptimizer.square(RealMatrix)",
        "org.apache.commons.math3.linear.BlockRealMatrix#transpose()",
        "org.apache.commons.math3.linear.OpenMapRealMatrix#getEntry(int,int)",
        "org.apache.commons.math3.linear.Array2DRowRealMatrix#Array2DRowRealMatrix(double[][],boolean)",
        "org.apache.commons.math3.linear.Array2DRowRealMatrix#getEntry(int,int)",
        "org.apache.commons.math3.linear.MatrixUtils.createColumnRealMatrix(double[])",
        "org.apache.commons.math3.optimization.direct.CMAESOptimizer.max(RealMatrix)",
        "org.apache.commons.math3.linear.AbstractRealMatrix#multiply(RealMatrix)",
        "org.apache.commons.math3.linear.AbstractRealMatrix#transpose()",
        "org.apache.commons.math3.linear.AbstractRealMatrix#scalarMultiply(double)",
        "org.apache.commons.math3.optimization.direct.CMAESOptimizer.log(RealMatrix)",
        "org.apache.commons.math3.optimization.direct.CMAESOptimizer.repmat(RealMatrix,int,int)",
        "org.apache.commons.math3.util.FastMath.log(double)"
    ],
    "org.apache.commons.math3.linear.BlockFieldMatrix#scalarAdd(T extends FieldElement)": [
        "org.apache.commons.math3.linear.BlockFieldMatrix#BlockFieldMatrix(Field<T extends FieldElement>,int,int)",
        "org.apache.commons.math3.linear.AbstractFieldMatrix#getField()"
    ],
    "org.apache.commons.math3.stat.inference.TTest#tTest(double,double[],double)": [
        "org.apache.commons.math3.stat.inference.TTest#tTest(double,double[])",
        "org.apache.commons.math3.stat.inference.TTest#checkSignificanceLevel(double)"
    ],
    "org.apache.commons.math3.analysis.differentiation.DSCompiler#linearCombination(double,double[],int,double,double[],int,double,double[],int,double,double[],int,double[],int)": [
        "org.apache.commons.math3.analysis.differentiation.DSCompiler#getSize()",
        "org.apache.commons.math3.util.MathArrays.linearCombination(double,double,double,double,double,double,double,double)"
    ],
    "org.apache.commons.math3.analysis.function.Gaussian#Gaussian(double,double)": [
        "org.apache.commons.math3.analysis.function.Gaussian#Gaussian(double,double,double)",
        "org.apache.commons.math3.util.FastMath.sqrt(double)"
    ],
    "org.apache.commons.math3.util.FastMath.atanh(double)": [
        "org.apache.commons.math3.util.FastMath.log(double)",
        "org.apache.commons.math3.util.FastMath.<staticinit>()"
    ],
    "org.apache.commons.math3.stat.descriptive.moment.SemiVariance.<init>()": ["org.apache.commons.math3.stat.descriptive.moment.SemiVariance.Direction.<staticinit>()"],
    "org.apache.commons.math3.stat.descriptive.SynchronizedMultivariateSummaryStatistics#getMeanImpl()": ["org.apache.commons.math3.stat.descriptive.MultivariateSummaryStatistics#getMeanImpl()"],
    "org.apache.commons.math3.fraction.BigFractionFormat#BigFractionFormat()": [
        "org.apache.commons.math3.fraction.AbstractFormat#AbstractFormat()",
        "org.apache.commons.math3.fraction.BigFractionFormat.<init>()"
    ],
    "org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizer#LevenbergMarquardtOptimizer(double,double,double,double,double)": [
        "org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizer.<init>()",
        "org.apache.commons.math3.optim.nonlinear.vector.jacobian.AbstractLeastSquaresOptimizer#AbstractLeastSquaresOptimizer(ConvergenceChecker<PointVectorValuePair>)"
    ],
    "org.apache.commons.math3.optim.linear.SimplexTableau#getRow(int)": ["org.apache.commons.math3.linear.Array2DRowRealMatrix#getDataRef()"],
    "org.apache.commons.math3.linear.Array2DRowFieldMatrix#copyIn(T extends FieldElement[][])": ["org.apache.commons.math3.linear.Array2DRowFieldMatrix#setSubMatrix(T extends FieldElement[][],int,int)"],
    "org.apache.commons.math3.geometry.spherical.twod.Sphere2D#Sphere2D()": ["org.apache.commons.math3.geometry.spherical.twod.Sphere2D.<init>()"],
    "org.apache.commons.math3.userguide.geometry.GeometryExample.Display#paintConvexHull()": [
        "org.apache.commons.math3.geometry.euclidean.twod.Vector2D#getY()",
        "org.apache.commons.math3.geometry.euclidean.twod.Vector2D#getX()",
        "org.apache.commons.math3.geometry.euclidean.twod.hull.ConvexHull2D#getLineSegments()",
        "org.apache.commons.math3.geometry.euclidean.twod.Segment#getStart()",
        "org.apache.commons.math3.geometry.euclidean.twod.DiskGenerator.<init>()",
        "org.apache.commons.math3.geometry.enclosing.EnclosingBall#getRadius()",
        "org.apache.commons.math3.geometry.euclidean.twod.hull.MonotoneChain#MonotoneChain(boolean,double)",
        "org.apache.commons.math3.geometry.euclidean.twod.hull.AbstractConvexHullGenerator2D#generate(Collection<Vector2D>)",
        "org.apache.commons.math3.geometry.enclosing.EnclosingBall#getCenter()",
        "org.apache.commons.math3.geometry.euclidean.twod.hull.ConvexHull2D#getVertices()",
        "org.apache.commons.math3.geometry.enclosing.WelzlEncloser#enclose(Iterable<P extends Point>)",
        "org.apache.commons.math3.geometry.euclidean.twod.Segment#getEnd()",
        "org.apache.commons.math3.geometry.enclosing.WelzlEncloser#WelzlEncloser(double,SupportBallGenerator<S extends Space, P extends Point>)"
    ],
    "org.apache.commons.math3.linear.Array2DRowRealMatrix#Array2DRowRealMatrix(int,int)": [
        "org.apache.commons.math3.linear.Array2DRowRealMatrix.<init>()",
        "org.apache.commons.math3.linear.AbstractRealMatrix#AbstractRealMatrix(int,int)"
    ],
    "org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizer.<staticinit>()": ["org.apache.commons.math3.util.Precision.<staticinit>()"],
    "org.apache.commons.math3.analysis.solvers.NewtonRaphsonSolver#doSolve()": [
        "org.apache.commons.math3.analysis.solvers.BaseAbstractUnivariateSolver#getAbsoluteAccuracy()",
        "org.apache.commons.math3.analysis.solvers.BaseAbstractUnivariateSolver#getStartValue()",
        "org.apache.commons.math3.analysis.differentiation.DerivativeStructure#getValue()",
        "org.apache.commons.math3.util.FastMath.abs(double)",
        "org.apache.commons.math3.analysis.solvers.AbstractUnivariateDifferentiableSolver#computeObjectiveValueAndDerivative(double)",
        "org.apache.commons.math3.analysis.differentiation.DerivativeStructure#getPartialDerivative(int[]...)"
    ],
    "org.apache.commons.math3.analysis.interpolation.InterpolatingMicrosphere#copy()": ["org.apache.commons.math3.analysis.interpolation.InterpolatingMicrosphere#InterpolatingMicrosphere(InterpolatingMicrosphere)"],
    "org.apache.commons.math3.stat.descriptive.moment.Variance#evaluate(double[],double)": ["org.apache.commons.math3.stat.descriptive.moment.Variance#evaluate(double[],double,int,int)"],
    "org.apache.commons.math3.optim.linear.LinearConstraint#equals(Object)": [
        "org.apache.commons.math3.linear.OpenMapRealVector#equals(Object)",
        "org.apache.commons.math3.linear.ArrayRealVector#equals(Object)",
        "org.apache.commons.math3.linear.RealVector#equals(Object)"
    ],
    "org.apache.commons.math3.optimization.general.NonLinearConjugateGradientOptimizer#NonLinearConjugateGradientOptimizer(ConjugateGradientFormula,ConvergenceChecker<PointValuePair>,UnivariateSolver,Preconditioner)": [
        "org.apache.commons.math3.optimization.general.ConjugateGradientFormula.<staticinit>()",
        "org.apache.commons.math3.optimization.general.NonLinearConjugateGradientOptimizer.<init>()",
        "org.apache.commons.math3.optimization.general.AbstractScalarDifferentiableOptimizer#AbstractScalarDifferentiableOptimizer(ConvergenceChecker<PointValuePair>)"
    ],
    "org.apache.commons.math3.optim.BaseOptimizer#incrementIterationCount()": [
        "org.apache.commons.math3.util.Incrementor#incrementCount()",
        "org.apache.commons.math3.util.Incrementor.wrap(Incrementor)$Incrementor$1#incrementCount()"
    ],
    "org.apache.commons.math3.random.ValueServer#getNextReplay()": [
        "org.apache.commons.math3.random.ValueServer#closeReplayFile()",
        "org.apache.commons.math3.random.ValueServer#resetReplayFile()",
        "org.apache.commons.math3.exception.util.LocalizedFormats.<staticinit>()"
    ],
    "org.apache.commons.math3.primes.PollardRho.rhoBrent(int)": [
        "org.apache.commons.math3.util.FastMath.abs(int)",
        "org.apache.commons.math3.primes.SmallPrimes.<staticinit>()",
        "org.apache.commons.math3.primes.PollardRho.gcdPositive(int,int)",
        "org.apache.commons.math3.util.FastMath.min(int,int)"
    ],
    "org.apache.commons.math3.util.IntegerSequence.Incrementor#Incrementor(int,int,int,MaxCountExceededCallback)": [
        "org.apache.commons.math3.exception.NullArgumentException#NullArgumentException()",
        "org.apache.commons.math3.util.IntegerSequence.Incrementor.<init>()"
    ],
    "org.apache.commons.math3.dfp.DfpMath.splitDiv(Dfp[],Dfp[])": [
        "org.apache.commons.math3.dfp.Dfp#add(Dfp)",
        "org.apache.commons.math3.dfp.Dfp#subtract(Dfp)",
        "org.apache.commons.math3.dfp.Dfp#divide(Dfp)",
        "org.apache.commons.math3.dfp.Dfp#multiply(Dfp)"
    ],
    "org.apache.commons.math3.linear.RealVector#mapMultiply(double)": [
        "org.apache.commons.math3.linear.ArrayRealVector#copy()",
        "org.apache.commons.math3.linear.RealVector.unmodifiableRealVector(RealVector)$RealVector$1#copy()",
        "org.apache.commons.math3.linear.ArrayRealVector#mapMultiplyToSelf(double)",
        "org.apache.commons.math3.linear.RealVector.unmodifiableRealVector(RealVector)$RealVector$1#mapMultiplyToSelf(double)",
        "org.apache.commons.math3.linear.OpenMapRealVector#copy()",
        "org.apache.commons.math3.linear.RealVector#mapMultiplyToSelf(double)"
    ],
    "org.apache.commons.math3.linear.BlockRealMatrix#getRow(int)": [
        "org.apache.commons.math3.linear.MatrixUtils.checkRowIndex(AnyMatrix,int)",
        "org.apache.commons.math3.linear.BlockRealMatrix.<staticinit>()",
        "org.apache.commons.math3.linear.BlockRealMatrix#blockWidth(int)"
    ],
    "org.apache.commons.math3.ode.nonstiff.AdamsNordsieckFieldTransformer.getInstance(Field<T extends RealFieldElement>,int)": [
        "org.apache.commons.math3.ode.nonstiff.AdamsNordsieckFieldTransformer#AdamsNordsieckFieldTransformer(Field<T extends RealFieldElement>,int)",
        "org.apache.commons.math3.ode.nonstiff.AdamsNordsieckFieldTransformer.<staticinit>()"
    ],
    "org.apache.commons.math3.optimization.direct.CMAESOptimizer.FitnessFunction#FitnessFunction()": ["org.apache.commons.math3.optimization.direct.CMAESOptimizer.FitnessFunction.<init>()"],
    "org.apache.commons.math3.complex.Complex#equals(Object)": ["org.apache.commons.math3.util.MathUtils.equals(double,double)"],
    "org.apache.commons.math3.dfp.Dfp#scalb(int)": [
        "org.apache.commons.math3.dfp.DfpMath.pow(Dfp,int)",
        "org.apache.commons.math3.dfp.Dfp#multiply(Dfp)",
        "org.apache.commons.math3.dfp.Dfp#getTwo()"
    ],
    "org.apache.commons.math3.ml.neuralnet.sofm.LearningFactorFunctionFactory.quasiSigmoidDecay(double,double,long)": ["org.apache.commons.math3.ml.neuralnet.sofm.LearningFactorFunctionFactory.quasiSigmoidDecay(double,double,long)$LearningFactorFunction$1.<init>()"],
    "org.apache.commons.math3.ode.AbstractFieldIntegrator#getEventHandlers()": ["org.apache.commons.math3.ode.events.FieldEventState#getEventHandler()"],
    "org.apache.commons.math3.ode.nonstiff.GillFieldIntegrator#getC()": [
        "org.apache.commons.math3.ode.AbstractFieldIntegrator#getField()",
        "org.apache.commons.math3.ode.nonstiff.RungeKuttaFieldIntegrator#fraction(int,int)",
        "org.apache.commons.math3.fraction.BigFractionField#getOne()",
        "org.apache.commons.math3.fraction.FractionField#getOne()",
        "org.apache.commons.math3.analysis.differentiation.SparseGradient#getField()$Field$1#getOne()",
        "org.apache.commons.math3.dfp.DfpField#getOne()",
        "org.apache.commons.math3.util.MathArrays.buildArray(Field<T>,int)",
        "org.apache.commons.math3.analysis.differentiation.DerivativeStructure#getField()$Field$1#getOne()",
        "org.apache.commons.math3.util.Decimal64Field#getOne()",
        "org.apache.commons.math3.complex.ComplexField#getOne()",
        "org.apache.commons.math3.util.BigRealField#getOne()"
    ],
    "org.apache.commons.math3.util.MathArrays.PairDoubleInteger#PairDoubleInteger(double,int)": ["org.apache.commons.math3.util.MathArrays.PairDoubleInteger.<init>()"],
    "org.apache.commons.math3.geometry.partitioning.AbstractRegion#AbstractRegion(Collection<SubHyperplane<S extends Space>>,double)$BSPTreeVisitor$1#visitLeafNode(BSPTree<S extends Space>)": [
        "org.apache.commons.math3.geometry.partitioning.BSPTree#getParent()",
        "org.apache.commons.math3.geometry.partitioning.BSPTree#getMinus()",
        "org.apache.commons.math3.geometry.partitioning.BSPTree#setAttribute(Object)"
    ],
    "org.apache.commons.math3.random.AbstractWell#setSeed(long)": ["org.apache.commons.math3.random.AbstractWell#setSeed(int[])"],
    "org.apache.commons.math3.analysis.solvers.BaseSecantSolver#BaseSecantSolver(double,double,double,Method)": [
        "org.apache.commons.math3.analysis.solvers.AbstractUnivariateSolver#AbstractUnivariateSolver(double,double,double)",
        "org.apache.commons.math3.analysis.solvers.AllowedSolution.<staticinit>()",
        "org.apache.commons.math3.analysis.solvers.BaseSecantSolver.<init>()"
    ],
    "org.apache.commons.math3.geometry.spherical.oned.ArcsSet#isDirect(BSPTree<Sphere1D>)": [
        "org.apache.commons.math3.geometry.partitioning.BSPTree#getCut()",
        "org.apache.commons.math3.geometry.partitioning.AbstractSubHyperplane#getHyperplane()",
        "org.apache.commons.math3.geometry.spherical.oned.LimitAngle#isDirect()"
    ],
    "org.apache.commons.math3.geometry.partitioning.AbstractRegion#AbstractRegion(Hyperplane<S extends Space>[],double)": [
        "org.apache.commons.math3.geometry.partitioning.BSPTree#insertCut(Hyperplane<S extends Space>)",
        "org.apache.commons.math3.geometry.partitioning.BSPTree#BSPTree(Object)",
        "org.apache.commons.math3.geometry.partitioning.BSPTree#getPlus()",
        "org.apache.commons.math3.geometry.euclidean.twod.Line#wholeSpace()",
        "org.apache.commons.math3.geometry.euclidean.oned.OrientedPoint#wholeSpace()",
        "org.apache.commons.math3.geometry.partitioning.BSPTree#getMinus()",
        "org.apache.commons.math3.geometry.partitioning.AbstractRegion#getTree(boolean)",
        "org.apache.commons.math3.geometry.spherical.twod.Circle#wholeSpace()",
        "org.apache.commons.math3.geometry.spherical.oned.LimitAngle#wholeSpace()",
        "org.apache.commons.math3.geometry.partitioning.BSPTree#setAttribute(Object)",
        "org.apache.commons.math3.geometry.euclidean.threed.Plane#wholeSpace()",
        "org.apache.commons.math3.geometry.partitioning.AbstractRegion.<init>()"
    ],
    "org.apache.commons.math3.stat.descriptive.MultivariateSummaryStatistics#equals(Object)": [
        "org.apache.commons.math3.stat.descriptive.MultivariateSummaryStatistics#getCovariance()",
        "org.apache.commons.math3.stat.descriptive.MultivariateSummaryStatistics#getSumSq()",
        "org.apache.commons.math3.stat.descriptive.MultivariateSummaryStatistics#getGeometricMean()",
        "org.apache.commons.math3.stat.descriptive.SynchronizedMultivariateSummaryStatistics#getN()",
        "org.apache.commons.math3.util.Precision.equalsIncludingNaN(float,float)",
        "org.apache.commons.math3.stat.descriptive.SynchronizedMultivariateSummaryStatistics#getCovariance()",
        "org.apache.commons.math3.stat.descriptive.SynchronizedMultivariateSummaryStatistics#getMean()",
        "org.apache.commons.math3.stat.descriptive.MultivariateSummaryStatistics#getMin()",
        "org.apache.commons.math3.stat.descriptive.MultivariateSummaryStatistics#getSumLog()",
        "org.apache.commons.math3.stat.descriptive.SynchronizedMultivariateSummaryStatistics#getGeometricMean()",
        "org.apache.commons.math3.stat.descriptive.SynchronizedMultivariateSummaryStatistics#getSumLog()",
        "org.apache.commons.math3.stat.descriptive.MultivariateSummaryStatistics#getN()",
        "org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(double[],double[])",
        "org.apache.commons.math3.stat.descriptive.SynchronizedMultivariateSummaryStatistics#getMin()",
        "org.apache.commons.math3.stat.descriptive.SynchronizedMultivariateSummaryStatistics#getSumSq()",
        "org.apache.commons.math3.stat.descriptive.SynchronizedMultivariateSummaryStatistics#getMax()",
        "org.apache.commons.math3.stat.descriptive.MultivariateSummaryStatistics#getSum()",
        "org.apache.commons.math3.stat.descriptive.SynchronizedMultivariateSummaryStatistics#getSum()",
        "org.apache.commons.math3.stat.descriptive.MultivariateSummaryStatistics#getMax()",
        "org.apache.commons.math3.stat.descriptive.MultivariateSummaryStatistics#getMean()"
    ],
    "org.apache.commons.math3.util.IntegerSequence.range(int,int)": ["org.apache.commons.math3.util.IntegerSequence.range(int,int,int)"],
    "org.apache.commons.math3.stat.inference.TestUtils.gTestDataSetsComparison(long[],long[],double)": [
        "org.apache.commons.math3.stat.inference.GTest#gTestDataSetsComparison(long[],long[],double)",
        "org.apache.commons.math3.stat.inference.TestUtils.<staticinit>()"
    ],
    "org.apache.commons.math3.stat.descriptive.summary.SumOfLogs#increment(double)": ["org.apache.commons.math3.util.FastMath.log(double)"],
    "org.apache.commons.math3.fitting.CurveFitter.TheoreticalValuesFunction#getModelFunction()$MultivariateVectorFunction$1#value(double[])": [
        "org.apache.commons.math3.fitting.GaussianCurveFitter$Parametric$1#value(double,double[]...)",
        "org.apache.commons.math3.analysis.function.Logit.Parametric#value(double,double[]...)",
        "org.apache.commons.math3.analysis.polynomials.PolynomialFunction.Parametric#value(double,double[]...)",
        "org.apache.commons.math3.analysis.function.Sigmoid.Parametric#value(double,double[]...)",
        "org.apache.commons.math3.fitting.WeightedObservedPoint#getX()",
        "org.apache.commons.math3.analysis.function.Logistic.Parametric#value(double,double[]...)",
        "org.apache.commons.math3.analysis.function.Gaussian.Parametric#value(double,double[]...)",
        "org.apache.commons.math3.optimization.fitting.GaussianFitter#fit(double[])$Parametric$1#value(double,double[]...)",
        "org.apache.commons.math3.analysis.function.HarmonicOscillator.Parametric#value(double,double[]...)",
        "org.apache.commons.math3.fitting.GaussianFitter#fit(double[])$Parametric$1#value(double,double[]...)"
    ],
    "org.apache.commons.math3.dfp.DfpField#newDfp(String)": ["org.apache.commons.math3.dfp.Dfp#Dfp(DfpField,String)"],
    "org.apache.commons.math3.ode.sampling.NordsieckStepInterpolator#writeExternal(ObjectOutput)": ["org.apache.commons.math3.ode.sampling.AbstractStepInterpolator#writeBaseExternal(ObjectOutput)"],
    "org.apache.commons.math3.analysis.interpolation.HermiteInterpolator#getPolynomials()": [
        "org.apache.commons.math3.analysis.interpolation.HermiteInterpolator#polynomial(double[]...)",
        "org.apache.commons.math3.analysis.polynomials.PolynomialFunction#add(PolynomialFunction)",
        "org.apache.commons.math3.analysis.interpolation.HermiteInterpolator#checkInterpolation()",
        "org.apache.commons.math3.analysis.polynomials.PolynomialFunction#multiply(PolynomialFunction)"
    ],
    "org.apache.commons.math3.analysis.solvers.FieldBracketingNthOrderBrentSolver#guessX(T extends RealFieldElement,T extends RealFieldElement[],T extends RealFieldElement[],int,int)": [
        "org.apache.commons.math3.util.BigRealField#getZero()",
        "org.apache.commons.math3.analysis.differentiation.SparseGradient#getField()$Field$1#getZero()",
        "org.apache.commons.math3.analysis.differentiation.DerivativeStructure#getField()$Field$1#getZero()",
        "org.apache.commons.math3.fraction.FractionField#getZero()",
        "org.apache.commons.math3.util.Decimal64Field#getZero()",
        "org.apache.commons.math3.dfp.DfpField#getZero()",
        "org.apache.commons.math3.complex.ComplexField#getZero()",
        "org.apache.commons.math3.fraction.BigFractionField#getZero()"
    ],
    "org.apache.commons.math3.dfp.Dfp#linearCombination(double,Dfp,double,Dfp)": [
        "org.apache.commons.math3.dfp.Dfp#multiply(double)",
        "org.apache.commons.math3.dfp.Dfp#add(Dfp)"
    ],
    "org.apache.commons.math3.linear.RealVector#sparseIterator()": ["org.apache.commons.math3.linear.RealVector.SparseEntryIterator#SparseEntryIterator()"],
    "org.apache.commons.math3.linear.BlockRealMatrix#preMultiply(double[])": [
        "org.apache.commons.math3.exception.DimensionMismatchException#DimensionMismatchException(int,int)",
        "org.apache.commons.math3.util.FastMath.min(int,int)",
        "org.apache.commons.math3.linear.BlockRealMatrix.<staticinit>()",
        "org.apache.commons.math3.linear.BlockRealMatrix#blockWidth(int)"
    ],
    "org.apache.commons.math3.distribution.ExponentialDistribution#ExponentialDistribution(RandomGenerator,double)": [
        "org.apache.commons.math3.distribution.ExponentialDistribution#ExponentialDistribution(RandomGenerator,double,double)",
        "org.apache.commons.math3.distribution.ExponentialDistribution.<staticinit>()"
    ],
    "org.apache.commons.math3.optim.nonlinear.scalar.MultivariateOptimizer#MultivariateOptimizer(ConvergenceChecker<PointValuePair>)": [
        "org.apache.commons.math3.optim.BaseMultivariateOptimizer#BaseMultivariateOptimizer(ConvergenceChecker<PAIR>)",
        "org.apache.commons.math3.optim.nonlinear.scalar.MultivariateOptimizer.<init>()"
    ],
    "org.apache.commons.math3.util.MathArrays.verifyValues(double[],int,int)": ["org.apache.commons.math3.util.MathArrays.verifyValues(double[],int,int,boolean)"],
    "org.apache.commons.math3.stat.inference.WilcoxonSignedRankTest#WilcoxonSignedRankTest()": [
        "org.apache.commons.math3.stat.inference.WilcoxonSignedRankTest.<init>()",
        "org.apache.commons.math3.stat.ranking.NaturalRanking#NaturalRanking(NaNStrategy,TiesStrategy)",
        "org.apache.commons.math3.stat.ranking.NaNStrategy.<staticinit>()",
        "org.apache.commons.math3.stat.ranking.TiesStrategy.<staticinit>()"
    ],
    "org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator.Corrector#Corrector(double[],double[],double[])": ["org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator.Corrector.<init>()"],
    "org.apache.commons.math3.geometry.partitioning.BoundaryProjector#visitOrder(BSPTree<S extends Space>)": [
        "org.apache.commons.math3.geometry.partitioning.BSPTree#getCut()",
        "org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor.Order.<staticinit>()",
        "org.apache.commons.math3.geometry.partitioning.AbstractSubHyperplane#getHyperplane()"
    ],
    "org.apache.commons.math3.distribution.HypergeometricDistribution#getNumericalVariance()": ["org.apache.commons.math3.distribution.HypergeometricDistribution#calculateNumericalVariance()"],
    "org.apache.commons.math3.stat.descriptive.moment.ThirdMoment#ThirdMoment()": [
        "org.apache.commons.math3.stat.descriptive.moment.ThirdMoment.<init>()",
        "org.apache.commons.math3.stat.descriptive.moment.SecondMoment#SecondMoment()"
    ],
    "org.apache.commons.math3.optimization.linear.SimplexSolver#getPivotRow(SimplexTableau,int)": [
        "org.apache.commons.math3.optimization.linear.SimplexTableau#getHeight()",
        "org.apache.commons.math3.util.Precision.compareTo(double,double,int)",
        "org.apache.commons.math3.optimization.linear.SimplexTableau#getBasicRow(int)",
        "org.apache.commons.math3.optimization.linear.SimplexTableau#getEntry(int,int)",
        "org.apache.commons.math3.optimization.linear.SimplexTableau#getNumArtificialVariables()",
        "org.apache.commons.math3.util.Precision.equals(double,double,int)",
        "org.apache.commons.math3.optimization.linear.SimplexTableau#getNumObjectiveFunctions()",
        "org.apache.commons.math3.optimization.linear.AbstractLinearOptimizer#getIterations()",
        "org.apache.commons.math3.optimization.linear.SimplexTableau#getWidth()",
        "org.apache.commons.math3.optimization.linear.SimplexTableau#getArtificialVariableOffset()",
        "org.apache.commons.math3.optimization.linear.AbstractLinearOptimizer#getMaxIterations()"
    ],
    "org.apache.commons.math3.linear.AbstractFieldMatrix#walkInColumnOrder(FieldMatrixChangingVisitor<T extends FieldElement>,int,int,int,int)": [
        "org.apache.commons.math3.linear.SparseFieldMatrix#getEntry(int,int)",
        "org.apache.commons.math3.linear.BlockFieldMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.DefaultFieldMatrixChangingVisitor#start(int,int,int,int,int,int)",
        "org.apache.commons.math3.linear.SparseFieldMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.SparseFieldMatrix#setEntry(int,int,T extends FieldElement)",
        "org.apache.commons.math3.linear.Array2DRowFieldMatrix#setEntry(int,int,T extends FieldElement)",
        "org.apache.commons.math3.linear.BlockFieldMatrix#setEntry(int,int,T extends FieldElement)",
        "org.apache.commons.math3.linear.AbstractFieldMatrix#checkSubMatrixIndex(int,int,int,int)",
        "org.apache.commons.math3.linear.DefaultFieldMatrixChangingVisitor#end()",
        "org.apache.commons.math3.linear.Array2DRowFieldMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.SparseFieldMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.BlockFieldMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.DefaultFieldMatrixChangingVisitor#visit(int,int,T extends FieldElement)",
        "org.apache.commons.math3.linear.Array2DRowFieldMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.AbstractFieldMatrix#getSubMatrix(int[],int[])$DefaultFieldMatrixChangingVisitor$1#visit(int,int,T extends FieldElement)",
        "org.apache.commons.math3.linear.Array2DRowFieldMatrix#getEntry(int,int)",
        "org.apache.commons.math3.linear.BlockFieldMatrix#getEntry(int,int)"
    ],
    "org.apache.commons.math3.geometry.partitioning.utilities.AVLTree.Node#size()": ["org.apache.commons.math3.geometry.partitioning.utilities.AVLTree.Node#size()"],
    "org.apache.commons.math3.util.IterationManager#incrementIterationCount()": ["org.apache.commons.math3.util.IntegerSequence.Incrementor#increment()"],
    "org.apache.commons.math3.stat.descriptive.AggregateSummaryStatistics#createContributingStatistics()": [
        "org.apache.commons.math3.stat.descriptive.SummaryStatistics.copy(SummaryStatistics,SummaryStatistics)",
        "org.apache.commons.math3.stat.descriptive.AggregateSummaryStatistics.AggregatingSummaryStatistics#AggregatingSummaryStatistics(SummaryStatistics)"
    ],
    "org.apache.commons.math3.geometry.spherical.oned.ArcsSet#leafAfter(BSPTree<Sphere1D>)": [
        "org.apache.commons.math3.geometry.partitioning.BSPTree#getCut()",
        "org.apache.commons.math3.geometry.spherical.oned.ArcsSet#childAfter(BSPTree<Sphere1D>)",
        "org.apache.commons.math3.geometry.spherical.oned.ArcsSet#childBefore(BSPTree<Sphere1D>)"
    ],
    "org.apache.commons.math3.analysis.differentiation.SparseGradient#linearCombination(SparseGradient,SparseGradient,SparseGradient,SparseGradient,SparseGradient,SparseGradient)": [
        "org.apache.commons.math3.util.MathArrays.linearCombination(double,double,double,double,double,double)",
        "org.apache.commons.math3.analysis.differentiation.SparseGradient#multiply(SparseGradient)",
        "org.apache.commons.math3.analysis.differentiation.SparseGradient#add(SparseGradient)"
    ],
    "org.apache.commons.math3.transform.FastFourierTransformer#mdfft(MultiDimensionalComplexMatrix,TransformType,int,int[])": [
        "org.apache.commons.math3.transform.FastFourierTransformer.MultiDimensionalComplexMatrix#set(Complex,int[]...)",
        "org.apache.commons.math3.transform.FastFourierTransformer.MultiDimensionalComplexMatrix#get(int[]...)",
        "org.apache.commons.math3.transform.FastFourierTransformer#mdfft(MultiDimensionalComplexMatrix,TransformType,int,int[])",
        "org.apache.commons.math3.transform.FastFourierTransformer#transform(Complex[],TransformType)",
        "org.apache.commons.math3.transform.FastFourierTransformer.MultiDimensionalComplexMatrix#getDimensionSizes()"
    ],
    "org.apache.commons.math3.optimization.univariate.SimpleUnivariateValueChecker#SimpleUnivariateValueChecker(double,double,int)": [
        "org.apache.commons.math3.optimization.univariate.SimpleUnivariateValueChecker.<init>()",
        "org.apache.commons.math3.optimization.AbstractConvergenceChecker#AbstractConvergenceChecker(double,double)"
    ],
    "org.apache.commons.math3.ml.neuralnet.Network#deleteNeuron(Neuron)": [
        "org.apache.commons.math3.ml.neuralnet.Neuron#getIdentifier()",
        "org.apache.commons.math3.ml.neuralnet.Network#getNeighbours(Neuron)",
        "org.apache.commons.math3.ml.neuralnet.Network#deleteLink(Neuron,Neuron)"
    ],
    "org.apache.commons.math3.analysis.function.Acosh#derivative()": [
        "org.apache.commons.math3.analysis.function.Log10#derivative()",
        "org.apache.commons.math3.analysis.function.Power#derivative()",
        "org.apache.commons.math3.analysis.function.Sin#derivative()",
        "org.apache.commons.math3.analysis.function.Exp#derivative()",
        "org.apache.commons.math3.analysis.function.HarmonicOscillator#derivative()",
        "org.apache.commons.math3.analysis.polynomials.PolynomialFunction#derivative()",
        "org.apache.commons.math3.analysis.FunctionUtils.toDifferentiableUnivariateFunction(UnivariateDifferentiableFunction)",
        "org.apache.commons.math3.analysis.function.Logit#derivative()",
        "org.apache.commons.math3.analysis.function.Cbrt#derivative()",
        "org.apache.commons.math3.analysis.FunctionUtils.toDifferentiableUnivariateFunction(UnivariateDifferentiableFunction)$DifferentiableUnivariateFunction$1#derivative()",
        "org.apache.commons.math3.analysis.polynomials.PolynomialSplineFunction#derivative()",
        "org.apache.commons.math3.analysis.function.Cosh#derivative()",
        "org.apache.commons.math3.analysis.function.Identity#derivative()",
        "org.apache.commons.math3.analysis.function.Inverse#derivative()",
        "org.apache.commons.math3.analysis.function.Acosh#derivative()",
        "org.apache.commons.math3.analysis.function.Acos#derivative()",
        "org.apache.commons.math3.analysis.function.Atan#derivative()",
        "org.apache.commons.math3.analysis.function.Log#derivative()",
        "org.apache.commons.math3.analysis.function.Sqrt#derivative()",
        "org.apache.commons.math3.analysis.function.Logistic#derivative()",
        "org.apache.commons.math3.analysis.function.Expm1#derivative()",
        "org.apache.commons.math3.analysis.function.Asinh#derivative()",
        "org.apache.commons.math3.analysis.function.Gaussian#derivative()",
        "org.apache.commons.math3.analysis.function.Sinc#derivative()",
        "org.apache.commons.math3.analysis.function.Sigmoid#derivative()",
        "org.apache.commons.math3.analysis.function.Constant#derivative()",
        "org.apache.commons.math3.analysis.function.Sinh#derivative()",
        "org.apache.commons.math3.analysis.function.Tanh#derivative()",
        "org.apache.commons.math3.analysis.function.Asin#derivative()",
        "org.apache.commons.math3.analysis.function.Minus#derivative()",
        "org.apache.commons.math3.analysis.FunctionUtils.compose(DifferentiableUnivariateFunction[]...)$DifferentiableUnivariateFunction$1#derivative()",
        "org.apache.commons.math3.analysis.FunctionUtils.add(DifferentiableUnivariateFunction[]...)$DifferentiableUnivariateFunction$1#derivative()",
        "org.apache.commons.math3.analysis.FunctionUtils.multiply(DifferentiableUnivariateFunction[]...)$DifferentiableUnivariateFunction$1#derivative()",
        "org.apache.commons.math3.analysis.function.Log1p#derivative()",
        "org.apache.commons.math3.analysis.function.Tan#derivative()",
        "org.apache.commons.math3.analysis.function.Cos#derivative()",
        "org.apache.commons.math3.analysis.function.Atanh#derivative()"
    ],
    "org.apache.commons.math3.geometry.euclidean.oned.Interval#getLength()": ["org.apache.commons.math3.geometry.euclidean.oned.Interval#getSize()"],
    "org.apache.commons.math3.distribution.UniformRealDistribution#UniformRealDistribution(RandomGenerator,double,double,double)": ["org.apache.commons.math3.distribution.UniformRealDistribution#UniformRealDistribution(RandomGenerator,double,double)"],
    "org.apache.commons.math3.dfp.Dfp#exp()": ["org.apache.commons.math3.dfp.DfpMath.exp(Dfp)"],
    "org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.Vertex#Vertex(Vector2D)": ["org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.Vertex.<init>()"],
    "org.apache.commons.math3.analysis.function.Asin#derivative()": [
        "org.apache.commons.math3.analysis.function.Log10#derivative()",
        "org.apache.commons.math3.analysis.function.Power#derivative()",
        "org.apache.commons.math3.analysis.function.Sin#derivative()",
        "org.apache.commons.math3.analysis.function.Exp#derivative()",
        "org.apache.commons.math3.analysis.function.HarmonicOscillator#derivative()",
        "org.apache.commons.math3.analysis.polynomials.PolynomialFunction#derivative()",
        "org.apache.commons.math3.analysis.function.Logit#derivative()",
        "org.apache.commons.math3.analysis.function.Cbrt#derivative()",
        "org.apache.commons.math3.analysis.FunctionUtils.toDifferentiableUnivariateFunction(UnivariateDifferentiableFunction)",
        "org.apache.commons.math3.analysis.FunctionUtils.toDifferentiableUnivariateFunction(UnivariateDifferentiableFunction)$DifferentiableUnivariateFunction$1#derivative()",
        "org.apache.commons.math3.analysis.polynomials.PolynomialSplineFunction#derivative()",
        "org.apache.commons.math3.analysis.function.Cosh#derivative()",
        "org.apache.commons.math3.analysis.function.Identity#derivative()",
        "org.apache.commons.math3.analysis.function.Inverse#derivative()",
        "org.apache.commons.math3.analysis.function.Acosh#derivative()",
        "org.apache.commons.math3.analysis.function.Acos#derivative()",
        "org.apache.commons.math3.analysis.function.Atan#derivative()",
        "org.apache.commons.math3.analysis.function.Log#derivative()",
        "org.apache.commons.math3.analysis.function.Sqrt#derivative()",
        "org.apache.commons.math3.analysis.function.Logistic#derivative()",
        "org.apache.commons.math3.analysis.function.Expm1#derivative()",
        "org.apache.commons.math3.analysis.function.Asinh#derivative()",
        "org.apache.commons.math3.analysis.function.Gaussian#derivative()",
        "org.apache.commons.math3.analysis.function.Sinc#derivative()",
        "org.apache.commons.math3.analysis.function.Sigmoid#derivative()",
        "org.apache.commons.math3.analysis.function.Constant#derivative()",
        "org.apache.commons.math3.analysis.function.Sinh#derivative()",
        "org.apache.commons.math3.analysis.function.Tanh#derivative()",
        "org.apache.commons.math3.analysis.function.Asin#derivative()",
        "org.apache.commons.math3.analysis.function.Minus#derivative()",
        "org.apache.commons.math3.analysis.FunctionUtils.compose(DifferentiableUnivariateFunction[]...)$DifferentiableUnivariateFunction$1#derivative()",
        "org.apache.commons.math3.analysis.FunctionUtils.add(DifferentiableUnivariateFunction[]...)$DifferentiableUnivariateFunction$1#derivative()",
        "org.apache.commons.math3.analysis.FunctionUtils.multiply(DifferentiableUnivariateFunction[]...)$DifferentiableUnivariateFunction$1#derivative()",
        "org.apache.commons.math3.analysis.function.Log1p#derivative()",
        "org.apache.commons.math3.analysis.function.Tan#derivative()",
        "org.apache.commons.math3.analysis.function.Cos#derivative()",
        "org.apache.commons.math3.analysis.function.Atanh#derivative()"
    ],
    "org.apache.commons.math3.geometry.euclidean.oned.Interval#checkPoint(double,double)": ["org.apache.commons.math3.geometry.partitioning.Region.Location.<staticinit>()"],
    "org.apache.commons.math3.stat.correlation.Covariance#Covariance(RealMatrix)": ["org.apache.commons.math3.stat.correlation.Covariance#Covariance(RealMatrix,boolean)"],
    "org.apache.commons.math3.optim.nonlinear.scalar.MultiStartMultivariateOptimizer#getPairComparator()": ["org.apache.commons.math3.optim.nonlinear.scalar.MultiStartMultivariateOptimizer#getPairComparator()$Comparator$1.<init>()"],
    "org.apache.commons.math3.stat.descriptive.rank.Percentile#evaluate(double[],int,int)": ["org.apache.commons.math3.stat.descriptive.rank.Percentile#evaluate(double[],int,int,double)"],
    "org.apache.commons.math3.ode.sampling.AbstractStepInterpolator#reinitialize(double[],boolean,EquationsMapper,EquationsMapper[])": ["org.apache.commons.math3.ode.sampling.AbstractStepInterpolator#allocateInterpolatedArrays(int)"],
    "org.apache.commons.math3.optimization.linear.SimplexTableau#divideRow(int,double)": [
        "org.apache.commons.math3.linear.Array2DRowRealMatrix#getEntry(int,int)",
        "org.apache.commons.math3.linear.Array2DRowRealMatrix#setEntry(int,int,double)",
        "org.apache.commons.math3.linear.DiagonalMatrix#getEntry(int,int)",
        "org.apache.commons.math3.linear.BlockRealMatrix#setEntry(int,int,double)",
        "org.apache.commons.math3.linear.OpenMapRealMatrix#setEntry(int,int,double)",
        "org.apache.commons.math3.linear.OpenMapRealMatrix#getEntry(int,int)",
        "org.apache.commons.math3.optimization.linear.SimplexTableau#getWidth()",
        "org.apache.commons.math3.linear.DiagonalMatrix#setEntry(int,int,double)",
        "org.apache.commons.math3.linear.BlockRealMatrix#getEntry(int,int)"
    ],
    "org.apache.commons.math3.dfp.DfpMath.sin(Dfp)": [
        "org.apache.commons.math3.dfp.DfpField#getPiSplit()",
        "org.apache.commons.math3.dfp.Dfp#remainder(Dfp)",
        "org.apache.commons.math3.dfp.Dfp#divide(int)",
        "org.apache.commons.math3.dfp.Dfp#multiply(int)",
        "org.apache.commons.math3.dfp.Dfp#newInstance(Dfp)",
        "org.apache.commons.math3.dfp.DfpField#getZero()",
        "org.apache.commons.math3.dfp.DfpField#getPi()",
        "org.apache.commons.math3.dfp.Dfp#subtract(Dfp)",
        "org.apache.commons.math3.dfp.Dfp#getField()",
        "org.apache.commons.math3.dfp.DfpMath.sinInternal(Dfp[])",
        "org.apache.commons.math3.dfp.Dfp#lessThan(Dfp)",
        "org.apache.commons.math3.dfp.DfpDec#newInstance(Dfp)",
        "org.apache.commons.math3.dfp.DfpMath.split(Dfp)",
        "org.apache.commons.math3.dfp.DfpMath.cosInternal(Dfp[])",
        "org.apache.commons.math3.dfp.Dfp#negate()",
        "org.apache.commons.math3.dfp.Dfp#greaterThan(Dfp)"
    ],
    "org.apache.commons.math3.linear.BlockRealMatrix#getSubMatrix(int,int,int,int)": [
        "org.apache.commons.math3.linear.BlockRealMatrix#blockHeight(int)",
        "org.apache.commons.math3.linear.MatrixUtils.checkSubMatrixIndex(AnyMatrix,int,int,int,int)",
        "org.apache.commons.math3.linear.BlockRealMatrix.<staticinit>()",
        "org.apache.commons.math3.linear.BlockRealMatrix#copyBlockPart(double[],int,int,int,int,int,double[],int,int,int)",
        "org.apache.commons.math3.linear.BlockRealMatrix#blockWidth(int)",
        "org.apache.commons.math3.linear.BlockRealMatrix#BlockRealMatrix(int,int)"
    ],
    "org.apache.commons.math3.stat.descriptive.SynchronizedSummaryStatistics#getSumLogImpl()": ["org.apache.commons.math3.stat.descriptive.SummaryStatistics#getSumLogImpl()"],
    "org.apache.commons.math3.geometry.partitioning.BoundarySizeVisitor#visitInternalNode(BSPTree<S extends Space>)": [
        "org.apache.commons.math3.geometry.partitioning.AbstractSubHyperplane#getSize()",
        "org.apache.commons.math3.geometry.euclidean.oned.SubOrientedPoint#getSize()",
        "org.apache.commons.math3.geometry.partitioning.BoundaryAttribute#getPlusOutside()",
        "org.apache.commons.math3.geometry.spherical.oned.SubLimitAngle#getSize()",
        "org.apache.commons.math3.geometry.partitioning.BSPTree#getAttribute()",
        "org.apache.commons.math3.geometry.partitioning.BoundaryAttribute#getPlusInside()"
    ],
    "org.apache.commons.math3.fraction.FractionFormat.getAvailableLocales()": [
        "org.apache.commons.math3.fraction.BigFractionFormat.getAvailableLocales()",
        "org.apache.commons.math3.fraction.FractionFormat.getAvailableLocales()"
    ],
    "org.apache.commons.math3.filter.DefaultMeasurementModel#DefaultMeasurementModel(RealMatrix,RealMatrix)": ["org.apache.commons.math3.filter.DefaultMeasurementModel.<init>()"],
    "org.apache.commons.math3.geometry.euclidean.threed.FieldRotation#FieldRotation(FieldVector3D<T extends RealFieldElement>,T extends RealFieldElement,RotationConvention)": [
        "org.apache.commons.math3.exception.util.LocalizedFormats.<staticinit>()",
        "org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D#getZ()",
        "org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D#getNorm()",
        "org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D#getY()",
        "org.apache.commons.math3.geometry.euclidean.threed.FieldRotation.<init>()",
        "org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D#getX()",
        "org.apache.commons.math3.geometry.euclidean.threed.RotationConvention.<staticinit>()"
    ],
    "org.apache.commons.math3.optimization.direct.CMAESOptimizer#updateBD(double)": [
        "org.apache.commons.math3.linear.EigenDecomposition#EigenDecomposition(RealMatrix)",
        "org.apache.commons.math3.linear.Array2DRowRealMatrix#setEntry(int,int,double)",
        "org.apache.commons.math3.linear.DiagonalMatrix#getEntry(int,int)",
        "org.apache.commons.math3.optimization.direct.CMAESOptimizer.eye(int,int)",
        "org.apache.commons.math3.optimization.direct.CMAESOptimizer.triu(RealMatrix,int)",
        "org.apache.commons.math3.linear.BlockRealMatrix#getEntry(int,int)",
        "org.apache.commons.math3.optimization.direct.CMAESOptimizer.ones(int,int)",
        "org.apache.commons.math3.optimization.direct.CMAESOptimizer.diag(RealMatrix)",
        "org.apache.commons.math3.linear.DiagonalMatrix#setEntry(int,int,double)",
        "org.apache.commons.math3.optimization.direct.CMAESOptimizer.sqrt(RealMatrix)",
        "org.apache.commons.math3.linear.EigenDecomposition#getD()",
        "org.apache.commons.math3.linear.BlockRealMatrix#scalarMultiply(double)",
        "org.apache.commons.math3.optimization.direct.CMAESOptimizer.times(RealMatrix,RealMatrix)",
        "org.apache.commons.math3.linear.BlockRealMatrix#transpose()",
        "org.apache.commons.math3.linear.BlockRealMatrix#setEntry(int,int,double)",
        "org.apache.commons.math3.linear.OpenMapRealMatrix#setEntry(int,int,double)",
        "org.apache.commons.math3.linear.OpenMapRealMatrix#getEntry(int,int)",
        "org.apache.commons.math3.linear.Array2DRowRealMatrix#getEntry(int,int)",
        "org.apache.commons.math3.linear.EigenDecomposition#getV()",
        "org.apache.commons.math3.optimization.direct.CMAESOptimizer.max(RealMatrix)",
        "org.apache.commons.math3.optimization.direct.CMAESOptimizer.min(RealMatrix)",
        "org.apache.commons.math3.linear.AbstractRealMatrix#scalarMultiply(double)",
        "org.apache.commons.math3.linear.BlockRealMatrix#add(RealMatrix)",
        "org.apache.commons.math3.linear.AbstractRealMatrix#transpose()",
        "org.apache.commons.math3.linear.AbstractRealMatrix#add(RealMatrix)",
        "org.apache.commons.math3.optimization.direct.CMAESOptimizer.repmat(RealMatrix,int,int)"
    ],
    "org.apache.commons.math3.stat.descriptive.summary.Sum#evaluate(double[],double[],int,int)": ["org.apache.commons.math3.stat.descriptive.AbstractUnivariateStatistic#test(double[],double[],int,int,boolean)"],
    "org.apache.commons.math3.stat.descriptive.SynchronizedDescriptiveStatistics.copy(SynchronizedDescriptiveStatistics,SynchronizedDescriptiveStatistics)": [
        "org.apache.commons.math3.stat.descriptive.DescriptiveStatistics.copy(DescriptiveStatistics,DescriptiveStatistics)",
        "org.apache.commons.math3.util.MathUtils.checkNotNull(Object)"
    ],
    "org.apache.commons.math3.ode.nonstiff.ClassicalRungeKuttaFieldStepInterpolator#computeInterpolatedStateAndDerivatives(FieldEquationsMapper<T extends RealFieldElement>,T extends RealFieldElement,T extends RealFieldElement,T extends RealFieldElement,T extends RealFieldElement)": [
        "org.apache.commons.math3.ode.nonstiff.RungeKuttaFieldStepInterpolator#currentStateLinearCombination(T extends RealFieldElement[]...)",
        "org.apache.commons.math3.ode.nonstiff.RungeKuttaFieldStepInterpolator#previousStateLinearCombination(T extends RealFieldElement[]...)",
        "org.apache.commons.math3.ode.nonstiff.RungeKuttaFieldStepInterpolator#derivativeLinearCombination(T extends RealFieldElement[]...)",
        "org.apache.commons.math3.ode.sampling.AbstractFieldStepInterpolator#getGlobalPreviousState()",
        "org.apache.commons.math3.ode.FieldODEStateAndDerivative#FieldODEStateAndDerivative(T extends RealFieldElement,T extends RealFieldElement[],T extends RealFieldElement[])"
    ],
    "org.apache.commons.math3.linear.AbstractFieldMatrix#checkSubMatrixIndex(int,int,int,int)": [
        "org.apache.commons.math3.linear.AbstractFieldMatrix#checkColumnIndex(int)",
        "org.apache.commons.math3.linear.AbstractFieldMatrix#checkRowIndex(int)",
        "org.apache.commons.math3.exception.util.LocalizedFormats.<staticinit>()"
    ],
    "org.apache.commons.math3.stat.descriptive.DescriptiveStatistics#getValues()": ["org.apache.commons.math3.util.ResizableDoubleArray#getElements()"],
    "org.apache.commons.math3.geometry.partitioning.RegionFactory#difference(Region<S extends Space>,Region<S extends Space>)": [
        "org.apache.commons.math3.geometry.partitioning.AbstractRegion#getTree(boolean)",
        "org.apache.commons.math3.geometry.partitioning.RegionFactory.DifferenceMerger#DifferenceMerger(Region<S extends Space>,Region<S extends Space>)",
        "org.apache.commons.math3.geometry.partitioning.BSPTree#visit(BSPTreeVisitor<S extends Space>)",
        "org.apache.commons.math3.geometry.partitioning.BSPTree#merge(BSPTree<S extends Space>,LeafMerger<S extends Space>)"
    ],
    "org.apache.commons.math3.special.Erf.erf(double,double)": [
        "org.apache.commons.math3.special.Erf.<staticinit>()",
        "org.apache.commons.math3.special.Erf.erf(double,double)",
        "org.apache.commons.math3.special.Erf.erfc(double)",
        "org.apache.commons.math3.special.Erf.erf(double)"
    ],
    "org.apache.commons.math3.ode.nonstiff.LutherFieldIntegrator#getC()": [
        "org.apache.commons.math3.ode.AbstractFieldIntegrator#getField()",
        "org.apache.commons.math3.ode.nonstiff.RungeKuttaFieldIntegrator#fraction(int,int)",
        "org.apache.commons.math3.fraction.BigFractionField#getOne()",
        "org.apache.commons.math3.fraction.FractionField#getOne()",
        "org.apache.commons.math3.analysis.differentiation.SparseGradient#getField()$Field$1#getOne()",
        "org.apache.commons.math3.util.BigRealField#getZero()",
        "org.apache.commons.math3.analysis.differentiation.SparseGradient#getField()$Field$1#getZero()",
        "org.apache.commons.math3.util.Decimal64Field#getZero()",
        "org.apache.commons.math3.dfp.DfpField#getZero()",
        "org.apache.commons.math3.analysis.differentiation.SparseGradient#add(double)",
        "org.apache.commons.math3.complex.ComplexField#getOne()",
        "org.apache.commons.math3.util.BigRealField#getOne()",
        "org.apache.commons.math3.analysis.differentiation.DerivativeStructure#add(double)",
        "org.apache.commons.math3.analysis.differentiation.DerivativeStructure#getField()$Field$1#getZero()",
        "org.apache.commons.math3.fraction.FractionField#getZero()",
        "org.apache.commons.math3.complex.ComplexField#getZero()",
        "org.apache.commons.math3.dfp.DfpField#getOne()",
        "org.apache.commons.math3.fraction.BigFractionField#getZero()",
        "org.apache.commons.math3.util.MathArrays.buildArray(Field<T>,int)",
        "org.apache.commons.math3.util.Decimal64#add(double)",
        "org.apache.commons.math3.analysis.differentiation.DerivativeStructure#getField()$Field$1#getOne()",
        "org.apache.commons.math3.dfp.Dfp#add(double)",
        "org.apache.commons.math3.util.Decimal64Field#getOne()"
    ],
    "org.apache.commons.math3.fraction.BigFraction#multiply(long)": [
        "org.apache.commons.math3.fraction.BigFraction#multiply(BigInteger)",
        "org.apache.commons.math3.fraction.BigFraction.<staticinit>()"
    ],
    "org.apache.commons.math3.stat.inference.TestUtils.homoscedasticTTest(double[],double[],double)": [
        "org.apache.commons.math3.stat.inference.TTest#homoscedasticTTest(double[],double[],double)",
        "org.apache.commons.math3.stat.inference.TestUtils.<staticinit>()"
    ],
    "org.apache.commons.math3.linear.RealVector.unmodifiableRealVector(RealVector)$Iterator$1$Iterator$1#iterator()$Iterator$1#hasNext()": [
        "org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet.SubIntervalsIterator#hasNext()",
        "org.apache.commons.math3.linear.RealVector.SparseEntryIterator#hasNext()",
        "org.apache.commons.math3.linear.RealVector#iterator()$Iterator$1#hasNext()",
        "org.apache.commons.math3.userguide.sofm.ChineseRingsClassifier#createIterable()$Iterator$1$Iterator$1#iterator()$Iterator$1#hasNext()",
        "org.apache.commons.math3.userguide.sofm.ChineseRingsClassifier#createRandomIterator(long)$Iterator$1#hasNext()",
        "org.apache.commons.math3.util.IntegerSequence.Incrementor#hasNext()",
        "org.apache.commons.math3.linear.RealVector.unmodifiableRealVector(RealVector)$Iterator$1$Iterator$1#sparseIterator()$Iterator$1#hasNext()",
        "org.apache.commons.math3.geometry.spherical.oned.ArcsSet.SubArcsIterator#hasNext()",
        "org.apache.commons.math3.util.Combinations.LexicographicIterator#hasNext()",
        "org.apache.commons.math3.linear.RealVector.unmodifiableRealVector(RealVector)$Iterator$1$Iterator$1#iterator()$Iterator$1#hasNext()",
        "org.apache.commons.math3.util.Combinations.SingletonIterator#hasNext()",
        "org.apache.commons.math3.util.MultidimensionalCounter.Iterator#hasNext()"
    ],
    "org.apache.commons.math3.util.Decimal64#rint()": [
        "org.apache.commons.math3.util.FastMath.rint(double)",
        "org.apache.commons.math3.util.Decimal64#Decimal64(double)"
    ],
    "org.apache.commons.math3.linear.BlockRealMatrix#multiplyEntry(int,int,double)": [
        "org.apache.commons.math3.linear.MatrixUtils.checkMatrixIndex(AnyMatrix,int,int)",
        "org.apache.commons.math3.linear.BlockRealMatrix.<staticinit>()",
        "org.apache.commons.math3.linear.BlockRealMatrix#blockWidth(int)"
    ],
    "org.apache.commons.math3.random.SynchronizedRandomGenerator#nextLong()": [
        "org.apache.commons.math3.random.BitsStreamGenerator#nextLong()",
        "org.apache.commons.math3.random.RandomGeneratorFactory.createRandomGenerator(Random)$RandomGenerator$1#nextLong()",
        "org.apache.commons.math3.random.AbstractRandomGenerator#nextLong()",
        "org.apache.commons.math3.random.RandomAdaptor#nextLong()",
        "org.apache.commons.math3.random.SynchronizedRandomGenerator#nextLong()"
    ],
    "org.apache.commons.math3.distribution.ZipfDistribution#logProbability(int)": [
        "org.apache.commons.math3.util.FastMath.log(double)",
        "org.apache.commons.math3.distribution.ZipfDistribution#generalizedHarmonic(int,double)"
    ],
    "org.apache.commons.math3.analysis.differentiation.DerivativeStructure#sqrt()": ["org.apache.commons.math3.analysis.differentiation.DerivativeStructure#rootN(int)"],
    "org.apache.commons.math3.analysis.solvers.UnivariateSolverUtils.bracket(UnivariateFunction,double,double,double,int)": ["org.apache.commons.math3.analysis.solvers.UnivariateSolverUtils.bracket(UnivariateFunction,double,double,double,double,double,int)"],
    "org.apache.commons.math3.distribution.PoissonDistribution#PoissonDistribution(RandomGenerator,double,double,int)": [
        "org.apache.commons.math3.distribution.ExponentialDistribution#ExponentialDistribution(RandomGenerator,double,double)",
        "org.apache.commons.math3.distribution.NormalDistribution#NormalDistribution(RandomGenerator,double,double,double)",
        "org.apache.commons.math3.util.FastMath.sqrt(double)",
        "org.apache.commons.math3.distribution.AbstractIntegerDistribution#AbstractIntegerDistribution(RandomGenerator)",
        "org.apache.commons.math3.exception.util.LocalizedFormats.<staticinit>()",
        "org.apache.commons.math3.distribution.PoissonDistribution.<init>()",
        "org.apache.commons.math3.distribution.NormalDistribution.<staticinit>()",
        "org.apache.commons.math3.distribution.ExponentialDistribution.<staticinit>()"
    ],
    "org.apache.commons.math3.complex.RootsOfUnity#getReal(int)": [
        "org.apache.commons.math3.exception.OutOfRangeException#OutOfRangeException(Localizable,Number,Number,Number)",
        "org.apache.commons.math3.exception.util.LocalizedFormats.<staticinit>()"
    ],
    "org.apache.commons.math3.stat.regression.OLSMultipleLinearRegression#newSampleData(double[],int,int)": [
        "org.apache.commons.math3.linear.QRDecomposition#QRDecomposition(RealMatrix,double)",
        "org.apache.commons.math3.stat.regression.AbstractMultipleLinearRegression#newSampleData(double[],int,int)",
        "org.apache.commons.math3.stat.regression.AbstractMultipleLinearRegression#getX()"
    ],
    "org.apache.commons.math3.linear.OpenMapRealVector#getSubVector(int,int)": [
        "org.apache.commons.math3.util.OpenIntToDoubleHashMap.Iterator#value()",
        "org.apache.commons.math3.linear.OpenMapRealVector#OpenMapRealVector(int)",
        "org.apache.commons.math3.util.OpenIntToDoubleHashMap#iterator()",
        "org.apache.commons.math3.exception.util.LocalizedFormats.<staticinit>()",
        "org.apache.commons.math3.linear.OpenMapRealVector#setEntry(int,double)",
        "org.apache.commons.math3.linear.RealVector#checkIndex(int)",
        "org.apache.commons.math3.util.OpenIntToDoubleHashMap.Iterator#advance()",
        "org.apache.commons.math3.util.OpenIntToDoubleHashMap.Iterator#key()",
        "org.apache.commons.math3.util.OpenIntToDoubleHashMap.Iterator#hasNext()"
    ],
    "org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator#DormandPrince853StepInterpolator(DormandPrince853StepInterpolator)": [
        "org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator.<init>()",
        "org.apache.commons.math3.ode.nonstiff.RungeKuttaStepInterpolator#RungeKuttaStepInterpolator(RungeKuttaStepInterpolator)"
    ],
    "org.apache.commons.math3.geometry.euclidean.twod.Vector2D#getNorm()": ["org.apache.commons.math3.util.FastMath.sqrt(double)"],
    "org.apache.commons.math3.analysis.solvers.SecantSolver#SecantSolver(double,double)": [
        "org.apache.commons.math3.analysis.solvers.SecantSolver.<init>()",
        "org.apache.commons.math3.analysis.solvers.AbstractUnivariateSolver#AbstractUnivariateSolver(double,double)"
    ],
    "org.apache.commons.math3.optimization.direct.NelderMeadSimplex#NelderMeadSimplex(int,double,double,double,double,double)": [
        "org.apache.commons.math3.optimization.direct.AbstractSimplex#AbstractSimplex(int,double)",
        "org.apache.commons.math3.optimization.direct.NelderMeadSimplex.<init>()"
    ],
    "org.apache.commons.math3.distribution.AbstractRealDistribution#logDensity(double)": [
        "org.apache.commons.math3.distribution.EnumeratedRealDistribution#density(double)",
        "org.apache.commons.math3.distribution.LogNormalDistribution#density(double)",
        "org.apache.commons.math3.distribution.TriangularDistribution#density(double)",
        "org.apache.commons.math3.distribution.ParetoDistribution#density(double)",
        "org.apache.commons.math3.distribution.GammaDistribution#density(double)",
        "org.apache.commons.math3.distribution.ConstantRealDistribution#density(double)",
        "org.apache.commons.math3.distribution.ChiSquaredDistribution#density(double)",
        "org.apache.commons.math3.distribution.FDistribution#density(double)",
        "org.apache.commons.math3.distribution.LevyDistribution#density(double)",
        "org.apache.commons.math3.distribution.GumbelDistribution#density(double)",
        "org.apache.commons.math3.distribution.WeibullDistribution#density(double)",
        "org.apache.commons.math3.distribution.CauchyDistribution#density(double)",
        "org.apache.commons.math3.random.EmpiricalDistribution#density(double)",
        "org.apache.commons.math3.distribution.ExponentialDistribution#density(double)",
        "org.apache.commons.math3.distribution.LogisticDistribution#density(double)",
        "org.apache.commons.math3.distribution.TDistribution#density(double)",
        "org.apache.commons.math3.distribution.BetaDistribution#density(double)",
        "org.apache.commons.math3.distribution.UniformRealDistribution#density(double)",
        "org.apache.commons.math3.distribution.NakagamiDistribution#density(double)",
        "org.apache.commons.math3.util.FastMath.log(double)",
        "org.apache.commons.math3.distribution.LaplaceDistribution#density(double)",
        "org.apache.commons.math3.distribution.NormalDistribution#density(double)"
    ],
    "org.apache.commons.math3.linear.OpenMapRealVector#getL1Distance(RealVector)": [
        "org.apache.commons.math3.linear.OpenMapRealVector#getDimension()",
        "org.apache.commons.math3.linear.RealVector#checkVectorDimensions(int)",
        "org.apache.commons.math3.linear.OpenMapRealVector#getL1Distance(OpenMapRealVector)",
        "org.apache.commons.math3.linear.ArrayRealVector#getDimension()",
        "org.apache.commons.math3.linear.ArrayRealVector#checkVectorDimensions(int)",
        "org.apache.commons.math3.linear.RealVector.unmodifiableRealVector(RealVector)$RealVector$1#getDimension()",
        "org.apache.commons.math3.linear.RealVector#getL1Distance(RealVector)"
    ],
    "org.apache.commons.math3.util.OpenIntToDoubleHashMap#OpenIntToDoubleHashMap(OpenIntToDoubleHashMap)": ["org.apache.commons.math3.util.OpenIntToDoubleHashMap.<init>()"],
    "org.apache.commons.math3.stat.StatUtils.normalize(double[])": [
        "org.apache.commons.math3.stat.descriptive.DescriptiveStatistics#DescriptiveStatistics()",
        "org.apache.commons.math3.stat.descriptive.DescriptiveStatistics#getStandardDeviation()",
        "org.apache.commons.math3.stat.descriptive.DescriptiveStatistics#addValue(double)",
        "org.apache.commons.math3.stat.descriptive.SynchronizedDescriptiveStatistics#getStandardDeviation()",
        "org.apache.commons.math3.stat.descriptive.SynchronizedDescriptiveStatistics#addValue(double)",
        "org.apache.commons.math3.stat.descriptive.DescriptiveStatistics#getMean()"
    ],
    "org.apache.commons.math3.stat.descriptive.AggregateSummaryStatistics#getStandardDeviation()": [
        "org.apache.commons.math3.stat.descriptive.SynchronizedSummaryStatistics#getStandardDeviation()",
        "org.apache.commons.math3.stat.descriptive.SummaryStatistics#getStandardDeviation()"
    ],
    "org.apache.commons.math3.geometry.euclidean.threed.FieldRotation#FieldRotation(RotationOrder,T extends RealFieldElement,T extends RealFieldElement,T extends RealFieldElement)": [
        "org.apache.commons.math3.geometry.euclidean.threed.RotationConvention.<staticinit>()",
        "org.apache.commons.math3.geometry.euclidean.threed.FieldRotation#FieldRotation(RotationOrder,RotationConvention,T extends RealFieldElement,T extends RealFieldElement,T extends RealFieldElement)"
    ],
    "org.apache.commons.math3.ml.neuralnet.Network#Network(long,int,Neuron[],long[][])": [
        "org.apache.commons.math3.ml.neuralnet.Neuron#getIdentifier()",
        "org.apache.commons.math3.ml.neuralnet.Network.<init>()",
        "org.apache.commons.math3.ml.neuralnet.Network#addLinkToLinkSet(Set<Long>,long)",
        "org.apache.commons.math3.exception.MathIllegalStateException#MathIllegalStateException()"
    ],
    "org.apache.commons.math3.stat.correlation.SpearmansCorrelation#computeCorrelationMatrix(RealMatrix)": [
        "org.apache.commons.math3.stat.correlation.PearsonsCorrelation#computeCorrelationMatrix(RealMatrix)",
        "org.apache.commons.math3.stat.correlation.SpearmansCorrelation#rankTransform(RealMatrix)",
        "org.apache.commons.math3.stat.correlation.PearsonsCorrelation#PearsonsCorrelation()"
    ],
    "org.apache.commons.math3.distribution.ZipfDistribution#getNumericalMean()": ["org.apache.commons.math3.distribution.ZipfDistribution#calculateNumericalMean()"],
    "org.apache.commons.math3.analysis.differentiation.DerivativeStructure#linearCombination(DerivativeStructure,DerivativeStructure,DerivativeStructure,DerivativeStructure,DerivativeStructure,DerivativeStructure)": [
        "org.apache.commons.math3.analysis.differentiation.DerivativeStructure#add(DerivativeStructure)",
        "org.apache.commons.math3.analysis.differentiation.DerivativeStructure#getValue()",
        "org.apache.commons.math3.analysis.differentiation.DerivativeStructure#DerivativeStructure(int,int,double[]...)",
        "org.apache.commons.math3.analysis.differentiation.DerivativeStructure#getOrder()",
        "org.apache.commons.math3.analysis.differentiation.DerivativeStructure#multiply(DerivativeStructure)",
        "org.apache.commons.math3.util.MathArrays.linearCombination(double,double,double,double,double,double)",
        "org.apache.commons.math3.analysis.differentiation.DerivativeStructure#getAllDerivatives()",
        "org.apache.commons.math3.analysis.differentiation.DerivativeStructure#getFreeParameters()"
    ],
    "org.apache.commons.math3.optimization.direct.CMAESOptimizer.times(RealMatrix,RealMatrix)": [
        "org.apache.commons.math3.linear.DiagonalMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.Array2DRowRealMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.BlockFieldMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.SparseFieldMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.DiagonalMatrix#getEntry(int,int)",
        "org.apache.commons.math3.linear.OpenMapRealMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.OpenMapRealMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.DiagonalMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.OpenMapRealMatrix#getEntry(int,int)",
        "org.apache.commons.math3.linear.Array2DRowRealMatrix#Array2DRowRealMatrix(double[][],boolean)",
        "org.apache.commons.math3.linear.BlockRealMatrix#getEntry(int,int)",
        "org.apache.commons.math3.linear.Array2DRowFieldMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.BlockFieldMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.SparseFieldMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.BlockRealMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.Array2DRowRealMatrix#getEntry(int,int)",
        "org.apache.commons.math3.linear.Array2DRowRealMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.Array2DRowFieldMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.BlockRealMatrix#getColumnDimension()"
    ],
    "org.apache.commons.math3.util.IntegerSequence.Incrementor#hasNext()": ["org.apache.commons.math3.util.IntegerSequence.Incrementor#canIncrement(int)"],
    "org.apache.commons.math3.stat.inference.KolmogorovSmirnovTest#kolmogorovSmirnovTest(double[],double[],boolean)": [
        "org.apache.commons.math3.stat.inference.KolmogorovSmirnovTest#approximateP(double,int,int)",
        "org.apache.commons.math3.stat.inference.KolmogorovSmirnovTest.fixTies(double[],double[])",
        "org.apache.commons.math3.stat.inference.KolmogorovSmirnovTest.<staticinit>()",
        "org.apache.commons.math3.util.MathArrays.copyOf(double[])",
        "org.apache.commons.math3.stat.inference.KolmogorovSmirnovTest#exactP(double,int,int,boolean)",
        "org.apache.commons.math3.stat.inference.KolmogorovSmirnovTest.hasTies(double[],double[])",
        "org.apache.commons.math3.stat.inference.KolmogorovSmirnovTest#kolmogorovSmirnovStatistic(double[],double[])"
    ],
    "org.apache.commons.math3.optim.linear.SimplexTableau#equals(Object)": [
        "org.apache.commons.math3.optim.linear.LinearObjectiveFunction#equals(Object)",
        "org.apache.commons.math3.linear.AbstractRealMatrix#equals(Object)"
    ],
    "org.apache.commons.math3.util.Pair#toString()": [
        "org.apache.commons.math3.util.Pair#getValue()",
        "org.apache.commons.math3.util.Pair#getKey()",
        "org.apache.commons.math3.optim.PointVectorValuePair#getValue()",
        "org.apache.commons.math3.optimization.PointVectorValuePair#getValue()"
    ],
    "org.apache.commons.math3.analysis.differentiation.DSCompiler#exp(double[],int,double[],int)": [
        "org.apache.commons.math3.util.FastMath.exp(double)",
        "org.apache.commons.math3.analysis.differentiation.DSCompiler#compose(double[],int,double[],double[],int)"
    ],
    "org.apache.commons.math3.geometry.euclidean.twod.Vector2D.distanceSq(Vector2D,Vector2D)": ["org.apache.commons.math3.geometry.euclidean.twod.Vector2D#distanceSq(Vector<Euclidean2D>)"],
    "org.apache.commons.math3.ml.neuralnet.Network#writeReplace()": [
        "org.apache.commons.math3.ml.neuralnet.Neuron#getIdentifier()",
        "org.apache.commons.math3.ml.neuralnet.Network#getNeighbours(Neuron)",
        "org.apache.commons.math3.ml.neuralnet.Network.SerializationProxy#SerializationProxy(long,int,Neuron[],long[][])"
    ],
    "org.apache.commons.math3.optim.linear.SimplexSolver#solvePhase1(SimplexTableau)": [
        "org.apache.commons.math3.optim.linear.SimplexSolver#doIteration(SimplexTableau)",
        "org.apache.commons.math3.util.Precision.equals(double,double,double)",
        "org.apache.commons.math3.optim.linear.SimplexTableau#getNumArtificialVariables()",
        "org.apache.commons.math3.optim.linear.NoFeasibleSolutionException#NoFeasibleSolutionException()",
        "org.apache.commons.math3.optim.linear.SimplexTableau#getRhsOffset()",
        "org.apache.commons.math3.optim.linear.SimplexTableau#isOptimal()",
        "org.apache.commons.math3.optim.linear.SimplexTableau#getEntry(int,int)"
    ],
    "org.apache.commons.math3.random.RandomDataGenerator#nextUniform(double,double)": ["org.apache.commons.math3.random.RandomDataGenerator#nextUniform(double,double,boolean)"],
    "org.apache.commons.math3.analysis.interpolation.BicubicSplineFunction#BicubicSplineFunction(double[],boolean)$BivariateFunction$3#value(double,double)": ["org.apache.commons.math3.analysis.interpolation.BicubicSplineFunction#apply(double[],double[],double[][])"],
    "org.apache.commons.math3.stat.descriptive.DescriptiveStatistics#getSum()": [
        "org.apache.commons.math3.stat.descriptive.DescriptiveStatistics#apply(UnivariateStatistic)",
        "org.apache.commons.math3.stat.descriptive.SynchronizedDescriptiveStatistics#apply(UnivariateStatistic)"
    ],
    "org.apache.commons.math3.stat.inference.ChiSquareTest#chiSquareTestDataSetsComparison(long[],long[])": [
        "org.apache.commons.math3.stat.inference.ChiSquareTest#chiSquareDataSetsComparison(long[],long[])",
        "org.apache.commons.math3.distribution.ChiSquaredDistribution#ChiSquaredDistribution(double,double)",
        "org.apache.commons.math3.distribution.ChiSquaredDistribution#cumulativeProbability(double)"
    ],
    "org.apache.commons.math3.linear.SymmLQ.State.<staticinit>()": [
        "org.apache.commons.math3.util.FastMath.ulp(double)",
        "org.apache.commons.math3.util.FastMath.cbrt(double)"
    ],
    "org.apache.commons.math3.linear.SymmLQ#SymmLQ(IterationManager,double,boolean)": [
        "org.apache.commons.math3.linear.SymmLQ.<init>()",
        "org.apache.commons.math3.linear.PreconditionedIterativeLinearSolver#PreconditionedIterativeLinearSolver(IterationManager)"
    ],
    "org.apache.commons.math3.dfp.Dfp#pow(double)": [
        "org.apache.commons.math3.dfp.DfpDec#newInstance(double)",
        "org.apache.commons.math3.dfp.DfpMath.pow(Dfp,Dfp)",
        "org.apache.commons.math3.dfp.Dfp#newInstance(double)"
    ],
    "org.apache.commons.math3.ode.nonstiff.AdamsBashforthIntegrator#AdamsBashforthIntegrator(int,double,double,double[],double[])": [
        "org.apache.commons.math3.ode.nonstiff.AdamsIntegrator#AdamsIntegrator(String,int,int,double,double,double[],double[])",
        "org.apache.commons.math3.ode.nonstiff.AdamsBashforthIntegrator.<init>()",
        "org.apache.commons.math3.ode.nonstiff.AdamsBashforthIntegrator.<staticinit>()"
    ],
    "org.apache.commons.math3.ode.nonstiff.RungeKuttaFieldStepInterpolator#previousStateLinearCombination(T extends RealFieldElement[]...)": [
        "org.apache.commons.math3.ode.sampling.AbstractFieldStepInterpolator#getPreviousState()",
        "org.apache.commons.math3.ode.FieldODEState#getState()",
        "org.apache.commons.math3.ode.nonstiff.RungeKuttaFieldStepInterpolator#combine(T extends RealFieldElement[],T extends RealFieldElement[]...)"
    ],
    "org.apache.commons.math3.linear.Array2DRowFieldMatrix#operate(T extends FieldElement[])": [
        "org.apache.commons.math3.util.BigRealField#getZero()",
        "org.apache.commons.math3.analysis.differentiation.SparseGradient#getField()$Field$1#getZero()",
        "org.apache.commons.math3.util.Decimal64Field#getZero()",
        "org.apache.commons.math3.dfp.DfpField#getZero()",
        "org.apache.commons.math3.linear.Array2DRowFieldMatrix#getColumnDimension()",
        "org.apache.commons.math3.exception.DimensionMismatchException#DimensionMismatchException(int,int)",
        "org.apache.commons.math3.linear.AbstractFieldMatrix#getField()",
        "org.apache.commons.math3.analysis.differentiation.DerivativeStructure#getField()$Field$1#getZero()",
        "org.apache.commons.math3.fraction.FractionField#getZero()",
        "org.apache.commons.math3.linear.Array2DRowFieldMatrix#getRowDimension()",
        "org.apache.commons.math3.complex.ComplexField#getZero()",
        "org.apache.commons.math3.fraction.BigFractionField#getZero()",
        "org.apache.commons.math3.util.MathArrays.buildArray(Field<T>,int)"
    ],
    "org.apache.commons.math3.geometry.euclidean.threed.FieldRotation#getAxis()": [
        "org.apache.commons.math3.geometry.euclidean.threed.RotationConvention.<staticinit>()",
        "org.apache.commons.math3.geometry.euclidean.threed.FieldRotation#getAxis(RotationConvention)"
    ],
    "org.apache.commons.math3.linear.ArrayRealVector#outerProduct(RealVector)": [
        "org.apache.commons.math3.linear.OpenMapRealVector#getDimension()",
        "org.apache.commons.math3.linear.MatrixUtils.createRealMatrix(int,int)",
        "org.apache.commons.math3.linear.Array2DRowRealMatrix#setEntry(int,int,double)",
        "org.apache.commons.math3.linear.ArrayRealVector#getDimension()",
        "org.apache.commons.math3.linear.BlockRealMatrix#setEntry(int,int,double)",
        "org.apache.commons.math3.linear.OpenMapRealMatrix#setEntry(int,int,double)",
        "org.apache.commons.math3.linear.ArrayRealVector#getEntry(int)",
        "org.apache.commons.math3.linear.RealVector.unmodifiableRealVector(RealVector)$RealVector$1#getDimension()",
        "org.apache.commons.math3.linear.OpenMapRealVector#getEntry(int)",
        "org.apache.commons.math3.linear.DiagonalMatrix#setEntry(int,int,double)",
        "org.apache.commons.math3.linear.RealVector.unmodifiableRealVector(RealVector)$RealVector$1#getEntry(int)"
    ],
    "org.apache.commons.math3.linear.DiagonalMatrix#multiply(RealMatrix)": [
        "org.apache.commons.math3.linear.DiagonalMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.Array2DRowRealMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.BlockFieldMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.MatrixUtils.checkMultiplicationCompatible(AnyMatrix,AnyMatrix)",
        "org.apache.commons.math3.linear.DiagonalMatrix#multiply(DiagonalMatrix)",
        "org.apache.commons.math3.linear.SparseFieldMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.DiagonalMatrix#getEntry(int,int)",
        "org.apache.commons.math3.linear.OpenMapRealMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.OpenMapRealMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.DiagonalMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.OpenMapRealMatrix#getEntry(int,int)",
        "org.apache.commons.math3.linear.Array2DRowFieldMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.BlockRealMatrix#getEntry(int,int)",
        "org.apache.commons.math3.linear.Array2DRowRealMatrix#Array2DRowRealMatrix(double[][],boolean)",
        "org.apache.commons.math3.linear.SparseFieldMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.BlockFieldMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.BlockRealMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.Array2DRowRealMatrix#getEntry(int,int)",
        "org.apache.commons.math3.linear.Array2DRowRealMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.Array2DRowFieldMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.BlockRealMatrix#getColumnDimension()"
    ],
    "org.apache.commons.math3.util.OpenIntToDoubleHashMap#OpenIntToDoubleHashMap()": [
        "org.apache.commons.math3.util.OpenIntToDoubleHashMap.<staticinit>()",
        "org.apache.commons.math3.util.OpenIntToDoubleHashMap#OpenIntToDoubleHashMap(int,double)"
    ],
    "org.apache.commons.math3.linear.MatrixUtils.checkMultiplicationCompatible(AnyMatrix,AnyMatrix)": [
        "org.apache.commons.math3.linear.DiagonalMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.Array2DRowRealMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.BlockFieldMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.SparseFieldMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.OpenMapRealMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.OpenMapRealMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.DiagonalMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.Array2DRowFieldMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.BlockFieldMatrix#getRowDimension()",
        "org.apache.commons.math3.exception.DimensionMismatchException#DimensionMismatchException(int,int)",
        "org.apache.commons.math3.linear.SparseFieldMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.BlockRealMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.Array2DRowRealMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.Array2DRowFieldMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.BlockRealMatrix#getColumnDimension()"
    ],
    "org.apache.commons.math3.stat.inference.TTest#homoscedasticTTest(StatisticalSummary,StatisticalSummary)": [
        "org.apache.commons.math3.stat.descriptive.SummaryStatistics#getVariance()",
        "org.apache.commons.math3.stat.descriptive.StatisticalSummaryValues#getVariance()",
        "org.apache.commons.math3.stat.descriptive.DescriptiveStatistics#getN()",
        "org.apache.commons.math3.stat.descriptive.AggregateSummaryStatistics#getMean()",
        "org.apache.commons.math3.stat.descriptive.SynchronizedSummaryStatistics#getVariance()",
        "org.apache.commons.math3.stat.descriptive.SummaryStatistics#getMean()",
        "org.apache.commons.math3.stat.descriptive.StatisticalSummaryValues#getN()",
        "org.apache.commons.math3.stat.descriptive.SummaryStatistics#getN()",
        "org.apache.commons.math3.stat.descriptive.StatisticalSummaryValues#getMean()",
        "org.apache.commons.math3.stat.descriptive.AggregateSummaryStatistics#getN()",
        "org.apache.commons.math3.stat.inference.TTest#checkSampleData(StatisticalSummary)",
        "org.apache.commons.math3.stat.descriptive.SynchronizedSummaryStatistics#getN()",
        "org.apache.commons.math3.stat.descriptive.AggregateSummaryStatistics#getVariance()",
        "org.apache.commons.math3.stat.descriptive.DescriptiveStatistics#getMean()",
        "org.apache.commons.math3.stat.inference.TTest#homoscedasticTTest(double,double,double,double,double,double)",
        "org.apache.commons.math3.stat.descriptive.SynchronizedDescriptiveStatistics#getN()",
        "org.apache.commons.math3.stat.descriptive.DescriptiveStatistics#getVariance()",
        "org.apache.commons.math3.stat.descriptive.SynchronizedSummaryStatistics#getMean()"
    ],
    "org.apache.commons.math3.util.OpenIntToFieldHashMap#OpenIntToFieldHashMap(Field<T extends FieldElement>,int,T extends FieldElement)": [
        "org.apache.commons.math3.util.OpenIntToFieldHashMap#buildArray(int)",
        "org.apache.commons.math3.util.OpenIntToFieldHashMap.computeCapacity(int)",
        "org.apache.commons.math3.util.OpenIntToFieldHashMap.<init>()"
    ],
    "org.apache.commons.math3.dfp.DfpDec#newInstance(String)": [
        "org.apache.commons.math3.dfp.DfpDec#DfpDec(DfpField,String)",
        "org.apache.commons.math3.dfp.Dfp#getField()"
    ],
    "org.apache.commons.math3.ode.nonstiff.GraggBulirschStoerStepInterpolator#GraggBulirschStoerStepInterpolator()": [
        "org.apache.commons.math3.ode.nonstiff.GraggBulirschStoerStepInterpolator#resetTables(int)",
        "org.apache.commons.math3.ode.sampling.AbstractStepInterpolator#AbstractStepInterpolator()",
        "org.apache.commons.math3.ode.nonstiff.GraggBulirschStoerStepInterpolator.<init>()"
    ],
    "org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D#subtract(T extends RealFieldElement,Vector3D)": [
        "org.apache.commons.math3.geometry.euclidean.threed.Vector3D#getX()",
        "org.apache.commons.math3.geometry.euclidean.threed.Vector3D#getZ()",
        "org.apache.commons.math3.geometry.euclidean.threed.Vector3D#getY()",
        "org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D#FieldVector3D(T extends RealFieldElement,T extends RealFieldElement,T extends RealFieldElement)"
    ],
    "org.apache.commons.math3.ml.neuralnet.MapUtils#MapUtils()": ["org.apache.commons.math3.ml.neuralnet.MapUtils.<init>()"],
    "org.apache.commons.math3.util.FastMathCalc.splitAdd(double[],double[],double[])": ["org.apache.commons.math3.util.FastMathCalc.resplit(double[])"],
    "org.apache.commons.math3.distribution.ExponentialDistribution#cumulativeProbability(double)": ["org.apache.commons.math3.util.FastMath.exp(double)"],
    "org.apache.commons.math3.ml.clustering.DBSCANClusterer#cluster(Collection<T extends Clusterable>)": [
        "org.apache.commons.math3.util.MathUtils.checkNotNull(Object)",
        "org.apache.commons.math3.ml.clustering.DBSCANClusterer.PointStatus.<staticinit>()",
        "org.apache.commons.math3.ml.clustering.DBSCANClusterer#getNeighbors(T extends Clusterable,Collection<T extends Clusterable>)",
        "org.apache.commons.math3.ml.clustering.Cluster#Cluster()",
        "org.apache.commons.math3.ml.clustering.DBSCANClusterer#expandCluster(Cluster<T extends Clusterable>,T extends Clusterable,List<T extends Clusterable>,Collection<T extends Clusterable>,Map<Clusterable, PointStatus>)"
    ],
    "org.apache.commons.math3.linear.SingularValueDecomposition#getCovariance(double)": [
        "org.apache.commons.math3.linear.AbstractRealMatrix#walkInOptimizedOrder(RealMatrixPreservingVisitor,int,int,int,int)",
        "org.apache.commons.math3.linear.AbstractRealMatrix#multiply(RealMatrix)",
        "org.apache.commons.math3.linear.OpenMapRealMatrix#multiply(RealMatrix)",
        "org.apache.commons.math3.linear.AbstractRealMatrix#transpose()",
        "org.apache.commons.math3.exception.util.LocalizedFormats.<staticinit>()",
        "org.apache.commons.math3.linear.BlockRealMatrix#transpose()",
        "org.apache.commons.math3.linear.SingularValueDecomposition#getCovariance(double)$DefaultRealMatrixPreservingVisitor$1.<init>()",
        "org.apache.commons.math3.linear.SingularValueDecomposition#getVT()",
        "org.apache.commons.math3.linear.BlockRealMatrix#walkInOptimizedOrder(RealMatrixPreservingVisitor,int,int,int,int)",
        "org.apache.commons.math3.linear.DiagonalMatrix#multiply(RealMatrix)",
        "org.apache.commons.math3.linear.BlockRealMatrix#multiply(RealMatrix)",
        "org.apache.commons.math3.linear.Array2DRowRealMatrix#Array2DRowRealMatrix(double[][],boolean)"
    ],
    "org.apache.commons.math3.random.EmpiricalDistribution#reseedRandomGenerator(long)": ["org.apache.commons.math3.random.RandomDataGenerator#reSeed(long)"],
    "org.apache.commons.math3.linear.BiDiagonalTransformer#getU()": ["org.apache.commons.math3.linear.MatrixUtils.createRealMatrix(double[][])"],
    "org.apache.commons.math3.stat.descriptive.moment.Variance#evaluate(double[],double[],double)": ["org.apache.commons.math3.stat.descriptive.moment.Variance#evaluate(double[],double[],double,int,int)"],
    "org.apache.commons.math3.fitting.leastsquares.AbstractEvaluation#AbstractEvaluation(int)": ["org.apache.commons.math3.fitting.leastsquares.AbstractEvaluation.<init>()"],
    "org.apache.commons.math3.optim.linear.NonNegativeConstraint#NonNegativeConstraint(boolean)": ["org.apache.commons.math3.optim.linear.NonNegativeConstraint.<init>()"],
    "org.apache.commons.math3.geometry.euclidean.threed.Vector3D#orthogonal()": [
        "org.apache.commons.math3.geometry.euclidean.threed.Vector3D#getNorm()",
        "org.apache.commons.math3.geometry.euclidean.threed.Vector3D#Vector3D(double,double,double)",
        "org.apache.commons.math3.util.FastMath.abs(double)",
        "org.apache.commons.math3.util.FastMath.sqrt(double)",
        "org.apache.commons.math3.exception.util.LocalizedFormats.<staticinit>()"
    ],
    "org.apache.commons.math3.optim.nonlinear.scalar.gradient.NonLinearConjugateGradientOptimizer#doOptimize()": [
        "org.apache.commons.math3.optim.nonlinear.scalar.GoalType.<staticinit>()",
        "org.apache.commons.math3.optim.nonlinear.scalar.MultivariateOptimizer#computeObjectiveValue(double[])",
        "org.apache.commons.math3.exception.MathInternalError#MathInternalError()",
        "org.apache.commons.math3.optim.BaseOptimizer#getConvergenceChecker()",
        "org.apache.commons.math3.optim.nonlinear.scalar.LineSearch#search(double[],double[])",
        "org.apache.commons.math3.optim.nonlinear.scalar.MultivariateOptimizer#getGoalType()",
        "org.apache.commons.math3.optim.BaseOptimizer#getIterations()",
        "org.apache.commons.math3.optim.nonlinear.scalar.gradient.NonLinearConjugateGradientOptimizer.Formula.<staticinit>()",
        "org.apache.commons.math3.optim.nonlinear.scalar.GradientMultivariateOptimizer#computeObjectiveGradient(double[])",
        "org.apache.commons.math3.optim.BaseMultivariateOptimizer#getStartPoint()",
        "org.apache.commons.math3.optim.nonlinear.scalar.gradient.NonLinearConjugateGradientOptimizer.IdentityPreconditioner#precondition(double[],double[])",
        "org.apache.commons.math3.optim.PointValuePair#PointValuePair(double[],double)",
        "org.apache.commons.math3.optim.BaseOptimizer#incrementIterationCount()",
        "org.apache.commons.math3.optim.univariate.UnivariatePointValuePair#getPoint()"
    ],
    "org.apache.commons.math3.exception.NoDataException#NoDataException()": [
        "org.apache.commons.math3.exception.NoDataException#NoDataException(Localizable)",
        "org.apache.commons.math3.exception.util.LocalizedFormats.<staticinit>()"
    ],
    "org.apache.commons.math3.stat.descriptive.SynchronizedMultivariateSummaryStatistics#getSum()": ["org.apache.commons.math3.stat.descriptive.MultivariateSummaryStatistics#getSum()"],
    "org.apache.commons.math3.linear.RealVector#getL1Distance(RealVector)": [
        "org.apache.commons.math3.linear.RealVector.Entry#getValue()",
        "org.apache.commons.math3.linear.RealVector#iterator()",
        "org.apache.commons.math3.linear.RealVector#iterator()$Iterator$1#hasNext()",
        "org.apache.commons.math3.linear.RealVector.unmodifiableRealVector(RealVector)$RealVector$1#iterator()",
        "org.apache.commons.math3.linear.RealVector.unmodifiableRealVector(RealVector)$Iterator$1$Iterator$1#sparseIterator()$Iterator$1#hasNext()",
        "org.apache.commons.math3.geometry.spherical.oned.ArcsSet.SubArcsIterator#hasNext()",
        "org.apache.commons.math3.util.Combinations.LexicographicIterator#hasNext()",
        "org.apache.commons.math3.linear.OpenMapRealVector.OpenMapEntry#getValue()",
        "org.apache.commons.math3.linear.RealVector.unmodifiableRealVector(RealVector).UnmodifiableEntry.UnmodifiableEntry#getValue()",
        "org.apache.commons.math3.linear.RealVector.SparseEntryIterator#hasNext()",
        "org.apache.commons.math3.util.FastMath.abs(double)",
        "org.apache.commons.math3.userguide.sofm.ChineseRingsClassifier#createIterable()$Iterator$1$Iterator$1#iterator()$Iterator$1#hasNext()",
        "org.apache.commons.math3.linear.RealVector.unmodifiableRealVector(RealVector)$Iterator$1$Iterator$1#sparseIterator()$Iterator$1#next()",
        "org.apache.commons.math3.util.MultidimensionalCounter.Iterator#hasNext()",
        "org.apache.commons.math3.linear.RealVector.unmodifiableRealVector(RealVector)$Iterator$1$Iterator$1#iterator()$Iterator$1#next()",
        "org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet.SubIntervalsIterator#hasNext()",
        "org.apache.commons.math3.linear.OpenMapRealVector.OpenMapEntry#getIndex()",
        "org.apache.commons.math3.linear.ArrayRealVector#checkVectorDimensions(RealVector)",
        "org.apache.commons.math3.userguide.sofm.ChineseRingsClassifier#createRandomIterator(long)$Iterator$1#hasNext()",
        "org.apache.commons.math3.util.IntegerSequence.Incrementor#hasNext()",
        "org.apache.commons.math3.linear.RealVector.Entry#getIndex()",
        "org.apache.commons.math3.linear.RealVector#iterator()$Iterator$1#next()",
        "org.apache.commons.math3.linear.ArrayRealVector#getEntry(int)",
        "org.apache.commons.math3.linear.RealVector#checkVectorDimensions(RealVector)",
        "org.apache.commons.math3.linear.RealVector.unmodifiableRealVector(RealVector)$Iterator$1$Iterator$1#iterator()$Iterator$1#hasNext()",
        "org.apache.commons.math3.util.Combinations.SingletonIterator#hasNext()",
        "org.apache.commons.math3.linear.RealVector.SparseEntryIterator#next()",
        "org.apache.commons.math3.linear.OpenMapRealVector#getEntry(int)",
        "org.apache.commons.math3.linear.RealVector.unmodifiableRealVector(RealVector)$RealVector$1#getEntry(int)"
    ],
    "org.apache.commons.math3.linear.AbstractRealMatrix#walkInOptimizedOrder(RealMatrixChangingVisitor,int,int,int,int)": [
        "org.apache.commons.math3.linear.BlockRealMatrix#walkInRowOrder(RealMatrixChangingVisitor,int,int,int,int)",
        "org.apache.commons.math3.linear.AbstractRealMatrix#walkInRowOrder(RealMatrixChangingVisitor,int,int,int,int)",
        "org.apache.commons.math3.linear.Array2DRowRealMatrix#walkInRowOrder(RealMatrixChangingVisitor,int,int,int,int)"
    ],
    "org.apache.commons.math3.stat.descriptive.summary.SumOfLogs.copy(SumOfLogs,SumOfLogs)": [
        "org.apache.commons.math3.util.MathUtils.checkNotNull(Object)",
        "org.apache.commons.math3.stat.descriptive.AbstractUnivariateStatistic#setData(double[])",
        "org.apache.commons.math3.stat.descriptive.rank.Percentile#setData(double[])",
        "org.apache.commons.math3.stat.descriptive.AbstractUnivariateStatistic#getDataRef()"
    ],
    "org.apache.commons.math3.ode.nonstiff.HighamHall54FieldIntegrator#getB()": [
        "org.apache.commons.math3.ode.AbstractFieldIntegrator#getField()",
        "org.apache.commons.math3.util.BigRealField#getZero()",
        "org.apache.commons.math3.analysis.differentiation.SparseGradient#getField()$Field$1#getZero()",
        "org.apache.commons.math3.analysis.differentiation.DerivativeStructure#getField()$Field$1#getZero()",
        "org.apache.commons.math3.fraction.FractionField#getZero()",
        "org.apache.commons.math3.util.Decimal64Field#getZero()",
        "org.apache.commons.math3.ode.nonstiff.EmbeddedRungeKuttaFieldIntegrator#fraction(int,int)",
        "org.apache.commons.math3.dfp.DfpField#getZero()",
        "org.apache.commons.math3.complex.ComplexField#getZero()",
        "org.apache.commons.math3.fraction.BigFractionField#getZero()",
        "org.apache.commons.math3.util.MathArrays.buildArray(Field<T>,int)"
    ],
    "org.apache.commons.math3.stat.regression.AbstractMultipleLinearRegression#validateCovarianceData(double[][],double[][])": [
        "org.apache.commons.math3.exception.DimensionMismatchException#DimensionMismatchException(int,int)",
        "org.apache.commons.math3.linear.NonSquareMatrixException#NonSquareMatrixException(int,int)"
    ],
    "org.apache.commons.math3.stat.regression.MillerUpdatingRegression#regress()": ["org.apache.commons.math3.stat.regression.MillerUpdatingRegression#regress(int)"],
    "org.apache.commons.math3.util.MathUtils.normalizeAngle(double,double)": [
        "org.apache.commons.math3.util.FastMath.<staticinit>()",
        "org.apache.commons.math3.util.FastMath.floor(double)",
        "org.apache.commons.math3.util.MathUtils.<staticinit>()"
    ],
    "org.apache.commons.math3.complex.Quaternion#getVectorPart()": [
        "org.apache.commons.math3.complex.Quaternion#getQ1()",
        "org.apache.commons.math3.complex.Quaternion#getQ3()",
        "org.apache.commons.math3.complex.Quaternion#getQ2()"
    ],
    "org.apache.commons.math3.linear.ConjugateGradient#ConjugateGradient(int,double,boolean)": [
        "org.apache.commons.math3.linear.PreconditionedIterativeLinearSolver#PreconditionedIterativeLinearSolver(int)",
        "org.apache.commons.math3.linear.ConjugateGradient.<init>()"
    ],
    "org.apache.commons.math3.fitting.PolynomialFitter#PolynomialFitter(MultivariateVectorOptimizer)": [
        "org.apache.commons.math3.fitting.PolynomialFitter.<init>()",
        "org.apache.commons.math3.fitting.CurveFitter#CurveFitter(MultivariateVectorOptimizer)"
    ],
    "org.apache.commons.math3.ml.clustering.FuzzyKMeansClusterer#cluster(Collection<T extends Clusterable>)": [
        "org.apache.commons.math3.ml.clustering.FuzzyKMeansClusterer#updateMembershipMatrix()",
        "org.apache.commons.math3.util.MathUtils.checkNotNull(Object)",
        "org.apache.commons.math3.ml.clustering.CentroidCluster#CentroidCluster(Clusterable)",
        "org.apache.commons.math3.ml.clustering.FuzzyKMeansClusterer#calculateMaxMembershipChange(double[][])",
        "org.apache.commons.math3.ml.clustering.FuzzyKMeansClusterer#initializeMembershipMatrix()",
        "org.apache.commons.math3.ml.clustering.FuzzyKMeansClusterer#saveMembershipMatrix(double[][])",
        "org.apache.commons.math3.ml.clustering.DoublePoint#DoublePoint(double[])",
        "org.apache.commons.math3.ml.clustering.FuzzyKMeansClusterer#updateClusterCenters()"
    ],
    "org.apache.commons.math3.stat.Frequency#getCount(long)": ["org.apache.commons.math3.stat.Frequency#getCount(Comparable<?>)"],
    "org.apache.commons.math3.random.BitsStreamGenerator#nextBytes(byte[])": ["org.apache.commons.math3.random.BitsStreamGenerator#nextBytesFill(byte[],int,int)"],
    "org.apache.commons.math3.transform.FastFourierTransformer.MultiDimensionalComplexMatrix#clone(MultiDimensionalComplexMatrix)": [
        "org.apache.commons.math3.transform.FastFourierTransformer.MultiDimensionalComplexMatrix#set(Complex,int[]...)",
        "org.apache.commons.math3.transform.FastFourierTransformer.MultiDimensionalComplexMatrix#get(int[]...)"
    ],
    "org.apache.commons.math3.optimization.fitting.HarmonicFitter.ParameterGuesser#ParameterGuesser(WeightedObservedPoint[])": [
        "org.apache.commons.math3.optimization.fitting.HarmonicFitter.ParameterGuesser.<init>()",
        "org.apache.commons.math3.optimization.fitting.HarmonicFitter.ParameterGuesser#guessPhi(WeightedObservedPoint[])",
        "org.apache.commons.math3.exception.util.LocalizedFormats.<staticinit>()",
        "org.apache.commons.math3.optimization.fitting.HarmonicFitter.ParameterGuesser#guessAOmega(WeightedObservedPoint[])",
        "org.apache.commons.math3.optimization.fitting.HarmonicFitter.ParameterGuesser#sortObservations(WeightedObservedPoint[])"
    ],
    "org.apache.commons.math3.exception.MathIllegalStateException#getMessage()": ["org.apache.commons.math3.exception.util.ExceptionContext#getMessage()"],
    "org.apache.commons.math3.linear.SparseFieldMatrix#SparseFieldMatrix(SparseFieldMatrix<T extends FieldElement>)": [
        "org.apache.commons.math3.linear.SparseFieldMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.AbstractFieldMatrix#AbstractFieldMatrix(Field<T extends FieldElement>,int,int)",
        "org.apache.commons.math3.linear.SparseFieldMatrix.<init>()",
        "org.apache.commons.math3.linear.AbstractFieldMatrix#getField()",
        "org.apache.commons.math3.util.OpenIntToFieldHashMap#OpenIntToFieldHashMap(OpenIntToFieldHashMap<T extends FieldElement>)",
        "org.apache.commons.math3.linear.SparseFieldMatrix#getRowDimension()"
    ],
    "org.apache.commons.math3.distribution.LogNormalDistribution#LogNormalDistribution(double,double,double)": [
        "org.apache.commons.math3.distribution.LogNormalDistribution#LogNormalDistribution(RandomGenerator,double,double,double)",
        "org.apache.commons.math3.random.Well19937c#Well19937c()"
    ],
    "org.apache.commons.math3.ode.nonstiff.LutherFieldIntegrator#LutherFieldIntegrator(Field<T extends RealFieldElement>,T extends RealFieldElement)": [
        "org.apache.commons.math3.ode.nonstiff.LutherFieldIntegrator.<init>()",
        "org.apache.commons.math3.ode.nonstiff.RungeKuttaFieldIntegrator#RungeKuttaFieldIntegrator(Field<T extends RealFieldElement>,String,T extends RealFieldElement)"
    ],
    "org.apache.commons.math3.linear.AbstractRealMatrix#isSquare()": [
        "org.apache.commons.math3.linear.DiagonalMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.Array2DRowRealMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.BlockRealMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.Array2DRowRealMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.OpenMapRealMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.OpenMapRealMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.DiagonalMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.BlockRealMatrix#getColumnDimension()"
    ],
    "org.apache.commons.math3.special.BesselJ.rjBesl(double,double,int)": [
        "org.apache.commons.math3.util.FastMath.pow(double,double)",
        "org.apache.commons.math3.util.FastMath.abs(double)",
        "org.apache.commons.math3.util.FastMath.max(double,double)",
        "org.apache.commons.math3.util.FastMath.sqrt(double)",
        "org.apache.commons.math3.util.MathArrays.copyOf(double[],int)",
        "org.apache.commons.math3.util.FastMath.sin(double)",
        "org.apache.commons.math3.special.BesselJ.<staticinit>()",
        "org.apache.commons.math3.special.BesselJ.BesselJResult#BesselJResult(double[],int)",
        "org.apache.commons.math3.util.FastMath.min(int,int)",
        "org.apache.commons.math3.util.FastMath.cos(double)",
        "org.apache.commons.math3.special.Gamma.gamma(double)"
    ],
    "org.apache.commons.math3.util.BigReal#BigReal(BigInteger)": ["org.apache.commons.math3.util.BigReal.<init>()"],
    "org.apache.commons.math3.geometry.euclidean.twod.Line#project(Point<Euclidean2D>)": [
        "org.apache.commons.math3.geometry.euclidean.twod.Line#toSpace(Vector<Euclidean1D>)",
        "org.apache.commons.math3.geometry.euclidean.twod.Line#toSubSpace(Point<Euclidean2D>)"
    ],
    "org.apache.commons.math3.genetics.OrderedCrossover#crossover(Chromosome,Chromosome)": [
        "org.apache.commons.math3.genetics.OrderedCrossover#mate(AbstractListChromosome<T>,AbstractListChromosome<T>)",
        "org.apache.commons.math3.exception.util.LocalizedFormats.<staticinit>()"
    ],
    "org.apache.commons.math3.stat.descriptive.AggregateSummaryStatistics#getSum()": [
        "org.apache.commons.math3.stat.descriptive.SummaryStatistics#getSum()",
        "org.apache.commons.math3.stat.descriptive.SynchronizedSummaryStatistics#getSum()"
    ],
    "org.apache.commons.math3.linear.Array2DRowFieldMatrix#walkInColumnOrder(FieldMatrixChangingVisitor<T extends FieldElement>)": [
        "org.apache.commons.math3.linear.Array2DRowFieldMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.AbstractFieldMatrix#getSubMatrix(int[],int[])$DefaultFieldMatrixChangingVisitor$1#visit(int,int,T extends FieldElement)",
        "org.apache.commons.math3.linear.DefaultFieldMatrixChangingVisitor#start(int,int,int,int,int,int)",
        "org.apache.commons.math3.linear.DefaultFieldMatrixChangingVisitor#visit(int,int,T extends FieldElement)",
        "org.apache.commons.math3.linear.DefaultFieldMatrixChangingVisitor#end()",
        "org.apache.commons.math3.linear.Array2DRowFieldMatrix#getColumnDimension()"
    ],
    "org.apache.commons.math3.linear.MatrixUtils.inverse(RealMatrix,double)": [
        "org.apache.commons.math3.linear.DiagonalMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.Array2DRowRealMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.BlockFieldMatrix#getColumnDimension()",
        "org.apache.commons.math3.util.MathUtils.checkNotNull(Object)",
        "org.apache.commons.math3.linear.CholeskyDecomposition.Solver#getInverse()",
        "org.apache.commons.math3.linear.EigenDecomposition.Solver#getInverse()",
        "org.apache.commons.math3.linear.OpenMapRealMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.DiagonalMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.SingularValueDecomposition.Solver#getInverse()",
        "org.apache.commons.math3.linear.BlockFieldMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.QRDecomposition#QRDecomposition(RealMatrix,double)",
        "org.apache.commons.math3.linear.AbstractRealMatrix#isSquare()",
        "org.apache.commons.math3.linear.RRQRDecomposition.Solver#getInverse()",
        "org.apache.commons.math3.linear.BlockRealMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.NonSquareMatrixException#NonSquareMatrixException(int,int)",
        "org.apache.commons.math3.linear.AbstractFieldMatrix#isSquare()",
        "org.apache.commons.math3.linear.DiagonalMatrix#inverse(double)",
        "org.apache.commons.math3.linear.LUDecomposition.Solver#getInverse()",
        "org.apache.commons.math3.linear.SparseFieldMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.QRDecomposition#getSolver()",
        "org.apache.commons.math3.linear.OpenMapRealMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.Array2DRowFieldMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.SparseFieldMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.Array2DRowRealMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.QRDecomposition.Solver#getInverse()",
        "org.apache.commons.math3.linear.Array2DRowFieldMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.BlockRealMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.RRQRDecomposition#getSolver()"
    ],
    "org.apache.commons.math3.util.ArithmeticUtils.binomialCoefficientLog(int,int)": ["org.apache.commons.math3.util.CombinatoricsUtils.binomialCoefficientLog(int,int)"],
    "org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D#FieldVector3D(T extends RealFieldElement,FieldVector3D<T extends RealFieldElement>,T extends RealFieldElement,FieldVector3D<T extends RealFieldElement>)": [
        "org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D#getZ()",
        "org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D#getY()",
        "org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D#getX()",
        "org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D.<init>()"
    ],
    "org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D.distance(Vector3D,FieldVector3D<T extends RealFieldElement>)": ["org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D#distance(Vector3D)"],
    "org.apache.commons.math3.analysis.differentiation.SparseGradient#hypot(SparseGradient)": [
        "org.apache.commons.math3.analysis.differentiation.SparseGradient#sqrt()",
        "org.apache.commons.math3.analysis.differentiation.SparseGradient#multiply(SparseGradient)",
        "org.apache.commons.math3.analysis.differentiation.SparseGradient.createConstant(double)",
        "org.apache.commons.math3.util.FastMath.getExponent(double)",
        "org.apache.commons.math3.analysis.differentiation.SparseGradient#abs()",
        "org.apache.commons.math3.analysis.differentiation.SparseGradient#add(SparseGradient)",
        "org.apache.commons.math3.analysis.differentiation.SparseGradient#scalb(int)"
    ],
    "org.apache.commons.math3.geometry.partitioning.AbstractRegion#getTree(boolean)": [
        "org.apache.commons.math3.geometry.partitioning.BSPTree#getAttribute()",
        "org.apache.commons.math3.geometry.partitioning.BSPTree#visit(BSPTreeVisitor<S extends Space>)",
        "org.apache.commons.math3.geometry.partitioning.BSPTree#getCut()",
        "org.apache.commons.math3.geometry.partitioning.BoundaryBuilder.<init>()"
    ],
    "org.apache.commons.math3.linear.MatrixDimensionMismatchException#getWrongRowDimension()": ["org.apache.commons.math3.exception.MultiDimensionMismatchException#getWrongDimension(int)"],
    "org.apache.commons.math3.fraction.Fraction#longValue()": ["org.apache.commons.math3.fraction.Fraction#doubleValue()"],
    "org.apache.commons.math3.dfp.DfpDec#DfpDec(Dfp)": [
        "org.apache.commons.math3.dfp.DfpDec#round(int)",
        "org.apache.commons.math3.dfp.DfpDec.<init>()",
        "org.apache.commons.math3.dfp.Dfp#Dfp(Dfp)"
    ],
    "org.apache.commons.math3.ml.neuralnet.sofm.util.QuasiSigmoidDecayFunction#value(long)": ["org.apache.commons.math3.analysis.function.Logistic#value(double)"],
    "org.apache.commons.math3.geometry.spherical.oned.Sphere1D.NoSubSpaceException#NoSubSpaceException()": [
        "org.apache.commons.math3.geometry.spherical.oned.Sphere1D.NoSubSpaceException.<init>()",
        "org.apache.commons.math3.exception.util.LocalizedFormats.<staticinit>()"
    ],
    "org.apache.commons.math3.dfp.Dfp#newInstance(long)": [
        "org.apache.commons.math3.dfp.Dfp#getField()",
        "org.apache.commons.math3.dfp.Dfp#Dfp(DfpField,long)"
    ],
    "org.apache.commons.math3.special.Beta.regularizedBeta(double,double,double)": [
        "org.apache.commons.math3.special.Beta.<staticinit>()",
        "org.apache.commons.math3.special.Beta.regularizedBeta(double,double,double,double,int)"
    ],
    "org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D.angle(FieldVector3D<T extends RealFieldElement>,FieldVector3D<T extends RealFieldElement>)": [
        "org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D#getNorm()",
        "org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D.dotProduct(FieldVector3D<T extends RealFieldElement>,FieldVector3D<T extends RealFieldElement>)",
        "org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D.crossProduct(FieldVector3D<T extends RealFieldElement>,FieldVector3D<T extends RealFieldElement>)",
        "org.apache.commons.math3.util.FastMath.<staticinit>()",
        "org.apache.commons.math3.exception.util.LocalizedFormats.<staticinit>()"
    ],
    "org.apache.commons.math3.fitting.leastsquares.LeastSquaresAdapter#getObservationSize()": [
        "org.apache.commons.math3.fitting.leastsquares.LeastSquaresAdapter#getObservationSize()",
        "org.apache.commons.math3.fitting.leastsquares.LeastSquaresFactory.LocalLeastSquaresProblem#getObservationSize()"
    ],
    "org.apache.commons.math3.ml.neuralnet.MapUtils.PairNeuronDouble.<staticinit>()": ["org.apache.commons.math3.ml.neuralnet.MapUtils.PairNeuronDouble$Comparator$1.<init>()"],
    "org.apache.commons.math3.fraction.BigFractionField#readResolve()": ["org.apache.commons.math3.fraction.BigFractionField.LazyHolder.<staticinit>()"],
    "org.apache.commons.math3.util.FastMath.abs(double)": ["org.apache.commons.math3.util.FastMath.<staticinit>()"],
    "org.apache.commons.math3.geometry.euclidean.threed.Vector3D#distance1(Vector<Euclidean3D>)": ["org.apache.commons.math3.util.FastMath.abs(double)"],
    "org.apache.commons.math3.genetics.AbstractListChromosome#getLength()": ["org.apache.commons.math3.genetics.AbstractListChromosome#getRepresentation()"],
    "org.apache.commons.math3.ode.nonstiff.AdaptiveStepsizeIntegrator#initializeStep(boolean,int,double[],double,double[],double[],double[],double[])": [
        "org.apache.commons.math3.ode.AbstractIntegrator#computeDerivatives(double,double[],double[])",
        "org.apache.commons.math3.util.FastMath.max(double,double)",
        "org.apache.commons.math3.ode.nonstiff.AdaptiveStepsizeIntegrator#getMaxStep()",
        "org.apache.commons.math3.util.FastMath.abs(double)",
        "org.apache.commons.math3.util.FastMath.sqrt(double)",
        "org.apache.commons.math3.util.FastMath.min(double,double)",
        "org.apache.commons.math3.ode.nonstiff.AdaptiveStepsizeIntegrator#getMinStep()",
        "org.apache.commons.math3.util.FastMath.pow(double,int)"
    ],
    "org.apache.commons.math3.ml.distance.EuclideanDistance#compute(double[],double[])": ["org.apache.commons.math3.util.MathArrays.distance(double[],double[])"],
    "org.apache.commons.math3.stat.regression.GLSMultipleLinearRegression#calculateErrorVariance()": [
        "org.apache.commons.math3.linear.DiagonalMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.Array2DRowRealMatrix#getColumnDimension()",
        "org.apache.commons.math3.stat.regression.AbstractMultipleLinearRegression#calculateResiduals()",
        "org.apache.commons.math3.linear.BlockFieldMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.SparseFieldMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.ArrayRealVector#dotProduct(RealVector)",
        "org.apache.commons.math3.linear.OpenMapRealMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.OpenMapRealMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.DiagonalMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.RealVector#dotProduct(RealVector)",
        "org.apache.commons.math3.linear.RealVector.unmodifiableRealVector(RealVector)$RealVector$1#dotProduct(RealVector)",
        "org.apache.commons.math3.linear.Array2DRowFieldMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.BlockFieldMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.SparseFieldMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.BlockRealMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.Array2DRowRealMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.Array2DRowFieldMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.AbstractRealMatrix#operate(RealVector)",
        "org.apache.commons.math3.stat.regression.GLSMultipleLinearRegression#getOmegaInverse()",
        "org.apache.commons.math3.linear.BlockRealMatrix#getColumnDimension()",
        "org.apache.commons.math3.stat.regression.AbstractMultipleLinearRegression#getX()"
    ],
    "org.apache.commons.math3.analysis.function.Sigmoid#Sigmoid(double,double)": ["org.apache.commons.math3.analysis.function.Sigmoid.<init>()"],
    "org.apache.commons.math3.distribution.AbstractIntegerDistribution#sample()": [
        "org.apache.commons.math3.random.SynchronizedRandomGenerator#nextDouble()",
        "org.apache.commons.math3.distribution.AbstractIntegerDistribution#inverseCumulativeProbability(double)",
        "org.apache.commons.math3.distribution.GeometricDistribution#inverseCumulativeProbability(double)",
        "org.apache.commons.math3.random.RandomGeneratorFactory.createRandomGenerator(Random)$RandomGenerator$1#nextDouble()",
        "org.apache.commons.math3.random.RandomAdaptor#nextDouble()",
        "org.apache.commons.math3.random.BitsStreamGenerator#nextDouble()"
    ],
    "org.apache.commons.math3.optimization.direct.CMAESOptimizer.FitnessFunction#penalty(double[],double[])": ["org.apache.commons.math3.util.FastMath.abs(double)"],
    "org.apache.commons.math3.linear.BlockFieldMatrix.createBlocksLayout(Field<T extends FieldElement>,int,int)": [
        "org.apache.commons.math3.util.MathArrays.buildArray(Field<T>,int,int)",
        "org.apache.commons.math3.linear.BlockFieldMatrix.<staticinit>()",
        "org.apache.commons.math3.util.FastMath.min(int,int)",
        "org.apache.commons.math3.util.MathArrays.buildArray(Field<T>,int)"
    ],
    "org.apache.commons.math3.random.RandomDataImpl#reSeed(long)": ["org.apache.commons.math3.random.RandomDataGenerator#reSeed(long)"],
    "org.apache.commons.math3.analysis.differentiation.SparseGradient#expm1()": [
        "org.apache.commons.math3.analysis.differentiation.SparseGradient#SparseGradient(double,double,Map<Integer, Double>)",
        "org.apache.commons.math3.util.FastMath.exp(double)",
        "org.apache.commons.math3.util.FastMath.expm1(double)"
    ],
    "org.apache.commons.math3.complex.Complex#subtract(double)": [
        "org.apache.commons.math3.complex.Complex.<staticinit>()",
        "org.apache.commons.math3.complex.Complex#createComplex(double,double)"
    ],
    "org.apache.commons.math3.ode.nonstiff.GraggBulirschStoerIntegrator#GraggBulirschStoerIntegrator(double,double,double[],double[])": [
        "org.apache.commons.math3.ode.nonstiff.AdaptiveStepsizeIntegrator#AdaptiveStepsizeIntegrator(String,double,double,double[],double[])",
        "org.apache.commons.math3.ode.nonstiff.GraggBulirschStoerIntegrator#setInterpolationControl(boolean,int)",
        "org.apache.commons.math3.ode.nonstiff.GraggBulirschStoerIntegrator.<staticinit>()",
        "org.apache.commons.math3.ode.nonstiff.GraggBulirschStoerIntegrator#setControlFactors(double,double,double,double)",
        "org.apache.commons.math3.ode.nonstiff.GraggBulirschStoerIntegrator.<init>()",
        "org.apache.commons.math3.ode.nonstiff.GraggBulirschStoerIntegrator#setOrderControl(int,double,double)",
        "org.apache.commons.math3.ode.nonstiff.GraggBulirschStoerIntegrator#setStabilityCheck(boolean,int,int,double)"
    ],
    "org.apache.commons.math3.util.ResizableDoubleArray#addElementRolling(double)": [
        "org.apache.commons.math3.util.ResizableDoubleArray#shouldContract()",
        "org.apache.commons.math3.util.ResizableDoubleArray#expand()",
        "org.apache.commons.math3.util.ResizableDoubleArray#contract()"
    ],
    "org.apache.commons.math3.optimization.MultivariateDifferentiableVectorMultiStartOptimizer#MultivariateDifferentiableVectorMultiStartOptimizer(MultivariateDifferentiableVectorOptimizer,int,RandomVectorGenerator)": [
        "org.apache.commons.math3.optimization.MultivariateDifferentiableVectorMultiStartOptimizer.<init>()",
        "org.apache.commons.math3.optimization.BaseMultivariateVectorMultiStartOptimizer#BaseMultivariateVectorMultiStartOptimizer(BaseMultivariateVectorOptimizer<FUNC extends MultivariateVectorFunction>,int,RandomVectorGenerator)"
    ],
    "org.apache.commons.math3.linear.AbstractRealMatrix#scalarMultiply(double)": [
        "org.apache.commons.math3.linear.DiagonalMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.Array2DRowRealMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.Array2DRowRealMatrix#setEntry(int,int,double)",
        "org.apache.commons.math3.linear.DiagonalMatrix#getEntry(int,int)",
        "org.apache.commons.math3.linear.OpenMapRealMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.BlockRealMatrix#setEntry(int,int,double)",
        "org.apache.commons.math3.linear.OpenMapRealMatrix#setEntry(int,int,double)",
        "org.apache.commons.math3.linear.OpenMapRealMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.DiagonalMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.OpenMapRealMatrix#getEntry(int,int)",
        "org.apache.commons.math3.linear.DiagonalMatrix#createMatrix(int,int)",
        "org.apache.commons.math3.linear.BlockRealMatrix#getEntry(int,int)",
        "org.apache.commons.math3.linear.Array2DRowRealMatrix#getEntry(int,int)",
        "org.apache.commons.math3.linear.BlockRealMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.Array2DRowRealMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.OpenMapRealMatrix#createMatrix(int,int)",
        "org.apache.commons.math3.linear.BlockRealMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.Array2DRowRealMatrix#createMatrix(int,int)",
        "org.apache.commons.math3.linear.BlockRealMatrix#createMatrix(int,int)",
        "org.apache.commons.math3.linear.DiagonalMatrix#setEntry(int,int,double)"
    ],
    "org.apache.commons.math3.dfp.Dfp#reciprocal()": [
        "org.apache.commons.math3.dfp.DfpField#getOne()",
        "org.apache.commons.math3.dfp.Dfp#divide(Dfp)"
    ],
    "org.apache.commons.math3.stat.correlation.StorelessCovariance#append(StorelessCovariance)": [
        "org.apache.commons.math3.exception.DimensionMismatchException#DimensionMismatchException(int,int)",
        "org.apache.commons.math3.stat.correlation.StorelessCovariance#getElement(int,int)",
        "org.apache.commons.math3.stat.correlation.StorelessBivariateCovariance#append(StorelessBivariateCovariance)"
    ],
    "org.apache.commons.math3.ode.AbstractFieldIntegrator#addEventHandler(FieldEventHandler<T extends RealFieldElement>,double,double,int)": [
        "org.apache.commons.math3.util.BigRealField#getZero()",
        "org.apache.commons.math3.analysis.differentiation.SparseGradient#getField()$Field$1#getZero()",
        "org.apache.commons.math3.util.Decimal64Field#getZero()",
        "org.apache.commons.math3.dfp.DfpField#getZero()",
        "org.apache.commons.math3.analysis.differentiation.SparseGradient#add(double)",
        "org.apache.commons.math3.ode.AbstractFieldIntegrator.<staticinit>()",
        "org.apache.commons.math3.ode.AbstractFieldIntegrator#addEventHandler(FieldEventHandler<T extends RealFieldElement>,double,double,int,BracketedRealFieldUnivariateSolver<T extends RealFieldElement>)",
        "org.apache.commons.math3.analysis.differentiation.DerivativeStructure#add(double)",
        "org.apache.commons.math3.analysis.differentiation.DerivativeStructure#getField()$Field$1#getZero()",
        "org.apache.commons.math3.fraction.FractionField#getZero()",
        "org.apache.commons.math3.complex.ComplexField#getZero()",
        "org.apache.commons.math3.fraction.BigFractionField#getZero()",
        "org.apache.commons.math3.util.Decimal64#add(double)",
        "org.apache.commons.math3.dfp.Dfp#add(double)"
    ],
    "org.apache.commons.math3.linear.AbstractRealMatrix#getNorm()": [
        "org.apache.commons.math3.linear.AbstractRealMatrix#walkInColumnOrder(RealMatrixPreservingVisitor)",
        "org.apache.commons.math3.linear.Array2DRowRealMatrix#walkInColumnOrder(RealMatrixPreservingVisitor)",
        "org.apache.commons.math3.linear.AbstractRealMatrix#getNorm()$RealMatrixPreservingVisitor$1.<init>()"
    ],
    "org.apache.commons.math3.geometry.euclidean.threed.FieldRotation#FieldRotation(FieldVector3D<T extends RealFieldElement>,FieldVector3D<T extends RealFieldElement>)": [
        "org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D#orthogonal()",
        "org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D.crossProduct(FieldVector3D<T extends RealFieldElement>,FieldVector3D<T extends RealFieldElement>)",
        "org.apache.commons.math3.exception.util.LocalizedFormats.<staticinit>()",
        "org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D#getZ()",
        "org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D#getNorm()",
        "org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D#getY()",
        "org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D.dotProduct(FieldVector3D<T extends RealFieldElement>,FieldVector3D<T extends RealFieldElement>)",
        "org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D#getX()",
        "org.apache.commons.math3.geometry.euclidean.threed.FieldRotation.<init>()"
    ],
    "org.apache.commons.math3.geometry.euclidean.threed.Rotation#Rotation(RotationOrder,double,double,double)": [
        "org.apache.commons.math3.geometry.euclidean.threed.RotationConvention.<staticinit>()",
        "org.apache.commons.math3.geometry.euclidean.threed.Rotation#Rotation(RotationOrder,RotationConvention,double,double,double)"
    ],
    "org.apache.commons.math3.ode.nonstiff.RungeKuttaStepInterpolator#RungeKuttaStepInterpolator(RungeKuttaStepInterpolator)": [
        "org.apache.commons.math3.ode.nonstiff.RungeKuttaStepInterpolator.<init>()",
        "org.apache.commons.math3.ode.sampling.AbstractStepInterpolator#AbstractStepInterpolator(AbstractStepInterpolator)"
    ],
    "org.apache.commons.math3.stat.clustering.DBSCANClusterer#expandCluster(Cluster<T extends Clusterable>,T extends Clusterable,List<T extends Clusterable>,Collection<T extends Clusterable>,Map<Clusterable<T extends Clusterable>, PointStatus>)": [
        "org.apache.commons.math3.stat.clustering.DBSCANClusterer#getNeighbors(T extends Clusterable,Collection<T extends Clusterable>)",
        "org.apache.commons.math3.stat.clustering.DBSCANClusterer#merge(List<T extends Clusterable>,List<T extends Clusterable>)",
        "org.apache.commons.math3.stat.clustering.Cluster#addPoint(T extends Clusterable)",
        "org.apache.commons.math3.stat.clustering.DBSCANClusterer.PointStatus.<staticinit>()"
    ],
    "org.apache.commons.math3.linear.RealMatrixFormat#RealMatrixFormat(NumberFormat)": [
        "org.apache.commons.math3.linear.RealMatrixFormat#RealMatrixFormat(String,String,String,String,String,String,NumberFormat)",
        "org.apache.commons.math3.linear.RealMatrixFormat.<staticinit>()"
    ],
    "org.apache.commons.math3.stat.inference.WilcoxonSignedRankTest#calculateAbsoluteDifferences(double[])": [
        "org.apache.commons.math3.util.FastMath.abs(double)",
        "org.apache.commons.math3.exception.NoDataException#NoDataException()",
        "org.apache.commons.math3.exception.NullArgumentException#NullArgumentException()"
    ],
    "org.apache.commons.math3.linear.RealVector.unmodifiableRealVector(RealVector)$RealVector$1.<init>()": ["org.apache.commons.math3.linear.RealVector.<init>()"],
    "org.apache.commons.math3.fraction.BigFractionFormat.getAvailableLocales()": [
        "org.apache.commons.math3.fraction.BigFractionFormat.getAvailableLocales()",
        "org.apache.commons.math3.fraction.FractionFormat.getAvailableLocales()"
    ],
    "org.apache.commons.math3.genetics.NPointCrossover#crossover(Chromosome,Chromosome)": [
        "org.apache.commons.math3.genetics.NPointCrossover#mate(AbstractListChromosome<T>,AbstractListChromosome<T>)",
        "org.apache.commons.math3.exception.util.LocalizedFormats.<staticinit>()"
    ],
    "org.apache.commons.math3.analysis.differentiation.SparseGradient#scalb(int)": [
        "org.apache.commons.math3.analysis.differentiation.SparseGradient#SparseGradient(double,Map<Integer, Double>)",
        "org.apache.commons.math3.util.FastMath.scalb(double,int)"
    ],
    "org.apache.commons.math3.linear.SymmLQ#solveInPlace(RealLinearOperator,RealVector,RealVector)": ["org.apache.commons.math3.linear.SymmLQ#solveInPlace(RealLinearOperator,RealLinearOperator,RealVector,RealVector,boolean,double)"],
    "org.apache.commons.math3.ode.JacobianMatrices.MainStateJacobianWrapper#computeMainStateJacobian(double,double[],double[],double[][])": [
        "org.apache.commons.math3.ode.MultistepIntegrator#start(double,double[],double)$FirstOrderDifferentialEquations$1#computeDerivatives(double,double[],double[])",
        "org.apache.commons.math3.ode.JacobianMatrices.MainStateJacobianWrapper#getDimension()",
        "org.apache.commons.math3.ode.FirstOrderConverter#computeDerivatives(double,double[],double[])",
        "org.apache.commons.math3.ode.JacobianMatrices.MainStateJacobianWrapper#computeDerivatives(double,double[],double[])",
        "org.apache.commons.math3.ode.MultistepIntegrator#start(double,double[],double)$FirstOrderDifferentialEquations$1#getDimension()",
        "org.apache.commons.math3.ode.FirstOrderConverter#getDimension()"
    ],
    "org.apache.commons.math3.ode.JacobianMatrices#checkDimension(int,Object)": ["org.apache.commons.math3.exception.DimensionMismatchException#DimensionMismatchException(int,int)"],
    "org.apache.commons.math3.linear.AbstractRealMatrix#getSubMatrix(int[],int[])$DefaultRealMatrixChangingVisitor$1#visit(int,int,double)": [
        "org.apache.commons.math3.linear.Array2DRowRealMatrix#getEntry(int,int)",
        "org.apache.commons.math3.linear.OpenMapRealMatrix#getEntry(int,int)",
        "org.apache.commons.math3.linear.DiagonalMatrix#getEntry(int,int)",
        "org.apache.commons.math3.linear.BlockRealMatrix#getEntry(int,int)"
    ],
    "org.apache.commons.math3.stat.Frequency#incrementValue(char,long)": ["org.apache.commons.math3.stat.Frequency#incrementValue(int,long)"],
    "org.apache.commons.math3.geometry.spherical.oned.Sphere1D#getSubSpace()": ["org.apache.commons.math3.geometry.spherical.oned.Sphere1D.NoSubSpaceException#NoSubSpaceException()"],
    "org.apache.commons.math3.geometry.partitioning.RegionFactory.VanishingToLeaf#VanishingToLeaf(boolean)": ["org.apache.commons.math3.geometry.partitioning.RegionFactory.VanishingToLeaf.<init>()"],
    "org.apache.commons.math3.userguide.geometry.GeometryExample.Display#Display()$ActionListener$3#actionPerformed(ActionEvent)": [
        "org.apache.commons.math3.userguide.geometry.GeometryExample.createCross()",
        "org.apache.commons.math3.userguide.geometry.GeometryExample.Display#paintConvexHull()"
    ],
    "org.apache.commons.math3.ode.MultistepFieldIntegrator.InitializationCompletedMarkerException#InitializationCompletedMarkerException()": ["org.apache.commons.math3.ode.MultistepFieldIntegrator.InitializationCompletedMarkerException.<init>()"],
    "org.apache.commons.math3.linear.RealVector#unitize()": [
        "org.apache.commons.math3.linear.RealVector#getNorm()",
        "org.apache.commons.math3.linear.ArrayRealVector#mapDivideToSelf(double)",
        "org.apache.commons.math3.exception.util.LocalizedFormats.<staticinit>()",
        "org.apache.commons.math3.linear.RealVector.unmodifiableRealVector(RealVector)$RealVector$1#mapDivideToSelf(double)",
        "org.apache.commons.math3.linear.RealVector.unmodifiableRealVector(RealVector)$RealVector$1#getNorm()",
        "org.apache.commons.math3.linear.ArrayRealVector#getNorm()",
        "org.apache.commons.math3.linear.RealVector#mapDivideToSelf(double)"
    ],
    "org.apache.commons.math3.geometry.spherical.twod.Edge#setNextEdge(Edge)": [
        "org.apache.commons.math3.geometry.spherical.twod.Edge#getCircle()",
        "org.apache.commons.math3.geometry.spherical.twod.Edge#getStart()",
        "org.apache.commons.math3.geometry.spherical.twod.Vertex#setIncoming(Edge)",
        "org.apache.commons.math3.geometry.spherical.twod.Vertex#bindWith(Circle)"
    ],
    "org.apache.commons.math3.stat.descriptive.MultivariateSummaryStatistics#setSumLogImpl(StorelessUnivariateStatistic[])": ["org.apache.commons.math3.stat.descriptive.MultivariateSummaryStatistics#setImpl(StorelessUnivariateStatistic[],StorelessUnivariateStatistic[])"],
    "org.apache.commons.math3.stat.regression.OLSMultipleLinearRegression#calculateHat()": [
        "org.apache.commons.math3.linear.DiagonalMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.Array2DRowRealMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.BlockFieldMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.OpenMapRealMatrix#multiply(RealMatrix)",
        "org.apache.commons.math3.linear.OpenMapRealMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.BlockRealMatrix#transpose()",
        "org.apache.commons.math3.linear.Array2DRowRealMatrix#Array2DRowRealMatrix(int,int)",
        "org.apache.commons.math3.linear.Array2DRowFieldMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.SparseFieldMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.AbstractRealMatrix#multiply(RealMatrix)",
        "org.apache.commons.math3.linear.AbstractRealMatrix#transpose()",
        "org.apache.commons.math3.linear.Array2DRowRealMatrix#getDataRef()",
        "org.apache.commons.math3.linear.BlockRealMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.DiagonalMatrix#multiply(RealMatrix)",
        "org.apache.commons.math3.linear.QRDecomposition#getQ()",
        "org.apache.commons.math3.linear.BlockRealMatrix#multiply(RealMatrix)",
        "org.apache.commons.math3.linear.QRDecomposition#getR()"
    ],
    "org.apache.commons.math3.analysis.interpolation.DividedDifferenceInterpolator.computeDividedDifference(double[],double[])": ["org.apache.commons.math3.analysis.polynomials.PolynomialFunctionLagrangeForm.verifyInterpolationArray(double[],double[],boolean)"],
    "org.apache.commons.math3.optimization.PointVectorValuePair.DataTransferObject#DataTransferObject(double[],double[])": ["org.apache.commons.math3.optimization.PointVectorValuePair.DataTransferObject.<init>()"],
    "org.apache.commons.math3.distribution.SaddlePointExpansion#SaddlePointExpansion()": ["org.apache.commons.math3.distribution.SaddlePointExpansion.<init>()"],
    "org.apache.commons.math3.fitting.leastsquares.LeastSquaresFactory.evaluationChecker(ConvergenceChecker<PointVectorValuePair>)": ["org.apache.commons.math3.fitting.leastsquares.LeastSquaresFactory.evaluationChecker(ConvergenceChecker<PointVectorValuePair>)$ConvergenceChecker$1.<init>()"],
    "org.apache.commons.math3.stat.descriptive.moment.GeometricMean#setSumLogImpl(StorelessUnivariateStatistic)": ["org.apache.commons.math3.stat.descriptive.moment.GeometricMean#checkEmpty()"],
    "org.apache.commons.math3.geometry.spherical.twod.Edge#split(Circle,List<Edge>,List<Edge>)": [
        "org.apache.commons.math3.geometry.spherical.twod.Circle#getInsideArc(Circle)",
        "org.apache.commons.math3.util.MathUtils.<staticinit>()",
        "org.apache.commons.math3.geometry.spherical.twod.Vertex#getLocation()",
        "org.apache.commons.math3.util.MathUtils.normalizeAngle(double,double)",
        "org.apache.commons.math3.util.FastMath.<staticinit>()",
        "org.apache.commons.math3.geometry.spherical.twod.Edge#addSubEdge(Vertex,Vertex,double,List<Edge>,Circle)",
        "org.apache.commons.math3.geometry.spherical.twod.Circle#getTolerance()",
        "org.apache.commons.math3.geometry.spherical.oned.Arc#getSize()",
        "org.apache.commons.math3.geometry.spherical.twod.S2Point#S2Point(Vector3D)",
        "org.apache.commons.math3.geometry.spherical.twod.Vertex#Vertex(S2Point)",
        "org.apache.commons.math3.geometry.spherical.twod.Circle#getPhase(Vector3D)",
        "org.apache.commons.math3.geometry.spherical.twod.Circle#getPointAt(double)",
        "org.apache.commons.math3.geometry.spherical.oned.Arc#getInf()",
        "org.apache.commons.math3.geometry.spherical.twod.S2Point#getVector()"
    ],
    "org.apache.commons.math3.ode.nonstiff.GraggBulirschStoerIntegrator#tryStep(double,double[],double,int,double[],double[][],double[],double[],double[])": [
        "org.apache.commons.math3.util.FastMath.max(double,double)",
        "org.apache.commons.math3.ode.AbstractIntegrator#computeDerivatives(double,double[],double[])"
    ],
    "org.apache.commons.math3.random.ISAACRandom#isaac2()": ["org.apache.commons.math3.random.ISAACRandom#isaac3()"],
    "org.apache.commons.math3.complex.Complex#sqrt1z()": [
        "org.apache.commons.math3.complex.Complex#sqrt()",
        "org.apache.commons.math3.complex.Complex.<staticinit>()",
        "org.apache.commons.math3.complex.Complex#multiply(Complex)",
        "org.apache.commons.math3.complex.Complex#createComplex(double,double)",
        "org.apache.commons.math3.complex.Complex#subtract(Complex)"
    ],
    "org.apache.commons.math3.optimization.direct.BaseAbstractMultivariateVectorOptimizer#setUp()": [
        "org.apache.commons.math3.linear.Array2DRowRealMatrix#getEntry(int,int)",
        "org.apache.commons.math3.linear.OpenMapRealMatrix#getEntry(int,int)",
        "org.apache.commons.math3.linear.DiagonalMatrix#getEntry(int,int)",
        "org.apache.commons.math3.linear.BlockRealMatrix#getEntry(int,int)"
    ],
    "org.apache.commons.math3.ode.events.FieldEventState#reinitializeBegin(FieldStepInterpolator<T extends RealFieldElement>)": [
        "org.apache.commons.math3.ode.sampling.AbstractFieldStepInterpolator#getPreviousState()",
        "org.apache.commons.math3.ode.sampling.AbstractFieldStepInterpolator#getInterpolatedState(T extends RealFieldElement)",
        "org.apache.commons.math3.util.FastMath.abs(double)",
        "org.apache.commons.math3.util.FastMath.max(double,double)",
        "org.apache.commons.math3.analysis.solvers.FieldBracketingNthOrderBrentSolver#getAbsoluteAccuracy()",
        "org.apache.commons.math3.analysis.solvers.FieldBracketingNthOrderBrentSolver#getRelativeAccuracy()",
        "org.apache.commons.math3.ode.FieldODEState#getTime()"
    ],
    "org.apache.commons.math3.filter.KalmanFilter#getErrorCovariance()": [
        "org.apache.commons.math3.linear.DiagonalMatrix#getData()",
        "org.apache.commons.math3.linear.AbstractRealMatrix#getData()",
        "org.apache.commons.math3.linear.Array2DRowRealMatrix#getData()",
        "org.apache.commons.math3.linear.BlockRealMatrix#getData()"
    ],
    "org.apache.commons.math3.geometry.euclidean.twod.Vector2D#getNormInf()": [
        "org.apache.commons.math3.util.FastMath.max(double,double)",
        "org.apache.commons.math3.util.FastMath.abs(double)"
    ],
    "org.apache.commons.math3.optimization.direct.CMAESOptimizer#randn1(int,int)": [
        "org.apache.commons.math3.random.RandomAdaptor#nextGaussian()",
        "org.apache.commons.math3.random.SynchronizedRandomGenerator#nextGaussian()",
        "org.apache.commons.math3.random.RandomGeneratorFactory.createRandomGenerator(Random)$RandomGenerator$1#nextGaussian()",
        "org.apache.commons.math3.random.BitsStreamGenerator#nextGaussian()",
        "org.apache.commons.math3.random.AbstractRandomGenerator#nextGaussian()",
        "org.apache.commons.math3.linear.Array2DRowRealMatrix#Array2DRowRealMatrix(double[][],boolean)"
    ],
    "org.apache.commons.math3.complex.Complex#tan()": [
        "org.apache.commons.math3.util.FastMath.sin(double)",
        "org.apache.commons.math3.util.FastMath.cosh(double)",
        "org.apache.commons.math3.complex.Complex.<staticinit>()",
        "org.apache.commons.math3.complex.Complex#createComplex(double,double)",
        "org.apache.commons.math3.util.FastMath.sinh(double)",
        "org.apache.commons.math3.util.FastMath.cos(double)"
    ],
    "org.apache.commons.math3.optimization.direct.MultivariateFunctionMappingAdapter.UpperBoundMapper#boundedToUnbounded(double)": ["org.apache.commons.math3.util.FastMath.log(double)"],
    "org.apache.commons.math3.stat.descriptive.rank.Percentile.copyOf(double[],int,int)": [
        "org.apache.commons.math3.util.MathArrays.verifyValues(double[],int,int)",
        "org.apache.commons.math3.util.MathArrays.copyOfRange(double[],int,int)"
    ],
    "org.apache.commons.math3.optim.univariate.MultiStartUnivariateOptimizer#doOptimize()": [
        "org.apache.commons.math3.optim.univariate.MultiStartUnivariateOptimizer#sortPairs(GoalType)",
        "org.apache.commons.math3.optim.univariate.MultiStartUnivariateOptimizer#getEvaluations()",
        "org.apache.commons.math3.optim.univariate.UnivariateOptimizer#optimize(OptimizationData[]...)",
        "org.apache.commons.math3.optim.BaseOptimizer#getEvaluations()",
        "org.apache.commons.math3.optim.univariate.UnivariateOptimizer#getStartValue()",
        "org.apache.commons.math3.optim.MaxEval#MaxEval(int)",
        "org.apache.commons.math3.random.BitsStreamGenerator#nextDouble()",
        "org.apache.commons.math3.optim.univariate.UnivariateOptimizer#getMax()",
        "org.apache.commons.math3.optim.BaseMultiStartMultivariateOptimizer#getEvaluations()",
        "org.apache.commons.math3.exception.MathIllegalStateException#MathIllegalStateException()",
        "org.apache.commons.math3.random.SynchronizedRandomGenerator#nextDouble()",
        "org.apache.commons.math3.optim.univariate.MultiStartUnivariateOptimizer#optimize(OptimizationData[]...)",
        "org.apache.commons.math3.random.RandomAdaptor#nextDouble()",
        "org.apache.commons.math3.optim.univariate.UnivariateOptimizer#getGoalType()",
        "org.apache.commons.math3.optim.BaseOptimizer#getMaxEvaluations()",
        "org.apache.commons.math3.random.RandomGeneratorFactory.createRandomGenerator(Random)$RandomGenerator$1#nextDouble()",
        "org.apache.commons.math3.optim.univariate.UnivariateOptimizer#getMin()",
        "org.apache.commons.math3.optim.univariate.SearchInterval#SearchInterval(double,double,double)"
    ],
    "org.apache.commons.math3.linear.RRQRDecomposition.Solver#solve(RealMatrix)": [
        "org.apache.commons.math3.linear.SingularValueDecomposition.Solver#solve(RealMatrix)",
        "org.apache.commons.math3.linear.QRDecomposition.Solver#solve(RealMatrix)",
        "org.apache.commons.math3.linear.EigenDecomposition.Solver#solve(RealMatrix)",
        "org.apache.commons.math3.linear.AbstractRealMatrix#multiply(RealMatrix)",
        "org.apache.commons.math3.linear.LUDecomposition.Solver#solve(RealMatrix)",
        "org.apache.commons.math3.linear.OpenMapRealMatrix#multiply(RealMatrix)",
        "org.apache.commons.math3.linear.RRQRDecomposition.Solver#solve(RealMatrix)",
        "org.apache.commons.math3.linear.DiagonalMatrix#multiply(RealMatrix)",
        "org.apache.commons.math3.linear.BlockRealMatrix#multiply(RealMatrix)",
        "org.apache.commons.math3.linear.CholeskyDecomposition.Solver#solve(RealMatrix)"
    ],
    "org.apache.commons.math3.stat.correlation.Covariance#covariance(double[],double[],boolean)": [
        "org.apache.commons.math3.stat.descriptive.moment.StandardDeviation#evaluate(double[])",
        "org.apache.commons.math3.stat.descriptive.moment.Variance#evaluate(double[])",
        "org.apache.commons.math3.stat.descriptive.moment.Mean#Mean()",
        "org.apache.commons.math3.stat.descriptive.AbstractStorelessUnivariateStatistic#evaluate(double[])",
        "org.apache.commons.math3.exception.util.LocalizedFormats.<staticinit>()"
    ],
    "org.apache.commons.math3.distribution.GeometricDistribution#GeometricDistribution(RandomGenerator,double)": [
        "org.apache.commons.math3.util.FastMath.log1p(double)",
        "org.apache.commons.math3.distribution.GeometricDistribution.<init>()",
        "org.apache.commons.math3.util.FastMath.log(double)",
        "org.apache.commons.math3.distribution.AbstractIntegerDistribution#AbstractIntegerDistribution(RandomGenerator)",
        "org.apache.commons.math3.exception.util.LocalizedFormats.<staticinit>()"
    ],
    "org.apache.commons.math3.stat.inference.TTest#checkSampleData(double[])": [
        "org.apache.commons.math3.exception.NullArgumentException#NullArgumentException()",
        "org.apache.commons.math3.exception.util.LocalizedFormats.<staticinit>()"
    ],
    "org.apache.commons.math3.userguide.ClusterAlgorithmComparison.ClusterPlot#transform(Clusterable,int,int)": [
        "org.apache.commons.math3.userguide.ClusterAlgorithmComparison.ClusterPlot.<staticinit>()",
        "org.apache.commons.math3.ml.clustering.DoublePoint#getPoint()",
        "org.apache.commons.math3.ml.clustering.DoublePoint#DoublePoint(double[])"
    ],
    "org.apache.commons.math3.analysis.function.Tan#value(DerivativeStructure)": ["org.apache.commons.math3.analysis.differentiation.DerivativeStructure#tan()"],
    "org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D.distanceInf(FieldVector3D<T extends RealFieldElement>,Vector3D)": ["org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D#distanceInf(Vector3D)"],
    "org.apache.commons.math3.linear.AbstractRealMatrix#transpose()": [
        "org.apache.commons.math3.linear.DiagonalMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.Array2DRowRealMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.BlockRealMatrix#walkInOptimizedOrder(RealMatrixPreservingVisitor)",
        "org.apache.commons.math3.linear.AbstractRealMatrix#transpose()$DefaultRealMatrixPreservingVisitor$1.<init>()",
        "org.apache.commons.math3.linear.OpenMapRealMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.OpenMapRealMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.DiagonalMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.DiagonalMatrix#createMatrix(int,int)",
        "org.apache.commons.math3.linear.AbstractRealMatrix#walkInOptimizedOrder(RealMatrixPreservingVisitor)",
        "org.apache.commons.math3.linear.BlockRealMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.Array2DRowRealMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.OpenMapRealMatrix#createMatrix(int,int)",
        "org.apache.commons.math3.linear.BlockRealMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.Array2DRowRealMatrix#createMatrix(int,int)",
        "org.apache.commons.math3.linear.BlockRealMatrix#createMatrix(int,int)"
    ],
    "org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizer#LevenbergMarquardtOptimizer(ConvergenceChecker<PointVectorValuePair>)": [
        "org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizer#LevenbergMarquardtOptimizer(double,ConvergenceChecker<PointVectorValuePair>,double,double,double,double)",
        "org.apache.commons.math3.util.Precision.<staticinit>()"
    ],
    "org.apache.commons.math3.transform.TransformUtils.exactLog2(int)": [
        "org.apache.commons.math3.transform.TransformUtils.<staticinit>()",
        "org.apache.commons.math3.exception.util.LocalizedFormats.<staticinit>()"
    ],
    "org.apache.commons.math3.ode.JacobianMatrices#registerVariationalEquations(ExpandableStatefulODE)": [
        "org.apache.commons.math3.ode.ExpandableStatefulODE#getPrimary()",
        "org.apache.commons.math3.ode.JacobianMatrices.JacobiansSecondaryEquations.<init>()",
        "org.apache.commons.math3.ode.ExpandableStatefulODE#addSecondaryEquations(SecondaryEquations)",
        "org.apache.commons.math3.ode.JacobianMatrices.MismatchedEquations#MismatchedEquations()",
        "org.apache.commons.math3.ode.ExpandableStatefulODE#setSecondaryState(int,double[])"
    ],
    "org.apache.commons.math3.analysis.differentiation.GradientFunction#value(double[])": [
        "org.apache.commons.math3.analysis.FunctionUtils.toMultivariateDifferentiableFunction(DifferentiableMultivariateFunction)$MultivariateDifferentiableFunction$1#value(DerivativeStructure[])",
        "org.apache.commons.math3.analysis.differentiation.DerivativeStructure#DerivativeStructure(int,int,int,double)",
        "org.apache.commons.math3.analysis.differentiation.DerivativeStructure#getPartialDerivative(int[]...)"
    ],
    "org.apache.commons.math3.userguide.genetics.PolygonChromosome.randomChromosome(int,int)": [
        "org.apache.commons.math3.userguide.genetics.Polygon.randomPolygon(int)",
        "org.apache.commons.math3.userguide.genetics.PolygonChromosome#PolygonChromosome(List<Polygon>)"
    ],
    "org.apache.commons.math3.ode.nonstiff.MidpointFieldStepInterpolator#create(Field<T extends RealFieldElement>,boolean,T extends RealFieldElement[][],FieldODEStateAndDerivative<T extends RealFieldElement>,FieldODEStateAndDerivative<T extends RealFieldElement>,FieldODEStateAndDerivative<T extends RealFieldElement>,FieldODEStateAndDerivative<T extends RealFieldElement>,FieldEquationsMapper<T extends RealFieldElement>)": ["org.apache.commons.math3.ode.nonstiff.MidpointFieldStepInterpolator#MidpointFieldStepInterpolator(Field<T extends RealFieldElement>,boolean,T extends RealFieldElement[][],FieldODEStateAndDerivative<T extends RealFieldElement>,FieldODEStateAndDerivative<T extends RealFieldElement>,FieldODEStateAndDerivative<T extends RealFieldElement>,FieldODEStateAndDerivative<T extends RealFieldElement>,FieldEquationsMapper<T extends RealFieldElement>)"],
    "org.apache.commons.math3.util.Precision.equals(double,double,double)": [
        "org.apache.commons.math3.util.FastMath.abs(double)",
        "org.apache.commons.math3.util.Precision.equals(double,double,int)"
    ],
    "org.apache.commons.math3.analysis.function.Tanh#value(double)": ["org.apache.commons.math3.util.FastMath.tanh(double)"],
    "org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D#toString()": [
        "org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D#toVector3D()",
        "org.apache.commons.math3.geometry.VectorFormat#format(Vector<S extends Space>)",
        "org.apache.commons.math3.geometry.euclidean.threed.Vector3DFormat.getInstance()"
    ],
    "org.apache.commons.math3.util.Decimal64#sqrt()": [
        "org.apache.commons.math3.util.Decimal64#Decimal64(double)",
        "org.apache.commons.math3.util.FastMath.sqrt(double)"
    ],
    "org.apache.commons.math3.distribution.AbstractRealDistribution#probability(double,double)": [
        "org.apache.commons.math3.distribution.BetaDistribution#cumulativeProbability(double)",
        "org.apache.commons.math3.distribution.ConstantRealDistribution#cumulativeProbability(double)",
        "org.apache.commons.math3.distribution.NormalDistribution#cumulativeProbability(double)",
        "org.apache.commons.math3.distribution.ChiSquaredDistribution#cumulativeProbability(double)",
        "org.apache.commons.math3.distribution.UniformRealDistribution#cumulativeProbability(double)",
        "org.apache.commons.math3.exception.util.LocalizedFormats.<staticinit>()",
        "org.apache.commons.math3.distribution.ParetoDistribution#cumulativeProbability(double)",
        "org.apache.commons.math3.distribution.GumbelDistribution#cumulativeProbability(double)",
        "org.apache.commons.math3.distribution.LevyDistribution#cumulativeProbability(double)",
        "org.apache.commons.math3.distribution.LaplaceDistribution#cumulativeProbability(double)",
        "org.apache.commons.math3.distribution.EnumeratedRealDistribution#cumulativeProbability(double)",
        "org.apache.commons.math3.distribution.TriangularDistribution#cumulativeProbability(double)",
        "org.apache.commons.math3.random.EmpiricalDistribution#cumulativeProbability(double)",
        "org.apache.commons.math3.distribution.WeibullDistribution#cumulativeProbability(double)",
        "org.apache.commons.math3.distribution.TDistribution#cumulativeProbability(double)",
        "org.apache.commons.math3.distribution.LogisticDistribution#cumulativeProbability(double)",
        "org.apache.commons.math3.distribution.GammaDistribution#cumulativeProbability(double)",
        "org.apache.commons.math3.distribution.LogNormalDistribution#cumulativeProbability(double)",
        "org.apache.commons.math3.distribution.ExponentialDistribution#cumulativeProbability(double)",
        "org.apache.commons.math3.distribution.FDistribution#cumulativeProbability(double)",
        "org.apache.commons.math3.distribution.CauchyDistribution#cumulativeProbability(double)",
        "org.apache.commons.math3.distribution.NakagamiDistribution#cumulativeProbability(double)"
    ],
    "org.apache.commons.math3.analysis.function.HarmonicOscillator#value(double)": ["org.apache.commons.math3.analysis.function.HarmonicOscillator.value(double,double)"],
    "org.apache.commons.math3.fitting.HarmonicFitter#fit()": [
        "org.apache.commons.math3.fitting.CurveFitter#getObservations()",
        "org.apache.commons.math3.fitting.HarmonicFitter.ParameterGuesser#ParameterGuesser(WeightedObservedPoint[])",
        "org.apache.commons.math3.fitting.HarmonicFitter.ParameterGuesser#guess()",
        "org.apache.commons.math3.fitting.HarmonicFitter#fit(double[])"
    ],
    "org.apache.commons.math3.random.Well19937a#Well19937a(int)": [
        "org.apache.commons.math3.random.AbstractWell#AbstractWell(int,int,int,int,int)",
        "org.apache.commons.math3.random.Well19937a.<staticinit>()",
        "org.apache.commons.math3.random.Well19937a.<init>()"
    ],
    "org.apache.commons.math3.geometry.euclidean.threed.FieldRotation#composeInverse(Rotation,RotationConvention)": [
        "org.apache.commons.math3.geometry.euclidean.threed.FieldRotation.applyTo(Rotation,FieldRotation<T extends RealFieldElement>)",
        "org.apache.commons.math3.geometry.euclidean.threed.FieldRotation#composeInverseInternal(Rotation)",
        "org.apache.commons.math3.geometry.euclidean.threed.RotationConvention.<staticinit>()",
        "org.apache.commons.math3.geometry.euclidean.threed.FieldRotation#revert()"
    ],
    "org.apache.commons.math3.distribution.WeibullDistribution#WeibullDistribution(RandomGenerator,double,double)": [
        "org.apache.commons.math3.distribution.WeibullDistribution#WeibullDistribution(RandomGenerator,double,double,double)",
        "org.apache.commons.math3.distribution.WeibullDistribution.<staticinit>()"
    ],
    "org.apache.commons.math3.ode.nonstiff.AdamsMoultonFieldIntegrator.Corrector#start(int,int,int,int,int,int)": [
        "org.apache.commons.math3.ode.AbstractFieldIntegrator#getField()",
        "org.apache.commons.math3.util.BigRealField#getZero()",
        "org.apache.commons.math3.analysis.differentiation.SparseGradient#getField()$Field$1#getZero()",
        "org.apache.commons.math3.analysis.differentiation.DerivativeStructure#getField()$Field$1#getZero()",
        "org.apache.commons.math3.fraction.FractionField#getZero()",
        "org.apache.commons.math3.util.Decimal64Field#getZero()",
        "org.apache.commons.math3.dfp.DfpField#getZero()",
        "org.apache.commons.math3.complex.ComplexField#getZero()",
        "org.apache.commons.math3.fraction.BigFractionField#getZero()"
    ],
    "org.apache.commons.math3.distribution.GeometricDistribution#cumulativeProbability(int)": ["org.apache.commons.math3.util.FastMath.expm1(double)"],
    "org.apache.commons.math3.random.RandomDataImpl#nextInversionDeviate(IntegerDistribution)": [
        "org.apache.commons.math3.distribution.GeometricDistribution#inverseCumulativeProbability(double)",
        "org.apache.commons.math3.distribution.AbstractIntegerDistribution#inverseCumulativeProbability(double)",
        "org.apache.commons.math3.random.RandomDataImpl#nextUniform(double,double)"
    ],
    "org.apache.commons.math3.primes.SmallPrimes.boundedTrialDivision(int,int,List<Integer>)": ["org.apache.commons.math3.primes.SmallPrimes.<staticinit>()"],
    "org.apache.commons.math3.ode.AbstractIntegrator#acceptStep(AbstractStepInterpolator,double[],double[],double)": [
        "org.apache.commons.math3.ode.sampling.StepNormalizer#handleStep(StepInterpolator,boolean)",
        "org.apache.commons.math3.ode.events.EventState#stop()",
        "org.apache.commons.math3.ode.events.EventState#stepAccepted(double,double[])",
        "org.apache.commons.math3.userguide.sofm.ChineseRingsClassifier#createRandomIterator(long)$Iterator$1#remove()",
        "org.apache.commons.math3.ode.MultistepIntegrator.NordsieckInitializer#handleStep(StepInterpolator,boolean)",
        "org.apache.commons.math3.util.MultidimensionalCounter.Iterator#remove()",
        "org.apache.commons.math3.ode.ExpandableStatefulODE#getPrimaryMapper()",
        "org.apache.commons.math3.ode.sampling.AbstractStepInterpolator#getInterpolatedState()",
        "org.apache.commons.math3.ode.events.EventState#reset(double,double[])",
        "org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet.SubIntervalsIterator#remove()",
        "org.apache.commons.math3.ode.sampling.AbstractStepInterpolator#getGlobalPreviousTime()",
        "org.apache.commons.math3.util.Precision.equals(double,double,int)",
        "org.apache.commons.math3.util.IntegerSequence.Incrementor#remove()",
        "org.apache.commons.math3.ode.sampling.AbstractStepInterpolator#setSoftPreviousTime(double)",
        "org.apache.commons.math3.ode.sampling.AbstractStepInterpolator#setInterpolatedTime(double)",
        "org.apache.commons.math3.userguide.sofm.ChineseRingsClassifier#createIterable()$Iterator$1$Iterator$1#iterator()$Iterator$1#remove()",
        "org.apache.commons.math3.ode.AbstractIntegrator#acceptStep(AbstractStepInterpolator,double[],double[],double)$Comparator$1.<init>()",
        "org.apache.commons.math3.ode.ExpandableStatefulODE#getSecondaryMappers()",
        "org.apache.commons.math3.ode.sampling.DummyStepHandler#handleStep(StepInterpolator,boolean)",
        "org.apache.commons.math3.util.Combinations.SingletonIterator#remove()",
        "org.apache.commons.math3.linear.RealVector.SparseEntryIterator#remove()",
        "org.apache.commons.math3.ode.ContinuousOutputModel#handleStep(StepInterpolator,boolean)",
        "org.apache.commons.math3.ode.sampling.AbstractStepInterpolator#setSoftCurrentTime(double)",
        "org.apache.commons.math3.util.Combinations.LexicographicIterator#remove()",
        "org.apache.commons.math3.ode.AbstractIntegrator#computeDerivatives(double,double[],double[])",
        "org.apache.commons.math3.geometry.spherical.oned.ArcsSet.SubArcsIterator#remove()",
        "org.apache.commons.math3.ode.events.EventState#getEventTime()",
        "org.apache.commons.math3.ode.sampling.AbstractStepInterpolator#isForward()",
        "org.apache.commons.math3.ode.EquationsMapper#insertEquationData(double[],double[])",
        "org.apache.commons.math3.ode.sampling.AbstractStepInterpolator#getInterpolatedSecondaryState(int)",
        "org.apache.commons.math3.linear.RealVector#iterator()$Iterator$1#remove()",
        "org.apache.commons.math3.ode.events.EventState#evaluateStep(StepInterpolator)",
        "org.apache.commons.math3.ode.events.EventState#reinitializeBegin(StepInterpolator)",
        "org.apache.commons.math3.ode.sampling.AbstractStepInterpolator#getGlobalCurrentTime()",
        "org.apache.commons.math3.linear.RealVector.unmodifiableRealVector(RealVector)$Iterator$1$Iterator$1#iterator()$Iterator$1#remove()",
        "org.apache.commons.math3.linear.RealVector.unmodifiableRealVector(RealVector)$Iterator$1$Iterator$1#sparseIterator()$Iterator$1#remove()"
    ],
    "org.apache.commons.math3.genetics.BinaryMutation#mutate(Chromosome)": [
        "org.apache.commons.math3.genetics.AbstractListChromosome#getRepresentation()",
        "org.apache.commons.math3.genetics.GeneticAlgorithm.getRandomGenerator()",
        "org.apache.commons.math3.exception.util.LocalizedFormats.<staticinit>()",
        "org.apache.commons.math3.random.RandomGeneratorFactory.createRandomGenerator(Random)$RandomGenerator$1#nextInt(int)",
        "org.apache.commons.math3.random.BitsStreamGenerator#nextInt(int)",
        "org.apache.commons.math3.random.AbstractRandomGenerator#nextInt(int)",
        "org.apache.commons.math3.random.SynchronizedRandomGenerator#nextInt(int)",
        "org.apache.commons.math3.random.RandomAdaptor#nextInt(int)",
        "org.apache.commons.math3.genetics.AbstractListChromosome#getLength()"
    ],
    "org.apache.commons.math3.analysis.function.Sinc#Sinc(boolean)": ["org.apache.commons.math3.analysis.function.Sinc.<init>()"],
    "org.apache.commons.math3.fitting.leastsquares.LeastSquaresFactory.LocalLeastSquaresProblem.LazyUnweightedEvaluation#getResiduals()": [
        "org.apache.commons.math3.linear.ArrayRealVector#subtract(RealVector)",
        "org.apache.commons.math3.linear.OpenMapRealVector#toArray()",
        "org.apache.commons.math3.linear.RealVector#toArray()",
        "org.apache.commons.math3.fitting.leastsquares.LeastSquaresFactory.LocalValueAndJacobianFunction#computeValue(double[])",
        "org.apache.commons.math3.linear.OpenMapRealVector#subtract(RealVector)",
        "org.apache.commons.math3.linear.RealVector#subtract(RealVector)",
        "org.apache.commons.math3.linear.RealVector.unmodifiableRealVector(RealVector)$RealVector$1#toArray()",
        "org.apache.commons.math3.linear.RealVector.unmodifiableRealVector(RealVector)$RealVector$1#subtract(RealVector)",
        "org.apache.commons.math3.linear.ArrayRealVector#toArray()"
    ],
    "org.apache.commons.math3.util.MultidimensionalCounter.Iterator#getCounts()": ["org.apache.commons.math3.util.MathArrays.copyOf(int[])"],
    "org.apache.commons.math3.fitting.GaussianFitter#fit(double[])$Parametric$1#value(double,double[]...)": ["org.apache.commons.math3.analysis.function.Gaussian.Parametric#value(double,double[]...)"],
    "org.apache.commons.math3.analysis.differentiation.SparseGradient#log()": [
        "org.apache.commons.math3.analysis.differentiation.SparseGradient#SparseGradient(double,double,Map<Integer, Double>)",
        "org.apache.commons.math3.util.FastMath.log(double)"
    ],
    "org.apache.commons.math3.random.RandomDataGenerator#reSeedSecure(long)": [
        "org.apache.commons.math3.random.RandomGeneratorFactory.createRandomGenerator(Random)$RandomGenerator$1#setSeed(long)",
        "org.apache.commons.math3.random.SynchronizedRandomGenerator#setSeed(long)",
        "org.apache.commons.math3.random.MersenneTwister#setSeed(long)",
        "org.apache.commons.math3.random.AbstractWell#setSeed(long)",
        "org.apache.commons.math3.random.RandomAdaptor#setSeed(long)",
        "org.apache.commons.math3.random.ISAACRandom#setSeed(long)",
        "org.apache.commons.math3.random.RandomDataGenerator#getSecRan()"
    ],
    "org.apache.commons.math3.distribution.KolmogorovSmirnovDistribution#KolmogorovSmirnovDistribution(int)": [
        "org.apache.commons.math3.distribution.KolmogorovSmirnovDistribution.<init>()",
        "org.apache.commons.math3.exception.util.LocalizedFormats.<staticinit>()"
    ],
    "org.apache.commons.math3.optimization.linear.Relationship#Relationship(String)": ["org.apache.commons.math3.optimization.linear.Relationship.<init>()"],
    "org.apache.commons.math3.analysis.integration.SimpsonIntegrator#SimpsonIntegrator()": [
        "org.apache.commons.math3.analysis.integration.SimpsonIntegrator.<init>()",
        "org.apache.commons.math3.analysis.integration.BaseAbstractUnivariateIntegrator#BaseAbstractUnivariateIntegrator(int,int)",
        "org.apache.commons.math3.analysis.integration.BaseAbstractUnivariateIntegrator.<staticinit>()",
        "org.apache.commons.math3.analysis.integration.SimpsonIntegrator.<staticinit>()"
    ],
    "org.apache.commons.math3.stat.descriptive.MultivariateSummaryStatistics#toString()": [
        "org.apache.commons.math3.stat.descriptive.MultivariateSummaryStatistics#getCovariance()",
        "org.apache.commons.math3.stat.descriptive.MultivariateSummaryStatistics#getSumSq()",
        "org.apache.commons.math3.stat.descriptive.SynchronizedMultivariateSummaryStatistics#getN()",
        "org.apache.commons.math3.stat.descriptive.MultivariateSummaryStatistics#getGeometricMean()",
        "org.apache.commons.math3.stat.descriptive.SynchronizedMultivariateSummaryStatistics#getCovariance()",
        "org.apache.commons.math3.stat.descriptive.SynchronizedMultivariateSummaryStatistics#getStandardDeviation()",
        "org.apache.commons.math3.stat.descriptive.SynchronizedMultivariateSummaryStatistics#getMean()",
        "org.apache.commons.math3.stat.descriptive.MultivariateSummaryStatistics#getStandardDeviation()",
        "org.apache.commons.math3.stat.descriptive.MultivariateSummaryStatistics#getMin()",
        "org.apache.commons.math3.stat.descriptive.MultivariateSummaryStatistics#getSumLog()",
        "org.apache.commons.math3.stat.descriptive.SynchronizedMultivariateSummaryStatistics#getGeometricMean()",
        "org.apache.commons.math3.stat.descriptive.SynchronizedMultivariateSummaryStatistics#getSumLog()",
        "org.apache.commons.math3.stat.descriptive.MultivariateSummaryStatistics#getN()",
        "org.apache.commons.math3.stat.descriptive.SynchronizedMultivariateSummaryStatistics#getMin()",
        "org.apache.commons.math3.stat.descriptive.SynchronizedMultivariateSummaryStatistics#getSumSq()",
        "org.apache.commons.math3.stat.descriptive.SynchronizedMultivariateSummaryStatistics#getMax()",
        "org.apache.commons.math3.stat.descriptive.MultivariateSummaryStatistics#append(StringBuilder,double[],String,String,String)",
        "org.apache.commons.math3.stat.descriptive.MultivariateSummaryStatistics#getMax()",
        "org.apache.commons.math3.stat.descriptive.MultivariateSummaryStatistics#getMean()"
    ],
    "org.apache.commons.math3.analysis.solvers.UnivariateSolverUtils.bracket(UnivariateFunction,double,double,double)": ["org.apache.commons.math3.analysis.solvers.UnivariateSolverUtils.bracket(UnivariateFunction,double,double,double,double,double,int)"],
    "org.apache.commons.math3.distribution.fitting.MultivariateNormalMixtureExpectationMaximization.DataRow#DataRow(double[])": ["org.apache.commons.math3.distribution.fitting.MultivariateNormalMixtureExpectationMaximization.DataRow.<init>()"],
    "org.apache.commons.math3.stat.descriptive.moment.Variance#evaluate(double[],double[])": ["org.apache.commons.math3.stat.descriptive.moment.Variance#evaluate(double[],double[],int,int)"],
    "org.apache.commons.math3.linear.AbstractRealMatrix#walkInColumnOrder(RealMatrixPreservingVisitor,int,int,int,int)": [
        "org.apache.commons.math3.linear.DiagonalMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.Array2DRowRealMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.DefaultRealMatrixPreservingVisitor#visit(int,int,double)",
        "org.apache.commons.math3.linear.SingularValueDecomposition#getCovariance(double)$DefaultRealMatrixPreservingVisitor$1#visit(int,int,double)",
        "org.apache.commons.math3.linear.DiagonalMatrix#getEntry(int,int)",
        "org.apache.commons.math3.linear.OpenMapRealMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.DiagonalMatrix#getRowDimension()",
        "org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator.Corrector#start(int,int,int,int,int,int)",
        "org.apache.commons.math3.linear.BlockRealMatrix#getEntry(int,int)",
        "org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator.Corrector#visit(int,int,double)",
        "org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator.Corrector#end()",
        "org.apache.commons.math3.linear.BlockRealMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.AbstractRealMatrix#getNorm()$RealMatrixPreservingVisitor$1#start(int,int,int,int,int,int)",
        "org.apache.commons.math3.linear.AbstractRealMatrix#transpose()$DefaultRealMatrixPreservingVisitor$1#visit(int,int,double)",
        "org.apache.commons.math3.linear.DefaultRealMatrixPreservingVisitor#start(int,int,int,int,int,int)",
        "org.apache.commons.math3.linear.AbstractRealMatrix#copySubMatrix(int,int,int,int,double[][])$DefaultRealMatrixPreservingVisitor$1#start(int,int,int,int,int,int)",
        "org.apache.commons.math3.linear.AbstractRealMatrix#getNorm()$RealMatrixPreservingVisitor$1#end()",
        "org.apache.commons.math3.linear.AbstractRealMatrix#getFrobeniusNorm()$RealMatrixPreservingVisitor$1#end()",
        "org.apache.commons.math3.linear.OpenMapRealMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.AbstractRealMatrix#getFrobeniusNorm()$RealMatrixPreservingVisitor$1#visit(int,int,double)",
        "org.apache.commons.math3.linear.DefaultRealMatrixPreservingVisitor#end()",
        "org.apache.commons.math3.linear.AbstractRealMatrix#getFrobeniusNorm()$RealMatrixPreservingVisitor$1#start(int,int,int,int,int,int)",
        "org.apache.commons.math3.linear.OpenMapRealMatrix#getEntry(int,int)",
        "org.apache.commons.math3.linear.AbstractRealMatrix#getNorm()$RealMatrixPreservingVisitor$1#visit(int,int,double)",
        "org.apache.commons.math3.linear.AbstractRealMatrix#copySubMatrix(int,int,int,int,double[][])$DefaultRealMatrixPreservingVisitor$1#visit(int,int,double)",
        "org.apache.commons.math3.linear.Array2DRowRealMatrix#getEntry(int,int)",
        "org.apache.commons.math3.linear.Array2DRowRealMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.MatrixUtils.checkSubMatrixIndex(AnyMatrix,int,int,int,int)",
        "org.apache.commons.math3.linear.BlockRealMatrix#getColumnDimension()"
    ],
    "org.apache.commons.math3.util.IterationManager#IterationManager(int)": [
        "org.apache.commons.math3.util.IterationManager.<init>()",
        "org.apache.commons.math3.util.IntegerSequence.Incrementor.create()",
        "org.apache.commons.math3.util.IntegerSequence.Incrementor#withMaximalCount(int)"
    ],
    "org.apache.commons.math3.stat.inference.TestUtils.chiSquareTestDataSetsComparison(long[],long[],double)": [
        "org.apache.commons.math3.stat.inference.TestUtils.<staticinit>()",
        "org.apache.commons.math3.stat.inference.ChiSquareTest#chiSquareTestDataSetsComparison(long[],long[],double)"
    ],
    "org.apache.commons.math3.analysis.integration.MidPointIntegrator#MidPointIntegrator(int,int)": [
        "org.apache.commons.math3.analysis.integration.MidPointIntegrator.<staticinit>()",
        "org.apache.commons.math3.analysis.integration.BaseAbstractUnivariateIntegrator#BaseAbstractUnivariateIntegrator(int,int)",
        "org.apache.commons.math3.analysis.integration.MidPointIntegrator.<init>()"
    ],
    "org.apache.commons.math3.stat.inference.TestUtils.tTest(double,StatisticalSummary)": [
        "org.apache.commons.math3.stat.inference.TTest#tTest(double,StatisticalSummary)",
        "org.apache.commons.math3.stat.inference.TestUtils.<staticinit>()"
    ],
    "org.apache.commons.math3.ode.nonstiff.GillStepInterpolator#doCopy()": ["org.apache.commons.math3.ode.nonstiff.GillStepInterpolator#GillStepInterpolator(GillStepInterpolator)"],
    "org.apache.commons.math3.stat.Frequency#Frequency()": ["org.apache.commons.math3.stat.Frequency.<init>()"],
    "org.apache.commons.math3.ode.nonstiff.GillIntegrator#GillIntegrator(double)": [
        "org.apache.commons.math3.ode.nonstiff.GillStepInterpolator#GillStepInterpolator()",
        "org.apache.commons.math3.ode.nonstiff.GillIntegrator.<init>()",
        "org.apache.commons.math3.ode.nonstiff.GillIntegrator.<staticinit>()",
        "org.apache.commons.math3.ode.nonstiff.RungeKuttaIntegrator#RungeKuttaIntegrator(String,double[],double[][],double[],RungeKuttaStepInterpolator,double)"
    ],
    "org.apache.commons.math3.linear.RealVector#checkIndices(int,int)": [
        "org.apache.commons.math3.linear.OpenMapRealVector#getDimension()",
        "org.apache.commons.math3.linear.ArrayRealVector#getDimension()",
        "org.apache.commons.math3.linear.RealVector.unmodifiableRealVector(RealVector)$RealVector$1#getDimension()",
        "org.apache.commons.math3.exception.util.LocalizedFormats.<staticinit>()"
    ],
    "org.apache.commons.math3.analysis.solvers.AbstractUnivariateSolver#AbstractUnivariateSolver(double)": [
        "org.apache.commons.math3.analysis.solvers.AbstractUnivariateSolver.<init>()",
        "org.apache.commons.math3.analysis.solvers.BaseAbstractUnivariateSolver#BaseAbstractUnivariateSolver(double)"
    ],
    "org.apache.commons.math3.random.EmpiricalDistribution#density(double)": [
        "org.apache.commons.math3.distribution.EnumeratedRealDistribution#density(double)",
        "org.apache.commons.math3.distribution.LogNormalDistribution#density(double)",
        "org.apache.commons.math3.distribution.TriangularDistribution#density(double)",
        "org.apache.commons.math3.distribution.ParetoDistribution#density(double)",
        "org.apache.commons.math3.distribution.ChiSquaredDistribution#density(double)",
        "org.apache.commons.math3.distribution.FDistribution#density(double)",
        "org.apache.commons.math3.distribution.GumbelDistribution#density(double)",
        "org.apache.commons.math3.distribution.CauchyDistribution#density(double)",
        "org.apache.commons.math3.distribution.ExponentialDistribution#density(double)",
        "org.apache.commons.math3.random.EmpiricalDistribution#getKernel(SummaryStatistics)",
        "org.apache.commons.math3.random.EmpiricalDistribution#findBin(double)",
        "org.apache.commons.math3.distribution.TDistribution#density(double)",
        "org.apache.commons.math3.distribution.BetaDistribution#density(double)",
        "org.apache.commons.math3.distribution.UniformRealDistribution#density(double)",
        "org.apache.commons.math3.distribution.LaplaceDistribution#density(double)",
        "org.apache.commons.math3.distribution.NormalDistribution#density(double)",
        "org.apache.commons.math3.random.EmpiricalDistribution#kB(int)",
        "org.apache.commons.math3.distribution.GammaDistribution#density(double)",
        "org.apache.commons.math3.distribution.ConstantRealDistribution#density(double)",
        "org.apache.commons.math3.distribution.LevyDistribution#density(double)",
        "org.apache.commons.math3.distribution.WeibullDistribution#density(double)",
        "org.apache.commons.math3.random.EmpiricalDistribution#density(double)",
        "org.apache.commons.math3.random.EmpiricalDistribution#pB(int)",
        "org.apache.commons.math3.distribution.LogisticDistribution#density(double)",
        "org.apache.commons.math3.distribution.NakagamiDistribution#density(double)"
    ],
    "org.apache.commons.math3.ode.FieldODEStateAndDerivative#FieldODEStateAndDerivative(T extends RealFieldElement,T extends RealFieldElement[],T extends RealFieldElement[],T extends RealFieldElement[][],T extends RealFieldElement[][])": [
        "org.apache.commons.math3.ode.FieldODEState#FieldODEState(T extends RealFieldElement,T extends RealFieldElement[],T extends RealFieldElement[][])",
        "org.apache.commons.math3.ode.FieldODEStateAndDerivative.<init>()",
        "org.apache.commons.math3.ode.FieldODEState#copy(Field<T extends RealFieldElement>,T extends RealFieldElement[][])"
    ],
    "org.apache.commons.math3.geometry.euclidean.threed.Plane#getPointAt(Vector2D,double)": [
        "org.apache.commons.math3.geometry.euclidean.twod.Vector2D#getY()",
        "org.apache.commons.math3.geometry.euclidean.twod.Vector2D#getX()",
        "org.apache.commons.math3.geometry.euclidean.threed.Vector3D#Vector3D(double,Vector3D,double,Vector3D,double,Vector3D)"
    ],
    "org.apache.commons.math3.geometry.spherical.twod.Circle#wholeHyperplane()": [
        "org.apache.commons.math3.geometry.spherical.twod.SubCircle#SubCircle(Hyperplane<Sphere2D>,Region<Sphere1D>)",
        "org.apache.commons.math3.geometry.spherical.oned.ArcsSet#ArcsSet(double)"
    ],
    "org.apache.commons.math3.linear.SparseFieldVector#ebeMultiply(FieldVector<T extends FieldElement>)": [
        "org.apache.commons.math3.linear.SparseFieldVector#checkVectorDimensions(int)",
        "org.apache.commons.math3.util.OpenIntToFieldHashMap.Iterator#hasNext()",
        "org.apache.commons.math3.linear.ArrayFieldVector#getDimension()",
        "org.apache.commons.math3.linear.SparseFieldVector#getEntry(int)",
        "org.apache.commons.math3.util.OpenIntToFieldHashMap.Iterator#key()",
        "org.apache.commons.math3.util.OpenIntToFieldHashMap.Iterator#value()",
        "org.apache.commons.math3.linear.SparseFieldVector#setEntry(int,T extends FieldElement)",
        "org.apache.commons.math3.linear.SparseFieldVector#getDimension()",
        "org.apache.commons.math3.linear.ArrayFieldVector#getEntry(int)",
        "org.apache.commons.math3.util.OpenIntToFieldHashMap#iterator()",
        "org.apache.commons.math3.util.OpenIntToFieldHashMap.Iterator#advance()",
        "org.apache.commons.math3.linear.SparseFieldVector#SparseFieldVector(SparseFieldVector<T extends FieldElement>)"
    ],
    "org.apache.commons.math3.transform.FastHadamardTransformer#transform(UnivariateFunction,double,double,int,TransformType)": [
        "org.apache.commons.math3.transform.FastHadamardTransformer#transform(double[],TransformType)",
        "org.apache.commons.math3.analysis.FunctionUtils.sample(UnivariateFunction,double,double,int)"
    ],
    "org.apache.commons.math3.geometry.spherical.twod.Circle#wholeSpace()": ["org.apache.commons.math3.geometry.spherical.twod.SphericalPolygonsSet#SphericalPolygonsSet(double)"],
    "org.apache.commons.math3.fitting.GaussianCurveFitter#GaussianCurveFitter(double[],int)": [
        "org.apache.commons.math3.fitting.AbstractCurveFitter.<init>()",
        "org.apache.commons.math3.fitting.GaussianCurveFitter.<init>()"
    ],
    "org.apache.commons.math3.dfp.DfpDec#DfpDec(DfpField)": [
        "org.apache.commons.math3.dfp.DfpDec.<init>()",
        "org.apache.commons.math3.dfp.Dfp#Dfp(DfpField)"
    ],
    "org.apache.commons.math3.distribution.BetaDistribution.ChengBetaSampler.algorithmBC(RandomGenerator,double,double,double)": [
        "org.apache.commons.math3.random.SynchronizedRandomGenerator#nextDouble()",
        "org.apache.commons.math3.util.FastMath.log1p(double)",
        "org.apache.commons.math3.util.Precision.equals(double,double)",
        "org.apache.commons.math3.random.RandomAdaptor#nextDouble()",
        "org.apache.commons.math3.util.FastMath.exp(double)",
        "org.apache.commons.math3.util.FastMath.min(double,double)",
        "org.apache.commons.math3.random.RandomGeneratorFactory.createRandomGenerator(Random)$RandomGenerator$1#nextDouble()",
        "org.apache.commons.math3.util.FastMath.log(double)",
        "org.apache.commons.math3.random.BitsStreamGenerator#nextDouble()"
    ],
    "org.apache.commons.math3.stat.regression.AbstractMultipleLinearRegression#calculateResiduals()": [
        "org.apache.commons.math3.linear.ArrayRealVector#subtract(RealVector)",
        "org.apache.commons.math3.stat.regression.OLSMultipleLinearRegression#calculateBeta()",
        "org.apache.commons.math3.stat.regression.GLSMultipleLinearRegression#calculateBeta()",
        "org.apache.commons.math3.linear.OpenMapRealVector#subtract(RealVector)",
        "org.apache.commons.math3.linear.RealVector#subtract(RealVector)",
        "org.apache.commons.math3.linear.AbstractRealMatrix#operate(RealVector)",
        "org.apache.commons.math3.linear.RealVector.unmodifiableRealVector(RealVector)$RealVector$1#subtract(RealVector)"
    ],
    "org.apache.commons.math3.stat.descriptive.SynchronizedSummaryStatistics#addValue(double)": ["org.apache.commons.math3.stat.descriptive.SummaryStatistics#addValue(double)"],
    "org.apache.commons.math3.ml.neuralnet.Neuron#writeReplace()": ["org.apache.commons.math3.ml.neuralnet.Neuron.SerializationProxy#SerializationProxy(long,double[])"],
    "org.apache.commons.math3.optimization.direct.BaseAbstractMultivariateVectorOptimizer#optimizeInternal(int,FUNC extends MultivariateVectorFunction,OptimizationData[]...)": [
        "org.apache.commons.math3.optimization.direct.BaseAbstractMultivariateVectorOptimizer#checkParameters()",
        "org.apache.commons.math3.optimization.general.LevenbergMarquardtOptimizer#doOptimize()",
        "org.apache.commons.math3.optimization.direct.BaseAbstractMultivariateVectorOptimizer#parseOptimizationData(OptimizationData[]...)",
        "org.apache.commons.math3.optimization.general.GaussNewtonOptimizer#doOptimize()",
        "org.apache.commons.math3.optimization.direct.BaseAbstractMultivariateVectorOptimizer#setUp()",
        "org.apache.commons.math3.util.Incrementor.wrap(Incrementor)$Incrementor$1#setMaximalCount(int)",
        "org.apache.commons.math3.optimization.general.AbstractLeastSquaresOptimizer#setUp()",
        "org.apache.commons.math3.util.Incrementor#setMaximalCount(int)",
        "org.apache.commons.math3.util.Incrementor.wrap(Incrementor)$Incrementor$1#resetCount()",
        "org.apache.commons.math3.util.Incrementor#resetCount()"
    ],
    "org.apache.commons.math3.stat.descriptive.DescriptiveStatistics#getStandardDeviation()": [
        "org.apache.commons.math3.stat.descriptive.DescriptiveStatistics#getN()",
        "org.apache.commons.math3.stat.descriptive.SynchronizedDescriptiveStatistics#getN()",
        "org.apache.commons.math3.util.FastMath.sqrt(double)",
        "org.apache.commons.math3.stat.descriptive.DescriptiveStatistics#getVariance()"
    ],
    "org.apache.commons.math3.analysis.solvers.UnivariateSolverUtils.isBracketing(UnivariateFunction,double,double)": [
        "org.apache.commons.math3.analysis.FunctionUtils.multiply(DifferentiableUnivariateFunction[]...)$UnivariateFunction$1$UnivariateFunction$1#derivative()$UnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.polynomials.PolynomialSplineFunction#value(double)",
        "org.apache.commons.math3.analysis.function.Gaussian#value(double)",
        "org.apache.commons.math3.analysis.function.Tanh#value(double)",
        "org.apache.commons.math3.exception.util.LocalizedFormats.<staticinit>()",
        "org.apache.commons.math3.analysis.function.Inverse#value(double)",
        "org.apache.commons.math3.analysis.function.HarmonicOscillator#value(double)",
        "org.apache.commons.math3.analysis.FunctionUtils.fix1stArgument(BivariateFunction,double)$UnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.function.Asin#value(double)",
        "org.apache.commons.math3.analysis.function.Asinh#value(double)",
        "org.apache.commons.math3.analysis.FunctionUtils.multiply(UnivariateFunction[]...)$UnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.function.Atan#value(double)",
        "org.apache.commons.math3.analysis.FunctionUtils.toDifferentiableUnivariateFunction(UnivariateDifferentiableFunction)$DifferentiableUnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.function.Cbrt#value(double)",
        "org.apache.commons.math3.analysis.polynomials.PolynomialFunctionLagrangeForm#value(double)",
        "org.apache.commons.math3.analysis.function.Exp#value(double)",
        "org.apache.commons.math3.special.BesselJ#value(double)",
        "org.apache.commons.math3.analysis.polynomials.PolynomialFunctionNewtonForm#value(double)",
        "org.apache.commons.math3.analysis.FunctionUtils.add(UnivariateFunction[]...)$UnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.function.Sin#value(double)",
        "org.apache.commons.math3.analysis.function.Cos#value(double)",
        "org.apache.commons.math3.analysis.interpolation.UnivariatePeriodicInterpolator#interpolate(double[],double[])$UnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.function.Log10#value(double)",
        "org.apache.commons.math3.analysis.function.Sqrt#value(double)",
        "org.apache.commons.math3.analysis.function.Log#value(double)",
        "org.apache.commons.math3.analysis.function.Sinc#value(double)",
        "org.apache.commons.math3.ode.events.EventState#evaluateStep(StepInterpolator)$UnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.function.Minus#value(double)",
        "org.apache.commons.math3.analysis.integration.IterativeLegendreGaussIntegrator#stage(int)$UnivariateFunction$1#value(double)",
        "org.apache.commons.math3.optimization.general.NonLinearConjugateGradientOptimizer.LineSearchFunction#value(double)",
        "org.apache.commons.math3.analysis.function.Floor#value(double)",
        "org.apache.commons.math3.analysis.FunctionUtils.multiply(DifferentiableUnivariateFunction[]...)$DifferentiableUnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.FunctionUtils.combine(BivariateFunction,UnivariateFunction,UnivariateFunction)$UnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.FunctionUtils.add(DifferentiableUnivariateFunction[]...)$UnivariateFunction$1$UnivariateFunction$1#derivative()$UnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.function.Sinh#value(double)",
        "org.apache.commons.math3.analysis.FunctionUtils.multiply(UnivariateDifferentiableFunction[]...)$UnivariateDifferentiableFunction$1#value(double)",
        "org.apache.commons.math3.analysis.function.Tan#value(double)",
        "org.apache.commons.math3.distribution.AbstractRealDistribution#inverseCumulativeProbability(double)$UnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.FunctionUtils.add(DifferentiableUnivariateFunction[]...)$DifferentiableUnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.function.Ceil#value(double)",
        "org.apache.commons.math3.analysis.function.Logistic#value(double)",
        "org.apache.commons.math3.analysis.function.Signum#value(double)",
        "org.apache.commons.math3.analysis.function.Constant#value(double)",
        "org.apache.commons.math3.analysis.function.Atanh#value(double)",
        "org.apache.commons.math3.analysis.FunctionUtils.compose(DifferentiableUnivariateFunction[]...)$UnivariateFunction$1$UnivariateFunction$1#derivative()$UnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.FunctionUtils.add(UnivariateDifferentiableFunction[]...)$UnivariateDifferentiableFunction$1#value(double)",
        "org.apache.commons.math3.analysis.function.Abs#value(double)",
        "org.apache.commons.math3.analysis.differentiation.FiniteDifferencesDifferentiator#differentiate(UnivariateFunction)$UnivariateDifferentiableFunction$1#value(double)",
        "org.apache.commons.math3.analysis.function.Identity#value(double)",
        "org.apache.commons.math3.analysis.function.Expm1#value(double)",
        "org.apache.commons.math3.analysis.function.Logit#value(double)",
        "org.apache.commons.math3.analysis.function.Log1p#value(double)",
        "org.apache.commons.math3.analysis.FunctionUtils.fix2ndArgument(BivariateFunction,double)$UnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.FunctionUtils.toUnivariateDifferential(DifferentiableUnivariateFunction)$UnivariateDifferentiableFunction$1#value(double)",
        "org.apache.commons.math3.analysis.FunctionUtils.toDifferentiableUnivariateFunction(UnivariateDifferentiableFunction)$UnivariateFunction$1$UnivariateFunction$1#derivative()$UnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.polynomials.PolynomialFunction#value(double)",
        "org.apache.commons.math3.analysis.function.Rint#value(double)",
        "org.apache.commons.math3.analysis.FunctionUtils.compose(UnivariateFunction[]...)$UnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.function.Cosh#value(double)",
        "org.apache.commons.math3.optimization.direct.PowellOptimizer.LineSearch#search(double[],double[])$UnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.FunctionUtils.compose(DifferentiableUnivariateFunction[]...)$DifferentiableUnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.function.Acosh#value(double)",
        "org.apache.commons.math3.analysis.function.StepFunction#value(double)",
        "org.apache.commons.math3.analysis.FunctionUtils.compose(UnivariateDifferentiableFunction[]...)$UnivariateDifferentiableFunction$1#value(double)",
        "org.apache.commons.math3.analysis.function.Acos#value(double)",
        "org.apache.commons.math3.analysis.function.Power#value(double)",
        "org.apache.commons.math3.optim.nonlinear.scalar.LineSearch#search(double[],double[])$UnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.function.Sigmoid#value(double)",
        "org.apache.commons.math3.analysis.function.Ulp#value(double)"
    ],
    "org.apache.commons.math3.linear.AbstractFieldMatrix#scalarAdd(T extends FieldElement)": [
        "org.apache.commons.math3.linear.SparseFieldMatrix#getEntry(int,int)",
        "org.apache.commons.math3.linear.BlockFieldMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.SparseFieldMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.SparseFieldMatrix#setEntry(int,int,T extends FieldElement)",
        "org.apache.commons.math3.linear.Array2DRowFieldMatrix#setEntry(int,int,T extends FieldElement)",
        "org.apache.commons.math3.linear.BlockFieldMatrix#setEntry(int,int,T extends FieldElement)",
        "org.apache.commons.math3.linear.BlockFieldMatrix#createMatrix(int,int)",
        "org.apache.commons.math3.linear.Array2DRowFieldMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.SparseFieldMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.BlockFieldMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.Array2DRowFieldMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.SparseFieldMatrix#createMatrix(int,int)",
        "org.apache.commons.math3.linear.Array2DRowFieldMatrix#getEntry(int,int)",
        "org.apache.commons.math3.linear.Array2DRowFieldMatrix#createMatrix(int,int)",
        "org.apache.commons.math3.linear.BlockFieldMatrix#getEntry(int,int)"
    ],
    "org.apache.commons.math3.optim.univariate.MultiStartUnivariateOptimizer#optimize(OptimizationData[]...)": ["org.apache.commons.math3.optim.univariate.UnivariateOptimizer#optimize(OptimizationData[]...)"],
    "org.apache.commons.math3.analysis.function.Gaussian.Parametric#gradient(double,double[]...)": [
        "org.apache.commons.math3.analysis.function.Gaussian.value(double,double,double)",
        "org.apache.commons.math3.analysis.function.Gaussian.Parametric#validateParameters(double[])"
    ],
    "org.apache.commons.math3.linear.ConjugateGradient#solveInPlace(RealLinearOperator,RealLinearOperator,RealVector,RealVector)": [
        "org.apache.commons.math3.linear.RealVector#getNorm()",
        "org.apache.commons.math3.linear.ArrayRealVector#copy()",
        "org.apache.commons.math3.linear.NonPositiveDefiniteOperatorException#NonPositiveDefiniteOperatorException()",
        "org.apache.commons.math3.linear.RealVector.unmodifiableRealVector(RealVector)",
        "org.apache.commons.math3.util.IterationManager#fireIterationStartedEvent(IterationEvent)",
        "org.apache.commons.math3.util.IterationManager#fireTerminationEvent(IterationEvent)",
        "org.apache.commons.math3.linear.ArrayRealVector#dotProduct(RealVector)",
        "org.apache.commons.math3.linear.JacobiPreconditioner#operate(RealVector)",
        "org.apache.commons.math3.linear.IterativeLinearSolver#getIterationManager()",
        "org.apache.commons.math3.linear.RealVector.unmodifiableRealVector(RealVector)$RealVector$1#getNorm()",
        "org.apache.commons.math3.linear.RealVector#dotProduct(RealVector)",
        "org.apache.commons.math3.linear.RealVector.unmodifiableRealVector(RealVector)$RealVector$1#dotProduct(RealVector)",
        "org.apache.commons.math3.linear.ArrayRealVector#combineToSelf(double,double,RealVector)",
        "org.apache.commons.math3.linear.DefaultIterativeLinearSolverEvent#DefaultIterativeLinearSolverEvent(Object,int,RealVector,RealVector,RealVector,double)",
        "org.apache.commons.math3.util.IterationManager#incrementIterationCount()",
        "org.apache.commons.math3.exception.MathIllegalArgumentException#getContext()",
        "org.apache.commons.math3.util.IterationManager#fireIterationPerformedEvent(IterationEvent)",
        "org.apache.commons.math3.linear.RealVector.unmodifiableRealVector(RealVector)$RealVector$1#copy()",
        "org.apache.commons.math3.linear.ArrayRealVector#getNorm()",
        "org.apache.commons.math3.linear.RealVector.unmodifiableRealVector(RealVector)$RealVector$1#combine(double,double,RealVector)",
        "org.apache.commons.math3.linear.OpenMapRealVector#setSubVector(int,RealVector)",
        "org.apache.commons.math3.linear.JacobiPreconditioner#sqrt()$RealLinearOperator$1#operate(RealVector)",
        "org.apache.commons.math3.util.IterationManager#fireInitializationEvent(IterationEvent)",
        "org.apache.commons.math3.exception.util.ExceptionContext#setValue(String,Object)",
        "org.apache.commons.math3.util.IterationManager#resetIterationCount()",
        "org.apache.commons.math3.linear.ArrayRealVector#setSubVector(int,RealVector)",
        "org.apache.commons.math3.linear.ConjugateGradient.<staticinit>()",
        "org.apache.commons.math3.util.IterationManager#getIterations()",
        "org.apache.commons.math3.linear.PreconditionedIterativeLinearSolver.checkParameters(RealLinearOperator,RealLinearOperator,RealVector,RealVector)",
        "org.apache.commons.math3.linear.RealVector#combineToSelf(double,double,RealVector)",
        "org.apache.commons.math3.linear.AbstractRealMatrix#operate(RealVector)",
        "org.apache.commons.math3.linear.ArrayRealVector#combine(double,double,RealVector)",
        "org.apache.commons.math3.linear.RealVector.unmodifiableRealVector(RealVector)$RealVector$1#setSubVector(int,RealVector)",
        "org.apache.commons.math3.linear.RealVector#combine(double,double,RealVector)",
        "org.apache.commons.math3.linear.OpenMapRealVector#copy()",
        "org.apache.commons.math3.linear.RealVector.unmodifiableRealVector(RealVector)$RealVector$1#combineToSelf(double,double,RealVector)"
    ],
    "org.apache.commons.math3.linear.RRQRDecomposition#RRQRDecomposition(RealMatrix)": ["org.apache.commons.math3.linear.RRQRDecomposition#RRQRDecomposition(RealMatrix,double)"],
    "org.apache.commons.math3.ml.neuralnet.FeatureInitializerFactory.randomize(RealDistribution,FeatureInitializer)$FeatureInitializer$1#value()": [
        "org.apache.commons.math3.distribution.ExponentialDistribution#sample()",
        "org.apache.commons.math3.distribution.AbstractRealDistribution#sample()",
        "org.apache.commons.math3.ml.neuralnet.FeatureInitializerFactory.function(UnivariateFunction,double,double)$FeatureInitializer$1#value()",
        "org.apache.commons.math3.distribution.ParetoDistribution#sample()",
        "org.apache.commons.math3.distribution.UniformRealDistribution#sample()",
        "org.apache.commons.math3.ml.neuralnet.FeatureInitializerFactory.randomize(RealDistribution,FeatureInitializer)$FeatureInitializer$1#value()",
        "org.apache.commons.math3.distribution.NormalDistribution#sample()",
        "org.apache.commons.math3.distribution.ConstantRealDistribution#sample()",
        "org.apache.commons.math3.distribution.EnumeratedRealDistribution#sample()",
        "org.apache.commons.math3.distribution.GammaDistribution#sample()",
        "org.apache.commons.math3.distribution.BetaDistribution#sample()",
        "org.apache.commons.math3.distribution.LogNormalDistribution#sample()"
    ],
    "org.apache.commons.math3.analysis.solvers.AbstractUnivariateDifferentiableSolver#AbstractUnivariateDifferentiableSolver(double,double,double)": [
        "org.apache.commons.math3.analysis.solvers.BaseAbstractUnivariateSolver#BaseAbstractUnivariateSolver(double,double,double)",
        "org.apache.commons.math3.analysis.solvers.AbstractUnivariateDifferentiableSolver.<init>()"
    ],
    "org.apache.commons.math3.fraction.BigFraction#pow(long)": [
        "org.apache.commons.math3.fraction.BigFraction#BigFraction(BigInteger,BigInteger)",
        "org.apache.commons.math3.fraction.BigFraction.<staticinit>()",
        "org.apache.commons.math3.util.ArithmeticUtils.pow(BigInteger,long)"
    ],
    "org.apache.commons.math3.geometry.spherical.twod.SphericalPolygonsSet#getEnclosingCap()": [
        "org.apache.commons.math3.geometry.euclidean.threed.Vector3D#getNorm()",
        "org.apache.commons.math3.util.FastMath.acos(double)",
        "org.apache.commons.math3.geometry.partitioning.AbstractRegion#isFull()",
        "org.apache.commons.math3.geometry.enclosing.EnclosingBall#getCenter()",
        "org.apache.commons.math3.geometry.enclosing.WelzlEncloser#enclose(Iterable<P extends Point>)",
        "org.apache.commons.math3.geometry.partitioning.BSPTree#getMinus()",
        "org.apache.commons.math3.geometry.spherical.twod.S2Point#S2Point(Vector3D)",
        "org.apache.commons.math3.geometry.partitioning.AbstractRegion#isEmpty(BSPTree<S extends Space>)",
        "org.apache.commons.math3.geometry.spherical.twod.Edge#getEnd()",
        "org.apache.commons.math3.geometry.partitioning.AbstractSubHyperplane#getHyperplane()",
        "org.apache.commons.math3.geometry.spherical.twod.S2Point#negate()",
        "org.apache.commons.math3.geometry.spherical.twod.Circle#getPole()",
        "org.apache.commons.math3.geometry.spherical.twod.SphericalPolygonsSet#getInsidePoints()",
        "org.apache.commons.math3.geometry.spherical.twod.Vertex#getLocation()",
        "org.apache.commons.math3.geometry.partitioning.BoundaryProjection#getOffset()",
        "org.apache.commons.math3.geometry.partitioning.AbstractRegion#getTolerance()",
        "org.apache.commons.math3.geometry.enclosing.EnclosingBall#getRadius()",
        "org.apache.commons.math3.geometry.enclosing.EnclosingBall#getSupport()",
        "org.apache.commons.math3.geometry.spherical.twod.SphericalPolygonsSet#getOutsidePoints()",
        "org.apache.commons.math3.geometry.euclidean.threed.SphereGenerator.<init>()",
        "org.apache.commons.math3.util.FastMath.<staticinit>()",
        "org.apache.commons.math3.geometry.partitioning.AbstractRegion#isEmpty()",
        "org.apache.commons.math3.geometry.partitioning.BoundaryProjection#getProjected()",
        "org.apache.commons.math3.geometry.partitioning.BSPTree#getPlus()",
        "org.apache.commons.math3.geometry.partitioning.BSPTree#getCut()",
        "org.apache.commons.math3.geometry.spherical.twod.SphericalPolygonsSet#getBoundaryLoops()",
        "org.apache.commons.math3.geometry.partitioning.AbstractRegion#getTree(boolean)",
        "org.apache.commons.math3.geometry.spherical.twod.Vertex#getOutgoing()",
        "org.apache.commons.math3.geometry.spherical.twod.S2Point.<staticinit>()",
        "org.apache.commons.math3.geometry.enclosing.WelzlEncloser#WelzlEncloser(double,SupportBallGenerator<S extends Space, P extends Point>)",
        "org.apache.commons.math3.geometry.spherical.twod.S2Point#getVector()",
        "org.apache.commons.math3.geometry.partitioning.AbstractRegion#isFull(BSPTree<S extends Space>)",
        "org.apache.commons.math3.geometry.partitioning.AbstractRegion#projectToBoundary(Point<S extends Space>)"
    ],
    "org.apache.commons.math3.analysis.solvers.BrentSolver#BrentSolver(double)": [
        "org.apache.commons.math3.analysis.solvers.BrentSolver.<init>()",
        "org.apache.commons.math3.analysis.solvers.AbstractUnivariateSolver#AbstractUnivariateSolver(double)"
    ],
    "org.apache.commons.math3.linear.Array2DRowRealMatrix#Array2DRowRealMatrix(double[][])": [
        "org.apache.commons.math3.linear.AbstractRealMatrix#AbstractRealMatrix()",
        "org.apache.commons.math3.linear.Array2DRowRealMatrix.<init>()",
        "org.apache.commons.math3.linear.Array2DRowRealMatrix#copyIn(double[][])"
    ],
    "org.apache.commons.math3.linear.SchurTransformer#findSmallSubDiagonalElement(int,double)": ["org.apache.commons.math3.util.FastMath.abs(double)"],
    "org.apache.commons.math3.analysis.differentiation.SparseGradient#abs()": ["org.apache.commons.math3.analysis.differentiation.SparseGradient#negate()"],
    "org.apache.commons.math3.util.MathArrays.shuffle(int[],int,Position,RandomGenerator)": [
        "org.apache.commons.math3.distribution.UniformIntegerDistribution#sample()",
        "org.apache.commons.math3.exception.MathInternalError#MathInternalError()",
        "org.apache.commons.math3.distribution.UniformIntegerDistribution#UniformIntegerDistribution(RandomGenerator,int,int)",
        "org.apache.commons.math3.util.MathArrays.Position.<staticinit>()"
    ],
    "org.apache.commons.math3.linear.OpenMapRealMatrix#setEntry(int,int,double)": [
        "org.apache.commons.math3.util.OpenIntToDoubleHashMap#remove(int)",
        "org.apache.commons.math3.util.OpenIntToDoubleHashMap#put(int,double)",
        "org.apache.commons.math3.linear.MatrixUtils.checkRowIndex(AnyMatrix,int)",
        "org.apache.commons.math3.linear.OpenMapRealMatrix#computeKey(int,int)",
        "org.apache.commons.math3.linear.MatrixUtils.checkColumnIndex(AnyMatrix,int)"
    ],
    "org.apache.commons.math3.distribution.EnumeratedRealDistribution#getSupportUpperBound()": [
        "org.apache.commons.math3.util.Pair#getValue()",
        "org.apache.commons.math3.distribution.EnumeratedDistribution#getPmf()",
        "org.apache.commons.math3.util.Pair#getKey()",
        "org.apache.commons.math3.optim.PointVectorValuePair#getValue()",
        "org.apache.commons.math3.optimization.PointVectorValuePair#getValue()"
    ],
    "org.apache.commons.math3.distribution.BinomialDistribution#logProbability(int)": ["org.apache.commons.math3.distribution.SaddlePointExpansion.logBinomialProbability(int,int,double,double)"],
    "org.apache.commons.math3.complex.ComplexFormat#ComplexFormat(String,NumberFormat)": ["org.apache.commons.math3.complex.ComplexFormat#ComplexFormat(String,NumberFormat,NumberFormat)"],
    "org.apache.commons.math3.exception.MathIllegalStateException#MathIllegalStateException(Throwable,Localizable,Object[]...)": [
        "org.apache.commons.math3.exception.MathIllegalStateException.<init>()",
        "org.apache.commons.math3.exception.util.ExceptionContext#addMessage(Localizable,Object[]...)",
        "org.apache.commons.math3.exception.util.ExceptionContext#ExceptionContext(Throwable)"
    ],
    "org.apache.commons.math3.optim.BaseMultiStartMultivariateOptimizer#doOptimize()": [
        "org.apache.commons.math3.random.SobolSequenceGenerator#nextVector()",
        "org.apache.commons.math3.optim.BaseOptimizer#getEvaluations()",
        "org.apache.commons.math3.optim.nonlinear.scalar.MultiStartMultivariateOptimizer#clear()",
        "org.apache.commons.math3.optim.nonlinear.vector.JacobianMultivariateVectorOptimizer#optimize(OptimizationData[]...)",
        "org.apache.commons.math3.userguide.LowDiscrepancyGeneratorComparison.Display#Display()$RandomVectorGenerator$1#nextVector()",
        "org.apache.commons.math3.optim.InitialGuess#InitialGuess(double[])",
        "org.apache.commons.math3.optim.BaseMultivariateOptimizer#getUpperBound()",
        "org.apache.commons.math3.random.UnitSphereRandomVectorGenerator#nextVector()",
        "org.apache.commons.math3.optim.nonlinear.vector.MultiStartMultivariateVectorOptimizer#getOptima()",
        "org.apache.commons.math3.exception.MathIllegalStateException#MathIllegalStateException()",
        "org.apache.commons.math3.optim.BaseMultiStartMultivariateOptimizer#getEvaluations()",
        "org.apache.commons.math3.optim.BaseMultivariateOptimizer#getStartPoint()",
        "org.apache.commons.math3.optim.BaseMultivariateOptimizer#getLowerBound()",
        "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer#optimize(OptimizationData[]...)",
        "org.apache.commons.math3.optim.nonlinear.scalar.gradient.NonLinearConjugateGradientOptimizer#optimize(OptimizationData[]...)",
        "org.apache.commons.math3.optim.nonlinear.vector.MultivariateVectorOptimizer#optimize(OptimizationData[]...)",
        "org.apache.commons.math3.optim.linear.LinearOptimizer#optimize(OptimizationData[]...)",
        "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizer#optimize(OptimizationData[]...)",
        "org.apache.commons.math3.random.HaltonSequenceGenerator#nextVector()",
        "org.apache.commons.math3.optim.nonlinear.vector.MultiStartMultivariateVectorOptimizer#clear()",
        "org.apache.commons.math3.optim.univariate.MultiStartUnivariateOptimizer#getEvaluations()",
        "org.apache.commons.math3.optim.MaxEval#MaxEval(int)",
        "org.apache.commons.math3.optim.nonlinear.scalar.MultiStartMultivariateOptimizer#getOptima()",
        "org.apache.commons.math3.optim.BaseMultivariateOptimizer#optimize(OptimizationData[]...)",
        "org.apache.commons.math3.optim.nonlinear.vector.jacobian.AbstractLeastSquaresOptimizer#optimize(OptimizationData[]...)",
        "org.apache.commons.math3.random.CorrelatedRandomVectorGenerator#nextVector()",
        "org.apache.commons.math3.optim.BaseMultiStartMultivariateOptimizer#optimize(OptimizationData[]...)",
        "org.apache.commons.math3.optim.nonlinear.scalar.MultivariateOptimizer#optimize(OptimizationData[]...)",
        "org.apache.commons.math3.random.UncorrelatedRandomVectorGenerator#nextVector()",
        "org.apache.commons.math3.optim.linear.SimplexSolver#optimize(OptimizationData[]...)",
        "org.apache.commons.math3.optim.BaseOptimizer#getMaxEvaluations()",
        "org.apache.commons.math3.optim.nonlinear.scalar.GradientMultivariateOptimizer#optimize(OptimizationData[]...)"
    ],
    "org.apache.commons.math3.random.GaussianRandomGenerator#GaussianRandomGenerator(RandomGenerator)": ["org.apache.commons.math3.random.GaussianRandomGenerator.<init>()"],
    "org.apache.commons.math3.geometry.euclidean.threed.Vector3D#getNorm()": ["org.apache.commons.math3.util.FastMath.sqrt(double)"],
    "org.apache.commons.math3.linear.DiagonalMatrix#ensureZero(double)": [
        "org.apache.commons.math3.util.FastMath.abs(double)",
        "org.apache.commons.math3.util.Precision.equals(double,double,int)"
    ],
    "org.apache.commons.math3.filter.KalmanFilter#getStateDimension()": [
        "org.apache.commons.math3.linear.ArrayRealVector#getDimension()",
        "org.apache.commons.math3.linear.OpenMapRealVector#getDimension()",
        "org.apache.commons.math3.linear.RealVector.unmodifiableRealVector(RealVector)$RealVector$1#getDimension()"
    ],
    "org.apache.commons.math3.stat.Frequency#addValue(char)": ["org.apache.commons.math3.stat.Frequency#addValue(long)"],
    "org.apache.commons.math3.linear.RealVector#dotProduct(RealVector)": [
        "org.apache.commons.math3.linear.OpenMapRealVector#getDimension()",
        "org.apache.commons.math3.linear.ArrayRealVector#checkVectorDimensions(RealVector)",
        "org.apache.commons.math3.linear.ArrayRealVector#getDimension()",
        "org.apache.commons.math3.linear.ArrayRealVector#getEntry(int)",
        "org.apache.commons.math3.linear.RealVector.unmodifiableRealVector(RealVector)$RealVector$1#getDimension()",
        "org.apache.commons.math3.linear.OpenMapRealVector#getEntry(int)",
        "org.apache.commons.math3.linear.RealVector#checkVectorDimensions(RealVector)",
        "org.apache.commons.math3.linear.RealVector.unmodifiableRealVector(RealVector)$RealVector$1#getEntry(int)"
    ],
    "org.apache.commons.math3.genetics.BinaryChromosome#BinaryChromosome(List<Integer>)": [
        "org.apache.commons.math3.genetics.BinaryChromosome.<init>()",
        "org.apache.commons.math3.genetics.AbstractListChromosome#AbstractListChromosome(List<T>)"
    ],
    "org.apache.commons.math3.complex.Complex#multiply(double)": [
        "org.apache.commons.math3.complex.Complex.<staticinit>()",
        "org.apache.commons.math3.complex.Complex#createComplex(double,double)"
    ],
    "org.apache.commons.math3.linear.PreconditionedIterativeLinearSolver#solve(RealLinearOperator,RealLinearOperator,RealVector)": [
        "org.apache.commons.math3.linear.DiagonalMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.Array2DRowRealMatrix#getColumnDimension()",
        "org.apache.commons.math3.util.MathUtils.checkNotNull(Object)",
        "org.apache.commons.math3.linear.ArrayRealVector#ArrayRealVector(int)",
        "org.apache.commons.math3.linear.OpenMapRealMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.JacobiPreconditioner#getColumnDimension()",
        "org.apache.commons.math3.linear.ConjugateGradient#solveInPlace(RealLinearOperator,RealLinearOperator,RealVector,RealVector)",
        "org.apache.commons.math3.linear.SymmLQ#solveInPlace(RealLinearOperator,RealLinearOperator,RealVector,RealVector)",
        "org.apache.commons.math3.linear.BlockRealMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.JacobiPreconditioner#sqrt()$RealLinearOperator$1#getColumnDimension()"
    ],
    "org.apache.commons.math3.geometry.partitioning.AbstractRegion#isEmpty(BSPTree<S extends Space>)": [
        "org.apache.commons.math3.geometry.partitioning.BSPTree#getMinus()",
        "org.apache.commons.math3.geometry.partitioning.AbstractRegion#isEmpty(BSPTree<S extends Space>)",
        "org.apache.commons.math3.geometry.partitioning.BSPTree#getAttribute()",
        "org.apache.commons.math3.geometry.partitioning.BSPTree#getPlus()",
        "org.apache.commons.math3.geometry.partitioning.BSPTree#getCut()"
    ],
    "org.apache.commons.math3.linear.AbstractFieldMatrix#copySubMatrix(int[],int[],T extends FieldElement[][])": [
        "org.apache.commons.math3.linear.SparseFieldMatrix#getEntry(int,int)",
        "org.apache.commons.math3.linear.Array2DRowFieldMatrix#getEntry(int,int)",
        "org.apache.commons.math3.linear.MatrixDimensionMismatchException#MatrixDimensionMismatchException(int,int,int,int)",
        "org.apache.commons.math3.linear.BlockFieldMatrix#getEntry(int,int)",
        "org.apache.commons.math3.linear.AbstractFieldMatrix#checkSubMatrixIndex(int[],int[])"
    ],
    "org.apache.commons.math3.analysis.differentiation.DerivativeStructure.atan2(DerivativeStructure,DerivativeStructure)": ["org.apache.commons.math3.analysis.differentiation.DerivativeStructure#atan2(DerivativeStructure)"],
    "org.apache.commons.math3.stat.StatUtils.max(double[],int,int)": [
        "org.apache.commons.math3.stat.descriptive.moment.Skewness#evaluate(double[],int,int)",
        "org.apache.commons.math3.stat.descriptive.moment.Variance#evaluate(double[],int,int)",
        "org.apache.commons.math3.stat.descriptive.moment.SemiVariance#evaluate(double[],int,int)",
        "org.apache.commons.math3.stat.descriptive.moment.GeometricMean#evaluate(double[],int,int)",
        "org.apache.commons.math3.stat.descriptive.summary.SumOfLogs#evaluate(double[],int,int)",
        "org.apache.commons.math3.stat.descriptive.moment.StandardDeviation#evaluate(double[],int,int)",
        "org.apache.commons.math3.stat.descriptive.summary.Sum#evaluate(double[],int,int)",
        "org.apache.commons.math3.stat.descriptive.rank.Min#evaluate(double[],int,int)",
        "org.apache.commons.math3.stat.descriptive.rank.Percentile#evaluate(double[],int,int)",
        "org.apache.commons.math3.stat.descriptive.rank.Max#evaluate(double[],int,int)",
        "org.apache.commons.math3.stat.StatUtils.<staticinit>()",
        "org.apache.commons.math3.stat.descriptive.summary.SumOfSquares#evaluate(double[],int,int)",
        "org.apache.commons.math3.stat.descriptive.moment.Mean#evaluate(double[],int,int)",
        "org.apache.commons.math3.stat.descriptive.summary.Product#evaluate(double[],int,int)",
        "org.apache.commons.math3.stat.descriptive.moment.Kurtosis#evaluate(double[],int,int)",
        "org.apache.commons.math3.stat.descriptive.AbstractStorelessUnivariateStatistic#evaluate(double[],int,int)"
    ],
    "org.apache.commons.math3.util.MedianOf3PivotingStrategy#pivotIndex(double[],int,int)": ["org.apache.commons.math3.util.MathArrays.verifyValues(double[],int,int)"],
    "org.apache.commons.math3.linear.Array2DRowFieldMatrix#Array2DRowFieldMatrix(Field<T extends FieldElement>,T extends FieldElement[])": [
        "org.apache.commons.math3.util.MathArrays.buildArray(Field<T>,int,int)",
        "org.apache.commons.math3.linear.AbstractFieldMatrix#getField()",
        "org.apache.commons.math3.linear.AbstractFieldMatrix#AbstractFieldMatrix(Field<T extends FieldElement>)",
        "org.apache.commons.math3.linear.Array2DRowFieldMatrix.<init>()"
    ],
    "org.apache.commons.math3.geometry.euclidean.threed.Vector3DFormat#Vector3DFormat(String,String,String)": [
        "org.apache.commons.math3.geometry.euclidean.threed.Vector3DFormat.<init>()",
        "org.apache.commons.math3.util.CompositeFormat.getDefaultNumberFormat()",
        "org.apache.commons.math3.geometry.VectorFormat#VectorFormat(String,String,String,NumberFormat)"
    ],
    "org.apache.commons.math3.genetics.GeneticAlgorithm#evolve(Population,StoppingCondition)": [
        "org.apache.commons.math3.userguide.genetics.HelloWorldExample.main(String[])$StoppingCondition$1#isSatisfied(Population)",
        "org.apache.commons.math3.genetics.FixedGenerationCount#isSatisfied(Population)",
        "org.apache.commons.math3.genetics.FixedElapsedTime#isSatisfied(Population)",
        "org.apache.commons.math3.genetics.GeneticAlgorithm#nextGeneration(Population)"
    ],
    "org.apache.commons.math3.analysis.interpolation.InterpolatingMicrosphere#InterpolatingMicrosphere(int,int,double,double,double)": ["org.apache.commons.math3.analysis.interpolation.InterpolatingMicrosphere.<init>()"],
    "org.apache.commons.math3.geometry.euclidean.oned.Interval#getMidPoint()": ["org.apache.commons.math3.geometry.euclidean.oned.Interval#getBarycenter()"],
    "org.apache.commons.math3.analysis.differentiation.DSCompiler#DSCompiler(int,int,DSCompiler,DSCompiler)": [
        "org.apache.commons.math3.analysis.differentiation.DSCompiler.compileDerivativesIndirection(int,int,DSCompiler,DSCompiler)",
        "org.apache.commons.math3.analysis.differentiation.DSCompiler.compileLowerIndirection(int,int,DSCompiler,DSCompiler)",
        "org.apache.commons.math3.analysis.differentiation.DSCompiler.compileSizes(int,int,DSCompiler)",
        "org.apache.commons.math3.analysis.differentiation.DSCompiler.<init>()",
        "org.apache.commons.math3.analysis.differentiation.DSCompiler.compileCompositionIndirection(int,int,DSCompiler,DSCompiler,int[][],int[][])",
        "org.apache.commons.math3.analysis.differentiation.DSCompiler.compileMultiplicationIndirection(int,int,DSCompiler,DSCompiler,int[])"
    ],
    "org.apache.commons.math3.stat.descriptive.moment.ThirdMoment.copy(ThirdMoment,ThirdMoment)": [
        "org.apache.commons.math3.util.MathUtils.checkNotNull(Object)",
        "org.apache.commons.math3.stat.descriptive.moment.SecondMoment.copy(SecondMoment,SecondMoment)"
    ],
    "org.apache.commons.math3.analysis.differentiation.SparseGradient#add(SparseGradient)": ["org.apache.commons.math3.analysis.differentiation.SparseGradient#SparseGradient(double,Map<Integer, Double>)"],
    "org.apache.commons.math3.random.Well44497a#Well44497a(int[])": [
        "org.apache.commons.math3.random.Well44497a.<init>()",
        "org.apache.commons.math3.random.AbstractWell#AbstractWell(int,int,int,int,int[])",
        "org.apache.commons.math3.random.Well44497a.<staticinit>()"
    ],
    "org.apache.commons.math3.analysis.solvers.BisectionSolver#BisectionSolver(double,double)": [
        "org.apache.commons.math3.analysis.solvers.BisectionSolver.<init>()",
        "org.apache.commons.math3.analysis.solvers.AbstractUnivariateSolver#AbstractUnivariateSolver(double,double)"
    ],
    "org.apache.commons.math3.complex.ComplexField.getInstance()": ["org.apache.commons.math3.complex.ComplexField.LazyHolder.<staticinit>()"],
    "org.apache.commons.math3.stat.inference.TestUtils.tTest(double,double[])": [
        "org.apache.commons.math3.stat.inference.TTest#tTest(double,double[])",
        "org.apache.commons.math3.stat.inference.TestUtils.<staticinit>()"
    ],
    "org.apache.commons.math3.distribution.GumbelDistribution.<staticinit>()": ["org.apache.commons.math3.util.FastMath.<staticinit>()"],
    "org.apache.commons.math3.ode.nonstiff.AdamsFieldIntegrator#AdamsFieldIntegrator(Field<T extends RealFieldElement>,String,int,int,double,double,double[],double[])": [
        "org.apache.commons.math3.ode.nonstiff.AdamsFieldIntegrator.<init>()",
        "org.apache.commons.math3.ode.MultistepFieldIntegrator#MultistepFieldIntegrator(Field<T extends RealFieldElement>,String,int,int,double,double,double[],double[])",
        "org.apache.commons.math3.ode.nonstiff.AdamsNordsieckFieldTransformer.getInstance(Field<T extends RealFieldElement>,int)"
    ],
    "org.apache.commons.math3.fitting.SimpleCurveFitter#getProblem(Collection<WeightedObservedPoint>)": [
        "org.apache.commons.math3.fitting.leastsquares.LeastSquaresBuilder#maxIterations(int)",
        "org.apache.commons.math3.fitting.leastsquares.LeastSquaresBuilder.<init>()",
        "org.apache.commons.math3.fitting.leastsquares.LeastSquaresBuilder#target(double[])",
        "org.apache.commons.math3.fitting.leastsquares.LeastSquaresBuilder#model(MultivariateVectorFunction,MultivariateMatrixFunction)",
        "org.apache.commons.math3.fitting.WeightedObservedPoint#getWeight()",
        "org.apache.commons.math3.fitting.AbstractCurveFitter.TheoreticalValuesFunction#getModelFunctionJacobian()",
        "org.apache.commons.math3.fitting.AbstractCurveFitter.TheoreticalValuesFunction#getModelFunction()",
        "org.apache.commons.math3.fitting.WeightedObservedPoint#getY()",
        "org.apache.commons.math3.fitting.leastsquares.LeastSquaresBuilder#build()",
        "org.apache.commons.math3.fitting.leastsquares.LeastSquaresBuilder#maxEvaluations(int)",
        "org.apache.commons.math3.fitting.leastsquares.LeastSquaresBuilder#weight(RealMatrix)",
        "org.apache.commons.math3.linear.DiagonalMatrix#DiagonalMatrix(double[])",
        "org.apache.commons.math3.fitting.leastsquares.LeastSquaresBuilder#start(double[])",
        "org.apache.commons.math3.fitting.AbstractCurveFitter.TheoreticalValuesFunction#TheoreticalValuesFunction(ParametricUnivariateFunction,Collection<WeightedObservedPoint>)"
    ],
    "org.apache.commons.math3.stat.clustering.EuclideanIntegerPoint#EuclideanIntegerPoint(int[])": ["org.apache.commons.math3.stat.clustering.EuclideanIntegerPoint.<init>()"],
    "org.apache.commons.math3.linear.AbstractFieldMatrix#operate(T extends FieldElement[])": [
        "org.apache.commons.math3.linear.SparseFieldMatrix#getEntry(int,int)",
        "org.apache.commons.math3.linear.BlockFieldMatrix#getColumnDimension()",
        "org.apache.commons.math3.util.BigRealField#getZero()",
        "org.apache.commons.math3.analysis.differentiation.SparseGradient#getField()$Field$1#getZero()",
        "org.apache.commons.math3.linear.SparseFieldMatrix#getRowDimension()",
        "org.apache.commons.math3.util.Decimal64Field#getZero()",
        "org.apache.commons.math3.dfp.DfpField#getZero()",
        "org.apache.commons.math3.linear.Array2DRowFieldMatrix#getColumnDimension()",
        "org.apache.commons.math3.exception.DimensionMismatchException#DimensionMismatchException(int,int)",
        "org.apache.commons.math3.linear.SparseFieldMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.BlockFieldMatrix#getRowDimension()",
        "org.apache.commons.math3.analysis.differentiation.DerivativeStructure#getField()$Field$1#getZero()",
        "org.apache.commons.math3.fraction.FractionField#getZero()",
        "org.apache.commons.math3.linear.Array2DRowFieldMatrix#getRowDimension()",
        "org.apache.commons.math3.complex.ComplexField#getZero()",
        "org.apache.commons.math3.linear.Array2DRowFieldMatrix#getEntry(int,int)",
        "org.apache.commons.math3.fraction.BigFractionField#getZero()",
        "org.apache.commons.math3.util.MathArrays.buildArray(Field<T>,int)",
        "org.apache.commons.math3.linear.BlockFieldMatrix#getEntry(int,int)"
    ],
    "org.apache.commons.math3.ode.sampling.AbstractFieldStepInterpolator#AbstractFieldStepInterpolator(boolean,FieldODEStateAndDerivative<T extends RealFieldElement>,FieldODEStateAndDerivative<T extends RealFieldElement>,FieldODEStateAndDerivative<T extends RealFieldElement>,FieldODEStateAndDerivative<T extends RealFieldElement>,FieldEquationsMapper<T extends RealFieldElement>)": ["org.apache.commons.math3.ode.sampling.AbstractFieldStepInterpolator.<init>()"],
    "org.apache.commons.math3.distribution.HypergeometricDistribution#HypergeometricDistribution(int,int,int)": [
        "org.apache.commons.math3.random.Well19937c#Well19937c()",
        "org.apache.commons.math3.distribution.HypergeometricDistribution#HypergeometricDistribution(RandomGenerator,int,int,int)"
    ],
    "org.apache.commons.math3.analysis.differentiation.DerivativeStructure.DataTransferObject#DataTransferObject(int,int,double[])": ["org.apache.commons.math3.analysis.differentiation.DerivativeStructure.DataTransferObject.<init>()"],
    "org.apache.commons.math3.genetics.AbstractListChromosome#AbstractListChromosome(T[])": ["org.apache.commons.math3.genetics.AbstractListChromosome#AbstractListChromosome(List<T>)"],
    "org.apache.commons.math3.fraction.FractionFormat.getProperInstance()": ["org.apache.commons.math3.fraction.FractionFormat.getProperInstance(Locale)"],
    "org.apache.commons.math3.optim.nonlinear.scalar.ObjectiveFunction#ObjectiveFunction(MultivariateFunction)": ["org.apache.commons.math3.optim.nonlinear.scalar.ObjectiveFunction.<init>()"],
    "org.apache.commons.math3.transform.FastCosineTransformer#transform(double[],TransformType)": [
        "org.apache.commons.math3.transform.DctNormalization.<staticinit>()",
        "org.apache.commons.math3.transform.FastCosineTransformer#fct(double[])",
        "org.apache.commons.math3.transform.TransformUtils.scaleArray(double[],double)",
        "org.apache.commons.math3.util.FastMath.sqrt(double)",
        "org.apache.commons.math3.transform.TransformType.<staticinit>()"
    ],
    "org.apache.commons.math3.linear.HessenbergTransformer#HessenbergTransformer(RealMatrix)": [
        "org.apache.commons.math3.linear.DiagonalMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.Array2DRowRealMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.BlockFieldMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.SparseFieldMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.HessenbergTransformer#transform()",
        "org.apache.commons.math3.linear.OpenMapRealMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.OpenMapRealMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.DiagonalMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.DiagonalMatrix#getData()",
        "org.apache.commons.math3.linear.AbstractRealMatrix#getData()",
        "org.apache.commons.math3.linear.Array2DRowFieldMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.SparseFieldMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.BlockFieldMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.AbstractRealMatrix#isSquare()",
        "org.apache.commons.math3.linear.BlockRealMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.HessenbergTransformer.<init>()",
        "org.apache.commons.math3.linear.Array2DRowRealMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.NonSquareMatrixException#NonSquareMatrixException(int,int)",
        "org.apache.commons.math3.linear.Array2DRowRealMatrix#getData()",
        "org.apache.commons.math3.linear.AbstractFieldMatrix#isSquare()",
        "org.apache.commons.math3.linear.Array2DRowFieldMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.BlockRealMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.BlockRealMatrix#getData()"
    ],
    "org.apache.commons.math3.userguide.genetics.HelloWorldExample.main(String[])$StoppingCondition$1#isSatisfied(Population)": [
        "org.apache.commons.math3.util.Precision.equals(double,double,double)",
        "org.apache.commons.math3.userguide.genetics.HelloWorldExample.StringChromosome#fitness()",
        "org.apache.commons.math3.userguide.genetics.PolygonChromosome#fitness()",
        "org.apache.commons.math3.genetics.ListPopulation#getFittestChromosome()"
    ],
    "org.apache.commons.math3.linear.RealVector#checkIndex(int)": [
        "org.apache.commons.math3.linear.OpenMapRealVector#getDimension()",
        "org.apache.commons.math3.linear.ArrayRealVector#getDimension()",
        "org.apache.commons.math3.linear.RealVector.unmodifiableRealVector(RealVector)$RealVector$1#getDimension()",
        "org.apache.commons.math3.exception.util.LocalizedFormats.<staticinit>()"
    ],
    "org.apache.commons.math3.exception.TooManyIterationsException#TooManyIterationsException(Number)": [
        "org.apache.commons.math3.exception.MaxCountExceededException#MaxCountExceededException(Number)",
        "org.apache.commons.math3.exception.TooManyIterationsException.<init>()",
        "org.apache.commons.math3.exception.MathIllegalStateException#getContext()",
        "org.apache.commons.math3.exception.util.LocalizedFormats.<staticinit>()"
    ],
    "org.apache.commons.math3.analysis.FunctionUtils.add(DifferentiableUnivariateFunction[]...)$DifferentiableUnivariateFunction$1#value(double)": [
        "org.apache.commons.math3.analysis.FunctionUtils.multiply(DifferentiableUnivariateFunction[]...)$UnivariateFunction$1$UnivariateFunction$1#derivative()$UnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.polynomials.PolynomialSplineFunction#value(double)",
        "org.apache.commons.math3.analysis.function.Gaussian#value(double)",
        "org.apache.commons.math3.analysis.function.Tanh#value(double)",
        "org.apache.commons.math3.analysis.function.Inverse#value(double)",
        "org.apache.commons.math3.analysis.function.HarmonicOscillator#value(double)",
        "org.apache.commons.math3.analysis.FunctionUtils.fix1stArgument(BivariateFunction,double)$UnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.function.Asin#value(double)",
        "org.apache.commons.math3.analysis.function.Asinh#value(double)",
        "org.apache.commons.math3.analysis.FunctionUtils.multiply(UnivariateFunction[]...)$UnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.function.Atan#value(double)",
        "org.apache.commons.math3.analysis.FunctionUtils.toDifferentiableUnivariateFunction(UnivariateDifferentiableFunction)$DifferentiableUnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.function.Cbrt#value(double)",
        "org.apache.commons.math3.analysis.polynomials.PolynomialFunctionLagrangeForm#value(double)",
        "org.apache.commons.math3.analysis.function.Exp#value(double)",
        "org.apache.commons.math3.special.BesselJ#value(double)",
        "org.apache.commons.math3.analysis.polynomials.PolynomialFunctionNewtonForm#value(double)",
        "org.apache.commons.math3.analysis.FunctionUtils.add(UnivariateFunction[]...)$UnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.function.Sin#value(double)",
        "org.apache.commons.math3.analysis.function.Cos#value(double)",
        "org.apache.commons.math3.analysis.interpolation.UnivariatePeriodicInterpolator#interpolate(double[],double[])$UnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.function.Log10#value(double)",
        "org.apache.commons.math3.analysis.function.Sqrt#value(double)",
        "org.apache.commons.math3.analysis.function.Log#value(double)",
        "org.apache.commons.math3.analysis.function.Sinc#value(double)",
        "org.apache.commons.math3.ode.events.EventState#evaluateStep(StepInterpolator)$UnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.function.Minus#value(double)",
        "org.apache.commons.math3.analysis.integration.IterativeLegendreGaussIntegrator#stage(int)$UnivariateFunction$1#value(double)",
        "org.apache.commons.math3.optimization.general.NonLinearConjugateGradientOptimizer.LineSearchFunction#value(double)",
        "org.apache.commons.math3.analysis.function.Floor#value(double)",
        "org.apache.commons.math3.analysis.FunctionUtils.multiply(DifferentiableUnivariateFunction[]...)$DifferentiableUnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.FunctionUtils.combine(BivariateFunction,UnivariateFunction,UnivariateFunction)$UnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.FunctionUtils.add(DifferentiableUnivariateFunction[]...)$UnivariateFunction$1$UnivariateFunction$1#derivative()$UnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.function.Sinh#value(double)",
        "org.apache.commons.math3.analysis.FunctionUtils.multiply(UnivariateDifferentiableFunction[]...)$UnivariateDifferentiableFunction$1#value(double)",
        "org.apache.commons.math3.analysis.function.Tan#value(double)",
        "org.apache.commons.math3.distribution.AbstractRealDistribution#inverseCumulativeProbability(double)$UnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.FunctionUtils.add(DifferentiableUnivariateFunction[]...)$DifferentiableUnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.function.Ceil#value(double)",
        "org.apache.commons.math3.analysis.function.Logistic#value(double)",
        "org.apache.commons.math3.analysis.function.Signum#value(double)",
        "org.apache.commons.math3.analysis.function.Constant#value(double)",
        "org.apache.commons.math3.analysis.function.Atanh#value(double)",
        "org.apache.commons.math3.analysis.FunctionUtils.compose(DifferentiableUnivariateFunction[]...)$UnivariateFunction$1$UnivariateFunction$1#derivative()$UnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.FunctionUtils.add(UnivariateDifferentiableFunction[]...)$UnivariateDifferentiableFunction$1#value(double)",
        "org.apache.commons.math3.analysis.function.Abs#value(double)",
        "org.apache.commons.math3.analysis.differentiation.FiniteDifferencesDifferentiator#differentiate(UnivariateFunction)$UnivariateDifferentiableFunction$1#value(double)",
        "org.apache.commons.math3.analysis.function.Identity#value(double)",
        "org.apache.commons.math3.analysis.function.Expm1#value(double)",
        "org.apache.commons.math3.analysis.function.Logit#value(double)",
        "org.apache.commons.math3.analysis.function.Log1p#value(double)",
        "org.apache.commons.math3.analysis.FunctionUtils.fix2ndArgument(BivariateFunction,double)$UnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.FunctionUtils.toUnivariateDifferential(DifferentiableUnivariateFunction)$UnivariateDifferentiableFunction$1#value(double)",
        "org.apache.commons.math3.analysis.FunctionUtils.toDifferentiableUnivariateFunction(UnivariateDifferentiableFunction)$UnivariateFunction$1$UnivariateFunction$1#derivative()$UnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.polynomials.PolynomialFunction#value(double)",
        "org.apache.commons.math3.analysis.function.Rint#value(double)",
        "org.apache.commons.math3.analysis.FunctionUtils.compose(UnivariateFunction[]...)$UnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.function.Cosh#value(double)",
        "org.apache.commons.math3.optimization.direct.PowellOptimizer.LineSearch#search(double[],double[])$UnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.FunctionUtils.compose(DifferentiableUnivariateFunction[]...)$DifferentiableUnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.function.Acosh#value(double)",
        "org.apache.commons.math3.analysis.function.StepFunction#value(double)",
        "org.apache.commons.math3.analysis.FunctionUtils.compose(UnivariateDifferentiableFunction[]...)$UnivariateDifferentiableFunction$1#value(double)",
        "org.apache.commons.math3.analysis.function.Acos#value(double)",
        "org.apache.commons.math3.analysis.function.Power#value(double)",
        "org.apache.commons.math3.optim.nonlinear.scalar.LineSearch#search(double[],double[])$UnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.function.Sigmoid#value(double)",
        "org.apache.commons.math3.analysis.function.Ulp#value(double)"
    ],
    "org.apache.commons.math3.stat.inference.KolmogorovSmirnovTest#monteCarloP(double,int,int,boolean,int)": [
        "org.apache.commons.math3.stat.inference.KolmogorovSmirnovTest#integralMonteCarloP(long,int,int,int)",
        "org.apache.commons.math3.stat.inference.KolmogorovSmirnovTest.calculateIntegralD(double,int,int,boolean)"
    ],
    "org.apache.commons.math3.analysis.differentiation.SparseGradient#linearCombination(SparseGradient,SparseGradient,SparseGradient,SparseGradient)": [
        "org.apache.commons.math3.analysis.differentiation.SparseGradient#add(SparseGradient)",
        "org.apache.commons.math3.analysis.differentiation.SparseGradient#multiply(SparseGradient)",
        "org.apache.commons.math3.util.MathArrays.linearCombination(double,double,double,double)"
    ],
    "org.apache.commons.math3.distribution.ChiSquaredDistribution#density(double)": ["org.apache.commons.math3.distribution.GammaDistribution#density(double)"],
    "org.apache.commons.math3.linear.OpenMapRealVector#toArray()": [
        "org.apache.commons.math3.util.OpenIntToDoubleHashMap.Iterator#advance()",
        "org.apache.commons.math3.util.OpenIntToDoubleHashMap.Iterator#value()",
        "org.apache.commons.math3.util.OpenIntToDoubleHashMap.Iterator#key()",
        "org.apache.commons.math3.util.OpenIntToDoubleHashMap#iterator()",
        "org.apache.commons.math3.util.OpenIntToDoubleHashMap.Iterator#hasNext()"
    ],
    "org.apache.commons.math3.util.ResizableDoubleArray#ResizableDoubleArray(int,float,float)": ["org.apache.commons.math3.util.ResizableDoubleArray#ResizableDoubleArray(int,double,double)"],
    "org.apache.commons.math3.linear.BlockRealMatrix#walkInRowOrder(RealMatrixChangingVisitor,int,int,int,int)": [
        "org.apache.commons.math3.linear.AbstractRealMatrix#getSubMatrix(int[],int[])$DefaultRealMatrixChangingVisitor$1#visit(int,int,double)",
        "org.apache.commons.math3.linear.DefaultRealMatrixChangingVisitor#end()",
        "org.apache.commons.math3.linear.MatrixUtils.checkSubMatrixIndex(AnyMatrix,int,int,int,int)",
        "org.apache.commons.math3.linear.BlockRealMatrix#blockWidth(int)",
        "org.apache.commons.math3.util.FastMath.max(int,int)",
        "org.apache.commons.math3.linear.DefaultRealMatrixChangingVisitor#visit(int,int,double)",
        "org.apache.commons.math3.util.FastMath.min(int,int)",
        "org.apache.commons.math3.linear.BlockRealMatrix.<staticinit>()",
        "org.apache.commons.math3.linear.DefaultRealMatrixChangingVisitor#start(int,int,int,int,int,int)"
    ],
    "org.apache.commons.math3.linear.ArrayRealVector#append(double)": ["org.apache.commons.math3.linear.ArrayRealVector#ArrayRealVector(double[],boolean)"],
    "org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D#add(T extends RealFieldElement,Vector3D)": [
        "org.apache.commons.math3.geometry.euclidean.threed.Vector3D#getX()",
        "org.apache.commons.math3.geometry.euclidean.threed.Vector3D#getZ()",
        "org.apache.commons.math3.geometry.euclidean.threed.Vector3D#getY()",
        "org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D#FieldVector3D(T extends RealFieldElement,T extends RealFieldElement,T extends RealFieldElement)"
    ],
    "org.apache.commons.math3.linear.Array2DRowFieldMatrix#walkInColumnOrder(FieldMatrixChangingVisitor<T extends FieldElement>,int,int,int,int)": [
        "org.apache.commons.math3.linear.DefaultFieldMatrixChangingVisitor#start(int,int,int,int,int,int)",
        "org.apache.commons.math3.linear.DefaultFieldMatrixChangingVisitor#visit(int,int,T extends FieldElement)",
        "org.apache.commons.math3.linear.Array2DRowFieldMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.AbstractFieldMatrix#checkSubMatrixIndex(int,int,int,int)",
        "org.apache.commons.math3.linear.AbstractFieldMatrix#getSubMatrix(int[],int[])$DefaultFieldMatrixChangingVisitor$1#visit(int,int,T extends FieldElement)",
        "org.apache.commons.math3.linear.DefaultFieldMatrixChangingVisitor#end()",
        "org.apache.commons.math3.linear.Array2DRowFieldMatrix#getColumnDimension()"
    ],
    "org.apache.commons.math3.util.MathArrays.ebeAdd(double[],double[])": ["org.apache.commons.math3.util.MathArrays.checkEqualLength(double[],double[])"],
    "org.apache.commons.math3.optim.SimpleValueChecker#converged(int,PointValuePair,PointValuePair)": [
        "org.apache.commons.math3.optim.SimpleValueChecker.<staticinit>()",
        "org.apache.commons.math3.util.FastMath.max(double,double)",
        "org.apache.commons.math3.util.FastMath.abs(double)",
        "org.apache.commons.math3.optim.PointVectorValuePair#getValue()",
        "org.apache.commons.math3.optimization.PointVectorValuePair#getValue()",
        "org.apache.commons.math3.util.Pair#getValue()",
        "org.apache.commons.math3.optim.AbstractConvergenceChecker#getRelativeThreshold()",
        "org.apache.commons.math3.optim.AbstractConvergenceChecker#getAbsoluteThreshold()"
    ],
    "org.apache.commons.math3.stat.descriptive.SynchronizedSummaryStatistics#setMinImpl(StorelessUnivariateStatistic)": ["org.apache.commons.math3.stat.descriptive.SummaryStatistics#setMinImpl(StorelessUnivariateStatistic)"],
    "org.apache.commons.math3.analysis.differentiation.DSCompiler#pow(double[],int,int,double[],int)": [
        "org.apache.commons.math3.analysis.differentiation.DSCompiler#getSize()",
        "org.apache.commons.math3.util.FastMath.pow(double,int)",
        "org.apache.commons.math3.util.FastMath.min(int,int)",
        "org.apache.commons.math3.analysis.differentiation.DSCompiler#compose(double[],int,double[],double[],int)"
    ],
    "org.apache.commons.math3.ode.nonstiff.GillFieldIntegrator#getB()": [
        "org.apache.commons.math3.ode.AbstractFieldIntegrator#getField()",
        "org.apache.commons.math3.ode.nonstiff.RungeKuttaFieldIntegrator#fraction(int,int)",
        "org.apache.commons.math3.util.BigRealField#getZero()",
        "org.apache.commons.math3.analysis.differentiation.SparseGradient#getField()$Field$1#getZero()",
        "org.apache.commons.math3.util.Decimal64Field#getZero()",
        "org.apache.commons.math3.dfp.DfpField#getZero()",
        "org.apache.commons.math3.analysis.differentiation.SparseGradient#add(double)",
        "org.apache.commons.math3.analysis.differentiation.DerivativeStructure#add(double)",
        "org.apache.commons.math3.analysis.differentiation.DerivativeStructure#getField()$Field$1#getZero()",
        "org.apache.commons.math3.fraction.FractionField#getZero()",
        "org.apache.commons.math3.complex.ComplexField#getZero()",
        "org.apache.commons.math3.fraction.BigFractionField#getZero()",
        "org.apache.commons.math3.util.MathArrays.buildArray(Field<T>,int)",
        "org.apache.commons.math3.util.Decimal64#add(double)",
        "org.apache.commons.math3.dfp.Dfp#add(double)"
    ],
    "org.apache.commons.math3.geometry.euclidean.twod.hull.ConvexHull2D#isConvex(Vector2D[])": [
        "org.apache.commons.math3.geometry.euclidean.twod.Vector2D#getY()",
        "org.apache.commons.math3.geometry.euclidean.twod.Vector2D#getX()",
        "org.apache.commons.math3.util.Precision.compareTo(double,double,double)",
        "org.apache.commons.math3.util.MathArrays.linearCombination(double,double,double,double)",
        "org.apache.commons.math3.geometry.euclidean.twod.Vector2D#subtract(Vector<Euclidean2D>)"
    ],
    "org.apache.commons.math3.ode.sampling.AbstractStepInterpolator#getInterpolatedDerivatives()": [
        "org.apache.commons.math3.ode.EquationsMapper#extractEquationData(double[],double[])",
        "org.apache.commons.math3.ode.sampling.AbstractStepInterpolator#evaluateCompleteInterpolatedState()"
    ],
    "org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet#PolygonsSet(double,double,double,double)": [
        "org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet#PolygonsSet(double,double,double,double,double)",
        "org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.<staticinit>()"
    ],
    "org.apache.commons.math3.linear.SparseFieldVector#mapMultiplyToSelf(T extends FieldElement)": [
        "org.apache.commons.math3.util.OpenIntToFieldHashMap.Iterator#hasNext()",
        "org.apache.commons.math3.util.OpenIntToFieldHashMap#iterator()",
        "org.apache.commons.math3.util.OpenIntToFieldHashMap.Iterator#key()",
        "org.apache.commons.math3.util.OpenIntToFieldHashMap.Iterator#value()",
        "org.apache.commons.math3.util.OpenIntToFieldHashMap#put(int,T extends FieldElement)",
        "org.apache.commons.math3.util.OpenIntToFieldHashMap.Iterator#advance()"
    ],
    "org.apache.commons.math3.optim.SimplePointChecker#converged(int,PAIR extends Pair,PAIR extends Pair)": [
        "org.apache.commons.math3.optim.SimplePointChecker.<staticinit>()",
        "org.apache.commons.math3.util.FastMath.max(double,double)",
        "org.apache.commons.math3.util.FastMath.abs(double)",
        "org.apache.commons.math3.optim.AbstractConvergenceChecker#getRelativeThreshold()",
        "org.apache.commons.math3.optim.AbstractConvergenceChecker#getAbsoluteThreshold()"
    ],
    "org.apache.commons.math3.geometry.euclidean.twod.NestedLoops#setClockWise(boolean)": ["org.apache.commons.math3.geometry.euclidean.twod.NestedLoops#setClockWise(boolean)"],
    "org.apache.commons.math3.linear.BlockRealMatrix#getColumnMatrix(int)": [
        "org.apache.commons.math3.linear.BlockRealMatrix#blockHeight(int)",
        "org.apache.commons.math3.linear.BlockRealMatrix.<staticinit>()",
        "org.apache.commons.math3.linear.BlockRealMatrix#BlockRealMatrix(int,int)",
        "org.apache.commons.math3.linear.BlockRealMatrix#blockWidth(int)",
        "org.apache.commons.math3.linear.MatrixUtils.checkColumnIndex(AnyMatrix,int)"
    ],
    "org.apache.commons.math3.exception.MathParseException#MathParseException(String,int)": [
        "org.apache.commons.math3.exception.MathParseException.<init>()",
        "org.apache.commons.math3.exception.MathIllegalStateException#MathIllegalStateException()",
        "org.apache.commons.math3.exception.MathIllegalStateException#getContext()",
        "org.apache.commons.math3.exception.util.LocalizedFormats.<staticinit>()"
    ],
    "org.apache.commons.math3.stat.StatUtils.sumDifference(double[],double[])": [
        "org.apache.commons.math3.exception.DimensionMismatchException#DimensionMismatchException(int,int)",
        "org.apache.commons.math3.exception.NoDataException#NoDataException(Localizable)",
        "org.apache.commons.math3.exception.util.LocalizedFormats.<staticinit>()"
    ],
    "org.apache.commons.math3.linear.BlockFieldMatrix#setRow(int,T extends FieldElement[])": [
        "org.apache.commons.math3.linear.BlockFieldMatrix#blockWidth(int)",
        "org.apache.commons.math3.linear.BlockFieldMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.MatrixDimensionMismatchException#MatrixDimensionMismatchException(int,int,int,int)",
        "org.apache.commons.math3.linear.BlockFieldMatrix.<staticinit>()",
        "org.apache.commons.math3.linear.AbstractFieldMatrix#checkRowIndex(int)"
    ],
    "org.apache.commons.math3.util.FastMath.log(double)": ["org.apache.commons.math3.util.FastMath.log(double,double[])"],
    "org.apache.commons.math3.stat.inference.KolmogorovSmirnovTest#checkArray(double[])": ["org.apache.commons.math3.exception.util.LocalizedFormats.<staticinit>()"],
    "org.apache.commons.math3.analysis.integration.gauss.GaussIntegratorFactory.transform(Pair<double[], double[]>,double,double)": [
        "org.apache.commons.math3.util.Pair#getFirst()",
        "org.apache.commons.math3.util.Pair#getSecond()",
        "org.apache.commons.math3.util.Pair#Pair(K,V)"
    ],
    "org.apache.commons.math3.analysis.solvers.BracketingNthOrderBrentSolver#BracketingNthOrderBrentSolver()": [
        "org.apache.commons.math3.analysis.solvers.BracketingNthOrderBrentSolver#BracketingNthOrderBrentSolver(double,int)",
        "org.apache.commons.math3.analysis.solvers.BracketingNthOrderBrentSolver.<staticinit>()"
    ],
    "org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile.Markers#incrementPositions(int,int,int)": ["org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile.Marker#incrementPosition(int)"],
    "org.apache.commons.math3.util.MathArrays.checkOrder(double[],OrderDirection,boolean)": ["org.apache.commons.math3.util.MathArrays.checkOrder(double[],OrderDirection,boolean,boolean)"],
    "org.apache.commons.math3.optim.nonlinear.vector.MultivariateVectorOptimizer#computeObjectiveValue(double[])": [
        "org.apache.commons.math3.fitting.AbstractCurveFitter.TheoreticalValuesFunction#getModelFunction()$MultivariateVectorFunction$1#value(double[])",
        "org.apache.commons.math3.optimization.fitting.CurveFitter.TheoreticalValuesFunction#value(double[])",
        "org.apache.commons.math3.optim.BaseOptimizer#incrementEvaluationCount()",
        "org.apache.commons.math3.analysis.FunctionUtils.toDifferentiableMultivariateFunction(MultivariateDifferentiableFunction)$MultivariateVectorFunction$1$MultivariateVectorFunction$1#gradient()$MultivariateVectorFunction$1#value(double[])",
        "org.apache.commons.math3.analysis.FunctionUtils.toMultivariateDifferentiableVectorFunction(DifferentiableMultivariateVectorFunction)$MultivariateDifferentiableVectorFunction$1#value(double[])",
        "org.apache.commons.math3.analysis.FunctionUtils.toDifferentiableMultivariateVectorFunction(MultivariateDifferentiableVectorFunction)$DifferentiableMultivariateVectorFunction$1#value(double[])",
        "org.apache.commons.math3.fitting.CurveFitter.TheoreticalValuesFunction#getModelFunction()$MultivariateVectorFunction$1#value(double[])",
        "org.apache.commons.math3.analysis.differentiation.GradientFunction#value(double[])",
        "org.apache.commons.math3.optimization.fitting.CurveFitter.OldTheoreticalValuesFunction#value(double[])"
    ],
    "org.apache.commons.math3.analysis.differentiation.SparseGradient#pow(double)": [
        "org.apache.commons.math3.analysis.differentiation.SparseGradient#SparseGradient(double,double,Map<Integer, Double>)",
        "org.apache.commons.math3.util.FastMath.pow(double,int)",
        "org.apache.commons.math3.util.FastMath.pow(double,double)"
    ],
    "org.apache.commons.math3.linear.MatrixUtils.serializeRealVector(RealVector,ObjectOutputStream)": [
        "org.apache.commons.math3.linear.OpenMapRealVector#getDimension()",
        "org.apache.commons.math3.linear.ArrayRealVector#getEntry(int)",
        "org.apache.commons.math3.linear.ArrayRealVector#getDimension()",
        "org.apache.commons.math3.linear.RealVector.unmodifiableRealVector(RealVector)$RealVector$1#getDimension()",
        "org.apache.commons.math3.linear.OpenMapRealVector#getEntry(int)",
        "org.apache.commons.math3.linear.RealVector.unmodifiableRealVector(RealVector)$RealVector$1#getEntry(int)"
    ],
    "org.apache.commons.math3.util.MathUtils.checkFinite(double[])": ["org.apache.commons.math3.exception.util.LocalizedFormats.<staticinit>()"],
    "org.apache.commons.math3.stat.descriptive.moment.FirstMoment#copy()": [
        "org.apache.commons.math3.stat.descriptive.moment.FirstMoment.copy(FirstMoment,FirstMoment)",
        "org.apache.commons.math3.stat.descriptive.moment.FirstMoment#FirstMoment()"
    ],
    "org.apache.commons.math3.analysis.differentiation.DerivativeStructure#getExponent()": ["org.apache.commons.math3.util.FastMath.getExponent(double)"],
    "org.apache.commons.math3.util.BigReal#BigReal(char[],int,int,MathContext)": ["org.apache.commons.math3.util.BigReal.<init>()"],
    "org.apache.commons.math3.distribution.FDistribution#FDistribution(double,double,double)": [
        "org.apache.commons.math3.random.Well19937c#Well19937c()",
        "org.apache.commons.math3.distribution.FDistribution#FDistribution(RandomGenerator,double,double,double)"
    ],
    "org.apache.commons.math3.linear.SparseFieldVector#mapSubtract(T extends FieldElement)": [
        "org.apache.commons.math3.linear.SparseFieldVector#copy()",
        "org.apache.commons.math3.linear.ArrayFieldVector#mapSubtractToSelf(T extends FieldElement)",
        "org.apache.commons.math3.linear.SparseFieldVector#mapSubtractToSelf(T extends FieldElement)"
    ],
    "org.apache.commons.math3.fitting.leastsquares.DenseWeightedEvaluation#DenseWeightedEvaluation(Evaluation,RealMatrix)": [
        "org.apache.commons.math3.linear.SparseFieldMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.DiagonalMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.Array2DRowRealMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.BlockFieldMatrix#getColumnDimension()",
        "org.apache.commons.math3.fitting.leastsquares.DenseWeightedEvaluation.<init>()",
        "org.apache.commons.math3.linear.OpenMapRealMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.BlockRealMatrix#getColumnDimension()",
        "org.apache.commons.math3.fitting.leastsquares.AbstractEvaluation#AbstractEvaluation(int)",
        "org.apache.commons.math3.linear.Array2DRowFieldMatrix#getColumnDimension()"
    ],
    "org.apache.commons.math3.optimization.linear.LinearObjectiveFunction#getValue(RealVector)": [
        "org.apache.commons.math3.linear.RealVector#dotProduct(RealVector)",
        "org.apache.commons.math3.linear.ArrayRealVector#dotProduct(RealVector)",
        "org.apache.commons.math3.linear.RealVector.unmodifiableRealVector(RealVector)$RealVector$1#dotProduct(RealVector)"
    ],
    "org.apache.commons.math3.analysis.function.Logistic.Parametric#value(double,double[]...)": [
        "org.apache.commons.math3.analysis.function.Logistic.Parametric#validateParameters(double[])",
        "org.apache.commons.math3.analysis.function.Logistic.value(double,double,double,double,double,double)"
    ],
    "org.apache.commons.math3.stat.inference.KolmogorovSmirnovTest#exactP(double,int,int,boolean)": [
        "org.apache.commons.math3.stat.inference.KolmogorovSmirnovTest.calculateIntegralD(double,int,int,boolean)",
        "org.apache.commons.math3.util.CombinatoricsUtils.binomialCoefficientDouble(int,int)",
        "org.apache.commons.math3.stat.inference.KolmogorovSmirnovTest.n(int,int,int,int,long,boolean)"
    ],
    "org.apache.commons.math3.optim.univariate.BracketFinder#getEvaluations()": ["org.apache.commons.math3.util.IntegerSequence.Incrementor#getCount()"],
    "org.apache.commons.math3.fitting.leastsquares.LevenbergMarquardtOptimizer#determineLMParameter(double[],double,double[],InternalData,int,double[],double[],double[],double[],double)": [
        "org.apache.commons.math3.util.Precision.<staticinit>()",
        "org.apache.commons.math3.util.FastMath.max(double,double)",
        "org.apache.commons.math3.util.FastMath.abs(double)",
        "org.apache.commons.math3.fitting.leastsquares.LevenbergMarquardtOptimizer#determineLMDirection(double[],double[],double[],InternalData,int,double[],double[])",
        "org.apache.commons.math3.util.FastMath.sqrt(double)",
        "org.apache.commons.math3.util.FastMath.min(double,double)"
    ],
    "org.apache.commons.math3.optim.univariate.BrentOptimizer#BrentOptimizer(double,double,ConvergenceChecker<UnivariatePointValuePair>)": [
        "org.apache.commons.math3.optim.univariate.UnivariateOptimizer#UnivariateOptimizer(ConvergenceChecker<UnivariatePointValuePair>)",
        "org.apache.commons.math3.optim.univariate.BrentOptimizer.<init>()",
        "org.apache.commons.math3.optim.univariate.BrentOptimizer.<staticinit>()"
    ],
    "org.apache.commons.math3.optimization.linear.SimplexTableau#copyArray(double[],double[])": ["org.apache.commons.math3.optimization.linear.SimplexTableau#getNumObjectiveFunctions()"],
    "org.apache.commons.math3.dfp.DfpMath.splitMult(Dfp[],Dfp[])": [
        "org.apache.commons.math3.dfp.Dfp#add(Dfp)",
        "org.apache.commons.math3.dfp.Dfp#classify()",
        "org.apache.commons.math3.dfp.Dfp.<staticinit>()",
        "org.apache.commons.math3.dfp.Dfp#equals(Object)",
        "org.apache.commons.math3.dfp.Dfp#multiply(Dfp)",
        "org.apache.commons.math3.dfp.Dfp#getZero()"
    ],
    "org.apache.commons.math3.optim.univariate.BrentOptimizer.<staticinit>()": [
        "org.apache.commons.math3.util.FastMath.ulp(double)",
        "org.apache.commons.math3.util.FastMath.sqrt(double)"
    ],
    "org.apache.commons.math3.ml.clustering.evaluation.SumOfClusterVariances#SumOfClusterVariances(DistanceMeasure)": [
        "org.apache.commons.math3.ml.clustering.evaluation.ClusterEvaluator#ClusterEvaluator(DistanceMeasure)",
        "org.apache.commons.math3.ml.clustering.evaluation.SumOfClusterVariances.<init>()"
    ],
    "org.apache.commons.math3.optimization.BaseMultivariateVectorMultiStartOptimizer#sortPairs(double[],double[])$Comparator$1#weightedResidual(PointVectorValuePair)": ["org.apache.commons.math3.optimization.PointVectorValuePair#getValueRef()"],
    "org.apache.commons.math3.stat.descriptive.AggregateSummaryStatistics#getMin()": [
        "org.apache.commons.math3.stat.descriptive.SummaryStatistics#getMin()",
        "org.apache.commons.math3.stat.descriptive.SynchronizedSummaryStatistics#getMin()"
    ],
    "org.apache.commons.math3.stat.inference.TestUtils.t(double,StatisticalSummary)": [
        "org.apache.commons.math3.stat.inference.TTest#t(double,StatisticalSummary)",
        "org.apache.commons.math3.stat.inference.TestUtils.<staticinit>()"
    ],
    "org.apache.commons.math3.linear.DefaultIterativeLinearSolverEvent#getResidual()": ["org.apache.commons.math3.exception.MathUnsupportedOperationException#MathUnsupportedOperationException()"],
    "org.apache.commons.math3.util.ArithmeticUtils.lcm(int,int)": [
        "org.apache.commons.math3.util.FastMath.abs(int)",
        "org.apache.commons.math3.util.ArithmeticUtils.gcd(int,int)",
        "org.apache.commons.math3.util.ArithmeticUtils.mulAndCheck(int,int)",
        "org.apache.commons.math3.exception.util.LocalizedFormats.<staticinit>()"
    ],
    "org.apache.commons.math3.stat.descriptive.moment.FirstMoment#FirstMoment(FirstMoment)": [
        "org.apache.commons.math3.stat.descriptive.moment.FirstMoment.<init>()",
        "org.apache.commons.math3.stat.descriptive.moment.FirstMoment.copy(FirstMoment,FirstMoment)",
        "org.apache.commons.math3.stat.descriptive.AbstractStorelessUnivariateStatistic.<init>()"
    ],
    "org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D.crossProduct(FieldVector3D<T extends RealFieldElement>,FieldVector3D<T extends RealFieldElement>)": ["org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D#crossProduct(FieldVector3D<T extends RealFieldElement>)"],
    "org.apache.commons.math3.geometry.euclidean.threed.Line#getAbscissa(Vector3D)": [
        "org.apache.commons.math3.geometry.euclidean.threed.Vector3D#dotProduct(Vector<Euclidean3D>)",
        "org.apache.commons.math3.geometry.euclidean.threed.Vector3D#subtract(Vector<Euclidean3D>)"
    ],
    "org.apache.commons.math3.random.UnitSphereRandomVectorGenerator#UnitSphereRandomVectorGenerator(int)": [
        "org.apache.commons.math3.random.UnitSphereRandomVectorGenerator#UnitSphereRandomVectorGenerator(int,RandomGenerator)",
        "org.apache.commons.math3.random.MersenneTwister#MersenneTwister()"
    ],
    "org.apache.commons.math3.analysis.FunctionUtils.add(UnivariateDifferentiableFunction[]...)$UnivariateDifferentiableFunction$1#value(double)": [
        "org.apache.commons.math3.analysis.FunctionUtils.multiply(DifferentiableUnivariateFunction[]...)$UnivariateFunction$1$UnivariateFunction$1#derivative()$UnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.polynomials.PolynomialSplineFunction#value(double)",
        "org.apache.commons.math3.analysis.function.Gaussian#value(double)",
        "org.apache.commons.math3.analysis.function.Tanh#value(double)",
        "org.apache.commons.math3.analysis.function.Inverse#value(double)",
        "org.apache.commons.math3.analysis.function.HarmonicOscillator#value(double)",
        "org.apache.commons.math3.analysis.FunctionUtils.fix1stArgument(BivariateFunction,double)$UnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.function.Asin#value(double)",
        "org.apache.commons.math3.analysis.function.Asinh#value(double)",
        "org.apache.commons.math3.analysis.FunctionUtils.multiply(UnivariateFunction[]...)$UnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.function.Atan#value(double)",
        "org.apache.commons.math3.analysis.FunctionUtils.toDifferentiableUnivariateFunction(UnivariateDifferentiableFunction)$DifferentiableUnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.function.Cbrt#value(double)",
        "org.apache.commons.math3.analysis.polynomials.PolynomialFunctionLagrangeForm#value(double)",
        "org.apache.commons.math3.analysis.function.Exp#value(double)",
        "org.apache.commons.math3.special.BesselJ#value(double)",
        "org.apache.commons.math3.analysis.polynomials.PolynomialFunctionNewtonForm#value(double)",
        "org.apache.commons.math3.analysis.FunctionUtils.add(UnivariateFunction[]...)$UnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.function.Sin#value(double)",
        "org.apache.commons.math3.analysis.function.Cos#value(double)",
        "org.apache.commons.math3.analysis.interpolation.UnivariatePeriodicInterpolator#interpolate(double[],double[])$UnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.function.Log10#value(double)",
        "org.apache.commons.math3.analysis.function.Sqrt#value(double)",
        "org.apache.commons.math3.analysis.function.Log#value(double)",
        "org.apache.commons.math3.analysis.function.Sinc#value(double)",
        "org.apache.commons.math3.ode.events.EventState#evaluateStep(StepInterpolator)$UnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.function.Minus#value(double)",
        "org.apache.commons.math3.analysis.integration.IterativeLegendreGaussIntegrator#stage(int)$UnivariateFunction$1#value(double)",
        "org.apache.commons.math3.optimization.general.NonLinearConjugateGradientOptimizer.LineSearchFunction#value(double)",
        "org.apache.commons.math3.analysis.function.Floor#value(double)",
        "org.apache.commons.math3.analysis.FunctionUtils.multiply(DifferentiableUnivariateFunction[]...)$DifferentiableUnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.FunctionUtils.combine(BivariateFunction,UnivariateFunction,UnivariateFunction)$UnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.FunctionUtils.add(DifferentiableUnivariateFunction[]...)$UnivariateFunction$1$UnivariateFunction$1#derivative()$UnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.function.Sinh#value(double)",
        "org.apache.commons.math3.analysis.FunctionUtils.multiply(UnivariateDifferentiableFunction[]...)$UnivariateDifferentiableFunction$1#value(double)",
        "org.apache.commons.math3.analysis.function.Tan#value(double)",
        "org.apache.commons.math3.distribution.AbstractRealDistribution#inverseCumulativeProbability(double)$UnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.FunctionUtils.add(DifferentiableUnivariateFunction[]...)$DifferentiableUnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.function.Ceil#value(double)",
        "org.apache.commons.math3.analysis.function.Logistic#value(double)",
        "org.apache.commons.math3.analysis.function.Signum#value(double)",
        "org.apache.commons.math3.analysis.function.Constant#value(double)",
        "org.apache.commons.math3.analysis.function.Atanh#value(double)",
        "org.apache.commons.math3.analysis.FunctionUtils.compose(DifferentiableUnivariateFunction[]...)$UnivariateFunction$1$UnivariateFunction$1#derivative()$UnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.FunctionUtils.add(UnivariateDifferentiableFunction[]...)$UnivariateDifferentiableFunction$1#value(double)",
        "org.apache.commons.math3.analysis.function.Abs#value(double)",
        "org.apache.commons.math3.analysis.differentiation.FiniteDifferencesDifferentiator#differentiate(UnivariateFunction)$UnivariateDifferentiableFunction$1#value(double)",
        "org.apache.commons.math3.analysis.function.Identity#value(double)",
        "org.apache.commons.math3.analysis.function.Expm1#value(double)",
        "org.apache.commons.math3.analysis.function.Logit#value(double)",
        "org.apache.commons.math3.analysis.function.Log1p#value(double)",
        "org.apache.commons.math3.analysis.FunctionUtils.fix2ndArgument(BivariateFunction,double)$UnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.FunctionUtils.toUnivariateDifferential(DifferentiableUnivariateFunction)$UnivariateDifferentiableFunction$1#value(double)",
        "org.apache.commons.math3.analysis.FunctionUtils.toDifferentiableUnivariateFunction(UnivariateDifferentiableFunction)$UnivariateFunction$1$UnivariateFunction$1#derivative()$UnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.polynomials.PolynomialFunction#value(double)",
        "org.apache.commons.math3.analysis.function.Rint#value(double)",
        "org.apache.commons.math3.analysis.FunctionUtils.compose(UnivariateFunction[]...)$UnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.function.Cosh#value(double)",
        "org.apache.commons.math3.optimization.direct.PowellOptimizer.LineSearch#search(double[],double[])$UnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.FunctionUtils.compose(DifferentiableUnivariateFunction[]...)$DifferentiableUnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.function.Acosh#value(double)",
        "org.apache.commons.math3.analysis.function.StepFunction#value(double)",
        "org.apache.commons.math3.analysis.FunctionUtils.compose(UnivariateDifferentiableFunction[]...)$UnivariateDifferentiableFunction$1#value(double)",
        "org.apache.commons.math3.analysis.function.Acos#value(double)",
        "org.apache.commons.math3.analysis.function.Power#value(double)",
        "org.apache.commons.math3.optim.nonlinear.scalar.LineSearch#search(double[],double[])$UnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.function.Sigmoid#value(double)",
        "org.apache.commons.math3.analysis.function.Ulp#value(double)"
    ],
    "org.apache.commons.math3.linear.ArrayFieldVector#walkInDefaultOrder(FieldVectorChangingVisitor<T extends FieldElement>)": [
        "org.apache.commons.math3.linear.ArrayFieldVector#getEntry(int)",
        "org.apache.commons.math3.linear.ArrayFieldVector#setEntry(int,T extends FieldElement)",
        "org.apache.commons.math3.linear.ArrayFieldVector#getDimension()"
    ],
    "org.apache.commons.math3.analysis.FunctionUtils.toDifferentiableMultivariateFunction(MultivariateDifferentiableFunction)$DifferentiableMultivariateFunction$1#value(double[])": [
        "org.apache.commons.math3.optim.nonlinear.scalar.MultivariateFunctionMappingAdapter#value(double[])",
        "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizer#doOptimize()$MultivariateFunction$1#value(double[])",
        "org.apache.commons.math3.optimization.direct.MultivariateFunctionMappingAdapter#value(double[])",
        "org.apache.commons.math3.analysis.FunctionUtils.toMultivariateDifferentiableFunction(DifferentiableMultivariateFunction)$MultivariateDifferentiableFunction$1#value(double[])",
        "org.apache.commons.math3.analysis.FunctionUtils.toDifferentiableMultivariateFunction(MultivariateDifferentiableFunction)$DifferentiableMultivariateFunction$1#value(double[])",
        "org.apache.commons.math3.analysis.interpolation.MicrosphereInterpolatingFunction#value(double[])",
        "org.apache.commons.math3.analysis.interpolation.MicrosphereProjectionInterpolator#interpolate(double[][],double[])$MultivariateFunction$1#value(double[])",
        "org.apache.commons.math3.optimization.direct.MultivariateFunctionPenaltyAdapter#value(double[])",
        "org.apache.commons.math3.optim.nonlinear.scalar.MultivariateFunctionPenaltyAdapter#value(double[])",
        "org.apache.commons.math3.optim.linear.LinearObjectiveFunction#value(double[])",
        "org.apache.commons.math3.analysis.FunctionUtils.collector(BivariateFunction,UnivariateFunction,double)$MultivariateFunction$1#value(double[])",
        "org.apache.commons.math3.optim.nonlinear.scalar.LeastSquaresConverter#value(double[])",
        "org.apache.commons.math3.analysis.FunctionUtils.toDifferentiableMultivariateFunction(MultivariateDifferentiableFunction)$MultivariateFunction$1$MultivariateFunction$1#partialDerivative(int)$MultivariateFunction$1#value(double[])",
        "org.apache.commons.math3.optimization.LeastSquaresConverter#value(double[])",
        "org.apache.commons.math3.optimization.direct.SimplexOptimizer#doOptimize()$MultivariateFunction$1#value(double[])"
    ],
    "org.apache.commons.math3.geometry.euclidean.twod.Vector2D#Vector2D(double,double)": ["org.apache.commons.math3.geometry.euclidean.twod.Vector2D.<init>()"],
    "org.apache.commons.math3.stat.correlation.StorelessCovariance#getCovarianceMatrix()": [
        "org.apache.commons.math3.stat.correlation.StorelessCovariance#getData()",
        "org.apache.commons.math3.linear.MatrixUtils.createRealMatrix(double[][])"
    ],
    "org.apache.commons.math3.analysis.function.Cosh#derivative()": ["org.apache.commons.math3.analysis.function.Sinh.<init>()"],
    "org.apache.commons.math3.stat.inference.KolmogorovSmirnovTest#KolmogorovSmirnovTest(RandomGenerator)": ["org.apache.commons.math3.stat.inference.KolmogorovSmirnovTest.<init>()"],
    "org.apache.commons.math3.stat.descriptive.summary.Product#Product()": [
        "org.apache.commons.math3.stat.descriptive.AbstractStorelessUnivariateStatistic.<init>()",
        "org.apache.commons.math3.stat.descriptive.summary.Product.<init>()"
    ],
    "org.apache.commons.math3.geometry.euclidean.threed.Vector3DFormat#Vector3DFormat(NumberFormat)": [
        "org.apache.commons.math3.geometry.euclidean.threed.Vector3DFormat.<init>()",
        "org.apache.commons.math3.geometry.VectorFormat#VectorFormat(String,String,String,NumberFormat)",
        "org.apache.commons.math3.geometry.VectorFormat.<staticinit>()"
    ],
    "org.apache.commons.math3.ode.nonstiff.AdamsBashforthFieldIntegrator#AdamsBashforthFieldIntegrator(Field<T extends RealFieldElement>,int,double,double,double[],double[])": [
        "org.apache.commons.math3.ode.nonstiff.AdamsFieldIntegrator#AdamsFieldIntegrator(Field<T extends RealFieldElement>,String,int,int,double,double,double[],double[])",
        "org.apache.commons.math3.ode.nonstiff.AdamsBashforthFieldIntegrator.<staticinit>()",
        "org.apache.commons.math3.ode.nonstiff.AdamsBashforthFieldIntegrator.<init>()"
    ],
    "org.apache.commons.math3.dfp.Dfp#getTwo()": ["org.apache.commons.math3.dfp.DfpField#getTwo()"],
    "org.apache.commons.math3.ode.nonstiff.LutherStepInterpolator#computeInterpolatedStateAndDerivatives(double,double)": ["org.apache.commons.math3.ode.nonstiff.LutherStepInterpolator.<staticinit>()"],
    "org.apache.commons.math3.optimization.general.LevenbergMarquardtOptimizer#LevenbergMarquardtOptimizer(double,double,double)": [
        "org.apache.commons.math3.optimization.general.LevenbergMarquardtOptimizer#LevenbergMarquardtOptimizer(double,double,double,double,double)",
        "org.apache.commons.math3.util.Precision.<staticinit>()"
    ],
    "org.apache.commons.math3.distribution.ZipfDistribution#generalizedHarmonic(int,double)": ["org.apache.commons.math3.util.FastMath.pow(double,double)"],
    "org.apache.commons.math3.analysis.differentiation.DerivativeStructure#divide(DerivativeStructure)": [
        "org.apache.commons.math3.analysis.differentiation.DerivativeStructure#DerivativeStructure(DSCompiler)",
        "org.apache.commons.math3.analysis.differentiation.DSCompiler#divide(double[],int,double[],int,double[],int)",
        "org.apache.commons.math3.analysis.differentiation.DSCompiler#checkCompatibility(DSCompiler)"
    ],
    "org.apache.commons.math3.linear.AbstractRealMatrix#setRow(int,double[])": [
        "org.apache.commons.math3.linear.DiagonalMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.Array2DRowRealMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.Array2DRowRealMatrix#setEntry(int,int,double)",
        "org.apache.commons.math3.linear.OpenMapRealMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.BlockRealMatrix#setEntry(int,int,double)",
        "org.apache.commons.math3.linear.OpenMapRealMatrix#setEntry(int,int,double)",
        "org.apache.commons.math3.linear.BlockRealMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.MatrixDimensionMismatchException#MatrixDimensionMismatchException(int,int,int,int)",
        "org.apache.commons.math3.linear.MatrixUtils.checkRowIndex(AnyMatrix,int)",
        "org.apache.commons.math3.linear.DiagonalMatrix#setEntry(int,int,double)"
    ],
    "org.apache.commons.math3.userguide.ClusterAlgorithmComparison.ClusterPlot#paintComponent(Graphics)": [
        "org.apache.commons.math3.ml.clustering.DoublePoint#getPoint()",
        "org.apache.commons.math3.userguide.ClusterAlgorithmComparison.ClusterPlot#transform(Clusterable,int,int)",
        "org.apache.commons.math3.ml.clustering.Cluster#getPoints()",
        "org.apache.commons.math3.ml.clustering.CentroidCluster#getCenter()"
    ],
    "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.MultiDirectionalSimplex#MultiDirectionalSimplex(int,double,double,double)": [
        "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.MultiDirectionalSimplex.<init>()",
        "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.AbstractSimplex#AbstractSimplex(int,double)"
    ],
    "org.apache.commons.math3.dfp.Dfp#unequal(Dfp)": [
        "org.apache.commons.math3.dfp.DfpField#getRadixDigits()",
        "org.apache.commons.math3.dfp.Dfp#lessThan(Dfp)",
        "org.apache.commons.math3.dfp.Dfp#greaterThan(Dfp)",
        "org.apache.commons.math3.dfp.Dfp#isNaN()"
    ],
    "org.apache.commons.math3.stat.descriptive.AbstractUnivariateStatistic#test(double[],double[],int,int)": ["org.apache.commons.math3.util.MathArrays.verifyValues(double[],double[],int,int,boolean)"],
    "org.apache.commons.math3.fitting.leastsquares.AbstractEvaluation#getRMS()": [
        "org.apache.commons.math3.fitting.leastsquares.AbstractEvaluation#getCost()",
        "org.apache.commons.math3.util.FastMath.sqrt(double)"
    ],
    "org.apache.commons.math3.stat.inference.ChiSquareTest#chiSquare(long[][])": ["org.apache.commons.math3.stat.inference.ChiSquareTest#checkArray(long[][])"],
    "org.apache.commons.math3.dfp.Dfp#subtract(Dfp)": [
        "org.apache.commons.math3.dfp.Dfp#add(Dfp)",
        "org.apache.commons.math3.dfp.Dfp#negate()"
    ],
    "org.apache.commons.math3.fitting.GaussianCurveFitter$Parametric$1#value(double,double[]...)": ["org.apache.commons.math3.analysis.function.Gaussian.Parametric#value(double,double[]...)"],
    "org.apache.commons.math3.util.Combinations.LexicographicIterator#LexicographicIterator(int,int)": ["org.apache.commons.math3.util.Combinations.LexicographicIterator.<init>()"],
    "org.apache.commons.math3.util.Incrementor#incrementCount()": [
        "org.apache.commons.math3.optim.AbstractOptimizationProblem.MaxIterCallback#trigger(int)",
        "org.apache.commons.math3.optim.BaseOptimizer.MaxIterCallback#trigger(int)",
        "org.apache.commons.math3.util.Incrementor#Incrementor(int)$MaxCountExceededCallback$1#trigger(int)",
        "org.apache.commons.math3.optim.AbstractOptimizationProblem.MaxEvalCallback#trigger(int)",
        "org.apache.commons.math3.optim.BaseOptimizer.MaxEvalCallback#trigger(int)"
    ],
    "org.apache.commons.math3.linear.QRDecomposition#decompose(double[][])": [
        "org.apache.commons.math3.util.FastMath.min(int,int)",
        "org.apache.commons.math3.linear.QRDecomposition#performHouseholderReflection(int,double[][])",
        "org.apache.commons.math3.linear.RRQRDecomposition#performHouseholderReflection(int,double[][])"
    ],
    "org.apache.commons.math3.linear.ArrayRealVector#ArrayRealVector(ArrayRealVector,RealVector)": [
        "org.apache.commons.math3.linear.OpenMapRealVector#getDimension()",
        "org.apache.commons.math3.linear.ArrayRealVector#getDimension()",
        "org.apache.commons.math3.linear.RealVector.unmodifiableRealVector(RealVector)$RealVector$1#getDimension()",
        "org.apache.commons.math3.linear.ArrayRealVector#getEntry(int)",
        "org.apache.commons.math3.linear.RealVector.<init>()",
        "org.apache.commons.math3.linear.OpenMapRealVector#getEntry(int)",
        "org.apache.commons.math3.linear.ArrayRealVector.<init>()",
        "org.apache.commons.math3.linear.RealVector.unmodifiableRealVector(RealVector)$RealVector$1#getEntry(int)"
    ],
    "org.apache.commons.math3.util.Decimal64#Decimal64(double)": ["org.apache.commons.math3.util.Decimal64.<init>()"],
    "org.apache.commons.math3.linear.FieldLUDecomposition#getU()": [
        "org.apache.commons.math3.linear.Array2DRowFieldMatrix#setEntry(int,int,T extends FieldElement)",
        "org.apache.commons.math3.linear.BlockFieldMatrix#setEntry(int,int,T extends FieldElement)",
        "org.apache.commons.math3.linear.Array2DRowFieldMatrix#Array2DRowFieldMatrix(Field<T extends FieldElement>,int,int)",
        "org.apache.commons.math3.linear.SparseFieldMatrix#setEntry(int,int,T extends FieldElement)"
    ],
    "org.apache.commons.math3.userguide.LowDiscrepancyGeneratorComparison.makeCircle(int,RandomVectorGenerator)": [
        "org.apache.commons.math3.geometry.euclidean.twod.Vector2D#getY()",
        "org.apache.commons.math3.random.HaltonSequenceGenerator#nextVector()",
        "org.apache.commons.math3.random.CorrelatedRandomVectorGenerator#nextVector()",
        "org.apache.commons.math3.random.SobolSequenceGenerator#nextVector()",
        "org.apache.commons.math3.geometry.euclidean.twod.Vector2D#getX()",
        "org.apache.commons.math3.geometry.euclidean.twod.Vector2D#Vector2D(double[])",
        "org.apache.commons.math3.random.UncorrelatedRandomVectorGenerator#nextVector()",
        "org.apache.commons.math3.userguide.LowDiscrepancyGeneratorComparison.Display#Display()$RandomVectorGenerator$1#nextVector()",
        "org.apache.commons.math3.util.FastMath.pow(double,int)",
        "org.apache.commons.math3.random.UnitSphereRandomVectorGenerator#nextVector()",
        "org.apache.commons.math3.userguide.LowDiscrepancyGeneratorComparison.normalize(List<Vector2D>)"
    ],
    "org.apache.commons.math3.complex.Quaternion#subtract(Quaternion)": ["org.apache.commons.math3.complex.Quaternion.subtract(Quaternion,Quaternion)"],
    "org.apache.commons.math3.optimization.general.LevenbergMarquardtOptimizer#doOptimize()": [
        "org.apache.commons.math3.optimization.PointVectorValuePair#getPoint()",
        "org.apache.commons.math3.linear.Array2DRowRealMatrix#operate(double[])",
        "org.apache.commons.math3.optimization.direct.BaseAbstractMultivariateVectorOptimizer#getStartPoint()",
        "org.apache.commons.math3.optimization.general.AbstractLeastSquaresOptimizer#getWeightSquareRoot()",
        "org.apache.commons.math3.util.FastMath.max(double,double)",
        "org.apache.commons.math3.optimization.general.AbstractLeastSquaresOptimizer#computeWeightedJacobian(double[])",
        "org.apache.commons.math3.exception.util.LocalizedFormats.<staticinit>()",
        "org.apache.commons.math3.util.FastMath.min(double,double)",
        "org.apache.commons.math3.optimization.direct.BaseAbstractMultivariateVectorOptimizer#computeObjectiveValue(double[])",
        "org.apache.commons.math3.linear.DiagonalMatrix#operate(double[])",
        "org.apache.commons.math3.util.FastMath.min(int,int)",
        "org.apache.commons.math3.linear.AbstractRealMatrix#operate(double[])",
        "org.apache.commons.math3.optimization.general.LevenbergMarquardtOptimizer#qTy(double[])",
        "org.apache.commons.math3.optimization.PointVectorValuePair#PointVectorValuePair(double[],double[])",
        "org.apache.commons.math3.optimization.general.AbstractLeastSquaresOptimizer#setCost(double)",
        "org.apache.commons.math3.util.FastMath.abs(double)",
        "org.apache.commons.math3.optimization.general.AbstractLeastSquaresOptimizer#computeResiduals(double[])",
        "org.apache.commons.math3.util.FastMath.sqrt(double)",
        "org.apache.commons.math3.optimization.direct.BaseAbstractMultivariateVectorOptimizer#getTarget()",
        "org.apache.commons.math3.optimization.general.LevenbergMarquardtOptimizer#qrDecomposition(RealMatrix)",
        "org.apache.commons.math3.optimization.general.AbstractLeastSquaresOptimizer#computeCost(double[])",
        "org.apache.commons.math3.optimization.direct.BaseAbstractMultivariateVectorOptimizer#getConvergenceChecker()",
        "org.apache.commons.math3.linear.BlockRealMatrix#operate(double[])",
        "org.apache.commons.math3.optimization.general.LevenbergMarquardtOptimizer#determineLMParameter(double[],double,double[],double[],double[],double[])"
    ],
    "org.apache.commons.math3.fraction.BigFractionFormat#format(Object,StringBuffer,FieldPosition)": [
        "org.apache.commons.math3.fraction.BigFraction#BigFraction(BigInteger)",
        "org.apache.commons.math3.fraction.BigFractionFormat#format(BigFraction,StringBuffer,FieldPosition)",
        "org.apache.commons.math3.fraction.ProperBigFractionFormat#format(BigFraction,StringBuffer,FieldPosition)",
        "org.apache.commons.math3.exception.util.LocalizedFormats.<staticinit>()"
    ],
    "org.apache.commons.math3.linear.BlockFieldMatrix#getData()": [
        "org.apache.commons.math3.util.MathArrays.buildArray(Field<T>,int,int)",
        "org.apache.commons.math3.linear.BlockFieldMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.BlockFieldMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.AbstractFieldMatrix#getField()",
        "org.apache.commons.math3.linear.BlockFieldMatrix.<staticinit>()",
        "org.apache.commons.math3.util.FastMath.min(int,int)"
    ],
    "org.apache.commons.math3.stat.descriptive.MultivariateSummaryStatistics#setMeanImpl(StorelessUnivariateStatistic[])": ["org.apache.commons.math3.stat.descriptive.MultivariateSummaryStatistics#setImpl(StorelessUnivariateStatistic[],StorelessUnivariateStatistic[])"],
    "org.apache.commons.math3.analysis.polynomials.PolynomialSplineFunction#derivative()": ["org.apache.commons.math3.analysis.polynomials.PolynomialSplineFunction#polynomialSplineDerivative()"],
    "org.apache.commons.math3.optim.nonlinear.vector.jacobian.AbstractLeastSquaresOptimizer#getRMS()": [
        "org.apache.commons.math3.optim.nonlinear.vector.MultivariateVectorOptimizer#getTargetSize()",
        "org.apache.commons.math3.optim.nonlinear.vector.jacobian.AbstractLeastSquaresOptimizer#getChiSquare()",
        "org.apache.commons.math3.util.FastMath.sqrt(double)"
    ],
    "org.apache.commons.math3.analysis.integration.TrapezoidIntegrator#doIntegrate()": [
        "org.apache.commons.math3.analysis.integration.BaseAbstractUnivariateIntegrator#getAbsoluteAccuracy()",
        "org.apache.commons.math3.util.FastMath.abs(double)",
        "org.apache.commons.math3.analysis.integration.BaseAbstractUnivariateIntegrator#getMinimalIterationCount()",
        "org.apache.commons.math3.analysis.integration.BaseAbstractUnivariateIntegrator#getRelativeAccuracy()",
        "org.apache.commons.math3.analysis.integration.TrapezoidIntegrator#stage(BaseAbstractUnivariateIntegrator,int)",
        "org.apache.commons.math3.analysis.integration.BaseAbstractUnivariateIntegrator#incrementCount()",
        "org.apache.commons.math3.analysis.integration.BaseAbstractUnivariateIntegrator#getIterations()"
    ],
    "org.apache.commons.math3.distribution.SaddlePointExpansion.logBinomialProbability(int,int,double,double)": [
        "org.apache.commons.math3.distribution.SaddlePointExpansion.getStirlingError(double)",
        "org.apache.commons.math3.util.MathUtils.<staticinit>()",
        "org.apache.commons.math3.util.FastMath.log(double)",
        "org.apache.commons.math3.distribution.SaddlePointExpansion.getDeviancePart(double,double)"
    ],
    "org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D#FieldVector3D(T extends RealFieldElement,Vector3D,T extends RealFieldElement,Vector3D,T extends RealFieldElement,Vector3D,T extends RealFieldElement,Vector3D)": [
        "org.apache.commons.math3.geometry.euclidean.threed.Vector3D#getX()",
        "org.apache.commons.math3.geometry.euclidean.threed.Vector3D#getZ()",
        "org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D.<init>()",
        "org.apache.commons.math3.geometry.euclidean.threed.Vector3D#getY()"
    ],
    "org.apache.commons.math3.ml.distance.ManhattanDistance#compute(double[],double[])": ["org.apache.commons.math3.util.MathArrays.distance1(double[],double[])"],
    "org.apache.commons.math3.ode.nonstiff.GraggBulirschStoerStepInterpolator#resetTables(int)": ["org.apache.commons.math3.util.FastMath.sqrt(double)"],
    "org.apache.commons.math3.stat.descriptive.DescriptiveStatistics#setPercentileImpl(UnivariateStatistic)": [
        "org.apache.commons.math3.stat.descriptive.DescriptiveStatistics.<staticinit>()",
        "org.apache.commons.math3.exception.util.LocalizedFormats.<staticinit>()"
    ],
    "org.apache.commons.math3.random.SobolSequenceGenerator#SobolSequenceGenerator(int,InputStream)": [
        "org.apache.commons.math3.random.SobolSequenceGenerator#initFromStream(InputStream)",
        "org.apache.commons.math3.random.SobolSequenceGenerator.<init>()",
        "org.apache.commons.math3.random.SobolSequenceGenerator.<staticinit>()"
    ],
    "org.apache.commons.math3.analysis.interpolation.AkimaSplineInterpolator#interpolateHermiteSorted(double[],double[],double[])": [
        "org.apache.commons.math3.exception.DimensionMismatchException#DimensionMismatchException(int,int)",
        "org.apache.commons.math3.analysis.polynomials.PolynomialSplineFunction#PolynomialSplineFunction(double[],PolynomialFunction[])",
        "org.apache.commons.math3.exception.util.LocalizedFormats.<staticinit>()",
        "org.apache.commons.math3.analysis.polynomials.PolynomialFunction#PolynomialFunction(double[])"
    ],
    "org.apache.commons.math3.exception.TooManyEvaluationsException#TooManyEvaluationsException(Number)": [
        "org.apache.commons.math3.exception.MaxCountExceededException#MaxCountExceededException(Number)",
        "org.apache.commons.math3.exception.TooManyEvaluationsException.<init>()",
        "org.apache.commons.math3.exception.MathIllegalStateException#getContext()",
        "org.apache.commons.math3.exception.util.LocalizedFormats.<staticinit>()"
    ],
    "org.apache.commons.math3.geometry.partitioning.utilities.AVLTree.Node#rebalanceLeftShrunk()": [
        "org.apache.commons.math3.geometry.partitioning.utilities.AVLTree.Node#rotateCW()",
        "org.apache.commons.math3.geometry.partitioning.utilities.AVLTree.Skew.<staticinit>()",
        "org.apache.commons.math3.geometry.partitioning.utilities.AVLTree.Node#rotateCCW()"
    ],
    "org.apache.commons.math3.geometry.euclidean.twod.Line#wholeSpace()": ["org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet#PolygonsSet(double)"],
    "org.apache.commons.math3.analysis.differentiation.DerivativeStructure#getField()$Field$1#getOne()": [
        "org.apache.commons.math3.analysis.differentiation.DerivativeStructure#DerivativeStructure(int,int,double[]...)",
        "org.apache.commons.math3.analysis.differentiation.DSCompiler#getOrder()",
        "org.apache.commons.math3.analysis.differentiation.DSCompiler#getFreeParameters()"
    ],
    "org.apache.commons.math3.ode.nonstiff.DormandPrince54StepInterpolator#computeInterpolatedStateAndDerivatives(double,double)": ["org.apache.commons.math3.ode.nonstiff.DormandPrince54StepInterpolator.<staticinit>()"],
    "org.apache.commons.math3.stat.descriptive.MultivariateSummaryStatistics#checkDimension(int)": ["org.apache.commons.math3.exception.DimensionMismatchException#DimensionMismatchException(int,int)"],
    "org.apache.commons.math3.complex.Complex.equals(Complex,Complex,double)": ["org.apache.commons.math3.util.Precision.equals(double,double,double)"],
    "org.apache.commons.math3.geometry.euclidean.oned.SubOrientedPoint#split(Hyperplane<Euclidean1D>)": [
        "org.apache.commons.math3.geometry.partitioning.SubHyperplane.SplitSubHyperplane#SplitSubHyperplane(SubHyperplane<U extends Space>,SubHyperplane<U extends Space>)",
        "org.apache.commons.math3.geometry.partitioning.AbstractSubHyperplane#getHyperplane()",
        "org.apache.commons.math3.geometry.euclidean.oned.OrientedPoint#getLocation()"
    ],
    "org.apache.commons.math3.exception.NumberIsTooSmallException#NumberIsTooSmallException(Number,Number,boolean)": [
        "org.apache.commons.math3.exception.NumberIsTooSmallException#NumberIsTooSmallException(Localizable,Number,Number,boolean)",
        "org.apache.commons.math3.exception.util.LocalizedFormats.<staticinit>()"
    ],
    "org.apache.commons.math3.stat.regression.AbstractMultipleLinearRegression#newXSampleData(double[][])": [
        "org.apache.commons.math3.exception.DimensionMismatchException#DimensionMismatchException(int,int)",
        "org.apache.commons.math3.exception.NoDataException#NoDataException()",
        "org.apache.commons.math3.exception.NullArgumentException#NullArgumentException()",
        "org.apache.commons.math3.linear.Array2DRowRealMatrix#Array2DRowRealMatrix(double[][],boolean)"
    ],
    "org.apache.commons.math3.analysis.function.Logistic.value(double,double,double,double,double,double)": [
        "org.apache.commons.math3.util.FastMath.pow(double,double)",
        "org.apache.commons.math3.util.FastMath.exp(double)"
    ],
    "org.apache.commons.math3.optimization.linear.LinearConstraint#hashCode()": [
        "org.apache.commons.math3.linear.ArrayRealVector#hashCode()",
        "org.apache.commons.math3.linear.RealVector#hashCode()",
        "org.apache.commons.math3.linear.OpenMapRealVector#hashCode()"
    ],
    "org.apache.commons.math3.userguide.genetics.ImageEvolutionExample.Display#startEvolution()": ["org.apache.commons.math3.userguide.genetics.ImageEvolutionExample.Display#startEvolution()$Runnable$1.<init>()"],
    "org.apache.commons.math3.stat.descriptive.SummaryStatistics#addValue(double)": [
        "org.apache.commons.math3.stat.descriptive.moment.Mean#increment(double)",
        "org.apache.commons.math3.stat.descriptive.rank.Max#increment(double)",
        "org.apache.commons.math3.stat.descriptive.summary.SumOfLogs#increment(double)",
        "org.apache.commons.math3.stat.descriptive.moment.Kurtosis#increment(double)",
        "org.apache.commons.math3.stat.descriptive.moment.FourthMoment#increment(double)",
        "org.apache.commons.math3.stat.descriptive.moment.Skewness#increment(double)",
        "org.apache.commons.math3.stat.descriptive.moment.StandardDeviation#increment(double)",
        "org.apache.commons.math3.stat.descriptive.moment.FirstMoment#increment(double)",
        "org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile#increment(double)",
        "org.apache.commons.math3.stat.descriptive.moment.GeometricMean#increment(double)",
        "org.apache.commons.math3.stat.descriptive.moment.Variance#increment(double)",
        "org.apache.commons.math3.stat.descriptive.moment.SecondMoment#increment(double)",
        "org.apache.commons.math3.stat.descriptive.rank.Min#increment(double)",
        "org.apache.commons.math3.stat.descriptive.summary.SumOfSquares#increment(double)",
        "org.apache.commons.math3.stat.descriptive.summary.Product#increment(double)",
        "org.apache.commons.math3.stat.descriptive.moment.ThirdMoment#increment(double)",
        "org.apache.commons.math3.stat.descriptive.summary.Sum#increment(double)"
    ],
    "org.apache.commons.math3.stat.regression.OLSMultipleLinearRegression#calculateBeta()": [
        "org.apache.commons.math3.linear.QRDecomposition.Solver#solve(RealVector)",
        "org.apache.commons.math3.linear.CholeskyDecomposition.Solver#solve(RealVector)",
        "org.apache.commons.math3.linear.SingularValueDecomposition.Solver#solve(RealVector)",
        "org.apache.commons.math3.linear.RRQRDecomposition.Solver#solve(RealVector)",
        "org.apache.commons.math3.linear.QRDecomposition#getSolver()",
        "org.apache.commons.math3.stat.regression.AbstractMultipleLinearRegression#getY()",
        "org.apache.commons.math3.linear.LUDecomposition.Solver#solve(RealVector)",
        "org.apache.commons.math3.linear.RRQRDecomposition#getSolver()",
        "org.apache.commons.math3.linear.EigenDecomposition.Solver#solve(RealVector)"
    ],
    "org.apache.commons.math3.analysis.differentiation.DerivativeStructure#acos()": [
        "org.apache.commons.math3.analysis.differentiation.DSCompiler#acos(double[],int,double[],int)",
        "org.apache.commons.math3.analysis.differentiation.DerivativeStructure#DerivativeStructure(DSCompiler)"
    ],
    "org.apache.commons.math3.stat.descriptive.AbstractUnivariateStatistic#test(double[],double[],int,int,boolean)": ["org.apache.commons.math3.util.MathArrays.verifyValues(double[],double[],int,int,boolean)"],
    "org.apache.commons.math3.optimization.direct.BaseAbstractMultivariateOptimizer#parseOptimizationData(OptimizationData[]...)": [
        "org.apache.commons.math3.optimization.SimpleBounds#getUpper()",
        "org.apache.commons.math3.optimization.InitialGuess#getInitialGuess()",
        "org.apache.commons.math3.optimization.SimpleBounds#getLower()"
    ],
    "org.apache.commons.math3.exception.util.ExceptionContext#getMessage(Locale)": ["org.apache.commons.math3.exception.util.ExceptionContext#buildMessage(Locale,String)"],
    "org.apache.commons.math3.analysis.function.Logistic#derivative()": [
        "org.apache.commons.math3.analysis.function.Log10#derivative()",
        "org.apache.commons.math3.analysis.function.Power#derivative()",
        "org.apache.commons.math3.analysis.function.Sin#derivative()",
        "org.apache.commons.math3.analysis.function.Exp#derivative()",
        "org.apache.commons.math3.analysis.function.HarmonicOscillator#derivative()",
        "org.apache.commons.math3.analysis.polynomials.PolynomialFunction#derivative()",
        "org.apache.commons.math3.analysis.FunctionUtils.toDifferentiableUnivariateFunction(UnivariateDifferentiableFunction)",
        "org.apache.commons.math3.analysis.function.Logit#derivative()",
        "org.apache.commons.math3.analysis.function.Cbrt#derivative()",
        "org.apache.commons.math3.analysis.FunctionUtils.toDifferentiableUnivariateFunction(UnivariateDifferentiableFunction)$DifferentiableUnivariateFunction$1#derivative()",
        "org.apache.commons.math3.analysis.polynomials.PolynomialSplineFunction#derivative()",
        "org.apache.commons.math3.analysis.function.Cosh#derivative()",
        "org.apache.commons.math3.analysis.function.Identity#derivative()",
        "org.apache.commons.math3.analysis.function.Inverse#derivative()",
        "org.apache.commons.math3.analysis.function.Acosh#derivative()",
        "org.apache.commons.math3.analysis.function.Acos#derivative()",
        "org.apache.commons.math3.analysis.function.Atan#derivative()",
        "org.apache.commons.math3.analysis.function.Log#derivative()",
        "org.apache.commons.math3.analysis.function.Sqrt#derivative()",
        "org.apache.commons.math3.analysis.function.Logistic#derivative()",
        "org.apache.commons.math3.analysis.function.Expm1#derivative()",
        "org.apache.commons.math3.analysis.function.Asinh#derivative()",
        "org.apache.commons.math3.analysis.function.Gaussian#derivative()",
        "org.apache.commons.math3.analysis.function.Sinc#derivative()",
        "org.apache.commons.math3.analysis.function.Sigmoid#derivative()",
        "org.apache.commons.math3.analysis.function.Constant#derivative()",
        "org.apache.commons.math3.analysis.function.Sinh#derivative()",
        "org.apache.commons.math3.analysis.function.Tanh#derivative()",
        "org.apache.commons.math3.analysis.function.Asin#derivative()",
        "org.apache.commons.math3.analysis.function.Minus#derivative()",
        "org.apache.commons.math3.analysis.FunctionUtils.compose(DifferentiableUnivariateFunction[]...)$DifferentiableUnivariateFunction$1#derivative()",
        "org.apache.commons.math3.analysis.FunctionUtils.add(DifferentiableUnivariateFunction[]...)$DifferentiableUnivariateFunction$1#derivative()",
        "org.apache.commons.math3.analysis.FunctionUtils.multiply(DifferentiableUnivariateFunction[]...)$DifferentiableUnivariateFunction$1#derivative()",
        "org.apache.commons.math3.analysis.function.Log1p#derivative()",
        "org.apache.commons.math3.analysis.function.Tan#derivative()",
        "org.apache.commons.math3.analysis.function.Cos#derivative()",
        "org.apache.commons.math3.analysis.function.Atanh#derivative()"
    ],
    "org.apache.commons.math3.analysis.differentiation.DerivativeStructure#rootN(int)": [
        "org.apache.commons.math3.analysis.differentiation.DSCompiler#rootN(double[],int,int,double[],int)",
        "org.apache.commons.math3.analysis.differentiation.DerivativeStructure#DerivativeStructure(DSCompiler)"
    ],
    "org.apache.commons.math3.optimization.direct.BOBYQAOptimizer#bobyqb(double[],double[])": [
        "org.apache.commons.math3.linear.Array2DRowRealMatrix#setEntry(int,int,double)",
        "org.apache.commons.math3.util.FastMath.max(double,double)",
        "org.apache.commons.math3.linear.ArrayRealVector#getDimension()",
        "org.apache.commons.math3.optimization.direct.BaseAbstractMultivariateOptimizer#computeObjectiveValue(double[])",
        "org.apache.commons.math3.util.FastMath.min(double,double)",
        "org.apache.commons.math3.exception.util.LocalizedFormats.<staticinit>()",
        "org.apache.commons.math3.linear.ArrayRealVector#ArrayRealVector(int)",
        "org.apache.commons.math3.optimization.direct.BOBYQAOptimizer#altmov(int,double)",
        "org.apache.commons.math3.util.FastMath.max(int,int)",
        "org.apache.commons.math3.linear.ArrayRealVector#getEntry(int)",
        "org.apache.commons.math3.optimization.direct.BOBYQAOptimizer.printState(int)",
        "org.apache.commons.math3.linear.ArrayRealVector#setEntry(int,double)",
        "org.apache.commons.math3.linear.Array2DRowRealMatrix#getEntry(int,int)",
        "org.apache.commons.math3.optimization.direct.BOBYQAOptimizer#update(double,double,int)",
        "org.apache.commons.math3.util.FastMath.abs(double)",
        "org.apache.commons.math3.optimization.direct.BOBYQAOptimizer.<staticinit>()",
        "org.apache.commons.math3.optimization.direct.BaseAbstractMultivariateOptimizer#getEvaluations()",
        "org.apache.commons.math3.util.FastMath.sqrt(double)",
        "org.apache.commons.math3.optimization.direct.BOBYQAOptimizer.printMethod()",
        "org.apache.commons.math3.optimization.direct.BOBYQAOptimizer#prelim(double[],double[])",
        "org.apache.commons.math3.optimization.direct.BOBYQAOptimizer#trsbox(double,ArrayRealVector,ArrayRealVector,ArrayRealVector,ArrayRealVector,ArrayRealVector)",
        "org.apache.commons.math3.linear.ArrayRealVector#toArray()"
    ],
    "org.apache.commons.math3.ml.neuralnet.twod.util.UnifiedDistanceMatrix#UnifiedDistanceMatrix(boolean,DistanceMeasure)": ["org.apache.commons.math3.ml.neuralnet.twod.util.UnifiedDistanceMatrix.<init>()"],
    "org.apache.commons.math3.stat.descriptive.moment.Kurtosis#Kurtosis(FourthMoment)": [
        "org.apache.commons.math3.stat.descriptive.AbstractStorelessUnivariateStatistic.<init>()",
        "org.apache.commons.math3.stat.descriptive.moment.Kurtosis.<init>()"
    ],
    "org.apache.commons.math3.fitting.PolynomialCurveFitter#PolynomialCurveFitter(double[],int)": [
        "org.apache.commons.math3.fitting.AbstractCurveFitter.<init>()",
        "org.apache.commons.math3.fitting.PolynomialCurveFitter.<init>()"
    ],
    "org.apache.commons.math3.complex.Complex#asin()": [
        "org.apache.commons.math3.complex.Complex#log()",
        "org.apache.commons.math3.complex.Complex#sqrt1z()",
        "org.apache.commons.math3.complex.Complex#add(Complex)",
        "org.apache.commons.math3.complex.Complex.<staticinit>()",
        "org.apache.commons.math3.complex.Complex#multiply(Complex)",
        "org.apache.commons.math3.complex.Complex#negate()"
    ],
    "org.apache.commons.math3.distribution.ZipfDistribution#ZipfDistribution(RandomGenerator,int,double)": [
        "org.apache.commons.math3.distribution.ZipfDistribution.<init>()",
        "org.apache.commons.math3.distribution.AbstractIntegerDistribution#AbstractIntegerDistribution(RandomGenerator)",
        "org.apache.commons.math3.exception.util.LocalizedFormats.<staticinit>()"
    ],
    "org.apache.commons.math3.util.FastMath.toRadians(double)": ["org.apache.commons.math3.util.FastMath.doubleHighPart(double)"],
    "org.apache.commons.math3.ml.clustering.evaluation.ClusterEvaluator#distance(Clusterable,Clusterable)": [
        "org.apache.commons.math3.ml.clustering.DoublePoint#getPoint()",
        "org.apache.commons.math3.ml.distance.EuclideanDistance#compute(double[],double[])",
        "org.apache.commons.math3.ml.distance.ChebyshevDistance#compute(double[],double[])",
        "org.apache.commons.math3.ml.distance.ManhattanDistance#compute(double[],double[])",
        "org.apache.commons.math3.ml.distance.CanberraDistance#compute(double[],double[])",
        "org.apache.commons.math3.ml.distance.EarthMoversDistance#compute(double[],double[])"
    ],
    "org.apache.commons.math3.complex.ComplexFormat#ComplexFormat(NumberFormat,NumberFormat)": [
        "org.apache.commons.math3.complex.ComplexFormat.<init>()",
        "org.apache.commons.math3.complex.ComplexFormat.<staticinit>()",
        "org.apache.commons.math3.exception.util.LocalizedFormats.<staticinit>()"
    ],
    "org.apache.commons.math3.optim.linear.Relationship#Relationship(String)": ["org.apache.commons.math3.optim.linear.Relationship.<init>()"],
    "org.apache.commons.math3.stat.inference.TestUtils.chiSquare(double[],long[])": [
        "org.apache.commons.math3.stat.inference.ChiSquareTest#chiSquare(double[],long[])",
        "org.apache.commons.math3.stat.inference.TestUtils.<staticinit>()"
    ],
    "org.apache.commons.math3.linear.BlockFieldMatrix#getRowVector(int)": [
        "org.apache.commons.math3.linear.BlockFieldMatrix#blockWidth(int)",
        "org.apache.commons.math3.linear.AbstractFieldMatrix#getField()",
        "org.apache.commons.math3.linear.BlockFieldMatrix.<staticinit>()",
        "org.apache.commons.math3.linear.ArrayFieldVector#ArrayFieldVector(Field<T extends FieldElement>,T extends FieldElement[],boolean)",
        "org.apache.commons.math3.util.MathArrays.buildArray(Field<T>,int)",
        "org.apache.commons.math3.linear.AbstractFieldMatrix#checkRowIndex(int)"
    ],
    "org.apache.commons.math3.linear.AbstractRealMatrix#operate(double[])": [
        "org.apache.commons.math3.linear.DiagonalMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.Array2DRowRealMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.DiagonalMatrix#getEntry(int,int)",
        "org.apache.commons.math3.linear.OpenMapRealMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.OpenMapRealMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.DiagonalMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.OpenMapRealMatrix#getEntry(int,int)",
        "org.apache.commons.math3.linear.BlockRealMatrix#getEntry(int,int)",
        "org.apache.commons.math3.exception.DimensionMismatchException#DimensionMismatchException(int,int)",
        "org.apache.commons.math3.linear.BlockRealMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.Array2DRowRealMatrix#getEntry(int,int)",
        "org.apache.commons.math3.linear.Array2DRowRealMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.BlockRealMatrix#getColumnDimension()"
    ],
    "org.apache.commons.math3.random.RandomGeneratorFactory.createRandomGenerator(Random)$RandomGenerator$1#setSeed(long)": [
        "org.apache.commons.math3.random.JDKRandomGenerator#setSeed(int)",
        "org.apache.commons.math3.random.RandomAdaptor#setSeed(long)"
    ],
    "org.apache.commons.math3.fraction.BigFraction#doubleValue()": [
        "org.apache.commons.math3.util.FastMath.getExponent(double)",
        "org.apache.commons.math3.util.FastMath.max(int,int)"
    ],
    "org.apache.commons.math3.ode.nonstiff.AdamsNordsieckTransformer#initializeHighOrderDerivatives(double,double[],double[][],double[][])": [
        "org.apache.commons.math3.linear.Array2DRowRealMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.QRDecomposition#QRDecomposition(RealMatrix)",
        "org.apache.commons.math3.linear.DiagonalMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.BlockFieldMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.EigenDecomposition.Solver#solve(RealMatrix)",
        "org.apache.commons.math3.linear.Array2DRowRealMatrix#setEntry(int,int,double)",
        "org.apache.commons.math3.linear.DiagonalMatrix#getEntry(int,int)",
        "org.apache.commons.math3.linear.OpenMapRealMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.DiagonalMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.BlockRealMatrix#getEntry(int,int)",
        "org.apache.commons.math3.linear.SingularValueDecomposition.Solver#solve(RealMatrix)",
        "org.apache.commons.math3.linear.BlockFieldMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.BlockRealMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.QRDecomposition.Solver#solve(RealMatrix)",
        "org.apache.commons.math3.linear.LUDecomposition.Solver#solve(RealMatrix)",
        "org.apache.commons.math3.linear.CholeskyDecomposition.Solver#solve(RealMatrix)",
        "org.apache.commons.math3.linear.SparseFieldMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.QRDecomposition#getSolver()",
        "org.apache.commons.math3.linear.OpenMapRealMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.RRQRDecomposition.Solver#solve(RealMatrix)",
        "org.apache.commons.math3.linear.Array2DRowRealMatrix#Array2DRowRealMatrix(int,int)",
        "org.apache.commons.math3.linear.OpenMapRealMatrix#getEntry(int,int)",
        "org.apache.commons.math3.linear.Array2DRowRealMatrix#Array2DRowRealMatrix(double[][],boolean)",
        "org.apache.commons.math3.linear.Array2DRowFieldMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.SparseFieldMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.Array2DRowRealMatrix#getEntry(int,int)",
        "org.apache.commons.math3.linear.Array2DRowRealMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.Array2DRowFieldMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.BlockRealMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.RRQRDecomposition#getSolver()"
    ],
    "org.apache.commons.math3.util.BigReal#BigReal(BigInteger,int,MathContext)": ["org.apache.commons.math3.util.BigReal.<init>()"],
    "org.apache.commons.math3.analysis.function.Gaussian#derivative()": [
        "org.apache.commons.math3.analysis.function.Log10#derivative()",
        "org.apache.commons.math3.analysis.function.Power#derivative()",
        "org.apache.commons.math3.analysis.function.Sin#derivative()",
        "org.apache.commons.math3.analysis.function.Exp#derivative()",
        "org.apache.commons.math3.analysis.function.HarmonicOscillator#derivative()",
        "org.apache.commons.math3.analysis.polynomials.PolynomialFunction#derivative()",
        "org.apache.commons.math3.analysis.FunctionUtils.toDifferentiableUnivariateFunction(UnivariateDifferentiableFunction)",
        "org.apache.commons.math3.analysis.function.Logit#derivative()",
        "org.apache.commons.math3.analysis.function.Cbrt#derivative()",
        "org.apache.commons.math3.analysis.FunctionUtils.toDifferentiableUnivariateFunction(UnivariateDifferentiableFunction)$DifferentiableUnivariateFunction$1#derivative()",
        "org.apache.commons.math3.analysis.polynomials.PolynomialSplineFunction#derivative()",
        "org.apache.commons.math3.analysis.function.Cosh#derivative()",
        "org.apache.commons.math3.analysis.function.Identity#derivative()",
        "org.apache.commons.math3.analysis.function.Inverse#derivative()",
        "org.apache.commons.math3.analysis.function.Acosh#derivative()",
        "org.apache.commons.math3.analysis.function.Acos#derivative()",
        "org.apache.commons.math3.analysis.function.Atan#derivative()",
        "org.apache.commons.math3.analysis.function.Log#derivative()",
        "org.apache.commons.math3.analysis.function.Sqrt#derivative()",
        "org.apache.commons.math3.analysis.function.Logistic#derivative()",
        "org.apache.commons.math3.analysis.function.Expm1#derivative()",
        "org.apache.commons.math3.analysis.function.Asinh#derivative()",
        "org.apache.commons.math3.analysis.function.Gaussian#derivative()",
        "org.apache.commons.math3.analysis.function.Sinc#derivative()",
        "org.apache.commons.math3.analysis.function.Sigmoid#derivative()",
        "org.apache.commons.math3.analysis.function.Constant#derivative()",
        "org.apache.commons.math3.analysis.function.Sinh#derivative()",
        "org.apache.commons.math3.analysis.function.Tanh#derivative()",
        "org.apache.commons.math3.analysis.function.Asin#derivative()",
        "org.apache.commons.math3.analysis.function.Minus#derivative()",
        "org.apache.commons.math3.analysis.FunctionUtils.compose(DifferentiableUnivariateFunction[]...)$DifferentiableUnivariateFunction$1#derivative()",
        "org.apache.commons.math3.analysis.FunctionUtils.add(DifferentiableUnivariateFunction[]...)$DifferentiableUnivariateFunction$1#derivative()",
        "org.apache.commons.math3.analysis.FunctionUtils.multiply(DifferentiableUnivariateFunction[]...)$DifferentiableUnivariateFunction$1#derivative()",
        "org.apache.commons.math3.analysis.function.Log1p#derivative()",
        "org.apache.commons.math3.analysis.function.Tan#derivative()",
        "org.apache.commons.math3.analysis.function.Cos#derivative()",
        "org.apache.commons.math3.analysis.function.Atanh#derivative()"
    ],
    "org.apache.commons.math3.analysis.differentiation.DerivativeStructure.pow(double,DerivativeStructure)": [
        "org.apache.commons.math3.analysis.differentiation.DSCompiler#pow(double,double[],int,double[],int)",
        "org.apache.commons.math3.analysis.differentiation.DerivativeStructure#DerivativeStructure(DSCompiler)"
    ],
    "org.apache.commons.math3.stat.descriptive.SynchronizedMultivariateSummaryStatistics#getMaxImpl()": ["org.apache.commons.math3.stat.descriptive.MultivariateSummaryStatistics#getMaxImpl()"],
    "org.apache.commons.math3.util.Decimal64#remainder(Decimal64)": [
        "org.apache.commons.math3.util.Decimal64#Decimal64(double)",
        "org.apache.commons.math3.util.FastMath.IEEEremainder(double,double)"
    ],
    "org.apache.commons.math3.util.OpenIntToFieldHashMap#OpenIntToFieldHashMap(Field<T extends FieldElement>,int)": [
        "org.apache.commons.math3.util.BigRealField#getZero()",
        "org.apache.commons.math3.analysis.differentiation.SparseGradient#getField()$Field$1#getZero()",
        "org.apache.commons.math3.analysis.differentiation.DerivativeStructure#getField()$Field$1#getZero()",
        "org.apache.commons.math3.fraction.FractionField#getZero()",
        "org.apache.commons.math3.util.Decimal64Field#getZero()",
        "org.apache.commons.math3.dfp.DfpField#getZero()",
        "org.apache.commons.math3.complex.ComplexField#getZero()",
        "org.apache.commons.math3.fraction.BigFractionField#getZero()",
        "org.apache.commons.math3.util.OpenIntToFieldHashMap#OpenIntToFieldHashMap(Field<T extends FieldElement>,int,T extends FieldElement)"
    ],
    "org.apache.commons.math3.userguide.sofm.ChineseRingsClassifier#createIterable()$Iterator$1$Iterator$1#iterator()$Iterator$1#next()": ["org.apache.commons.math3.geometry.euclidean.threed.Vector3D#toArray()"],
    "org.apache.commons.math3.optim.linear.LinearObjectiveFunction#hashCode()": [
        "org.apache.commons.math3.linear.ArrayRealVector#hashCode()",
        "org.apache.commons.math3.linear.RealVector#hashCode()",
        "org.apache.commons.math3.linear.OpenMapRealVector#hashCode()"
    ],
    "org.apache.commons.math3.optimization.direct.CMAESOptimizer.FitnessFunction#value(double[])": [
        "org.apache.commons.math3.optimization.direct.CMAESOptimizer.FitnessFunction#penalty(double[],double[])",
        "org.apache.commons.math3.optimization.direct.BaseAbstractMultivariateOptimizer#computeObjectiveValue(double[])",
        "org.apache.commons.math3.optimization.direct.CMAESOptimizer.FitnessFunction#repair(double[])"
    ],
    "org.apache.commons.math3.stat.descriptive.SummaryStatistics#getSumsq()": [
        "org.apache.commons.math3.stat.descriptive.moment.FirstMoment#getResult()",
        "org.apache.commons.math3.stat.descriptive.rank.Min#getResult()",
        "org.apache.commons.math3.stat.descriptive.moment.GeometricMean#getResult()",
        "org.apache.commons.math3.stat.descriptive.moment.Variance#getResult()",
        "org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile#getResult()",
        "org.apache.commons.math3.stat.descriptive.summary.Sum#getResult()",
        "org.apache.commons.math3.stat.descriptive.moment.FourthMoment#getResult()",
        "org.apache.commons.math3.stat.descriptive.moment.StandardDeviation#getResult()",
        "org.apache.commons.math3.stat.descriptive.summary.SumOfLogs#getResult()",
        "org.apache.commons.math3.stat.descriptive.summary.Product#getResult()",
        "org.apache.commons.math3.stat.descriptive.summary.SumOfSquares#getResult()",
        "org.apache.commons.math3.stat.descriptive.moment.Skewness#getResult()",
        "org.apache.commons.math3.stat.descriptive.moment.Kurtosis#getResult()",
        "org.apache.commons.math3.stat.descriptive.rank.Max#getResult()",
        "org.apache.commons.math3.stat.descriptive.moment.SecondMoment#getResult()",
        "org.apache.commons.math3.stat.descriptive.moment.ThirdMoment#getResult()",
        "org.apache.commons.math3.stat.descriptive.moment.Mean#getResult()"
    ],
    "org.apache.commons.math3.linear.DiagonalMatrix#multiplyEntry(int,int,double)": ["org.apache.commons.math3.linear.MatrixUtils.checkRowIndex(AnyMatrix,int)"],
    "org.apache.commons.math3.transform.FastHadamardTransformer#fht(int[])": [
        "org.apache.commons.math3.util.ArithmeticUtils.isPowerOfTwo(long)",
        "org.apache.commons.math3.exception.util.LocalizedFormats.<staticinit>()"
    ],
    "org.apache.commons.math3.geometry.euclidean.threed.FieldRotation#composeInternal(Rotation)": [
        "org.apache.commons.math3.geometry.euclidean.threed.Rotation#getQ3()",
        "org.apache.commons.math3.geometry.euclidean.threed.Rotation#getQ2()",
        "org.apache.commons.math3.geometry.euclidean.threed.Rotation#getQ1()",
        "org.apache.commons.math3.geometry.euclidean.threed.Rotation#getQ0()",
        "org.apache.commons.math3.geometry.euclidean.threed.FieldRotation#FieldRotation(T extends RealFieldElement,T extends RealFieldElement,T extends RealFieldElement,T extends RealFieldElement,boolean)"
    ],
    "org.apache.commons.math3.stat.correlation.KendallsCorrelation#computeCorrelationMatrix(double[][])": [
        "org.apache.commons.math3.stat.correlation.KendallsCorrelation#computeCorrelationMatrix(RealMatrix)",
        "org.apache.commons.math3.linear.BlockRealMatrix#BlockRealMatrix(double[][])"
    ],
    "org.apache.commons.math3.stat.descriptive.SynchronizedSummaryStatistics#clear()": ["org.apache.commons.math3.stat.descriptive.SummaryStatistics#clear()"],
    "org.apache.commons.math3.analysis.function.Power#value(DerivativeStructure)": ["org.apache.commons.math3.analysis.differentiation.DerivativeStructure#pow(double)"],
    "org.apache.commons.math3.stat.descriptive.DescriptiveStatistics#getMax()": [
        "org.apache.commons.math3.stat.descriptive.DescriptiveStatistics#apply(UnivariateStatistic)",
        "org.apache.commons.math3.stat.descriptive.SynchronizedDescriptiveStatistics#apply(UnivariateStatistic)"
    ],
    "org.apache.commons.math3.geometry.euclidean.threed.FieldRotation#orthogonalizeMatrix(T extends RealFieldElement[][],double)": [
        "org.apache.commons.math3.util.FastMath.abs(double)",
        "org.apache.commons.math3.util.MathArrays.buildArray(Field<T>,int,int)",
        "org.apache.commons.math3.exception.util.LocalizedFormats.<staticinit>()"
    ],
    "org.apache.commons.math3.analysis.solvers.RiddersSolver#RiddersSolver(double)": [
        "org.apache.commons.math3.analysis.solvers.RiddersSolver.<init>()",
        "org.apache.commons.math3.analysis.solvers.AbstractUnivariateSolver#AbstractUnivariateSolver(double)"
    ],
    "org.apache.commons.math3.optim.linear.SimplexTableau#dropPhase1Objective()": [
        "org.apache.commons.math3.util.Precision.compareTo(double,double,double)",
        "org.apache.commons.math3.optim.linear.SimplexTableau#getWidth()",
        "org.apache.commons.math3.optim.linear.SimplexTableau#getBasicRow(int)",
        "org.apache.commons.math3.optim.linear.SimplexTableau#getArtificialVariableOffset()",
        "org.apache.commons.math3.linear.Array2DRowRealMatrix#Array2DRowRealMatrix(double[][])",
        "org.apache.commons.math3.optim.linear.SimplexTableau#getNumArtificialVariables()",
        "org.apache.commons.math3.optim.linear.SimplexTableau#getNumObjectiveFunctions()",
        "org.apache.commons.math3.optim.linear.SimplexTableau#getHeight()",
        "org.apache.commons.math3.optim.linear.SimplexTableau#initializeBasicVariables(int)",
        "org.apache.commons.math3.optim.linear.SimplexTableau#getEntry(int,int)"
    ],
    "org.apache.commons.math3.ode.nonstiff.DormandPrince853FieldIntegrator#getA()": [
        "org.apache.commons.math3.util.BigRealField#getZero()",
        "org.apache.commons.math3.dfp.DfpField#getZero()",
        "org.apache.commons.math3.util.Decimal64#multiply(double)",
        "org.apache.commons.math3.util.BigRealField#getOne()",
        "org.apache.commons.math3.fraction.FractionField#getZero()",
        "org.apache.commons.math3.ode.nonstiff.EmbeddedRungeKuttaFieldIntegrator#fraction(double,double)",
        "org.apache.commons.math3.analysis.differentiation.DerivativeStructure#multiply(double)",
        "org.apache.commons.math3.complex.ComplexField#getZero()",
        "org.apache.commons.math3.util.MathArrays.buildArray(Field<T>,int)",
        "org.apache.commons.math3.ode.AbstractFieldIntegrator#getField()",
        "org.apache.commons.math3.analysis.differentiation.SparseGradient#multiply(double)",
        "org.apache.commons.math3.fraction.BigFractionField#getOne()",
        "org.apache.commons.math3.dfp.Dfp#multiply(double)",
        "org.apache.commons.math3.fraction.FractionField#getOne()",
        "org.apache.commons.math3.analysis.differentiation.SparseGradient#getField()$Field$1#getZero()",
        "org.apache.commons.math3.analysis.differentiation.SparseGradient#getField()$Field$1#getOne()",
        "org.apache.commons.math3.util.Decimal64Field#getZero()",
        "org.apache.commons.math3.ode.nonstiff.EmbeddedRungeKuttaFieldIntegrator#fraction(int,int)",
        "org.apache.commons.math3.complex.ComplexField#getOne()",
        "org.apache.commons.math3.util.MathArrays.buildArray(Field<T>,int,int)",
        "org.apache.commons.math3.analysis.differentiation.DerivativeStructure#getField()$Field$1#getZero()",
        "org.apache.commons.math3.fraction.BigFractionField#getZero()",
        "org.apache.commons.math3.dfp.DfpField#getOne()",
        "org.apache.commons.math3.analysis.differentiation.DerivativeStructure#getField()$Field$1#getOne()",
        "org.apache.commons.math3.util.Decimal64Field#getOne()"
    ],
    "org.apache.commons.math3.optimization.direct.BaseAbstractMultivariateOptimizer#getEvaluations()": ["org.apache.commons.math3.util.Incrementor#getCount()"],
    "org.apache.commons.math3.complex.ComplexField#readResolve()": ["org.apache.commons.math3.complex.ComplexField.LazyHolder.<staticinit>()"],
    "org.apache.commons.math3.dfp.Dfp#tanh()": [
        "org.apache.commons.math3.dfp.Dfp#add(Dfp)",
        "org.apache.commons.math3.dfp.Dfp#negate()",
        "org.apache.commons.math3.dfp.DfpMath.exp(Dfp)",
        "org.apache.commons.math3.dfp.Dfp#subtract(Dfp)",
        "org.apache.commons.math3.dfp.Dfp#divide(Dfp)"
    ],
    "org.apache.commons.math3.ode.FieldEquationsMapper#mapDerivative(FieldODEStateAndDerivative<T extends RealFieldElement>)": [
        "org.apache.commons.math3.ode.FieldEquationsMapper#insertEquationData(int,T extends RealFieldElement[],T extends RealFieldElement[])",
        "org.apache.commons.math3.ode.FieldODEStateAndDerivative#getDerivative()",
        "org.apache.commons.math3.ode.FieldEquationsMapper#getTotalDimension()",
        "org.apache.commons.math3.ode.FieldODEStateAndDerivative#getSecondaryDerivative(int)",
        "org.apache.commons.math3.ode.FieldEquationsMapper#getNumberOfEquations()",
        "org.apache.commons.math3.ode.FieldODEState#getTime()",
        "org.apache.commons.math3.util.MathArrays.buildArray(Field<T>,int)"
    ],
    "org.apache.commons.math3.userguide.ExampleUtils.showExampleFrame(ExampleFrame)$Runnable$1#run()": [
        "org.apache.commons.math3.userguide.ExampleUtils.showExampleFrame(ExampleFrame)$ActionListener$1$ActionListener$1#run()$ActionListener$1.<init>()",
        "org.apache.commons.math3.userguide.ExampleUtils.showExampleFrame(ExampleFrame)$ActionListener$2$ActionListener$2#run()$ActionListener$2.<init>()"
    ],
    "org.apache.commons.math3.geometry.spherical.oned.ArcsSet#childBefore(BSPTree<Sphere1D>)": [
        "org.apache.commons.math3.geometry.spherical.oned.ArcsSet#isDirect(BSPTree<Sphere1D>)",
        "org.apache.commons.math3.geometry.partitioning.BSPTree#getPlus()",
        "org.apache.commons.math3.geometry.partitioning.BSPTree#getMinus()"
    ],
    "org.apache.commons.math3.util.ArithmeticUtils.pow(long,long)": ["org.apache.commons.math3.exception.util.LocalizedFormats.<staticinit>()"],
    "org.apache.commons.math3.linear.MatrixDimensionMismatchException#getExpectedColumnDimension()": ["org.apache.commons.math3.exception.MultiDimensionMismatchException#getExpectedDimension(int)"],
    "org.apache.commons.math3.linear.SparseFieldVector#walkInOptimizedOrder(FieldVectorPreservingVisitor<T extends FieldElement>)": ["org.apache.commons.math3.linear.SparseFieldVector#walkInDefaultOrder(FieldVectorPreservingVisitor<T extends FieldElement>)"],
    "org.apache.commons.math3.fitting.CurveFitter.TheoreticalValuesFunction#getModelFunctionJacobian()": [
        "org.apache.commons.math3.fitting.CurveFitter.TheoreticalValuesFunction#getModelFunctionJacobian()$MultivariateMatrixFunction$1.<init>()",
        "org.apache.commons.math3.optim.nonlinear.vector.ModelFunctionJacobian#ModelFunctionJacobian(MultivariateMatrixFunction)"
    ],
    "org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet.TranslationTransform#TranslationTransform(Vector3D)": ["org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet.TranslationTransform.<init>()"],
    "org.apache.commons.math3.util.IterationManager#resetIterationCount()": ["org.apache.commons.math3.util.IntegerSequence.Incrementor#withStart(int)"],
    "org.apache.commons.math3.ode.nonstiff.RungeKuttaFieldStepInterpolator#derivativeLinearCombination(T extends RealFieldElement[]...)": ["org.apache.commons.math3.util.MathArrays.buildArray(Field<T>,int)"],
    "org.apache.commons.math3.geometry.euclidean.twod.hull.MonotoneChain#MonotoneChain(boolean,double)": [
        "org.apache.commons.math3.geometry.euclidean.twod.hull.MonotoneChain.<init>()",
        "org.apache.commons.math3.geometry.euclidean.twod.hull.AbstractConvexHullGenerator2D#AbstractConvexHullGenerator2D(boolean,double)"
    ],
    "org.apache.commons.math3.optim.nonlinear.vector.MultiStartMultivariateVectorOptimizer#getPairComparator()$Comparator$1#compare(PointVectorValuePair,PointVectorValuePair)": ["org.apache.commons.math3.optim.nonlinear.vector.MultiStartMultivariateVectorOptimizer#getPairComparator()$Comparator$1#weightedResidual(PointVectorValuePair)"],
    "org.apache.commons.math3.ode.MultistepFieldIntegrator#start(FieldExpandableODE<T extends RealFieldElement>,FieldODEState<T extends RealFieldElement>,T extends RealFieldElement)": [
        "org.apache.commons.math3.ode.AbstractFieldIntegrator#clearStepHandlers()",
        "org.apache.commons.math3.ode.AbstractFieldIntegrator#getEvaluationsCounter()",
        "org.apache.commons.math3.exception.util.LocalizedFormats.<staticinit>()",
        "org.apache.commons.math3.ode.FieldExpandableODE#getMapper()",
        "org.apache.commons.math3.util.IntegerSequence.Incrementor#increment(int)",
        "org.apache.commons.math3.ode.nonstiff.RungeKuttaFieldIntegrator#integrate(FieldExpandableODE<T extends RealFieldElement>,FieldODEState<T extends RealFieldElement>,T extends RealFieldElement)",
        "org.apache.commons.math3.ode.MultistepFieldIntegrator.FieldNordsieckInitializer#FieldNordsieckInitializer(FieldEquationsMapper<T extends RealFieldElement>,int)",
        "org.apache.commons.math3.ode.nonstiff.AdamsMoultonFieldIntegrator#integrate(FieldExpandableODE<T extends RealFieldElement>,FieldODEState<T extends RealFieldElement>,T extends RealFieldElement)",
        "org.apache.commons.math3.ode.nonstiff.AdamsBashforthFieldIntegrator#integrate(FieldExpandableODE<T extends RealFieldElement>,FieldODEState<T extends RealFieldElement>,T extends RealFieldElement)",
        "org.apache.commons.math3.ode.AbstractFieldIntegrator#clearEventHandlers()",
        "org.apache.commons.math3.ode.AbstractFieldIntegrator#addStepHandler(FieldStepHandler<T extends RealFieldElement>)",
        "org.apache.commons.math3.ode.nonstiff.EmbeddedRungeKuttaFieldIntegrator#integrate(FieldExpandableODE<T extends RealFieldElement>,FieldODEState<T extends RealFieldElement>,T extends RealFieldElement)",
        "org.apache.commons.math3.ode.AbstractFieldIntegrator#getEvaluations()"
    ],
    "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer#initializeCMA(double[])": [
        "org.apache.commons.math3.linear.AbstractRealMatrix#scalarAdd(double)",
        "org.apache.commons.math3.util.FastMath.max(double,double)",
        "org.apache.commons.math3.linear.OpenMapRealMatrix#multiply(RealMatrix)",
        "org.apache.commons.math3.linear.BlockRealMatrix#getFrobeniusNorm()",
        "org.apache.commons.math3.linear.DiagonalMatrix#getEntry(int,int)",
        "org.apache.commons.math3.util.FastMath.min(double,double)",
        "org.apache.commons.math3.linear.BlockRealMatrix#getEntry(int,int)",
        "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer.repmat(RealMatrix,int,int)",
        "org.apache.commons.math3.util.FastMath.sqrt(double)",
        "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer.sequence(double,double,double)",
        "org.apache.commons.math3.linear.DiagonalMatrix#multiply(RealMatrix)",
        "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer.zeros(int,int)",
        "org.apache.commons.math3.linear.BlockRealMatrix#multiply(RealMatrix)",
        "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer.square(RealMatrix)",
        "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer.ones(int,int)",
        "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer.eye(int,int)",
        "org.apache.commons.math3.linear.AbstractRealMatrix#getFrobeniusNorm()",
        "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer.log(RealMatrix)",
        "org.apache.commons.math3.linear.BlockRealMatrix#scalarMultiply(double)",
        "org.apache.commons.math3.linear.BlockRealMatrix#scalarAdd(double)",
        "org.apache.commons.math3.linear.BlockRealMatrix#transpose()",
        "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer.diag(RealMatrix)",
        "org.apache.commons.math3.linear.OpenMapRealMatrix#getEntry(int,int)",
        "org.apache.commons.math3.linear.Array2DRowRealMatrix#Array2DRowRealMatrix(double[][],boolean)",
        "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer.times(RealMatrix,RealMatrix)",
        "org.apache.commons.math3.linear.Array2DRowRealMatrix#getEntry(int,int)",
        "org.apache.commons.math3.linear.MatrixUtils.createColumnRealMatrix(double[])",
        "org.apache.commons.math3.linear.AbstractRealMatrix#multiply(RealMatrix)",
        "org.apache.commons.math3.linear.AbstractRealMatrix#scalarMultiply(double)",
        "org.apache.commons.math3.linear.AbstractRealMatrix#transpose()",
        "org.apache.commons.math3.util.FastMath.log(double)",
        "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer.max(RealMatrix)"
    ],
    "org.apache.commons.math3.ode.MultistepIntegrator#computeStepGrowShrinkFactor(double)": [
        "org.apache.commons.math3.util.FastMath.max(double,double)",
        "org.apache.commons.math3.util.FastMath.pow(double,double)",
        "org.apache.commons.math3.util.FastMath.min(double,double)"
    ],
    "org.apache.commons.math3.ml.neuralnet.twod.NeuronSquareMesh2D.SerializationProxy#SerializationProxy(boolean,boolean,SquareNeighbourhood,double[][][])": ["org.apache.commons.math3.ml.neuralnet.twod.NeuronSquareMesh2D.SerializationProxy.<init>()"],
    "org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet#leafAfter(BSPTree<Euclidean1D>)": [
        "org.apache.commons.math3.geometry.partitioning.BSPTree#getCut()",
        "org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet#childAfter(BSPTree<Euclidean1D>)",
        "org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet#childBefore(BSPTree<Euclidean1D>)"
    ],
    "org.apache.commons.math3.optimization.linear.SimplexTableau#SimplexTableau(LinearObjectiveFunction,Collection<LinearConstraint>,GoalType,boolean,double)": [
        "org.apache.commons.math3.optimization.GoalType.<staticinit>()",
        "org.apache.commons.math3.optimization.linear.SimplexTableau#SimplexTableau(LinearObjectiveFunction,Collection<LinearConstraint>,GoalType,boolean,double,int)",
        "org.apache.commons.math3.optimization.linear.SimplexTableau.<staticinit>()"
    ],
    "org.apache.commons.math3.random.BitsStreamGenerator#nextLong()": [
        "org.apache.commons.math3.random.ISAACRandom#next(int)",
        "org.apache.commons.math3.random.MersenneTwister#next(int)",
        "org.apache.commons.math3.random.Well19937a#next(int)",
        "org.apache.commons.math3.random.Well1024a#next(int)",
        "org.apache.commons.math3.random.Well44497b#next(int)",
        "org.apache.commons.math3.random.Well512a#next(int)",
        "org.apache.commons.math3.random.Well44497a#next(int)",
        "org.apache.commons.math3.random.Well19937c#next(int)"
    ],
    "org.apache.commons.math3.random.RandomDataGenerator#nextBinomial(int,double)": [
        "org.apache.commons.math3.distribution.UniformIntegerDistribution#sample()",
        "org.apache.commons.math3.random.RandomDataGenerator#getRandomGenerator()",
        "org.apache.commons.math3.distribution.PoissonDistribution#sample()",
        "org.apache.commons.math3.distribution.AbstractIntegerDistribution#sample()",
        "org.apache.commons.math3.distribution.BinomialDistribution#BinomialDistribution(RandomGenerator,int,double)",
        "org.apache.commons.math3.distribution.ZipfDistribution#sample()",
        "org.apache.commons.math3.distribution.EnumeratedIntegerDistribution#sample()"
    ],
    "org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D#add(T extends RealFieldElement,FieldVector3D<T extends RealFieldElement>)": ["org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D#FieldVector3D(T extends RealFieldElement,FieldVector3D<T extends RealFieldElement>,T extends RealFieldElement,FieldVector3D<T extends RealFieldElement>)"],
    "org.apache.commons.math3.geometry.spherical.oned.SubLimitAngle#SubLimitAngle(Hyperplane<Sphere1D>,Region<Sphere1D>)": [
        "org.apache.commons.math3.geometry.partitioning.AbstractSubHyperplane#AbstractSubHyperplane(Hyperplane<S extends Space>,Region<T extends Space>)",
        "org.apache.commons.math3.geometry.spherical.oned.SubLimitAngle.<init>()"
    ],
    "org.apache.commons.math3.stat.correlation.Covariance#Covariance(RealMatrix,boolean)": [
        "org.apache.commons.math3.linear.BlockFieldMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.BlockRealMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.Array2DRowRealMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.SparseFieldMatrix#getRowDimension()",
        "org.apache.commons.math3.stat.correlation.Covariance.<init>()",
        "org.apache.commons.math3.linear.OpenMapRealMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.DiagonalMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.Array2DRowFieldMatrix#getRowDimension()",
        "org.apache.commons.math3.stat.correlation.Covariance#computeCovarianceMatrix(RealMatrix,boolean)",
        "org.apache.commons.math3.stat.correlation.Covariance#checkSufficientData(RealMatrix)"
    ],
    "org.apache.commons.math3.distribution.AbstractIntegerDistribution#AbstractIntegerDistribution(RandomGenerator)": ["org.apache.commons.math3.distribution.AbstractIntegerDistribution.<init>()"],
    "org.apache.commons.math3.util.ResizableDoubleArray#discardMostRecentElements(int)": ["org.apache.commons.math3.util.ResizableDoubleArray#discardExtremeElements(int,boolean)"],
    "org.apache.commons.math3.fitting.leastsquares.LeastSquaresAdapter#getConvergenceChecker()": [
        "org.apache.commons.math3.fitting.leastsquares.LeastSquaresAdapter#getConvergenceChecker()",
        "org.apache.commons.math3.optim.AbstractOptimizationProblem#getConvergenceChecker()"
    ],
    "org.apache.commons.math3.optimization.direct.CMAESOptimizer#CMAESOptimizer(int,double[])": [
        "org.apache.commons.math3.optimization.direct.CMAESOptimizer.<staticinit>()",
        "org.apache.commons.math3.optimization.direct.CMAESOptimizer#CMAESOptimizer(int,double[],int,double,boolean,int,int,RandomGenerator,boolean)"
    ],
    "org.apache.commons.math3.distribution.CauchyDistribution#CauchyDistribution(double,double,double)": [
        "org.apache.commons.math3.distribution.CauchyDistribution.<staticinit>()",
        "org.apache.commons.math3.random.Well19937c#Well19937c()",
        "org.apache.commons.math3.distribution.CauchyDistribution#CauchyDistribution(RandomGenerator,double,double,double)"
    ],
    "org.apache.commons.math3.ode.FieldEquationsMapper#FieldEquationsMapper(FieldEquationsMapper<T extends RealFieldElement>,int)": [
        "org.apache.commons.math3.ode.FieldEquationsMapper#getNumberOfEquations()",
        "org.apache.commons.math3.ode.FieldEquationsMapper.<init>()"
    ],
    "org.apache.commons.math3.stat.StatUtils.variance(double[],int,int)": [
        "org.apache.commons.math3.stat.StatUtils.<staticinit>()",
        "org.apache.commons.math3.stat.descriptive.moment.Variance#evaluate(double[],int,int)"
    ],
    "org.apache.commons.math3.util.FastMath.decrementExact(long)": ["org.apache.commons.math3.exception.util.LocalizedFormats.<staticinit>()"],
    "org.apache.commons.math3.stat.inference.OneWayAnova#anovaFValue(Collection<double[]>)": ["org.apache.commons.math3.stat.inference.OneWayAnova#anovaStats(Collection<double[]>)"],
    "org.apache.commons.math3.analysis.interpolation.LoessInterpolator#smooth(double[],double[])": [
        "org.apache.commons.math3.exception.DimensionMismatchException#DimensionMismatchException(int,int)",
        "org.apache.commons.math3.analysis.interpolation.LoessInterpolator#smooth(double[],double[],double[])"
    ],
    "org.apache.commons.math3.ode.FieldODEState#copy(Field<T extends RealFieldElement>,T extends RealFieldElement[][])": ["org.apache.commons.math3.util.MathArrays.buildArray(Field<T>,int,int)"],
    "org.apache.commons.math3.optim.linear.LinearConstraintSet#LinearConstraintSet(Collection<LinearConstraint>)": ["org.apache.commons.math3.optim.linear.LinearConstraintSet.<init>()"],
    "org.apache.commons.math3.analysis.differentiation.DerivativeStructure#DerivativeStructure(double,DerivativeStructure,double,DerivativeStructure)": [
        "org.apache.commons.math3.analysis.differentiation.DSCompiler#linearCombination(double,double[],int,double,double[],int,double[],int)",
        "org.apache.commons.math3.analysis.differentiation.DerivativeStructure#DerivativeStructure(DSCompiler)",
        "org.apache.commons.math3.analysis.differentiation.DSCompiler#checkCompatibility(DSCompiler)"
    ],
    "org.apache.commons.math3.optimization.fitting.CurveFitter#fit(int,T extends ParametricUnivariateFunction,double[])": [
        "org.apache.commons.math3.optimization.fitting.CurveFitter.OldTheoreticalValuesFunction#OldTheoreticalValuesFunction(ParametricUnivariateFunction)",
        "org.apache.commons.math3.optimization.PointVectorValuePair#getPointRef()",
        "org.apache.commons.math3.optimization.fitting.CurveFitter.TheoreticalValuesFunction#TheoreticalValuesFunction(ParametricUnivariateFunction)",
        "org.apache.commons.math3.optimization.fitting.WeightedObservedPoint#getWeight()",
        "org.apache.commons.math3.optimization.fitting.WeightedObservedPoint#getY()",
        "org.apache.commons.math3.optimization.direct.BaseAbstractMultivariateVectorOptimizer#optimize(int,FUNC extends MultivariateVectorFunction,double[],double[],double[])",
        "org.apache.commons.math3.optimization.BaseMultivariateVectorMultiStartOptimizer#optimize(int,FUNC extends MultivariateVectorFunction,double[],double[],double[])"
    ],
    "org.apache.commons.math3.genetics.TournamentSelection#select(Population)": [
        "org.apache.commons.math3.genetics.ChromosomePair#ChromosomePair(Chromosome,Chromosome)",
        "org.apache.commons.math3.genetics.TournamentSelection#tournament(ListPopulation)"
    ],
    "org.apache.commons.math3.optimization.Weight#Weight(double[])": [
        "org.apache.commons.math3.linear.DiagonalMatrix#DiagonalMatrix(double[])",
        "org.apache.commons.math3.optimization.Weight.<init>()"
    ],
    "org.apache.commons.math3.analysis.differentiation.DerivativeStructure#linearCombination(DerivativeStructure,DerivativeStructure,DerivativeStructure,DerivativeStructure)": [
        "org.apache.commons.math3.analysis.differentiation.DerivativeStructure#getValue()",
        "org.apache.commons.math3.analysis.differentiation.DerivativeStructure#add(DerivativeStructure)",
        "org.apache.commons.math3.analysis.differentiation.DerivativeStructure#DerivativeStructure(int,int,double[]...)",
        "org.apache.commons.math3.analysis.differentiation.DerivativeStructure#getOrder()",
        "org.apache.commons.math3.analysis.differentiation.DerivativeStructure#multiply(DerivativeStructure)",
        "org.apache.commons.math3.util.MathArrays.linearCombination(double,double,double,double)",
        "org.apache.commons.math3.analysis.differentiation.DerivativeStructure#getAllDerivatives()",
        "org.apache.commons.math3.analysis.differentiation.DerivativeStructure#getFreeParameters()"
    ],
    "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.BOBYQAOptimizer#bobyqb(double[],double[])": [
        "org.apache.commons.math3.optim.univariate.MultiStartUnivariateOptimizer#getEvaluations()",
        "org.apache.commons.math3.optim.nonlinear.scalar.MultivariateOptimizer#computeObjectiveValue(double[])",
        "org.apache.commons.math3.optim.BaseOptimizer#getEvaluations()",
        "org.apache.commons.math3.linear.Array2DRowRealMatrix#setEntry(int,int,double)",
        "org.apache.commons.math3.util.FastMath.max(double,double)",
        "org.apache.commons.math3.linear.ArrayRealVector#getDimension()",
        "org.apache.commons.math3.util.FastMath.min(double,double)",
        "org.apache.commons.math3.linear.ArrayRealVector#ArrayRealVector(int)",
        "org.apache.commons.math3.exception.util.LocalizedFormats.<staticinit>()",
        "org.apache.commons.math3.util.FastMath.max(int,int)",
        "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.BOBYQAOptimizer.<staticinit>()",
        "org.apache.commons.math3.linear.ArrayRealVector#getEntry(int)",
        "org.apache.commons.math3.linear.ArrayRealVector#setEntry(int,double)",
        "org.apache.commons.math3.optim.BaseMultiStartMultivariateOptimizer#getEvaluations()",
        "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.BOBYQAOptimizer#altmov(int,double)",
        "org.apache.commons.math3.linear.Array2DRowRealMatrix#getEntry(int,int)",
        "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.BOBYQAOptimizer.printMethod()",
        "org.apache.commons.math3.util.FastMath.abs(double)",
        "org.apache.commons.math3.util.FastMath.sqrt(double)",
        "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.BOBYQAOptimizer#prelim(double[],double[])",
        "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.BOBYQAOptimizer#trsbox(double,ArrayRealVector,ArrayRealVector,ArrayRealVector,ArrayRealVector,ArrayRealVector)",
        "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.BOBYQAOptimizer.printState(int)",
        "org.apache.commons.math3.linear.ArrayRealVector#toArray()",
        "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.BOBYQAOptimizer#update(double,double,int)"
    ],
    "org.apache.commons.math3.ode.sampling.StepNormalizer#handleStep(StepInterpolator,boolean)": [
        "org.apache.commons.math3.ode.sampling.StepNormalizerBounds#lastIncluded()",
        "org.apache.commons.math3.ode.sampling.AbstractStepInterpolator#getInterpolatedDerivatives()",
        "org.apache.commons.math3.ode.sampling.AbstractStepInterpolator#setInterpolatedTime(double)",
        "org.apache.commons.math3.ode.sampling.StepNormalizer#storeStep(StepInterpolator,double)",
        "org.apache.commons.math3.util.FastMath.floor(double)",
        "org.apache.commons.math3.ode.sampling.AbstractStepInterpolator#getInterpolatedState()",
        "org.apache.commons.math3.ode.sampling.AbstractStepInterpolator#getCurrentTime()",
        "org.apache.commons.math3.ode.sampling.StepNormalizerMode.<staticinit>()",
        "org.apache.commons.math3.util.Precision.equals(double,double,int)",
        "org.apache.commons.math3.ode.sampling.StepNormalizer#doNormalizedStep(boolean)",
        "org.apache.commons.math3.ode.sampling.AbstractStepInterpolator#getPreviousTime()",
        "org.apache.commons.math3.ode.sampling.StepNormalizer#isNextInStep(double,StepInterpolator)"
    ],
    "org.apache.commons.math3.stat.descriptive.moment.ThirdMoment#copy()": [
        "org.apache.commons.math3.stat.descriptive.moment.ThirdMoment.copy(ThirdMoment,ThirdMoment)",
        "org.apache.commons.math3.stat.descriptive.moment.ThirdMoment#ThirdMoment()"
    ],
    "org.apache.commons.math3.stat.correlation.StorelessCovariance#getCovariance(int,int)": [
        "org.apache.commons.math3.stat.correlation.StorelessCovariance#getElement(int,int)",
        "org.apache.commons.math3.stat.correlation.StorelessBivariateCovariance#getResult()"
    ],
    "org.apache.commons.math3.geometry.spherical.oned.ArcsSet#buildNew(BSPTree<Sphere1D>)": [
        "org.apache.commons.math3.geometry.spherical.oned.ArcsSet#ArcsSet(BSPTree<Sphere1D>,double)",
        "org.apache.commons.math3.geometry.partitioning.AbstractRegion#getTolerance()"
    ],
    "org.apache.commons.math3.analysis.differentiation.DSCompiler#remainder(double[],int,double[],int,double[],int)": [
        "org.apache.commons.math3.analysis.differentiation.DSCompiler#getSize()",
        "org.apache.commons.math3.util.FastMath.rint(double)",
        "org.apache.commons.math3.util.FastMath.IEEEremainder(double,double)"
    ],
    "org.apache.commons.math3.analysis.function.Minus#value(DerivativeStructure)": ["org.apache.commons.math3.analysis.differentiation.DerivativeStructure#negate()"],
    "org.apache.commons.math3.util.OpenIntToFieldHashMap.findInsertionIndex(int[],byte[],int,int)": [
        "org.apache.commons.math3.util.OpenIntToFieldHashMap.probe(int,int)",
        "org.apache.commons.math3.util.OpenIntToFieldHashMap.changeIndexSign(int)",
        "org.apache.commons.math3.util.OpenIntToFieldHashMap.hashOf(int)",
        "org.apache.commons.math3.util.OpenIntToFieldHashMap.<staticinit>()",
        "org.apache.commons.math3.util.OpenIntToFieldHashMap.perturb(int)"
    ],
    "org.apache.commons.math3.geometry.spherical.oned.ArcsSet#check2PiConsistency()": [
        "org.apache.commons.math3.geometry.partitioning.AbstractRegion#getTree(boolean)",
        "org.apache.commons.math3.geometry.partitioning.BSPTree#getAttribute()",
        "org.apache.commons.math3.geometry.spherical.oned.ArcsSet#getFirstLeaf(BSPTree<Sphere1D>)",
        "org.apache.commons.math3.geometry.partitioning.BSPTree#getCut()",
        "org.apache.commons.math3.geometry.spherical.oned.ArcsSet.InconsistentStateAt2PiWrapping#InconsistentStateAt2PiWrapping()",
        "org.apache.commons.math3.geometry.spherical.oned.ArcsSet#getLastLeaf(BSPTree<Sphere1D>)"
    ],
    "org.apache.commons.math3.stat.descriptive.SummaryStatistics#getSum()": [
        "org.apache.commons.math3.stat.descriptive.moment.FirstMoment#getResult()",
        "org.apache.commons.math3.stat.descriptive.rank.Min#getResult()",
        "org.apache.commons.math3.stat.descriptive.moment.GeometricMean#getResult()",
        "org.apache.commons.math3.stat.descriptive.moment.Variance#getResult()",
        "org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile#getResult()",
        "org.apache.commons.math3.stat.descriptive.summary.Sum#getResult()",
        "org.apache.commons.math3.stat.descriptive.moment.FourthMoment#getResult()",
        "org.apache.commons.math3.stat.descriptive.moment.StandardDeviation#getResult()",
        "org.apache.commons.math3.stat.descriptive.summary.SumOfLogs#getResult()",
        "org.apache.commons.math3.stat.descriptive.summary.Product#getResult()",
        "org.apache.commons.math3.stat.descriptive.summary.SumOfSquares#getResult()",
        "org.apache.commons.math3.stat.descriptive.moment.Skewness#getResult()",
        "org.apache.commons.math3.stat.descriptive.moment.Kurtosis#getResult()",
        "org.apache.commons.math3.stat.descriptive.rank.Max#getResult()",
        "org.apache.commons.math3.stat.descriptive.moment.SecondMoment#getResult()",
        "org.apache.commons.math3.stat.descriptive.moment.ThirdMoment#getResult()",
        "org.apache.commons.math3.stat.descriptive.moment.Mean#getResult()"
    ],
    "org.apache.commons.math3.geometry.euclidean.threed.SubLine#SubLine(Vector3D,Vector3D)": [
        "org.apache.commons.math3.geometry.euclidean.threed.SubLine#SubLine(Vector3D,Vector3D,double)",
        "org.apache.commons.math3.geometry.euclidean.threed.SubLine.<staticinit>()"
    ],
    "org.apache.commons.math3.stat.inference.TestUtils.oneWayAnovaFValue(Collection<double[]>)": [
        "org.apache.commons.math3.stat.inference.OneWayAnova#anovaFValue(Collection<double[]>)",
        "org.apache.commons.math3.stat.inference.TestUtils.<staticinit>()"
    ],
    "org.apache.commons.math3.analysis.interpolation.BicubicSplineFunction#apply(double[],double[],double[][])": ["org.apache.commons.math3.analysis.interpolation.BicubicSplineFunction.<staticinit>()"],
    "org.apache.commons.math3.ode.nonstiff.LutherFieldStepInterpolator#create(Field<T extends RealFieldElement>,boolean,T extends RealFieldElement[][],FieldODEStateAndDerivative<T extends RealFieldElement>,FieldODEStateAndDerivative<T extends RealFieldElement>,FieldODEStateAndDerivative<T extends RealFieldElement>,FieldODEStateAndDerivative<T extends RealFieldElement>,FieldEquationsMapper<T extends RealFieldElement>)": ["org.apache.commons.math3.ode.nonstiff.LutherFieldStepInterpolator#LutherFieldStepInterpolator(Field<T extends RealFieldElement>,boolean,T extends RealFieldElement[][],FieldODEStateAndDerivative<T extends RealFieldElement>,FieldODEStateAndDerivative<T extends RealFieldElement>,FieldODEStateAndDerivative<T extends RealFieldElement>,FieldODEStateAndDerivative<T extends RealFieldElement>,FieldEquationsMapper<T extends RealFieldElement>)"],
    "org.apache.commons.math3.optim.AbstractOptimizationProblem.<staticinit>()": [
        "org.apache.commons.math3.optim.AbstractOptimizationProblem.MaxEvalCallback.<init>()",
        "org.apache.commons.math3.optim.AbstractOptimizationProblem.MaxIterCallback.<init>()"
    ],
    "org.apache.commons.math3.stat.regression.AbstractMultipleLinearRegression#estimateRegressionParameters()": [
        "org.apache.commons.math3.linear.RealVector.unmodifiableRealVector(RealVector)$RealVector$1#toArray()",
        "org.apache.commons.math3.stat.regression.OLSMultipleLinearRegression#calculateBeta()",
        "org.apache.commons.math3.linear.OpenMapRealVector#toArray()",
        "org.apache.commons.math3.linear.RealVector#toArray()",
        "org.apache.commons.math3.stat.regression.GLSMultipleLinearRegression#calculateBeta()",
        "org.apache.commons.math3.linear.ArrayRealVector#toArray()"
    ],
    "org.apache.commons.math3.geometry.euclidean.twod.NestedLoops#add(NestedLoops)": [
        "org.apache.commons.math3.userguide.sofm.ChineseRingsClassifier#createRandomIterator(long)$Iterator$1#remove()",
        "org.apache.commons.math3.util.MultidimensionalCounter.Iterator#remove()",
        "org.apache.commons.math3.linear.RealVector#iterator()$Iterator$1#hasNext()",
        "org.apache.commons.math3.linear.RealVector.unmodifiableRealVector(RealVector)$Iterator$1$Iterator$1#sparseIterator()$Iterator$1#hasNext()",
        "org.apache.commons.math3.geometry.spherical.oned.ArcsSet.SubArcsIterator#hasNext()",
        "org.apache.commons.math3.exception.util.LocalizedFormats.<staticinit>()",
        "org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet.SubIntervalsIterator#remove()",
        "org.apache.commons.math3.util.Combinations.LexicographicIterator#hasNext()",
        "org.apache.commons.math3.geometry.partitioning.RegionFactory#RegionFactory()",
        "org.apache.commons.math3.util.IntegerSequence.Incrementor#remove()",
        "org.apache.commons.math3.geometry.partitioning.AbstractRegion#contains(Region<S extends Space>)",
        "org.apache.commons.math3.userguide.sofm.ChineseRingsClassifier#createIterable()$Iterator$1$Iterator$1#iterator()$Iterator$1#remove()",
        "org.apache.commons.math3.linear.RealVector.SparseEntryIterator#hasNext()",
        "org.apache.commons.math3.util.Combinations.SingletonIterator#remove()",
        "org.apache.commons.math3.userguide.sofm.ChineseRingsClassifier#createIterable()$Iterator$1$Iterator$1#iterator()$Iterator$1#hasNext()",
        "org.apache.commons.math3.geometry.euclidean.twod.NestedLoops#add(NestedLoops)",
        "org.apache.commons.math3.linear.RealVector.SparseEntryIterator#remove()",
        "org.apache.commons.math3.util.MultidimensionalCounter.Iterator#hasNext()",
        "org.apache.commons.math3.util.Combinations.LexicographicIterator#remove()",
        "org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet.SubIntervalsIterator#hasNext()",
        "org.apache.commons.math3.userguide.sofm.ChineseRingsClassifier#createRandomIterator(long)$Iterator$1#hasNext()",
        "org.apache.commons.math3.util.IntegerSequence.Incrementor#hasNext()",
        "org.apache.commons.math3.geometry.spherical.oned.ArcsSet.SubArcsIterator#remove()",
        "org.apache.commons.math3.geometry.partitioning.AbstractRegion#isEmpty()",
        "org.apache.commons.math3.linear.RealVector#iterator()$Iterator$1#remove()",
        "org.apache.commons.math3.linear.RealVector.unmodifiableRealVector(RealVector)$Iterator$1$Iterator$1#iterator()$Iterator$1#hasNext()",
        "org.apache.commons.math3.util.Combinations.SingletonIterator#hasNext()",
        "org.apache.commons.math3.linear.RealVector.unmodifiableRealVector(RealVector)$Iterator$1$Iterator$1#iterator()$Iterator$1#remove()",
        "org.apache.commons.math3.geometry.partitioning.RegionFactory#intersection(Region<S extends Space>,Region<S extends Space>)",
        "org.apache.commons.math3.linear.RealVector.unmodifiableRealVector(RealVector)$Iterator$1$Iterator$1#sparseIterator()$Iterator$1#remove()"
    ],
    "org.apache.commons.math3.linear.SparseFieldVector#append(FieldVector<T extends FieldElement>)": [
        "org.apache.commons.math3.linear.ArrayFieldVector#getDimension()",
        "org.apache.commons.math3.linear.SparseFieldVector#getEntry(int)",
        "org.apache.commons.math3.linear.SparseFieldVector#append(SparseFieldVector<T extends FieldElement>)",
        "org.apache.commons.math3.linear.SparseFieldVector#setEntry(int,T extends FieldElement)",
        "org.apache.commons.math3.linear.SparseFieldVector#getDimension()",
        "org.apache.commons.math3.linear.ArrayFieldVector#getEntry(int)",
        "org.apache.commons.math3.linear.SparseFieldVector#SparseFieldVector(SparseFieldVector<T extends FieldElement>,int)",
        "org.apache.commons.math3.linear.ArrayFieldVector#setEntry(int,T extends FieldElement)"
    ],
    "org.apache.commons.math3.optimization.direct.CMAESOptimizer#randn(int)": [
        "org.apache.commons.math3.random.RandomAdaptor#nextGaussian()",
        "org.apache.commons.math3.random.SynchronizedRandomGenerator#nextGaussian()",
        "org.apache.commons.math3.random.RandomGeneratorFactory.createRandomGenerator(Random)$RandomGenerator$1#nextGaussian()",
        "org.apache.commons.math3.random.BitsStreamGenerator#nextGaussian()",
        "org.apache.commons.math3.random.AbstractRandomGenerator#nextGaussian()"
    ],
    "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer.log(RealMatrix)": [
        "org.apache.commons.math3.linear.DiagonalMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.Array2DRowRealMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.BlockFieldMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.SparseFieldMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.DiagonalMatrix#getEntry(int,int)",
        "org.apache.commons.math3.linear.OpenMapRealMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.OpenMapRealMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.DiagonalMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.OpenMapRealMatrix#getEntry(int,int)",
        "org.apache.commons.math3.linear.BlockRealMatrix#getEntry(int,int)",
        "org.apache.commons.math3.linear.Array2DRowFieldMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.Array2DRowRealMatrix#Array2DRowRealMatrix(double[][],boolean)",
        "org.apache.commons.math3.linear.BlockFieldMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.SparseFieldMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.BlockRealMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.Array2DRowRealMatrix#getEntry(int,int)",
        "org.apache.commons.math3.linear.Array2DRowRealMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.Array2DRowFieldMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.BlockRealMatrix#getColumnDimension()",
        "org.apache.commons.math3.util.FastMath.log(double)"
    ],
    "org.apache.commons.math3.analysis.solvers.AbstractUnivariateDifferentiableSolver#setup(int,UnivariateDifferentiableFunction,double,double,double)": ["org.apache.commons.math3.analysis.solvers.BaseAbstractUnivariateSolver#setup(int,FUNC extends UnivariateFunction,double,double,double)"],
    "org.apache.commons.math3.geometry.spherical.twod.Circle#sameOrientationAs(Hyperplane<Sphere2D>)": ["org.apache.commons.math3.geometry.euclidean.threed.Vector3D.dotProduct(Vector3D,Vector3D)"],
    "org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet#getVertices()": [
        "org.apache.commons.math3.geometry.partitioning.BSPTree#visit(BSPTreeVisitor<S extends Space>)",
        "org.apache.commons.math3.util.FastMath.max(double,double)",
        "org.apache.commons.math3.geometry.euclidean.twod.Segment#getStart()",
        "org.apache.commons.math3.geometry.euclidean.oned.Vector1D#getX()",
        "org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet#getUnprocessed(List<ConnectableSegment>)",
        "org.apache.commons.math3.geometry.partitioning.AbstractRegion#getTolerance()",
        "org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile.FixedCapacityList#add(E)",
        "org.apache.commons.math3.geometry.euclidean.twod.Segment#getLine()",
        "org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet#splitEdgeConnections(List<ConnectableSegment>)",
        "org.apache.commons.math3.geometry.euclidean.twod.Line#toSubSpace(Point<Euclidean2D>)",
        "org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet#closeVerticesConnections(List<ConnectableSegment>)",
        "org.apache.commons.math3.geometry.euclidean.oned.Vector1D#Vector1D(double)",
        "org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.SegmentsBuilder#getSegments()",
        "org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet#naturalFollowerConnections(List<ConnectableSegment>)",
        "org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.SegmentsBuilder#SegmentsBuilder(double)",
        "org.apache.commons.math3.geometry.partitioning.BSPTree#getCut()",
        "org.apache.commons.math3.util.FastMath.abs(double)",
        "org.apache.commons.math3.geometry.euclidean.twod.Line#toSpace(Point<Euclidean1D>)",
        "org.apache.commons.math3.geometry.euclidean.twod.Segment#getEnd()",
        "org.apache.commons.math3.geometry.partitioning.AbstractRegion#getTree(boolean)",
        "org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet#followLoop(ConnectableSegment)"
    ],
    "org.apache.commons.math3.stat.Frequency#getPct(Comparable<?>)": [
        "org.apache.commons.math3.stat.Frequency#getCount(Comparable<?>)",
        "org.apache.commons.math3.stat.Frequency#getSumFreq()"
    ],
    "org.apache.commons.math3.distribution.ParetoDistribution#cumulativeProbability(double)": ["org.apache.commons.math3.util.FastMath.pow(double,double)"],
    "org.apache.commons.math3.util.IntegerSequence.Incrementor#withStart(int)": ["org.apache.commons.math3.util.IntegerSequence.Incrementor#Incrementor(int,int,int,MaxCountExceededCallback)"],
    "org.apache.commons.math3.ode.nonstiff.DormandPrince54StepInterpolator#reinitialize(AbstractIntegrator,double[],double[][],boolean,EquationsMapper,EquationsMapper[])": ["org.apache.commons.math3.ode.nonstiff.RungeKuttaStepInterpolator#reinitialize(AbstractIntegrator,double[],double[][],boolean,EquationsMapper,EquationsMapper[])"],
    "org.apache.commons.math3.stat.descriptive.SynchronizedDescriptiveStatistics#getValues()": ["org.apache.commons.math3.stat.descriptive.DescriptiveStatistics#getValues()"],
    "org.apache.commons.math3.analysis.solvers.BaseSecantSolver#BaseSecantSolver(double,double,Method)": [
        "org.apache.commons.math3.analysis.solvers.AllowedSolution.<staticinit>()",
        "org.apache.commons.math3.analysis.solvers.BaseSecantSolver.<init>()",
        "org.apache.commons.math3.analysis.solvers.AbstractUnivariateSolver#AbstractUnivariateSolver(double,double)"
    ],
    "org.apache.commons.math3.util.Precision.equals(float,float,int)": [
        "org.apache.commons.math3.util.FastMath.abs(int)",
        "org.apache.commons.math3.util.Precision.<staticinit>()"
    ],
    "org.apache.commons.math3.distribution.fitting.MultivariateNormalMixtureExpectationMaximization#fit(MixtureMultivariateNormalDistribution)": [
        "org.apache.commons.math3.distribution.fitting.MultivariateNormalMixtureExpectationMaximization.<staticinit>()",
        "org.apache.commons.math3.distribution.fitting.MultivariateNormalMixtureExpectationMaximization#fit(MixtureMultivariateNormalDistribution,int,double)"
    ],
    "org.apache.commons.math3.linear.QRDecomposition#getR()": [
        "org.apache.commons.math3.linear.MatrixUtils.createRealMatrix(double[][])",
        "org.apache.commons.math3.util.FastMath.min(int,int)"
    ],
    "org.apache.commons.math3.linear.NonPositiveDefiniteOperatorException#NonPositiveDefiniteOperatorException()": [
        "org.apache.commons.math3.linear.NonPositiveDefiniteOperatorException.<init>()",
        "org.apache.commons.math3.exception.util.LocalizedFormats.<staticinit>()"
    ],
    "org.apache.commons.math3.ode.MultistepIntegrator#MultistepIntegrator(String,int,int,double,double,double,double)": [
        "org.apache.commons.math3.ode.nonstiff.DormandPrince853Integrator#DormandPrince853Integrator(double,double,double,double)",
        "org.apache.commons.math3.util.FastMath.pow(double,double)",
        "org.apache.commons.math3.ode.MultistepIntegrator#setSafety(double)",
        "org.apache.commons.math3.exception.util.LocalizedFormats.<staticinit>()",
        "org.apache.commons.math3.ode.nonstiff.AdaptiveStepsizeIntegrator#AdaptiveStepsizeIntegrator(String,double,double,double,double)",
        "org.apache.commons.math3.ode.MultistepIntegrator#setMinReduction(double)",
        "org.apache.commons.math3.ode.MultistepIntegrator#setMaxGrowth(double)",
        "org.apache.commons.math3.ode.MultistepIntegrator.<init>()"
    ],
    "org.apache.commons.math3.optimization.direct.CMAESOptimizer#CMAESOptimizer(int,double[],int,double,boolean,int,int,RandomGenerator,boolean)": [
        "org.apache.commons.math3.optimization.direct.CMAESOptimizer#CMAESOptimizer(int,double[],int,double,boolean,int,int,RandomGenerator,boolean,ConvergenceChecker<PointValuePair>)",
        "org.apache.commons.math3.optimization.SimpleValueChecker#SimpleValueChecker()"
    ],
    "org.apache.commons.math3.optimization.fitting.CurveFitter.TheoreticalValuesFunction#value(DerivativeStructure[])": [
        "org.apache.commons.math3.analysis.differentiation.DerivativeStructure#add(DerivativeStructure)",
        "org.apache.commons.math3.analysis.polynomials.PolynomialFunction.Parametric#value(double,double[]...)",
        "org.apache.commons.math3.analysis.function.Gaussian.Parametric#value(double,double[]...)",
        "org.apache.commons.math3.optimization.fitting.WeightedObservedPoint#getX()",
        "org.apache.commons.math3.analysis.differentiation.DerivativeStructure#DerivativeStructure(int,int,int,double)",
        "org.apache.commons.math3.fitting.GaussianFitter#fit(double[])$Parametric$1#value(double,double[]...)",
        "org.apache.commons.math3.fitting.GaussianCurveFitter$Parametric$1#value(double,double[]...)",
        "org.apache.commons.math3.analysis.function.Logit.Parametric#value(double,double[]...)",
        "org.apache.commons.math3.analysis.differentiation.DerivativeStructure#getValue()",
        "org.apache.commons.math3.analysis.differentiation.DerivativeStructure#DerivativeStructure(int,int,double[]...)",
        "org.apache.commons.math3.analysis.function.Sigmoid.Parametric#value(double,double[]...)",
        "org.apache.commons.math3.analysis.function.Logistic.Parametric#value(double,double[]...)",
        "org.apache.commons.math3.optimization.fitting.GaussianFitter#fit(double[])$Parametric$1#value(double,double[]...)",
        "org.apache.commons.math3.analysis.function.HarmonicOscillator.Parametric#value(double,double[]...)"
    ],
    "org.apache.commons.math3.linear.RealVector.unmodifiableRealVector(RealVector)$RealVector$1#append(RealVector)": [
        "org.apache.commons.math3.linear.RealVector.unmodifiableRealVector(RealVector)$RealVector$1#append(RealVector)",
        "org.apache.commons.math3.linear.OpenMapRealVector#append(RealVector)",
        "org.apache.commons.math3.linear.ArrayRealVector#append(RealVector)"
    ],
    "org.apache.commons.math3.util.Decimal64#linearCombination(double,Decimal64,double,Decimal64,double,Decimal64,double,Decimal64)": [
        "org.apache.commons.math3.util.Decimal64#Decimal64(double)",
        "org.apache.commons.math3.util.MathArrays.linearCombination(double,double,double,double,double,double,double,double)"
    ],
    "org.apache.commons.math3.exception.MathIllegalStateException#getLocalizedMessage()": ["org.apache.commons.math3.exception.util.ExceptionContext#getLocalizedMessage()"],
    "org.apache.commons.math3.ode.nonstiff.AdaptiveStepsizeIntegrator#setStepSizeControl(double,double,double,double)": ["org.apache.commons.math3.util.FastMath.abs(double)"],
    "org.apache.commons.math3.fitting.leastsquares.LevenbergMarquardtOptimizer#withCostRelativeTolerance(double)": ["org.apache.commons.math3.fitting.leastsquares.LevenbergMarquardtOptimizer#LevenbergMarquardtOptimizer(double,double,double,double,double)"],
    "org.apache.commons.math3.random.Well44497b#Well44497b(int)": [
        "org.apache.commons.math3.random.AbstractWell#AbstractWell(int,int,int,int,int)",
        "org.apache.commons.math3.random.Well44497b.<init>()",
        "org.apache.commons.math3.random.Well44497b.<staticinit>()"
    ],
    "org.apache.commons.math3.analysis.function.Exp#value(double)": ["org.apache.commons.math3.util.FastMath.exp(double)"],
    "org.apache.commons.math3.analysis.polynomials.PolynomialFunctionLagrangeForm.evaluate(double[],double[],double)": [
        "org.apache.commons.math3.analysis.polynomials.PolynomialFunctionLagrangeForm.verifyInterpolationArray(double[],double[],boolean)",
        "org.apache.commons.math3.analysis.polynomials.PolynomialFunctionLagrangeForm.evaluateInternal(double[],double[],double)"
    ],
    "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.PowellOptimizer#doOptimize()": [
        "org.apache.commons.math3.optim.nonlinear.scalar.GoalType.<staticinit>()",
        "org.apache.commons.math3.optim.nonlinear.scalar.MultivariateOptimizer#computeObjectiveValue(double[])",
        "org.apache.commons.math3.optim.BaseOptimizer#getConvergenceChecker()",
        "org.apache.commons.math3.optim.nonlinear.scalar.LineSearch#search(double[],double[])",
        "org.apache.commons.math3.util.MathArrays.copyOf(double[])",
        "org.apache.commons.math3.optim.univariate.UnivariatePointValuePair#getValue()",
        "org.apache.commons.math3.optim.nonlinear.scalar.MultivariateOptimizer#getGoalType()",
        "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.PowellOptimizer#newPointAndDirection(double[],double[],double)",
        "org.apache.commons.math3.optim.BaseOptimizer#getIterations()",
        "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.PowellOptimizer#checkParameters()",
        "org.apache.commons.math3.util.FastMath.abs(double)",
        "org.apache.commons.math3.optim.BaseMultivariateOptimizer#getStartPoint()",
        "org.apache.commons.math3.optim.PointValuePair#PointValuePair(double[],double)",
        "org.apache.commons.math3.optim.univariate.UnivariatePointValuePair#getPoint()",
        "org.apache.commons.math3.optim.BaseOptimizer#incrementIterationCount()"
    ],
    "org.apache.commons.math3.exception.ZeroException#ZeroException(Localizable,Object[]...)": [
        "org.apache.commons.math3.exception.ZeroException.<init>()",
        "org.apache.commons.math3.exception.MathIllegalNumberException.<staticinit>()"
    ],
    "org.apache.commons.math3.dfp.Dfp#intValue()": [
        "org.apache.commons.math3.dfp.DfpDec#newInstance(int)",
        "org.apache.commons.math3.dfp.Dfp#lessThan(Dfp)",
        "org.apache.commons.math3.dfp.Dfp#rint()",
        "org.apache.commons.math3.dfp.Dfp.<staticinit>()",
        "org.apache.commons.math3.dfp.Dfp#greaterThan(Dfp)",
        "org.apache.commons.math3.dfp.Dfp#newInstance(int)"
    ],
    "org.apache.commons.math3.geometry.euclidean.threed.FieldRotation.distance(FieldRotation<T extends RealFieldElement>,FieldRotation<T extends RealFieldElement>)": [
        "org.apache.commons.math3.geometry.euclidean.threed.FieldRotation#getAngle()",
        "org.apache.commons.math3.geometry.euclidean.threed.FieldRotation#composeInverseInternal(FieldRotation<T extends RealFieldElement>)"
    ],
    "org.apache.commons.math3.linear.CholeskyDecomposition#CholeskyDecomposition(RealMatrix,double,double)": [
        "org.apache.commons.math3.linear.DiagonalMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.Array2DRowRealMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.BlockFieldMatrix#getColumnDimension()",
        "org.apache.commons.math3.util.FastMath.max(double,double)",
        "org.apache.commons.math3.linear.OpenMapRealMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.DiagonalMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.DiagonalMatrix#getData()",
        "org.apache.commons.math3.linear.AbstractRealMatrix#getData()",
        "org.apache.commons.math3.linear.NonSymmetricMatrixException#NonSymmetricMatrixException(int,int,double)",
        "org.apache.commons.math3.linear.BlockFieldMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.AbstractRealMatrix#isSquare()",
        "org.apache.commons.math3.linear.NonPositiveDefiniteMatrixException#NonPositiveDefiniteMatrixException(double,int,double)",
        "org.apache.commons.math3.linear.BlockRealMatrix#getRowDimension()",
        "org.apache.commons.math3.util.FastMath.abs(double)",
        "org.apache.commons.math3.linear.NonSquareMatrixException#NonSquareMatrixException(int,int)",
        "org.apache.commons.math3.linear.CholeskyDecomposition.<staticinit>()",
        "org.apache.commons.math3.util.FastMath.sqrt(double)",
        "org.apache.commons.math3.linear.AbstractFieldMatrix#isSquare()",
        "org.apache.commons.math3.linear.SparseFieldMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.OpenMapRealMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.Array2DRowFieldMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.SparseFieldMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.Array2DRowRealMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.Array2DRowRealMatrix#getData()",
        "org.apache.commons.math3.linear.CholeskyDecomposition.<init>()",
        "org.apache.commons.math3.linear.Array2DRowFieldMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.BlockRealMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.BlockRealMatrix#getData()"
    ],
    "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer.diag(RealMatrix)": [
        "org.apache.commons.math3.linear.DiagonalMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.Array2DRowRealMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.BlockFieldMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.SparseFieldMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.DiagonalMatrix#getEntry(int,int)",
        "org.apache.commons.math3.linear.OpenMapRealMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.OpenMapRealMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.DiagonalMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.OpenMapRealMatrix#getEntry(int,int)",
        "org.apache.commons.math3.linear.BlockRealMatrix#getEntry(int,int)",
        "org.apache.commons.math3.linear.Array2DRowRealMatrix#Array2DRowRealMatrix(double[][],boolean)",
        "org.apache.commons.math3.linear.Array2DRowFieldMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.BlockFieldMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.SparseFieldMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.Array2DRowRealMatrix#getEntry(int,int)",
        "org.apache.commons.math3.linear.BlockRealMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.Array2DRowRealMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.Array2DRowFieldMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.BlockRealMatrix#getColumnDimension()"
    ],
    "org.apache.commons.math3.geometry.partitioning.RegionFactory#union(Region<S extends Space>,Region<S extends Space>)": [
        "org.apache.commons.math3.geometry.partitioning.AbstractRegion#getTree(boolean)",
        "org.apache.commons.math3.geometry.partitioning.RegionFactory.UnionMerger.<init>()",
        "org.apache.commons.math3.geometry.partitioning.BSPTree#visit(BSPTreeVisitor<S extends Space>)",
        "org.apache.commons.math3.geometry.partitioning.BSPTree#merge(BSPTree<S extends Space>,LeafMerger<S extends Space>)"
    ],
    "org.apache.commons.math3.filter.KalmanFilter#correct(RealVector)": [
        "org.apache.commons.math3.util.MathUtils.checkNotNull(Object)",
        "org.apache.commons.math3.linear.OpenMapRealVector#add(RealVector)",
        "org.apache.commons.math3.linear.EigenDecomposition.Solver#solve(RealMatrix)",
        "org.apache.commons.math3.linear.OpenMapRealMatrix#multiply(RealMatrix)",
        "org.apache.commons.math3.linear.CholeskyDecomposition#getSolver()",
        "org.apache.commons.math3.linear.DiagonalMatrix#getRowDimension()",
        "org.apache.commons.math3.exception.DimensionMismatchException#DimensionMismatchException(int,int)",
        "org.apache.commons.math3.linear.BlockFieldMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.OpenMapRealVector#getDimension()",
        "org.apache.commons.math3.linear.SingularValueDecomposition.Solver#solve(RealMatrix)",
        "org.apache.commons.math3.linear.BlockRealMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.QRDecomposition.Solver#solve(RealMatrix)",
        "org.apache.commons.math3.filter.DefaultMeasurementModel#getMeasurementNoise()",
        "org.apache.commons.math3.linear.LUDecomposition.Solver#solve(RealMatrix)",
        "org.apache.commons.math3.linear.DiagonalMatrix#multiply(RealMatrix)",
        "org.apache.commons.math3.linear.RealVector.unmodifiableRealVector(RealVector)$RealVector$1#getDimension()",
        "org.apache.commons.math3.linear.BlockRealMatrix#multiply(RealMatrix)",
        "org.apache.commons.math3.linear.RealVector.unmodifiableRealVector(RealVector)$RealVector$1#subtract(RealVector)",
        "org.apache.commons.math3.linear.CholeskyDecomposition.Solver#solve(RealMatrix)",
        "org.apache.commons.math3.linear.AbstractRealMatrix#subtract(RealMatrix)",
        "org.apache.commons.math3.linear.ArrayRealVector#add(RealVector)",
        "org.apache.commons.math3.linear.MatrixUtils.createRealIdentityMatrix(int)",
        "org.apache.commons.math3.linear.ArrayRealVector#getDimension()",
        "org.apache.commons.math3.linear.SparseFieldMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.RealVector.unmodifiableRealVector(RealVector)$RealVector$1#add(RealVector)",
        "org.apache.commons.math3.linear.BlockRealMatrix#transpose()",
        "org.apache.commons.math3.linear.OpenMapRealMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.RealVector#subtract(RealVector)",
        "org.apache.commons.math3.linear.RRQRDecomposition.Solver#solve(RealMatrix)",
        "org.apache.commons.math3.linear.BlockRealMatrix#subtract(RealMatrix)",
        "org.apache.commons.math3.linear.CholeskyDecomposition#CholeskyDecomposition(RealMatrix)",
        "org.apache.commons.math3.linear.ArrayRealVector#subtract(RealVector)",
        "org.apache.commons.math3.linear.Array2DRowRealMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.OpenMapRealMatrix#subtract(RealMatrix)",
        "org.apache.commons.math3.linear.AbstractRealMatrix#multiply(RealMatrix)",
        "org.apache.commons.math3.linear.BlockRealMatrix#add(RealMatrix)",
        "org.apache.commons.math3.linear.AbstractRealMatrix#transpose()",
        "org.apache.commons.math3.linear.Array2DRowFieldMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.AbstractRealMatrix#operate(RealVector)",
        "org.apache.commons.math3.linear.OpenMapRealVector#subtract(RealVector)",
        "org.apache.commons.math3.linear.RealVector#add(RealVector)",
        "org.apache.commons.math3.linear.AbstractRealMatrix#add(RealMatrix)"
    ],
    "org.apache.commons.math3.analysis.differentiation.SparseGradient#toDegrees()": [
        "org.apache.commons.math3.analysis.differentiation.SparseGradient#SparseGradient(double,double,Map<Integer, Double>)",
        "org.apache.commons.math3.util.FastMath.toDegrees(double)"
    ],
    "org.apache.commons.math3.dfp.Dfp#linearCombination(double,Dfp,double,Dfp,double,Dfp,double,Dfp)": [
        "org.apache.commons.math3.dfp.Dfp#add(Dfp)",
        "org.apache.commons.math3.dfp.Dfp#multiply(double)"
    ],
    "org.apache.commons.math3.stat.correlation.StorelessBivariateCovariance#getResult()": ["org.apache.commons.math3.exception.util.LocalizedFormats.<staticinit>()"],
    "org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet#PolygonsSet(double,Vector2D[]...)": [
        "org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.verticesToTree(double,Vector2D[]...)",
        "org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.<init>()",
        "org.apache.commons.math3.geometry.partitioning.AbstractRegion#AbstractRegion(BSPTree<S extends Space>,double)"
    ],
    "org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile.Marker#clone()": ["org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile.Marker#Marker(double,double,double,double)"],
    "org.apache.commons.math3.distribution.GammaDistribution#sample()": [
        "org.apache.commons.math3.util.FastMath.pow(double,double)",
        "org.apache.commons.math3.random.RandomAdaptor#nextGaussian()",
        "org.apache.commons.math3.random.SynchronizedRandomGenerator#nextGaussian()",
        "org.apache.commons.math3.random.RandomGeneratorFactory.createRandomGenerator(Random)$RandomGenerator$1#nextGaussian()",
        "org.apache.commons.math3.random.AbstractRandomGenerator#nextGaussian()",
        "org.apache.commons.math3.util.FastMath.pow(double,int)",
        "org.apache.commons.math3.random.BitsStreamGenerator#nextDouble()",
        "org.apache.commons.math3.util.FastMath.<staticinit>()",
        "org.apache.commons.math3.random.SynchronizedRandomGenerator#nextDouble()",
        "org.apache.commons.math3.random.RandomAdaptor#nextDouble()",
        "org.apache.commons.math3.util.FastMath.exp(double)",
        "org.apache.commons.math3.util.FastMath.sqrt(double)",
        "org.apache.commons.math3.random.BitsStreamGenerator#nextGaussian()",
        "org.apache.commons.math3.random.RandomGeneratorFactory.createRandomGenerator(Random)$RandomGenerator$1#nextDouble()",
        "org.apache.commons.math3.util.FastMath.log(double)"
    ],
    "org.apache.commons.math3.util.FastMathCalc.printarray(PrintStream,String,int,double[])": [
        "org.apache.commons.math3.util.FastMathCalc.<staticinit>()",
        "org.apache.commons.math3.util.FastMathCalc.checkLen(int,int)",
        "org.apache.commons.math3.util.FastMathCalc.format(double)"
    ],
    "org.apache.commons.math3.stat.regression.AbstractMultipleLinearRegression#estimateRegressionParametersStandardErrors()": [
        "org.apache.commons.math3.stat.regression.AbstractMultipleLinearRegression#calculateErrorVariance()",
        "org.apache.commons.math3.stat.regression.AbstractMultipleLinearRegression#estimateRegressionParametersVariance()",
        "org.apache.commons.math3.stat.regression.GLSMultipleLinearRegression#calculateErrorVariance()",
        "org.apache.commons.math3.util.FastMath.sqrt(double)"
    ],
    "org.apache.commons.math3.linear.DiagonalMatrix#getData()": ["org.apache.commons.math3.linear.DiagonalMatrix#getRowDimension()"],
    "org.apache.commons.math3.primes.PollardRho#PollardRho()": ["org.apache.commons.math3.primes.PollardRho.<init>()"],
    "org.apache.commons.math3.analysis.FunctionUtils.multiply(UnivariateDifferentiableFunction[]...)": ["org.apache.commons.math3.analysis.FunctionUtils.multiply(UnivariateDifferentiableFunction[]...)$UnivariateDifferentiableFunction$1.<init>()"],
    "org.apache.commons.math3.complex.Quaternion#getPositivePolarForm()": [
        "org.apache.commons.math3.complex.Quaternion#getQ3()",
        "org.apache.commons.math3.complex.Quaternion#getQ2()",
        "org.apache.commons.math3.complex.Quaternion#getQ1()",
        "org.apache.commons.math3.complex.Quaternion#normalize()",
        "org.apache.commons.math3.complex.Quaternion#getQ0()",
        "org.apache.commons.math3.complex.Quaternion#Quaternion(double,double,double,double)"
    ],
    "org.apache.commons.math3.ode.nonstiff.AdaptiveStepsizeFieldIntegrator#AdaptiveStepsizeFieldIntegrator(Field<T extends RealFieldElement>,String,double,double,double[],double[])": [
        "org.apache.commons.math3.ode.nonstiff.AdaptiveStepsizeFieldIntegrator#setStepSizeControl(double,double,double[],double[])",
        "org.apache.commons.math3.ode.nonstiff.AdaptiveStepsizeFieldIntegrator.<init>()",
        "org.apache.commons.math3.ode.AbstractFieldIntegrator#AbstractFieldIntegrator(Field<T extends RealFieldElement>,String)",
        "org.apache.commons.math3.ode.nonstiff.AdaptiveStepsizeFieldIntegrator#resetInternalState()"
    ],
    "org.apache.commons.math3.linear.MatrixUtils.createFieldMatrix(Field<T extends FieldElement>,int,int)": [
        "org.apache.commons.math3.linear.Array2DRowFieldMatrix#Array2DRowFieldMatrix(Field<T extends FieldElement>,int,int)",
        "org.apache.commons.math3.linear.BlockFieldMatrix#BlockFieldMatrix(Field<T extends FieldElement>,int,int)"
    ],
    "org.apache.commons.math3.complex.Quaternion#equals(Object)": [
        "org.apache.commons.math3.complex.Quaternion#getQ3()",
        "org.apache.commons.math3.complex.Quaternion#getQ2()",
        "org.apache.commons.math3.complex.Quaternion#getQ1()",
        "org.apache.commons.math3.complex.Quaternion#getQ0()"
    ],
    "org.apache.commons.math3.ml.clustering.KMeansPlusPlusClusterer#KMeansPlusPlusClusterer(int,int,DistanceMeasure)": [
        "org.apache.commons.math3.ml.clustering.KMeansPlusPlusClusterer#KMeansPlusPlusClusterer(int,int,DistanceMeasure,RandomGenerator)",
        "org.apache.commons.math3.random.JDKRandomGenerator#JDKRandomGenerator()"
    ],
    "org.apache.commons.math3.optim.nonlinear.vector.ModelFunction#ModelFunction(MultivariateVectorFunction)": ["org.apache.commons.math3.optim.nonlinear.vector.ModelFunction.<init>()"],
    "org.apache.commons.math3.geometry.euclidean.threed.FieldRotation#FieldRotation(T extends RealFieldElement[][],double)": [
        "org.apache.commons.math3.geometry.euclidean.threed.FieldRotation#orthogonalizeMatrix(T extends RealFieldElement[][],double)",
        "org.apache.commons.math3.geometry.euclidean.threed.FieldRotation#mat2quat(T extends RealFieldElement[][])",
        "org.apache.commons.math3.geometry.euclidean.threed.FieldRotation.<init>()",
        "org.apache.commons.math3.exception.util.LocalizedFormats.<staticinit>()"
    ],
    "org.apache.commons.math3.stat.StatUtils.sumLog(double[])": [
        "org.apache.commons.math3.stat.descriptive.moment.StandardDeviation#evaluate(double[])",
        "org.apache.commons.math3.stat.descriptive.moment.Variance#evaluate(double[])",
        "org.apache.commons.math3.stat.StatUtils.<staticinit>()",
        "org.apache.commons.math3.stat.descriptive.AbstractUnivariateStatistic#evaluate(double[])",
        "org.apache.commons.math3.stat.descriptive.AbstractStorelessUnivariateStatistic#evaluate(double[])"
    ],
    "org.apache.commons.math3.distribution.AbstractMultivariateRealDistribution#sample(int)": [
        "org.apache.commons.math3.distribution.MultivariateNormalDistribution#sample()",
        "org.apache.commons.math3.distribution.MixtureMultivariateRealDistribution#sample()",
        "org.apache.commons.math3.exception.util.LocalizedFormats.<staticinit>()"
    ],
    "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer.FitnessFunction#penalty(double[],double[])": ["org.apache.commons.math3.util.FastMath.abs(double)"],
    "org.apache.commons.math3.ode.ParameterJacobianWrapper#isSupported(String)": [
        "org.apache.commons.math3.ode.AbstractParameterizable#isSupported(String)",
        "org.apache.commons.math3.ode.ParameterizedWrapper#isSupported(String)",
        "org.apache.commons.math3.ode.ParameterJacobianWrapper#isSupported(String)"
    ],
    "org.apache.commons.math3.analysis.function.Acosh#value(double)": ["org.apache.commons.math3.util.FastMath.acosh(double)"],
    "org.apache.commons.math3.util.Decimal64#expm1()": [
        "org.apache.commons.math3.util.Decimal64#Decimal64(double)",
        "org.apache.commons.math3.util.FastMath.expm1(double)"
    ],
    "org.apache.commons.math3.stat.inference.TTest#homoscedasticTTest(double[],double[])": [
        "org.apache.commons.math3.stat.StatUtils.mean(double[])",
        "org.apache.commons.math3.stat.inference.TTest#checkSampleData(double[])",
        "org.apache.commons.math3.stat.inference.TTest#homoscedasticTTest(double,double,double,double,double,double)",
        "org.apache.commons.math3.stat.StatUtils.variance(double[])"
    ],
    "org.apache.commons.math3.linear.BlockRealMatrix#walkInRowOrder(RealMatrixPreservingVisitor,int,int,int,int)": [
        "org.apache.commons.math3.linear.DefaultRealMatrixPreservingVisitor#start(int,int,int,int,int,int)",
        "org.apache.commons.math3.linear.AbstractRealMatrix#copySubMatrix(int,int,int,int,double[][])$DefaultRealMatrixPreservingVisitor$1#start(int,int,int,int,int,int)",
        "org.apache.commons.math3.linear.DefaultRealMatrixPreservingVisitor#visit(int,int,double)",
        "org.apache.commons.math3.linear.SingularValueDecomposition#getCovariance(double)$DefaultRealMatrixPreservingVisitor$1#visit(int,int,double)",
        "org.apache.commons.math3.linear.AbstractRealMatrix#getNorm()$RealMatrixPreservingVisitor$1#end()",
        "org.apache.commons.math3.linear.BlockRealMatrix#blockWidth(int)",
        "org.apache.commons.math3.util.FastMath.max(int,int)",
        "org.apache.commons.math3.linear.AbstractRealMatrix#getFrobeniusNorm()$RealMatrixPreservingVisitor$1#end()",
        "org.apache.commons.math3.linear.AbstractRealMatrix#getFrobeniusNorm()$RealMatrixPreservingVisitor$1#visit(int,int,double)",
        "org.apache.commons.math3.linear.DefaultRealMatrixPreservingVisitor#end()",
        "org.apache.commons.math3.linear.AbstractRealMatrix#getFrobeniusNorm()$RealMatrixPreservingVisitor$1#start(int,int,int,int,int,int)",
        "org.apache.commons.math3.util.FastMath.min(int,int)",
        "org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator.Corrector#start(int,int,int,int,int,int)",
        "org.apache.commons.math3.linear.BlockRealMatrix.<staticinit>()",
        "org.apache.commons.math3.linear.AbstractRealMatrix#getNorm()$RealMatrixPreservingVisitor$1#visit(int,int,double)",
        "org.apache.commons.math3.linear.AbstractRealMatrix#copySubMatrix(int,int,int,int,double[][])$DefaultRealMatrixPreservingVisitor$1#visit(int,int,double)",
        "org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator.Corrector#visit(int,int,double)",
        "org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator.Corrector#end()",
        "org.apache.commons.math3.linear.MatrixUtils.checkSubMatrixIndex(AnyMatrix,int,int,int,int)",
        "org.apache.commons.math3.linear.AbstractRealMatrix#getNorm()$RealMatrixPreservingVisitor$1#start(int,int,int,int,int,int)",
        "org.apache.commons.math3.linear.AbstractRealMatrix#transpose()$DefaultRealMatrixPreservingVisitor$1#visit(int,int,double)"
    ],
    "org.apache.commons.math3.dfp.Dfp#toDouble()": [
        "org.apache.commons.math3.dfp.Dfp#newInstance(long)",
        "org.apache.commons.math3.dfp.Dfp#rint()",
        "org.apache.commons.math3.dfp.Dfp#multiply(int)",
        "org.apache.commons.math3.dfp.DfpDec#newInstance(long)",
        "org.apache.commons.math3.dfp.Dfp#toString()",
        "org.apache.commons.math3.dfp.Dfp.compare(Dfp,Dfp)",
        "org.apache.commons.math3.dfp.Dfp#subtract(Dfp)",
        "org.apache.commons.math3.dfp.Dfp#isNaN()",
        "org.apache.commons.math3.dfp.Dfp#isInfinite()",
        "org.apache.commons.math3.dfp.Dfp#lessThan(Dfp)",
        "org.apache.commons.math3.dfp.Dfp#getOne()",
        "org.apache.commons.math3.dfp.Dfp#getTwo()",
        "org.apache.commons.math3.dfp.Dfp#divide(Dfp)",
        "org.apache.commons.math3.dfp.Dfp#multiply(Dfp)",
        "org.apache.commons.math3.dfp.DfpMath.pow(Dfp,int)",
        "org.apache.commons.math3.dfp.Dfp#negate()",
        "org.apache.commons.math3.dfp.Dfp#intLog10()",
        "org.apache.commons.math3.dfp.Dfp#equals(Object)",
        "org.apache.commons.math3.dfp.Dfp#getZero()"
    ],
    "org.apache.commons.math3.util.BigReal#BigReal(char[],MathContext)": ["org.apache.commons.math3.util.BigReal.<init>()"],
    "org.apache.commons.math3.analysis.polynomials.PolynomialsUtils.shift(double[],double)": [
        "org.apache.commons.math3.util.CombinatoricsUtils.binomialCoefficient(int,int)",
        "org.apache.commons.math3.util.FastMath.pow(double,int)"
    ],
    "org.apache.commons.math3.linear.AbstractFieldMatrix#equals(Object)": [
        "org.apache.commons.math3.linear.DiagonalMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.Array2DRowRealMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.SparseFieldMatrix#getEntry(int,int)",
        "org.apache.commons.math3.linear.BlockFieldMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.SparseFieldMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.OpenMapRealMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.OpenMapRealMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.DiagonalMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.Array2DRowFieldMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.SparseFieldMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.BlockFieldMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.BlockRealMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.Array2DRowRealMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.Array2DRowFieldMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.BlockRealMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.Array2DRowFieldMatrix#getEntry(int,int)",
        "org.apache.commons.math3.linear.BlockFieldMatrix#getEntry(int,int)"
    ],
    "org.apache.commons.math3.linear.RealVector.unmodifiableRealVector(RealVector)$RealVector$1#isInfinite()": [
        "org.apache.commons.math3.linear.RealVector.unmodifiableRealVector(RealVector)$RealVector$1#isInfinite()",
        "org.apache.commons.math3.linear.ArrayRealVector#isInfinite()",
        "org.apache.commons.math3.linear.OpenMapRealVector#isInfinite()"
    ],
    "org.apache.commons.math3.genetics.RandomKey.inducedPermutation(List<S>,List<S>)": [
        "org.apache.commons.math3.exception.DimensionMismatchException#DimensionMismatchException(int,int)",
        "org.apache.commons.math3.exception.util.LocalizedFormats.<staticinit>()"
    ],
    "org.apache.commons.math3.linear.BlockFieldMatrix#multiply(FieldMatrix<T extends FieldElement>)": [
        "org.apache.commons.math3.linear.DiagonalMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.Array2DRowRealMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.BlockFieldMatrix#getColumnDimension()",
        "org.apache.commons.math3.util.BigRealField#getZero()",
        "org.apache.commons.math3.linear.BlockFieldMatrix#multiply(BlockFieldMatrix<T extends FieldElement>)",
        "org.apache.commons.math3.linear.OpenMapRealMatrix#getColumnDimension()",
        "org.apache.commons.math3.dfp.DfpField#getZero()",
        "org.apache.commons.math3.linear.BlockFieldMatrix#BlockFieldMatrix(Field<T extends FieldElement>,int,int)",
        "org.apache.commons.math3.fraction.FractionField#getZero()",
        "org.apache.commons.math3.complex.ComplexField#getZero()",
        "org.apache.commons.math3.linear.BlockFieldMatrix.<staticinit>()",
        "org.apache.commons.math3.linear.BlockFieldMatrix#getEntry(int,int)",
        "org.apache.commons.math3.linear.SparseFieldMatrix#getEntry(int,int)",
        "org.apache.commons.math3.linear.BlockFieldMatrix#blockWidth(int)",
        "org.apache.commons.math3.linear.AbstractFieldMatrix#checkMultiplicationCompatible(FieldMatrix<T extends FieldElement>)",
        "org.apache.commons.math3.analysis.differentiation.SparseGradient#getField()$Field$1#getZero()",
        "org.apache.commons.math3.util.Decimal64Field#getZero()",
        "org.apache.commons.math3.util.FastMath.min(int,int)",
        "org.apache.commons.math3.linear.Array2DRowFieldMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.SparseFieldMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.AbstractFieldMatrix#getField()",
        "org.apache.commons.math3.analysis.differentiation.DerivativeStructure#getField()$Field$1#getZero()",
        "org.apache.commons.math3.linear.BlockRealMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.Array2DRowFieldMatrix#getEntry(int,int)",
        "org.apache.commons.math3.fraction.BigFractionField#getZero()"
    ],
    "org.apache.commons.math3.stat.ranking.NaturalRanking#NaturalRanking()": [
        "org.apache.commons.math3.stat.ranking.NaturalRanking.<init>()",
        "org.apache.commons.math3.stat.ranking.NaturalRanking.<staticinit>()"
    ],
    "org.apache.commons.math3.fitting.PolynomialFitter#fit(int,double[])": [
        "org.apache.commons.math3.analysis.polynomials.PolynomialFunction.Parametric.<init>()",
        "org.apache.commons.math3.fitting.CurveFitter#fit(int,T extends ParametricUnivariateFunction,double[])"
    ],
    "org.apache.commons.math3.stat.descriptive.DescriptiveStatistics#getSortedValues()": [
        "org.apache.commons.math3.stat.descriptive.DescriptiveStatistics#getValues()",
        "org.apache.commons.math3.stat.descriptive.SynchronizedDescriptiveStatistics#getValues()"
    ],
    "org.apache.commons.math3.util.Decimal64#signum()": [
        "org.apache.commons.math3.util.Decimal64#Decimal64(double)",
        "org.apache.commons.math3.util.FastMath.signum(double)"
    ],
    "org.apache.commons.math3.util.MathUtils.reduce(double,double,double)": [
        "org.apache.commons.math3.util.FastMath.abs(double)",
        "org.apache.commons.math3.util.FastMath.floor(double)"
    ],
    "org.apache.commons.math3.geometry.euclidean.twod.SubLine#split(Hyperplane<Euclidean2D>)": [
        "org.apache.commons.math3.geometry.euclidean.oned.OrientedPoint#wholeHyperplane()",
        "org.apache.commons.math3.geometry.euclidean.twod.Line#copySelf()",
        "org.apache.commons.math3.geometry.partitioning.BSPTree#BSPTree(Object)",
        "org.apache.commons.math3.geometry.partitioning.SubHyperplane.SplitSubHyperplane#SplitSubHyperplane(SubHyperplane<U extends Space>,SubHyperplane<U extends Space>)",
        "org.apache.commons.math3.geometry.euclidean.twod.Line#getOffset(Line)",
        "org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet#IntervalsSet(BSPTree<Euclidean1D>,double)",
        "org.apache.commons.math3.geometry.euclidean.twod.Line#getTolerance()",
        "org.apache.commons.math3.geometry.euclidean.oned.OrientedPoint#OrientedPoint(Vector1D,boolean,double)",
        "org.apache.commons.math3.geometry.euclidean.twod.Line#toSubSpace(Point<Euclidean2D>)",
        "org.apache.commons.math3.geometry.euclidean.twod.SubLine#SubLine(Hyperplane<Euclidean2D>,Region<Euclidean1D>)",
        "org.apache.commons.math3.geometry.partitioning.BSPTree#getPlus()",
        "org.apache.commons.math3.geometry.partitioning.BSPTree#getMinus()",
        "org.apache.commons.math3.geometry.partitioning.AbstractRegion#getTree(boolean)",
        "org.apache.commons.math3.util.FastMath.sin(double)",
        "org.apache.commons.math3.geometry.partitioning.AbstractRegion#isEmpty(BSPTree<S extends Space>)",
        "org.apache.commons.math3.geometry.euclidean.twod.Line#intersection(Line)",
        "org.apache.commons.math3.geometry.partitioning.BSPTree#split(SubHyperplane<S extends Space>)",
        "org.apache.commons.math3.geometry.partitioning.AbstractSubHyperplane#getRemainingRegion()",
        "org.apache.commons.math3.geometry.partitioning.AbstractSubHyperplane#getHyperplane()",
        "org.apache.commons.math3.geometry.partitioning.BSPTree#BSPTree(SubHyperplane<S extends Space>,BSPTree<S extends Space>,BSPTree<S extends Space>,Object)",
        "org.apache.commons.math3.geometry.euclidean.twod.Line#getAngle()"
    ],
    "org.apache.commons.math3.geometry.euclidean.threed.Line#toSubSpace(Point<Euclidean3D>)": [
        "org.apache.commons.math3.geometry.euclidean.threed.Line#getAbscissa(Vector3D)",
        "org.apache.commons.math3.geometry.euclidean.oned.Vector1D#Vector1D(double)"
    ],
    "org.apache.commons.math3.distribution.FDistribution#FDistribution(RandomGenerator,double,double)": [
        "org.apache.commons.math3.distribution.FDistribution.<staticinit>()",
        "org.apache.commons.math3.distribution.FDistribution#FDistribution(RandomGenerator,double,double,double)"
    ],
    "org.apache.commons.math3.geometry.partitioning.BoundaryProjector#singularProjection(Point<S extends Space>,Hyperplane<S extends Space>,Region<T extends Space>)": [
        "org.apache.commons.math3.geometry.partitioning.AbstractRegion#projectToBoundary(Point<S extends Space>)",
        "org.apache.commons.math3.geometry.partitioning.BoundaryProjection#getProjected()"
    ],
    "org.apache.commons.math3.stat.descriptive.moment.Skewness.copy(Skewness,Skewness)": [
        "org.apache.commons.math3.util.MathUtils.checkNotNull(Object)",
        "org.apache.commons.math3.stat.descriptive.AbstractUnivariateStatistic#setData(double[])",
        "org.apache.commons.math3.stat.descriptive.moment.ThirdMoment#copy()",
        "org.apache.commons.math3.stat.descriptive.rank.Percentile#setData(double[])",
        "org.apache.commons.math3.stat.descriptive.moment.ThirdMoment#ThirdMoment(ThirdMoment)",
        "org.apache.commons.math3.stat.descriptive.AbstractUnivariateStatistic#getDataRef()",
        "org.apache.commons.math3.stat.descriptive.moment.FourthMoment#copy()"
    ],
    "org.apache.commons.math3.ode.AbstractIntegrator#setMaxEvaluations(int)": ["org.apache.commons.math3.util.IntegerSequence.Incrementor#withMaximalCount(int)"],
    "org.apache.commons.math3.stat.descriptive.AggregateSummaryStatistics#AggregateSummaryStatistics(SummaryStatistics)": [
        "org.apache.commons.math3.stat.descriptive.AggregateSummaryStatistics#AggregateSummaryStatistics(SummaryStatistics,SummaryStatistics)",
        "org.apache.commons.math3.stat.descriptive.SummaryStatistics#SummaryStatistics(SummaryStatistics)"
    ],
    "org.apache.commons.math3.ode.events.EventHandler#resetState(double,double[])": ["org.apache.commons.math3.ode.events.EventHandler.Action.<staticinit>()"],
    "org.apache.commons.math3.optimization.direct.AbstractSimplex#replaceWorstPoint(PointValuePair,Comparator<PointValuePair>)": [
        "org.apache.commons.math3.optimization.direct.SimplexOptimizer#doOptimize()$Comparator$1#compare(PointValuePair,PointValuePair)",
        "org.apache.commons.math3.stat.correlation.KendallsCorrelation#correlation(double[],double[])$Comparator$1#compare(Pair<Double, Double>,Pair<Double, Double>)",
        "org.apache.commons.math3.stat.Frequency.NaturalComparator#compare(Comparable<T extends Comparable>,Comparable<T extends Comparable>)",
        "org.apache.commons.math3.optimization.BaseMultivariateMultiStartOptimizer#sortPairs(GoalType)$Comparator$1#compare(PointValuePair,PointValuePair)"
    ],
    "org.apache.commons.math3.util.Decimal64#log1p()": [
        "org.apache.commons.math3.util.Decimal64#Decimal64(double)",
        "org.apache.commons.math3.util.FastMath.log1p(double)"
    ],
    "org.apache.commons.math3.analysis.function.Sigmoid#derivative()": [
        "org.apache.commons.math3.analysis.function.Log10#derivative()",
        "org.apache.commons.math3.analysis.function.Power#derivative()",
        "org.apache.commons.math3.analysis.function.Sin#derivative()",
        "org.apache.commons.math3.analysis.function.Exp#derivative()",
        "org.apache.commons.math3.analysis.function.HarmonicOscillator#derivative()",
        "org.apache.commons.math3.analysis.polynomials.PolynomialFunction#derivative()",
        "org.apache.commons.math3.analysis.function.Logit#derivative()",
        "org.apache.commons.math3.analysis.function.Cbrt#derivative()",
        "org.apache.commons.math3.analysis.FunctionUtils.toDifferentiableUnivariateFunction(UnivariateDifferentiableFunction)",
        "org.apache.commons.math3.analysis.FunctionUtils.toDifferentiableUnivariateFunction(UnivariateDifferentiableFunction)$DifferentiableUnivariateFunction$1#derivative()",
        "org.apache.commons.math3.analysis.polynomials.PolynomialSplineFunction#derivative()",
        "org.apache.commons.math3.analysis.function.Cosh#derivative()",
        "org.apache.commons.math3.analysis.function.Identity#derivative()",
        "org.apache.commons.math3.analysis.function.Inverse#derivative()",
        "org.apache.commons.math3.analysis.function.Acosh#derivative()",
        "org.apache.commons.math3.analysis.function.Acos#derivative()",
        "org.apache.commons.math3.analysis.function.Atan#derivative()",
        "org.apache.commons.math3.analysis.function.Log#derivative()",
        "org.apache.commons.math3.analysis.function.Sqrt#derivative()",
        "org.apache.commons.math3.analysis.function.Logistic#derivative()",
        "org.apache.commons.math3.analysis.function.Expm1#derivative()",
        "org.apache.commons.math3.analysis.function.Asinh#derivative()",
        "org.apache.commons.math3.analysis.function.Gaussian#derivative()",
        "org.apache.commons.math3.analysis.function.Sinc#derivative()",
        "org.apache.commons.math3.analysis.function.Sigmoid#derivative()",
        "org.apache.commons.math3.analysis.function.Constant#derivative()",
        "org.apache.commons.math3.analysis.function.Sinh#derivative()",
        "org.apache.commons.math3.analysis.function.Tanh#derivative()",
        "org.apache.commons.math3.analysis.function.Asin#derivative()",
        "org.apache.commons.math3.analysis.function.Minus#derivative()",
        "org.apache.commons.math3.analysis.FunctionUtils.compose(DifferentiableUnivariateFunction[]...)$DifferentiableUnivariateFunction$1#derivative()",
        "org.apache.commons.math3.analysis.FunctionUtils.add(DifferentiableUnivariateFunction[]...)$DifferentiableUnivariateFunction$1#derivative()",
        "org.apache.commons.math3.analysis.FunctionUtils.multiply(DifferentiableUnivariateFunction[]...)$DifferentiableUnivariateFunction$1#derivative()",
        "org.apache.commons.math3.analysis.function.Log1p#derivative()",
        "org.apache.commons.math3.analysis.function.Tan#derivative()",
        "org.apache.commons.math3.analysis.function.Cos#derivative()",
        "org.apache.commons.math3.analysis.function.Atanh#derivative()"
    ],
    "org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet#isBeforeParent(BSPTree<Euclidean1D>)": [
        "org.apache.commons.math3.geometry.partitioning.BSPTree#getParent()",
        "org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet#childBefore(BSPTree<Euclidean1D>)"
    ],
    "org.apache.commons.math3.ode.ContinuousOutputFieldModel#ContinuousOutputFieldModel()": ["org.apache.commons.math3.ode.ContinuousOutputFieldModel.<init>()"],
    "org.apache.commons.math3.linear.AbstractRealMatrix#setColumn(int,double[])": [
        "org.apache.commons.math3.linear.BlockRealMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.Array2DRowRealMatrix#setEntry(int,int,double)",
        "org.apache.commons.math3.linear.Array2DRowRealMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.MatrixUtils.checkColumnIndex(AnyMatrix,int)",
        "org.apache.commons.math3.linear.OpenMapRealMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.DiagonalMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.BlockRealMatrix#setEntry(int,int,double)",
        "org.apache.commons.math3.linear.OpenMapRealMatrix#setEntry(int,int,double)",
        "org.apache.commons.math3.linear.MatrixDimensionMismatchException#MatrixDimensionMismatchException(int,int,int,int)",
        "org.apache.commons.math3.linear.DiagonalMatrix#setEntry(int,int,double)"
    ],
    "org.apache.commons.math3.analysis.function.Sqrt#value(double)": ["org.apache.commons.math3.util.FastMath.sqrt(double)"],
    "org.apache.commons.math3.geometry.euclidean.threed.Plane#setNormal(Vector3D)": [
        "org.apache.commons.math3.geometry.euclidean.threed.Vector3D#Vector3D(double,Vector3D)",
        "org.apache.commons.math3.geometry.euclidean.threed.Vector3D#getNorm()",
        "org.apache.commons.math3.exception.util.LocalizedFormats.<staticinit>()"
    ],
    "org.apache.commons.math3.fraction.BigFractionFormat#BigFractionFormat(NumberFormat,NumberFormat)": [
        "org.apache.commons.math3.fraction.AbstractFormat#AbstractFormat(NumberFormat,NumberFormat)",
        "org.apache.commons.math3.fraction.BigFractionFormat.<init>()"
    ],
    "org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D.crossProduct(FieldVector3D<T extends RealFieldElement>,Vector3D)": ["org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D#crossProduct(Vector3D)"],
    "org.apache.commons.math3.analysis.FunctionUtils.combine(BivariateFunction,UnivariateFunction,UnivariateFunction)$UnivariateFunction$1#value(double)": [
        "org.apache.commons.math3.analysis.FunctionUtils.multiply(DifferentiableUnivariateFunction[]...)$UnivariateFunction$1$UnivariateFunction$1#derivative()$UnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.polynomials.PolynomialSplineFunction#value(double)",
        "org.apache.commons.math3.analysis.interpolation.BicubicSplineFunction#BicubicSplineFunction(double[],boolean)$BivariateFunction$3#value(double,double)",
        "org.apache.commons.math3.analysis.function.Gaussian#value(double)",
        "org.apache.commons.math3.analysis.function.Tanh#value(double)",
        "org.apache.commons.math3.analysis.function.Inverse#value(double)",
        "org.apache.commons.math3.analysis.interpolation.PiecewiseBicubicSplineInterpolatingFunction#value(double,double)",
        "org.apache.commons.math3.analysis.function.HarmonicOscillator#value(double)",
        "org.apache.commons.math3.analysis.function.Subtract#value(double,double)",
        "org.apache.commons.math3.analysis.FunctionUtils.fix1stArgument(BivariateFunction,double)$UnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.function.Asin#value(double)",
        "org.apache.commons.math3.analysis.function.Pow#value(double,double)",
        "org.apache.commons.math3.analysis.function.Asinh#value(double)",
        "org.apache.commons.math3.analysis.FunctionUtils.multiply(UnivariateFunction[]...)$UnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.function.Atan#value(double)",
        "org.apache.commons.math3.analysis.FunctionUtils.toDifferentiableUnivariateFunction(UnivariateDifferentiableFunction)$DifferentiableUnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.function.Cbrt#value(double)",
        "org.apache.commons.math3.analysis.polynomials.PolynomialFunctionLagrangeForm#value(double)",
        "org.apache.commons.math3.analysis.function.Exp#value(double)",
        "org.apache.commons.math3.special.BesselJ#value(double)",
        "org.apache.commons.math3.analysis.interpolation.BicubicSplineFunction#BicubicSplineFunction(double[],boolean)$BivariateFunction$2#value(double,double)",
        "org.apache.commons.math3.analysis.polynomials.PolynomialFunctionNewtonForm#value(double)",
        "org.apache.commons.math3.analysis.FunctionUtils.add(UnivariateFunction[]...)$UnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.function.Sin#value(double)",
        "org.apache.commons.math3.analysis.function.Cos#value(double)",
        "org.apache.commons.math3.analysis.interpolation.UnivariatePeriodicInterpolator#interpolate(double[],double[])$UnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.function.Log10#value(double)",
        "org.apache.commons.math3.analysis.function.Sqrt#value(double)",
        "org.apache.commons.math3.analysis.function.Log#value(double)",
        "org.apache.commons.math3.analysis.function.Sinc#value(double)",
        "org.apache.commons.math3.ode.events.EventState#evaluateStep(StepInterpolator)$UnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.function.Minus#value(double)",
        "org.apache.commons.math3.analysis.integration.IterativeLegendreGaussIntegrator#stage(int)$UnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.interpolation.BicubicSplineInterpolatingFunction#value(double,double)",
        "org.apache.commons.math3.optimization.general.NonLinearConjugateGradientOptimizer.LineSearchFunction#value(double)",
        "org.apache.commons.math3.analysis.function.Floor#value(double)",
        "org.apache.commons.math3.analysis.FunctionUtils.multiply(DifferentiableUnivariateFunction[]...)$DifferentiableUnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.FunctionUtils.combine(BivariateFunction,UnivariateFunction,UnivariateFunction)$UnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.FunctionUtils.add(DifferentiableUnivariateFunction[]...)$UnivariateFunction$1$UnivariateFunction$1#derivative()$UnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.function.Min#value(double,double)",
        "org.apache.commons.math3.analysis.function.Sinh#value(double)",
        "org.apache.commons.math3.analysis.FunctionUtils.multiply(UnivariateDifferentiableFunction[]...)$UnivariateDifferentiableFunction$1#value(double)",
        "org.apache.commons.math3.analysis.function.Tan#value(double)",
        "org.apache.commons.math3.distribution.AbstractRealDistribution#inverseCumulativeProbability(double)$UnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.FunctionUtils.add(DifferentiableUnivariateFunction[]...)$DifferentiableUnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.function.Ceil#value(double)",
        "org.apache.commons.math3.analysis.function.Logistic#value(double)",
        "org.apache.commons.math3.analysis.interpolation.BicubicFunction#value(double,double)",
        "org.apache.commons.math3.analysis.function.Signum#value(double)",
        "org.apache.commons.math3.analysis.function.Constant#value(double)",
        "org.apache.commons.math3.analysis.function.Atanh#value(double)",
        "org.apache.commons.math3.analysis.FunctionUtils.compose(DifferentiableUnivariateFunction[]...)$UnivariateFunction$1$UnivariateFunction$1#derivative()$UnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.FunctionUtils.add(UnivariateDifferentiableFunction[]...)$UnivariateDifferentiableFunction$1#value(double)",
        "org.apache.commons.math3.analysis.function.Abs#value(double)",
        "org.apache.commons.math3.analysis.differentiation.FiniteDifferencesDifferentiator#differentiate(UnivariateFunction)$UnivariateDifferentiableFunction$1#value(double)",
        "org.apache.commons.math3.analysis.function.Identity#value(double)",
        "org.apache.commons.math3.analysis.function.Expm1#value(double)",
        "org.apache.commons.math3.analysis.function.Logit#value(double)",
        "org.apache.commons.math3.analysis.function.Log1p#value(double)",
        "org.apache.commons.math3.analysis.FunctionUtils.fix2ndArgument(BivariateFunction,double)$UnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.function.Divide#value(double,double)",
        "org.apache.commons.math3.analysis.FunctionUtils.toUnivariateDifferential(DifferentiableUnivariateFunction)$UnivariateDifferentiableFunction$1#value(double)",
        "org.apache.commons.math3.analysis.FunctionUtils.toDifferentiableUnivariateFunction(UnivariateDifferentiableFunction)$UnivariateFunction$1$UnivariateFunction$1#derivative()$UnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.interpolation.BicubicSplineFunction#value(double,double)",
        "org.apache.commons.math3.analysis.polynomials.PolynomialFunction#value(double)",
        "org.apache.commons.math3.analysis.function.Rint#value(double)",
        "org.apache.commons.math3.analysis.function.Atan2#value(double,double)",
        "org.apache.commons.math3.analysis.FunctionUtils.compose(UnivariateFunction[]...)$UnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.function.Cosh#value(double)",
        "org.apache.commons.math3.optimization.direct.PowellOptimizer.LineSearch#search(double[],double[])$UnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.FunctionUtils.compose(DifferentiableUnivariateFunction[]...)$DifferentiableUnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.interpolation.BicubicInterpolatingFunction#value(double,double)",
        "org.apache.commons.math3.analysis.interpolation.BicubicSplineFunction#BicubicSplineFunction(double[],boolean)$BivariateFunction$4#value(double,double)",
        "org.apache.commons.math3.analysis.function.Acosh#value(double)",
        "org.apache.commons.math3.analysis.function.StepFunction#value(double)",
        "org.apache.commons.math3.analysis.FunctionUtils.compose(UnivariateDifferentiableFunction[]...)$UnivariateDifferentiableFunction$1#value(double)",
        "org.apache.commons.math3.analysis.function.Multiply#value(double,double)",
        "org.apache.commons.math3.analysis.function.Acos#value(double)",
        "org.apache.commons.math3.analysis.function.Max#value(double,double)",
        "org.apache.commons.math3.analysis.function.Power#value(double)",
        "org.apache.commons.math3.analysis.interpolation.BicubicSplineFunction#BicubicSplineFunction(double[],boolean)$BivariateFunction$5#value(double,double)",
        "org.apache.commons.math3.optim.nonlinear.scalar.LineSearch#search(double[],double[])$UnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.function.Sigmoid#value(double)",
        "org.apache.commons.math3.analysis.interpolation.BicubicSplineFunction#BicubicSplineFunction(double[],boolean)$BivariateFunction$1#value(double,double)",
        "org.apache.commons.math3.analysis.function.Add#value(double,double)",
        "org.apache.commons.math3.analysis.function.Ulp#value(double)"
    ],
    "org.apache.commons.math3.linear.ArrayFieldVector#add(ArrayFieldVector<T extends FieldElement>)": [
        "org.apache.commons.math3.linear.ArrayFieldVector#ArrayFieldVector(Field<T extends FieldElement>,T extends FieldElement[],boolean)",
        "org.apache.commons.math3.util.MathArrays.buildArray(Field<T>,int)",
        "org.apache.commons.math3.linear.ArrayFieldVector#checkVectorDimensions(int)"
    ],
    "org.apache.commons.math3.ode.sampling.StepNormalizerBounds#StepNormalizerBounds(boolean,boolean)": ["org.apache.commons.math3.ode.sampling.StepNormalizerBounds.<init>()"],
    "org.apache.commons.math3.geometry.spherical.twod.Circle#getReverse()": [
        "org.apache.commons.math3.geometry.spherical.twod.Circle#Circle(Vector3D,Vector3D,Vector3D,double)",
        "org.apache.commons.math3.geometry.euclidean.threed.Vector3D#negate()"
    ],
    "org.apache.commons.math3.dfp.Dfp#linearCombination(Dfp,Dfp,Dfp,Dfp,Dfp,Dfp)": [
        "org.apache.commons.math3.dfp.Dfp#add(Dfp)",
        "org.apache.commons.math3.dfp.Dfp#multiply(Dfp)"
    ],
    "org.apache.commons.math3.optimization.general.LevenbergMarquardtOptimizer#LevenbergMarquardtOptimizer(double,double,double,double,double)": [
        "org.apache.commons.math3.optimization.general.LevenbergMarquardtOptimizer.<init>()",
        "org.apache.commons.math3.optimization.general.AbstractLeastSquaresOptimizer#AbstractLeastSquaresOptimizer(ConvergenceChecker<PointVectorValuePair>)"
    ],
    "org.apache.commons.math3.linear.RealVector.unmodifiableRealVector(RealVector)$Iterator$1$Iterator$1#iterator()$Iterator$1.<init>()": ["org.apache.commons.math3.linear.RealVector.unmodifiableRealVector(RealVector).UnmodifiableEntry.UnmodifiableEntry.<init>()"],
    "org.apache.commons.math3.linear.LUDecomposition#getP()": [
        "org.apache.commons.math3.linear.MatrixUtils.createRealMatrix(int,int)",
        "org.apache.commons.math3.linear.BlockRealMatrix#setEntry(int,int,double)",
        "org.apache.commons.math3.linear.OpenMapRealMatrix#setEntry(int,int,double)",
        "org.apache.commons.math3.linear.Array2DRowRealMatrix#setEntry(int,int,double)",
        "org.apache.commons.math3.linear.DiagonalMatrix#setEntry(int,int,double)"
    ],
    "org.apache.commons.math3.random.Well44497b#Well44497b()": [
        "org.apache.commons.math3.random.AbstractWell#AbstractWell(int,int,int,int)",
        "org.apache.commons.math3.random.Well44497b.<init>()",
        "org.apache.commons.math3.random.Well44497b.<staticinit>()"
    ],
    "org.apache.commons.math3.special.Erf.erf(double)": [
        "org.apache.commons.math3.util.FastMath.abs(double)",
        "org.apache.commons.math3.special.Gamma.regularizedGammaP(double,double,double,int)"
    ],
    "org.apache.commons.math3.geometry.spherical.oned.ArcsSet#leafBefore(BSPTree<Sphere1D>)": [
        "org.apache.commons.math3.geometry.partitioning.BSPTree#getCut()",
        "org.apache.commons.math3.geometry.spherical.oned.ArcsSet#childAfter(BSPTree<Sphere1D>)",
        "org.apache.commons.math3.geometry.spherical.oned.ArcsSet#childBefore(BSPTree<Sphere1D>)"
    ],
    "org.apache.commons.math3.ml.clustering.DBSCANClusterer#expandCluster(Cluster<T extends Clusterable>,T extends Clusterable,List<T extends Clusterable>,Collection<T extends Clusterable>,Map<Clusterable, PointStatus>)": [
        "org.apache.commons.math3.ml.clustering.DBSCANClusterer.PointStatus.<staticinit>()",
        "org.apache.commons.math3.ml.clustering.DBSCANClusterer#getNeighbors(T extends Clusterable,Collection<T extends Clusterable>)",
        "org.apache.commons.math3.ml.clustering.Cluster#addPoint(T extends Clusterable)",
        "org.apache.commons.math3.ml.clustering.DBSCANClusterer#merge(List<T extends Clusterable>,List<T extends Clusterable>)"
    ],
    "org.apache.commons.math3.geometry.spherical.oned.ArcsSet#side(Arc)": [
        "org.apache.commons.math3.geometry.spherical.oned.ArcsSet.Split#getSide()",
        "org.apache.commons.math3.geometry.partitioning.Side.<staticinit>()",
        "org.apache.commons.math3.geometry.spherical.oned.ArcsSet#split(Arc)"
    ],
    "org.apache.commons.math3.fitting.GaussianCurveFitter.ParameterGuesser#sortObservations(Collection<WeightedObservedPoint>)": ["org.apache.commons.math3.fitting.GaussianCurveFitter.ParameterGuesser#sortObservations(Collection<WeightedObservedPoint>)$Comparator$1.<init>()"],
    "org.apache.commons.math3.ode.ContinuousOutputFieldModel#locatePoint(T extends RealFieldElement,FieldStepInterpolator<T extends RealFieldElement>)": [
        "org.apache.commons.math3.ode.FieldODEState#getTime()",
        "org.apache.commons.math3.ode.sampling.AbstractFieldStepInterpolator#getPreviousState()",
        "org.apache.commons.math3.ode.sampling.AbstractFieldStepInterpolator#getCurrentState()"
    ],
    "org.apache.commons.math3.random.Well19937c#Well19937c()": [
        "org.apache.commons.math3.random.Well19937c.<staticinit>()",
        "org.apache.commons.math3.random.AbstractWell#AbstractWell(int,int,int,int)",
        "org.apache.commons.math3.random.Well19937c.<init>()"
    ],
    "org.apache.commons.math3.optim.nonlinear.scalar.MultivariateFunctionMappingAdapter#boundedToUnbounded(double[])": [
        "org.apache.commons.math3.optim.nonlinear.scalar.MultivariateFunctionMappingAdapter.UpperBoundMapper#boundedToUnbounded(double)",
        "org.apache.commons.math3.optim.nonlinear.scalar.MultivariateFunctionMappingAdapter.LowerBoundMapper#boundedToUnbounded(double)",
        "org.apache.commons.math3.optim.nonlinear.scalar.MultivariateFunctionMappingAdapter.NoBoundsMapper#boundedToUnbounded(double)",
        "org.apache.commons.math3.optim.nonlinear.scalar.MultivariateFunctionMappingAdapter.LowerUpperBoundMapper#boundedToUnbounded(double)"
    ],
    "org.apache.commons.math3.random.RandomDataGenerator#nextCauchy(double,double)": [
        "org.apache.commons.math3.distribution.ExponentialDistribution#sample()",
        "org.apache.commons.math3.random.RandomDataGenerator#getRandomGenerator()",
        "org.apache.commons.math3.distribution.AbstractRealDistribution#sample()",
        "org.apache.commons.math3.distribution.CauchyDistribution.<staticinit>()",
        "org.apache.commons.math3.distribution.EnumeratedRealDistribution#sample()",
        "org.apache.commons.math3.distribution.BetaDistribution#sample()",
        "org.apache.commons.math3.distribution.CauchyDistribution#CauchyDistribution(RandomGenerator,double,double,double)",
        "org.apache.commons.math3.distribution.LogNormalDistribution#sample()",
        "org.apache.commons.math3.distribution.ParetoDistribution#sample()",
        "org.apache.commons.math3.distribution.UniformRealDistribution#sample()",
        "org.apache.commons.math3.distribution.NormalDistribution#sample()",
        "org.apache.commons.math3.distribution.ConstantRealDistribution#sample()",
        "org.apache.commons.math3.distribution.GammaDistribution#sample()"
    ],
    "org.apache.commons.math3.optimization.PointValuePair#getPointRef()": ["org.apache.commons.math3.util.Pair#getKey()"],
    "org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet#IntervalsSet(Collection<SubHyperplane<Euclidean1D>>)": [
        "org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet.<staticinit>()",
        "org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet#IntervalsSet(Collection<SubHyperplane<Euclidean1D>>,double)"
    ],
    "org.apache.commons.math3.distribution.AbstractIntegerDistribution#solveInverseCumulativeProbability(double,int,int)": ["org.apache.commons.math3.distribution.AbstractIntegerDistribution#checkedCumulativeProbability(int)"],
    "org.apache.commons.math3.geometry.euclidean.twod.Line#sameOrientationAs(Hyperplane<Euclidean2D>)": ["org.apache.commons.math3.util.MathArrays.linearCombination(double,double,double,double)"],
    "org.apache.commons.math3.geometry.spherical.oned.Sphere1D#readResolve()": ["org.apache.commons.math3.geometry.spherical.oned.Sphere1D.LazyHolder.<staticinit>()"],
    "org.apache.commons.math3.stat.descriptive.SynchronizedSummaryStatistics#hashCode()": ["org.apache.commons.math3.stat.descriptive.SummaryStatistics#hashCode()"],
    "org.apache.commons.math3.optimization.linear.SimplexTableau#normalize(LinearConstraint)": [
        "org.apache.commons.math3.optimization.linear.LinearConstraint#getCoefficients()",
        "org.apache.commons.math3.optimization.linear.LinearConstraint#getValue()",
        "org.apache.commons.math3.optimization.linear.Relationship#oppositeRelationship()",
        "org.apache.commons.math3.linear.RealVector#mapMultiply(double)",
        "org.apache.commons.math3.linear.RealVector.unmodifiableRealVector(RealVector)$RealVector$1#mapMultiply(double)",
        "org.apache.commons.math3.optimization.linear.LinearConstraint#LinearConstraint(RealVector,Relationship,double)",
        "org.apache.commons.math3.optimization.linear.LinearConstraint#getRelationship()"
    ],
    "org.apache.commons.math3.util.FastMathCalc.slowexp(double,double[])": [
        "org.apache.commons.math3.util.FastMathCalc.splitAdd(double[],double[],double[])",
        "org.apache.commons.math3.util.FastMathCalc.split(double,double[])",
        "org.apache.commons.math3.util.FastMathCalc.<staticinit>()",
        "org.apache.commons.math3.util.FastMathCalc.splitMult(double[],double[],double[])",
        "org.apache.commons.math3.util.FastMathCalc.splitReciprocal(double[],double[])"
    ],
    "org.apache.commons.math3.util.OpenIntToFieldHashMap#OpenIntToFieldHashMap(OpenIntToFieldHashMap<T extends FieldElement>)": [
        "org.apache.commons.math3.util.OpenIntToFieldHashMap#buildArray(int)",
        "org.apache.commons.math3.util.OpenIntToFieldHashMap.<init>()"
    ],
    "org.apache.commons.math3.fitting.leastsquares.LeastSquaresFactory.LocalLeastSquaresProblem#getParameterSize()": [
        "org.apache.commons.math3.linear.ArrayRealVector#getDimension()",
        "org.apache.commons.math3.linear.OpenMapRealVector#getDimension()",
        "org.apache.commons.math3.linear.RealVector.unmodifiableRealVector(RealVector)$RealVector$1#getDimension()"
    ],
    "org.apache.commons.math3.geometry.euclidean.twod.Line#setOriginOffset(double)": ["org.apache.commons.math3.geometry.euclidean.twod.Line#unlinkReverse()"],
    "org.apache.commons.math3.genetics.FixedElapsedTime#FixedElapsedTime(long,TimeUnit)": ["org.apache.commons.math3.genetics.FixedElapsedTime.<init>()"],
    "org.apache.commons.math3.optimization.SimpleValueChecker#SimpleValueChecker()": [
        "org.apache.commons.math3.optimization.SimpleValueChecker.<staticinit>()",
        "org.apache.commons.math3.optimization.AbstractConvergenceChecker#AbstractConvergenceChecker()",
        "org.apache.commons.math3.optimization.SimpleValueChecker.<init>()"
    ],
    "org.apache.commons.math3.stat.descriptive.MultivariateSummaryStatistics#getSum()": ["org.apache.commons.math3.stat.descriptive.MultivariateSummaryStatistics#getResults(StorelessUnivariateStatistic[])"],
    "org.apache.commons.math3.ode.nonstiff.EmbeddedRungeKuttaFieldIntegrator#integrate(FieldExpandableODE<T extends RealFieldElement>,FieldODEState<T extends RealFieldElement>,T extends RealFieldElement)": [
        "org.apache.commons.math3.ode.AbstractFieldIntegrator#acceptStep(AbstractFieldStepInterpolator<T extends RealFieldElement>,T extends RealFieldElement)",
        "org.apache.commons.math3.ode.FieldEquationsMapper#mapState(FieldODEState<T extends RealFieldElement>)",
        "org.apache.commons.math3.util.BigRealField#getZero()",
        "org.apache.commons.math3.ode.nonstiff.HighamHall54FieldIntegrator#estimateError(T extends RealFieldElement[][],T extends RealFieldElement[],T extends RealFieldElement[],T extends RealFieldElement)",
        "org.apache.commons.math3.ode.AbstractFieldIntegrator#getStepStart()",
        "org.apache.commons.math3.ode.nonstiff.DormandPrince54FieldIntegrator#estimateError(T extends RealFieldElement[][],T extends RealFieldElement[],T extends RealFieldElement[],T extends RealFieldElement)",
        "org.apache.commons.math3.ode.AbstractFieldIntegrator#setStepSize(T extends RealFieldElement)",
        "org.apache.commons.math3.dfp.DfpField#getZero()",
        "org.apache.commons.math3.ode.FieldODEState#getTime()",
        "org.apache.commons.math3.util.MathUtils.min(T extends RealFieldElement,T extends RealFieldElement)",
        "org.apache.commons.math3.ode.nonstiff.AdaptiveStepsizeFieldIntegrator#resetInternalState()",
        "org.apache.commons.math3.ode.nonstiff.AdaptiveStepsizeFieldIntegrator#filterStep(T extends RealFieldElement,boolean,boolean)",
        "org.apache.commons.math3.ode.AbstractFieldIntegrator#computeDerivatives(T extends RealFieldElement,T extends RealFieldElement[])",
        "org.apache.commons.math3.ode.nonstiff.HighamHall54FieldIntegrator#getOrder()",
        "org.apache.commons.math3.fraction.FractionField#getZero()",
        "org.apache.commons.math3.ode.FieldEquationsMapper#mapDerivative(FieldODEStateAndDerivative<T extends RealFieldElement>)",
        "org.apache.commons.math3.ode.AbstractFieldIntegrator#isLastStep()",
        "org.apache.commons.math3.complex.ComplexField#getZero()",
        "org.apache.commons.math3.ode.nonstiff.AdaptiveStepsizeFieldIntegrator#sanityChecks(FieldODEState<T extends RealFieldElement>,T extends RealFieldElement)",
        "org.apache.commons.math3.util.MathArrays.buildArray(Field<T>,int)",
        "org.apache.commons.math3.ode.nonstiff.DormandPrince853FieldIntegrator#getOrder()",
        "org.apache.commons.math3.ode.AbstractFieldIntegrator#getField()",
        "org.apache.commons.math3.ode.AbstractFieldIntegrator#initIntegration(FieldExpandableODE<T extends RealFieldElement>,T extends RealFieldElement,T extends RealFieldElement[],T extends RealFieldElement)",
        "org.apache.commons.math3.ode.AbstractFieldIntegrator#setStepStart(FieldODEStateAndDerivative<T extends RealFieldElement>)",
        "org.apache.commons.math3.analysis.differentiation.SparseGradient#getField()$Field$1#getZero()",
        "org.apache.commons.math3.util.Decimal64Field#getZero()",
        "org.apache.commons.math3.ode.FieldExpandableODE#getMapper()",
        "org.apache.commons.math3.ode.nonstiff.AdaptiveStepsizeFieldIntegrator#initializeStep(boolean,int,T extends RealFieldElement[],FieldODEStateAndDerivative<T extends RealFieldElement>,FieldEquationsMapper<T extends RealFieldElement>)",
        "org.apache.commons.math3.ode.nonstiff.DormandPrince54FieldIntegrator#getOrder()",
        "org.apache.commons.math3.analysis.differentiation.SparseGradient#add(double)",
        "org.apache.commons.math3.ode.AbstractFieldIntegrator#getStepSize()",
        "org.apache.commons.math3.ode.FieldODEStateAndDerivative#FieldODEStateAndDerivative(T extends RealFieldElement,T extends RealFieldElement[],T extends RealFieldElement[])",
        "org.apache.commons.math3.ode.AbstractFieldIntegrator#setIsLastStep(boolean)",
        "org.apache.commons.math3.util.MathArrays.buildArray(Field<T>,int,int)",
        "org.apache.commons.math3.analysis.differentiation.DerivativeStructure#add(double)",
        "org.apache.commons.math3.ode.nonstiff.DormandPrince853FieldIntegrator#estimateError(T extends RealFieldElement[][],T extends RealFieldElement[],T extends RealFieldElement[],T extends RealFieldElement)",
        "org.apache.commons.math3.ode.nonstiff.HighamHall54FieldIntegrator#createInterpolator(boolean,T extends RealFieldElement[][],FieldODEStateAndDerivative<T extends RealFieldElement>,FieldODEStateAndDerivative<T extends RealFieldElement>,FieldEquationsMapper<T extends RealFieldElement>)",
        "org.apache.commons.math3.analysis.differentiation.DerivativeStructure#getField()$Field$1#getZero()",
        "org.apache.commons.math3.ode.nonstiff.DormandPrince853FieldIntegrator#createInterpolator(boolean,T extends RealFieldElement[][],FieldODEStateAndDerivative<T extends RealFieldElement>,FieldODEStateAndDerivative<T extends RealFieldElement>,FieldEquationsMapper<T extends RealFieldElement>)",
        "org.apache.commons.math3.ode.nonstiff.DormandPrince54FieldIntegrator#createInterpolator(boolean,T extends RealFieldElement[][],FieldODEStateAndDerivative<T extends RealFieldElement>,FieldODEStateAndDerivative<T extends RealFieldElement>,FieldEquationsMapper<T extends RealFieldElement>)",
        "org.apache.commons.math3.util.MathUtils.max(T extends RealFieldElement,T extends RealFieldElement)",
        "org.apache.commons.math3.fraction.BigFractionField#getZero()",
        "org.apache.commons.math3.util.Decimal64#add(double)",
        "org.apache.commons.math3.dfp.Dfp#add(double)"
    ],
    "org.apache.commons.math3.stat.descriptive.summary.Product#evaluate(double[],int,int)": ["org.apache.commons.math3.stat.descriptive.AbstractUnivariateStatistic#test(double[],int,int,boolean)"],
    "org.apache.commons.math3.stat.inference.ChiSquareTest#chiSquareDataSetsComparison(long[],long[])": [
        "org.apache.commons.math3.exception.DimensionMismatchException#DimensionMismatchException(int,int)",
        "org.apache.commons.math3.util.MathArrays.checkNonNegative(long[])",
        "org.apache.commons.math3.util.FastMath.sqrt(double)",
        "org.apache.commons.math3.exception.ZeroException#ZeroException()",
        "org.apache.commons.math3.exception.util.LocalizedFormats.<staticinit>()"
    ],
    "org.apache.commons.math3.distribution.BetaDistribution#BetaDistribution(double,double)": [
        "org.apache.commons.math3.distribution.BetaDistribution.<staticinit>()",
        "org.apache.commons.math3.distribution.BetaDistribution#BetaDistribution(double,double,double)"
    ],
    "org.apache.commons.math3.stat.regression.SimpleRegression#SimpleRegression()": ["org.apache.commons.math3.stat.regression.SimpleRegression#SimpleRegression(boolean)"],
    "org.apache.commons.math3.analysis.solvers.MullerSolver#doSolve()": [
        "org.apache.commons.math3.analysis.solvers.BaseAbstractUnivariateSolver#getMin()",
        "org.apache.commons.math3.analysis.solvers.BaseAbstractUnivariateSolver#computeObjectiveValue(double)",
        "org.apache.commons.math3.analysis.solvers.BaseAbstractUnivariateSolver#getFunctionValueAccuracy()",
        "org.apache.commons.math3.util.FastMath.abs(double)",
        "org.apache.commons.math3.analysis.solvers.BaseAbstractUnivariateSolver#getStartValue()",
        "org.apache.commons.math3.analysis.solvers.BaseAbstractUnivariateSolver#verifySequence(double,double,double)",
        "org.apache.commons.math3.analysis.solvers.MullerSolver#solve(double,double,double,double)",
        "org.apache.commons.math3.analysis.solvers.BaseAbstractUnivariateSolver#isBracketing(double,double)",
        "org.apache.commons.math3.analysis.solvers.BaseAbstractUnivariateSolver#getMax()",
        "org.apache.commons.math3.analysis.solvers.BaseAbstractUnivariateSolver#verifyBracketing(double,double)"
    ],
    "org.apache.commons.math3.util.FastMath.toDegrees(double)": ["org.apache.commons.math3.util.FastMath.doubleHighPart(double)"],
    "org.apache.commons.math3.util.ResizableDoubleArray#setElement(int,double)": ["org.apache.commons.math3.util.ResizableDoubleArray#expandTo(int)"],
    "org.apache.commons.math3.optim.nonlinear.vector.MultiStartMultivariateVectorOptimizer#getOptima()": ["org.apache.commons.math3.optim.nonlinear.vector.MultiStartMultivariateVectorOptimizer#getPairComparator()"],
    "org.apache.commons.math3.distribution.MultivariateNormalDistribution#MultivariateNormalDistribution(RandomGenerator,double[],double[][])": [
        "org.apache.commons.math3.linear.EigenDecomposition#getSolver()",
        "org.apache.commons.math3.linear.EigenDecomposition#getDeterminant()",
        "org.apache.commons.math3.linear.EigenDecomposition#EigenDecomposition(RealMatrix)",
        "org.apache.commons.math3.linear.BlockRealMatrix#setColumn(int,double[])",
        "org.apache.commons.math3.linear.CholeskyDecomposition.Solver#getInverse()",
        "org.apache.commons.math3.linear.OpenMapRealVector#toArray()",
        "org.apache.commons.math3.linear.EigenDecomposition.Solver#getInverse()",
        "org.apache.commons.math3.linear.OpenMapRealMatrix#multiply(RealMatrix)",
        "org.apache.commons.math3.util.MathArrays.copyOf(double[])",
        "org.apache.commons.math3.linear.SingularValueDecomposition.Solver#getInverse()",
        "org.apache.commons.math3.exception.DimensionMismatchException#DimensionMismatchException(int,int)",
        "org.apache.commons.math3.linear.RRQRDecomposition.Solver#getInverse()",
        "org.apache.commons.math3.linear.NonPositiveDefiniteMatrixException#NonPositiveDefiniteMatrixException(double,int,double)",
        "org.apache.commons.math3.linear.AbstractRealMatrix#multiplyEntry(int,int,double)",
        "org.apache.commons.math3.linear.RealVector#toArray()",
        "org.apache.commons.math3.util.FastMath.sqrt(double)",
        "org.apache.commons.math3.linear.DiagonalMatrix#multiply(RealMatrix)",
        "org.apache.commons.math3.linear.BlockRealMatrix#multiply(RealMatrix)",
        "org.apache.commons.math3.linear.OpenMapRealMatrix#multiplyEntry(int,int,double)",
        "org.apache.commons.math3.linear.LUDecomposition.Solver#getInverse()",
        "org.apache.commons.math3.linear.EigenDecomposition#getRealEigenvalues()",
        "org.apache.commons.math3.linear.Array2DRowRealMatrix#Array2DRowRealMatrix(double[][])",
        "org.apache.commons.math3.linear.BlockRealMatrix#transpose()",
        "org.apache.commons.math3.linear.RealVector.unmodifiableRealVector(RealVector)$RealVector$1#toArray()",
        "org.apache.commons.math3.linear.AbstractRealMatrix#setColumn(int,double[])",
        "org.apache.commons.math3.linear.Array2DRowRealMatrix#Array2DRowRealMatrix(int,int)",
        "org.apache.commons.math3.linear.Array2DRowRealMatrix#multiplyEntry(int,int,double)",
        "org.apache.commons.math3.linear.EigenDecomposition#getEigenvector(int)",
        "org.apache.commons.math3.linear.QRDecomposition.Solver#getInverse()",
        "org.apache.commons.math3.linear.AbstractRealMatrix#multiply(RealMatrix)",
        "org.apache.commons.math3.linear.DiagonalMatrix#multiplyEntry(int,int,double)",
        "org.apache.commons.math3.linear.AbstractRealMatrix#transpose()",
        "org.apache.commons.math3.distribution.MultivariateNormalDistribution.<init>()",
        "org.apache.commons.math3.distribution.AbstractMultivariateRealDistribution#AbstractMultivariateRealDistribution(RandomGenerator,int)",
        "org.apache.commons.math3.linear.BlockRealMatrix#multiplyEntry(int,int,double)",
        "org.apache.commons.math3.linear.ArrayRealVector#toArray()"
    ],
    "org.apache.commons.math3.random.BitsStreamGenerator#nextFloat()": [
        "org.apache.commons.math3.random.ISAACRandom#next(int)",
        "org.apache.commons.math3.random.MersenneTwister#next(int)",
        "org.apache.commons.math3.random.Well19937a#next(int)",
        "org.apache.commons.math3.random.Well1024a#next(int)",
        "org.apache.commons.math3.random.Well44497b#next(int)",
        "org.apache.commons.math3.random.Well512a#next(int)",
        "org.apache.commons.math3.random.Well44497a#next(int)",
        "org.apache.commons.math3.random.Well19937c#next(int)"
    ],
    "org.apache.commons.math3.analysis.solvers.BaseAbstractUnivariateSolver#verifyInterval(double,double)": ["org.apache.commons.math3.analysis.solvers.UnivariateSolverUtils.verifyInterval(double,double)"],
    "org.apache.commons.math3.util.FastMath.Split#reciprocal()": [
        "org.apache.commons.math3.util.FastMath.Split#Split(double)",
        "org.apache.commons.math3.util.FastMath.Split#Split(double,double)",
        "org.apache.commons.math3.util.FastMath.Split#multiply(Split)"
    ],
    "org.apache.commons.math3.analysis.function.Atan#value(double)": ["org.apache.commons.math3.util.FastMath.atan(double)"],
    "org.apache.commons.math3.linear.BiDiagonalTransformer#transformToLowerBiDiagonal()": ["org.apache.commons.math3.util.FastMath.sqrt(double)"],
    "org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizer#determineLMDirection(double[],double[],double[],double[])": [
        "org.apache.commons.math3.util.FastMath.abs(double)",
        "org.apache.commons.math3.util.FastMath.sqrt(double)"
    ],
    "org.apache.commons.math3.ml.neuralnet.FeatureInitializerFactory.uniform(RandomGenerator,double,double)": [
        "org.apache.commons.math3.ml.neuralnet.FeatureInitializerFactory.randomize(RealDistribution,FeatureInitializer)",
        "org.apache.commons.math3.distribution.UniformRealDistribution#UniformRealDistribution(RandomGenerator,double,double)",
        "org.apache.commons.math3.analysis.function.Constant#Constant(double)",
        "org.apache.commons.math3.ml.neuralnet.FeatureInitializerFactory.function(UnivariateFunction,double,double)"
    ],
    "org.apache.commons.math3.analysis.differentiation.SparseGradient#getField()$Field$1#getOne()": ["org.apache.commons.math3.analysis.differentiation.SparseGradient.createConstant(double)"],
    "org.apache.commons.math3.userguide.genetics.ImageEvolutionExample.Display#startEvolution()$Runnable$1#run()": [
        "org.apache.commons.math3.genetics.GeneticAlgorithm#nextGeneration(Population)",
        "org.apache.commons.math3.genetics.ListPopulation#getFittestChromosome()"
    ],
    "org.apache.commons.math3.stat.descriptive.moment.VectorialMean#getN()": ["org.apache.commons.math3.stat.descriptive.moment.Mean#getN()"],
    "org.apache.commons.math3.optim.univariate.MultiStartUnivariateOptimizer#sortPairs(GoalType)$Comparator$1#compare(UnivariatePointValuePair,UnivariatePointValuePair)": [
        "org.apache.commons.math3.optim.univariate.UnivariatePointValuePair#getValue()",
        "org.apache.commons.math3.optim.nonlinear.scalar.GoalType.<staticinit>()"
    ],
    "org.apache.commons.math3.stat.descriptive.SynchronizedMultivariateSummaryStatistics#getMin()": ["org.apache.commons.math3.stat.descriptive.MultivariateSummaryStatistics#getMin()"],
    "org.apache.commons.math3.linear.MatrixUtils.checkSubMatrixIndex(AnyMatrix,int,int,int,int)": [
        "org.apache.commons.math3.linear.MatrixUtils.checkRowIndex(AnyMatrix,int)",
        "org.apache.commons.math3.linear.MatrixUtils.checkColumnIndex(AnyMatrix,int)",
        "org.apache.commons.math3.exception.util.LocalizedFormats.<staticinit>()"
    ],
    "org.apache.commons.math3.ode.nonstiff.AdaptiveStepsizeFieldIntegrator#setStepSizeControl(double,double,double[],double[])": [
        "org.apache.commons.math3.util.BigRealField#getZero()",
        "org.apache.commons.math3.dfp.DfpField#getZero()",
        "org.apache.commons.math3.util.BigRealField#getOne()",
        "org.apache.commons.math3.util.FastMath.abs(double)",
        "org.apache.commons.math3.fraction.FractionField#getZero()",
        "org.apache.commons.math3.complex.ComplexField#getZero()",
        "org.apache.commons.math3.fraction.Fraction#negate()",
        "org.apache.commons.math3.util.Decimal64#negate()",
        "org.apache.commons.math3.analysis.differentiation.DerivativeStructure#negate()",
        "org.apache.commons.math3.ode.AbstractFieldIntegrator#getField()",
        "org.apache.commons.math3.fraction.BigFractionField#getOne()",
        "org.apache.commons.math3.fraction.FractionField#getOne()",
        "org.apache.commons.math3.analysis.differentiation.SparseGradient#getField()$Field$1#getOne()",
        "org.apache.commons.math3.analysis.differentiation.SparseGradient#getField()$Field$1#getZero()",
        "org.apache.commons.math3.complex.Complex#negate()",
        "org.apache.commons.math3.util.Decimal64Field#getZero()",
        "org.apache.commons.math3.analysis.differentiation.SparseGradient#add(double)",
        "org.apache.commons.math3.complex.ComplexField#getOne()",
        "org.apache.commons.math3.analysis.differentiation.SparseGradient#negate()",
        "org.apache.commons.math3.analysis.differentiation.DerivativeStructure#add(double)",
        "org.apache.commons.math3.analysis.differentiation.DerivativeStructure#getField()$Field$1#getZero()",
        "org.apache.commons.math3.fraction.BigFraction#negate()",
        "org.apache.commons.math3.dfp.DfpField#getOne()",
        "org.apache.commons.math3.fraction.BigFractionField#getZero()",
        "org.apache.commons.math3.dfp.Dfp#negate()",
        "org.apache.commons.math3.analysis.differentiation.DerivativeStructure#getField()$Field$1#getOne()",
        "org.apache.commons.math3.util.Decimal64#add(double)",
        "org.apache.commons.math3.util.Decimal64Field#getOne()",
        "org.apache.commons.math3.dfp.Dfp#add(double)",
        "org.apache.commons.math3.util.BigReal#negate()"
    ],
    "org.apache.commons.math3.analysis.differentiation.SparseGradient#sin()": [
        "org.apache.commons.math3.analysis.differentiation.SparseGradient#SparseGradient(double,double,Map<Integer, Double>)",
        "org.apache.commons.math3.util.FastMath.sin(double)",
        "org.apache.commons.math3.util.FastMath.cos(double)"
    ],
    "org.apache.commons.math3.analysis.solvers.LaguerreSolver.<init>()": ["org.apache.commons.math3.analysis.solvers.LaguerreSolver.ComplexSolver.<init>()"],
    "org.apache.commons.math3.linear.ArrayRealVector#isInfinite()": ["org.apache.commons.math3.linear.ArrayRealVector#isNaN()"],
    "org.apache.commons.math3.geometry.euclidean.threed.Vector3D.<staticinit>()": ["org.apache.commons.math3.geometry.euclidean.threed.Vector3D#Vector3D(double,double,double)"],
    "org.apache.commons.math3.linear.BlockFieldMatrix#getColumnMatrix(int)": [
        "org.apache.commons.math3.linear.BlockFieldMatrix#blockHeight(int)",
        "org.apache.commons.math3.linear.BlockFieldMatrix#blockWidth(int)",
        "org.apache.commons.math3.linear.AbstractFieldMatrix#getField()",
        "org.apache.commons.math3.linear.BlockFieldMatrix.<staticinit>()",
        "org.apache.commons.math3.linear.AbstractFieldMatrix#checkColumnIndex(int)",
        "org.apache.commons.math3.linear.BlockFieldMatrix#BlockFieldMatrix(Field<T extends FieldElement>,int,int)"
    ],
    "org.apache.commons.math3.exception.MathIllegalStateException#MathIllegalStateException()": ["org.apache.commons.math3.exception.util.LocalizedFormats.<staticinit>()"],
    "org.apache.commons.math3.util.OpenIntToFieldHashMap#containsKey(int)": [
        "org.apache.commons.math3.util.OpenIntToFieldHashMap#containsKey(int,int)",
        "org.apache.commons.math3.util.OpenIntToFieldHashMap.probe(int,int)",
        "org.apache.commons.math3.util.OpenIntToFieldHashMap.hashOf(int)",
        "org.apache.commons.math3.util.OpenIntToFieldHashMap.<staticinit>()",
        "org.apache.commons.math3.util.OpenIntToFieldHashMap.perturb(int)"
    ],
    "org.apache.commons.math3.ode.nonstiff.AdaptiveStepsizeFieldIntegrator#filterStep(T extends RealFieldElement,boolean,boolean)": [
        "org.apache.commons.math3.exception.util.LocalizedFormats.<staticinit>()",
        "org.apache.commons.math3.exception.NumberIsTooSmallException#NumberIsTooSmallException(Localizable,Number,Number,boolean)"
    ],
    "org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator#doFinalize()": [
        "org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator.<staticinit>()",
        "org.apache.commons.math3.ode.sampling.AbstractStepInterpolator#getGlobalPreviousTime()",
        "org.apache.commons.math3.ode.AbstractIntegrator#computeDerivatives(double,double[],double[])"
    ],
    "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizer#parseOptimizationData(OptimizationData[]...)": ["org.apache.commons.math3.optim.nonlinear.scalar.MultivariateOptimizer#parseOptimizationData(OptimizationData[]...)"],
    "org.apache.commons.math3.linear.ArrayFieldVector#ArrayFieldVector(int,T extends FieldElement)": ["org.apache.commons.math3.linear.ArrayFieldVector#ArrayFieldVector(Field<T extends FieldElement>,int)"],
    "org.apache.commons.math3.dfp.Dfp#power10K(int)": [
        "org.apache.commons.math3.dfp.Dfp#getOne()",
        "org.apache.commons.math3.dfp.DfpDec#newInstance(Dfp)",
        "org.apache.commons.math3.dfp.Dfp#newInstance(Dfp)"
    ],
    "org.apache.commons.math3.fitting.leastsquares.LevenbergMarquardtOptimizer.<staticinit>()": ["org.apache.commons.math3.util.Precision.<staticinit>()"],
    "org.apache.commons.math3.stat.ranking.NaturalRanking#containsNaNs(IntDoublePair[])": ["org.apache.commons.math3.stat.ranking.NaturalRanking.IntDoublePair#getValue()"],
    "org.apache.commons.math3.transform.FastFourierTransformer.MultiDimensionalComplexMatrix#set(Complex,int[]...)": ["org.apache.commons.math3.exception.DimensionMismatchException#DimensionMismatchException(int,int)"],
    "org.apache.commons.math3.util.Decimal64#sinh()": [
        "org.apache.commons.math3.util.Decimal64#Decimal64(double)",
        "org.apache.commons.math3.util.FastMath.sinh(double)"
    ],
    "org.apache.commons.math3.userguide.geometry.GeometryExample.main(String[])": [
        "org.apache.commons.math3.userguide.geometry.GeometryExample.Display#Display()",
        "org.apache.commons.math3.userguide.ExampleUtils.showExampleFrame(ExampleFrame)"
    ],
    "org.apache.commons.math3.fitting.leastsquares.DenseWeightedEvaluation#getResiduals()": [
        "org.apache.commons.math3.fitting.leastsquares.DenseWeightedEvaluation#getResiduals()",
        "org.apache.commons.math3.linear.AbstractRealMatrix#operate(RealVector)",
        "org.apache.commons.math3.fitting.leastsquares.LeastSquaresFactory.LocalLeastSquaresProblem.LazyUnweightedEvaluation#getResiduals()",
        "org.apache.commons.math3.fitting.leastsquares.LeastSquaresFactory.LocalLeastSquaresProblem.UnweightedEvaluation#getResiduals()",
        "org.apache.commons.math3.fitting.leastsquares.OptimumImpl#getResiduals()"
    ],
    "org.apache.commons.math3.ode.events.FieldEventState#stop()": ["org.apache.commons.math3.ode.events.Action.<staticinit>()"],
    "org.apache.commons.math3.optim.BaseOptimizer#getMaxIterations()": ["org.apache.commons.math3.util.Incrementor#getMaximalCount()"],
    "org.apache.commons.math3.fitting.SimpleCurveFitter#withMaxIterations(int)": ["org.apache.commons.math3.fitting.SimpleCurveFitter#SimpleCurveFitter(ParametricUnivariateFunction,double[],int)"],
    "org.apache.commons.math3.ode.ParameterConfiguration#ParameterConfiguration(String,double)": ["org.apache.commons.math3.ode.ParameterConfiguration.<init>()"],
    "org.apache.commons.math3.util.MathArrays.verifyValues(double[],int,int,boolean)": [
        "org.apache.commons.math3.exception.NumberIsTooLargeException#NumberIsTooLargeException(Localizable,Number,Number,boolean)",
        "org.apache.commons.math3.exception.NotPositiveException#NotPositiveException(Localizable,Number)",
        "org.apache.commons.math3.exception.util.LocalizedFormats.<staticinit>()"
    ],
    "org.apache.commons.math3.geometry.spherical.twod.SphericalPolygonsSet#computeGeometricalProperties()": [
        "org.apache.commons.math3.geometry.partitioning.BSPTree#visit(BSPTreeVisitor<S extends Space>)",
        "org.apache.commons.math3.geometry.partitioning.AbstractRegion#getTolerance()",
        "org.apache.commons.math3.geometry.spherical.twod.PropertiesComputer#PropertiesComputer(double)",
        "org.apache.commons.math3.geometry.spherical.twod.S2Point#S2Point(double,double)",
        "org.apache.commons.math3.geometry.partitioning.BSPTree#getAttribute()",
        "org.apache.commons.math3.geometry.partitioning.AbstractRegion#setSize(double)",
        "org.apache.commons.math3.util.FastMath.<staticinit>()",
        "org.apache.commons.math3.geometry.partitioning.BSPTree#getCut()",
        "org.apache.commons.math3.geometry.partitioning.AbstractRegion#getTree(boolean)",
        "org.apache.commons.math3.geometry.spherical.twod.PropertiesComputer#getArea()",
        "org.apache.commons.math3.geometry.partitioning.AbstractRegion#setBarycenter(Point<S extends Space>)",
        "org.apache.commons.math3.geometry.spherical.twod.PropertiesComputer#getBarycenter()",
        "org.apache.commons.math3.geometry.spherical.twod.S2Point.<staticinit>()"
    ],
    "org.apache.commons.math3.dfp.Dfp#dotrap(int,String,Dfp,Dfp)": [
        "org.apache.commons.math3.dfp.DfpField.<staticinit>()",
        "org.apache.commons.math3.dfp.DfpDec#newInstance(Dfp)",
        "org.apache.commons.math3.dfp.Dfp.<staticinit>()",
        "org.apache.commons.math3.dfp.Dfp#trap(int,String,Dfp,Dfp,Dfp)",
        "org.apache.commons.math3.dfp.Dfp#getZero()",
        "org.apache.commons.math3.dfp.Dfp#newInstance(Dfp)"
    ],
    "org.apache.commons.math3.ode.events.EventFilter#eventOccurred(double,double[],boolean)": [
        "org.apache.commons.math3.ode.events.FilterType$FilterType$1#getTriggeredIncreasing()",
        "org.apache.commons.math3.ode.events.EventFilter#eventOccurred(double,double[],boolean)"
    ],
    "org.apache.commons.math3.linear.BiDiagonalTransformer#transformToUpperBiDiagonal()": ["org.apache.commons.math3.util.FastMath.sqrt(double)"],
    "org.apache.commons.math3.geometry.euclidean.twod.hull.ConvexHull2D#retrieveLineSegments()": [
        "org.apache.commons.math3.geometry.euclidean.twod.Line#Line(Vector2D,Vector2D,double)",
        "org.apache.commons.math3.geometry.euclidean.twod.Segment#Segment(Vector2D,Vector2D,Line)"
    ],
    "org.apache.commons.math3.complex.Complex#tanh()": [
        "org.apache.commons.math3.util.FastMath.cosh(double)",
        "org.apache.commons.math3.util.FastMath.sin(double)",
        "org.apache.commons.math3.complex.Complex.<staticinit>()",
        "org.apache.commons.math3.complex.Complex#createComplex(double,double)",
        "org.apache.commons.math3.util.FastMath.sinh(double)",
        "org.apache.commons.math3.util.FastMath.cos(double)"
    ],
    "org.apache.commons.math3.fraction.Fraction#Fraction(double,double,int)": ["org.apache.commons.math3.fraction.Fraction#Fraction(double,double,int,int)"],
    "org.apache.commons.math3.complex.Quaternion.multiply(Quaternion,Quaternion)": [
        "org.apache.commons.math3.complex.Quaternion#getQ3()",
        "org.apache.commons.math3.complex.Quaternion#getQ2()",
        "org.apache.commons.math3.complex.Quaternion#getQ1()",
        "org.apache.commons.math3.complex.Quaternion#getQ0()",
        "org.apache.commons.math3.complex.Quaternion#Quaternion(double,double,double,double)"
    ],
    "org.apache.commons.math3.analysis.function.Sigmoid.Parametric#validateParameters(double[])": [
        "org.apache.commons.math3.exception.DimensionMismatchException#DimensionMismatchException(int,int)",
        "org.apache.commons.math3.exception.NullArgumentException#NullArgumentException()"
    ],
    "org.apache.commons.math3.linear.JacobiPreconditioner#sqrt()$RealLinearOperator$1#getRowDimension()": [
        "org.apache.commons.math3.linear.ArrayRealVector#getDimension()",
        "org.apache.commons.math3.linear.OpenMapRealVector#getDimension()",
        "org.apache.commons.math3.linear.RealVector.unmodifiableRealVector(RealVector)$RealVector$1#getDimension()"
    ],
    "org.apache.commons.math3.linear.ArrayRealVector#ebeDivide(RealVector)": [
        "org.apache.commons.math3.linear.ArrayRealVector#checkVectorDimensions(RealVector)",
        "org.apache.commons.math3.linear.ArrayRealVector#ArrayRealVector(int)",
        "org.apache.commons.math3.linear.ArrayRealVector#ArrayRealVector(double[],boolean)",
        "org.apache.commons.math3.linear.ArrayRealVector#checkVectorDimensions(int)",
        "org.apache.commons.math3.linear.ArrayRealVector#getEntry(int)",
        "org.apache.commons.math3.linear.OpenMapRealVector#getEntry(int)",
        "org.apache.commons.math3.linear.RealVector.unmodifiableRealVector(RealVector)$RealVector$1#getEntry(int)"
    ],
    "org.apache.commons.math3.geometry.euclidean.twod.Line#toSpace(Vector<Euclidean1D>)": ["org.apache.commons.math3.geometry.euclidean.twod.Line#toSpace(Point<Euclidean1D>)"],
    "org.apache.commons.math3.optimization.general.NonLinearConjugateGradientOptimizer#findUpperBound(UnivariateFunction,double,double)": [
        "org.apache.commons.math3.analysis.FunctionUtils.multiply(DifferentiableUnivariateFunction[]...)$UnivariateFunction$1$UnivariateFunction$1#derivative()$UnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.polynomials.PolynomialSplineFunction#value(double)",
        "org.apache.commons.math3.analysis.function.Gaussian#value(double)",
        "org.apache.commons.math3.analysis.function.Tanh#value(double)",
        "org.apache.commons.math3.exception.util.LocalizedFormats.<staticinit>()",
        "org.apache.commons.math3.analysis.function.Inverse#value(double)",
        "org.apache.commons.math3.analysis.function.HarmonicOscillator#value(double)",
        "org.apache.commons.math3.analysis.FunctionUtils.fix1stArgument(BivariateFunction,double)$UnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.function.Asin#value(double)",
        "org.apache.commons.math3.analysis.function.Asinh#value(double)",
        "org.apache.commons.math3.analysis.FunctionUtils.multiply(UnivariateFunction[]...)$UnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.function.Atan#value(double)",
        "org.apache.commons.math3.analysis.FunctionUtils.toDifferentiableUnivariateFunction(UnivariateDifferentiableFunction)$DifferentiableUnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.function.Cbrt#value(double)",
        "org.apache.commons.math3.analysis.polynomials.PolynomialFunctionLagrangeForm#value(double)",
        "org.apache.commons.math3.analysis.function.Exp#value(double)",
        "org.apache.commons.math3.special.BesselJ#value(double)",
        "org.apache.commons.math3.analysis.polynomials.PolynomialFunctionNewtonForm#value(double)",
        "org.apache.commons.math3.analysis.FunctionUtils.add(UnivariateFunction[]...)$UnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.function.Sin#value(double)",
        "org.apache.commons.math3.analysis.function.Cos#value(double)",
        "org.apache.commons.math3.analysis.interpolation.UnivariatePeriodicInterpolator#interpolate(double[],double[])$UnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.function.Log10#value(double)",
        "org.apache.commons.math3.analysis.function.Sqrt#value(double)",
        "org.apache.commons.math3.analysis.function.Log#value(double)",
        "org.apache.commons.math3.analysis.function.Sinc#value(double)",
        "org.apache.commons.math3.ode.events.EventState#evaluateStep(StepInterpolator)$UnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.function.Minus#value(double)",
        "org.apache.commons.math3.analysis.integration.IterativeLegendreGaussIntegrator#stage(int)$UnivariateFunction$1#value(double)",
        "org.apache.commons.math3.optimization.general.NonLinearConjugateGradientOptimizer.LineSearchFunction#value(double)",
        "org.apache.commons.math3.analysis.function.Floor#value(double)",
        "org.apache.commons.math3.analysis.FunctionUtils.multiply(DifferentiableUnivariateFunction[]...)$DifferentiableUnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.FunctionUtils.combine(BivariateFunction,UnivariateFunction,UnivariateFunction)$UnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.FunctionUtils.add(DifferentiableUnivariateFunction[]...)$UnivariateFunction$1$UnivariateFunction$1#derivative()$UnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.function.Sinh#value(double)",
        "org.apache.commons.math3.analysis.FunctionUtils.multiply(UnivariateDifferentiableFunction[]...)$UnivariateDifferentiableFunction$1#value(double)",
        "org.apache.commons.math3.analysis.function.Tan#value(double)",
        "org.apache.commons.math3.distribution.AbstractRealDistribution#inverseCumulativeProbability(double)$UnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.FunctionUtils.add(DifferentiableUnivariateFunction[]...)$DifferentiableUnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.function.Ceil#value(double)",
        "org.apache.commons.math3.analysis.function.Logistic#value(double)",
        "org.apache.commons.math3.analysis.function.Signum#value(double)",
        "org.apache.commons.math3.analysis.function.Constant#value(double)",
        "org.apache.commons.math3.analysis.function.Atanh#value(double)",
        "org.apache.commons.math3.analysis.FunctionUtils.compose(DifferentiableUnivariateFunction[]...)$UnivariateFunction$1$UnivariateFunction$1#derivative()$UnivariateFunction$1#value(double)",
        "org.apache.commons.math3.util.FastMath.max(double,double)",
        "org.apache.commons.math3.analysis.FunctionUtils.add(UnivariateDifferentiableFunction[]...)$UnivariateDifferentiableFunction$1#value(double)",
        "org.apache.commons.math3.analysis.function.Abs#value(double)",
        "org.apache.commons.math3.analysis.differentiation.FiniteDifferencesDifferentiator#differentiate(UnivariateFunction)$UnivariateDifferentiableFunction$1#value(double)",
        "org.apache.commons.math3.analysis.function.Identity#value(double)",
        "org.apache.commons.math3.analysis.function.Expm1#value(double)",
        "org.apache.commons.math3.analysis.function.Logit#value(double)",
        "org.apache.commons.math3.analysis.function.Log1p#value(double)",
        "org.apache.commons.math3.analysis.FunctionUtils.fix2ndArgument(BivariateFunction,double)$UnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.FunctionUtils.toUnivariateDifferential(DifferentiableUnivariateFunction)$UnivariateDifferentiableFunction$1#value(double)",
        "org.apache.commons.math3.analysis.FunctionUtils.toDifferentiableUnivariateFunction(UnivariateDifferentiableFunction)$UnivariateFunction$1$UnivariateFunction$1#derivative()$UnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.polynomials.PolynomialFunction#value(double)",
        "org.apache.commons.math3.analysis.function.Rint#value(double)",
        "org.apache.commons.math3.analysis.FunctionUtils.compose(UnivariateFunction[]...)$UnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.function.Cosh#value(double)",
        "org.apache.commons.math3.optimization.direct.PowellOptimizer.LineSearch#search(double[],double[])$UnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.FunctionUtils.compose(DifferentiableUnivariateFunction[]...)$DifferentiableUnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.function.Acosh#value(double)",
        "org.apache.commons.math3.analysis.function.StepFunction#value(double)",
        "org.apache.commons.math3.analysis.FunctionUtils.compose(UnivariateDifferentiableFunction[]...)$UnivariateDifferentiableFunction$1#value(double)",
        "org.apache.commons.math3.analysis.function.Acos#value(double)",
        "org.apache.commons.math3.analysis.function.Power#value(double)",
        "org.apache.commons.math3.optim.nonlinear.scalar.LineSearch#search(double[],double[])$UnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.function.Sigmoid#value(double)",
        "org.apache.commons.math3.analysis.function.Ulp#value(double)"
    ],
    "org.apache.commons.math3.linear.SparseFieldVector#set(T extends FieldElement)": [
        "org.apache.commons.math3.linear.SparseFieldVector#setEntry(int,T extends FieldElement)",
        "org.apache.commons.math3.util.MathUtils.checkNotNull(Object)"
    ],
    "org.apache.commons.math3.ode.nonstiff.GillFieldIntegrator#getA()": [
        "org.apache.commons.math3.ode.AbstractFieldIntegrator#getField()",
        "org.apache.commons.math3.ode.nonstiff.RungeKuttaFieldIntegrator#fraction(int,int)",
        "org.apache.commons.math3.util.BigRealField#getZero()",
        "org.apache.commons.math3.analysis.differentiation.SparseGradient#getField()$Field$1#getZero()",
        "org.apache.commons.math3.util.Decimal64Field#getZero()",
        "org.apache.commons.math3.dfp.DfpField#getZero()",
        "org.apache.commons.math3.analysis.differentiation.SparseGradient#add(double)",
        "org.apache.commons.math3.util.MathArrays.buildArray(Field<T>,int,int)",
        "org.apache.commons.math3.analysis.differentiation.DerivativeStructure#add(double)",
        "org.apache.commons.math3.analysis.differentiation.DerivativeStructure#getField()$Field$1#getZero()",
        "org.apache.commons.math3.fraction.FractionField#getZero()",
        "org.apache.commons.math3.complex.ComplexField#getZero()",
        "org.apache.commons.math3.fraction.BigFractionField#getZero()",
        "org.apache.commons.math3.util.Decimal64#add(double)",
        "org.apache.commons.math3.util.MathArrays.buildArray(Field<T>,int)",
        "org.apache.commons.math3.dfp.Dfp#add(double)"
    ],
    "org.apache.commons.math3.analysis.interpolation.TricubicInterpolatingFunction#value(double,double,double)": [
        "org.apache.commons.math3.analysis.interpolation.TricubicInterpolatingFunction#searchIndex(double,double[])",
        "org.apache.commons.math3.analysis.interpolation.TricubicFunction#value(double,double,double)"
    ],
    "org.apache.commons.math3.ode.ContinuousOutputFieldModel#handleStep(FieldStepInterpolator<T extends RealFieldElement>,boolean)": [
        "org.apache.commons.math3.ode.sampling.AbstractFieldStepInterpolator#getPreviousState()",
        "org.apache.commons.math3.ode.sampling.AbstractFieldStepInterpolator#getCurrentState()",
        "org.apache.commons.math3.ode.FieldODEState#getTime()",
        "org.apache.commons.math3.ode.sampling.AbstractFieldStepInterpolator#isForward()"
    ],
    "org.apache.commons.math3.linear.RealVector#unitVector()": [
        "org.apache.commons.math3.linear.RealVector#getNorm()",
        "org.apache.commons.math3.linear.RealVector.unmodifiableRealVector(RealVector)$RealVector$1#getNorm()",
        "org.apache.commons.math3.linear.ArrayRealVector#getNorm()",
        "org.apache.commons.math3.linear.RealVector.unmodifiableRealVector(RealVector)$RealVector$1#mapDivide(double)",
        "org.apache.commons.math3.linear.RealVector#mapDivide(double)",
        "org.apache.commons.math3.exception.util.LocalizedFormats.<staticinit>()"
    ],
    "org.apache.commons.math3.fitting.leastsquares.LeastSquaresFactory.LocalLeastSquaresProblem#getStart()": [
        "org.apache.commons.math3.linear.OpenMapRealVector#copy()",
        "org.apache.commons.math3.linear.ArrayRealVector#copy()",
        "org.apache.commons.math3.linear.RealVector.unmodifiableRealVector(RealVector)$RealVector$1#copy()"
    ],
    "org.apache.commons.math3.geometry.euclidean.threed.RotationOrder.<staticinit>()": [
        "org.apache.commons.math3.geometry.euclidean.threed.RotationOrder#RotationOrder(String,Vector3D,Vector3D,Vector3D)",
        "org.apache.commons.math3.geometry.euclidean.threed.Vector3D.<staticinit>()"
    ],
    "org.apache.commons.math3.util.Precision#Precision()": ["org.apache.commons.math3.util.Precision.<init>()"],
    "org.apache.commons.math3.analysis.function.Sinc#value(double)": [
        "org.apache.commons.math3.util.FastMath.sin(double)",
        "org.apache.commons.math3.analysis.function.Sinc.<staticinit>()",
        "org.apache.commons.math3.util.FastMath.abs(double)",
        "org.apache.commons.math3.util.FastMath.<staticinit>()"
    ],
    "org.apache.commons.math3.dfp.Dfp#divide(Dfp)": [
        "org.apache.commons.math3.dfp.Dfp.<staticinit>()",
        "org.apache.commons.math3.dfp.Dfp#dotrap(int,String,Dfp,Dfp)",
        "org.apache.commons.math3.dfp.Dfp#newInstance(Dfp)",
        "org.apache.commons.math3.dfp.Dfp#round(int)",
        "org.apache.commons.math3.dfp.DfpField#getRadixDigits()",
        "org.apache.commons.math3.dfp.Dfp#isNaN()",
        "org.apache.commons.math3.dfp.DfpField.RoundingMode.<staticinit>()",
        "org.apache.commons.math3.dfp.DfpDec#newInstance(Dfp)",
        "org.apache.commons.math3.dfp.DfpDec#round(int)",
        "org.apache.commons.math3.dfp.DfpField.<staticinit>()",
        "org.apache.commons.math3.dfp.DfpField#getRoundingMode()",
        "org.apache.commons.math3.dfp.DfpField#setIEEEFlagsBits(int)",
        "org.apache.commons.math3.dfp.Dfp#getZero()"
    ],
    "org.apache.commons.math3.analysis.solvers.BracketingNthOrderBrentSolver#solve(int,UnivariateFunction,double,double,double,AllowedSolution)": ["org.apache.commons.math3.analysis.solvers.BaseAbstractUnivariateSolver#solve(int,FUNC extends UnivariateFunction,double,double,double)"],
    "org.apache.commons.math3.analysis.interpolation.BicubicSplineInterpolator#BicubicSplineInterpolator()": ["org.apache.commons.math3.analysis.interpolation.BicubicSplineInterpolator#BicubicSplineInterpolator(boolean)"],
    "org.apache.commons.math3.userguide.geometry.GeometryExample.createCanvas()$PBasicInputEventHandler$1#updateToolTip(PInputEvent)": [
        "org.apache.commons.math3.userguide.genetics.HelloWorldExample.StringChromosome#toString()",
        "org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile#toString()",
        "org.apache.commons.math3.stat.descriptive.SynchronizedDescriptiveStatistics#toString()",
        "org.apache.commons.math3.genetics.RandomKey#toString()",
        "org.apache.commons.math3.userguide.genetics.PolygonChromosome#toString()",
        "org.apache.commons.math3.genetics.AbstractListChromosome#toString()",
        "org.apache.commons.math3.linear.ArrayRealVector#toString()",
        "org.apache.commons.math3.stat.descriptive.SynchronizedMultivariateSummaryStatistics#toString()",
        "org.apache.commons.math3.linear.AbstractRealMatrix#toString()",
        "org.apache.commons.math3.stat.descriptive.SynchronizedSummaryStatistics#toString()"
    ],
    "org.apache.commons.math3.distribution.ParetoDistribution#density(double)": [
        "org.apache.commons.math3.util.FastMath.pow(double,int)",
        "org.apache.commons.math3.util.FastMath.pow(double,double)"
    ],
    "org.apache.commons.math3.exception.ConvergenceException#ConvergenceException(Localizable,Object[]...)": [
        "org.apache.commons.math3.exception.util.ExceptionContext#addMessage(Localizable,Object[]...)",
        "org.apache.commons.math3.exception.ConvergenceException.<init>()",
        "org.apache.commons.math3.exception.MathIllegalStateException#MathIllegalStateException()",
        "org.apache.commons.math3.exception.MathIllegalStateException#getContext()"
    ],
    "org.apache.commons.math3.complex.ComplexField#ComplexField()": ["org.apache.commons.math3.complex.ComplexField.<init>()"],
    "org.apache.commons.math3.distribution.ExponentialDistribution#getNumericalVariance()": ["org.apache.commons.math3.distribution.ExponentialDistribution#getMean()"],
    "org.apache.commons.math3.geometry.euclidean.twod.hull.MonotoneChain#updateHull(Vector2D,List<Vector2D>)": [
        "org.apache.commons.math3.geometry.euclidean.twod.Line#Line(Vector2D,Vector2D,double)",
        "org.apache.commons.math3.geometry.euclidean.twod.hull.AbstractConvexHullGenerator2D#getTolerance()",
        "org.apache.commons.math3.geometry.euclidean.twod.hull.AbstractConvexHullGenerator2D#isIncludeCollinearPoints()",
        "org.apache.commons.math3.geometry.euclidean.twod.Line#getOffset(Vector<Euclidean2D>)",
        "org.apache.commons.math3.util.FastMath.abs(double)",
        "org.apache.commons.math3.geometry.euclidean.twod.Vector2D#distance(Vector<Euclidean2D>)"
    ],
    "org.apache.commons.math3.special.BesselJ#BesselJ(double)": ["org.apache.commons.math3.special.BesselJ.<init>()"],
    "org.apache.commons.math3.optimization.direct.PowellOptimizer.LineSearch.<init>()": ["org.apache.commons.math3.optimization.univariate.BracketFinder#BracketFinder()"],
    "org.apache.commons.math3.fraction.AbstractFormat#AbstractFormat()": [
        "org.apache.commons.math3.fraction.AbstractFormat.getDefaultNumberFormat()",
        "org.apache.commons.math3.fraction.AbstractFormat#AbstractFormat(NumberFormat)"
    ],
    "org.apache.commons.math3.fitting.leastsquares.LeastSquaresFactory.countEvaluations(LeastSquaresProblem,Incrementor)": ["org.apache.commons.math3.fitting.leastsquares.LeastSquaresFactory.countEvaluations(LeastSquaresProblem,Incrementor)$LeastSquaresAdapter$1.<init>()"],
    "org.apache.commons.math3.linear.BlockRealMatrix#multiply(RealMatrix)": [
        "org.apache.commons.math3.linear.DiagonalMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.Array2DRowRealMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.BlockFieldMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.MatrixUtils.checkMultiplicationCompatible(AnyMatrix,AnyMatrix)",
        "org.apache.commons.math3.linear.DiagonalMatrix#getEntry(int,int)",
        "org.apache.commons.math3.linear.BlockRealMatrix#blockWidth(int)",
        "org.apache.commons.math3.linear.OpenMapRealMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.BlockRealMatrix#multiply(BlockRealMatrix)",
        "org.apache.commons.math3.linear.OpenMapRealMatrix#getEntry(int,int)",
        "org.apache.commons.math3.util.FastMath.min(int,int)",
        "org.apache.commons.math3.linear.BlockRealMatrix.<staticinit>()",
        "org.apache.commons.math3.linear.BlockRealMatrix#getEntry(int,int)",
        "org.apache.commons.math3.linear.BlockRealMatrix#BlockRealMatrix(int,int)",
        "org.apache.commons.math3.linear.Array2DRowFieldMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.SparseFieldMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.Array2DRowRealMatrix#getEntry(int,int)",
        "org.apache.commons.math3.linear.BlockRealMatrix#getColumnDimension()"
    ],
    "org.apache.commons.math3.analysis.integration.gauss.BaseRuleFactory#addRule(Pair<T extends Number[], T extends Number[]>)": [
        "org.apache.commons.math3.util.Pair#getFirst()",
        "org.apache.commons.math3.exception.DimensionMismatchException#DimensionMismatchException(int,int)",
        "org.apache.commons.math3.util.Pair#getSecond()"
    ],
    "org.apache.commons.math3.random.ISAACRandom#next(int)": [
        "org.apache.commons.math3.random.ISAACRandom.<staticinit>()",
        "org.apache.commons.math3.random.ISAACRandom#isaac()"
    ],
    "org.apache.commons.math3.optimization.direct.BOBYQAOptimizer#bobyqa(double[],double[])": [
        "org.apache.commons.math3.optimization.direct.BOBYQAOptimizer#bobyqb(double[],double[])",
        "org.apache.commons.math3.util.FastMath.max(double,double)",
        "org.apache.commons.math3.linear.ArrayRealVector#getDimension()",
        "org.apache.commons.math3.optimization.direct.BOBYQAOptimizer.<staticinit>()",
        "org.apache.commons.math3.util.FastMath.min(double,double)",
        "org.apache.commons.math3.optimization.direct.BOBYQAOptimizer.printMethod()",
        "org.apache.commons.math3.linear.ArrayRealVector#getEntry(int)",
        "org.apache.commons.math3.linear.ArrayRealVector#setEntry(int,double)"
    ],
    "org.apache.commons.math3.optimization.linear.SimplexTableau#equals(Object)": ["org.apache.commons.math3.optimization.linear.LinearObjectiveFunction#equals(Object)"],
    "org.apache.commons.math3.fraction.Fraction#subtract(int)": ["org.apache.commons.math3.fraction.Fraction#Fraction(int,int)"],
    "org.apache.commons.math3.complex.Quaternion#multiply(double)": ["org.apache.commons.math3.complex.Quaternion#Quaternion(double,double,double,double)"],
    "org.apache.commons.math3.stat.descriptive.rank.Percentile.copy(Percentile,Percentile)": ["org.apache.commons.math3.exception.MathUnsupportedOperationException#MathUnsupportedOperationException()"],
    "org.apache.commons.math3.stat.descriptive.SynchronizedMultivariateSummaryStatistics#getGeoMeanImpl()": ["org.apache.commons.math3.stat.descriptive.MultivariateSummaryStatistics#getGeoMeanImpl()"],
    "org.apache.commons.math3.analysis.solvers.AbstractDifferentiableUnivariateSolver#setup(int,DifferentiableUnivariateFunction,double,double,double)": [
        "org.apache.commons.math3.analysis.function.Log10#derivative()",
        "org.apache.commons.math3.analysis.function.Power#derivative()",
        "org.apache.commons.math3.analysis.function.Sin#derivative()",
        "org.apache.commons.math3.analysis.function.Exp#derivative()",
        "org.apache.commons.math3.analysis.function.HarmonicOscillator#derivative()",
        "org.apache.commons.math3.analysis.polynomials.PolynomialFunction#derivative()",
        "org.apache.commons.math3.analysis.function.Logit#derivative()",
        "org.apache.commons.math3.analysis.function.Cbrt#derivative()",
        "org.apache.commons.math3.analysis.FunctionUtils.toDifferentiableUnivariateFunction(UnivariateDifferentiableFunction)$DifferentiableUnivariateFunction$1#derivative()",
        "org.apache.commons.math3.analysis.polynomials.PolynomialSplineFunction#derivative()",
        "org.apache.commons.math3.analysis.function.Cosh#derivative()",
        "org.apache.commons.math3.analysis.function.Identity#derivative()",
        "org.apache.commons.math3.analysis.function.Inverse#derivative()",
        "org.apache.commons.math3.analysis.function.Acosh#derivative()",
        "org.apache.commons.math3.analysis.function.Acos#derivative()",
        "org.apache.commons.math3.analysis.function.Atan#derivative()",
        "org.apache.commons.math3.analysis.function.Log#derivative()",
        "org.apache.commons.math3.analysis.function.Sqrt#derivative()",
        "org.apache.commons.math3.analysis.solvers.BaseAbstractUnivariateSolver#setup(int,FUNC extends UnivariateFunction,double,double,double)",
        "org.apache.commons.math3.analysis.function.Logistic#derivative()",
        "org.apache.commons.math3.analysis.function.Expm1#derivative()",
        "org.apache.commons.math3.analysis.function.Asinh#derivative()",
        "org.apache.commons.math3.analysis.function.Gaussian#derivative()",
        "org.apache.commons.math3.analysis.function.Sinc#derivative()",
        "org.apache.commons.math3.analysis.function.Sigmoid#derivative()",
        "org.apache.commons.math3.analysis.function.Constant#derivative()",
        "org.apache.commons.math3.analysis.function.Sinh#derivative()",
        "org.apache.commons.math3.analysis.function.Tanh#derivative()",
        "org.apache.commons.math3.analysis.function.Asin#derivative()",
        "org.apache.commons.math3.analysis.function.Minus#derivative()",
        "org.apache.commons.math3.analysis.FunctionUtils.compose(DifferentiableUnivariateFunction[]...)$DifferentiableUnivariateFunction$1#derivative()",
        "org.apache.commons.math3.analysis.FunctionUtils.add(DifferentiableUnivariateFunction[]...)$DifferentiableUnivariateFunction$1#derivative()",
        "org.apache.commons.math3.analysis.FunctionUtils.multiply(DifferentiableUnivariateFunction[]...)$DifferentiableUnivariateFunction$1#derivative()",
        "org.apache.commons.math3.analysis.function.Log1p#derivative()",
        "org.apache.commons.math3.analysis.function.Tan#derivative()",
        "org.apache.commons.math3.analysis.function.Cos#derivative()",
        "org.apache.commons.math3.analysis.function.Atanh#derivative()"
    ],
    "org.apache.commons.math3.geometry.VectorFormat#parseCoordinates(int,String,ParsePosition)": [
        "org.apache.commons.math3.util.CompositeFormat.parseNumber(String,NumberFormat,ParsePosition)",
        "org.apache.commons.math3.util.CompositeFormat.parseAndIgnoreWhitespace(String,ParsePosition)",
        "org.apache.commons.math3.util.CompositeFormat.parseFixedstring(String,String,ParsePosition)"
    ],
    "org.apache.commons.math3.ode.JacobianMatrices.MainStateJacobianWrapper#getDimension()": [
        "org.apache.commons.math3.ode.JacobianMatrices.MainStateJacobianWrapper#getDimension()",
        "org.apache.commons.math3.ode.MultistepIntegrator#start(double,double[],double)$FirstOrderDifferentialEquations$1#getDimension()",
        "org.apache.commons.math3.ode.FirstOrderConverter#getDimension()"
    ],
    "org.apache.commons.math3.special.Gamma.invGamma1pm1(double)": ["org.apache.commons.math3.special.Gamma.<staticinit>()"],
    "org.apache.commons.math3.geometry.spherical.twod.SubCircle#SubCircle(Hyperplane<Sphere2D>,Region<Sphere1D>)": [
        "org.apache.commons.math3.geometry.partitioning.AbstractSubHyperplane#AbstractSubHyperplane(Hyperplane<S extends Space>,Region<T extends Space>)",
        "org.apache.commons.math3.geometry.spherical.twod.SubCircle.<init>()"
    ],
    "org.apache.commons.math3.genetics.ListPopulation#getFittestChromosome()": ["org.apache.commons.math3.genetics.Chromosome#compareTo(Chromosome)"],
    "org.apache.commons.math3.distribution.BetaDistribution#BetaDistribution(RandomGenerator,double,double,double)": [
        "org.apache.commons.math3.distribution.AbstractRealDistribution#AbstractRealDistribution(RandomGenerator)",
        "org.apache.commons.math3.distribution.BetaDistribution.<init>()",
        "org.apache.commons.math3.distribution.BetaDistribution.<staticinit>()"
    ],
    "org.apache.commons.math3.util.ArithmeticUtils.factorialLog(int)": ["org.apache.commons.math3.util.CombinatoricsUtils.factorialLog(int)"],
    "org.apache.commons.math3.dfp.DfpField#setIEEEFlags(int)": ["org.apache.commons.math3.dfp.DfpField.<staticinit>()"],
    "org.apache.commons.math3.util.ArithmeticUtils.pow(long,int)": [
        "org.apache.commons.math3.util.ArithmeticUtils.mulAndCheck(long,long)",
        "org.apache.commons.math3.exception.MathArithmeticException#getContext()",
        "org.apache.commons.math3.exception.util.LocalizedFormats.<staticinit>()"
    ],
    "org.apache.commons.math3.stat.descriptive.SummaryStatistics#SummaryStatistics()": ["org.apache.commons.math3.stat.descriptive.SummaryStatistics.<init>()"],
    "org.apache.commons.math3.distribution.EnumeratedIntegerDistribution#probability(int)": ["org.apache.commons.math3.distribution.EnumeratedDistribution#probability(T)"],
    "org.apache.commons.math3.util.ResizableDoubleArray#ResizableDoubleArray(int,double,double,ExpansionMode,double[]...)": [
        "org.apache.commons.math3.util.ResizableDoubleArray#checkContractExpand(double,double)",
        "org.apache.commons.math3.util.ResizableDoubleArray#addElements(double[])",
        "org.apache.commons.math3.util.ResizableDoubleArray.<init>()",
        "org.apache.commons.math3.exception.util.LocalizedFormats.<staticinit>()"
    ],
    "org.apache.commons.math3.geometry.spherical.oned.ArcsSet#projectToBoundary(Point<Sphere1D>)": [
        "org.apache.commons.math3.geometry.spherical.oned.S1Point#getAlpha()",
        "org.apache.commons.math3.geometry.partitioning.BoundaryProjection#BoundaryProjection(Point<S extends Space>,Point<S extends Space>,double)",
        "org.apache.commons.math3.util.MathUtils.<staticinit>()",
        "org.apache.commons.math3.geometry.spherical.oned.S1Point#S1Point(double)"
    ],
    "org.apache.commons.math3.linear.ArrayRealVector#equals(Object)": [
        "org.apache.commons.math3.linear.OpenMapRealVector#getDimension()",
        "org.apache.commons.math3.linear.ArrayRealVector#isNaN()",
        "org.apache.commons.math3.linear.ArrayRealVector#getDimension()",
        "org.apache.commons.math3.linear.RealVector.unmodifiableRealVector(RealVector)$RealVector$1#isNaN()",
        "org.apache.commons.math3.linear.OpenMapRealVector#isNaN()",
        "org.apache.commons.math3.linear.ArrayRealVector#getEntry(int)",
        "org.apache.commons.math3.linear.RealVector.unmodifiableRealVector(RealVector)$RealVector$1#getDimension()",
        "org.apache.commons.math3.linear.OpenMapRealVector#getEntry(int)",
        "org.apache.commons.math3.linear.RealVector.unmodifiableRealVector(RealVector)$RealVector$1#getEntry(int)"
    ],
    "org.apache.commons.math3.linear.NonSelfAdjointOperatorException#NonSelfAdjointOperatorException()": [
        "org.apache.commons.math3.linear.NonSelfAdjointOperatorException.<init>()",
        "org.apache.commons.math3.exception.util.LocalizedFormats.<staticinit>()"
    ],
    "org.apache.commons.math3.optimization.univariate.SimpleUnivariateValueChecker#SimpleUnivariateValueChecker()": [
        "org.apache.commons.math3.optimization.univariate.SimpleUnivariateValueChecker.<init>()",
        "org.apache.commons.math3.optimization.AbstractConvergenceChecker#AbstractConvergenceChecker()",
        "org.apache.commons.math3.optimization.univariate.SimpleUnivariateValueChecker.<staticinit>()"
    ],
    "org.apache.commons.math3.stat.ranking.NaturalRanking#removeNaNs(IntDoublePair[])": [
        "org.apache.commons.math3.stat.ranking.NaturalRanking.IntDoublePair#IntDoublePair(double,int)",
        "org.apache.commons.math3.stat.ranking.NaturalRanking.IntDoublePair#getValue()",
        "org.apache.commons.math3.stat.ranking.NaturalRanking.IntDoublePair#getPosition()",
        "org.apache.commons.math3.stat.ranking.NaturalRanking#containsNaNs(IntDoublePair[])"
    ],
    "org.apache.commons.math3.analysis.interpolation.BicubicSplineInterpolatingFunction#partialDerivativeXX(double,double)": ["org.apache.commons.math3.analysis.interpolation.BicubicSplineInterpolatingFunction#partialDerivative(int,double,double)"],
    "org.apache.commons.math3.linear.ArrayRealVector#walkInOptimizedOrder(RealVectorChangingVisitor,int,int)": ["org.apache.commons.math3.linear.ArrayRealVector#walkInDefaultOrder(RealVectorChangingVisitor,int,int)"],
    "org.apache.commons.math3.random.MersenneTwister#setSeed(int)": [
        "org.apache.commons.math3.random.BitsStreamGenerator#clear()",
        "org.apache.commons.math3.random.MersenneTwister.<staticinit>()"
    ],
    "org.apache.commons.math3.analysis.polynomials.PolynomialFunctionNewtonForm.evaluate(double[],double[],double)": ["org.apache.commons.math3.analysis.polynomials.PolynomialFunctionNewtonForm.verifyInputArray(double[],double[])"],
    "org.apache.commons.math3.ml.clustering.FuzzyKMeansClusterer#FuzzyKMeansClusterer(int,double)": [
        "org.apache.commons.math3.ml.distance.EuclideanDistance.<init>()",
        "org.apache.commons.math3.ml.clustering.FuzzyKMeansClusterer#FuzzyKMeansClusterer(int,double,int,DistanceMeasure)"
    ],
    "org.apache.commons.math3.optim.linear.SolutionCallback#isSolutionOptimal()": ["org.apache.commons.math3.optim.linear.SimplexTableau#isOptimal()"],
    "org.apache.commons.math3.linear.RealVector.unmodifiableRealVector(RealVector)$RealVector$1#mapMultiplyToSelf(double)": ["org.apache.commons.math3.exception.MathUnsupportedOperationException#MathUnsupportedOperationException()"],
    "org.apache.commons.math3.optim.linear.LinearConstraint#readObject(ObjectInputStream)": ["org.apache.commons.math3.linear.MatrixUtils.deserializeRealVector(Object,String,ObjectInputStream)"],
    "org.apache.commons.math3.stat.descriptive.summary.Product#copy()": [
        "org.apache.commons.math3.stat.descriptive.summary.Product#Product()",
        "org.apache.commons.math3.stat.descriptive.summary.Product.copy(Product,Product)"
    ],
    "org.apache.commons.math3.analysis.solvers.FieldBracketingNthOrderBrentSolver#getEvaluations()": ["org.apache.commons.math3.util.IntegerSequence.Incrementor#getCount()"],
    "org.apache.commons.math3.random.CorrelatedRandomVectorGenerator#nextVector()": [
        "org.apache.commons.math3.linear.DiagonalMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.Array2DRowRealMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.BlockFieldMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.DiagonalMatrix#getEntry(int,int)",
        "org.apache.commons.math3.linear.OpenMapRealMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.OpenMapRealMatrix#getEntry(int,int)",
        "org.apache.commons.math3.linear.BlockRealMatrix#getEntry(int,int)",
        "org.apache.commons.math3.linear.Array2DRowFieldMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.SparseFieldMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.Array2DRowRealMatrix#getEntry(int,int)",
        "org.apache.commons.math3.random.UniformRandomGenerator#nextNormalizedDouble()",
        "org.apache.commons.math3.random.GaussianRandomGenerator#nextNormalizedDouble()",
        "org.apache.commons.math3.linear.BlockRealMatrix#getColumnDimension()",
        "org.apache.commons.math3.random.StableRandomGenerator#nextNormalizedDouble()"
    ],
    "org.apache.commons.math3.util.ArithmeticUtils.subAndCheck(int,int)": ["org.apache.commons.math3.exception.util.LocalizedFormats.<staticinit>()"],
    "org.apache.commons.math3.distribution.SaddlePointExpansion.<staticinit>()": [
        "org.apache.commons.math3.util.FastMath.log(double)",
        "org.apache.commons.math3.util.MathUtils.<staticinit>()"
    ],
    "org.apache.commons.math3.ode.nonstiff.HighamHall54FieldIntegrator#HighamHall54FieldIntegrator(Field<T extends RealFieldElement>,double,double,double[],double[])": [
        "org.apache.commons.math3.util.BigRealField#getZero()",
        "org.apache.commons.math3.analysis.differentiation.SparseGradient#getField()$Field$1#getZero()",
        "org.apache.commons.math3.ode.nonstiff.EmbeddedRungeKuttaFieldIntegrator#EmbeddedRungeKuttaFieldIntegrator(Field<T extends RealFieldElement>,String,int,double,double,double[],double[])",
        "org.apache.commons.math3.util.Decimal64Field#getZero()",
        "org.apache.commons.math3.ode.nonstiff.EmbeddedRungeKuttaFieldIntegrator#fraction(int,int)",
        "org.apache.commons.math3.dfp.DfpField#getZero()",
        "org.apache.commons.math3.ode.nonstiff.HighamHall54FieldIntegrator.<staticinit>()",
        "org.apache.commons.math3.analysis.differentiation.DerivativeStructure#getField()$Field$1#getZero()",
        "org.apache.commons.math3.fraction.FractionField#getZero()",
        "org.apache.commons.math3.ode.nonstiff.HighamHall54FieldIntegrator.<init>()",
        "org.apache.commons.math3.complex.ComplexField#getZero()",
        "org.apache.commons.math3.fraction.BigFractionField#getZero()",
        "org.apache.commons.math3.util.MathArrays.buildArray(Field<T>,int)"
    ],
    "org.apache.commons.math3.exception.MultiDimensionMismatchException#MultiDimensionMismatchException(Integer[],Integer[])": [
        "org.apache.commons.math3.exception.MultiDimensionMismatchException#MultiDimensionMismatchException(Localizable,Integer[],Integer[])",
        "org.apache.commons.math3.exception.util.LocalizedFormats.<staticinit>()"
    ],
    "org.apache.commons.math3.exception.NotStrictlyPositiveException#NotStrictlyPositiveException(Number)": [
        "org.apache.commons.math3.exception.NotStrictlyPositiveException.<init>()",
        "org.apache.commons.math3.exception.MathIllegalNumberException.<staticinit>()"
    ],
    "org.apache.commons.math3.optimization.linear.SimplexTableau#dropPhase1Objective()": [
        "org.apache.commons.math3.linear.Array2DRowRealMatrix#getEntry(int,int)",
        "org.apache.commons.math3.util.Precision.compareTo(double,double,double)",
        "org.apache.commons.math3.optimization.linear.SimplexTableau#getHeight()",
        "org.apache.commons.math3.linear.DiagonalMatrix#getEntry(int,int)",
        "org.apache.commons.math3.optimization.linear.SimplexTableau#getBasicRow(int)",
        "org.apache.commons.math3.linear.Array2DRowRealMatrix#Array2DRowRealMatrix(double[][])",
        "org.apache.commons.math3.optimization.linear.SimplexTableau#getNumArtificialVariables()",
        "org.apache.commons.math3.optimization.linear.SimplexTableau#getNumObjectiveFunctions()",
        "org.apache.commons.math3.linear.OpenMapRealMatrix#getEntry(int,int)",
        "org.apache.commons.math3.optimization.linear.SimplexTableau#getWidth()",
        "org.apache.commons.math3.optimization.linear.SimplexTableau#getArtificialVariableOffset()",
        "org.apache.commons.math3.linear.BlockRealMatrix#getEntry(int,int)"
    ],
    "org.apache.commons.math3.stat.descriptive.SynchronizedMultivariateSummaryStatistics#getN()": ["org.apache.commons.math3.stat.descriptive.MultivariateSummaryStatistics#getN()"],
    "org.apache.commons.math3.stat.regression.OLSMultipleLinearRegression#calculateRSquared()": [
        "org.apache.commons.math3.stat.regression.OLSMultipleLinearRegression#calculateResidualSumOfSquares()",
        "org.apache.commons.math3.stat.regression.OLSMultipleLinearRegression#calculateTotalSumOfSquares()"
    ],
    "org.apache.commons.math3.geometry.spherical.twod.Circle.getTransform(Rotation)": ["org.apache.commons.math3.geometry.spherical.twod.Circle.CircleTransform#CircleTransform(Rotation)"],
    "org.apache.commons.math3.linear.SchurTransformer#getT()": ["org.apache.commons.math3.linear.MatrixUtils.createRealMatrix(double[][])"],
    "org.apache.commons.math3.distribution.GumbelDistribution#getNumericalVariance()": ["org.apache.commons.math3.util.MathUtils.<staticinit>()"],
    "org.apache.commons.math3.util.MathArrays.verifyValues(double[],double[],int,int,boolean)": [
        "org.apache.commons.math3.util.MathArrays.verifyValues(double[],int,int,boolean)",
        "org.apache.commons.math3.exception.util.LocalizedFormats.<staticinit>()",
        "org.apache.commons.math3.util.MathArrays.checkEqualLength(double[],double[])"
    ],
    "org.apache.commons.math3.distribution.NakagamiDistribution#NakagamiDistribution(double,double,double)": [
        "org.apache.commons.math3.distribution.NakagamiDistribution#NakagamiDistribution(RandomGenerator,double,double,double)",
        "org.apache.commons.math3.distribution.NakagamiDistribution.<staticinit>()",
        "org.apache.commons.math3.random.Well19937c#Well19937c()"
    ],
    "org.apache.commons.math3.geometry.spherical.twod.S2Point#hashCode()": [
        "org.apache.commons.math3.util.MathUtils.hash(double)",
        "org.apache.commons.math3.geometry.spherical.twod.S2Point#isNaN()"
    ],
    "org.apache.commons.math3.geometry.partitioning.utilities.OrderedTuple.exponent(long)": ["org.apache.commons.math3.geometry.partitioning.utilities.OrderedTuple.<staticinit>()"],
    "org.apache.commons.math3.stat.descriptive.SynchronizedDescriptiveStatistics#SynchronizedDescriptiveStatistics(int)": [
        "org.apache.commons.math3.stat.descriptive.DescriptiveStatistics.<staticinit>()",
        "org.apache.commons.math3.stat.descriptive.DescriptiveStatistics#DescriptiveStatistics(int)",
        "org.apache.commons.math3.stat.descriptive.SynchronizedDescriptiveStatistics.<init>()"
    ],
    "org.apache.commons.math3.geometry.spherical.oned.ArcsSet.SubArcsIterator#SubArcsIterator()": [
        "org.apache.commons.math3.geometry.spherical.oned.ArcsSet#getFirstArcStart()",
        "org.apache.commons.math3.geometry.spherical.oned.ArcsSet.SubArcsIterator#selectPending()",
        "org.apache.commons.math3.util.MathUtils.<staticinit>()",
        "org.apache.commons.math3.geometry.spherical.oned.ArcsSet#getFirstLeaf(BSPTree<Sphere1D>)",
        "org.apache.commons.math3.geometry.partitioning.AbstractRegion#getTree(boolean)",
        "org.apache.commons.math3.geometry.spherical.oned.ArcsSet.SubArcsIterator.<init>()",
        "org.apache.commons.math3.geometry.partitioning.BSPTree#getAttribute()"
    ],
    "org.apache.commons.math3.linear.AbstractFieldMatrix#transpose()": [
        "org.apache.commons.math3.linear.BlockFieldMatrix#getColumnDimension()",
        "org.apache.commons.math3.util.BigRealField#getZero()",
        "org.apache.commons.math3.analysis.differentiation.SparseGradient#getField()$Field$1#getZero()",
        "org.apache.commons.math3.linear.SparseFieldMatrix#getRowDimension()",
        "org.apache.commons.math3.util.Decimal64Field#getZero()",
        "org.apache.commons.math3.linear.BlockFieldMatrix#createMatrix(int,int)",
        "org.apache.commons.math3.dfp.DfpField#getZero()",
        "org.apache.commons.math3.linear.AbstractFieldMatrix#transpose()$DefaultFieldMatrixPreservingVisitor$1.<init>()",
        "org.apache.commons.math3.linear.AbstractFieldMatrix#walkInOptimizedOrder(FieldMatrixPreservingVisitor<T extends FieldElement>)",
        "org.apache.commons.math3.linear.Array2DRowFieldMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.BlockFieldMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.SparseFieldMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.BlockFieldMatrix#walkInOptimizedOrder(FieldMatrixPreservingVisitor<T extends FieldElement>)",
        "org.apache.commons.math3.analysis.differentiation.DerivativeStructure#getField()$Field$1#getZero()",
        "org.apache.commons.math3.fraction.FractionField#getZero()",
        "org.apache.commons.math3.linear.SparseFieldMatrix#createMatrix(int,int)",
        "org.apache.commons.math3.linear.Array2DRowFieldMatrix#getRowDimension()",
        "org.apache.commons.math3.complex.ComplexField#getZero()",
        "org.apache.commons.math3.fraction.BigFractionField#getZero()",
        "org.apache.commons.math3.linear.Array2DRowFieldMatrix#createMatrix(int,int)"
    ],
    "org.apache.commons.math3.ode.events.EventFilter#EventFilter(EventHandler,FilterType)": [
        "org.apache.commons.math3.ode.events.EventFilter.<staticinit>()",
        "org.apache.commons.math3.ode.events.EventFilter.<init>()"
    ],
    "org.apache.commons.math3.linear.OpenMapRealMatrix#addToEntry(int,int,double)": [
        "org.apache.commons.math3.util.OpenIntToDoubleHashMap#remove(int)",
        "org.apache.commons.math3.util.OpenIntToDoubleHashMap#put(int,double)",
        "org.apache.commons.math3.util.OpenIntToDoubleHashMap#get(int)",
        "org.apache.commons.math3.linear.OpenMapRealMatrix#computeKey(int,int)",
        "org.apache.commons.math3.linear.MatrixUtils.checkRowIndex(AnyMatrix,int)",
        "org.apache.commons.math3.linear.MatrixUtils.checkColumnIndex(AnyMatrix,int)"
    ],
    "org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.insertEdges(double,BSPTree<Euclidean2D>,List<Edge>)": [
        "org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.Edge#getLine()",
        "org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.insertEdges(double,BSPTree<Euclidean2D>,List<Edge>)",
        "org.apache.commons.math3.geometry.partitioning.BSPTree#insertCut(Hyperplane<S extends Space>)",
        "org.apache.commons.math3.geometry.partitioning.Side.<staticinit>()",
        "org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.Edge#getEnd()",
        "org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.Edge#getNode()",
        "org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.Vertex#getLocation()",
        "org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.Vertex#getOutgoing()",
        "org.apache.commons.math3.geometry.partitioning.BSPTree#setAttribute(Object)",
        "org.apache.commons.math3.geometry.partitioning.BSPTree#getParent()",
        "org.apache.commons.math3.geometry.partitioning.BSPTree#getPlus()",
        "org.apache.commons.math3.util.FastMath.abs(double)",
        "org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.Edge#getStart()",
        "org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.Edge#split(Line)",
        "org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.Vertex#getIncoming()",
        "org.apache.commons.math3.geometry.partitioning.BSPTree#getMinus()",
        "org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.Edge#setNode(BSPTree<Euclidean2D>)",
        "org.apache.commons.math3.geometry.euclidean.twod.Line#getOffset(Point<Euclidean2D>)"
    ],
    "org.apache.commons.math3.analysis.differentiation.DerivativeStructure#multiply(DerivativeStructure)": [
        "org.apache.commons.math3.analysis.differentiation.DerivativeStructure#DerivativeStructure(DSCompiler)",
        "org.apache.commons.math3.analysis.differentiation.DSCompiler#multiply(double[],int,double[],int,double[],int)",
        "org.apache.commons.math3.analysis.differentiation.DSCompiler#checkCompatibility(DSCompiler)"
    ],
    "org.apache.commons.math3.distribution.WeibullDistribution#getNumericalVariance()": ["org.apache.commons.math3.distribution.WeibullDistribution#calculateNumericalVariance()"],
    "org.apache.commons.math3.linear.OpenMapRealMatrix#getEntry(int,int)": [
        "org.apache.commons.math3.util.OpenIntToDoubleHashMap#get(int)",
        "org.apache.commons.math3.linear.MatrixUtils.checkRowIndex(AnyMatrix,int)",
        "org.apache.commons.math3.linear.OpenMapRealMatrix#computeKey(int,int)",
        "org.apache.commons.math3.linear.MatrixUtils.checkColumnIndex(AnyMatrix,int)"
    ],
    "org.apache.commons.math3.geometry.euclidean.threed.Plane#Plane(Vector3D,Vector3D,Vector3D)": [
        "org.apache.commons.math3.geometry.euclidean.threed.Plane#Plane(Vector3D,Vector3D,Vector3D,double)",
        "org.apache.commons.math3.geometry.euclidean.threed.Plane.<staticinit>()"
    ],
    "org.apache.commons.math3.linear.RealMatrixFormat.getInstance(Locale)": [
        "org.apache.commons.math3.util.CompositeFormat.getDefaultNumberFormat(Locale)",
        "org.apache.commons.math3.linear.RealMatrixFormat#RealMatrixFormat(NumberFormat)"
    ],
    "org.apache.commons.math3.analysis.function.Power#value(double)": ["org.apache.commons.math3.util.FastMath.pow(double,double)"],
    "org.apache.commons.math3.util.MathArrays.buildArray(Field<T>,int,int)": [
        "org.apache.commons.math3.dfp.DfpField#getRuntimeClass()",
        "org.apache.commons.math3.util.BigRealField#getZero()",
        "org.apache.commons.math3.analysis.differentiation.SparseGradient#getField()$Field$1#getZero()",
        "org.apache.commons.math3.analysis.differentiation.SparseGradient#getField()$Field$1#getRuntimeClass()",
        "org.apache.commons.math3.util.Decimal64Field#getZero()",
        "org.apache.commons.math3.util.BigRealField#getRuntimeClass()",
        "org.apache.commons.math3.dfp.DfpField#getZero()",
        "org.apache.commons.math3.analysis.differentiation.DerivativeStructure#getField()$Field$1#getRuntimeClass()",
        "org.apache.commons.math3.fraction.FractionField#getRuntimeClass()",
        "org.apache.commons.math3.util.Decimal64Field#getRuntimeClass()",
        "org.apache.commons.math3.fraction.BigFractionField#getRuntimeClass()",
        "org.apache.commons.math3.analysis.differentiation.DerivativeStructure#getField()$Field$1#getZero()",
        "org.apache.commons.math3.fraction.FractionField#getZero()",
        "org.apache.commons.math3.complex.ComplexField#getZero()",
        "org.apache.commons.math3.fraction.BigFractionField#getZero()",
        "org.apache.commons.math3.util.MathArrays.buildArray(Field<T>,int)",
        "org.apache.commons.math3.complex.ComplexField#getRuntimeClass()"
    ],
    "org.apache.commons.math3.linear.AbstractRealMatrix#multiply(RealMatrix)": [
        "org.apache.commons.math3.linear.DiagonalMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.Array2DRowRealMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.BlockFieldMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.Array2DRowRealMatrix#setEntry(int,int,double)",
        "org.apache.commons.math3.linear.MatrixUtils.checkMultiplicationCompatible(AnyMatrix,AnyMatrix)",
        "org.apache.commons.math3.linear.DiagonalMatrix#getEntry(int,int)",
        "org.apache.commons.math3.linear.OpenMapRealMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.OpenMapRealMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.DiagonalMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.BlockRealMatrix#setEntry(int,int,double)",
        "org.apache.commons.math3.linear.OpenMapRealMatrix#setEntry(int,int,double)",
        "org.apache.commons.math3.linear.OpenMapRealMatrix#getEntry(int,int)",
        "org.apache.commons.math3.linear.DiagonalMatrix#createMatrix(int,int)",
        "org.apache.commons.math3.linear.BlockRealMatrix#getEntry(int,int)",
        "org.apache.commons.math3.linear.Array2DRowFieldMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.SparseFieldMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.BlockRealMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.Array2DRowRealMatrix#getEntry(int,int)",
        "org.apache.commons.math3.linear.Array2DRowRealMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.OpenMapRealMatrix#createMatrix(int,int)",
        "org.apache.commons.math3.linear.BlockRealMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.Array2DRowRealMatrix#createMatrix(int,int)",
        "org.apache.commons.math3.linear.BlockRealMatrix#createMatrix(int,int)",
        "org.apache.commons.math3.linear.DiagonalMatrix#setEntry(int,int,double)"
    ],
    "org.apache.commons.math3.geometry.spherical.twod.SphericalPolygonsSet#getBoundaryLoops()": [
        "org.apache.commons.math3.userguide.sofm.ChineseRingsClassifier#createRandomIterator(long)$Iterator$1#remove()",
        "org.apache.commons.math3.util.MultidimensionalCounter.Iterator#remove()",
        "org.apache.commons.math3.geometry.spherical.twod.EdgesBuilder#getEdges()",
        "org.apache.commons.math3.linear.RealVector#iterator()$Iterator$1#hasNext()",
        "org.apache.commons.math3.linear.RealVector.unmodifiableRealVector(RealVector)$Iterator$1$Iterator$1#sparseIterator()$Iterator$1#hasNext()",
        "org.apache.commons.math3.geometry.spherical.oned.ArcsSet.SubArcsIterator#hasNext()",
        "org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet.SubIntervalsIterator#remove()",
        "org.apache.commons.math3.util.Combinations.LexicographicIterator#hasNext()",
        "org.apache.commons.math3.util.IntegerSequence.Incrementor#remove()",
        "org.apache.commons.math3.userguide.sofm.ChineseRingsClassifier#createIterable()$Iterator$1$Iterator$1#iterator()$Iterator$1#remove()",
        "org.apache.commons.math3.linear.RealVector.SparseEntryIterator#hasNext()",
        "org.apache.commons.math3.geometry.spherical.twod.EdgesBuilder#EdgesBuilder(BSPTree<Sphere2D>,double)",
        "org.apache.commons.math3.util.Combinations.SingletonIterator#remove()",
        "org.apache.commons.math3.userguide.sofm.ChineseRingsClassifier#createIterable()$Iterator$1$Iterator$1#iterator()$Iterator$1#hasNext()",
        "org.apache.commons.math3.geometry.spherical.twod.Edge#getStart()",
        "org.apache.commons.math3.linear.RealVector.SparseEntryIterator#remove()",
        "org.apache.commons.math3.geometry.spherical.twod.Edge#getEnd()",
        "org.apache.commons.math3.util.MultidimensionalCounter.Iterator#hasNext()",
        "org.apache.commons.math3.util.Combinations.LexicographicIterator#remove()",
        "org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet.SubIntervalsIterator#hasNext()",
        "org.apache.commons.math3.geometry.partitioning.BSPTree#visit(BSPTreeVisitor<S extends Space>)",
        "org.apache.commons.math3.userguide.sofm.ChineseRingsClassifier#createRandomIterator(long)$Iterator$1#hasNext()",
        "org.apache.commons.math3.util.IntegerSequence.Incrementor#hasNext()",
        "org.apache.commons.math3.geometry.partitioning.AbstractRegion#getTolerance()",
        "org.apache.commons.math3.geometry.spherical.oned.ArcsSet.SubArcsIterator#remove()",
        "org.apache.commons.math3.linear.RealVector#iterator()$Iterator$1#remove()",
        "org.apache.commons.math3.geometry.partitioning.BSPTree#getCut()",
        "org.apache.commons.math3.geometry.partitioning.AbstractRegion#getTree(boolean)",
        "org.apache.commons.math3.geometry.spherical.twod.Vertex#getOutgoing()",
        "org.apache.commons.math3.linear.RealVector.unmodifiableRealVector(RealVector)$Iterator$1$Iterator$1#iterator()$Iterator$1#hasNext()",
        "org.apache.commons.math3.util.Combinations.SingletonIterator#hasNext()",
        "org.apache.commons.math3.linear.RealVector.unmodifiableRealVector(RealVector)$Iterator$1$Iterator$1#iterator()$Iterator$1#remove()",
        "org.apache.commons.math3.linear.RealVector.unmodifiableRealVector(RealVector)$Iterator$1$Iterator$1#sparseIterator()$Iterator$1#remove()"
    ],
    "org.apache.commons.math3.util.ArithmeticUtils.gcd(int,int)": [
        "org.apache.commons.math3.util.ArithmeticUtils.gcdPositive(int,int)",
        "org.apache.commons.math3.util.FastMath.abs(int)",
        "org.apache.commons.math3.exception.util.LocalizedFormats.<staticinit>()"
    ],
    "org.apache.commons.math3.dfp.DfpField#newDfp(Dfp)": ["org.apache.commons.math3.dfp.Dfp#Dfp(Dfp)"],
    "org.apache.commons.math3.geometry.spherical.twod.S2Point.<staticinit>()": [
        "org.apache.commons.math3.geometry.spherical.twod.S2Point#S2Point(double,double,Vector3D)",
        "org.apache.commons.math3.geometry.euclidean.threed.Vector3D.<staticinit>()",
        "org.apache.commons.math3.util.FastMath.<staticinit>()"
    ],
    "org.apache.commons.math3.distribution.WeibullDistribution#calculateNumericalMean()": [
        "org.apache.commons.math3.distribution.WeibullDistribution#getScale()",
        "org.apache.commons.math3.distribution.WeibullDistribution#getShape()",
        "org.apache.commons.math3.special.Gamma.logGamma(double)",
        "org.apache.commons.math3.util.FastMath.exp(double)"
    ],
    "org.apache.commons.math3.ode.AbstractFieldIntegrator#acceptStep(AbstractFieldStepInterpolator<T extends RealFieldElement>,T extends RealFieldElement)": [
        "org.apache.commons.math3.ode.sampling.AbstractFieldStepInterpolator#getInterpolatedState(T extends RealFieldElement)",
        "org.apache.commons.math3.userguide.sofm.ChineseRingsClassifier#createRandomIterator(long)$Iterator$1#remove()",
        "org.apache.commons.math3.ode.AbstractFieldIntegrator#acceptStep(AbstractFieldStepInterpolator<T extends RealFieldElement>,T extends RealFieldElement)$Comparator$1.<init>()",
        "org.apache.commons.math3.util.MultidimensionalCounter.Iterator#remove()",
        "org.apache.commons.math3.ode.sampling.AbstractFieldStepInterpolator#restrictStep(FieldODEStateAndDerivative<T extends RealFieldElement>,FieldODEStateAndDerivative<T extends RealFieldElement>)",
        "org.apache.commons.math3.ode.FieldEquationsMapper#mapState(FieldODEState<T extends RealFieldElement>)",
        "org.apache.commons.math3.ode.events.FieldEventState#reinitializeBegin(FieldStepInterpolator<T extends RealFieldElement>)",
        "org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet.SubIntervalsIterator#remove()",
        "org.apache.commons.math3.ode.FieldODEState#getTime()",
        "org.apache.commons.math3.util.FastMath.ulp(double)",
        "org.apache.commons.math3.util.IntegerSequence.Incrementor#remove()",
        "org.apache.commons.math3.ode.events.FieldEventState#evaluateStep(FieldStepInterpolator<T extends RealFieldElement>)",
        "org.apache.commons.math3.userguide.sofm.ChineseRingsClassifier#createIterable()$Iterator$1$Iterator$1#iterator()$Iterator$1#remove()",
        "org.apache.commons.math3.ode.sampling.AbstractFieldStepInterpolator#getGlobalCurrentState()",
        "org.apache.commons.math3.util.Combinations.SingletonIterator#remove()",
        "org.apache.commons.math3.ode.AbstractFieldIntegrator#computeDerivatives(T extends RealFieldElement,T extends RealFieldElement[])",
        "org.apache.commons.math3.linear.RealVector.SparseEntryIterator#remove()",
        "org.apache.commons.math3.ode.sampling.AbstractFieldStepInterpolator#getGlobalPreviousState()",
        "org.apache.commons.math3.util.Combinations.LexicographicIterator#remove()",
        "org.apache.commons.math3.ode.ContinuousOutputFieldModel#handleStep(FieldStepInterpolator<T extends RealFieldElement>,boolean)",
        "org.apache.commons.math3.ode.sampling.AbstractFieldStepInterpolator#isForward()",
        "org.apache.commons.math3.geometry.spherical.oned.ArcsSet.SubArcsIterator#remove()",
        "org.apache.commons.math3.ode.FieldExpandableODE#getMapper()",
        "org.apache.commons.math3.ode.FieldEquationsMapper#mapStateAndDerivative(T extends RealFieldElement,T extends RealFieldElement[],T extends RealFieldElement[])",
        "org.apache.commons.math3.ode.events.FieldEventState#getEventTime()",
        "org.apache.commons.math3.ode.events.FieldEventState#stepAccepted(FieldODEStateAndDerivative<T extends RealFieldElement>)",
        "org.apache.commons.math3.ode.sampling.FieldStepNormalizer#handleStep(FieldStepInterpolator<T extends RealFieldElement>,boolean)",
        "org.apache.commons.math3.ode.MultistepFieldIntegrator.FieldNordsieckInitializer#handleStep(FieldStepInterpolator<T extends RealFieldElement>,boolean)",
        "org.apache.commons.math3.ode.events.FieldEventState#reset(FieldODEStateAndDerivative<T extends RealFieldElement>)",
        "org.apache.commons.math3.ode.events.FieldEventState#stop()",
        "org.apache.commons.math3.linear.RealVector#iterator()$Iterator$1#remove()",
        "org.apache.commons.math3.linear.RealVector.unmodifiableRealVector(RealVector)$Iterator$1$Iterator$1#iterator()$Iterator$1#remove()",
        "org.apache.commons.math3.linear.RealVector.unmodifiableRealVector(RealVector)$Iterator$1$Iterator$1#sparseIterator()$Iterator$1#remove()"
    ],
    "org.apache.commons.math3.fitting.HarmonicCurveFitter.ParameterGuesser#guessAOmega(WeightedObservedPoint[])": [
        "org.apache.commons.math3.fitting.WeightedObservedPoint#getX()",
        "org.apache.commons.math3.util.FastMath.sqrt(double)",
        "org.apache.commons.math3.fitting.WeightedObservedPoint#getY()",
        "org.apache.commons.math3.exception.ZeroException#ZeroException()",
        "org.apache.commons.math3.exception.util.LocalizedFormats.<staticinit>()"
    ],
    "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.BOBYQAOptimizer#bobyqa(double[],double[])": [
        "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.BOBYQAOptimizer#bobyqb(double[],double[])",
        "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.BOBYQAOptimizer.printMethod()",
        "org.apache.commons.math3.util.FastMath.max(double,double)",
        "org.apache.commons.math3.linear.ArrayRealVector#getDimension()",
        "org.apache.commons.math3.util.FastMath.min(double,double)",
        "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.BOBYQAOptimizer.<staticinit>()",
        "org.apache.commons.math3.linear.ArrayRealVector#getEntry(int)",
        "org.apache.commons.math3.linear.ArrayRealVector#setEntry(int,double)"
    ],
    "org.apache.commons.math3.optimization.linear.LinearConstraint#LinearConstraint(double[],Relationship,double)": [
        "org.apache.commons.math3.linear.ArrayRealVector#ArrayRealVector(double[])",
        "org.apache.commons.math3.optimization.linear.LinearConstraint#LinearConstraint(RealVector,Relationship,double)"
    ],
    "org.apache.commons.math3.stat.inference.TestUtils.gDataSetsComparison(long[],long[])": [
        "org.apache.commons.math3.stat.inference.GTest#gDataSetsComparison(long[],long[])",
        "org.apache.commons.math3.stat.inference.TestUtils.<staticinit>()"
    ],
    "org.apache.commons.math3.random.Well44497b#Well44497b(int[])": [
        "org.apache.commons.math3.random.AbstractWell#AbstractWell(int,int,int,int,int[])",
        "org.apache.commons.math3.random.Well44497b.<init>()",
        "org.apache.commons.math3.random.Well44497b.<staticinit>()"
    ],
    "org.apache.commons.math3.distribution.LogNormalDistribution#sample()": [
        "org.apache.commons.math3.random.RandomAdaptor#nextGaussian()",
        "org.apache.commons.math3.random.SynchronizedRandomGenerator#nextGaussian()",
        "org.apache.commons.math3.random.RandomGeneratorFactory.createRandomGenerator(Random)$RandomGenerator$1#nextGaussian()",
        "org.apache.commons.math3.util.FastMath.exp(double)",
        "org.apache.commons.math3.random.BitsStreamGenerator#nextGaussian()",
        "org.apache.commons.math3.random.AbstractRandomGenerator#nextGaussian()"
    ],
    "org.apache.commons.math3.analysis.interpolation.LoessInterpolator#LoessInterpolator(double,int,double)": [
        "org.apache.commons.math3.analysis.interpolation.LoessInterpolator.<staticinit>()",
        "org.apache.commons.math3.analysis.interpolation.LoessInterpolator.<init>()",
        "org.apache.commons.math3.exception.util.LocalizedFormats.<staticinit>()"
    ],
    "org.apache.commons.math3.linear.BlockFieldMatrix#transpose()": [
        "org.apache.commons.math3.linear.BlockFieldMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.BlockFieldMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.AbstractFieldMatrix#getField()",
        "org.apache.commons.math3.linear.BlockFieldMatrix.<staticinit>()",
        "org.apache.commons.math3.util.FastMath.min(int,int)",
        "org.apache.commons.math3.linear.BlockFieldMatrix#BlockFieldMatrix(Field<T extends FieldElement>,int,int)"
    ],
    "org.apache.commons.math3.linear.PreconditionedIterativeLinearSolver#solve(RealLinearOperator,RealVector)": [
        "org.apache.commons.math3.linear.DiagonalMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.Array2DRowRealMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.OpenMapRealVector#set(double)",
        "org.apache.commons.math3.util.MathUtils.checkNotNull(Object)",
        "org.apache.commons.math3.linear.OpenMapRealMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.JacobiPreconditioner#getColumnDimension()",
        "org.apache.commons.math3.linear.RealVector.unmodifiableRealVector(RealVector)$RealVector$1#set(double)",
        "org.apache.commons.math3.linear.ArrayRealVector#ArrayRealVector(int)",
        "org.apache.commons.math3.linear.SymmLQ#solveInPlace(RealLinearOperator,RealLinearOperator,RealVector,RealVector)",
        "org.apache.commons.math3.linear.JacobiPreconditioner#sqrt()$RealLinearOperator$1#getColumnDimension()",
        "org.apache.commons.math3.linear.ArrayRealVector#set(double)",
        "org.apache.commons.math3.linear.RealVector#set(double)",
        "org.apache.commons.math3.linear.ConjugateGradient#solveInPlace(RealLinearOperator,RealLinearOperator,RealVector,RealVector)",
        "org.apache.commons.math3.linear.BlockRealMatrix#getColumnDimension()"
    ],
    "org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile.Markers#Markers(List<Double>,double)": [
        "org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile.Markers.createMarkerArray(List<Double>,double)",
        "org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile.Markers#Markers(Marker[])"
    ],
    "org.apache.commons.math3.optimization.direct.PowellOptimizer#PowellOptimizer(double,double,double,double,ConvergenceChecker<PointValuePair>)": [
        "org.apache.commons.math3.optimization.direct.PowellOptimizer.LineSearch#LineSearch(double,double)",
        "org.apache.commons.math3.optimization.direct.PowellOptimizer.<init>()",
        "org.apache.commons.math3.optimization.direct.PowellOptimizer.<staticinit>()",
        "org.apache.commons.math3.optimization.direct.BaseAbstractMultivariateOptimizer#BaseAbstractMultivariateOptimizer(ConvergenceChecker<PointValuePair>)"
    ],
    "org.apache.commons.math3.geometry.spherical.twod.Circle#toSpace(Point<Sphere1D>)": [
        "org.apache.commons.math3.geometry.spherical.oned.S1Point#getAlpha()",
        "org.apache.commons.math3.geometry.spherical.twod.S2Point#S2Point(Vector3D)",
        "org.apache.commons.math3.geometry.spherical.twod.Circle#getPointAt(double)"
    ],
    "org.apache.commons.math3.fitting.leastsquares.LeastSquaresAdapter#getEvaluationCounter()": [
        "org.apache.commons.math3.optim.AbstractOptimizationProblem#getEvaluationCounter()",
        "org.apache.commons.math3.fitting.leastsquares.LeastSquaresAdapter#getEvaluationCounter()"
    ],
    "org.apache.commons.math3.stat.descriptive.DescriptiveStatistics#getN()": ["org.apache.commons.math3.util.ResizableDoubleArray#getNumElements()"],
    "org.apache.commons.math3.distribution.PoissonDistribution#probability(int)": [
        "org.apache.commons.math3.util.FastMath.exp(double)",
        "org.apache.commons.math3.distribution.PoissonDistribution#logProbability(int)"
    ],
    "org.apache.commons.math3.linear.RealVector#subtract(RealVector)": [
        "org.apache.commons.math3.linear.RealVector.Entry#getValue()",
        "org.apache.commons.math3.linear.RealVector#iterator()",
        "org.apache.commons.math3.linear.RealVector#mapMultiply(double)",
        "org.apache.commons.math3.linear.RealVector.unmodifiableRealVector(RealVector)$RealVector$1#mapMultiply(double)",
        "org.apache.commons.math3.linear.RealVector#iterator()$Iterator$1#hasNext()",
        "org.apache.commons.math3.linear.RealVector.unmodifiableRealVector(RealVector)$RealVector$1#iterator()",
        "org.apache.commons.math3.linear.RealVector.unmodifiableRealVector(RealVector)$Iterator$1$Iterator$1#sparseIterator()$Iterator$1#hasNext()",
        "org.apache.commons.math3.linear.OpenMapRealVector#setEntry(int,double)",
        "org.apache.commons.math3.geometry.spherical.oned.ArcsSet.SubArcsIterator#hasNext()",
        "org.apache.commons.math3.util.Combinations.LexicographicIterator#hasNext()",
        "org.apache.commons.math3.linear.OpenMapRealVector.OpenMapEntry#getValue()",
        "org.apache.commons.math3.linear.ArrayRealVector#setEntry(int,double)",
        "org.apache.commons.math3.linear.RealVector.unmodifiableRealVector(RealVector).UnmodifiableEntry.UnmodifiableEntry#getValue()",
        "org.apache.commons.math3.linear.RealVector.SparseEntryIterator#hasNext()",
        "org.apache.commons.math3.userguide.sofm.ChineseRingsClassifier#createIterable()$Iterator$1$Iterator$1#iterator()$Iterator$1#hasNext()",
        "org.apache.commons.math3.linear.RealVector.unmodifiableRealVector(RealVector)$Iterator$1$Iterator$1#sparseIterator()$Iterator$1#next()",
        "org.apache.commons.math3.util.MultidimensionalCounter.Iterator#hasNext()",
        "org.apache.commons.math3.linear.RealVector.unmodifiableRealVector(RealVector)$Iterator$1$Iterator$1#iterator()$Iterator$1#next()",
        "org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet.SubIntervalsIterator#hasNext()",
        "org.apache.commons.math3.linear.ArrayRealVector#checkVectorDimensions(RealVector)",
        "org.apache.commons.math3.linear.OpenMapRealVector.OpenMapEntry#getIndex()",
        "org.apache.commons.math3.userguide.sofm.ChineseRingsClassifier#createRandomIterator(long)$Iterator$1#hasNext()",
        "org.apache.commons.math3.util.IntegerSequence.Incrementor#hasNext()",
        "org.apache.commons.math3.linear.RealVector.Entry#getIndex()",
        "org.apache.commons.math3.linear.RealVector#iterator()$Iterator$1#next()",
        "org.apache.commons.math3.linear.ArrayRealVector#getEntry(int)",
        "org.apache.commons.math3.linear.RealVector#checkVectorDimensions(RealVector)",
        "org.apache.commons.math3.linear.RealVector.unmodifiableRealVector(RealVector)$RealVector$1#setEntry(int,double)",
        "org.apache.commons.math3.linear.RealVector.unmodifiableRealVector(RealVector)$Iterator$1$Iterator$1#iterator()$Iterator$1#hasNext()",
        "org.apache.commons.math3.util.Combinations.SingletonIterator#hasNext()",
        "org.apache.commons.math3.linear.RealVector.SparseEntryIterator#next()",
        "org.apache.commons.math3.linear.OpenMapRealVector#getEntry(int)",
        "org.apache.commons.math3.linear.RealVector.unmodifiableRealVector(RealVector)$RealVector$1#getEntry(int)"
    ],
    "org.apache.commons.math3.geometry.euclidean.oned.Vector1D.<staticinit>()": ["org.apache.commons.math3.geometry.euclidean.oned.Vector1D#Vector1D(double)"],
    "org.apache.commons.math3.analysis.integration.IterativeLegendreGaussIntegrator#stage(int)$UnivariateFunction$1#value(double)": ["org.apache.commons.math3.analysis.integration.BaseAbstractUnivariateIntegrator#computeObjectiveValue(double)"],
    "org.apache.commons.math3.analysis.function.Floor#value(double)": ["org.apache.commons.math3.util.FastMath.floor(double)"],
    "org.apache.commons.math3.linear.AbstractFieldMatrix#getRowVector(int)": [
        "org.apache.commons.math3.linear.ArrayFieldVector#ArrayFieldVector(Field<T extends FieldElement>,T extends FieldElement[],boolean)",
        "org.apache.commons.math3.linear.AbstractFieldMatrix#getRow(int)",
        "org.apache.commons.math3.linear.BlockFieldMatrix#getRow(int)"
    ],
    "org.apache.commons.math3.linear.BlockRealMatrix#walkInRowOrder(RealMatrixPreservingVisitor)": [
        "org.apache.commons.math3.linear.DefaultRealMatrixPreservingVisitor#start(int,int,int,int,int,int)",
        "org.apache.commons.math3.linear.AbstractRealMatrix#copySubMatrix(int,int,int,int,double[][])$DefaultRealMatrixPreservingVisitor$1#start(int,int,int,int,int,int)",
        "org.apache.commons.math3.linear.DefaultRealMatrixPreservingVisitor#visit(int,int,double)",
        "org.apache.commons.math3.linear.SingularValueDecomposition#getCovariance(double)$DefaultRealMatrixPreservingVisitor$1#visit(int,int,double)",
        "org.apache.commons.math3.linear.AbstractRealMatrix#getNorm()$RealMatrixPreservingVisitor$1#end()",
        "org.apache.commons.math3.linear.BlockRealMatrix#blockWidth(int)",
        "org.apache.commons.math3.linear.AbstractRealMatrix#getFrobeniusNorm()$RealMatrixPreservingVisitor$1#end()",
        "org.apache.commons.math3.linear.AbstractRealMatrix#getFrobeniusNorm()$RealMatrixPreservingVisitor$1#visit(int,int,double)",
        "org.apache.commons.math3.linear.AbstractRealMatrix#getFrobeniusNorm()$RealMatrixPreservingVisitor$1#start(int,int,int,int,int,int)",
        "org.apache.commons.math3.linear.DefaultRealMatrixPreservingVisitor#end()",
        "org.apache.commons.math3.util.FastMath.min(int,int)",
        "org.apache.commons.math3.linear.BlockRealMatrix.<staticinit>()",
        "org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator.Corrector#start(int,int,int,int,int,int)",
        "org.apache.commons.math3.linear.AbstractRealMatrix#getNorm()$RealMatrixPreservingVisitor$1#visit(int,int,double)",
        "org.apache.commons.math3.linear.AbstractRealMatrix#copySubMatrix(int,int,int,int,double[][])$DefaultRealMatrixPreservingVisitor$1#visit(int,int,double)",
        "org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator.Corrector#visit(int,int,double)",
        "org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator.Corrector#end()",
        "org.apache.commons.math3.linear.AbstractRealMatrix#getNorm()$RealMatrixPreservingVisitor$1#start(int,int,int,int,int,int)",
        "org.apache.commons.math3.linear.AbstractRealMatrix#transpose()$DefaultRealMatrixPreservingVisitor$1#visit(int,int,double)"
    ],
    "org.apache.commons.math3.ml.neuralnet.Neuron#containSameValues(double[],double[])": [
        "org.apache.commons.math3.exception.DimensionMismatchException#DimensionMismatchException(int,int)",
        "org.apache.commons.math3.util.Precision.equals(double,double)"
    ],
    "org.apache.commons.math3.util.FastMathLiteralArrays#FastMathLiteralArrays()": ["org.apache.commons.math3.util.FastMathLiteralArrays.<init>()"],
    "org.apache.commons.math3.distribution.AbstractRealDistribution#inverseCumulativeProbability(double)$UnivariateFunction$1#value(double)": [
        "org.apache.commons.math3.distribution.BetaDistribution#cumulativeProbability(double)",
        "org.apache.commons.math3.distribution.ConstantRealDistribution#cumulativeProbability(double)",
        "org.apache.commons.math3.distribution.NormalDistribution#cumulativeProbability(double)",
        "org.apache.commons.math3.distribution.ChiSquaredDistribution#cumulativeProbability(double)",
        "org.apache.commons.math3.distribution.UniformRealDistribution#cumulativeProbability(double)",
        "org.apache.commons.math3.distribution.ParetoDistribution#cumulativeProbability(double)",
        "org.apache.commons.math3.distribution.GumbelDistribution#cumulativeProbability(double)",
        "org.apache.commons.math3.distribution.LevyDistribution#cumulativeProbability(double)",
        "org.apache.commons.math3.distribution.LaplaceDistribution#cumulativeProbability(double)",
        "org.apache.commons.math3.distribution.EnumeratedRealDistribution#cumulativeProbability(double)",
        "org.apache.commons.math3.distribution.TriangularDistribution#cumulativeProbability(double)",
        "org.apache.commons.math3.random.EmpiricalDistribution#cumulativeProbability(double)",
        "org.apache.commons.math3.distribution.WeibullDistribution#cumulativeProbability(double)",
        "org.apache.commons.math3.distribution.TDistribution#cumulativeProbability(double)",
        "org.apache.commons.math3.distribution.LogisticDistribution#cumulativeProbability(double)",
        "org.apache.commons.math3.distribution.GammaDistribution#cumulativeProbability(double)",
        "org.apache.commons.math3.distribution.LogNormalDistribution#cumulativeProbability(double)",
        "org.apache.commons.math3.distribution.ExponentialDistribution#cumulativeProbability(double)",
        "org.apache.commons.math3.distribution.FDistribution#cumulativeProbability(double)",
        "org.apache.commons.math3.distribution.CauchyDistribution#cumulativeProbability(double)",
        "org.apache.commons.math3.distribution.NakagamiDistribution#cumulativeProbability(double)"
    ],
    "org.apache.commons.math3.analysis.function.Tan#value(double)": ["org.apache.commons.math3.util.FastMath.tan(double)"],
    "org.apache.commons.math3.analysis.integration.gauss.LegendreRuleFactory#computeRule(int)": [
        "org.apache.commons.math3.util.Pair#getFirst()",
        "org.apache.commons.math3.util.Pair#Pair(K,V)",
        "org.apache.commons.math3.analysis.integration.gauss.BaseRuleFactory#getRuleInternal(int)"
    ],
    "org.apache.commons.math3.analysis.interpolation.TricubicInterpolator#interpolate(double[],double[],double[],double[][][])$TricubicInterpolatingFunction$1.<init>()": ["org.apache.commons.math3.analysis.interpolation.TricubicInterpolatingFunction#TricubicInterpolatingFunction(double[],double[],double[],double[][][],double[][][],double[][][],double[][][],double[][][],double[][][],double[][][],double[][][])"],
    "org.apache.commons.math3.linear.AbstractFieldMatrix#add(FieldMatrix<T extends FieldElement>)": [
        "org.apache.commons.math3.linear.SparseFieldMatrix#getEntry(int,int)",
        "org.apache.commons.math3.linear.BlockFieldMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.SparseFieldMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.SparseFieldMatrix#setEntry(int,int,T extends FieldElement)",
        "org.apache.commons.math3.linear.BlockFieldMatrix#createMatrix(int,int)",
        "org.apache.commons.math3.linear.Array2DRowFieldMatrix#setEntry(int,int,T extends FieldElement)",
        "org.apache.commons.math3.linear.BlockFieldMatrix#setEntry(int,int,T extends FieldElement)",
        "org.apache.commons.math3.linear.Array2DRowFieldMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.SparseFieldMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.BlockFieldMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.SparseFieldMatrix#createMatrix(int,int)",
        "org.apache.commons.math3.linear.AbstractFieldMatrix#checkAdditionCompatible(FieldMatrix<T extends FieldElement>)",
        "org.apache.commons.math3.linear.Array2DRowFieldMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.Array2DRowFieldMatrix#getEntry(int,int)",
        "org.apache.commons.math3.linear.Array2DRowFieldMatrix#createMatrix(int,int)",
        "org.apache.commons.math3.linear.BlockFieldMatrix#getEntry(int,int)"
    ],
    "org.apache.commons.math3.fitting.leastsquares.OptimumImpl#getCost()": [
        "org.apache.commons.math3.fitting.leastsquares.AbstractEvaluation#getCost()",
        "org.apache.commons.math3.fitting.leastsquares.OptimumImpl#getCost()"
    ],
    "org.apache.commons.math3.linear.RealVector#getNorm()": [
        "org.apache.commons.math3.linear.RealVector.Entry#getValue()",
        "org.apache.commons.math3.linear.RealVector.unmodifiableRealVector(RealVector)$Iterator$1$Iterator$1#iterator()$Iterator$1#next()",
        "org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet.SubIntervalsIterator#hasNext()",
        "org.apache.commons.math3.linear.RealVector#iterator()",
        "org.apache.commons.math3.linear.RealVector#iterator()$Iterator$1#hasNext()",
        "org.apache.commons.math3.linear.RealVector.unmodifiableRealVector(RealVector)$RealVector$1#iterator()",
        "org.apache.commons.math3.userguide.sofm.ChineseRingsClassifier#createRandomIterator(long)$Iterator$1#hasNext()",
        "org.apache.commons.math3.util.IntegerSequence.Incrementor#hasNext()",
        "org.apache.commons.math3.linear.RealVector.unmodifiableRealVector(RealVector)$Iterator$1$Iterator$1#sparseIterator()$Iterator$1#hasNext()",
        "org.apache.commons.math3.geometry.spherical.oned.ArcsSet.SubArcsIterator#hasNext()",
        "org.apache.commons.math3.linear.RealVector#iterator()$Iterator$1#next()",
        "org.apache.commons.math3.util.Combinations.LexicographicIterator#hasNext()",
        "org.apache.commons.math3.linear.OpenMapRealVector.OpenMapEntry#getValue()",
        "org.apache.commons.math3.linear.RealVector.unmodifiableRealVector(RealVector).UnmodifiableEntry.UnmodifiableEntry#getValue()",
        "org.apache.commons.math3.linear.RealVector.SparseEntryIterator#hasNext()",
        "org.apache.commons.math3.userguide.sofm.ChineseRingsClassifier#createIterable()$Iterator$1$Iterator$1#iterator()$Iterator$1#hasNext()",
        "org.apache.commons.math3.util.FastMath.sqrt(double)",
        "org.apache.commons.math3.linear.RealVector.unmodifiableRealVector(RealVector)$Iterator$1$Iterator$1#iterator()$Iterator$1#hasNext()",
        "org.apache.commons.math3.util.Combinations.SingletonIterator#hasNext()",
        "org.apache.commons.math3.linear.RealVector.SparseEntryIterator#next()",
        "org.apache.commons.math3.linear.RealVector.unmodifiableRealVector(RealVector)$Iterator$1$Iterator$1#sparseIterator()$Iterator$1#next()",
        "org.apache.commons.math3.util.MultidimensionalCounter.Iterator#hasNext()"
    ],
    "org.apache.commons.math3.optim.PointValuePair.DataTransferObject#DataTransferObject(double[],double)": ["org.apache.commons.math3.optim.PointValuePair.DataTransferObject.<init>()"],
    "org.apache.commons.math3.linear.AbstractRealMatrix#transpose()$DefaultRealMatrixPreservingVisitor$1.<init>()": ["org.apache.commons.math3.linear.DefaultRealMatrixPreservingVisitor.<init>()"],
    "org.apache.commons.math3.linear.RealMatrixFormat#RealMatrixFormat()": [
        "org.apache.commons.math3.linear.RealMatrixFormat#RealMatrixFormat(String,String,String,String,String,String,NumberFormat)",
        "org.apache.commons.math3.linear.RealMatrixFormat.<staticinit>()",
        "org.apache.commons.math3.util.CompositeFormat.getDefaultNumberFormat()"
    ],
    "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.PowellOptimizer#PowellOptimizer(double,double,double,double,ConvergenceChecker<PointValuePair>)": [
        "org.apache.commons.math3.optim.nonlinear.scalar.LineSearch#LineSearch(MultivariateOptimizer,double,double,double)",
        "org.apache.commons.math3.optim.nonlinear.scalar.MultivariateOptimizer#MultivariateOptimizer(ConvergenceChecker<PointValuePair>)",
        "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.PowellOptimizer.<init>()",
        "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.PowellOptimizer.<staticinit>()"
    ],
    "org.apache.commons.math3.stat.descriptive.rank.Min#Min(Min)": [
        "org.apache.commons.math3.stat.descriptive.rank.Min.copy(Min,Min)",
        "org.apache.commons.math3.stat.descriptive.rank.Min.<init>()",
        "org.apache.commons.math3.stat.descriptive.AbstractStorelessUnivariateStatistic.<init>()"
    ],
    "org.apache.commons.math3.analysis.solvers.NewtonSolver#NewtonSolver()": [
        "org.apache.commons.math3.analysis.solvers.NewtonSolver#NewtonSolver(double)",
        "org.apache.commons.math3.analysis.solvers.NewtonSolver.<staticinit>()"
    ],
    "org.apache.commons.math3.fraction.AbstractFormat.parseAndIgnoreWhitespace(String,ParsePosition)": ["org.apache.commons.math3.fraction.AbstractFormat.parseNextCharacter(String,ParsePosition)"],
    "org.apache.commons.math3.analysis.integration.SimpsonIntegrator#SimpsonIntegrator(double,double,int,int)": [
        "org.apache.commons.math3.analysis.integration.SimpsonIntegrator.<init>()",
        "org.apache.commons.math3.analysis.integration.BaseAbstractUnivariateIntegrator#BaseAbstractUnivariateIntegrator(double,double,int,int)",
        "org.apache.commons.math3.analysis.integration.SimpsonIntegrator.<staticinit>()"
    ],
    "org.apache.commons.math3.userguide.genetics.HelloWorldExample.randomRepresentation(int)": ["org.apache.commons.math3.userguide.genetics.HelloWorldExample.asList(String)"],
    "org.apache.commons.math3.stat.regression.AbstractMultipleLinearRegression#estimateRegressionStandardError()": [
        "org.apache.commons.math3.util.FastMath.sqrt(double)",
        "org.apache.commons.math3.stat.regression.AbstractMultipleLinearRegression#estimateErrorVariance()"
    ],
    "org.apache.commons.math3.util.BigRealField.LazyHolder.<staticinit>()": ["org.apache.commons.math3.util.BigRealField#BigRealField()"],
    "org.apache.commons.math3.linear.AbstractFieldMatrix#operate(FieldVector<T extends FieldElement>)": [
        "org.apache.commons.math3.linear.BlockFieldMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.BlockFieldMatrix#operate(T extends FieldElement[])",
        "org.apache.commons.math3.util.BigRealField#getZero()",
        "org.apache.commons.math3.linear.ArrayFieldVector#getEntry(int)",
        "org.apache.commons.math3.dfp.DfpField#getZero()",
        "org.apache.commons.math3.exception.DimensionMismatchException#DimensionMismatchException(int,int)",
        "org.apache.commons.math3.linear.BlockFieldMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.ArrayFieldVector#getDataRef()",
        "org.apache.commons.math3.fraction.FractionField#getZero()",
        "org.apache.commons.math3.linear.SparseFieldVector#getDimension()",
        "org.apache.commons.math3.linear.Array2DRowFieldMatrix#operate(T extends FieldElement[])",
        "org.apache.commons.math3.complex.ComplexField#getZero()",
        "org.apache.commons.math3.linear.BlockFieldMatrix#getEntry(int,int)",
        "org.apache.commons.math3.util.MathArrays.buildArray(Field<T>,int)",
        "org.apache.commons.math3.linear.SparseFieldMatrix#getEntry(int,int)",
        "org.apache.commons.math3.linear.SparseFieldVector#getEntry(int)",
        "org.apache.commons.math3.linear.ArrayFieldVector#getDimension()",
        "org.apache.commons.math3.linear.SparseFieldMatrix#getRowDimension()",
        "org.apache.commons.math3.analysis.differentiation.SparseGradient#getField()$Field$1#getZero()",
        "org.apache.commons.math3.util.Decimal64Field#getZero()",
        "org.apache.commons.math3.linear.AbstractFieldMatrix#operate(T extends FieldElement[])",
        "org.apache.commons.math3.linear.Array2DRowFieldMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.SparseFieldMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.ArrayFieldVector#ArrayFieldVector(Field<T extends FieldElement>,T extends FieldElement[],boolean)",
        "org.apache.commons.math3.analysis.differentiation.DerivativeStructure#getField()$Field$1#getZero()",
        "org.apache.commons.math3.linear.Array2DRowFieldMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.Array2DRowFieldMatrix#getEntry(int,int)",
        "org.apache.commons.math3.fraction.BigFractionField#getZero()"
    ],
    "org.apache.commons.math3.stat.regression.SimpleRegression#getSlopeConfidenceInterval(double)": [
        "org.apache.commons.math3.distribution.EnumeratedRealDistribution#inverseCumulativeProbability(double)",
        "org.apache.commons.math3.distribution.AbstractRealDistribution#inverseCumulativeProbability(double)",
        "org.apache.commons.math3.stat.regression.SimpleRegression#getSlopeStdErr()",
        "org.apache.commons.math3.distribution.ExponentialDistribution#inverseCumulativeProbability(double)",
        "org.apache.commons.math3.exception.util.LocalizedFormats.<staticinit>()",
        "org.apache.commons.math3.distribution.CauchyDistribution#inverseCumulativeProbability(double)",
        "org.apache.commons.math3.distribution.LaplaceDistribution#inverseCumulativeProbability(double)",
        "org.apache.commons.math3.distribution.UniformRealDistribution#inverseCumulativeProbability(double)",
        "org.apache.commons.math3.random.EmpiricalDistribution#inverseCumulativeProbability(double)",
        "org.apache.commons.math3.distribution.GumbelDistribution#inverseCumulativeProbability(double)",
        "org.apache.commons.math3.distribution.LogisticDistribution#inverseCumulativeProbability(double)",
        "org.apache.commons.math3.distribution.TDistribution#TDistribution(double)",
        "org.apache.commons.math3.distribution.ConstantRealDistribution#inverseCumulativeProbability(double)",
        "org.apache.commons.math3.distribution.LevyDistribution#inverseCumulativeProbability(double)",
        "org.apache.commons.math3.distribution.TriangularDistribution#inverseCumulativeProbability(double)",
        "org.apache.commons.math3.distribution.WeibullDistribution#inverseCumulativeProbability(double)",
        "org.apache.commons.math3.distribution.NormalDistribution#inverseCumulativeProbability(double)"
    ],
    "org.apache.commons.math3.dfp.Dfp#getZero()": ["org.apache.commons.math3.dfp.DfpField#getZero()"],
    "org.apache.commons.math3.ode.nonstiff.DormandPrince853Integrator#DormandPrince853Integrator(double,double,double,double)": [
        "org.apache.commons.math3.ode.nonstiff.DormandPrince853Integrator.<staticinit>()",
        "org.apache.commons.math3.ode.nonstiff.DormandPrince853Integrator.<init>()",
        "org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator#DormandPrince853StepInterpolator()",
        "org.apache.commons.math3.ode.nonstiff.EmbeddedRungeKuttaIntegrator#EmbeddedRungeKuttaIntegrator(String,boolean,double[],double[][],double[],RungeKuttaStepInterpolator,double,double,double,double)"
    ],
    "org.apache.commons.math3.geometry.euclidean.threed.FieldRotation#applyTo(FieldVector3D<T extends RealFieldElement>)": [
        "org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D#getZ()",
        "org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D#getY()",
        "org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D#getX()",
        "org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D#FieldVector3D(T extends RealFieldElement,T extends RealFieldElement,T extends RealFieldElement)"
    ],
    "org.apache.commons.math3.linear.Array2DRowFieldMatrix#multiply(Array2DRowFieldMatrix<T extends FieldElement>)": [
        "org.apache.commons.math3.linear.AbstractFieldMatrix#checkMultiplicationCompatible(FieldMatrix<T extends FieldElement>)",
        "org.apache.commons.math3.util.BigRealField#getZero()",
        "org.apache.commons.math3.analysis.differentiation.SparseGradient#getField()$Field$1#getZero()",
        "org.apache.commons.math3.util.Decimal64Field#getZero()",
        "org.apache.commons.math3.dfp.DfpField#getZero()",
        "org.apache.commons.math3.linear.Array2DRowFieldMatrix#Array2DRowFieldMatrix(Field<T extends FieldElement>,T extends FieldElement[][],boolean)",
        "org.apache.commons.math3.linear.Array2DRowFieldMatrix#getColumnDimension()",
        "org.apache.commons.math3.util.MathArrays.buildArray(Field<T>,int,int)",
        "org.apache.commons.math3.linear.AbstractFieldMatrix#getField()",
        "org.apache.commons.math3.analysis.differentiation.DerivativeStructure#getField()$Field$1#getZero()",
        "org.apache.commons.math3.fraction.FractionField#getZero()",
        "org.apache.commons.math3.linear.Array2DRowFieldMatrix#getRowDimension()",
        "org.apache.commons.math3.complex.ComplexField#getZero()",
        "org.apache.commons.math3.fraction.BigFractionField#getZero()"
    ],
    "org.apache.commons.math3.stat.descriptive.MultivariateSummaryStatistics#getMin()": ["org.apache.commons.math3.stat.descriptive.MultivariateSummaryStatistics#getResults(StorelessUnivariateStatistic[])"],
    "org.apache.commons.math3.geometry.euclidean.threed.Vector3DFormat#Vector3DFormat(String,String,String,NumberFormat)": [
        "org.apache.commons.math3.geometry.euclidean.threed.Vector3DFormat.<init>()",
        "org.apache.commons.math3.geometry.VectorFormat#VectorFormat(String,String,String,NumberFormat)"
    ],
    "org.apache.commons.math3.stat.descriptive.SummaryStatistics#setMinImpl(StorelessUnivariateStatistic)": ["org.apache.commons.math3.stat.descriptive.SummaryStatistics#checkEmpty()"],
    "org.apache.commons.math3.random.RandomGeneratorFactory.createRandomGenerator(Random)$RandomGenerator$1#nextBoolean()": ["org.apache.commons.math3.random.RandomAdaptor#nextBoolean()"],
    "org.apache.commons.math3.analysis.polynomials.PolynomialFunction#negate()": ["org.apache.commons.math3.analysis.polynomials.PolynomialFunction#PolynomialFunction(double[])"],
    "org.apache.commons.math3.optimization.linear.LinearConstraint#LinearConstraint(RealVector,double,Relationship,RealVector,double)": [
        "org.apache.commons.math3.linear.OpenMapRealVector#subtract(RealVector)",
        "org.apache.commons.math3.linear.RealVector#subtract(RealVector)",
        "org.apache.commons.math3.linear.ArrayRealVector#subtract(RealVector)",
        "org.apache.commons.math3.optimization.linear.LinearConstraint.<init>()",
        "org.apache.commons.math3.linear.RealVector.unmodifiableRealVector(RealVector)$RealVector$1#subtract(RealVector)"
    ],
    "org.apache.commons.math3.random.RandomGeneratorFactory.createRandomGenerator(Random)$RandomGenerator$1#nextDouble()": ["org.apache.commons.math3.random.RandomAdaptor#nextDouble()"],
    "org.apache.commons.math3.fitting.WeightedObservedPoints#add(double,double)": ["org.apache.commons.math3.fitting.WeightedObservedPoints#add(double,double,double)"],
    "org.apache.commons.math3.stat.descriptive.SummaryStatistics#getMin()": [
        "org.apache.commons.math3.stat.descriptive.moment.FirstMoment#getResult()",
        "org.apache.commons.math3.stat.descriptive.rank.Min#getResult()",
        "org.apache.commons.math3.stat.descriptive.moment.GeometricMean#getResult()",
        "org.apache.commons.math3.stat.descriptive.moment.Variance#getResult()",
        "org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile#getResult()",
        "org.apache.commons.math3.stat.descriptive.summary.Sum#getResult()",
        "org.apache.commons.math3.stat.descriptive.moment.FourthMoment#getResult()",
        "org.apache.commons.math3.stat.descriptive.moment.StandardDeviation#getResult()",
        "org.apache.commons.math3.stat.descriptive.summary.SumOfLogs#getResult()",
        "org.apache.commons.math3.stat.descriptive.summary.Product#getResult()",
        "org.apache.commons.math3.stat.descriptive.summary.SumOfSquares#getResult()",
        "org.apache.commons.math3.stat.descriptive.moment.Skewness#getResult()",
        "org.apache.commons.math3.stat.descriptive.moment.Kurtosis#getResult()",
        "org.apache.commons.math3.stat.descriptive.rank.Max#getResult()",
        "org.apache.commons.math3.stat.descriptive.moment.SecondMoment#getResult()",
        "org.apache.commons.math3.stat.descriptive.moment.ThirdMoment#getResult()",
        "org.apache.commons.math3.stat.descriptive.moment.Mean#getResult()"
    ],
    "org.apache.commons.math3.stat.descriptive.AggregateSummaryStatistics.AggregatingSummaryStatistics#addValue(double)": [
        "org.apache.commons.math3.stat.descriptive.SummaryStatistics#addValue(double)",
        "org.apache.commons.math3.stat.descriptive.AggregateSummaryStatistics.AggregatingSummaryStatistics#addValue(double)",
        "org.apache.commons.math3.stat.descriptive.SynchronizedSummaryStatistics#addValue(double)"
    ],
    "org.apache.commons.math3.analysis.FunctionUtils.toMultivariateDifferentiableVectorFunction(DifferentiableMultivariateVectorFunction)": ["org.apache.commons.math3.analysis.FunctionUtils.toMultivariateDifferentiableVectorFunction(DifferentiableMultivariateVectorFunction)$MultivariateDifferentiableVectorFunction$1.<init>()"],
    "org.apache.commons.math3.linear.AbstractRealMatrix#preMultiply(RealVector)": [
        "org.apache.commons.math3.linear.DiagonalMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.Array2DRowRealMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.DiagonalMatrix#getEntry(int,int)",
        "org.apache.commons.math3.linear.OpenMapRealMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.ArrayRealVector#getDataRef()",
        "org.apache.commons.math3.linear.DiagonalMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.AbstractRealMatrix#preMultiply(double[])",
        "org.apache.commons.math3.linear.BlockRealMatrix#getEntry(int,int)",
        "org.apache.commons.math3.linear.OpenMapRealVector#getDimension()",
        "org.apache.commons.math3.exception.DimensionMismatchException#DimensionMismatchException(int,int)",
        "org.apache.commons.math3.linear.BlockRealMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.ArrayRealVector#ArrayRealVector(double[],boolean)",
        "org.apache.commons.math3.linear.RealVector.unmodifiableRealVector(RealVector)$RealVector$1#getDimension()",
        "org.apache.commons.math3.linear.ArrayRealVector#getDimension()",
        "org.apache.commons.math3.linear.OpenMapRealMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.OpenMapRealMatrix#getEntry(int,int)",
        "org.apache.commons.math3.linear.DiagonalMatrix#preMultiply(double[])",
        "org.apache.commons.math3.linear.ArrayRealVector#getEntry(int)",
        "org.apache.commons.math3.linear.Array2DRowRealMatrix#getEntry(int,int)",
        "org.apache.commons.math3.linear.Array2DRowRealMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.BlockRealMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.Array2DRowRealMatrix#preMultiply(double[])",
        "org.apache.commons.math3.linear.OpenMapRealVector#getEntry(int)",
        "org.apache.commons.math3.linear.BlockRealMatrix#preMultiply(double[])",
        "org.apache.commons.math3.linear.RealVector.unmodifiableRealVector(RealVector)$RealVector$1#getEntry(int)"
    ],
    "org.apache.commons.math3.ml.neuralnet.MapUtils.findBestAndSecondBest(double[],Iterable<Neuron>,DistanceMeasure)": [
        "org.apache.commons.math3.ml.distance.EuclideanDistance#compute(double[],double[])",
        "org.apache.commons.math3.ml.distance.CanberraDistance#compute(double[],double[])",
        "org.apache.commons.math3.util.Pair#Pair(K,V)",
        "org.apache.commons.math3.ml.distance.ChebyshevDistance#compute(double[],double[])",
        "org.apache.commons.math3.ml.distance.ManhattanDistance#compute(double[],double[])",
        "org.apache.commons.math3.ml.distance.EarthMoversDistance#compute(double[],double[])",
        "org.apache.commons.math3.ml.neuralnet.Neuron#getFeatures()"
    ],
    "org.apache.commons.math3.stat.descriptive.AggregateSummaryStatistics#getSummary()": [
        "org.apache.commons.math3.stat.descriptive.AggregateSummaryStatistics#getMean()",
        "org.apache.commons.math3.stat.descriptive.AggregateSummaryStatistics#getN()",
        "org.apache.commons.math3.stat.descriptive.StatisticalSummaryValues#StatisticalSummaryValues(double,double,long,double,double,double)",
        "org.apache.commons.math3.stat.descriptive.AggregateSummaryStatistics#getMax()",
        "org.apache.commons.math3.stat.descriptive.AggregateSummaryStatistics#getVariance()",
        "org.apache.commons.math3.stat.descriptive.AggregateSummaryStatistics#getMin()",
        "org.apache.commons.math3.stat.descriptive.AggregateSummaryStatistics#getSum()"
    ],
    "org.apache.commons.math3.exception.ConvergenceException#ConvergenceException()": ["org.apache.commons.math3.exception.util.LocalizedFormats.<staticinit>()"],
    "org.apache.commons.math3.ml.neuralnet.twod.util.TopographicErrorHistogram#TopographicErrorHistogram(boolean,DistanceMeasure)": ["org.apache.commons.math3.ml.neuralnet.twod.util.TopographicErrorHistogram.<init>()"],
    "org.apache.commons.math3.random.RandomDataImpl#nextSecureLong(long,long)": ["org.apache.commons.math3.random.RandomDataGenerator#nextSecureLong(long,long)"],
    "org.apache.commons.math3.analysis.differentiation.DerivativeStructure#pow(int)": [
        "org.apache.commons.math3.analysis.differentiation.DerivativeStructure#DerivativeStructure(DSCompiler)",
        "org.apache.commons.math3.analysis.differentiation.DSCompiler#pow(double[],int,int,double[],int)"
    ],
    "org.apache.commons.math3.random.RandomDataGenerator#RandomDataGenerator()": ["org.apache.commons.math3.random.RandomDataGenerator.<init>()"],
    "org.apache.commons.math3.analysis.solvers.MullerSolver2#MullerSolver2()": [
        "org.apache.commons.math3.analysis.solvers.MullerSolver2#MullerSolver2(double)",
        "org.apache.commons.math3.analysis.solvers.MullerSolver2.<staticinit>()"
    ],
    "org.apache.commons.math3.optimization.fitting.GaussianFitter#GaussianFitter(DifferentiableMultivariateVectorOptimizer)": [
        "org.apache.commons.math3.optimization.fitting.CurveFitter#CurveFitter(DifferentiableMultivariateVectorOptimizer)",
        "org.apache.commons.math3.optimization.fitting.GaussianFitter.<init>()"
    ],
    "org.apache.commons.math3.stat.regression.OLSMultipleLinearRegression#calculateResidualSumOfSquares()": [
        "org.apache.commons.math3.stat.regression.AbstractMultipleLinearRegression#calculateResiduals()",
        "org.apache.commons.math3.linear.RealVector#dotProduct(RealVector)",
        "org.apache.commons.math3.linear.RealVector.unmodifiableRealVector(RealVector)$RealVector$1#dotProduct(RealVector)",
        "org.apache.commons.math3.linear.ArrayRealVector#dotProduct(RealVector)"
    ],
    "org.apache.commons.math3.ode.nonstiff.EmbeddedRungeKuttaFieldIntegrator#fraction(int,int)": [
        "org.apache.commons.math3.ode.AbstractFieldIntegrator#getField()",
        "org.apache.commons.math3.analysis.differentiation.SparseGradient#multiply(double)",
        "org.apache.commons.math3.fraction.BigFractionField#getOne()",
        "org.apache.commons.math3.fraction.FractionField#getOne()",
        "org.apache.commons.math3.dfp.Dfp#multiply(double)",
        "org.apache.commons.math3.analysis.differentiation.SparseGradient#getField()$Field$1#getOne()",
        "org.apache.commons.math3.complex.ComplexField#getOne()",
        "org.apache.commons.math3.util.BigRealField#getOne()",
        "org.apache.commons.math3.util.Decimal64#multiply(double)",
        "org.apache.commons.math3.analysis.differentiation.DerivativeStructure#multiply(double)",
        "org.apache.commons.math3.dfp.DfpField#getOne()",
        "org.apache.commons.math3.analysis.differentiation.DerivativeStructure#getField()$Field$1#getOne()",
        "org.apache.commons.math3.util.Decimal64Field#getOne()"
    ],
    "org.apache.commons.math3.ode.sampling.FieldStepNormalizer#FieldStepNormalizer(double,FieldFixedStepHandler<T extends RealFieldElement>,StepNormalizerMode)": [
        "org.apache.commons.math3.ode.sampling.StepNormalizerBounds.<staticinit>()",
        "org.apache.commons.math3.ode.sampling.FieldStepNormalizer#FieldStepNormalizer(double,FieldFixedStepHandler<T extends RealFieldElement>,StepNormalizerMode,StepNormalizerBounds)"
    ],
    "org.apache.commons.math3.fitting.CurveFitter.TheoreticalValuesFunction#getModelFunctionJacobian()$MultivariateMatrixFunction$1#value(double[])": [
        "org.apache.commons.math3.analysis.polynomials.PolynomialFunction.Parametric#gradient(double,double[]...)",
        "org.apache.commons.math3.fitting.GaussianCurveFitter$Parametric$1#gradient(double,double[]...)",
        "org.apache.commons.math3.optimization.fitting.GaussianFitter#fit(double[])$Parametric$1#gradient(double,double[]...)",
        "org.apache.commons.math3.fitting.WeightedObservedPoint#getX()",
        "org.apache.commons.math3.analysis.function.Gaussian.Parametric#gradient(double,double[]...)",
        "org.apache.commons.math3.analysis.function.HarmonicOscillator.Parametric#gradient(double,double[]...)",
        "org.apache.commons.math3.fitting.GaussianFitter#fit(double[])$Parametric$1#gradient(double,double[]...)",
        "org.apache.commons.math3.analysis.function.Logit.Parametric#gradient(double,double[]...)",
        "org.apache.commons.math3.analysis.function.Logistic.Parametric#gradient(double,double[]...)",
        "org.apache.commons.math3.analysis.function.Sigmoid.Parametric#gradient(double,double[]...)"
    ],
    "org.apache.commons.math3.stat.descriptive.moment.ThirdMoment#clear()": ["org.apache.commons.math3.stat.descriptive.moment.SecondMoment#clear()"],
    "org.apache.commons.math3.exception.NullArgumentException#NullArgumentException()": ["org.apache.commons.math3.exception.util.LocalizedFormats.<staticinit>()"],
    "org.apache.commons.math3.random.SynchronizedRandomGenerator#nextBoolean()": [
        "org.apache.commons.math3.random.SynchronizedRandomGenerator#nextBoolean()",
        "org.apache.commons.math3.random.RandomAdaptor#nextBoolean()",
        "org.apache.commons.math3.random.RandomGeneratorFactory.createRandomGenerator(Random)$RandomGenerator$1#nextBoolean()",
        "org.apache.commons.math3.random.BitsStreamGenerator#nextBoolean()",
        "org.apache.commons.math3.random.AbstractRandomGenerator#nextBoolean()"
    ],
    "org.apache.commons.math3.optim.SimpleVectorValueChecker#converged(int,PointVectorValuePair,PointVectorValuePair)": [
        "org.apache.commons.math3.optim.PointVectorValuePair#getValueRef()",
        "org.apache.commons.math3.optim.SimpleVectorValueChecker.<staticinit>()",
        "org.apache.commons.math3.util.FastMath.max(double,double)",
        "org.apache.commons.math3.util.FastMath.abs(double)",
        "org.apache.commons.math3.optim.AbstractConvergenceChecker#getRelativeThreshold()",
        "org.apache.commons.math3.optim.AbstractConvergenceChecker#getAbsoluteThreshold()"
    ],
    "org.apache.commons.math3.dfp.DfpField#split(String)": ["org.apache.commons.math3.dfp.Dfp#Dfp(DfpField,String)"],
    "org.apache.commons.math3.distribution.HypergeometricDistribution#cumulativeProbability(int)": [
        "org.apache.commons.math3.distribution.HypergeometricDistribution#innerCumulativeProbability(int,int,int)",
        "org.apache.commons.math3.distribution.HypergeometricDistribution#getDomain(int,int,int)"
    ],
    "org.apache.commons.math3.random.RandomDataGenerator#reSeed()": [
        "org.apache.commons.math3.random.RandomGeneratorFactory.createRandomGenerator(Random)$RandomGenerator$1#setSeed(long)",
        "org.apache.commons.math3.random.RandomDataGenerator#getRandomGenerator()",
        "org.apache.commons.math3.random.SynchronizedRandomGenerator#setSeed(long)",
        "org.apache.commons.math3.random.MersenneTwister#setSeed(long)",
        "org.apache.commons.math3.random.AbstractWell#setSeed(long)",
        "org.apache.commons.math3.random.RandomAdaptor#setSeed(long)",
        "org.apache.commons.math3.random.ISAACRandom#setSeed(long)"
    ],
    "org.apache.commons.math3.util.MathUtils.copySign(long,long)": ["org.apache.commons.math3.exception.util.LocalizedFormats.<staticinit>()"],
    "org.apache.commons.math3.linear.RectangularCholeskyDecomposition#RectangularCholeskyDecomposition(RealMatrix,double)": [
        "org.apache.commons.math3.linear.MatrixUtils.createRealMatrix(int,int)",
        "org.apache.commons.math3.linear.Array2DRowRealMatrix#setEntry(int,int,double)",
        "org.apache.commons.math3.linear.SparseFieldMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.BlockRealMatrix#setEntry(int,int,double)",
        "org.apache.commons.math3.linear.OpenMapRealMatrix#setEntry(int,int,double)",
        "org.apache.commons.math3.linear.RectangularCholeskyDecomposition.<init>()",
        "org.apache.commons.math3.linear.OpenMapRealMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.DiagonalMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.DiagonalMatrix#getData()",
        "org.apache.commons.math3.linear.AbstractRealMatrix#getData()",
        "org.apache.commons.math3.linear.NonPositiveDefiniteMatrixException#NonPositiveDefiniteMatrixException(double,int,double)",
        "org.apache.commons.math3.linear.BlockFieldMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.BlockRealMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.Array2DRowRealMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.Array2DRowRealMatrix#getData()",
        "org.apache.commons.math3.util.FastMath.sqrt(double)",
        "org.apache.commons.math3.linear.Array2DRowFieldMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.DiagonalMatrix#setEntry(int,int,double)",
        "org.apache.commons.math3.linear.BlockRealMatrix#getData()"
    ],
    "org.apache.commons.math3.geometry.partitioning.BSPTree#BSPTree(SubHyperplane<S extends Space>,BSPTree<S extends Space>,BSPTree<S extends Space>,Object)": ["org.apache.commons.math3.geometry.partitioning.BSPTree.<init>()"],
    "org.apache.commons.math3.util.Decimal64#linearCombination(Decimal64[],Decimal64[])": [
        "org.apache.commons.math3.exception.DimensionMismatchException#DimensionMismatchException(int,int)",
        "org.apache.commons.math3.util.Decimal64#Decimal64(double)",
        "org.apache.commons.math3.util.MathArrays.linearCombination(double[],double[])"
    ],
    "org.apache.commons.math3.linear.BiDiagonalTransformer#BiDiagonalTransformer(RealMatrix)": [
        "org.apache.commons.math3.linear.DiagonalMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.Array2DRowRealMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.BlockFieldMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.SparseFieldMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.OpenMapRealMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.OpenMapRealMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.DiagonalMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.BiDiagonalTransformer#transformToUpperBiDiagonal()",
        "org.apache.commons.math3.linear.BiDiagonalTransformer.<init>()",
        "org.apache.commons.math3.linear.DiagonalMatrix#getData()",
        "org.apache.commons.math3.linear.AbstractRealMatrix#getData()",
        "org.apache.commons.math3.util.FastMath.min(int,int)",
        "org.apache.commons.math3.linear.Array2DRowFieldMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.BlockFieldMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.SparseFieldMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.BlockRealMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.Array2DRowRealMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.Array2DRowRealMatrix#getData()",
        "org.apache.commons.math3.linear.Array2DRowFieldMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.BlockRealMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.BiDiagonalTransformer#transformToLowerBiDiagonal()",
        "org.apache.commons.math3.linear.BlockRealMatrix#getData()"
    ],
    "org.apache.commons.math3.stat.StatUtils.populationVariance(double[])": [
        "org.apache.commons.math3.stat.descriptive.moment.Variance#Variance(boolean)",
        "org.apache.commons.math3.stat.descriptive.moment.Variance#evaluate(double[])"
    ],
    "org.apache.commons.math3.filter.KalmanFilter#correct(double[])": [
        "org.apache.commons.math3.linear.ArrayRealVector#ArrayRealVector(double[],boolean)",
        "org.apache.commons.math3.filter.KalmanFilter#correct(RealVector)"
    ],
    "org.apache.commons.math3.stat.descriptive.rank.Percentile#getWorkArray(double[],int,int)": [
        "org.apache.commons.math3.stat.descriptive.rank.Percentile.removeAndSlice(double[],int,int,double)",
        "org.apache.commons.math3.stat.descriptive.rank.Percentile.replaceAndSlice(double[],int,int,double,double)",
        "org.apache.commons.math3.stat.ranking.NaNStrategy.<staticinit>()",
        "org.apache.commons.math3.stat.descriptive.AbstractUnivariateStatistic#getDataRef()",
        "org.apache.commons.math3.stat.descriptive.rank.Percentile.copyOf(double[],int,int)",
        "org.apache.commons.math3.util.MathArrays.checkNotNaN(double[])"
    ],
    "org.apache.commons.math3.geometry.enclosing.EnclosingBall#EnclosingBall(P extends Point,double,P extends Point[]...)": ["org.apache.commons.math3.geometry.enclosing.EnclosingBall.<init>()"],
    "org.apache.commons.math3.optimization.direct.BOBYQAOptimizer#altmov(int,double)": [
        "org.apache.commons.math3.linear.Array2DRowRealMatrix#getEntry(int,int)",
        "org.apache.commons.math3.util.FastMath.max(double,double)",
        "org.apache.commons.math3.util.FastMath.abs(double)",
        "org.apache.commons.math3.linear.ArrayRealVector#getDimension()",
        "org.apache.commons.math3.optimization.direct.BOBYQAOptimizer.<staticinit>()",
        "org.apache.commons.math3.util.FastMath.sqrt(double)",
        "org.apache.commons.math3.linear.ArrayRealVector#ArrayRealVector(int)",
        "org.apache.commons.math3.util.FastMath.min(double,double)",
        "org.apache.commons.math3.optimization.direct.BOBYQAOptimizer.printMethod()",
        "org.apache.commons.math3.linear.ArrayRealVector#getEntry(int)",
        "org.apache.commons.math3.linear.ArrayRealVector#setEntry(int,double)"
    ],
    "org.apache.commons.math3.linear.RealVector.unmodifiableRealVector(RealVector)$RealVector$1#unitize()": ["org.apache.commons.math3.exception.MathUnsupportedOperationException#MathUnsupportedOperationException()"],
    "org.apache.commons.math3.distribution.EnumeratedIntegerDistribution#getSupportUpperBound()": [
        "org.apache.commons.math3.util.Pair#getValue()",
        "org.apache.commons.math3.distribution.EnumeratedDistribution#getPmf()",
        "org.apache.commons.math3.util.Pair#getKey()",
        "org.apache.commons.math3.optim.PointVectorValuePair#getValue()",
        "org.apache.commons.math3.optimization.PointVectorValuePair#getValue()"
    ],
    "org.apache.commons.math3.stat.descriptive.AggregateSummaryStatistics#getMax()": [
        "org.apache.commons.math3.stat.descriptive.SummaryStatistics#getMax()",
        "org.apache.commons.math3.stat.descriptive.SynchronizedSummaryStatistics#getMax()"
    ],
    "org.apache.commons.math3.stat.descriptive.moment.Kurtosis#getN()": ["org.apache.commons.math3.stat.descriptive.moment.FirstMoment#getN()"],
    "org.apache.commons.math3.linear.OpenMapRealVector#getDistance(RealVector)": [
        "org.apache.commons.math3.linear.OpenMapRealVector#getDimension()",
        "org.apache.commons.math3.linear.RealVector#getDistance(RealVector)",
        "org.apache.commons.math3.linear.OpenMapRealVector#getDistance(OpenMapRealVector)",
        "org.apache.commons.math3.linear.ArrayRealVector#getDimension()",
        "org.apache.commons.math3.linear.RealVector#checkVectorDimensions(int)",
        "org.apache.commons.math3.linear.ArrayRealVector#checkVectorDimensions(int)",
        "org.apache.commons.math3.linear.RealVector.unmodifiableRealVector(RealVector)$RealVector$1#getDimension()"
    ],
    "org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D#FieldVector3D(double,FieldVector3D<T extends RealFieldElement>,double,FieldVector3D<T extends RealFieldElement>)": [
        "org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D#getZ()",
        "org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D#getY()",
        "org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D#getX()",
        "org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D.<init>()"
    ],
    "org.apache.commons.math3.geometry.euclidean.threed.FieldRotation#getAngles(RotationOrder)": [
        "org.apache.commons.math3.geometry.euclidean.threed.RotationConvention.<staticinit>()",
        "org.apache.commons.math3.geometry.euclidean.threed.FieldRotation#getAngles(RotationOrder,RotationConvention)"
    ],
    "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.PowellOptimizer.<staticinit>()": ["org.apache.commons.math3.util.FastMath.ulp(double)"],
    "org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile#PSquarePercentile(double)": [
        "org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile.<init>()",
        "org.apache.commons.math3.stat.descriptive.AbstractStorelessUnivariateStatistic.<init>()",
        "org.apache.commons.math3.exception.util.LocalizedFormats.<staticinit>()"
    ],
    "org.apache.commons.math3.userguide.sofm.ChineseRingsClassifier#createRandomIterator(long)$Iterator$1.<init>()": [
        "org.apache.commons.math3.random.Well19937c#Well19937c()",
        "org.apache.commons.math3.userguide.sofm.ChineseRings#getPoints()"
    ],
    "org.apache.commons.math3.dfp.DfpMath.pow(Dfp,Dfp)": [
        "org.apache.commons.math3.dfp.Dfp#classify()",
        "org.apache.commons.math3.dfp.Dfp.copysign(Dfp,Dfp)",
        "org.apache.commons.math3.dfp.DfpDec#newInstance(int)",
        "org.apache.commons.math3.dfp.Dfp#remainder(Dfp)",
        "org.apache.commons.math3.dfp.Dfp.<staticinit>()",
        "org.apache.commons.math3.dfp.DfpMath.exp(Dfp)",
        "org.apache.commons.math3.dfp.Dfp#dotrap(int,String,Dfp,Dfp)",
        "org.apache.commons.math3.dfp.Dfp#newInstance(Dfp)",
        "org.apache.commons.math3.dfp.DfpMath.splitPow(Dfp[],int)",
        "org.apache.commons.math3.dfp.DfpField#getRadixDigits()",
        "org.apache.commons.math3.dfp.Dfp#getField()",
        "org.apache.commons.math3.dfp.DfpMath.<staticinit>()",
        "org.apache.commons.math3.dfp.DfpDec#newInstance(byte,byte)",
        "org.apache.commons.math3.dfp.DfpDec#newInstance(Dfp)",
        "org.apache.commons.math3.dfp.Dfp#lessThan(Dfp)",
        "org.apache.commons.math3.dfp.DfpMath.split(Dfp)",
        "org.apache.commons.math3.dfp.Dfp#newInstance(int)",
        "org.apache.commons.math3.dfp.Dfp#getTwo()",
        "org.apache.commons.math3.dfp.DfpField#getLn2()",
        "org.apache.commons.math3.dfp.DfpMath.pow(Dfp,int)",
        "org.apache.commons.math3.dfp.DfpMath.log(Dfp)",
        "org.apache.commons.math3.dfp.Dfp#newInstance(byte,byte)",
        "org.apache.commons.math3.dfp.DfpField#setIEEEFlagsBits(int)",
        "org.apache.commons.math3.dfp.Dfp#greaterThan(Dfp)",
        "org.apache.commons.math3.dfp.Dfp#equals(Object)",
        "org.apache.commons.math3.dfp.Dfp#getZero()",
        "org.apache.commons.math3.dfp.Dfp#intValue()",
        "org.apache.commons.math3.dfp.Dfp#rint()",
        "org.apache.commons.math3.dfp.Dfp#unequal(Dfp)",
        "org.apache.commons.math3.dfp.Dfp#isNaN()",
        "org.apache.commons.math3.dfp.Dfp#subtract(Dfp)",
        "org.apache.commons.math3.dfp.Dfp#getOne()",
        "org.apache.commons.math3.dfp.Dfp#multiply(Dfp)",
        "org.apache.commons.math3.dfp.Dfp#divide(Dfp)",
        "org.apache.commons.math3.dfp.DfpField.<staticinit>()",
        "org.apache.commons.math3.dfp.Dfp#negate()"
    ],
    "org.apache.commons.math3.geometry.partitioning.BSPTree#insertInTree(BSPTree<S extends Space>,boolean)$VanishingCutHandler$1#fixNode(BSPTree<S extends Space>)": ["org.apache.commons.math3.exception.util.LocalizedFormats.<staticinit>()"],
    "org.apache.commons.math3.optim.linear.SimplexSolver#doOptimize()": [
        "org.apache.commons.math3.optim.linear.SimplexSolver#doIteration(SimplexTableau)",
        "org.apache.commons.math3.optim.linear.SimplexSolver#solvePhase1(SimplexTableau)",
        "org.apache.commons.math3.optim.linear.LinearOptimizer#getFunction()",
        "org.apache.commons.math3.optim.linear.LinearOptimizer#getConstraints()",
        "org.apache.commons.math3.optim.nonlinear.scalar.MultivariateOptimizer#getGoalType()",
        "org.apache.commons.math3.optim.linear.SimplexTableau#dropPhase1Objective()",
        "org.apache.commons.math3.optim.linear.NoFeasibleSolutionException#NoFeasibleSolutionException()",
        "org.apache.commons.math3.optim.linear.SimplexTableau#getSolution()",
        "org.apache.commons.math3.util.Precision.compareTo(double,double,double)",
        "org.apache.commons.math3.optim.linear.SolutionCallback#setTableau(SimplexTableau)",
        "org.apache.commons.math3.optim.linear.LinearOptimizer#isRestrictedToNonNegative()",
        "org.apache.commons.math3.optim.linear.SimplexTableau#SimplexTableau(LinearObjectiveFunction,Collection<LinearConstraint>,GoalType,boolean,double,int)",
        "org.apache.commons.math3.optim.linear.SimplexTableau#isOptimal()",
        "org.apache.commons.math3.optim.PointValuePair#getPoint()"
    ],
    "org.apache.commons.math3.optim.nonlinear.scalar.MultivariateFunctionMappingAdapter#MultivariateFunctionMappingAdapter(MultivariateFunction,double[],double[])": [
        "org.apache.commons.math3.exception.DimensionMismatchException#DimensionMismatchException(int,int)",
        "org.apache.commons.math3.util.MathUtils.checkNotNull(Object)",
        "org.apache.commons.math3.optim.nonlinear.scalar.MultivariateFunctionMappingAdapter.<init>()",
        "org.apache.commons.math3.optim.nonlinear.scalar.MultivariateFunctionMappingAdapter.NoBoundsMapper.<init>()",
        "org.apache.commons.math3.optim.nonlinear.scalar.MultivariateFunctionMappingAdapter.LowerUpperBoundMapper#LowerUpperBoundMapper(double,double)",
        "org.apache.commons.math3.optim.nonlinear.scalar.MultivariateFunctionMappingAdapter.LowerBoundMapper#LowerBoundMapper(double)",
        "org.apache.commons.math3.optim.nonlinear.scalar.MultivariateFunctionMappingAdapter.UpperBoundMapper#UpperBoundMapper(double)"
    ],
    "org.apache.commons.math3.distribution.PoissonDistribution#PoissonDistribution(double,double,int)": [
        "org.apache.commons.math3.distribution.PoissonDistribution#PoissonDistribution(RandomGenerator,double,double,int)",
        "org.apache.commons.math3.random.Well19937c#Well19937c()"
    ],
    "org.apache.commons.math3.dfp.DfpDec#DfpDec(DfpField,double)": [
        "org.apache.commons.math3.dfp.DfpDec#round(int)",
        "org.apache.commons.math3.dfp.DfpDec.<init>()",
        "org.apache.commons.math3.dfp.Dfp#Dfp(DfpField,double)"
    ],
    "org.apache.commons.math3.optim.univariate.BracketFinder#getMaxEvaluations()": ["org.apache.commons.math3.util.IntegerSequence.Incrementor#getMaximalCount()"],
    "org.apache.commons.math3.dfp.Dfp#subtract(double)": [
        "org.apache.commons.math3.dfp.DfpDec#newInstance(double)",
        "org.apache.commons.math3.dfp.Dfp#newInstance(double)",
        "org.apache.commons.math3.dfp.Dfp#subtract(Dfp)"
    ],
    "org.apache.commons.math3.analysis.interpolation.LoessInterpolator.tricube(double)": ["org.apache.commons.math3.util.FastMath.abs(double)"],
    "org.apache.commons.math3.linear.AbstractRealMatrix#getSubMatrix(int[],int[])$DefaultRealMatrixChangingVisitor$1.<init>()": ["org.apache.commons.math3.linear.DefaultRealMatrixChangingVisitor.<init>()"],
    "org.apache.commons.math3.stat.StatUtils.populationVariance(double[],double,int,int)": [
        "org.apache.commons.math3.stat.descriptive.moment.Variance#Variance(boolean)",
        "org.apache.commons.math3.stat.descriptive.moment.Variance#evaluate(double[],double,int,int)"
    ],
    "org.apache.commons.math3.random.EmpiricalDistribution.ArrayDataAdapter#computeStats()": [
        "org.apache.commons.math3.stat.descriptive.SummaryStatistics#addValue(double)",
        "org.apache.commons.math3.stat.descriptive.AggregateSummaryStatistics.AggregatingSummaryStatistics#addValue(double)",
        "org.apache.commons.math3.stat.descriptive.SynchronizedSummaryStatistics#addValue(double)",
        "org.apache.commons.math3.stat.descriptive.SummaryStatistics#SummaryStatistics()"
    ],
    "org.apache.commons.math3.distribution.GammaDistribution#cumulativeProbability(double)": ["org.apache.commons.math3.special.Gamma.regularizedGammaP(double,double)"],
    "org.apache.commons.math3.geometry.euclidean.threed.Vector3D#add(double,Vector<Euclidean3D>)": ["org.apache.commons.math3.geometry.euclidean.threed.Vector3D#Vector3D(double,Vector3D,double,Vector3D)"],
    "org.apache.commons.math3.analysis.polynomials.PolynomialFunctionNewtonForm#value(DerivativeStructure)": [
        "org.apache.commons.math3.analysis.differentiation.DerivativeStructure#add(double)",
        "org.apache.commons.math3.analysis.polynomials.PolynomialFunctionNewtonForm.verifyInputArray(double[],double[])",
        "org.apache.commons.math3.analysis.differentiation.DerivativeStructure#DerivativeStructure(int,int,double[]...)",
        "org.apache.commons.math3.analysis.differentiation.DerivativeStructure#getOrder()",
        "org.apache.commons.math3.analysis.differentiation.DerivativeStructure#multiply(DerivativeStructure)",
        "org.apache.commons.math3.analysis.differentiation.DerivativeStructure#subtract(double)",
        "org.apache.commons.math3.analysis.differentiation.DerivativeStructure#getFreeParameters()"
    ],
    "org.apache.commons.math3.analysis.differentiation.SparseGradient.createVariable(int,double)": ["org.apache.commons.math3.analysis.differentiation.SparseGradient#SparseGradient(double,Map<Integer, Double>)"],
    "org.apache.commons.math3.optimization.direct.CMAESOptimizer#CMAESOptimizer(int,double,boolean,int,int,RandomGenerator,boolean,ConvergenceChecker<PointValuePair>)": [
        "org.apache.commons.math3.optimization.direct.CMAESOptimizer.<init>()",
        "org.apache.commons.math3.optimization.direct.BaseAbstractMultivariateSimpleBoundsOptimizer#BaseAbstractMultivariateSimpleBoundsOptimizer(ConvergenceChecker<PointValuePair>)"
    ],
    "org.apache.commons.math3.stat.inference.KolmogorovSmirnovTest#cdf(double,int,boolean)": [
        "org.apache.commons.math3.stat.inference.KolmogorovSmirnovTest#pelzGood(double,int)",
        "org.apache.commons.math3.stat.inference.KolmogorovSmirnovTest#exactK(double,int)",
        "org.apache.commons.math3.stat.inference.KolmogorovSmirnovTest#roundedK(double,int)"
    ],
    "org.apache.commons.math3.analysis.function.Gaussian.value(double,double,double)": ["org.apache.commons.math3.util.FastMath.exp(double)"],
    "org.apache.commons.math3.fitting.leastsquares.AbstractEvaluation#getCovariances(double)": [
        "org.apache.commons.math3.linear.LUDecomposition.Solver#getInverse()",
        "org.apache.commons.math3.linear.CholeskyDecomposition.Solver#getInverse()",
        "org.apache.commons.math3.fitting.leastsquares.OptimumImpl#getJacobian()",
        "org.apache.commons.math3.linear.EigenDecomposition.Solver#getInverse()",
        "org.apache.commons.math3.linear.OpenMapRealMatrix#multiply(RealMatrix)",
        "org.apache.commons.math3.linear.QRDecomposition#getSolver()",
        "org.apache.commons.math3.linear.BlockRealMatrix#transpose()",
        "org.apache.commons.math3.fitting.leastsquares.DenseWeightedEvaluation#getJacobian()",
        "org.apache.commons.math3.fitting.leastsquares.LeastSquaresFactory.LocalLeastSquaresProblem.UnweightedEvaluation#getJacobian()",
        "org.apache.commons.math3.linear.SingularValueDecomposition.Solver#getInverse()",
        "org.apache.commons.math3.linear.QRDecomposition#QRDecomposition(RealMatrix,double)",
        "org.apache.commons.math3.linear.RRQRDecomposition.Solver#getInverse()",
        "org.apache.commons.math3.linear.QRDecomposition.Solver#getInverse()",
        "org.apache.commons.math3.linear.AbstractRealMatrix#multiply(RealMatrix)",
        "org.apache.commons.math3.linear.AbstractRealMatrix#transpose()",
        "org.apache.commons.math3.fitting.leastsquares.LeastSquaresFactory.LocalLeastSquaresProblem.LazyUnweightedEvaluation#getJacobian()",
        "org.apache.commons.math3.linear.DiagonalMatrix#multiply(RealMatrix)",
        "org.apache.commons.math3.linear.RRQRDecomposition#getSolver()",
        "org.apache.commons.math3.linear.BlockRealMatrix#multiply(RealMatrix)"
    ],
    "org.apache.commons.math3.util.IntegerSequence.Incrementor.create()": [
        "org.apache.commons.math3.util.IntegerSequence.Incrementor.<staticinit>()",
        "org.apache.commons.math3.util.IntegerSequence.Incrementor#Incrementor(int,int,int,MaxCountExceededCallback)"
    ],
    "org.apache.commons.math3.linear.ArrayRealVector#ArrayRealVector(RealVector,ArrayRealVector)": [
        "org.apache.commons.math3.linear.OpenMapRealVector#getDimension()",
        "org.apache.commons.math3.linear.ArrayRealVector#getDimension()",
        "org.apache.commons.math3.linear.RealVector.unmodifiableRealVector(RealVector)$RealVector$1#getDimension()",
        "org.apache.commons.math3.linear.ArrayRealVector#getEntry(int)",
        "org.apache.commons.math3.linear.RealVector.<init>()",
        "org.apache.commons.math3.linear.OpenMapRealVector#getEntry(int)",
        "org.apache.commons.math3.linear.ArrayRealVector.<init>()",
        "org.apache.commons.math3.linear.RealVector.unmodifiableRealVector(RealVector)$RealVector$1#getEntry(int)"
    ],
    "org.apache.commons.math3.geometry.partitioning.AbstractSubHyperplane#applyTransform(Transform<S extends Space, T extends Space>)": [
        "org.apache.commons.math3.geometry.partitioning.AbstractRegion#getTree(boolean)",
        "org.apache.commons.math3.geometry.partitioning.BoundaryAttribute#getSplitters()",
        "org.apache.commons.math3.geometry.partitioning.NodesSet#add(BSPTree<S extends Space>)",
        "org.apache.commons.math3.geometry.partitioning.AbstractSubHyperplane#recurseTransform(BSPTree<T extends Space>,Hyperplane<S extends Space>,Transform<S extends Space, T extends Space>,Map<BSPTree<T extends Space>, BSPTree<T extends Space>>)"
    ],
    "org.apache.commons.math3.util.MultidimensionalCounter#toString()": ["org.apache.commons.math3.util.MultidimensionalCounter#getCount(int[]...)"],
    "org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D.distanceSq(Vector3D,FieldVector3D<T extends RealFieldElement>)": ["org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D#distanceSq(Vector3D)"],
    "org.apache.commons.math3.stat.Frequency#getCumFreq(char)": ["org.apache.commons.math3.stat.Frequency#getCumFreq(Comparable<?>)"],
    "org.apache.commons.math3.optimization.univariate.BrentOptimizer#best(UnivariatePointValuePair,UnivariatePointValuePair,boolean)": ["org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair#getValue()"],
    "org.apache.commons.math3.stat.regression.AbstractMultipleLinearRegression#calculateYVariance()": [
        "org.apache.commons.math3.linear.RealVector.unmodifiableRealVector(RealVector)$RealVector$1#toArray()",
        "org.apache.commons.math3.stat.descriptive.moment.Variance#Variance()",
        "org.apache.commons.math3.stat.descriptive.moment.Variance#evaluate(double[])",
        "org.apache.commons.math3.linear.OpenMapRealVector#toArray()",
        "org.apache.commons.math3.linear.RealVector#toArray()",
        "org.apache.commons.math3.linear.ArrayRealVector#toArray()"
    ],
    "org.apache.commons.math3.optimization.direct.BaseAbstractMultivariateOptimizer#BaseAbstractMultivariateOptimizer(ConvergenceChecker<PointValuePair>)": ["org.apache.commons.math3.optimization.direct.BaseAbstractMultivariateOptimizer.<init>()"],
    "org.apache.commons.math3.stat.StatUtils.geometricMean(double[])": [
        "org.apache.commons.math3.stat.descriptive.moment.StandardDeviation#evaluate(double[])",
        "org.apache.commons.math3.stat.descriptive.moment.Variance#evaluate(double[])",
        "org.apache.commons.math3.stat.StatUtils.<staticinit>()",
        "org.apache.commons.math3.stat.descriptive.AbstractStorelessUnivariateStatistic#evaluate(double[])"
    ],
    "org.apache.commons.math3.stat.regression.MillerUpdatingRegression#getDiagonalOfHatMatrix(double[])": [
        "org.apache.commons.math3.stat.regression.MillerUpdatingRegression#smartAdd(double,double)",
        "org.apache.commons.math3.util.FastMath.sqrt(double)"
    ],
    "org.apache.commons.math3.util.ArithmeticUtils.binomialCoefficientDouble(int,int)": ["org.apache.commons.math3.util.CombinatoricsUtils.binomialCoefficientDouble(int,int)"],
    "org.apache.commons.math3.linear.MatrixUtils.createColumnFieldMatrix(T extends FieldElement[])": [
        "org.apache.commons.math3.exception.NullArgumentException#NullArgumentException()",
        "org.apache.commons.math3.linear.MatrixUtils.createFieldMatrix(Field<T extends FieldElement>,int,int)",
        "org.apache.commons.math3.exception.util.LocalizedFormats.<staticinit>()",
        "org.apache.commons.math3.linear.SparseFieldMatrix#setEntry(int,int,T extends FieldElement)",
        "org.apache.commons.math3.exception.NoDataException#NoDataException(Localizable)",
        "org.apache.commons.math3.linear.Array2DRowFieldMatrix#setEntry(int,int,T extends FieldElement)",
        "org.apache.commons.math3.linear.BlockFieldMatrix#setEntry(int,int,T extends FieldElement)"
    ],
    "org.apache.commons.math3.analysis.solvers.NewtonRaphsonSolver#NewtonRaphsonSolver()": [
        "org.apache.commons.math3.analysis.solvers.NewtonRaphsonSolver#NewtonRaphsonSolver(double)",
        "org.apache.commons.math3.analysis.solvers.NewtonRaphsonSolver.<staticinit>()"
    ],
    "org.apache.commons.math3.analysis.differentiation.DerivativeStructure#remainder(DerivativeStructure)": [
        "org.apache.commons.math3.analysis.differentiation.DSCompiler#remainder(double[],int,double[],int,double[],int)",
        "org.apache.commons.math3.analysis.differentiation.DerivativeStructure#DerivativeStructure(DSCompiler)",
        "org.apache.commons.math3.analysis.differentiation.DSCompiler#checkCompatibility(DSCompiler)"
    ],
    "org.apache.commons.math3.analysis.solvers.MullerSolver#MullerSolver(double,double)": [
        "org.apache.commons.math3.analysis.solvers.MullerSolver.<init>()",
        "org.apache.commons.math3.analysis.solvers.AbstractUnivariateSolver#AbstractUnivariateSolver(double,double)"
    ],
    "org.apache.commons.math3.dfp.DfpDec#DfpDec(DfpField,String)": [
        "org.apache.commons.math3.dfp.DfpDec#round(int)",
        "org.apache.commons.math3.dfp.DfpDec.<init>()",
        "org.apache.commons.math3.dfp.Dfp#Dfp(DfpField,String)"
    ],
    "org.apache.commons.math3.linear.OpenMapRealVector#append(double)": [
        "org.apache.commons.math3.linear.OpenMapRealVector#OpenMapRealVector(OpenMapRealVector,int)",
        "org.apache.commons.math3.linear.OpenMapRealVector#setEntry(int,double)"
    ],
    "org.apache.commons.math3.linear.AbstractRealMatrix#getRowMatrix(int)": [
        "org.apache.commons.math3.linear.DiagonalMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.Array2DRowRealMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.Array2DRowRealMatrix#setEntry(int,int,double)",
        "org.apache.commons.math3.linear.DiagonalMatrix#getEntry(int,int)",
        "org.apache.commons.math3.linear.OpenMapRealMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.BlockRealMatrix#setEntry(int,int,double)",
        "org.apache.commons.math3.linear.OpenMapRealMatrix#setEntry(int,int,double)",
        "org.apache.commons.math3.linear.OpenMapRealMatrix#getEntry(int,int)",
        "org.apache.commons.math3.linear.DiagonalMatrix#createMatrix(int,int)",
        "org.apache.commons.math3.linear.BlockRealMatrix#getEntry(int,int)",
        "org.apache.commons.math3.linear.Array2DRowRealMatrix#getEntry(int,int)",
        "org.apache.commons.math3.linear.OpenMapRealMatrix#createMatrix(int,int)",
        "org.apache.commons.math3.linear.BlockRealMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.Array2DRowRealMatrix#createMatrix(int,int)",
        "org.apache.commons.math3.linear.MatrixUtils.checkRowIndex(AnyMatrix,int)",
        "org.apache.commons.math3.linear.DiagonalMatrix#setEntry(int,int,double)",
        "org.apache.commons.math3.linear.BlockRealMatrix#createMatrix(int,int)"
    ],
    "org.apache.commons.math3.stat.descriptive.SynchronizedMultivariateSummaryStatistics#setSumImpl(StorelessUnivariateStatistic[])": ["org.apache.commons.math3.stat.descriptive.MultivariateSummaryStatistics#setSumImpl(StorelessUnivariateStatistic[])"],
    "org.apache.commons.math3.linear.OpenMapRealVector#OpenMapRealVector(int,int,double)": [
        "org.apache.commons.math3.util.OpenIntToDoubleHashMap#OpenIntToDoubleHashMap(int,double)",
        "org.apache.commons.math3.linear.OpenMapRealVector.<init>()",
        "org.apache.commons.math3.linear.SparseRealVector.<init>()"
    ],
    "org.apache.commons.math3.analysis.polynomials.PolynomialFunctionLagrangeForm#computeCoefficients()": ["org.apache.commons.math3.analysis.polynomials.PolynomialFunctionLagrangeForm#degree()"],
    "org.apache.commons.math3.stat.correlation.PearsonsCorrelation#PearsonsCorrelation(RealMatrix)": [
        "org.apache.commons.math3.linear.BlockFieldMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.BlockRealMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.Array2DRowRealMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.SparseFieldMatrix#getRowDimension()",
        "org.apache.commons.math3.stat.correlation.PearsonsCorrelation.<init>()",
        "org.apache.commons.math3.linear.OpenMapRealMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.DiagonalMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.Array2DRowFieldMatrix#getRowDimension()",
        "org.apache.commons.math3.stat.correlation.PearsonsCorrelation#computeCorrelationMatrix(RealMatrix)"
    ],
    "org.apache.commons.math3.random.MersenneTwister#next(int)": ["org.apache.commons.math3.random.MersenneTwister.<staticinit>()"],
    "org.apache.commons.math3.ode.MultistepIntegrator.NordsieckInitializer#handleStep(StepInterpolator,boolean)": [
        "org.apache.commons.math3.ode.sampling.AbstractStepInterpolator#getInterpolatedDerivatives()",
        "org.apache.commons.math3.ode.ExpandableStatefulODE#getPrimaryMapper()",
        "org.apache.commons.math3.ode.sampling.AbstractStepInterpolator#getCurrentTime()",
        "org.apache.commons.math3.ode.sampling.AbstractStepInterpolator#getInterpolatedState()",
        "org.apache.commons.math3.ode.AbstractIntegrator#getExpandable()",
        "org.apache.commons.math3.ode.sampling.AbstractStepInterpolator#getPreviousTime()",
        "org.apache.commons.math3.ode.EquationsMapper#insertEquationData(double[],double[])",
        "org.apache.commons.math3.ode.sampling.AbstractStepInterpolator#getInterpolatedSecondaryDerivatives(int)",
        "org.apache.commons.math3.ode.sampling.AbstractStepInterpolator#getInterpolatedSecondaryState(int)",
        "org.apache.commons.math3.ode.sampling.AbstractStepInterpolator#setInterpolatedTime(double)",
        "org.apache.commons.math3.ode.ExpandableStatefulODE#getSecondaryMappers()",
        "org.apache.commons.math3.ode.MultistepIntegrator.InitializationCompletedMarkerException#InitializationCompletedMarkerException()",
        "org.apache.commons.math3.ode.nonstiff.AdamsIntegrator#initializeHighOrderDerivatives(double,double[],double[][],double[][])"
    ],
    "org.apache.commons.math3.fitting.PolynomialCurveFitter#withMaxIterations(int)": ["org.apache.commons.math3.fitting.PolynomialCurveFitter#PolynomialCurveFitter(double[],int)"],
    "org.apache.commons.math3.fraction.BigFractionFormat#parse(String)": [
        "org.apache.commons.math3.fraction.BigFractionFormat#parse(String,ParsePosition)",
        "org.apache.commons.math3.fraction.ProperBigFractionFormat#parse(String,ParsePosition)",
        "org.apache.commons.math3.exception.MathParseException#MathParseException(String,int,Class<?>)"
    ],
    "org.apache.commons.math3.linear.OpenMapRealMatrix#OpenMapRealMatrix(int,int)": [
        "org.apache.commons.math3.linear.AbstractRealMatrix#AbstractRealMatrix(int,int)",
        "org.apache.commons.math3.linear.OpenMapRealMatrix.<init>()",
        "org.apache.commons.math3.util.OpenIntToDoubleHashMap#OpenIntToDoubleHashMap(double)"
    ],
    "org.apache.commons.math3.analysis.differentiation.SparseGradient#linearCombination(double[],SparseGradient[])": [
        "org.apache.commons.math3.analysis.differentiation.SparseGradient#multiply(double)",
        "org.apache.commons.math3.util.BigRealField#getZero()",
        "org.apache.commons.math3.analysis.differentiation.SparseGradient#getField()$Field$1#getZero()",
        "org.apache.commons.math3.util.Decimal64Field#getZero()",
        "org.apache.commons.math3.dfp.DfpField#getZero()",
        "org.apache.commons.math3.analysis.differentiation.SparseGradient#add(SparseGradient)",
        "org.apache.commons.math3.analysis.differentiation.SparseGradient#getField()",
        "org.apache.commons.math3.util.MathArrays.linearCombination(double[],double[])",
        "org.apache.commons.math3.analysis.differentiation.DerivativeStructure#getField()$Field$1#getZero()",
        "org.apache.commons.math3.fraction.FractionField#getZero()",
        "org.apache.commons.math3.complex.ComplexField#getZero()",
        "org.apache.commons.math3.analysis.differentiation.SparseGradient#getValue()",
        "org.apache.commons.math3.fraction.BigFractionField#getZero()"
    ],
    "org.apache.commons.math3.distribution.ZipfDistribution#ZipfDistribution(int,double)": [
        "org.apache.commons.math3.distribution.ZipfDistribution#ZipfDistribution(RandomGenerator,int,double)",
        "org.apache.commons.math3.random.Well19937c#Well19937c()"
    ],
    "org.apache.commons.math3.util.Incrementor.wrap(Incrementor)$Incrementor$1.<init>()": [
        "org.apache.commons.math3.util.Incrementor#Incrementor()",
        "org.apache.commons.math3.util.Incrementor#incrementCount(int)",
        "org.apache.commons.math3.util.Incrementor#setMaximalCount(int)",
        "org.apache.commons.math3.util.IntegerSequence.Incrementor#getCount()",
        "org.apache.commons.math3.util.IntegerSequence.Incrementor#getMaximalCount()"
    ],
    "org.apache.commons.math3.linear.ArrayFieldVector#walkInDefaultOrder(FieldVectorPreservingVisitor<T extends FieldElement>,int,int)": [
        "org.apache.commons.math3.linear.ArrayFieldVector#getEntry(int)",
        "org.apache.commons.math3.linear.ArrayFieldVector#checkIndices(int,int)",
        "org.apache.commons.math3.linear.ArrayFieldVector#getDimension()"
    ],
    "org.apache.commons.math3.linear.LUDecomposition#LUDecomposition(RealMatrix)": [
        "org.apache.commons.math3.linear.LUDecomposition.<staticinit>()",
        "org.apache.commons.math3.linear.LUDecomposition#LUDecomposition(RealMatrix,double)"
    ],
    "org.apache.commons.math3.ml.neuralnet.twod.util.HitHistogram#computeImage(NeuronSquareMesh2D,Iterable<double[]>)": [
        "org.apache.commons.math3.ml.neuralnet.twod.NeuronSquareMesh2D#getNumberOfRows()",
        "org.apache.commons.math3.ml.neuralnet.MapUtils.findBest(double[],Iterable<Neuron>,DistanceMeasure)",
        "org.apache.commons.math3.ml.neuralnet.twod.util.LocationFinder.Location#getRow()",
        "org.apache.commons.math3.ml.neuralnet.twod.util.LocationFinder#LocationFinder(NeuronSquareMesh2D)",
        "org.apache.commons.math3.ml.neuralnet.twod.util.LocationFinder.Location#getColumn()",
        "org.apache.commons.math3.ml.neuralnet.twod.util.LocationFinder#getLocation(Neuron)",
        "org.apache.commons.math3.ml.neuralnet.twod.NeuronSquareMesh2D#getNumberOfColumns()"
    ],
    "org.apache.commons.math3.transform.FastFourierTransformer.MultiDimensionalComplexMatrix#MultiDimensionalComplexMatrix(Object)": ["org.apache.commons.math3.transform.FastFourierTransformer.MultiDimensionalComplexMatrix.<init>()"],
    "org.apache.commons.math3.analysis.FunctionUtils.collector(BivariateFunction,UnivariateFunction,double)$MultivariateFunction$1#value(double[])": [
        "org.apache.commons.math3.analysis.FunctionUtils.multiply(DifferentiableUnivariateFunction[]...)$UnivariateFunction$1$UnivariateFunction$1#derivative()$UnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.interpolation.BicubicSplineFunction#BicubicSplineFunction(double[],boolean)$BivariateFunction$3#value(double,double)",
        "org.apache.commons.math3.analysis.polynomials.PolynomialSplineFunction#value(double)",
        "org.apache.commons.math3.analysis.function.Gaussian#value(double)",
        "org.apache.commons.math3.analysis.function.Tanh#value(double)",
        "org.apache.commons.math3.analysis.function.Inverse#value(double)",
        "org.apache.commons.math3.analysis.interpolation.PiecewiseBicubicSplineInterpolatingFunction#value(double,double)",
        "org.apache.commons.math3.analysis.function.HarmonicOscillator#value(double)",
        "org.apache.commons.math3.analysis.function.Subtract#value(double,double)",
        "org.apache.commons.math3.analysis.FunctionUtils.fix1stArgument(BivariateFunction,double)$UnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.function.Asin#value(double)",
        "org.apache.commons.math3.analysis.function.Pow#value(double,double)",
        "org.apache.commons.math3.analysis.function.Asinh#value(double)",
        "org.apache.commons.math3.analysis.FunctionUtils.multiply(UnivariateFunction[]...)$UnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.function.Atan#value(double)",
        "org.apache.commons.math3.analysis.FunctionUtils.toDifferentiableUnivariateFunction(UnivariateDifferentiableFunction)$DifferentiableUnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.function.Cbrt#value(double)",
        "org.apache.commons.math3.analysis.polynomials.PolynomialFunctionLagrangeForm#value(double)",
        "org.apache.commons.math3.analysis.function.Exp#value(double)",
        "org.apache.commons.math3.special.BesselJ#value(double)",
        "org.apache.commons.math3.analysis.interpolation.BicubicSplineFunction#BicubicSplineFunction(double[],boolean)$BivariateFunction$2#value(double,double)",
        "org.apache.commons.math3.analysis.polynomials.PolynomialFunctionNewtonForm#value(double)",
        "org.apache.commons.math3.analysis.FunctionUtils.add(UnivariateFunction[]...)$UnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.function.Sin#value(double)",
        "org.apache.commons.math3.analysis.function.Cos#value(double)",
        "org.apache.commons.math3.analysis.interpolation.UnivariatePeriodicInterpolator#interpolate(double[],double[])$UnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.function.Log10#value(double)",
        "org.apache.commons.math3.analysis.function.Sqrt#value(double)",
        "org.apache.commons.math3.analysis.function.Log#value(double)",
        "org.apache.commons.math3.analysis.function.Sinc#value(double)",
        "org.apache.commons.math3.ode.events.EventState#evaluateStep(StepInterpolator)$UnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.function.Minus#value(double)",
        "org.apache.commons.math3.analysis.integration.IterativeLegendreGaussIntegrator#stage(int)$UnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.interpolation.BicubicSplineInterpolatingFunction#value(double,double)",
        "org.apache.commons.math3.optimization.general.NonLinearConjugateGradientOptimizer.LineSearchFunction#value(double)",
        "org.apache.commons.math3.analysis.function.Floor#value(double)",
        "org.apache.commons.math3.analysis.FunctionUtils.multiply(DifferentiableUnivariateFunction[]...)$DifferentiableUnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.FunctionUtils.combine(BivariateFunction,UnivariateFunction,UnivariateFunction)$UnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.FunctionUtils.add(DifferentiableUnivariateFunction[]...)$UnivariateFunction$1$UnivariateFunction$1#derivative()$UnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.function.Min#value(double,double)",
        "org.apache.commons.math3.analysis.function.Sinh#value(double)",
        "org.apache.commons.math3.analysis.FunctionUtils.multiply(UnivariateDifferentiableFunction[]...)$UnivariateDifferentiableFunction$1#value(double)",
        "org.apache.commons.math3.analysis.function.Tan#value(double)",
        "org.apache.commons.math3.distribution.AbstractRealDistribution#inverseCumulativeProbability(double)$UnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.FunctionUtils.add(DifferentiableUnivariateFunction[]...)$DifferentiableUnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.function.Ceil#value(double)",
        "org.apache.commons.math3.analysis.interpolation.BicubicFunction#value(double,double)",
        "org.apache.commons.math3.analysis.function.Logistic#value(double)",
        "org.apache.commons.math3.analysis.function.Signum#value(double)",
        "org.apache.commons.math3.analysis.function.Constant#value(double)",
        "org.apache.commons.math3.analysis.function.Atanh#value(double)",
        "org.apache.commons.math3.analysis.FunctionUtils.compose(DifferentiableUnivariateFunction[]...)$UnivariateFunction$1$UnivariateFunction$1#derivative()$UnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.FunctionUtils.add(UnivariateDifferentiableFunction[]...)$UnivariateDifferentiableFunction$1#value(double)",
        "org.apache.commons.math3.analysis.function.Abs#value(double)",
        "org.apache.commons.math3.analysis.differentiation.FiniteDifferencesDifferentiator#differentiate(UnivariateFunction)$UnivariateDifferentiableFunction$1#value(double)",
        "org.apache.commons.math3.analysis.function.Identity#value(double)",
        "org.apache.commons.math3.analysis.function.Expm1#value(double)",
        "org.apache.commons.math3.analysis.function.Logit#value(double)",
        "org.apache.commons.math3.analysis.function.Log1p#value(double)",
        "org.apache.commons.math3.analysis.function.Divide#value(double,double)",
        "org.apache.commons.math3.analysis.FunctionUtils.fix2ndArgument(BivariateFunction,double)$UnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.FunctionUtils.toUnivariateDifferential(DifferentiableUnivariateFunction)$UnivariateDifferentiableFunction$1#value(double)",
        "org.apache.commons.math3.analysis.FunctionUtils.toDifferentiableUnivariateFunction(UnivariateDifferentiableFunction)$UnivariateFunction$1$UnivariateFunction$1#derivative()$UnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.interpolation.BicubicSplineFunction#value(double,double)",
        "org.apache.commons.math3.analysis.polynomials.PolynomialFunction#value(double)",
        "org.apache.commons.math3.analysis.function.Rint#value(double)",
        "org.apache.commons.math3.analysis.function.Atan2#value(double,double)",
        "org.apache.commons.math3.analysis.FunctionUtils.compose(UnivariateFunction[]...)$UnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.function.Cosh#value(double)",
        "org.apache.commons.math3.optimization.direct.PowellOptimizer.LineSearch#search(double[],double[])$UnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.FunctionUtils.compose(DifferentiableUnivariateFunction[]...)$DifferentiableUnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.interpolation.BicubicInterpolatingFunction#value(double,double)",
        "org.apache.commons.math3.analysis.interpolation.BicubicSplineFunction#BicubicSplineFunction(double[],boolean)$BivariateFunction$4#value(double,double)",
        "org.apache.commons.math3.analysis.function.Acosh#value(double)",
        "org.apache.commons.math3.analysis.function.StepFunction#value(double)",
        "org.apache.commons.math3.analysis.FunctionUtils.compose(UnivariateDifferentiableFunction[]...)$UnivariateDifferentiableFunction$1#value(double)",
        "org.apache.commons.math3.analysis.function.Multiply#value(double,double)",
        "org.apache.commons.math3.analysis.function.Max#value(double,double)",
        "org.apache.commons.math3.analysis.function.Acos#value(double)",
        "org.apache.commons.math3.analysis.function.Power#value(double)",
        "org.apache.commons.math3.analysis.interpolation.BicubicSplineFunction#BicubicSplineFunction(double[],boolean)$BivariateFunction$5#value(double,double)",
        "org.apache.commons.math3.optim.nonlinear.scalar.LineSearch#search(double[],double[])$UnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.interpolation.BicubicSplineFunction#BicubicSplineFunction(double[],boolean)$BivariateFunction$1#value(double,double)",
        "org.apache.commons.math3.analysis.function.Add#value(double,double)",
        "org.apache.commons.math3.analysis.function.Sigmoid#value(double)",
        "org.apache.commons.math3.analysis.function.Ulp#value(double)"
    ],
    "org.apache.commons.math3.dfp.DfpField#newDfp(double)": ["org.apache.commons.math3.dfp.Dfp#Dfp(DfpField,double)"],
    "org.apache.commons.math3.stat.descriptive.moment.SemiVariance.copy(SemiVariance,SemiVariance)": [
        "org.apache.commons.math3.stat.descriptive.AbstractUnivariateStatistic#setData(double[])",
        "org.apache.commons.math3.util.MathUtils.checkNotNull(Object)",
        "org.apache.commons.math3.stat.descriptive.rank.Percentile#setData(double[])",
        "org.apache.commons.math3.stat.descriptive.AbstractUnivariateStatistic#getDataRef()"
    ],
    "org.apache.commons.math3.ode.nonstiff.AdamsNordsieckTransformer.getInstance(int)": [
        "org.apache.commons.math3.ode.nonstiff.AdamsNordsieckTransformer.<staticinit>()",
        "org.apache.commons.math3.ode.nonstiff.AdamsNordsieckTransformer#AdamsNordsieckTransformer(int)"
    ],
    "org.apache.commons.math3.fitting.GaussianCurveFitter$Parametric$1.<init>()": ["org.apache.commons.math3.analysis.function.Gaussian.Parametric.<init>()"],
    "org.apache.commons.math3.ode.nonstiff.AdaptiveStepsizeIntegrator#setStepSizeControl(double,double,double[],double[])": ["org.apache.commons.math3.util.FastMath.abs(double)"],
    "org.apache.commons.math3.linear.RRQRDecomposition.Solver#isNonSingular()": [
        "org.apache.commons.math3.linear.SingularValueDecomposition.Solver#isNonSingular()",
        "org.apache.commons.math3.linear.LUDecomposition.Solver#isNonSingular()",
        "org.apache.commons.math3.linear.RRQRDecomposition.Solver#isNonSingular()",
        "org.apache.commons.math3.linear.EigenDecomposition.Solver#isNonSingular()",
        "org.apache.commons.math3.linear.CholeskyDecomposition.Solver#isNonSingular()",
        "org.apache.commons.math3.linear.QRDecomposition.Solver#isNonSingular()"
    ],
    "org.apache.commons.math3.linear.SparseFieldVector#equals(Object)": [
        "org.apache.commons.math3.linear.SparseFieldVector#getEntries()",
        "org.apache.commons.math3.util.OpenIntToFieldHashMap.Iterator#hasNext()",
        "org.apache.commons.math3.linear.SparseFieldVector#getEntry(int)",
        "org.apache.commons.math3.util.OpenIntToFieldHashMap.Iterator#key()",
        "org.apache.commons.math3.util.OpenIntToFieldHashMap.Iterator#value()",
        "org.apache.commons.math3.util.OpenIntToFieldHashMap#iterator()",
        "org.apache.commons.math3.util.OpenIntToFieldHashMap.Iterator#advance()"
    ],
    "org.apache.commons.math3.random.RandomDataImpl#nextF(double,double)": ["org.apache.commons.math3.random.RandomDataGenerator#nextF(double,double)"],
    "org.apache.commons.math3.optim.nonlinear.vector.JacobianMultivariateVectorOptimizer#parseOptimizationData(OptimizationData[]...)": [
        "org.apache.commons.math3.optim.nonlinear.vector.MultivariateVectorOptimizer#parseOptimizationData(OptimizationData[]...)",
        "org.apache.commons.math3.optim.nonlinear.vector.ModelFunctionJacobian#getModelFunctionJacobian()"
    ],
    "org.apache.commons.math3.linear.ArrayFieldVector#mapInvToSelf()": [
        "org.apache.commons.math3.fraction.BigFractionField#getOne()",
        "org.apache.commons.math3.fraction.FractionField#getOne()",
        "org.apache.commons.math3.analysis.differentiation.SparseGradient#getField()$Field$1#getOne()",
        "org.apache.commons.math3.exception.util.LocalizedFormats.<staticinit>()",
        "org.apache.commons.math3.dfp.DfpField#getOne()",
        "org.apache.commons.math3.analysis.differentiation.DerivativeStructure#getField()$Field$1#getOne()",
        "org.apache.commons.math3.util.Decimal64Field#getOne()",
        "org.apache.commons.math3.complex.ComplexField#getOne()",
        "org.apache.commons.math3.util.BigRealField#getOne()"
    ],
    "org.apache.commons.math3.complex.RootsOfUnity#computeRoots(int)": [
        "org.apache.commons.math3.util.FastMath.sin(double)",
        "org.apache.commons.math3.util.FastMath.abs(int)",
        "org.apache.commons.math3.util.FastMath.<staticinit>()",
        "org.apache.commons.math3.exception.util.LocalizedFormats.<staticinit>()",
        "org.apache.commons.math3.util.FastMath.cos(double)"
    ],
    "org.apache.commons.math3.geometry.euclidean.threed.Plane#copySelf()": ["org.apache.commons.math3.geometry.euclidean.threed.Plane#Plane(Plane)"],
    "org.apache.commons.math3.distribution.KolmogorovSmirnovDistribution#cdf(double,boolean)": [
        "org.apache.commons.math3.distribution.KolmogorovSmirnovDistribution#roundedK(double)",
        "org.apache.commons.math3.distribution.KolmogorovSmirnovDistribution#exactK(double)",
        "org.apache.commons.math3.util.FastMath.pow(double,int)"
    ],
    "org.apache.commons.math3.stat.descriptive.DescriptiveStatistics#apply(UnivariateStatistic)": ["org.apache.commons.math3.util.ResizableDoubleArray#compute(Function)"],
    "org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D#subtract(double,FieldVector3D<T extends RealFieldElement>)": ["org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D#FieldVector3D(double,FieldVector3D<T extends RealFieldElement>,double,FieldVector3D<T extends RealFieldElement>)"],
    "org.apache.commons.math3.distribution.LogNormalDistribution#LogNormalDistribution(RandomGenerator,double,double)": [
        "org.apache.commons.math3.distribution.LogNormalDistribution#LogNormalDistribution(RandomGenerator,double,double,double)",
        "org.apache.commons.math3.distribution.LogNormalDistribution.<staticinit>()"
    ],
    "org.apache.commons.math3.dfp.Dfp#newInstance(double)": [
        "org.apache.commons.math3.dfp.Dfp#getField()",
        "org.apache.commons.math3.dfp.Dfp#Dfp(DfpField,double)"
    ],
    "org.apache.commons.math3.distribution.LevyDistribution#cumulativeProbability(double)": [
        "org.apache.commons.math3.special.Erf.erfc(double)",
        "org.apache.commons.math3.util.FastMath.sqrt(double)"
    ],
    "org.apache.commons.math3.util.IterationManager#IterationManager(int,MaxCountExceededCallback)$MaxCountExceededCallback$1#trigger(int)": [
        "org.apache.commons.math3.optim.AbstractOptimizationProblem.MaxIterCallback#trigger(int)",
        "org.apache.commons.math3.optim.BaseOptimizer.MaxIterCallback#trigger(int)",
        "org.apache.commons.math3.util.Incrementor#Incrementor(int)$MaxCountExceededCallback$1#trigger(int)",
        "org.apache.commons.math3.optim.AbstractOptimizationProblem.MaxEvalCallback#trigger(int)",
        "org.apache.commons.math3.optim.BaseOptimizer.MaxEvalCallback#trigger(int)"
    ],
    "org.apache.commons.math3.analysis.solvers.BrentSolver#doSolve()": [
        "org.apache.commons.math3.analysis.solvers.BaseAbstractUnivariateSolver#getMin()",
        "org.apache.commons.math3.analysis.solvers.BaseAbstractUnivariateSolver#computeObjectiveValue(double)",
        "org.apache.commons.math3.analysis.solvers.BaseAbstractUnivariateSolver#getFunctionValueAccuracy()",
        "org.apache.commons.math3.util.FastMath.abs(double)",
        "org.apache.commons.math3.analysis.solvers.BaseAbstractUnivariateSolver#verifySequence(double,double,double)",
        "org.apache.commons.math3.analysis.solvers.BaseAbstractUnivariateSolver#getStartValue()",
        "org.apache.commons.math3.analysis.solvers.BrentSolver#brent(double,double,double,double)",
        "org.apache.commons.math3.analysis.solvers.BaseAbstractUnivariateSolver#getMax()",
        "org.apache.commons.math3.exception.NoBracketingException#NoBracketingException(double,double,double,double)"
    ],
    "org.apache.commons.math3.userguide.genetics.PolygonChromosome#PolygonChromosome(List<Polygon>)": [
        "org.apache.commons.math3.userguide.genetics.PolygonChromosome.<init>()",
        "org.apache.commons.math3.genetics.AbstractListChromosome#AbstractListChromosome(List<T>)"
    ],
    "org.apache.commons.math3.geometry.euclidean.oned.Vector1D#isInfinite()": ["org.apache.commons.math3.geometry.euclidean.oned.Vector1D#isNaN()"],
    "org.apache.commons.math3.random.MersenneTwister#setSeed(long)": ["org.apache.commons.math3.random.MersenneTwister#setSeed(int[])"],
    "org.apache.commons.math3.analysis.differentiation.DerivativeStructure#subtract(double)": ["org.apache.commons.math3.analysis.differentiation.DerivativeStructure#add(double)"],
    "org.apache.commons.math3.stat.inference.ChiSquareTest#chiSquare(double[],long[])": [
        "org.apache.commons.math3.exception.DimensionMismatchException#DimensionMismatchException(int,int)",
        "org.apache.commons.math3.util.MathArrays.checkPositive(double[])",
        "org.apache.commons.math3.util.FastMath.abs(double)",
        "org.apache.commons.math3.util.MathArrays.checkNonNegative(long[])"
    ],
    "org.apache.commons.math3.complex.ComplexUtils#ComplexUtils()": ["org.apache.commons.math3.complex.ComplexUtils.<init>()"],
    "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.MultiDirectionalSimplex#iterate(MultivariateFunction,Comparator<PointValuePair>)": [
        "org.apache.commons.math3.optim.nonlinear.scalar.MultiStartMultivariateOptimizer#getPairComparator()$Comparator$1#compare(PointValuePair,PointValuePair)",
        "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.AbstractSimplex#getPoints()",
        "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizer#doOptimize()$Comparator$1#compare(PointValuePair,PointValuePair)",
        "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.AbstractSimplex#setPoints(PointValuePair[])",
        "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.MultiDirectionalSimplex#evaluateNewSimplex(MultivariateFunction,PointValuePair[],double,Comparator<PointValuePair>)",
        "org.apache.commons.math3.stat.correlation.KendallsCorrelation#correlation(double[],double[])$Comparator$1#compare(Pair<Double, Double>,Pair<Double, Double>)",
        "org.apache.commons.math3.stat.Frequency.NaturalComparator#compare(Comparable<T extends Comparable>,Comparable<T extends Comparable>)"
    ],
    "org.apache.commons.math3.analysis.integration.MidPointIntegrator#MidPointIntegrator()": [
        "org.apache.commons.math3.analysis.integration.MidPointIntegrator.<staticinit>()",
        "org.apache.commons.math3.analysis.integration.MidPointIntegrator.<init>()",
        "org.apache.commons.math3.analysis.integration.BaseAbstractUnivariateIntegrator#BaseAbstractUnivariateIntegrator(int,int)",
        "org.apache.commons.math3.analysis.integration.BaseAbstractUnivariateIntegrator.<staticinit>()"
    ],
    "org.apache.commons.math3.distribution.LaplaceDistribution#cumulativeProbability(double)": ["org.apache.commons.math3.util.FastMath.exp(double)"],
    "org.apache.commons.math3.optimization.linear.NoFeasibleSolutionException#NoFeasibleSolutionException()": [
        "org.apache.commons.math3.optimization.linear.NoFeasibleSolutionException.<init>()",
        "org.apache.commons.math3.exception.util.LocalizedFormats.<staticinit>()"
    ],
    "org.apache.commons.math3.optim.linear.SimplexTableau#getArtificialVariableOffset()": ["org.apache.commons.math3.optim.linear.SimplexTableau#getNumObjectiveFunctions()"],
    "org.apache.commons.math3.util.MathArrays.equals(float[],float[])": ["org.apache.commons.math3.util.Precision.equals(float,float)"],
    "org.apache.commons.math3.userguide.genetics.RandomPolygonMutation#RandomPolygonMutation(float,float)": ["org.apache.commons.math3.userguide.genetics.RandomPolygonMutation.<init>()"],
    "org.apache.commons.math3.stat.regression.RegressionResults#getMeanSquareError()": ["org.apache.commons.math3.stat.regression.RegressionResults.<staticinit>()"],
    "org.apache.commons.math3.optimization.general.AbstractLeastSquaresOptimizer#getWeightSquareRoot()": [
        "org.apache.commons.math3.linear.Array2DRowRealMatrix#copy()",
        "org.apache.commons.math3.linear.BlockRealMatrix#copy()",
        "org.apache.commons.math3.linear.DiagonalMatrix#copy()",
        "org.apache.commons.math3.linear.OpenMapRealMatrix#copy()"
    ],
    "org.apache.commons.math3.random.EmpiricalDistribution#fillBinStats(DataAdapter)": [
        "org.apache.commons.math3.random.EmpiricalDistribution.StreamDataAdapter#computeBinStats()",
        "org.apache.commons.math3.stat.descriptive.SummaryStatistics#getMax()",
        "org.apache.commons.math3.stat.descriptive.SynchronizedSummaryStatistics#getMin()",
        "org.apache.commons.math3.stat.descriptive.SynchronizedSummaryStatistics#getN()",
        "org.apache.commons.math3.random.EmpiricalDistribution.ArrayDataAdapter#computeBinStats()",
        "org.apache.commons.math3.stat.descriptive.SynchronizedSummaryStatistics#getMax()",
        "org.apache.commons.math3.stat.descriptive.SummaryStatistics#getN()",
        "org.apache.commons.math3.stat.descriptive.SummaryStatistics#SummaryStatistics()",
        "org.apache.commons.math3.stat.descriptive.SummaryStatistics#getMin()"
    ],
    "org.apache.commons.math3.linear.DiagonalMatrix#preMultiply(double[])": ["org.apache.commons.math3.linear.DiagonalMatrix#operate(double[])"],
    "org.apache.commons.math3.geometry.euclidean.threed.RotationConvention.<staticinit>()": ["org.apache.commons.math3.geometry.euclidean.threed.Vector3D.<staticinit>()"],
    "org.apache.commons.math3.linear.AbstractRealMatrix#getNorm()$RealMatrixPreservingVisitor$1#visit(int,int,double)": [
        "org.apache.commons.math3.util.FastMath.max(double,double)",
        "org.apache.commons.math3.util.FastMath.abs(double)"
    ],
    "org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.Edge#Edge(Vertex,Vertex,Line)": [
        "org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.Edge.<init>()",
        "org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.Vertex#setIncoming(Edge)",
        "org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.Vertex#setOutgoing(Edge)"
    ],
    "org.apache.commons.math3.analysis.differentiation.DerivativeStructure#cosh()": [
        "org.apache.commons.math3.analysis.differentiation.DerivativeStructure#DerivativeStructure(DSCompiler)",
        "org.apache.commons.math3.analysis.differentiation.DSCompiler#cosh(double[],int,double[],int)"
    ],
    "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer.FitnessFunction#isFeasible(double[])": [
        "org.apache.commons.math3.optim.BaseMultivariateOptimizer#getLowerBound()",
        "org.apache.commons.math3.optim.BaseMultivariateOptimizer#getUpperBound()"
    ],
    "org.apache.commons.math3.optim.nonlinear.vector.Weight#Weight(double[])": [
        "org.apache.commons.math3.optim.nonlinear.vector.Weight.<init>()",
        "org.apache.commons.math3.linear.DiagonalMatrix#DiagonalMatrix(double[])"
    ],
    "org.apache.commons.math3.analysis.polynomials.PolynomialsUtils.createJacobiPolynomial(int,int,int)$RecurrenceCoefficientsGenerator$1#generate(int)": ["org.apache.commons.math3.fraction.BigFraction#BigFraction(int,int)"],
    "org.apache.commons.math3.optim.linear.SimplexSolver#optimize(OptimizationData[]...)": ["org.apache.commons.math3.optim.linear.LinearOptimizer#optimize(OptimizationData[]...)"],
    "org.apache.commons.math3.geometry.euclidean.oned.Vector1D#toString(NumberFormat)": [
        "org.apache.commons.math3.geometry.euclidean.oned.Vector1DFormat#Vector1DFormat(NumberFormat)",
        "org.apache.commons.math3.geometry.VectorFormat#format(Vector<S extends Space>)"
    ],
    "org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D#FieldVector3D(T extends RealFieldElement[])": [
        "org.apache.commons.math3.exception.DimensionMismatchException#DimensionMismatchException(int,int)",
        "org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D.<init>()"
    ],
    "org.apache.commons.math3.geometry.euclidean.threed.SphericalCoordinates#SphericalCoordinates(double,double,double)": [
        "org.apache.commons.math3.util.FastMath.sin(double)",
        "org.apache.commons.math3.geometry.euclidean.threed.Vector3D#Vector3D(double,double,double)",
        "org.apache.commons.math3.geometry.euclidean.threed.SphericalCoordinates.<init>()",
        "org.apache.commons.math3.util.FastMath.cos(double)"
    ],
    "org.apache.commons.math3.geometry.partitioning.BoundaryBuilder#visitOrder(BSPTree<S extends Space>)": ["org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor.Order.<staticinit>()"],
    "org.apache.commons.math3.optimization.direct.BaseAbstractMultivariateVectorOptimizer#optimize(int,FUNC extends MultivariateVectorFunction,double[],double[],double[])": ["org.apache.commons.math3.optimization.direct.BaseAbstractMultivariateVectorOptimizer#optimizeInternal(int,FUNC extends MultivariateVectorFunction,double[],double[],double[])"],
    "org.apache.commons.math3.distribution.PoissonDistribution#PoissonDistribution(double,double)": [
        "org.apache.commons.math3.distribution.PoissonDistribution.<staticinit>()",
        "org.apache.commons.math3.distribution.PoissonDistribution#PoissonDistribution(double,double,int)"
    ],
    "org.apache.commons.math3.dfp.Dfp#negativeOrNull()": [
        "org.apache.commons.math3.dfp.DfpDec#newInstance(Dfp)",
        "org.apache.commons.math3.dfp.Dfp.<staticinit>()",
        "org.apache.commons.math3.dfp.Dfp#dotrap(int,String,Dfp,Dfp)",
        "org.apache.commons.math3.dfp.Dfp#newInstance(Dfp)",
        "org.apache.commons.math3.dfp.DfpField.<staticinit>()",
        "org.apache.commons.math3.dfp.DfpField#setIEEEFlagsBits(int)",
        "org.apache.commons.math3.dfp.Dfp#isNaN()",
        "org.apache.commons.math3.dfp.Dfp#getZero()",
        "org.apache.commons.math3.dfp.Dfp#isInfinite()"
    ],
    "org.apache.commons.math3.linear.AbstractFieldMatrix#getRow(int)": [
        "org.apache.commons.math3.linear.SparseFieldMatrix#getEntry(int,int)",
        "org.apache.commons.math3.linear.SparseFieldMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.BlockFieldMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.Array2DRowFieldMatrix#getEntry(int,int)",
        "org.apache.commons.math3.linear.BlockFieldMatrix#getEntry(int,int)",
        "org.apache.commons.math3.util.MathArrays.buildArray(Field<T>,int)",
        "org.apache.commons.math3.linear.AbstractFieldMatrix#checkRowIndex(int)",
        "org.apache.commons.math3.linear.Array2DRowFieldMatrix#getColumnDimension()"
    ],
    "org.apache.commons.math3.linear.BlockRealMatrix#getEntry(int,int)": [
        "org.apache.commons.math3.linear.MatrixUtils.checkMatrixIndex(AnyMatrix,int,int)",
        "org.apache.commons.math3.linear.BlockRealMatrix.<staticinit>()",
        "org.apache.commons.math3.linear.BlockRealMatrix#blockWidth(int)"
    ],
    "org.apache.commons.math3.ode.AbstractIntegrator#addEventHandler(EventHandler,double,double,int,UnivariateSolver)": ["org.apache.commons.math3.ode.events.EventState#EventState(EventHandler,double,double,int,UnivariateSolver)"],
    "org.apache.commons.math3.optim.linear.SimplexTableau#subtractRow(int,int,double)": [
        "org.apache.commons.math3.optim.linear.SimplexTableau#getRow(int)",
        "org.apache.commons.math3.optim.linear.SimplexTableau#getWidth()"
    ],
    "org.apache.commons.math3.analysis.interpolation.LoessInterpolator#LoessInterpolator(double,int)": [
        "org.apache.commons.math3.analysis.interpolation.LoessInterpolator.<staticinit>()",
        "org.apache.commons.math3.analysis.interpolation.LoessInterpolator#LoessInterpolator(double,int,double)"
    ],
    "org.apache.commons.math3.optimization.direct.BaseAbstractMultivariateOptimizer#optimize(int,FUNC extends MultivariateFunction,GoalType,OptimizationData[]...)": ["org.apache.commons.math3.optimization.direct.BaseAbstractMultivariateOptimizer#optimizeInternal(int,FUNC extends MultivariateFunction,GoalType,OptimizationData[]...)"],
    "org.apache.commons.math3.analysis.function.Acos#value(DerivativeStructure)": ["org.apache.commons.math3.analysis.differentiation.DerivativeStructure#acos()"],
    "org.apache.commons.math3.util.ArithmeticUtils.pow(int,int)": [
        "org.apache.commons.math3.util.ArithmeticUtils.mulAndCheck(int,int)",
        "org.apache.commons.math3.exception.MathArithmeticException#getContext()",
        "org.apache.commons.math3.exception.util.LocalizedFormats.<staticinit>()"
    ],
    "org.apache.commons.math3.linear.Array2DRowFieldMatrix#walkInRowOrder(FieldMatrixChangingVisitor<T extends FieldElement>,int,int,int,int)": [
        "org.apache.commons.math3.linear.DefaultFieldMatrixChangingVisitor#start(int,int,int,int,int,int)",
        "org.apache.commons.math3.linear.DefaultFieldMatrixChangingVisitor#visit(int,int,T extends FieldElement)",
        "org.apache.commons.math3.linear.Array2DRowFieldMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.AbstractFieldMatrix#checkSubMatrixIndex(int,int,int,int)",
        "org.apache.commons.math3.linear.AbstractFieldMatrix#getSubMatrix(int[],int[])$DefaultFieldMatrixChangingVisitor$1#visit(int,int,T extends FieldElement)",
        "org.apache.commons.math3.linear.DefaultFieldMatrixChangingVisitor#end()",
        "org.apache.commons.math3.linear.Array2DRowFieldMatrix#getColumnDimension()"
    ],
    "org.apache.commons.math3.stat.descriptive.rank.Percentile.EstimationType$EstimationType$1.<init>()": ["org.apache.commons.math3.stat.descriptive.rank.Percentile.EstimationType#EstimationType(String)"],
    "org.apache.commons.math3.linear.BlockRealMatrix#transpose()": [
        "org.apache.commons.math3.linear.BlockRealMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.BlockRealMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.BlockRealMatrix.<staticinit>()",
        "org.apache.commons.math3.util.FastMath.min(int,int)",
        "org.apache.commons.math3.linear.BlockRealMatrix#BlockRealMatrix(int,int)"
    ],
    "org.apache.commons.math3.stat.regression.SimpleRegression#getMeanSquareError()": ["org.apache.commons.math3.stat.regression.SimpleRegression#getSumSquaredErrors()"],
    "org.apache.commons.math3.linear.JacobiPreconditioner#sqrt()$RealLinearOperator$1#getColumnDimension()": [
        "org.apache.commons.math3.linear.ArrayRealVector#getDimension()",
        "org.apache.commons.math3.linear.OpenMapRealVector#getDimension()",
        "org.apache.commons.math3.linear.RealVector.unmodifiableRealVector(RealVector)$RealVector$1#getDimension()"
    ],
    "org.apache.commons.math3.random.RandomGeneratorFactory.createRandomGenerator(Random)$RandomGenerator$1#setSeed(int[])": [
        "org.apache.commons.math3.random.RandomGeneratorFactory.convertToLong(int[])",
        "org.apache.commons.math3.random.JDKRandomGenerator#setSeed(int)",
        "org.apache.commons.math3.random.RandomAdaptor#setSeed(long)"
    ],
    "org.apache.commons.math3.ml.clustering.KMeansPlusPlusClusterer#assignPointsToClusters(List<CentroidCluster<T extends Clusterable>>,Collection<T extends Clusterable>,int[])": [
        "org.apache.commons.math3.ml.clustering.KMeansPlusPlusClusterer#getNearestCluster(Collection<CentroidCluster<T extends Clusterable>>,T extends Clusterable)",
        "org.apache.commons.math3.ml.clustering.Cluster#addPoint(T extends Clusterable)"
    ],
    "org.apache.commons.math3.linear.OpenMapRealVector#append(RealVector)": [
        "org.apache.commons.math3.linear.OpenMapRealVector#getDimension()",
        "org.apache.commons.math3.linear.ArrayRealVector#getDimension()",
        "org.apache.commons.math3.linear.OpenMapRealVector#append(OpenMapRealVector)",
        "org.apache.commons.math3.linear.OpenMapRealVector#setEntry(int,double)",
        "org.apache.commons.math3.linear.OpenMapRealVector#OpenMapRealVector(OpenMapRealVector,int)",
        "org.apache.commons.math3.linear.RealVector.unmodifiableRealVector(RealVector)$RealVector$1#getDimension()",
        "org.apache.commons.math3.linear.ArrayRealVector#getEntry(int)",
        "org.apache.commons.math3.linear.OpenMapRealVector#getEntry(int)",
        "org.apache.commons.math3.linear.RealVector.unmodifiableRealVector(RealVector)$RealVector$1#getEntry(int)"
    ],
    "org.apache.commons.math3.analysis.interpolation.SmoothingPolynomialBicubicSplineInterpolator#SmoothingPolynomialBicubicSplineInterpolator(int,int)": [
        "org.apache.commons.math3.optim.SimpleVectorValueChecker#SimpleVectorValueChecker(double,double)",
        "org.apache.commons.math3.fitting.PolynomialFitter#PolynomialFitter(MultivariateVectorOptimizer)",
        "org.apache.commons.math3.util.Precision.<staticinit>()",
        "org.apache.commons.math3.analysis.interpolation.BicubicSplineInterpolator#BicubicSplineInterpolator()",
        "org.apache.commons.math3.optim.nonlinear.vector.jacobian.GaussNewtonOptimizer#GaussNewtonOptimizer(boolean,ConvergenceChecker<PointVectorValuePair>)",
        "org.apache.commons.math3.analysis.interpolation.SmoothingPolynomialBicubicSplineInterpolator.<init>()"
    ],
    "org.apache.commons.math3.stat.descriptive.SummaryStatistics#toString()": [
        "org.apache.commons.math3.stat.descriptive.SummaryStatistics#getVariance()",
        "org.apache.commons.math3.stat.descriptive.SummaryStatistics#getMax()",
        "org.apache.commons.math3.stat.descriptive.SynchronizedSummaryStatistics#getMin()",
        "org.apache.commons.math3.stat.descriptive.SynchronizedSummaryStatistics#getSum()",
        "org.apache.commons.math3.stat.descriptive.SynchronizedSummaryStatistics#getStandardDeviation()",
        "org.apache.commons.math3.stat.descriptive.SummaryStatistics#getSum()",
        "org.apache.commons.math3.stat.descriptive.SummaryStatistics#getMean()",
        "org.apache.commons.math3.stat.descriptive.SynchronizedSummaryStatistics#getVariance()",
        "org.apache.commons.math3.stat.descriptive.SynchronizedSummaryStatistics#getGeometricMean()",
        "org.apache.commons.math3.stat.descriptive.SynchronizedSummaryStatistics#getSumsq()",
        "org.apache.commons.math3.stat.descriptive.SummaryStatistics#getN()",
        "org.apache.commons.math3.stat.descriptive.SummaryStatistics#getSecondMoment()",
        "org.apache.commons.math3.stat.descriptive.SynchronizedSummaryStatistics#getPopulationVariance()",
        "org.apache.commons.math3.stat.descriptive.SummaryStatistics#getStandardDeviation()",
        "org.apache.commons.math3.stat.descriptive.SummaryStatistics#getSumsq()",
        "org.apache.commons.math3.stat.descriptive.SummaryStatistics#getSumOfLogs()",
        "org.apache.commons.math3.stat.descriptive.SynchronizedSummaryStatistics#getN()",
        "org.apache.commons.math3.stat.descriptive.SummaryStatistics#getGeometricMean()",
        "org.apache.commons.math3.stat.descriptive.SynchronizedSummaryStatistics#getMax()",
        "org.apache.commons.math3.stat.descriptive.SynchronizedSummaryStatistics#getMean()",
        "org.apache.commons.math3.stat.descriptive.SummaryStatistics#getMin()",
        "org.apache.commons.math3.stat.descriptive.SummaryStatistics#getPopulationVariance()"
    ],
    "org.apache.commons.math3.geometry.euclidean.twod.Line.LineTransform#LineTransform(double,double,double,double,double,double)": [
        "org.apache.commons.math3.util.MathArrays.linearCombination(double,double,double,double)",
        "org.apache.commons.math3.util.FastMath.abs(double)",
        "org.apache.commons.math3.exception.util.LocalizedFormats.<staticinit>()",
        "org.apache.commons.math3.geometry.euclidean.twod.Line.LineTransform.<init>()"
    ],
    "org.apache.commons.math3.geometry.spherical.twod.SphericalPolygonsSet.createRegularPolygonVertices(Vector3D,Vector3D,double,int)": [
        "org.apache.commons.math3.util.MathUtils.<staticinit>()",
        "org.apache.commons.math3.geometry.euclidean.threed.Rotation#applyTo(Vector3D)",
        "org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(Vector3D,Vector3D)",
        "org.apache.commons.math3.geometry.euclidean.threed.Rotation#Rotation(Vector3D,double,RotationConvention)",
        "org.apache.commons.math3.geometry.spherical.twod.S2Point#S2Point(Vector3D)",
        "org.apache.commons.math3.geometry.euclidean.threed.RotationConvention.<staticinit>()",
        "org.apache.commons.math3.geometry.spherical.twod.S2Point#getVector()"
    ],
    "org.apache.commons.math3.stat.descriptive.AggregateSummaryStatistics.AggregatingSummaryStatistics#equals(Object)": [
        "org.apache.commons.math3.stat.descriptive.SynchronizedSummaryStatistics#equals(Object)",
        "org.apache.commons.math3.stat.descriptive.SummaryStatistics#equals(Object)",
        "org.apache.commons.math3.stat.descriptive.AggregateSummaryStatistics.AggregatingSummaryStatistics#equals(Object)"
    ],
    "org.apache.commons.math3.linear.Array2DRowRealMatrix#addToEntry(int,int,double)": ["org.apache.commons.math3.linear.MatrixUtils.checkMatrixIndex(AnyMatrix,int,int)"],
    "org.apache.commons.math3.linear.SparseFieldMatrix#setEntry(int,int,T extends FieldElement)": [
        "org.apache.commons.math3.util.BigRealField#getZero()",
        "org.apache.commons.math3.analysis.differentiation.SparseGradient#getField()$Field$1#getZero()",
        "org.apache.commons.math3.util.Decimal64Field#getZero()",
        "org.apache.commons.math3.dfp.DfpField#getZero()",
        "org.apache.commons.math3.linear.AbstractFieldMatrix#getField()",
        "org.apache.commons.math3.analysis.differentiation.DerivativeStructure#getField()$Field$1#getZero()",
        "org.apache.commons.math3.util.OpenIntToFieldHashMap#remove(int)",
        "org.apache.commons.math3.fraction.FractionField#getZero()",
        "org.apache.commons.math3.complex.ComplexField#getZero()",
        "org.apache.commons.math3.linear.SparseFieldMatrix#computeKey(int,int)",
        "org.apache.commons.math3.fraction.BigFractionField#getZero()",
        "org.apache.commons.math3.linear.AbstractFieldMatrix#checkColumnIndex(int)",
        "org.apache.commons.math3.util.OpenIntToFieldHashMap#put(int,T extends FieldElement)",
        "org.apache.commons.math3.linear.AbstractFieldMatrix#checkRowIndex(int)"
    ],
    "org.apache.commons.math3.ode.sampling.StepNormalizer#StepNormalizer(double,FixedStepHandler,StepNormalizerBounds)": [
        "org.apache.commons.math3.ode.sampling.StepNormalizerMode.<staticinit>()",
        "org.apache.commons.math3.ode.sampling.StepNormalizer#StepNormalizer(double,FixedStepHandler,StepNormalizerMode,StepNormalizerBounds)"
    ],
    "org.apache.commons.math3.special.Gamma.regularizedGammaQ(double,double,double,int)": [
        "org.apache.commons.math3.special.Gamma.regularizedGammaP(double,double,double,int)",
        "org.apache.commons.math3.util.ContinuedFraction#evaluate(double,double,int)",
        "org.apache.commons.math3.util.FastMath.log(double)",
        "org.apache.commons.math3.special.Gamma.logGamma(double)",
        "org.apache.commons.math3.util.FastMath.exp(double)",
        "org.apache.commons.math3.special.Gamma.regularizedGammaQ(double,double,double,int)$ContinuedFraction$1.<init>()"
    ],
    "org.apache.commons.math3.analysis.differentiation.JacobianFunction#JacobianFunction(MultivariateDifferentiableVectorFunction)": ["org.apache.commons.math3.analysis.differentiation.JacobianFunction.<init>()"],
    "org.apache.commons.math3.geometry.partitioning.BoundaryAttribute#BoundaryAttribute(SubHyperplane<S extends Space>,SubHyperplane<S extends Space>)": ["org.apache.commons.math3.geometry.partitioning.BoundaryAttribute#BoundaryAttribute(SubHyperplane<S extends Space>,SubHyperplane<S extends Space>,NodesSet<S extends Space>)"],
    "org.apache.commons.math3.distribution.TDistribution#TDistribution(double)": [
        "org.apache.commons.math3.distribution.TDistribution#TDistribution(double,double)",
        "org.apache.commons.math3.distribution.TDistribution.<staticinit>()"
    ],
    "org.apache.commons.math3.genetics.RandomKey.decodeGeneric(List<S>,List<Double>,List<Double>)": ["org.apache.commons.math3.exception.DimensionMismatchException#DimensionMismatchException(int,int)"],
    "org.apache.commons.math3.analysis.FunctionUtils.compose(UnivariateDifferentiableFunction[]...)$UnivariateDifferentiableFunction$1#value(DerivativeStructure)": [
        "org.apache.commons.math3.analysis.polynomials.PolynomialFunctionNewtonForm#value(DerivativeStructure)",
        "org.apache.commons.math3.analysis.function.HarmonicOscillator#value(DerivativeStructure)",
        "org.apache.commons.math3.analysis.function.Power#value(DerivativeStructure)",
        "org.apache.commons.math3.analysis.function.Exp#value(DerivativeStructure)",
        "org.apache.commons.math3.analysis.function.Minus#value(DerivativeStructure)",
        "org.apache.commons.math3.analysis.function.Logit#value(DerivativeStructure)",
        "org.apache.commons.math3.analysis.FunctionUtils.multiply(UnivariateDifferentiableFunction[]...)$UnivariateDifferentiableFunction$1#value(DerivativeStructure)",
        "org.apache.commons.math3.analysis.function.Cosh#value(DerivativeStructure)",
        "org.apache.commons.math3.analysis.function.Sqrt#value(DerivativeStructure)",
        "org.apache.commons.math3.analysis.function.Gaussian#value(DerivativeStructure)",
        "org.apache.commons.math3.analysis.function.Cos#value(DerivativeStructure)",
        "org.apache.commons.math3.analysis.FunctionUtils.compose(UnivariateDifferentiableFunction[]...)$UnivariateDifferentiableFunction$1#value(DerivativeStructure)",
        "org.apache.commons.math3.analysis.function.Log1p#value(DerivativeStructure)",
        "org.apache.commons.math3.analysis.function.Inverse#value(DerivativeStructure)",
        "org.apache.commons.math3.analysis.function.Log10#value(DerivativeStructure)",
        "org.apache.commons.math3.analysis.function.Logistic#value(DerivativeStructure)",
        "org.apache.commons.math3.analysis.FunctionUtils.toUnivariateDifferential(DifferentiableUnivariateFunction)$UnivariateDifferentiableFunction$1#value(DerivativeStructure)",
        "org.apache.commons.math3.analysis.function.Acos#value(DerivativeStructure)",
        "org.apache.commons.math3.analysis.polynomials.PolynomialFunction#value(DerivativeStructure)",
        "org.apache.commons.math3.analysis.FunctionUtils.add(UnivariateDifferentiableFunction[]...)$UnivariateDifferentiableFunction$1#value(DerivativeStructure)",
        "org.apache.commons.math3.analysis.function.Cbrt#value(DerivativeStructure)",
        "org.apache.commons.math3.analysis.function.Atan#value(DerivativeStructure)",
        "org.apache.commons.math3.analysis.function.Sinh#value(DerivativeStructure)",
        "org.apache.commons.math3.analysis.function.Constant#value(DerivativeStructure)",
        "org.apache.commons.math3.analysis.function.Atanh#value(DerivativeStructure)",
        "org.apache.commons.math3.analysis.function.Sinc#value(DerivativeStructure)",
        "org.apache.commons.math3.analysis.function.Acosh#value(DerivativeStructure)",
        "org.apache.commons.math3.analysis.function.Tan#value(DerivativeStructure)",
        "org.apache.commons.math3.analysis.function.Identity#value(DerivativeStructure)",
        "org.apache.commons.math3.analysis.function.Asinh#value(DerivativeStructure)",
        "org.apache.commons.math3.analysis.function.Sin#value(DerivativeStructure)",
        "org.apache.commons.math3.analysis.function.Sigmoid#value(DerivativeStructure)",
        "org.apache.commons.math3.analysis.function.Asin#value(DerivativeStructure)",
        "org.apache.commons.math3.analysis.differentiation.FiniteDifferencesDifferentiator#differentiate(UnivariateFunction)$UnivariateDifferentiableFunction$1#value(DerivativeStructure)",
        "org.apache.commons.math3.analysis.function.Expm1#value(DerivativeStructure)",
        "org.apache.commons.math3.analysis.polynomials.PolynomialSplineFunction#value(DerivativeStructure)",
        "org.apache.commons.math3.analysis.function.Tanh#value(DerivativeStructure)",
        "org.apache.commons.math3.analysis.function.Log#value(DerivativeStructure)"
    ],
    "org.apache.commons.math3.distribution.EnumeratedRealDistribution#EnumeratedRealDistribution(double[],double[])": [
        "org.apache.commons.math3.random.Well19937c#Well19937c()",
        "org.apache.commons.math3.distribution.EnumeratedRealDistribution#EnumeratedRealDistribution(RandomGenerator,double[],double[])"
    ],
    "org.apache.commons.math3.linear.Array2DRowRealMatrix#walkInColumnOrder(RealMatrixPreservingVisitor,int,int,int,int)": [
        "org.apache.commons.math3.linear.DefaultRealMatrixPreservingVisitor#start(int,int,int,int,int,int)",
        "org.apache.commons.math3.linear.Array2DRowRealMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.AbstractRealMatrix#copySubMatrix(int,int,int,int,double[][])$DefaultRealMatrixPreservingVisitor$1#start(int,int,int,int,int,int)",
        "org.apache.commons.math3.linear.DefaultRealMatrixPreservingVisitor#visit(int,int,double)",
        "org.apache.commons.math3.linear.SingularValueDecomposition#getCovariance(double)$DefaultRealMatrixPreservingVisitor$1#visit(int,int,double)",
        "org.apache.commons.math3.linear.AbstractRealMatrix#getNorm()$RealMatrixPreservingVisitor$1#end()",
        "org.apache.commons.math3.linear.AbstractRealMatrix#getFrobeniusNorm()$RealMatrixPreservingVisitor$1#end()",
        "org.apache.commons.math3.linear.AbstractRealMatrix#getFrobeniusNorm()$RealMatrixPreservingVisitor$1#visit(int,int,double)",
        "org.apache.commons.math3.linear.AbstractRealMatrix#getFrobeniusNorm()$RealMatrixPreservingVisitor$1#start(int,int,int,int,int,int)",
        "org.apache.commons.math3.linear.DefaultRealMatrixPreservingVisitor#end()",
        "org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator.Corrector#start(int,int,int,int,int,int)",
        "org.apache.commons.math3.linear.AbstractRealMatrix#getNorm()$RealMatrixPreservingVisitor$1#visit(int,int,double)",
        "org.apache.commons.math3.linear.AbstractRealMatrix#copySubMatrix(int,int,int,int,double[][])$DefaultRealMatrixPreservingVisitor$1#visit(int,int,double)",
        "org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator.Corrector#visit(int,int,double)",
        "org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator.Corrector#end()",
        "org.apache.commons.math3.linear.Array2DRowRealMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.MatrixUtils.checkSubMatrixIndex(AnyMatrix,int,int,int,int)",
        "org.apache.commons.math3.linear.AbstractRealMatrix#getNorm()$RealMatrixPreservingVisitor$1#start(int,int,int,int,int,int)",
        "org.apache.commons.math3.linear.AbstractRealMatrix#transpose()$DefaultRealMatrixPreservingVisitor$1#visit(int,int,double)"
    ],
    "org.apache.commons.math3.ml.clustering.evaluation.ClusterEvaluator#centroidOf(Cluster<T extends Clusterable>)": [
        "org.apache.commons.math3.ml.clustering.Cluster#getPoints()",
        "org.apache.commons.math3.ml.clustering.CentroidCluster#getCenter()",
        "org.apache.commons.math3.ml.clustering.DoublePoint#DoublePoint(double[])"
    ],
    "org.apache.commons.math3.optim.nonlinear.scalar.MultiStartMultivariateOptimizer#getPairComparator()$Comparator$1#compare(PointValuePair,PointValuePair)": [
        "org.apache.commons.math3.optim.nonlinear.scalar.GoalType.<staticinit>()",
        "org.apache.commons.math3.optim.nonlinear.scalar.MultivariateOptimizer#getGoalType()",
        "org.apache.commons.math3.util.Pair#getValue()",
        "org.apache.commons.math3.optim.PointVectorValuePair#getValue()",
        "org.apache.commons.math3.optimization.PointVectorValuePair#getValue()"
    ],
    "org.apache.commons.math3.exception.MathUnsupportedOperationException#getMessage()": ["org.apache.commons.math3.exception.util.ExceptionContext#getMessage()"],
    "org.apache.commons.math3.geometry.euclidean.twod.hull.ConvexHull2D#ConvexHull2D(Vector2D[],double)": [
        "org.apache.commons.math3.geometry.euclidean.twod.hull.ConvexHull2D#isConvex(Vector2D[])",
        "org.apache.commons.math3.geometry.euclidean.twod.hull.ConvexHull2D.<init>()",
        "org.apache.commons.math3.exception.util.LocalizedFormats.<staticinit>()"
    ],
    "org.apache.commons.math3.analysis.differentiation.SparseGradient#multiply(int)": ["org.apache.commons.math3.analysis.differentiation.SparseGradient#SparseGradient(double,double,Map<Integer, Double>)"],
    "org.apache.commons.math3.genetics.CycleCrossover#mate(AbstractListChromosome<T>,AbstractListChromosome<T>)": [
        "org.apache.commons.math3.exception.DimensionMismatchException#DimensionMismatchException(int,int)",
        "org.apache.commons.math3.genetics.AbstractListChromosome#getRepresentation()",
        "org.apache.commons.math3.genetics.ChromosomePair#ChromosomePair(Chromosome,Chromosome)",
        "org.apache.commons.math3.genetics.GeneticAlgorithm.getRandomGenerator()",
        "org.apache.commons.math3.random.RandomGeneratorFactory.createRandomGenerator(Random)$RandomGenerator$1#nextInt(int)",
        "org.apache.commons.math3.random.BitsStreamGenerator#nextInt(int)",
        "org.apache.commons.math3.random.AbstractRandomGenerator#nextInt(int)",
        "org.apache.commons.math3.random.SynchronizedRandomGenerator#nextInt(int)",
        "org.apache.commons.math3.random.RandomAdaptor#nextInt(int)",
        "org.apache.commons.math3.genetics.AbstractListChromosome#getLength()"
    ],
    "org.apache.commons.math3.geometry.euclidean.twod.DiskGenerator#minor(BigFraction[],BigFraction[])": [
        "org.apache.commons.math3.fraction.BigFraction#subtract(BigFraction)",
        "org.apache.commons.math3.fraction.BigFraction#add(BigFraction)",
        "org.apache.commons.math3.fraction.BigFraction#multiply(BigFraction)"
    ],
    "org.apache.commons.math3.distribution.FDistribution#logDensity(double)": [
        "org.apache.commons.math3.util.FastMath.log(double)",
        "org.apache.commons.math3.special.Beta.logBeta(double,double)"
    ],
    "org.apache.commons.math3.stat.descriptive.DescriptiveStatistics#removeMostRecentValue()": [
        "org.apache.commons.math3.util.ResizableDoubleArray#discardMostRecentElements(int)",
        "org.apache.commons.math3.exception.util.LocalizedFormats.<staticinit>()"
    ],
    "org.apache.commons.math3.ode.sampling.AbstractFieldStepInterpolator#getInterpolatedState(T extends RealFieldElement)": [
        "org.apache.commons.math3.ode.nonstiff.GillFieldStepInterpolator#computeInterpolatedStateAndDerivatives(FieldEquationsMapper<T extends RealFieldElement>,T extends RealFieldElement,T extends RealFieldElement,T extends RealFieldElement,T extends RealFieldElement)",
        "org.apache.commons.math3.ode.nonstiff.AdamsFieldStepInterpolator#computeInterpolatedStateAndDerivatives(FieldEquationsMapper<T extends RealFieldElement>,T extends RealFieldElement,T extends RealFieldElement,T extends RealFieldElement,T extends RealFieldElement)",
        "org.apache.commons.math3.ode.nonstiff.DormandPrince54FieldStepInterpolator#computeInterpolatedStateAndDerivatives(FieldEquationsMapper<T extends RealFieldElement>,T extends RealFieldElement,T extends RealFieldElement,T extends RealFieldElement,T extends RealFieldElement)",
        "org.apache.commons.math3.ode.nonstiff.DormandPrince853FieldStepInterpolator#computeInterpolatedStateAndDerivatives(FieldEquationsMapper<T extends RealFieldElement>,T extends RealFieldElement,T extends RealFieldElement,T extends RealFieldElement,T extends RealFieldElement)",
        "org.apache.commons.math3.ode.nonstiff.HighamHall54FieldStepInterpolator#computeInterpolatedStateAndDerivatives(FieldEquationsMapper<T extends RealFieldElement>,T extends RealFieldElement,T extends RealFieldElement,T extends RealFieldElement,T extends RealFieldElement)",
        "org.apache.commons.math3.ode.nonstiff.MidpointFieldStepInterpolator#computeInterpolatedStateAndDerivatives(FieldEquationsMapper<T extends RealFieldElement>,T extends RealFieldElement,T extends RealFieldElement,T extends RealFieldElement,T extends RealFieldElement)",
        "org.apache.commons.math3.ode.nonstiff.ThreeEighthesFieldStepInterpolator#computeInterpolatedStateAndDerivatives(FieldEquationsMapper<T extends RealFieldElement>,T extends RealFieldElement,T extends RealFieldElement,T extends RealFieldElement,T extends RealFieldElement)",
        "org.apache.commons.math3.ode.nonstiff.ClassicalRungeKuttaFieldStepInterpolator#computeInterpolatedStateAndDerivatives(FieldEquationsMapper<T extends RealFieldElement>,T extends RealFieldElement,T extends RealFieldElement,T extends RealFieldElement,T extends RealFieldElement)",
        "org.apache.commons.math3.ode.FieldODEState#getTime()",
        "org.apache.commons.math3.ode.nonstiff.LutherFieldStepInterpolator#computeInterpolatedStateAndDerivatives(FieldEquationsMapper<T extends RealFieldElement>,T extends RealFieldElement,T extends RealFieldElement,T extends RealFieldElement,T extends RealFieldElement)",
        "org.apache.commons.math3.ode.nonstiff.EulerFieldStepInterpolator#computeInterpolatedStateAndDerivatives(FieldEquationsMapper<T extends RealFieldElement>,T extends RealFieldElement,T extends RealFieldElement,T extends RealFieldElement,T extends RealFieldElement)"
    ],
    "org.apache.commons.math3.linear.EigenDecomposition.Solver#solve(RealMatrix)": [
        "org.apache.commons.math3.linear.DiagonalMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.Array2DRowRealMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.BlockFieldMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.SparseFieldMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.DiagonalMatrix#getEntry(int,int)",
        "org.apache.commons.math3.linear.OpenMapRealMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.SingularMatrixException#SingularMatrixException()",
        "org.apache.commons.math3.linear.ArrayRealVector#getDataRef()",
        "org.apache.commons.math3.linear.OpenMapRealMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.DiagonalMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.ArrayRealVector#getEntry(int)",
        "org.apache.commons.math3.linear.OpenMapRealMatrix#getEntry(int,int)",
        "org.apache.commons.math3.linear.Array2DRowFieldMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.Array2DRowRealMatrix#Array2DRowRealMatrix(double[][],boolean)",
        "org.apache.commons.math3.linear.BlockRealMatrix#getEntry(int,int)",
        "org.apache.commons.math3.linear.SparseFieldMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.BlockFieldMatrix#getRowDimension()",
        "org.apache.commons.math3.exception.DimensionMismatchException#DimensionMismatchException(int,int)",
        "org.apache.commons.math3.linear.BlockRealMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.Array2DRowRealMatrix#getEntry(int,int)",
        "org.apache.commons.math3.linear.Array2DRowRealMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.Array2DRowFieldMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.BlockRealMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.EigenDecomposition.Solver#isNonSingular()"
    ],
    "org.apache.commons.math3.stat.descriptive.SynchronizedSummaryStatistics#setVarianceImpl(StorelessUnivariateStatistic)": ["org.apache.commons.math3.stat.descriptive.SummaryStatistics#setVarianceImpl(StorelessUnivariateStatistic)"],
    "org.apache.commons.math3.fraction.BigFraction#subtract(BigFraction)": [
        "org.apache.commons.math3.fraction.BigFraction#negate()",
        "org.apache.commons.math3.fraction.BigFraction#BigFraction(BigInteger,BigInteger)",
        "org.apache.commons.math3.exception.util.LocalizedFormats.<staticinit>()"
    ],
    "org.apache.commons.math3.analysis.polynomials.PolynomialsUtils.computeUpToDegree(int,int,RecurrenceCoefficientsGenerator,List<BigFraction>)": [
        "org.apache.commons.math3.analysis.polynomials.PolynomialsUtils.createLegendrePolynomial(int)$RecurrenceCoefficientsGenerator$1#generate(int)",
        "org.apache.commons.math3.fraction.BigFraction#subtract(BigFraction)",
        "org.apache.commons.math3.analysis.polynomials.PolynomialsUtils.createLaguerrePolynomial(int)$RecurrenceCoefficientsGenerator$1#generate(int)",
        "org.apache.commons.math3.fraction.BigFraction#multiply(BigFraction)",
        "org.apache.commons.math3.analysis.polynomials.PolynomialsUtils.createJacobiPolynomial(int,int,int)$RecurrenceCoefficientsGenerator$1#generate(int)",
        "org.apache.commons.math3.analysis.polynomials.PolynomialsUtils.createHermitePolynomial(int)$RecurrenceCoefficientsGenerator$1#generate(int)",
        "org.apache.commons.math3.analysis.polynomials.PolynomialsUtils.createChebyshevPolynomial(int)$RecurrenceCoefficientsGenerator$1#generate(int)",
        "org.apache.commons.math3.fraction.BigFraction#add(BigFraction)"
    ],
    "org.apache.commons.math3.ml.neuralnet.twod.util.QuantizationError#QuantizationError(DistanceMeasure)": ["org.apache.commons.math3.ml.neuralnet.twod.util.QuantizationError.<init>()"],
    "org.apache.commons.math3.linear.DiagonalMatrix#DiagonalMatrix(double[],boolean)": [
        "org.apache.commons.math3.linear.AbstractRealMatrix#AbstractRealMatrix()",
        "org.apache.commons.math3.linear.DiagonalMatrix.<init>()",
        "org.apache.commons.math3.util.MathUtils.checkNotNull(Object)"
    ],
    "org.apache.commons.math3.fitting.PolynomialCurveFitter#withStartPoint(double[])": ["org.apache.commons.math3.fitting.PolynomialCurveFitter#PolynomialCurveFitter(double[],int)"],
    "org.apache.commons.math3.util.MathArrays.shuffle(int[])": [
        "org.apache.commons.math3.util.MathArrays.shuffle(int[],RandomGenerator)",
        "org.apache.commons.math3.random.Well19937c#Well19937c()"
    ],
    "org.apache.commons.math3.util.FastMath.log(double,double)": ["org.apache.commons.math3.util.FastMath.log(double)"],
    "org.apache.commons.math3.optim.linear.SimplexTableau#initializeBasicVariables(int)": [
        "org.apache.commons.math3.optim.linear.SimplexTableau#findBasicRow(int)",
        "org.apache.commons.math3.optim.linear.SimplexTableau#getWidth()",
        "org.apache.commons.math3.optim.linear.SimplexTableau#getHeight()"
    ],
    "org.apache.commons.math3.geometry.euclidean.threed.OutlineExtractor#OutlineExtractor(Vector3D,Vector3D)": [
        "org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(Vector3D,Vector3D)",
        "org.apache.commons.math3.geometry.euclidean.threed.OutlineExtractor.<init>()"
    ],
    "org.apache.commons.math3.analysis.differentiation.SparseGradient#log10()": [
        "org.apache.commons.math3.analysis.differentiation.SparseGradient#SparseGradient(double,double,Map<Integer, Double>)",
        "org.apache.commons.math3.util.FastMath.log10(double)",
        "org.apache.commons.math3.util.FastMath.log(double)"
    ],
    "org.apache.commons.math3.geometry.partitioning.Region#checkPoint(Point<S extends Space>)": ["org.apache.commons.math3.geometry.partitioning.Region.Location.<staticinit>()"],
    "org.apache.commons.math3.analysis.solvers.AbstractDifferentiableUnivariateSolver#computeDerivativeObjectiveValue(double)": [
        "org.apache.commons.math3.analysis.FunctionUtils.multiply(DifferentiableUnivariateFunction[]...)$UnivariateFunction$1$UnivariateFunction$1#derivative()$UnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.polynomials.PolynomialSplineFunction#value(double)",
        "org.apache.commons.math3.analysis.function.Gaussian#value(double)",
        "org.apache.commons.math3.analysis.function.Tanh#value(double)",
        "org.apache.commons.math3.analysis.function.Inverse#value(double)",
        "org.apache.commons.math3.analysis.function.HarmonicOscillator#value(double)",
        "org.apache.commons.math3.analysis.FunctionUtils.fix1stArgument(BivariateFunction,double)$UnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.function.Asin#value(double)",
        "org.apache.commons.math3.analysis.function.Asinh#value(double)",
        "org.apache.commons.math3.analysis.FunctionUtils.multiply(UnivariateFunction[]...)$UnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.function.Atan#value(double)",
        "org.apache.commons.math3.analysis.FunctionUtils.toDifferentiableUnivariateFunction(UnivariateDifferentiableFunction)$DifferentiableUnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.function.Cbrt#value(double)",
        "org.apache.commons.math3.analysis.polynomials.PolynomialFunctionLagrangeForm#value(double)",
        "org.apache.commons.math3.analysis.function.Exp#value(double)",
        "org.apache.commons.math3.special.BesselJ#value(double)",
        "org.apache.commons.math3.analysis.solvers.BaseAbstractUnivariateSolver#incrementEvaluationCount()",
        "org.apache.commons.math3.analysis.polynomials.PolynomialFunctionNewtonForm#value(double)",
        "org.apache.commons.math3.analysis.FunctionUtils.add(UnivariateFunction[]...)$UnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.function.Sin#value(double)",
        "org.apache.commons.math3.analysis.function.Cos#value(double)",
        "org.apache.commons.math3.analysis.interpolation.UnivariatePeriodicInterpolator#interpolate(double[],double[])$UnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.function.Log10#value(double)",
        "org.apache.commons.math3.analysis.function.Sqrt#value(double)",
        "org.apache.commons.math3.analysis.function.Log#value(double)",
        "org.apache.commons.math3.analysis.function.Sinc#value(double)",
        "org.apache.commons.math3.ode.events.EventState#evaluateStep(StepInterpolator)$UnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.function.Minus#value(double)",
        "org.apache.commons.math3.analysis.integration.IterativeLegendreGaussIntegrator#stage(int)$UnivariateFunction$1#value(double)",
        "org.apache.commons.math3.optimization.general.NonLinearConjugateGradientOptimizer.LineSearchFunction#value(double)",
        "org.apache.commons.math3.analysis.function.Floor#value(double)",
        "org.apache.commons.math3.analysis.FunctionUtils.multiply(DifferentiableUnivariateFunction[]...)$DifferentiableUnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.FunctionUtils.combine(BivariateFunction,UnivariateFunction,UnivariateFunction)$UnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.FunctionUtils.add(DifferentiableUnivariateFunction[]...)$UnivariateFunction$1$UnivariateFunction$1#derivative()$UnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.function.Sinh#value(double)",
        "org.apache.commons.math3.analysis.FunctionUtils.multiply(UnivariateDifferentiableFunction[]...)$UnivariateDifferentiableFunction$1#value(double)",
        "org.apache.commons.math3.analysis.function.Tan#value(double)",
        "org.apache.commons.math3.distribution.AbstractRealDistribution#inverseCumulativeProbability(double)$UnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.FunctionUtils.add(DifferentiableUnivariateFunction[]...)$DifferentiableUnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.function.Ceil#value(double)",
        "org.apache.commons.math3.analysis.function.Logistic#value(double)",
        "org.apache.commons.math3.analysis.function.Signum#value(double)",
        "org.apache.commons.math3.analysis.function.Constant#value(double)",
        "org.apache.commons.math3.analysis.function.Atanh#value(double)",
        "org.apache.commons.math3.analysis.FunctionUtils.compose(DifferentiableUnivariateFunction[]...)$UnivariateFunction$1$UnivariateFunction$1#derivative()$UnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.FunctionUtils.add(UnivariateDifferentiableFunction[]...)$UnivariateDifferentiableFunction$1#value(double)",
        "org.apache.commons.math3.analysis.function.Abs#value(double)",
        "org.apache.commons.math3.analysis.differentiation.FiniteDifferencesDifferentiator#differentiate(UnivariateFunction)$UnivariateDifferentiableFunction$1#value(double)",
        "org.apache.commons.math3.analysis.function.Identity#value(double)",
        "org.apache.commons.math3.analysis.function.Expm1#value(double)",
        "org.apache.commons.math3.analysis.function.Logit#value(double)",
        "org.apache.commons.math3.analysis.function.Log1p#value(double)",
        "org.apache.commons.math3.analysis.FunctionUtils.fix2ndArgument(BivariateFunction,double)$UnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.FunctionUtils.toUnivariateDifferential(DifferentiableUnivariateFunction)$UnivariateDifferentiableFunction$1#value(double)",
        "org.apache.commons.math3.analysis.FunctionUtils.toDifferentiableUnivariateFunction(UnivariateDifferentiableFunction)$UnivariateFunction$1$UnivariateFunction$1#derivative()$UnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.polynomials.PolynomialFunction#value(double)",
        "org.apache.commons.math3.analysis.function.Rint#value(double)",
        "org.apache.commons.math3.analysis.FunctionUtils.compose(UnivariateFunction[]...)$UnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.function.Cosh#value(double)",
        "org.apache.commons.math3.optimization.direct.PowellOptimizer.LineSearch#search(double[],double[])$UnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.FunctionUtils.compose(DifferentiableUnivariateFunction[]...)$DifferentiableUnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.function.Acosh#value(double)",
        "org.apache.commons.math3.analysis.function.StepFunction#value(double)",
        "org.apache.commons.math3.analysis.FunctionUtils.compose(UnivariateDifferentiableFunction[]...)$UnivariateDifferentiableFunction$1#value(double)",
        "org.apache.commons.math3.analysis.function.Acos#value(double)",
        "org.apache.commons.math3.analysis.function.Power#value(double)",
        "org.apache.commons.math3.optim.nonlinear.scalar.LineSearch#search(double[],double[])$UnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.function.Sigmoid#value(double)",
        "org.apache.commons.math3.analysis.function.Ulp#value(double)"
    ],
    "org.apache.commons.math3.geometry.euclidean.twod.hull.AbstractConvexHullGenerator2D#generate(Collection<Vector2D>)": [
        "org.apache.commons.math3.util.MathUtils.checkNotNull(Object)",
        "org.apache.commons.math3.geometry.euclidean.twod.hull.ConvexHull2D#ConvexHull2D(Vector2D[],double)",
        "org.apache.commons.math3.geometry.euclidean.twod.hull.MonotoneChain#findHullVertices(Collection<Vector2D>)",
        "org.apache.commons.math3.exception.ConvergenceException#ConvergenceException()"
    ],
    "org.apache.commons.math3.ode.MultistepFieldIntegrator#computeStepGrowShrinkFactor(T extends RealFieldElement)": [
        "org.apache.commons.math3.util.MathUtils.min(T extends RealFieldElement,T extends RealFieldElement)",
        "org.apache.commons.math3.util.MathUtils.max(T extends RealFieldElement,T extends RealFieldElement)"
    ],
    "org.apache.commons.math3.analysis.FunctionUtils.multiply(DifferentiableUnivariateFunction[]...)$DifferentiableUnivariateFunction$1#derivative()": ["org.apache.commons.math3.analysis.FunctionUtils.multiply(DifferentiableUnivariateFunction[]...)$UnivariateFunction$1$UnivariateFunction$1#derivative()$UnivariateFunction$1.<init>()"],
    "org.apache.commons.math3.optimization.direct.BOBYQAOptimizer#prelim(double[],double[])": [
        "org.apache.commons.math3.linear.Array2DRowRealMatrix#setEntry(int,int,double)",
        "org.apache.commons.math3.util.FastMath.max(double,double)",
        "org.apache.commons.math3.linear.ArrayRealVector#getDimension()",
        "org.apache.commons.math3.optimization.direct.BaseAbstractMultivariateOptimizer#computeObjectiveValue(double[])",
        "org.apache.commons.math3.util.FastMath.min(double,double)",
        "org.apache.commons.math3.linear.ArrayRealVector#getEntry(int)",
        "org.apache.commons.math3.linear.ArrayRealVector#setEntry(int,double)",
        "org.apache.commons.math3.linear.Array2DRowRealMatrix#getEntry(int,int)",
        "org.apache.commons.math3.linear.Array2DRowRealMatrix#getRowDimension()",
        "org.apache.commons.math3.optimization.direct.BaseAbstractMultivariateOptimizer#getEvaluations()",
        "org.apache.commons.math3.optimization.direct.BOBYQAOptimizer.<staticinit>()",
        "org.apache.commons.math3.util.FastMath.sqrt(double)",
        "org.apache.commons.math3.optimization.direct.BOBYQAOptimizer.printMethod()",
        "org.apache.commons.math3.linear.ArrayRealVector#toArray()"
    ],
    "org.apache.commons.math3.linear.MatrixUtils.createFieldIdentityMatrix(Field<T extends FieldElement>,int)": [
        "org.apache.commons.math3.fraction.BigFractionField#getOne()",
        "org.apache.commons.math3.fraction.FractionField#getOne()",
        "org.apache.commons.math3.analysis.differentiation.SparseGradient#getField()$Field$1#getOne()",
        "org.apache.commons.math3.util.BigRealField#getZero()",
        "org.apache.commons.math3.analysis.differentiation.SparseGradient#getField()$Field$1#getZero()",
        "org.apache.commons.math3.util.Decimal64Field#getZero()",
        "org.apache.commons.math3.dfp.DfpField#getZero()",
        "org.apache.commons.math3.linear.Array2DRowFieldMatrix#Array2DRowFieldMatrix(Field<T extends FieldElement>,T extends FieldElement[][],boolean)",
        "org.apache.commons.math3.complex.ComplexField#getOne()",
        "org.apache.commons.math3.util.BigRealField#getOne()",
        "org.apache.commons.math3.util.MathArrays.buildArray(Field<T>,int,int)",
        "org.apache.commons.math3.analysis.differentiation.DerivativeStructure#getField()$Field$1#getZero()",
        "org.apache.commons.math3.fraction.FractionField#getZero()",
        "org.apache.commons.math3.complex.ComplexField#getZero()",
        "org.apache.commons.math3.dfp.DfpField#getOne()",
        "org.apache.commons.math3.fraction.BigFractionField#getZero()",
        "org.apache.commons.math3.analysis.differentiation.DerivativeStructure#getField()$Field$1#getOne()",
        "org.apache.commons.math3.util.Decimal64Field#getOne()"
    ],
    "org.apache.commons.math3.geometry.partitioning.RegionFactory#intersection(Region<S extends Space>,Region<S extends Space>)": [
        "org.apache.commons.math3.geometry.partitioning.AbstractRegion#getTree(boolean)",
        "org.apache.commons.math3.geometry.partitioning.BSPTree#visit(BSPTreeVisitor<S extends Space>)",
        "org.apache.commons.math3.geometry.partitioning.BSPTree#merge(BSPTree<S extends Space>,LeafMerger<S extends Space>)",
        "org.apache.commons.math3.geometry.partitioning.RegionFactory.IntersectionMerger.<init>()"
    ],
    "org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D#FieldVector3D(T extends RealFieldElement,FieldVector3D<T extends RealFieldElement>)": ["org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D.<init>()"],
    "org.apache.commons.math3.analysis.differentiation.DerivativeStructure#cos()": [
        "org.apache.commons.math3.analysis.differentiation.DerivativeStructure#DerivativeStructure(DSCompiler)",
        "org.apache.commons.math3.analysis.differentiation.DSCompiler#cos(double[],int,double[],int)"
    ],
    "org.apache.commons.math3.optim.BaseOptimizer#optimize()": [
        "org.apache.commons.math3.optim.nonlinear.vector.jacobian.GaussNewtonOptimizer#doOptimize()",
        "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.BOBYQAOptimizer#doOptimize()",
        "org.apache.commons.math3.optim.univariate.MultiStartUnivariateOptimizer#doOptimize()",
        "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizer#doOptimize()",
        "org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizer#doOptimize()",
        "org.apache.commons.math3.optim.nonlinear.scalar.gradient.NonLinearConjugateGradientOptimizer#doOptimize()",
        "org.apache.commons.math3.optim.linear.SimplexSolver#doOptimize()",
        "org.apache.commons.math3.optim.univariate.BrentOptimizer#doOptimize()",
        "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer#doOptimize()",
        "org.apache.commons.math3.util.Incrementor.wrap(Incrementor)$Incrementor$1#resetCount()",
        "org.apache.commons.math3.util.Incrementor#resetCount()",
        "org.apache.commons.math3.optim.BaseMultiStartMultivariateOptimizer#doOptimize()",
        "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.PowellOptimizer#doOptimize()"
    ],
    "org.apache.commons.math3.ode.nonstiff.DormandPrince54FieldIntegrator#estimateError(T extends RealFieldElement[][],T extends RealFieldElement[],T extends RealFieldElement[],T extends RealFieldElement)": [
        "org.apache.commons.math3.ode.AbstractFieldIntegrator#getField()",
        "org.apache.commons.math3.util.BigRealField#getZero()",
        "org.apache.commons.math3.analysis.differentiation.SparseGradient#getField()$Field$1#getZero()",
        "org.apache.commons.math3.analysis.differentiation.DerivativeStructure#getField()$Field$1#getZero()",
        "org.apache.commons.math3.fraction.FractionField#getZero()",
        "org.apache.commons.math3.util.Decimal64Field#getZero()",
        "org.apache.commons.math3.dfp.DfpField#getZero()",
        "org.apache.commons.math3.util.MathUtils.max(T extends RealFieldElement,T extends RealFieldElement)",
        "org.apache.commons.math3.complex.ComplexField#getZero()",
        "org.apache.commons.math3.fraction.BigFractionField#getZero()"
    ],
    "org.apache.commons.math3.dfp.Dfp#Dfp(DfpField,int)": ["org.apache.commons.math3.dfp.Dfp#Dfp(DfpField,long)"],
    "org.apache.commons.math3.stat.descriptive.moment.Variance#evaluate(double[],double,int,int)": ["org.apache.commons.math3.stat.descriptive.AbstractUnivariateStatistic#test(double[],int,int)"],
    "org.apache.commons.math3.linear.AbstractRealMatrix#copySubMatrix(int,int,int,int,double[][])": [
        "org.apache.commons.math3.linear.AbstractRealMatrix#walkInOptimizedOrder(RealMatrixPreservingVisitor,int,int,int,int)",
        "org.apache.commons.math3.linear.BlockRealMatrix#walkInOptimizedOrder(RealMatrixPreservingVisitor,int,int,int,int)",
        "org.apache.commons.math3.linear.MatrixDimensionMismatchException#MatrixDimensionMismatchException(int,int,int,int)",
        "org.apache.commons.math3.linear.AbstractRealMatrix#copySubMatrix(int,int,int,int,double[][])$DefaultRealMatrixPreservingVisitor$1.<init>()",
        "org.apache.commons.math3.linear.MatrixUtils.checkSubMatrixIndex(AnyMatrix,int,int,int,int)"
    ],
    "org.apache.commons.math3.fitting.leastsquares.EvaluationRmsChecker#EvaluationRmsChecker(double)": ["org.apache.commons.math3.fitting.leastsquares.EvaluationRmsChecker#EvaluationRmsChecker(double,double)"],
    "org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D#FieldVector3D(double,FieldVector3D<T extends RealFieldElement>)": ["org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D.<init>()"],
    "org.apache.commons.math3.linear.MatrixUtils.checkSubtractionCompatible(AnyMatrix,AnyMatrix)": [
        "org.apache.commons.math3.linear.DiagonalMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.Array2DRowRealMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.BlockFieldMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.SparseFieldMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.OpenMapRealMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.OpenMapRealMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.DiagonalMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.Array2DRowFieldMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.BlockFieldMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.SparseFieldMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.BlockRealMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.Array2DRowRealMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.Array2DRowFieldMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.BlockRealMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.MatrixDimensionMismatchException#MatrixDimensionMismatchException(int,int,int,int)"
    ],
    "org.apache.commons.math3.stat.descriptive.moment.Kurtosis#getResult()": [
        "org.apache.commons.math3.stat.descriptive.moment.FourthMoment#getResult()",
        "org.apache.commons.math3.stat.descriptive.moment.FirstMoment#getN()"
    ],
    "org.apache.commons.math3.ode.MultistepIntegrator#start(double,double[],double)": [
        "org.apache.commons.math3.ode.nonstiff.GraggBulirschStoerIntegrator#addStepHandler(StepHandler)",
        "org.apache.commons.math3.ode.MultistepIntegrator.NordsieckInitializer#NordsieckInitializer(int,int)",
        "org.apache.commons.math3.ode.nonstiff.GraggBulirschStoerIntegrator#integrate(ExpandableStatefulODE,double)",
        "org.apache.commons.math3.ode.AbstractIntegrator#addStepHandler(StepHandler)",
        "org.apache.commons.math3.exception.util.LocalizedFormats.<staticinit>()",
        "org.apache.commons.math3.util.IntegerSequence.Incrementor#increment(int)",
        "org.apache.commons.math3.ode.AbstractIntegrator#getExpandable()",
        "org.apache.commons.math3.ode.nonstiff.EmbeddedRungeKuttaIntegrator#integrate(ExpandableStatefulODE,double)",
        "org.apache.commons.math3.ode.nonstiff.AdamsBashforthIntegrator#integrate(ExpandableStatefulODE,double)",
        "org.apache.commons.math3.ode.AbstractIntegrator#getEvaluations()",
        "org.apache.commons.math3.ode.AbstractIntegrator#clearEventHandlers()",
        "org.apache.commons.math3.ode.nonstiff.RungeKuttaIntegrator#integrate(ExpandableStatefulODE,double)",
        "org.apache.commons.math3.ode.AbstractIntegrator#getCounter()",
        "org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator#integrate(ExpandableStatefulODE,double)",
        "org.apache.commons.math3.ode.MultistepIntegrator#start(double,double[],double)$FirstOrderDifferentialEquations$1.<init>()",
        "org.apache.commons.math3.ode.AbstractIntegrator#clearStepHandlers()",
        "org.apache.commons.math3.ode.AbstractIntegrator#integrate(FirstOrderDifferentialEquations,double,double[],double,double[])"
    ],
    "org.apache.commons.math3.analysis.integration.gauss.BaseRuleFactory#getRule(int)": [
        "org.apache.commons.math3.analysis.integration.gauss.BaseRuleFactory#getRuleInternal(int)",
        "org.apache.commons.math3.util.Pair#getFirst()",
        "org.apache.commons.math3.util.Pair#getSecond()",
        "org.apache.commons.math3.exception.util.LocalizedFormats.<staticinit>()",
        "org.apache.commons.math3.analysis.integration.gauss.BaseRuleFactory.convertToDouble(Pair<T extends Number[], T extends Number[]>)",
        "org.apache.commons.math3.util.Pair#Pair(K,V)"
    ],
    "org.apache.commons.math3.util.Decimal64#subtract(Decimal64)": ["org.apache.commons.math3.util.Decimal64#Decimal64(double)"],
    "org.apache.commons.math3.ode.ExpandableStatefulODE#ExpandableStatefulODE(FirstOrderDifferentialEquations)": [
        "org.apache.commons.math3.ode.JacobianMatrices.MainStateJacobianWrapper#getDimension()",
        "org.apache.commons.math3.ode.ExpandableStatefulODE.<init>()",
        "org.apache.commons.math3.ode.MultistepIntegrator#start(double,double[],double)$FirstOrderDifferentialEquations$1#getDimension()",
        "org.apache.commons.math3.ode.EquationsMapper#EquationsMapper(int,int)",
        "org.apache.commons.math3.ode.FirstOrderConverter#getDimension()"
    ],
    "org.apache.commons.math3.util.ResizableDoubleArray#getExpansionMode()": [
        "org.apache.commons.math3.util.ResizableDoubleArray.<staticinit>()",
        "org.apache.commons.math3.exception.MathInternalError#MathInternalError()",
        "org.apache.commons.math3.util.ResizableDoubleArray.ExpansionMode.<staticinit>()"
    ],
    "org.apache.commons.math3.stat.correlation.Covariance#computeCovarianceMatrix(RealMatrix)": ["org.apache.commons.math3.stat.correlation.Covariance#computeCovarianceMatrix(RealMatrix,boolean)"],
    "org.apache.commons.math3.analysis.solvers.BracketingNthOrderBrentSolver#BracketingNthOrderBrentSolver(double,int)": [
        "org.apache.commons.math3.analysis.solvers.BracketingNthOrderBrentSolver.<init>()",
        "org.apache.commons.math3.analysis.solvers.AllowedSolution.<staticinit>()",
        "org.apache.commons.math3.analysis.solvers.AbstractUnivariateSolver#AbstractUnivariateSolver(double)"
    ],
    "org.apache.commons.math3.linear.BlockRealMatrix#setRowVector(int,RealVector)": [
        "org.apache.commons.math3.linear.ArrayRealVector#getDataRef()",
        "org.apache.commons.math3.linear.AbstractRealMatrix#setRowVector(int,RealVector)",
        "org.apache.commons.math3.linear.BlockRealMatrix#setRow(int,double[])"
    ],
    "org.apache.commons.math3.stat.inference.GTest#entropy(long[][])": ["org.apache.commons.math3.util.FastMath.log(double)"],
    "org.apache.commons.math3.util.Decimal64#sin()": [
        "org.apache.commons.math3.util.Decimal64#Decimal64(double)",
        "org.apache.commons.math3.util.FastMath.sin(double)"
    ],
    "org.apache.commons.math3.util.OpenIntToFieldHashMap#buildArray(int)": [
        "org.apache.commons.math3.fraction.BigFractionField#getRuntimeClass()",
        "org.apache.commons.math3.dfp.DfpField#getRuntimeClass()",
        "org.apache.commons.math3.analysis.differentiation.SparseGradient#getField()$Field$1#getRuntimeClass()",
        "org.apache.commons.math3.util.BigRealField#getRuntimeClass()",
        "org.apache.commons.math3.analysis.differentiation.DerivativeStructure#getField()$Field$1#getRuntimeClass()",
        "org.apache.commons.math3.fraction.FractionField#getRuntimeClass()",
        "org.apache.commons.math3.util.Decimal64Field#getRuntimeClass()",
        "org.apache.commons.math3.complex.ComplexField#getRuntimeClass()"
    ],
    "org.apache.commons.math3.filter.DefaultProcessModel#DefaultProcessModel(double[][],double[][],double[][])": [
        "org.apache.commons.math3.filter.DefaultProcessModel#DefaultProcessModel(RealMatrix,RealMatrix,RealMatrix,RealVector,RealMatrix)",
        "org.apache.commons.math3.linear.Array2DRowRealMatrix#Array2DRowRealMatrix(double[][])"
    ],
    "org.apache.commons.math3.stat.descriptive.SynchronizedDescriptiveStatistics#getQuadraticMean()": ["org.apache.commons.math3.stat.descriptive.DescriptiveStatistics#getQuadraticMean()"],
    "org.apache.commons.math3.ode.events.EventState#evaluateStep(StepInterpolator)": [
        "org.apache.commons.math3.analysis.FunctionUtils.multiply(DifferentiableUnivariateFunction[]...)$UnivariateFunction$1$UnivariateFunction$1#derivative()$UnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.polynomials.PolynomialSplineFunction#value(double)",
        "org.apache.commons.math3.analysis.function.Gaussian#value(double)",
        "org.apache.commons.math3.analysis.function.Tanh#value(double)",
        "org.apache.commons.math3.analysis.function.Inverse#value(double)",
        "org.apache.commons.math3.ode.sampling.AbstractStepInterpolator#getCurrentTime()",
        "org.apache.commons.math3.ode.events.EventState.LocalMaxCountExceededException#getException()",
        "org.apache.commons.math3.analysis.function.HarmonicOscillator#value(double)",
        "org.apache.commons.math3.analysis.solvers.PegasusSolver#PegasusSolver(double,double)",
        "org.apache.commons.math3.analysis.FunctionUtils.fix1stArgument(BivariateFunction,double)$UnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.function.Asin#value(double)",
        "org.apache.commons.math3.ode.sampling.AbstractStepInterpolator#setInterpolatedTime(double)",
        "org.apache.commons.math3.analysis.function.Asinh#value(double)",
        "org.apache.commons.math3.analysis.FunctionUtils.multiply(UnivariateFunction[]...)$UnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.function.Atan#value(double)",
        "org.apache.commons.math3.ode.events.EventState#getCompleteState(StepInterpolator)",
        "org.apache.commons.math3.analysis.FunctionUtils.toDifferentiableUnivariateFunction(UnivariateDifferentiableFunction)$DifferentiableUnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.function.Cbrt#value(double)",
        "org.apache.commons.math3.analysis.polynomials.PolynomialFunctionLagrangeForm#value(double)",
        "org.apache.commons.math3.analysis.function.Exp#value(double)",
        "org.apache.commons.math3.special.BesselJ#value(double)",
        "org.apache.commons.math3.analysis.polynomials.PolynomialFunctionNewtonForm#value(double)",
        "org.apache.commons.math3.analysis.FunctionUtils.add(UnivariateFunction[]...)$UnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.function.Sin#value(double)",
        "org.apache.commons.math3.analysis.function.Cos#value(double)",
        "org.apache.commons.math3.analysis.solvers.BaseAbstractUnivariateSolver#getAbsoluteAccuracy()",
        "org.apache.commons.math3.util.FastMath.ceil(double)",
        "org.apache.commons.math3.analysis.interpolation.UnivariatePeriodicInterpolator#interpolate(double[],double[])$UnivariateFunction$1#value(double)",
        "org.apache.commons.math3.ode.events.EventFilter#g(double,double[])",
        "org.apache.commons.math3.analysis.solvers.BaseAbstractUnivariateSolver#getRelativeAccuracy()",
        "org.apache.commons.math3.analysis.function.Log10#value(double)",
        "org.apache.commons.math3.ode.sampling.AbstractStepInterpolator#isForward()",
        "org.apache.commons.math3.ode.events.EventState#evaluateStep(StepInterpolator)$UnivariateFunction$1.<init>()",
        "org.apache.commons.math3.analysis.function.Sqrt#value(double)",
        "org.apache.commons.math3.analysis.function.Log#value(double)",
        "org.apache.commons.math3.analysis.function.Sinc#value(double)",
        "org.apache.commons.math3.ode.events.EventState#evaluateStep(StepInterpolator)$UnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.function.Minus#value(double)",
        "org.apache.commons.math3.analysis.integration.IterativeLegendreGaussIntegrator#stage(int)$UnivariateFunction$1#value(double)",
        "org.apache.commons.math3.optimization.general.NonLinearConjugateGradientOptimizer.LineSearchFunction#value(double)",
        "org.apache.commons.math3.analysis.function.Floor#value(double)",
        "org.apache.commons.math3.analysis.FunctionUtils.multiply(DifferentiableUnivariateFunction[]...)$DifferentiableUnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.FunctionUtils.combine(BivariateFunction,UnivariateFunction,UnivariateFunction)$UnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.FunctionUtils.add(DifferentiableUnivariateFunction[]...)$UnivariateFunction$1$UnivariateFunction$1#derivative()$UnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.function.Sinh#value(double)",
        "org.apache.commons.math3.analysis.FunctionUtils.multiply(UnivariateDifferentiableFunction[]...)$UnivariateDifferentiableFunction$1#value(double)",
        "org.apache.commons.math3.analysis.function.Tan#value(double)",
        "org.apache.commons.math3.distribution.AbstractRealDistribution#inverseCumulativeProbability(double)$UnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.FunctionUtils.add(DifferentiableUnivariateFunction[]...)$DifferentiableUnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.function.Ceil#value(double)",
        "org.apache.commons.math3.analysis.function.Logistic#value(double)",
        "org.apache.commons.math3.analysis.function.Signum#value(double)",
        "org.apache.commons.math3.analysis.function.Constant#value(double)",
        "org.apache.commons.math3.analysis.function.Atanh#value(double)",
        "org.apache.commons.math3.analysis.FunctionUtils.compose(DifferentiableUnivariateFunction[]...)$UnivariateFunction$1$UnivariateFunction$1#derivative()$UnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.FunctionUtils.add(UnivariateDifferentiableFunction[]...)$UnivariateDifferentiableFunction$1#value(double)",
        "org.apache.commons.math3.analysis.function.Abs#value(double)",
        "org.apache.commons.math3.analysis.differentiation.FiniteDifferencesDifferentiator#differentiate(UnivariateFunction)$UnivariateDifferentiableFunction$1#value(double)",
        "org.apache.commons.math3.analysis.function.Identity#value(double)",
        "org.apache.commons.math3.analysis.function.Expm1#value(double)",
        "org.apache.commons.math3.analysis.function.Logit#value(double)",
        "org.apache.commons.math3.analysis.function.Log1p#value(double)",
        "org.apache.commons.math3.analysis.FunctionUtils.fix2ndArgument(BivariateFunction,double)$UnivariateFunction$1#value(double)",
        "org.apache.commons.math3.util.FastMath.abs(double)",
        "org.apache.commons.math3.analysis.FunctionUtils.toUnivariateDifferential(DifferentiableUnivariateFunction)$UnivariateDifferentiableFunction$1#value(double)",
        "org.apache.commons.math3.analysis.FunctionUtils.toDifferentiableUnivariateFunction(UnivariateDifferentiableFunction)$UnivariateFunction$1$UnivariateFunction$1#derivative()$UnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.polynomials.PolynomialFunction#value(double)",
        "org.apache.commons.math3.analysis.function.Rint#value(double)",
        "org.apache.commons.math3.analysis.FunctionUtils.compose(UnivariateFunction[]...)$UnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.function.Cosh#value(double)",
        "org.apache.commons.math3.optimization.direct.PowellOptimizer.LineSearch#search(double[],double[])$UnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.FunctionUtils.compose(DifferentiableUnivariateFunction[]...)$DifferentiableUnivariateFunction$1#value(double)",
        "org.apache.commons.math3.util.FastMath.max(int,int)",
        "org.apache.commons.math3.analysis.function.Acosh#value(double)",
        "org.apache.commons.math3.analysis.function.StepFunction#value(double)",
        "org.apache.commons.math3.analysis.FunctionUtils.compose(UnivariateDifferentiableFunction[]...)$UnivariateDifferentiableFunction$1#value(double)",
        "org.apache.commons.math3.analysis.solvers.UnivariateSolverUtils.forceSide(int,UnivariateFunction,BracketedUnivariateSolver<UnivariateFunction>,double,double,double,AllowedSolution)",
        "org.apache.commons.math3.analysis.function.Acos#value(double)",
        "org.apache.commons.math3.analysis.solvers.BaseAbstractUnivariateSolver#solve(int,FUNC extends UnivariateFunction,double,double)",
        "org.apache.commons.math3.analysis.function.Power#value(double)",
        "org.apache.commons.math3.optim.nonlinear.scalar.LineSearch#search(double[],double[])$UnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.function.Sigmoid#value(double)",
        "org.apache.commons.math3.analysis.solvers.AllowedSolution.<staticinit>()",
        "org.apache.commons.math3.analysis.function.Ulp#value(double)",
        "org.apache.commons.math3.analysis.solvers.BaseAbstractUnivariateSolver#getEvaluations()"
    ],
    "org.apache.commons.math3.analysis.interpolation.MicrosphereInterpolator#interpolate(double[][],double[])": [
        "org.apache.commons.math3.random.UnitSphereRandomVectorGenerator#UnitSphereRandomVectorGenerator(int)",
        "org.apache.commons.math3.analysis.interpolation.MicrosphereInterpolatingFunction#MicrosphereInterpolatingFunction(double[][],double[],int,int,UnitSphereRandomVectorGenerator)"
    ],
    "org.apache.commons.math3.optimization.direct.CMAESOptimizer.log(RealMatrix)": [
        "org.apache.commons.math3.linear.DiagonalMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.Array2DRowRealMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.BlockFieldMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.SparseFieldMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.DiagonalMatrix#getEntry(int,int)",
        "org.apache.commons.math3.linear.OpenMapRealMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.OpenMapRealMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.DiagonalMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.OpenMapRealMatrix#getEntry(int,int)",
        "org.apache.commons.math3.linear.Array2DRowFieldMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.Array2DRowRealMatrix#Array2DRowRealMatrix(double[][],boolean)",
        "org.apache.commons.math3.linear.BlockRealMatrix#getEntry(int,int)",
        "org.apache.commons.math3.linear.SparseFieldMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.BlockFieldMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.BlockRealMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.Array2DRowRealMatrix#getEntry(int,int)",
        "org.apache.commons.math3.linear.Array2DRowRealMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.Array2DRowFieldMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.BlockRealMatrix#getColumnDimension()",
        "org.apache.commons.math3.util.FastMath.log(double)"
    ],
    "org.apache.commons.math3.linear.QRDecomposition#getQ()": [
        "org.apache.commons.math3.linear.QRDecomposition#getQT()",
        "org.apache.commons.math3.linear.BlockRealMatrix#transpose()",
        "org.apache.commons.math3.linear.AbstractRealMatrix#transpose()"
    ],
    "org.apache.commons.math3.linear.SingularValueDecomposition.Solver#Solver(double[],RealMatrix,RealMatrix,boolean,double)": [
        "org.apache.commons.math3.linear.AbstractRealMatrix#multiply(RealMatrix)",
        "org.apache.commons.math3.linear.Array2DRowRealMatrix#getData()",
        "org.apache.commons.math3.linear.OpenMapRealMatrix#multiply(RealMatrix)",
        "org.apache.commons.math3.linear.DiagonalMatrix#multiply(RealMatrix)",
        "org.apache.commons.math3.linear.DiagonalMatrix#getData()",
        "org.apache.commons.math3.linear.AbstractRealMatrix#getData()",
        "org.apache.commons.math3.linear.BlockRealMatrix#multiply(RealMatrix)",
        "org.apache.commons.math3.linear.BlockRealMatrix#getData()",
        "org.apache.commons.math3.linear.SingularValueDecomposition.Solver.<init>()",
        "org.apache.commons.math3.linear.Array2DRowRealMatrix#Array2DRowRealMatrix(double[][],boolean)"
    ],
    "org.apache.commons.math3.optim.linear.SimplexTableau#normalizeConstraints(Collection<LinearConstraint>)": ["org.apache.commons.math3.optim.linear.SimplexTableau#normalize(LinearConstraint)"],
    "org.apache.commons.math3.geometry.partitioning.utilities.OrderedTuple#OrderedTuple(double[]...)": [
        "org.apache.commons.math3.geometry.partitioning.utilities.OrderedTuple.exponent(long)",
        "org.apache.commons.math3.geometry.partitioning.utilities.OrderedTuple.computeMSB(long)",
        "org.apache.commons.math3.geometry.partitioning.utilities.OrderedTuple.<init>()",
        "org.apache.commons.math3.util.FastMath.max(int,int)",
        "org.apache.commons.math3.geometry.partitioning.utilities.OrderedTuple#encode(int)",
        "org.apache.commons.math3.geometry.partitioning.utilities.OrderedTuple.mantissa(long)",
        "org.apache.commons.math3.util.FastMath.min(int,int)",
        "org.apache.commons.math3.geometry.partitioning.utilities.OrderedTuple.computeLSB(long)"
    ],
    "org.apache.commons.math3.optimization.AbstractConvergenceChecker#AbstractConvergenceChecker(double,double)": ["org.apache.commons.math3.optimization.AbstractConvergenceChecker.<init>()"],
    "org.apache.commons.math3.userguide.sofm.ChineseRingsClassifier#computeHitHistogram()": [
        "org.apache.commons.math3.userguide.sofm.ChineseRingsClassifier#createIterable()",
        "org.apache.commons.math3.ml.neuralnet.MapUtils.computeHitHistogram(Iterable<double[]>,NeuronSquareMesh2D,DistanceMeasure)"
    ],
    "org.apache.commons.math3.distribution.CauchyDistribution#density(double)": ["org.apache.commons.math3.util.FastMath.<staticinit>()"],
    "org.apache.commons.math3.analysis.FunctionUtils.toDifferentiableMultivariateVectorFunction(MultivariateDifferentiableVectorFunction)": ["org.apache.commons.math3.analysis.FunctionUtils.toDifferentiableMultivariateVectorFunction(MultivariateDifferentiableVectorFunction)$DifferentiableMultivariateVectorFunction$1.<init>()"],
    "org.apache.commons.math3.linear.DefaultIterativeLinearSolverEvent#DefaultIterativeLinearSolverEvent(Object,int,RealVector,RealVector,RealVector,double)": [
        "org.apache.commons.math3.linear.IterativeLinearSolverEvent#IterativeLinearSolverEvent(Object,int)",
        "org.apache.commons.math3.linear.DefaultIterativeLinearSolverEvent.<init>()"
    ],
    "org.apache.commons.math3.optim.linear.SimplexTableau#divideRow(int,double)": [
        "org.apache.commons.math3.optim.linear.SimplexTableau#getRow(int)",
        "org.apache.commons.math3.optim.linear.SimplexTableau#getWidth()"
    ],
    "org.apache.commons.math3.linear.BlockFieldMatrix#blockHeight(int)": ["org.apache.commons.math3.linear.BlockFieldMatrix.<staticinit>()"],
    "org.apache.commons.math3.ode.sampling.DummyStepHandler.getInstance()": ["org.apache.commons.math3.ode.sampling.DummyStepHandler.LazyHolder.<staticinit>()"],
    "org.apache.commons.math3.analysis.function.Acos#derivative()": [
        "org.apache.commons.math3.analysis.function.Log10#derivative()",
        "org.apache.commons.math3.analysis.function.Power#derivative()",
        "org.apache.commons.math3.analysis.function.Sin#derivative()",
        "org.apache.commons.math3.analysis.function.Exp#derivative()",
        "org.apache.commons.math3.analysis.function.HarmonicOscillator#derivative()",
        "org.apache.commons.math3.analysis.polynomials.PolynomialFunction#derivative()",
        "org.apache.commons.math3.analysis.FunctionUtils.toDifferentiableUnivariateFunction(UnivariateDifferentiableFunction)",
        "org.apache.commons.math3.analysis.function.Logit#derivative()",
        "org.apache.commons.math3.analysis.function.Cbrt#derivative()",
        "org.apache.commons.math3.analysis.FunctionUtils.toDifferentiableUnivariateFunction(UnivariateDifferentiableFunction)$DifferentiableUnivariateFunction$1#derivative()",
        "org.apache.commons.math3.analysis.polynomials.PolynomialSplineFunction#derivative()",
        "org.apache.commons.math3.analysis.function.Cosh#derivative()",
        "org.apache.commons.math3.analysis.function.Identity#derivative()",
        "org.apache.commons.math3.analysis.function.Inverse#derivative()",
        "org.apache.commons.math3.analysis.function.Acosh#derivative()",
        "org.apache.commons.math3.analysis.function.Acos#derivative()",
        "org.apache.commons.math3.analysis.function.Atan#derivative()",
        "org.apache.commons.math3.analysis.function.Log#derivative()",
        "org.apache.commons.math3.analysis.function.Sqrt#derivative()",
        "org.apache.commons.math3.analysis.function.Logistic#derivative()",
        "org.apache.commons.math3.analysis.function.Expm1#derivative()",
        "org.apache.commons.math3.analysis.function.Asinh#derivative()",
        "org.apache.commons.math3.analysis.function.Gaussian#derivative()",
        "org.apache.commons.math3.analysis.function.Sinc#derivative()",
        "org.apache.commons.math3.analysis.function.Sigmoid#derivative()",
        "org.apache.commons.math3.analysis.function.Constant#derivative()",
        "org.apache.commons.math3.analysis.function.Sinh#derivative()",
        "org.apache.commons.math3.analysis.function.Tanh#derivative()",
        "org.apache.commons.math3.analysis.function.Asin#derivative()",
        "org.apache.commons.math3.analysis.function.Minus#derivative()",
        "org.apache.commons.math3.analysis.FunctionUtils.compose(DifferentiableUnivariateFunction[]...)$DifferentiableUnivariateFunction$1#derivative()",
        "org.apache.commons.math3.analysis.FunctionUtils.add(DifferentiableUnivariateFunction[]...)$DifferentiableUnivariateFunction$1#derivative()",
        "org.apache.commons.math3.analysis.FunctionUtils.multiply(DifferentiableUnivariateFunction[]...)$DifferentiableUnivariateFunction$1#derivative()",
        "org.apache.commons.math3.analysis.function.Log1p#derivative()",
        "org.apache.commons.math3.analysis.function.Tan#derivative()",
        "org.apache.commons.math3.analysis.function.Cos#derivative()",
        "org.apache.commons.math3.analysis.function.Atanh#derivative()"
    ],
    "org.apache.commons.math3.stat.StatUtils.mean(double[])": [
        "org.apache.commons.math3.stat.descriptive.moment.StandardDeviation#evaluate(double[])",
        "org.apache.commons.math3.stat.descriptive.moment.Variance#evaluate(double[])",
        "org.apache.commons.math3.stat.StatUtils.<staticinit>()",
        "org.apache.commons.math3.stat.descriptive.AbstractUnivariateStatistic#evaluate(double[])",
        "org.apache.commons.math3.stat.descriptive.AbstractStorelessUnivariateStatistic#evaluate(double[])"
    ],
    "org.apache.commons.math3.stat.inference.GTest#gDataSetsComparison(long[],long[])": [
        "org.apache.commons.math3.exception.DimensionMismatchException#DimensionMismatchException(int,int)",
        "org.apache.commons.math3.util.MathArrays.checkNonNegative(long[])",
        "org.apache.commons.math3.stat.inference.GTest#entropy(long[])",
        "org.apache.commons.math3.exception.util.LocalizedFormats.<staticinit>()",
        "org.apache.commons.math3.stat.inference.GTest#entropy(long[][])",
        "org.apache.commons.math3.exception.ZeroException#ZeroException()"
    ],
    "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer.divide(RealMatrix,RealMatrix)": [
        "org.apache.commons.math3.linear.DiagonalMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.Array2DRowRealMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.BlockFieldMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.SparseFieldMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.DiagonalMatrix#getEntry(int,int)",
        "org.apache.commons.math3.linear.OpenMapRealMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.OpenMapRealMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.DiagonalMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.OpenMapRealMatrix#getEntry(int,int)",
        "org.apache.commons.math3.linear.BlockRealMatrix#getEntry(int,int)",
        "org.apache.commons.math3.linear.Array2DRowRealMatrix#Array2DRowRealMatrix(double[][],boolean)",
        "org.apache.commons.math3.linear.Array2DRowFieldMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.BlockFieldMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.SparseFieldMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.Array2DRowRealMatrix#getEntry(int,int)",
        "org.apache.commons.math3.linear.BlockRealMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.Array2DRowRealMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.Array2DRowFieldMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.BlockRealMatrix#getColumnDimension()"
    ],
    "org.apache.commons.math3.distribution.AbstractRealDistribution#reseedRandomGenerator(long)": [
        "org.apache.commons.math3.random.RandomGeneratorFactory.createRandomGenerator(Random)$RandomGenerator$1#setSeed(long)",
        "org.apache.commons.math3.random.SynchronizedRandomGenerator#setSeed(long)",
        "org.apache.commons.math3.random.MersenneTwister#setSeed(long)",
        "org.apache.commons.math3.random.AbstractWell#setSeed(long)",
        "org.apache.commons.math3.random.RandomAdaptor#setSeed(long)",
        "org.apache.commons.math3.random.RandomDataImpl#reSeed(long)",
        "org.apache.commons.math3.random.ISAACRandom#setSeed(long)"
    ],
    "org.apache.commons.math3.ml.neuralnet.MapUtils.PairNeuronDouble#PairNeuronDouble(Neuron,double)": ["org.apache.commons.math3.ml.neuralnet.MapUtils.PairNeuronDouble.<init>()"],
    "org.apache.commons.math3.stat.inference.TTest#pairedTTest(double[],double[])": [
        "org.apache.commons.math3.stat.inference.TTest#tTest(double,double,double,double)",
        "org.apache.commons.math3.stat.StatUtils.varianceDifference(double[],double[],double)",
        "org.apache.commons.math3.stat.StatUtils.meanDifference(double[],double[])"
    ],
    "org.apache.commons.math3.stat.descriptive.moment.StandardDeviation.copy(StandardDeviation,StandardDeviation)": [
        "org.apache.commons.math3.util.MathUtils.checkNotNull(Object)",
        "org.apache.commons.math3.stat.descriptive.AbstractUnivariateStatistic#setData(double[])",
        "org.apache.commons.math3.stat.descriptive.rank.Percentile#setData(double[])",
        "org.apache.commons.math3.stat.descriptive.AbstractUnivariateStatistic#getDataRef()",
        "org.apache.commons.math3.stat.descriptive.moment.Variance#copy()"
    ],
    "org.apache.commons.math3.linear.BiDiagonalTransformer#getV()": ["org.apache.commons.math3.linear.MatrixUtils.createRealMatrix(double[][])"],
    "org.apache.commons.math3.analysis.function.Gaussian.Parametric#value(double,double[]...)": [
        "org.apache.commons.math3.analysis.function.Gaussian.value(double,double,double)",
        "org.apache.commons.math3.analysis.function.Gaussian.Parametric#validateParameters(double[])"
    ],
    "org.apache.commons.math3.ode.nonstiff.DormandPrince54Integrator#DormandPrince54Integrator(double,double,double,double)": [
        "org.apache.commons.math3.ode.nonstiff.DormandPrince54Integrator.<staticinit>()",
        "org.apache.commons.math3.ode.nonstiff.DormandPrince54StepInterpolator#DormandPrince54StepInterpolator()",
        "org.apache.commons.math3.ode.nonstiff.DormandPrince54Integrator.<init>()",
        "org.apache.commons.math3.ode.nonstiff.EmbeddedRungeKuttaIntegrator#EmbeddedRungeKuttaIntegrator(String,boolean,double[],double[][],double[],RungeKuttaStepInterpolator,double,double,double,double)"
    ],
    "org.apache.commons.math3.util.MathUtils.copySign(short,short)": ["org.apache.commons.math3.exception.util.LocalizedFormats.<staticinit>()"],
    "org.apache.commons.math3.geometry.euclidean.twod.Segment#Segment(Vector2D,Vector2D,Line)": ["org.apache.commons.math3.geometry.euclidean.twod.Segment.<init>()"],
    "org.apache.commons.math3.linear.AbstractFieldMatrix#walkInRowOrder(FieldMatrixChangingVisitor<T extends FieldElement>)": [
        "org.apache.commons.math3.linear.SparseFieldMatrix#getEntry(int,int)",
        "org.apache.commons.math3.linear.BlockFieldMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.DefaultFieldMatrixChangingVisitor#start(int,int,int,int,int,int)",
        "org.apache.commons.math3.linear.SparseFieldMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.SparseFieldMatrix#setEntry(int,int,T extends FieldElement)",
        "org.apache.commons.math3.linear.Array2DRowFieldMatrix#setEntry(int,int,T extends FieldElement)",
        "org.apache.commons.math3.linear.BlockFieldMatrix#setEntry(int,int,T extends FieldElement)",
        "org.apache.commons.math3.linear.DefaultFieldMatrixChangingVisitor#end()",
        "org.apache.commons.math3.linear.Array2DRowFieldMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.SparseFieldMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.BlockFieldMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.DefaultFieldMatrixChangingVisitor#visit(int,int,T extends FieldElement)",
        "org.apache.commons.math3.linear.Array2DRowFieldMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.AbstractFieldMatrix#getSubMatrix(int[],int[])$DefaultFieldMatrixChangingVisitor$1#visit(int,int,T extends FieldElement)",
        "org.apache.commons.math3.linear.Array2DRowFieldMatrix#getEntry(int,int)",
        "org.apache.commons.math3.linear.BlockFieldMatrix#getEntry(int,int)"
    ],
    "org.apache.commons.math3.linear.SparseFieldMatrix#getEntry(int,int)": [
        "org.apache.commons.math3.util.OpenIntToFieldHashMap#get(int)",
        "org.apache.commons.math3.linear.SparseFieldMatrix#computeKey(int,int)",
        "org.apache.commons.math3.linear.AbstractFieldMatrix#checkColumnIndex(int)",
        "org.apache.commons.math3.linear.AbstractFieldMatrix#checkRowIndex(int)"
    ],
    "org.apache.commons.math3.optimization.fitting.GaussianFitter.ParameterGuesser#getInterpolationPointsForY(WeightedObservedPoint[],int,int,double)": [
        "org.apache.commons.math3.optimization.fitting.GaussianFitter.ParameterGuesser#isBetween(double,double,double)",
        "org.apache.commons.math3.optimization.fitting.WeightedObservedPoint#getY()",
        "org.apache.commons.math3.exception.ZeroException#ZeroException()"
    ],
    "org.apache.commons.math3.optimization.direct.BaseAbstractMultivariateSimpleBoundsOptimizer#optimize(int,FUNC extends MultivariateFunction,GoalType,double[])": ["org.apache.commons.math3.optimization.InitialGuess#InitialGuess(double[])"],
    "org.apache.commons.math3.fraction.BigFraction#BigFraction(long,long)": ["org.apache.commons.math3.fraction.BigFraction#BigFraction(BigInteger,BigInteger)"],
    "org.apache.commons.math3.stat.clustering.EuclideanDoublePoint#centroidOf(Collection<EuclideanDoublePoint>)": [
        "org.apache.commons.math3.stat.clustering.EuclideanDoublePoint#EuclideanDoublePoint(double[])",
        "org.apache.commons.math3.stat.clustering.EuclideanDoublePoint#getPoint()"
    ],
    "org.apache.commons.math3.optim.nonlinear.vector.ModelFunctionJacobian#ModelFunctionJacobian(MultivariateMatrixFunction)": ["org.apache.commons.math3.optim.nonlinear.vector.ModelFunctionJacobian.<init>()"],
    "org.apache.commons.math3.analysis.solvers.SecantSolver#SecantSolver(double)": [
        "org.apache.commons.math3.analysis.solvers.SecantSolver.<init>()",
        "org.apache.commons.math3.analysis.solvers.AbstractUnivariateSolver#AbstractUnivariateSolver(double)"
    ],
    "org.apache.commons.math3.stat.inference.TestUtils.gTest(double[],long[],double)": [
        "org.apache.commons.math3.stat.inference.GTest#gTest(double[],long[],double)",
        "org.apache.commons.math3.stat.inference.TestUtils.<staticinit>()"
    ],
    "org.apache.commons.math3.fitting.GaussianCurveFitter.ParameterGuesser#basicGuess(WeightedObservedPoint[])": [
        "org.apache.commons.math3.fitting.GaussianCurveFitter.ParameterGuesser#interpolateXAtY(WeightedObservedPoint[],int,int,double)",
        "org.apache.commons.math3.fitting.WeightedObservedPoint#getX()",
        "org.apache.commons.math3.util.FastMath.log(double)",
        "org.apache.commons.math3.fitting.GaussianCurveFitter.ParameterGuesser#findMaxY(WeightedObservedPoint[])",
        "org.apache.commons.math3.util.FastMath.sqrt(double)",
        "org.apache.commons.math3.fitting.WeightedObservedPoint#getY()"
    ],
    "org.apache.commons.math3.genetics.ChromosomePair#ChromosomePair(Chromosome,Chromosome)": ["org.apache.commons.math3.genetics.ChromosomePair.<init>()"],
    "org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet.findReferences(List<Vector3D>,List<int[]>)": [
        "org.apache.commons.math3.exception.util.LocalizedFormats.<staticinit>()",
        "org.apache.commons.math3.util.FastMath.max(int,int)"
    ],
    "org.apache.commons.math3.linear.OpenMapRealMatrix#subtract(RealMatrix)": [
        "org.apache.commons.math3.linear.OpenMapRealMatrix#subtract(OpenMapRealMatrix)",
        "org.apache.commons.math3.linear.AbstractRealMatrix#subtract(RealMatrix)"
    ],
    "org.apache.commons.math3.ode.sampling.DummyStepHandler#readResolve()": ["org.apache.commons.math3.ode.sampling.DummyStepHandler.LazyHolder.<staticinit>()"],
    "org.apache.commons.math3.ode.nonstiff.DormandPrince853Integrator.<staticinit>()": ["org.apache.commons.math3.util.FastMath.sqrt(double)"],
    "org.apache.commons.math3.stat.inference.TestUtils.kolmogorovSmirnovTest(RealDistribution,double[],boolean)": [
        "org.apache.commons.math3.stat.inference.KolmogorovSmirnovTest#kolmogorovSmirnovTest(RealDistribution,double[],boolean)",
        "org.apache.commons.math3.stat.inference.TestUtils.<staticinit>()"
    ],
    "org.apache.commons.math3.geometry.partitioning.RegionFactory.IntersectionMerger#merge(BSPTree<S extends Space>,BSPTree<S extends Space>,BSPTree<S extends Space>,boolean,boolean)": [
        "org.apache.commons.math3.geometry.partitioning.BSPTree#insertInTree(BSPTree<S extends Space>,boolean,VanishingCutHandler<S extends Space>)",
        "org.apache.commons.math3.geometry.partitioning.RegionFactory.VanishingToLeaf#VanishingToLeaf(boolean)",
        "org.apache.commons.math3.geometry.partitioning.BSPTree#getAttribute()"
    ],
    "org.apache.commons.math3.analysis.interpolation.SmoothingPolynomialBicubicSplineInterpolator#SmoothingPolynomialBicubicSplineInterpolator(int)": ["org.apache.commons.math3.analysis.interpolation.SmoothingPolynomialBicubicSplineInterpolator#SmoothingPolynomialBicubicSplineInterpolator(int,int)"],
    "org.apache.commons.math3.complex.RootsOfUnity#isCounterClockWise()": ["org.apache.commons.math3.exception.util.LocalizedFormats.<staticinit>()"],
    "org.apache.commons.math3.linear.EigenDecomposition#getSolver()": [
        "org.apache.commons.math3.exception.MathUnsupportedOperationException#MathUnsupportedOperationException()",
        "org.apache.commons.math3.linear.EigenDecomposition#hasComplexEigenvalues()",
        "org.apache.commons.math3.linear.EigenDecomposition.Solver#Solver(double[],double[],ArrayRealVector[])"
    ],
    "org.apache.commons.math3.distribution.LogNormalDistribution#getNumericalMean()": ["org.apache.commons.math3.util.FastMath.exp(double)"],
    "org.apache.commons.math3.ode.nonstiff.RungeKuttaStepInterpolator#readExternal(ObjectInput)": [
        "org.apache.commons.math3.ode.sampling.AbstractStepInterpolator#setInterpolatedTime(double)",
        "org.apache.commons.math3.ode.sampling.AbstractStepInterpolator#readBaseExternal(ObjectInput)"
    ],
    "org.apache.commons.math3.ode.nonstiff.RungeKuttaStepInterpolator#shift()": ["org.apache.commons.math3.ode.sampling.AbstractStepInterpolator#shift()"],
    "org.apache.commons.math3.fitting.leastsquares.LeastSquaresFactory.evaluationChecker(ConvergenceChecker<PointVectorValuePair>)$ConvergenceChecker$1#converged(int,Evaluation,Evaluation)": [
        "org.apache.commons.math3.fitting.leastsquares.DenseWeightedEvaluation#getPoint()",
        "org.apache.commons.math3.linear.OpenMapRealVector#toArray()",
        "org.apache.commons.math3.fitting.leastsquares.LeastSquaresFactory.LocalLeastSquaresProblem.LazyUnweightedEvaluation#getPoint()",
        "org.apache.commons.math3.fitting.leastsquares.OptimumImpl#getPoint()",
        "org.apache.commons.math3.linear.RealVector.unmodifiableRealVector(RealVector)$RealVector$1#toArray()",
        "org.apache.commons.math3.fitting.leastsquares.LeastSquaresFactory.LocalLeastSquaresProblem.LazyUnweightedEvaluation#getResiduals()",
        "org.apache.commons.math3.fitting.leastsquares.LeastSquaresFactory.LocalLeastSquaresProblem.UnweightedEvaluation#getResiduals()",
        "org.apache.commons.math3.fitting.leastsquares.OptimumImpl#getResiduals()",
        "org.apache.commons.math3.fitting.leastsquares.DenseWeightedEvaluation#getResiduals()",
        "org.apache.commons.math3.linear.RealVector#toArray()",
        "org.apache.commons.math3.linear.ArrayRealVector#toArray()",
        "org.apache.commons.math3.optim.PointVectorValuePair#PointVectorValuePair(double[],double[],boolean)",
        "org.apache.commons.math3.fitting.leastsquares.LeastSquaresFactory.LocalLeastSquaresProblem.UnweightedEvaluation#getPoint()"
    ],
    "org.apache.commons.math3.optim.linear.SimplexTableau#initializeColumnLabels()": [
        "org.apache.commons.math3.optim.linear.SimplexTableau#getNumArtificialVariables()",
        "org.apache.commons.math3.optim.linear.SimplexTableau.<staticinit>()",
        "org.apache.commons.math3.optim.linear.SimplexTableau#getNumObjectiveFunctions()",
        "org.apache.commons.math3.optim.linear.SimplexTableau#getOriginalNumDecisionVariables()",
        "org.apache.commons.math3.optim.linear.SimplexTableau#getNumSlackVariables()"
    ],
    "org.apache.commons.math3.linear.NonSquareOperatorException#NonSquareOperatorException(int,int)": [
        "org.apache.commons.math3.linear.NonSquareOperatorException.<init>()",
        "org.apache.commons.math3.exception.DimensionMismatchException#DimensionMismatchException(Localizable,int,int)",
        "org.apache.commons.math3.exception.util.LocalizedFormats.<staticinit>()"
    ],
    "org.apache.commons.math3.fraction.Fraction#abs()": ["org.apache.commons.math3.fraction.Fraction#negate()"],
    "org.apache.commons.math3.ode.sampling.AbstractStepInterpolator#copy()": [
        "org.apache.commons.math3.ode.nonstiff.LutherStepInterpolator#doCopy()",
        "org.apache.commons.math3.ode.nonstiff.MidpointStepInterpolator#doCopy()",
        "org.apache.commons.math3.ode.nonstiff.GraggBulirschStoerStepInterpolator#doCopy()",
        "org.apache.commons.math3.ode.nonstiff.ClassicalRungeKuttaStepInterpolator#doCopy()",
        "org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator#doCopy()",
        "org.apache.commons.math3.ode.sampling.NordsieckStepInterpolator#doCopy()",
        "org.apache.commons.math3.ode.sampling.AbstractStepInterpolator#finalizeStep()",
        "org.apache.commons.math3.ode.nonstiff.HighamHall54StepInterpolator#doCopy()",
        "org.apache.commons.math3.ode.nonstiff.GillStepInterpolator#doCopy()",
        "org.apache.commons.math3.ode.nonstiff.DormandPrince54StepInterpolator#doCopy()",
        "org.apache.commons.math3.ode.nonstiff.EulerStepInterpolator#doCopy()",
        "org.apache.commons.math3.ode.nonstiff.ThreeEighthesStepInterpolator#doCopy()"
    ],
    "org.apache.commons.math3.optim.nonlinear.scalar.gradient.NonLinearConjugateGradientOptimizer#optimize(OptimizationData[]...)": ["org.apache.commons.math3.optim.nonlinear.scalar.GradientMultivariateOptimizer#optimize(OptimizationData[]...)"],
    "org.apache.commons.math3.fitting.leastsquares.LeastSquaresFactory.create(MultivariateVectorFunction,MultivariateMatrixFunction,double[],double[],RealMatrix,ConvergenceChecker<Evaluation>,int,int)": [
        "org.apache.commons.math3.linear.ArrayRealVector#ArrayRealVector(double[],boolean)",
        "org.apache.commons.math3.fitting.leastsquares.LeastSquaresFactory.model(MultivariateVectorFunction,MultivariateMatrixFunction)",
        "org.apache.commons.math3.fitting.leastsquares.LeastSquaresFactory.create(MultivariateJacobianFunction,RealVector,RealVector,RealMatrix,ConvergenceChecker<Evaluation>,int,int)"
    ],
    "org.apache.commons.math3.dfp.Dfp#greaterThan(Dfp)": [
        "org.apache.commons.math3.dfp.DfpDec#newInstance(Dfp)",
        "org.apache.commons.math3.dfp.Dfp.<staticinit>()",
        "org.apache.commons.math3.dfp.Dfp#dotrap(int,String,Dfp,Dfp)",
        "org.apache.commons.math3.dfp.Dfp#newInstance(Dfp)",
        "org.apache.commons.math3.dfp.DfpField.<staticinit>()",
        "org.apache.commons.math3.dfp.DfpField#getRadixDigits()",
        "org.apache.commons.math3.dfp.DfpField#setIEEEFlagsBits(int)",
        "org.apache.commons.math3.dfp.Dfp.compare(Dfp,Dfp)",
        "org.apache.commons.math3.dfp.Dfp#isNaN()",
        "org.apache.commons.math3.dfp.Dfp#getZero()"
    ],
    "org.apache.commons.math3.transform.FastHadamardTransformer#transform(double[],TransformType)": [
        "org.apache.commons.math3.transform.TransformUtils.scaleArray(double[],double)",
        "org.apache.commons.math3.transform.FastHadamardTransformer#fht(double[])",
        "org.apache.commons.math3.transform.TransformType.<staticinit>()"
    ],
    "org.apache.commons.math3.distribution.AbstractIntegerDistribution.<init>()": ["org.apache.commons.math3.random.RandomDataImpl#RandomDataImpl()"],
    "org.apache.commons.math3.util.Decimal64#atanh()": [
        "org.apache.commons.math3.util.FastMath.atanh(double)",
        "org.apache.commons.math3.util.Decimal64#Decimal64(double)"
    ],
    "org.apache.commons.math3.random.AbstractWell#AbstractWell(int,int,int,int,long)": ["org.apache.commons.math3.random.AbstractWell#AbstractWell(int,int,int,int,int[])"],
    "org.apache.commons.math3.util.Decimal64#rootN(int)": [
        "org.apache.commons.math3.util.FastMath.pow(double,int)",
        "org.apache.commons.math3.util.Decimal64#Decimal64(double)"
    ],
    "org.apache.commons.math3.linear.FieldLUDecomposition#getSolver()": ["org.apache.commons.math3.linear.FieldLUDecomposition.Solver#Solver(Field<T extends FieldElement>,T extends FieldElement[][],int[],boolean)"],
    "org.apache.commons.math3.genetics.ElitisticListPopulation#ElitisticListPopulation(int,double)": [
        "org.apache.commons.math3.genetics.ElitisticListPopulation#setElitismRate(double)",
        "org.apache.commons.math3.genetics.ListPopulation#ListPopulation(int)",
        "org.apache.commons.math3.genetics.ElitisticListPopulation.<init>()"
    ],
    "org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet#PolyhedronsSet()": [
        "org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet#PolyhedronsSet(double)",
        "org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet.<staticinit>()"
    ],
    "org.apache.commons.math3.linear.RealVector.unmodifiableRealVector(RealVector)$RealVector$1#mapToSelf(UnivariateFunction)": ["org.apache.commons.math3.exception.MathUnsupportedOperationException#MathUnsupportedOperationException()"],
    "org.apache.commons.math3.optim.nonlinear.scalar.LineSearch#search(double[],double[])$UnivariateFunction$1#value(double)": ["org.apache.commons.math3.optim.nonlinear.scalar.MultivariateOptimizer#computeObjectiveValue(double[])"],
    "org.apache.commons.math3.analysis.FunctionUtils.toDifferentiableMultivariateVectorFunction(MultivariateDifferentiableVectorFunction)$DifferentiableMultivariateVectorFunction$1#jacobian()": ["org.apache.commons.math3.analysis.FunctionUtils.toDifferentiableMultivariateVectorFunction(MultivariateDifferentiableVectorFunction)$MultivariateMatrixFunction$1$MultivariateMatrixFunction$1#jacobian()$MultivariateMatrixFunction$1.<init>()"],
    "org.apache.commons.math3.fraction.ProperBigFractionFormat#setWholeFormat(NumberFormat)": ["org.apache.commons.math3.exception.util.LocalizedFormats.<staticinit>()"],
    "org.apache.commons.math3.distribution.ExponentialDistribution#ExponentialDistribution(double)": [
        "org.apache.commons.math3.distribution.ExponentialDistribution#ExponentialDistribution(double,double)",
        "org.apache.commons.math3.distribution.ExponentialDistribution.<staticinit>()"
    ],
    "org.apache.commons.math3.analysis.solvers.BracketingNthOrderBrentSolver#solve(int,UnivariateFunction,double,double,AllowedSolution)": ["org.apache.commons.math3.analysis.solvers.BaseAbstractUnivariateSolver#solve(int,FUNC extends UnivariateFunction,double,double)"],
    "org.apache.commons.math3.linear.Array2DRowFieldMatrix#preMultiply(T extends FieldElement[])": [
        "org.apache.commons.math3.util.BigRealField#getZero()",
        "org.apache.commons.math3.analysis.differentiation.SparseGradient#getField()$Field$1#getZero()",
        "org.apache.commons.math3.util.Decimal64Field#getZero()",
        "org.apache.commons.math3.dfp.DfpField#getZero()",
        "org.apache.commons.math3.linear.Array2DRowFieldMatrix#getColumnDimension()",
        "org.apache.commons.math3.exception.DimensionMismatchException#DimensionMismatchException(int,int)",
        "org.apache.commons.math3.linear.AbstractFieldMatrix#getField()",
        "org.apache.commons.math3.analysis.differentiation.DerivativeStructure#getField()$Field$1#getZero()",
        "org.apache.commons.math3.fraction.FractionField#getZero()",
        "org.apache.commons.math3.linear.Array2DRowFieldMatrix#getRowDimension()",
        "org.apache.commons.math3.complex.ComplexField#getZero()",
        "org.apache.commons.math3.fraction.BigFractionField#getZero()",
        "org.apache.commons.math3.util.MathArrays.buildArray(Field<T>,int)"
    ],
    "org.apache.commons.math3.stat.descriptive.SummaryStatistics#getMax()": [
        "org.apache.commons.math3.stat.descriptive.moment.FirstMoment#getResult()",
        "org.apache.commons.math3.stat.descriptive.rank.Min#getResult()",
        "org.apache.commons.math3.stat.descriptive.moment.GeometricMean#getResult()",
        "org.apache.commons.math3.stat.descriptive.moment.Variance#getResult()",
        "org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile#getResult()",
        "org.apache.commons.math3.stat.descriptive.summary.Sum#getResult()",
        "org.apache.commons.math3.stat.descriptive.moment.FourthMoment#getResult()",
        "org.apache.commons.math3.stat.descriptive.moment.StandardDeviation#getResult()",
        "org.apache.commons.math3.stat.descriptive.summary.SumOfLogs#getResult()",
        "org.apache.commons.math3.stat.descriptive.summary.Product#getResult()",
        "org.apache.commons.math3.stat.descriptive.summary.SumOfSquares#getResult()",
        "org.apache.commons.math3.stat.descriptive.moment.Skewness#getResult()",
        "org.apache.commons.math3.stat.descriptive.moment.Kurtosis#getResult()",
        "org.apache.commons.math3.stat.descriptive.rank.Max#getResult()",
        "org.apache.commons.math3.stat.descriptive.moment.SecondMoment#getResult()",
        "org.apache.commons.math3.stat.descriptive.moment.ThirdMoment#getResult()",
        "org.apache.commons.math3.stat.descriptive.moment.Mean#getResult()"
    ],
    "org.apache.commons.math3.ml.neuralnet.twod.NeuronSquareMesh2D#copy()": [
        "org.apache.commons.math3.ml.neuralnet.twod.NeuronSquareMesh2D#NeuronSquareMesh2D(boolean,boolean,SquareNeighbourhood,Network,long[][])",
        "org.apache.commons.math3.ml.neuralnet.Network#copy()"
    ],
    "org.apache.commons.math3.util.OpenIntToDoubleHashMap#iterator()": ["org.apache.commons.math3.util.OpenIntToDoubleHashMap.Iterator#Iterator()"],
    "org.apache.commons.math3.util.ResizableDoubleArray#compute(Function)": [
        "org.apache.commons.math3.stat.descriptive.moment.Skewness#evaluate(double[],int,int)",
        "org.apache.commons.math3.stat.descriptive.moment.Variance#evaluate(double[],int,int)",
        "org.apache.commons.math3.stat.descriptive.moment.SemiVariance#evaluate(double[],int,int)",
        "org.apache.commons.math3.stat.descriptive.moment.GeometricMean#evaluate(double[],int,int)",
        "org.apache.commons.math3.stat.descriptive.summary.SumOfLogs#evaluate(double[],int,int)",
        "org.apache.commons.math3.stat.descriptive.moment.StandardDeviation#evaluate(double[],int,int)",
        "org.apache.commons.math3.stat.descriptive.summary.Sum#evaluate(double[],int,int)",
        "org.apache.commons.math3.stat.descriptive.rank.Min#evaluate(double[],int,int)",
        "org.apache.commons.math3.stat.descriptive.rank.Percentile#evaluate(double[],int,int)",
        "org.apache.commons.math3.stat.descriptive.rank.Max#evaluate(double[],int,int)",
        "org.apache.commons.math3.stat.descriptive.summary.SumOfSquares#evaluate(double[],int,int)",
        "org.apache.commons.math3.stat.descriptive.moment.Mean#evaluate(double[],int,int)",
        "org.apache.commons.math3.stat.descriptive.summary.Product#evaluate(double[],int,int)",
        "org.apache.commons.math3.stat.descriptive.moment.Kurtosis#evaluate(double[],int,int)",
        "org.apache.commons.math3.stat.descriptive.AbstractStorelessUnivariateStatistic#evaluate(double[],int,int)"
    ],
    "org.apache.commons.math3.dfp.Dfp#strictlyPositive()": [
        "org.apache.commons.math3.dfp.DfpDec#newInstance(Dfp)",
        "org.apache.commons.math3.dfp.Dfp.<staticinit>()",
        "org.apache.commons.math3.dfp.Dfp#dotrap(int,String,Dfp,Dfp)",
        "org.apache.commons.math3.dfp.Dfp#newInstance(Dfp)",
        "org.apache.commons.math3.dfp.DfpField.<staticinit>()",
        "org.apache.commons.math3.dfp.DfpField#setIEEEFlagsBits(int)",
        "org.apache.commons.math3.dfp.Dfp#isNaN()",
        "org.apache.commons.math3.dfp.Dfp#getZero()",
        "org.apache.commons.math3.dfp.Dfp#isInfinite()"
    ],
    "org.apache.commons.math3.util.KthSelector#select(double[],int[],int)": [
        "org.apache.commons.math3.util.RandomPivotingStrategy#pivotIndex(double[],int,int)",
        "org.apache.commons.math3.util.KthSelector#partition(double[],int,int,int)",
        "org.apache.commons.math3.util.KthSelector.<staticinit>()",
        "org.apache.commons.math3.util.CentralPivotingStrategy#pivotIndex(double[],int,int)",
        "org.apache.commons.math3.util.MedianOf3PivotingStrategy#pivotIndex(double[],int,int)",
        "org.apache.commons.math3.util.FastMath.min(int,int)"
    ],
    "org.apache.commons.math3.distribution.PoissonDistribution#nextPoisson(double)": [
        "org.apache.commons.math3.distribution.ExponentialDistribution#sample()",
        "org.apache.commons.math3.util.FastMath.ceil(double)",
        "org.apache.commons.math3.random.RandomAdaptor#nextGaussian()",
        "org.apache.commons.math3.random.SynchronizedRandomGenerator#nextGaussian()",
        "org.apache.commons.math3.random.RandomGeneratorFactory.createRandomGenerator(Random)$RandomGenerator$1#nextGaussian()",
        "org.apache.commons.math3.random.AbstractRandomGenerator#nextGaussian()",
        "org.apache.commons.math3.distribution.PoissonDistribution#nextPoisson(double)",
        "org.apache.commons.math3.random.BitsStreamGenerator#nextDouble()",
        "org.apache.commons.math3.util.FastMath.<staticinit>()",
        "org.apache.commons.math3.random.SynchronizedRandomGenerator#nextDouble()",
        "org.apache.commons.math3.util.CombinatoricsUtils.factorialLog(int)",
        "org.apache.commons.math3.random.RandomAdaptor#nextDouble()",
        "org.apache.commons.math3.util.FastMath.exp(double)",
        "org.apache.commons.math3.random.BitsStreamGenerator#nextGaussian()",
        "org.apache.commons.math3.util.FastMath.sqrt(double)",
        "org.apache.commons.math3.util.FastMath.floor(double)",
        "org.apache.commons.math3.random.RandomGeneratorFactory.createRandomGenerator(Random)$RandomGenerator$1#nextDouble()",
        "org.apache.commons.math3.util.FastMath.log(double)"
    ],
    "org.apache.commons.math3.random.RandomDataImpl#reSeedSecure()": ["org.apache.commons.math3.random.RandomDataGenerator#reSeedSecure()"],
    "org.apache.commons.math3.geometry.partitioning.BSPTree#fitToCell(SubHyperplane<S extends Space>)": [
        "org.apache.commons.math3.geometry.partitioning.SubHyperplane.SplitSubHyperplane#getMinus()",
        "org.apache.commons.math3.geometry.partitioning.AbstractSubHyperplane#getHyperplane()",
        "org.apache.commons.math3.geometry.partitioning.SubHyperplane.SplitSubHyperplane#getPlus()"
    ],
    "org.apache.commons.math3.ode.nonstiff.LutherIntegrator#LutherIntegrator(double)": [
        "org.apache.commons.math3.ode.nonstiff.LutherStepInterpolator#LutherStepInterpolator()",
        "org.apache.commons.math3.ode.nonstiff.LutherIntegrator.<staticinit>()",
        "org.apache.commons.math3.ode.nonstiff.LutherIntegrator.<init>()",
        "org.apache.commons.math3.ode.nonstiff.RungeKuttaIntegrator#RungeKuttaIntegrator(String,double[],double[][],double[],RungeKuttaStepInterpolator,double)"
    ],
    "org.apache.commons.math3.distribution.MultivariateNormalDistribution#getExponentTerm(double[])": [
        "org.apache.commons.math3.linear.AbstractRealMatrix#preMultiply(double[])",
        "org.apache.commons.math3.linear.DiagonalMatrix#preMultiply(double[])",
        "org.apache.commons.math3.distribution.MultivariateNormalDistribution#getMeans()",
        "org.apache.commons.math3.linear.Array2DRowRealMatrix#preMultiply(double[])",
        "org.apache.commons.math3.util.FastMath.exp(double)",
        "org.apache.commons.math3.linear.BlockRealMatrix#preMultiply(double[])"
    ],
    "org.apache.commons.math3.linear.BlockFieldMatrix#subtract(BlockFieldMatrix<T extends FieldElement>)": [
        "org.apache.commons.math3.linear.AbstractFieldMatrix#checkSubtractionCompatible(FieldMatrix<T extends FieldElement>)",
        "org.apache.commons.math3.linear.BlockFieldMatrix#BlockFieldMatrix(Field<T extends FieldElement>,int,int)",
        "org.apache.commons.math3.linear.AbstractFieldMatrix#getField()"
    ],
    "org.apache.commons.math3.distribution.ParetoDistribution#cumulativeProbability(double,double)": [
        "org.apache.commons.math3.distribution.NormalDistribution#probability(double,double)",
        "org.apache.commons.math3.distribution.LogNormalDistribution#probability(double,double)",
        "org.apache.commons.math3.distribution.AbstractRealDistribution#probability(double,double)"
    ],
    "org.apache.commons.math3.random.RandomGeneratorFactory.createRandomGenerator(Random)$RandomGenerator$1#nextFloat()": ["org.apache.commons.math3.random.RandomAdaptor#nextFloat()"],
    "org.apache.commons.math3.optimization.LeastSquaresConverter#LeastSquaresConverter(MultivariateVectorFunction,double[],double[])": [
        "org.apache.commons.math3.exception.DimensionMismatchException#DimensionMismatchException(int,int)",
        "org.apache.commons.math3.optimization.LeastSquaresConverter.<init>()"
    ],
    "org.apache.commons.math3.random.RandomDataImpl#nextBinomial(int,double)": ["org.apache.commons.math3.random.RandomDataGenerator#nextBinomial(int,double)"],
    "org.apache.commons.math3.ml.neuralnet.MapUtils.computeHitHistogram(Iterable<double[]>,NeuronSquareMesh2D,DistanceMeasure)": [
        "org.apache.commons.math3.ml.neuralnet.twod.NeuronSquareMesh2D#getNetwork()",
        "org.apache.commons.math3.ml.neuralnet.MapUtils.findBest(double[],Iterable<Neuron>,DistanceMeasure)",
        "org.apache.commons.math3.ml.neuralnet.twod.NeuronSquareMesh2D#getNumberOfRows()",
        "org.apache.commons.math3.ml.neuralnet.twod.NeuronSquareMesh2D#getNeuron(int,int)",
        "org.apache.commons.math3.ml.neuralnet.twod.NeuronSquareMesh2D#getNumberOfColumns()"
    ],
    "org.apache.commons.math3.geometry.euclidean.oned.Vector1DFormat.getInstance()": ["org.apache.commons.math3.geometry.euclidean.oned.Vector1DFormat.getInstance(Locale)"],
    "org.apache.commons.math3.linear.OpenMapRealVector#getL1Distance(OpenMapRealVector)": [
        "org.apache.commons.math3.linear.OpenMapRealVector#getDimension()",
        "org.apache.commons.math3.util.OpenIntToDoubleHashMap.Iterator#value()",
        "org.apache.commons.math3.util.FastMath.abs(double)",
        "org.apache.commons.math3.util.OpenIntToDoubleHashMap#iterator()",
        "org.apache.commons.math3.linear.RealVector#checkVectorDimensions(int)",
        "org.apache.commons.math3.util.OpenIntToDoubleHashMap#containsKey(int)",
        "org.apache.commons.math3.util.OpenIntToDoubleHashMap.Iterator#advance()",
        "org.apache.commons.math3.linear.OpenMapRealVector#getEntries()",
        "org.apache.commons.math3.linear.ArrayRealVector#checkVectorDimensions(int)",
        "org.apache.commons.math3.util.OpenIntToDoubleHashMap.Iterator#key()",
        "org.apache.commons.math3.linear.OpenMapRealVector#getEntry(int)",
        "org.apache.commons.math3.util.OpenIntToDoubleHashMap.Iterator#hasNext()"
    ],
    "org.apache.commons.math3.linear.RealMatrixFormat#parse(String,ParsePosition)": [
        "org.apache.commons.math3.linear.MatrixUtils.createRealMatrix(double[][])",
        "org.apache.commons.math3.util.CompositeFormat.parseNumber(String,NumberFormat,ParsePosition)",
        "org.apache.commons.math3.util.CompositeFormat.parseFixedstring(String,String,ParsePosition)",
        "org.apache.commons.math3.util.CompositeFormat.parseAndIgnoreWhitespace(String,ParsePosition)"
    ],
    "org.apache.commons.math3.distribution.NormalDistribution#NormalDistribution(double,double)": [
        "org.apache.commons.math3.distribution.NormalDistribution.<staticinit>()",
        "org.apache.commons.math3.distribution.NormalDistribution#NormalDistribution(double,double,double)"
    ],
    "org.apache.commons.math3.linear.AbstractRealMatrix#getSubMatrix(int[],int[])": [
        "org.apache.commons.math3.linear.MatrixUtils.checkSubMatrixIndex(AnyMatrix,int[],int[])",
        "org.apache.commons.math3.linear.AbstractRealMatrix#walkInOptimizedOrder(RealMatrixChangingVisitor)",
        "org.apache.commons.math3.linear.OpenMapRealMatrix#createMatrix(int,int)",
        "org.apache.commons.math3.linear.AbstractRealMatrix#getSubMatrix(int[],int[])$DefaultRealMatrixChangingVisitor$1.<init>()",
        "org.apache.commons.math3.linear.BlockRealMatrix#walkInOptimizedOrder(RealMatrixChangingVisitor)",
        "org.apache.commons.math3.linear.Array2DRowRealMatrix#createMatrix(int,int)",
        "org.apache.commons.math3.linear.DiagonalMatrix#createMatrix(int,int)",
        "org.apache.commons.math3.linear.BlockRealMatrix#createMatrix(int,int)"
    ],
    "org.apache.commons.math3.geometry.partitioning.BoundaryBuilder#visitInternalNode(BSPTree<S extends Space>)": [
        "org.apache.commons.math3.geometry.partitioning.NodesSet#NodesSet()",
        "org.apache.commons.math3.geometry.partitioning.NodesSet#addAll(Iterable<BSPTree<S extends Space>>)",
        "org.apache.commons.math3.geometry.partitioning.Characterization#getInsideSplitters()",
        "org.apache.commons.math3.geometry.partitioning.Characterization#outsideTouching()",
        "org.apache.commons.math3.geometry.partitioning.Characterization#Characterization(BSPTree<S extends Space>,SubHyperplane<S extends Space>)",
        "org.apache.commons.math3.geometry.partitioning.NodesSet#add(BSPTree<S extends Space>)",
        "org.apache.commons.math3.geometry.partitioning.Characterization#insideTouching()",
        "org.apache.commons.math3.geometry.partitioning.BSPTree#setAttribute(Object)",
        "org.apache.commons.math3.geometry.partitioning.BSPTree#getCut()",
        "org.apache.commons.math3.geometry.partitioning.BSPTree#getParent()",
        "org.apache.commons.math3.geometry.partitioning.BSPTree#getPlus()",
        "org.apache.commons.math3.geometry.partitioning.AbstractSubHyperplane#copySelf()",
        "org.apache.commons.math3.geometry.partitioning.BSPTree#getMinus()",
        "org.apache.commons.math3.geometry.partitioning.BoundaryAttribute#BoundaryAttribute(SubHyperplane<S extends Space>,SubHyperplane<S extends Space>,NodesSet<S extends Space>)",
        "org.apache.commons.math3.geometry.partitioning.Characterization#getOutsideSplitters()",
        "org.apache.commons.math3.geometry.partitioning.Characterization#touchOutside()",
        "org.apache.commons.math3.geometry.partitioning.Characterization#touchInside()"
    ],
    "org.apache.commons.math3.dfp.Dfp#atan()": ["org.apache.commons.math3.dfp.DfpMath.atan(Dfp)"],
    "org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet#PolyhedronsSet(double)": [
        "org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet.<init>()",
        "org.apache.commons.math3.geometry.partitioning.AbstractRegion#AbstractRegion(double)"
    ],
    "org.apache.commons.math3.analysis.interpolation.AkimaSplineInterpolator#interpolate(double[],double[])": [
        "org.apache.commons.math3.exception.DimensionMismatchException#DimensionMismatchException(int,int)",
        "org.apache.commons.math3.exception.NullArgumentException#NullArgumentException()",
        "org.apache.commons.math3.util.Precision.equals(double,double)",
        "org.apache.commons.math3.util.FastMath.abs(double)",
        "org.apache.commons.math3.util.MathArrays.checkOrder(double[])",
        "org.apache.commons.math3.analysis.interpolation.AkimaSplineInterpolator#interpolateHermiteSorted(double[],double[],double[])",
        "org.apache.commons.math3.exception.util.LocalizedFormats.<staticinit>()",
        "org.apache.commons.math3.analysis.interpolation.AkimaSplineInterpolator.<staticinit>()",
        "org.apache.commons.math3.analysis.interpolation.AkimaSplineInterpolator#differentiateThreePoint(double[],double[],int,int,int,int)"
    ],
    "org.apache.commons.math3.ml.clustering.Clusterer#distance(Clusterable,Clusterable)": [
        "org.apache.commons.math3.ml.clustering.DoublePoint#getPoint()",
        "org.apache.commons.math3.ml.distance.EuclideanDistance#compute(double[],double[])",
        "org.apache.commons.math3.ml.distance.ChebyshevDistance#compute(double[],double[])",
        "org.apache.commons.math3.ml.distance.ManhattanDistance#compute(double[],double[])",
        "org.apache.commons.math3.ml.distance.CanberraDistance#compute(double[],double[])",
        "org.apache.commons.math3.ml.distance.EarthMoversDistance#compute(double[],double[])"
    ],
    "org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet#leafBefore(BSPTree<Euclidean1D>)": [
        "org.apache.commons.math3.geometry.partitioning.BSPTree#getCut()",
        "org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet#childAfter(BSPTree<Euclidean1D>)",
        "org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet#childBefore(BSPTree<Euclidean1D>)"
    ],
    "org.apache.commons.math3.stat.descriptive.SynchronizedSummaryStatistics#getN()": ["org.apache.commons.math3.stat.descriptive.SummaryStatistics#getN()"],
    "org.apache.commons.math3.distribution.BetaDistribution#cumulativeProbability(double)": ["org.apache.commons.math3.special.Beta.regularizedBeta(double,double,double)"],
    "org.apache.commons.math3.ode.events.Transformer$Transformer$1#transformed(double)": [
        "org.apache.commons.math3.util.FastMath.max(double,double)",
        "org.apache.commons.math3.util.Precision.<staticinit>()"
    ],
    "org.apache.commons.math3.optimization.fitting.PolynomialFitter#PolynomialFitter(DifferentiableMultivariateVectorOptimizer)": [
        "org.apache.commons.math3.optimization.fitting.PolynomialFitter.<init>()",
        "org.apache.commons.math3.optimization.fitting.CurveFitter#CurveFitter(DifferentiableMultivariateVectorOptimizer)"
    ],
    "org.apache.commons.math3.stat.descriptive.moment.Kurtosis#Kurtosis(Kurtosis)": [
        "org.apache.commons.math3.stat.descriptive.moment.Kurtosis.copy(Kurtosis,Kurtosis)",
        "org.apache.commons.math3.stat.descriptive.AbstractStorelessUnivariateStatistic.<init>()",
        "org.apache.commons.math3.stat.descriptive.moment.Kurtosis.<init>()"
    ],
    "org.apache.commons.math3.optim.nonlinear.vector.Weight#getWeight()": [
        "org.apache.commons.math3.linear.Array2DRowRealMatrix#copy()",
        "org.apache.commons.math3.linear.BlockRealMatrix#copy()",
        "org.apache.commons.math3.linear.DiagonalMatrix#copy()",
        "org.apache.commons.math3.linear.OpenMapRealMatrix#copy()"
    ],
    "org.apache.commons.math3.linear.SymmLQ#solve(RealLinearOperator,RealLinearOperator,RealVector)": [
        "org.apache.commons.math3.linear.DiagonalMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.Array2DRowRealMatrix#getColumnDimension()",
        "org.apache.commons.math3.util.MathUtils.checkNotNull(Object)",
        "org.apache.commons.math3.linear.OpenMapRealMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.JacobiPreconditioner#getColumnDimension()",
        "org.apache.commons.math3.linear.ArrayRealVector#ArrayRealVector(int)",
        "org.apache.commons.math3.linear.BlockRealMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.SymmLQ#solveInPlace(RealLinearOperator,RealLinearOperator,RealVector,RealVector,boolean,double)",
        "org.apache.commons.math3.linear.JacobiPreconditioner#sqrt()$RealLinearOperator$1#getColumnDimension()"
    ],
    "org.apache.commons.math3.analysis.function.Expm1#value(double)": ["org.apache.commons.math3.util.FastMath.expm1(double)"],
    "org.apache.commons.math3.stat.descriptive.moment.GeometricMean#checkEmpty()": [
        "org.apache.commons.math3.stat.descriptive.moment.GeometricMean#getN()",
        "org.apache.commons.math3.exception.util.LocalizedFormats.<staticinit>()"
    ],
    "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.MultiDirectionalSimplex#MultiDirectionalSimplex(double[],double,double)": [
        "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.MultiDirectionalSimplex.<init>()",
        "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.AbstractSimplex#AbstractSimplex(double[])"
    ],
    "org.apache.commons.math3.util.FastMath.exp(double)": ["org.apache.commons.math3.util.FastMath.exp(double,double,double[])"],
    "org.apache.commons.math3.genetics.InvalidRepresentationException#InvalidRepresentationException(Localizable,Object[]...)": [
        "org.apache.commons.math3.genetics.InvalidRepresentationException.<init>()",
        "org.apache.commons.math3.exception.MathIllegalArgumentException#MathIllegalArgumentException(Localizable,Object[]...)"
    ],
    "org.apache.commons.math3.random.EmpiricalDistribution#k(double)": [
        "org.apache.commons.math3.random.EmpiricalDistribution#getKernel(SummaryStatistics)",
        "org.apache.commons.math3.random.EmpiricalDistribution#findBin(double)"
    ],
    "org.apache.commons.math3.linear.AbstractFieldMatrix#checkMultiplicationCompatible(FieldMatrix<T extends FieldElement>)": [
        "org.apache.commons.math3.linear.SparseFieldMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.BlockFieldMatrix#getRowDimension()",
        "org.apache.commons.math3.exception.DimensionMismatchException#DimensionMismatchException(int,int)",
        "org.apache.commons.math3.linear.BlockFieldMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.BlockRealMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.Array2DRowRealMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.SparseFieldMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.OpenMapRealMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.DiagonalMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.Array2DRowFieldMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.Array2DRowFieldMatrix#getColumnDimension()"
    ],
    "org.apache.commons.math3.fitting.PolynomialCurveFitter#getProblem(Collection<WeightedObservedPoint>)": [
        "org.apache.commons.math3.fitting.leastsquares.LeastSquaresBuilder#maxIterations(int)",
        "org.apache.commons.math3.exception.MathInternalError#MathInternalError()",
        "org.apache.commons.math3.fitting.leastsquares.LeastSquaresBuilder.<init>()",
        "org.apache.commons.math3.fitting.PolynomialCurveFitter.<staticinit>()",
        "org.apache.commons.math3.fitting.leastsquares.LeastSquaresBuilder#target(double[])",
        "org.apache.commons.math3.fitting.leastsquares.LeastSquaresBuilder#model(MultivariateVectorFunction,MultivariateMatrixFunction)",
        "org.apache.commons.math3.fitting.WeightedObservedPoint#getWeight()",
        "org.apache.commons.math3.fitting.AbstractCurveFitter.TheoreticalValuesFunction#getModelFunctionJacobian()",
        "org.apache.commons.math3.fitting.AbstractCurveFitter.TheoreticalValuesFunction#getModelFunction()",
        "org.apache.commons.math3.fitting.WeightedObservedPoint#getY()",
        "org.apache.commons.math3.fitting.leastsquares.LeastSquaresBuilder#build()",
        "org.apache.commons.math3.fitting.leastsquares.LeastSquaresBuilder#maxEvaluations(int)",
        "org.apache.commons.math3.fitting.leastsquares.LeastSquaresBuilder#weight(RealMatrix)",
        "org.apache.commons.math3.linear.DiagonalMatrix#DiagonalMatrix(double[])",
        "org.apache.commons.math3.fitting.leastsquares.LeastSquaresBuilder#start(double[])",
        "org.apache.commons.math3.fitting.AbstractCurveFitter.TheoreticalValuesFunction#TheoreticalValuesFunction(ParametricUnivariateFunction,Collection<WeightedObservedPoint>)"
    ],
    "org.apache.commons.math3.util.BigReal#BigReal(char[],int,int)": ["org.apache.commons.math3.util.BigReal.<init>()"],
    "org.apache.commons.math3.distribution.UniformRealDistribution#UniformRealDistribution(double,double,double)": [
        "org.apache.commons.math3.random.Well19937c#Well19937c()",
        "org.apache.commons.math3.distribution.UniformRealDistribution#UniformRealDistribution(RandomGenerator,double,double)"
    ],
    "org.apache.commons.math3.userguide.RealDistributionComparison.main(String[])": [
        "org.apache.commons.math3.userguide.ExampleUtils.showExampleFrame(ExampleFrame)",
        "org.apache.commons.math3.userguide.RealDistributionComparison.Display#Display()"
    ],
    "org.apache.commons.math3.ode.nonstiff.AdamsNordsieckTransformer#AdamsNordsieckTransformer(int)": [
        "org.apache.commons.math3.linear.ArrayFieldVector#toArray()",
        "org.apache.commons.math3.linear.Array2DRowFieldMatrix#getData()",
        "org.apache.commons.math3.linear.AbstractFieldMatrix#getData()",
        "org.apache.commons.math3.linear.Array2DRowFieldMatrix#Array2DRowFieldMatrix(T extends FieldElement[][],boolean)",
        "org.apache.commons.math3.linear.BlockFieldMatrix#getData()",
        "org.apache.commons.math3.linear.SparseFieldVector#toArray()",
        "org.apache.commons.math3.linear.FieldLUDecomposition#getSolver()",
        "org.apache.commons.math3.linear.FieldLUDecomposition.Solver#solve(FieldVector<T extends FieldElement>)",
        "org.apache.commons.math3.linear.MatrixUtils.bigFractionMatrixToRealMatrix(FieldMatrix<BigFraction>)",
        "org.apache.commons.math3.fraction.BigFraction.<staticinit>()",
        "org.apache.commons.math3.ode.nonstiff.AdamsNordsieckTransformer.<init>()",
        "org.apache.commons.math3.linear.FieldLUDecomposition.Solver#solve(FieldMatrix<T extends FieldElement>)",
        "org.apache.commons.math3.linear.ArrayFieldVector#ArrayFieldVector(T extends FieldElement[],boolean)",
        "org.apache.commons.math3.fraction.BigFraction#doubleValue()",
        "org.apache.commons.math3.linear.FieldLUDecomposition#FieldLUDecomposition(FieldMatrix<T extends FieldElement>)",
        "org.apache.commons.math3.ode.nonstiff.AdamsNordsieckTransformer#buildP(int)"
    ],
    "org.apache.commons.math3.stat.inference.TTest#pairedT(double[],double[])": [
        "org.apache.commons.math3.stat.StatUtils.varianceDifference(double[],double[],double)",
        "org.apache.commons.math3.stat.inference.TTest#t(double,double,double,double)",
        "org.apache.commons.math3.stat.inference.TTest#checkSampleData(double[])",
        "org.apache.commons.math3.stat.StatUtils.meanDifference(double[],double[])"
    ],
    "org.apache.commons.math3.analysis.differentiation.DerivativeStructure#linearCombination(DerivativeStructure,DerivativeStructure,DerivativeStructure,DerivativeStructure,DerivativeStructure,DerivativeStructure,DerivativeStructure,DerivativeStructure)": [
        "org.apache.commons.math3.analysis.differentiation.DerivativeStructure#add(DerivativeStructure)",
        "org.apache.commons.math3.analysis.differentiation.DerivativeStructure#getValue()",
        "org.apache.commons.math3.analysis.differentiation.DerivativeStructure#DerivativeStructure(int,int,double[]...)",
        "org.apache.commons.math3.analysis.differentiation.DerivativeStructure#getOrder()",
        "org.apache.commons.math3.analysis.differentiation.DerivativeStructure#multiply(DerivativeStructure)",
        "org.apache.commons.math3.util.MathArrays.linearCombination(double,double,double,double,double,double,double,double)",
        "org.apache.commons.math3.analysis.differentiation.DerivativeStructure#getAllDerivatives()",
        "org.apache.commons.math3.analysis.differentiation.DerivativeStructure#getFreeParameters()"
    ],
    "org.apache.commons.math3.optimization.PointVectorValuePair#PointVectorValuePair(double[],double[])": ["org.apache.commons.math3.optimization.PointVectorValuePair#PointVectorValuePair(double[],double[],boolean)"],
    "org.apache.commons.math3.linear.AbstractRealMatrix#walkInColumnOrder(RealMatrixChangingVisitor)": [
        "org.apache.commons.math3.linear.DiagonalMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.Array2DRowRealMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.Array2DRowRealMatrix#setEntry(int,int,double)",
        "org.apache.commons.math3.linear.DefaultRealMatrixChangingVisitor#end()",
        "org.apache.commons.math3.linear.DiagonalMatrix#getEntry(int,int)",
        "org.apache.commons.math3.linear.OpenMapRealMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.OpenMapRealMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.DiagonalMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.BlockRealMatrix#setEntry(int,int,double)",
        "org.apache.commons.math3.linear.OpenMapRealMatrix#setEntry(int,int,double)",
        "org.apache.commons.math3.linear.DefaultRealMatrixChangingVisitor#visit(int,int,double)",
        "org.apache.commons.math3.linear.OpenMapRealMatrix#getEntry(int,int)",
        "org.apache.commons.math3.linear.BlockRealMatrix#getEntry(int,int)",
        "org.apache.commons.math3.linear.AbstractRealMatrix#getSubMatrix(int[],int[])$DefaultRealMatrixChangingVisitor$1#visit(int,int,double)",
        "org.apache.commons.math3.linear.BlockRealMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.Array2DRowRealMatrix#getEntry(int,int)",
        "org.apache.commons.math3.linear.Array2DRowRealMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.BlockRealMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.DiagonalMatrix#setEntry(int,int,double)",
        "org.apache.commons.math3.linear.DefaultRealMatrixChangingVisitor#start(int,int,int,int,int,int)"
    ],
    "org.apache.commons.math3.optimization.fitting.PolynomialFitter#PolynomialFitter(int,DifferentiableMultivariateVectorOptimizer)": [
        "org.apache.commons.math3.optimization.fitting.PolynomialFitter.<init>()",
        "org.apache.commons.math3.optimization.fitting.CurveFitter#CurveFitter(DifferentiableMultivariateVectorOptimizer)"
    ],
    "org.apache.commons.math3.linear.TriDiagonalTransformer#transform()": ["org.apache.commons.math3.util.FastMath.sqrt(double)"],
    "org.apache.commons.math3.util.FastMath.subtractExact(long,long)": ["org.apache.commons.math3.exception.util.LocalizedFormats.<staticinit>()"],
    "org.apache.commons.math3.geometry.partitioning.utilities.AVLTree#AVLTree()": ["org.apache.commons.math3.geometry.partitioning.utilities.AVLTree.<init>()"],
    "org.apache.commons.math3.analysis.solvers.BaseAbstractUnivariateSolver#getMaxEvaluations()": ["org.apache.commons.math3.util.IntegerSequence.Incrementor#getMaximalCount()"],
    "org.apache.commons.math3.random.RandomDataImpl#nextBeta(double,double)": ["org.apache.commons.math3.random.RandomDataGenerator#nextBeta(double,double)"],
    "org.apache.commons.math3.optim.linear.SimplexTableau#isOptimal()": [
        "org.apache.commons.math3.optim.linear.SimplexTableau#getRow(int)",
        "org.apache.commons.math3.util.Precision.compareTo(double,double,double)",
        "org.apache.commons.math3.optim.linear.SimplexTableau#getNumObjectiveFunctions()",
        "org.apache.commons.math3.optim.linear.SimplexTableau#getRhsOffset()"
    ],
    "org.apache.commons.math3.ode.MultistepIntegrator.NordsieckInitializer#NordsieckInitializer(int,int)": ["org.apache.commons.math3.ode.MultistepIntegrator.NordsieckInitializer.<init>()"],
    "org.apache.commons.math3.stat.descriptive.AbstractUnivariateStatistic#setData(double[],int,int)": ["org.apache.commons.math3.exception.util.LocalizedFormats.<staticinit>()"],
    "org.apache.commons.math3.optimization.direct.CMAESOptimizer.selectColumns(RealMatrix,int[])": [
        "org.apache.commons.math3.linear.BlockFieldMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.BlockRealMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.Array2DRowRealMatrix#getEntry(int,int)",
        "org.apache.commons.math3.linear.Array2DRowRealMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.SparseFieldMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.DiagonalMatrix#getEntry(int,int)",
        "org.apache.commons.math3.linear.OpenMapRealMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.DiagonalMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.Array2DRowFieldMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.OpenMapRealMatrix#getEntry(int,int)",
        "org.apache.commons.math3.linear.BlockRealMatrix#getEntry(int,int)",
        "org.apache.commons.math3.linear.Array2DRowRealMatrix#Array2DRowRealMatrix(double[][],boolean)"
    ],
    "org.apache.commons.math3.linear.OpenMapRealVector#equals(Object)": [
        "org.apache.commons.math3.util.OpenIntToDoubleHashMap.Iterator#value()",
        "org.apache.commons.math3.util.OpenIntToDoubleHashMap#iterator()",
        "org.apache.commons.math3.util.OpenIntToDoubleHashMap.Iterator#advance()",
        "org.apache.commons.math3.linear.OpenMapRealVector#getEntries()",
        "org.apache.commons.math3.util.OpenIntToDoubleHashMap.Iterator#key()",
        "org.apache.commons.math3.linear.OpenMapRealVector#getEntry(int)",
        "org.apache.commons.math3.util.OpenIntToDoubleHashMap.Iterator#hasNext()"
    ],
    "org.apache.commons.math3.geometry.euclidean.oned.Vector1D#hashCode()": [
        "org.apache.commons.math3.util.MathUtils.hash(double)",
        "org.apache.commons.math3.geometry.euclidean.oned.Vector1D#isNaN()"
    ],
    "org.apache.commons.math3.util.Decimal64#multiply(double)": ["org.apache.commons.math3.util.Decimal64#Decimal64(double)"],
    "org.apache.commons.math3.geometry.euclidean.oned.Vector1D.distanceInf(Vector1D,Vector1D)": ["org.apache.commons.math3.geometry.euclidean.oned.Vector1D#distanceInf(Vector<Euclidean1D>)"],
    "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.MultiDirectionalSimplex#MultiDirectionalSimplex(int,double,double)": ["org.apache.commons.math3.optim.nonlinear.scalar.noderiv.MultiDirectionalSimplex#MultiDirectionalSimplex(int,double,double,double)"],
    "org.apache.commons.math3.linear.SingularValueDecomposition.Solver#solve(RealMatrix)": [
        "org.apache.commons.math3.linear.DiagonalMatrix#multiply(RealMatrix)",
        "org.apache.commons.math3.linear.AbstractRealMatrix#multiply(RealMatrix)",
        "org.apache.commons.math3.linear.BlockRealMatrix#multiply(RealMatrix)",
        "org.apache.commons.math3.linear.OpenMapRealMatrix#multiply(RealMatrix)"
    ],
    "org.apache.commons.math3.stat.StatUtils.product(double[],int,int)": [
        "org.apache.commons.math3.stat.descriptive.moment.Skewness#evaluate(double[],int,int)",
        "org.apache.commons.math3.stat.descriptive.moment.Variance#evaluate(double[],int,int)",
        "org.apache.commons.math3.stat.descriptive.moment.SemiVariance#evaluate(double[],int,int)",
        "org.apache.commons.math3.stat.descriptive.moment.GeometricMean#evaluate(double[],int,int)",
        "org.apache.commons.math3.stat.descriptive.summary.SumOfLogs#evaluate(double[],int,int)",
        "org.apache.commons.math3.stat.descriptive.moment.StandardDeviation#evaluate(double[],int,int)",
        "org.apache.commons.math3.stat.descriptive.summary.Sum#evaluate(double[],int,int)",
        "org.apache.commons.math3.stat.descriptive.rank.Min#evaluate(double[],int,int)",
        "org.apache.commons.math3.stat.descriptive.rank.Percentile#evaluate(double[],int,int)",
        "org.apache.commons.math3.stat.descriptive.rank.Max#evaluate(double[],int,int)",
        "org.apache.commons.math3.stat.StatUtils.<staticinit>()",
        "org.apache.commons.math3.stat.descriptive.summary.SumOfSquares#evaluate(double[],int,int)",
        "org.apache.commons.math3.stat.descriptive.moment.Mean#evaluate(double[],int,int)",
        "org.apache.commons.math3.stat.descriptive.summary.Product#evaluate(double[],int,int)",
        "org.apache.commons.math3.stat.descriptive.moment.Kurtosis#evaluate(double[],int,int)",
        "org.apache.commons.math3.stat.descriptive.AbstractStorelessUnivariateStatistic#evaluate(double[],int,int)"
    ],
    "org.apache.commons.math3.analysis.FunctionUtils.toDifferentiableUnivariateFunction(UnivariateDifferentiableFunction)$DifferentiableUnivariateFunction$1#value(double)": [
        "org.apache.commons.math3.analysis.FunctionUtils.multiply(DifferentiableUnivariateFunction[]...)$UnivariateFunction$1$UnivariateFunction$1#derivative()$UnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.polynomials.PolynomialSplineFunction#value(double)",
        "org.apache.commons.math3.analysis.function.Gaussian#value(double)",
        "org.apache.commons.math3.analysis.function.Tanh#value(double)",
        "org.apache.commons.math3.analysis.function.Inverse#value(double)",
        "org.apache.commons.math3.analysis.function.HarmonicOscillator#value(double)",
        "org.apache.commons.math3.analysis.FunctionUtils.fix1stArgument(BivariateFunction,double)$UnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.function.Asin#value(double)",
        "org.apache.commons.math3.analysis.function.Asinh#value(double)",
        "org.apache.commons.math3.analysis.FunctionUtils.multiply(UnivariateFunction[]...)$UnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.function.Atan#value(double)",
        "org.apache.commons.math3.analysis.FunctionUtils.toDifferentiableUnivariateFunction(UnivariateDifferentiableFunction)$DifferentiableUnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.function.Cbrt#value(double)",
        "org.apache.commons.math3.analysis.polynomials.PolynomialFunctionLagrangeForm#value(double)",
        "org.apache.commons.math3.analysis.function.Exp#value(double)",
        "org.apache.commons.math3.special.BesselJ#value(double)",
        "org.apache.commons.math3.analysis.polynomials.PolynomialFunctionNewtonForm#value(double)",
        "org.apache.commons.math3.analysis.FunctionUtils.add(UnivariateFunction[]...)$UnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.function.Sin#value(double)",
        "org.apache.commons.math3.analysis.function.Cos#value(double)",
        "org.apache.commons.math3.analysis.interpolation.UnivariatePeriodicInterpolator#interpolate(double[],double[])$UnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.function.Log10#value(double)",
        "org.apache.commons.math3.analysis.function.Sqrt#value(double)",
        "org.apache.commons.math3.analysis.function.Log#value(double)",
        "org.apache.commons.math3.analysis.function.Sinc#value(double)",
        "org.apache.commons.math3.ode.events.EventState#evaluateStep(StepInterpolator)$UnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.function.Minus#value(double)",
        "org.apache.commons.math3.analysis.integration.IterativeLegendreGaussIntegrator#stage(int)$UnivariateFunction$1#value(double)",
        "org.apache.commons.math3.optimization.general.NonLinearConjugateGradientOptimizer.LineSearchFunction#value(double)",
        "org.apache.commons.math3.analysis.function.Floor#value(double)",
        "org.apache.commons.math3.analysis.FunctionUtils.multiply(DifferentiableUnivariateFunction[]...)$DifferentiableUnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.FunctionUtils.combine(BivariateFunction,UnivariateFunction,UnivariateFunction)$UnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.FunctionUtils.add(DifferentiableUnivariateFunction[]...)$UnivariateFunction$1$UnivariateFunction$1#derivative()$UnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.function.Sinh#value(double)",
        "org.apache.commons.math3.analysis.FunctionUtils.multiply(UnivariateDifferentiableFunction[]...)$UnivariateDifferentiableFunction$1#value(double)",
        "org.apache.commons.math3.analysis.function.Tan#value(double)",
        "org.apache.commons.math3.distribution.AbstractRealDistribution#inverseCumulativeProbability(double)$UnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.FunctionUtils.add(DifferentiableUnivariateFunction[]...)$DifferentiableUnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.function.Ceil#value(double)",
        "org.apache.commons.math3.analysis.function.Logistic#value(double)",
        "org.apache.commons.math3.analysis.function.Signum#value(double)",
        "org.apache.commons.math3.analysis.function.Constant#value(double)",
        "org.apache.commons.math3.analysis.function.Atanh#value(double)",
        "org.apache.commons.math3.analysis.FunctionUtils.compose(DifferentiableUnivariateFunction[]...)$UnivariateFunction$1$UnivariateFunction$1#derivative()$UnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.FunctionUtils.add(UnivariateDifferentiableFunction[]...)$UnivariateDifferentiableFunction$1#value(double)",
        "org.apache.commons.math3.analysis.function.Abs#value(double)",
        "org.apache.commons.math3.analysis.differentiation.FiniteDifferencesDifferentiator#differentiate(UnivariateFunction)$UnivariateDifferentiableFunction$1#value(double)",
        "org.apache.commons.math3.analysis.function.Identity#value(double)",
        "org.apache.commons.math3.analysis.function.Expm1#value(double)",
        "org.apache.commons.math3.analysis.function.Logit#value(double)",
        "org.apache.commons.math3.analysis.function.Log1p#value(double)",
        "org.apache.commons.math3.analysis.FunctionUtils.fix2ndArgument(BivariateFunction,double)$UnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.FunctionUtils.toUnivariateDifferential(DifferentiableUnivariateFunction)$UnivariateDifferentiableFunction$1#value(double)",
        "org.apache.commons.math3.analysis.FunctionUtils.toDifferentiableUnivariateFunction(UnivariateDifferentiableFunction)$UnivariateFunction$1$UnivariateFunction$1#derivative()$UnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.polynomials.PolynomialFunction#value(double)",
        "org.apache.commons.math3.analysis.function.Rint#value(double)",
        "org.apache.commons.math3.analysis.FunctionUtils.compose(UnivariateFunction[]...)$UnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.function.Cosh#value(double)",
        "org.apache.commons.math3.optimization.direct.PowellOptimizer.LineSearch#search(double[],double[])$UnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.FunctionUtils.compose(DifferentiableUnivariateFunction[]...)$DifferentiableUnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.function.Acosh#value(double)",
        "org.apache.commons.math3.analysis.function.StepFunction#value(double)",
        "org.apache.commons.math3.analysis.FunctionUtils.compose(UnivariateDifferentiableFunction[]...)$UnivariateDifferentiableFunction$1#value(double)",
        "org.apache.commons.math3.analysis.function.Acos#value(double)",
        "org.apache.commons.math3.analysis.function.Power#value(double)",
        "org.apache.commons.math3.optim.nonlinear.scalar.LineSearch#search(double[],double[])$UnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.function.Sigmoid#value(double)",
        "org.apache.commons.math3.analysis.function.Ulp#value(double)"
    ],
    "org.apache.commons.math3.fitting.HarmonicFitter.ParameterGuesser#guessAOmega(WeightedObservedPoint[])": [
        "org.apache.commons.math3.fitting.WeightedObservedPoint#getX()",
        "org.apache.commons.math3.util.FastMath.sqrt(double)",
        "org.apache.commons.math3.fitting.WeightedObservedPoint#getY()",
        "org.apache.commons.math3.exception.util.LocalizedFormats.<staticinit>()",
        "org.apache.commons.math3.exception.ZeroException#ZeroException()"
    ],
    "org.apache.commons.math3.random.RandomGeneratorFactory.createRandomGenerator(Random)": ["org.apache.commons.math3.random.RandomGeneratorFactory.createRandomGenerator(Random)$RandomGenerator$1.<init>()"],
    "org.apache.commons.math3.util.FastMath.addExact(int,int)": ["org.apache.commons.math3.exception.util.LocalizedFormats.<staticinit>()"],
    "org.apache.commons.math3.ode.events.EventState.LocalMaxCountExceededException#LocalMaxCountExceededException(MaxCountExceededException)": ["org.apache.commons.math3.ode.events.EventState.LocalMaxCountExceededException.<init>()"],
    "org.apache.commons.math3.optim.linear.NoFeasibleSolutionException#NoFeasibleSolutionException()": [
        "org.apache.commons.math3.optim.linear.NoFeasibleSolutionException.<init>()",
        "org.apache.commons.math3.exception.util.LocalizedFormats.<staticinit>()"
    ],
    "org.apache.commons.math3.geometry.euclidean.threed.Rotation#Rotation(double[][],double)": [
        "org.apache.commons.math3.geometry.euclidean.threed.Rotation#orthogonalizeMatrix(double[][],double)",
        "org.apache.commons.math3.geometry.euclidean.threed.Rotation.<init>()",
        "org.apache.commons.math3.exception.util.LocalizedFormats.<staticinit>()",
        "org.apache.commons.math3.geometry.euclidean.threed.Rotation.mat2quat(double[][])"
    ],
    "org.apache.commons.math3.genetics.BinaryChromosome#BinaryChromosome(Integer[])": [
        "org.apache.commons.math3.genetics.AbstractListChromosome#AbstractListChromosome(T[])",
        "org.apache.commons.math3.genetics.BinaryChromosome.<init>()"
    ],
    "org.apache.commons.math3.geometry.euclidean.threed.FieldRotation#applyInverseTo(FieldRotation<T extends RealFieldElement>)": [
        "org.apache.commons.math3.geometry.euclidean.threed.RotationConvention.<staticinit>()",
        "org.apache.commons.math3.geometry.euclidean.threed.FieldRotation#composeInverse(FieldRotation<T extends RealFieldElement>,RotationConvention)"
    ],
    "org.apache.commons.math3.linear.BlockRealMatrix#getFrobeniusNorm()": ["org.apache.commons.math3.util.FastMath.sqrt(double)"],
    "org.apache.commons.math3.distribution.CauchyDistribution#CauchyDistribution(RandomGenerator,double,double,double)": [
        "org.apache.commons.math3.distribution.CauchyDistribution.<staticinit>()",
        "org.apache.commons.math3.distribution.AbstractRealDistribution#AbstractRealDistribution(RandomGenerator)",
        "org.apache.commons.math3.distribution.CauchyDistribution.<init>()",
        "org.apache.commons.math3.exception.util.LocalizedFormats.<staticinit>()"
    ],
    "org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator#AdamsMoultonIntegrator(int,double,double,double,double)": [
        "org.apache.commons.math3.ode.nonstiff.AdamsIntegrator#AdamsIntegrator(String,int,int,double,double,double,double)",
        "org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator.<staticinit>()",
        "org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator.<init>()"
    ],
    "org.apache.commons.math3.util.IntegerSequence.Incrementor#withMaximalCount(int)": ["org.apache.commons.math3.util.IntegerSequence.Incrementor#Incrementor(int,int,int,MaxCountExceededCallback)"],
    "org.apache.commons.math3.analysis.differentiation.DSCompiler#acosh(double[],int,double[],int)": [
        "org.apache.commons.math3.util.FastMath.sqrt(double)",
        "org.apache.commons.math3.util.FastMath.acosh(double)",
        "org.apache.commons.math3.analysis.differentiation.DSCompiler#compose(double[],int,double[],double[],int)"
    ],
    "org.apache.commons.math3.stat.descriptive.SynchronizedMultivariateSummaryStatistics#equals(Object)": ["org.apache.commons.math3.stat.descriptive.MultivariateSummaryStatistics#equals(Object)"],
    "org.apache.commons.math3.util.ResizableDoubleArray#ResizableDoubleArray(int,float)": ["org.apache.commons.math3.util.ResizableDoubleArray#ResizableDoubleArray(int,double)"],
    "org.apache.commons.math3.linear.RealVector.Entry#setValue(double)": [
        "org.apache.commons.math3.linear.OpenMapRealVector.OpenMapEntry#getIndex()",
        "org.apache.commons.math3.linear.RealVector.unmodifiableRealVector(RealVector)$RealVector$1#setEntry(int,double)",
        "org.apache.commons.math3.linear.ArrayRealVector#setEntry(int,double)",
        "org.apache.commons.math3.linear.RealVector.Entry#getIndex()",
        "org.apache.commons.math3.linear.OpenMapRealVector#setEntry(int,double)"
    ],
    "org.apache.commons.math3.ode.nonstiff.GraggBulirschStoerStepInterpolator#GraggBulirschStoerStepInterpolator(double[],double[],double[],double[],double[][],boolean,EquationsMapper,EquationsMapper[])": [
        "org.apache.commons.math3.ode.nonstiff.GraggBulirschStoerStepInterpolator#resetTables(int)",
        "org.apache.commons.math3.ode.sampling.AbstractStepInterpolator#AbstractStepInterpolator(double[],boolean,EquationsMapper,EquationsMapper[])",
        "org.apache.commons.math3.ode.nonstiff.GraggBulirschStoerStepInterpolator.<init>()"
    ],
    "org.apache.commons.math3.fitting.leastsquares.DenseWeightedEvaluation#getJacobian()": [
        "org.apache.commons.math3.fitting.leastsquares.OptimumImpl#getJacobian()",
        "org.apache.commons.math3.linear.AbstractRealMatrix#multiply(RealMatrix)",
        "org.apache.commons.math3.linear.OpenMapRealMatrix#multiply(RealMatrix)",
        "org.apache.commons.math3.fitting.leastsquares.DenseWeightedEvaluation#getJacobian()",
        "org.apache.commons.math3.fitting.leastsquares.LeastSquaresFactory.LocalLeastSquaresProblem.LazyUnweightedEvaluation#getJacobian()",
        "org.apache.commons.math3.linear.DiagonalMatrix#multiply(RealMatrix)",
        "org.apache.commons.math3.linear.BlockRealMatrix#multiply(RealMatrix)",
        "org.apache.commons.math3.fitting.leastsquares.LeastSquaresFactory.LocalLeastSquaresProblem.UnweightedEvaluation#getJacobian()"
    ],
    "org.apache.commons.math3.geometry.euclidean.twod.Line#revertSelf()": [
        "org.apache.commons.math3.geometry.euclidean.twod.Line#unlinkReverse()",
        "org.apache.commons.math3.util.FastMath.<staticinit>()"
    ],
    "org.apache.commons.math3.analysis.interpolation.BicubicSplineInterpolatingFunction#BicubicSplineInterpolatingFunction(double[],double[],double[][],double[][],double[][],double[][],boolean)": [
        "org.apache.commons.math3.exception.DimensionMismatchException#DimensionMismatchException(int,int)",
        "org.apache.commons.math3.analysis.interpolation.BicubicSplineInterpolatingFunction.<init>()",
        "org.apache.commons.math3.analysis.interpolation.BicubicSplineFunction#partialDerivativeY()",
        "org.apache.commons.math3.analysis.interpolation.BicubicSplineFunction#partialDerivativeX()",
        "org.apache.commons.math3.util.MathArrays.checkOrder(double[])",
        "org.apache.commons.math3.exception.NoDataException#NoDataException()",
        "org.apache.commons.math3.analysis.interpolation.BicubicSplineFunction#partialDerivativeXX()",
        "org.apache.commons.math3.analysis.interpolation.BicubicSplineFunction#partialDerivativeYY()",
        "org.apache.commons.math3.analysis.interpolation.BicubicSplineFunction#partialDerivativeXY()",
        "org.apache.commons.math3.analysis.interpolation.BicubicSplineInterpolatingFunction#computeSplineCoefficients(double[])",
        "org.apache.commons.math3.analysis.interpolation.BicubicSplineFunction#BicubicSplineFunction(double[],boolean)"
    ],
    "org.apache.commons.math3.linear.SymmLQ#solve(RealLinearOperator,RealVector,boolean,double)": [
        "org.apache.commons.math3.linear.DiagonalMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.Array2DRowRealMatrix#getColumnDimension()",
        "org.apache.commons.math3.util.MathUtils.checkNotNull(Object)",
        "org.apache.commons.math3.linear.OpenMapRealMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.JacobiPreconditioner#getColumnDimension()",
        "org.apache.commons.math3.linear.ArrayRealVector#ArrayRealVector(int)",
        "org.apache.commons.math3.linear.SymmLQ#solveInPlace(RealLinearOperator,RealLinearOperator,RealVector,RealVector,boolean,double)",
        "org.apache.commons.math3.linear.BlockRealMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.JacobiPreconditioner#sqrt()$RealLinearOperator$1#getColumnDimension()"
    ],
    "org.apache.commons.math3.exception.NonMonotonicSequenceException#NonMonotonicSequenceException(Number,Number,int)": [
        "org.apache.commons.math3.exception.NonMonotonicSequenceException#NonMonotonicSequenceException(Number,Number,int,OrderDirection,boolean)",
        "org.apache.commons.math3.util.MathArrays.OrderDirection.<staticinit>()"
    ],
    "org.apache.commons.math3.linear.ArrayFieldVector#ArrayFieldVector(FieldVector<T extends FieldElement>,FieldVector<T extends FieldElement>)": [
        "org.apache.commons.math3.util.MathUtils.checkNotNull(Object)",
        "org.apache.commons.math3.linear.SparseFieldVector#getField()",
        "org.apache.commons.math3.linear.ArrayFieldVector#toArray()",
        "org.apache.commons.math3.linear.ArrayFieldVector.<init>()",
        "org.apache.commons.math3.linear.ArrayFieldVector#getField()",
        "org.apache.commons.math3.linear.SparseFieldVector#toArray()",
        "org.apache.commons.math3.util.MathArrays.buildArray(Field<T>,int)"
    ],
    "org.apache.commons.math3.ode.FieldExpandableODE#computeDerivatives(T extends RealFieldElement,T extends RealFieldElement[])": [
        "org.apache.commons.math3.ode.FieldEquationsMapper#extractEquationData(int,T extends RealFieldElement[])",
        "org.apache.commons.math3.ode.FieldEquationsMapper#getTotalDimension()",
        "org.apache.commons.math3.ode.FieldEquationsMapper#getNumberOfEquations()",
        "org.apache.commons.math3.ode.FieldEquationsMapper#insertEquationData(int,T extends RealFieldElement[],T extends RealFieldElement[])",
        "org.apache.commons.math3.util.MathArrays.buildArray(Field<T>,int)"
    ],
    "org.apache.commons.math3.random.CorrelatedRandomVectorGenerator#CorrelatedRandomVectorGenerator(double[],RealMatrix,double,NormalizedRandomGenerator)": [
        "org.apache.commons.math3.exception.DimensionMismatchException#DimensionMismatchException(int,int)",
        "org.apache.commons.math3.linear.BlockFieldMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.BlockRealMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.RectangularCholeskyDecomposition#getRootMatrix()",
        "org.apache.commons.math3.linear.Array2DRowRealMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.SparseFieldMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.OpenMapRealMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.DiagonalMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.Array2DRowFieldMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.RectangularCholeskyDecomposition#getRank()",
        "org.apache.commons.math3.random.CorrelatedRandomVectorGenerator.<init>()",
        "org.apache.commons.math3.linear.RectangularCholeskyDecomposition#RectangularCholeskyDecomposition(RealMatrix,double)"
    ],
    "org.apache.commons.math3.stat.descriptive.moment.Variance#getN()": ["org.apache.commons.math3.stat.descriptive.moment.FirstMoment#getN()"],
    "org.apache.commons.math3.ode.JacobianMatrices#JacobianMatrices(FirstOrderDifferentialEquations,double[],String[]...)": ["org.apache.commons.math3.ode.JacobianMatrices.MainStateJacobianWrapper#MainStateJacobianWrapper(FirstOrderDifferentialEquations,double[])"],
    "org.apache.commons.math3.stat.descriptive.DescriptiveStatistics#DescriptiveStatistics(int)": [
        "org.apache.commons.math3.stat.descriptive.DescriptiveStatistics.<staticinit>()",
        "org.apache.commons.math3.stat.descriptive.DescriptiveStatistics.<init>()",
        "org.apache.commons.math3.stat.descriptive.DescriptiveStatistics#setWindowSize(int)",
        "org.apache.commons.math3.stat.descriptive.SynchronizedDescriptiveStatistics#setWindowSize(int)"
    ],
    "org.apache.commons.math3.optimization.direct.MultivariateFunctionPenaltyAdapter#value(double[])": [
        "org.apache.commons.math3.optim.nonlinear.scalar.MultivariateFunctionMappingAdapter#value(double[])",
        "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizer#doOptimize()$MultivariateFunction$1#value(double[])",
        "org.apache.commons.math3.optimization.direct.MultivariateFunctionMappingAdapter#value(double[])",
        "org.apache.commons.math3.analysis.FunctionUtils.toMultivariateDifferentiableFunction(DifferentiableMultivariateFunction)$MultivariateDifferentiableFunction$1#value(double[])",
        "org.apache.commons.math3.analysis.FunctionUtils.toDifferentiableMultivariateFunction(MultivariateDifferentiableFunction)$DifferentiableMultivariateFunction$1#value(double[])",
        "org.apache.commons.math3.analysis.interpolation.MicrosphereInterpolatingFunction#value(double[])",
        "org.apache.commons.math3.analysis.interpolation.MicrosphereProjectionInterpolator#interpolate(double[][],double[])$MultivariateFunction$1#value(double[])",
        "org.apache.commons.math3.optimization.direct.MultivariateFunctionPenaltyAdapter#value(double[])",
        "org.apache.commons.math3.optim.nonlinear.scalar.MultivariateFunctionPenaltyAdapter#value(double[])",
        "org.apache.commons.math3.optim.linear.LinearObjectiveFunction#value(double[])",
        "org.apache.commons.math3.analysis.FunctionUtils.collector(BivariateFunction,UnivariateFunction,double)$MultivariateFunction$1#value(double[])",
        "org.apache.commons.math3.util.FastMath.sqrt(double)",
        "org.apache.commons.math3.optim.nonlinear.scalar.LeastSquaresConverter#value(double[])",
        "org.apache.commons.math3.analysis.FunctionUtils.toDifferentiableMultivariateFunction(MultivariateDifferentiableFunction)$MultivariateFunction$1$MultivariateFunction$1#partialDerivative(int)$MultivariateFunction$1#value(double[])",
        "org.apache.commons.math3.optimization.LeastSquaresConverter#value(double[])",
        "org.apache.commons.math3.optimization.direct.SimplexOptimizer#doOptimize()$MultivariateFunction$1#value(double[])"
    ],
    "org.apache.commons.math3.distribution.BetaDistribution#recomputeZ()": ["org.apache.commons.math3.special.Gamma.logGamma(double)"],
    "org.apache.commons.math3.analysis.differentiation.SparseGradient.pow(double,SparseGradient)": [
        "org.apache.commons.math3.analysis.differentiation.SparseGradient#getField()",
        "org.apache.commons.math3.util.FastMath.pow(double,double)",
        "org.apache.commons.math3.analysis.differentiation.SparseGradient#SparseGradient(double,double,Map<Integer, Double>)",
        "org.apache.commons.math3.analysis.differentiation.SparseGradient#getField()$Field$1#getZero()",
        "org.apache.commons.math3.util.FastMath.log(double)",
        "org.apache.commons.math3.analysis.differentiation.SparseGradient#compose(double,double)"
    ],
    "org.apache.commons.math3.geometry.partitioning.utilities.AVLTree.Node#rebalanceRightGrown()": [
        "org.apache.commons.math3.geometry.partitioning.utilities.AVLTree.Node#rotateCW()",
        "org.apache.commons.math3.geometry.partitioning.utilities.AVLTree.Skew.<staticinit>()",
        "org.apache.commons.math3.geometry.partitioning.utilities.AVLTree.Node#rotateCCW()"
    ],
    "org.apache.commons.math3.analysis.differentiation.SparseGradient#reciprocal()": ["org.apache.commons.math3.analysis.differentiation.SparseGradient#SparseGradient(double,double,Map<Integer, Double>)"],
    "org.apache.commons.math3.stat.inference.TestUtils.kolmogorovSmirnovStatistic(double[],double[])": [
        "org.apache.commons.math3.stat.inference.KolmogorovSmirnovTest#kolmogorovSmirnovStatistic(double[],double[])",
        "org.apache.commons.math3.stat.inference.TestUtils.<staticinit>()"
    ],
    "org.apache.commons.math3.random.RandomDataImpl#nextHexString(int)": ["org.apache.commons.math3.random.RandomDataGenerator#nextHexString(int)"],
    "org.apache.commons.math3.optim.linear.SimplexSolver#SimplexSolver(double,int,double)": [
        "org.apache.commons.math3.optim.linear.SimplexSolver.<init>()",
        "org.apache.commons.math3.optim.linear.LinearOptimizer#LinearOptimizer()",
        "org.apache.commons.math3.optim.linear.PivotSelectionRule.<staticinit>()"
    ],
    "org.apache.commons.math3.linear.AbstractRealMatrix#getColumnMatrix(int)": [
        "org.apache.commons.math3.linear.Array2DRowRealMatrix#setEntry(int,int,double)",
        "org.apache.commons.math3.linear.DiagonalMatrix#getEntry(int,int)",
        "org.apache.commons.math3.linear.MatrixUtils.checkColumnIndex(AnyMatrix,int)",
        "org.apache.commons.math3.linear.BlockRealMatrix#setEntry(int,int,double)",
        "org.apache.commons.math3.linear.OpenMapRealMatrix#setEntry(int,int,double)",
        "org.apache.commons.math3.linear.OpenMapRealMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.DiagonalMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.OpenMapRealMatrix#getEntry(int,int)",
        "org.apache.commons.math3.linear.DiagonalMatrix#createMatrix(int,int)",
        "org.apache.commons.math3.linear.BlockRealMatrix#getEntry(int,int)",
        "org.apache.commons.math3.linear.Array2DRowRealMatrix#getEntry(int,int)",
        "org.apache.commons.math3.linear.BlockRealMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.Array2DRowRealMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.OpenMapRealMatrix#createMatrix(int,int)",
        "org.apache.commons.math3.linear.Array2DRowRealMatrix#createMatrix(int,int)",
        "org.apache.commons.math3.linear.DiagonalMatrix#setEntry(int,int,double)",
        "org.apache.commons.math3.linear.BlockRealMatrix#createMatrix(int,int)"
    ],
    "org.apache.commons.math3.optimization.PointVectorValuePair#getPoint()": ["org.apache.commons.math3.util.Pair#getKey()"],
    "org.apache.commons.math3.ode.ExpandableStatefulODE#addSecondaryEquations(SecondaryEquations)": [
        "org.apache.commons.math3.ode.EquationsMapper#getDimension()",
        "org.apache.commons.math3.ode.JacobianMatrices.MainStateJacobianWrapper#getDimension()",
        "org.apache.commons.math3.ode.MultistepIntegrator#start(double,double[],double)$FirstOrderDifferentialEquations$1#getDimension()",
        "org.apache.commons.math3.ode.ExpandableStatefulODE.SecondaryComponent#SecondaryComponent(SecondaryEquations,int)",
        "org.apache.commons.math3.ode.EquationsMapper#getFirstIndex()",
        "org.apache.commons.math3.ode.FirstOrderConverter#getDimension()"
    ],
    "org.apache.commons.math3.ode.nonstiff.HighamHall54FieldIntegrator#getA()": [
        "org.apache.commons.math3.util.MathArrays.buildArray(Field<T>,int,int)",
        "org.apache.commons.math3.ode.AbstractFieldIntegrator#getField()",
        "org.apache.commons.math3.util.BigRealField#getZero()",
        "org.apache.commons.math3.analysis.differentiation.SparseGradient#getField()$Field$1#getZero()",
        "org.apache.commons.math3.analysis.differentiation.DerivativeStructure#getField()$Field$1#getZero()",
        "org.apache.commons.math3.fraction.FractionField#getZero()",
        "org.apache.commons.math3.util.Decimal64Field#getZero()",
        "org.apache.commons.math3.ode.nonstiff.EmbeddedRungeKuttaFieldIntegrator#fraction(int,int)",
        "org.apache.commons.math3.dfp.DfpField#getZero()",
        "org.apache.commons.math3.complex.ComplexField#getZero()",
        "org.apache.commons.math3.fraction.BigFractionField#getZero()",
        "org.apache.commons.math3.util.MathArrays.buildArray(Field<T>,int)"
    ],
    "org.apache.commons.math3.fitting.leastsquares.LevenbergMarquardtOptimizer#LevenbergMarquardtOptimizer()": [
        "org.apache.commons.math3.fitting.leastsquares.LevenbergMarquardtOptimizer#LevenbergMarquardtOptimizer(double,double,double,double,double)",
        "org.apache.commons.math3.util.Precision.<staticinit>()"
    ],
    "org.apache.commons.math3.geometry.euclidean.threed.Plane#rotate(Vector3D,Rotation)": [
        "org.apache.commons.math3.geometry.euclidean.threed.Vector3D#add(Vector<Euclidean3D>)",
        "org.apache.commons.math3.geometry.euclidean.threed.Rotation#applyTo(Vector3D)",
        "org.apache.commons.math3.geometry.euclidean.threed.Plane#Plane(Vector3D,Vector3D,double)",
        "org.apache.commons.math3.geometry.euclidean.threed.Vector3D#subtract(Vector<Euclidean3D>)"
    ],
    "org.apache.commons.math3.optimization.univariate.UnivariateMultiStartOptimizer#sortPairs(GoalType)$Comparator$1#compare(UnivariatePointValuePair,UnivariatePointValuePair)": [
        "org.apache.commons.math3.optimization.GoalType.<staticinit>()",
        "org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair#getValue()"
    ],
    "org.apache.commons.math3.exception.MathUnsupportedOperationException#MathUnsupportedOperationException()": ["org.apache.commons.math3.exception.util.LocalizedFormats.<staticinit>()"],
    "org.apache.commons.math3.distribution.EnumeratedRealDistribution#EnumeratedRealDistribution(RandomGenerator,double[],double[])": [
        "org.apache.commons.math3.distribution.EnumeratedRealDistribution.<init>()",
        "org.apache.commons.math3.distribution.EnumeratedDistribution#EnumeratedDistribution(RandomGenerator,List<Pair<T, Double>>)",
        "org.apache.commons.math3.distribution.EnumeratedRealDistribution.createDistribution(double[],double[])",
        "org.apache.commons.math3.distribution.AbstractRealDistribution#AbstractRealDistribution(RandomGenerator)"
    ],
    "org.apache.commons.math3.linear.SchurTransformer#transform()": [
        "org.apache.commons.math3.linear.SchurTransformer#computeShift(int,int,int,ShiftInfo)",
        "org.apache.commons.math3.linear.SchurTransformer#initQRStep(int,int,ShiftInfo,double[])",
        "org.apache.commons.math3.linear.SchurTransformer.<staticinit>()",
        "org.apache.commons.math3.linear.SchurTransformer#performDoubleQRStep(int,int,int,ShiftInfo,double[])",
        "org.apache.commons.math3.util.FastMath.abs(double)",
        "org.apache.commons.math3.util.FastMath.sqrt(double)",
        "org.apache.commons.math3.exception.util.LocalizedFormats.<staticinit>()",
        "org.apache.commons.math3.linear.SchurTransformer#findSmallSubDiagonalElement(int,double)",
        "org.apache.commons.math3.linear.SchurTransformer#getNorm()",
        "org.apache.commons.math3.linear.SchurTransformer.ShiftInfo.<init>()"
    ],
    "org.apache.commons.math3.stat.descriptive.DescriptiveStatistics#getElement(int)": ["org.apache.commons.math3.util.ResizableDoubleArray#getElement(int)"],
    "org.apache.commons.math3.util.Decimal64#ceil()": [
        "org.apache.commons.math3.util.Decimal64#Decimal64(double)",
        "org.apache.commons.math3.util.FastMath.ceil(double)"
    ],
    "org.apache.commons.math3.geometry.euclidean.twod.hull.AklToussaintHeuristic#AklToussaintHeuristic()": ["org.apache.commons.math3.geometry.euclidean.twod.hull.AklToussaintHeuristic.<init>()"],
    "org.apache.commons.math3.ml.clustering.KMeansPlusPlusClusterer#KMeansPlusPlusClusterer(int,int,DistanceMeasure,RandomGenerator,EmptyClusterStrategy)": [
        "org.apache.commons.math3.ml.clustering.KMeansPlusPlusClusterer.<init>()",
        "org.apache.commons.math3.ml.clustering.Clusterer#Clusterer(DistanceMeasure)"
    ],
    "org.apache.commons.math3.linear.OpenMapRealVector#subtract(OpenMapRealVector)": [
        "org.apache.commons.math3.util.OpenIntToDoubleHashMap#iterator()",
        "org.apache.commons.math3.util.OpenIntToDoubleHashMap#containsKey(int)",
        "org.apache.commons.math3.linear.OpenMapRealVector#setEntry(int,double)",
        "org.apache.commons.math3.util.OpenIntToDoubleHashMap.Iterator#advance()",
        "org.apache.commons.math3.linear.ArrayRealVector#checkVectorDimensions(int)",
        "org.apache.commons.math3.linear.OpenMapRealVector#getDimension()",
        "org.apache.commons.math3.util.OpenIntToDoubleHashMap.Iterator#value()",
        "org.apache.commons.math3.linear.RealVector#checkVectorDimensions(int)",
        "org.apache.commons.math3.linear.OpenMapRealVector#getEntries()",
        "org.apache.commons.math3.util.OpenIntToDoubleHashMap.Iterator#key()",
        "org.apache.commons.math3.util.OpenIntToDoubleHashMap#get(int)",
        "org.apache.commons.math3.linear.OpenMapRealVector#copy()",
        "org.apache.commons.math3.util.OpenIntToDoubleHashMap.Iterator#hasNext()"
    ],
    "org.apache.commons.math3.dfp.Dfp#add(double)": [
        "org.apache.commons.math3.dfp.Dfp#add(Dfp)",
        "org.apache.commons.math3.dfp.DfpDec#newInstance(double)",
        "org.apache.commons.math3.dfp.Dfp#newInstance(double)"
    ],
    "org.apache.commons.math3.analysis.FunctionUtils.add(UnivariateFunction[]...)": ["org.apache.commons.math3.analysis.FunctionUtils.add(UnivariateFunction[]...)$UnivariateFunction$1.<init>()"],
    "org.apache.commons.math3.util.MathUtils.checkNotNull(Object)": ["org.apache.commons.math3.exception.NullArgumentException#NullArgumentException()"],
    "org.apache.commons.math3.util.OpenIntToFieldHashMap#shouldGrowTable()": ["org.apache.commons.math3.util.OpenIntToFieldHashMap.<staticinit>()"],
    "org.apache.commons.math3.fitting.leastsquares.LeastSquaresBuilder#checkerPair(ConvergenceChecker<PointVectorValuePair>)": [
        "org.apache.commons.math3.fitting.leastsquares.LeastSquaresBuilder#checker(ConvergenceChecker<Evaluation>)",
        "org.apache.commons.math3.fitting.leastsquares.LeastSquaresFactory.evaluationChecker(ConvergenceChecker<PointVectorValuePair>)"
    ],
    "org.apache.commons.math3.ode.nonstiff.RungeKuttaFieldIntegrator#integrate(FieldExpandableODE<T extends RealFieldElement>,FieldODEState<T extends RealFieldElement>,T extends RealFieldElement)": [
        "org.apache.commons.math3.ode.AbstractFieldIntegrator#acceptStep(AbstractFieldStepInterpolator<T extends RealFieldElement>,T extends RealFieldElement)",
        "org.apache.commons.math3.ode.FieldEquationsMapper#mapState(FieldODEState<T extends RealFieldElement>)",
        "org.apache.commons.math3.ode.AbstractFieldIntegrator#getStepStart()",
        "org.apache.commons.math3.ode.AbstractFieldIntegrator#setStepSize(T extends RealFieldElement)",
        "org.apache.commons.math3.ode.FieldODEState#getTime()",
        "org.apache.commons.math3.ode.nonstiff.GillFieldIntegrator#createInterpolator(boolean,T extends RealFieldElement[][],FieldODEStateAndDerivative<T extends RealFieldElement>,FieldODEStateAndDerivative<T extends RealFieldElement>,FieldEquationsMapper<T extends RealFieldElement>)",
        "org.apache.commons.math3.ode.AbstractFieldIntegrator#computeDerivatives(T extends RealFieldElement,T extends RealFieldElement[])",
        "org.apache.commons.math3.ode.FieldEquationsMapper#mapDerivative(FieldODEStateAndDerivative<T extends RealFieldElement>)",
        "org.apache.commons.math3.ode.AbstractFieldIntegrator#sanityChecks(FieldODEState<T extends RealFieldElement>,T extends RealFieldElement)",
        "org.apache.commons.math3.ode.AbstractFieldIntegrator#isLastStep()",
        "org.apache.commons.math3.ode.nonstiff.AdaptiveStepsizeFieldIntegrator#sanityChecks(FieldODEState<T extends RealFieldElement>,T extends RealFieldElement)",
        "org.apache.commons.math3.util.MathArrays.buildArray(Field<T>,int)",
        "org.apache.commons.math3.ode.AbstractFieldIntegrator#initIntegration(FieldExpandableODE<T extends RealFieldElement>,T extends RealFieldElement,T extends RealFieldElement[],T extends RealFieldElement)",
        "org.apache.commons.math3.ode.AbstractFieldIntegrator#getField()",
        "org.apache.commons.math3.ode.AbstractFieldIntegrator#setStepStart(FieldODEStateAndDerivative<T extends RealFieldElement>)",
        "org.apache.commons.math3.ode.nonstiff.LutherFieldIntegrator#createInterpolator(boolean,T extends RealFieldElement[][],FieldODEStateAndDerivative<T extends RealFieldElement>,FieldODEStateAndDerivative<T extends RealFieldElement>,FieldEquationsMapper<T extends RealFieldElement>)",
        "org.apache.commons.math3.ode.FieldExpandableODE#getMapper()",
        "org.apache.commons.math3.analysis.differentiation.SparseGradient#add(double)",
        "org.apache.commons.math3.ode.AbstractFieldIntegrator#setIsLastStep(boolean)",
        "org.apache.commons.math3.ode.AbstractFieldIntegrator#getStepSize()",
        "org.apache.commons.math3.ode.FieldODEStateAndDerivative#FieldODEStateAndDerivative(T extends RealFieldElement,T extends RealFieldElement[],T extends RealFieldElement[])",
        "org.apache.commons.math3.util.MathArrays.buildArray(Field<T>,int,int)",
        "org.apache.commons.math3.analysis.differentiation.DerivativeStructure#add(double)",
        "org.apache.commons.math3.ode.nonstiff.EulerFieldIntegrator#createInterpolator(boolean,T extends RealFieldElement[][],FieldODEStateAndDerivative<T extends RealFieldElement>,FieldODEStateAndDerivative<T extends RealFieldElement>,FieldEquationsMapper<T extends RealFieldElement>)",
        "org.apache.commons.math3.ode.nonstiff.ClassicalRungeKuttaFieldIntegrator#createInterpolator(boolean,T extends RealFieldElement[][],FieldODEStateAndDerivative<T extends RealFieldElement>,FieldODEStateAndDerivative<T extends RealFieldElement>,FieldEquationsMapper<T extends RealFieldElement>)",
        "org.apache.commons.math3.ode.nonstiff.ThreeEighthesFieldIntegrator#createInterpolator(boolean,T extends RealFieldElement[][],FieldODEStateAndDerivative<T extends RealFieldElement>,FieldODEStateAndDerivative<T extends RealFieldElement>,FieldEquationsMapper<T extends RealFieldElement>)",
        "org.apache.commons.math3.ode.nonstiff.MidpointFieldIntegrator#createInterpolator(boolean,T extends RealFieldElement[][],FieldODEStateAndDerivative<T extends RealFieldElement>,FieldODEStateAndDerivative<T extends RealFieldElement>,FieldEquationsMapper<T extends RealFieldElement>)",
        "org.apache.commons.math3.util.Decimal64#add(double)",
        "org.apache.commons.math3.dfp.Dfp#add(double)"
    ],
    "org.apache.commons.math3.linear.NonPositiveDefiniteMatrixException#NonPositiveDefiniteMatrixException(double,int,double)": [
        "org.apache.commons.math3.exception.MathIllegalArgumentException#getContext()",
        "org.apache.commons.math3.linear.NonPositiveDefiniteMatrixException.<init>()",
        "org.apache.commons.math3.exception.util.LocalizedFormats.<staticinit>()"
    ],
    "org.apache.commons.math3.fraction.BigFraction#divide(BigFraction)": [
        "org.apache.commons.math3.fraction.BigFraction#reciprocal()",
        "org.apache.commons.math3.fraction.BigFraction.<staticinit>()",
        "org.apache.commons.math3.exception.util.LocalizedFormats.<staticinit>()",
        "org.apache.commons.math3.fraction.BigFraction#multiply(BigFraction)"
    ],
    "org.apache.commons.math3.ml.neuralnet.sofm.LearningFactorFunctionFactory.quasiSigmoidDecay(double,double,long)$LearningFactorFunction$1#value(long)": ["org.apache.commons.math3.ml.neuralnet.sofm.util.QuasiSigmoidDecayFunction#value(long)"],
    "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.AbstractSimplex#AbstractSimplex(double[])": [
        "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.AbstractSimplex.<init>()",
        "org.apache.commons.math3.exception.NullArgumentException#NullArgumentException()",
        "org.apache.commons.math3.exception.ZeroException#ZeroException()",
        "org.apache.commons.math3.exception.util.LocalizedFormats.<staticinit>()"
    ],
    "org.apache.commons.math3.stat.descriptive.moment.Mean#Mean(FirstMoment)": [
        "org.apache.commons.math3.stat.descriptive.moment.Mean.<init>()",
        "org.apache.commons.math3.stat.descriptive.AbstractStorelessUnivariateStatistic.<init>()"
    ],
    "org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet.FacetsContributionVisitor#visitInternalNode(BSPTree<Euclidean3D>)": [
        "org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet.FacetsContributionVisitor#addContribution(SubHyperplane<Euclidean3D>,boolean)",
        "org.apache.commons.math3.geometry.partitioning.BoundaryAttribute#getPlusOutside()",
        "org.apache.commons.math3.geometry.partitioning.BSPTree#getAttribute()",
        "org.apache.commons.math3.geometry.partitioning.BoundaryAttribute#getPlusInside()"
    ],
    "org.apache.commons.math3.linear.SparseFieldVector#getSubVector(int,int)": [
        "org.apache.commons.math3.util.OpenIntToFieldHashMap.Iterator#hasNext()",
        "org.apache.commons.math3.util.OpenIntToFieldHashMap.Iterator#key()",
        "org.apache.commons.math3.util.OpenIntToFieldHashMap.Iterator#value()",
        "org.apache.commons.math3.exception.util.LocalizedFormats.<staticinit>()",
        "org.apache.commons.math3.linear.SparseFieldVector#setEntry(int,T extends FieldElement)",
        "org.apache.commons.math3.util.OpenIntToFieldHashMap#iterator()",
        "org.apache.commons.math3.linear.SparseFieldVector#checkIndex(int)",
        "org.apache.commons.math3.util.OpenIntToFieldHashMap.Iterator#advance()",
        "org.apache.commons.math3.linear.SparseFieldVector#SparseFieldVector(Field<T extends FieldElement>,int)"
    ],
    "org.apache.commons.math3.stat.regression.GLSMultipleLinearRegression#getOmegaInverse()": [
        "org.apache.commons.math3.linear.RRQRDecomposition.Solver#getInverse()",
        "org.apache.commons.math3.linear.LUDecomposition.Solver#getInverse()",
        "org.apache.commons.math3.linear.LUDecomposition#LUDecomposition(RealMatrix)",
        "org.apache.commons.math3.linear.CholeskyDecomposition.Solver#getInverse()",
        "org.apache.commons.math3.linear.QRDecomposition.Solver#getInverse()",
        "org.apache.commons.math3.linear.EigenDecomposition.Solver#getInverse()",
        "org.apache.commons.math3.linear.LUDecomposition#getSolver()",
        "org.apache.commons.math3.linear.SingularValueDecomposition.Solver#getInverse()"
    ],
    "org.apache.commons.math3.ode.nonstiff.AdamsNordsieckTransformer#updateHighOrderDerivativesPhase1(Array2DRowRealMatrix)": ["org.apache.commons.math3.linear.Array2DRowRealMatrix#multiply(Array2DRowRealMatrix)"],
    "org.apache.commons.math3.linear.ArrayFieldVector#outerProduct(ArrayFieldVector<T extends FieldElement>)": [
        "org.apache.commons.math3.linear.Array2DRowFieldMatrix#setEntry(int,int,T extends FieldElement)",
        "org.apache.commons.math3.linear.BlockFieldMatrix#setEntry(int,int,T extends FieldElement)",
        "org.apache.commons.math3.linear.Array2DRowFieldMatrix#Array2DRowFieldMatrix(Field<T extends FieldElement>,int,int)",
        "org.apache.commons.math3.linear.SparseFieldMatrix#setEntry(int,int,T extends FieldElement)"
    ],
    "org.apache.commons.math3.stat.correlation.Covariance#covariance(double[],double[])": ["org.apache.commons.math3.stat.correlation.Covariance#covariance(double[],double[],boolean)"],
    "org.apache.commons.math3.analysis.polynomials.PolynomialsUtils.createChebyshevPolynomial(int)$RecurrenceCoefficientsGenerator$1.<init>()": ["org.apache.commons.math3.fraction.BigFraction.<staticinit>()"],
    "org.apache.commons.math3.optimization.BaseMultivariateVectorMultiStartOptimizer#getOptima()": ["org.apache.commons.math3.exception.util.LocalizedFormats.<staticinit>()"],
    "org.apache.commons.math3.geometry.euclidean.threed.Line#Line(Vector3D,Vector3D,double)": [
        "org.apache.commons.math3.geometry.euclidean.threed.Line#reset(Vector3D,Vector3D)",
        "org.apache.commons.math3.geometry.euclidean.threed.Line.<init>()"
    ],
    "org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.SegmentsBuilder#visitInternalNode(BSPTree<Euclidean2D>)": [
        "org.apache.commons.math3.geometry.partitioning.BoundaryAttribute#getPlusOutside()",
        "org.apache.commons.math3.geometry.partitioning.BSPTree#getAttribute()",
        "org.apache.commons.math3.geometry.partitioning.BoundaryAttribute#getSplitters()",
        "org.apache.commons.math3.geometry.partitioning.BoundaryAttribute#getPlusInside()",
        "org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.SegmentsBuilder#addContribution(SubHyperplane<Euclidean2D>,BSPTree<Euclidean2D>,Iterable<BSPTree<Euclidean2D>>,boolean)"
    ],
    "org.apache.commons.math3.geometry.partitioning.utilities.AVLTree.Node#rebalanceRightShrunk()": [
        "org.apache.commons.math3.geometry.partitioning.utilities.AVLTree.Node#rotateCW()",
        "org.apache.commons.math3.geometry.partitioning.utilities.AVLTree.Skew.<staticinit>()",
        "org.apache.commons.math3.geometry.partitioning.utilities.AVLTree.Node#rotateCCW()"
    ],
    "org.apache.commons.math3.util.BigReal#BigReal(String,MathContext)": ["org.apache.commons.math3.util.BigReal.<init>()"],
    "org.apache.commons.math3.fraction.FractionFormat#parse(String,ParsePosition)": [
        "org.apache.commons.math3.fraction.Fraction#Fraction(double,int)",
        "org.apache.commons.math3.fraction.AbstractFormat#getNumeratorFormat()",
        "org.apache.commons.math3.fraction.AbstractFormat.parseAndIgnoreWhitespace(String,ParsePosition)",
        "org.apache.commons.math3.fraction.AbstractFormat.parseNextCharacter(String,ParsePosition)",
        "org.apache.commons.math3.fraction.AbstractFormat#getDenominatorFormat()"
    ],
    "org.apache.commons.math3.stat.descriptive.rank.Percentile.EstimationType#estimate(double[],int[],double,int,KthSelector)": [
        "org.apache.commons.math3.util.KthSelector#select(double[],int[],int)",
        "org.apache.commons.math3.util.FastMath.floor(double)"
    ],
    "org.apache.commons.math3.linear.SparseFieldVector#setEntry(int,T extends FieldElement)": [
        "org.apache.commons.math3.util.MathUtils.checkNotNull(Object)",
        "org.apache.commons.math3.util.OpenIntToFieldHashMap#put(int,T extends FieldElement)",
        "org.apache.commons.math3.linear.SparseFieldVector#checkIndex(int)"
    ],
    "org.apache.commons.math3.ode.sampling.NordsieckStepInterpolator#readExternal(ObjectInput)": [
        "org.apache.commons.math3.ode.sampling.AbstractStepInterpolator#setInterpolatedTime(double)",
        "org.apache.commons.math3.ode.sampling.AbstractStepInterpolator#readBaseExternal(ObjectInput)"
    ],
    "org.apache.commons.math3.linear.AbstractFieldMatrix#AbstractFieldMatrix(Field<T extends FieldElement>)": ["org.apache.commons.math3.linear.AbstractFieldMatrix.<init>()"],
    "org.apache.commons.math3.linear.BlockRealMatrix#setColumn(int,double[])": [
        "org.apache.commons.math3.linear.BlockRealMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.BlockRealMatrix#blockHeight(int)",
        "org.apache.commons.math3.linear.MatrixDimensionMismatchException#MatrixDimensionMismatchException(int,int,int,int)",
        "org.apache.commons.math3.linear.BlockRealMatrix.<staticinit>()",
        "org.apache.commons.math3.linear.BlockRealMatrix#blockWidth(int)",
        "org.apache.commons.math3.linear.MatrixUtils.checkColumnIndex(AnyMatrix,int)"
    ],
    "org.apache.commons.math3.optimization.BaseMultivariateMultiStartOptimizer#getOptima()": ["org.apache.commons.math3.exception.util.LocalizedFormats.<staticinit>()"],
    "org.apache.commons.math3.special.Gamma.logGamma1p(double)": [
        "org.apache.commons.math3.special.Gamma.invGamma1pm1(double)",
        "org.apache.commons.math3.util.FastMath.log1p(double)"
    ],
    "org.apache.commons.math3.linear.RealVectorFormat#RealVectorFormat(NumberFormat)": [
        "org.apache.commons.math3.linear.RealVectorFormat#RealVectorFormat(String,String,String,NumberFormat)",
        "org.apache.commons.math3.linear.RealVectorFormat.<staticinit>()"
    ],
    "org.apache.commons.math3.analysis.FunctionUtils.multiply(UnivariateDifferentiableFunction[]...)$UnivariateDifferentiableFunction$1#value(DerivativeStructure)": [
        "org.apache.commons.math3.analysis.polynomials.PolynomialFunctionNewtonForm#value(DerivativeStructure)",
        "org.apache.commons.math3.analysis.function.HarmonicOscillator#value(DerivativeStructure)",
        "org.apache.commons.math3.analysis.function.Power#value(DerivativeStructure)",
        "org.apache.commons.math3.analysis.function.Exp#value(DerivativeStructure)",
        "org.apache.commons.math3.analysis.function.Minus#value(DerivativeStructure)",
        "org.apache.commons.math3.analysis.function.Logit#value(DerivativeStructure)",
        "org.apache.commons.math3.analysis.FunctionUtils.multiply(UnivariateDifferentiableFunction[]...)$UnivariateDifferentiableFunction$1#value(DerivativeStructure)",
        "org.apache.commons.math3.analysis.function.Cosh#value(DerivativeStructure)",
        "org.apache.commons.math3.analysis.function.Sqrt#value(DerivativeStructure)",
        "org.apache.commons.math3.analysis.function.Gaussian#value(DerivativeStructure)",
        "org.apache.commons.math3.analysis.function.Cos#value(DerivativeStructure)",
        "org.apache.commons.math3.analysis.FunctionUtils.compose(UnivariateDifferentiableFunction[]...)$UnivariateDifferentiableFunction$1#value(DerivativeStructure)",
        "org.apache.commons.math3.analysis.function.Log1p#value(DerivativeStructure)",
        "org.apache.commons.math3.analysis.function.Inverse#value(DerivativeStructure)",
        "org.apache.commons.math3.analysis.function.Log10#value(DerivativeStructure)",
        "org.apache.commons.math3.analysis.function.Logistic#value(DerivativeStructure)",
        "org.apache.commons.math3.analysis.FunctionUtils.toUnivariateDifferential(DifferentiableUnivariateFunction)$UnivariateDifferentiableFunction$1#value(DerivativeStructure)",
        "org.apache.commons.math3.analysis.function.Acos#value(DerivativeStructure)",
        "org.apache.commons.math3.analysis.polynomials.PolynomialFunction#value(DerivativeStructure)",
        "org.apache.commons.math3.analysis.FunctionUtils.add(UnivariateDifferentiableFunction[]...)$UnivariateDifferentiableFunction$1#value(DerivativeStructure)",
        "org.apache.commons.math3.analysis.function.Cbrt#value(DerivativeStructure)",
        "org.apache.commons.math3.analysis.function.Atan#value(DerivativeStructure)",
        "org.apache.commons.math3.analysis.differentiation.DerivativeStructure#multiply(DerivativeStructure)",
        "org.apache.commons.math3.analysis.function.Sinh#value(DerivativeStructure)",
        "org.apache.commons.math3.analysis.function.Constant#value(DerivativeStructure)",
        "org.apache.commons.math3.analysis.function.Atanh#value(DerivativeStructure)",
        "org.apache.commons.math3.analysis.function.Sinc#value(DerivativeStructure)",
        "org.apache.commons.math3.analysis.function.Acosh#value(DerivativeStructure)",
        "org.apache.commons.math3.analysis.function.Tan#value(DerivativeStructure)",
        "org.apache.commons.math3.analysis.function.Identity#value(DerivativeStructure)",
        "org.apache.commons.math3.analysis.function.Asinh#value(DerivativeStructure)",
        "org.apache.commons.math3.analysis.function.Sin#value(DerivativeStructure)",
        "org.apache.commons.math3.analysis.function.Sigmoid#value(DerivativeStructure)",
        "org.apache.commons.math3.analysis.function.Asin#value(DerivativeStructure)",
        "org.apache.commons.math3.analysis.differentiation.FiniteDifferencesDifferentiator#differentiate(UnivariateFunction)$UnivariateDifferentiableFunction$1#value(DerivativeStructure)",
        "org.apache.commons.math3.analysis.function.Expm1#value(DerivativeStructure)",
        "org.apache.commons.math3.analysis.polynomials.PolynomialSplineFunction#value(DerivativeStructure)",
        "org.apache.commons.math3.analysis.function.Tanh#value(DerivativeStructure)",
        "org.apache.commons.math3.analysis.function.Log#value(DerivativeStructure)"
    ],
    "org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet.TranslationTransform#apply(Point<Euclidean3D>)": ["org.apache.commons.math3.geometry.euclidean.threed.Vector3D#Vector3D(double,Vector3D,double,Vector3D)"],
    "org.apache.commons.math3.distribution.ParetoDistribution#ParetoDistribution(RandomGenerator,double,double)": [
        "org.apache.commons.math3.distribution.ParetoDistribution#ParetoDistribution(RandomGenerator,double,double,double)",
        "org.apache.commons.math3.distribution.ParetoDistribution.<staticinit>()"
    ],
    "org.apache.commons.math3.random.ValueServer#ValueServer(RandomGenerator)": [
        "org.apache.commons.math3.random.ValueServer.<init>()",
        "org.apache.commons.math3.random.RandomDataGenerator#RandomDataGenerator(RandomGenerator)"
    ],
    "org.apache.commons.math3.optim.nonlinear.vector.Target#Target(double[])": ["org.apache.commons.math3.optim.nonlinear.vector.Target.<init>()"],
    "org.apache.commons.math3.ode.nonstiff.GraggBulirschStoerStepInterpolator#doCopy()": ["org.apache.commons.math3.ode.nonstiff.GraggBulirschStoerStepInterpolator#GraggBulirschStoerStepInterpolator(GraggBulirschStoerStepInterpolator)"],
    "org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet.buildBoundary(double,double,double,double,double,double,double)": [
        "org.apache.commons.math3.geometry.euclidean.threed.Vector3D.<staticinit>()",
        "org.apache.commons.math3.geometry.partitioning.AbstractRegion#getTree(boolean)",
        "org.apache.commons.math3.geometry.partitioning.BSPTree#BSPTree(Object)",
        "org.apache.commons.math3.geometry.euclidean.threed.Vector3D#Vector3D(double,double,double)",
        "org.apache.commons.math3.geometry.partitioning.RegionFactory#RegionFactory()",
        "org.apache.commons.math3.geometry.euclidean.threed.Plane#Plane(Vector3D,Vector3D,double)"
    ],
    "org.apache.commons.math3.dfp.Dfp#newInstance(byte,byte)": [
        "org.apache.commons.math3.dfp.Dfp.<staticinit>()",
        "org.apache.commons.math3.dfp.DfpField#newDfp(byte,byte)"
    ],
    "org.apache.commons.math3.analysis.interpolation.MicrosphereInterpolatingFunction.MicrosphereSurfaceElement#MicrosphereSurfaceElement(double[])": [
        "org.apache.commons.math3.analysis.interpolation.MicrosphereInterpolatingFunction.MicrosphereSurfaceElement.<init>()",
        "org.apache.commons.math3.linear.ArrayRealVector#ArrayRealVector(double[])"
    ],
    "org.apache.commons.math3.util.FastMath.Split#Split(double,double)": ["org.apache.commons.math3.util.FastMath.Split#Split(double,double,double)"],
    "org.apache.commons.math3.linear.HessenbergTransformer#transform()": [
        "org.apache.commons.math3.util.FastMath.abs(double)",
        "org.apache.commons.math3.util.Precision.equals(double,double)",
        "org.apache.commons.math3.util.FastMath.sqrt(double)"
    ],
    "org.apache.commons.math3.optim.PointVectorValuePair#getPoint()": ["org.apache.commons.math3.util.Pair#getKey()"],
    "org.apache.commons.math3.analysis.differentiation.DSCompiler#pow(double[],int,double,double[],int)": [
        "org.apache.commons.math3.util.FastMath.pow(double,int)",
        "org.apache.commons.math3.analysis.differentiation.DSCompiler#compose(double[],int,double[],double[],int)"
    ],
    "org.apache.commons.math3.optimization.fitting.CurveFitter#addObservedPoint(double,double,double)": ["org.apache.commons.math3.optimization.fitting.WeightedObservedPoint#WeightedObservedPoint(double,double,double)"],
    "org.apache.commons.math3.analysis.differentiation.SparseGradient#compose(double,double)": ["org.apache.commons.math3.analysis.differentiation.SparseGradient#SparseGradient(double,double,Map<Integer, Double>)"],
    "org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet#childAfter(BSPTree<Euclidean1D>)": [
        "org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet#isDirect(BSPTree<Euclidean1D>)",
        "org.apache.commons.math3.geometry.partitioning.BSPTree#getMinus()",
        "org.apache.commons.math3.geometry.partitioning.BSPTree#getPlus()"
    ],
    "org.apache.commons.math3.linear.RealVector#mapMultiplyToSelf(double)": [
        "org.apache.commons.math3.linear.RealVector.unmodifiableRealVector(RealVector)$RealVector$1#mapToSelf(UnivariateFunction)",
        "org.apache.commons.math3.linear.ArrayRealVector#mapToSelf(UnivariateFunction)",
        "org.apache.commons.math3.analysis.function.Multiply.<init>()",
        "org.apache.commons.math3.analysis.FunctionUtils.fix2ndArgument(BivariateFunction,double)",
        "org.apache.commons.math3.linear.RealVector#mapToSelf(UnivariateFunction)"
    ],
    "org.apache.commons.math3.stat.descriptive.moment.StandardDeviation#evaluate(double[],int,int)": [
        "org.apache.commons.math3.util.FastMath.sqrt(double)",
        "org.apache.commons.math3.stat.descriptive.moment.Variance#evaluate(double[],int,int)"
    ],
    "org.apache.commons.math3.analysis.interpolation.HermiteInterpolator#addSamplePoint(double,double[][]...)": [
        "org.apache.commons.math3.util.CombinatoricsUtils.factorial(int)",
        "org.apache.commons.math3.exception.util.LocalizedFormats.<staticinit>()"
    ],
    "org.apache.commons.math3.util.BigReal#BigReal(long,MathContext)": ["org.apache.commons.math3.util.BigReal.<init>()"],
    "org.apache.commons.math3.distribution.BinomialDistribution#cumulativeProbability(int)": ["org.apache.commons.math3.special.Beta.regularizedBeta(double,double,double)"],
    "org.apache.commons.math3.geometry.euclidean.threed.Vector3D#negate()": ["org.apache.commons.math3.geometry.euclidean.threed.Vector3D#Vector3D(double,double,double)"],
    "org.apache.commons.math3.stat.Frequency#getCumPct(int)": ["org.apache.commons.math3.stat.Frequency#getCumPct(long)"],
    "org.apache.commons.math3.distribution.GumbelDistribution#density(double)": ["org.apache.commons.math3.util.FastMath.exp(double)"],
    "org.apache.commons.math3.stat.clustering.EuclideanIntegerPoint#distanceFrom(EuclideanIntegerPoint)": [
        "org.apache.commons.math3.stat.clustering.EuclideanIntegerPoint#getPoint()",
        "org.apache.commons.math3.util.MathArrays.distance(int[],int[])"
    ],
    "org.apache.commons.math3.geometry.partitioning.BoundaryProjector#getProjection()": [
        "org.apache.commons.math3.geometry.partitioning.BoundaryProjection#BoundaryProjection(Point<S extends Space>,Point<S extends Space>,double)",
        "org.apache.commons.math3.util.FastMath.copySign(double,double)",
        "org.apache.commons.math3.geometry.partitioning.BSPTree#getAttribute()"
    ],
    "org.apache.commons.math3.linear.QRDecomposition.Solver#solve(RealMatrix)": [
        "org.apache.commons.math3.linear.DiagonalMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.Array2DRowRealMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.BlockFieldMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.BlockRealMatrix.createBlocksLayout(int,int)",
        "org.apache.commons.math3.linear.SparseFieldMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.OpenMapRealMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.SingularMatrixException#SingularMatrixException()",
        "org.apache.commons.math3.linear.OpenMapRealMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.DiagonalMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.BlockRealMatrix#BlockRealMatrix(int,int,double[][],boolean)",
        "org.apache.commons.math3.util.FastMath.min(int,int)",
        "org.apache.commons.math3.linear.BlockRealMatrix.<staticinit>()",
        "org.apache.commons.math3.linear.Array2DRowFieldMatrix#getColumnDimension()",
        "org.apache.commons.math3.exception.DimensionMismatchException#DimensionMismatchException(int,int)",
        "org.apache.commons.math3.linear.BlockFieldMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.SparseFieldMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.BlockRealMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.Array2DRowRealMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.AbstractRealMatrix#copySubMatrix(int,int,int,int,double[][])",
        "org.apache.commons.math3.linear.Array2DRowFieldMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.BlockRealMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.QRDecomposition.Solver#isNonSingular()"
    ],
    "org.apache.commons.math3.geometry.spherical.twod.Circle#toSubSpace(Point<Sphere2D>)": [
        "org.apache.commons.math3.geometry.spherical.twod.S2Point#getVector()",
        "org.apache.commons.math3.geometry.spherical.twod.Circle#getPhase(Vector3D)",
        "org.apache.commons.math3.geometry.spherical.oned.S1Point#S1Point(double)"
    ],
    "org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.SegmentsBuilder#visitOrder(BSPTree<Euclidean2D>)": ["org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor.Order.<staticinit>()"],
    "org.apache.commons.math3.ode.nonstiff.MidpointStepInterpolator#MidpointStepInterpolator()": [
        "org.apache.commons.math3.ode.nonstiff.RungeKuttaStepInterpolator#RungeKuttaStepInterpolator()",
        "org.apache.commons.math3.ode.nonstiff.MidpointStepInterpolator.<init>()"
    ],
    "org.apache.commons.math3.analysis.function.Atan2#value(double,double)": ["org.apache.commons.math3.util.FastMath.atan2(double,double)"],
    "org.apache.commons.math3.distribution.SaddlePointExpansion.getDeviancePart(double,double)": [
        "org.apache.commons.math3.util.FastMath.abs(double)",
        "org.apache.commons.math3.util.FastMath.log(double)"
    ],
    "org.apache.commons.math3.linear.CholeskyDecomposition.Solver#solve(RealVector)": [
        "org.apache.commons.math3.linear.OpenMapRealVector#getDimension()",
        "org.apache.commons.math3.exception.DimensionMismatchException#DimensionMismatchException(int,int)",
        "org.apache.commons.math3.linear.ArrayRealVector#getDimension()",
        "org.apache.commons.math3.linear.OpenMapRealVector#toArray()",
        "org.apache.commons.math3.linear.RealVector#toArray()",
        "org.apache.commons.math3.linear.ArrayRealVector#ArrayRealVector(double[],boolean)",
        "org.apache.commons.math3.linear.RealVector.unmodifiableRealVector(RealVector)$RealVector$1#toArray()",
        "org.apache.commons.math3.linear.RealVector.unmodifiableRealVector(RealVector)$RealVector$1#getDimension()",
        "org.apache.commons.math3.linear.ArrayRealVector#toArray()"
    ],
    "org.apache.commons.math3.ode.nonstiff.ThreeEighthesStepInterpolator#ThreeEighthesStepInterpolator()": [
        "org.apache.commons.math3.ode.nonstiff.ThreeEighthesStepInterpolator.<init>()",
        "org.apache.commons.math3.ode.nonstiff.RungeKuttaStepInterpolator#RungeKuttaStepInterpolator()"
    ],
    "org.apache.commons.math3.optimization.BaseMultivariateVectorMultiStartOptimizer#sortPairs(double[],double[])": ["org.apache.commons.math3.optimization.BaseMultivariateVectorMultiStartOptimizer#sortPairs(double[],double[])$Comparator$1.<init>()"],
    "org.apache.commons.math3.geometry.partitioning.utilities.AVLTree.Node#insert(T extends Comparable)": [
        "org.apache.commons.math3.geometry.partitioning.utilities.AVLTree.Node#rebalanceRightGrown()",
        "org.apache.commons.math3.geometry.partitioning.utilities.AVLTree.Node#rebalanceLeftGrown()",
        "org.apache.commons.math3.geometry.partitioning.utilities.AVLTree.Node#insert(T extends Comparable)",
        "org.apache.commons.math3.geometry.partitioning.utilities.AVLTree.Node#Node(T extends Comparable,Node)"
    ],
    "org.apache.commons.math3.stat.inference.KolmogorovSmirnovTest#exactK(double,int)": [
        "org.apache.commons.math3.linear.SparseFieldMatrix#getEntry(int,int)",
        "org.apache.commons.math3.fraction.BigFraction#bigDecimalValue(int,int)",
        "org.apache.commons.math3.fraction.BigFraction#multiply(int)",
        "org.apache.commons.math3.fraction.BigFraction#divide(int)",
        "org.apache.commons.math3.linear.Array2DRowFieldMatrix#getEntry(int,int)",
        "org.apache.commons.math3.linear.BlockFieldMatrix#getEntry(int,int)",
        "org.apache.commons.math3.stat.inference.KolmogorovSmirnovTest#createExactH(double,int)",
        "org.apache.commons.math3.linear.AbstractFieldMatrix#power(int)"
    ],
    "org.apache.commons.math3.stat.descriptive.moment.GeometricMean#increment(double)": [
        "org.apache.commons.math3.stat.descriptive.moment.Mean#increment(double)",
        "org.apache.commons.math3.stat.descriptive.rank.Max#increment(double)",
        "org.apache.commons.math3.stat.descriptive.summary.SumOfLogs#increment(double)",
        "org.apache.commons.math3.stat.descriptive.moment.Kurtosis#increment(double)",
        "org.apache.commons.math3.stat.descriptive.moment.FourthMoment#increment(double)",
        "org.apache.commons.math3.stat.descriptive.moment.Skewness#increment(double)",
        "org.apache.commons.math3.stat.descriptive.moment.StandardDeviation#increment(double)",
        "org.apache.commons.math3.stat.descriptive.moment.FirstMoment#increment(double)",
        "org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile#increment(double)",
        "org.apache.commons.math3.stat.descriptive.moment.GeometricMean#increment(double)",
        "org.apache.commons.math3.stat.descriptive.moment.Variance#increment(double)",
        "org.apache.commons.math3.stat.descriptive.moment.SecondMoment#increment(double)",
        "org.apache.commons.math3.stat.descriptive.rank.Min#increment(double)",
        "org.apache.commons.math3.stat.descriptive.summary.SumOfSquares#increment(double)",
        "org.apache.commons.math3.stat.descriptive.summary.Product#increment(double)",
        "org.apache.commons.math3.stat.descriptive.moment.ThirdMoment#increment(double)",
        "org.apache.commons.math3.stat.descriptive.summary.Sum#increment(double)"
    ],
    "org.apache.commons.math3.distribution.PascalDistribution#cumulativeProbability(int)": ["org.apache.commons.math3.special.Beta.regularizedBeta(double,double,double)"],
    "org.apache.commons.math3.ml.neuralnet.twod.util.SmoothedDataHistogram#SmoothedDataHistogram(int,DistanceMeasure)": ["org.apache.commons.math3.ml.neuralnet.twod.util.SmoothedDataHistogram.<init>()"],
    "org.apache.commons.math3.complex.ComplexFormat#formatImaginary(double,StringBuffer,FieldPosition)": [
        "org.apache.commons.math3.complex.ComplexFormat#getImaginaryFormat()",
        "org.apache.commons.math3.util.CompositeFormat.formatDouble(double,NumberFormat,StringBuffer,FieldPosition)"
    ],
    "org.apache.commons.math3.util.CompositeFormat.formatDouble(double,NumberFormat,StringBuffer,FieldPosition)": [
        "org.apache.commons.math3.fraction.FractionFormat#format(Object,StringBuffer,FieldPosition)",
        "org.apache.commons.math3.fraction.BigFractionFormat#format(Object,StringBuffer,FieldPosition)",
        "org.apache.commons.math3.fraction.AbstractFormat#format(double,StringBuffer,FieldPosition)"
    ],
    "org.apache.commons.math3.ode.sampling.DummyStepHandler.LazyHolder.<staticinit>()": ["org.apache.commons.math3.ode.sampling.DummyStepHandler#DummyStepHandler()"],
    "org.apache.commons.math3.optimization.fitting.GaussianFitter.ParameterGuesser#basicGuess(WeightedObservedPoint[])": [
        "org.apache.commons.math3.optimization.fitting.GaussianFitter.ParameterGuesser#interpolateXAtY(WeightedObservedPoint[],int,int,double)",
        "org.apache.commons.math3.optimization.fitting.GaussianFitter.ParameterGuesser#findMaxY(WeightedObservedPoint[])",
        "org.apache.commons.math3.optimization.fitting.WeightedObservedPoint#getY()",
        "org.apache.commons.math3.optimization.fitting.WeightedObservedPoint#getX()",
        "org.apache.commons.math3.util.FastMath.log(double)",
        "org.apache.commons.math3.util.FastMath.sqrt(double)"
    ],
    "org.apache.commons.math3.optimization.general.AbstractScalarDifferentiableOptimizer#computeObjectiveGradient(double[])": [
        "org.apache.commons.math3.fitting.AbstractCurveFitter.TheoreticalValuesFunction#getModelFunction()$MultivariateVectorFunction$1#value(double[])",
        "org.apache.commons.math3.optimization.fitting.CurveFitter.TheoreticalValuesFunction#value(double[])",
        "org.apache.commons.math3.analysis.FunctionUtils.toDifferentiableMultivariateFunction(MultivariateDifferentiableFunction)$MultivariateVectorFunction$1$MultivariateVectorFunction$1#gradient()$MultivariateVectorFunction$1#value(double[])",
        "org.apache.commons.math3.analysis.FunctionUtils.toMultivariateDifferentiableVectorFunction(DifferentiableMultivariateVectorFunction)$MultivariateDifferentiableVectorFunction$1#value(double[])",
        "org.apache.commons.math3.analysis.FunctionUtils.toDifferentiableMultivariateVectorFunction(MultivariateDifferentiableVectorFunction)$DifferentiableMultivariateVectorFunction$1#value(double[])",
        "org.apache.commons.math3.fitting.CurveFitter.TheoreticalValuesFunction#getModelFunction()$MultivariateVectorFunction$1#value(double[])",
        "org.apache.commons.math3.analysis.differentiation.GradientFunction#value(double[])",
        "org.apache.commons.math3.optimization.fitting.CurveFitter.OldTheoreticalValuesFunction#value(double[])"
    ],
    "org.apache.commons.math3.analysis.solvers.BaseAbstractUnivariateSolver#isSequence(double,double,double)": ["org.apache.commons.math3.analysis.solvers.UnivariateSolverUtils.isSequence(double,double,double)"],
    "org.apache.commons.math3.linear.BlockFieldMatrix#setSubMatrix(T extends FieldElement[][],int,int)": [
        "org.apache.commons.math3.linear.BlockFieldMatrix#blockHeight(int)",
        "org.apache.commons.math3.linear.BlockFieldMatrix#blockWidth(int)",
        "org.apache.commons.math3.exception.DimensionMismatchException#DimensionMismatchException(int,int)",
        "org.apache.commons.math3.util.MathUtils.checkNotNull(Object)",
        "org.apache.commons.math3.util.FastMath.max(int,int)",
        "org.apache.commons.math3.exception.util.LocalizedFormats.<staticinit>()",
        "org.apache.commons.math3.exception.NoDataException#NoDataException(Localizable)",
        "org.apache.commons.math3.linear.AbstractFieldMatrix#checkSubMatrixIndex(int,int,int,int)",
        "org.apache.commons.math3.linear.BlockFieldMatrix.<staticinit>()",
        "org.apache.commons.math3.util.FastMath.min(int,int)"
    ],
    "org.apache.commons.math3.optim.nonlinear.vector.MultiStartMultivariateVectorOptimizer#getPairComparator()": ["org.apache.commons.math3.optim.nonlinear.vector.MultiStartMultivariateVectorOptimizer#getPairComparator()$Comparator$1.<init>()"],
    "org.apache.commons.math3.stat.inference.ChiSquareTest#chiSquareTest(long[][],double)": [
        "org.apache.commons.math3.stat.inference.ChiSquareTest#chiSquareTest(long[][])",
        "org.apache.commons.math3.exception.util.LocalizedFormats.<staticinit>()"
    ],
    "org.apache.commons.math3.util.ResizableDoubleArray#setNumElements(int)": [
        "org.apache.commons.math3.util.ResizableDoubleArray#expandTo(int)",
        "org.apache.commons.math3.exception.util.LocalizedFormats.<staticinit>()"
    ],
    "org.apache.commons.math3.analysis.solvers.AbstractUnivariateDifferentiableSolver#AbstractUnivariateDifferentiableSolver(double)": [
        "org.apache.commons.math3.analysis.solvers.BaseAbstractUnivariateSolver#BaseAbstractUnivariateSolver(double)",
        "org.apache.commons.math3.analysis.solvers.AbstractUnivariateDifferentiableSolver.<init>()"
    ],
    "org.apache.commons.math3.geometry.euclidean.threed.Line#toSubSpace(Vector<Euclidean3D>)": ["org.apache.commons.math3.geometry.euclidean.threed.Line#toSubSpace(Point<Euclidean3D>)"],
    "org.apache.commons.math3.stat.descriptive.moment.SemiVariance#evaluate(double[],double,Direction)": ["org.apache.commons.math3.stat.descriptive.moment.SemiVariance#evaluate(double[],double,Direction,boolean,int,int)"],
    "org.apache.commons.math3.analysis.polynomials.PolynomialFunctionLagrangeForm#value(double)": ["org.apache.commons.math3.analysis.polynomials.PolynomialFunctionLagrangeForm.evaluateInternal(double[],double[],double)"],
    "org.apache.commons.math3.analysis.function.Power#Power(double)": ["org.apache.commons.math3.analysis.function.Power.<init>()"],
    "org.apache.commons.math3.fitting.GaussianCurveFitter#withMaxIterations(int)": ["org.apache.commons.math3.fitting.GaussianCurveFitter#GaussianCurveFitter(double[],int)"],
    "org.apache.commons.math3.ode.nonstiff.LutherStepInterpolator#LutherStepInterpolator()": [
        "org.apache.commons.math3.ode.nonstiff.LutherStepInterpolator.<init>()",
        "org.apache.commons.math3.ode.nonstiff.RungeKuttaStepInterpolator#RungeKuttaStepInterpolator()"
    ],
    "org.apache.commons.math3.stat.descriptive.AbstractStorelessUnivariateStatistic#incrementAll(double[],int,int)": [
        "org.apache.commons.math3.stat.descriptive.AbstractUnivariateStatistic#test(double[],int,int)",
        "org.apache.commons.math3.stat.descriptive.moment.Mean#increment(double)",
        "org.apache.commons.math3.stat.descriptive.rank.Max#increment(double)",
        "org.apache.commons.math3.stat.descriptive.summary.SumOfLogs#increment(double)",
        "org.apache.commons.math3.stat.descriptive.moment.Kurtosis#increment(double)",
        "org.apache.commons.math3.stat.descriptive.moment.FourthMoment#increment(double)",
        "org.apache.commons.math3.stat.descriptive.moment.Skewness#increment(double)",
        "org.apache.commons.math3.stat.descriptive.moment.StandardDeviation#increment(double)",
        "org.apache.commons.math3.stat.descriptive.moment.FirstMoment#increment(double)",
        "org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile#increment(double)",
        "org.apache.commons.math3.stat.descriptive.moment.GeometricMean#increment(double)",
        "org.apache.commons.math3.stat.descriptive.moment.Variance#increment(double)",
        "org.apache.commons.math3.stat.descriptive.moment.SecondMoment#increment(double)",
        "org.apache.commons.math3.stat.descriptive.rank.Min#increment(double)",
        "org.apache.commons.math3.stat.descriptive.summary.SumOfSquares#increment(double)",
        "org.apache.commons.math3.stat.descriptive.summary.Product#increment(double)",
        "org.apache.commons.math3.stat.descriptive.moment.ThirdMoment#increment(double)",
        "org.apache.commons.math3.stat.descriptive.summary.Sum#increment(double)"
    ],
    "org.apache.commons.math3.analysis.polynomials.PolynomialsUtils.createJacobiPolynomial(int,int,int)": [
        "org.apache.commons.math3.analysis.polynomials.PolynomialsUtils.<staticinit>()",
        "org.apache.commons.math3.analysis.polynomials.PolynomialsUtils.createJacobiPolynomial(int,int,int)$RecurrenceCoefficientsGenerator$1.<init>()",
        "org.apache.commons.math3.fraction.BigFraction#BigFraction(int,int)",
        "org.apache.commons.math3.analysis.polynomials.PolynomialsUtils.JacobiKey#JacobiKey(int,int)",
        "org.apache.commons.math3.analysis.polynomials.PolynomialsUtils.buildPolynomial(int,List<BigFraction>,RecurrenceCoefficientsGenerator)",
        "org.apache.commons.math3.fraction.BigFraction.<staticinit>()"
    ],
    "org.apache.commons.math3.random.SynchronizedRandomGenerator#nextGaussian()": [
        "org.apache.commons.math3.random.RandomAdaptor#nextGaussian()",
        "org.apache.commons.math3.random.SynchronizedRandomGenerator#nextGaussian()",
        "org.apache.commons.math3.random.RandomGeneratorFactory.createRandomGenerator(Random)$RandomGenerator$1#nextGaussian()",
        "org.apache.commons.math3.random.BitsStreamGenerator#nextGaussian()",
        "org.apache.commons.math3.random.AbstractRandomGenerator#nextGaussian()"
    ],
    "org.apache.commons.math3.random.ValueServer#setMu(double)": ["org.apache.commons.math3.random.ValueServer.<staticinit>()"],
    "org.apache.commons.math3.fitting.leastsquares.EvaluationRmsChecker#EvaluationRmsChecker(double,double)": ["org.apache.commons.math3.fitting.leastsquares.EvaluationRmsChecker.<init>()"],
    "org.apache.commons.math3.stat.descriptive.moment.Mean#copy()": [
        "org.apache.commons.math3.stat.descriptive.moment.Mean#Mean()",
        "org.apache.commons.math3.stat.descriptive.moment.Mean.copy(Mean,Mean)"
    ],
    "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer#checkParameters()": [
        "org.apache.commons.math3.exception.DimensionMismatchException#DimensionMismatchException(int,int)",
        "org.apache.commons.math3.optim.BaseMultivariateOptimizer#getStartPoint()",
        "org.apache.commons.math3.optim.BaseMultivariateOptimizer#getUpperBound()",
        "org.apache.commons.math3.optim.BaseMultivariateOptimizer#getLowerBound()"
    ],
    "org.apache.commons.math3.analysis.interpolation.InterpolatingMicrosphere#InterpolatingMicrosphere(int,int,double,double,double,UnitSphereRandomVectorGenerator)": [
        "org.apache.commons.math3.analysis.interpolation.InterpolatingMicrosphere#add(double[],boolean)",
        "org.apache.commons.math3.random.UnitSphereRandomVectorGenerator#nextVector()",
        "org.apache.commons.math3.analysis.interpolation.InterpolatingMicrosphere#InterpolatingMicrosphere(int,int,double,double,double)"
    ],
    "org.apache.commons.math3.linear.MatrixUtils.createColumnRealMatrix(double[])": [
        "org.apache.commons.math3.exception.NullArgumentException#NullArgumentException()",
        "org.apache.commons.math3.linear.BlockRealMatrix#setEntry(int,int,double)",
        "org.apache.commons.math3.linear.OpenMapRealMatrix#setEntry(int,int,double)",
        "org.apache.commons.math3.linear.MatrixUtils.createRealMatrix(int,int)",
        "org.apache.commons.math3.linear.Array2DRowRealMatrix#setEntry(int,int,double)",
        "org.apache.commons.math3.linear.DiagonalMatrix#setEntry(int,int,double)"
    ],
    "org.apache.commons.math3.optim.SimpleValueChecker#SimpleValueChecker(double,double)": [
        "org.apache.commons.math3.optim.AbstractConvergenceChecker#AbstractConvergenceChecker(double,double)",
        "org.apache.commons.math3.optim.SimpleValueChecker.<staticinit>()",
        "org.apache.commons.math3.optim.SimpleValueChecker.<init>()"
    ],
    "org.apache.commons.math3.stat.descriptive.moment.ThirdMoment#increment(double)": ["org.apache.commons.math3.stat.descriptive.moment.SecondMoment#increment(double)"],
    "org.apache.commons.math3.random.ValueServer#fill(double[])": ["org.apache.commons.math3.random.ValueServer#getNext()"],
    "org.apache.commons.math3.userguide.sofm.ChineseRingsClassifier.main(String[])": [
        "org.apache.commons.math3.ml.neuralnet.sofm.KohonenTrainingTask#run()",
        "org.apache.commons.math3.userguide.sofm.ChineseRingsClassifier#ChineseRingsClassifier(ChineseRings,int,int)",
        "org.apache.commons.math3.userguide.sofm.ChineseRingsClassifier#createSequentialTask(long)",
        "org.apache.commons.math3.userguide.genetics.ImageEvolutionExample.Display#startEvolution()$Runnable$1#run()",
        "org.apache.commons.math3.userguide.sofm.ChineseRingsClassifier.printU(String,ChineseRingsClassifier)",
        "org.apache.commons.math3.userguide.ExampleUtils.showExampleFrame(ExampleFrame)$Runnable$1#run()",
        "org.apache.commons.math3.geometry.euclidean.threed.Vector3D#Vector3D(double,double,double)",
        "org.apache.commons.math3.userguide.sofm.ChineseRings#ChineseRings(Vector3D,double,double,double,double,int,int)",
        "org.apache.commons.math3.userguide.sofm.ChineseRingsClassifier.printHit(String,ChineseRingsClassifier)"
    ],
    "org.apache.commons.math3.exception.NonMonotonicSequenceException#NonMonotonicSequenceException(Number,Number,int,OrderDirection,boolean)": [
        "org.apache.commons.math3.exception.NonMonotonicSequenceException.<init>()",
        "org.apache.commons.math3.util.MathArrays.OrderDirection.<staticinit>()",
        "org.apache.commons.math3.exception.util.LocalizedFormats.<staticinit>()"
    ],
    "org.apache.commons.math3.linear.DiagonalMatrix#multiply(DiagonalMatrix)": [
        "org.apache.commons.math3.linear.MatrixUtils.checkMultiplicationCompatible(AnyMatrix,AnyMatrix)",
        "org.apache.commons.math3.linear.DiagonalMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.DiagonalMatrix#DiagonalMatrix(double[],boolean)"
    ],
    "org.apache.commons.math3.analysis.interpolation.PiecewiseBicubicSplineInterpolator#interpolate(double[],double[],double[][])": [
        "org.apache.commons.math3.analysis.interpolation.PiecewiseBicubicSplineInterpolatingFunction#PiecewiseBicubicSplineInterpolatingFunction(double[],double[],double[][])",
        "org.apache.commons.math3.exception.NullArgumentException#NullArgumentException()",
        "org.apache.commons.math3.exception.NoDataException#NoDataException()",
        "org.apache.commons.math3.util.MathArrays.checkOrder(double[])"
    ],
    "org.apache.commons.math3.util.FastMath.cosQ(double,double)": ["org.apache.commons.math3.util.FastMath.sinQ(double,double)"],
    "org.apache.commons.math3.stat.correlation.StorelessCovariance#getData()": [
        "org.apache.commons.math3.stat.correlation.StorelessBivariateCovariance#getResult()",
        "org.apache.commons.math3.stat.correlation.StorelessCovariance#getElement(int,int)"
    ],
    "org.apache.commons.math3.linear.SchurTransformer#getPT()": [
        "org.apache.commons.math3.linear.BlockRealMatrix#transpose()",
        "org.apache.commons.math3.linear.SchurTransformer#getP()",
        "org.apache.commons.math3.linear.AbstractRealMatrix#transpose()"
    ],
    "org.apache.commons.math3.analysis.solvers.LaguerreSolver#solveAllComplex(double[],double,int)": [
        "org.apache.commons.math3.analysis.solvers.LaguerreSolver.ComplexSolver#solveAll(Complex[],Complex)",
        "org.apache.commons.math3.analysis.solvers.AbstractPolynomialSolver#setup(int,PolynomialFunction,double,double,double)",
        "org.apache.commons.math3.complex.ComplexUtils.convertToComplex(double[])",
        "org.apache.commons.math3.analysis.polynomials.PolynomialFunction#PolynomialFunction(double[])",
        "org.apache.commons.math3.complex.Complex#Complex(double,double)"
    ],
    "org.apache.commons.math3.fitting.leastsquares.OptimumImpl#getSigma(double)": [
        "org.apache.commons.math3.fitting.leastsquares.OptimumImpl#getSigma(double)",
        "org.apache.commons.math3.fitting.leastsquares.AbstractEvaluation#getSigma(double)"
    ],
    "org.apache.commons.math3.geometry.euclidean.twod.Vector2D.angle(Vector2D,Vector2D)": [
        "org.apache.commons.math3.geometry.euclidean.twod.Vector2D#dotProduct(Vector<Euclidean2D>)",
        "org.apache.commons.math3.util.FastMath.asin(double)",
        "org.apache.commons.math3.util.FastMath.abs(double)",
        "org.apache.commons.math3.exception.util.LocalizedFormats.<staticinit>()",
        "org.apache.commons.math3.util.FastMath.acos(double)",
        "org.apache.commons.math3.util.MathArrays.linearCombination(double,double,double,double)",
        "org.apache.commons.math3.geometry.euclidean.twod.Vector2D#getNorm()",
        "org.apache.commons.math3.util.FastMath.<staticinit>()"
    ],
    "org.apache.commons.math3.geometry.spherical.twod.S2Point.distance(S2Point,S2Point)": ["org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(Vector3D,Vector3D)"],
    "org.apache.commons.math3.analysis.interpolation.TricubicSplineInterpolatingFunction#computeSplineCoefficients(double[])": ["org.apache.commons.math3.analysis.interpolation.TricubicSplineInterpolatingFunction.<staticinit>()"],
    "org.apache.commons.math3.optimization.linear.SimplexTableau#readObject(ObjectInputStream)": ["org.apache.commons.math3.linear.MatrixUtils.deserializeRealMatrix(Object,String,ObjectInputStream)"],
    "org.apache.commons.math3.ml.neuralnet.Network#getNeighbours(Neuron,Iterable<Neuron>)": [
        "org.apache.commons.math3.ml.neuralnet.Neuron#getIdentifier()",
        "org.apache.commons.math3.ml.neuralnet.Network#getNeuron(long)"
    ],
    "org.apache.commons.math3.ode.nonstiff.DormandPrince54Integrator#DormandPrince54Integrator(double,double,double[],double[])": [
        "org.apache.commons.math3.ode.nonstiff.DormandPrince54Integrator.<staticinit>()",
        "org.apache.commons.math3.ode.nonstiff.DormandPrince54StepInterpolator#DormandPrince54StepInterpolator()",
        "org.apache.commons.math3.ode.nonstiff.DormandPrince54Integrator.<init>()",
        "org.apache.commons.math3.ode.nonstiff.EmbeddedRungeKuttaIntegrator#EmbeddedRungeKuttaIntegrator(String,boolean,double[],double[][],double[],RungeKuttaStepInterpolator,double,double,double[],double[])"
    ],
    "org.apache.commons.math3.optimization.direct.SimplexOptimizer#doOptimize()$Comparator$1#compare(PointValuePair,PointValuePair)": [
        "org.apache.commons.math3.util.Pair#getValue()",
        "org.apache.commons.math3.optim.PointVectorValuePair#getValue()",
        "org.apache.commons.math3.optimization.PointVectorValuePair#getValue()"
    ],
    "org.apache.commons.math3.util.FastMath.log10(double)": [
        "org.apache.commons.math3.util.FastMath.log(double,double[])",
        "org.apache.commons.math3.util.FastMath.<staticinit>()"
    ],
    "org.apache.commons.math3.distribution.WeibullDistribution#WeibullDistribution(RandomGenerator,double,double,double)": [
        "org.apache.commons.math3.distribution.WeibullDistribution.<init>()",
        "org.apache.commons.math3.distribution.WeibullDistribution.<staticinit>()",
        "org.apache.commons.math3.distribution.AbstractRealDistribution#AbstractRealDistribution(RandomGenerator)",
        "org.apache.commons.math3.exception.util.LocalizedFormats.<staticinit>()"
    ],
    "org.apache.commons.math3.ode.sampling.StepNormalizer#StepNormalizer(double,FixedStepHandler)": [
        "org.apache.commons.math3.ode.sampling.StepNormalizerBounds.<staticinit>()",
        "org.apache.commons.math3.ode.sampling.StepNormalizerMode.<staticinit>()",
        "org.apache.commons.math3.ode.sampling.StepNormalizer#StepNormalizer(double,FixedStepHandler,StepNormalizerMode,StepNormalizerBounds)"
    ],
    "org.apache.commons.math3.fitting.GaussianFitter.ParameterGuesser#sortObservations(WeightedObservedPoint[])$Comparator$1#compare(WeightedObservedPoint,WeightedObservedPoint)": [
        "org.apache.commons.math3.fitting.WeightedObservedPoint#getX()",
        "org.apache.commons.math3.fitting.WeightedObservedPoint#getY()",
        "org.apache.commons.math3.fitting.WeightedObservedPoint#getWeight()"
    ],
    "org.apache.commons.math3.optimization.direct.BaseAbstractMultivariateVectorOptimizer#getWeight()": [
        "org.apache.commons.math3.linear.Array2DRowRealMatrix#copy()",
        "org.apache.commons.math3.linear.BlockRealMatrix#copy()",
        "org.apache.commons.math3.linear.DiagonalMatrix#copy()",
        "org.apache.commons.math3.linear.OpenMapRealMatrix#copy()"
    ],
    "org.apache.commons.math3.linear.RealVector#add(RealVector)": [
        "org.apache.commons.math3.linear.RealVector.Entry#getValue()",
        "org.apache.commons.math3.linear.ArrayRealVector#copy()",
        "org.apache.commons.math3.linear.RealVector#iterator()",
        "org.apache.commons.math3.linear.RealVector#iterator()$Iterator$1#hasNext()",
        "org.apache.commons.math3.linear.RealVector.unmodifiableRealVector(RealVector)$Iterator$1$Iterator$1#sparseIterator()$Iterator$1#hasNext()",
        "org.apache.commons.math3.linear.RealVector.unmodifiableRealVector(RealVector)$RealVector$1#iterator()",
        "org.apache.commons.math3.geometry.spherical.oned.ArcsSet.SubArcsIterator#hasNext()",
        "org.apache.commons.math3.linear.OpenMapRealVector#setEntry(int,double)",
        "org.apache.commons.math3.util.Combinations.LexicographicIterator#hasNext()",
        "org.apache.commons.math3.linear.OpenMapRealVector.OpenMapEntry#getValue()",
        "org.apache.commons.math3.linear.ArrayRealVector#setEntry(int,double)",
        "org.apache.commons.math3.linear.RealVector.unmodifiableRealVector(RealVector).UnmodifiableEntry.UnmodifiableEntry#getValue()",
        "org.apache.commons.math3.linear.RealVector.SparseEntryIterator#hasNext()",
        "org.apache.commons.math3.userguide.sofm.ChineseRingsClassifier#createIterable()$Iterator$1$Iterator$1#iterator()$Iterator$1#hasNext()",
        "org.apache.commons.math3.linear.RealVector.unmodifiableRealVector(RealVector)$RealVector$1#copy()",
        "org.apache.commons.math3.linear.RealVector.unmodifiableRealVector(RealVector)$Iterator$1$Iterator$1#sparseIterator()$Iterator$1#next()",
        "org.apache.commons.math3.util.MultidimensionalCounter.Iterator#hasNext()",
        "org.apache.commons.math3.linear.RealVector.unmodifiableRealVector(RealVector)$Iterator$1$Iterator$1#iterator()$Iterator$1#next()",
        "org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet.SubIntervalsIterator#hasNext()",
        "org.apache.commons.math3.linear.OpenMapRealVector.OpenMapEntry#getIndex()",
        "org.apache.commons.math3.linear.ArrayRealVector#checkVectorDimensions(RealVector)",
        "org.apache.commons.math3.userguide.sofm.ChineseRingsClassifier#createRandomIterator(long)$Iterator$1#hasNext()",
        "org.apache.commons.math3.util.IntegerSequence.Incrementor#hasNext()",
        "org.apache.commons.math3.linear.RealVector.Entry#getIndex()",
        "org.apache.commons.math3.linear.RealVector#iterator()$Iterator$1#next()",
        "org.apache.commons.math3.linear.ArrayRealVector#getEntry(int)",
        "org.apache.commons.math3.linear.RealVector#checkVectorDimensions(RealVector)",
        "org.apache.commons.math3.linear.RealVector.unmodifiableRealVector(RealVector)$RealVector$1#setEntry(int,double)",
        "org.apache.commons.math3.linear.RealVector.unmodifiableRealVector(RealVector)$Iterator$1$Iterator$1#iterator()$Iterator$1#hasNext()",
        "org.apache.commons.math3.util.Combinations.SingletonIterator#hasNext()",
        "org.apache.commons.math3.linear.RealVector.SparseEntryIterator#next()",
        "org.apache.commons.math3.linear.OpenMapRealVector#copy()",
        "org.apache.commons.math3.linear.OpenMapRealVector#getEntry(int)",
        "org.apache.commons.math3.linear.RealVector.unmodifiableRealVector(RealVector)$RealVector$1#getEntry(int)"
    ],
    "org.apache.commons.math3.optimization.univariate.BaseUnivariateOptimizer#optimize(int,FUNC extends UnivariateFunction,GoalType,double,double)": ["org.apache.commons.math3.optimization.GoalType.<staticinit>()"],
    "org.apache.commons.math3.stat.descriptive.SynchronizedMultivariateSummaryStatistics#setSumsqImpl(StorelessUnivariateStatistic[])": ["org.apache.commons.math3.stat.descriptive.MultivariateSummaryStatistics#setSumsqImpl(StorelessUnivariateStatistic[])"],
    "org.apache.commons.math3.linear.BlockRealMatrix#getNorm()": [
        "org.apache.commons.math3.linear.BlockRealMatrix#blockHeight(int)",
        "org.apache.commons.math3.util.FastMath.max(double,double)",
        "org.apache.commons.math3.util.FastMath.abs(double)",
        "org.apache.commons.math3.linear.BlockRealMatrix.<staticinit>()",
        "org.apache.commons.math3.linear.BlockRealMatrix#blockWidth(int)"
    ],
    "org.apache.commons.math3.optim.nonlinear.scalar.MultivariateFunctionMappingAdapter#value(double[])": [
        "org.apache.commons.math3.optim.nonlinear.scalar.MultivariateFunctionMappingAdapter#value(double[])",
        "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizer#doOptimize()$MultivariateFunction$1#value(double[])",
        "org.apache.commons.math3.optimization.direct.MultivariateFunctionMappingAdapter#value(double[])",
        "org.apache.commons.math3.optim.nonlinear.scalar.MultivariateFunctionMappingAdapter#unboundedToBounded(double[])",
        "org.apache.commons.math3.analysis.FunctionUtils.toMultivariateDifferentiableFunction(DifferentiableMultivariateFunction)$MultivariateDifferentiableFunction$1#value(double[])",
        "org.apache.commons.math3.analysis.FunctionUtils.toDifferentiableMultivariateFunction(MultivariateDifferentiableFunction)$DifferentiableMultivariateFunction$1#value(double[])",
        "org.apache.commons.math3.analysis.interpolation.MicrosphereInterpolatingFunction#value(double[])",
        "org.apache.commons.math3.analysis.interpolation.MicrosphereProjectionInterpolator#interpolate(double[][],double[])$MultivariateFunction$1#value(double[])",
        "org.apache.commons.math3.optimization.direct.MultivariateFunctionPenaltyAdapter#value(double[])",
        "org.apache.commons.math3.optim.nonlinear.scalar.MultivariateFunctionPenaltyAdapter#value(double[])",
        "org.apache.commons.math3.optim.linear.LinearObjectiveFunction#value(double[])",
        "org.apache.commons.math3.analysis.FunctionUtils.collector(BivariateFunction,UnivariateFunction,double)$MultivariateFunction$1#value(double[])",
        "org.apache.commons.math3.optim.nonlinear.scalar.LeastSquaresConverter#value(double[])",
        "org.apache.commons.math3.analysis.FunctionUtils.toDifferentiableMultivariateFunction(MultivariateDifferentiableFunction)$MultivariateFunction$1$MultivariateFunction$1#partialDerivative(int)$MultivariateFunction$1#value(double[])",
        "org.apache.commons.math3.optimization.LeastSquaresConverter#value(double[])",
        "org.apache.commons.math3.optimization.direct.SimplexOptimizer#doOptimize()$MultivariateFunction$1#value(double[])"
    ],
    "org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile.Markers#findCellAndUpdateMinMax(double)": ["org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile.Markers#height(int)"],
    "org.apache.commons.math3.userguide.filter.ConstantVoltageExample.createComponent()": [
        "org.apache.commons.math3.userguide.filter.ConstantVoltageExample.createChart(String,int,int,LegendPosition,boolean)",
        "org.apache.commons.math3.userguide.filter.ConstantVoltageExample.constantVoltageTest(Chart,Chart)"
    ],
    "org.apache.commons.math3.complex.Quaternion#hashCode()": ["org.apache.commons.math3.util.MathUtils.hash(double)"],
    "org.apache.commons.math3.primes.SmallPrimes.trialDivision(int)": [
        "org.apache.commons.math3.primes.SmallPrimes.boundedTrialDivision(int,int,List<Integer>)",
        "org.apache.commons.math3.util.FastMath.sqrt(double)",
        "org.apache.commons.math3.primes.SmallPrimes.smallTrialDivision(int,List<Integer>)"
    ],
    "org.apache.commons.math3.util.Combinations.LexicographicComparator#LexicographicComparator(int,int)": ["org.apache.commons.math3.util.Combinations.LexicographicComparator.<init>()"],
    "org.apache.commons.math3.fraction.Fraction#floatValue()": ["org.apache.commons.math3.fraction.Fraction#doubleValue()"],
    "org.apache.commons.math3.distribution.MultivariateNormalDistribution#MultivariateNormalDistribution(double[],double[][])": [
        "org.apache.commons.math3.distribution.MultivariateNormalDistribution#MultivariateNormalDistribution(RandomGenerator,double[],double[][])",
        "org.apache.commons.math3.random.Well19937c#Well19937c()"
    ],
    "org.apache.commons.math3.stat.descriptive.rank.Max#evaluate(double[],int,int)": ["org.apache.commons.math3.stat.descriptive.AbstractUnivariateStatistic#test(double[],int,int)"],
    "org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D#equals(Object)": ["org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D#isNaN()"],
    "org.apache.commons.math3.analysis.integration.IterativeLegendreGaussIntegrator.<staticinit>()": ["org.apache.commons.math3.analysis.integration.gauss.GaussIntegratorFactory.<init>()"],
    "org.apache.commons.math3.linear.ArrayFieldVector#ebeDivide(FieldVector<T extends FieldElement>)": [
        "org.apache.commons.math3.linear.SparseFieldVector#getEntry(int)",
        "org.apache.commons.math3.linear.ArrayFieldVector#ArrayFieldVector(Field<T extends FieldElement>,T extends FieldElement[],boolean)",
        "org.apache.commons.math3.linear.ArrayFieldVector#ebeDivide(ArrayFieldVector<T extends FieldElement>)",
        "org.apache.commons.math3.exception.util.LocalizedFormats.<staticinit>()",
        "org.apache.commons.math3.linear.ArrayFieldVector#getEntry(int)",
        "org.apache.commons.math3.util.MathArrays.buildArray(Field<T>,int)",
        "org.apache.commons.math3.linear.ArrayFieldVector#checkVectorDimensions(FieldVector<T extends FieldElement>)"
    ],
    "org.apache.commons.math3.userguide.geometry.GeometryExample.Display#Display()": [
        "org.apache.commons.math3.userguide.geometry.GeometryExample.Display#Display()$ActionListener$2.<init>()",
        "org.apache.commons.math3.userguide.geometry.GeometryExample.Display#paintConvexHull()",
        "org.apache.commons.math3.userguide.ExampleUtils.ExampleFrame.<init>()",
        "org.apache.commons.math3.userguide.geometry.GeometryExample.Display#Display()$ActionListener$1.<init>()",
        "org.apache.commons.math3.userguide.geometry.GeometryExample.Display.<init>()",
        "org.apache.commons.math3.userguide.geometry.GeometryExample.Display#Display()$ActionListener$3.<init>()",
        "org.apache.commons.math3.userguide.geometry.GeometryExample.createRandomPoints(int)",
        "org.apache.commons.math3.userguide.geometry.GeometryExample.createCanvas()"
    ],
    "org.apache.commons.math3.analysis.FunctionUtils.toMultivariateDifferentiableFunction(DifferentiableMultivariateFunction)$MultivariateDifferentiableFunction$1#value(DerivativeStructure[])": [
        "org.apache.commons.math3.optim.nonlinear.scalar.MultivariateFunctionMappingAdapter#value(double[])",
        "org.apache.commons.math3.optimization.direct.MultivariateFunctionMappingAdapter#value(double[])",
        "org.apache.commons.math3.analysis.FunctionUtils.toMultivariateDifferentiableFunction(DifferentiableMultivariateFunction)$MultivariateDifferentiableFunction$1#value(double[])",
        "org.apache.commons.math3.analysis.FunctionUtils.toDifferentiableMultivariateFunction(MultivariateDifferentiableFunction)$DifferentiableMultivariateFunction$1#value(double[])",
        "org.apache.commons.math3.analysis.interpolation.MicrosphereProjectionInterpolator#interpolate(double[][],double[])$MultivariateFunction$1#value(double[])",
        "org.apache.commons.math3.optimization.direct.MultivariateFunctionPenaltyAdapter#value(double[])",
        "org.apache.commons.math3.optim.nonlinear.scalar.MultivariateFunctionPenaltyAdapter#value(double[])",
        "org.apache.commons.math3.optim.linear.LinearObjectiveFunction#value(double[])",
        "org.apache.commons.math3.exception.DimensionMismatchException#DimensionMismatchException(int,int)",
        "org.apache.commons.math3.fitting.AbstractCurveFitter.TheoreticalValuesFunction#getModelFunction()$MultivariateVectorFunction$1#value(double[])",
        "org.apache.commons.math3.analysis.FunctionUtils.collector(BivariateFunction,UnivariateFunction,double)$MultivariateFunction$1#value(double[])",
        "org.apache.commons.math3.analysis.FunctionUtils.toDifferentiableMultivariateFunction(MultivariateDifferentiableFunction)$MultivariateVectorFunction$1$MultivariateVectorFunction$1#gradient()$MultivariateVectorFunction$1#value(double[])",
        "org.apache.commons.math3.analysis.differentiation.DerivativeStructure#getOrder()",
        "org.apache.commons.math3.analysis.FunctionUtils.toMultivariateDifferentiableVectorFunction(DifferentiableMultivariateVectorFunction)$MultivariateDifferentiableVectorFunction$1#value(double[])",
        "org.apache.commons.math3.analysis.FunctionUtils.toDifferentiableMultivariateVectorFunction(MultivariateDifferentiableVectorFunction)$DifferentiableMultivariateVectorFunction$1#value(double[])",
        "org.apache.commons.math3.optim.nonlinear.scalar.LeastSquaresConverter#value(double[])",
        "org.apache.commons.math3.optimization.LeastSquaresConverter#value(double[])",
        "org.apache.commons.math3.analysis.differentiation.DerivativeStructure#getPartialDerivative(int[]...)",
        "org.apache.commons.math3.analysis.FunctionUtils.toDifferentiableMultivariateFunction(MultivariateDifferentiableFunction)$DifferentiableMultivariateFunction$1#gradient()",
        "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizer#doOptimize()$MultivariateFunction$1#value(double[])",
        "org.apache.commons.math3.analysis.interpolation.MicrosphereInterpolatingFunction#value(double[])",
        "org.apache.commons.math3.fitting.CurveFitter.TheoreticalValuesFunction#getModelFunction()$MultivariateVectorFunction$1#value(double[])",
        "org.apache.commons.math3.analysis.differentiation.DerivativeStructure#getFreeParameters()",
        "org.apache.commons.math3.optimization.fitting.CurveFitter.OldTheoreticalValuesFunction#value(double[])",
        "org.apache.commons.math3.optimization.fitting.CurveFitter.TheoreticalValuesFunction#value(double[])",
        "org.apache.commons.math3.analysis.differentiation.DerivativeStructure#getValue()",
        "org.apache.commons.math3.analysis.differentiation.DerivativeStructure#DerivativeStructure(int,int,double[]...)",
        "org.apache.commons.math3.analysis.FunctionUtils.toDifferentiableMultivariateFunction(MultivariateDifferentiableFunction)$MultivariateFunction$1$MultivariateFunction$1#partialDerivative(int)$MultivariateFunction$1#value(double[])",
        "org.apache.commons.math3.analysis.differentiation.GradientFunction#value(double[])",
        "org.apache.commons.math3.optimization.direct.SimplexOptimizer#doOptimize()$MultivariateFunction$1#value(double[])"
    ],
    "org.apache.commons.math3.analysis.differentiation.DSCompiler#atanh(double[],int,double[],int)": [
        "org.apache.commons.math3.util.FastMath.atanh(double)",
        "org.apache.commons.math3.analysis.differentiation.DSCompiler#compose(double[],int,double[],double[],int)"
    ],
    "org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator#readExternal(ObjectInput)": ["org.apache.commons.math3.ode.nonstiff.RungeKuttaStepInterpolator#readExternal(ObjectInput)"],
    "org.apache.commons.math3.fitting.leastsquares.LeastSquaresAdapter#getStart()": [
        "org.apache.commons.math3.fitting.leastsquares.LeastSquaresFactory.LocalLeastSquaresProblem#getStart()",
        "org.apache.commons.math3.fitting.leastsquares.LeastSquaresAdapter#getStart()"
    ],
    "org.apache.commons.math3.stat.descriptive.StatisticalSummaryValues#StatisticalSummaryValues(double,double,long,double,double,double)": ["org.apache.commons.math3.stat.descriptive.StatisticalSummaryValues.<init>()"],
    "org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D.distance1(Vector3D,FieldVector3D<T extends RealFieldElement>)": ["org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D#distance1(Vector3D)"],
    "org.apache.commons.math3.linear.ArrayFieldVector#walkInOptimizedOrder(FieldVectorChangingVisitor<T extends FieldElement>,int,int)": ["org.apache.commons.math3.linear.ArrayFieldVector#walkInDefaultOrder(FieldVectorChangingVisitor<T extends FieldElement>,int,int)"],
    "org.apache.commons.math3.geometry.euclidean.threed.Rotation#getAxis(RotationConvention)": [
        "org.apache.commons.math3.geometry.euclidean.threed.Vector3D.<staticinit>()",
        "org.apache.commons.math3.geometry.euclidean.threed.Vector3D#Vector3D(double,double,double)",
        "org.apache.commons.math3.geometry.euclidean.threed.RotationConvention.<staticinit>()",
        "org.apache.commons.math3.util.FastMath.sqrt(double)"
    ],
    "org.apache.commons.math3.util.Decimal64#log()": [
        "org.apache.commons.math3.util.FastMath.log(double)",
        "org.apache.commons.math3.util.Decimal64#Decimal64(double)"
    ],
    "org.apache.commons.math3.linear.EigenDecomposition#transformToTridiagonal(RealMatrix)": [
        "org.apache.commons.math3.linear.TriDiagonalTransformer#getSecondaryDiagonalRef()",
        "org.apache.commons.math3.linear.TriDiagonalTransformer#getMainDiagonalRef()",
        "org.apache.commons.math3.linear.TriDiagonalTransformer#TriDiagonalTransformer(RealMatrix)"
    ],
    "org.apache.commons.math3.geometry.spherical.twod.Circle#project(Point<Sphere2D>)": [
        "org.apache.commons.math3.geometry.spherical.twod.Circle#toSubSpace(Point<Sphere2D>)",
        "org.apache.commons.math3.geometry.spherical.twod.Circle#toSpace(Point<Sphere1D>)"
    ],
    "org.apache.commons.math3.geometry.spherical.oned.ArcsSet#iterator()": ["org.apache.commons.math3.geometry.spherical.oned.ArcsSet.SubArcsIterator#SubArcsIterator()"],
    "org.apache.commons.math3.ml.neuralnet.MapUtils.computeQuantizationError(Iterable<double[]>,Iterable<Neuron>,DistanceMeasure)": [
        "org.apache.commons.math3.ml.neuralnet.MapUtils.findBest(double[],Iterable<Neuron>,DistanceMeasure)",
        "org.apache.commons.math3.ml.distance.EuclideanDistance#compute(double[],double[])",
        "org.apache.commons.math3.ml.distance.CanberraDistance#compute(double[],double[])",
        "org.apache.commons.math3.exception.NoDataException#NoDataException()",
        "org.apache.commons.math3.ml.distance.ChebyshevDistance#compute(double[],double[])",
        "org.apache.commons.math3.ml.distance.ManhattanDistance#compute(double[],double[])",
        "org.apache.commons.math3.ml.distance.EarthMoversDistance#compute(double[],double[])",
        "org.apache.commons.math3.ml.neuralnet.Neuron#getFeatures()"
    ],
    "org.apache.commons.math3.ode.events.FieldEventHandler#eventOccurred(FieldODEStateAndDerivative<T extends RealFieldElement>,boolean)": ["org.apache.commons.math3.ode.events.Action.<staticinit>()"],
    "org.apache.commons.math3.geometry.euclidean.threed.Plane#translate(Vector3D)": [
        "org.apache.commons.math3.geometry.euclidean.threed.Vector3D#add(Vector<Euclidean3D>)",
        "org.apache.commons.math3.geometry.euclidean.threed.Plane#Plane(Vector3D,Vector3D,double)"
    ],
    "org.apache.commons.math3.fraction.BigFraction#subtract(BigInteger)": [
        "org.apache.commons.math3.fraction.BigFraction#BigFraction(BigInteger)",
        "org.apache.commons.math3.exception.NullArgumentException#NullArgumentException()",
        "org.apache.commons.math3.fraction.BigFraction#BigFraction(BigInteger,BigInteger)"
    ],
    "org.apache.commons.math3.exception.util.ExceptionContext#getMessage(Locale,String)": ["org.apache.commons.math3.exception.util.ExceptionContext#buildMessage(Locale,String)"],
    "org.apache.commons.math3.genetics.RandomKey#RandomKey(List<Double>)": [
        "org.apache.commons.math3.genetics.RandomKey.baseSequence(int)",
        "org.apache.commons.math3.genetics.AbstractListChromosome#getRepresentation()",
        "org.apache.commons.math3.genetics.RandomKey.<init>()",
        "org.apache.commons.math3.genetics.AbstractListChromosome#getLength()",
        "org.apache.commons.math3.genetics.AbstractListChromosome#AbstractListChromosome(List<T>)",
        "org.apache.commons.math3.genetics.RandomKey.decodeGeneric(List<S>,List<Double>,List<Double>)"
    ],
    "org.apache.commons.math3.geometry.euclidean.oned.SubOrientedPoint#SubOrientedPoint(Hyperplane<Euclidean1D>,Region<Euclidean1D>)": [
        "org.apache.commons.math3.geometry.euclidean.oned.SubOrientedPoint.<init>()",
        "org.apache.commons.math3.geometry.partitioning.AbstractSubHyperplane#AbstractSubHyperplane(Hyperplane<S extends Space>,Region<T extends Space>)"
    ],
    "org.apache.commons.math3.analysis.FunctionUtils.toMultivariateDifferentiableVectorFunction(DifferentiableMultivariateVectorFunction)$MultivariateDifferentiableVectorFunction$1#value(double[])": [
        "org.apache.commons.math3.fitting.AbstractCurveFitter.TheoreticalValuesFunction#getModelFunction()$MultivariateVectorFunction$1#value(double[])",
        "org.apache.commons.math3.optimization.fitting.CurveFitter.TheoreticalValuesFunction#value(double[])",
        "org.apache.commons.math3.analysis.FunctionUtils.toDifferentiableMultivariateFunction(MultivariateDifferentiableFunction)$MultivariateVectorFunction$1$MultivariateVectorFunction$1#gradient()$MultivariateVectorFunction$1#value(double[])",
        "org.apache.commons.math3.analysis.FunctionUtils.toMultivariateDifferentiableVectorFunction(DifferentiableMultivariateVectorFunction)$MultivariateDifferentiableVectorFunction$1#value(double[])",
        "org.apache.commons.math3.analysis.FunctionUtils.toDifferentiableMultivariateVectorFunction(MultivariateDifferentiableVectorFunction)$DifferentiableMultivariateVectorFunction$1#value(double[])",
        "org.apache.commons.math3.fitting.CurveFitter.TheoreticalValuesFunction#getModelFunction()$MultivariateVectorFunction$1#value(double[])",
        "org.apache.commons.math3.analysis.differentiation.GradientFunction#value(double[])",
        "org.apache.commons.math3.optimization.fitting.CurveFitter.OldTheoreticalValuesFunction#value(double[])"
    ],
    "org.apache.commons.math3.fitting.leastsquares.LeastSquaresFactory.create(MultivariateJacobianFunction,RealVector,RealVector,RealMatrix,ConvergenceChecker<Evaluation>,int,int)": [
        "org.apache.commons.math3.fitting.leastsquares.LeastSquaresFactory.weightMatrix(LeastSquaresProblem,RealMatrix)",
        "org.apache.commons.math3.fitting.leastsquares.LeastSquaresFactory.create(MultivariateJacobianFunction,RealVector,RealVector,ConvergenceChecker<Evaluation>,int,int)"
    ],
    "org.apache.commons.math3.geometry.partitioning.RegionFactory.VanishingToLeaf#fixNode(BSPTree<S extends Space>)": [
        "org.apache.commons.math3.geometry.partitioning.BSPTree#BSPTree(Object)",
        "org.apache.commons.math3.stat.descriptive.AggregateSummaryStatistics.AggregatingSummaryStatistics#equals(Object)",
        "org.apache.commons.math3.geometry.partitioning.BSPTree#getPlus()",
        "org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile#equals(Object)",
        "org.apache.commons.math3.linear.AbstractRealMatrix#equals(Object)",
        "org.apache.commons.math3.stat.descriptive.SynchronizedMultivariateSummaryStatistics#equals(Object)",
        "org.apache.commons.math3.geometry.partitioning.BSPTree#getMinus()",
        "org.apache.commons.math3.linear.OpenMapRealVector#equals(Object)",
        "org.apache.commons.math3.stat.descriptive.AbstractStorelessUnivariateStatistic#equals(Object)",
        "org.apache.commons.math3.geometry.partitioning.BSPTree#getAttribute()",
        "org.apache.commons.math3.linear.ArrayRealVector#equals(Object)",
        "org.apache.commons.math3.stat.descriptive.SynchronizedSummaryStatistics#equals(Object)"
    ],
    "org.apache.commons.math3.geometry.partitioning.AbstractRegion#insertCuts(BSPTree<S extends Space>,Collection<SubHyperplane<S extends Space>>)": [
        "org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet.SubIntervalsIterator#hasNext()",
        "org.apache.commons.math3.geometry.partitioning.BSPTree#insertCut(Hyperplane<S extends Space>)",
        "org.apache.commons.math3.geometry.partitioning.SubHyperplane.SplitSubHyperplane#getMinus()",
        "org.apache.commons.math3.geometry.partitioning.Side.<staticinit>()",
        "org.apache.commons.math3.linear.RealVector#iterator()$Iterator$1#hasNext()",
        "org.apache.commons.math3.geometry.partitioning.SubHyperplane.SplitSubHyperplane#getPlus()",
        "org.apache.commons.math3.userguide.sofm.ChineseRingsClassifier#createRandomIterator(long)$Iterator$1#hasNext()",
        "org.apache.commons.math3.util.IntegerSequence.Incrementor#hasNext()",
        "org.apache.commons.math3.linear.RealVector.unmodifiableRealVector(RealVector)$Iterator$1$Iterator$1#sparseIterator()$Iterator$1#hasNext()",
        "org.apache.commons.math3.geometry.spherical.oned.ArcsSet.SubArcsIterator#hasNext()",
        "org.apache.commons.math3.util.Combinations.LexicographicIterator#hasNext()",
        "org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile.FixedCapacityList#add(E)",
        "org.apache.commons.math3.linear.RealVector.SparseEntryIterator#hasNext()",
        "org.apache.commons.math3.geometry.partitioning.SubHyperplane.SplitSubHyperplane#getSide()",
        "org.apache.commons.math3.geometry.partitioning.BSPTree#getPlus()",
        "org.apache.commons.math3.userguide.sofm.ChineseRingsClassifier#createIterable()$Iterator$1$Iterator$1#iterator()$Iterator$1#hasNext()",
        "org.apache.commons.math3.geometry.partitioning.BSPTree#getMinus()",
        "org.apache.commons.math3.linear.RealVector.unmodifiableRealVector(RealVector)$Iterator$1$Iterator$1#iterator()$Iterator$1#hasNext()",
        "org.apache.commons.math3.util.Combinations.SingletonIterator#hasNext()",
        "org.apache.commons.math3.util.MultidimensionalCounter.Iterator#hasNext()",
        "org.apache.commons.math3.geometry.partitioning.AbstractRegion#insertCuts(BSPTree<S extends Space>,Collection<SubHyperplane<S extends Space>>)"
    ],
    "org.apache.commons.math3.stat.inference.KolmogorovSmirnovTest#cdfExact(double,int)": ["org.apache.commons.math3.stat.inference.KolmogorovSmirnovTest#cdf(double,int,boolean)"],
    "org.apache.commons.math3.transform.FastFourierTransformer.MultiDimensionalComplexMatrix#get(int[]...)": ["org.apache.commons.math3.exception.DimensionMismatchException#DimensionMismatchException(int,int)"],
    "org.apache.commons.math3.special.Gamma.trigamma(double)": [
        "org.apache.commons.math3.special.Gamma.trigamma(double)",
        "org.apache.commons.math3.special.Gamma.<staticinit>()"
    ],
    "org.apache.commons.math3.linear.OpenMapRealVector#getDistance(OpenMapRealVector)": [
        "org.apache.commons.math3.linear.OpenMapRealVector#getDimension()",
        "org.apache.commons.math3.util.OpenIntToDoubleHashMap.Iterator#value()",
        "org.apache.commons.math3.util.OpenIntToDoubleHashMap#iterator()",
        "org.apache.commons.math3.linear.RealVector#checkVectorDimensions(int)",
        "org.apache.commons.math3.util.OpenIntToDoubleHashMap#containsKey(int)",
        "org.apache.commons.math3.util.FastMath.sqrt(double)",
        "org.apache.commons.math3.linear.OpenMapRealVector#getEntries()",
        "org.apache.commons.math3.util.OpenIntToDoubleHashMap.Iterator#advance()",
        "org.apache.commons.math3.linear.ArrayRealVector#checkVectorDimensions(int)",
        "org.apache.commons.math3.util.OpenIntToDoubleHashMap.Iterator#key()",
        "org.apache.commons.math3.linear.OpenMapRealVector#getEntry(int)",
        "org.apache.commons.math3.util.OpenIntToDoubleHashMap.Iterator#hasNext()"
    ],
    "org.apache.commons.math3.linear.EigenDecomposition#getD()": [
        "org.apache.commons.math3.linear.EigenDecomposition.<staticinit>()",
        "org.apache.commons.math3.util.Precision.compareTo(double,double,double)",
        "org.apache.commons.math3.linear.Array2DRowRealMatrix#setEntry(int,int,double)",
        "org.apache.commons.math3.linear.BlockRealMatrix#setEntry(int,int,double)",
        "org.apache.commons.math3.linear.OpenMapRealMatrix#setEntry(int,int,double)",
        "org.apache.commons.math3.linear.MatrixUtils.createRealDiagonalMatrix(double[])",
        "org.apache.commons.math3.linear.DiagonalMatrix#setEntry(int,int,double)"
    ],
    "org.apache.commons.math3.distribution.fitting.MultivariateNormalMixtureExpectationMaximization#fit(MixtureMultivariateNormalDistribution,int,double)": [
        "org.apache.commons.math3.linear.OpenMapRealMatrix#multiply(RealMatrix)",
        "org.apache.commons.math3.linear.DiagonalMatrix#getData()",
        "org.apache.commons.math3.linear.AbstractRealMatrix#getData()",
        "org.apache.commons.math3.exception.DimensionMismatchException#DimensionMismatchException(int,int)",
        "org.apache.commons.math3.util.FastMath.abs(double)",
        "org.apache.commons.math3.distribution.MultivariateNormalDistribution#density(double[])",
        "org.apache.commons.math3.util.MathArrays.ebeSubtract(double[],double[])",
        "org.apache.commons.math3.distribution.MixtureMultivariateRealDistribution#getComponents()",
        "org.apache.commons.math3.linear.DiagonalMatrix#multiply(RealMatrix)",
        "org.apache.commons.math3.exception.ConvergenceException#ConvergenceException()",
        "org.apache.commons.math3.linear.BlockRealMatrix#multiply(RealMatrix)",
        "org.apache.commons.math3.linear.BlockRealMatrix#scalarMultiply(double)",
        "org.apache.commons.math3.linear.BlockRealMatrix#transpose()",
        "org.apache.commons.math3.linear.Array2DRowRealMatrix#Array2DRowRealMatrix(int,int)",
        "org.apache.commons.math3.distribution.MixtureMultivariateRealDistribution#density(double[])",
        "org.apache.commons.math3.distribution.MixtureMultivariateNormalDistribution#MixtureMultivariateNormalDistribution(List<Pair<Double, MultivariateNormalDistribution>>)",
        "org.apache.commons.math3.linear.Array2DRowRealMatrix#Array2DRowRealMatrix(double[])",
        "org.apache.commons.math3.linear.Array2DRowRealMatrix#getData()",
        "org.apache.commons.math3.linear.AbstractRealMatrix#multiply(RealMatrix)",
        "org.apache.commons.math3.linear.AbstractRealMatrix#scalarMultiply(double)",
        "org.apache.commons.math3.linear.AbstractRealMatrix#transpose()",
        "org.apache.commons.math3.linear.BlockRealMatrix#add(RealMatrix)",
        "org.apache.commons.math3.distribution.MixtureMultivariateNormalDistribution#MixtureMultivariateNormalDistribution(double[],double[][],double[][][])",
        "org.apache.commons.math3.linear.AbstractRealMatrix#add(RealMatrix)",
        "org.apache.commons.math3.util.FastMath.log(double)",
        "org.apache.commons.math3.linear.BlockRealMatrix#getData()"
    ],
    "org.apache.commons.math3.linear.RealMatrixFormat#RealMatrixFormat(String,String,String,String,String,String,NumberFormat)": ["org.apache.commons.math3.linear.RealMatrixFormat.<init>()"],
    "org.apache.commons.math3.ml.neuralnet.twod.util.UnifiedDistanceMatrix#averageDistances(NeuronSquareMesh2D)": [
        "org.apache.commons.math3.ml.neuralnet.twod.NeuronSquareMesh2D#getNetwork()",
        "org.apache.commons.math3.ml.neuralnet.twod.NeuronSquareMesh2D#getNumberOfRows()",
        "org.apache.commons.math3.ml.distance.EuclideanDistance#compute(double[],double[])",
        "org.apache.commons.math3.ml.neuralnet.twod.NeuronSquareMesh2D#getNeuron(int,int)",
        "org.apache.commons.math3.ml.distance.CanberraDistance#compute(double[],double[])",
        "org.apache.commons.math3.ml.neuralnet.Network#getNeighbours(Neuron)",
        "org.apache.commons.math3.ml.distance.ChebyshevDistance#compute(double[],double[])",
        "org.apache.commons.math3.ml.distance.ManhattanDistance#compute(double[],double[])",
        "org.apache.commons.math3.ml.distance.EarthMoversDistance#compute(double[],double[])",
        "org.apache.commons.math3.ml.neuralnet.Neuron#getFeatures()",
        "org.apache.commons.math3.ml.neuralnet.twod.NeuronSquareMesh2D#getNumberOfColumns()"
    ],
    "org.apache.commons.math3.fitting.leastsquares.LevenbergMarquardtOptimizer#optimize(LeastSquaresProblem)": [
        "org.apache.commons.math3.util.FastMath.min(double,double)",
        "org.apache.commons.math3.exception.util.LocalizedFormats.<staticinit>()",
        "org.apache.commons.math3.fitting.leastsquares.LeastSquaresAdapter#getConvergenceChecker()",
        "org.apache.commons.math3.fitting.leastsquares.OptimumImpl#getResiduals()",
        "org.apache.commons.math3.fitting.leastsquares.LeastSquaresFactory.LocalLeastSquaresProblem.UnweightedEvaluation#getJacobian()",
        "org.apache.commons.math3.fitting.leastsquares.LevenbergMarquardtOptimizer#determineLMParameter(double[],double,double[],InternalData,int,double[],double[],double[],double[],double)",
        "org.apache.commons.math3.fitting.leastsquares.LeastSquaresAdapter#evaluate(RealVector)",
        "org.apache.commons.math3.fitting.leastsquares.OptimumImpl#getJacobian()",
        "org.apache.commons.math3.fitting.leastsquares.LeastSquaresAdapter#getEvaluationCounter()",
        "org.apache.commons.math3.fitting.leastsquares.OptimumImpl#getPoint()",
        "org.apache.commons.math3.fitting.leastsquares.LevenbergMarquardtOptimizer#qTy(double[],InternalData)",
        "org.apache.commons.math3.fitting.leastsquares.LeastSquaresFactory.LocalLeastSquaresProblem#getStart()",
        "org.apache.commons.math3.fitting.leastsquares.LeastSquaresFactory.LocalLeastSquaresProblem.LazyUnweightedEvaluation#getResiduals()",
        "org.apache.commons.math3.fitting.leastsquares.LeastSquaresFactory.LocalLeastSquaresProblem.UnweightedEvaluation#getResiduals()",
        "org.apache.commons.math3.util.FastMath.min(int,int)",
        "org.apache.commons.math3.fitting.leastsquares.LeastSquaresAdapter#getStart()",
        "org.apache.commons.math3.fitting.leastsquares.LeastSquaresFactory.LocalLeastSquaresProblem.LazyUnweightedEvaluation#getJacobian()",
        "org.apache.commons.math3.fitting.leastsquares.LevenbergMarquardtOptimizer#qrDecomposition(RealMatrix,int)",
        "org.apache.commons.math3.fitting.leastsquares.OptimumImpl#getCost()",
        "org.apache.commons.math3.util.Incrementor#getCount()",
        "org.apache.commons.math3.fitting.leastsquares.DenseWeightedEvaluation#getPoint()",
        "org.apache.commons.math3.fitting.leastsquares.LeastSquaresFactory.countEvaluations(LeastSquaresProblem,Incrementor)$LeastSquaresAdapter$1#evaluate(RealVector)",
        "org.apache.commons.math3.fitting.leastsquares.LeastSquaresFactory.LocalLeastSquaresProblem.LazyUnweightedEvaluation#getPoint()",
        "org.apache.commons.math3.linear.OpenMapRealVector#toArray()",
        "org.apache.commons.math3.util.FastMath.max(double,double)",
        "org.apache.commons.math3.fitting.leastsquares.LeastSquaresAdapter#getObservationSize()",
        "org.apache.commons.math3.fitting.leastsquares.LeastSquaresFactory.LocalLeastSquaresProblem#getObservationSize()",
        "org.apache.commons.math3.fitting.leastsquares.AbstractEvaluation#getCost()",
        "org.apache.commons.math3.optim.AbstractOptimizationProblem#getEvaluationCounter()",
        "org.apache.commons.math3.util.Incrementor.wrap(Incrementor)$Incrementor$1#incrementCount()",
        "org.apache.commons.math3.linear.RealVector#toArray()",
        "org.apache.commons.math3.util.FastMath.abs(double)",
        "org.apache.commons.math3.util.FastMath.sqrt(double)",
        "org.apache.commons.math3.fitting.leastsquares.OptimumImpl#OptimumImpl(Evaluation,int,int)",
        "org.apache.commons.math3.linear.ArrayRealVector#ArrayRealVector(double[])",
        "org.apache.commons.math3.fitting.leastsquares.LevenbergMarquardtOptimizer.<staticinit>()",
        "org.apache.commons.math3.fitting.leastsquares.LeastSquaresFactory.LocalLeastSquaresProblem.UnweightedEvaluation#getPoint()",
        "org.apache.commons.math3.linear.RealVector.unmodifiableRealVector(RealVector)$RealVector$1#toArray()",
        "org.apache.commons.math3.fitting.leastsquares.DenseWeightedEvaluation#getJacobian()",
        "org.apache.commons.math3.fitting.leastsquares.LeastSquaresFactory.LocalLeastSquaresProblem#evaluate(RealVector)",
        "org.apache.commons.math3.optim.AbstractOptimizationProblem#getIterationCounter()",
        "org.apache.commons.math3.fitting.leastsquares.LeastSquaresFactory.LocalLeastSquaresProblem#getParameterSize()",
        "org.apache.commons.math3.fitting.leastsquares.DenseWeightedEvaluation#getResiduals()",
        "org.apache.commons.math3.util.Incrementor#incrementCount()",
        "org.apache.commons.math3.fitting.leastsquares.LeastSquaresAdapter#getParameterSize()",
        "org.apache.commons.math3.optim.AbstractOptimizationProblem#getConvergenceChecker()",
        "org.apache.commons.math3.fitting.leastsquares.LeastSquaresFactory.weightMatrix(LeastSquaresProblem,RealMatrix)$LeastSquaresAdapter$1#evaluate(RealVector)",
        "org.apache.commons.math3.linear.ArrayRealVector#toArray()",
        "org.apache.commons.math3.fitting.leastsquares.LeastSquaresAdapter#getIterationCounter()"
    ],
    "org.apache.commons.math3.ode.EquationsMapper#insertEquationData(double[],double[])": ["org.apache.commons.math3.exception.DimensionMismatchException#DimensionMismatchException(int,int)"],
    "org.apache.commons.math3.primes.Primes.isPrime(int)": [
        "org.apache.commons.math3.primes.SmallPrimes.<staticinit>()",
        "org.apache.commons.math3.primes.SmallPrimes.millerRabinPrimeTest(int)"
    ],
    "org.apache.commons.math3.util.MathArrays.checkEqualLength(int[],int[])": ["org.apache.commons.math3.util.MathArrays.checkEqualLength(int[],int[],boolean)"],
    "org.apache.commons.math3.optimization.fitting.GaussianFitter.ParameterGuesser#sortObservations(WeightedObservedPoint[])": ["org.apache.commons.math3.optimization.fitting.GaussianFitter.ParameterGuesser#sortObservations(WeightedObservedPoint[])$Comparator$1.<init>()"],
    "org.apache.commons.math3.random.GaussianRandomGenerator#nextNormalizedDouble()": [
        "org.apache.commons.math3.random.RandomAdaptor#nextGaussian()",
        "org.apache.commons.math3.random.SynchronizedRandomGenerator#nextGaussian()",
        "org.apache.commons.math3.random.RandomGeneratorFactory.createRandomGenerator(Random)$RandomGenerator$1#nextGaussian()",
        "org.apache.commons.math3.random.BitsStreamGenerator#nextGaussian()",
        "org.apache.commons.math3.random.AbstractRandomGenerator#nextGaussian()"
    ],
    "org.apache.commons.math3.analysis.solvers.LaguerreSolver#LaguerreSolver(double,double,double)": [
        "org.apache.commons.math3.analysis.solvers.AbstractPolynomialSolver#AbstractPolynomialSolver(double,double,double)",
        "org.apache.commons.math3.analysis.solvers.LaguerreSolver.<init>()"
    ],
    "org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D#normalize()": [
        "org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D#scalarMultiply(T extends RealFieldElement)",
        "org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D#getNorm()",
        "org.apache.commons.math3.exception.util.LocalizedFormats.<staticinit>()"
    ],
    "org.apache.commons.math3.analysis.solvers.BracketingNthOrderBrentSolver#doSolve()": [
        "org.apache.commons.math3.analysis.solvers.BaseAbstractUnivariateSolver#getMin()",
        "org.apache.commons.math3.analysis.solvers.BaseAbstractUnivariateSolver#getAbsoluteAccuracy()",
        "org.apache.commons.math3.analysis.solvers.BaseAbstractUnivariateSolver#computeObjectiveValue(double)",
        "org.apache.commons.math3.analysis.solvers.BracketingNthOrderBrentSolver.<staticinit>()",
        "org.apache.commons.math3.exception.MathInternalError#MathInternalError()",
        "org.apache.commons.math3.util.FastMath.max(double,double)",
        "org.apache.commons.math3.analysis.solvers.BaseAbstractUnivariateSolver#verifySequence(double,double,double)",
        "org.apache.commons.math3.analysis.solvers.BaseAbstractUnivariateSolver#getStartValue()",
        "org.apache.commons.math3.analysis.solvers.BaseAbstractUnivariateSolver#getRelativeAccuracy()",
        "org.apache.commons.math3.util.Precision.equals(double,double,int)",
        "org.apache.commons.math3.exception.NoBracketingException#NoBracketingException(double,double,double,double)",
        "org.apache.commons.math3.analysis.solvers.BaseAbstractUnivariateSolver#getFunctionValueAccuracy()",
        "org.apache.commons.math3.util.FastMath.abs(double)",
        "org.apache.commons.math3.analysis.solvers.AllowedSolution.<staticinit>()",
        "org.apache.commons.math3.analysis.solvers.BracketingNthOrderBrentSolver#guessX(double,double[],double[],int,int)",
        "org.apache.commons.math3.analysis.solvers.BaseAbstractUnivariateSolver#getMax()"
    ],
    "org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile#getResult()": [
        "org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile#minimum()",
        "org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile#maximum()"
    ],
    "org.apache.commons.math3.geometry.euclidean.threed.FieldRotation#FieldRotation(T extends RealFieldElement,T extends RealFieldElement,T extends RealFieldElement,T extends RealFieldElement,boolean)": ["org.apache.commons.math3.geometry.euclidean.threed.FieldRotation.<init>()"],
    "org.apache.commons.math3.linear.RRQRDecomposition.Solver#getInverse()": [
        "org.apache.commons.math3.linear.BlockFieldMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.BlockRealMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.MatrixUtils.createRealIdentityMatrix(int)",
        "org.apache.commons.math3.linear.Array2DRowRealMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.SparseFieldMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.OpenMapRealMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.DiagonalMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.Array2DRowFieldMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.RRQRDecomposition.Solver#solve(RealMatrix)"
    ],
    "org.apache.commons.math3.geometry.euclidean.oned.Vector1D#distance1(Vector<Euclidean1D>)": ["org.apache.commons.math3.util.FastMath.abs(double)"],
    "org.apache.commons.math3.util.ResizableDoubleArray#ResizableDoubleArray(ResizableDoubleArray)": [
        "org.apache.commons.math3.util.ResizableDoubleArray.copy(ResizableDoubleArray,ResizableDoubleArray)",
        "org.apache.commons.math3.util.MathUtils.checkNotNull(Object)",
        "org.apache.commons.math3.util.ResizableDoubleArray.<init>()"
    ],
    "org.apache.commons.math3.stat.correlation.Covariance#computeCovarianceMatrix(RealMatrix,boolean)": [
        "org.apache.commons.math3.linear.DiagonalMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.Array2DRowRealMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.BlockFieldMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.Array2DRowRealMatrix#setEntry(int,int,double)",
        "org.apache.commons.math3.stat.descriptive.moment.Variance#evaluate(double[])",
        "org.apache.commons.math3.linear.OpenMapRealMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.BlockRealMatrix#setEntry(int,int,double)",
        "org.apache.commons.math3.linear.OpenMapRealMatrix#setEntry(int,int,double)",
        "org.apache.commons.math3.stat.descriptive.moment.Variance#Variance(boolean)",
        "org.apache.commons.math3.stat.correlation.Covariance#covariance(double[],double[],boolean)",
        "org.apache.commons.math3.linear.BlockRealMatrix#BlockRealMatrix(int,int)",
        "org.apache.commons.math3.linear.Array2DRowFieldMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.SparseFieldMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.BlockRealMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.AbstractRealMatrix#getColumn(int)",
        "org.apache.commons.math3.linear.BlockRealMatrix#getColumn(int)",
        "org.apache.commons.math3.linear.DiagonalMatrix#setEntry(int,int,double)"
    ],
    "org.apache.commons.math3.linear.ArrayRealVector#append(ArrayRealVector)": ["org.apache.commons.math3.linear.ArrayRealVector#ArrayRealVector(ArrayRealVector,ArrayRealVector)"],
    "org.apache.commons.math3.random.RandomDataImpl#nextHypergeometric(int,int,int)": ["org.apache.commons.math3.random.RandomDataGenerator#nextHypergeometric(int,int,int)"],
    "org.apache.commons.math3.stat.inference.KolmogorovSmirnovTest#createExactH(double,int)": [
        "org.apache.commons.math3.fraction.BigFraction#compareTo(BigFraction)",
        "org.apache.commons.math3.fraction.BigFraction#BigFraction(double,double,int)",
        "org.apache.commons.math3.linear.Array2DRowFieldMatrix#Array2DRowFieldMatrix(Field<T extends FieldElement>,T extends FieldElement[][])",
        "org.apache.commons.math3.fraction.BigFraction#subtract(BigFraction)",
        "org.apache.commons.math3.fraction.BigFraction#multiply(int)",
        "org.apache.commons.math3.fraction.BigFraction#pow(int)",
        "org.apache.commons.math3.fraction.BigFraction#divide(int)",
        "org.apache.commons.math3.fraction.BigFraction#multiply(BigFraction)",
        "org.apache.commons.math3.fraction.BigFractionField.getInstance()",
        "org.apache.commons.math3.fraction.BigFraction.<staticinit>()",
        "org.apache.commons.math3.fraction.BigFraction#subtract(int)",
        "org.apache.commons.math3.fraction.BigFraction#add(BigFraction)"
    ],
    "org.apache.commons.math3.geometry.euclidean.twod.Line#getAngle()": [
        "org.apache.commons.math3.util.FastMath.<staticinit>()",
        "org.apache.commons.math3.util.MathUtils.normalizeAngle(double,double)"
    ],
    "org.apache.commons.math3.geometry.euclidean.threed.Line#toSpace(Vector<Euclidean1D>)": ["org.apache.commons.math3.geometry.euclidean.threed.Line#toSpace(Point<Euclidean1D>)"],
    "org.apache.commons.math3.distribution.ExponentialDistribution#ExponentialDistribution(RandomGenerator,double,double)": [
        "org.apache.commons.math3.distribution.ExponentialDistribution.<init>()",
        "org.apache.commons.math3.util.FastMath.log(double)",
        "org.apache.commons.math3.distribution.AbstractRealDistribution#AbstractRealDistribution(RandomGenerator)",
        "org.apache.commons.math3.exception.util.LocalizedFormats.<staticinit>()",
        "org.apache.commons.math3.distribution.ExponentialDistribution.<staticinit>()"
    ],
    "org.apache.commons.math3.linear.MatrixUtils.checkSubMatrixIndex(AnyMatrix,int[],int[])": [
        "org.apache.commons.math3.exception.NoDataException#NoDataException(Localizable)",
        "org.apache.commons.math3.exception.NullArgumentException#NullArgumentException()",
        "org.apache.commons.math3.linear.MatrixUtils.checkRowIndex(AnyMatrix,int)",
        "org.apache.commons.math3.exception.util.LocalizedFormats.<staticinit>()",
        "org.apache.commons.math3.linear.MatrixUtils.checkColumnIndex(AnyMatrix,int)"
    ],
    "org.apache.commons.math3.optimization.direct.AbstractSimplex#setPoints(PointValuePair[])": ["org.apache.commons.math3.exception.DimensionMismatchException#DimensionMismatchException(int,int)"],
    "org.apache.commons.math3.stat.descriptive.SummaryStatistics#setSumsqImpl(StorelessUnivariateStatistic)": ["org.apache.commons.math3.stat.descriptive.SummaryStatistics#checkEmpty()"],
    "org.apache.commons.math3.optimization.direct.SimplexOptimizer#SimplexOptimizer(double,double)": [
        "org.apache.commons.math3.optimization.SimpleValueChecker#SimpleValueChecker(double,double)",
        "org.apache.commons.math3.optimization.direct.SimplexOptimizer#SimplexOptimizer(ConvergenceChecker<PointValuePair>)"
    ],
    "org.apache.commons.math3.distribution.PoissonDistribution#cumulativeProbability(int)": ["org.apache.commons.math3.special.Gamma.regularizedGammaQ(double,double,double,int)"],
    "org.apache.commons.math3.ode.nonstiff.ThreeEighthesStepInterpolator#doCopy()": ["org.apache.commons.math3.ode.nonstiff.ThreeEighthesStepInterpolator#ThreeEighthesStepInterpolator(ThreeEighthesStepInterpolator)"],
    "org.apache.commons.math3.analysis.differentiation.SparseGradient#linearCombination(SparseGradient[],SparseGradient[])": [
        "org.apache.commons.math3.util.BigRealField#getZero()",
        "org.apache.commons.math3.analysis.differentiation.SparseGradient#getField()$Field$1#getZero()",
        "org.apache.commons.math3.util.Decimal64Field#getZero()",
        "org.apache.commons.math3.dfp.DfpField#getZero()",
        "org.apache.commons.math3.analysis.differentiation.SparseGradient#add(SparseGradient)",
        "org.apache.commons.math3.analysis.differentiation.SparseGradient#getField()",
        "org.apache.commons.math3.util.MathArrays.linearCombination(double[],double[])",
        "org.apache.commons.math3.analysis.differentiation.SparseGradient#multiply(SparseGradient)",
        "org.apache.commons.math3.analysis.differentiation.DerivativeStructure#getField()$Field$1#getZero()",
        "org.apache.commons.math3.fraction.FractionField#getZero()",
        "org.apache.commons.math3.complex.ComplexField#getZero()",
        "org.apache.commons.math3.analysis.differentiation.SparseGradient#getValue()",
        "org.apache.commons.math3.fraction.BigFractionField#getZero()"
    ],
    "org.apache.commons.math3.distribution.ExponentialDistribution#ExponentialDistribution(double,double)": [
        "org.apache.commons.math3.distribution.ExponentialDistribution#ExponentialDistribution(RandomGenerator,double,double)",
        "org.apache.commons.math3.random.Well19937c#Well19937c()",
        "org.apache.commons.math3.distribution.ExponentialDistribution.<staticinit>()"
    ],
    "org.apache.commons.math3.linear.ArrayFieldVector#ArrayFieldVector(ArrayFieldVector<T extends FieldElement>)": [
        "org.apache.commons.math3.linear.ArrayFieldVector#getField()",
        "org.apache.commons.math3.util.MathUtils.checkNotNull(Object)",
        "org.apache.commons.math3.linear.ArrayFieldVector.<init>()"
    ],
    "org.apache.commons.math3.stat.descriptive.summary.SumOfSquares#evaluate(double[],int,int)": ["org.apache.commons.math3.stat.descriptive.AbstractUnivariateStatistic#test(double[],int,int,boolean)"],
    "org.apache.commons.math3.distribution.TriangularDistribution#TriangularDistribution(double,double,double)": [
        "org.apache.commons.math3.random.Well19937c#Well19937c()",
        "org.apache.commons.math3.distribution.TriangularDistribution#TriangularDistribution(RandomGenerator,double,double,double)"
    ],
    "org.apache.commons.math3.analysis.solvers.MullerSolver#MullerSolver(double)": [
        "org.apache.commons.math3.analysis.solvers.MullerSolver.<init>()",
        "org.apache.commons.math3.analysis.solvers.AbstractUnivariateSolver#AbstractUnivariateSolver(double)"
    ],
    "org.apache.commons.math3.stat.descriptive.SynchronizedSummaryStatistics#toString()": ["org.apache.commons.math3.stat.descriptive.SummaryStatistics#toString()"],
    "org.apache.commons.math3.dfp.DfpDec#newInstance()": [
        "org.apache.commons.math3.dfp.DfpDec#DfpDec(DfpField)",
        "org.apache.commons.math3.dfp.Dfp#getField()"
    ],
    "org.apache.commons.math3.distribution.BetaDistribution.ChengBetaSampler.algorithmBB(RandomGenerator,double,double,double)": [
        "org.apache.commons.math3.random.SynchronizedRandomGenerator#nextDouble()",
        "org.apache.commons.math3.util.Precision.equals(double,double)",
        "org.apache.commons.math3.util.FastMath.log1p(double)",
        "org.apache.commons.math3.random.RandomAdaptor#nextDouble()",
        "org.apache.commons.math3.util.FastMath.sqrt(double)",
        "org.apache.commons.math3.util.FastMath.exp(double)",
        "org.apache.commons.math3.util.FastMath.min(double,double)",
        "org.apache.commons.math3.random.RandomGeneratorFactory.createRandomGenerator(Random)$RandomGenerator$1#nextDouble()",
        "org.apache.commons.math3.util.FastMath.log(double)",
        "org.apache.commons.math3.random.BitsStreamGenerator#nextDouble()"
    ],
    "org.apache.commons.math3.fitting.leastsquares.LeastSquaresFactory.LocalValueAndJacobianFunction#LocalValueAndJacobianFunction(MultivariateVectorFunction,MultivariateMatrixFunction)": ["org.apache.commons.math3.fitting.leastsquares.LeastSquaresFactory.LocalValueAndJacobianFunction.<init>()"],
    "org.apache.commons.math3.random.RandomDataImpl#nextPoisson(double)": ["org.apache.commons.math3.random.RandomDataGenerator#nextPoisson(double)"],
    "org.apache.commons.math3.geometry.spherical.oned.ArcsSet.SubArcsIterator#selectPending()": [
        "org.apache.commons.math3.geometry.spherical.oned.ArcsSet#isArcEnd(BSPTree<Sphere1D>)",
        "org.apache.commons.math3.exception.MathInternalError#MathInternalError()",
        "org.apache.commons.math3.util.MathUtils.<staticinit>()",
        "org.apache.commons.math3.geometry.spherical.oned.ArcsSet#isArcStart(BSPTree<Sphere1D>)",
        "org.apache.commons.math3.geometry.spherical.oned.ArcsSet#nextInternalNode(BSPTree<Sphere1D>)",
        "org.apache.commons.math3.geometry.spherical.oned.ArcsSet#previousInternalNode(BSPTree<Sphere1D>)",
        "org.apache.commons.math3.geometry.spherical.oned.ArcsSet#getAngle(BSPTree<Sphere1D>)"
    ],
    "org.apache.commons.math3.linear.AbstractFieldMatrix#getColumnVector(int)": [
        "org.apache.commons.math3.linear.AbstractFieldMatrix#getColumn(int)",
        "org.apache.commons.math3.linear.ArrayFieldVector#ArrayFieldVector(Field<T extends FieldElement>,T extends FieldElement[],boolean)",
        "org.apache.commons.math3.linear.BlockFieldMatrix#getColumn(int)"
    ],
    "org.apache.commons.math3.stat.descriptive.moment.Variance#copy()": [
        "org.apache.commons.math3.stat.descriptive.moment.Variance#Variance()",
        "org.apache.commons.math3.stat.descriptive.moment.Variance.copy(Variance,Variance)"
    ],
    "org.apache.commons.math3.stat.regression.GLSMultipleLinearRegression#newSampleData(double[],double[][],double[][])": [
        "org.apache.commons.math3.stat.regression.GLSMultipleLinearRegression#newCovarianceData(double[][])",
        "org.apache.commons.math3.stat.regression.AbstractMultipleLinearRegression#validateSampleData(double[][],double[])",
        "org.apache.commons.math3.stat.regression.AbstractMultipleLinearRegression#newYSampleData(double[])",
        "org.apache.commons.math3.stat.regression.AbstractMultipleLinearRegression#newXSampleData(double[][])",
        "org.apache.commons.math3.stat.regression.AbstractMultipleLinearRegression#validateCovarianceData(double[][],double[][])",
        "org.apache.commons.math3.stat.regression.OLSMultipleLinearRegression#newXSampleData(double[][])"
    ],
    "org.apache.commons.math3.analysis.solvers.BisectionSolver#doSolve()": [
        "org.apache.commons.math3.analysis.solvers.BaseAbstractUnivariateSolver#getAbsoluteAccuracy()",
        "org.apache.commons.math3.analysis.solvers.BaseAbstractUnivariateSolver#getMin()",
        "org.apache.commons.math3.analysis.solvers.BaseAbstractUnivariateSolver#computeObjectiveValue(double)",
        "org.apache.commons.math3.util.FastMath.abs(double)",
        "org.apache.commons.math3.analysis.solvers.UnivariateSolverUtils.midpoint(double,double)",
        "org.apache.commons.math3.analysis.solvers.BaseAbstractUnivariateSolver#getMax()",
        "org.apache.commons.math3.analysis.solvers.BaseAbstractUnivariateSolver#verifyInterval(double,double)"
    ],
    "org.apache.commons.math3.analysis.differentiation.SparseGradient#sinh()": [
        "org.apache.commons.math3.analysis.differentiation.SparseGradient#SparseGradient(double,double,Map<Integer, Double>)",
        "org.apache.commons.math3.util.FastMath.cosh(double)",
        "org.apache.commons.math3.util.FastMath.sinh(double)"
    ],
    "org.apache.commons.math3.linear.BlockFieldMatrix#setRowVector(int,FieldVector<T extends FieldElement>)": [
        "org.apache.commons.math3.linear.AbstractFieldMatrix#setRowVector(int,FieldVector<T extends FieldElement>)",
        "org.apache.commons.math3.linear.BlockFieldMatrix#setRow(int,T extends FieldElement[])",
        "org.apache.commons.math3.linear.ArrayFieldVector#getDataRef()"
    ],
    "org.apache.commons.math3.linear.SparseFieldMatrix#createMatrix(int,int)": [
        "org.apache.commons.math3.linear.SparseFieldMatrix#SparseFieldMatrix(Field<T extends FieldElement>,int,int)",
        "org.apache.commons.math3.linear.AbstractFieldMatrix#getField()"
    ],
    "org.apache.commons.math3.linear.RealVector.SparseEntryIterator#advance(Entry)": [
        "org.apache.commons.math3.linear.RealVector.Entry#getValue()",
        "org.apache.commons.math3.linear.RealVector.unmodifiableRealVector(RealVector).UnmodifiableEntry.UnmodifiableEntry#getValue()",
        "org.apache.commons.math3.linear.OpenMapRealVector.OpenMapEntry#getValue()",
        "org.apache.commons.math3.linear.OpenMapRealVector.OpenMapEntry#getIndex()",
        "org.apache.commons.math3.linear.RealVector.Entry#getIndex()",
        "org.apache.commons.math3.linear.RealVector.Entry#setIndex(int)"
    ],
    "org.apache.commons.math3.stat.regression.RegressionResults#RegressionResults()": ["org.apache.commons.math3.stat.regression.RegressionResults.<init>()"],
    "org.apache.commons.math3.analysis.FunctionUtils.toUnivariateDifferential(DifferentiableUnivariateFunction)$UnivariateDifferentiableFunction$1#value(DerivativeStructure)": [
        "org.apache.commons.math3.analysis.polynomials.PolynomialSplineFunction#value(double)",
        "org.apache.commons.math3.analysis.function.Tanh#value(double)",
        "org.apache.commons.math3.analysis.function.Power#derivative()",
        "org.apache.commons.math3.analysis.function.Exp#derivative()",
        "org.apache.commons.math3.analysis.function.HarmonicOscillator#derivative()",
        "org.apache.commons.math3.analysis.polynomials.PolynomialFunction#derivative()",
        "org.apache.commons.math3.analysis.function.HarmonicOscillator#value(double)",
        "org.apache.commons.math3.analysis.function.Logit#derivative()",
        "org.apache.commons.math3.analysis.polynomials.PolynomialSplineFunction#derivative()",
        "org.apache.commons.math3.analysis.FunctionUtils.fix1stArgument(BivariateFunction,double)$UnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.function.Asinh#value(double)",
        "org.apache.commons.math3.analysis.function.Inverse#derivative()",
        "org.apache.commons.math3.analysis.FunctionUtils.toDifferentiableUnivariateFunction(UnivariateDifferentiableFunction)$DifferentiableUnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.function.Cbrt#value(double)",
        "org.apache.commons.math3.analysis.function.Atan#derivative()",
        "org.apache.commons.math3.analysis.FunctionUtils.add(UnivariateFunction[]...)$UnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.function.Sin#value(double)",
        "org.apache.commons.math3.analysis.function.Expm1#derivative()",
        "org.apache.commons.math3.analysis.function.Sigmoid#derivative()",
        "org.apache.commons.math3.analysis.interpolation.UnivariatePeriodicInterpolator#interpolate(double[],double[])$UnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.function.Sqrt#value(double)",
        "org.apache.commons.math3.analysis.function.Sinc#value(double)",
        "org.apache.commons.math3.ode.events.EventState#evaluateStep(StepInterpolator)$UnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.integration.IterativeLegendreGaussIntegrator#stage(int)$UnivariateFunction$1#value(double)",
        "org.apache.commons.math3.optimization.general.NonLinearConjugateGradientOptimizer.LineSearchFunction#value(double)",
        "org.apache.commons.math3.analysis.function.Floor#value(double)",
        "org.apache.commons.math3.analysis.FunctionUtils.multiply(DifferentiableUnivariateFunction[]...)$DifferentiableUnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.FunctionUtils.combine(BivariateFunction,UnivariateFunction,UnivariateFunction)$UnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.FunctionUtils.add(DifferentiableUnivariateFunction[]...)$UnivariateFunction$1$UnivariateFunction$1#derivative()$UnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.FunctionUtils.add(DifferentiableUnivariateFunction[]...)$DifferentiableUnivariateFunction$1#derivative()",
        "org.apache.commons.math3.analysis.function.Log1p#derivative()",
        "org.apache.commons.math3.analysis.function.Tan#derivative()",
        "org.apache.commons.math3.analysis.function.Sinh#value(double)",
        "org.apache.commons.math3.analysis.function.Tan#value(double)",
        "org.apache.commons.math3.distribution.AbstractRealDistribution#inverseCumulativeProbability(double)$UnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.FunctionUtils.add(DifferentiableUnivariateFunction[]...)$DifferentiableUnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.function.Cos#derivative()",
        "org.apache.commons.math3.analysis.function.Atanh#derivative()",
        "org.apache.commons.math3.analysis.function.Ceil#value(double)",
        "org.apache.commons.math3.analysis.function.Atanh#value(double)",
        "org.apache.commons.math3.analysis.FunctionUtils.compose(DifferentiableUnivariateFunction[]...)$UnivariateFunction$1$UnivariateFunction$1#derivative()$UnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.FunctionUtils.toDifferentiableUnivariateFunction(UnivariateDifferentiableFunction)$DifferentiableUnivariateFunction$1#derivative()",
        "org.apache.commons.math3.analysis.function.Logit#value(double)",
        "org.apache.commons.math3.analysis.function.Log1p#value(double)",
        "org.apache.commons.math3.analysis.FunctionUtils.toUnivariateDifferential(DifferentiableUnivariateFunction)$UnivariateDifferentiableFunction$1#value(double)",
        "org.apache.commons.math3.analysis.FunctionUtils.toDifferentiableUnivariateFunction(UnivariateDifferentiableFunction)$UnivariateFunction$1$UnivariateFunction$1#derivative()$UnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.function.Log#derivative()",
        "org.apache.commons.math3.analysis.function.Logistic#derivative()",
        "org.apache.commons.math3.analysis.FunctionUtils.compose(UnivariateFunction[]...)$UnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.function.Asinh#derivative()",
        "org.apache.commons.math3.analysis.function.Cosh#value(double)",
        "org.apache.commons.math3.analysis.FunctionUtils.compose(DifferentiableUnivariateFunction[]...)$DifferentiableUnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.function.StepFunction#value(double)",
        "org.apache.commons.math3.analysis.function.Constant#derivative()",
        "org.apache.commons.math3.analysis.function.Acos#value(double)",
        "org.apache.commons.math3.analysis.function.Tanh#derivative()",
        "org.apache.commons.math3.analysis.function.Minus#derivative()",
        "org.apache.commons.math3.analysis.FunctionUtils.compose(DifferentiableUnivariateFunction[]...)$DifferentiableUnivariateFunction$1#derivative()",
        "org.apache.commons.math3.optim.nonlinear.scalar.LineSearch#search(double[],double[])$UnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.function.Sigmoid#value(double)",
        "org.apache.commons.math3.analysis.FunctionUtils.multiply(DifferentiableUnivariateFunction[]...)$DifferentiableUnivariateFunction$1#derivative()",
        "org.apache.commons.math3.analysis.function.Ulp#value(double)",
        "org.apache.commons.math3.analysis.FunctionUtils.multiply(DifferentiableUnivariateFunction[]...)$UnivariateFunction$1$UnivariateFunction$1#derivative()$UnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.function.Log10#derivative()",
        "org.apache.commons.math3.analysis.function.Gaussian#value(double)",
        "org.apache.commons.math3.analysis.function.Inverse#value(double)",
        "org.apache.commons.math3.analysis.function.Cbrt#derivative()",
        "org.apache.commons.math3.analysis.function.Asin#value(double)",
        "org.apache.commons.math3.analysis.FunctionUtils.multiply(UnivariateFunction[]...)$UnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.function.Atan#value(double)",
        "org.apache.commons.math3.analysis.function.Identity#derivative()",
        "org.apache.commons.math3.analysis.polynomials.PolynomialFunctionLagrangeForm#value(double)",
        "org.apache.commons.math3.analysis.function.Exp#value(double)",
        "org.apache.commons.math3.analysis.function.Sqrt#derivative()",
        "org.apache.commons.math3.special.BesselJ#value(double)",
        "org.apache.commons.math3.analysis.polynomials.PolynomialFunctionNewtonForm#value(double)",
        "org.apache.commons.math3.analysis.function.Cos#value(double)",
        "org.apache.commons.math3.analysis.function.Gaussian#derivative()",
        "org.apache.commons.math3.analysis.function.Sinc#derivative()",
        "org.apache.commons.math3.analysis.function.Log10#value(double)",
        "org.apache.commons.math3.analysis.function.Sinh#derivative()",
        "org.apache.commons.math3.analysis.function.Log#value(double)",
        "org.apache.commons.math3.analysis.differentiation.DerivativeStructure#getFreeParameters()",
        "org.apache.commons.math3.analysis.function.Minus#value(double)",
        "org.apache.commons.math3.analysis.differentiation.DerivativeStructure#DerivativeStructure(int,int,double[]...)",
        "org.apache.commons.math3.analysis.FunctionUtils.multiply(UnivariateDifferentiableFunction[]...)$UnivariateDifferentiableFunction$1#value(double)",
        "org.apache.commons.math3.analysis.function.Logistic#value(double)",
        "org.apache.commons.math3.analysis.function.Signum#value(double)",
        "org.apache.commons.math3.analysis.function.Constant#value(double)",
        "org.apache.commons.math3.analysis.FunctionUtils.add(UnivariateDifferentiableFunction[]...)$UnivariateDifferentiableFunction$1#value(double)",
        "org.apache.commons.math3.analysis.function.Sin#derivative()",
        "org.apache.commons.math3.analysis.function.Abs#value(double)",
        "org.apache.commons.math3.analysis.differentiation.FiniteDifferencesDifferentiator#differentiate(UnivariateFunction)$UnivariateDifferentiableFunction$1#value(double)",
        "org.apache.commons.math3.analysis.function.Identity#value(double)",
        "org.apache.commons.math3.analysis.function.Expm1#value(double)",
        "org.apache.commons.math3.analysis.function.Cosh#derivative()",
        "org.apache.commons.math3.analysis.FunctionUtils.fix2ndArgument(BivariateFunction,double)$UnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.differentiation.DerivativeStructure#getOrder()",
        "org.apache.commons.math3.analysis.function.Acosh#derivative()",
        "org.apache.commons.math3.analysis.polynomials.PolynomialFunction#value(double)",
        "org.apache.commons.math3.analysis.function.Acos#derivative()",
        "org.apache.commons.math3.analysis.function.Rint#value(double)",
        "org.apache.commons.math3.analysis.differentiation.DerivativeStructure#getPartialDerivative(int[]...)",
        "org.apache.commons.math3.optimization.direct.PowellOptimizer.LineSearch#search(double[],double[])$UnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.function.Acosh#value(double)",
        "org.apache.commons.math3.analysis.FunctionUtils.compose(UnivariateDifferentiableFunction[]...)$UnivariateDifferentiableFunction$1#value(double)",
        "org.apache.commons.math3.analysis.function.Asin#derivative()",
        "org.apache.commons.math3.analysis.function.Power#value(double)",
        "org.apache.commons.math3.analysis.differentiation.DerivativeStructure#getValue()"
    ],
    "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.AbstractSimplex#AbstractSimplex(int)": ["org.apache.commons.math3.optim.nonlinear.scalar.noderiv.AbstractSimplex#AbstractSimplex(int,double)"],
    "org.apache.commons.math3.analysis.interpolation.InterpolatingMicrosphere#value(double[],double[][],double[],double,double)": [
        "org.apache.commons.math3.util.FastMath.pow(double,double)",
        "org.apache.commons.math3.util.MathArrays.safeNorm(double[])",
        "org.apache.commons.math3.analysis.interpolation.InterpolatingMicrosphere#interpolate()",
        "org.apache.commons.math3.util.FastMath.abs(double)",
        "org.apache.commons.math3.analysis.interpolation.InterpolatingMicrosphere#clear()",
        "org.apache.commons.math3.util.MathArrays.ebeSubtract(double[],double[])",
        "org.apache.commons.math3.analysis.interpolation.InterpolatingMicrosphere#illuminate(double[],double,double)"
    ],
    "org.apache.commons.math3.geometry.spherical.twod.Circle#copySelf()": ["org.apache.commons.math3.geometry.spherical.twod.Circle#Circle(Circle)"],
    "org.apache.commons.math3.stat.descriptive.StatisticalSummaryValues#equals(Object)": [
        "org.apache.commons.math3.stat.descriptive.StatisticalSummaryValues#getVariance()",
        "org.apache.commons.math3.stat.descriptive.StatisticalSummaryValues#getMax()",
        "org.apache.commons.math3.util.Precision.equalsIncludingNaN(float,float)",
        "org.apache.commons.math3.stat.descriptive.StatisticalSummaryValues#getMean()",
        "org.apache.commons.math3.stat.descriptive.StatisticalSummaryValues#getSum()",
        "org.apache.commons.math3.stat.descriptive.StatisticalSummaryValues#getMin()",
        "org.apache.commons.math3.stat.descriptive.StatisticalSummaryValues#getN()",
        "org.apache.commons.math3.util.Precision.equalsIncludingNaN(double,double)"
    ],
    "org.apache.commons.math3.util.CombinatoricsUtils.combinationsIterator(int,int)": [
        "org.apache.commons.math3.util.Combinations#iterator()",
        "org.apache.commons.math3.util.Combinations#Combinations(int,int)"
    ],
    "org.apache.commons.math3.complex.Quaternion#getScalarPart()": ["org.apache.commons.math3.complex.Quaternion#getQ0()"],
    "org.apache.commons.math3.linear.AbstractRealMatrix#toString()": [
        "org.apache.commons.math3.linear.RealMatrixFormat#format(RealMatrix)",
        "org.apache.commons.math3.linear.AbstractRealMatrix.<staticinit>()"
    ],
    "org.apache.commons.math3.ode.EquationsMapper#EquationsMapper(int,int)": ["org.apache.commons.math3.ode.EquationsMapper.<init>()"],
    "org.apache.commons.math3.distribution.LogNormalDistribution#getNumericalVariance()": [
        "org.apache.commons.math3.util.FastMath.expm1(double)",
        "org.apache.commons.math3.util.FastMath.exp(double)"
    ],
    "org.apache.commons.math3.geometry.spherical.oned.ArcsSet#nextInternalNode(BSPTree<Sphere1D>)": [
        "org.apache.commons.math3.geometry.spherical.oned.ArcsSet#leafAfter(BSPTree<Sphere1D>)",
        "org.apache.commons.math3.geometry.spherical.oned.ArcsSet#isAfterParent(BSPTree<Sphere1D>)",
        "org.apache.commons.math3.geometry.partitioning.BSPTree#getParent()",
        "org.apache.commons.math3.geometry.partitioning.BSPTree#getCut()",
        "org.apache.commons.math3.geometry.spherical.oned.ArcsSet#childAfter(BSPTree<Sphere1D>)"
    ],
    "org.apache.commons.math3.optim.univariate.UnivariateOptimizer#parseOptimizationData(OptimizationData[]...)": [
        "org.apache.commons.math3.optim.BaseOptimizer#parseOptimizationData(OptimizationData[]...)",
        "org.apache.commons.math3.optim.univariate.UnivariateObjectiveFunction#getObjectiveFunction()",
        "org.apache.commons.math3.optim.univariate.SearchInterval#getMax()",
        "org.apache.commons.math3.optim.univariate.SearchInterval#getStartValue()",
        "org.apache.commons.math3.optim.univariate.SearchInterval#getMin()"
    ],
    "org.apache.commons.math3.linear.MatrixUtils.<staticinit>()": [
        "org.apache.commons.math3.linear.RealMatrixFormat.getInstance()",
        "org.apache.commons.math3.linear.RealMatrixFormat#RealMatrixFormat(String,String,String,String,String,String)"
    ],
    "org.apache.commons.math3.random.RandomAdaptor#setSeed(long)": [
        "org.apache.commons.math3.random.RandomGeneratorFactory.createRandomGenerator(Random)$RandomGenerator$1#setSeed(long)",
        "org.apache.commons.math3.random.AbstractWell#setSeed(long)",
        "org.apache.commons.math3.random.RandomAdaptor#setSeed(long)",
        "org.apache.commons.math3.random.SynchronizedRandomGenerator#setSeed(long)",
        "org.apache.commons.math3.random.MersenneTwister#setSeed(long)",
        "org.apache.commons.math3.random.ISAACRandom#setSeed(long)"
    ],
    "org.apache.commons.math3.optimization.direct.MultivariateFunctionMappingAdapter#unboundedToBounded(double[])": [
        "org.apache.commons.math3.optimization.direct.MultivariateFunctionMappingAdapter.LowerUpperBoundMapper#unboundedToBounded(double)",
        "org.apache.commons.math3.optimization.direct.MultivariateFunctionMappingAdapter.UpperBoundMapper#unboundedToBounded(double)",
        "org.apache.commons.math3.optimization.direct.MultivariateFunctionMappingAdapter.LowerBoundMapper#unboundedToBounded(double)",
        "org.apache.commons.math3.optimization.direct.MultivariateFunctionMappingAdapter.NoBoundsMapper#unboundedToBounded(double)"
    ],
    "org.apache.commons.math3.random.RandomAdaptor#RandomAdaptor(RandomGenerator)": ["org.apache.commons.math3.random.RandomAdaptor.<init>()"],
    "org.apache.commons.math3.linear.AbstractFieldMatrix#walkInOptimizedOrder(FieldMatrixChangingVisitor<T extends FieldElement>)": [
        "org.apache.commons.math3.linear.Array2DRowFieldMatrix#walkInRowOrder(FieldMatrixChangingVisitor<T extends FieldElement>)",
        "org.apache.commons.math3.linear.AbstractFieldMatrix#walkInRowOrder(FieldMatrixChangingVisitor<T extends FieldElement>)",
        "org.apache.commons.math3.linear.BlockFieldMatrix#walkInRowOrder(FieldMatrixChangingVisitor<T extends FieldElement>)"
    ],
    "org.apache.commons.math3.stat.correlation.PearsonsCorrelation#checkSufficientData(RealMatrix)": [
        "org.apache.commons.math3.linear.DiagonalMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.Array2DRowRealMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.BlockFieldMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.SparseFieldMatrix#getRowDimension()",
        "org.apache.commons.math3.exception.util.LocalizedFormats.<staticinit>()",
        "org.apache.commons.math3.linear.OpenMapRealMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.OpenMapRealMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.DiagonalMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.Array2DRowFieldMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.SparseFieldMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.BlockFieldMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.BlockRealMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.Array2DRowRealMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.Array2DRowFieldMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.BlockRealMatrix#getColumnDimension()"
    ],
    "org.apache.commons.math3.stat.descriptive.SynchronizedMultivariateSummaryStatistics#getGeometricMean()": ["org.apache.commons.math3.stat.descriptive.MultivariateSummaryStatistics#getGeometricMean()"],
    "org.apache.commons.math3.userguide.sofm.ChineseRingsClassifier#createIterable()$Iterator$1$Iterator$1#iterator()$Iterator$1.<init>()": ["org.apache.commons.math3.userguide.sofm.ChineseRings#getPoints()"],
    "org.apache.commons.math3.ml.neuralnet.twod.util.QuantizationError#computeImage(NeuronSquareMesh2D,Iterable<double[]>)": [
        "org.apache.commons.math3.ml.distance.EuclideanDistance#compute(double[],double[])",
        "org.apache.commons.math3.ml.neuralnet.MapUtils.findBest(double[],Iterable<Neuron>,DistanceMeasure)",
        "org.apache.commons.math3.ml.distance.CanberraDistance#compute(double[],double[])",
        "org.apache.commons.math3.ml.distance.ChebyshevDistance#compute(double[],double[])",
        "org.apache.commons.math3.ml.neuralnet.twod.util.LocationFinder#getLocation(Neuron)",
        "org.apache.commons.math3.ml.neuralnet.Neuron#getFeatures()",
        "org.apache.commons.math3.ml.neuralnet.twod.NeuronSquareMesh2D#getNumberOfRows()",
        "org.apache.commons.math3.ml.neuralnet.twod.util.LocationFinder.Location#getRow()",
        "org.apache.commons.math3.ml.distance.ManhattanDistance#compute(double[],double[])",
        "org.apache.commons.math3.ml.neuralnet.twod.util.LocationFinder.Location#getColumn()",
        "org.apache.commons.math3.ml.neuralnet.twod.util.LocationFinder#LocationFinder(NeuronSquareMesh2D)",
        "org.apache.commons.math3.ml.distance.EarthMoversDistance#compute(double[],double[])",
        "org.apache.commons.math3.ml.neuralnet.twod.NeuronSquareMesh2D#getNumberOfColumns()"
    ],
    "org.apache.commons.math3.geometry.euclidean.twod.Line#toSubSpace(Vector<Euclidean2D>)": ["org.apache.commons.math3.geometry.euclidean.twod.Line#toSubSpace(Point<Euclidean2D>)"],
    "org.apache.commons.math3.userguide.RealDistributionComparison.createComponent(String,int,int,String[],RealDistribution[]...)": [
        "org.apache.commons.math3.userguide.RealDistributionComparison.addPDFSeries(Chart,RealDistribution,String,int,int)",
        "org.apache.commons.math3.userguide.RealDistributionComparison.createChart(String,int,int,LegendPosition)",
        "org.apache.commons.math3.userguide.RealDistributionComparison.addCDFSeries(Chart,RealDistribution,String,int,int)"
    ],
    "org.apache.commons.math3.linear.RealVectorFormat#RealVectorFormat(String,String,String,NumberFormat)": ["org.apache.commons.math3.linear.RealVectorFormat.<init>()"],
    "org.apache.commons.math3.geometry.partitioning.AbstractRegion#AbstractRegion(double)": [
        "org.apache.commons.math3.geometry.partitioning.AbstractRegion.<init>()",
        "org.apache.commons.math3.geometry.partitioning.BSPTree#BSPTree(Object)"
    ],
    "org.apache.commons.math3.analysis.integration.RombergIntegrator#RombergIntegrator(double,double,int,int)": [
        "org.apache.commons.math3.analysis.integration.RombergIntegrator.<init>()",
        "org.apache.commons.math3.analysis.integration.RombergIntegrator.<staticinit>()",
        "org.apache.commons.math3.analysis.integration.BaseAbstractUnivariateIntegrator#BaseAbstractUnivariateIntegrator(double,double,int,int)"
    ],
    "org.apache.commons.math3.stat.Frequency#getCumPct(char)": ["org.apache.commons.math3.stat.Frequency#getCumPct(long)"],
    "org.apache.commons.math3.ode.JacobianMatrices.MainStateJacobianWrapper#MainStateJacobianWrapper(FirstOrderDifferentialEquations,double[])": [
        "org.apache.commons.math3.ode.JacobianMatrices.MainStateJacobianWrapper#getDimension()",
        "org.apache.commons.math3.exception.DimensionMismatchException#DimensionMismatchException(int,int)",
        "org.apache.commons.math3.ode.JacobianMatrices.MainStateJacobianWrapper.<init>()",
        "org.apache.commons.math3.ode.MultistepIntegrator#start(double,double[],double)$FirstOrderDifferentialEquations$1#getDimension()",
        "org.apache.commons.math3.ode.FirstOrderConverter#getDimension()"
    ],
    "org.apache.commons.math3.userguide.filter.CannonballExample.cannonballTest(Chart)": [
        "org.apache.commons.math3.linear.MatrixUtils.createRealMatrix(int,int)",
        "org.apache.commons.math3.filter.KalmanFilter#correct(double[])",
        "org.apache.commons.math3.filter.KalmanFilter#KalmanFilter(ProcessModel,MeasurementModel)",
        "org.apache.commons.math3.userguide.filter.CannonballExample.Cannonball#Cannonball(double,double,double,double,int)",
        "org.apache.commons.math3.userguide.filter.CannonballExample.Cannonball#getMeasuredX()",
        "org.apache.commons.math3.linear.MatrixUtils.createRealVector(double[])",
        "org.apache.commons.math3.userguide.filter.CannonballExample.Cannonball#getMeasuredY()",
        "org.apache.commons.math3.filter.KalmanFilter#predict(RealVector)",
        "org.apache.commons.math3.filter.DefaultMeasurementModel#DefaultMeasurementModel(RealMatrix,RealMatrix)",
        "org.apache.commons.math3.userguide.filter.CannonballExample.Cannonball#step()",
        "org.apache.commons.math3.userguide.filter.CannonballExample.Cannonball#getYVelocity()",
        "org.apache.commons.math3.filter.DefaultProcessModel#DefaultProcessModel(RealMatrix,RealMatrix,RealMatrix,RealVector,RealMatrix)",
        "org.apache.commons.math3.userguide.filter.CannonballExample.Cannonball#getY()",
        "org.apache.commons.math3.userguide.filter.CannonballExample.Cannonball#getX()",
        "org.apache.commons.math3.userguide.filter.CannonballExample.Cannonball#getXVelocity()",
        "org.apache.commons.math3.linear.MatrixUtils.createRealMatrix(double[][])",
        "org.apache.commons.math3.filter.KalmanFilter#getStateEstimation()"
    ],
    "org.apache.commons.math3.optimization.linear.SimplexTableau#getHeight()": [
        "org.apache.commons.math3.linear.BlockFieldMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.BlockRealMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.Array2DRowRealMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.SparseFieldMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.OpenMapRealMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.DiagonalMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.Array2DRowFieldMatrix#getRowDimension()"
    ],
    "org.apache.commons.math3.distribution.LogisticDistribution#getNumericalVariance()": ["org.apache.commons.math3.util.MathUtils.<staticinit>()"],
    "org.apache.commons.math3.geometry.partitioning.InsideFinder#recurseSides(BSPTree<S extends Space>,SubHyperplane<S extends Space>)": [
        "org.apache.commons.math3.geometry.partitioning.InsideFinder#recurseSides(BSPTree<S extends Space>,SubHyperplane<S extends Space>)",
        "org.apache.commons.math3.geometry.partitioning.SubHyperplane.SplitSubHyperplane#getSide()",
        "org.apache.commons.math3.geometry.partitioning.BSPTree#getPlus()",
        "org.apache.commons.math3.geometry.partitioning.BSPTree#getCut()",
        "org.apache.commons.math3.geometry.partitioning.Side.<staticinit>()",
        "org.apache.commons.math3.geometry.partitioning.SubHyperplane.SplitSubHyperplane#getMinus()",
        "org.apache.commons.math3.geometry.partitioning.SubHyperplane.SplitSubHyperplane#getPlus()",
        "org.apache.commons.math3.geometry.partitioning.BSPTree#getMinus()",
        "org.apache.commons.math3.geometry.partitioning.AbstractRegion#isEmpty(BSPTree<S extends Space>)",
        "org.apache.commons.math3.geometry.partitioning.BSPTree#getAttribute()",
        "org.apache.commons.math3.geometry.partitioning.AbstractSubHyperplane#getHyperplane()"
    ],
    "org.apache.commons.math3.geometry.euclidean.threed.Vector3D#Vector3D(double[])": [
        "org.apache.commons.math3.exception.DimensionMismatchException#DimensionMismatchException(int,int)",
        "org.apache.commons.math3.geometry.euclidean.threed.Vector3D.<init>()"
    ],
    "org.apache.commons.math3.linear.RealVector#walkInOptimizedOrder(RealVectorChangingVisitor,int,int)": [
        "org.apache.commons.math3.linear.RealVector#walkInDefaultOrder(RealVectorChangingVisitor,int,int)",
        "org.apache.commons.math3.linear.ArrayRealVector#walkInDefaultOrder(RealVectorChangingVisitor,int,int)"
    ],
    "org.apache.commons.math3.optimization.direct.CMAESOptimizer#updateEvolutionPaths(RealMatrix,RealMatrix)": [
        "org.apache.commons.math3.linear.AbstractRealMatrix#subtract(RealMatrix)",
        "org.apache.commons.math3.linear.AbstractRealMatrix#getFrobeniusNorm()",
        "org.apache.commons.math3.linear.BlockRealMatrix#scalarMultiply(double)",
        "org.apache.commons.math3.linear.OpenMapRealMatrix#multiply(RealMatrix)",
        "org.apache.commons.math3.linear.BlockRealMatrix#getFrobeniusNorm()",
        "org.apache.commons.math3.util.FastMath.pow(double,int)",
        "org.apache.commons.math3.linear.BlockRealMatrix#subtract(RealMatrix)",
        "org.apache.commons.math3.linear.OpenMapRealMatrix#subtract(RealMatrix)",
        "org.apache.commons.math3.linear.AbstractRealMatrix#multiply(RealMatrix)",
        "org.apache.commons.math3.util.FastMath.sqrt(double)",
        "org.apache.commons.math3.linear.AbstractRealMatrix#scalarMultiply(double)",
        "org.apache.commons.math3.linear.BlockRealMatrix#add(RealMatrix)",
        "org.apache.commons.math3.linear.AbstractRealMatrix#add(RealMatrix)",
        "org.apache.commons.math3.linear.DiagonalMatrix#multiply(RealMatrix)",
        "org.apache.commons.math3.linear.BlockRealMatrix#multiply(RealMatrix)"
    ],
    "org.apache.commons.math3.complex.ComplexUtils.convertToComplex(double[])": ["org.apache.commons.math3.complex.Complex#Complex(double,double)"],
    "org.apache.commons.math3.genetics.ListPopulation#setChromosomes(List<Chromosome>)": [
        "org.apache.commons.math3.exception.NullArgumentException#NullArgumentException()",
        "org.apache.commons.math3.exception.util.LocalizedFormats.<staticinit>()"
    ],
    "org.apache.commons.math3.stat.descriptive.SynchronizedMultivariateSummaryStatistics#getMinImpl()": ["org.apache.commons.math3.stat.descriptive.MultivariateSummaryStatistics#getMinImpl()"],
    "org.apache.commons.math3.optimization.PointVectorValuePair.DataTransferObject#readResolve()": ["org.apache.commons.math3.optimization.PointVectorValuePair#PointVectorValuePair(double[],double[],boolean)"],
    "org.apache.commons.math3.ode.ParameterJacobianWrapper#ParameterJacobianWrapper(FirstOrderDifferentialEquations,ParameterizedODE,ParameterConfiguration[])": [
        "org.apache.commons.math3.ode.ParameterConfiguration#getParameterName()",
        "org.apache.commons.math3.ode.ParameterConfiguration#getHP()",
        "org.apache.commons.math3.ode.AbstractParameterizable#isSupported(String)",
        "org.apache.commons.math3.ode.ParameterJacobianWrapper.<init>()",
        "org.apache.commons.math3.ode.ParameterizedWrapper#isSupported(String)",
        "org.apache.commons.math3.ode.ParameterJacobianWrapper#isSupported(String)"
    ],
    "org.apache.commons.math3.geometry.euclidean.twod.SubLine#intersection(SubLine,boolean)": [
        "org.apache.commons.math3.geometry.partitioning.AbstractRegion#checkPoint(Point<S extends Space>)",
        "org.apache.commons.math3.geometry.euclidean.twod.Line#intersection(Line)",
        "org.apache.commons.math3.geometry.partitioning.AbstractSubHyperplane#getHyperplane()",
        "org.apache.commons.math3.geometry.partitioning.AbstractSubHyperplane#getRemainingRegion()",
        "org.apache.commons.math3.geometry.partitioning.Region.Location.<staticinit>()",
        "org.apache.commons.math3.geometry.euclidean.twod.Line#toSubSpace(Point<Euclidean2D>)"
    ],
    "org.apache.commons.math3.stat.descriptive.AbstractStorelessUnivariateStatistic#evaluate(double[])": [
        "org.apache.commons.math3.stat.descriptive.moment.Skewness#evaluate(double[],int,int)",
        "org.apache.commons.math3.stat.descriptive.moment.Variance#evaluate(double[],int,int)",
        "org.apache.commons.math3.exception.util.LocalizedFormats.<staticinit>()",
        "org.apache.commons.math3.stat.descriptive.moment.GeometricMean#evaluate(double[],int,int)",
        "org.apache.commons.math3.stat.descriptive.summary.SumOfLogs#evaluate(double[],int,int)",
        "org.apache.commons.math3.stat.descriptive.moment.StandardDeviation#evaluate(double[],int,int)",
        "org.apache.commons.math3.stat.descriptive.summary.Sum#evaluate(double[],int,int)",
        "org.apache.commons.math3.stat.descriptive.rank.Min#evaluate(double[],int,int)",
        "org.apache.commons.math3.stat.descriptive.rank.Max#evaluate(double[],int,int)",
        "org.apache.commons.math3.stat.descriptive.summary.SumOfSquares#evaluate(double[],int,int)",
        "org.apache.commons.math3.stat.descriptive.moment.Mean#evaluate(double[],int,int)",
        "org.apache.commons.math3.stat.descriptive.summary.Product#evaluate(double[],int,int)",
        "org.apache.commons.math3.stat.descriptive.moment.Kurtosis#evaluate(double[],int,int)",
        "org.apache.commons.math3.stat.descriptive.AbstractStorelessUnivariateStatistic#evaluate(double[],int,int)"
    ],
    "org.apache.commons.math3.linear.AbstractRealMatrix#walkInRowOrder(RealMatrixPreservingVisitor)": [
        "org.apache.commons.math3.linear.DiagonalMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.Array2DRowRealMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.DefaultRealMatrixPreservingVisitor#visit(int,int,double)",
        "org.apache.commons.math3.linear.SingularValueDecomposition#getCovariance(double)$DefaultRealMatrixPreservingVisitor$1#visit(int,int,double)",
        "org.apache.commons.math3.linear.DiagonalMatrix#getEntry(int,int)",
        "org.apache.commons.math3.linear.OpenMapRealMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.DiagonalMatrix#getRowDimension()",
        "org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator.Corrector#start(int,int,int,int,int,int)",
        "org.apache.commons.math3.linear.BlockRealMatrix#getEntry(int,int)",
        "org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator.Corrector#visit(int,int,double)",
        "org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator.Corrector#end()",
        "org.apache.commons.math3.linear.BlockRealMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.AbstractRealMatrix#getNorm()$RealMatrixPreservingVisitor$1#start(int,int,int,int,int,int)",
        "org.apache.commons.math3.linear.AbstractRealMatrix#transpose()$DefaultRealMatrixPreservingVisitor$1#visit(int,int,double)",
        "org.apache.commons.math3.linear.DefaultRealMatrixPreservingVisitor#start(int,int,int,int,int,int)",
        "org.apache.commons.math3.linear.AbstractRealMatrix#copySubMatrix(int,int,int,int,double[][])$DefaultRealMatrixPreservingVisitor$1#start(int,int,int,int,int,int)",
        "org.apache.commons.math3.linear.AbstractRealMatrix#getNorm()$RealMatrixPreservingVisitor$1#end()",
        "org.apache.commons.math3.linear.AbstractRealMatrix#getFrobeniusNorm()$RealMatrixPreservingVisitor$1#end()",
        "org.apache.commons.math3.linear.AbstractRealMatrix#getFrobeniusNorm()$RealMatrixPreservingVisitor$1#visit(int,int,double)",
        "org.apache.commons.math3.linear.OpenMapRealMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.DefaultRealMatrixPreservingVisitor#end()",
        "org.apache.commons.math3.linear.AbstractRealMatrix#getFrobeniusNorm()$RealMatrixPreservingVisitor$1#start(int,int,int,int,int,int)",
        "org.apache.commons.math3.linear.OpenMapRealMatrix#getEntry(int,int)",
        "org.apache.commons.math3.linear.AbstractRealMatrix#getNorm()$RealMatrixPreservingVisitor$1#visit(int,int,double)",
        "org.apache.commons.math3.linear.AbstractRealMatrix#copySubMatrix(int,int,int,int,double[][])$DefaultRealMatrixPreservingVisitor$1#visit(int,int,double)",
        "org.apache.commons.math3.linear.Array2DRowRealMatrix#getEntry(int,int)",
        "org.apache.commons.math3.linear.Array2DRowRealMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.BlockRealMatrix#getColumnDimension()"
    ],
    "org.apache.commons.math3.distribution.LevyDistribution#LevyDistribution(double,double)": [
        "org.apache.commons.math3.distribution.LevyDistribution#LevyDistribution(RandomGenerator,double,double)",
        "org.apache.commons.math3.random.Well19937c#Well19937c()"
    ],
    "org.apache.commons.math3.stat.descriptive.SynchronizedSummaryStatistics#setMaxImpl(StorelessUnivariateStatistic)": ["org.apache.commons.math3.stat.descriptive.SummaryStatistics#setMaxImpl(StorelessUnivariateStatistic)"],
    "org.apache.commons.math3.analysis.differentiation.DerivativeStructure#linearCombination(double[],DerivativeStructure[])": [
        "org.apache.commons.math3.analysis.differentiation.DerivativeStructure#getField()",
        "org.apache.commons.math3.analysis.differentiation.DerivativeStructure#add(DerivativeStructure)",
        "org.apache.commons.math3.util.BigRealField#getZero()",
        "org.apache.commons.math3.analysis.differentiation.SparseGradient#getField()$Field$1#getZero()",
        "org.apache.commons.math3.util.Decimal64Field#getZero()",
        "org.apache.commons.math3.dfp.DfpField#getZero()",
        "org.apache.commons.math3.analysis.differentiation.DerivativeStructure#getFreeParameters()",
        "org.apache.commons.math3.analysis.differentiation.DerivativeStructure#getAllDerivatives()",
        "org.apache.commons.math3.util.MathArrays.linearCombination(double[],double[])",
        "org.apache.commons.math3.analysis.differentiation.DerivativeStructure#getValue()",
        "org.apache.commons.math3.analysis.differentiation.DerivativeStructure#getField()$Field$1#getZero()",
        "org.apache.commons.math3.analysis.differentiation.DerivativeStructure#DerivativeStructure(int,int,double[]...)",
        "org.apache.commons.math3.fraction.FractionField#getZero()",
        "org.apache.commons.math3.analysis.differentiation.DerivativeStructure#getOrder()",
        "org.apache.commons.math3.analysis.differentiation.DerivativeStructure#multiply(double)",
        "org.apache.commons.math3.complex.ComplexField#getZero()",
        "org.apache.commons.math3.fraction.BigFractionField#getZero()"
    ],
    "org.apache.commons.math3.analysis.differentiation.DSCompiler#add(double[],int,double[],int,double[],int)": ["org.apache.commons.math3.analysis.differentiation.DSCompiler#getSize()"],
    "org.apache.commons.math3.analysis.function.Sqrt#value(DerivativeStructure)": ["org.apache.commons.math3.analysis.differentiation.DerivativeStructure#sqrt()"],
    "org.apache.commons.math3.optimization.general.AbstractDifferentiableOptimizer#optimizeInternal(int,MultivariateDifferentiableFunction,GoalType,double[])": ["org.apache.commons.math3.optimization.InitialGuess#InitialGuess(double[])"],
    "org.apache.commons.math3.stat.descriptive.SynchronizedMultivariateSummaryStatistics#hashCode()": ["org.apache.commons.math3.stat.descriptive.MultivariateSummaryStatistics#hashCode()"],
    "org.apache.commons.math3.util.Precision.roundUnscaled(double,double,int)": [
        "org.apache.commons.math3.util.FastMath.nextAfter(double,double)",
        "org.apache.commons.math3.util.FastMath.ceil(double)",
        "org.apache.commons.math3.exception.MathArithmeticException#MathArithmeticException()",
        "org.apache.commons.math3.exception.util.LocalizedFormats.<staticinit>()",
        "org.apache.commons.math3.util.FastMath.floor(double)"
    ],
    "org.apache.commons.math3.fitting.GaussianCurveFitter#getProblem(Collection<WeightedObservedPoint>)": [
        "org.apache.commons.math3.fitting.leastsquares.LeastSquaresBuilder#maxIterations(int)",
        "org.apache.commons.math3.fitting.GaussianCurveFitter.ParameterGuesser#ParameterGuesser(Collection<WeightedObservedPoint>)",
        "org.apache.commons.math3.fitting.leastsquares.LeastSquaresBuilder.<init>()",
        "org.apache.commons.math3.fitting.GaussianCurveFitter.<staticinit>()",
        "org.apache.commons.math3.fitting.leastsquares.LeastSquaresBuilder#target(double[])",
        "org.apache.commons.math3.fitting.leastsquares.LeastSquaresBuilder#model(MultivariateVectorFunction,MultivariateMatrixFunction)",
        "org.apache.commons.math3.fitting.WeightedObservedPoint#getWeight()",
        "org.apache.commons.math3.fitting.AbstractCurveFitter.TheoreticalValuesFunction#getModelFunctionJacobian()",
        "org.apache.commons.math3.fitting.WeightedObservedPoint#getY()",
        "org.apache.commons.math3.fitting.AbstractCurveFitter.TheoreticalValuesFunction#getModelFunction()",
        "org.apache.commons.math3.fitting.leastsquares.LeastSquaresBuilder#build()",
        "org.apache.commons.math3.fitting.leastsquares.LeastSquaresBuilder#maxEvaluations(int)",
        "org.apache.commons.math3.fitting.leastsquares.LeastSquaresBuilder#weight(RealMatrix)",
        "org.apache.commons.math3.linear.DiagonalMatrix#DiagonalMatrix(double[])",
        "org.apache.commons.math3.fitting.GaussianCurveFitter.ParameterGuesser#guess()",
        "org.apache.commons.math3.fitting.leastsquares.LeastSquaresBuilder#start(double[])",
        "org.apache.commons.math3.fitting.AbstractCurveFitter.TheoreticalValuesFunction#TheoreticalValuesFunction(ParametricUnivariateFunction,Collection<WeightedObservedPoint>)"
    ],
    "org.apache.commons.math3.util.Combinations.LexicographicComparator#compare(int[],int[])": [
        "org.apache.commons.math3.exception.DimensionMismatchException#DimensionMismatchException(int,int)",
        "org.apache.commons.math3.util.Combinations.LexicographicComparator#lexNorm(int[])",
        "org.apache.commons.math3.util.MathArrays.copyOf(int[])"
    ],
    "org.apache.commons.math3.stat.descriptive.rank.Percentile#getPivotingStrategy()": ["org.apache.commons.math3.util.KthSelector#getPivotingStrategy()"],
    "org.apache.commons.math3.analysis.differentiation.DSCompiler#log1p(double[],int,double[],int)": [
        "org.apache.commons.math3.util.FastMath.log1p(double)",
        "org.apache.commons.math3.analysis.differentiation.DSCompiler#compose(double[],int,double[],double[],int)"
    ],
    "org.apache.commons.math3.geometry.spherical.oned.ArcsSet#ArcsSet(double,double,double)": [
        "org.apache.commons.math3.geometry.spherical.oned.ArcsSet.buildTree(double,double,double)",
        "org.apache.commons.math3.geometry.partitioning.AbstractRegion#AbstractRegion(BSPTree<S extends Space>,double)",
        "org.apache.commons.math3.geometry.spherical.oned.ArcsSet.<init>()"
    ],
    "org.apache.commons.math3.ml.neuralnet.oned.NeuronString#createLinks()": [
        "org.apache.commons.math3.ml.neuralnet.Network#getNeuron(long)",
        "org.apache.commons.math3.ml.neuralnet.Network#addLink(Neuron,Neuron)"
    ],
    "org.apache.commons.math3.stat.descriptive.MultivariateSummaryStatistics#getResults(StorelessUnivariateStatistic[])": [
        "org.apache.commons.math3.stat.descriptive.moment.FirstMoment#getResult()",
        "org.apache.commons.math3.stat.descriptive.rank.Min#getResult()",
        "org.apache.commons.math3.stat.descriptive.moment.GeometricMean#getResult()",
        "org.apache.commons.math3.stat.descriptive.moment.Variance#getResult()",
        "org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile#getResult()",
        "org.apache.commons.math3.stat.descriptive.summary.Sum#getResult()",
        "org.apache.commons.math3.stat.descriptive.moment.FourthMoment#getResult()",
        "org.apache.commons.math3.stat.descriptive.moment.StandardDeviation#getResult()",
        "org.apache.commons.math3.stat.descriptive.summary.SumOfLogs#getResult()",
        "org.apache.commons.math3.stat.descriptive.summary.Product#getResult()",
        "org.apache.commons.math3.stat.descriptive.summary.SumOfSquares#getResult()",
        "org.apache.commons.math3.stat.descriptive.moment.Skewness#getResult()",
        "org.apache.commons.math3.stat.descriptive.moment.Kurtosis#getResult()",
        "org.apache.commons.math3.stat.descriptive.rank.Max#getResult()",
        "org.apache.commons.math3.stat.descriptive.moment.SecondMoment#getResult()",
        "org.apache.commons.math3.stat.descriptive.moment.ThirdMoment#getResult()",
        "org.apache.commons.math3.stat.descriptive.moment.Mean#getResult()"
    ],
    "org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet#IntervalsSet(BSPTree<Euclidean1D>,double)": [
        "org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet.<init>()",
        "org.apache.commons.math3.geometry.partitioning.AbstractRegion#AbstractRegion(BSPTree<S extends Space>,double)"
    ],
    "org.apache.commons.math3.stat.inference.TestUtils.<staticinit>()": [
        "org.apache.commons.math3.stat.inference.TTest.<init>()",
        "org.apache.commons.math3.stat.inference.OneWayAnova#OneWayAnova()",
        "org.apache.commons.math3.stat.inference.KolmogorovSmirnovTest#KolmogorovSmirnovTest()",
        "org.apache.commons.math3.stat.inference.ChiSquareTest#ChiSquareTest()",
        "org.apache.commons.math3.stat.inference.GTest.<init>()"
    ],
    "org.apache.commons.math3.geometry.euclidean.threed.FieldRotation#applyInverseTo(FieldVector3D<T extends RealFieldElement>)": [
        "org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D#getZ()",
        "org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D#getY()",
        "org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D#getX()",
        "org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D#FieldVector3D(T extends RealFieldElement,T extends RealFieldElement,T extends RealFieldElement)"
    ],
    "org.apache.commons.math3.linear.OpenMapRealVector#isNaN()": [
        "org.apache.commons.math3.util.OpenIntToDoubleHashMap.Iterator#advance()",
        "org.apache.commons.math3.util.OpenIntToDoubleHashMap.Iterator#value()",
        "org.apache.commons.math3.util.OpenIntToDoubleHashMap#iterator()",
        "org.apache.commons.math3.util.OpenIntToDoubleHashMap.Iterator#hasNext()"
    ],
    "org.apache.commons.math3.fitting.leastsquares.LeastSquaresFactory.LocalLeastSquaresProblem#evaluate(RealVector)": [
        "org.apache.commons.math3.linear.ArrayRealVector#copy()",
        "org.apache.commons.math3.fitting.leastsquares.LeastSquaresFactory.LocalLeastSquaresProblem.LazyUnweightedEvaluation#LazyUnweightedEvaluation(ValueAndJacobianFunction,RealVector,RealVector)",
        "org.apache.commons.math3.util.Pair#getSecond()",
        "org.apache.commons.math3.linear.RealVector.unmodifiableRealVector(RealVector)$RealVector$1#copy()",
        "org.apache.commons.math3.fitting.leastsquares.LeastSquaresFactory.LocalValueAndJacobianFunction#value(RealVector)",
        "org.apache.commons.math3.linear.OpenMapRealVector#copy()",
        "org.apache.commons.math3.util.Pair#getFirst()",
        "org.apache.commons.math3.fitting.leastsquares.LeastSquaresFactory.LocalLeastSquaresProblem.UnweightedEvaluation#UnweightedEvaluation(RealVector,RealMatrix,RealVector,RealVector)"
    ],
    "org.apache.commons.math3.complex.Complex.valueOf(double,double)": [
        "org.apache.commons.math3.complex.Complex.<staticinit>()",
        "org.apache.commons.math3.complex.Complex#Complex(double,double)"
    ],
    "org.apache.commons.math3.stat.inference.TTest#checkSignificanceLevel(double)": ["org.apache.commons.math3.exception.util.LocalizedFormats.<staticinit>()"],
    "org.apache.commons.math3.exception.MaxCountExceededException#MaxCountExceededException(Localizable,Number,Object[]...)": [
        "org.apache.commons.math3.exception.MathIllegalStateException#MathIllegalStateException()",
        "org.apache.commons.math3.exception.MaxCountExceededException.<init>()",
        "org.apache.commons.math3.exception.MathIllegalStateException#getContext()"
    ],
    "org.apache.commons.math3.stat.descriptive.SynchronizedSummaryStatistics#getSumsq()": ["org.apache.commons.math3.stat.descriptive.SummaryStatistics#getSumsq()"],
    "org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet#closeVerticesConnections(List<ConnectableSegment>)": [
        "org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.ConnectableSegment#getNext()",
        "org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.ConnectableSegment#setPrevious(ConnectableSegment)",
        "org.apache.commons.math3.geometry.euclidean.twod.Segment#getStart()",
        "org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.ConnectableSegment#getPrevious()",
        "org.apache.commons.math3.geometry.euclidean.twod.Segment#getEnd()",
        "org.apache.commons.math3.geometry.partitioning.AbstractRegion#getTolerance()",
        "org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.ConnectableSegment#setNext(ConnectableSegment)",
        "org.apache.commons.math3.geometry.euclidean.twod.Vector2D.distance(Vector2D,Vector2D)"
    ],
    "org.apache.commons.math3.util.BigReal#BigReal(int,MathContext)": ["org.apache.commons.math3.util.BigReal.<init>()"],
    "org.apache.commons.math3.linear.MatrixUtils.createFieldMatrix(T extends FieldElement[][])": [
        "org.apache.commons.math3.exception.NullArgumentException#NullArgumentException()",
        "org.apache.commons.math3.linear.Array2DRowFieldMatrix#Array2DRowFieldMatrix(T extends FieldElement[][])",
        "org.apache.commons.math3.linear.BlockFieldMatrix#BlockFieldMatrix(T extends FieldElement[][])"
    ],
    "org.apache.commons.math3.fraction.BigFraction#equals(Object)": ["org.apache.commons.math3.fraction.BigFraction#reduce()"],
    "org.apache.commons.math3.ode.AbstractIntegrator#getMaxEvaluations()": ["org.apache.commons.math3.util.IntegerSequence.Incrementor#getMaximalCount()"],
    "org.apache.commons.math3.ode.nonstiff.MidpointFieldIntegrator#createInterpolator(boolean,T extends RealFieldElement[][],FieldODEStateAndDerivative<T extends RealFieldElement>,FieldODEStateAndDerivative<T extends RealFieldElement>,FieldEquationsMapper<T extends RealFieldElement>)": [
        "org.apache.commons.math3.ode.AbstractFieldIntegrator#getField()",
        "org.apache.commons.math3.ode.nonstiff.MidpointFieldStepInterpolator#MidpointFieldStepInterpolator(Field<T extends RealFieldElement>,boolean,T extends RealFieldElement[][],FieldODEStateAndDerivative<T extends RealFieldElement>,FieldODEStateAndDerivative<T extends RealFieldElement>,FieldODEStateAndDerivative<T extends RealFieldElement>,FieldODEStateAndDerivative<T extends RealFieldElement>,FieldEquationsMapper<T extends RealFieldElement>)"
    ],
    "org.apache.commons.math3.analysis.differentiation.SparseGradient#ceil()": [
        "org.apache.commons.math3.util.FastMath.ceil(double)",
        "org.apache.commons.math3.analysis.differentiation.SparseGradient.createConstant(double)"
    ],
    "org.apache.commons.math3.analysis.FunctionUtils#FunctionUtils()": ["org.apache.commons.math3.analysis.FunctionUtils.<init>()"],
    "org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile#increment(double)": [
        "org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile.Markers#processDataPoint(double)",
        "org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile.newMarkers(List<Double>,double)"
    ],
    "org.apache.commons.math3.geometry.euclidean.oned.Vector1D#getNormInf()": ["org.apache.commons.math3.util.FastMath.abs(double)"],
    "org.apache.commons.math3.util.MathArrays.checkEqualLength(int[],int[],boolean)": ["org.apache.commons.math3.exception.DimensionMismatchException#DimensionMismatchException(int,int)"],
    "org.apache.commons.math3.geometry.spherical.twod.Edge#addSubEdge(Vertex,Vertex,double,List<Edge>,Circle)": [
        "org.apache.commons.math3.geometry.spherical.twod.Circle#getTolerance()",
        "org.apache.commons.math3.geometry.spherical.twod.Edge#Edge(Vertex,Vertex,double,Circle)",
        "org.apache.commons.math3.geometry.spherical.twod.Vertex#bindWith(Circle)"
    ],
    "org.apache.commons.math3.analysis.function.Logit.value(double,double,double)": ["org.apache.commons.math3.util.FastMath.log(double)"],
    "org.apache.commons.math3.stat.descriptive.moment.Skewness#clear()": [
        "org.apache.commons.math3.stat.descriptive.moment.FourthMoment#clear()",
        "org.apache.commons.math3.stat.descriptive.moment.ThirdMoment#clear()"
    ],
    "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer.ones(int,int)": ["org.apache.commons.math3.linear.Array2DRowRealMatrix#Array2DRowRealMatrix(double[][],boolean)"],
    "org.apache.commons.math3.linear.DiagonalMatrix#inverse(double)": [
        "org.apache.commons.math3.linear.SingularMatrixException#SingularMatrixException()",
        "org.apache.commons.math3.linear.DiagonalMatrix#isSingular(double)",
        "org.apache.commons.math3.linear.DiagonalMatrix#DiagonalMatrix(double[],boolean)"
    ],
    "org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D#distanceSq(Vector3D)": [
        "org.apache.commons.math3.geometry.euclidean.threed.Vector3D#getZ()",
        "org.apache.commons.math3.geometry.euclidean.threed.Vector3D#getY()",
        "org.apache.commons.math3.geometry.euclidean.threed.Vector3D#getX()"
    ],
    "org.apache.commons.math3.stat.correlation.PearsonsCorrelation#PearsonsCorrelation(Covariance)": [
        "org.apache.commons.math3.stat.correlation.PearsonsCorrelation#covarianceToCorrelation(RealMatrix)",
        "org.apache.commons.math3.stat.correlation.Covariance#getN()",
        "org.apache.commons.math3.stat.correlation.StorelessCovariance#getN()",
        "org.apache.commons.math3.stat.correlation.PearsonsCorrelation.<init>()",
        "org.apache.commons.math3.exception.util.LocalizedFormats.<staticinit>()",
        "org.apache.commons.math3.stat.correlation.Covariance#getCovarianceMatrix()",
        "org.apache.commons.math3.stat.correlation.StorelessCovariance#getCovarianceMatrix()"
    ],
    "org.apache.commons.math3.dfp.Dfp#newInstance(String)": ["org.apache.commons.math3.dfp.Dfp#Dfp(DfpField,String)"],
    "org.apache.commons.math3.analysis.differentiation.SparseGradient#acosh()": [
        "org.apache.commons.math3.analysis.differentiation.SparseGradient#SparseGradient(double,double,Map<Integer, Double>)",
        "org.apache.commons.math3.util.FastMath.sqrt(double)",
        "org.apache.commons.math3.util.FastMath.acosh(double)"
    ],
    "org.apache.commons.math3.linear.ArrayRealVector#ArrayRealVector(double[],ArrayRealVector)": [
        "org.apache.commons.math3.linear.ArrayRealVector#getDimension()",
        "org.apache.commons.math3.linear.RealVector.<init>()",
        "org.apache.commons.math3.linear.ArrayRealVector.<init>()"
    ],
    "org.apache.commons.math3.analysis.interpolation.TricubicInterpolator#interpolate(double[],double[],double[],double[][][])": [
        "org.apache.commons.math3.exception.DimensionMismatchException#DimensionMismatchException(int,int)",
        "org.apache.commons.math3.exception.NoDataException#NoDataException()",
        "org.apache.commons.math3.util.MathArrays.checkOrder(double[])",
        "org.apache.commons.math3.analysis.interpolation.TricubicInterpolator#interpolate(double[],double[],double[],double[][][])$TricubicInterpolatingFunction$1.<init>()"
    ],
    "org.apache.commons.math3.linear.ArrayFieldVector#ebeMultiply(FieldVector<T extends FieldElement>)": [
        "org.apache.commons.math3.linear.ArrayFieldVector#getEntry(int)",
        "org.apache.commons.math3.linear.ArrayFieldVector#ebeMultiply(ArrayFieldVector<T extends FieldElement>)",
        "org.apache.commons.math3.linear.SparseFieldVector#getEntry(int)",
        "org.apache.commons.math3.linear.ArrayFieldVector#ArrayFieldVector(Field<T extends FieldElement>,T extends FieldElement[],boolean)",
        "org.apache.commons.math3.util.MathArrays.buildArray(Field<T>,int)",
        "org.apache.commons.math3.linear.ArrayFieldVector#checkVectorDimensions(FieldVector<T extends FieldElement>)"
    ],
    "org.apache.commons.math3.analysis.solvers.LaguerreSolver.ComplexSolver#solveAll(Complex[],Complex)": [
        "org.apache.commons.math3.exception.NoDataException#NoDataException(Localizable)",
        "org.apache.commons.math3.exception.NullArgumentException#NullArgumentException()",
        "org.apache.commons.math3.analysis.solvers.LaguerreSolver.ComplexSolver#solve(Complex[],Complex)",
        "org.apache.commons.math3.complex.Complex#add(Complex)",
        "org.apache.commons.math3.complex.Complex#multiply(Complex)",
        "org.apache.commons.math3.exception.util.LocalizedFormats.<staticinit>()"
    ],
    "org.apache.commons.math3.random.RandomDataGenerator#nextZipf(int,double)": [
        "org.apache.commons.math3.distribution.ZipfDistribution#sample()",
        "org.apache.commons.math3.distribution.ZipfDistribution#ZipfDistribution(RandomGenerator,int,double)",
        "org.apache.commons.math3.random.RandomDataGenerator#getRandomGenerator()"
    ],
    "org.apache.commons.math3.util.Combinations#comparator()": ["org.apache.commons.math3.util.Combinations.LexicographicComparator#LexicographicComparator(int,int)"],
    "org.apache.commons.math3.stat.descriptive.moment.SemiVariance#evaluate(double[],Direction)": [
        "org.apache.commons.math3.stat.descriptive.moment.SemiVariance#evaluate(double[],double,Direction,boolean,int,int)",
        "org.apache.commons.math3.stat.descriptive.moment.StandardDeviation#evaluate(double[])",
        "org.apache.commons.math3.stat.descriptive.moment.Variance#evaluate(double[])",
        "org.apache.commons.math3.stat.descriptive.moment.Mean#Mean()",
        "org.apache.commons.math3.stat.descriptive.AbstractStorelessUnivariateStatistic#evaluate(double[])"
    ],
    "org.apache.commons.math3.ode.JacobianMatrices.MainStateJacobianWrapper#computeDerivatives(double,double[],double[])": [
        "org.apache.commons.math3.ode.MultistepIntegrator#start(double,double[],double)$FirstOrderDifferentialEquations$1#computeDerivatives(double,double[],double[])",
        "org.apache.commons.math3.ode.FirstOrderConverter#computeDerivatives(double,double[],double[])",
        "org.apache.commons.math3.ode.JacobianMatrices.MainStateJacobianWrapper#computeDerivatives(double,double[],double[])"
    ],
    "org.apache.commons.math3.ode.nonstiff.GillStepInterpolator#GillStepInterpolator(GillStepInterpolator)": [
        "org.apache.commons.math3.ode.nonstiff.GillStepInterpolator.<init>()",
        "org.apache.commons.math3.ode.nonstiff.RungeKuttaStepInterpolator#RungeKuttaStepInterpolator(RungeKuttaStepInterpolator)"
    ],
    "org.apache.commons.math3.fraction.Fraction#multiply(Fraction)": [
        "org.apache.commons.math3.fraction.Fraction.<staticinit>()",
        "org.apache.commons.math3.util.ArithmeticUtils.gcd(int,int)",
        "org.apache.commons.math3.fraction.Fraction.getReducedFraction(int,int)",
        "org.apache.commons.math3.util.ArithmeticUtils.mulAndCheck(int,int)",
        "org.apache.commons.math3.exception.util.LocalizedFormats.<staticinit>()"
    ],
    "org.apache.commons.math3.analysis.polynomials.PolynomialFunctionLagrangeForm#PolynomialFunctionLagrangeForm(double[],double[])": [
        "org.apache.commons.math3.analysis.polynomials.PolynomialFunctionLagrangeForm.verifyInterpolationArray(double[],double[],boolean)",
        "org.apache.commons.math3.analysis.polynomials.PolynomialFunctionLagrangeForm.<init>()"
    ],
    "org.apache.commons.math3.util.MathUtils.checkNotNull(Object,Localizable,Object[]...)": ["org.apache.commons.math3.exception.NullArgumentException#NullArgumentException(Localizable,Object[]...)"],
    "org.apache.commons.math3.analysis.interpolation.LinearInterpolator#interpolate(double[],double[])": [
        "org.apache.commons.math3.exception.DimensionMismatchException#DimensionMismatchException(int,int)",
        "org.apache.commons.math3.analysis.polynomials.PolynomialSplineFunction#PolynomialSplineFunction(double[],PolynomialFunction[])",
        "org.apache.commons.math3.util.MathArrays.checkOrder(double[])",
        "org.apache.commons.math3.exception.util.LocalizedFormats.<staticinit>()",
        "org.apache.commons.math3.analysis.polynomials.PolynomialFunction#PolynomialFunction(double[])"
    ],
    "org.apache.commons.math3.ml.neuralnet.oned.NeuronString#NeuronString(boolean,double[][])": [
        "org.apache.commons.math3.ml.neuralnet.Network#createNeuron(double[])",
        "org.apache.commons.math3.ml.neuralnet.oned.NeuronString#createLinks()",
        "org.apache.commons.math3.ml.neuralnet.oned.NeuronString.<init>()",
        "org.apache.commons.math3.ml.neuralnet.Network#Network(long,int)"
    ],
    "org.apache.commons.math3.util.Incrementor.wrap(Incrementor)$Incrementor$1#incrementCount()": [
        "org.apache.commons.math3.util.IntegerSequence.Incrementor#increment()",
        "org.apache.commons.math3.util.Incrementor#incrementCount()"
    ],
    "org.apache.commons.math3.util.FastMath.cos(double)": [
        "org.apache.commons.math3.util.FastMath.CodyWaite#getK()",
        "org.apache.commons.math3.util.FastMath.CodyWaite#CodyWaite(double)",
        "org.apache.commons.math3.util.FastMath.cosQ(double,double)",
        "org.apache.commons.math3.util.FastMath.sinQ(double,double)",
        "org.apache.commons.math3.util.FastMath.CodyWaite#getRemB()",
        "org.apache.commons.math3.util.FastMath.CodyWaite#getRemA()",
        "org.apache.commons.math3.util.FastMath.reducePayneHanek(double,double[])"
    ],
    "org.apache.commons.math3.optim.SimpleBounds.unbounded(int)": ["org.apache.commons.math3.optim.SimpleBounds#SimpleBounds(double[],double[])"],
    "org.apache.commons.math3.linear.RealVector.SparseEntryIterator#hasNext()": [
        "org.apache.commons.math3.linear.OpenMapRealVector.OpenMapEntry#getIndex()",
        "org.apache.commons.math3.linear.RealVector.Entry#getIndex()"
    ],
    "org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator#AdamsMoultonIntegrator(int,double,double,double[],double[])": [
        "org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator.<staticinit>()",
        "org.apache.commons.math3.ode.nonstiff.AdamsIntegrator#AdamsIntegrator(String,int,int,double,double,double[],double[])",
        "org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator.<init>()"
    ],
    "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.MultiDirectionalSimplex#MultiDirectionalSimplex(double[][])": [
        "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.MultiDirectionalSimplex#MultiDirectionalSimplex(double[][],double,double)",
        "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.MultiDirectionalSimplex.<staticinit>()"
    ],
    "org.apache.commons.math3.distribution.EnumeratedRealDistribution#EnumeratedRealDistribution(double[])": [
        "org.apache.commons.math3.random.Well19937c#Well19937c()",
        "org.apache.commons.math3.distribution.EnumeratedRealDistribution#EnumeratedRealDistribution(RandomGenerator,double[])"
    ],
    "org.apache.commons.math3.ml.clustering.DoublePoint#DoublePoint(int[])": ["org.apache.commons.math3.ml.clustering.DoublePoint.<init>()"],
    "org.apache.commons.math3.optimization.direct.CMAESOptimizer#doOptimize()": [
        "org.apache.commons.math3.linear.BlockRealMatrix#setColumn(int,double[])",
        "org.apache.commons.math3.optimization.direct.CMAESOptimizer.FitnessFunction#FitnessFunction()",
        "org.apache.commons.math3.util.FastMath.min(double,double)",
        "org.apache.commons.math3.optimization.direct.CMAESOptimizer.selectColumns(RealMatrix,int[])",
        "org.apache.commons.math3.optimization.PointValuePair#PointValuePair(double[],double)",
        "org.apache.commons.math3.optimization.direct.CMAESOptimizer.zeros(int,int)",
        "org.apache.commons.math3.optimization.GoalType.<staticinit>()",
        "org.apache.commons.math3.optimization.direct.CMAESOptimizer.max(double[])",
        "org.apache.commons.math3.linear.AbstractRealMatrix#getColumnMatrix(int)",
        "org.apache.commons.math3.linear.DiagonalMatrix#multiply(RealMatrix)",
        "org.apache.commons.math3.optimization.direct.CMAESOptimizer.min(double[])",
        "org.apache.commons.math3.linear.AbstractRealMatrix#setColumn(int,double[])",
        "org.apache.commons.math3.optimization.direct.CMAESOptimizer.FitnessFunction#value(double[])",
        "org.apache.commons.math3.optimization.direct.CMAESOptimizer.max(RealMatrix)",
        "org.apache.commons.math3.linear.BlockRealMatrix#add(RealMatrix)",
        "org.apache.commons.math3.optimization.direct.CMAESOptimizer.FitnessFunction#repair(double[])",
        "org.apache.commons.math3.optimization.direct.CMAESOptimizer#updateEvolutionPaths(RealMatrix,RealMatrix)",
        "org.apache.commons.math3.linear.AbstractRealMatrix#add(RealMatrix)",
        "org.apache.commons.math3.optimization.direct.CMAESOptimizer.push(double[],double)",
        "org.apache.commons.math3.optimization.direct.CMAESOptimizer#initializeCMA(double[])",
        "org.apache.commons.math3.util.FastMath.max(double,double)",
        "org.apache.commons.math3.linear.OpenMapRealMatrix#multiply(RealMatrix)",
        "org.apache.commons.math3.optimization.direct.CMAESOptimizer.FitnessFunction#isFeasible(double[])",
        "org.apache.commons.math3.optimization.direct.CMAESOptimizer.FitnessFunction#setValueRange(double)",
        "org.apache.commons.math3.util.FastMath.abs(double)",
        "org.apache.commons.math3.util.FastMath.exp(double)",
        "org.apache.commons.math3.optimization.direct.BaseAbstractMultivariateOptimizer#getConvergenceChecker()",
        "org.apache.commons.math3.optimization.direct.CMAESOptimizer#randn1(int,int)",
        "org.apache.commons.math3.linear.AbstractRealMatrix#getColumn(int)",
        "org.apache.commons.math3.linear.BlockRealMatrix#getColumn(int)",
        "org.apache.commons.math3.optimization.direct.CMAESOptimizer#randn(int)",
        "org.apache.commons.math3.linear.BlockRealMatrix#multiply(RealMatrix)",
        "org.apache.commons.math3.optimization.direct.CMAESOptimizer.sqrt(RealMatrix)",
        "org.apache.commons.math3.optimization.direct.CMAESOptimizer#updateCovarianceDiagonalOnly(boolean,RealMatrix)",
        "org.apache.commons.math3.optimization.direct.CMAESOptimizer.times(RealMatrix,RealMatrix)",
        "org.apache.commons.math3.linear.BlockRealMatrix#scalarMultiply(double)",
        "org.apache.commons.math3.linear.BlockRealMatrix#transpose()",
        "org.apache.commons.math3.optimization.direct.CMAESOptimizer.copyColumn(RealMatrix,int,RealMatrix,int)",
        "org.apache.commons.math3.optimization.direct.BaseAbstractMultivariateOptimizer#getStartPoint()",
        "org.apache.commons.math3.optimization.direct.CMAESOptimizer#updateCovariance(boolean,RealMatrix,RealMatrix,int[],RealMatrix)",
        "org.apache.commons.math3.util.MathArrays.copyOf(int[],int)",
        "org.apache.commons.math3.linear.BlockRealMatrix#getColumnMatrix(int)",
        "org.apache.commons.math3.linear.AbstractRealMatrix#multiply(RealMatrix)",
        "org.apache.commons.math3.optimization.direct.BaseAbstractMultivariateOptimizer#getGoalType()",
        "org.apache.commons.math3.linear.AbstractRealMatrix#transpose()",
        "org.apache.commons.math3.linear.AbstractRealMatrix#scalarMultiply(double)",
        "org.apache.commons.math3.optimization.direct.CMAESOptimizer#checkParameters()",
        "org.apache.commons.math3.optimization.direct.CMAESOptimizer.min(RealMatrix)",
        "org.apache.commons.math3.optimization.direct.CMAESOptimizer#sortedIndices(double[])"
    ],
    "org.apache.commons.math3.analysis.solvers.NewtonSolver#doSolve()": [
        "org.apache.commons.math3.analysis.solvers.BaseAbstractUnivariateSolver#getAbsoluteAccuracy()",
        "org.apache.commons.math3.analysis.solvers.BaseAbstractUnivariateSolver#getStartValue()",
        "org.apache.commons.math3.analysis.solvers.BaseAbstractUnivariateSolver#computeObjectiveValue(double)",
        "org.apache.commons.math3.util.FastMath.abs(double)",
        "org.apache.commons.math3.analysis.solvers.AbstractDifferentiableUnivariateSolver#computeDerivativeObjectiveValue(double)"
    ],
    "org.apache.commons.math3.util.Decimal64#linearCombination(double[],Decimal64[])": [
        "org.apache.commons.math3.exception.DimensionMismatchException#DimensionMismatchException(int,int)",
        "org.apache.commons.math3.util.Decimal64#Decimal64(double)",
        "org.apache.commons.math3.util.MathArrays.linearCombination(double[],double[])"
    ],
    "org.apache.commons.math3.analysis.solvers.UnivariateSolverUtils#UnivariateSolverUtils()": ["org.apache.commons.math3.analysis.solvers.UnivariateSolverUtils.<init>()"],
    "org.apache.commons.math3.linear.RealVector#checkVectorDimensions(RealVector)": [
        "org.apache.commons.math3.linear.OpenMapRealVector#getDimension()",
        "org.apache.commons.math3.linear.ArrayRealVector#checkVectorDimensions(int)",
        "org.apache.commons.math3.linear.ArrayRealVector#getDimension()",
        "org.apache.commons.math3.linear.RealVector.unmodifiableRealVector(RealVector)$RealVector$1#getDimension()",
        "org.apache.commons.math3.linear.RealVector#checkVectorDimensions(int)"
    ],
    "org.apache.commons.math3.complex.Quaternion#isUnitQuaternion(double)": [
        "org.apache.commons.math3.util.Precision.equals(double,double,double)",
        "org.apache.commons.math3.complex.Quaternion#getNorm()"
    ],
    "org.apache.commons.math3.stat.inference.ChiSquareTest#chiSquareTest(long[][])": [
        "org.apache.commons.math3.stat.inference.ChiSquareTest#checkArray(long[][])",
        "org.apache.commons.math3.distribution.ChiSquaredDistribution#ChiSquaredDistribution(double)",
        "org.apache.commons.math3.stat.inference.ChiSquareTest#chiSquare(long[][])",
        "org.apache.commons.math3.distribution.ChiSquaredDistribution#cumulativeProbability(double)"
    ],
    "org.apache.commons.math3.analysis.function.Sigmoid#value(DerivativeStructure)": [
        "org.apache.commons.math3.analysis.differentiation.DerivativeStructure#getValue()",
        "org.apache.commons.math3.util.FastMath.exp(double)",
        "org.apache.commons.math3.analysis.differentiation.DerivativeStructure#compose(double[]...)",
        "org.apache.commons.math3.analysis.differentiation.DerivativeStructure#getOrder()"
    ],
    "org.apache.commons.math3.ml.neuralnet.twod.NeuronSquareMesh2D#getNeuron(int,int,HorizontalDirection,VerticalDirection)": [
        "org.apache.commons.math3.ml.neuralnet.twod.NeuronSquareMesh2D#getLocation(int,int,HorizontalDirection,VerticalDirection)",
        "org.apache.commons.math3.ml.neuralnet.twod.NeuronSquareMesh2D#getNeuron(int,int)"
    ],
    "org.apache.commons.math3.stat.descriptive.moment.SemiVariance#SemiVariance(SemiVariance)": [
        "org.apache.commons.math3.stat.descriptive.moment.SemiVariance.<init>()",
        "org.apache.commons.math3.stat.descriptive.moment.SemiVariance.copy(SemiVariance,SemiVariance)",
        "org.apache.commons.math3.stat.descriptive.AbstractUnivariateStatistic.<init>()"
    ],
    "org.apache.commons.math3.linear.DiagonalMatrix#getEntry(int,int)": ["org.apache.commons.math3.linear.MatrixUtils.checkMatrixIndex(AnyMatrix,int,int)"],
    "org.apache.commons.math3.linear.CholeskyDecomposition#getSolver()": ["org.apache.commons.math3.linear.CholeskyDecomposition.Solver#Solver(double[][])"],
    "org.apache.commons.math3.linear.FieldLUDecomposition.Solver#solve(FieldVector<T extends FieldElement>)": [
        "org.apache.commons.math3.exception.DimensionMismatchException#DimensionMismatchException(int,int)",
        "org.apache.commons.math3.linear.ArrayFieldVector#getDimension()",
        "org.apache.commons.math3.linear.SparseFieldVector#getEntry(int)",
        "org.apache.commons.math3.linear.ArrayFieldVector#ArrayFieldVector(Field<T extends FieldElement>,T extends FieldElement[],boolean)",
        "org.apache.commons.math3.linear.FieldLUDecomposition.Solver#solve(ArrayFieldVector<T extends FieldElement>)",
        "org.apache.commons.math3.linear.SingularMatrixException#SingularMatrixException()",
        "org.apache.commons.math3.linear.SparseFieldVector#getDimension()",
        "org.apache.commons.math3.linear.ArrayFieldVector#getEntry(int)",
        "org.apache.commons.math3.util.MathArrays.buildArray(Field<T>,int)"
    ],
    "org.apache.commons.math3.fitting.AbstractCurveFitter.TheoreticalValuesFunction#getModelFunction()$MultivariateVectorFunction$1#value(double[])": [
        "org.apache.commons.math3.fitting.GaussianCurveFitter$Parametric$1#value(double,double[]...)",
        "org.apache.commons.math3.analysis.function.Logit.Parametric#value(double,double[]...)",
        "org.apache.commons.math3.analysis.polynomials.PolynomialFunction.Parametric#value(double,double[]...)",
        "org.apache.commons.math3.analysis.function.Sigmoid.Parametric#value(double,double[]...)",
        "org.apache.commons.math3.analysis.function.Logistic.Parametric#value(double,double[]...)",
        "org.apache.commons.math3.analysis.function.Gaussian.Parametric#value(double,double[]...)",
        "org.apache.commons.math3.optimization.fitting.GaussianFitter#fit(double[])$Parametric$1#value(double,double[]...)",
        "org.apache.commons.math3.analysis.function.HarmonicOscillator.Parametric#value(double,double[]...)",
        "org.apache.commons.math3.fitting.GaussianFitter#fit(double[])$Parametric$1#value(double,double[]...)"
    ],
    "org.apache.commons.math3.distribution.PoissonDistribution#logProbability(int)": [
        "org.apache.commons.math3.distribution.SaddlePointExpansion.getStirlingError(double)",
        "org.apache.commons.math3.util.MathUtils.<staticinit>()",
        "org.apache.commons.math3.util.FastMath.log(double)",
        "org.apache.commons.math3.distribution.SaddlePointExpansion.getDeviancePart(double,double)"
    ],
    "org.apache.commons.math3.linear.AbstractFieldMatrix#setColumnMatrix(int,FieldMatrix<T extends FieldElement>)": [
        "org.apache.commons.math3.linear.SparseFieldMatrix#getEntry(int,int)",
        "org.apache.commons.math3.linear.DiagonalMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.Array2DRowRealMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.BlockFieldMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.SparseFieldMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.SparseFieldMatrix#setEntry(int,int,T extends FieldElement)",
        "org.apache.commons.math3.linear.OpenMapRealMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.Array2DRowFieldMatrix#setEntry(int,int,T extends FieldElement)",
        "org.apache.commons.math3.linear.BlockFieldMatrix#setEntry(int,int,T extends FieldElement)",
        "org.apache.commons.math3.linear.OpenMapRealMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.DiagonalMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.Array2DRowFieldMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.BlockFieldMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.SparseFieldMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.BlockRealMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.Array2DRowRealMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.Array2DRowFieldMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.BlockRealMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.Array2DRowFieldMatrix#getEntry(int,int)",
        "org.apache.commons.math3.linear.MatrixDimensionMismatchException#MatrixDimensionMismatchException(int,int,int,int)",
        "org.apache.commons.math3.linear.AbstractFieldMatrix#checkColumnIndex(int)",
        "org.apache.commons.math3.linear.BlockFieldMatrix#getEntry(int,int)"
    ],
    "org.apache.commons.math3.ode.nonstiff.GillStepInterpolator#GillStepInterpolator()": [
        "org.apache.commons.math3.ode.nonstiff.GillStepInterpolator.<init>()",
        "org.apache.commons.math3.ode.nonstiff.RungeKuttaStepInterpolator#RungeKuttaStepInterpolator()"
    ],
    "org.apache.commons.math3.fitting.leastsquares.LeastSquaresFactory.weightMatrix(LeastSquaresProblem,RealMatrix)": [
        "org.apache.commons.math3.fitting.leastsquares.LeastSquaresFactory.squareRoot(RealMatrix)",
        "org.apache.commons.math3.fitting.leastsquares.LeastSquaresFactory.weightMatrix(LeastSquaresProblem,RealMatrix)$LeastSquaresAdapter$1.<init>()"
    ],
    "org.apache.commons.math3.linear.ArrayRealVector#map(UnivariateFunction)": [
        "org.apache.commons.math3.linear.ArrayRealVector#copy()",
        "org.apache.commons.math3.linear.ArrayRealVector#mapToSelf(UnivariateFunction)"
    ],
    "org.apache.commons.math3.ode.ContinuousOutputModel#handleStep(StepInterpolator,boolean)": [
        "org.apache.commons.math3.ode.sampling.AbstractStepInterpolator#getCurrentTime()",
        "org.apache.commons.math3.ode.sampling.AbstractStepInterpolator#isForward()",
        "org.apache.commons.math3.ode.sampling.AbstractStepInterpolator#copy()",
        "org.apache.commons.math3.ode.sampling.AbstractStepInterpolator#getPreviousTime()"
    ],
    "org.apache.commons.math3.optimization.linear.SimplexTableau#getArtificialVariableOffset()": ["org.apache.commons.math3.optimization.linear.SimplexTableau#getNumObjectiveFunctions()"],
    "org.apache.commons.math3.userguide.genetics.ImageEvolutionExample.Display#Display()": [
        "org.apache.commons.math3.userguide.genetics.RandomPolygonMutation#RandomPolygonMutation(float,float)",
        "org.apache.commons.math3.genetics.GeneticAlgorithm#GeneticAlgorithm(CrossoverPolicy,double,MutationPolicy,double,SelectionPolicy)",
        "org.apache.commons.math3.userguide.genetics.PolygonChromosome.setRefImage(BufferedImage)",
        "org.apache.commons.math3.userguide.genetics.ImageEvolutionExample.Display.ImagePainter#ImagePainter(int,int)",
        "org.apache.commons.math3.userguide.ExampleUtils.ExampleFrame.<init>()",
        "org.apache.commons.math3.userguide.genetics.ImageEvolutionExample.getInitialPopulation()",
        "org.apache.commons.math3.userguide.genetics.PolygonChromosome.setTestImage(BufferedImage)",
        "org.apache.commons.math3.userguide.genetics.ImageEvolutionExample.resizeImage(BufferedImage,int,int,int)",
        "org.apache.commons.math3.userguide.genetics.ImageEvolutionExample.Display#Display()$ActionListener$1.<init>()",
        "org.apache.commons.math3.genetics.UniformCrossover#UniformCrossover(double)",
        "org.apache.commons.math3.genetics.TournamentSelection#TournamentSelection(int)",
        "org.apache.commons.math3.userguide.genetics.ImageEvolutionExample.<staticinit>()",
        "org.apache.commons.math3.genetics.ListPopulation#getFittestChromosome()",
        "org.apache.commons.math3.userguide.genetics.ImageEvolutionExample.Display.<init>()"
    ],
    "org.apache.commons.math3.complex.Complex#nthRoot(int)": [
        "org.apache.commons.math3.exception.util.LocalizedFormats.<staticinit>()",
        "org.apache.commons.math3.complex.Complex#isInfinite()",
        "org.apache.commons.math3.complex.Complex#getArgument()",
        "org.apache.commons.math3.util.FastMath.pow(double,int)",
        "org.apache.commons.math3.util.FastMath.sin(double)",
        "org.apache.commons.math3.complex.Complex.<staticinit>()",
        "org.apache.commons.math3.complex.Complex#abs()",
        "org.apache.commons.math3.complex.Complex#createComplex(double,double)",
        "org.apache.commons.math3.util.FastMath.<staticinit>()",
        "org.apache.commons.math3.util.FastMath.cos(double)"
    ],
    "org.apache.commons.math3.userguide.geometry.GeometryExample.createCanvas()$PBasicInputEventHandler$1#mouseDragged(PInputEvent)": ["org.apache.commons.math3.userguide.geometry.GeometryExample.createCanvas()$PBasicInputEventHandler$1#updateToolTip(PInputEvent)"],
    "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.AbstractSimplex#AbstractSimplex(int,double)": [
        "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.AbstractSimplex.createHypercubeSteps(int,double)",
        "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.AbstractSimplex#AbstractSimplex(double[])"
    ],
    "org.apache.commons.math3.analysis.interpolation.LoessInterpolator#interpolate(double[],double[])": [
        "org.apache.commons.math3.analysis.interpolation.SplineInterpolator.<init>()",
        "org.apache.commons.math3.analysis.interpolation.SplineInterpolator#interpolate(double[],double[])",
        "org.apache.commons.math3.analysis.interpolation.LoessInterpolator#smooth(double[],double[])"
    ],
    "org.apache.commons.math3.ode.events.EventFilter#g(double,double[])": [
        "org.apache.commons.math3.ode.events.EventFilter#g(double,double[])",
        "org.apache.commons.math3.ode.events.Transformer$Transformer$1#transformed(double)",
        "org.apache.commons.math3.ode.events.FilterType$FilterType$1#selectTransformer(Transformer,double,boolean)"
    ],
    "org.apache.commons.math3.optimization.SimpleBounds#SimpleBounds(double[],double[])": ["org.apache.commons.math3.optimization.SimpleBounds.<init>()"],
    "org.apache.commons.math3.analysis.solvers.UnivariateSolverUtils.verifyBracketing(UnivariateFunction,double,double)": [
        "org.apache.commons.math3.analysis.FunctionUtils.multiply(DifferentiableUnivariateFunction[]...)$UnivariateFunction$1$UnivariateFunction$1#derivative()$UnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.polynomials.PolynomialSplineFunction#value(double)",
        "org.apache.commons.math3.analysis.function.Gaussian#value(double)",
        "org.apache.commons.math3.analysis.function.Tanh#value(double)",
        "org.apache.commons.math3.exception.util.LocalizedFormats.<staticinit>()",
        "org.apache.commons.math3.analysis.function.Inverse#value(double)",
        "org.apache.commons.math3.analysis.solvers.UnivariateSolverUtils.isBracketing(UnivariateFunction,double,double)",
        "org.apache.commons.math3.analysis.function.HarmonicOscillator#value(double)",
        "org.apache.commons.math3.exception.NoBracketingException#NoBracketingException(double,double,double,double)",
        "org.apache.commons.math3.analysis.FunctionUtils.fix1stArgument(BivariateFunction,double)$UnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.function.Asin#value(double)",
        "org.apache.commons.math3.analysis.function.Asinh#value(double)",
        "org.apache.commons.math3.analysis.FunctionUtils.multiply(UnivariateFunction[]...)$UnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.function.Atan#value(double)",
        "org.apache.commons.math3.analysis.FunctionUtils.toDifferentiableUnivariateFunction(UnivariateDifferentiableFunction)$DifferentiableUnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.function.Cbrt#value(double)",
        "org.apache.commons.math3.analysis.polynomials.PolynomialFunctionLagrangeForm#value(double)",
        "org.apache.commons.math3.analysis.function.Exp#value(double)",
        "org.apache.commons.math3.special.BesselJ#value(double)",
        "org.apache.commons.math3.analysis.polynomials.PolynomialFunctionNewtonForm#value(double)",
        "org.apache.commons.math3.analysis.FunctionUtils.add(UnivariateFunction[]...)$UnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.function.Sin#value(double)",
        "org.apache.commons.math3.analysis.function.Cos#value(double)",
        "org.apache.commons.math3.analysis.interpolation.UnivariatePeriodicInterpolator#interpolate(double[],double[])$UnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.function.Log10#value(double)",
        "org.apache.commons.math3.analysis.function.Sqrt#value(double)",
        "org.apache.commons.math3.analysis.function.Log#value(double)",
        "org.apache.commons.math3.analysis.function.Sinc#value(double)",
        "org.apache.commons.math3.ode.events.EventState#evaluateStep(StepInterpolator)$UnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.function.Minus#value(double)",
        "org.apache.commons.math3.analysis.integration.IterativeLegendreGaussIntegrator#stage(int)$UnivariateFunction$1#value(double)",
        "org.apache.commons.math3.optimization.general.NonLinearConjugateGradientOptimizer.LineSearchFunction#value(double)",
        "org.apache.commons.math3.analysis.function.Floor#value(double)",
        "org.apache.commons.math3.analysis.FunctionUtils.multiply(DifferentiableUnivariateFunction[]...)$DifferentiableUnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.FunctionUtils.combine(BivariateFunction,UnivariateFunction,UnivariateFunction)$UnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.FunctionUtils.add(DifferentiableUnivariateFunction[]...)$UnivariateFunction$1$UnivariateFunction$1#derivative()$UnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.function.Sinh#value(double)",
        "org.apache.commons.math3.analysis.FunctionUtils.multiply(UnivariateDifferentiableFunction[]...)$UnivariateDifferentiableFunction$1#value(double)",
        "org.apache.commons.math3.analysis.function.Tan#value(double)",
        "org.apache.commons.math3.distribution.AbstractRealDistribution#inverseCumulativeProbability(double)$UnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.FunctionUtils.add(DifferentiableUnivariateFunction[]...)$DifferentiableUnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.function.Ceil#value(double)",
        "org.apache.commons.math3.analysis.function.Logistic#value(double)",
        "org.apache.commons.math3.analysis.function.Signum#value(double)",
        "org.apache.commons.math3.analysis.function.Constant#value(double)",
        "org.apache.commons.math3.analysis.function.Atanh#value(double)",
        "org.apache.commons.math3.analysis.FunctionUtils.compose(DifferentiableUnivariateFunction[]...)$UnivariateFunction$1$UnivariateFunction$1#derivative()$UnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.FunctionUtils.add(UnivariateDifferentiableFunction[]...)$UnivariateDifferentiableFunction$1#value(double)",
        "org.apache.commons.math3.analysis.function.Abs#value(double)",
        "org.apache.commons.math3.analysis.differentiation.FiniteDifferencesDifferentiator#differentiate(UnivariateFunction)$UnivariateDifferentiableFunction$1#value(double)",
        "org.apache.commons.math3.analysis.function.Identity#value(double)",
        "org.apache.commons.math3.analysis.function.Expm1#value(double)",
        "org.apache.commons.math3.analysis.function.Logit#value(double)",
        "org.apache.commons.math3.analysis.function.Log1p#value(double)",
        "org.apache.commons.math3.analysis.FunctionUtils.fix2ndArgument(BivariateFunction,double)$UnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.FunctionUtils.toUnivariateDifferential(DifferentiableUnivariateFunction)$UnivariateDifferentiableFunction$1#value(double)",
        "org.apache.commons.math3.analysis.FunctionUtils.toDifferentiableUnivariateFunction(UnivariateDifferentiableFunction)$UnivariateFunction$1$UnivariateFunction$1#derivative()$UnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.polynomials.PolynomialFunction#value(double)",
        "org.apache.commons.math3.analysis.function.Rint#value(double)",
        "org.apache.commons.math3.analysis.FunctionUtils.compose(UnivariateFunction[]...)$UnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.function.Cosh#value(double)",
        "org.apache.commons.math3.optimization.direct.PowellOptimizer.LineSearch#search(double[],double[])$UnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.FunctionUtils.compose(DifferentiableUnivariateFunction[]...)$DifferentiableUnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.function.Acosh#value(double)",
        "org.apache.commons.math3.analysis.function.StepFunction#value(double)",
        "org.apache.commons.math3.analysis.FunctionUtils.compose(UnivariateDifferentiableFunction[]...)$UnivariateDifferentiableFunction$1#value(double)",
        "org.apache.commons.math3.analysis.function.Acos#value(double)",
        "org.apache.commons.math3.analysis.function.Power#value(double)",
        "org.apache.commons.math3.optim.nonlinear.scalar.LineSearch#search(double[],double[])$UnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.function.Sigmoid#value(double)",
        "org.apache.commons.math3.analysis.function.Ulp#value(double)",
        "org.apache.commons.math3.analysis.solvers.UnivariateSolverUtils.verifyInterval(double,double)"
    ],
    "org.apache.commons.math3.userguide.genetics.HelloWorldExample.StringChromosome#getStringRepresentation()": ["org.apache.commons.math3.genetics.AbstractListChromosome#getRepresentation()"],
    "org.apache.commons.math3.linear.BlockFieldMatrix#scalarMultiply(T extends FieldElement)": [
        "org.apache.commons.math3.linear.BlockFieldMatrix#BlockFieldMatrix(Field<T extends FieldElement>,int,int)",
        "org.apache.commons.math3.linear.AbstractFieldMatrix#getField()"
    ],
    "org.apache.commons.math3.linear.BlockFieldMatrix#walkInOptimizedOrder(FieldMatrixPreservingVisitor<T extends FieldElement>,int,int,int,int)": [
        "org.apache.commons.math3.linear.BlockFieldMatrix#blockWidth(int)",
        "org.apache.commons.math3.util.FastMath.max(int,int)",
        "org.apache.commons.math3.linear.AbstractFieldMatrix#checkSubMatrixIndex(int,int,int,int)",
        "org.apache.commons.math3.linear.AbstractFieldMatrix#transpose()$DefaultFieldMatrixPreservingVisitor$1#visit(int,int,T extends FieldElement)",
        "org.apache.commons.math3.util.FastMath.min(int,int)",
        "org.apache.commons.math3.linear.DefaultFieldMatrixPreservingVisitor#start(int,int,int,int,int,int)",
        "org.apache.commons.math3.linear.DefaultFieldMatrixPreservingVisitor#end()",
        "org.apache.commons.math3.linear.DefaultFieldMatrixPreservingVisitor#visit(int,int,T extends FieldElement)",
        "org.apache.commons.math3.linear.MatrixUtils.FractionMatrixConverter#start(int,int,int,int,int,int)",
        "org.apache.commons.math3.linear.MatrixUtils.BigFractionMatrixConverter#start(int,int,int,int,int,int)",
        "org.apache.commons.math3.linear.AbstractFieldMatrix#copySubMatrix(int,int,int,int,T extends FieldElement[][])$DefaultFieldMatrixPreservingVisitor$1#start(int,int,int,int,int,int)",
        "org.apache.commons.math3.ode.nonstiff.AdamsMoultonFieldIntegrator.Corrector#start(int,int,int,int,int,int)",
        "org.apache.commons.math3.linear.BlockFieldMatrix.<staticinit>()",
        "org.apache.commons.math3.linear.AbstractFieldMatrix#copySubMatrix(int,int,int,int,T extends FieldElement[][])$DefaultFieldMatrixPreservingVisitor$1#visit(int,int,T extends FieldElement)",
        "org.apache.commons.math3.ode.nonstiff.AdamsMoultonFieldIntegrator.Corrector#end()"
    ],
    "org.apache.commons.math3.linear.SparseFieldVector#add(SparseFieldVector<T extends FieldElement>)": [
        "org.apache.commons.math3.linear.SparseFieldVector#checkVectorDimensions(int)",
        "org.apache.commons.math3.linear.SparseFieldVector#getEntries()",
        "org.apache.commons.math3.util.OpenIntToFieldHashMap#get(int)",
        "org.apache.commons.math3.util.OpenIntToFieldHashMap#containsKey(int)",
        "org.apache.commons.math3.util.OpenIntToFieldHashMap.Iterator#hasNext()",
        "org.apache.commons.math3.util.OpenIntToFieldHashMap.Iterator#key()",
        "org.apache.commons.math3.linear.SparseFieldVector#copy()",
        "org.apache.commons.math3.util.OpenIntToFieldHashMap.Iterator#value()",
        "org.apache.commons.math3.linear.SparseFieldVector#setEntry(int,T extends FieldElement)",
        "org.apache.commons.math3.linear.SparseFieldVector#getDimension()",
        "org.apache.commons.math3.util.OpenIntToFieldHashMap#iterator()",
        "org.apache.commons.math3.util.OpenIntToFieldHashMap.Iterator#advance()"
    ],
    "org.apache.commons.math3.optim.linear.SimplexSolver#parseOptimizationData(OptimizationData[]...)": ["org.apache.commons.math3.optim.linear.LinearOptimizer#parseOptimizationData(OptimizationData[]...)"],
    "org.apache.commons.math3.stat.descriptive.DescriptiveStatistics#addValue(double)": [
        "org.apache.commons.math3.util.ResizableDoubleArray#addElement(double)",
        "org.apache.commons.math3.util.ResizableDoubleArray#addElementRolling(double)",
        "org.apache.commons.math3.stat.descriptive.DescriptiveStatistics.<staticinit>()",
        "org.apache.commons.math3.stat.descriptive.DescriptiveStatistics#getN()",
        "org.apache.commons.math3.stat.descriptive.SynchronizedDescriptiveStatistics#getN()"
    ],
    "org.apache.commons.math3.analysis.differentiation.SparseGradient#hashCode()": ["org.apache.commons.math3.util.MathUtils.hash(double)"],
    "org.apache.commons.math3.analysis.function.Sin#value(DerivativeStructure)": ["org.apache.commons.math3.analysis.differentiation.DerivativeStructure#sin()"],
    "org.apache.commons.math3.optim.PointVectorValuePair#getValueRef()": ["org.apache.commons.math3.util.Pair#getValue()"],
    "org.apache.commons.math3.optimization.direct.PowellOptimizer.<staticinit>()": ["org.apache.commons.math3.util.FastMath.ulp(double)"],
    "org.apache.commons.math3.linear.MatrixUtils.checkColumnIndex(AnyMatrix,int)": [
        "org.apache.commons.math3.linear.SparseFieldMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.DiagonalMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.Array2DRowRealMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.BlockFieldMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.OpenMapRealMatrix#getColumnDimension()",
        "org.apache.commons.math3.exception.util.LocalizedFormats.<staticinit>()",
        "org.apache.commons.math3.linear.BlockRealMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.Array2DRowFieldMatrix#getColumnDimension()"
    ],
    "org.apache.commons.math3.complex.ComplexFormat#format(Double)": [
        "org.apache.commons.math3.complex.ComplexFormat#format(Complex,StringBuffer,FieldPosition)",
        "org.apache.commons.math3.complex.Complex#Complex(double,double)"
    ],
    "org.apache.commons.math3.geometry.euclidean.twod.Vector2D#getZero()": ["org.apache.commons.math3.geometry.euclidean.twod.Vector2D.<staticinit>()"],
    "org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.Vertex#setOutgoing(Edge)": [
        "org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.Vertex#bindWith(Line)",
        "org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.Edge#getLine()"
    ],
    "org.apache.commons.math3.ml.neuralnet.Network#deleteLink(Neuron,Neuron)": [
        "org.apache.commons.math3.ml.neuralnet.Neuron#getIdentifier()",
        "org.apache.commons.math3.ml.neuralnet.Network#deleteLinkFromLinkSet(Set<Long>,long)",
        "org.apache.commons.math3.ml.neuralnet.Network#getNeuron(long)"
    ],
    "org.apache.commons.math3.linear.AbstractFieldMatrix#copySubMatrix(int,int,int,int,T extends FieldElement[][])": [
        "org.apache.commons.math3.linear.AbstractFieldMatrix#walkInOptimizedOrder(FieldMatrixPreservingVisitor<T extends FieldElement>,int,int,int,int)",
        "org.apache.commons.math3.util.BigRealField#getZero()",
        "org.apache.commons.math3.analysis.differentiation.SparseGradient#getField()$Field$1#getZero()",
        "org.apache.commons.math3.util.Decimal64Field#getZero()",
        "org.apache.commons.math3.linear.AbstractFieldMatrix#checkSubMatrixIndex(int,int,int,int)",
        "org.apache.commons.math3.dfp.DfpField#getZero()",
        "org.apache.commons.math3.linear.BlockFieldMatrix#walkInOptimizedOrder(FieldMatrixPreservingVisitor<T extends FieldElement>,int,int,int,int)",
        "org.apache.commons.math3.linear.AbstractFieldMatrix#copySubMatrix(int,int,int,int,T extends FieldElement[][])$DefaultFieldMatrixPreservingVisitor$1.<init>()",
        "org.apache.commons.math3.analysis.differentiation.DerivativeStructure#getField()$Field$1#getZero()",
        "org.apache.commons.math3.fraction.FractionField#getZero()",
        "org.apache.commons.math3.linear.MatrixDimensionMismatchException#MatrixDimensionMismatchException(int,int,int,int)",
        "org.apache.commons.math3.complex.ComplexField#getZero()",
        "org.apache.commons.math3.fraction.BigFractionField#getZero()"
    ],
    "org.apache.commons.math3.userguide.sofm.ChineseRingsClassifier#computeU()": ["org.apache.commons.math3.ml.neuralnet.MapUtils.computeU(NeuronSquareMesh2D,DistanceMeasure)"],
    "org.apache.commons.math3.geometry.euclidean.oned.Vector1D#toString()": [
        "org.apache.commons.math3.geometry.euclidean.oned.Vector1DFormat.getInstance()",
        "org.apache.commons.math3.geometry.VectorFormat#format(Vector<S extends Space>)"
    ],
    "org.apache.commons.math3.geometry.spherical.twod.S2Point#S2Point(Vector3D)": [
        "org.apache.commons.math3.geometry.euclidean.threed.Vector3D#normalize()",
        "org.apache.commons.math3.geometry.euclidean.threed.Vector3D.<staticinit>()",
        "org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(Vector3D,Vector3D)",
        "org.apache.commons.math3.geometry.euclidean.threed.Vector3D#getY()",
        "org.apache.commons.math3.geometry.spherical.twod.S2Point#S2Point(double,double,Vector3D)",
        "org.apache.commons.math3.geometry.euclidean.threed.Vector3D#getX()",
        "org.apache.commons.math3.util.FastMath.atan2(double,double)"
    ],
    "org.apache.commons.math3.linear.Array2DRowRealMatrix#copy()": [
        "org.apache.commons.math3.linear.Array2DRowRealMatrix#copyOut()",
        "org.apache.commons.math3.linear.Array2DRowRealMatrix#Array2DRowRealMatrix(double[][],boolean)"
    ],
    "org.apache.commons.math3.stat.descriptive.SynchronizedSummaryStatistics#setSumImpl(StorelessUnivariateStatistic)": ["org.apache.commons.math3.stat.descriptive.SummaryStatistics#setSumImpl(StorelessUnivariateStatistic)"],
    "org.apache.commons.math3.dfp.DfpField#newDfp()": ["org.apache.commons.math3.dfp.Dfp#Dfp(DfpField)"],
    "org.apache.commons.math3.analysis.differentiation.SparseGradient#pow(int)": [
        "org.apache.commons.math3.analysis.differentiation.SparseGradient#getField()",
        "org.apache.commons.math3.util.FastMath.pow(double,int)",
        "org.apache.commons.math3.analysis.differentiation.SparseGradient#SparseGradient(double,double,Map<Integer, Double>)",
        "org.apache.commons.math3.analysis.differentiation.SparseGradient#getField()$Field$1#getOne()"
    ],
    "org.apache.commons.math3.linear.SparseFieldVector#mapAdd(T extends FieldElement)": [
        "org.apache.commons.math3.linear.SparseFieldVector#copy()",
        "org.apache.commons.math3.linear.ArrayFieldVector#mapAddToSelf(T extends FieldElement)",
        "org.apache.commons.math3.linear.SparseFieldVector#mapAddToSelf(T extends FieldElement)"
    ],
    "org.apache.commons.math3.complex.Quaternion#normalize()": [
        "org.apache.commons.math3.complex.Quaternion#getNorm()",
        "org.apache.commons.math3.util.Precision.<staticinit>()",
        "org.apache.commons.math3.complex.Quaternion#Quaternion(double,double,double,double)",
        "org.apache.commons.math3.exception.util.LocalizedFormats.<staticinit>()"
    ],
    "org.apache.commons.math3.linear.AbstractFieldMatrix#setRow(int,T extends FieldElement[])": [
        "org.apache.commons.math3.linear.SparseFieldMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.BlockFieldMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.SparseFieldMatrix#setEntry(int,int,T extends FieldElement)",
        "org.apache.commons.math3.linear.Array2DRowFieldMatrix#setEntry(int,int,T extends FieldElement)",
        "org.apache.commons.math3.linear.BlockFieldMatrix#setEntry(int,int,T extends FieldElement)",
        "org.apache.commons.math3.linear.MatrixDimensionMismatchException#MatrixDimensionMismatchException(int,int,int,int)",
        "org.apache.commons.math3.linear.Array2DRowFieldMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.AbstractFieldMatrix#checkRowIndex(int)"
    ],
    "org.apache.commons.math3.linear.ArrayRealVector#ArrayRealVector(Double[],int,int)": [
        "org.apache.commons.math3.exception.NullArgumentException#NullArgumentException()",
        "org.apache.commons.math3.linear.RealVector.<init>()",
        "org.apache.commons.math3.linear.ArrayRealVector.<init>()"
    ],
    "org.apache.commons.math3.analysis.function.Minus#derivative()": ["org.apache.commons.math3.analysis.function.Constant#Constant(double)"],
    "org.apache.commons.math3.stat.ranking.NaturalRanking#resolveTie(double[],List<Integer>)": [
        "org.apache.commons.math3.random.RandomDataGenerator#nextLong(long,long)",
        "org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet.SubIntervalsIterator#hasNext()",
        "org.apache.commons.math3.util.MultidimensionalCounter.Iterator#next()",
        "org.apache.commons.math3.exception.MathInternalError#MathInternalError()",
        "org.apache.commons.math3.linear.RealVector#iterator()$Iterator$1#hasNext()",
        "org.apache.commons.math3.userguide.sofm.ChineseRingsClassifier#createRandomIterator(long)$Iterator$1#hasNext()",
        "org.apache.commons.math3.util.IntegerSequence.Incrementor#hasNext()",
        "org.apache.commons.math3.linear.RealVector.unmodifiableRealVector(RealVector)$Iterator$1$Iterator$1#sparseIterator()$Iterator$1#hasNext()",
        "org.apache.commons.math3.geometry.spherical.oned.ArcsSet.SubArcsIterator#hasNext()",
        "org.apache.commons.math3.util.Combinations.LexicographicIterator#hasNext()",
        "org.apache.commons.math3.util.IntegerSequence.Incrementor#next()",
        "org.apache.commons.math3.stat.ranking.TiesStrategy.<staticinit>()",
        "org.apache.commons.math3.linear.RealVector.SparseEntryIterator#hasNext()",
        "org.apache.commons.math3.userguide.sofm.ChineseRingsClassifier#createIterable()$Iterator$1$Iterator$1#iterator()$Iterator$1#hasNext()",
        "org.apache.commons.math3.util.FastMath.round(double)",
        "org.apache.commons.math3.stat.ranking.NaturalRanking#fill(double[],List<Integer>,double)",
        "org.apache.commons.math3.linear.RealVector.unmodifiableRealVector(RealVector)$Iterator$1$Iterator$1#iterator()$Iterator$1#hasNext()",
        "org.apache.commons.math3.util.Combinations.SingletonIterator#hasNext()",
        "org.apache.commons.math3.util.MultidimensionalCounter.Iterator#hasNext()"
    ],
    "org.apache.commons.math3.fitting.leastsquares.LeastSquaresFactory.LocalValueAndJacobianFunction#computeJacobian(double[])": [
        "org.apache.commons.math3.optimization.fitting.CurveFitter.OldTheoreticalValuesFunction#jacobian()$MultivariateMatrixFunction$1#value(double[])",
        "org.apache.commons.math3.fitting.AbstractCurveFitter.TheoreticalValuesFunction#getModelFunctionJacobian()$MultivariateMatrixFunction$1#value(double[])",
        "org.apache.commons.math3.analysis.differentiation.JacobianFunction#value(double[])",
        "org.apache.commons.math3.fitting.CurveFitter.TheoreticalValuesFunction#getModelFunctionJacobian()$MultivariateMatrixFunction$1#value(double[])",
        "org.apache.commons.math3.analysis.FunctionUtils.toDifferentiableMultivariateVectorFunction(MultivariateDifferentiableVectorFunction)$MultivariateMatrixFunction$1$MultivariateMatrixFunction$1#jacobian()$MultivariateMatrixFunction$1#value(double[])",
        "org.apache.commons.math3.linear.Array2DRowRealMatrix#Array2DRowRealMatrix(double[][],boolean)"
    ],
    "org.apache.commons.math3.geometry.euclidean.oned.Vector1D#getSpace()": ["org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D.getInstance()"],
    "org.apache.commons.math3.userguide.genetics.ImageEvolutionExample.Display#Display()$ActionListener$1#actionPerformed(ActionEvent)": [
        "org.apache.commons.math3.userguide.genetics.ImageEvolutionExample.Display#isAlive()",
        "org.apache.commons.math3.userguide.genetics.ImageEvolutionExample.Display#stopRequest()",
        "org.apache.commons.math3.userguide.genetics.ImageEvolutionExample.Display#startEvolution()"
    ],
    "org.apache.commons.math3.distribution.GumbelDistribution#inverseCumulativeProbability(double)": ["org.apache.commons.math3.util.FastMath.log(double)"],
    "org.apache.commons.math3.fraction.BigFractionFormat.formatBigFraction(BigFraction)": ["org.apache.commons.math3.fraction.BigFractionFormat.getImproperInstance()"],
    "org.apache.commons.math3.random.RandomDataImpl#nextChiSquare(double)": ["org.apache.commons.math3.random.RandomDataGenerator#nextChiSquare(double)"],
    "org.apache.commons.math3.analysis.differentiation.DerivativeStructure#round()": ["org.apache.commons.math3.util.FastMath.round(double)"],
    "org.apache.commons.math3.linear.OpenMapRealVector#hashCode()": [
        "org.apache.commons.math3.util.OpenIntToDoubleHashMap.Iterator#advance()",
        "org.apache.commons.math3.util.OpenIntToDoubleHashMap.Iterator#value()",
        "org.apache.commons.math3.util.OpenIntToDoubleHashMap#iterator()",
        "org.apache.commons.math3.util.OpenIntToDoubleHashMap.Iterator#hasNext()"
    ],
    "org.apache.commons.math3.linear.ArrayFieldVector#mapSubtract(T extends FieldElement)": [
        "org.apache.commons.math3.util.MathArrays.buildArray(Field<T>,int)",
        "org.apache.commons.math3.linear.ArrayFieldVector#ArrayFieldVector(Field<T extends FieldElement>,T extends FieldElement[],boolean)"
    ],
    "org.apache.commons.math3.linear.EigenDecomposition.Solver#getInverse()": [
        "org.apache.commons.math3.linear.SingularMatrixException#SingularMatrixException()",
        "org.apache.commons.math3.linear.ArrayRealVector#getDataRef()",
        "org.apache.commons.math3.linear.MatrixUtils.createRealMatrix(double[][])",
        "org.apache.commons.math3.linear.EigenDecomposition.Solver#isNonSingular()"
    ],
    "org.apache.commons.math3.linear.QRDecomposition#getH()": [
        "org.apache.commons.math3.linear.MatrixUtils.createRealMatrix(double[][])",
        "org.apache.commons.math3.util.FastMath.min(int,int)"
    ],
    "org.apache.commons.math3.geometry.euclidean.twod.hull.MonotoneChain#findHullVertices(Collection<Vector2D>)$Comparator$1#compare(Vector2D,Vector2D)": [
        "org.apache.commons.math3.geometry.euclidean.twod.hull.AbstractConvexHullGenerator2D#getTolerance()",
        "org.apache.commons.math3.geometry.euclidean.twod.Vector2D#getY()",
        "org.apache.commons.math3.geometry.euclidean.twod.Vector2D#getX()",
        "org.apache.commons.math3.util.Precision.compareTo(double,double,double)"
    ],
    "org.apache.commons.math3.distribution.ZipfDistribution.ZipfRejectionInversionSampler#h(double)": [
        "org.apache.commons.math3.util.FastMath.log(double)",
        "org.apache.commons.math3.util.FastMath.exp(double)"
    ],
    "org.apache.commons.math3.analysis.differentiation.DerivativeStructure#writeReplace()": [
        "org.apache.commons.math3.analysis.differentiation.DSCompiler#getFreeParameters()",
        "org.apache.commons.math3.analysis.differentiation.DSCompiler#getOrder()",
        "org.apache.commons.math3.analysis.differentiation.DerivativeStructure.DataTransferObject#DataTransferObject(int,int,double[])"
    ],
    "org.apache.commons.math3.optim.univariate.BracketFinder#BracketFinder()": ["org.apache.commons.math3.optim.univariate.BracketFinder#BracketFinder(double,int)"],
    "org.apache.commons.math3.stat.descriptive.moment.VectorialMean#VectorialMean(int)": [
        "org.apache.commons.math3.stat.descriptive.moment.Mean#Mean()",
        "org.apache.commons.math3.stat.descriptive.moment.VectorialMean.<init>()"
    ],
    "org.apache.commons.math3.analysis.interpolation.FieldHermiteInterpolator#derivatives(T extends FieldElement,int)": [
        "org.apache.commons.math3.exception.NoDataException#NoDataException(Localizable)",
        "org.apache.commons.math3.util.MathArrays.buildArray(Field<T>,int,int)",
        "org.apache.commons.math3.util.MathUtils.checkNotNull(Object)",
        "org.apache.commons.math3.util.MathArrays.buildArray(Field<T>,int)",
        "org.apache.commons.math3.exception.util.LocalizedFormats.<staticinit>()"
    ],
    "org.apache.commons.math3.distribution.EnumeratedDistribution#sample(int)": [
        "org.apache.commons.math3.distribution.EnumeratedDistribution#sample()",
        "org.apache.commons.math3.exception.util.LocalizedFormats.<staticinit>()"
    ],
    "org.apache.commons.math3.linear.RectangularCholeskyDecomposition#RectangularCholeskyDecomposition(RealMatrix)": ["org.apache.commons.math3.linear.RectangularCholeskyDecomposition#RectangularCholeskyDecomposition(RealMatrix,double)"],
    "org.apache.commons.math3.stat.correlation.Covariance#Covariance(double[][])": ["org.apache.commons.math3.stat.correlation.Covariance#Covariance(double[][],boolean)"],
    "org.apache.commons.math3.linear.ArrayRealVector#hashCode()": [
        "org.apache.commons.math3.util.MathUtils.hash(double[])",
        "org.apache.commons.math3.linear.ArrayRealVector#isNaN()"
    ],
    "org.apache.commons.math3.linear.AbstractFieldMatrix#AbstractFieldMatrix()": ["org.apache.commons.math3.linear.AbstractFieldMatrix.<init>()"],
    "org.apache.commons.math3.random.EmpiricalDistribution#reSeed(long)": ["org.apache.commons.math3.random.RandomDataGenerator#reSeed(long)"],
    "org.apache.commons.math3.stat.descriptive.summary.Product#evaluate(double[],double[])": ["org.apache.commons.math3.stat.descriptive.summary.Product#evaluate(double[],double[],int,int)"],
    "org.apache.commons.math3.linear.RealVector#getLInfNorm()": [
        "org.apache.commons.math3.linear.RealVector.Entry#getValue()",
        "org.apache.commons.math3.linear.RealVector.unmodifiableRealVector(RealVector)$Iterator$1$Iterator$1#iterator()$Iterator$1#next()",
        "org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet.SubIntervalsIterator#hasNext()",
        "org.apache.commons.math3.linear.RealVector#iterator()",
        "org.apache.commons.math3.util.FastMath.max(double,double)",
        "org.apache.commons.math3.linear.RealVector#iterator()$Iterator$1#hasNext()",
        "org.apache.commons.math3.userguide.sofm.ChineseRingsClassifier#createRandomIterator(long)$Iterator$1#hasNext()",
        "org.apache.commons.math3.util.IntegerSequence.Incrementor#hasNext()",
        "org.apache.commons.math3.linear.RealVector.unmodifiableRealVector(RealVector)$Iterator$1$Iterator$1#sparseIterator()$Iterator$1#hasNext()",
        "org.apache.commons.math3.linear.RealVector.unmodifiableRealVector(RealVector)$RealVector$1#iterator()",
        "org.apache.commons.math3.geometry.spherical.oned.ArcsSet.SubArcsIterator#hasNext()",
        "org.apache.commons.math3.linear.RealVector#iterator()$Iterator$1#next()",
        "org.apache.commons.math3.util.Combinations.LexicographicIterator#hasNext()",
        "org.apache.commons.math3.linear.OpenMapRealVector.OpenMapEntry#getValue()",
        "org.apache.commons.math3.linear.RealVector.unmodifiableRealVector(RealVector).UnmodifiableEntry.UnmodifiableEntry#getValue()",
        "org.apache.commons.math3.linear.RealVector.SparseEntryIterator#hasNext()",
        "org.apache.commons.math3.util.FastMath.abs(double)",
        "org.apache.commons.math3.userguide.sofm.ChineseRingsClassifier#createIterable()$Iterator$1$Iterator$1#iterator()$Iterator$1#hasNext()",
        "org.apache.commons.math3.linear.RealVector.unmodifiableRealVector(RealVector)$Iterator$1$Iterator$1#iterator()$Iterator$1#hasNext()",
        "org.apache.commons.math3.util.Combinations.SingletonIterator#hasNext()",
        "org.apache.commons.math3.linear.RealVector.SparseEntryIterator#next()",
        "org.apache.commons.math3.linear.RealVector.unmodifiableRealVector(RealVector)$Iterator$1$Iterator$1#sparseIterator()$Iterator$1#next()",
        "org.apache.commons.math3.util.MultidimensionalCounter.Iterator#hasNext()"
    ],
    "org.apache.commons.math3.complex.RootsOfUnity#getImaginary(int)": [
        "org.apache.commons.math3.exception.OutOfRangeException#OutOfRangeException(Localizable,Number,Number,Number)",
        "org.apache.commons.math3.exception.util.LocalizedFormats.<staticinit>()"
    ],
    "org.apache.commons.math3.geometry.spherical.twod.SphericalPolygonsSet#getOutsidePoints()": [
        "org.apache.commons.math3.geometry.partitioning.BSPTree#visit(BSPTreeVisitor<S extends Space>)",
        "org.apache.commons.math3.geometry.partitioning.RegionFactory#getComplement(Region<S extends Space>)",
        "org.apache.commons.math3.geometry.partitioning.AbstractRegion#getTolerance()",
        "org.apache.commons.math3.geometry.partitioning.AbstractRegion#getTree(boolean)",
        "org.apache.commons.math3.geometry.spherical.twod.PropertiesComputer#PropertiesComputer(double)",
        "org.apache.commons.math3.geometry.spherical.twod.PropertiesComputer#getConvexCellsInsidePoints()",
        "org.apache.commons.math3.geometry.partitioning.RegionFactory#RegionFactory()"
    ],
    "org.apache.commons.math3.stat.inference.TestUtils.monteCarloP(double,int,int,boolean,int)": [
        "org.apache.commons.math3.stat.inference.KolmogorovSmirnovTest#monteCarloP(double,int,int,boolean,int)",
        "org.apache.commons.math3.stat.inference.TestUtils.<staticinit>()"
    ],
    "org.apache.commons.math3.stat.descriptive.summary.SumOfLogs#SumOfLogs(SumOfLogs)": [
        "org.apache.commons.math3.stat.descriptive.summary.SumOfLogs.<init>()",
        "org.apache.commons.math3.stat.descriptive.summary.SumOfLogs.copy(SumOfLogs,SumOfLogs)",
        "org.apache.commons.math3.stat.descriptive.AbstractStorelessUnivariateStatistic.<init>()"
    ],
    "org.apache.commons.math3.analysis.interpolation.InterpolatingMicrosphere#add(double[],boolean)": [
        "org.apache.commons.math3.exception.DimensionMismatchException#DimensionMismatchException(int,int)",
        "org.apache.commons.math3.analysis.interpolation.InterpolatingMicrosphere.FacetData#FacetData(double,double)",
        "org.apache.commons.math3.analysis.interpolation.InterpolatingMicrosphere.Facet#Facet(double[])"
    ],
    "org.apache.commons.math3.stat.descriptive.SynchronizedSummaryStatistics#getGeoMeanImpl()": ["org.apache.commons.math3.stat.descriptive.SummaryStatistics#getGeoMeanImpl()"],
    "org.apache.commons.math3.ode.nonstiff.ThreeEighthesFieldIntegrator#createInterpolator(boolean,T extends RealFieldElement[][],FieldODEStateAndDerivative<T extends RealFieldElement>,FieldODEStateAndDerivative<T extends RealFieldElement>,FieldEquationsMapper<T extends RealFieldElement>)": [
        "org.apache.commons.math3.ode.AbstractFieldIntegrator#getField()",
        "org.apache.commons.math3.ode.nonstiff.ThreeEighthesFieldStepInterpolator#ThreeEighthesFieldStepInterpolator(Field<T extends RealFieldElement>,boolean,T extends RealFieldElement[][],FieldODEStateAndDerivative<T extends RealFieldElement>,FieldODEStateAndDerivative<T extends RealFieldElement>,FieldODEStateAndDerivative<T extends RealFieldElement>,FieldODEStateAndDerivative<T extends RealFieldElement>,FieldEquationsMapper<T extends RealFieldElement>)"
    ],
    "org.apache.commons.math3.linear.BlockRealMatrix#setColumnMatrix(int,RealMatrix)": [
        "org.apache.commons.math3.linear.AbstractRealMatrix#setColumnMatrix(int,RealMatrix)",
        "org.apache.commons.math3.linear.BlockRealMatrix#setColumnMatrix(int,BlockRealMatrix)"
    ],
    "org.apache.commons.math3.optimization.BaseMultivariateVectorMultiStartOptimizer#BaseMultivariateVectorMultiStartOptimizer(BaseMultivariateVectorOptimizer<FUNC extends MultivariateVectorFunction>,int,RandomVectorGenerator)": [
        "org.apache.commons.math3.exception.NullArgumentException#NullArgumentException()",
        "org.apache.commons.math3.optimization.BaseMultivariateVectorMultiStartOptimizer.<init>()"
    ],
    "org.apache.commons.math3.linear.SparseFieldVector#checkVectorDimensions(int)": [
        "org.apache.commons.math3.exception.DimensionMismatchException#DimensionMismatchException(int,int)",
        "org.apache.commons.math3.linear.SparseFieldVector#getDimension()"
    ],
    "org.apache.commons.math3.fitting.leastsquares.GaussNewtonOptimizer.Decomposition$Decomposition$1#solve(RealMatrix,RealVector)": [
        "org.apache.commons.math3.linear.QRDecomposition#QRDecomposition(RealMatrix,double)",
        "org.apache.commons.math3.linear.QRDecomposition.Solver#solve(RealVector)",
        "org.apache.commons.math3.linear.CholeskyDecomposition.Solver#solve(RealVector)",
        "org.apache.commons.math3.linear.SingularValueDecomposition.Solver#solve(RealVector)",
        "org.apache.commons.math3.linear.QRDecomposition#getSolver()",
        "org.apache.commons.math3.linear.RRQRDecomposition.Solver#solve(RealVector)",
        "org.apache.commons.math3.exception.util.LocalizedFormats.<staticinit>()",
        "org.apache.commons.math3.fitting.leastsquares.GaussNewtonOptimizer.<staticinit>()",
        "org.apache.commons.math3.linear.LUDecomposition.Solver#solve(RealVector)",
        "org.apache.commons.math3.linear.RRQRDecomposition#getSolver()",
        "org.apache.commons.math3.linear.EigenDecomposition.Solver#solve(RealVector)"
    ],
    "org.apache.commons.math3.fraction.Fraction#divide(Fraction)": [
        "org.apache.commons.math3.fraction.Fraction#multiply(Fraction)",
        "org.apache.commons.math3.exception.util.LocalizedFormats.<staticinit>()",
        "org.apache.commons.math3.fraction.Fraction#reciprocal()"
    ],
    "org.apache.commons.math3.geometry.euclidean.threed.Vector3D#scalarMultiply(double)": ["org.apache.commons.math3.geometry.euclidean.threed.Vector3D#Vector3D(double,double,double)"],
    "org.apache.commons.math3.linear.ArrayRealVector#ArrayRealVector(ArrayRealVector,double[])": [
        "org.apache.commons.math3.linear.ArrayRealVector#getDimension()",
        "org.apache.commons.math3.linear.RealVector.<init>()",
        "org.apache.commons.math3.linear.ArrayRealVector.<init>()"
    ],
    "org.apache.commons.math3.linear.ArrayRealVector#ArrayRealVector(double[],double[])": [
        "org.apache.commons.math3.linear.RealVector.<init>()",
        "org.apache.commons.math3.linear.ArrayRealVector.<init>()"
    ],
    "org.apache.commons.math3.optim.univariate.MultiStartUnivariateOptimizer#getOptima()": ["org.apache.commons.math3.exception.util.LocalizedFormats.<staticinit>()"],
    "org.apache.commons.math3.linear.OpenMapRealVector#setSubVector(int,RealVector)": [
        "org.apache.commons.math3.linear.OpenMapRealVector#getDimension()",
        "org.apache.commons.math3.linear.ArrayRealVector#getDimension()",
        "org.apache.commons.math3.linear.OpenMapRealVector#setEntry(int,double)",
        "org.apache.commons.math3.linear.RealVector#checkIndex(int)",
        "org.apache.commons.math3.linear.RealVector.unmodifiableRealVector(RealVector)$RealVector$1#getDimension()",
        "org.apache.commons.math3.linear.ArrayRealVector#getEntry(int)",
        "org.apache.commons.math3.linear.OpenMapRealVector#getEntry(int)",
        "org.apache.commons.math3.linear.RealVector.unmodifiableRealVector(RealVector)$RealVector$1#getEntry(int)"
    ],
    "org.apache.commons.math3.ode.nonstiff.ThreeEighthesIntegrator#ThreeEighthesIntegrator(double)": [
        "org.apache.commons.math3.ode.nonstiff.ThreeEighthesStepInterpolator#ThreeEighthesStepInterpolator()",
        "org.apache.commons.math3.ode.nonstiff.ThreeEighthesIntegrator.<staticinit>()",
        "org.apache.commons.math3.ode.nonstiff.RungeKuttaIntegrator#RungeKuttaIntegrator(String,double[],double[][],double[],RungeKuttaStepInterpolator,double)",
        "org.apache.commons.math3.ode.nonstiff.ThreeEighthesIntegrator.<init>()"
    ],
    "org.apache.commons.math3.analysis.interpolation.BicubicFunction#BicubicFunction(double[])": [
        "org.apache.commons.math3.analysis.interpolation.BicubicFunction.<init>()",
        "org.apache.commons.math3.analysis.interpolation.BicubicFunction.<staticinit>()"
    ],
    "org.apache.commons.math3.analysis.integration.BaseAbstractUnivariateIntegrator#BaseAbstractUnivariateIntegrator(double,double,int,int)": [
        "org.apache.commons.math3.util.Precision.<staticinit>()",
        "org.apache.commons.math3.util.IntegerSequence.Incrementor.create()",
        "org.apache.commons.math3.util.Incrementor.wrap(Incrementor)",
        "org.apache.commons.math3.analysis.integration.BaseAbstractUnivariateIntegrator.<init>()",
        "org.apache.commons.math3.util.IntegerSequence.Incrementor#withMaximalCount(int)"
    ],
    "org.apache.commons.math3.stat.descriptive.moment.Kurtosis#Kurtosis()": [
        "org.apache.commons.math3.stat.descriptive.moment.FourthMoment#FourthMoment()",
        "org.apache.commons.math3.stat.descriptive.AbstractStorelessUnivariateStatistic.<init>()",
        "org.apache.commons.math3.stat.descriptive.moment.Kurtosis.<init>()"
    ],
    "org.apache.commons.math3.linear.Array2DRowRealMatrix#walkInRowOrder(RealMatrixPreservingVisitor)": [
        "org.apache.commons.math3.linear.Array2DRowRealMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.DefaultRealMatrixPreservingVisitor#start(int,int,int,int,int,int)",
        "org.apache.commons.math3.linear.AbstractRealMatrix#copySubMatrix(int,int,int,int,double[][])$DefaultRealMatrixPreservingVisitor$1#start(int,int,int,int,int,int)",
        "org.apache.commons.math3.linear.DefaultRealMatrixPreservingVisitor#visit(int,int,double)",
        "org.apache.commons.math3.linear.SingularValueDecomposition#getCovariance(double)$DefaultRealMatrixPreservingVisitor$1#visit(int,int,double)",
        "org.apache.commons.math3.linear.AbstractRealMatrix#getNorm()$RealMatrixPreservingVisitor$1#end()",
        "org.apache.commons.math3.linear.AbstractRealMatrix#getFrobeniusNorm()$RealMatrixPreservingVisitor$1#end()",
        "org.apache.commons.math3.linear.AbstractRealMatrix#getFrobeniusNorm()$RealMatrixPreservingVisitor$1#visit(int,int,double)",
        "org.apache.commons.math3.linear.DefaultRealMatrixPreservingVisitor#end()",
        "org.apache.commons.math3.linear.AbstractRealMatrix#getFrobeniusNorm()$RealMatrixPreservingVisitor$1#start(int,int,int,int,int,int)",
        "org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator.Corrector#start(int,int,int,int,int,int)",
        "org.apache.commons.math3.linear.AbstractRealMatrix#getNorm()$RealMatrixPreservingVisitor$1#visit(int,int,double)",
        "org.apache.commons.math3.linear.AbstractRealMatrix#copySubMatrix(int,int,int,int,double[][])$DefaultRealMatrixPreservingVisitor$1#visit(int,int,double)",
        "org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator.Corrector#visit(int,int,double)",
        "org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator.Corrector#end()",
        "org.apache.commons.math3.linear.Array2DRowRealMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.AbstractRealMatrix#getNorm()$RealMatrixPreservingVisitor$1#start(int,int,int,int,int,int)",
        "org.apache.commons.math3.linear.AbstractRealMatrix#transpose()$DefaultRealMatrixPreservingVisitor$1#visit(int,int,double)"
    ],
    "org.apache.commons.math3.linear.MatrixUtils.checkAdditionCompatible(AnyMatrix,AnyMatrix)": [
        "org.apache.commons.math3.linear.DiagonalMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.Array2DRowRealMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.BlockFieldMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.SparseFieldMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.OpenMapRealMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.OpenMapRealMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.DiagonalMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.Array2DRowFieldMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.BlockFieldMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.SparseFieldMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.BlockRealMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.Array2DRowRealMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.Array2DRowFieldMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.BlockRealMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.MatrixDimensionMismatchException#MatrixDimensionMismatchException(int,int,int,int)"
    ],
    "org.apache.commons.math3.stat.inference.TestUtils.gTestDataSetsComparison(long[],long[])": [
        "org.apache.commons.math3.stat.inference.GTest#gTestDataSetsComparison(long[],long[])",
        "org.apache.commons.math3.stat.inference.TestUtils.<staticinit>()"
    ],
    "org.apache.commons.math3.stat.inference.TTest#tTest(double[],double[])": [
        "org.apache.commons.math3.stat.inference.TTest#tTest(double,double,double,double,double,double)",
        "org.apache.commons.math3.stat.StatUtils.mean(double[])",
        "org.apache.commons.math3.stat.inference.TTest#checkSampleData(double[])",
        "org.apache.commons.math3.stat.StatUtils.variance(double[])"
    ],
    "org.apache.commons.math3.random.Well19937c#Well19937c(long)": [
        "org.apache.commons.math3.random.Well19937c.<staticinit>()",
        "org.apache.commons.math3.random.Well19937c.<init>()",
        "org.apache.commons.math3.random.AbstractWell#AbstractWell(int,int,int,int,long)"
    ],
    "org.apache.commons.math3.complex.Complex#atan()": [
        "org.apache.commons.math3.complex.Complex#add(Complex)",
        "org.apache.commons.math3.complex.Complex#multiply(Complex)",
        "org.apache.commons.math3.complex.Complex#subtract(Complex)",
        "org.apache.commons.math3.complex.Complex#log()",
        "org.apache.commons.math3.complex.Complex.<staticinit>()",
        "org.apache.commons.math3.complex.Complex#createComplex(double,double)",
        "org.apache.commons.math3.complex.Complex#divide(Complex)"
    ],
    "org.apache.commons.math3.stat.descriptive.SynchronizedSummaryStatistics#getMin()": ["org.apache.commons.math3.stat.descriptive.SummaryStatistics#getMin()"],
    "org.apache.commons.math3.random.RandomGeneratorFactory.createRandomGenerator(Random)$RandomGenerator$1#nextInt()": ["org.apache.commons.math3.random.RandomAdaptor#nextInt()"],
    "org.apache.commons.math3.special.Beta#Beta()": ["org.apache.commons.math3.special.Beta.<init>()"],
    "org.apache.commons.math3.ode.nonstiff.LutherStepInterpolator.<staticinit>()": ["org.apache.commons.math3.util.FastMath.sqrt(double)"],
    "org.apache.commons.math3.optimization.direct.CMAESOptimizer.zeros(int,int)": ["org.apache.commons.math3.linear.Array2DRowRealMatrix#Array2DRowRealMatrix(int,int)"],
    "org.apache.commons.math3.optimization.direct.CMAESOptimizer#CMAESOptimizer()": ["org.apache.commons.math3.optimization.direct.CMAESOptimizer#CMAESOptimizer(int)"],
    "org.apache.commons.math3.distribution.GammaDistribution#GammaDistribution(RandomGenerator,double,double,double)": [
        "org.apache.commons.math3.util.FastMath.pow(double,double)",
        "org.apache.commons.math3.util.FastMath.exp(double)",
        "org.apache.commons.math3.util.FastMath.sqrt(double)",
        "org.apache.commons.math3.distribution.AbstractRealDistribution#AbstractRealDistribution(RandomGenerator)",
        "org.apache.commons.math3.exception.util.LocalizedFormats.<staticinit>()",
        "org.apache.commons.math3.special.Gamma.<staticinit>()",
        "org.apache.commons.math3.distribution.GammaDistribution.<init>()",
        "org.apache.commons.math3.special.Gamma.lanczos(double)",
        "org.apache.commons.math3.util.FastMath.log(double)",
        "org.apache.commons.math3.distribution.GammaDistribution.<staticinit>()",
        "org.apache.commons.math3.util.FastMath.<staticinit>()"
    ],
    "org.apache.commons.math3.analysis.differentiation.SparseGradient#sqrt()": [
        "org.apache.commons.math3.analysis.differentiation.SparseGradient#SparseGradient(double,double,Map<Integer, Double>)",
        "org.apache.commons.math3.util.FastMath.sqrt(double)"
    ],
    "org.apache.commons.math3.optimization.general.AbstractLeastSquaresOptimizer#getRMS()": [
        "org.apache.commons.math3.optimization.general.AbstractLeastSquaresOptimizer#getChiSquare()",
        "org.apache.commons.math3.util.FastMath.sqrt(double)"
    ],
    "org.apache.commons.math3.geometry.partitioning.AbstractRegion#checkPoint(Point<S extends Space>)": ["org.apache.commons.math3.geometry.partitioning.AbstractRegion#checkPoint(BSPTree<S extends Space>,Point<S extends Space>)"],
    "org.apache.commons.math3.optimization.general.AbstractLeastSquaresOptimizer#computeCovariances(double[],double)": [
        "org.apache.commons.math3.linear.LUDecomposition.Solver#getInverse()",
        "org.apache.commons.math3.linear.CholeskyDecomposition.Solver#getInverse()",
        "org.apache.commons.math3.linear.EigenDecomposition.Solver#getInverse()",
        "org.apache.commons.math3.linear.OpenMapRealMatrix#multiply(RealMatrix)",
        "org.apache.commons.math3.optimization.general.AbstractLeastSquaresOptimizer#computeWeightedJacobian(double[])",
        "org.apache.commons.math3.linear.QRDecomposition#getSolver()",
        "org.apache.commons.math3.linear.BlockRealMatrix#transpose()",
        "org.apache.commons.math3.linear.DiagonalMatrix#getData()",
        "org.apache.commons.math3.linear.AbstractRealMatrix#getData()",
        "org.apache.commons.math3.linear.SingularValueDecomposition.Solver#getInverse()",
        "org.apache.commons.math3.linear.QRDecomposition#QRDecomposition(RealMatrix,double)",
        "org.apache.commons.math3.linear.RRQRDecomposition.Solver#getInverse()",
        "org.apache.commons.math3.linear.QRDecomposition.Solver#getInverse()",
        "org.apache.commons.math3.linear.Array2DRowRealMatrix#getData()",
        "org.apache.commons.math3.linear.AbstractRealMatrix#multiply(RealMatrix)",
        "org.apache.commons.math3.linear.AbstractRealMatrix#transpose()",
        "org.apache.commons.math3.linear.DiagonalMatrix#multiply(RealMatrix)",
        "org.apache.commons.math3.linear.RRQRDecomposition#getSolver()",
        "org.apache.commons.math3.linear.BlockRealMatrix#getData()",
        "org.apache.commons.math3.linear.BlockRealMatrix#multiply(RealMatrix)"
    ],
    "org.apache.commons.math3.random.MersenneTwister#MersenneTwister(long)": [
        "org.apache.commons.math3.random.MersenneTwister.<staticinit>()",
        "org.apache.commons.math3.random.BitsStreamGenerator#BitsStreamGenerator()",
        "org.apache.commons.math3.random.MersenneTwister.<init>()",
        "org.apache.commons.math3.random.MersenneTwister#setSeed(long)"
    ],
    "org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile.Markers#updateDesiredPositions()": ["org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile.Marker#updateDesiredPosition()"],
    "org.apache.commons.math3.analysis.interpolation.MicrosphereInterpolatingFunction#value(double[])": [
        "org.apache.commons.math3.linear.RealVector#getNorm()",
        "org.apache.commons.math3.analysis.interpolation.MicrosphereInterpolatingFunction.MicrosphereSurfaceElement#reset()",
        "org.apache.commons.math3.util.FastMath.pow(double,double)",
        "org.apache.commons.math3.analysis.interpolation.MicrosphereInterpolatingFunction.MicrosphereSurfaceElement#normal()",
        "org.apache.commons.math3.analysis.interpolation.MicrosphereInterpolatingFunction#cosAngle(RealVector,RealVector)",
        "org.apache.commons.math3.linear.RealVector.unmodifiableRealVector(RealVector)$RealVector$1#getNorm()",
        "org.apache.commons.math3.analysis.interpolation.MicrosphereInterpolatingFunction.MicrosphereSurfaceElement#illumination()",
        "org.apache.commons.math3.util.FastMath.ulp(double)",
        "org.apache.commons.math3.analysis.interpolation.MicrosphereInterpolatingFunction.MicrosphereSurfaceElement#sample()",
        "org.apache.commons.math3.util.FastMath.abs(double)",
        "org.apache.commons.math3.linear.ArrayRealVector#ArrayRealVector(double[])",
        "org.apache.commons.math3.linear.ArrayRealVector#getNorm()",
        "org.apache.commons.math3.analysis.interpolation.MicrosphereInterpolatingFunction.MicrosphereSurfaceElement#store(double,Map.Entry<RealVector, Double>)"
    ],
    "org.apache.commons.math3.geometry.spherical.oned.ArcsSet#ArcsSet(BSPTree<Sphere1D>,double)": [
        "org.apache.commons.math3.geometry.partitioning.AbstractRegion#AbstractRegion(BSPTree<S extends Space>,double)",
        "org.apache.commons.math3.geometry.spherical.oned.ArcsSet#check2PiConsistency()",
        "org.apache.commons.math3.geometry.spherical.oned.ArcsSet.<init>()"
    ],
    "org.apache.commons.math3.geometry.euclidean.oned.OrientedPoint#OrientedPoint(Vector1D,boolean,double)": ["org.apache.commons.math3.geometry.euclidean.oned.OrientedPoint.<init>()"],
    "org.apache.commons.math3.stat.inference.GTest#rootLogLikelihoodRatio(long,long,long,long)": [
        "org.apache.commons.math3.stat.inference.GTest#gDataSetsComparison(long[],long[])",
        "org.apache.commons.math3.util.FastMath.sqrt(double)"
    ],
    "org.apache.commons.math3.linear.AbstractFieldMatrix#copySubMatrix(int,int,int,int,T extends FieldElement[][])$DefaultFieldMatrixPreservingVisitor$1.<init>()": ["org.apache.commons.math3.linear.DefaultFieldMatrixPreservingVisitor#DefaultFieldMatrixPreservingVisitor(T extends FieldElement)"],
    "org.apache.commons.math3.optimization.general.GaussNewtonOptimizer#doOptimize()": [
        "org.apache.commons.math3.linear.QRDecomposition#QRDecomposition(RealMatrix)",
        "org.apache.commons.math3.linear.OpenMapRealVector#toArray()",
        "org.apache.commons.math3.linear.BlockRealMatrix#getRow(int)",
        "org.apache.commons.math3.linear.LUDecomposition#getSolver()",
        "org.apache.commons.math3.linear.DiagonalMatrix#getEntry(int,int)",
        "org.apache.commons.math3.optimization.general.AbstractLeastSquaresOptimizer#computeWeightedJacobian(double[])",
        "org.apache.commons.math3.exception.util.LocalizedFormats.<staticinit>()",
        "org.apache.commons.math3.optimization.direct.BaseAbstractMultivariateVectorOptimizer#computeObjectiveValue(double[])",
        "org.apache.commons.math3.linear.EigenDecomposition.Solver#solve(RealVector)",
        "org.apache.commons.math3.linear.BlockRealMatrix#getEntry(int,int)",
        "org.apache.commons.math3.linear.LUDecomposition#LUDecomposition(RealMatrix)",
        "org.apache.commons.math3.linear.RealVector#toArray()",
        "org.apache.commons.math3.linear.SingularValueDecomposition.Solver#solve(RealVector)",
        "org.apache.commons.math3.linear.RRQRDecomposition.Solver#solve(RealVector)",
        "org.apache.commons.math3.linear.ArrayRealVector#ArrayRealVector(double[],boolean)",
        "org.apache.commons.math3.optimization.general.AbstractLeastSquaresOptimizer#computeCost(double[])",
        "org.apache.commons.math3.optimization.direct.BaseAbstractMultivariateVectorOptimizer#getConvergenceChecker()",
        "org.apache.commons.math3.linear.LUDecomposition.Solver#solve(RealVector)",
        "org.apache.commons.math3.linear.AbstractRealMatrix#getRow(int)",
        "org.apache.commons.math3.optimization.PointVectorValuePair#getPoint()",
        "org.apache.commons.math3.optimization.direct.BaseAbstractMultivariateVectorOptimizer#getStartPoint()",
        "org.apache.commons.math3.exception.MathInternalError#MathInternalError()",
        "org.apache.commons.math3.linear.CholeskyDecomposition.Solver#solve(RealVector)",
        "org.apache.commons.math3.linear.QRDecomposition#getSolver()",
        "org.apache.commons.math3.linear.RealVector.unmodifiableRealVector(RealVector)$RealVector$1#toArray()",
        "org.apache.commons.math3.linear.OpenMapRealMatrix#getEntry(int,int)",
        "org.apache.commons.math3.optimization.direct.BaseAbstractMultivariateVectorOptimizer#getWeight()",
        "org.apache.commons.math3.optimization.PointVectorValuePair#PointVectorValuePair(double[],double[])",
        "org.apache.commons.math3.exception.NullArgumentException#NullArgumentException()",
        "org.apache.commons.math3.linear.QRDecomposition.Solver#solve(RealVector)",
        "org.apache.commons.math3.linear.Array2DRowRealMatrix#getEntry(int,int)",
        "org.apache.commons.math3.linear.BlockRealMatrix#BlockRealMatrix(double[][])",
        "org.apache.commons.math3.optimization.general.AbstractLeastSquaresOptimizer#computeResiduals(double[])",
        "org.apache.commons.math3.optimization.direct.BaseAbstractMultivariateVectorOptimizer#getTarget()",
        "org.apache.commons.math3.linear.RRQRDecomposition#getSolver()",
        "org.apache.commons.math3.linear.ArrayRealVector#toArray()"
    ],
    "org.apache.commons.math3.optimization.PointValuePair#getPoint()": ["org.apache.commons.math3.util.Pair#getKey()"],
    "org.apache.commons.math3.stat.descriptive.SynchronizedSummaryStatistics#getMean()": ["org.apache.commons.math3.stat.descriptive.SummaryStatistics#getMean()"],
    "org.apache.commons.math3.geometry.spherical.oned.S1Point#S1Point(double,Vector2D)": ["org.apache.commons.math3.geometry.spherical.oned.S1Point.<init>()"],
    "org.apache.commons.math3.optimization.linear.AbstractLinearOptimizer#AbstractLinearOptimizer()": [
        "org.apache.commons.math3.optimization.linear.AbstractLinearOptimizer.<init>()",
        "org.apache.commons.math3.optimization.linear.AbstractLinearOptimizer.<staticinit>()",
        "org.apache.commons.math3.optimization.linear.AbstractLinearOptimizer#setMaxIterations(int)"
    ],
    "org.apache.commons.math3.exception.MathIllegalStateException#MathIllegalStateException(Localizable,Object[]...)": [
        "org.apache.commons.math3.exception.MathIllegalStateException.<init>()",
        "org.apache.commons.math3.exception.util.ExceptionContext#addMessage(Localizable,Object[]...)",
        "org.apache.commons.math3.exception.util.ExceptionContext#ExceptionContext(Throwable)"
    ],
    "org.apache.commons.math3.util.MathArrays.copyOf(double[])": ["org.apache.commons.math3.util.MathArrays.copyOf(double[],int)"],
    "org.apache.commons.math3.fraction.FractionFormat#FractionFormat(NumberFormat)": [
        "org.apache.commons.math3.fraction.AbstractFormat#AbstractFormat(NumberFormat)",
        "org.apache.commons.math3.fraction.FractionFormat.<init>()"
    ],
    "org.apache.commons.math3.ml.distance.ChebyshevDistance#compute(double[],double[])": ["org.apache.commons.math3.util.MathArrays.distanceInf(double[],double[])"],
    "org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D#readResolve()": ["org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D.LazyHolder.<staticinit>()"],
    "org.apache.commons.math3.dfp.Dfp#linearCombination(Dfp[],Dfp[])": [
        "org.apache.commons.math3.exception.DimensionMismatchException#DimensionMismatchException(int,int)",
        "org.apache.commons.math3.dfp.Dfp#add(Dfp)",
        "org.apache.commons.math3.dfp.Dfp#multiply(Dfp)",
        "org.apache.commons.math3.dfp.Dfp#getZero()"
    ],
    "org.apache.commons.math3.optimization.direct.PowellOptimizer.LineSearch#LineSearch(double,double)": [
        "org.apache.commons.math3.optimization.univariate.SimpleUnivariateValueChecker#SimpleUnivariateValueChecker(double,double)",
        "org.apache.commons.math3.optimization.univariate.BrentOptimizer#BrentOptimizer(double,double,ConvergenceChecker<UnivariatePointValuePair>)",
        "org.apache.commons.math3.optimization.direct.PowellOptimizer.LineSearch.<staticinit>()",
        "org.apache.commons.math3.optimization.direct.PowellOptimizer.LineSearch.<init>()"
    ],
    "org.apache.commons.math3.stat.descriptive.AbstractStorelessUnivariateStatistic.<init>()": ["org.apache.commons.math3.stat.descriptive.AbstractUnivariateStatistic.<init>()"],
    "org.apache.commons.math3.geometry.euclidean.threed.Rotation#composeInverseInternal(Rotation)": ["org.apache.commons.math3.geometry.euclidean.threed.Rotation#Rotation(double,double,double,double,boolean)"],
    "org.apache.commons.math3.util.CompositeFormat.getDefaultNumberFormat()": ["org.apache.commons.math3.util.CompositeFormat.getDefaultNumberFormat(Locale)"],
    "org.apache.commons.math3.analysis.integration.gauss.SymmetricGaussIntegrator#SymmetricGaussIntegrator(double[],double[])": [
        "org.apache.commons.math3.analysis.integration.gauss.GaussIntegrator#GaussIntegrator(double[],double[])",
        "org.apache.commons.math3.analysis.integration.gauss.SymmetricGaussIntegrator.<init>()"
    ],
    "org.apache.commons.math3.fitting.GaussianFitter.ParameterGuesser#ParameterGuesser(WeightedObservedPoint[])": [
        "org.apache.commons.math3.fitting.GaussianFitter.ParameterGuesser#basicGuess(WeightedObservedPoint[])",
        "org.apache.commons.math3.fitting.GaussianFitter.ParameterGuesser.<init>()",
        "org.apache.commons.math3.fitting.GaussianFitter.ParameterGuesser#sortObservations(WeightedObservedPoint[])",
        "org.apache.commons.math3.exception.util.LocalizedFormats.<staticinit>()"
    ],
    "org.apache.commons.math3.stat.inference.KolmogorovSmirnovTest#integralKolmogorovSmirnovStatistic(double[],double[])": [
        "org.apache.commons.math3.stat.inference.KolmogorovSmirnovTest#checkArray(double[])",
        "org.apache.commons.math3.util.MathArrays.copyOf(double[])"
    ],
    "org.apache.commons.math3.util.BigRealField#BigRealField()": ["org.apache.commons.math3.util.BigRealField.<init>()"],
    "org.apache.commons.math3.geometry.euclidean.twod.hull.AbstractConvexHullGenerator2D#AbstractConvexHullGenerator2D(boolean,double)": ["org.apache.commons.math3.geometry.euclidean.twod.hull.AbstractConvexHullGenerator2D.<init>()"],
    "org.apache.commons.math3.analysis.function.Constant#derivative()": ["org.apache.commons.math3.analysis.function.Constant#Constant(double)"],
    "org.apache.commons.math3.distribution.EnumeratedIntegerDistribution#getSupportLowerBound()": [
        "org.apache.commons.math3.util.Pair#getValue()",
        "org.apache.commons.math3.distribution.EnumeratedDistribution#getPmf()",
        "org.apache.commons.math3.util.Pair#getKey()",
        "org.apache.commons.math3.optim.PointVectorValuePair#getValue()",
        "org.apache.commons.math3.optimization.PointVectorValuePair#getValue()"
    ],
    "org.apache.commons.math3.linear.Array2DRowFieldMatrix#walkInRowOrder(FieldMatrixPreservingVisitor<T extends FieldElement>,int,int,int,int)": [
        "org.apache.commons.math3.linear.AbstractFieldMatrix#checkSubMatrixIndex(int,int,int,int)",
        "org.apache.commons.math3.linear.AbstractFieldMatrix#transpose()$DefaultFieldMatrixPreservingVisitor$1#visit(int,int,T extends FieldElement)",
        "org.apache.commons.math3.linear.DefaultFieldMatrixPreservingVisitor#start(int,int,int,int,int,int)",
        "org.apache.commons.math3.linear.Array2DRowFieldMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.DefaultFieldMatrixPreservingVisitor#end()",
        "org.apache.commons.math3.linear.DefaultFieldMatrixPreservingVisitor#visit(int,int,T extends FieldElement)",
        "org.apache.commons.math3.linear.MatrixUtils.FractionMatrixConverter#start(int,int,int,int,int,int)",
        "org.apache.commons.math3.linear.MatrixUtils.BigFractionMatrixConverter#start(int,int,int,int,int,int)",
        "org.apache.commons.math3.linear.Array2DRowFieldMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.AbstractFieldMatrix#copySubMatrix(int,int,int,int,T extends FieldElement[][])$DefaultFieldMatrixPreservingVisitor$1#start(int,int,int,int,int,int)",
        "org.apache.commons.math3.ode.nonstiff.AdamsMoultonFieldIntegrator.Corrector#start(int,int,int,int,int,int)",
        "org.apache.commons.math3.linear.AbstractFieldMatrix#copySubMatrix(int,int,int,int,T extends FieldElement[][])$DefaultFieldMatrixPreservingVisitor$1#visit(int,int,T extends FieldElement)",
        "org.apache.commons.math3.ode.nonstiff.AdamsMoultonFieldIntegrator.Corrector#end()"
    ],
    "org.apache.commons.math3.util.Precision.equalsIncludingNaN(float,float,float)": [
        "org.apache.commons.math3.util.FastMath.abs(float)",
        "org.apache.commons.math3.util.Precision.equalsIncludingNaN(float,float)"
    ],
    "org.apache.commons.math3.random.EmpiricalDistribution#EmpiricalDistribution(int,RandomDataImpl)": [
        "org.apache.commons.math3.random.RandomDataImpl#getDelegate()",
        "org.apache.commons.math3.random.EmpiricalDistribution#EmpiricalDistribution(int,RandomDataGenerator)"
    ],
    "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.MultiDirectionalSimplex#MultiDirectionalSimplex(double[])": [
        "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.MultiDirectionalSimplex#MultiDirectionalSimplex(double[],double,double)",
        "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.MultiDirectionalSimplex.<staticinit>()"
    ],
    "org.apache.commons.math3.distribution.ZipfDistribution.ZipfRejectionInversionSampler.helper2(double)": [
        "org.apache.commons.math3.util.FastMath.abs(double)",
        "org.apache.commons.math3.util.FastMath.expm1(double)"
    ],
    "org.apache.commons.math3.linear.OpenMapRealVector#getEntry(int)": [
        "org.apache.commons.math3.linear.RealVector#checkIndex(int)",
        "org.apache.commons.math3.util.OpenIntToDoubleHashMap#get(int)"
    ],
    "org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile.Markers#getPercentileValue()": ["org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile.Markers#height(int)"],
    "org.apache.commons.math3.ode.nonstiff.EulerFieldStepInterpolator#computeInterpolatedStateAndDerivatives(FieldEquationsMapper<T extends RealFieldElement>,T extends RealFieldElement,T extends RealFieldElement,T extends RealFieldElement,T extends RealFieldElement)": [
        "org.apache.commons.math3.ode.nonstiff.RungeKuttaFieldStepInterpolator#previousStateLinearCombination(T extends RealFieldElement[]...)",
        "org.apache.commons.math3.ode.sampling.AbstractFieldStepInterpolator#getGlobalPreviousState()",
        "org.apache.commons.math3.ode.FieldODEStateAndDerivative#FieldODEStateAndDerivative(T extends RealFieldElement,T extends RealFieldElement[],T extends RealFieldElement[])"
    ],
    "org.apache.commons.math3.geometry.euclidean.oned.Vector1D#normalize()": [
        "org.apache.commons.math3.geometry.euclidean.oned.Vector1D#scalarMultiply(double)",
        "org.apache.commons.math3.geometry.euclidean.oned.Vector1D#getNorm()",
        "org.apache.commons.math3.exception.util.LocalizedFormats.<staticinit>()"
    ],
    "org.apache.commons.math3.random.SobolSequenceGenerator#nextVector()": ["org.apache.commons.math3.random.SobolSequenceGenerator.<staticinit>()"],
    "org.apache.commons.math3.ode.nonstiff.AdamsFieldStepInterpolator#computeInterpolatedStateAndDerivatives(FieldEquationsMapper<T extends RealFieldElement>,T extends RealFieldElement,T extends RealFieldElement,T extends RealFieldElement,T extends RealFieldElement)": ["org.apache.commons.math3.ode.nonstiff.AdamsFieldStepInterpolator.taylor(FieldODEStateAndDerivative<S extends RealFieldElement>,S extends RealFieldElement,S extends RealFieldElement,S extends RealFieldElement[],Array2DRowFieldMatrix<S extends RealFieldElement>)"],
    "org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet#finiteOrNullPoint(double)": ["org.apache.commons.math3.geometry.euclidean.oned.Vector1D#Vector1D(double)"],
    "org.apache.commons.math3.exception.MathRuntimeException#getMessage()": ["org.apache.commons.math3.exception.util.ExceptionContext#getMessage()"],
    "org.apache.commons.math3.analysis.interpolation.PiecewiseBicubicSplineInterpolatingFunction#value(double,double)": [
        "org.apache.commons.math3.analysis.interpolation.AkimaSplineInterpolator#interpolate(double[],double[])",
        "org.apache.commons.math3.analysis.polynomials.PolynomialSplineFunction#value(double)",
        "org.apache.commons.math3.analysis.interpolation.PiecewiseBicubicSplineInterpolatingFunction#searchIndex(double,double[],int,int)",
        "org.apache.commons.math3.analysis.interpolation.AkimaSplineInterpolator.<init>()"
    ],
    "org.apache.commons.math3.geometry.euclidean.twod.Vector2DFormat#parse(String)": [
        "org.apache.commons.math3.geometry.euclidean.twod.Vector2DFormat#parse(String,ParsePosition)",
        "org.apache.commons.math3.exception.MathParseException#MathParseException(String,int,Class<?>)"
    ],
    "org.apache.commons.math3.linear.SparseFieldVector#setSubVector(int,FieldVector<T extends FieldElement>)": [
        "org.apache.commons.math3.linear.SparseFieldVector#setEntry(int,T extends FieldElement)",
        "org.apache.commons.math3.linear.SparseFieldVector#getDimension()",
        "org.apache.commons.math3.linear.ArrayFieldVector#getEntry(int)",
        "org.apache.commons.math3.linear.ArrayFieldVector#getDimension()",
        "org.apache.commons.math3.linear.SparseFieldVector#getEntry(int)",
        "org.apache.commons.math3.linear.SparseFieldVector#checkIndex(int)"
    ],
    "org.apache.commons.math3.stat.descriptive.moment.Mean#Mean(Mean)": [
        "org.apache.commons.math3.stat.descriptive.moment.Mean.copy(Mean,Mean)",
        "org.apache.commons.math3.stat.descriptive.moment.Mean.<init>()",
        "org.apache.commons.math3.stat.descriptive.AbstractStorelessUnivariateStatistic.<init>()"
    ],
    "org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet#getFirstLeaf(BSPTree<Euclidean1D>)": [
        "org.apache.commons.math3.geometry.partitioning.BSPTree#getCut()",
        "org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet#leafBefore(BSPTree<Euclidean1D>)",
        "org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet#previousInternalNode(BSPTree<Euclidean1D>)"
    ],
    "org.apache.commons.math3.analysis.differentiation.SparseGradient#floor()": [
        "org.apache.commons.math3.util.FastMath.floor(double)",
        "org.apache.commons.math3.analysis.differentiation.SparseGradient.createConstant(double)"
    ],
    "org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile#minimum()": ["org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile.Markers#height(int)"],
    "org.apache.commons.math3.stat.inference.KolmogorovSmirnovTest.calculateIntegralD(double,int,int,boolean)": [
        "org.apache.commons.math3.util.FastMath.ceil(double)",
        "org.apache.commons.math3.util.FastMath.floor(double)"
    ],
    "org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D#distance(Vector3D)": [
        "org.apache.commons.math3.geometry.euclidean.threed.Vector3D#getZ()",
        "org.apache.commons.math3.geometry.euclidean.threed.Vector3D#getY()",
        "org.apache.commons.math3.geometry.euclidean.threed.Vector3D#getX()"
    ],
    "org.apache.commons.math3.linear.MatrixUtils.fractionMatrixToRealMatrix(FieldMatrix<Fraction>)": [
        "org.apache.commons.math3.linear.MatrixUtils.FractionMatrixConverter#FractionMatrixConverter()",
        "org.apache.commons.math3.linear.MatrixUtils.FractionMatrixConverter#getConvertedMatrix()"
    ],
    "org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet#followLoop(ConnectableSegment)": [
        "org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet#filterSpuriousVertices(List<Segment>)",
        "org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.ConnectableSegment#setProcessed(boolean)",
        "org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.ConnectableSegment#getNext()",
        "org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.ConnectableSegment#getPrevious()"
    ],
    "org.apache.commons.math3.optim.nonlinear.vector.jacobian.AbstractLeastSquaresOptimizer#computeCovariances(double[],double)": [
        "org.apache.commons.math3.linear.LUDecomposition.Solver#getInverse()",
        "org.apache.commons.math3.linear.CholeskyDecomposition.Solver#getInverse()",
        "org.apache.commons.math3.linear.EigenDecomposition.Solver#getInverse()",
        "org.apache.commons.math3.linear.OpenMapRealMatrix#multiply(RealMatrix)",
        "org.apache.commons.math3.linear.QRDecomposition#getSolver()",
        "org.apache.commons.math3.linear.BlockRealMatrix#transpose()",
        "org.apache.commons.math3.linear.DiagonalMatrix#getData()",
        "org.apache.commons.math3.linear.AbstractRealMatrix#getData()",
        "org.apache.commons.math3.linear.SingularValueDecomposition.Solver#getInverse()",
        "org.apache.commons.math3.linear.QRDecomposition#QRDecomposition(RealMatrix,double)",
        "org.apache.commons.math3.linear.RRQRDecomposition.Solver#getInverse()",
        "org.apache.commons.math3.optim.nonlinear.vector.jacobian.AbstractLeastSquaresOptimizer#computeWeightedJacobian(double[])",
        "org.apache.commons.math3.linear.QRDecomposition.Solver#getInverse()",
        "org.apache.commons.math3.linear.AbstractRealMatrix#multiply(RealMatrix)",
        "org.apache.commons.math3.linear.Array2DRowRealMatrix#getData()",
        "org.apache.commons.math3.linear.AbstractRealMatrix#transpose()",
        "org.apache.commons.math3.linear.DiagonalMatrix#multiply(RealMatrix)",
        "org.apache.commons.math3.linear.RRQRDecomposition#getSolver()",
        "org.apache.commons.math3.linear.BlockRealMatrix#multiply(RealMatrix)",
        "org.apache.commons.math3.linear.BlockRealMatrix#getData()"
    ],
    "org.apache.commons.math3.stat.descriptive.moment.Variance#evaluate(double[],double[],int,int)": [
        "org.apache.commons.math3.stat.descriptive.moment.Mean#evaluate(double[],double[],int,int)",
        "org.apache.commons.math3.stat.descriptive.moment.Variance#clear()",
        "org.apache.commons.math3.stat.descriptive.moment.Mean#Mean()",
        "org.apache.commons.math3.stat.descriptive.AbstractUnivariateStatistic#test(double[],double[],int,int)",
        "org.apache.commons.math3.stat.descriptive.moment.Variance#evaluate(double[],double[],double,int,int)"
    ],
    "org.apache.commons.math3.linear.AbstractFieldMatrix#walkInRowOrder(FieldMatrixPreservingVisitor<T extends FieldElement>)": [
        "org.apache.commons.math3.linear.SparseFieldMatrix#getEntry(int,int)",
        "org.apache.commons.math3.linear.BlockFieldMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.SparseFieldMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.AbstractFieldMatrix#transpose()$DefaultFieldMatrixPreservingVisitor$1#visit(int,int,T extends FieldElement)",
        "org.apache.commons.math3.linear.DefaultFieldMatrixPreservingVisitor#start(int,int,int,int,int,int)",
        "org.apache.commons.math3.linear.Array2DRowFieldMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.BlockFieldMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.SparseFieldMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.DefaultFieldMatrixPreservingVisitor#end()",
        "org.apache.commons.math3.linear.MatrixUtils.FractionMatrixConverter#start(int,int,int,int,int,int)",
        "org.apache.commons.math3.linear.DefaultFieldMatrixPreservingVisitor#visit(int,int,T extends FieldElement)",
        "org.apache.commons.math3.linear.MatrixUtils.BigFractionMatrixConverter#start(int,int,int,int,int,int)",
        "org.apache.commons.math3.linear.Array2DRowFieldMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.AbstractFieldMatrix#copySubMatrix(int,int,int,int,T extends FieldElement[][])$DefaultFieldMatrixPreservingVisitor$1#start(int,int,int,int,int,int)",
        "org.apache.commons.math3.ode.nonstiff.AdamsMoultonFieldIntegrator.Corrector#start(int,int,int,int,int,int)",
        "org.apache.commons.math3.linear.Array2DRowFieldMatrix#getEntry(int,int)",
        "org.apache.commons.math3.linear.BlockFieldMatrix#getEntry(int,int)",
        "org.apache.commons.math3.ode.nonstiff.AdamsMoultonFieldIntegrator.Corrector#end()",
        "org.apache.commons.math3.linear.AbstractFieldMatrix#copySubMatrix(int,int,int,int,T extends FieldElement[][])$DefaultFieldMatrixPreservingVisitor$1#visit(int,int,T extends FieldElement)"
    ],
    "org.apache.commons.math3.optimization.BaseMultivariateOptimizer#optimize(int,FUNC extends MultivariateFunction,GoalType,double[])": ["org.apache.commons.math3.optimization.GoalType.<staticinit>()"],
    "org.apache.commons.math3.random.RandomDataImpl#nextLong(long,long)": ["org.apache.commons.math3.random.RandomDataGenerator#nextLong(long,long)"],
    "org.apache.commons.math3.primes.SmallPrimes#SmallPrimes()": ["org.apache.commons.math3.primes.SmallPrimes.<init>()"],
    "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizer#doOptimize()": [
        "org.apache.commons.math3.optim.nonlinear.scalar.GoalType.<staticinit>()",
        "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizer#doOptimize()$MultivariateFunction$1.<init>()",
        "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizer#doOptimize()$Comparator$1.<init>()",
        "org.apache.commons.math3.optim.BaseOptimizer#getConvergenceChecker()",
        "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.MultiDirectionalSimplex#iterate(MultivariateFunction,Comparator<PointValuePair>)",
        "org.apache.commons.math3.optim.nonlinear.scalar.MultivariateOptimizer#getGoalType()",
        "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.AbstractSimplex#getPoint(int)",
        "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizer#checkParameters()",
        "org.apache.commons.math3.optim.BaseOptimizer#getIterations()",
        "org.apache.commons.math3.optim.BaseMultivariateOptimizer#getStartPoint()",
        "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.AbstractSimplex#getSize()",
        "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.AbstractSimplex#getPoints()",
        "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.NelderMeadSimplex#iterate(MultivariateFunction,Comparator<PointValuePair>)",
        "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.AbstractSimplex#evaluate(MultivariateFunction,Comparator<PointValuePair>)",
        "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.AbstractSimplex#build(double[])",
        "org.apache.commons.math3.optim.BaseOptimizer#incrementIterationCount()"
    ],
    "org.apache.commons.math3.analysis.FunctionUtils.toMultivariateDifferentiableVectorFunction(DifferentiableMultivariateVectorFunction)$MultivariateDifferentiableVectorFunction$1#value(DerivativeStructure[])": [
        "org.apache.commons.math3.optimization.fitting.CurveFitter.OldTheoreticalValuesFunction#jacobian()",
        "org.apache.commons.math3.optimization.fitting.CurveFitter.OldTheoreticalValuesFunction#jacobian()$MultivariateMatrixFunction$1#value(double[])",
        "org.apache.commons.math3.fitting.AbstractCurveFitter.TheoreticalValuesFunction#getModelFunctionJacobian()$MultivariateMatrixFunction$1#value(double[])",
        "org.apache.commons.math3.analysis.differentiation.JacobianFunction#value(double[])",
        "org.apache.commons.math3.fitting.CurveFitter.TheoreticalValuesFunction#getModelFunction()$MultivariateVectorFunction$1#value(double[])",
        "org.apache.commons.math3.analysis.differentiation.DerivativeStructure#getFreeParameters()",
        "org.apache.commons.math3.fitting.CurveFitter.TheoreticalValuesFunction#getModelFunctionJacobian()$MultivariateMatrixFunction$1#value(double[])",
        "org.apache.commons.math3.optimization.fitting.CurveFitter.OldTheoreticalValuesFunction#value(double[])",
        "org.apache.commons.math3.exception.DimensionMismatchException#DimensionMismatchException(int,int)",
        "org.apache.commons.math3.fitting.AbstractCurveFitter.TheoreticalValuesFunction#getModelFunction()$MultivariateVectorFunction$1#value(double[])",
        "org.apache.commons.math3.optimization.fitting.CurveFitter.TheoreticalValuesFunction#value(double[])",
        "org.apache.commons.math3.analysis.differentiation.DerivativeStructure#getValue()",
        "org.apache.commons.math3.analysis.FunctionUtils.toDifferentiableMultivariateFunction(MultivariateDifferentiableFunction)$MultivariateVectorFunction$1$MultivariateVectorFunction$1#gradient()$MultivariateVectorFunction$1#value(double[])",
        "org.apache.commons.math3.analysis.FunctionUtils.toDifferentiableMultivariateVectorFunction(MultivariateDifferentiableVectorFunction)$DifferentiableMultivariateVectorFunction$1#jacobian()",
        "org.apache.commons.math3.analysis.differentiation.DerivativeStructure#DerivativeStructure(int,int,double[]...)",
        "org.apache.commons.math3.analysis.differentiation.DerivativeStructure#getOrder()",
        "org.apache.commons.math3.analysis.FunctionUtils.toMultivariateDifferentiableVectorFunction(DifferentiableMultivariateVectorFunction)$MultivariateDifferentiableVectorFunction$1#value(double[])",
        "org.apache.commons.math3.analysis.FunctionUtils.toDifferentiableMultivariateVectorFunction(MultivariateDifferentiableVectorFunction)$DifferentiableMultivariateVectorFunction$1#value(double[])",
        "org.apache.commons.math3.analysis.differentiation.GradientFunction#value(double[])",
        "org.apache.commons.math3.analysis.FunctionUtils.toDifferentiableMultivariateVectorFunction(MultivariateDifferentiableVectorFunction)$MultivariateMatrixFunction$1$MultivariateMatrixFunction$1#jacobian()$MultivariateMatrixFunction$1#value(double[])",
        "org.apache.commons.math3.analysis.differentiation.DerivativeStructure#getPartialDerivative(int[]...)"
    ],
    "org.apache.commons.math3.stat.descriptive.moment.StandardDeviation#isBiasCorrected()": ["org.apache.commons.math3.stat.descriptive.moment.Variance#isBiasCorrected()"],
    "org.apache.commons.math3.optim.linear.LinearObjectiveFunction#LinearObjectiveFunction(double[],double)": [
        "org.apache.commons.math3.linear.ArrayRealVector#ArrayRealVector(double[])",
        "org.apache.commons.math3.optim.linear.LinearObjectiveFunction#LinearObjectiveFunction(RealVector,double)"
    ],
    "org.apache.commons.math3.ode.nonstiff.DormandPrince54FieldIntegrator#getA()": [
        "org.apache.commons.math3.util.MathArrays.buildArray(Field<T>,int,int)",
        "org.apache.commons.math3.ode.AbstractFieldIntegrator#getField()",
        "org.apache.commons.math3.util.BigRealField#getZero()",
        "org.apache.commons.math3.analysis.differentiation.SparseGradient#getField()$Field$1#getZero()",
        "org.apache.commons.math3.analysis.differentiation.DerivativeStructure#getField()$Field$1#getZero()",
        "org.apache.commons.math3.fraction.FractionField#getZero()",
        "org.apache.commons.math3.util.Decimal64Field#getZero()",
        "org.apache.commons.math3.ode.nonstiff.EmbeddedRungeKuttaFieldIntegrator#fraction(int,int)",
        "org.apache.commons.math3.dfp.DfpField#getZero()",
        "org.apache.commons.math3.complex.ComplexField#getZero()",
        "org.apache.commons.math3.fraction.BigFractionField#getZero()",
        "org.apache.commons.math3.util.MathArrays.buildArray(Field<T>,int)"
    ],
    "org.apache.commons.math3.complex.Complex#divide(Complex)": [
        "org.apache.commons.math3.util.MathUtils.checkNotNull(Object)",
        "org.apache.commons.math3.complex.Complex#getReal()",
        "org.apache.commons.math3.util.FastMath.abs(double)",
        "org.apache.commons.math3.complex.Complex#getImaginary()",
        "org.apache.commons.math3.complex.Complex#isInfinite()",
        "org.apache.commons.math3.complex.Complex.<staticinit>()",
        "org.apache.commons.math3.complex.Complex#createComplex(double,double)"
    ],
    "org.apache.commons.math3.stat.descriptive.SummaryStatistics#setGeoMeanImpl(StorelessUnivariateStatistic)": ["org.apache.commons.math3.stat.descriptive.SummaryStatistics#checkEmpty()"],
    "org.apache.commons.math3.optimization.direct.BOBYQAOptimizer#doOptimize()": [
        "org.apache.commons.math3.optimization.direct.BOBYQAOptimizer#setup(double[],double[])",
        "org.apache.commons.math3.optimization.direct.BOBYQAOptimizer#bobyqa(double[],double[])",
        "org.apache.commons.math3.optimization.GoalType.<staticinit>()",
        "org.apache.commons.math3.optimization.direct.BaseAbstractMultivariateOptimizer#getGoalType()",
        "org.apache.commons.math3.linear.ArrayRealVector#getDataRef()",
        "org.apache.commons.math3.optimization.PointValuePair#PointValuePair(double[],double)",
        "org.apache.commons.math3.linear.ArrayRealVector#ArrayRealVector(double[])",
        "org.apache.commons.math3.optimization.direct.BaseAbstractMultivariateOptimizer#getLowerBound()",
        "org.apache.commons.math3.optimization.direct.BaseAbstractMultivariateOptimizer#getStartPoint()",
        "org.apache.commons.math3.optimization.direct.BaseAbstractMultivariateOptimizer#getUpperBound()"
    ],
    "org.apache.commons.math3.ode.nonstiff.HighamHall54FieldIntegrator#estimateError(T extends RealFieldElement[][],T extends RealFieldElement[],T extends RealFieldElement[],T extends RealFieldElement)": [
        "org.apache.commons.math3.ode.AbstractFieldIntegrator#getField()",
        "org.apache.commons.math3.util.BigRealField#getZero()",
        "org.apache.commons.math3.analysis.differentiation.SparseGradient#getField()$Field$1#getZero()",
        "org.apache.commons.math3.analysis.differentiation.DerivativeStructure#getField()$Field$1#getZero()",
        "org.apache.commons.math3.fraction.FractionField#getZero()",
        "org.apache.commons.math3.util.Decimal64Field#getZero()",
        "org.apache.commons.math3.dfp.DfpField#getZero()",
        "org.apache.commons.math3.util.MathUtils.max(T extends RealFieldElement,T extends RealFieldElement)",
        "org.apache.commons.math3.complex.ComplexField#getZero()",
        "org.apache.commons.math3.fraction.BigFractionField#getZero()"
    ],
    "org.apache.commons.math3.stat.descriptive.SummaryStatistics#hashCode()": [
        "org.apache.commons.math3.stat.descriptive.SummaryStatistics#getVariance()",
        "org.apache.commons.math3.stat.descriptive.SummaryStatistics#getMax()",
        "org.apache.commons.math3.stat.descriptive.SynchronizedSummaryStatistics#getMin()",
        "org.apache.commons.math3.stat.descriptive.SynchronizedSummaryStatistics#getSum()",
        "org.apache.commons.math3.util.MathUtils.hash(double)",
        "org.apache.commons.math3.stat.descriptive.SummaryStatistics#getSum()",
        "org.apache.commons.math3.stat.descriptive.SummaryStatistics#getMean()",
        "org.apache.commons.math3.stat.descriptive.SynchronizedSummaryStatistics#getVariance()",
        "org.apache.commons.math3.stat.descriptive.SynchronizedSummaryStatistics#getGeometricMean()",
        "org.apache.commons.math3.stat.descriptive.SynchronizedSummaryStatistics#getSumsq()",
        "org.apache.commons.math3.stat.descriptive.SummaryStatistics#getN()",
        "org.apache.commons.math3.stat.descriptive.SummaryStatistics#getSumsq()",
        "org.apache.commons.math3.stat.descriptive.SynchronizedSummaryStatistics#getN()",
        "org.apache.commons.math3.stat.descriptive.SummaryStatistics#getGeometricMean()",
        "org.apache.commons.math3.stat.descriptive.SynchronizedSummaryStatistics#getMax()",
        "org.apache.commons.math3.stat.descriptive.SynchronizedSummaryStatistics#getMean()",
        "org.apache.commons.math3.stat.descriptive.SummaryStatistics#getMin()"
    ],
    "org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet#computeGeometricalProperties()": [
        "org.apache.commons.math3.geometry.euclidean.twod.Vector2D#getY()",
        "org.apache.commons.math3.geometry.euclidean.twod.Vector2D#getX()",
        "org.apache.commons.math3.geometry.partitioning.BSPTree#getCut()",
        "org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet#getVertices()",
        "org.apache.commons.math3.geometry.partitioning.AbstractRegion#getTree(boolean)",
        "org.apache.commons.math3.geometry.euclidean.twod.Vector2D#Vector2D(double,double)",
        "org.apache.commons.math3.geometry.partitioning.AbstractRegion#setBarycenter(Point<S extends Space>)",
        "org.apache.commons.math3.geometry.partitioning.AbstractRegion#setSize(double)",
        "org.apache.commons.math3.geometry.partitioning.BSPTree#getAttribute()",
        "org.apache.commons.math3.geometry.euclidean.twod.Vector2D.<staticinit>()"
    ],
    "org.apache.commons.math3.random.EmpiricalDistribution.StreamDataAdapter#computeBinStats()": [
        "org.apache.commons.math3.stat.descriptive.SummaryStatistics#addValue(double)",
        "org.apache.commons.math3.stat.descriptive.AggregateSummaryStatistics.AggregatingSummaryStatistics#addValue(double)",
        "org.apache.commons.math3.stat.descriptive.SynchronizedSummaryStatistics#addValue(double)",
        "org.apache.commons.math3.random.EmpiricalDistribution#findBin(double)"
    ],
    "org.apache.commons.math3.fraction.BigFraction#BigFraction(BigInteger)": ["org.apache.commons.math3.fraction.BigFraction#BigFraction(BigInteger,BigInteger)"],
    "org.apache.commons.math3.linear.AbstractRealMatrix#multiplyEntry(int,int,double)": [
        "org.apache.commons.math3.linear.MatrixUtils.checkMatrixIndex(AnyMatrix,int,int)",
        "org.apache.commons.math3.linear.Array2DRowRealMatrix#getEntry(int,int)",
        "org.apache.commons.math3.linear.Array2DRowRealMatrix#setEntry(int,int,double)",
        "org.apache.commons.math3.linear.DiagonalMatrix#getEntry(int,int)",
        "org.apache.commons.math3.linear.BlockRealMatrix#setEntry(int,int,double)",
        "org.apache.commons.math3.linear.OpenMapRealMatrix#setEntry(int,int,double)",
        "org.apache.commons.math3.linear.OpenMapRealMatrix#getEntry(int,int)",
        "org.apache.commons.math3.linear.DiagonalMatrix#setEntry(int,int,double)",
        "org.apache.commons.math3.linear.BlockRealMatrix#getEntry(int,int)"
    ],
    "org.apache.commons.math3.analysis.interpolation.BicubicSplineFunction#value(double,double)": ["org.apache.commons.math3.analysis.interpolation.BicubicSplineFunction#apply(double[],double[],double[][])"],
    "org.apache.commons.math3.optim.univariate.BracketFinder#eval(UnivariateFunction,double)": [
        "org.apache.commons.math3.analysis.FunctionUtils.multiply(DifferentiableUnivariateFunction[]...)$UnivariateFunction$1$UnivariateFunction$1#derivative()$UnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.polynomials.PolynomialSplineFunction#value(double)",
        "org.apache.commons.math3.analysis.function.Gaussian#value(double)",
        "org.apache.commons.math3.analysis.function.Tanh#value(double)",
        "org.apache.commons.math3.analysis.function.Inverse#value(double)",
        "org.apache.commons.math3.analysis.function.HarmonicOscillator#value(double)",
        "org.apache.commons.math3.analysis.FunctionUtils.fix1stArgument(BivariateFunction,double)$UnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.function.Asin#value(double)",
        "org.apache.commons.math3.analysis.function.Asinh#value(double)",
        "org.apache.commons.math3.analysis.FunctionUtils.multiply(UnivariateFunction[]...)$UnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.function.Atan#value(double)",
        "org.apache.commons.math3.analysis.FunctionUtils.toDifferentiableUnivariateFunction(UnivariateDifferentiableFunction)$DifferentiableUnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.function.Cbrt#value(double)",
        "org.apache.commons.math3.exception.MaxCountExceededException#getMax()",
        "org.apache.commons.math3.analysis.polynomials.PolynomialFunctionLagrangeForm#value(double)",
        "org.apache.commons.math3.analysis.function.Exp#value(double)",
        "org.apache.commons.math3.special.BesselJ#value(double)",
        "org.apache.commons.math3.analysis.polynomials.PolynomialFunctionNewtonForm#value(double)",
        "org.apache.commons.math3.analysis.FunctionUtils.add(UnivariateFunction[]...)$UnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.function.Sin#value(double)",
        "org.apache.commons.math3.analysis.function.Cos#value(double)",
        "org.apache.commons.math3.analysis.interpolation.UnivariatePeriodicInterpolator#interpolate(double[],double[])$UnivariateFunction$1#value(double)",
        "org.apache.commons.math3.exception.TooManyEvaluationsException#TooManyEvaluationsException(Number)",
        "org.apache.commons.math3.analysis.function.Log10#value(double)",
        "org.apache.commons.math3.analysis.function.Sqrt#value(double)",
        "org.apache.commons.math3.analysis.function.Log#value(double)",
        "org.apache.commons.math3.analysis.function.Sinc#value(double)",
        "org.apache.commons.math3.ode.events.EventState#evaluateStep(StepInterpolator)$UnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.function.Minus#value(double)",
        "org.apache.commons.math3.analysis.integration.IterativeLegendreGaussIntegrator#stage(int)$UnivariateFunction$1#value(double)",
        "org.apache.commons.math3.optimization.general.NonLinearConjugateGradientOptimizer.LineSearchFunction#value(double)",
        "org.apache.commons.math3.analysis.function.Floor#value(double)",
        "org.apache.commons.math3.analysis.FunctionUtils.multiply(DifferentiableUnivariateFunction[]...)$DifferentiableUnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.FunctionUtils.combine(BivariateFunction,UnivariateFunction,UnivariateFunction)$UnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.FunctionUtils.add(DifferentiableUnivariateFunction[]...)$UnivariateFunction$1$UnivariateFunction$1#derivative()$UnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.function.Sinh#value(double)",
        "org.apache.commons.math3.analysis.FunctionUtils.multiply(UnivariateDifferentiableFunction[]...)$UnivariateDifferentiableFunction$1#value(double)",
        "org.apache.commons.math3.analysis.function.Tan#value(double)",
        "org.apache.commons.math3.distribution.AbstractRealDistribution#inverseCumulativeProbability(double)$UnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.FunctionUtils.add(DifferentiableUnivariateFunction[]...)$DifferentiableUnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.function.Ceil#value(double)",
        "org.apache.commons.math3.analysis.function.Logistic#value(double)",
        "org.apache.commons.math3.analysis.function.Signum#value(double)",
        "org.apache.commons.math3.analysis.function.Constant#value(double)",
        "org.apache.commons.math3.analysis.function.Atanh#value(double)",
        "org.apache.commons.math3.analysis.FunctionUtils.compose(DifferentiableUnivariateFunction[]...)$UnivariateFunction$1$UnivariateFunction$1#derivative()$UnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.FunctionUtils.add(UnivariateDifferentiableFunction[]...)$UnivariateDifferentiableFunction$1#value(double)",
        "org.apache.commons.math3.analysis.function.Abs#value(double)",
        "org.apache.commons.math3.analysis.differentiation.FiniteDifferencesDifferentiator#differentiate(UnivariateFunction)$UnivariateDifferentiableFunction$1#value(double)",
        "org.apache.commons.math3.analysis.function.Identity#value(double)",
        "org.apache.commons.math3.analysis.function.Expm1#value(double)",
        "org.apache.commons.math3.analysis.function.Logit#value(double)",
        "org.apache.commons.math3.analysis.function.Log1p#value(double)",
        "org.apache.commons.math3.analysis.FunctionUtils.fix2ndArgument(BivariateFunction,double)$UnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.FunctionUtils.toUnivariateDifferential(DifferentiableUnivariateFunction)$UnivariateDifferentiableFunction$1#value(double)",
        "org.apache.commons.math3.analysis.FunctionUtils.toDifferentiableUnivariateFunction(UnivariateDifferentiableFunction)$UnivariateFunction$1$UnivariateFunction$1#derivative()$UnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.polynomials.PolynomialFunction#value(double)",
        "org.apache.commons.math3.analysis.function.Rint#value(double)",
        "org.apache.commons.math3.analysis.FunctionUtils.compose(UnivariateFunction[]...)$UnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.function.Cosh#value(double)",
        "org.apache.commons.math3.optimization.direct.PowellOptimizer.LineSearch#search(double[],double[])$UnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.FunctionUtils.compose(DifferentiableUnivariateFunction[]...)$DifferentiableUnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.function.Acosh#value(double)",
        "org.apache.commons.math3.analysis.function.StepFunction#value(double)",
        "org.apache.commons.math3.analysis.FunctionUtils.compose(UnivariateDifferentiableFunction[]...)$UnivariateDifferentiableFunction$1#value(double)",
        "org.apache.commons.math3.analysis.function.Acos#value(double)",
        "org.apache.commons.math3.analysis.function.Power#value(double)",
        "org.apache.commons.math3.optim.nonlinear.scalar.LineSearch#search(double[],double[])$UnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.function.Sigmoid#value(double)",
        "org.apache.commons.math3.util.IntegerSequence.Incrementor#increment()",
        "org.apache.commons.math3.analysis.function.Ulp#value(double)"
    ],
    "org.apache.commons.math3.userguide.sofm.ChineseRingsClassifier#ChineseRingsClassifier(ChineseRings,int,int)": [
        "org.apache.commons.math3.ml.neuralnet.SquareNeighbourhood.<staticinit>()",
        "org.apache.commons.math3.userguide.sofm.ChineseRingsClassifier.<init>()",
        "org.apache.commons.math3.ml.neuralnet.twod.NeuronSquareMesh2D#NeuronSquareMesh2D(int,boolean,int,boolean,SquareNeighbourhood,FeatureInitializer[])",
        "org.apache.commons.math3.userguide.sofm.ChineseRingsClassifier#makeInitializers()"
    ],
    "org.apache.commons.math3.stat.descriptive.AbstractUnivariateStatistic#test(double[],int,int,boolean)": ["org.apache.commons.math3.util.MathArrays.verifyValues(double[],int,int,boolean)"],
    "org.apache.commons.math3.linear.AbstractFieldMatrix#checkSubtractionCompatible(FieldMatrix<T extends FieldElement>)": [
        "org.apache.commons.math3.linear.DiagonalMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.Array2DRowRealMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.BlockFieldMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.SparseFieldMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.OpenMapRealMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.OpenMapRealMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.DiagonalMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.Array2DRowFieldMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.BlockFieldMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.SparseFieldMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.BlockRealMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.Array2DRowRealMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.Array2DRowFieldMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.BlockRealMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.MatrixDimensionMismatchException#MatrixDimensionMismatchException(int,int,int,int)"
    ],
    "org.apache.commons.math3.optimization.direct.CMAESOptimizer.sqrt(RealMatrix)": [
        "org.apache.commons.math3.linear.DiagonalMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.Array2DRowRealMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.BlockFieldMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.SparseFieldMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.DiagonalMatrix#getEntry(int,int)",
        "org.apache.commons.math3.linear.OpenMapRealMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.OpenMapRealMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.DiagonalMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.OpenMapRealMatrix#getEntry(int,int)",
        "org.apache.commons.math3.linear.BlockRealMatrix#getEntry(int,int)",
        "org.apache.commons.math3.linear.Array2DRowFieldMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.Array2DRowRealMatrix#Array2DRowRealMatrix(double[][],boolean)",
        "org.apache.commons.math3.linear.BlockFieldMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.SparseFieldMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.Array2DRowRealMatrix#getEntry(int,int)",
        "org.apache.commons.math3.linear.BlockRealMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.Array2DRowRealMatrix#getRowDimension()",
        "org.apache.commons.math3.util.FastMath.sqrt(double)",
        "org.apache.commons.math3.linear.Array2DRowFieldMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.BlockRealMatrix#getColumnDimension()"
    ],
    "org.apache.commons.math3.util.ResizableDoubleArray#getContractionCriteria()": ["org.apache.commons.math3.util.ResizableDoubleArray#getContractionCriterion()"],
    "org.apache.commons.math3.geometry.euclidean.twod.hull.ConvexHull2D#getLineSegments()": ["org.apache.commons.math3.geometry.euclidean.twod.hull.ConvexHull2D#retrieveLineSegments()"],
    "org.apache.commons.math3.distribution.ChiSquaredDistribution#ChiSquaredDistribution(RandomGenerator,double,double)": [
        "org.apache.commons.math3.distribution.GammaDistribution#GammaDistribution(double,double)",
        "org.apache.commons.math3.distribution.ChiSquaredDistribution.<staticinit>()",
        "org.apache.commons.math3.distribution.AbstractRealDistribution#AbstractRealDistribution(RandomGenerator)",
        "org.apache.commons.math3.distribution.ChiSquaredDistribution.<init>()"
    ],
    "org.apache.commons.math3.geometry.euclidean.oned.Vector1D#getNorm()": ["org.apache.commons.math3.util.FastMath.abs(double)"],
    "org.apache.commons.math3.ml.clustering.FuzzyKMeansClusterer#calculateMaxMembershipChange(double[][])": [
        "org.apache.commons.math3.util.FastMath.max(double,double)",
        "org.apache.commons.math3.util.FastMath.abs(double)"
    ],
    "org.apache.commons.math3.linear.BlockRealMatrix#setEntry(int,int,double)": [
        "org.apache.commons.math3.linear.MatrixUtils.checkMatrixIndex(AnyMatrix,int,int)",
        "org.apache.commons.math3.linear.BlockRealMatrix.<staticinit>()",
        "org.apache.commons.math3.linear.BlockRealMatrix#blockWidth(int)"
    ],
    "org.apache.commons.math3.stat.inference.TestUtils.chiSquareTestDataSetsComparison(long[],long[])": [
        "org.apache.commons.math3.stat.inference.TestUtils.<staticinit>()",
        "org.apache.commons.math3.stat.inference.ChiSquareTest#chiSquareTestDataSetsComparison(long[],long[])"
    ],
    "org.apache.commons.math3.optimization.univariate.BaseAbstractUnivariateOptimizer#getMaxEvaluations()": ["org.apache.commons.math3.util.Incrementor#getMaximalCount()"],
    "org.apache.commons.math3.complex.Quaternion#dotProduct(Quaternion)": ["org.apache.commons.math3.complex.Quaternion.dotProduct(Quaternion,Quaternion)"],
    "org.apache.commons.math3.ode.ExpandableStatefulODE.SecondaryComponent#SecondaryComponent(SecondaryEquations,int)": [
        "org.apache.commons.math3.ode.EquationsMapper#EquationsMapper(int,int)",
        "org.apache.commons.math3.ode.ExpandableStatefulODE.SecondaryComponent.<init>()",
        "org.apache.commons.math3.ode.JacobianMatrices.JacobiansSecondaryEquations#getDimension()"
    ],
    "org.apache.commons.math3.geometry.VectorFormat#VectorFormat(String,String,String,NumberFormat)": ["org.apache.commons.math3.geometry.VectorFormat.<init>()"],
    "org.apache.commons.math3.util.Decimal64#round()": ["org.apache.commons.math3.util.FastMath.round(double)"],
    "org.apache.commons.math3.linear.BlockFieldMatrix#createMatrix(int,int)": [
        "org.apache.commons.math3.linear.BlockFieldMatrix#BlockFieldMatrix(Field<T extends FieldElement>,int,int)",
        "org.apache.commons.math3.linear.AbstractFieldMatrix#getField()"
    ],
    "org.apache.commons.math3.geometry.euclidean.twod.Line#reset(Vector2D,Vector2D)": [
        "org.apache.commons.math3.geometry.euclidean.twod.Vector2D#getY()",
        "org.apache.commons.math3.geometry.euclidean.twod.Vector2D#getX()",
        "org.apache.commons.math3.util.MathArrays.linearCombination(double,double,double,double)",
        "org.apache.commons.math3.geometry.euclidean.twod.Line#unlinkReverse()",
        "org.apache.commons.math3.util.FastMath.<staticinit>()",
        "org.apache.commons.math3.util.FastMath.hypot(double,double)",
        "org.apache.commons.math3.util.FastMath.atan2(double,double)"
    ],
    "org.apache.commons.math3.linear.ArrayFieldVector#outerProduct(FieldVector<T extends FieldElement>)": [
        "org.apache.commons.math3.linear.SparseFieldVector#getEntry(int)",
        "org.apache.commons.math3.linear.ArrayFieldVector#getDimension()",
        "org.apache.commons.math3.linear.Array2DRowFieldMatrix#Array2DRowFieldMatrix(Field<T extends FieldElement>,int,int)",
        "org.apache.commons.math3.linear.SparseFieldMatrix#setEntry(int,int,T extends FieldElement)",
        "org.apache.commons.math3.linear.Array2DRowFieldMatrix#setEntry(int,int,T extends FieldElement)",
        "org.apache.commons.math3.linear.BlockFieldMatrix#setEntry(int,int,T extends FieldElement)",
        "org.apache.commons.math3.linear.ArrayFieldVector#getEntry(int)",
        "org.apache.commons.math3.linear.SparseFieldVector#getDimension()",
        "org.apache.commons.math3.linear.ArrayFieldVector#outerProduct(ArrayFieldVector<T extends FieldElement>)"
    ],
    "org.apache.commons.math3.linear.AbstractRealMatrix#walkInRowOrder(RealMatrixPreservingVisitor,int,int,int,int)": [
        "org.apache.commons.math3.linear.DiagonalMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.Array2DRowRealMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.DefaultRealMatrixPreservingVisitor#visit(int,int,double)",
        "org.apache.commons.math3.linear.SingularValueDecomposition#getCovariance(double)$DefaultRealMatrixPreservingVisitor$1#visit(int,int,double)",
        "org.apache.commons.math3.linear.DiagonalMatrix#getEntry(int,int)",
        "org.apache.commons.math3.linear.OpenMapRealMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.DiagonalMatrix#getRowDimension()",
        "org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator.Corrector#start(int,int,int,int,int,int)",
        "org.apache.commons.math3.linear.BlockRealMatrix#getEntry(int,int)",
        "org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator.Corrector#visit(int,int,double)",
        "org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator.Corrector#end()",
        "org.apache.commons.math3.linear.BlockRealMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.AbstractRealMatrix#getNorm()$RealMatrixPreservingVisitor$1#start(int,int,int,int,int,int)",
        "org.apache.commons.math3.linear.AbstractRealMatrix#transpose()$DefaultRealMatrixPreservingVisitor$1#visit(int,int,double)",
        "org.apache.commons.math3.linear.DefaultRealMatrixPreservingVisitor#start(int,int,int,int,int,int)",
        "org.apache.commons.math3.linear.AbstractRealMatrix#copySubMatrix(int,int,int,int,double[][])$DefaultRealMatrixPreservingVisitor$1#start(int,int,int,int,int,int)",
        "org.apache.commons.math3.linear.AbstractRealMatrix#getNorm()$RealMatrixPreservingVisitor$1#end()",
        "org.apache.commons.math3.linear.AbstractRealMatrix#getFrobeniusNorm()$RealMatrixPreservingVisitor$1#end()",
        "org.apache.commons.math3.linear.OpenMapRealMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.AbstractRealMatrix#getFrobeniusNorm()$RealMatrixPreservingVisitor$1#visit(int,int,double)",
        "org.apache.commons.math3.linear.DefaultRealMatrixPreservingVisitor#end()",
        "org.apache.commons.math3.linear.AbstractRealMatrix#getFrobeniusNorm()$RealMatrixPreservingVisitor$1#start(int,int,int,int,int,int)",
        "org.apache.commons.math3.linear.OpenMapRealMatrix#getEntry(int,int)",
        "org.apache.commons.math3.linear.AbstractRealMatrix#getNorm()$RealMatrixPreservingVisitor$1#visit(int,int,double)",
        "org.apache.commons.math3.linear.AbstractRealMatrix#copySubMatrix(int,int,int,int,double[][])$DefaultRealMatrixPreservingVisitor$1#visit(int,int,double)",
        "org.apache.commons.math3.linear.Array2DRowRealMatrix#getEntry(int,int)",
        "org.apache.commons.math3.linear.Array2DRowRealMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.MatrixUtils.checkSubMatrixIndex(AnyMatrix,int,int,int,int)",
        "org.apache.commons.math3.linear.BlockRealMatrix#getColumnDimension()"
    ],
    "org.apache.commons.math3.optimization.linear.SimplexSolver#SimplexSolver()": [
        "org.apache.commons.math3.optimization.linear.SimplexSolver.<staticinit>()",
        "org.apache.commons.math3.optimization.linear.SimplexSolver#SimplexSolver(double,int)"
    ],
    "org.apache.commons.math3.fitting.leastsquares.LevenbergMarquardtOptimizer#withOrthoTolerance(double)": ["org.apache.commons.math3.fitting.leastsquares.LevenbergMarquardtOptimizer#LevenbergMarquardtOptimizer(double,double,double,double,double)"],
    "org.apache.commons.math3.distribution.HypergeometricDistribution#logProbability(int)": [
        "org.apache.commons.math3.distribution.SaddlePointExpansion.logBinomialProbability(int,int,double,double)",
        "org.apache.commons.math3.distribution.HypergeometricDistribution#getDomain(int,int,int)"
    ],
    "org.apache.commons.math3.optimization.fitting.GaussianFitter#fit(double[])": [
        "org.apache.commons.math3.optimization.fitting.GaussianFitter#fit(double[])$Parametric$1.<init>()",
        "org.apache.commons.math3.optimization.fitting.CurveFitter#fit(T extends ParametricUnivariateFunction,double[])"
    ],
    "org.apache.commons.math3.linear.SchurTransformer#initQRStep(int,int,ShiftInfo,double[])": ["org.apache.commons.math3.util.FastMath.abs(double)"],
    "org.apache.commons.math3.linear.EigenDecomposition#EigenDecomposition(double[],double[])": [
        "org.apache.commons.math3.linear.EigenDecomposition.<init>()",
        "org.apache.commons.math3.linear.EigenDecomposition#findEigenVectors(double[][])"
    ],
    "org.apache.commons.math3.stat.StatUtils.sumSq(double[])": [
        "org.apache.commons.math3.stat.descriptive.moment.StandardDeviation#evaluate(double[])",
        "org.apache.commons.math3.stat.descriptive.moment.Variance#evaluate(double[])",
        "org.apache.commons.math3.stat.descriptive.AbstractUnivariateStatistic#evaluate(double[])",
        "org.apache.commons.math3.stat.StatUtils.<staticinit>()",
        "org.apache.commons.math3.stat.descriptive.AbstractStorelessUnivariateStatistic#evaluate(double[])"
    ],
    "org.apache.commons.math3.distribution.LogNormalDistribution#cumulativeProbability(double,double)": ["org.apache.commons.math3.distribution.LogNormalDistribution#probability(double,double)"],
    "org.apache.commons.math3.distribution.GeometricDistribution#probability(int)": ["org.apache.commons.math3.util.FastMath.exp(double)"],
    "org.apache.commons.math3.util.ArithmeticUtils.subAndCheck(long,long)": [
        "org.apache.commons.math3.util.ArithmeticUtils.addAndCheck(long,long,Localizable)",
        "org.apache.commons.math3.exception.util.LocalizedFormats.<staticinit>()"
    ],
    "org.apache.commons.math3.geometry.euclidean.threed.CardanEulerSingularityException#CardanEulerSingularityException(boolean)": [
        "org.apache.commons.math3.geometry.euclidean.threed.CardanEulerSingularityException.<init>()",
        "org.apache.commons.math3.exception.util.LocalizedFormats.<staticinit>()"
    ],
    "org.apache.commons.math3.ode.MultistepFieldIntegrator.FieldNordsieckInitializer#FieldNordsieckInitializer(FieldEquationsMapper<T extends RealFieldElement>,int)": [
        "org.apache.commons.math3.util.MathArrays.buildArray(Field<T>,int,int)",
        "org.apache.commons.math3.ode.AbstractFieldIntegrator#getField()",
        "org.apache.commons.math3.util.MathArrays.buildArray(Field<T>,int)",
        "org.apache.commons.math3.ode.MultistepFieldIntegrator.FieldNordsieckInitializer.<init>()"
    ],
    "org.apache.commons.math3.optimization.Weight#Weight(RealMatrix)": [
        "org.apache.commons.math3.linear.DiagonalMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.Array2DRowRealMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.BlockFieldMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.BlockRealMatrix#copy()",
        "org.apache.commons.math3.linear.SparseFieldMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.OpenMapRealMatrix#copy()",
        "org.apache.commons.math3.linear.OpenMapRealMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.OpenMapRealMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.DiagonalMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.Array2DRowFieldMatrix#getColumnDimension()",
        "org.apache.commons.math3.optimization.Weight.<init>()",
        "org.apache.commons.math3.linear.SparseFieldMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.BlockFieldMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.BlockRealMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.Array2DRowRealMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.NonSquareMatrixException#NonSquareMatrixException(int,int)",
        "org.apache.commons.math3.linear.Array2DRowFieldMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.Array2DRowRealMatrix#copy()",
        "org.apache.commons.math3.linear.BlockRealMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.DiagonalMatrix#copy()"
    ],
    "org.apache.commons.math3.ml.clustering.evaluation.ClusterEvaluator#ClusterEvaluator()": [
        "org.apache.commons.math3.ml.clustering.evaluation.ClusterEvaluator#ClusterEvaluator(DistanceMeasure)",
        "org.apache.commons.math3.ml.distance.EuclideanDistance.<init>()"
    ],
    "org.apache.commons.math3.analysis.polynomials.PolynomialFunction#PolynomialFunction(double[])": [
        "org.apache.commons.math3.exception.NoDataException#NoDataException(Localizable)",
        "org.apache.commons.math3.util.MathUtils.checkNotNull(Object)",
        "org.apache.commons.math3.analysis.polynomials.PolynomialFunction.<init>()",
        "org.apache.commons.math3.exception.util.LocalizedFormats.<staticinit>()"
    ],
    "org.apache.commons.math3.linear.SymmLQ.State#updateNorms()": [
        "org.apache.commons.math3.linear.SymmLQ.State.<staticinit>()",
        "org.apache.commons.math3.linear.SingularOperatorException#SingularOperatorException()",
        "org.apache.commons.math3.util.FastMath.abs(double)",
        "org.apache.commons.math3.util.FastMath.sqrt(double)",
        "org.apache.commons.math3.linear.IllConditionedOperatorException#IllConditionedOperatorException(double)",
        "org.apache.commons.math3.util.FastMath.min(double,double)"
    ],
    "org.apache.commons.math3.geometry.euclidean.threed.FieldRotation#buildArray(T extends RealFieldElement,T extends RealFieldElement,T extends RealFieldElement)": ["org.apache.commons.math3.util.MathArrays.buildArray(Field<T>,int)"],
    "org.apache.commons.math3.analysis.integration.IterativeLegendreGaussIntegrator#IterativeLegendreGaussIntegrator(int,int,int)": [
        "org.apache.commons.math3.analysis.integration.IterativeLegendreGaussIntegrator#IterativeLegendreGaussIntegrator(int,double,double,int,int)",
        "org.apache.commons.math3.analysis.integration.BaseAbstractUnivariateIntegrator.<staticinit>()"
    ],
    "org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet.SubIntervalsIterator#next()": ["org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet.SubIntervalsIterator#selectPending()"],
    "org.apache.commons.math3.geometry.spherical.twod.Edge#Edge(Vertex,Vertex,double,Circle)": [
        "org.apache.commons.math3.geometry.spherical.twod.Vertex#setIncoming(Edge)",
        "org.apache.commons.math3.geometry.spherical.twod.Vertex#setOutgoing(Edge)",
        "org.apache.commons.math3.geometry.spherical.twod.Edge.<init>()"
    ],
    "org.apache.commons.math3.analysis.function.Acos#value(double)": ["org.apache.commons.math3.util.FastMath.acos(double)"],
    "org.apache.commons.math3.analysis.function.Gaussian#Gaussian()": ["org.apache.commons.math3.analysis.function.Gaussian#Gaussian(double,double)"],
    "org.apache.commons.math3.stat.descriptive.moment.SemiVariance.<staticinit>()": ["org.apache.commons.math3.stat.descriptive.moment.SemiVariance.Direction.<staticinit>()"],
    "org.apache.commons.math3.stat.descriptive.StatisticalSummaryValues#toString()": [
        "org.apache.commons.math3.stat.descriptive.StatisticalSummaryValues#getMax()",
        "org.apache.commons.math3.stat.descriptive.StatisticalSummaryValues#getVariance()",
        "org.apache.commons.math3.stat.descriptive.StatisticalSummaryValues#getMean()",
        "org.apache.commons.math3.stat.descriptive.StatisticalSummaryValues#getSum()",
        "org.apache.commons.math3.stat.descriptive.StatisticalSummaryValues#getMin()",
        "org.apache.commons.math3.stat.descriptive.StatisticalSummaryValues#getN()",
        "org.apache.commons.math3.stat.descriptive.StatisticalSummaryValues#getStandardDeviation()"
    ],
    "org.apache.commons.math3.analysis.solvers.LaguerreSolver#solveComplex(double[],double)": ["org.apache.commons.math3.analysis.solvers.LaguerreSolver#solveComplex(double[],double,int)"],
    "org.apache.commons.math3.linear.Array2DRowRealMatrix#setEntry(int,int,double)": ["org.apache.commons.math3.linear.MatrixUtils.checkMatrixIndex(AnyMatrix,int,int)"],
    "org.apache.commons.math3.dfp.Dfp#sinh()": [
        "org.apache.commons.math3.dfp.Dfp#negate()",
        "org.apache.commons.math3.dfp.DfpMath.exp(Dfp)",
        "org.apache.commons.math3.dfp.Dfp#subtract(Dfp)",
        "org.apache.commons.math3.dfp.Dfp#divide(int)"
    ],
    "org.apache.commons.math3.linear.HessenbergTransformer#getP()": ["org.apache.commons.math3.linear.MatrixUtils.createRealMatrix(double[][])"],
    "org.apache.commons.math3.optim.nonlinear.scalar.MultivariateFunctionPenaltyAdapter#MultivariateFunctionPenaltyAdapter(MultivariateFunction,double[],double[],double,double[])": [
        "org.apache.commons.math3.exception.DimensionMismatchException#DimensionMismatchException(int,int)",
        "org.apache.commons.math3.util.MathUtils.checkNotNull(Object)",
        "org.apache.commons.math3.optim.nonlinear.scalar.MultivariateFunctionPenaltyAdapter.<init>()"
    ],
    "org.apache.commons.math3.stat.StatUtils.mode(double[],int,int)": [
        "org.apache.commons.math3.exception.NotPositiveException#NotPositiveException(Localizable,Number)",
        "org.apache.commons.math3.stat.StatUtils.getMode(double[],int,int)",
        "org.apache.commons.math3.exception.util.LocalizedFormats.<staticinit>()"
    ],
    "org.apache.commons.math3.random.MersenneTwister#setSeed(int[])": [
        "org.apache.commons.math3.random.MersenneTwister.<staticinit>()",
        "org.apache.commons.math3.random.MersenneTwister#setSeed(int[])",
        "org.apache.commons.math3.random.BitsStreamGenerator#clear()",
        "org.apache.commons.math3.random.MersenneTwister#setSeed(int)",
        "org.apache.commons.math3.util.FastMath.max(int,int)"
    ],
    "org.apache.commons.math3.util.Decimal64#abs()": [
        "org.apache.commons.math3.util.FastMath.abs(double)",
        "org.apache.commons.math3.util.Decimal64#Decimal64(double)"
    ],
    "org.apache.commons.math3.random.RandomAdaptor.createAdaptor(RandomGenerator)": ["org.apache.commons.math3.random.RandomAdaptor#RandomAdaptor(RandomGenerator)"],
    "org.apache.commons.math3.analysis.differentiation.DerivativeStructure#cbrt()": ["org.apache.commons.math3.analysis.differentiation.DerivativeStructure#rootN(int)"],
    "org.apache.commons.math3.fraction.Fraction.getReducedFraction(int,int)": [
        "org.apache.commons.math3.fraction.Fraction.<staticinit>()",
        "org.apache.commons.math3.util.ArithmeticUtils.gcd(int,int)",
        "org.apache.commons.math3.fraction.Fraction#Fraction(int,int)",
        "org.apache.commons.math3.exception.util.LocalizedFormats.<staticinit>()"
    ],
    "org.apache.commons.math3.linear.EigenDecomposition#transformToSchur(RealMatrix)": [
        "org.apache.commons.math3.util.Precision.equals(double,double,double)",
        "org.apache.commons.math3.linear.EigenDecomposition.<staticinit>()",
        "org.apache.commons.math3.util.FastMath.abs(double)",
        "org.apache.commons.math3.linear.Array2DRowRealMatrix#getData()",
        "org.apache.commons.math3.util.FastMath.sqrt(double)",
        "org.apache.commons.math3.linear.SchurTransformer#SchurTransformer(RealMatrix)",
        "org.apache.commons.math3.linear.SchurTransformer#getT()",
        "org.apache.commons.math3.linear.DiagonalMatrix#getData()",
        "org.apache.commons.math3.linear.AbstractRealMatrix#getData()",
        "org.apache.commons.math3.linear.BlockRealMatrix#getData()"
    ],
    "org.apache.commons.math3.random.SynchronizedRandomGenerator#SynchronizedRandomGenerator(RandomGenerator)": ["org.apache.commons.math3.random.SynchronizedRandomGenerator.<init>()"],
    "org.apache.commons.math3.linear.SingularValueDecomposition#getCovariance(double)$DefaultRealMatrixPreservingVisitor$1.<init>()": ["org.apache.commons.math3.linear.DefaultRealMatrixPreservingVisitor.<init>()"],
    "org.apache.commons.math3.genetics.AbstractListChromosome#toString()": [
        "org.apache.commons.math3.genetics.Chromosome#getFitness()",
        "org.apache.commons.math3.genetics.AbstractListChromosome#getRepresentation()"
    ],
    "org.apache.commons.math3.analysis.function.Log10#value(double)": ["org.apache.commons.math3.util.FastMath.log10(double)"],
    "org.apache.commons.math3.distribution.CauchyDistribution#inverseCumulativeProbability(double)": [
        "org.apache.commons.math3.util.FastMath.tan(double)",
        "org.apache.commons.math3.util.FastMath.<staticinit>()"
    ],
    "org.apache.commons.math3.geometry.euclidean.threed.Vector3D#distance(Vector<Euclidean3D>)": ["org.apache.commons.math3.geometry.euclidean.threed.Vector3D#distance(Point<Euclidean3D>)"],
    "org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D#hashCode()": ["org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D#isNaN()"],
    "org.apache.commons.math3.optimization.direct.MultivariateFunctionMappingAdapter.LowerBoundMapper#LowerBoundMapper(double)": ["org.apache.commons.math3.optimization.direct.MultivariateFunctionMappingAdapter.LowerBoundMapper.<init>()"],
    "org.apache.commons.math3.linear.AbstractRealMatrix#setColumnMatrix(int,RealMatrix)": [
        "org.apache.commons.math3.linear.DiagonalMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.Array2DRowRealMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.BlockFieldMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.Array2DRowRealMatrix#setEntry(int,int,double)",
        "org.apache.commons.math3.linear.SparseFieldMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.DiagonalMatrix#getEntry(int,int)",
        "org.apache.commons.math3.linear.MatrixUtils.checkColumnIndex(AnyMatrix,int)",
        "org.apache.commons.math3.linear.OpenMapRealMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.OpenMapRealMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.DiagonalMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.BlockRealMatrix#setEntry(int,int,double)",
        "org.apache.commons.math3.linear.OpenMapRealMatrix#setEntry(int,int,double)",
        "org.apache.commons.math3.linear.OpenMapRealMatrix#getEntry(int,int)",
        "org.apache.commons.math3.linear.BlockRealMatrix#getEntry(int,int)",
        "org.apache.commons.math3.linear.Array2DRowFieldMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.SparseFieldMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.BlockFieldMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.BlockRealMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.Array2DRowRealMatrix#getEntry(int,int)",
        "org.apache.commons.math3.linear.Array2DRowRealMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.Array2DRowFieldMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.BlockRealMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.MatrixDimensionMismatchException#MatrixDimensionMismatchException(int,int,int,int)",
        "org.apache.commons.math3.linear.DiagonalMatrix#setEntry(int,int,double)"
    ],
    "org.apache.commons.math3.analysis.differentiation.DerivativeStructure#add(double)": ["org.apache.commons.math3.analysis.differentiation.DerivativeStructure#DerivativeStructure(DerivativeStructure)"],
    "org.apache.commons.math3.fitting.leastsquares.LeastSquaresFactory.LocalValueAndJacobianFunction#value(RealVector)": [
        "org.apache.commons.math3.linear.OpenMapRealVector#toArray()",
        "org.apache.commons.math3.linear.RealVector#toArray()",
        "org.apache.commons.math3.fitting.leastsquares.LeastSquaresFactory.LocalValueAndJacobianFunction#computeValue(double[])",
        "org.apache.commons.math3.util.Pair#Pair(K,V)",
        "org.apache.commons.math3.linear.RealVector.unmodifiableRealVector(RealVector)$RealVector$1#toArray()",
        "org.apache.commons.math3.fitting.leastsquares.LeastSquaresFactory.LocalValueAndJacobianFunction#computeJacobian(double[])",
        "org.apache.commons.math3.linear.ArrayRealVector#toArray()"
    ],
    "org.apache.commons.math3.linear.AbstractFieldMatrix#setRowVector(int,FieldVector<T extends FieldElement>)": [
        "org.apache.commons.math3.linear.SparseFieldMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.BlockFieldMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.SparseFieldVector#getEntry(int)",
        "org.apache.commons.math3.linear.ArrayFieldVector#getDimension()",
        "org.apache.commons.math3.linear.SparseFieldMatrix#setEntry(int,int,T extends FieldElement)",
        "org.apache.commons.math3.linear.Array2DRowFieldMatrix#setEntry(int,int,T extends FieldElement)",
        "org.apache.commons.math3.linear.BlockFieldMatrix#setEntry(int,int,T extends FieldElement)",
        "org.apache.commons.math3.linear.ArrayFieldVector#getEntry(int)",
        "org.apache.commons.math3.linear.SparseFieldVector#getDimension()",
        "org.apache.commons.math3.linear.MatrixDimensionMismatchException#MatrixDimensionMismatchException(int,int,int,int)",
        "org.apache.commons.math3.linear.Array2DRowFieldMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.AbstractFieldMatrix#checkRowIndex(int)"
    ],
    "org.apache.commons.math3.dfp.DfpField#getIEEEFlags()": ["org.apache.commons.math3.dfp.DfpField.<staticinit>()"],
    "org.apache.commons.math3.linear.AbstractRealMatrix#hashCode()": [
        "org.apache.commons.math3.linear.DiagonalMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.Array2DRowRealMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.DiagonalMatrix#getEntry(int,int)",
        "org.apache.commons.math3.linear.OpenMapRealMatrix#getColumnDimension()",
        "org.apache.commons.math3.util.MathUtils.hash(double)",
        "org.apache.commons.math3.linear.OpenMapRealMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.DiagonalMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.OpenMapRealMatrix#getEntry(int,int)",
        "org.apache.commons.math3.linear.BlockRealMatrix#getEntry(int,int)",
        "org.apache.commons.math3.linear.Array2DRowRealMatrix#getEntry(int,int)",
        "org.apache.commons.math3.linear.BlockRealMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.Array2DRowRealMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.BlockRealMatrix#getColumnDimension()"
    ],
    "org.apache.commons.math3.optimization.general.AbstractLeastSquaresOptimizer#computeSigma(double[],double)": [
        "org.apache.commons.math3.util.FastMath.sqrt(double)",
        "org.apache.commons.math3.optimization.general.AbstractLeastSquaresOptimizer#computeCovariances(double[],double)"
    ],
    "org.apache.commons.math3.analysis.differentiation.DerivativeStructure#DerivativeStructure(int,int,int,double)": [
        "org.apache.commons.math3.analysis.differentiation.DSCompiler#getSize()",
        "org.apache.commons.math3.analysis.differentiation.DerivativeStructure#DerivativeStructure(int,int,double[]...)",
        "org.apache.commons.math3.analysis.differentiation.DSCompiler.getCompiler(int,int)"
    ],
    "org.apache.commons.math3.geometry.partitioning.Characterization#addOutsideTouching(SubHyperplane<S extends Space>,List<BSPTree<S extends Space>>)": ["org.apache.commons.math3.geometry.partitioning.NodesSet#addAll(Iterable<BSPTree<S extends Space>>)"],
    "org.apache.commons.math3.geometry.euclidean.threed.SphericalCoordinates#toCartesianHessian(double[][],double[])": [
        "org.apache.commons.math3.geometry.euclidean.threed.SphericalCoordinates#computeJacobian()",
        "org.apache.commons.math3.geometry.euclidean.threed.SphericalCoordinates#computeHessians()"
    ],
    "org.apache.commons.math3.linear.AbstractFieldMatrix#preMultiply(FieldVector<T extends FieldElement>)": [
        "org.apache.commons.math3.linear.Array2DRowFieldMatrix#preMultiply(T extends FieldElement[])",
        "org.apache.commons.math3.linear.BlockFieldMatrix#getColumnDimension()",
        "org.apache.commons.math3.util.BigRealField#getZero()",
        "org.apache.commons.math3.linear.ArrayFieldVector#getEntry(int)",
        "org.apache.commons.math3.linear.AbstractFieldMatrix#preMultiply(T extends FieldElement[])",
        "org.apache.commons.math3.dfp.DfpField#getZero()",
        "org.apache.commons.math3.linear.BlockFieldMatrix#preMultiply(T extends FieldElement[])",
        "org.apache.commons.math3.linear.BlockFieldMatrix#getRowDimension()",
        "org.apache.commons.math3.exception.DimensionMismatchException#DimensionMismatchException(int,int)",
        "org.apache.commons.math3.linear.ArrayFieldVector#getDataRef()",
        "org.apache.commons.math3.fraction.FractionField#getZero()",
        "org.apache.commons.math3.linear.SparseFieldVector#getDimension()",
        "org.apache.commons.math3.complex.ComplexField#getZero()",
        "org.apache.commons.math3.util.MathArrays.buildArray(Field<T>,int)",
        "org.apache.commons.math3.linear.BlockFieldMatrix#getEntry(int,int)",
        "org.apache.commons.math3.linear.SparseFieldMatrix#getEntry(int,int)",
        "org.apache.commons.math3.linear.ArrayFieldVector#getDimension()",
        "org.apache.commons.math3.linear.SparseFieldVector#getEntry(int)",
        "org.apache.commons.math3.analysis.differentiation.SparseGradient#getField()$Field$1#getZero()",
        "org.apache.commons.math3.linear.SparseFieldMatrix#getRowDimension()",
        "org.apache.commons.math3.util.Decimal64Field#getZero()",
        "org.apache.commons.math3.linear.Array2DRowFieldMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.SparseFieldMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.ArrayFieldVector#ArrayFieldVector(Field<T extends FieldElement>,T extends FieldElement[],boolean)",
        "org.apache.commons.math3.analysis.differentiation.DerivativeStructure#getField()$Field$1#getZero()",
        "org.apache.commons.math3.linear.Array2DRowFieldMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.Array2DRowFieldMatrix#getEntry(int,int)",
        "org.apache.commons.math3.fraction.BigFractionField#getZero()"
    ],
    "org.apache.commons.math3.ml.neuralnet.Network#copy()": ["org.apache.commons.math3.ml.neuralnet.Network#Network(long,int)"],
    "org.apache.commons.math3.analysis.integration.TrapezoidIntegrator#TrapezoidIntegrator(double,double,int,int)": [
        "org.apache.commons.math3.analysis.integration.TrapezoidIntegrator.<init>()",
        "org.apache.commons.math3.analysis.integration.BaseAbstractUnivariateIntegrator#BaseAbstractUnivariateIntegrator(double,double,int,int)",
        "org.apache.commons.math3.analysis.integration.TrapezoidIntegrator.<staticinit>()"
    ],
    "org.apache.commons.math3.stat.inference.TTest#t(double[],double[])": [
        "org.apache.commons.math3.stat.StatUtils.mean(double[])",
        "org.apache.commons.math3.stat.inference.TTest#checkSampleData(double[])",
        "org.apache.commons.math3.stat.inference.TTest#t(double,double,double,double,double,double)",
        "org.apache.commons.math3.stat.StatUtils.variance(double[])"
    ],
    "org.apache.commons.math3.distribution.AbstractIntegerDistribution#reseedRandomGenerator(long)": [
        "org.apache.commons.math3.random.RandomGeneratorFactory.createRandomGenerator(Random)$RandomGenerator$1#setSeed(long)",
        "org.apache.commons.math3.random.SynchronizedRandomGenerator#setSeed(long)",
        "org.apache.commons.math3.random.MersenneTwister#setSeed(long)",
        "org.apache.commons.math3.random.AbstractWell#setSeed(long)",
        "org.apache.commons.math3.random.RandomAdaptor#setSeed(long)",
        "org.apache.commons.math3.random.RandomDataImpl#reSeed(long)",
        "org.apache.commons.math3.random.ISAACRandom#setSeed(long)"
    ],
    "org.apache.commons.math3.geometry.spherical.twod.Circle#getOffset(Vector3D)": [
        "org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(Vector3D,Vector3D)",
        "org.apache.commons.math3.util.FastMath.<staticinit>()"
    ],
    "org.apache.commons.math3.optimization.linear.LinearObjectiveFunction#equals(Object)": [
        "org.apache.commons.math3.linear.OpenMapRealVector#equals(Object)",
        "org.apache.commons.math3.linear.ArrayRealVector#equals(Object)",
        "org.apache.commons.math3.linear.RealVector#equals(Object)"
    ],
    "org.apache.commons.math3.analysis.solvers.AbstractPolynomialSolver#getCoefficients()": ["org.apache.commons.math3.analysis.polynomials.PolynomialFunction#getCoefficients()"],
    "org.apache.commons.math3.util.BigReal#subtract(BigReal)": ["org.apache.commons.math3.util.BigReal#BigReal(char[])"],
    "org.apache.commons.math3.complex.Complex#reciprocal()": [
        "org.apache.commons.math3.util.FastMath.abs(double)",
        "org.apache.commons.math3.complex.Complex.<staticinit>()",
        "org.apache.commons.math3.complex.Complex#createComplex(double,double)"
    ],
    "org.apache.commons.math3.linear.RealVector.unmodifiableRealVector(RealVector)$RealVector$1#add(RealVector)": [
        "org.apache.commons.math3.linear.ArrayRealVector#add(RealVector)",
        "org.apache.commons.math3.linear.RealVector#add(RealVector)",
        "org.apache.commons.math3.linear.OpenMapRealVector#add(RealVector)",
        "org.apache.commons.math3.linear.RealVector.unmodifiableRealVector(RealVector)$RealVector$1#add(RealVector)"
    ],
    "org.apache.commons.math3.stat.descriptive.moment.SemiVariance#SemiVariance(boolean,Direction)": [
        "org.apache.commons.math3.stat.descriptive.moment.SemiVariance.<init>()",
        "org.apache.commons.math3.stat.descriptive.AbstractUnivariateStatistic.<init>()"
    ],
    "org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet#computeGeometricalProperties()": [
        "org.apache.commons.math3.geometry.euclidean.oned.Interval#getSize()",
        "org.apache.commons.math3.geometry.partitioning.AbstractRegion#setSize(double)",
        "org.apache.commons.math3.geometry.partitioning.BSPTree#getAttribute()",
        "org.apache.commons.math3.geometry.euclidean.oned.Vector1D.<staticinit>()",
        "org.apache.commons.math3.geometry.euclidean.oned.Vector1D#Vector1D(double)",
        "org.apache.commons.math3.util.Precision.<staticinit>()",
        "org.apache.commons.math3.geometry.partitioning.BSPTree#getCut()",
        "org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet#asList()",
        "org.apache.commons.math3.geometry.euclidean.oned.Interval#getBarycenter()",
        "org.apache.commons.math3.geometry.euclidean.oned.OrientedPoint#getLocation()",
        "org.apache.commons.math3.geometry.partitioning.AbstractRegion#getTree(boolean)",
        "org.apache.commons.math3.geometry.partitioning.AbstractRegion#setBarycenter(Point<S extends Space>)",
        "org.apache.commons.math3.geometry.partitioning.AbstractSubHyperplane#getHyperplane()"
    ],
    "org.apache.commons.math3.distribution.NakagamiDistribution#getNumericalVariance()": ["org.apache.commons.math3.special.Gamma.gamma(double)"],
    "org.apache.commons.math3.stat.clustering.EuclideanDoublePoint#EuclideanDoublePoint(double[])": ["org.apache.commons.math3.stat.clustering.EuclideanDoublePoint.<init>()"],
    "org.apache.commons.math3.util.FastMath.floorMod(int,int)": ["org.apache.commons.math3.exception.util.LocalizedFormats.<staticinit>()"],
    "org.apache.commons.math3.linear.AbstractRealMatrix#walkInRowOrder(RealMatrixChangingVisitor,int,int,int,int)": [
        "org.apache.commons.math3.linear.DiagonalMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.Array2DRowRealMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.DefaultRealMatrixChangingVisitor#end()",
        "org.apache.commons.math3.linear.Array2DRowRealMatrix#setEntry(int,int,double)",
        "org.apache.commons.math3.linear.DiagonalMatrix#getEntry(int,int)",
        "org.apache.commons.math3.linear.OpenMapRealMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.OpenMapRealMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.DiagonalMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.BlockRealMatrix#setEntry(int,int,double)",
        "org.apache.commons.math3.linear.OpenMapRealMatrix#setEntry(int,int,double)",
        "org.apache.commons.math3.linear.DefaultRealMatrixChangingVisitor#visit(int,int,double)",
        "org.apache.commons.math3.linear.OpenMapRealMatrix#getEntry(int,int)",
        "org.apache.commons.math3.linear.BlockRealMatrix#getEntry(int,int)",
        "org.apache.commons.math3.linear.AbstractRealMatrix#getSubMatrix(int[],int[])$DefaultRealMatrixChangingVisitor$1#visit(int,int,double)",
        "org.apache.commons.math3.linear.BlockRealMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.Array2DRowRealMatrix#getEntry(int,int)",
        "org.apache.commons.math3.linear.Array2DRowRealMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.MatrixUtils.checkSubMatrixIndex(AnyMatrix,int,int,int,int)",
        "org.apache.commons.math3.linear.BlockRealMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.DiagonalMatrix#setEntry(int,int,double)",
        "org.apache.commons.math3.linear.DefaultRealMatrixChangingVisitor#start(int,int,int,int,int,int)"
    ],
    "org.apache.commons.math3.linear.AbstractFieldMatrix#setColumn(int,T extends FieldElement[])": [
        "org.apache.commons.math3.linear.BlockFieldMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.SparseFieldMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.SparseFieldMatrix#setEntry(int,int,T extends FieldElement)",
        "org.apache.commons.math3.linear.Array2DRowFieldMatrix#setEntry(int,int,T extends FieldElement)",
        "org.apache.commons.math3.linear.BlockFieldMatrix#setEntry(int,int,T extends FieldElement)",
        "org.apache.commons.math3.linear.Array2DRowFieldMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.MatrixDimensionMismatchException#MatrixDimensionMismatchException(int,int,int,int)",
        "org.apache.commons.math3.linear.AbstractFieldMatrix#checkColumnIndex(int)"
    ],
    "org.apache.commons.math3.analysis.differentiation.FiniteDifferencesDifferentiator#differentiate(UnivariateVectorFunction)$UnivariateDifferentiableVectorFunction$1#value(DerivativeStructure)": [
        "org.apache.commons.math3.analysis.differentiation.DerivativeStructure#getValue()",
        "org.apache.commons.math3.util.FastMath.max(double,double)",
        "org.apache.commons.math3.analysis.differentiation.DerivativeStructure#getOrder()",
        "org.apache.commons.math3.util.FastMath.min(double,double)",
        "org.apache.commons.math3.analysis.differentiation.FiniteDifferencesDifferentiator#evaluate(DerivativeStructure,double,double[])",
        "org.apache.commons.math3.analysis.differentiation.FiniteDifferencesDifferentiator#differentiate(UnivariateVectorFunction)$UnivariateDifferentiableVectorFunction$1#value(double)",
        "org.apache.commons.math3.analysis.interpolation.HermiteInterpolator#value(double)"
    ],
    "org.apache.commons.math3.fitting.GaussianFitter.ParameterGuesser#sortObservations(WeightedObservedPoint[])": ["org.apache.commons.math3.fitting.GaussianFitter.ParameterGuesser#sortObservations(WeightedObservedPoint[])$Comparator$1.<init>()"],
    "org.apache.commons.math3.distribution.NormalDistribution#NormalDistribution(double,double,double)": [
        "org.apache.commons.math3.distribution.NormalDistribution#NormalDistribution(RandomGenerator,double,double,double)",
        "org.apache.commons.math3.random.Well19937c#Well19937c()"
    ],
    "org.apache.commons.math3.geometry.euclidean.twod.Vector2D#distance(Point<Euclidean2D>)": ["org.apache.commons.math3.util.FastMath.sqrt(double)"],
    "org.apache.commons.math3.exception.util.ArgUtils#ArgUtils()": ["org.apache.commons.math3.exception.util.ArgUtils.<init>()"],
    "org.apache.commons.math3.stat.descriptive.rank.Min.copy(Min,Min)": [
        "org.apache.commons.math3.stat.descriptive.AbstractUnivariateStatistic#setData(double[])",
        "org.apache.commons.math3.util.MathUtils.checkNotNull(Object)",
        "org.apache.commons.math3.stat.descriptive.rank.Percentile#setData(double[])",
        "org.apache.commons.math3.stat.descriptive.AbstractUnivariateStatistic#getDataRef()"
    ],
    "org.apache.commons.math3.linear.RealVector.SparseEntryIterator#remove()": ["org.apache.commons.math3.exception.MathUnsupportedOperationException#MathUnsupportedOperationException()"],
    "org.apache.commons.math3.complex.Quaternion#Quaternion(double,double,double,double)": ["org.apache.commons.math3.complex.Quaternion.<init>()"],
    "org.apache.commons.math3.dfp.DfpMath.asin(Dfp)": [
        "org.apache.commons.math3.dfp.Dfp#sqrt()",
        "org.apache.commons.math3.dfp.Dfp#getOne()",
        "org.apache.commons.math3.dfp.DfpMath.atan(Dfp)",
        "org.apache.commons.math3.dfp.Dfp#subtract(Dfp)",
        "org.apache.commons.math3.dfp.Dfp#divide(Dfp)",
        "org.apache.commons.math3.dfp.Dfp#multiply(Dfp)"
    ],
    "org.apache.commons.math3.analysis.function.Sin#value(double)": ["org.apache.commons.math3.util.FastMath.sin(double)"],
    "org.apache.commons.math3.random.ValueServer#computeDistribution(int)": [
        "org.apache.commons.math3.random.EmpiricalDistribution#EmpiricalDistribution(int,RandomGenerator)",
        "org.apache.commons.math3.random.EmpiricalDistribution#load(URL)",
        "org.apache.commons.math3.random.RandomDataGenerator#getRandomGenerator()",
        "org.apache.commons.math3.random.EmpiricalDistribution#getSampleStats()",
        "org.apache.commons.math3.stat.descriptive.SynchronizedDescriptiveStatistics#getStandardDeviation()",
        "org.apache.commons.math3.stat.descriptive.AggregateSummaryStatistics#getMean()",
        "org.apache.commons.math3.stat.descriptive.SynchronizedSummaryStatistics#getStandardDeviation()",
        "org.apache.commons.math3.stat.descriptive.DescriptiveStatistics#getStandardDeviation()",
        "org.apache.commons.math3.stat.descriptive.SummaryStatistics#getMean()",
        "org.apache.commons.math3.stat.descriptive.SummaryStatistics#getStandardDeviation()",
        "org.apache.commons.math3.stat.descriptive.StatisticalSummaryValues#getMean()",
        "org.apache.commons.math3.stat.descriptive.AggregateSummaryStatistics#getStandardDeviation()",
        "org.apache.commons.math3.stat.descriptive.DescriptiveStatistics#getMean()",
        "org.apache.commons.math3.stat.descriptive.SynchronizedSummaryStatistics#getMean()",
        "org.apache.commons.math3.stat.descriptive.StatisticalSummaryValues#getStandardDeviation()"
    ],
    "org.apache.commons.math3.complex.Quaternion#Quaternion(double[])": ["org.apache.commons.math3.complex.Quaternion#Quaternion(double,double[])"],
    "org.apache.commons.math3.analysis.function.Logistic#Logistic(double,double,double,double,double,double)": ["org.apache.commons.math3.analysis.function.Logistic.<init>()"],
    "org.apache.commons.math3.stat.descriptive.moment.StandardDeviation#StandardDeviation(SecondMoment)": [
        "org.apache.commons.math3.stat.descriptive.moment.Variance#Variance(SecondMoment)",
        "org.apache.commons.math3.stat.descriptive.moment.StandardDeviation.<init>()",
        "org.apache.commons.math3.stat.descriptive.AbstractStorelessUnivariateStatistic.<init>()"
    ],
    "org.apache.commons.math3.stat.descriptive.MultivariateSummaryStatistics#setSumsqImpl(StorelessUnivariateStatistic[])": ["org.apache.commons.math3.stat.descriptive.MultivariateSummaryStatistics#setImpl(StorelessUnivariateStatistic[],StorelessUnivariateStatistic[])"],
    "org.apache.commons.math3.optimization.general.LevenbergMarquardtOptimizer#determineLMDirection(double[],double[],double[],double[])": [
        "org.apache.commons.math3.util.FastMath.abs(double)",
        "org.apache.commons.math3.util.FastMath.sqrt(double)"
    ],
    "org.apache.commons.math3.distribution.ZipfDistribution.ZipfRejectionInversionSampler#sample(RandomGenerator)": [
        "org.apache.commons.math3.random.SynchronizedRandomGenerator#nextDouble()",
        "org.apache.commons.math3.distribution.ZipfDistribution.ZipfRejectionInversionSampler#h(double)",
        "org.apache.commons.math3.random.RandomAdaptor#nextDouble()",
        "org.apache.commons.math3.random.RandomGeneratorFactory.createRandomGenerator(Random)$RandomGenerator$1#nextDouble()",
        "org.apache.commons.math3.distribution.ZipfDistribution.ZipfRejectionInversionSampler#hIntegral(double)",
        "org.apache.commons.math3.distribution.ZipfDistribution.ZipfRejectionInversionSampler#hIntegralInverse(double)",
        "org.apache.commons.math3.random.BitsStreamGenerator#nextDouble()"
    ],
    "org.apache.commons.math3.optimization.linear.LinearConstraint#readObject(ObjectInputStream)": ["org.apache.commons.math3.linear.MatrixUtils.deserializeRealVector(Object,String,ObjectInputStream)"],
    "org.apache.commons.math3.geometry.partitioning.AbstractSubHyperplane#reunite(SubHyperplane<S extends Space>)": [
        "org.apache.commons.math3.geometry.partitioning.RegionFactory#RegionFactory()",
        "org.apache.commons.math3.geometry.partitioning.RegionFactory#union(Region<S extends Space>,Region<S extends Space>)"
    ],
    "org.apache.commons.math3.ode.nonstiff.ThreeEighthesFieldIntegrator#ThreeEighthesFieldIntegrator(Field<T extends RealFieldElement>,T extends RealFieldElement)": [
        "org.apache.commons.math3.ode.nonstiff.ThreeEighthesFieldIntegrator.<init>()",
        "org.apache.commons.math3.ode.nonstiff.RungeKuttaFieldIntegrator#RungeKuttaFieldIntegrator(Field<T extends RealFieldElement>,String,T extends RealFieldElement)"
    ],
    "org.apache.commons.math3.stat.descriptive.MultivariateSummaryStatistics#addValue(double[])": [
        "org.apache.commons.math3.stat.descriptive.MultivariateSummaryStatistics#checkDimension(int)",
        "org.apache.commons.math3.stat.descriptive.moment.Mean#increment(double)",
        "org.apache.commons.math3.stat.descriptive.rank.Max#increment(double)",
        "org.apache.commons.math3.stat.descriptive.summary.SumOfLogs#increment(double)",
        "org.apache.commons.math3.stat.descriptive.moment.Kurtosis#increment(double)",
        "org.apache.commons.math3.stat.descriptive.moment.FourthMoment#increment(double)",
        "org.apache.commons.math3.stat.descriptive.moment.Skewness#increment(double)",
        "org.apache.commons.math3.stat.descriptive.moment.StandardDeviation#increment(double)",
        "org.apache.commons.math3.stat.descriptive.moment.FirstMoment#increment(double)",
        "org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile#increment(double)",
        "org.apache.commons.math3.stat.descriptive.moment.GeometricMean#increment(double)",
        "org.apache.commons.math3.stat.descriptive.moment.Variance#increment(double)",
        "org.apache.commons.math3.stat.descriptive.moment.SecondMoment#increment(double)",
        "org.apache.commons.math3.stat.descriptive.rank.Min#increment(double)",
        "org.apache.commons.math3.stat.descriptive.summary.SumOfSquares#increment(double)",
        "org.apache.commons.math3.stat.descriptive.summary.Product#increment(double)",
        "org.apache.commons.math3.stat.descriptive.moment.ThirdMoment#increment(double)",
        "org.apache.commons.math3.stat.descriptive.summary.Sum#increment(double)",
        "org.apache.commons.math3.stat.descriptive.moment.VectorialCovariance#increment(double[])"
    ],
    "org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D.getInstance()": ["org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D.LazyHolder.<staticinit>()"],
    "org.apache.commons.math3.userguide.sofm.ChineseRingsClassifier#createSequentialTask(long)": ["org.apache.commons.math3.userguide.sofm.ChineseRingsClassifier#createParallelTasks(int,long)"],
    "org.apache.commons.math3.linear.RealVector#set(double)": [
        "org.apache.commons.math3.linear.RealVector.unmodifiableRealVector(RealVector)$Iterator$1$Iterator$1#iterator()$Iterator$1#next()",
        "org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet.SubIntervalsIterator#hasNext()",
        "org.apache.commons.math3.linear.RealVector#iterator()",
        "org.apache.commons.math3.linear.RealVector#iterator()$Iterator$1#hasNext()",
        "org.apache.commons.math3.linear.RealVector.unmodifiableRealVector(RealVector).UnmodifiableEntry.UnmodifiableEntry#setValue(double)",
        "org.apache.commons.math3.userguide.sofm.ChineseRingsClassifier#createRandomIterator(long)$Iterator$1#hasNext()",
        "org.apache.commons.math3.util.IntegerSequence.Incrementor#hasNext()",
        "org.apache.commons.math3.linear.RealVector.unmodifiableRealVector(RealVector)$Iterator$1$Iterator$1#sparseIterator()$Iterator$1#hasNext()",
        "org.apache.commons.math3.linear.RealVector.unmodifiableRealVector(RealVector)$RealVector$1#iterator()",
        "org.apache.commons.math3.geometry.spherical.oned.ArcsSet.SubArcsIterator#hasNext()",
        "org.apache.commons.math3.linear.RealVector#iterator()$Iterator$1#next()",
        "org.apache.commons.math3.util.Combinations.LexicographicIterator#hasNext()",
        "org.apache.commons.math3.linear.OpenMapRealVector.OpenMapEntry#setValue(double)",
        "org.apache.commons.math3.linear.RealVector.SparseEntryIterator#hasNext()",
        "org.apache.commons.math3.userguide.sofm.ChineseRingsClassifier#createIterable()$Iterator$1$Iterator$1#iterator()$Iterator$1#hasNext()",
        "org.apache.commons.math3.linear.RealVector.unmodifiableRealVector(RealVector)$Iterator$1$Iterator$1#iterator()$Iterator$1#hasNext()",
        "org.apache.commons.math3.util.Combinations.SingletonIterator#hasNext()",
        "org.apache.commons.math3.linear.RealVector.SparseEntryIterator#next()",
        "org.apache.commons.math3.linear.RealVector.unmodifiableRealVector(RealVector)$Iterator$1$Iterator$1#sparseIterator()$Iterator$1#next()",
        "org.apache.commons.math3.util.MultidimensionalCounter.Iterator#hasNext()",
        "org.apache.commons.math3.linear.RealVector.Entry#setValue(double)"
    ],
    "org.apache.commons.math3.analysis.function.Ceil#value(double)": ["org.apache.commons.math3.util.FastMath.ceil(double)"],
    "org.apache.commons.math3.distribution.GumbelDistribution#GumbelDistribution(double,double)": [
        "org.apache.commons.math3.random.Well19937c#Well19937c()",
        "org.apache.commons.math3.distribution.GumbelDistribution#GumbelDistribution(RandomGenerator,double,double)"
    ],
    "org.apache.commons.math3.analysis.solvers.LaguerreSolver#LaguerreSolver(double)": [
        "org.apache.commons.math3.analysis.solvers.LaguerreSolver.<init>()",
        "org.apache.commons.math3.analysis.solvers.AbstractPolynomialSolver#AbstractPolynomialSolver(double)"
    ],
    "org.apache.commons.math3.random.RandomDataImpl#reSeedSecure(long)": ["org.apache.commons.math3.random.RandomDataGenerator#reSeedSecure(long)"],
    "org.apache.commons.math3.exception.NumberIsTooSmallException#NumberIsTooSmallException(Localizable,Number,Number,boolean)": ["org.apache.commons.math3.exception.NumberIsTooSmallException.<init>()"],
    "org.apache.commons.math3.geometry.euclidean.oned.Vector1DFormat#Vector1DFormat(String,String,NumberFormat)": [
        "org.apache.commons.math3.geometry.euclidean.oned.Vector1DFormat.<init>()",
        "org.apache.commons.math3.geometry.VectorFormat#VectorFormat(String,String,String,NumberFormat)",
        "org.apache.commons.math3.geometry.VectorFormat.<staticinit>()"
    ],
    "org.apache.commons.math3.linear.TriDiagonalTransformer#getQT()": ["org.apache.commons.math3.linear.MatrixUtils.createRealMatrix(double[][])"],
    "org.apache.commons.math3.linear.QRDecomposition#QRDecomposition(RealMatrix,double)": [
        "org.apache.commons.math3.linear.DiagonalMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.Array2DRowRealMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.BlockFieldMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.SparseFieldMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.OpenMapRealMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.BlockRealMatrix#transpose()",
        "org.apache.commons.math3.linear.OpenMapRealMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.DiagonalMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.DiagonalMatrix#getData()",
        "org.apache.commons.math3.linear.AbstractRealMatrix#getData()",
        "org.apache.commons.math3.util.FastMath.min(int,int)",
        "org.apache.commons.math3.linear.Array2DRowFieldMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.SparseFieldMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.BlockFieldMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.BlockRealMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.QRDecomposition#decompose(double[][])",
        "org.apache.commons.math3.linear.Array2DRowRealMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.Array2DRowRealMatrix#getData()",
        "org.apache.commons.math3.linear.AbstractRealMatrix#transpose()",
        "org.apache.commons.math3.linear.RRQRDecomposition#decompose(double[][])",
        "org.apache.commons.math3.linear.Array2DRowFieldMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.BlockRealMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.BlockRealMatrix#getData()",
        "org.apache.commons.math3.linear.QRDecomposition.<init>()"
    ],
    "org.apache.commons.math3.fitting.leastsquares.OptimumImpl#OptimumImpl(Evaluation,int,int)": ["org.apache.commons.math3.fitting.leastsquares.OptimumImpl.<init>()"],
    "org.apache.commons.math3.linear.ArrayRealVector#ArrayRealVector(double[])": [
        "org.apache.commons.math3.linear.RealVector.<init>()",
        "org.apache.commons.math3.linear.ArrayRealVector.<init>()"
    ],
    "org.apache.commons.math3.linear.BlockRealMatrix#setSubMatrix(double[][],int,int)": [
        "org.apache.commons.math3.exception.DimensionMismatchException#DimensionMismatchException(int,int)",
        "org.apache.commons.math3.util.MathUtils.checkNotNull(Object)",
        "org.apache.commons.math3.linear.BlockRealMatrix#blockHeight(int)",
        "org.apache.commons.math3.linear.MatrixUtils.checkSubMatrixIndex(AnyMatrix,int,int,int,int)",
        "org.apache.commons.math3.exception.util.LocalizedFormats.<staticinit>()",
        "org.apache.commons.math3.util.FastMath.max(int,int)",
        "org.apache.commons.math3.linear.BlockRealMatrix#blockWidth(int)",
        "org.apache.commons.math3.exception.NoDataException#NoDataException(Localizable)",
        "org.apache.commons.math3.linear.BlockRealMatrix.<staticinit>()",
        "org.apache.commons.math3.util.FastMath.min(int,int)"
    ],
    "org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D#subtract(Vector3D)": [
        "org.apache.commons.math3.geometry.euclidean.threed.Vector3D#getX()",
        "org.apache.commons.math3.geometry.euclidean.threed.Vector3D#getZ()",
        "org.apache.commons.math3.geometry.euclidean.threed.Vector3D#getY()",
        "org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D#FieldVector3D(T extends RealFieldElement,T extends RealFieldElement,T extends RealFieldElement)"
    ],
    "org.apache.commons.math3.optim.linear.SimplexTableau#readObject(ObjectInputStream)": ["org.apache.commons.math3.linear.MatrixUtils.deserializeRealMatrix(Object,String,ObjectInputStream)"],
    "org.apache.commons.math3.geometry.spherical.oned.ArcsSet#getFirstArcStart()": [
        "org.apache.commons.math3.geometry.partitioning.AbstractRegion#getTree(boolean)",
        "org.apache.commons.math3.geometry.spherical.oned.ArcsSet#getFirstLeaf(BSPTree<Sphere1D>)",
        "org.apache.commons.math3.geometry.partitioning.BSPTree#getCut()",
        "org.apache.commons.math3.geometry.spherical.oned.ArcsSet#isArcStart(BSPTree<Sphere1D>)",
        "org.apache.commons.math3.geometry.partitioning.BSPTree#getParent()",
        "org.apache.commons.math3.geometry.spherical.oned.ArcsSet#nextInternalNode(BSPTree<Sphere1D>)"
    ],
    "org.apache.commons.math3.linear.EigenDecomposition.Solver#Solver(double[],double[],ArrayRealVector[])": ["org.apache.commons.math3.linear.EigenDecomposition.Solver.<init>()"],
    "org.apache.commons.math3.random.AbstractRandomGenerator#AbstractRandomGenerator()": ["org.apache.commons.math3.random.AbstractRandomGenerator.<init>()"],
    "org.apache.commons.math3.ode.nonstiff.DormandPrince853FieldIntegrator#createInterpolator(boolean,T extends RealFieldElement[][],FieldODEStateAndDerivative<T extends RealFieldElement>,FieldODEStateAndDerivative<T extends RealFieldElement>,FieldEquationsMapper<T extends RealFieldElement>)": [
        "org.apache.commons.math3.ode.nonstiff.DormandPrince853FieldStepInterpolator#DormandPrince853FieldStepInterpolator(Field<T extends RealFieldElement>,boolean,T extends RealFieldElement[][],FieldODEStateAndDerivative<T extends RealFieldElement>,FieldODEStateAndDerivative<T extends RealFieldElement>,FieldODEStateAndDerivative<T extends RealFieldElement>,FieldODEStateAndDerivative<T extends RealFieldElement>,FieldEquationsMapper<T extends RealFieldElement>)",
        "org.apache.commons.math3.ode.AbstractFieldIntegrator#getField()"
    ],
    "org.apache.commons.math3.geometry.spherical.oned.ArcsSet#addArcLimit(BSPTree<Sphere1D>,double,boolean)": [
        "org.apache.commons.math3.geometry.spherical.oned.LimitAngle#LimitAngle(S1Point,boolean,double)",
        "org.apache.commons.math3.geometry.spherical.oned.LimitAngle#getLocation()",
        "org.apache.commons.math3.exception.MathInternalError#MathInternalError()",
        "org.apache.commons.math3.geometry.partitioning.BSPTree#insertCut(Hyperplane<S extends Space>)",
        "org.apache.commons.math3.geometry.partitioning.BSPTree#getPlus()",
        "org.apache.commons.math3.geometry.partitioning.BSPTree#getCut()",
        "org.apache.commons.math3.geometry.partitioning.BSPTree#getCell(Point<S extends Space>,double)",
        "org.apache.commons.math3.geometry.partitioning.AbstractRegion#getTolerance()",
        "org.apache.commons.math3.geometry.spherical.oned.S1Point#S1Point(double)",
        "org.apache.commons.math3.geometry.partitioning.BSPTree#getMinus()",
        "org.apache.commons.math3.geometry.partitioning.BSPTree#setAttribute(Object)"
    ],
    "org.apache.commons.math3.analysis.solvers.BisectionSolver#BisectionSolver()": [
        "org.apache.commons.math3.analysis.solvers.BisectionSolver.<staticinit>()",
        "org.apache.commons.math3.analysis.solvers.BisectionSolver#BisectionSolver(double)"
    ],
    "org.apache.commons.math3.random.ValueServer#getNextGaussian()": ["org.apache.commons.math3.random.RandomDataGenerator#nextGaussian(double,double)"],
    "org.apache.commons.math3.stat.interval.ClopperPearsonInterval#createInterval(int,int,double)": [
        "org.apache.commons.math3.distribution.EnumeratedRealDistribution#inverseCumulativeProbability(double)",
        "org.apache.commons.math3.distribution.AbstractRealDistribution#inverseCumulativeProbability(double)",
        "org.apache.commons.math3.distribution.ExponentialDistribution#inverseCumulativeProbability(double)",
        "org.apache.commons.math3.stat.interval.IntervalUtils.checkParameters(int,int,double)",
        "org.apache.commons.math3.distribution.CauchyDistribution#inverseCumulativeProbability(double)",
        "org.apache.commons.math3.stat.interval.ConfidenceInterval#ConfidenceInterval(double,double,double)",
        "org.apache.commons.math3.distribution.LaplaceDistribution#inverseCumulativeProbability(double)",
        "org.apache.commons.math3.distribution.UniformRealDistribution#inverseCumulativeProbability(double)",
        "org.apache.commons.math3.random.EmpiricalDistribution#inverseCumulativeProbability(double)",
        "org.apache.commons.math3.distribution.GumbelDistribution#inverseCumulativeProbability(double)",
        "org.apache.commons.math3.distribution.LogisticDistribution#inverseCumulativeProbability(double)",
        "org.apache.commons.math3.distribution.FDistribution#FDistribution(double,double)",
        "org.apache.commons.math3.distribution.ConstantRealDistribution#inverseCumulativeProbability(double)",
        "org.apache.commons.math3.distribution.LevyDistribution#inverseCumulativeProbability(double)",
        "org.apache.commons.math3.distribution.TriangularDistribution#inverseCumulativeProbability(double)",
        "org.apache.commons.math3.distribution.WeibullDistribution#inverseCumulativeProbability(double)",
        "org.apache.commons.math3.distribution.NormalDistribution#inverseCumulativeProbability(double)"
    ],
    "org.apache.commons.math3.optimization.univariate.BrentOptimizer.<staticinit>()": [
        "org.apache.commons.math3.util.FastMath.ulp(double)",
        "org.apache.commons.math3.util.FastMath.sqrt(double)"
    ],
    "org.apache.commons.math3.analysis.differentiation.DerivativeStructure#toDegrees()": [
        "org.apache.commons.math3.util.FastMath.toDegrees(double)",
        "org.apache.commons.math3.analysis.differentiation.DerivativeStructure#DerivativeStructure(DSCompiler)"
    ],
    "org.apache.commons.math3.ode.sampling.AbstractStepInterpolator#allocateInterpolatedArrays(int)": ["org.apache.commons.math3.ode.EquationsMapper#getDimension()"],
    "org.apache.commons.math3.analysis.polynomials.PolynomialsUtils.createHermitePolynomial(int)$RecurrenceCoefficientsGenerator$1#generate(int)": [
        "org.apache.commons.math3.fraction.BigFraction.<staticinit>()",
        "org.apache.commons.math3.fraction.BigFraction#BigFraction(int)"
    ],
    "org.apache.commons.math3.analysis.polynomials.PolynomialFunctionNewtonForm#computeCoefficients()": ["org.apache.commons.math3.analysis.polynomials.PolynomialFunctionNewtonForm#degree()"],
    "org.apache.commons.math3.fraction.BigFraction.<staticinit>()": [
        "org.apache.commons.math3.fraction.BigFraction#BigFraction(int,int)",
        "org.apache.commons.math3.fraction.BigFraction#BigFraction(int)"
    ],
    "org.apache.commons.math3.dfp.Dfp#Dfp(DfpField,double)": [
        "org.apache.commons.math3.dfp.Dfp.<staticinit>()",
        "org.apache.commons.math3.dfp.Dfp#multiply(Dfp)",
        "org.apache.commons.math3.dfp.Dfp#divide(Dfp)",
        "org.apache.commons.math3.dfp.Dfp#add(Dfp)",
        "org.apache.commons.math3.dfp.DfpMath.pow(Dfp,int)",
        "org.apache.commons.math3.dfp.DfpField#getRadixDigits()",
        "org.apache.commons.math3.dfp.DfpField#getOne()",
        "org.apache.commons.math3.dfp.Dfp#negate()",
        "org.apache.commons.math3.dfp.Dfp.<init>()",
        "org.apache.commons.math3.dfp.Dfp#Dfp(DfpField,long)",
        "org.apache.commons.math3.dfp.DfpField#getTwo()"
    ],
    "org.apache.commons.math3.analysis.interpolation.BicubicSplineInterpolator#BicubicSplineInterpolator(boolean)": ["org.apache.commons.math3.analysis.interpolation.BicubicSplineInterpolator.<init>()"],
    "org.apache.commons.math3.optimization.direct.MultiDirectionalSimplex#MultiDirectionalSimplex(int,double,double,double)": [
        "org.apache.commons.math3.optimization.direct.MultiDirectionalSimplex.<init>()",
        "org.apache.commons.math3.optimization.direct.AbstractSimplex#AbstractSimplex(int,double)"
    ],
    "org.apache.commons.math3.stat.descriptive.SynchronizedSummaryStatistics#getMax()": ["org.apache.commons.math3.stat.descriptive.SummaryStatistics#getMax()"],
    "org.apache.commons.math3.geometry.euclidean.oned.Vector1D#Vector1D(double,Vector1D,double,Vector1D,double,Vector1D)": ["org.apache.commons.math3.geometry.euclidean.oned.Vector1D.<init>()"],
    "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer#CMAESOptimizer(int,double,boolean,int,int,RandomGenerator,boolean,ConvergenceChecker<PointValuePair>)": [
        "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer.<init>()",
        "org.apache.commons.math3.optim.nonlinear.scalar.MultivariateOptimizer#MultivariateOptimizer(ConvergenceChecker<PointValuePair>)"
    ],
    "org.apache.commons.math3.distribution.TDistribution#TDistribution(double,double)": [
        "org.apache.commons.math3.distribution.TDistribution#TDistribution(RandomGenerator,double,double)",
        "org.apache.commons.math3.random.Well19937c#Well19937c()",
        "org.apache.commons.math3.distribution.TDistribution.<staticinit>()"
    ],
    "org.apache.commons.math3.ml.neuralnet.Neuron#copy()": [
        "org.apache.commons.math3.ml.neuralnet.Neuron#Neuron(long,double[])",
        "org.apache.commons.math3.ml.neuralnet.Neuron#getIdentifier()",
        "org.apache.commons.math3.ml.neuralnet.Neuron#getFeatures()"
    ],
    "org.apache.commons.math3.util.ResizableDoubleArray#setExpansionFactor(float)": [
        "org.apache.commons.math3.util.ResizableDoubleArray#getContractionCriterion()",
        "org.apache.commons.math3.util.ResizableDoubleArray#checkContractExpand(double,double)"
    ],
    "org.apache.commons.math3.distribution.EnumeratedIntegerDistribution#getNumericalMean()": [
        "org.apache.commons.math3.util.Pair#getValue()",
        "org.apache.commons.math3.distribution.EnumeratedDistribution#getPmf()",
        "org.apache.commons.math3.util.Pair#getKey()",
        "org.apache.commons.math3.optim.PointVectorValuePair#getValue()",
        "org.apache.commons.math3.optimization.PointVectorValuePair#getValue()"
    ],
    "org.apache.commons.math3.geometry.euclidean.threed.Line#pointAt(double)": ["org.apache.commons.math3.geometry.euclidean.threed.Vector3D#Vector3D(double,Vector3D,double,Vector3D)"],
    "org.apache.commons.math3.dfp.Dfp#toString()": [
        "org.apache.commons.math3.dfp.Dfp.<staticinit>()",
        "org.apache.commons.math3.dfp.Dfp#dfp2string()",
        "org.apache.commons.math3.dfp.Dfp#dfp2sci()"
    ],
    "org.apache.commons.math3.stat.inference.TTest#t(double,StatisticalSummary)": [
        "org.apache.commons.math3.stat.descriptive.SummaryStatistics#getVariance()",
        "org.apache.commons.math3.stat.descriptive.StatisticalSummaryValues#getVariance()",
        "org.apache.commons.math3.stat.descriptive.DescriptiveStatistics#getN()",
        "org.apache.commons.math3.stat.descriptive.AggregateSummaryStatistics#getMean()",
        "org.apache.commons.math3.stat.descriptive.SynchronizedSummaryStatistics#getVariance()",
        "org.apache.commons.math3.stat.descriptive.SummaryStatistics#getMean()",
        "org.apache.commons.math3.stat.descriptive.StatisticalSummaryValues#getN()",
        "org.apache.commons.math3.stat.descriptive.SummaryStatistics#getN()",
        "org.apache.commons.math3.stat.descriptive.StatisticalSummaryValues#getMean()",
        "org.apache.commons.math3.stat.descriptive.AggregateSummaryStatistics#getN()",
        "org.apache.commons.math3.stat.inference.TTest#checkSampleData(StatisticalSummary)",
        "org.apache.commons.math3.stat.descriptive.AggregateSummaryStatistics#getVariance()",
        "org.apache.commons.math3.stat.descriptive.SynchronizedSummaryStatistics#getN()",
        "org.apache.commons.math3.stat.inference.TTest#t(double,double,double,double)",
        "org.apache.commons.math3.stat.descriptive.DescriptiveStatistics#getMean()",
        "org.apache.commons.math3.stat.descriptive.DescriptiveStatistics#getVariance()",
        "org.apache.commons.math3.stat.descriptive.SynchronizedDescriptiveStatistics#getN()",
        "org.apache.commons.math3.stat.descriptive.SynchronizedSummaryStatistics#getMean()"
    ],
    "org.apache.commons.math3.analysis.function.Sinc#value(DerivativeStructure)": [
        "org.apache.commons.math3.analysis.differentiation.DerivativeStructure#getValue()",
        "org.apache.commons.math3.util.FastMath.abs(double)",
        "org.apache.commons.math3.analysis.differentiation.DerivativeStructure#getOrder()",
        "org.apache.commons.math3.analysis.function.Sinc.<staticinit>()",
        "org.apache.commons.math3.util.FastMath.sin(double)",
        "org.apache.commons.math3.util.FastMath.<staticinit>()",
        "org.apache.commons.math3.util.FastMath.cos(double)",
        "org.apache.commons.math3.analysis.differentiation.DerivativeStructure#compose(double[]...)"
    ],
    "org.apache.commons.math3.distribution.FDistribution#FDistribution(double,double)": [
        "org.apache.commons.math3.distribution.FDistribution.<staticinit>()",
        "org.apache.commons.math3.distribution.FDistribution#FDistribution(double,double,double)"
    ],
    "org.apache.commons.math3.exception.util.ExceptionContext#getLocalizedMessage()": ["org.apache.commons.math3.exception.util.ExceptionContext#getMessage(Locale)"],
    "org.apache.commons.math3.stat.descriptive.DescriptiveStatistics#setWindowSize(int)": [
        "org.apache.commons.math3.util.ResizableDoubleArray#discardFrontElements(int)",
        "org.apache.commons.math3.stat.descriptive.DescriptiveStatistics.<staticinit>()",
        "org.apache.commons.math3.util.ResizableDoubleArray#getNumElements()",
        "org.apache.commons.math3.exception.util.LocalizedFormats.<staticinit>()"
    ],
    "org.apache.commons.math3.util.CombinatoricsUtils.factorialDouble(int)": [
        "org.apache.commons.math3.util.CombinatoricsUtils.factorialLog(int)",
        "org.apache.commons.math3.util.FastMath.exp(double)",
        "org.apache.commons.math3.util.CombinatoricsUtils.<staticinit>()",
        "org.apache.commons.math3.exception.util.LocalizedFormats.<staticinit>()",
        "org.apache.commons.math3.util.FastMath.floor(double)"
    ],
    "org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet#translate(Vector3D)": [
        "org.apache.commons.math3.geometry.partitioning.AbstractRegion#applyTransform(Transform<S extends Space, T extends Space>)",
        "org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet.TranslationTransform#TranslationTransform(Vector3D)"
    ],
    "org.apache.commons.math3.stat.descriptive.SynchronizedDescriptiveStatistics#apply(UnivariateStatistic)": ["org.apache.commons.math3.stat.descriptive.DescriptiveStatistics#apply(UnivariateStatistic)"],
    "org.apache.commons.math3.linear.CholeskyDecomposition#getLT()": ["org.apache.commons.math3.linear.MatrixUtils.createRealMatrix(double[][])"],
    "org.apache.commons.math3.optim.BaseOptimizer#BaseOptimizer(ConvergenceChecker<PAIR>,int,int)": [
        "org.apache.commons.math3.optim.BaseOptimizer.MaxIterCallback.<init>()",
        "org.apache.commons.math3.util.Incrementor#Incrementor(int,MaxCountExceededCallback)",
        "org.apache.commons.math3.optim.BaseOptimizer.<init>()",
        "org.apache.commons.math3.optim.BaseOptimizer.MaxEvalCallback.<init>()"
    ],
    "org.apache.commons.math3.ml.neuralnet.sofm.NeighbourhoodSizeFunctionFactory.quasiSigmoidDecay(double,double,long)": ["org.apache.commons.math3.ml.neuralnet.sofm.NeighbourhoodSizeFunctionFactory.quasiSigmoidDecay(double,double,long)$NeighbourhoodSizeFunction$1.<init>()"],
    "org.apache.commons.math3.analysis.solvers.BaseAbstractUnivariateSolver#solve(int,FUNC extends UnivariateFunction,double,double,double)": [
        "org.apache.commons.math3.analysis.solvers.LaguerreSolver#doSolve()",
        "org.apache.commons.math3.analysis.solvers.BaseSecantSolver#doSolve()",
        "org.apache.commons.math3.analysis.solvers.BrentSolver#doSolve()",
        "org.apache.commons.math3.analysis.solvers.SecantSolver#doSolve()",
        "org.apache.commons.math3.analysis.solvers.NewtonSolver#doSolve()",
        "org.apache.commons.math3.analysis.solvers.MullerSolver#doSolve()",
        "org.apache.commons.math3.analysis.solvers.RiddersSolver#doSolve()",
        "org.apache.commons.math3.analysis.solvers.MullerSolver2#doSolve()",
        "org.apache.commons.math3.analysis.solvers.BracketingNthOrderBrentSolver#doSolve()",
        "org.apache.commons.math3.analysis.solvers.BisectionSolver#doSolve()",
        "org.apache.commons.math3.analysis.solvers.BaseAbstractUnivariateSolver#setup(int,FUNC extends UnivariateFunction,double,double,double)",
        "org.apache.commons.math3.analysis.solvers.NewtonRaphsonSolver#doSolve()"
    ],
    "org.apache.commons.math3.random.RandomDataGenerator#nextUniform(double,double,boolean)": [
        "org.apache.commons.math3.random.SynchronizedRandomGenerator#nextDouble()",
        "org.apache.commons.math3.random.RandomDataGenerator#getRandomGenerator()",
        "org.apache.commons.math3.random.RandomAdaptor#nextDouble()",
        "org.apache.commons.math3.exception.util.LocalizedFormats.<staticinit>()",
        "org.apache.commons.math3.exception.NotANumberException#NotANumberException()",
        "org.apache.commons.math3.random.RandomGeneratorFactory.createRandomGenerator(Random)$RandomGenerator$1#nextDouble()",
        "org.apache.commons.math3.random.BitsStreamGenerator#nextDouble()"
    ],
    "org.apache.commons.math3.optim.nonlinear.scalar.gradient.NonLinearConjugateGradientOptimizer#checkParameters()": [
        "org.apache.commons.math3.optim.BaseMultivariateOptimizer#getUpperBound()",
        "org.apache.commons.math3.optim.BaseMultivariateOptimizer#getLowerBound()",
        "org.apache.commons.math3.exception.util.LocalizedFormats.<staticinit>()"
    ],
    "org.apache.commons.math3.linear.AbstractFieldMatrix#getColumn(int)": [
        "org.apache.commons.math3.linear.BlockFieldMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.SparseFieldMatrix#getEntry(int,int)",
        "org.apache.commons.math3.linear.SparseFieldMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.Array2DRowFieldMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.Array2DRowFieldMatrix#getEntry(int,int)",
        "org.apache.commons.math3.linear.AbstractFieldMatrix#checkColumnIndex(int)",
        "org.apache.commons.math3.util.MathArrays.buildArray(Field<T>,int)",
        "org.apache.commons.math3.linear.BlockFieldMatrix#getEntry(int,int)"
    ],
    "org.apache.commons.math3.optimization.SimpleValueChecker#converged(int,PointValuePair,PointValuePair)": [
        "org.apache.commons.math3.optimization.SimpleValueChecker.<staticinit>()",
        "org.apache.commons.math3.util.FastMath.abs(double)",
        "org.apache.commons.math3.optimization.AbstractConvergenceChecker#getRelativeThreshold()",
        "org.apache.commons.math3.optimization.AbstractConvergenceChecker#getAbsoluteThreshold()",
        "org.apache.commons.math3.util.FastMath.max(double,double)",
        "org.apache.commons.math3.optim.PointVectorValuePair#getValue()",
        "org.apache.commons.math3.optimization.PointVectorValuePair#getValue()",
        "org.apache.commons.math3.util.Pair#getValue()"
    ],
    "org.apache.commons.math3.linear.ArrayFieldVector#ebeDivide(ArrayFieldVector<T extends FieldElement>)": [
        "org.apache.commons.math3.linear.ArrayFieldVector#checkVectorDimensions(int)",
        "org.apache.commons.math3.util.MathArrays.buildArray(Field<T>,int)",
        "org.apache.commons.math3.linear.ArrayFieldVector#ArrayFieldVector(Field<T extends FieldElement>,T extends FieldElement[],boolean)",
        "org.apache.commons.math3.exception.util.LocalizedFormats.<staticinit>()"
    ],
    "org.apache.commons.math3.analysis.solvers.BaseAbstractUnivariateSolver#solve(int,FUNC extends UnivariateFunction,double,double)": ["org.apache.commons.math3.analysis.solvers.BaseAbstractUnivariateSolver#solve(int,FUNC extends UnivariateFunction,double,double,double)"],
    "org.apache.commons.math3.analysis.differentiation.SparseGradient#SparseGradient(double,double,Map<Integer, Double>)": ["org.apache.commons.math3.analysis.differentiation.SparseGradient.<init>()"],
    "org.apache.commons.math3.linear.ArrayFieldVector#walkInDefaultOrder(FieldVectorChangingVisitor<T extends FieldElement>,int,int)": [
        "org.apache.commons.math3.linear.ArrayFieldVector#getEntry(int)",
        "org.apache.commons.math3.linear.ArrayFieldVector#getDimension()",
        "org.apache.commons.math3.linear.ArrayFieldVector#checkIndices(int,int)",
        "org.apache.commons.math3.linear.ArrayFieldVector#setEntry(int,T extends FieldElement)"
    ],
    "org.apache.commons.math3.ode.nonstiff.RungeKuttaStepInterpolator#writeExternal(ObjectOutput)": ["org.apache.commons.math3.ode.sampling.AbstractStepInterpolator#writeBaseExternal(ObjectOutput)"],
    "org.apache.commons.math3.util.MathArrays.linearCombination(double[],double[])": ["org.apache.commons.math3.util.MathArrays.checkEqualLength(double[],double[])"],
    "org.apache.commons.math3.stat.ranking.NaturalRanking#recodeNaNs(IntDoublePair[],double)": [
        "org.apache.commons.math3.stat.ranking.NaturalRanking.IntDoublePair#getPosition()",
        "org.apache.commons.math3.stat.ranking.NaturalRanking.IntDoublePair#IntDoublePair(double,int)",
        "org.apache.commons.math3.stat.ranking.NaturalRanking.IntDoublePair#getValue()"
    ],
    "org.apache.commons.math3.analysis.solvers.RegulaFalsiSolver#RegulaFalsiSolver(double,double)": [
        "org.apache.commons.math3.analysis.solvers.BaseSecantSolver.Method.<staticinit>()",
        "org.apache.commons.math3.analysis.solvers.BaseSecantSolver#BaseSecantSolver(double,double,Method)",
        "org.apache.commons.math3.analysis.solvers.RegulaFalsiSolver.<init>()"
    ],
    "org.apache.commons.math3.linear.RealVector.unmodifiableRealVector(RealVector)$RealVector$1#mapDivideToSelf(double)": ["org.apache.commons.math3.exception.MathUnsupportedOperationException#MathUnsupportedOperationException()"],
    "org.apache.commons.math3.linear.BlockFieldMatrix#walkInRowOrder(FieldMatrixChangingVisitor<T extends FieldElement>)": [
        "org.apache.commons.math3.linear.BlockFieldMatrix#blockWidth(int)",
        "org.apache.commons.math3.linear.DefaultFieldMatrixChangingVisitor#start(int,int,int,int,int,int)",
        "org.apache.commons.math3.linear.DefaultFieldMatrixChangingVisitor#visit(int,int,T extends FieldElement)",
        "org.apache.commons.math3.linear.AbstractFieldMatrix#getSubMatrix(int[],int[])$DefaultFieldMatrixChangingVisitor$1#visit(int,int,T extends FieldElement)",
        "org.apache.commons.math3.linear.BlockFieldMatrix.<staticinit>()",
        "org.apache.commons.math3.util.FastMath.min(int,int)",
        "org.apache.commons.math3.linear.DefaultFieldMatrixChangingVisitor#end()"
    ],
    "org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile#hashCode()": ["org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile#getResult()"],
    "org.apache.commons.math3.util.KthSelector#KthSelector(PivotingStrategyInterface)": [
        "org.apache.commons.math3.util.MathUtils.checkNotNull(Object)",
        "org.apache.commons.math3.util.KthSelector.<init>()"
    ],
    "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.BOBYQAOptimizer#update(double,double,int)": [
        "org.apache.commons.math3.linear.Array2DRowRealMatrix#getEntry(int,int)",
        "org.apache.commons.math3.linear.Array2DRowRealMatrix#setEntry(int,int,double)",
        "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.BOBYQAOptimizer.printMethod()",
        "org.apache.commons.math3.util.FastMath.max(double,double)",
        "org.apache.commons.math3.util.FastMath.abs(double)",
        "org.apache.commons.math3.linear.ArrayRealVector#getDimension()",
        "org.apache.commons.math3.util.FastMath.sqrt(double)",
        "org.apache.commons.math3.linear.ArrayRealVector#ArrayRealVector(int)",
        "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.BOBYQAOptimizer.<staticinit>()",
        "org.apache.commons.math3.linear.ArrayRealVector#getEntry(int)",
        "org.apache.commons.math3.linear.ArrayRealVector#setEntry(int,double)"
    ],
    "org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet#rotate(Vector3D,Rotation)": [
        "org.apache.commons.math3.geometry.partitioning.AbstractRegion#applyTransform(Transform<S extends Space, T extends Space>)",
        "org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet.RotationTransform#RotationTransform(Vector3D,Rotation)"
    ],
    "org.apache.commons.math3.util.IterationManager#IterationManager(int,MaxCountExceededCallback)": [
        "org.apache.commons.math3.util.IterationManager#IterationManager(int,MaxCountExceededCallback)$MaxCountExceededCallback$1.<init>()",
        "org.apache.commons.math3.util.IterationManager#IterationManager(int,MaxCountExceededCallback)"
    ],
    "org.apache.commons.math3.stat.inference.TestUtils.rootLogLikelihoodRatio(long,long,long,long)": [
        "org.apache.commons.math3.stat.inference.GTest#rootLogLikelihoodRatio(long,long,long,long)",
        "org.apache.commons.math3.stat.inference.TestUtils.<staticinit>()"
    ],
    "org.apache.commons.math3.distribution.CauchyDistribution#CauchyDistribution(RandomGenerator,double,double)": [
        "org.apache.commons.math3.distribution.CauchyDistribution.<staticinit>()",
        "org.apache.commons.math3.distribution.CauchyDistribution#CauchyDistribution(RandomGenerator,double,double,double)"
    ],
    "org.apache.commons.math3.optimization.fitting.PolynomialFitter#fit()": [
        "org.apache.commons.math3.analysis.polynomials.PolynomialFunction.Parametric.<init>()",
        "org.apache.commons.math3.optimization.fitting.CurveFitter#fit(T extends ParametricUnivariateFunction,double[])"
    ],
    "org.apache.commons.math3.linear.RealVector.unmodifiableRealVector(RealVector)$RealVector$1#append(double)": [
        "org.apache.commons.math3.linear.ArrayRealVector#append(double)",
        "org.apache.commons.math3.linear.RealVector.unmodifiableRealVector(RealVector)$RealVector$1#append(double)",
        "org.apache.commons.math3.linear.OpenMapRealVector#append(double)"
    ],
    "org.apache.commons.math3.stat.Frequency#incrementValue(Comparable<?>,long)": ["org.apache.commons.math3.exception.util.LocalizedFormats.<staticinit>()"],
    "org.apache.commons.math3.stat.descriptive.SynchronizedMultivariateSummaryStatistics#getMax()": ["org.apache.commons.math3.stat.descriptive.MultivariateSummaryStatistics#getMax()"],
    "org.apache.commons.math3.geometry.partitioning.Characterization#touchInside()": [
        "org.apache.commons.math3.geometry.spherical.oned.SubLimitAngle#isEmpty()",
        "org.apache.commons.math3.geometry.euclidean.oned.SubOrientedPoint#isEmpty()",
        "org.apache.commons.math3.geometry.partitioning.AbstractSubHyperplane#isEmpty()"
    ],
    "org.apache.commons.math3.optim.SimplePointChecker#SimplePointChecker(double,double,int)": [
        "org.apache.commons.math3.optim.AbstractConvergenceChecker#AbstractConvergenceChecker(double,double)",
        "org.apache.commons.math3.optim.SimplePointChecker.<init>()"
    ],
    "org.apache.commons.math3.analysis.FunctionUtils.add(UnivariateDifferentiableFunction[]...)$UnivariateDifferentiableFunction$1#value(DerivativeStructure)": [
        "org.apache.commons.math3.analysis.polynomials.PolynomialFunctionNewtonForm#value(DerivativeStructure)",
        "org.apache.commons.math3.analysis.function.HarmonicOscillator#value(DerivativeStructure)",
        "org.apache.commons.math3.analysis.function.Power#value(DerivativeStructure)",
        "org.apache.commons.math3.analysis.differentiation.DerivativeStructure#add(DerivativeStructure)",
        "org.apache.commons.math3.analysis.function.Exp#value(DerivativeStructure)",
        "org.apache.commons.math3.analysis.function.Minus#value(DerivativeStructure)",
        "org.apache.commons.math3.analysis.function.Logit#value(DerivativeStructure)",
        "org.apache.commons.math3.analysis.FunctionUtils.multiply(UnivariateDifferentiableFunction[]...)$UnivariateDifferentiableFunction$1#value(DerivativeStructure)",
        "org.apache.commons.math3.analysis.function.Cosh#value(DerivativeStructure)",
        "org.apache.commons.math3.analysis.function.Sqrt#value(DerivativeStructure)",
        "org.apache.commons.math3.analysis.function.Gaussian#value(DerivativeStructure)",
        "org.apache.commons.math3.analysis.function.Cos#value(DerivativeStructure)",
        "org.apache.commons.math3.analysis.FunctionUtils.compose(UnivariateDifferentiableFunction[]...)$UnivariateDifferentiableFunction$1#value(DerivativeStructure)",
        "org.apache.commons.math3.analysis.function.Log1p#value(DerivativeStructure)",
        "org.apache.commons.math3.analysis.function.Inverse#value(DerivativeStructure)",
        "org.apache.commons.math3.analysis.function.Log10#value(DerivativeStructure)",
        "org.apache.commons.math3.analysis.function.Logistic#value(DerivativeStructure)",
        "org.apache.commons.math3.analysis.FunctionUtils.toUnivariateDifferential(DifferentiableUnivariateFunction)$UnivariateDifferentiableFunction$1#value(DerivativeStructure)",
        "org.apache.commons.math3.analysis.function.Acos#value(DerivativeStructure)",
        "org.apache.commons.math3.analysis.polynomials.PolynomialFunction#value(DerivativeStructure)",
        "org.apache.commons.math3.analysis.FunctionUtils.add(UnivariateDifferentiableFunction[]...)$UnivariateDifferentiableFunction$1#value(DerivativeStructure)",
        "org.apache.commons.math3.analysis.function.Cbrt#value(DerivativeStructure)",
        "org.apache.commons.math3.analysis.function.Atan#value(DerivativeStructure)",
        "org.apache.commons.math3.analysis.function.Sinh#value(DerivativeStructure)",
        "org.apache.commons.math3.analysis.function.Constant#value(DerivativeStructure)",
        "org.apache.commons.math3.analysis.function.Atanh#value(DerivativeStructure)",
        "org.apache.commons.math3.analysis.function.Sinc#value(DerivativeStructure)",
        "org.apache.commons.math3.analysis.function.Acosh#value(DerivativeStructure)",
        "org.apache.commons.math3.analysis.function.Tan#value(DerivativeStructure)",
        "org.apache.commons.math3.analysis.function.Identity#value(DerivativeStructure)",
        "org.apache.commons.math3.analysis.function.Asinh#value(DerivativeStructure)",
        "org.apache.commons.math3.analysis.function.Sin#value(DerivativeStructure)",
        "org.apache.commons.math3.analysis.function.Sigmoid#value(DerivativeStructure)",
        "org.apache.commons.math3.analysis.function.Asin#value(DerivativeStructure)",
        "org.apache.commons.math3.analysis.differentiation.FiniteDifferencesDifferentiator#differentiate(UnivariateFunction)$UnivariateDifferentiableFunction$1#value(DerivativeStructure)",
        "org.apache.commons.math3.analysis.function.Expm1#value(DerivativeStructure)",
        "org.apache.commons.math3.analysis.polynomials.PolynomialSplineFunction#value(DerivativeStructure)",
        "org.apache.commons.math3.analysis.function.Tanh#value(DerivativeStructure)",
        "org.apache.commons.math3.analysis.function.Log#value(DerivativeStructure)"
    ],
    "org.apache.commons.math3.ode.nonstiff.LutherFieldIntegrator#createInterpolator(boolean,T extends RealFieldElement[][],FieldODEStateAndDerivative<T extends RealFieldElement>,FieldODEStateAndDerivative<T extends RealFieldElement>,FieldEquationsMapper<T extends RealFieldElement>)": [
        "org.apache.commons.math3.ode.nonstiff.LutherFieldStepInterpolator#LutherFieldStepInterpolator(Field<T extends RealFieldElement>,boolean,T extends RealFieldElement[][],FieldODEStateAndDerivative<T extends RealFieldElement>,FieldODEStateAndDerivative<T extends RealFieldElement>,FieldODEStateAndDerivative<T extends RealFieldElement>,FieldODEStateAndDerivative<T extends RealFieldElement>,FieldEquationsMapper<T extends RealFieldElement>)",
        "org.apache.commons.math3.ode.AbstractFieldIntegrator#getField()"
    ],
    "org.apache.commons.math3.stat.regression.RegressionResults#getStdErrorOfEstimates()": [
        "org.apache.commons.math3.util.FastMath.sqrt(double)",
        "org.apache.commons.math3.stat.regression.RegressionResults#getVcvElement(int,int)"
    ],
    "org.apache.commons.math3.dfp.DfpMath.tan(Dfp)": [
        "org.apache.commons.math3.dfp.Dfp#divide(Dfp)",
        "org.apache.commons.math3.dfp.DfpMath.sin(Dfp)",
        "org.apache.commons.math3.dfp.DfpMath.cos(Dfp)"
    ],
    "org.apache.commons.math3.optimization.direct.BOBYQAOptimizer#BOBYQAOptimizer(int)": [
        "org.apache.commons.math3.optimization.direct.BOBYQAOptimizer.<staticinit>()",
        "org.apache.commons.math3.optimization.direct.BOBYQAOptimizer#BOBYQAOptimizer(int,double,double)"
    ],
    "org.apache.commons.math3.fraction.BigFraction#getField()": ["org.apache.commons.math3.fraction.BigFractionField.getInstance()"],
    "org.apache.commons.math3.fitting.leastsquares.LeastSquaresFactory.countEvaluations(LeastSquaresProblem,Incrementor)$LeastSquaresAdapter$1.<init>()": ["org.apache.commons.math3.fitting.leastsquares.LeastSquaresAdapter#LeastSquaresAdapter(LeastSquaresProblem)"],
    "org.apache.commons.math3.dfp.DfpField#newDfp(byte)": ["org.apache.commons.math3.dfp.Dfp#Dfp(DfpField,byte)"],
    "org.apache.commons.math3.linear.BlockFieldMatrix#setRowMatrix(int,BlockFieldMatrix<T extends FieldElement>)": [
        "org.apache.commons.math3.linear.BlockFieldMatrix#blockWidth(int)",
        "org.apache.commons.math3.linear.BlockFieldMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.BlockFieldMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.MatrixDimensionMismatchException#MatrixDimensionMismatchException(int,int,int,int)",
        "org.apache.commons.math3.linear.BlockFieldMatrix.<staticinit>()",
        "org.apache.commons.math3.linear.AbstractFieldMatrix#checkRowIndex(int)"
    ],
    "org.apache.commons.math3.analysis.function.Log1p#derivative()": [
        "org.apache.commons.math3.analysis.function.Log10#derivative()",
        "org.apache.commons.math3.analysis.function.Power#derivative()",
        "org.apache.commons.math3.analysis.function.Sin#derivative()",
        "org.apache.commons.math3.analysis.function.Exp#derivative()",
        "org.apache.commons.math3.analysis.function.HarmonicOscillator#derivative()",
        "org.apache.commons.math3.analysis.polynomials.PolynomialFunction#derivative()",
        "org.apache.commons.math3.analysis.FunctionUtils.toDifferentiableUnivariateFunction(UnivariateDifferentiableFunction)",
        "org.apache.commons.math3.analysis.function.Logit#derivative()",
        "org.apache.commons.math3.analysis.function.Cbrt#derivative()",
        "org.apache.commons.math3.analysis.FunctionUtils.toDifferentiableUnivariateFunction(UnivariateDifferentiableFunction)$DifferentiableUnivariateFunction$1#derivative()",
        "org.apache.commons.math3.analysis.polynomials.PolynomialSplineFunction#derivative()",
        "org.apache.commons.math3.analysis.function.Cosh#derivative()",
        "org.apache.commons.math3.analysis.function.Identity#derivative()",
        "org.apache.commons.math3.analysis.function.Inverse#derivative()",
        "org.apache.commons.math3.analysis.function.Acosh#derivative()",
        "org.apache.commons.math3.analysis.function.Acos#derivative()",
        "org.apache.commons.math3.analysis.function.Atan#derivative()",
        "org.apache.commons.math3.analysis.function.Log#derivative()",
        "org.apache.commons.math3.analysis.function.Sqrt#derivative()",
        "org.apache.commons.math3.analysis.function.Logistic#derivative()",
        "org.apache.commons.math3.analysis.function.Expm1#derivative()",
        "org.apache.commons.math3.analysis.function.Asinh#derivative()",
        "org.apache.commons.math3.analysis.function.Gaussian#derivative()",
        "org.apache.commons.math3.analysis.function.Sinc#derivative()",
        "org.apache.commons.math3.analysis.function.Sigmoid#derivative()",
        "org.apache.commons.math3.analysis.function.Constant#derivative()",
        "org.apache.commons.math3.analysis.function.Sinh#derivative()",
        "org.apache.commons.math3.analysis.function.Tanh#derivative()",
        "org.apache.commons.math3.analysis.function.Asin#derivative()",
        "org.apache.commons.math3.analysis.function.Minus#derivative()",
        "org.apache.commons.math3.analysis.FunctionUtils.compose(DifferentiableUnivariateFunction[]...)$DifferentiableUnivariateFunction$1#derivative()",
        "org.apache.commons.math3.analysis.FunctionUtils.add(DifferentiableUnivariateFunction[]...)$DifferentiableUnivariateFunction$1#derivative()",
        "org.apache.commons.math3.analysis.FunctionUtils.multiply(DifferentiableUnivariateFunction[]...)$DifferentiableUnivariateFunction$1#derivative()",
        "org.apache.commons.math3.analysis.function.Log1p#derivative()",
        "org.apache.commons.math3.analysis.function.Tan#derivative()",
        "org.apache.commons.math3.analysis.function.Cos#derivative()",
        "org.apache.commons.math3.analysis.function.Atanh#derivative()"
    ],
    "org.apache.commons.math3.ode.nonstiff.RungeKuttaFieldIntegrator#singleStep(FirstOrderFieldDifferentialEquations<T extends RealFieldElement>,T extends RealFieldElement,T extends RealFieldElement[],T extends RealFieldElement)": [
        "org.apache.commons.math3.util.MathArrays.buildArray(Field<T>,int,int)",
        "org.apache.commons.math3.ode.AbstractFieldIntegrator#getField()"
    ],
    "org.apache.commons.math3.userguide.geometry.GeometryExample.createRandomPoints(int)": [
        "org.apache.commons.math3.random.SynchronizedRandomGenerator#nextDouble()",
        "org.apache.commons.math3.random.RandomAdaptor#nextDouble()",
        "org.apache.commons.math3.util.FastMath.round(double)",
        "org.apache.commons.math3.random.MersenneTwister#MersenneTwister()",
        "org.apache.commons.math3.geometry.euclidean.twod.Vector2D#Vector2D(double,double)",
        "org.apache.commons.math3.random.RandomGeneratorFactory.createRandomGenerator(Random)$RandomGenerator$1#nextDouble()",
        "org.apache.commons.math3.random.BitsStreamGenerator#nextDouble()"
    ],
    "org.apache.commons.math3.linear.RealVector.unmodifiableRealVector(RealVector)$RealVector$1#getEntry(int)": [
        "org.apache.commons.math3.linear.ArrayRealVector#getEntry(int)",
        "org.apache.commons.math3.linear.OpenMapRealVector#getEntry(int)",
        "org.apache.commons.math3.linear.RealVector.unmodifiableRealVector(RealVector)$RealVector$1#getEntry(int)"
    ],
    "org.apache.commons.math3.stat.correlation.StorelessCovariance#getN()": ["org.apache.commons.math3.exception.MathUnsupportedOperationException#MathUnsupportedOperationException()"],
    "org.apache.commons.math3.linear.PreconditionedIterativeLinearSolver#PreconditionedIterativeLinearSolver(IterationManager)": [
        "org.apache.commons.math3.linear.IterativeLinearSolver#IterativeLinearSolver(IterationManager)",
        "org.apache.commons.math3.linear.PreconditionedIterativeLinearSolver.<init>()"
    ],
    "org.apache.commons.math3.analysis.polynomials.PolynomialFunction#polynomialDerivative()": [
        "org.apache.commons.math3.analysis.polynomials.PolynomialFunction.differentiate(double[])",
        "org.apache.commons.math3.analysis.polynomials.PolynomialFunction#PolynomialFunction(double[])"
    ],
    "org.apache.commons.math3.geometry.partitioning.RegionFactory#xor(Region<S extends Space>,Region<S extends Space>)": [
        "org.apache.commons.math3.geometry.partitioning.AbstractRegion#getTree(boolean)",
        "org.apache.commons.math3.geometry.partitioning.RegionFactory.XorMerger.<init>()",
        "org.apache.commons.math3.geometry.partitioning.BSPTree#visit(BSPTreeVisitor<S extends Space>)",
        "org.apache.commons.math3.geometry.partitioning.BSPTree#merge(BSPTree<S extends Space>,LeafMerger<S extends Space>)"
    ],
    "org.apache.commons.math3.geometry.partitioning.BSPTree#BSPTree(Object)": ["org.apache.commons.math3.geometry.partitioning.BSPTree.<init>()"],
    "org.apache.commons.math3.geometry.partitioning.SubHyperplane.SplitSubHyperplane#SplitSubHyperplane(SubHyperplane<U extends Space>,SubHyperplane<U extends Space>)": ["org.apache.commons.math3.geometry.partitioning.SubHyperplane.SplitSubHyperplane.<init>()"],
    "org.apache.commons.math3.fraction.ProperBigFractionFormat#format(BigFraction,StringBuffer,FieldPosition)": [
        "org.apache.commons.math3.fraction.BigFraction#getNumerator()",
        "org.apache.commons.math3.fraction.AbstractFormat#getNumeratorFormat()",
        "org.apache.commons.math3.fraction.BigFractionFormat#format(Object,StringBuffer,FieldPosition)",
        "org.apache.commons.math3.fraction.AbstractFormat#getDenominatorFormat()",
        "org.apache.commons.math3.fraction.BigFraction#getDenominator()",
        "org.apache.commons.math3.fraction.ProperBigFractionFormat#getWholeFormat()",
        "org.apache.commons.math3.fraction.FractionFormat#format(Object,StringBuffer,FieldPosition)"
    ],
    "org.apache.commons.math3.stat.Frequency#incrementValue(long,long)": ["org.apache.commons.math3.stat.Frequency#incrementValue(int,long)"],
    "org.apache.commons.math3.linear.SparseFieldVector#walkInDefaultOrder(FieldVectorPreservingVisitor<T extends FieldElement>)": [
        "org.apache.commons.math3.linear.SparseFieldVector#getDimension()",
        "org.apache.commons.math3.linear.SparseFieldVector#getEntry(int)"
    ],
    "org.apache.commons.math3.geometry.euclidean.threed.SubPlane#split(Hyperplane<Euclidean3D>)": [
        "org.apache.commons.math3.geometry.partitioning.BSPTree#BSPTree(Object)",
        "org.apache.commons.math3.geometry.euclidean.threed.Plane#copySelf()",
        "org.apache.commons.math3.geometry.euclidean.threed.Line#toSpace(Point<Euclidean1D>)",
        "org.apache.commons.math3.geometry.partitioning.SubHyperplane.SplitSubHyperplane#SplitSubHyperplane(SubHyperplane<U extends Space>,SubHyperplane<U extends Space>)",
        "org.apache.commons.math3.geometry.euclidean.twod.Line#wholeHyperplane()",
        "org.apache.commons.math3.geometry.euclidean.threed.Plane#intersection(Plane)",
        "org.apache.commons.math3.geometry.euclidean.oned.Vector1D.<staticinit>()",
        "org.apache.commons.math3.geometry.euclidean.threed.Plane#getNormal()",
        "org.apache.commons.math3.geometry.euclidean.threed.Plane#getTolerance()",
        "org.apache.commons.math3.geometry.partitioning.BSPTree#getPlus()",
        "org.apache.commons.math3.geometry.euclidean.threed.SubPlane#SubPlane(Hyperplane<Euclidean3D>,Region<Euclidean2D>)",
        "org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet#PolygonsSet(BSPTree<Euclidean2D>,double)",
        "org.apache.commons.math3.geometry.euclidean.threed.Plane#getOffset(Plane)",
        "org.apache.commons.math3.geometry.partitioning.BSPTree#getMinus()",
        "org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(Vector3D,Vector3D)",
        "org.apache.commons.math3.geometry.partitioning.AbstractRegion#getTree(boolean)",
        "org.apache.commons.math3.geometry.partitioning.AbstractRegion#isEmpty(BSPTree<S extends Space>)",
        "org.apache.commons.math3.geometry.euclidean.threed.Plane#toSubSpace(Point<Euclidean3D>)",
        "org.apache.commons.math3.geometry.partitioning.BSPTree#split(SubHyperplane<S extends Space>)",
        "org.apache.commons.math3.geometry.partitioning.AbstractSubHyperplane#getHyperplane()",
        "org.apache.commons.math3.geometry.partitioning.AbstractSubHyperplane#getRemainingRegion()",
        "org.apache.commons.math3.geometry.euclidean.threed.Line#getDirection()",
        "org.apache.commons.math3.geometry.partitioning.BSPTree#BSPTree(SubHyperplane<S extends Space>,BSPTree<S extends Space>,BSPTree<S extends Space>,Object)",
        "org.apache.commons.math3.geometry.euclidean.threed.Vector3D#dotProduct(Vector<Euclidean3D>)"
    ],
    "org.apache.commons.math3.analysis.differentiation.DSCompiler#taylor(double[],int,double[]...)": [
        "org.apache.commons.math3.analysis.differentiation.DSCompiler#getSize()",
        "org.apache.commons.math3.analysis.differentiation.DSCompiler#getPartialDerivativeOrders(int)",
        "org.apache.commons.math3.util.FastMath.pow(double,int)",
        "org.apache.commons.math3.util.CombinatoricsUtils.factorial(int)",
        "org.apache.commons.math3.exception.MathInternalError#MathInternalError(Throwable)"
    ],
    "org.apache.commons.math3.optim.PointVectorValuePair#writeReplace()": [
        "org.apache.commons.math3.util.Pair#getKey()",
        "org.apache.commons.math3.optim.PointVectorValuePair#getValue()"
    ],
    "org.apache.commons.math3.stat.regression.GLSMultipleLinearRegression#calculateBeta()": [
        "org.apache.commons.math3.linear.LUDecomposition.Solver#getInverse()",
        "org.apache.commons.math3.linear.CholeskyDecomposition.Solver#getInverse()",
        "org.apache.commons.math3.linear.EigenDecomposition.Solver#getInverse()",
        "org.apache.commons.math3.linear.LUDecomposition#getSolver()",
        "org.apache.commons.math3.linear.OpenMapRealMatrix#multiply(RealMatrix)",
        "org.apache.commons.math3.linear.BlockRealMatrix#transpose()",
        "org.apache.commons.math3.linear.SingularValueDecomposition.Solver#getInverse()",
        "org.apache.commons.math3.linear.RRQRDecomposition.Solver#getInverse()",
        "org.apache.commons.math3.linear.LUDecomposition#LUDecomposition(RealMatrix)",
        "org.apache.commons.math3.linear.QRDecomposition.Solver#getInverse()",
        "org.apache.commons.math3.linear.AbstractRealMatrix#multiply(RealMatrix)",
        "org.apache.commons.math3.linear.AbstractRealMatrix#transpose()",
        "org.apache.commons.math3.linear.AbstractRealMatrix#operate(RealVector)",
        "org.apache.commons.math3.stat.regression.GLSMultipleLinearRegression#getOmegaInverse()",
        "org.apache.commons.math3.stat.regression.AbstractMultipleLinearRegression#getY()",
        "org.apache.commons.math3.stat.regression.AbstractMultipleLinearRegression#getX()",
        "org.apache.commons.math3.linear.DiagonalMatrix#multiply(RealMatrix)",
        "org.apache.commons.math3.linear.BlockRealMatrix#multiply(RealMatrix)"
    ],
    "org.apache.commons.math3.fitting.CurveFitter#CurveFitter(MultivariateVectorOptimizer)": ["org.apache.commons.math3.fitting.CurveFitter.<init>()"],
    "org.apache.commons.math3.optimization.fitting.HarmonicFitter.ParameterGuesser#guessAOmega(WeightedObservedPoint[])": [
        "org.apache.commons.math3.optimization.fitting.WeightedObservedPoint#getY()",
        "org.apache.commons.math3.optimization.fitting.WeightedObservedPoint#getX()",
        "org.apache.commons.math3.util.FastMath.sqrt(double)",
        "org.apache.commons.math3.exception.util.LocalizedFormats.<staticinit>()",
        "org.apache.commons.math3.exception.ZeroException#ZeroException()"
    ],
    "org.apache.commons.math3.dfp.Dfp#asinh()": [
        "org.apache.commons.math3.dfp.Dfp#add(Dfp)",
        "org.apache.commons.math3.dfp.Dfp#log()",
        "org.apache.commons.math3.dfp.Dfp#sqrt()",
        "org.apache.commons.math3.dfp.Dfp#getOne()",
        "org.apache.commons.math3.dfp.Dfp#multiply(Dfp)"
    ],
    "org.apache.commons.math3.ode.ParameterJacobianWrapper#computeParameterJacobian(double,double[],double[],String,double[])": [
        "org.apache.commons.math3.ode.JacobianMatrices.MainStateJacobianWrapper#getDimension()",
        "org.apache.commons.math3.ode.MultistepIntegrator#start(double,double[],double)$FirstOrderDifferentialEquations$1#computeDerivatives(double,double[],double[])",
        "org.apache.commons.math3.ode.JacobianMatrices.MainStateJacobianWrapper#computeDerivatives(double,double[],double[])",
        "org.apache.commons.math3.ode.AbstractParameterizable#isSupported(String)",
        "org.apache.commons.math3.ode.MultistepIntegrator#start(double,double[],double)$FirstOrderDifferentialEquations$1#getDimension()",
        "org.apache.commons.math3.ode.ParameterizedWrapper#isSupported(String)",
        "org.apache.commons.math3.ode.ParameterJacobianWrapper#isSupported(String)",
        "org.apache.commons.math3.ode.FirstOrderConverter#computeDerivatives(double,double[],double[])",
        "org.apache.commons.math3.ode.ParameterizedWrapper#getParameter(String)",
        "org.apache.commons.math3.ode.ParameterizedWrapper#setParameter(String,double)",
        "org.apache.commons.math3.ode.FirstOrderConverter#getDimension()"
    ],
    "org.apache.commons.math3.analysis.solvers.AbstractUnivariateSolver#AbstractUnivariateSolver(double,double)": [
        "org.apache.commons.math3.analysis.solvers.AbstractUnivariateSolver.<init>()",
        "org.apache.commons.math3.analysis.solvers.BaseAbstractUnivariateSolver#BaseAbstractUnivariateSolver(double,double)"
    ],
    "org.apache.commons.math3.ode.nonstiff.GraggBulirschStoerIntegrator#GraggBulirschStoerIntegrator(double,double,double,double)": [
        "org.apache.commons.math3.ode.nonstiff.GraggBulirschStoerIntegrator#setInterpolationControl(boolean,int)",
        "org.apache.commons.math3.ode.nonstiff.GraggBulirschStoerIntegrator.<staticinit>()",
        "org.apache.commons.math3.ode.nonstiff.GraggBulirschStoerIntegrator#setControlFactors(double,double,double,double)",
        "org.apache.commons.math3.ode.nonstiff.GraggBulirschStoerIntegrator.<init>()",
        "org.apache.commons.math3.ode.nonstiff.AdaptiveStepsizeIntegrator#AdaptiveStepsizeIntegrator(String,double,double,double,double)",
        "org.apache.commons.math3.ode.nonstiff.GraggBulirschStoerIntegrator#setOrderControl(int,double,double)",
        "org.apache.commons.math3.ode.nonstiff.GraggBulirschStoerIntegrator#setStabilityCheck(boolean,int,int,double)"
    ],
    "org.apache.commons.math3.analysis.differentiation.SparseGradient#divide(SparseGradient)": ["org.apache.commons.math3.analysis.differentiation.SparseGradient#SparseGradient(double,Map<Integer, Double>)"],
    "org.apache.commons.math3.genetics.TournamentSelection#TournamentSelection(int)": ["org.apache.commons.math3.genetics.TournamentSelection.<init>()"],
    "org.apache.commons.math3.analysis.differentiation.DerivativeStructure#multiply(int)": ["org.apache.commons.math3.analysis.differentiation.DerivativeStructure#multiply(double)"],
    "org.apache.commons.math3.optim.PointVectorValuePair#PointVectorValuePair(double[],double[])": ["org.apache.commons.math3.optim.PointVectorValuePair#PointVectorValuePair(double[],double[],boolean)"],
    "org.apache.commons.math3.optimization.general.AbstractLeastSquaresOptimizer#updateResidualsAndCost()": [
        "org.apache.commons.math3.linear.OpenMapRealVector#toArray()",
        "org.apache.commons.math3.linear.RealVector#toArray()",
        "org.apache.commons.math3.optimization.general.AbstractLeastSquaresOptimizer#computeResiduals(double[])",
        "org.apache.commons.math3.optimization.direct.BaseAbstractMultivariateVectorOptimizer#computeObjectiveValue(double[])",
        "org.apache.commons.math3.optimization.general.AbstractLeastSquaresOptimizer#computeCost(double[])",
        "org.apache.commons.math3.linear.AbstractRealMatrix#operate(RealVector)",
        "org.apache.commons.math3.linear.ArrayRealVector#ArrayRealVector(double[])",
        "org.apache.commons.math3.linear.RealVector.unmodifiableRealVector(RealVector)$RealVector$1#toArray()",
        "org.apache.commons.math3.linear.ArrayRealVector#toArray()"
    ],
    "org.apache.commons.math3.util.Precision.equalsIncludingNaN(float,float,int)": ["org.apache.commons.math3.util.Precision.equals(float,float,int)"],
    "org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet#PolyhedronsSet(double,double,double,double,double,double)": [
        "org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet.<staticinit>()",
        "org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet#PolyhedronsSet(double,double,double,double,double,double,double)"
    ],
    "org.apache.commons.math3.util.FastMathCalc.expint(int,double[])": [
        "org.apache.commons.math3.util.FastMathCalc.split(double,double[])",
        "org.apache.commons.math3.util.FastMathCalc.quadMult(double[],double[],double[])",
        "org.apache.commons.math3.util.FastMathCalc.resplit(double[])"
    ],
    "org.apache.commons.math3.ml.neuralnet.sofm.LearningFactorFunctionFactory.exponentialDecay(double,double,long)$LearningFactorFunction$1#value(long)": ["org.apache.commons.math3.ml.neuralnet.sofm.util.ExponentialDecayFunction#value(long)"],
    "org.apache.commons.math3.optim.AbstractOptimizationProblem#AbstractOptimizationProblem(int,int,ConvergenceChecker<PAIR>)": ["org.apache.commons.math3.optim.AbstractOptimizationProblem.<init>()"],
    "org.apache.commons.math3.geometry.euclidean.threed.Line#toSpace(Point<Euclidean1D>)": [
        "org.apache.commons.math3.geometry.euclidean.oned.Vector1D#getX()",
        "org.apache.commons.math3.geometry.euclidean.threed.Line#pointAt(double)"
    ],
    "org.apache.commons.math3.optim.linear.SimplexTableau#normalize(LinearConstraint)": [
        "org.apache.commons.math3.linear.RealVector#mapMultiply(double)",
        "org.apache.commons.math3.linear.RealVector.unmodifiableRealVector(RealVector)$RealVector$1#mapMultiply(double)",
        "org.apache.commons.math3.optim.linear.Relationship#oppositeRelationship()",
        "org.apache.commons.math3.optim.linear.LinearConstraint#getCoefficients()",
        "org.apache.commons.math3.optim.linear.LinearConstraint#getValue()",
        "org.apache.commons.math3.optim.linear.LinearConstraint#LinearConstraint(RealVector,Relationship,double)",
        "org.apache.commons.math3.optim.linear.LinearConstraint#getRelationship()"
    ],
    "org.apache.commons.math3.linear.AbstractRealMatrix#AbstractRealMatrix(int,int)": [
        "org.apache.commons.math3.linear.AbstractRealMatrix.<init>()",
        "org.apache.commons.math3.linear.RealLinearOperator.<init>()"
    ],
    "org.apache.commons.math3.linear.Array2DRowRealMatrix#Array2DRowRealMatrix()": [
        "org.apache.commons.math3.linear.AbstractRealMatrix#AbstractRealMatrix()",
        "org.apache.commons.math3.linear.Array2DRowRealMatrix.<init>()"
    ],
    "org.apache.commons.math3.geometry.spherical.twod.SphericalPolygonsSet.insertEdges(double,BSPTree<Sphere2D>,List<Edge>)": [
        "org.apache.commons.math3.geometry.spherical.twod.Edge#split(Circle,List<Edge>,List<Edge>)",
        "org.apache.commons.math3.geometry.spherical.twod.Edge#getCircle()",
        "org.apache.commons.math3.geometry.partitioning.BSPTree#insertCut(Hyperplane<S extends Space>)",
        "org.apache.commons.math3.geometry.partitioning.BSPTree#getParent()",
        "org.apache.commons.math3.geometry.partitioning.BSPTree#getPlus()",
        "org.apache.commons.math3.geometry.partitioning.BSPTree#getMinus()",
        "org.apache.commons.math3.geometry.spherical.twod.SphericalPolygonsSet.insertEdges(double,BSPTree<Sphere2D>,List<Edge>)",
        "org.apache.commons.math3.geometry.partitioning.BSPTree#setAttribute(Object)"
    ],
    "org.apache.commons.math3.random.ValueServer#reSeed(long)": ["org.apache.commons.math3.random.RandomDataGenerator#reSeed(long)"],
    "org.apache.commons.math3.geometry.partitioning.AbstractRegion#AbstractRegion(Collection<SubHyperplane<S extends Space>>,double)$BSPTreeVisitor$1#visitOrder(BSPTree<S extends Space>)": ["org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor.Order.<staticinit>()"],
    "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer#optimize(OptimizationData[]...)": ["org.apache.commons.math3.optim.nonlinear.scalar.MultivariateOptimizer#optimize(OptimizationData[]...)"],
    "org.apache.commons.math3.stat.regression.SimpleRegression#SimpleRegression(boolean)": ["org.apache.commons.math3.stat.regression.SimpleRegression.<init>()"],
    "org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor#visitOrder(BSPTree<S extends Space>)": ["org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor.Order.<staticinit>()"],
    "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.NelderMeadSimplex#iterate(MultivariateFunction,Comparator<PointValuePair>)": [
        "org.apache.commons.math3.optim.nonlinear.scalar.MultivariateFunctionMappingAdapter#value(double[])",
        "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.AbstractSimplex#setPoint(int,PointValuePair)",
        "org.apache.commons.math3.optimization.direct.MultivariateFunctionMappingAdapter#value(double[])",
        "org.apache.commons.math3.analysis.FunctionUtils.toMultivariateDifferentiableFunction(DifferentiableMultivariateFunction)$MultivariateDifferentiableFunction$1#value(double[])",
        "org.apache.commons.math3.analysis.FunctionUtils.toDifferentiableMultivariateFunction(MultivariateDifferentiableFunction)$DifferentiableMultivariateFunction$1#value(double[])",
        "org.apache.commons.math3.analysis.interpolation.MicrosphereProjectionInterpolator#interpolate(double[][],double[])$MultivariateFunction$1#value(double[])",
        "org.apache.commons.math3.stat.correlation.KendallsCorrelation#correlation(double[],double[])$Comparator$1#compare(Pair<Double, Double>,Pair<Double, Double>)",
        "org.apache.commons.math3.optimization.direct.MultivariateFunctionPenaltyAdapter#value(double[])",
        "org.apache.commons.math3.optim.nonlinear.scalar.MultivariateFunctionPenaltyAdapter#value(double[])",
        "org.apache.commons.math3.optim.linear.LinearObjectiveFunction#value(double[])",
        "org.apache.commons.math3.analysis.FunctionUtils.collector(BivariateFunction,UnivariateFunction,double)$MultivariateFunction$1#value(double[])",
        "org.apache.commons.math3.optim.PointValuePair#getPointRef()",
        "org.apache.commons.math3.optim.nonlinear.scalar.LeastSquaresConverter#value(double[])",
        "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.AbstractSimplex#getDimension()",
        "org.apache.commons.math3.optimization.LeastSquaresConverter#value(double[])",
        "org.apache.commons.math3.stat.Frequency.NaturalComparator#compare(Comparable<T extends Comparable>,Comparable<T extends Comparable>)",
        "org.apache.commons.math3.optim.nonlinear.scalar.MultiStartMultivariateOptimizer#getPairComparator()$Comparator$1#compare(PointValuePair,PointValuePair)",
        "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizer#doOptimize()$MultivariateFunction$1#value(double[])",
        "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizer#doOptimize()$Comparator$1#compare(PointValuePair,PointValuePair)",
        "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.AbstractSimplex#replaceWorstPoint(PointValuePair,Comparator<PointValuePair>)",
        "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.AbstractSimplex#getPoint(int)",
        "org.apache.commons.math3.analysis.interpolation.MicrosphereInterpolatingFunction#value(double[])",
        "org.apache.commons.math3.optim.PointValuePair#PointValuePair(double[],double,boolean)",
        "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.AbstractSimplex#evaluate(MultivariateFunction,Comparator<PointValuePair>)",
        "org.apache.commons.math3.analysis.FunctionUtils.toDifferentiableMultivariateFunction(MultivariateDifferentiableFunction)$MultivariateFunction$1$MultivariateFunction$1#partialDerivative(int)$MultivariateFunction$1#value(double[])",
        "org.apache.commons.math3.optim.PointValuePair#getPoint()",
        "org.apache.commons.math3.optimization.direct.SimplexOptimizer#doOptimize()$MultivariateFunction$1#value(double[])"
    ],
    "org.apache.commons.math3.ode.AbstractFieldIntegrator#acceptStep(AbstractFieldStepInterpolator<T extends RealFieldElement>,T extends RealFieldElement)$Comparator$1#compare(FieldEventState<T extends RealFieldElement>,FieldEventState<T extends RealFieldElement>)": ["org.apache.commons.math3.ode.events.FieldEventState#getEventTime()"],
    "org.apache.commons.math3.random.BitsStreamGenerator#nextBoolean()": [
        "org.apache.commons.math3.random.ISAACRandom#next(int)",
        "org.apache.commons.math3.random.MersenneTwister#next(int)",
        "org.apache.commons.math3.random.Well19937a#next(int)",
        "org.apache.commons.math3.random.Well1024a#next(int)",
        "org.apache.commons.math3.random.Well44497b#next(int)",
        "org.apache.commons.math3.random.Well512a#next(int)",
        "org.apache.commons.math3.random.Well44497a#next(int)",
        "org.apache.commons.math3.random.Well19937c#next(int)"
    ],
    "org.apache.commons.math3.geometry.euclidean.threed.FieldRotation#composeInternal(FieldRotation<T extends RealFieldElement>)": ["org.apache.commons.math3.geometry.euclidean.threed.FieldRotation#FieldRotation(T extends RealFieldElement,T extends RealFieldElement,T extends RealFieldElement,T extends RealFieldElement,boolean)"],
    "org.apache.commons.math3.geometry.euclidean.threed.FieldRotation#getAngles(RotationOrder,RotationConvention)": [
        "org.apache.commons.math3.geometry.euclidean.threed.Vector3D.<staticinit>()",
        "org.apache.commons.math3.geometry.euclidean.threed.FieldRotation#vector(double,double,double)",
        "org.apache.commons.math3.geometry.euclidean.threed.FieldRotation#applyTo(FieldVector3D<T extends RealFieldElement>)",
        "org.apache.commons.math3.geometry.euclidean.threed.RotationOrder.<staticinit>()",
        "org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D#getZ()",
        "org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D#getY()",
        "org.apache.commons.math3.geometry.euclidean.threed.CardanEulerSingularityException#CardanEulerSingularityException(boolean)",
        "org.apache.commons.math3.geometry.euclidean.threed.FieldRotation#applyInverseTo(FieldVector3D<T extends RealFieldElement>)",
        "org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D#getX()",
        "org.apache.commons.math3.geometry.euclidean.threed.RotationConvention.<staticinit>()",
        "org.apache.commons.math3.geometry.euclidean.threed.FieldRotation#applyInverseTo(Vector3D)",
        "org.apache.commons.math3.geometry.euclidean.threed.FieldRotation#applyTo(Vector3D)",
        "org.apache.commons.math3.geometry.euclidean.threed.FieldRotation#buildArray(T extends RealFieldElement,T extends RealFieldElement,T extends RealFieldElement)"
    ],
    "org.apache.commons.math3.linear.AbstractRealMatrix#transpose()$DefaultRealMatrixPreservingVisitor$1#visit(int,int,double)": [
        "org.apache.commons.math3.linear.BlockRealMatrix#setEntry(int,int,double)",
        "org.apache.commons.math3.linear.OpenMapRealMatrix#setEntry(int,int,double)",
        "org.apache.commons.math3.linear.Array2DRowRealMatrix#setEntry(int,int,double)",
        "org.apache.commons.math3.linear.DiagonalMatrix#setEntry(int,int,double)"
    ],
    "org.apache.commons.math3.analysis.polynomials.PolynomialsUtils.createLegendrePolynomial(int)$RecurrenceCoefficientsGenerator$1#generate(int)": [
        "org.apache.commons.math3.fraction.BigFraction#BigFraction(int,int)",
        "org.apache.commons.math3.fraction.BigFraction.<staticinit>()"
    ],
    "org.apache.commons.math3.geometry.spherical.twod.SphericalPolygonsSet#SphericalPolygonsSet(Vector3D,double)": [
        "org.apache.commons.math3.geometry.spherical.twod.SphericalPolygonsSet.<init>()",
        "org.apache.commons.math3.geometry.partitioning.BSPTree#BSPTree(Object)",
        "org.apache.commons.math3.geometry.spherical.twod.Circle#Circle(Vector3D,double)",
        "org.apache.commons.math3.geometry.spherical.twod.Circle#wholeHyperplane()",
        "org.apache.commons.math3.geometry.partitioning.AbstractRegion#AbstractRegion(BSPTree<S extends Space>,double)",
        "org.apache.commons.math3.geometry.partitioning.BSPTree#BSPTree(SubHyperplane<S extends Space>,BSPTree<S extends Space>,BSPTree<S extends Space>,Object)"
    ],
    "org.apache.commons.math3.stat.descriptive.summary.Sum.copy(Sum,Sum)": [
        "org.apache.commons.math3.util.MathUtils.checkNotNull(Object)",
        "org.apache.commons.math3.stat.descriptive.AbstractUnivariateStatistic#setData(double[])",
        "org.apache.commons.math3.stat.descriptive.rank.Percentile#setData(double[])",
        "org.apache.commons.math3.stat.descriptive.AbstractUnivariateStatistic#getDataRef()"
    ],
    "org.apache.commons.math3.linear.ConjugateGradient#ConjugateGradient(IterationManager,double,boolean)": [
        "org.apache.commons.math3.linear.PreconditionedIterativeLinearSolver#PreconditionedIterativeLinearSolver(IterationManager)",
        "org.apache.commons.math3.linear.ConjugateGradient.<init>()"
    ],
    "org.apache.commons.math3.stat.inference.BinomialTest#binomialTest(int,int,double,AlternativeHypothesis)": [
        "org.apache.commons.math3.exception.NullArgumentException#NullArgumentException()",
        "org.apache.commons.math3.distribution.BinomialDistribution#cumulativeProbability(int)",
        "org.apache.commons.math3.distribution.BinomialDistribution#BinomialDistribution(RandomGenerator,int,double)",
        "org.apache.commons.math3.stat.inference.AlternativeHypothesis.<staticinit>()",
        "org.apache.commons.math3.distribution.BinomialDistribution#probability(int)",
        "org.apache.commons.math3.exception.util.LocalizedFormats.<staticinit>()"
    ],
    "org.apache.commons.math3.util.OpenIntToFieldHashMap#containsKey(int,int)": ["org.apache.commons.math3.util.OpenIntToFieldHashMap.<staticinit>()"],
    "org.apache.commons.math3.fraction.Fraction#Fraction(double,int)": ["org.apache.commons.math3.fraction.Fraction#Fraction(double,double,int,int)"],
    "org.apache.commons.math3.optimization.general.AbstractLeastSquaresOptimizer#AbstractLeastSquaresOptimizer(ConvergenceChecker<PointVectorValuePair>)": [
        "org.apache.commons.math3.optimization.direct.BaseAbstractMultivariateVectorOptimizer#BaseAbstractMultivariateVectorOptimizer(ConvergenceChecker<PointVectorValuePair>)",
        "org.apache.commons.math3.optimization.general.AbstractLeastSquaresOptimizer.<init>()"
    ],
    "org.apache.commons.math3.stat.regression.SimpleRegression#getSumSquaredErrors()": ["org.apache.commons.math3.util.FastMath.max(double,double)"],
    "org.apache.commons.math3.optimization.general.AbstractLeastSquaresOptimizer#optimizeInternal(int,MultivariateDifferentiableVectorFunction,OptimizationData[]...)": ["org.apache.commons.math3.analysis.FunctionUtils.toDifferentiableMultivariateVectorFunction(MultivariateDifferentiableVectorFunction)"],
    "org.apache.commons.math3.ode.sampling.AbstractStepInterpolator#getInterpolatedSecondaryState(int)": [
        "org.apache.commons.math3.ode.EquationsMapper#extractEquationData(double[],double[])",
        "org.apache.commons.math3.ode.sampling.AbstractStepInterpolator#evaluateCompleteInterpolatedState()"
    ],
    "org.apache.commons.math3.stat.inference.MannWhitneyUTest#mannWhitneyUTest(double[],double[])": [
        "org.apache.commons.math3.stat.inference.MannWhitneyUTest#ensureDataConformance(double[],double[])",
        "org.apache.commons.math3.stat.inference.MannWhitneyUTest#mannWhitneyU(double[],double[])",
        "org.apache.commons.math3.stat.inference.MannWhitneyUTest#calculateAsymptoticPValue(double,int,int)"
    ],
    "org.apache.commons.math3.special.Gamma.regularizedGammaP(double,double,double,int)": [
        "org.apache.commons.math3.util.FastMath.abs(double)",
        "org.apache.commons.math3.util.FastMath.log(double)",
        "org.apache.commons.math3.special.Gamma.regularizedGammaQ(double,double,double,int)",
        "org.apache.commons.math3.util.FastMath.exp(double)",
        "org.apache.commons.math3.special.Gamma.logGamma(double)"
    ],
    "org.apache.commons.math3.stat.ranking.NaturalRanking#rank(double[])": [
        "org.apache.commons.math3.stat.ranking.NaturalRanking#restoreNaNs(double[],List<Integer>)",
        "org.apache.commons.math3.stat.ranking.NaturalRanking#getNanPositions(IntDoublePair[])",
        "org.apache.commons.math3.exception.MathInternalError#MathInternalError()",
        "org.apache.commons.math3.stat.ranking.NaturalRanking.IntDoublePair#IntDoublePair(double,int)",
        "org.apache.commons.math3.stat.ranking.NaNStrategy.<staticinit>()",
        "org.apache.commons.math3.stat.ranking.NaturalRanking.IntDoublePair#getPosition()",
        "org.apache.commons.math3.stat.ranking.NaturalRanking#recodeNaNs(IntDoublePair[],double)",
        "org.apache.commons.math3.exception.NotANumberException#NotANumberException()",
        "org.apache.commons.math3.stat.ranking.NaturalRanking.IntDoublePair#getValue()",
        "org.apache.commons.math3.stat.ranking.NaturalRanking#resolveTie(double[],List<Integer>)",
        "org.apache.commons.math3.stat.ranking.NaturalRanking#removeNaNs(IntDoublePair[])"
    ],
    "org.apache.commons.math3.random.ValueServer#fill(int)": ["org.apache.commons.math3.random.ValueServer#getNext()"],
    "org.apache.commons.math3.ode.AbstractIntegrator#getEvaluations()": ["org.apache.commons.math3.util.IntegerSequence.Incrementor#getCount()"],
    "org.apache.commons.math3.ml.neuralnet.MapUtils.computeU(NeuronSquareMesh2D,DistanceMeasure)": [
        "org.apache.commons.math3.ml.neuralnet.twod.NeuronSquareMesh2D#getNetwork()",
        "org.apache.commons.math3.ml.distance.EuclideanDistance#compute(double[],double[])",
        "org.apache.commons.math3.ml.neuralnet.twod.NeuronSquareMesh2D#getNumberOfRows()",
        "org.apache.commons.math3.ml.neuralnet.twod.NeuronSquareMesh2D#getNeuron(int,int)",
        "org.apache.commons.math3.ml.distance.CanberraDistance#compute(double[],double[])",
        "org.apache.commons.math3.ml.neuralnet.Network#getNeighbours(Neuron)",
        "org.apache.commons.math3.ml.distance.ChebyshevDistance#compute(double[],double[])",
        "org.apache.commons.math3.ml.distance.ManhattanDistance#compute(double[],double[])",
        "org.apache.commons.math3.ml.distance.EarthMoversDistance#compute(double[],double[])",
        "org.apache.commons.math3.ml.neuralnet.Neuron#getFeatures()",
        "org.apache.commons.math3.ml.neuralnet.twod.NeuronSquareMesh2D#getNumberOfColumns()"
    ],
    "org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet#IntervalsSet(double)": [
        "org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet.<init>()",
        "org.apache.commons.math3.geometry.partitioning.AbstractRegion#AbstractRegion(double)"
    ],
    "org.apache.commons.math3.ode.nonstiff.HighamHall54StepInterpolator#doCopy()": ["org.apache.commons.math3.ode.nonstiff.HighamHall54StepInterpolator#HighamHall54StepInterpolator(HighamHall54StepInterpolator)"],
    "org.apache.commons.math3.stat.descriptive.summary.Sum#evaluate(double[],int,int)": ["org.apache.commons.math3.stat.descriptive.AbstractUnivariateStatistic#test(double[],int,int,boolean)"],
    "org.apache.commons.math3.special.Gamma.regularizedGammaQ(double,double)": [
        "org.apache.commons.math3.special.Gamma.regularizedGammaQ(double,double,double,int)",
        "org.apache.commons.math3.special.Gamma.<staticinit>()"
    ],
    "org.apache.commons.math3.ode.nonstiff.AdamsBashforthIntegrator#errorEstimation(double[],double[],double[],RealMatrix)": [
        "org.apache.commons.math3.linear.SparseFieldMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.DiagonalMatrix#getEntry(int,int)",
        "org.apache.commons.math3.linear.OpenMapRealMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.DiagonalMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.OpenMapRealMatrix#getEntry(int,int)",
        "org.apache.commons.math3.linear.BlockRealMatrix#getEntry(int,int)",
        "org.apache.commons.math3.linear.BlockFieldMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.BlockRealMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.Array2DRowRealMatrix#getEntry(int,int)",
        "org.apache.commons.math3.linear.Array2DRowRealMatrix#getRowDimension()",
        "org.apache.commons.math3.util.FastMath.abs(double)",
        "org.apache.commons.math3.util.FastMath.sqrt(double)",
        "org.apache.commons.math3.linear.Array2DRowFieldMatrix#getRowDimension()"
    ],
    "org.apache.commons.math3.geometry.spherical.twod.Circle#Circle(S2Point,S2Point,double)": [
        "org.apache.commons.math3.geometry.spherical.twod.Circle#reset(Vector3D)",
        "org.apache.commons.math3.geometry.spherical.twod.Circle.<init>()",
        "org.apache.commons.math3.geometry.euclidean.threed.Vector3D#crossProduct(Vector<Euclidean3D>)",
        "org.apache.commons.math3.geometry.spherical.twod.S2Point#getVector()"
    ],
    "org.apache.commons.math3.random.RandomAdaptor#nextFloat()": [
        "org.apache.commons.math3.random.AbstractRandomGenerator#nextFloat()",
        "org.apache.commons.math3.random.SynchronizedRandomGenerator#nextFloat()",
        "org.apache.commons.math3.random.BitsStreamGenerator#nextFloat()",
        "org.apache.commons.math3.random.RandomGeneratorFactory.createRandomGenerator(Random)$RandomGenerator$1#nextFloat()",
        "org.apache.commons.math3.random.RandomAdaptor#nextFloat()"
    ],
    "org.apache.commons.math3.util.Decimal64#cosh()": [
        "org.apache.commons.math3.util.Decimal64#Decimal64(double)",
        "org.apache.commons.math3.util.FastMath.cosh(double)"
    ],
    "org.apache.commons.math3.distribution.HypergeometricDistribution#getSupportLowerBound()": [
        "org.apache.commons.math3.distribution.HypergeometricDistribution#getSampleSize()",
        "org.apache.commons.math3.distribution.HypergeometricDistribution#getPopulationSize()",
        "org.apache.commons.math3.distribution.HypergeometricDistribution#getNumberOfSuccesses()",
        "org.apache.commons.math3.util.FastMath.max(int,int)"
    ],
    "org.apache.commons.math3.geometry.euclidean.threed.Plane#Plane(Plane)": ["org.apache.commons.math3.geometry.euclidean.threed.Plane.<init>()"],
    "org.apache.commons.math3.distribution.AbstractIntegerDistribution#logProbability(int)": [
        "org.apache.commons.math3.distribution.GeometricDistribution#probability(int)",
        "org.apache.commons.math3.distribution.EnumeratedIntegerDistribution#probability(int)",
        "org.apache.commons.math3.distribution.UniformIntegerDistribution#probability(int)",
        "org.apache.commons.math3.distribution.HypergeometricDistribution#probability(int)",
        "org.apache.commons.math3.distribution.PoissonDistribution#probability(int)",
        "org.apache.commons.math3.distribution.ZipfDistribution#probability(int)",
        "org.apache.commons.math3.distribution.PascalDistribution#probability(int)",
        "org.apache.commons.math3.util.FastMath.log(double)",
        "org.apache.commons.math3.distribution.BinomialDistribution#probability(int)"
    ],
    "org.apache.commons.math3.util.Incrementor.wrap(Incrementor)": ["org.apache.commons.math3.util.Incrementor.wrap(Incrementor)$Incrementor$1.<init>()"],
    "org.apache.commons.math3.ode.ContinuousOutputModel#locatePoint(double,StepInterpolator)": [
        "org.apache.commons.math3.ode.sampling.AbstractStepInterpolator#getCurrentTime()",
        "org.apache.commons.math3.ode.sampling.AbstractStepInterpolator#getPreviousTime()"
    ],
    "org.apache.commons.math3.linear.RealVector.unmodifiableRealVector(RealVector)$RealVector$1#outerProduct(RealVector)": [
        "org.apache.commons.math3.linear.RealVector.unmodifiableRealVector(RealVector)$RealVector$1#outerProduct(RealVector)",
        "org.apache.commons.math3.linear.RealVector#outerProduct(RealVector)",
        "org.apache.commons.math3.linear.ArrayRealVector#outerProduct(RealVector)"
    ],
    "org.apache.commons.math3.geometry.spherical.oned.ArcsSet.SubArcsIterator#next()": ["org.apache.commons.math3.geometry.spherical.oned.ArcsSet.SubArcsIterator#selectPending()"],
    "org.apache.commons.math3.analysis.function.Sigmoid.value(double,double,double)": ["org.apache.commons.math3.util.FastMath.exp(double)"],
    "org.apache.commons.math3.linear.MatrixDimensionMismatchException#getExpectedRowDimension()": ["org.apache.commons.math3.exception.MultiDimensionMismatchException#getExpectedDimension(int)"],
    "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer#updateCovariance(boolean,RealMatrix,RealMatrix,int[],RealMatrix)": [
        "org.apache.commons.math3.linear.BlockRealMatrix#getRow(int)",
        "org.apache.commons.math3.linear.OpenMapRealMatrix#multiply(RealMatrix)",
        "org.apache.commons.math3.linear.DiagonalMatrix#getEntry(int,int)",
        "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer.selectColumns(RealMatrix,int[])",
        "org.apache.commons.math3.linear.BlockRealMatrix#getEntry(int,int)",
        "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer.repmat(RealMatrix,int,int)",
        "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer.sqrt(RealMatrix)",
        "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer.sumRows(RealMatrix)",
        "org.apache.commons.math3.linear.DiagonalMatrix#multiply(RealMatrix)",
        "org.apache.commons.math3.linear.AbstractRealMatrix#getRow(int)",
        "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer.square(RealMatrix)",
        "org.apache.commons.math3.linear.BlockRealMatrix#multiply(RealMatrix)",
        "org.apache.commons.math3.linear.AbstractRealMatrix#subtract(RealMatrix)",
        "org.apache.commons.math3.util.FastMath.pow(double,double)",
        "org.apache.commons.math3.linear.BlockRealMatrix#scalarMultiply(double)",
        "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer.divide(RealMatrix,RealMatrix)",
        "org.apache.commons.math3.linear.BlockRealMatrix#transpose()",
        "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer.diag(RealMatrix)",
        "org.apache.commons.math3.linear.BlockRealMatrix#subtract(RealMatrix)",
        "org.apache.commons.math3.linear.OpenMapRealMatrix#getEntry(int,int)",
        "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer#updateBD(double)",
        "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer#sortedIndices(double[])",
        "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer.times(RealMatrix,RealMatrix)",
        "org.apache.commons.math3.linear.Array2DRowRealMatrix#getEntry(int,int)",
        "org.apache.commons.math3.util.MathArrays.copyOf(int[],int)",
        "org.apache.commons.math3.linear.OpenMapRealMatrix#subtract(RealMatrix)",
        "org.apache.commons.math3.linear.AbstractRealMatrix#multiply(RealMatrix)",
        "org.apache.commons.math3.linear.AbstractRealMatrix#transpose()",
        "org.apache.commons.math3.linear.AbstractRealMatrix#scalarMultiply(double)",
        "org.apache.commons.math3.linear.BlockRealMatrix#add(RealMatrix)",
        "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer.reverse(int[])",
        "org.apache.commons.math3.linear.AbstractRealMatrix#add(RealMatrix)",
        "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer.inverse(int[])"
    ],
    "org.apache.commons.math3.exception.OutOfRangeException#OutOfRangeException(Number,Number,Number)": [
        "org.apache.commons.math3.exception.OutOfRangeException#OutOfRangeException(Localizable,Number,Number,Number)",
        "org.apache.commons.math3.exception.util.LocalizedFormats.<staticinit>()"
    ],
    "org.apache.commons.math3.linear.RealVector#mapAddToSelf(double)": [
        "org.apache.commons.math3.linear.RealVector.unmodifiableRealVector(RealVector)$RealVector$1#mapToSelf(UnivariateFunction)",
        "org.apache.commons.math3.linear.ArrayRealVector#mapToSelf(UnivariateFunction)",
        "org.apache.commons.math3.analysis.FunctionUtils.fix2ndArgument(BivariateFunction,double)",
        "org.apache.commons.math3.linear.RealVector#mapToSelf(UnivariateFunction)",
        "org.apache.commons.math3.analysis.function.Add.<init>()"
    ],
    "org.apache.commons.math3.linear.SparseFieldVector#checkIndex(int)": ["org.apache.commons.math3.linear.SparseFieldVector#getDimension()"],
    "org.apache.commons.math3.linear.RRQRDecomposition#getRank(double)": [
        "org.apache.commons.math3.linear.AbstractRealMatrix#getFrobeniusNorm()",
        "org.apache.commons.math3.linear.DiagonalMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.Array2DRowRealMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.BlockFieldMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.SparseFieldMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.BlockRealMatrix#getFrobeniusNorm()",
        "org.apache.commons.math3.linear.BlockRealMatrix#getSubMatrix(int,int,int,int)",
        "org.apache.commons.math3.linear.OpenMapRealMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.OpenMapRealMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.DiagonalMatrix#getRowDimension()",
        "org.apache.commons.math3.util.FastMath.min(int,int)",
        "org.apache.commons.math3.linear.Array2DRowFieldMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.SparseFieldMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.BlockFieldMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.BlockRealMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.Array2DRowRealMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.Array2DRowFieldMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.BlockRealMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.AbstractRealMatrix#getSubMatrix(int,int,int,int)",
        "org.apache.commons.math3.linear.QRDecomposition#getR()"
    ],
    "org.apache.commons.math3.stat.descriptive.MultivariateSummaryStatistics#setMinImpl(StorelessUnivariateStatistic[])": ["org.apache.commons.math3.stat.descriptive.MultivariateSummaryStatistics#setImpl(StorelessUnivariateStatistic[],StorelessUnivariateStatistic[])"],
    "org.apache.commons.math3.util.OpenIntToDoubleHashMap.Iterator#Iterator()": [
        "org.apache.commons.math3.util.OpenIntToDoubleHashMap.Iterator#advance()",
        "org.apache.commons.math3.util.OpenIntToDoubleHashMap.Iterator.<init>()"
    ],
    "org.apache.commons.math3.geometry.euclidean.twod.Line#getOffset(Line)": ["org.apache.commons.math3.util.MathArrays.linearCombination(double,double,double,double)"],
    "org.apache.commons.math3.analysis.interpolation.NevilleInterpolator#interpolate(double[],double[])": ["org.apache.commons.math3.analysis.polynomials.PolynomialFunctionLagrangeForm#PolynomialFunctionLagrangeForm(double[],double[])"],
    "org.apache.commons.math3.linear.RealVector#mapDivideToSelf(double)": [
        "org.apache.commons.math3.linear.RealVector.unmodifiableRealVector(RealVector)$RealVector$1#mapToSelf(UnivariateFunction)",
        "org.apache.commons.math3.linear.ArrayRealVector#mapToSelf(UnivariateFunction)",
        "org.apache.commons.math3.analysis.FunctionUtils.fix2ndArgument(BivariateFunction,double)",
        "org.apache.commons.math3.linear.RealVector#mapToSelf(UnivariateFunction)",
        "org.apache.commons.math3.analysis.function.Divide.<init>()"
    ],
    "org.apache.commons.math3.optimization.BaseMultivariateMultiStartOptimizer#sortPairs(GoalType)$Comparator$1#compare(PointValuePair,PointValuePair)": [
        "org.apache.commons.math3.util.Pair#getValue()",
        "org.apache.commons.math3.optimization.GoalType.<staticinit>()",
        "org.apache.commons.math3.optim.PointVectorValuePair#getValue()",
        "org.apache.commons.math3.optimization.PointVectorValuePair#getValue()"
    ],
    "org.apache.commons.math3.util.MathArrays.copyOf(int[],int)": ["org.apache.commons.math3.util.FastMath.min(int,int)"],
    "org.apache.commons.math3.analysis.differentiation.DSCompiler#sin(double[],int,double[],int)": [
        "org.apache.commons.math3.util.FastMath.sin(double)",
        "org.apache.commons.math3.analysis.differentiation.DSCompiler#compose(double[],int,double[],double[],int)",
        "org.apache.commons.math3.util.FastMath.cos(double)"
    ],
    "org.apache.commons.math3.optim.nonlinear.scalar.MultivariateFunctionMappingAdapter.UpperBoundMapper#boundedToUnbounded(double)": ["org.apache.commons.math3.util.FastMath.log(double)"],
    "org.apache.commons.math3.distribution.HypergeometricDistribution#getNumericalMean()": [
        "org.apache.commons.math3.distribution.HypergeometricDistribution#getSampleSize()",
        "org.apache.commons.math3.distribution.HypergeometricDistribution#getNumberOfSuccesses()",
        "org.apache.commons.math3.distribution.HypergeometricDistribution#getPopulationSize()"
    ],
    "org.apache.commons.math3.analysis.differentiation.DerivativeStructure#equals(Object)": [
        "org.apache.commons.math3.util.MathArrays.equals(double[],double[])",
        "org.apache.commons.math3.analysis.differentiation.DerivativeStructure#getFreeParameters()",
        "org.apache.commons.math3.analysis.differentiation.DerivativeStructure#getOrder()"
    ],
    "org.apache.commons.math3.geometry.euclidean.twod.NestedLoops#NestedLoops(double)": ["org.apache.commons.math3.geometry.euclidean.twod.NestedLoops.<init>()"],
    "org.apache.commons.math3.ml.clustering.Cluster#Cluster()": ["org.apache.commons.math3.ml.clustering.Cluster.<init>()"],
    "org.apache.commons.math3.ode.nonstiff.HighamHall54StepInterpolator#HighamHall54StepInterpolator()": [
        "org.apache.commons.math3.ode.nonstiff.HighamHall54StepInterpolator.<init>()",
        "org.apache.commons.math3.ode.nonstiff.RungeKuttaStepInterpolator#RungeKuttaStepInterpolator()"
    ],
    "org.apache.commons.math3.analysis.function.Cbrt#value(double)": ["org.apache.commons.math3.util.FastMath.cbrt(double)"],
    "org.apache.commons.math3.fitting.GaussianFitter#fit(double[])": [
        "org.apache.commons.math3.fitting.GaussianFitter#fit(double[])$Parametric$1.<init>()",
        "org.apache.commons.math3.fitting.CurveFitter#fit(T extends ParametricUnivariateFunction,double[])"
    ],
    "org.apache.commons.math3.stat.descriptive.rank.Percentile#setData(double[],int,int)": [
        "org.apache.commons.math3.stat.descriptive.rank.Percentile.<staticinit>()",
        "org.apache.commons.math3.stat.descriptive.AbstractUnivariateStatistic#setData(double[],int,int)"
    ],
    "org.apache.commons.math3.fitting.leastsquares.LeastSquaresAdapter#evaluate(RealVector)": [
        "org.apache.commons.math3.fitting.leastsquares.LeastSquaresFactory.weightMatrix(LeastSquaresProblem,RealMatrix)$LeastSquaresAdapter$1#evaluate(RealVector)",
        "org.apache.commons.math3.fitting.leastsquares.LeastSquaresFactory.countEvaluations(LeastSquaresProblem,Incrementor)$LeastSquaresAdapter$1#evaluate(RealVector)",
        "org.apache.commons.math3.fitting.leastsquares.LeastSquaresAdapter#evaluate(RealVector)",
        "org.apache.commons.math3.fitting.leastsquares.LeastSquaresFactory.LocalLeastSquaresProblem#evaluate(RealVector)"
    ],
    "org.apache.commons.math3.geometry.euclidean.threed.SphericalCoordinates#SphericalCoordinates(Vector3D)": [
        "org.apache.commons.math3.util.FastMath.acos(double)",
        "org.apache.commons.math3.geometry.euclidean.threed.Vector3D#getNorm()",
        "org.apache.commons.math3.geometry.euclidean.threed.Vector3D#getAlpha()",
        "org.apache.commons.math3.geometry.euclidean.threed.Vector3D#getZ()",
        "org.apache.commons.math3.geometry.euclidean.threed.SphericalCoordinates.<init>()"
    ],
    "org.apache.commons.math3.linear.ArrayRealVector#toString()": [
        "org.apache.commons.math3.linear.RealVectorFormat#format(RealVector)",
        "org.apache.commons.math3.linear.ArrayRealVector.<staticinit>()"
    ],
    "org.apache.commons.math3.optimization.direct.NelderMeadSimplex#NelderMeadSimplex(double[][])": [
        "org.apache.commons.math3.optimization.direct.NelderMeadSimplex#NelderMeadSimplex(double[][],double,double,double,double)",
        "org.apache.commons.math3.optimization.direct.NelderMeadSimplex.<staticinit>()"
    ],
    "org.apache.commons.math3.linear.SparseFieldVector#outerProduct(SparseFieldVector<T extends FieldElement>)": [
        "org.apache.commons.math3.util.OpenIntToFieldHashMap.Iterator#hasNext()",
        "org.apache.commons.math3.linear.SparseFieldMatrix#SparseFieldMatrix(Field<T extends FieldElement>,int,int)",
        "org.apache.commons.math3.util.OpenIntToFieldHashMap.Iterator#key()",
        "org.apache.commons.math3.util.OpenIntToFieldHashMap.Iterator#value()",
        "org.apache.commons.math3.linear.SparseFieldMatrix#setEntry(int,int,T extends FieldElement)",
        "org.apache.commons.math3.linear.SparseFieldVector#getDimension()",
        "org.apache.commons.math3.util.OpenIntToFieldHashMap#iterator()",
        "org.apache.commons.math3.util.OpenIntToFieldHashMap.Iterator#advance()"
    ],
    "org.apache.commons.math3.ode.FieldODEStateAndDerivative#FieldODEStateAndDerivative(T extends RealFieldElement,T extends RealFieldElement[],T extends RealFieldElement[])": ["org.apache.commons.math3.ode.FieldODEStateAndDerivative#FieldODEStateAndDerivative(T extends RealFieldElement,T extends RealFieldElement[],T extends RealFieldElement[],T extends RealFieldElement[][],T extends RealFieldElement[][])"],
    "org.apache.commons.math3.util.ResizableDoubleArray#discardFrontElements(int)": ["org.apache.commons.math3.util.ResizableDoubleArray#discardExtremeElements(int,boolean)"],
    "org.apache.commons.math3.fraction.AbstractFormat#AbstractFormat(NumberFormat)": ["org.apache.commons.math3.fraction.AbstractFormat#AbstractFormat(NumberFormat,NumberFormat)"],
    "org.apache.commons.math3.optim.nonlinear.vector.jacobian.GaussNewtonOptimizer#doOptimize()": [
        "org.apache.commons.math3.linear.QRDecomposition#QRDecomposition(RealMatrix)",
        "org.apache.commons.math3.optim.BaseOptimizer#getConvergenceChecker()",
        "org.apache.commons.math3.linear.BlockRealMatrix#getRow(int)",
        "org.apache.commons.math3.linear.OpenMapRealVector#toArray()",
        "org.apache.commons.math3.linear.LUDecomposition#getSolver()",
        "org.apache.commons.math3.linear.DiagonalMatrix#getEntry(int,int)",
        "org.apache.commons.math3.exception.util.LocalizedFormats.<staticinit>()",
        "org.apache.commons.math3.optim.nonlinear.vector.MultivariateVectorOptimizer#computeObjectiveValue(double[])",
        "org.apache.commons.math3.linear.EigenDecomposition.Solver#solve(RealVector)",
        "org.apache.commons.math3.linear.BlockRealMatrix#getEntry(int,int)",
        "org.apache.commons.math3.linear.LUDecomposition#LUDecomposition(RealMatrix)",
        "org.apache.commons.math3.linear.RealVector#toArray()",
        "org.apache.commons.math3.optim.BaseMultivariateOptimizer#getStartPoint()",
        "org.apache.commons.math3.linear.SingularValueDecomposition.Solver#solve(RealVector)",
        "org.apache.commons.math3.linear.RRQRDecomposition.Solver#solve(RealVector)",
        "org.apache.commons.math3.linear.ArrayRealVector#ArrayRealVector(double[],boolean)",
        "org.apache.commons.math3.optim.nonlinear.vector.jacobian.AbstractLeastSquaresOptimizer#computeCost(double[])",
        "org.apache.commons.math3.linear.AbstractRealMatrix#getRow(int)",
        "org.apache.commons.math3.linear.LUDecomposition.Solver#solve(RealVector)",
        "org.apache.commons.math3.linear.CholeskyDecomposition.Solver#solve(RealVector)",
        "org.apache.commons.math3.exception.MathInternalError#MathInternalError()",
        "org.apache.commons.math3.optim.nonlinear.vector.jacobian.GaussNewtonOptimizer#checkParameters()",
        "org.apache.commons.math3.linear.QRDecomposition#getSolver()",
        "org.apache.commons.math3.linear.RealVector.unmodifiableRealVector(RealVector)$RealVector$1#toArray()",
        "org.apache.commons.math3.optim.nonlinear.vector.jacobian.AbstractLeastSquaresOptimizer#setCost(double)",
        "org.apache.commons.math3.linear.OpenMapRealMatrix#getEntry(int,int)",
        "org.apache.commons.math3.optim.nonlinear.vector.jacobian.AbstractLeastSquaresOptimizer#computeWeightedJacobian(double[])",
        "org.apache.commons.math3.linear.QRDecomposition.Solver#solve(RealVector)",
        "org.apache.commons.math3.optim.BaseOptimizer#getIterations()",
        "org.apache.commons.math3.exception.NullArgumentException#NullArgumentException()",
        "org.apache.commons.math3.optim.nonlinear.vector.jacobian.AbstractLeastSquaresOptimizer#computeResiduals(double[])",
        "org.apache.commons.math3.linear.BlockRealMatrix#BlockRealMatrix(double[][])",
        "org.apache.commons.math3.linear.Array2DRowRealMatrix#getEntry(int,int)",
        "org.apache.commons.math3.optim.nonlinear.vector.MultivariateVectorOptimizer#getTarget()",
        "org.apache.commons.math3.optim.PointVectorValuePair#PointVectorValuePair(double[],double[])",
        "org.apache.commons.math3.optim.nonlinear.vector.MultivariateVectorOptimizer#getWeight()",
        "org.apache.commons.math3.linear.RRQRDecomposition#getSolver()",
        "org.apache.commons.math3.optim.BaseOptimizer#incrementIterationCount()",
        "org.apache.commons.math3.linear.ArrayRealVector#toArray()"
    ],
    "org.apache.commons.math3.stat.regression.SimpleRegression#getSlopeConfidenceInterval()": ["org.apache.commons.math3.stat.regression.SimpleRegression#getSlopeConfidenceInterval(double)"],
    "org.apache.commons.math3.fraction.BigFractionFormat#parse(String,ParsePosition)": [
        "org.apache.commons.math3.fraction.BigFractionFormat#parseNextBigInteger(String,ParsePosition)",
        "org.apache.commons.math3.fraction.BigFraction#BigFraction(BigInteger)",
        "org.apache.commons.math3.fraction.BigFraction#BigFraction(BigInteger,BigInteger)",
        "org.apache.commons.math3.fraction.AbstractFormat.parseAndIgnoreWhitespace(String,ParsePosition)",
        "org.apache.commons.math3.fraction.AbstractFormat.parseNextCharacter(String,ParsePosition)"
    ],
    "org.apache.commons.math3.geometry.euclidean.threed.SphericalCoordinates#computeHessians()": [
        "org.apache.commons.math3.geometry.euclidean.threed.Vector3D#getX()",
        "org.apache.commons.math3.geometry.euclidean.threed.Vector3D#getZ()",
        "org.apache.commons.math3.geometry.euclidean.threed.Vector3D#getY()",
        "org.apache.commons.math3.util.FastMath.sqrt(double)"
    ],
    "org.apache.commons.math3.dfp.DfpField.computeLn(Dfp,Dfp,Dfp)": [
        "org.apache.commons.math3.dfp.Dfp#Dfp(DfpField,int)",
        "org.apache.commons.math3.dfp.Dfp#divide(Dfp)",
        "org.apache.commons.math3.dfp.Dfp#multiply(Dfp)",
        "org.apache.commons.math3.dfp.Dfp#divide(int)",
        "org.apache.commons.math3.dfp.Dfp#add(Dfp)",
        "org.apache.commons.math3.dfp.Dfp#Dfp(Dfp)",
        "org.apache.commons.math3.dfp.Dfp#equals(Object)",
        "org.apache.commons.math3.dfp.Dfp#getField()"
    ],
    "org.apache.commons.math3.linear.LUDecomposition#getL()": [
        "org.apache.commons.math3.linear.BlockRealMatrix#setEntry(int,int,double)",
        "org.apache.commons.math3.linear.OpenMapRealMatrix#setEntry(int,int,double)",
        "org.apache.commons.math3.linear.MatrixUtils.createRealMatrix(int,int)",
        "org.apache.commons.math3.linear.Array2DRowRealMatrix#setEntry(int,int,double)",
        "org.apache.commons.math3.linear.DiagonalMatrix#setEntry(int,int,double)"
    ],
    "org.apache.commons.math3.linear.BlockFieldMatrix#getRowMatrix(int)": [
        "org.apache.commons.math3.linear.BlockFieldMatrix#blockWidth(int)",
        "org.apache.commons.math3.linear.AbstractFieldMatrix#getField()",
        "org.apache.commons.math3.linear.BlockFieldMatrix.<staticinit>()",
        "org.apache.commons.math3.linear.BlockFieldMatrix#BlockFieldMatrix(Field<T extends FieldElement>,int,int)",
        "org.apache.commons.math3.linear.AbstractFieldMatrix#checkRowIndex(int)"
    ],
    "org.apache.commons.math3.exception.InsufficientDataException#InsufficientDataException(Localizable,Object[]...)": [
        "org.apache.commons.math3.exception.InsufficientDataException.<init>()",
        "org.apache.commons.math3.exception.MathIllegalArgumentException#MathIllegalArgumentException(Localizable,Object[]...)"
    ],
    "org.apache.commons.math3.optimization.fitting.GaussianFitter#fit(double[])$Parametric$1#gradient(double,double[]...)": ["org.apache.commons.math3.analysis.function.Gaussian.Parametric#gradient(double,double[]...)"],
    "org.apache.commons.math3.util.OpenIntToFieldHashMap.Iterator#Iterator()": [
        "org.apache.commons.math3.util.OpenIntToFieldHashMap.Iterator.<init>()",
        "org.apache.commons.math3.util.OpenIntToFieldHashMap.Iterator#advance()"
    ],
    "org.apache.commons.math3.util.OpenIntToDoubleHashMap#get(int)": [
        "org.apache.commons.math3.util.OpenIntToDoubleHashMap#containsKey(int,int)",
        "org.apache.commons.math3.util.OpenIntToDoubleHashMap.<staticinit>()",
        "org.apache.commons.math3.util.OpenIntToDoubleHashMap.probe(int,int)",
        "org.apache.commons.math3.util.OpenIntToDoubleHashMap.perturb(int)",
        "org.apache.commons.math3.util.OpenIntToDoubleHashMap.hashOf(int)"
    ],
    "org.apache.commons.math3.distribution.MixtureMultivariateRealDistribution#MixtureMultivariateRealDistribution(List<Pair<Double, T extends MultivariateRealDistribution>>)": [
        "org.apache.commons.math3.distribution.MixtureMultivariateRealDistribution#MixtureMultivariateRealDistribution(RandomGenerator,List<Pair<Double, T extends MultivariateRealDistribution>>)",
        "org.apache.commons.math3.random.Well19937c#Well19937c()"
    ],
    "org.apache.commons.math3.random.EmpiricalDistribution#EmpiricalDistribution(RandomDataImpl)": [
        "org.apache.commons.math3.random.EmpiricalDistribution#EmpiricalDistribution(int,RandomDataImpl)",
        "org.apache.commons.math3.random.EmpiricalDistribution.<staticinit>()"
    ],
    "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.AbstractSimplex#AbstractSimplex(double[][])": [
        "org.apache.commons.math3.exception.DimensionMismatchException#DimensionMismatchException(int,int)",
        "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.AbstractSimplex.<init>()",
        "org.apache.commons.math3.exception.util.LocalizedFormats.<staticinit>()"
    ],
    "org.apache.commons.math3.optimization.direct.MultiDirectionalSimplex#MultiDirectionalSimplex(int)": ["org.apache.commons.math3.optimization.direct.MultiDirectionalSimplex#MultiDirectionalSimplex(int,double)"],
    "org.apache.commons.math3.geometry.spherical.twod.Vertex#setOutgoing(Edge)": [
        "org.apache.commons.math3.geometry.spherical.twod.Edge#getCircle()",
        "org.apache.commons.math3.geometry.spherical.twod.Vertex#bindWith(Circle)"
    ],
    "org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D#Euclidean3D()": ["org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D.<init>()"],
    "org.apache.commons.math3.dfp.Dfp#getOne()": ["org.apache.commons.math3.dfp.DfpField#getOne()"],
    "org.apache.commons.math3.geometry.euclidean.twod.Vector2D#toString()": [
        "org.apache.commons.math3.geometry.VectorFormat#format(Vector<S extends Space>)",
        "org.apache.commons.math3.geometry.euclidean.twod.Vector2DFormat.getInstance()"
    ],
    "org.apache.commons.math3.ml.neuralnet.sofm.KohonenUpdateAction#KohonenUpdateAction(DistanceMeasure,LearningFactorFunction,NeighbourhoodSizeFunction)": ["org.apache.commons.math3.ml.neuralnet.sofm.KohonenUpdateAction.<init>()"],
    "org.apache.commons.math3.geometry.euclidean.threed.Line#intersection(Line)": [
        "org.apache.commons.math3.geometry.euclidean.threed.Line#closestPoint(Line)",
        "org.apache.commons.math3.geometry.euclidean.threed.Line#contains(Vector3D)"
    ],
    "org.apache.commons.math3.stat.inference.ChiSquareTest#chiSquareTest(double[],long[])": [
        "org.apache.commons.math3.stat.inference.ChiSquareTest#chiSquare(double[],long[])",
        "org.apache.commons.math3.distribution.ChiSquaredDistribution#ChiSquaredDistribution(double,double)",
        "org.apache.commons.math3.distribution.ChiSquaredDistribution#cumulativeProbability(double)"
    ],
    "org.apache.commons.math3.primes.SmallPrimes.smallTrialDivision(int,List<Integer>)": ["org.apache.commons.math3.primes.SmallPrimes.<staticinit>()"],
    "org.apache.commons.math3.linear.SingularValueDecomposition#getSolver()": [
        "org.apache.commons.math3.linear.SingularValueDecomposition#getV()",
        "org.apache.commons.math3.linear.SingularValueDecomposition#getRank()",
        "org.apache.commons.math3.linear.SingularValueDecomposition#getUT()",
        "org.apache.commons.math3.linear.SingularValueDecomposition.Solver#Solver(double[],RealMatrix,RealMatrix,boolean,double)"
    ],
    "org.apache.commons.math3.linear.ArrayFieldVector#ArrayFieldVector(T extends FieldElement[],T extends FieldElement[])": [
        "org.apache.commons.math3.util.MathUtils.checkNotNull(Object)",
        "org.apache.commons.math3.linear.ArrayFieldVector.<init>()",
        "org.apache.commons.math3.util.MathArrays.buildArray(Field<T>,int)",
        "org.apache.commons.math3.exception.util.LocalizedFormats.<staticinit>()"
    ],
    "org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile.Markers#estimate(int)": [
        "org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile.Marker#estimate()",
        "org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile.Markers.<staticinit>()"
    ],
    "org.apache.commons.math3.optim.nonlinear.scalar.LeastSquaresConverter#LeastSquaresConverter(MultivariateVectorFunction,double[],double[])": [
        "org.apache.commons.math3.exception.DimensionMismatchException#DimensionMismatchException(int,int)",
        "org.apache.commons.math3.optim.nonlinear.scalar.LeastSquaresConverter.<init>()"
    ],
    "org.apache.commons.math3.geometry.euclidean.twod.Vector2D.distance(Vector2D,Vector2D)": ["org.apache.commons.math3.geometry.euclidean.twod.Vector2D#distance(Vector<Euclidean2D>)"],
    "org.apache.commons.math3.linear.RealVector.unmodifiableRealVector(RealVector)$Iterator$1$Iterator$1#sparseIterator()$Iterator$1.<init>()": ["org.apache.commons.math3.linear.RealVector.unmodifiableRealVector(RealVector).UnmodifiableEntry.UnmodifiableEntry.<init>()"],
    "org.apache.commons.math3.analysis.polynomials.PolynomialFunction#value(DerivativeStructure)": [
        "org.apache.commons.math3.util.MathUtils.checkNotNull(Object)",
        "org.apache.commons.math3.analysis.differentiation.DerivativeStructure#add(double)",
        "org.apache.commons.math3.analysis.differentiation.DerivativeStructure#DerivativeStructure(int,int,double[]...)",
        "org.apache.commons.math3.exception.util.LocalizedFormats.<staticinit>()",
        "org.apache.commons.math3.analysis.differentiation.DerivativeStructure#getOrder()",
        "org.apache.commons.math3.exception.NoDataException#NoDataException(Localizable)",
        "org.apache.commons.math3.analysis.differentiation.DerivativeStructure#multiply(DerivativeStructure)",
        "org.apache.commons.math3.analysis.differentiation.DerivativeStructure#getFreeParameters()"
    ],
    "org.apache.commons.math3.ml.clustering.FuzzyKMeansClusterer#getMembershipMatrix()": [
        "org.apache.commons.math3.linear.MatrixUtils.createRealMatrix(double[][])",
        "org.apache.commons.math3.exception.MathIllegalStateException#MathIllegalStateException()"
    ],
    "org.apache.commons.math3.ode.nonstiff.DormandPrince853FieldStepInterpolator#fraction(Field<T extends RealFieldElement>,double,double)": [
        "org.apache.commons.math3.analysis.differentiation.DerivativeStructure#add(double)",
        "org.apache.commons.math3.util.BigRealField#getZero()",
        "org.apache.commons.math3.analysis.differentiation.SparseGradient#getField()$Field$1#getZero()",
        "org.apache.commons.math3.analysis.differentiation.DerivativeStructure#getField()$Field$1#getZero()",
        "org.apache.commons.math3.fraction.FractionField#getZero()",
        "org.apache.commons.math3.util.Decimal64Field#getZero()",
        "org.apache.commons.math3.dfp.DfpField#getZero()",
        "org.apache.commons.math3.complex.ComplexField#getZero()",
        "org.apache.commons.math3.fraction.BigFractionField#getZero()",
        "org.apache.commons.math3.util.Decimal64#add(double)",
        "org.apache.commons.math3.analysis.differentiation.SparseGradient#add(double)",
        "org.apache.commons.math3.dfp.Dfp#add(double)"
    ],
    "org.apache.commons.math3.geometry.spherical.oned.SubLimitAngle#buildNew(Hyperplane<Sphere1D>,Region<Sphere1D>)": ["org.apache.commons.math3.geometry.spherical.oned.SubLimitAngle#SubLimitAngle(Hyperplane<Sphere1D>,Region<Sphere1D>)"],
    "org.apache.commons.math3.optimization.linear.Relationship#oppositeRelationship()": ["org.apache.commons.math3.optimization.linear.Relationship.<staticinit>()"],
    "org.apache.commons.math3.fitting.GaussianFitter.ParameterGuesser#findMaxY(WeightedObservedPoint[])": ["org.apache.commons.math3.fitting.WeightedObservedPoint#getY()"],
    "org.apache.commons.math3.analysis.solvers.AbstractPolynomialSolver#AbstractPolynomialSolver(double,double)": [
        "org.apache.commons.math3.analysis.solvers.AbstractPolynomialSolver.<init>()",
        "org.apache.commons.math3.analysis.solvers.BaseAbstractUnivariateSolver#BaseAbstractUnivariateSolver(double,double)"
    ],
    "org.apache.commons.math3.analysis.differentiation.SparseGradient#getField()$Field$1#getZero()": ["org.apache.commons.math3.analysis.differentiation.SparseGradient.createConstant(double)"],
    "org.apache.commons.math3.linear.BlockRealMatrix#scalarAdd(double)": ["org.apache.commons.math3.linear.BlockRealMatrix#BlockRealMatrix(int,int)"],
    "org.apache.commons.math3.linear.SparseFieldVector#append(SparseFieldVector<T extends FieldElement>)": [
        "org.apache.commons.math3.util.OpenIntToFieldHashMap.Iterator#hasNext()",
        "org.apache.commons.math3.util.OpenIntToFieldHashMap.Iterator#key()",
        "org.apache.commons.math3.util.OpenIntToFieldHashMap.Iterator#value()",
        "org.apache.commons.math3.linear.SparseFieldVector#setEntry(int,T extends FieldElement)",
        "org.apache.commons.math3.linear.SparseFieldVector#getDimension()",
        "org.apache.commons.math3.util.OpenIntToFieldHashMap#iterator()",
        "org.apache.commons.math3.linear.SparseFieldVector#SparseFieldVector(SparseFieldVector<T extends FieldElement>,int)",
        "org.apache.commons.math3.util.OpenIntToFieldHashMap.Iterator#advance()"
    ],
    "org.apache.commons.math3.geometry.euclidean.twod.hull.MonotoneChain#MonotoneChain(boolean)": [
        "org.apache.commons.math3.geometry.euclidean.twod.hull.MonotoneChain.<init>()",
        "org.apache.commons.math3.geometry.euclidean.twod.hull.AbstractConvexHullGenerator2D#AbstractConvexHullGenerator2D(boolean)"
    ],
    "org.apache.commons.math3.fitting.leastsquares.GaussNewtonOptimizer#GaussNewtonOptimizer()": [
        "org.apache.commons.math3.fitting.leastsquares.GaussNewtonOptimizer.Decomposition.<staticinit>()",
        "org.apache.commons.math3.fitting.leastsquares.GaussNewtonOptimizer#GaussNewtonOptimizer(Decomposition)"
    ],
    "org.apache.commons.math3.util.MathArrays.distance1(int[],int[])": [
        "org.apache.commons.math3.util.MathArrays.checkEqualLength(int[],int[])",
        "org.apache.commons.math3.util.FastMath.abs(int)"
    ],
    "org.apache.commons.math3.ode.nonstiff.HighamHall54FieldStepInterpolator#computeInterpolatedStateAndDerivatives(FieldEquationsMapper<T extends RealFieldElement>,T extends RealFieldElement,T extends RealFieldElement,T extends RealFieldElement,T extends RealFieldElement)": [
        "org.apache.commons.math3.ode.nonstiff.RungeKuttaFieldStepInterpolator#currentStateLinearCombination(T extends RealFieldElement[]...)",
        "org.apache.commons.math3.ode.nonstiff.RungeKuttaFieldStepInterpolator#previousStateLinearCombination(T extends RealFieldElement[]...)",
        "org.apache.commons.math3.ode.nonstiff.RungeKuttaFieldStepInterpolator#derivativeLinearCombination(T extends RealFieldElement[]...)",
        "org.apache.commons.math3.ode.sampling.AbstractFieldStepInterpolator#getGlobalPreviousState()",
        "org.apache.commons.math3.ode.FieldODEStateAndDerivative#FieldODEStateAndDerivative(T extends RealFieldElement,T extends RealFieldElement[],T extends RealFieldElement[])"
    ],
    "org.apache.commons.math3.stat.ranking.NaturalRanking#NaturalRanking(NaNStrategy)": [
        "org.apache.commons.math3.stat.ranking.NaturalRanking.<init>()",
        "org.apache.commons.math3.stat.ranking.NaturalRanking.<staticinit>()"
    ],
    "org.apache.commons.math3.optimization.InitialGuess#InitialGuess(double[])": ["org.apache.commons.math3.optimization.InitialGuess.<init>()"],
    "org.apache.commons.math3.optim.linear.SolutionCallback#getSolution()": ["org.apache.commons.math3.optim.linear.SimplexTableau#getSolution()"],
    "org.apache.commons.math3.ode.sampling.StepNormalizer#doNormalizedStep(boolean)": ["org.apache.commons.math3.ode.sampling.StepNormalizerBounds#firstIncluded()"],
    "org.apache.commons.math3.linear.BlockFieldMatrix#BlockFieldMatrix(Field<T extends FieldElement>,int,int)": [
        "org.apache.commons.math3.linear.AbstractFieldMatrix#AbstractFieldMatrix(Field<T extends FieldElement>,int,int)",
        "org.apache.commons.math3.linear.BlockFieldMatrix.createBlocksLayout(Field<T extends FieldElement>,int,int)",
        "org.apache.commons.math3.linear.BlockFieldMatrix.<staticinit>()",
        "org.apache.commons.math3.linear.BlockFieldMatrix.<init>()"
    ],
    "org.apache.commons.math3.util.ArithmeticUtils.lcm(long,long)": [
        "org.apache.commons.math3.util.FastMath.abs(long)",
        "org.apache.commons.math3.util.ArithmeticUtils.mulAndCheck(long,long)",
        "org.apache.commons.math3.util.ArithmeticUtils.gcd(long,long)",
        "org.apache.commons.math3.exception.util.LocalizedFormats.<staticinit>()"
    ],
    "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer.repmat(RealMatrix,int,int)": [
        "org.apache.commons.math3.linear.DiagonalMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.Array2DRowRealMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.BlockFieldMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.SparseFieldMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.DiagonalMatrix#getEntry(int,int)",
        "org.apache.commons.math3.linear.OpenMapRealMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.OpenMapRealMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.DiagonalMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.OpenMapRealMatrix#getEntry(int,int)",
        "org.apache.commons.math3.linear.Array2DRowRealMatrix#Array2DRowRealMatrix(double[][],boolean)",
        "org.apache.commons.math3.linear.BlockRealMatrix#getEntry(int,int)",
        "org.apache.commons.math3.linear.Array2DRowFieldMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.SparseFieldMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.BlockFieldMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.Array2DRowRealMatrix#getEntry(int,int)",
        "org.apache.commons.math3.linear.BlockRealMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.Array2DRowRealMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.Array2DRowFieldMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.BlockRealMatrix#getColumnDimension()"
    ],
    "org.apache.commons.math3.analysis.solvers.BrentSolver#BrentSolver(double,double)": [
        "org.apache.commons.math3.analysis.solvers.BrentSolver.<init>()",
        "org.apache.commons.math3.analysis.solvers.AbstractUnivariateSolver#AbstractUnivariateSolver(double,double)"
    ],
    "org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet#filterSpuriousVertices(List<Segment>)": [
        "org.apache.commons.math3.util.Precision.equals(double,double,double)",
        "org.apache.commons.math3.util.Precision.<staticinit>()",
        "org.apache.commons.math3.geometry.euclidean.twod.Segment#getStart()",
        "org.apache.commons.math3.geometry.euclidean.twod.Segment#Segment(Vector2D,Vector2D,Line)",
        "org.apache.commons.math3.geometry.euclidean.twod.Segment#getEnd()",
        "org.apache.commons.math3.geometry.euclidean.twod.Segment#getLine()",
        "org.apache.commons.math3.geometry.euclidean.twod.Line#getAngle()"
    ],
    "org.apache.commons.math3.geometry.spherical.oned.ArcsSet.buildTree(double,double,double)": [
        "org.apache.commons.math3.geometry.spherical.oned.LimitAngle#LimitAngle(S1Point,boolean,double)",
        "org.apache.commons.math3.geometry.partitioning.BSPTree#BSPTree(Object)",
        "org.apache.commons.math3.util.MathUtils.<staticinit>()",
        "org.apache.commons.math3.geometry.spherical.oned.LimitAngle#wholeHyperplane()",
        "org.apache.commons.math3.geometry.spherical.oned.S1Point#S1Point(double)",
        "org.apache.commons.math3.exception.util.LocalizedFormats.<staticinit>()",
        "org.apache.commons.math3.util.Precision.equals(double,double,int)",
        "org.apache.commons.math3.util.MathUtils.normalizeAngle(double,double)",
        "org.apache.commons.math3.geometry.partitioning.BSPTree#BSPTree(SubHyperplane<S extends Space>,BSPTree<S extends Space>,BSPTree<S extends Space>,Object)",
        "org.apache.commons.math3.util.FastMath.<staticinit>()"
    ],
    "org.apache.commons.math3.userguide.RealDistributionComparison.Display#Display()": [
        "org.apache.commons.math3.distribution.GammaDistribution#GammaDistribution(double,double)",
        "org.apache.commons.math3.distribution.WeibullDistribution#WeibullDistribution(double,double)",
        "org.apache.commons.math3.random.MersenneTwister#MersenneTwister(int)",
        "org.apache.commons.math3.userguide.RealDistributionComparison.Display.<init>()",
        "org.apache.commons.math3.distribution.ParetoDistribution#ParetoDistribution(double,double)",
        "org.apache.commons.math3.distribution.BetaDistribution#BetaDistribution(double,double)",
        "org.apache.commons.math3.userguide.ExampleUtils.ExampleFrame.<init>()",
        "org.apache.commons.math3.distribution.NormalDistribution#NormalDistribution(double,double)",
        "org.apache.commons.math3.distribution.LogNormalDistribution#LogNormalDistribution(double,double)",
        "org.apache.commons.math3.distribution.LevyDistribution#LevyDistribution(RandomGenerator,double,double)",
        "org.apache.commons.math3.distribution.FDistribution#FDistribution(double,double)",
        "org.apache.commons.math3.util.FastMath.sqrt(double)",
        "org.apache.commons.math3.distribution.TDistribution#TDistribution(double)",
        "org.apache.commons.math3.distribution.NormalDistribution#NormalDistribution()",
        "org.apache.commons.math3.distribution.ExponentialDistribution#ExponentialDistribution(double)",
        "org.apache.commons.math3.distribution.ChiSquaredDistribution#ChiSquaredDistribution(double)",
        "org.apache.commons.math3.distribution.CauchyDistribution#CauchyDistribution(double,double)"
    ],
    "org.apache.commons.math3.stat.descriptive.SummaryStatistics#checkEmpty()": ["org.apache.commons.math3.exception.util.LocalizedFormats.<staticinit>()"],
    "org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D#FieldVector3D(T extends RealFieldElement,T extends RealFieldElement)": ["org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D.<init>()"],
    "org.apache.commons.math3.geometry.euclidean.twod.Vector2D#subtract(double,Vector<Euclidean2D>)": [
        "org.apache.commons.math3.geometry.euclidean.twod.Vector2D#getY()",
        "org.apache.commons.math3.geometry.euclidean.twod.Vector2D#getX()",
        "org.apache.commons.math3.geometry.euclidean.twod.Vector2D#Vector2D(double,double)"
    ],
    "org.apache.commons.math3.linear.EigenDecomposition#getVT()": [
        "org.apache.commons.math3.linear.AbstractRealMatrix#setRowVector(int,RealVector)",
        "org.apache.commons.math3.linear.MatrixUtils.createRealMatrix(int,int)",
        "org.apache.commons.math3.linear.BlockRealMatrix#setRowVector(int,RealVector)"
    ],
    "org.apache.commons.math3.dfp.Dfp#linearCombination(Dfp,Dfp,Dfp,Dfp)": [
        "org.apache.commons.math3.dfp.Dfp#add(Dfp)",
        "org.apache.commons.math3.dfp.Dfp#multiply(Dfp)"
    ],
    "org.apache.commons.math3.analysis.interpolation.MicrosphereProjectionInterpolator#MicrosphereProjectionInterpolator(int,int,double,double,double,double,boolean,double)": [
        "org.apache.commons.math3.random.UnitSphereRandomVectorGenerator#UnitSphereRandomVectorGenerator(int)",
        "org.apache.commons.math3.analysis.interpolation.MicrosphereProjectionInterpolator#MicrosphereProjectionInterpolator(InterpolatingMicrosphere,double,boolean,double)",
        "org.apache.commons.math3.analysis.interpolation.InterpolatingMicrosphere#InterpolatingMicrosphere(int,int,double,double,double,UnitSphereRandomVectorGenerator)"
    ],
    "org.apache.commons.math3.stat.ranking.NaturalRanking.<staticinit>()": [
        "org.apache.commons.math3.stat.ranking.TiesStrategy.<staticinit>()",
        "org.apache.commons.math3.stat.ranking.NaNStrategy.<staticinit>()"
    ],
    "org.apache.commons.math3.util.ArithmeticUtils.addAndCheck(long,long)": [
        "org.apache.commons.math3.util.ArithmeticUtils.addAndCheck(long,long,Localizable)",
        "org.apache.commons.math3.exception.util.LocalizedFormats.<staticinit>()"
    ],
    "org.apache.commons.math3.analysis.interpolation.MicrosphereProjectionInterpolator#interpolate(double[][],double[])": [
        "org.apache.commons.math3.exception.DimensionMismatchException#DimensionMismatchException(int,int)",
        "org.apache.commons.math3.exception.NullArgumentException#NullArgumentException()",
        "org.apache.commons.math3.analysis.interpolation.MicrosphereProjectionInterpolator#interpolate(double[][],double[])$MultivariateFunction$1.<init>()",
        "org.apache.commons.math3.analysis.interpolation.InterpolatingMicrosphere#copy()",
        "org.apache.commons.math3.exception.NoDataException#NoDataException()",
        "org.apache.commons.math3.analysis.interpolation.InterpolatingMicrosphere#getDimension()",
        "org.apache.commons.math3.analysis.interpolation.InterpolatingMicrosphere2D#copy()"
    ],
    "org.apache.commons.math3.linear.CholeskyDecomposition#getL()": [
        "org.apache.commons.math3.linear.CholeskyDecomposition#getLT()",
        "org.apache.commons.math3.linear.BlockRealMatrix#transpose()",
        "org.apache.commons.math3.linear.AbstractRealMatrix#transpose()"
    ],
    "org.apache.commons.math3.geometry.euclidean.threed.Plane#getOffset(Plane)": ["org.apache.commons.math3.geometry.euclidean.threed.Plane#sameOrientationAs(Hyperplane<Euclidean3D>)"],
    "org.apache.commons.math3.geometry.euclidean.threed.FieldRotation.applyInverseTo(Rotation,FieldRotation<T extends RealFieldElement>)": [
        "org.apache.commons.math3.geometry.euclidean.threed.Rotation#getQ3()",
        "org.apache.commons.math3.geometry.euclidean.threed.Rotation#getQ2()",
        "org.apache.commons.math3.geometry.euclidean.threed.Rotation#getQ1()",
        "org.apache.commons.math3.geometry.euclidean.threed.Rotation#getQ0()",
        "org.apache.commons.math3.geometry.euclidean.threed.FieldRotation#FieldRotation(T extends RealFieldElement,T extends RealFieldElement,T extends RealFieldElement,T extends RealFieldElement,boolean)"
    ],
    "org.apache.commons.math3.optim.linear.LinearObjectiveFunction#equals(Object)": [
        "org.apache.commons.math3.linear.OpenMapRealVector#equals(Object)",
        "org.apache.commons.math3.linear.ArrayRealVector#equals(Object)",
        "org.apache.commons.math3.linear.RealVector#equals(Object)"
    ],
    "org.apache.commons.math3.fitting.leastsquares.GaussNewtonOptimizer#GaussNewtonOptimizer(Decomposition)": ["org.apache.commons.math3.fitting.leastsquares.GaussNewtonOptimizer.<init>()"],
    "org.apache.commons.math3.geometry.euclidean.twod.Vector2D#isInfinite()": ["org.apache.commons.math3.geometry.euclidean.twod.Vector2D#isNaN()"],
    "org.apache.commons.math3.stat.descriptive.moment.StandardDeviation#evaluate(double[],double)": [
        "org.apache.commons.math3.stat.descriptive.moment.Variance#evaluate(double[],double)",
        "org.apache.commons.math3.util.FastMath.sqrt(double)"
    ],
    "org.apache.commons.math3.dfp.Dfp#hashCode()": ["org.apache.commons.math3.dfp.Dfp#isZero()"],
    "org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D#readResolve()": ["org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D.LazyHolder.<staticinit>()"],
    "org.apache.commons.math3.ode.nonstiff.AdaptiveStepsizeFieldIntegrator#resetInternalState()": [
        "org.apache.commons.math3.ode.AbstractFieldIntegrator#setStepSize(T extends RealFieldElement)",
        "org.apache.commons.math3.ode.AbstractFieldIntegrator#setStepStart(FieldODEStateAndDerivative<T extends RealFieldElement>)"
    ],
    "org.apache.commons.math3.optimization.linear.SimplexTableau#getConstraintTypeCounts(Relationship)": ["org.apache.commons.math3.optimization.linear.LinearConstraint#getRelationship()"],
    "org.apache.commons.math3.analysis.FunctionUtils.fix1stArgument(BivariateFunction,double)$UnivariateFunction$1#value(double)": [
        "org.apache.commons.math3.analysis.interpolation.BicubicFunction#value(double,double)",
        "org.apache.commons.math3.analysis.interpolation.BicubicSplineFunction#BicubicSplineFunction(double[],boolean)$BivariateFunction$3#value(double,double)",
        "org.apache.commons.math3.analysis.interpolation.BicubicInterpolatingFunction#value(double,double)",
        "org.apache.commons.math3.analysis.interpolation.BicubicSplineFunction#BicubicSplineFunction(double[],boolean)$BivariateFunction$4#value(double,double)",
        "org.apache.commons.math3.analysis.interpolation.PiecewiseBicubicSplineInterpolatingFunction#value(double,double)",
        "org.apache.commons.math3.analysis.function.Multiply#value(double,double)",
        "org.apache.commons.math3.analysis.function.Max#value(double,double)",
        "org.apache.commons.math3.analysis.function.Subtract#value(double,double)",
        "org.apache.commons.math3.analysis.function.Pow#value(double,double)",
        "org.apache.commons.math3.analysis.interpolation.BicubicSplineInterpolatingFunction#value(double,double)",
        "org.apache.commons.math3.analysis.interpolation.BicubicSplineFunction#BicubicSplineFunction(double[],boolean)$BivariateFunction$5#value(double,double)",
        "org.apache.commons.math3.analysis.function.Divide#value(double,double)",
        "org.apache.commons.math3.analysis.interpolation.BicubicSplineFunction#BicubicSplineFunction(double[],boolean)$BivariateFunction$1#value(double,double)",
        "org.apache.commons.math3.analysis.function.Add#value(double,double)",
        "org.apache.commons.math3.analysis.interpolation.BicubicSplineFunction#value(double,double)",
        "org.apache.commons.math3.analysis.function.Min#value(double,double)",
        "org.apache.commons.math3.analysis.interpolation.BicubicSplineFunction#BicubicSplineFunction(double[],boolean)$BivariateFunction$2#value(double,double)",
        "org.apache.commons.math3.analysis.function.Atan2#value(double,double)"
    ],
    "org.apache.commons.math3.geometry.spherical.twod.SphericalPolygonsSet#SphericalPolygonsSet(Collection<SubHyperplane<Sphere2D>>,double)": [
        "org.apache.commons.math3.geometry.partitioning.AbstractRegion#AbstractRegion(Collection<SubHyperplane<S extends Space>>,double)",
        "org.apache.commons.math3.geometry.spherical.twod.SphericalPolygonsSet.<init>()"
    ],
    "org.apache.commons.math3.linear.AbstractRealMatrix#walkInColumnOrder(RealMatrixChangingVisitor,int,int,int,int)": [
        "org.apache.commons.math3.linear.DiagonalMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.Array2DRowRealMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.DefaultRealMatrixChangingVisitor#end()",
        "org.apache.commons.math3.linear.Array2DRowRealMatrix#setEntry(int,int,double)",
        "org.apache.commons.math3.linear.DiagonalMatrix#getEntry(int,int)",
        "org.apache.commons.math3.linear.OpenMapRealMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.BlockRealMatrix#setEntry(int,int,double)",
        "org.apache.commons.math3.linear.OpenMapRealMatrix#setEntry(int,int,double)",
        "org.apache.commons.math3.linear.DefaultRealMatrixChangingVisitor#visit(int,int,double)",
        "org.apache.commons.math3.linear.OpenMapRealMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.DiagonalMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.OpenMapRealMatrix#getEntry(int,int)",
        "org.apache.commons.math3.linear.BlockRealMatrix#getEntry(int,int)",
        "org.apache.commons.math3.linear.AbstractRealMatrix#getSubMatrix(int[],int[])$DefaultRealMatrixChangingVisitor$1#visit(int,int,double)",
        "org.apache.commons.math3.linear.Array2DRowRealMatrix#getEntry(int,int)",
        "org.apache.commons.math3.linear.BlockRealMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.Array2DRowRealMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.MatrixUtils.checkSubMatrixIndex(AnyMatrix,int,int,int,int)",
        "org.apache.commons.math3.linear.BlockRealMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.DiagonalMatrix#setEntry(int,int,double)",
        "org.apache.commons.math3.linear.DefaultRealMatrixChangingVisitor#start(int,int,int,int,int,int)"
    ],
    "org.apache.commons.math3.util.Decimal64#divide(double)": ["org.apache.commons.math3.util.Decimal64#Decimal64(double)"],
    "org.apache.commons.math3.dfp.DfpField#newDfp(int)": ["org.apache.commons.math3.dfp.Dfp#Dfp(DfpField,int)"],
    "org.apache.commons.math3.ode.nonstiff.AdamsBashforthIntegrator#AdamsBashforthIntegrator(int,double,double,double,double)": [
        "org.apache.commons.math3.ode.nonstiff.AdamsIntegrator#AdamsIntegrator(String,int,int,double,double,double,double)",
        "org.apache.commons.math3.ode.nonstiff.AdamsBashforthIntegrator.<init>()",
        "org.apache.commons.math3.ode.nonstiff.AdamsBashforthIntegrator.<staticinit>()"
    ],
    "org.apache.commons.math3.stat.descriptive.moment.Mean#evaluate(double[],double[])": ["org.apache.commons.math3.stat.descriptive.moment.Mean#evaluate(double[],double[],int,int)"],
    "org.apache.commons.math3.random.Well19937a#Well19937a(long)": [
        "org.apache.commons.math3.random.Well19937a.<staticinit>()",
        "org.apache.commons.math3.random.AbstractWell#AbstractWell(int,int,int,int,long)",
        "org.apache.commons.math3.random.Well19937a.<init>()"
    ],
    "org.apache.commons.math3.stat.inference.WilcoxonSignedRankTest#ensureDataConformance(double[],double[])": [
        "org.apache.commons.math3.exception.DimensionMismatchException#DimensionMismatchException(int,int)",
        "org.apache.commons.math3.exception.NoDataException#NoDataException()",
        "org.apache.commons.math3.exception.NullArgumentException#NullArgumentException()"
    ],
    "org.apache.commons.math3.linear.BlockFieldMatrix#multiplyEntry(int,int,T extends FieldElement)": [
        "org.apache.commons.math3.linear.BlockFieldMatrix#blockWidth(int)",
        "org.apache.commons.math3.linear.AbstractFieldMatrix#checkColumnIndex(int)",
        "org.apache.commons.math3.linear.BlockFieldMatrix.<staticinit>()",
        "org.apache.commons.math3.linear.AbstractFieldMatrix#checkRowIndex(int)"
    ],
    "org.apache.commons.math3.stat.clustering.KMeansPlusPlusClusterer.getNearestCluster(Collection<Cluster<T extends Clusterable>>,T extends Clusterable)": ["org.apache.commons.math3.stat.clustering.Cluster#getCenter()"],
    "org.apache.commons.math3.complex.ComplexFormat#format(Complex)": ["org.apache.commons.math3.complex.ComplexFormat#format(Complex,StringBuffer,FieldPosition)"],
    "org.apache.commons.math3.complex.Quaternion#multiply(Quaternion)": ["org.apache.commons.math3.complex.Quaternion.multiply(Quaternion,Quaternion)"],
    "org.apache.commons.math3.stat.inference.TTest#tTest(StatisticalSummary,StatisticalSummary,double)": [
        "org.apache.commons.math3.stat.inference.TTest#checkSignificanceLevel(double)",
        "org.apache.commons.math3.stat.inference.TTest#tTest(StatisticalSummary,StatisticalSummary)"
    ],
    "org.apache.commons.math3.analysis.FunctionUtils.fix2ndArgument(BivariateFunction,double)": ["org.apache.commons.math3.analysis.FunctionUtils.fix2ndArgument(BivariateFunction,double)$UnivariateFunction$1.<init>()"],
    "org.apache.commons.math3.util.IterationManager#getIterations()": ["org.apache.commons.math3.util.IntegerSequence.Incrementor#getCount()"],
    "org.apache.commons.math3.linear.SparseFieldVector#walkInDefaultOrder(FieldVectorChangingVisitor<T extends FieldElement>)": [
        "org.apache.commons.math3.linear.SparseFieldVector#setEntry(int,T extends FieldElement)",
        "org.apache.commons.math3.linear.SparseFieldVector#getDimension()",
        "org.apache.commons.math3.linear.SparseFieldVector#getEntry(int)"
    ],
    "org.apache.commons.math3.util.Decimal64Field#getOne()": ["org.apache.commons.math3.util.Decimal64.<staticinit>()"],
    "org.apache.commons.math3.linear.RealVector.Entry#getValue()": [
        "org.apache.commons.math3.linear.OpenMapRealVector.OpenMapEntry#getIndex()",
        "org.apache.commons.math3.linear.ArrayRealVector#getEntry(int)",
        "org.apache.commons.math3.linear.OpenMapRealVector#getEntry(int)",
        "org.apache.commons.math3.linear.RealVector.Entry#getIndex()",
        "org.apache.commons.math3.linear.RealVector.unmodifiableRealVector(RealVector)$RealVector$1#getEntry(int)"
    ],
    "org.apache.commons.math3.stat.inference.TestUtils.oneWayAnovaPValue(Collection<double[]>)": [
        "org.apache.commons.math3.stat.inference.OneWayAnova#anovaPValue(Collection<double[]>)",
        "org.apache.commons.math3.stat.inference.TestUtils.<staticinit>()"
    ],
    "org.apache.commons.math3.ode.MultistepIntegrator#start(double,double[],double)$FirstOrderDifferentialEquations$1#getDimension()": [
        "org.apache.commons.math3.ode.ExpandableStatefulODE#getTotalDimension()",
        "org.apache.commons.math3.ode.AbstractIntegrator#getExpandable()"
    ],
    "org.apache.commons.math3.linear.AbstractFieldMatrix#getTrace()": [
        "org.apache.commons.math3.linear.SparseFieldMatrix#getEntry(int,int)",
        "org.apache.commons.math3.linear.BlockFieldMatrix#getColumnDimension()",
        "org.apache.commons.math3.util.BigRealField#getZero()",
        "org.apache.commons.math3.analysis.differentiation.SparseGradient#getField()$Field$1#getZero()",
        "org.apache.commons.math3.linear.SparseFieldMatrix#getRowDimension()",
        "org.apache.commons.math3.util.Decimal64Field#getZero()",
        "org.apache.commons.math3.dfp.DfpField#getZero()",
        "org.apache.commons.math3.linear.Array2DRowFieldMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.BlockFieldMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.SparseFieldMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.NonSquareMatrixException#NonSquareMatrixException(int,int)",
        "org.apache.commons.math3.analysis.differentiation.DerivativeStructure#getField()$Field$1#getZero()",
        "org.apache.commons.math3.fraction.FractionField#getZero()",
        "org.apache.commons.math3.linear.Array2DRowFieldMatrix#getRowDimension()",
        "org.apache.commons.math3.complex.ComplexField#getZero()",
        "org.apache.commons.math3.linear.Array2DRowFieldMatrix#getEntry(int,int)",
        "org.apache.commons.math3.fraction.BigFractionField#getZero()",
        "org.apache.commons.math3.linear.BlockFieldMatrix#getEntry(int,int)"
    ],
    "org.apache.commons.math3.optimization.fitting.CurveFitter.TheoreticalValuesFunction#TheoreticalValuesFunction(ParametricUnivariateFunction)": ["org.apache.commons.math3.optimization.fitting.CurveFitter.TheoreticalValuesFunction.<init>()"],
    "org.apache.commons.math3.linear.SparseFieldMatrix#SparseFieldMatrix(FieldMatrix<T extends FieldElement>)": [
        "org.apache.commons.math3.linear.DiagonalMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.Array2DRowRealMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.SparseFieldMatrix#getEntry(int,int)",
        "org.apache.commons.math3.linear.BlockFieldMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.SparseFieldMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.OpenMapRealMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.SparseFieldMatrix#setEntry(int,int,T extends FieldElement)",
        "org.apache.commons.math3.linear.OpenMapRealMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.DiagonalMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.SparseFieldMatrix.<init>()",
        "org.apache.commons.math3.linear.Array2DRowFieldMatrix#getColumnDimension()",
        "org.apache.commons.math3.util.OpenIntToFieldHashMap#OpenIntToFieldHashMap(Field<T extends FieldElement>)",
        "org.apache.commons.math3.linear.SparseFieldMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.BlockFieldMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.BlockRealMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.AbstractFieldMatrix#getField()",
        "org.apache.commons.math3.linear.Array2DRowRealMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.Array2DRowFieldMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.AbstractFieldMatrix#AbstractFieldMatrix(Field<T extends FieldElement>,int,int)",
        "org.apache.commons.math3.linear.BlockRealMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.Array2DRowFieldMatrix#getEntry(int,int)",
        "org.apache.commons.math3.linear.BlockFieldMatrix#getEntry(int,int)"
    ],
    "org.apache.commons.math3.linear.OpenMapRealVector#mapAddToSelf(double)": [
        "org.apache.commons.math3.linear.OpenMapRealVector#getEntry(int)",
        "org.apache.commons.math3.linear.OpenMapRealVector#setEntry(int,double)"
    ],
    "org.apache.commons.math3.geometry.partitioning.RegionFactory#RegionFactory()": [
        "org.apache.commons.math3.geometry.partitioning.RegionFactory.<init>()",
        "org.apache.commons.math3.geometry.partitioning.RegionFactory.NodesCleaner.<init>()"
    ],
    "org.apache.commons.math3.ode.sampling.AbstractStepInterpolator#storeTime(double)": ["org.apache.commons.math3.ode.sampling.AbstractStepInterpolator#setInterpolatedTime(double)"],
    "org.apache.commons.math3.analysis.polynomials.PolynomialFunction#subtract(PolynomialFunction)": [
        "org.apache.commons.math3.util.FastMath.min(int,int)",
        "org.apache.commons.math3.util.FastMath.max(int,int)",
        "org.apache.commons.math3.analysis.polynomials.PolynomialFunction#PolynomialFunction(double[])"
    ],
    "org.apache.commons.math3.linear.RealVector#getMaxValue()": [
        "org.apache.commons.math3.linear.RealVector#getMaxIndex()",
        "org.apache.commons.math3.linear.ArrayRealVector#getEntry(int)",
        "org.apache.commons.math3.linear.OpenMapRealVector#getEntry(int)",
        "org.apache.commons.math3.linear.RealVector.unmodifiableRealVector(RealVector)$RealVector$1#getEntry(int)"
    ],
    "org.apache.commons.math3.ml.neuralnet.sofm.KohonenUpdateAction#update(Network,double[])": [
        "org.apache.commons.math3.ml.neuralnet.sofm.LearningFactorFunctionFactory.exponentialDecay(double,double,long)$LearningFactorFunction$1#value(long)",
        "org.apache.commons.math3.analysis.function.Gaussian#Gaussian(double,double,double)",
        "org.apache.commons.math3.ml.neuralnet.sofm.LearningFactorFunctionFactory.quasiSigmoidDecay(double,double,long)$LearningFactorFunction$1#value(long)",
        "org.apache.commons.math3.analysis.function.Gaussian#value(double)",
        "org.apache.commons.math3.ml.neuralnet.sofm.KohonenUpdateAction#updateNeighbouringNeuron(Neuron,double[],double)",
        "org.apache.commons.math3.ml.neuralnet.sofm.NeighbourhoodSizeFunctionFactory.quasiSigmoidDecay(double,double,long)$NeighbourhoodSizeFunction$1#value(long)",
        "org.apache.commons.math3.ml.neuralnet.sofm.KohonenUpdateAction#findAndUpdateBestNeuron(Network,double[],double)",
        "org.apache.commons.math3.ml.neuralnet.sofm.NeighbourhoodSizeFunctionFactory.exponentialDecay(double,double,long)$NeighbourhoodSizeFunction$1#value(long)",
        "org.apache.commons.math3.ml.neuralnet.Network#getNeighbours(Iterable<Neuron>,Iterable<Neuron>)"
    ],
    "org.apache.commons.math3.util.BigReal#BigReal(double,MathContext)": ["org.apache.commons.math3.util.BigReal.<init>()"],
    "org.apache.commons.math3.geometry.euclidean.threed.Rotation#Rotation(Vector3D,Vector3D)": [
        "org.apache.commons.math3.geometry.euclidean.threed.Vector3D#getNorm()",
        "org.apache.commons.math3.geometry.euclidean.threed.Vector3D#orthogonal()",
        "org.apache.commons.math3.geometry.euclidean.threed.Vector3D#crossProduct(Vector<Euclidean3D>)",
        "org.apache.commons.math3.geometry.euclidean.threed.Vector3D#getZ()",
        "org.apache.commons.math3.geometry.euclidean.threed.Vector3D#getY()",
        "org.apache.commons.math3.util.FastMath.sqrt(double)",
        "org.apache.commons.math3.exception.util.LocalizedFormats.<staticinit>()",
        "org.apache.commons.math3.geometry.euclidean.threed.Vector3D#getX()",
        "org.apache.commons.math3.geometry.euclidean.threed.Rotation.<init>()",
        "org.apache.commons.math3.geometry.euclidean.threed.Vector3D#dotProduct(Vector<Euclidean3D>)"
    ],
    "org.apache.commons.math3.analysis.differentiation.DerivativeStructure#copySign(DerivativeStructure)": ["org.apache.commons.math3.analysis.differentiation.DerivativeStructure#negate()"],
    "org.apache.commons.math3.stat.descriptive.summary.Product#Product(Product)": [
        "org.apache.commons.math3.stat.descriptive.AbstractStorelessUnivariateStatistic.<init>()",
        "org.apache.commons.math3.stat.descriptive.summary.Product.<init>()",
        "org.apache.commons.math3.stat.descriptive.summary.Product.copy(Product,Product)"
    ],
    "org.apache.commons.math3.complex.ComplexFormat#format(Complex,StringBuffer,FieldPosition)": [
        "org.apache.commons.math3.complex.ComplexFormat#formatImaginary(double,StringBuffer,FieldPosition)",
        "org.apache.commons.math3.complex.Complex#getReal()",
        "org.apache.commons.math3.util.CompositeFormat.formatDouble(double,NumberFormat,StringBuffer,FieldPosition)",
        "org.apache.commons.math3.complex.ComplexFormat#getRealFormat()",
        "org.apache.commons.math3.complex.ComplexFormat#getImaginaryCharacter()",
        "org.apache.commons.math3.complex.Complex#getImaginary()"
    ],
    "org.apache.commons.math3.geometry.partitioning.NodesSet#NodesSet()": ["org.apache.commons.math3.geometry.partitioning.NodesSet.<init>()"],
    "org.apache.commons.math3.linear.ArrayRealVector#getLInfNorm()": [
        "org.apache.commons.math3.util.FastMath.abs(double)",
        "org.apache.commons.math3.util.FastMath.max(double,double)"
    ],
    "org.apache.commons.math3.analysis.function.Cbrt#value(DerivativeStructure)": ["org.apache.commons.math3.analysis.differentiation.DerivativeStructure#cbrt()"],
    "org.apache.commons.math3.userguide.geometry.GeometryExample.Display#Display()$ActionListener$2#actionPerformed(ActionEvent)": [
        "org.apache.commons.math3.userguide.geometry.GeometryExample.Display#paintConvexHull()",
        "org.apache.commons.math3.userguide.geometry.GeometryExample.createCircle(int)"
    ],
    "org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D#FieldVector3D(T extends RealFieldElement,FieldVector3D<T extends RealFieldElement>,T extends RealFieldElement,FieldVector3D<T extends RealFieldElement>,T extends RealFieldElement,FieldVector3D<T extends RealFieldElement>)": [
        "org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D#getZ()",
        "org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D#getY()",
        "org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D.<init>()",
        "org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D#getX()"
    ],
    "org.apache.commons.math3.analysis.differentiation.SparseGradient#getField()": ["org.apache.commons.math3.analysis.differentiation.SparseGradient#getField()$Field$1.<init>()"],
    "org.apache.commons.math3.optim.nonlinear.vector.MultiStartMultivariateVectorOptimizer#MultiStartMultivariateVectorOptimizer(MultivariateVectorOptimizer,int,RandomVectorGenerator)": [
        "org.apache.commons.math3.optim.nonlinear.vector.MultiStartMultivariateVectorOptimizer.<init>()",
        "org.apache.commons.math3.optim.BaseMultiStartMultivariateOptimizer#BaseMultiStartMultivariateOptimizer(BaseMultivariateOptimizer<PAIR>,int,RandomVectorGenerator)"
    ],
    "org.apache.commons.math3.linear.SymmLQ.State#State(RealLinearOperator,RealLinearOperator,RealVector,boolean,double,double,boolean)": [
        "org.apache.commons.math3.linear.OpenMapRealVector#getDimension()",
        "org.apache.commons.math3.linear.ArrayRealVector#getDimension()",
        "org.apache.commons.math3.linear.ArrayRealVector#ArrayRealVector(int)",
        "org.apache.commons.math3.linear.JacobiPreconditioner#operate(RealVector)",
        "org.apache.commons.math3.linear.AbstractRealMatrix#operate(RealVector)",
        "org.apache.commons.math3.linear.RealVector.unmodifiableRealVector(RealVector)$RealVector$1#getDimension()",
        "org.apache.commons.math3.linear.JacobiPreconditioner#sqrt()$RealLinearOperator$1#operate(RealVector)",
        "org.apache.commons.math3.linear.SymmLQ.State.<init>()"
    ],
    "org.apache.commons.math3.stat.descriptive.moment.Skewness#getN()": ["org.apache.commons.math3.stat.descriptive.moment.FirstMoment#getN()"],
    "org.apache.commons.math3.stat.descriptive.AggregateSummaryStatistics#getN()": [
        "org.apache.commons.math3.stat.descriptive.SummaryStatistics#getN()",
        "org.apache.commons.math3.stat.descriptive.SynchronizedSummaryStatistics#getN()"
    ],
    "org.apache.commons.math3.distribution.NormalDistribution.<staticinit>()": ["org.apache.commons.math3.util.FastMath.sqrt(double)"],
    "org.apache.commons.math3.util.Incrementor.wrap(Incrementor)$Incrementor$1#resetCount()": [
        "org.apache.commons.math3.util.IntegerSequence.Incrementor#withStart(int)",
        "org.apache.commons.math3.util.Incrementor#resetCount()"
    ],
    "org.apache.commons.math3.linear.ArrayFieldVector#setEntry(int,T extends FieldElement)": ["org.apache.commons.math3.linear.ArrayFieldVector#checkIndex(int)"],
    "org.apache.commons.math3.linear.RealVector.unmodifiableRealVector(RealVector)$Iterator$1$Iterator$1#sparseIterator()$Iterator$1#remove()": ["org.apache.commons.math3.exception.MathUnsupportedOperationException#MathUnsupportedOperationException()"],
    "org.apache.commons.math3.util.BigReal#BigReal(String)": ["org.apache.commons.math3.util.BigReal.<init>()"],
    "org.apache.commons.math3.distribution.CauchyDistribution#CauchyDistribution()": ["org.apache.commons.math3.distribution.CauchyDistribution#CauchyDistribution(double,double)"],
    "org.apache.commons.math3.linear.OpenMapRealVector#getSparsity()": [
        "org.apache.commons.math3.linear.OpenMapRealVector#getDimension()",
        "org.apache.commons.math3.util.OpenIntToDoubleHashMap#size()"
    ],
    "org.apache.commons.math3.linear.OpenMapRealVector#OpenMapRealVector(int,int)": [
        "org.apache.commons.math3.linear.OpenMapRealVector#OpenMapRealVector(int,int,double)",
        "org.apache.commons.math3.linear.OpenMapRealVector.<staticinit>()"
    ],
    "org.apache.commons.math3.dfp.DfpMath.expInternal(Dfp)": [
        "org.apache.commons.math3.dfp.Dfp#add(Dfp)",
        "org.apache.commons.math3.dfp.Dfp#Dfp(Dfp)",
        "org.apache.commons.math3.dfp.Dfp#getOne()",
        "org.apache.commons.math3.dfp.Dfp#equals(Object)",
        "org.apache.commons.math3.dfp.Dfp#divide(int)",
        "org.apache.commons.math3.dfp.Dfp#multiply(Dfp)"
    ],
    "org.apache.commons.math3.transform.FastFourierTransformer.MultiDimensionalComplexMatrix#clone()": [
        "org.apache.commons.math3.transform.FastFourierTransformer.MultiDimensionalComplexMatrix#clone(MultiDimensionalComplexMatrix)",
        "org.apache.commons.math3.transform.FastFourierTransformer.MultiDimensionalComplexMatrix#MultiDimensionalComplexMatrix(Object)"
    ],
    "org.apache.commons.math3.random.RandomDataGenerator#RandomDataGenerator(RandomGenerator)": ["org.apache.commons.math3.random.RandomDataGenerator.<init>()"],
    "org.apache.commons.math3.optimization.linear.LinearConstraint#writeObject(ObjectOutputStream)": ["org.apache.commons.math3.linear.MatrixUtils.serializeRealVector(RealVector,ObjectOutputStream)"],
    "org.apache.commons.math3.util.MathArrays.natural(int)": ["org.apache.commons.math3.util.MathArrays.sequence(int,int,int)"],
    "org.apache.commons.math3.stat.descriptive.moment.SecondMoment#copy()": [
        "org.apache.commons.math3.stat.descriptive.moment.SecondMoment#SecondMoment()",
        "org.apache.commons.math3.stat.descriptive.moment.SecondMoment.copy(SecondMoment,SecondMoment)"
    ],
    "org.apache.commons.math3.optimization.direct.MultivariateFunctionMappingAdapter.LowerUpperBoundMapper#LowerUpperBoundMapper(double,double)": [
        "org.apache.commons.math3.analysis.function.Sigmoid#Sigmoid(double,double)",
        "org.apache.commons.math3.analysis.function.Logit#Logit(double,double)",
        "org.apache.commons.math3.optimization.direct.MultivariateFunctionMappingAdapter.LowerUpperBoundMapper.<init>()"
    ],
    "org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizer#doOptimize()": [
        "org.apache.commons.math3.optim.BaseOptimizer#getConvergenceChecker()",
        "org.apache.commons.math3.util.FastMath.max(double,double)",
        "org.apache.commons.math3.util.FastMath.min(double,double)",
        "org.apache.commons.math3.exception.util.LocalizedFormats.<staticinit>()",
        "org.apache.commons.math3.optim.nonlinear.vector.MultivariateVectorOptimizer#computeObjectiveValue(double[])",
        "org.apache.commons.math3.linear.AbstractRealMatrix#operate(double[])",
        "org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizer#determineLMParameter(double[],double,double[],double[],double[],double[])",
        "org.apache.commons.math3.util.FastMath.abs(double)",
        "org.apache.commons.math3.optim.BaseMultivariateOptimizer#getStartPoint()",
        "org.apache.commons.math3.util.FastMath.sqrt(double)",
        "org.apache.commons.math3.optim.nonlinear.vector.jacobian.AbstractLeastSquaresOptimizer#computeCost(double[])",
        "org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizer#qrDecomposition(RealMatrix)",
        "org.apache.commons.math3.linear.Array2DRowRealMatrix#operate(double[])",
        "org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizer#checkParameters()",
        "org.apache.commons.math3.optim.nonlinear.vector.jacobian.AbstractLeastSquaresOptimizer#setCost(double)",
        "org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizer.<staticinit>()",
        "org.apache.commons.math3.linear.DiagonalMatrix#operate(double[])",
        "org.apache.commons.math3.util.FastMath.min(int,int)",
        "org.apache.commons.math3.optim.nonlinear.vector.jacobian.AbstractLeastSquaresOptimizer#computeWeightedJacobian(double[])",
        "org.apache.commons.math3.optim.nonlinear.vector.jacobian.AbstractLeastSquaresOptimizer#getWeightSquareRoot()",
        "org.apache.commons.math3.optim.BaseOptimizer#getIterations()",
        "org.apache.commons.math3.optim.nonlinear.vector.jacobian.AbstractLeastSquaresOptimizer#computeResiduals(double[])",
        "org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizer#qTy(double[])",
        "org.apache.commons.math3.optim.nonlinear.vector.MultivariateVectorOptimizer#getTarget()",
        "org.apache.commons.math3.optim.PointVectorValuePair#PointVectorValuePair(double[],double[])",
        "org.apache.commons.math3.linear.BlockRealMatrix#operate(double[])",
        "org.apache.commons.math3.optim.BaseOptimizer#incrementIterationCount()"
    ],
    "org.apache.commons.math3.ml.neuralnet.Network.SerializationProxy#SerializationProxy(long,int,Neuron[],long[][])": ["org.apache.commons.math3.ml.neuralnet.Network.SerializationProxy.<init>()"],
    "org.apache.commons.math3.linear.ArrayRealVector#getDistance(RealVector)": [
        "org.apache.commons.math3.linear.ArrayRealVector#checkVectorDimensions(int)",
        "org.apache.commons.math3.linear.ArrayRealVector#checkVectorDimensions(RealVector)",
        "org.apache.commons.math3.linear.ArrayRealVector#getEntry(int)",
        "org.apache.commons.math3.linear.OpenMapRealVector#getEntry(int)",
        "org.apache.commons.math3.util.FastMath.sqrt(double)",
        "org.apache.commons.math3.linear.RealVector.unmodifiableRealVector(RealVector)$RealVector$1#getEntry(int)"
    ],
    "org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet#isIntervalEnd(BSPTree<Euclidean1D>)": [
        "org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet#leafBefore(BSPTree<Euclidean1D>)",
        "org.apache.commons.math3.geometry.partitioning.BSPTree#getAttribute()",
        "org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet#leafAfter(BSPTree<Euclidean1D>)"
    ],
    "org.apache.commons.math3.geometry.enclosing.WelzlEncloser#enclose(Iterable<P extends Point>)": [
        "org.apache.commons.math3.util.Combinations#iterator()",
        "org.apache.commons.math3.ml.neuralnet.Network#iterator()",
        "org.apache.commons.math3.geometry.enclosing.WelzlEncloser#pivotingBall(Iterable<P extends Point>)",
        "org.apache.commons.math3.geometry.spherical.oned.ArcsSet#iterator()",
        "org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet#iterator()",
        "org.apache.commons.math3.geometry.partitioning.NodesSet#iterator()",
        "org.apache.commons.math3.util.IntegerSequence.Range#iterator()",
        "org.apache.commons.math3.ml.neuralnet.twod.NeuronSquareMesh2D#iterator()",
        "org.apache.commons.math3.genetics.ListPopulation#iterator()",
        "org.apache.commons.math3.userguide.sofm.ChineseRingsClassifier#createIterable()$Iterable$1#iterator()"
    ],
    "org.apache.commons.math3.distribution.EnumeratedIntegerDistribution#cumulativeProbability(int)": [
        "org.apache.commons.math3.util.Pair#getValue()",
        "org.apache.commons.math3.distribution.EnumeratedDistribution#getPmf()",
        "org.apache.commons.math3.util.Pair#getKey()",
        "org.apache.commons.math3.optim.PointVectorValuePair#getValue()",
        "org.apache.commons.math3.optimization.PointVectorValuePair#getValue()"
    ],
    "org.apache.commons.math3.geometry.euclidean.twod.Vector2DFormat#Vector2DFormat(NumberFormat)": [
        "org.apache.commons.math3.geometry.VectorFormat#VectorFormat(String,String,String,NumberFormat)",
        "org.apache.commons.math3.geometry.euclidean.twod.Vector2DFormat.<init>()",
        "org.apache.commons.math3.geometry.VectorFormat.<staticinit>()"
    ],
    "org.apache.commons.math3.geometry.euclidean.threed.Plane#toSubSpace(Vector<Euclidean3D>)": ["org.apache.commons.math3.geometry.euclidean.threed.Plane#toSubSpace(Point<Euclidean3D>)"],
    "org.apache.commons.math3.analysis.interpolation.LoessInterpolator.checkAllFiniteReal(double[])": ["org.apache.commons.math3.util.MathUtils.checkFinite(double)"],
    "org.apache.commons.math3.optimization.general.AbstractDifferentiableOptimizer#AbstractDifferentiableOptimizer(ConvergenceChecker<PointValuePair>)": [
        "org.apache.commons.math3.optimization.direct.BaseAbstractMultivariateOptimizer#BaseAbstractMultivariateOptimizer(ConvergenceChecker<PointValuePair>)",
        "org.apache.commons.math3.optimization.general.AbstractDifferentiableOptimizer.<init>()"
    ],
    "org.apache.commons.math3.optimization.direct.CMAESOptimizer.PopulationSize#PopulationSize(int)": ["org.apache.commons.math3.optimization.direct.CMAESOptimizer.PopulationSize.<init>()"],
    "org.apache.commons.math3.geometry.spherical.oned.ArcsSet#split(Arc)": [
        "org.apache.commons.math3.geometry.spherical.oned.ArcsSet.Split#Split(ArcsSet,ArcsSet)",
        "org.apache.commons.math3.geometry.spherical.oned.ArcsSet#createSplitPart(List<Double>)",
        "org.apache.commons.math3.util.MathUtils.<staticinit>()",
        "org.apache.commons.math3.util.MathUtils.normalizeAngle(double,double)",
        "org.apache.commons.math3.geometry.spherical.oned.Arc#getInf()",
        "org.apache.commons.math3.util.FastMath.<staticinit>()",
        "org.apache.commons.math3.geometry.spherical.oned.Arc#getSup()"
    ],
    "org.apache.commons.math3.ode.nonstiff.DormandPrince853FieldStepInterpolator#create(Field<T extends RealFieldElement>,boolean,T extends RealFieldElement[][],FieldODEStateAndDerivative<T extends RealFieldElement>,FieldODEStateAndDerivative<T extends RealFieldElement>,FieldODEStateAndDerivative<T extends RealFieldElement>,FieldODEStateAndDerivative<T extends RealFieldElement>,FieldEquationsMapper<T extends RealFieldElement>)": ["org.apache.commons.math3.ode.nonstiff.DormandPrince853FieldStepInterpolator#DormandPrince853FieldStepInterpolator(Field<T extends RealFieldElement>,boolean,T extends RealFieldElement[][],FieldODEStateAndDerivative<T extends RealFieldElement>,FieldODEStateAndDerivative<T extends RealFieldElement>,FieldODEStateAndDerivative<T extends RealFieldElement>,FieldODEStateAndDerivative<T extends RealFieldElement>,FieldEquationsMapper<T extends RealFieldElement>)"],
    "org.apache.commons.math3.ode.nonstiff.AdamsNordsieckFieldTransformer#AdamsNordsieckFieldTransformer(Field<T extends RealFieldElement>,int)": [
        "org.apache.commons.math3.linear.ArrayFieldVector#toArray()",
        "org.apache.commons.math3.linear.Array2DRowFieldMatrix#Array2DRowFieldMatrix(T extends FieldElement[][],boolean)",
        "org.apache.commons.math3.util.BigRealField#getZero()",
        "org.apache.commons.math3.linear.Array2DRowFieldMatrix#Array2DRowFieldMatrix(T extends FieldElement[][])",
        "org.apache.commons.math3.linear.BlockFieldMatrix#getData()",
        "org.apache.commons.math3.dfp.DfpField#getZero()",
        "org.apache.commons.math3.linear.FieldLUDecomposition.Solver#solve(FieldVector<T extends FieldElement>)",
        "org.apache.commons.math3.util.BigRealField#getOne()",
        "org.apache.commons.math3.linear.FieldLUDecomposition.Solver#solve(FieldMatrix<T extends FieldElement>)",
        "org.apache.commons.math3.ode.nonstiff.AdamsNordsieckFieldTransformer#buildP(int)",
        "org.apache.commons.math3.fraction.FractionField#getZero()",
        "org.apache.commons.math3.complex.ComplexField#getZero()",
        "org.apache.commons.math3.util.MathArrays.buildArray(Field<T>,int)",
        "org.apache.commons.math3.fraction.BigFractionField#getOne()",
        "org.apache.commons.math3.linear.Array2DRowFieldMatrix#getData()",
        "org.apache.commons.math3.linear.AbstractFieldMatrix#getData()",
        "org.apache.commons.math3.fraction.FractionField#getOne()",
        "org.apache.commons.math3.analysis.differentiation.SparseGradient#getField()$Field$1#getOne()",
        "org.apache.commons.math3.analysis.differentiation.SparseGradient#getField()$Field$1#getZero()",
        "org.apache.commons.math3.util.Decimal64Field#getZero()",
        "org.apache.commons.math3.linear.SparseFieldVector#toArray()",
        "org.apache.commons.math3.ode.nonstiff.AdamsNordsieckFieldTransformer.<init>()",
        "org.apache.commons.math3.linear.FieldLUDecomposition#getSolver()",
        "org.apache.commons.math3.complex.ComplexField#getOne()",
        "org.apache.commons.math3.linear.ArrayFieldVector#ArrayFieldVector(T extends FieldElement[],boolean)",
        "org.apache.commons.math3.analysis.differentiation.DerivativeStructure#getField()$Field$1#getZero()",
        "org.apache.commons.math3.linear.FieldLUDecomposition#FieldLUDecomposition(FieldMatrix<T extends FieldElement>)",
        "org.apache.commons.math3.dfp.DfpField#getOne()",
        "org.apache.commons.math3.fraction.BigFractionField#getZero()",
        "org.apache.commons.math3.analysis.differentiation.DerivativeStructure#getField()$Field$1#getOne()",
        "org.apache.commons.math3.util.Decimal64Field#getOne()"
    ],
    "org.apache.commons.math3.distribution.ParetoDistribution#sample()": [
        "org.apache.commons.math3.random.SynchronizedRandomGenerator#nextDouble()",
        "org.apache.commons.math3.util.FastMath.pow(double,double)",
        "org.apache.commons.math3.random.RandomGeneratorFactory.createRandomGenerator(Random)$RandomGenerator$1#nextDouble()",
        "org.apache.commons.math3.random.RandomAdaptor#nextDouble()",
        "org.apache.commons.math3.random.BitsStreamGenerator#nextDouble()"
    ],
    "org.apache.commons.math3.linear.BlockRealMatrix#setRow(int,double[])": [
        "org.apache.commons.math3.linear.BlockRealMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.MatrixDimensionMismatchException#MatrixDimensionMismatchException(int,int,int,int)",
        "org.apache.commons.math3.linear.BlockRealMatrix.<staticinit>()",
        "org.apache.commons.math3.linear.MatrixUtils.checkRowIndex(AnyMatrix,int)",
        "org.apache.commons.math3.linear.BlockRealMatrix#blockWidth(int)"
    ],
    "org.apache.commons.math3.optim.linear.SimplexTableau#getConstraintTypeCounts(Relationship)": ["org.apache.commons.math3.optim.linear.LinearConstraint#getRelationship()"],
    "org.apache.commons.math3.geometry.euclidean.threed.SubLine#getSegments()": [
        "org.apache.commons.math3.geometry.euclidean.oned.Vector1D#Vector1D(double)",
        "org.apache.commons.math3.geometry.euclidean.oned.Interval#getInf()",
        "org.apache.commons.math3.geometry.euclidean.oned.Interval#getSup()",
        "org.apache.commons.math3.geometry.euclidean.threed.Segment#Segment(Vector3D,Vector3D,Line)",
        "org.apache.commons.math3.geometry.euclidean.threed.Line#toSpace(Point<Euclidean1D>)",
        "org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet#asList()"
    ],
    "org.apache.commons.math3.distribution.ZipfDistribution#calculateNumericalMean()": [
        "org.apache.commons.math3.distribution.ZipfDistribution#getNumberOfElements()",
        "org.apache.commons.math3.distribution.ZipfDistribution#generalizedHarmonic(int,double)",
        "org.apache.commons.math3.distribution.ZipfDistribution#getExponent()"
    ],
    "org.apache.commons.math3.geometry.euclidean.twod.NestedLoops#correctOrientation()": ["org.apache.commons.math3.geometry.euclidean.twod.NestedLoops#setClockWise(boolean)"],
    "org.apache.commons.math3.distribution.BetaDistribution#getNumericalVariance()": [
        "org.apache.commons.math3.distribution.BetaDistribution#getAlpha()",
        "org.apache.commons.math3.distribution.BetaDistribution#getBeta()"
    ],
    "org.apache.commons.math3.linear.RealVector.unmodifiableRealVector(RealVector)$RealVector$1#mapSubtract(double)": [
        "org.apache.commons.math3.linear.RealVector#mapSubtract(double)",
        "org.apache.commons.math3.linear.RealVector.unmodifiableRealVector(RealVector)$RealVector$1#mapSubtract(double)"
    ],
    "org.apache.commons.math3.util.IntegerSequence#IntegerSequence()": ["org.apache.commons.math3.util.IntegerSequence.<init>()"],
    "org.apache.commons.math3.stat.inference.ChiSquareTest#chiSquareTestDataSetsComparison(long[],long[],double)": [
        "org.apache.commons.math3.exception.util.LocalizedFormats.<staticinit>()",
        "org.apache.commons.math3.stat.inference.ChiSquareTest#chiSquareTestDataSetsComparison(long[],long[])"
    ],
    "org.apache.commons.math3.userguide.genetics.PolygonChromosome.setTestImage(BufferedImage)": ["org.apache.commons.math3.userguide.genetics.PolygonChromosome.<staticinit>()"],
    "org.apache.commons.math3.analysis.differentiation.SparseGradient#round()": ["org.apache.commons.math3.util.FastMath.round(double)"],
    "org.apache.commons.math3.analysis.differentiation.DSCompiler#atan2(double[],int,double[],int,double[],int)": [
        "org.apache.commons.math3.analysis.differentiation.DSCompiler#atan(double[],int,double[],int)",
        "org.apache.commons.math3.analysis.differentiation.DSCompiler#subtract(double[],int,double[],int,double[],int)",
        "org.apache.commons.math3.analysis.differentiation.DSCompiler#multiply(double[],int,double[],int,double[],int)",
        "org.apache.commons.math3.analysis.differentiation.DSCompiler#divide(double[],int,double[],int,double[],int)",
        "org.apache.commons.math3.analysis.differentiation.DSCompiler#add(double[],int,double[],int,double[],int)",
        "org.apache.commons.math3.analysis.differentiation.DSCompiler#rootN(double[],int,int,double[],int)",
        "org.apache.commons.math3.analysis.differentiation.DSCompiler#getSize()",
        "org.apache.commons.math3.util.FastMath.atan2(double,double)",
        "org.apache.commons.math3.util.FastMath.<staticinit>()"
    ],
    "org.apache.commons.math3.analysis.solvers.RegulaFalsiSolver#RegulaFalsiSolver(double)": [
        "org.apache.commons.math3.analysis.solvers.BaseSecantSolver.Method.<staticinit>()",
        "org.apache.commons.math3.analysis.solvers.BaseSecantSolver#BaseSecantSolver(double,Method)",
        "org.apache.commons.math3.analysis.solvers.RegulaFalsiSolver.<init>()"
    ],
    "org.apache.commons.math3.linear.SparseFieldVector#mapDivideToSelf(T extends FieldElement)": [
        "org.apache.commons.math3.util.OpenIntToFieldHashMap.Iterator#hasNext()",
        "org.apache.commons.math3.util.OpenIntToFieldHashMap#iterator()",
        "org.apache.commons.math3.util.OpenIntToFieldHashMap.Iterator#key()",
        "org.apache.commons.math3.util.OpenIntToFieldHashMap#put(int,T extends FieldElement)",
        "org.apache.commons.math3.util.OpenIntToFieldHashMap.Iterator#value()",
        "org.apache.commons.math3.util.OpenIntToFieldHashMap.Iterator#advance()"
    ],
    "org.apache.commons.math3.stat.inference.TestUtils#TestUtils()": ["org.apache.commons.math3.stat.inference.TestUtils.<init>()"],
    "org.apache.commons.math3.distribution.AbstractRealDistribution#AbstractRealDistribution()": ["org.apache.commons.math3.distribution.AbstractRealDistribution.<init>()"],
    "org.apache.commons.math3.analysis.solvers.MullerSolver#solve(double,double,double,double)": [
        "org.apache.commons.math3.analysis.solvers.BaseAbstractUnivariateSolver#getAbsoluteAccuracy()",
        "org.apache.commons.math3.analysis.solvers.BaseAbstractUnivariateSolver#computeObjectiveValue(double)",
        "org.apache.commons.math3.analysis.solvers.BaseAbstractUnivariateSolver#isSequence(double,double,double)",
        "org.apache.commons.math3.analysis.solvers.BaseAbstractUnivariateSolver#getFunctionValueAccuracy()",
        "org.apache.commons.math3.util.FastMath.abs(double)",
        "org.apache.commons.math3.util.FastMath.max(double,double)",
        "org.apache.commons.math3.util.FastMath.sqrt(double)",
        "org.apache.commons.math3.analysis.solvers.BaseAbstractUnivariateSolver#getRelativeAccuracy()",
        "org.apache.commons.math3.util.FastMath.signum(double)"
    ],
    "org.apache.commons.math3.dfp.DfpMath.logInternal(Dfp[])": [
        "org.apache.commons.math3.dfp.DfpMath.split(Dfp)",
        "org.apache.commons.math3.dfp.Dfp#multiply(Dfp)",
        "org.apache.commons.math3.dfp.Dfp#newInstance(String)",
        "org.apache.commons.math3.dfp.Dfp#getTwo()",
        "org.apache.commons.math3.dfp.Dfp#divide(int)",
        "org.apache.commons.math3.dfp.Dfp#divide(Dfp)",
        "org.apache.commons.math3.dfp.Dfp#add(Dfp)",
        "org.apache.commons.math3.dfp.Dfp#Dfp(Dfp)",
        "org.apache.commons.math3.dfp.DfpDec#newInstance(String)",
        "org.apache.commons.math3.dfp.Dfp#equals(Object)"
    ],
    "org.apache.commons.math3.ode.nonstiff.AdamsFieldStepInterpolator#create(boolean,FieldODEStateAndDerivative<T extends RealFieldElement>,FieldODEStateAndDerivative<T extends RealFieldElement>,FieldODEStateAndDerivative<T extends RealFieldElement>,FieldODEStateAndDerivative<T extends RealFieldElement>,FieldEquationsMapper<T extends RealFieldElement>)": ["org.apache.commons.math3.ode.nonstiff.AdamsFieldStepInterpolator#AdamsFieldStepInterpolator(T extends RealFieldElement,FieldODEStateAndDerivative<T extends RealFieldElement>,T extends RealFieldElement[],Array2DRowFieldMatrix<T extends RealFieldElement>,boolean,FieldODEStateAndDerivative<T extends RealFieldElement>,FieldODEStateAndDerivative<T extends RealFieldElement>,FieldODEStateAndDerivative<T extends RealFieldElement>,FieldODEStateAndDerivative<T extends RealFieldElement>,FieldEquationsMapper<T extends RealFieldElement>)"],
    "org.apache.commons.math3.random.EmpiricalDistribution#load(URL)": [
        "org.apache.commons.math3.util.MathUtils.checkNotNull(Object)",
        "org.apache.commons.math3.random.EmpiricalDistribution.StreamDataAdapter#StreamDataAdapter(BufferedReader)",
        "org.apache.commons.math3.exception.util.LocalizedFormats.<staticinit>()",
        "org.apache.commons.math3.random.EmpiricalDistribution#fillBinStats(DataAdapter)",
        "org.apache.commons.math3.random.EmpiricalDistribution.<staticinit>()",
        "org.apache.commons.math3.stat.descriptive.SynchronizedSummaryStatistics#getN()",
        "org.apache.commons.math3.stat.descriptive.SummaryStatistics#getN()",
        "org.apache.commons.math3.random.EmpiricalDistribution.ArrayDataAdapter#computeStats()",
        "org.apache.commons.math3.random.EmpiricalDistribution.StreamDataAdapter#computeStats()"
    ],
    "org.apache.commons.math3.analysis.polynomials.PolynomialsUtils.createChebyshevPolynomial(int)": [
        "org.apache.commons.math3.analysis.polynomials.PolynomialsUtils.<staticinit>()",
        "org.apache.commons.math3.analysis.polynomials.PolynomialsUtils.createChebyshevPolynomial(int)$RecurrenceCoefficientsGenerator$1.<init>()",
        "org.apache.commons.math3.analysis.polynomials.PolynomialsUtils.buildPolynomial(int,List<BigFraction>,RecurrenceCoefficientsGenerator)"
    ],
    "org.apache.commons.math3.optim.nonlinear.scalar.gradient.NonLinearConjugateGradientOptimizer#NonLinearConjugateGradientOptimizer(Formula,ConvergenceChecker<PointValuePair>,UnivariateSolver)": [
        "org.apache.commons.math3.optim.nonlinear.scalar.gradient.NonLinearConjugateGradientOptimizer.IdentityPreconditioner.<init>()",
        "org.apache.commons.math3.optim.nonlinear.scalar.gradient.NonLinearConjugateGradientOptimizer#NonLinearConjugateGradientOptimizer(Formula,ConvergenceChecker<PointValuePair>,UnivariateSolver,Preconditioner)",
        "org.apache.commons.math3.optim.nonlinear.scalar.gradient.NonLinearConjugateGradientOptimizer.Formula.<staticinit>()"
    ],
    "org.apache.commons.math3.util.ArithmeticUtils.mulAndCheck(int,int)": ["org.apache.commons.math3.exception.MathArithmeticException#MathArithmeticException()"],
    "org.apache.commons.math3.analysis.FunctionUtils.compose(UnivariateDifferentiableFunction[]...)$UnivariateDifferentiableFunction$1#value(double)": [
        "org.apache.commons.math3.analysis.FunctionUtils.multiply(DifferentiableUnivariateFunction[]...)$UnivariateFunction$1$UnivariateFunction$1#derivative()$UnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.polynomials.PolynomialSplineFunction#value(double)",
        "org.apache.commons.math3.analysis.function.Gaussian#value(double)",
        "org.apache.commons.math3.analysis.function.Tanh#value(double)",
        "org.apache.commons.math3.analysis.function.Inverse#value(double)",
        "org.apache.commons.math3.analysis.function.HarmonicOscillator#value(double)",
        "org.apache.commons.math3.analysis.FunctionUtils.fix1stArgument(BivariateFunction,double)$UnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.function.Asin#value(double)",
        "org.apache.commons.math3.analysis.function.Asinh#value(double)",
        "org.apache.commons.math3.analysis.FunctionUtils.multiply(UnivariateFunction[]...)$UnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.function.Atan#value(double)",
        "org.apache.commons.math3.analysis.FunctionUtils.toDifferentiableUnivariateFunction(UnivariateDifferentiableFunction)$DifferentiableUnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.function.Cbrt#value(double)",
        "org.apache.commons.math3.analysis.polynomials.PolynomialFunctionLagrangeForm#value(double)",
        "org.apache.commons.math3.analysis.function.Exp#value(double)",
        "org.apache.commons.math3.special.BesselJ#value(double)",
        "org.apache.commons.math3.analysis.polynomials.PolynomialFunctionNewtonForm#value(double)",
        "org.apache.commons.math3.analysis.FunctionUtils.add(UnivariateFunction[]...)$UnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.function.Sin#value(double)",
        "org.apache.commons.math3.analysis.function.Cos#value(double)",
        "org.apache.commons.math3.analysis.interpolation.UnivariatePeriodicInterpolator#interpolate(double[],double[])$UnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.function.Log10#value(double)",
        "org.apache.commons.math3.analysis.function.Sqrt#value(double)",
        "org.apache.commons.math3.analysis.function.Log#value(double)",
        "org.apache.commons.math3.analysis.function.Sinc#value(double)",
        "org.apache.commons.math3.ode.events.EventState#evaluateStep(StepInterpolator)$UnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.function.Minus#value(double)",
        "org.apache.commons.math3.analysis.integration.IterativeLegendreGaussIntegrator#stage(int)$UnivariateFunction$1#value(double)",
        "org.apache.commons.math3.optimization.general.NonLinearConjugateGradientOptimizer.LineSearchFunction#value(double)",
        "org.apache.commons.math3.analysis.function.Floor#value(double)",
        "org.apache.commons.math3.analysis.FunctionUtils.multiply(DifferentiableUnivariateFunction[]...)$DifferentiableUnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.FunctionUtils.combine(BivariateFunction,UnivariateFunction,UnivariateFunction)$UnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.FunctionUtils.add(DifferentiableUnivariateFunction[]...)$UnivariateFunction$1$UnivariateFunction$1#derivative()$UnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.function.Sinh#value(double)",
        "org.apache.commons.math3.analysis.FunctionUtils.multiply(UnivariateDifferentiableFunction[]...)$UnivariateDifferentiableFunction$1#value(double)",
        "org.apache.commons.math3.analysis.function.Tan#value(double)",
        "org.apache.commons.math3.distribution.AbstractRealDistribution#inverseCumulativeProbability(double)$UnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.FunctionUtils.add(DifferentiableUnivariateFunction[]...)$DifferentiableUnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.function.Ceil#value(double)",
        "org.apache.commons.math3.analysis.function.Logistic#value(double)",
        "org.apache.commons.math3.analysis.function.Signum#value(double)",
        "org.apache.commons.math3.analysis.function.Constant#value(double)",
        "org.apache.commons.math3.analysis.function.Atanh#value(double)",
        "org.apache.commons.math3.analysis.FunctionUtils.compose(DifferentiableUnivariateFunction[]...)$UnivariateFunction$1$UnivariateFunction$1#derivative()$UnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.FunctionUtils.add(UnivariateDifferentiableFunction[]...)$UnivariateDifferentiableFunction$1#value(double)",
        "org.apache.commons.math3.analysis.function.Abs#value(double)",
        "org.apache.commons.math3.analysis.differentiation.FiniteDifferencesDifferentiator#differentiate(UnivariateFunction)$UnivariateDifferentiableFunction$1#value(double)",
        "org.apache.commons.math3.analysis.function.Identity#value(double)",
        "org.apache.commons.math3.analysis.function.Expm1#value(double)",
        "org.apache.commons.math3.analysis.function.Logit#value(double)",
        "org.apache.commons.math3.analysis.function.Log1p#value(double)",
        "org.apache.commons.math3.analysis.FunctionUtils.fix2ndArgument(BivariateFunction,double)$UnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.FunctionUtils.toUnivariateDifferential(DifferentiableUnivariateFunction)$UnivariateDifferentiableFunction$1#value(double)",
        "org.apache.commons.math3.analysis.FunctionUtils.toDifferentiableUnivariateFunction(UnivariateDifferentiableFunction)$UnivariateFunction$1$UnivariateFunction$1#derivative()$UnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.polynomials.PolynomialFunction#value(double)",
        "org.apache.commons.math3.analysis.function.Rint#value(double)",
        "org.apache.commons.math3.analysis.FunctionUtils.compose(UnivariateFunction[]...)$UnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.function.Cosh#value(double)",
        "org.apache.commons.math3.optimization.direct.PowellOptimizer.LineSearch#search(double[],double[])$UnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.FunctionUtils.compose(DifferentiableUnivariateFunction[]...)$DifferentiableUnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.function.Acosh#value(double)",
        "org.apache.commons.math3.analysis.function.StepFunction#value(double)",
        "org.apache.commons.math3.analysis.FunctionUtils.compose(UnivariateDifferentiableFunction[]...)$UnivariateDifferentiableFunction$1#value(double)",
        "org.apache.commons.math3.analysis.function.Acos#value(double)",
        "org.apache.commons.math3.analysis.function.Power#value(double)",
        "org.apache.commons.math3.optim.nonlinear.scalar.LineSearch#search(double[],double[])$UnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.function.Sigmoid#value(double)",
        "org.apache.commons.math3.analysis.function.Ulp#value(double)"
    ],
    "org.apache.commons.math3.analysis.solvers.LaguerreSolver#laguerre(double,double,double,double)": [
        "org.apache.commons.math3.analysis.solvers.AbstractPolynomialSolver#getCoefficients()",
        "org.apache.commons.math3.complex.Complex#getReal()",
        "org.apache.commons.math3.complex.Complex#Complex(double,double)",
        "org.apache.commons.math3.analysis.solvers.LaguerreSolver.ComplexSolver#solveAll(Complex[],Complex)",
        "org.apache.commons.math3.analysis.solvers.LaguerreSolver.ComplexSolver#isRoot(double,double,Complex)",
        "org.apache.commons.math3.analysis.solvers.LaguerreSolver.ComplexSolver#solve(Complex[],Complex)",
        "org.apache.commons.math3.complex.ComplexUtils.convertToComplex(double[])"
    ],
    "org.apache.commons.math3.geometry.euclidean.threed.Plane#setFrame()": [
        "org.apache.commons.math3.geometry.euclidean.threed.Vector3D#Vector3D(double,Vector3D)",
        "org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(Vector3D,Vector3D)",
        "org.apache.commons.math3.geometry.euclidean.threed.Vector3D#orthogonal()"
    ],
    "org.apache.commons.math3.optimization.linear.LinearObjectiveFunction#getValue(double[])": [
        "org.apache.commons.math3.linear.ArrayRealVector#ArrayRealVector(double[],boolean)",
        "org.apache.commons.math3.linear.RealVector#dotProduct(RealVector)",
        "org.apache.commons.math3.linear.RealVector.unmodifiableRealVector(RealVector)$RealVector$1#dotProduct(RealVector)",
        "org.apache.commons.math3.linear.ArrayRealVector#dotProduct(RealVector)"
    ],
    "org.apache.commons.math3.analysis.interpolation.BicubicSplineFunction#BicubicSplineFunction(double[],boolean)$BivariateFunction$1#value(double,double)": ["org.apache.commons.math3.analysis.interpolation.BicubicSplineFunction#apply(double[],double[],double[][])"],
    "org.apache.commons.math3.geometry.euclidean.twod.Line.getTransform(AffineTransform)": ["org.apache.commons.math3.geometry.euclidean.twod.Line.LineTransform#LineTransform(double,double,double,double,double,double)"],
    "org.apache.commons.math3.geometry.euclidean.oned.Vector1DFormat#parse(String,ParsePosition)": [
        "org.apache.commons.math3.geometry.VectorFormat#parseCoordinates(int,String,ParsePosition)",
        "org.apache.commons.math3.geometry.euclidean.oned.Vector1D#Vector1D(double)"
    ],
    "org.apache.commons.math3.stat.descriptive.rank.Min#evaluate(double[],int,int)": ["org.apache.commons.math3.stat.descriptive.AbstractUnivariateStatistic#test(double[],int,int)"],
    "org.apache.commons.math3.optimization.direct.NelderMeadSimplex#NelderMeadSimplex(double[])": [
        "org.apache.commons.math3.optimization.direct.NelderMeadSimplex#NelderMeadSimplex(double[],double,double,double,double)",
        "org.apache.commons.math3.optimization.direct.NelderMeadSimplex.<staticinit>()"
    ],
    "org.apache.commons.math3.ode.ExpandableStatefulODE#computeDerivatives(double,double[],double[])": [
        "org.apache.commons.math3.ode.EquationsMapper#extractEquationData(double[],double[])",
        "org.apache.commons.math3.ode.MultistepIntegrator#start(double,double[],double)$FirstOrderDifferentialEquations$1#computeDerivatives(double,double[],double[])",
        "org.apache.commons.math3.ode.FirstOrderConverter#computeDerivatives(double,double[],double[])",
        "org.apache.commons.math3.ode.JacobianMatrices.MainStateJacobianWrapper#computeDerivatives(double,double[],double[])",
        "org.apache.commons.math3.ode.JacobianMatrices.JacobiansSecondaryEquations#computeDerivatives(double,double[],double[],double[],double[])",
        "org.apache.commons.math3.ode.EquationsMapper#insertEquationData(double[],double[])"
    ],
    "org.apache.commons.math3.fraction.FractionFormat.formatFraction(Fraction)": ["org.apache.commons.math3.fraction.FractionFormat.getImproperInstance()"],
    "org.apache.commons.math3.exception.MathArithmeticException#MathArithmeticException(Localizable,Object[]...)": [
        "org.apache.commons.math3.exception.util.ExceptionContext#addMessage(Localizable,Object[]...)",
        "org.apache.commons.math3.exception.MathArithmeticException.<init>()",
        "org.apache.commons.math3.exception.util.ExceptionContext#ExceptionContext(Throwable)"
    ],
    "org.apache.commons.math3.geometry.partitioning.AbstractSubHyperplane#side(Hyperplane<S extends Space>)": ["org.apache.commons.math3.geometry.partitioning.SubHyperplane.SplitSubHyperplane#getSide()"],
    "org.apache.commons.math3.stat.StatUtils.varianceDifference(double[],double[],double)": ["org.apache.commons.math3.exception.DimensionMismatchException#DimensionMismatchException(int,int)"],
    "org.apache.commons.math3.analysis.function.HarmonicOscillator.Parametric#validateParameters(double[])": [
        "org.apache.commons.math3.exception.DimensionMismatchException#DimensionMismatchException(int,int)",
        "org.apache.commons.math3.exception.NullArgumentException#NullArgumentException()"
    ],
    "org.apache.commons.math3.geometry.partitioning.utilities.AVLTree#delete(T extends Comparable)": [
        "org.apache.commons.math3.geometry.partitioning.utilities.AVLTree#getNotSmaller(T extends Comparable)",
        "org.apache.commons.math3.geometry.partitioning.utilities.AVLTree.Node#getNext()",
        "org.apache.commons.math3.geometry.partitioning.utilities.AVLTree.Node#delete()"
    ],
    "org.apache.commons.math3.util.Decimal64#tan()": [
        "org.apache.commons.math3.util.Decimal64#Decimal64(double)",
        "org.apache.commons.math3.util.FastMath.tan(double)"
    ],
    "org.apache.commons.math3.geometry.spherical.oned.ArcsSet#isArcStart(BSPTree<Sphere1D>)": [
        "org.apache.commons.math3.geometry.spherical.oned.ArcsSet#leafAfter(BSPTree<Sphere1D>)",
        "org.apache.commons.math3.geometry.spherical.oned.ArcsSet#leafBefore(BSPTree<Sphere1D>)",
        "org.apache.commons.math3.geometry.partitioning.BSPTree#getAttribute()"
    ],
    "org.apache.commons.math3.analysis.function.HarmonicOscillator.Parametric#value(double,double[]...)": [
        "org.apache.commons.math3.analysis.function.HarmonicOscillator.value(double,double)",
        "org.apache.commons.math3.analysis.function.HarmonicOscillator.Parametric#validateParameters(double[])"
    ],
    "org.apache.commons.math3.fraction.BigFraction#BigFraction(double,double,int,int)": [
        "org.apache.commons.math3.fraction.FractionConversionException#FractionConversionException(double,int)",
        "org.apache.commons.math3.fraction.FractionConversionException#FractionConversionException(double,long,long)",
        "org.apache.commons.math3.util.FastMath.abs(long)",
        "org.apache.commons.math3.util.FastMath.abs(double)",
        "org.apache.commons.math3.fraction.BigFraction.<init>()",
        "org.apache.commons.math3.util.FastMath.floor(double)"
    ],
    "org.apache.commons.math3.stat.descriptive.moment.Variance#Variance(SecondMoment)": [
        "org.apache.commons.math3.stat.descriptive.moment.Variance.<init>()",
        "org.apache.commons.math3.stat.descriptive.AbstractStorelessUnivariateStatistic.<init>()"
    ],
    "org.apache.commons.math3.linear.OpenMapRealVector.OpenMapEntry#getIndex()": ["org.apache.commons.math3.util.OpenIntToDoubleHashMap.Iterator#key()"],
    "org.apache.commons.math3.analysis.differentiation.DSCompiler#divide(double[],int,double[],int,double[],int)": [
        "org.apache.commons.math3.analysis.differentiation.DSCompiler#getSize()",
        "org.apache.commons.math3.analysis.differentiation.DSCompiler#multiply(double[],int,double[],int,double[],int)",
        "org.apache.commons.math3.analysis.differentiation.DSCompiler#pow(double[],int,int,double[],int)"
    ],
    "org.apache.commons.math3.linear.SparseFieldVector#walkInOptimizedOrder(FieldVectorChangingVisitor<T extends FieldElement>,int,int)": ["org.apache.commons.math3.linear.SparseFieldVector#walkInDefaultOrder(FieldVectorChangingVisitor<T extends FieldElement>,int,int)"],
    "org.apache.commons.math3.analysis.interpolation.UnivariatePeriodicInterpolator#interpolate(double[],double[])": [
        "org.apache.commons.math3.analysis.interpolation.AkimaSplineInterpolator#interpolate(double[],double[])",
        "org.apache.commons.math3.analysis.interpolation.SplineInterpolator#interpolate(double[],double[])",
        "org.apache.commons.math3.analysis.interpolation.LoessInterpolator#interpolate(double[],double[])",
        "org.apache.commons.math3.analysis.interpolation.UnivariatePeriodicInterpolator#interpolate(double[],double[])$UnivariateFunction$1.<init>()",
        "org.apache.commons.math3.util.MathArrays.checkOrder(double[])",
        "org.apache.commons.math3.analysis.interpolation.NevilleInterpolator#interpolate(double[],double[])",
        "org.apache.commons.math3.analysis.interpolation.UnivariatePeriodicInterpolator#interpolate(double[],double[])",
        "org.apache.commons.math3.util.MathUtils.reduce(double,double,double)",
        "org.apache.commons.math3.analysis.interpolation.DividedDifferenceInterpolator#interpolate(double[],double[])",
        "org.apache.commons.math3.analysis.interpolation.LinearInterpolator#interpolate(double[],double[])"
    ],
    "org.apache.commons.math3.random.RandomDataImpl#nextWeibull(double,double)": ["org.apache.commons.math3.random.RandomDataGenerator#nextWeibull(double,double)"],
    "org.apache.commons.math3.optim.nonlinear.scalar.MultivariateFunctionMappingAdapter.LowerBoundMapper#boundedToUnbounded(double)": ["org.apache.commons.math3.util.FastMath.log(double)"],
    "org.apache.commons.math3.dfp.DfpMath.cos(Dfp)": [
        "org.apache.commons.math3.dfp.DfpField#getPiSplit()",
        "org.apache.commons.math3.dfp.Dfp#remainder(Dfp)",
        "org.apache.commons.math3.dfp.Dfp#divide(int)",
        "org.apache.commons.math3.dfp.Dfp#newInstance(Dfp)",
        "org.apache.commons.math3.dfp.Dfp#multiply(int)",
        "org.apache.commons.math3.dfp.DfpField#getZero()",
        "org.apache.commons.math3.dfp.DfpMath.sinInternal(Dfp[])",
        "org.apache.commons.math3.dfp.Dfp#subtract(Dfp)",
        "org.apache.commons.math3.dfp.DfpField#getPi()",
        "org.apache.commons.math3.dfp.Dfp#getField()",
        "org.apache.commons.math3.dfp.DfpDec#newInstance(Dfp)",
        "org.apache.commons.math3.dfp.Dfp#lessThan(Dfp)",
        "org.apache.commons.math3.dfp.DfpMath.cosInternal(Dfp[])",
        "org.apache.commons.math3.dfp.Dfp#negate()",
        "org.apache.commons.math3.dfp.Dfp#greaterThan(Dfp)"
    ],
    "org.apache.commons.math3.linear.ArrayRealVector#subtract(RealVector)": [
        "org.apache.commons.math3.linear.RealVector.Entry#getValue()",
        "org.apache.commons.math3.linear.RealVector#iterator()",
        "org.apache.commons.math3.linear.RealVector#iterator()$Iterator$1#hasNext()",
        "org.apache.commons.math3.linear.RealVector.unmodifiableRealVector(RealVector)$Iterator$1$Iterator$1#sparseIterator()$Iterator$1#hasNext()",
        "org.apache.commons.math3.linear.RealVector.unmodifiableRealVector(RealVector)$RealVector$1#iterator()",
        "org.apache.commons.math3.geometry.spherical.oned.ArcsSet.SubArcsIterator#hasNext()",
        "org.apache.commons.math3.linear.ArrayRealVector#checkVectorDimensions(int)",
        "org.apache.commons.math3.util.Combinations.LexicographicIterator#hasNext()",
        "org.apache.commons.math3.linear.OpenMapRealVector.OpenMapEntry#getValue()",
        "org.apache.commons.math3.linear.RealVector.unmodifiableRealVector(RealVector).UnmodifiableEntry.UnmodifiableEntry#getValue()",
        "org.apache.commons.math3.linear.RealVector.SparseEntryIterator#hasNext()",
        "org.apache.commons.math3.userguide.sofm.ChineseRingsClassifier#createIterable()$Iterator$1$Iterator$1#iterator()$Iterator$1#hasNext()",
        "org.apache.commons.math3.linear.ArrayRealVector#ArrayRealVector(double[],boolean)",
        "org.apache.commons.math3.linear.RealVector.unmodifiableRealVector(RealVector)$Iterator$1$Iterator$1#sparseIterator()$Iterator$1#next()",
        "org.apache.commons.math3.util.MultidimensionalCounter.Iterator#hasNext()",
        "org.apache.commons.math3.linear.RealVector.unmodifiableRealVector(RealVector)$Iterator$1$Iterator$1#iterator()$Iterator$1#next()",
        "org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet.SubIntervalsIterator#hasNext()",
        "org.apache.commons.math3.linear.OpenMapRealVector.OpenMapEntry#getIndex()",
        "org.apache.commons.math3.linear.ArrayRealVector#checkVectorDimensions(RealVector)",
        "org.apache.commons.math3.userguide.sofm.ChineseRingsClassifier#createRandomIterator(long)$Iterator$1#hasNext()",
        "org.apache.commons.math3.util.IntegerSequence.Incrementor#hasNext()",
        "org.apache.commons.math3.linear.ArrayRealVector#ArrayRealVector(int)",
        "org.apache.commons.math3.linear.RealVector.Entry#getIndex()",
        "org.apache.commons.math3.linear.RealVector#iterator()$Iterator$1#next()",
        "org.apache.commons.math3.linear.RealVector.unmodifiableRealVector(RealVector)$Iterator$1$Iterator$1#iterator()$Iterator$1#hasNext()",
        "org.apache.commons.math3.util.Combinations.SingletonIterator#hasNext()",
        "org.apache.commons.math3.linear.RealVector.SparseEntryIterator#next()"
    ],
    "org.apache.commons.math3.util.FastMath.CodyWaite#CodyWaite(double)": ["org.apache.commons.math3.util.FastMath.CodyWaite.<init>()"],
    "org.apache.commons.math3.geometry.euclidean.threed.SubPlane#SubPlane(Hyperplane<Euclidean3D>,Region<Euclidean2D>)": [
        "org.apache.commons.math3.geometry.partitioning.AbstractSubHyperplane#AbstractSubHyperplane(Hyperplane<S extends Space>,Region<T extends Space>)",
        "org.apache.commons.math3.geometry.euclidean.threed.SubPlane.<init>()"
    ],
    "org.apache.commons.math3.linear.SymmLQ#solve(RealLinearOperator,RealVector)": [
        "org.apache.commons.math3.linear.OpenMapRealVector#set(double)",
        "org.apache.commons.math3.linear.DiagonalMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.Array2DRowRealMatrix#getColumnDimension()",
        "org.apache.commons.math3.util.MathUtils.checkNotNull(Object)",
        "org.apache.commons.math3.linear.RealVector.unmodifiableRealVector(RealVector)$RealVector$1#set(double)",
        "org.apache.commons.math3.linear.ArrayRealVector#ArrayRealVector(int)",
        "org.apache.commons.math3.linear.OpenMapRealMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.JacobiPreconditioner#getColumnDimension()",
        "org.apache.commons.math3.linear.JacobiPreconditioner#sqrt()$RealLinearOperator$1#getColumnDimension()",
        "org.apache.commons.math3.linear.ArrayRealVector#set(double)",
        "org.apache.commons.math3.linear.RealVector#set(double)",
        "org.apache.commons.math3.linear.SymmLQ#solveInPlace(RealLinearOperator,RealLinearOperator,RealVector,RealVector,boolean,double)",
        "org.apache.commons.math3.linear.BlockRealMatrix#getColumnDimension()"
    ],
    "org.apache.commons.math3.optimization.linear.SimplexSolver#doIteration(SimplexTableau)": [
        "org.apache.commons.math3.optimization.linear.SimplexTableau#getHeight()",
        "org.apache.commons.math3.optimization.linear.SimplexTableau#getEntry(int,int)",
        "org.apache.commons.math3.optimization.linear.UnboundedSolutionException#UnboundedSolutionException()",
        "org.apache.commons.math3.optimization.linear.SimplexSolver#getPivotRow(SimplexTableau,int)",
        "org.apache.commons.math3.optimization.linear.SimplexSolver#getPivotColumn(SimplexTableau)",
        "org.apache.commons.math3.optimization.linear.SimplexTableau#subtractRow(int,int,double)",
        "org.apache.commons.math3.optimization.linear.AbstractLinearOptimizer#incrementIterationsCounter()",
        "org.apache.commons.math3.optimization.linear.SimplexTableau#divideRow(int,double)"
    ],
    "org.apache.commons.math3.linear.BlockFieldMatrix#multiply(BlockFieldMatrix<T extends FieldElement>)": [
        "org.apache.commons.math3.linear.BlockFieldMatrix#blockWidth(int)",
        "org.apache.commons.math3.linear.AbstractFieldMatrix#checkMultiplicationCompatible(FieldMatrix<T extends FieldElement>)",
        "org.apache.commons.math3.util.BigRealField#getZero()",
        "org.apache.commons.math3.analysis.differentiation.SparseGradient#getField()$Field$1#getZero()",
        "org.apache.commons.math3.util.Decimal64Field#getZero()",
        "org.apache.commons.math3.dfp.DfpField#getZero()",
        "org.apache.commons.math3.util.FastMath.min(int,int)",
        "org.apache.commons.math3.linear.BlockFieldMatrix#BlockFieldMatrix(Field<T extends FieldElement>,int,int)",
        "org.apache.commons.math3.linear.AbstractFieldMatrix#getField()",
        "org.apache.commons.math3.analysis.differentiation.DerivativeStructure#getField()$Field$1#getZero()",
        "org.apache.commons.math3.fraction.FractionField#getZero()",
        "org.apache.commons.math3.complex.ComplexField#getZero()",
        "org.apache.commons.math3.linear.BlockFieldMatrix.<staticinit>()",
        "org.apache.commons.math3.fraction.BigFractionField#getZero()"
    ],
    "org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet#getFirstIntervalBoundary()": [
        "org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet#isIntervalStart(BSPTree<Euclidean1D>)",
        "org.apache.commons.math3.geometry.partitioning.BSPTree#getCut()",
        "org.apache.commons.math3.geometry.partitioning.BSPTree#getParent()",
        "org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet#nextInternalNode(BSPTree<Euclidean1D>)",
        "org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet#isIntervalEnd(BSPTree<Euclidean1D>)",
        "org.apache.commons.math3.geometry.partitioning.AbstractRegion#getTree(boolean)",
        "org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet#getFirstLeaf(BSPTree<Euclidean1D>)"
    ],
    "org.apache.commons.math3.analysis.FunctionUtils.toUnivariateDifferential(DifferentiableUnivariateFunction)$UnivariateDifferentiableFunction$1#value(double)": [
        "org.apache.commons.math3.analysis.FunctionUtils.multiply(DifferentiableUnivariateFunction[]...)$UnivariateFunction$1$UnivariateFunction$1#derivative()$UnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.polynomials.PolynomialSplineFunction#value(double)",
        "org.apache.commons.math3.analysis.function.Gaussian#value(double)",
        "org.apache.commons.math3.analysis.function.Tanh#value(double)",
        "org.apache.commons.math3.analysis.function.Inverse#value(double)",
        "org.apache.commons.math3.analysis.function.HarmonicOscillator#value(double)",
        "org.apache.commons.math3.analysis.FunctionUtils.fix1stArgument(BivariateFunction,double)$UnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.function.Asin#value(double)",
        "org.apache.commons.math3.analysis.function.Asinh#value(double)",
        "org.apache.commons.math3.analysis.FunctionUtils.multiply(UnivariateFunction[]...)$UnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.function.Atan#value(double)",
        "org.apache.commons.math3.analysis.FunctionUtils.toDifferentiableUnivariateFunction(UnivariateDifferentiableFunction)$DifferentiableUnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.function.Cbrt#value(double)",
        "org.apache.commons.math3.analysis.polynomials.PolynomialFunctionLagrangeForm#value(double)",
        "org.apache.commons.math3.analysis.function.Exp#value(double)",
        "org.apache.commons.math3.special.BesselJ#value(double)",
        "org.apache.commons.math3.analysis.polynomials.PolynomialFunctionNewtonForm#value(double)",
        "org.apache.commons.math3.analysis.FunctionUtils.add(UnivariateFunction[]...)$UnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.function.Sin#value(double)",
        "org.apache.commons.math3.analysis.function.Cos#value(double)",
        "org.apache.commons.math3.analysis.interpolation.UnivariatePeriodicInterpolator#interpolate(double[],double[])$UnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.function.Log10#value(double)",
        "org.apache.commons.math3.analysis.function.Sqrt#value(double)",
        "org.apache.commons.math3.analysis.function.Log#value(double)",
        "org.apache.commons.math3.analysis.function.Sinc#value(double)",
        "org.apache.commons.math3.ode.events.EventState#evaluateStep(StepInterpolator)$UnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.function.Minus#value(double)",
        "org.apache.commons.math3.analysis.integration.IterativeLegendreGaussIntegrator#stage(int)$UnivariateFunction$1#value(double)",
        "org.apache.commons.math3.optimization.general.NonLinearConjugateGradientOptimizer.LineSearchFunction#value(double)",
        "org.apache.commons.math3.analysis.function.Floor#value(double)",
        "org.apache.commons.math3.analysis.FunctionUtils.multiply(DifferentiableUnivariateFunction[]...)$DifferentiableUnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.FunctionUtils.combine(BivariateFunction,UnivariateFunction,UnivariateFunction)$UnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.FunctionUtils.add(DifferentiableUnivariateFunction[]...)$UnivariateFunction$1$UnivariateFunction$1#derivative()$UnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.function.Sinh#value(double)",
        "org.apache.commons.math3.analysis.FunctionUtils.multiply(UnivariateDifferentiableFunction[]...)$UnivariateDifferentiableFunction$1#value(double)",
        "org.apache.commons.math3.analysis.function.Tan#value(double)",
        "org.apache.commons.math3.distribution.AbstractRealDistribution#inverseCumulativeProbability(double)$UnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.FunctionUtils.add(DifferentiableUnivariateFunction[]...)$DifferentiableUnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.function.Ceil#value(double)",
        "org.apache.commons.math3.analysis.function.Logistic#value(double)",
        "org.apache.commons.math3.analysis.function.Signum#value(double)",
        "org.apache.commons.math3.analysis.function.Constant#value(double)",
        "org.apache.commons.math3.analysis.function.Atanh#value(double)",
        "org.apache.commons.math3.analysis.FunctionUtils.compose(DifferentiableUnivariateFunction[]...)$UnivariateFunction$1$UnivariateFunction$1#derivative()$UnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.FunctionUtils.add(UnivariateDifferentiableFunction[]...)$UnivariateDifferentiableFunction$1#value(double)",
        "org.apache.commons.math3.analysis.function.Abs#value(double)",
        "org.apache.commons.math3.analysis.differentiation.FiniteDifferencesDifferentiator#differentiate(UnivariateFunction)$UnivariateDifferentiableFunction$1#value(double)",
        "org.apache.commons.math3.analysis.function.Identity#value(double)",
        "org.apache.commons.math3.analysis.function.Expm1#value(double)",
        "org.apache.commons.math3.analysis.function.Logit#value(double)",
        "org.apache.commons.math3.analysis.function.Log1p#value(double)",
        "org.apache.commons.math3.analysis.FunctionUtils.fix2ndArgument(BivariateFunction,double)$UnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.FunctionUtils.toUnivariateDifferential(DifferentiableUnivariateFunction)$UnivariateDifferentiableFunction$1#value(double)",
        "org.apache.commons.math3.analysis.FunctionUtils.toDifferentiableUnivariateFunction(UnivariateDifferentiableFunction)$UnivariateFunction$1$UnivariateFunction$1#derivative()$UnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.polynomials.PolynomialFunction#value(double)",
        "org.apache.commons.math3.analysis.function.Rint#value(double)",
        "org.apache.commons.math3.analysis.FunctionUtils.compose(UnivariateFunction[]...)$UnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.function.Cosh#value(double)",
        "org.apache.commons.math3.optimization.direct.PowellOptimizer.LineSearch#search(double[],double[])$UnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.FunctionUtils.compose(DifferentiableUnivariateFunction[]...)$DifferentiableUnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.function.Acosh#value(double)",
        "org.apache.commons.math3.analysis.function.StepFunction#value(double)",
        "org.apache.commons.math3.analysis.FunctionUtils.compose(UnivariateDifferentiableFunction[]...)$UnivariateDifferentiableFunction$1#value(double)",
        "org.apache.commons.math3.analysis.function.Acos#value(double)",
        "org.apache.commons.math3.analysis.function.Power#value(double)",
        "org.apache.commons.math3.optim.nonlinear.scalar.LineSearch#search(double[],double[])$UnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.function.Sigmoid#value(double)",
        "org.apache.commons.math3.analysis.function.Ulp#value(double)"
    ],
    "org.apache.commons.math3.linear.AbstractRealMatrix#preMultiply(RealMatrix)": [
        "org.apache.commons.math3.linear.DiagonalMatrix#multiply(RealMatrix)",
        "org.apache.commons.math3.linear.AbstractRealMatrix#multiply(RealMatrix)",
        "org.apache.commons.math3.linear.BlockRealMatrix#multiply(RealMatrix)",
        "org.apache.commons.math3.linear.OpenMapRealMatrix#multiply(RealMatrix)"
    ],
    "org.apache.commons.math3.complex.Complex#readResolve()": ["org.apache.commons.math3.complex.Complex#createComplex(double,double)"],
    "org.apache.commons.math3.optimization.Weight#getWeight()": [
        "org.apache.commons.math3.linear.Array2DRowRealMatrix#copy()",
        "org.apache.commons.math3.linear.BlockRealMatrix#copy()",
        "org.apache.commons.math3.linear.DiagonalMatrix#copy()",
        "org.apache.commons.math3.linear.OpenMapRealMatrix#copy()"
    ],
    "org.apache.commons.math3.exception.NotANumberException#NotANumberException()": [
        "org.apache.commons.math3.exception.NotANumberException.<init>()",
        "org.apache.commons.math3.exception.util.LocalizedFormats.<staticinit>()"
    ],
    "org.apache.commons.math3.fraction.ProperBigFractionFormat#ProperBigFractionFormat()": [
        "org.apache.commons.math3.fraction.AbstractFormat.getDefaultNumberFormat()",
        "org.apache.commons.math3.fraction.ProperBigFractionFormat#ProperBigFractionFormat(NumberFormat)"
    ],
    "org.apache.commons.math3.ml.neuralnet.sofm.util.ExponentialDecayFunction#value(long)": ["org.apache.commons.math3.util.FastMath.exp(double)"],
    "org.apache.commons.math3.distribution.GammaDistribution#GammaDistribution(double,double)": [
        "org.apache.commons.math3.distribution.GammaDistribution#GammaDistribution(double,double,double)",
        "org.apache.commons.math3.distribution.GammaDistribution.<staticinit>()"
    ],
    "org.apache.commons.math3.optim.univariate.SimpleUnivariateValueChecker#SimpleUnivariateValueChecker(double,double)": [
        "org.apache.commons.math3.optim.AbstractConvergenceChecker#AbstractConvergenceChecker(double,double)",
        "org.apache.commons.math3.optim.univariate.SimpleUnivariateValueChecker.<init>()",
        "org.apache.commons.math3.optim.univariate.SimpleUnivariateValueChecker.<staticinit>()"
    ],
    "org.apache.commons.math3.distribution.ChiSquaredDistribution#ChiSquaredDistribution(double,double)": [
        "org.apache.commons.math3.distribution.ChiSquaredDistribution#ChiSquaredDistribution(RandomGenerator,double,double)",
        "org.apache.commons.math3.distribution.ChiSquaredDistribution.<staticinit>()",
        "org.apache.commons.math3.random.Well19937c#Well19937c()"
    ],
    "org.apache.commons.math3.analysis.solvers.PegasusSolver#PegasusSolver(double,double,double)": [
        "org.apache.commons.math3.analysis.solvers.BaseSecantSolver.Method.<staticinit>()",
        "org.apache.commons.math3.analysis.solvers.BaseSecantSolver#BaseSecantSolver(double,double,double,Method)",
        "org.apache.commons.math3.analysis.solvers.PegasusSolver.<init>()"
    ],
    "org.apache.commons.math3.analysis.integration.gauss.GaussIntegratorFactory#legendre(int)": [
        "org.apache.commons.math3.analysis.integration.gauss.GaussIntegrator#GaussIntegrator(Pair<double[], double[]>)",
        "org.apache.commons.math3.analysis.integration.gauss.GaussIntegratorFactory.getRule(BaseRuleFactory<? extends Number>,int)"
    ],
    "org.apache.commons.math3.stat.descriptive.DescriptiveStatistics#DescriptiveStatistics(DescriptiveStatistics)": [
        "org.apache.commons.math3.stat.descriptive.DescriptiveStatistics.copy(DescriptiveStatistics,DescriptiveStatistics)",
        "org.apache.commons.math3.stat.descriptive.DescriptiveStatistics.<init>()"
    ],
    "org.apache.commons.math3.fraction.Fraction#percentageValue()": ["org.apache.commons.math3.fraction.Fraction#doubleValue()"],
    "org.apache.commons.math3.stat.correlation.PearsonsCorrelation#PearsonsCorrelation()": ["org.apache.commons.math3.stat.correlation.PearsonsCorrelation.<init>()"],
    "org.apache.commons.math3.analysis.solvers.BaseSecantSolver#solve(int,UnivariateFunction,double,double,double)": [
        "org.apache.commons.math3.analysis.solvers.AllowedSolution.<staticinit>()",
        "org.apache.commons.math3.analysis.solvers.BaseSecantSolver#solve(int,UnivariateFunction,double,double,double,AllowedSolution)"
    ],
    "org.apache.commons.math3.distribution.ExponentialDistribution#sample()": [
        "org.apache.commons.math3.random.SynchronizedRandomGenerator#nextDouble()",
        "org.apache.commons.math3.random.RandomGeneratorFactory.createRandomGenerator(Random)$RandomGenerator$1#nextDouble()",
        "org.apache.commons.math3.random.RandomAdaptor#nextDouble()",
        "org.apache.commons.math3.random.BitsStreamGenerator#nextDouble()",
        "org.apache.commons.math3.distribution.ExponentialDistribution.<staticinit>()"
    ],
    "org.apache.commons.math3.analysis.differentiation.DerivativeStructure#signum()": [
        "org.apache.commons.math3.analysis.differentiation.DSCompiler#getOrder()",
        "org.apache.commons.math3.analysis.differentiation.DSCompiler#getFreeParameters()",
        "org.apache.commons.math3.util.FastMath.signum(double)",
        "org.apache.commons.math3.analysis.differentiation.DerivativeStructure#DerivativeStructure(int,int,double[]...)"
    ],
    "org.apache.commons.math3.util.IterationEvent#IterationEvent(Object,int)": ["org.apache.commons.math3.util.IterationEvent.<init>()"],
    "org.apache.commons.math3.userguide.sofm.ChineseRingsClassifier#createRandomIterator(long)": ["org.apache.commons.math3.userguide.sofm.ChineseRingsClassifier#createRandomIterator(long)$Iterator$1.<init>()"],
    "org.apache.commons.math3.geometry.spherical.oned.ArcsSet#getLastLeaf(BSPTree<Sphere1D>)": [
        "org.apache.commons.math3.geometry.partitioning.BSPTree#getCut()",
        "org.apache.commons.math3.geometry.spherical.oned.ArcsSet#leafAfter(BSPTree<Sphere1D>)",
        "org.apache.commons.math3.geometry.spherical.oned.ArcsSet#nextInternalNode(BSPTree<Sphere1D>)"
    ],
    "org.apache.commons.math3.optimization.direct.NelderMeadSimplex#NelderMeadSimplex(int)": ["org.apache.commons.math3.optimization.direct.NelderMeadSimplex#NelderMeadSimplex(int,double)"],
    "org.apache.commons.math3.linear.BlockFieldMatrix#walkInOptimizedOrder(FieldMatrixChangingVisitor<T extends FieldElement>,int,int,int,int)": [
        "org.apache.commons.math3.linear.BlockFieldMatrix#blockWidth(int)",
        "org.apache.commons.math3.linear.DefaultFieldMatrixChangingVisitor#start(int,int,int,int,int,int)",
        "org.apache.commons.math3.linear.DefaultFieldMatrixChangingVisitor#visit(int,int,T extends FieldElement)",
        "org.apache.commons.math3.util.FastMath.max(int,int)",
        "org.apache.commons.math3.linear.AbstractFieldMatrix#checkSubMatrixIndex(int,int,int,int)",
        "org.apache.commons.math3.linear.AbstractFieldMatrix#getSubMatrix(int[],int[])$DefaultFieldMatrixChangingVisitor$1#visit(int,int,T extends FieldElement)",
        "org.apache.commons.math3.linear.BlockFieldMatrix.<staticinit>()",
        "org.apache.commons.math3.linear.DefaultFieldMatrixChangingVisitor#end()",
        "org.apache.commons.math3.util.FastMath.min(int,int)"
    ],
    "org.apache.commons.math3.optimization.SimplePointChecker#SimplePointChecker()": [
        "org.apache.commons.math3.optimization.AbstractConvergenceChecker#AbstractConvergenceChecker()",
        "org.apache.commons.math3.optimization.SimplePointChecker.<staticinit>()",
        "org.apache.commons.math3.optimization.SimplePointChecker.<init>()"
    ],
    "org.apache.commons.math3.util.ResizableDoubleArray.copy(ResizableDoubleArray,ResizableDoubleArray)": ["org.apache.commons.math3.util.MathUtils.checkNotNull(Object)"],
    "org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D.dotProduct(FieldVector3D<T extends RealFieldElement>,Vector3D)": ["org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D#dotProduct(Vector3D)"],
    "org.apache.commons.math3.distribution.FDistribution#getNumericalMean()": ["org.apache.commons.math3.distribution.FDistribution#getDenominatorDegreesOfFreedom()"],
    "org.apache.commons.math3.analysis.interpolation.BicubicSplineFunction#BicubicSplineFunction(double[],boolean)$BivariateFunction$2#value(double,double)": ["org.apache.commons.math3.analysis.interpolation.BicubicSplineFunction#apply(double[],double[],double[][])"],
    "org.apache.commons.math3.geometry.euclidean.threed.SubLine#intersection(SubLine,boolean)": [
        "org.apache.commons.math3.geometry.euclidean.threed.Line#toSubSpace(Point<Euclidean3D>)",
        "org.apache.commons.math3.geometry.partitioning.AbstractRegion#checkPoint(Point<S extends Space>)",
        "org.apache.commons.math3.geometry.euclidean.threed.Line#intersection(Line)",
        "org.apache.commons.math3.geometry.partitioning.Region.Location.<staticinit>()"
    ],
    "org.apache.commons.math3.util.FastMath.sinh(double)": [
        "org.apache.commons.math3.util.FastMath.exp(double)",
        "org.apache.commons.math3.util.FastMath.expm1(double,double[])",
        "org.apache.commons.math3.util.FastMath.<staticinit>()",
        "org.apache.commons.math3.util.FastMath.exp(double,double,double[])"
    ],
    "org.apache.commons.math3.userguide.genetics.ImageEvolutionExample.getInitialPopulation()": [
        "org.apache.commons.math3.userguide.genetics.PolygonChromosome.randomChromosome(int,int)",
        "org.apache.commons.math3.userguide.genetics.ImageEvolutionExample.<staticinit>()",
        "org.apache.commons.math3.genetics.ElitisticListPopulation#ElitisticListPopulation(List<Chromosome>,int,double)"
    ],
    "org.apache.commons.math3.analysis.differentiation.SparseGradient#add(double)": ["org.apache.commons.math3.analysis.differentiation.SparseGradient#SparseGradient(double,Map<Integer, Double>)"],
    "org.apache.commons.math3.linear.RealVector#mapSubtractToSelf(double)": [
        "org.apache.commons.math3.linear.RealVector#mapAddToSelf(double)",
        "org.apache.commons.math3.linear.OpenMapRealVector#mapAddToSelf(double)",
        "org.apache.commons.math3.linear.ArrayRealVector#mapAddToSelf(double)",
        "org.apache.commons.math3.linear.RealVector.unmodifiableRealVector(RealVector)$RealVector$1#mapAddToSelf(double)"
    ],
    "org.apache.commons.math3.stat.descriptive.SynchronizedSummaryStatistics#SynchronizedSummaryStatistics(SynchronizedSummaryStatistics)": [
        "org.apache.commons.math3.stat.descriptive.SynchronizedSummaryStatistics.copy(SynchronizedSummaryStatistics,SynchronizedSummaryStatistics)",
        "org.apache.commons.math3.stat.descriptive.SummaryStatistics#SummaryStatistics()",
        "org.apache.commons.math3.stat.descriptive.SynchronizedSummaryStatistics.<init>()"
    ],
    "org.apache.commons.math3.util.FastMathCalc.slowSin(double,double[])": [
        "org.apache.commons.math3.util.FastMathCalc.split(double,double[])",
        "org.apache.commons.math3.util.FastMathCalc.splitAdd(double[],double[],double[])",
        "org.apache.commons.math3.util.FastMathCalc.<staticinit>()",
        "org.apache.commons.math3.util.FastMathCalc.splitMult(double[],double[],double[])",
        "org.apache.commons.math3.util.FastMathCalc.splitReciprocal(double[],double[])"
    ],
    "org.apache.commons.math3.geometry.partitioning.utilities.OrderedTuple#compareTo(OrderedTuple)": [
        "org.apache.commons.math3.util.FastMath.min(int,int)",
        "org.apache.commons.math3.geometry.partitioning.utilities.OrderedTuple#encode(int)"
    ],
    "org.apache.commons.math3.analysis.function.Min#value(double,double)": ["org.apache.commons.math3.util.FastMath.min(double,double)"],
    "org.apache.commons.math3.random.ISAACRandom#ISAACRandom(int[])": [
        "org.apache.commons.math3.random.ISAACRandom.<init>()",
        "org.apache.commons.math3.random.BitsStreamGenerator#BitsStreamGenerator()",
        "org.apache.commons.math3.random.ISAACRandom#setSeed(int[])"
    ],
    "org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D#FieldVector3D(T extends RealFieldElement,Vector3D,T extends RealFieldElement,Vector3D,T extends RealFieldElement,Vector3D)": [
        "org.apache.commons.math3.geometry.euclidean.threed.Vector3D#getX()",
        "org.apache.commons.math3.geometry.euclidean.threed.Vector3D#getZ()",
        "org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D.<init>()",
        "org.apache.commons.math3.geometry.euclidean.threed.Vector3D#getY()"
    ],
    "org.apache.commons.math3.analysis.interpolation.TricubicSplineFunction#value(double,double,double)": ["org.apache.commons.math3.analysis.interpolation.TricubicSplineFunction.<staticinit>()"],
    "org.apache.commons.math3.userguide.filter.CannonballExample.main(String[])": [
        "org.apache.commons.math3.userguide.filter.CannonballExample.Display#Display()",
        "org.apache.commons.math3.userguide.ExampleUtils.showExampleFrame(ExampleFrame)"
    ],
    "org.apache.commons.math3.analysis.solvers.FieldBracketingNthOrderBrentSolver#FieldBracketingNthOrderBrentSolver(T extends RealFieldElement,T extends RealFieldElement,T extends RealFieldElement,int)": [
        "org.apache.commons.math3.analysis.solvers.FieldBracketingNthOrderBrentSolver.<init>()",
        "org.apache.commons.math3.util.IntegerSequence.Incrementor.create()"
    ],
    "org.apache.commons.math3.ml.clustering.KMeansPlusPlusClusterer#cluster(Collection<T extends Clusterable>)": [
        "org.apache.commons.math3.util.MathUtils.checkNotNull(Object)",
        "org.apache.commons.math3.ml.clustering.CentroidCluster#CentroidCluster(Clusterable)",
        "org.apache.commons.math3.ml.clustering.KMeansPlusPlusClusterer#getFarthestPoint(Collection<CentroidCluster<T extends Clusterable>>)",
        "org.apache.commons.math3.exception.util.LocalizedFormats.<staticinit>()",
        "org.apache.commons.math3.ml.clustering.DoublePoint#getPoint()",
        "org.apache.commons.math3.ml.clustering.KMeansPlusPlusClusterer#assignPointsToClusters(List<CentroidCluster<T extends Clusterable>>,Collection<T extends Clusterable>,int[])",
        "org.apache.commons.math3.ml.clustering.KMeansPlusPlusClusterer#centroidOf(Collection<T extends Clusterable>,int)",
        "org.apache.commons.math3.ml.clustering.CentroidCluster#getCenter()",
        "org.apache.commons.math3.ml.clustering.KMeansPlusPlusClusterer#getPointFromLargestNumberCluster(Collection<? extends Cluster<T extends Clusterable>>)",
        "org.apache.commons.math3.ml.clustering.KMeansPlusPlusClusterer#chooseInitialCenters(Collection<T extends Clusterable>)",
        "org.apache.commons.math3.ml.clustering.KMeansPlusPlusClusterer#getPointFromLargestVarianceCluster(Collection<CentroidCluster<T extends Clusterable>>)",
        "org.apache.commons.math3.ml.clustering.Cluster#getPoints()",
        "org.apache.commons.math3.ml.clustering.KMeansPlusPlusClusterer.EmptyClusterStrategy.<staticinit>()"
    ],
    "org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D#distanceInf(Vector3D)": [
        "org.apache.commons.math3.geometry.euclidean.threed.Vector3D#getZ()",
        "org.apache.commons.math3.geometry.euclidean.threed.Vector3D#getY()",
        "org.apache.commons.math3.geometry.euclidean.threed.Vector3D#getX()"
    ],
    "org.apache.commons.math3.optimization.direct.CMAESOptimizer.triu(RealMatrix,int)": [
        "org.apache.commons.math3.linear.DiagonalMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.Array2DRowRealMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.BlockFieldMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.SparseFieldMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.DiagonalMatrix#getEntry(int,int)",
        "org.apache.commons.math3.linear.OpenMapRealMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.OpenMapRealMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.DiagonalMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.OpenMapRealMatrix#getEntry(int,int)",
        "org.apache.commons.math3.linear.Array2DRowFieldMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.Array2DRowRealMatrix#Array2DRowRealMatrix(double[][],boolean)",
        "org.apache.commons.math3.linear.BlockRealMatrix#getEntry(int,int)",
        "org.apache.commons.math3.linear.SparseFieldMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.BlockFieldMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.BlockRealMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.Array2DRowRealMatrix#getEntry(int,int)",
        "org.apache.commons.math3.linear.Array2DRowRealMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.Array2DRowFieldMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.BlockRealMatrix#getColumnDimension()"
    ],
    "org.apache.commons.math3.util.MathArrays.checkOrder(double[],OrderDirection,boolean,boolean)": [
        "org.apache.commons.math3.exception.MathInternalError#MathInternalError()",
        "org.apache.commons.math3.util.MathArrays.OrderDirection.<staticinit>()"
    ],
    "org.apache.commons.math3.linear.ArrayFieldVector#equals(Object)": [
        "org.apache.commons.math3.linear.SparseFieldVector#getDimension()",
        "org.apache.commons.math3.linear.ArrayFieldVector#getEntry(int)",
        "org.apache.commons.math3.linear.ArrayFieldVector#getDimension()",
        "org.apache.commons.math3.linear.SparseFieldVector#getEntry(int)"
    ],
    "org.apache.commons.math3.fitting.GaussianFitter.ParameterGuesser#getInterpolationPointsForY(WeightedObservedPoint[],int,int,double)": [
        "org.apache.commons.math3.fitting.GaussianFitter.ParameterGuesser#isBetween(double,double,double)",
        "org.apache.commons.math3.fitting.WeightedObservedPoint#getY()",
        "org.apache.commons.math3.exception.ZeroException#ZeroException()"
    ],
    "org.apache.commons.math3.geometry.partitioning.RegionFactory.DifferenceMerger#DifferenceMerger(Region<S extends Space>,Region<S extends Space>)": [
        "org.apache.commons.math3.geometry.partitioning.AbstractRegion#copySelf()",
        "org.apache.commons.math3.geometry.partitioning.RegionFactory.DifferenceMerger.<init>()"
    ],
    "org.apache.commons.math3.complex.ComplexFormat.getInstance()": ["org.apache.commons.math3.complex.ComplexFormat.getInstance(Locale)"],
    "org.apache.commons.math3.stat.descriptive.SynchronizedSummaryStatistics#getSum()": ["org.apache.commons.math3.stat.descriptive.SummaryStatistics#getSum()"],
    "org.apache.commons.math3.ode.sampling.AbstractStepInterpolator#finalizeStep()": [
        "org.apache.commons.math3.ode.sampling.AbstractStepInterpolator#doFinalize()",
        "org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator#doFinalize()"
    ],
    "org.apache.commons.math3.distribution.EnumeratedIntegerDistribution#EnumeratedIntegerDistribution(int[])": [
        "org.apache.commons.math3.distribution.EnumeratedIntegerDistribution#EnumeratedIntegerDistribution(RandomGenerator,int[])",
        "org.apache.commons.math3.random.Well19937c#Well19937c()"
    ],
    "org.apache.commons.math3.transform.TransformUtils.createRealImaginaryArray(Complex[])": [
        "org.apache.commons.math3.complex.Complex#getImaginary()",
        "org.apache.commons.math3.complex.Complex#getReal()"
    ],
    "org.apache.commons.math3.analysis.differentiation.SparseGradient#atanh()": [
        "org.apache.commons.math3.analysis.differentiation.SparseGradient#SparseGradient(double,double,Map<Integer, Double>)",
        "org.apache.commons.math3.util.FastMath.atanh(double)"
    ],
    "org.apache.commons.math3.linear.PreconditionedIterativeLinearSolver#solve(RealLinearOperator,RealVector,RealVector)": [
        "org.apache.commons.math3.linear.ArrayRealVector#copy()",
        "org.apache.commons.math3.linear.RealVector.unmodifiableRealVector(RealVector)$RealVector$1#copy()",
        "org.apache.commons.math3.util.MathUtils.checkNotNull(Object)",
        "org.apache.commons.math3.linear.ConjugateGradient#solveInPlace(RealLinearOperator,RealLinearOperator,RealVector,RealVector)",
        "org.apache.commons.math3.linear.SymmLQ#solveInPlace(RealLinearOperator,RealLinearOperator,RealVector,RealVector)",
        "org.apache.commons.math3.linear.OpenMapRealVector#copy()"
    ],
    "org.apache.commons.math3.geometry.euclidean.threed.Plane#getOffset(Vector<Euclidean3D>)": ["org.apache.commons.math3.geometry.euclidean.threed.Plane#getOffset(Point<Euclidean3D>)"],
    "org.apache.commons.math3.fitting.leastsquares.LevenbergMarquardtOptimizer#withParameterRelativeTolerance(double)": ["org.apache.commons.math3.fitting.leastsquares.LevenbergMarquardtOptimizer#LevenbergMarquardtOptimizer(double,double,double,double,double)"],
    "org.apache.commons.math3.analysis.polynomials.PolynomialFunctionNewtonForm.verifyInputArray(double[],double[])": [
        "org.apache.commons.math3.exception.NoDataException#NoDataException(Localizable)",
        "org.apache.commons.math3.exception.DimensionMismatchException#DimensionMismatchException(Localizable,int,int)",
        "org.apache.commons.math3.util.MathUtils.checkNotNull(Object)",
        "org.apache.commons.math3.exception.util.LocalizedFormats.<staticinit>()"
    ],
    "org.apache.commons.math3.geometry.spherical.twod.SphericalPolygonsSet#SphericalPolygonsSet(double)": [
        "org.apache.commons.math3.geometry.spherical.twod.SphericalPolygonsSet.<init>()",
        "org.apache.commons.math3.geometry.partitioning.AbstractRegion#AbstractRegion(double)"
    ],
    "org.apache.commons.math3.genetics.RandomKey#checkValidity(List<Double>)": ["org.apache.commons.math3.exception.util.LocalizedFormats.<staticinit>()"],
    "org.apache.commons.math3.util.FastMathCalc.buildSinCosTables(double[],double[],double[],double[],int,double[],double[])": [
        "org.apache.commons.math3.util.FastMathCalc.splitAdd(double[],double[],double[])",
        "org.apache.commons.math3.util.FastMathCalc.splitMult(double[],double[],double[])",
        "org.apache.commons.math3.util.FastMathCalc.slowSin(double,double[])",
        "org.apache.commons.math3.util.FastMathCalc.splitReciprocal(double[],double[])",
        "org.apache.commons.math3.util.FastMathCalc.slowCos(double,double[])"
    ],
    "org.apache.commons.math3.linear.SymmLQ#solveInPlace(RealLinearOperator,RealLinearOperator,RealVector,RealVector,boolean,double)": [
        "org.apache.commons.math3.util.IterationManager#fireInitializationEvent(IterationEvent)",
        "org.apache.commons.math3.linear.SymmLQ.State#betaEqualsZero()",
        "org.apache.commons.math3.util.IterationManager#fireIterationStartedEvent(IterationEvent)",
        "org.apache.commons.math3.util.IterationManager#fireTerminationEvent(IterationEvent)",
        "org.apache.commons.math3.linear.SymmLQ.State#bEqualsNullVector()",
        "org.apache.commons.math3.linear.SymmLQ.State#update()",
        "org.apache.commons.math3.linear.SymmLQ.State#init()",
        "org.apache.commons.math3.linear.IterativeLinearSolver#getIterationManager()",
        "org.apache.commons.math3.util.IterationManager#resetIterationCount()",
        "org.apache.commons.math3.linear.SymmLQ.State#hasConverged()",
        "org.apache.commons.math3.linear.SymmLQ.State#getNormOfResidual()",
        "org.apache.commons.math3.util.IterationManager#incrementIterationCount()",
        "org.apache.commons.math3.linear.SymmLQ.State#State(RealLinearOperator,RealLinearOperator,RealVector,boolean,double,double,boolean)",
        "org.apache.commons.math3.util.IterationManager#getIterations()",
        "org.apache.commons.math3.util.IterationManager#fireIterationPerformedEvent(IterationEvent)",
        "org.apache.commons.math3.linear.PreconditionedIterativeLinearSolver.checkParameters(RealLinearOperator,RealLinearOperator,RealVector,RealVector)",
        "org.apache.commons.math3.linear.SymmLQ.State#refineSolution(RealVector)",
        "org.apache.commons.math3.linear.DefaultIterativeLinearSolverEvent#DefaultIterativeLinearSolverEvent(Object,int,RealVector,RealVector,double)"
    ],
    "org.apache.commons.math3.optimization.direct.CMAESOptimizer.repmat(RealMatrix,int,int)": [
        "org.apache.commons.math3.linear.DiagonalMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.Array2DRowRealMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.BlockFieldMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.SparseFieldMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.DiagonalMatrix#getEntry(int,int)",
        "org.apache.commons.math3.linear.OpenMapRealMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.OpenMapRealMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.DiagonalMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.OpenMapRealMatrix#getEntry(int,int)",
        "org.apache.commons.math3.linear.Array2DRowRealMatrix#Array2DRowRealMatrix(double[][],boolean)",
        "org.apache.commons.math3.linear.BlockRealMatrix#getEntry(int,int)",
        "org.apache.commons.math3.linear.Array2DRowFieldMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.BlockFieldMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.SparseFieldMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.Array2DRowRealMatrix#getEntry(int,int)",
        "org.apache.commons.math3.linear.BlockRealMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.Array2DRowRealMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.Array2DRowFieldMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.BlockRealMatrix#getColumnDimension()"
    ],
    "org.apache.commons.math3.stat.descriptive.summary.Sum#evaluate(double[],double[])": ["org.apache.commons.math3.stat.descriptive.summary.Sum#evaluate(double[],double[],int,int)"],
    "org.apache.commons.math3.analysis.differentiation.FiniteDifferencesDifferentiator#differentiate(UnivariateFunction)": ["org.apache.commons.math3.analysis.differentiation.FiniteDifferencesDifferentiator#differentiate(UnivariateFunction)$UnivariateDifferentiableFunction$1.<init>()"],
    "org.apache.commons.math3.stat.descriptive.moment.Variance#evaluate(double[],double[],double,int,int)": ["org.apache.commons.math3.stat.descriptive.AbstractUnivariateStatistic#test(double[],double[],int,int)"],
    "org.apache.commons.math3.optim.nonlinear.vector.JacobianMultivariateVectorOptimizer#optimize(OptimizationData[]...)": ["org.apache.commons.math3.optim.nonlinear.vector.MultivariateVectorOptimizer#optimize(OptimizationData[]...)"],
    "org.apache.commons.math3.optimization.linear.SimplexTableau#getSlackVariableOffset()": ["org.apache.commons.math3.optimization.linear.SimplexTableau#getNumObjectiveFunctions()"],
    "org.apache.commons.math3.random.AbstractWell#setSeed(int[])": [
        "org.apache.commons.math3.util.FastMath.min(int,int)",
        "org.apache.commons.math3.random.BitsStreamGenerator#clear()",
        "org.apache.commons.math3.random.AbstractWell#setSeed(long)"
    ],
    "org.apache.commons.math3.analysis.differentiation.DSCompiler#pow(double[],int,double[],int,double[],int)": [
        "org.apache.commons.math3.analysis.differentiation.DSCompiler#getSize()",
        "org.apache.commons.math3.analysis.differentiation.DSCompiler#log(double[],int,double[],int)",
        "org.apache.commons.math3.analysis.differentiation.DSCompiler#multiply(double[],int,double[],int,double[],int)",
        "org.apache.commons.math3.analysis.differentiation.DSCompiler#exp(double[],int,double[],int)"
    ],
    "org.apache.commons.math3.geometry.euclidean.threed.Rotation#applyTo(Rotation)": [
        "org.apache.commons.math3.geometry.euclidean.threed.RotationConvention.<staticinit>()",
        "org.apache.commons.math3.geometry.euclidean.threed.Rotation#compose(Rotation,RotationConvention)"
    ],
    "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer#updateEvolutionPaths(RealMatrix,RealMatrix)": [
        "org.apache.commons.math3.linear.AbstractRealMatrix#getFrobeniusNorm()",
        "org.apache.commons.math3.linear.AbstractRealMatrix#subtract(RealMatrix)",
        "org.apache.commons.math3.linear.BlockRealMatrix#scalarMultiply(double)",
        "org.apache.commons.math3.linear.BlockRealMatrix#getFrobeniusNorm()",
        "org.apache.commons.math3.linear.OpenMapRealMatrix#multiply(RealMatrix)",
        "org.apache.commons.math3.util.FastMath.pow(double,int)",
        "org.apache.commons.math3.linear.BlockRealMatrix#subtract(RealMatrix)",
        "org.apache.commons.math3.linear.OpenMapRealMatrix#subtract(RealMatrix)",
        "org.apache.commons.math3.linear.AbstractRealMatrix#multiply(RealMatrix)",
        "org.apache.commons.math3.util.FastMath.sqrt(double)",
        "org.apache.commons.math3.linear.AbstractRealMatrix#scalarMultiply(double)",
        "org.apache.commons.math3.linear.BlockRealMatrix#add(RealMatrix)",
        "org.apache.commons.math3.linear.AbstractRealMatrix#add(RealMatrix)",
        "org.apache.commons.math3.linear.DiagonalMatrix#multiply(RealMatrix)",
        "org.apache.commons.math3.linear.BlockRealMatrix#multiply(RealMatrix)"
    ],
    "org.apache.commons.math3.util.Decimal64#pow(double)": [
        "org.apache.commons.math3.util.Decimal64#Decimal64(double)",
        "org.apache.commons.math3.util.FastMath.pow(double,double)"
    ],
    "org.apache.commons.math3.optimization.direct.SimplexOptimizer#SimplexOptimizer()": [
        "org.apache.commons.math3.optimization.direct.SimplexOptimizer#SimplexOptimizer(ConvergenceChecker<PointValuePair>)",
        "org.apache.commons.math3.optimization.SimpleValueChecker#SimpleValueChecker()"
    ],
    "org.apache.commons.math3.stat.descriptive.summary.SumOfLogs#SumOfLogs()": [
        "org.apache.commons.math3.stat.descriptive.summary.SumOfLogs.<init>()",
        "org.apache.commons.math3.stat.descriptive.AbstractStorelessUnivariateStatistic.<init>()"
    ],
    "org.apache.commons.math3.stat.descriptive.AbstractStorelessUnivariateStatistic#incrementAll(double[])": [
        "org.apache.commons.math3.stat.descriptive.AbstractStorelessUnivariateStatistic#incrementAll(double[],int,int)",
        "org.apache.commons.math3.exception.util.LocalizedFormats.<staticinit>()"
    ],
    "org.apache.commons.math3.userguide.filter.ConstantVoltageExample.VoltMeter#step()": [
        "org.apache.commons.math3.random.RandomAdaptor#nextGaussian()",
        "org.apache.commons.math3.random.SynchronizedRandomGenerator#nextGaussian()",
        "org.apache.commons.math3.random.RandomGeneratorFactory.createRandomGenerator(Random)$RandomGenerator$1#nextGaussian()",
        "org.apache.commons.math3.random.BitsStreamGenerator#nextGaussian()",
        "org.apache.commons.math3.random.AbstractRandomGenerator#nextGaussian()"
    ],
    "org.apache.commons.math3.util.MathArrays.isMonotonic(double[],OrderDirection,boolean)": ["org.apache.commons.math3.util.MathArrays.checkOrder(double[],OrderDirection,boolean,boolean)"],
    "org.apache.commons.math3.optimization.direct.BaseAbstractMultivariateVectorOptimizer#optimize(int,FUNC extends MultivariateVectorFunction,OptimizationData[]...)": ["org.apache.commons.math3.optimization.direct.BaseAbstractMultivariateVectorOptimizer#optimizeInternal(int,FUNC extends MultivariateVectorFunction,OptimizationData[]...)"],
    "org.apache.commons.math3.genetics.CycleCrossover#crossover(Chromosome,Chromosome)": [
        "org.apache.commons.math3.genetics.CycleCrossover#mate(AbstractListChromosome<T>,AbstractListChromosome<T>)",
        "org.apache.commons.math3.exception.util.LocalizedFormats.<staticinit>()"
    ],
    "org.apache.commons.math3.geometry.euclidean.threed.Plane#contains(Vector3D)": [
        "org.apache.commons.math3.util.FastMath.abs(double)",
        "org.apache.commons.math3.geometry.euclidean.threed.Plane#getOffset(Vector<Euclidean3D>)"
    ],
    "org.apache.commons.math3.ode.AbstractIntegrator#computeDerivatives(double,double[],double[])": [
        "org.apache.commons.math3.util.IntegerSequence.Incrementor#increment()",
        "org.apache.commons.math3.ode.ExpandableStatefulODE#computeDerivatives(double,double[],double[])"
    ],
    "org.apache.commons.math3.random.ValueServer#ValueServer(RandomDataImpl)": [
        "org.apache.commons.math3.random.RandomDataImpl#getDelegate()",
        "org.apache.commons.math3.random.ValueServer.<init>()"
    ],
    "org.apache.commons.math3.genetics.FixedGenerationCount#FixedGenerationCount(int)": ["org.apache.commons.math3.genetics.FixedGenerationCount.<init>()"],
    "org.apache.commons.math3.stat.descriptive.DescriptiveStatistics#getKurtosis()": [
        "org.apache.commons.math3.stat.descriptive.DescriptiveStatistics#apply(UnivariateStatistic)",
        "org.apache.commons.math3.stat.descriptive.SynchronizedDescriptiveStatistics#apply(UnivariateStatistic)"
    ],
    "org.apache.commons.math3.linear.BlockFieldMatrix.toBlocksLayout(T extends FieldElement[][])": [
        "org.apache.commons.math3.exception.DimensionMismatchException#DimensionMismatchException(int,int)",
        "org.apache.commons.math3.util.MathArrays.buildArray(Field<T>,int,int)",
        "org.apache.commons.math3.linear.BlockFieldMatrix.<staticinit>()",
        "org.apache.commons.math3.util.MathArrays.buildArray(Field<T>,int)",
        "org.apache.commons.math3.util.FastMath.min(int,int)",
        "org.apache.commons.math3.linear.AbstractFieldMatrix.extractField(T extends FieldElement[][])"
    ],
    "org.apache.commons.math3.random.SynchronizedRandomGenerator#nextDouble()": [
        "org.apache.commons.math3.random.SynchronizedRandomGenerator#nextDouble()",
        "org.apache.commons.math3.random.RandomGeneratorFactory.createRandomGenerator(Random)$RandomGenerator$1#nextDouble()",
        "org.apache.commons.math3.random.RandomAdaptor#nextDouble()",
        "org.apache.commons.math3.random.BitsStreamGenerator#nextDouble()"
    ],
    "org.apache.commons.math3.optim.BaseMultiStartMultivariateOptimizer#optimize(OptimizationData[]...)": ["org.apache.commons.math3.optim.BaseMultivariateOptimizer#optimize(OptimizationData[]...)"],
    "org.apache.commons.math3.linear.RealVector#outerProduct(RealVector)": [
        "org.apache.commons.math3.linear.OpenMapRealVector#getDimension()",
        "org.apache.commons.math3.linear.Array2DRowRealMatrix#setEntry(int,int,double)",
        "org.apache.commons.math3.linear.ArrayRealVector#getDimension()",
        "org.apache.commons.math3.linear.OpenMapRealMatrix#OpenMapRealMatrix(int,int)",
        "org.apache.commons.math3.linear.BlockRealMatrix#setEntry(int,int,double)",
        "org.apache.commons.math3.linear.OpenMapRealMatrix#setEntry(int,int,double)",
        "org.apache.commons.math3.linear.Array2DRowRealMatrix#Array2DRowRealMatrix(int,int)",
        "org.apache.commons.math3.linear.ArrayRealVector#getEntry(int)",
        "org.apache.commons.math3.linear.RealVector.unmodifiableRealVector(RealVector)$RealVector$1#getDimension()",
        "org.apache.commons.math3.linear.OpenMapRealVector#getEntry(int)",
        "org.apache.commons.math3.linear.DiagonalMatrix#setEntry(int,int,double)",
        "org.apache.commons.math3.linear.RealVector.unmodifiableRealVector(RealVector)$RealVector$1#getEntry(int)"
    ],
    "org.apache.commons.math3.stat.descriptive.SynchronizedSummaryStatistics#getPopulationVariance()": ["org.apache.commons.math3.stat.descriptive.SummaryStatistics#getPopulationVariance()"],
    "org.apache.commons.math3.genetics.RandomKey#RandomKey(Double[])": ["org.apache.commons.math3.genetics.RandomKey#RandomKey(List<Double>)"],
    "org.apache.commons.math3.analysis.interpolation.BicubicFunction#value(double,double)": ["org.apache.commons.math3.analysis.interpolation.BicubicFunction#apply(double[],double[],double[][])"],
    "org.apache.commons.math3.analysis.solvers.IllinoisSolver#IllinoisSolver(double)": [
        "org.apache.commons.math3.analysis.solvers.BaseSecantSolver.Method.<staticinit>()",
        "org.apache.commons.math3.analysis.solvers.IllinoisSolver.<init>()",
        "org.apache.commons.math3.analysis.solvers.BaseSecantSolver#BaseSecantSolver(double,Method)"
    ],
    "org.apache.commons.math3.geometry.partitioning.Region#side(Hyperplane<S extends Space>)": ["org.apache.commons.math3.geometry.partitioning.Side.<staticinit>()"],
    "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.PowellOptimizer#PowellOptimizer(double,double,ConvergenceChecker<PointValuePair>)": [
        "org.apache.commons.math3.util.FastMath.sqrt(double)",
        "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.PowellOptimizer#PowellOptimizer(double,double,double,double,ConvergenceChecker<PointValuePair>)"
    ],
    "org.apache.commons.math3.ode.nonstiff.AdaptiveStepsizeFieldIntegrator#sanityChecks(FieldODEState<T extends RealFieldElement>,T extends RealFieldElement)": [
        "org.apache.commons.math3.exception.DimensionMismatchException#DimensionMismatchException(int,int)",
        "org.apache.commons.math3.ode.AbstractFieldIntegrator#sanityChecks(FieldODEState<T extends RealFieldElement>,T extends RealFieldElement)",
        "org.apache.commons.math3.ode.FieldODEState#getStateDimension()"
    ],
    "org.apache.commons.math3.linear.AbstractFieldMatrix#checkSubMatrixIndex(int[],int[])": [
        "org.apache.commons.math3.exception.NoDataException#NoDataException()",
        "org.apache.commons.math3.exception.NullArgumentException#NullArgumentException()",
        "org.apache.commons.math3.linear.AbstractFieldMatrix#checkColumnIndex(int)",
        "org.apache.commons.math3.linear.AbstractFieldMatrix#checkRowIndex(int)"
    ],
    "org.apache.commons.math3.ode.FieldExpandableODE#addSecondaryEquations(FieldSecondaryEquations<T extends RealFieldElement>)": ["org.apache.commons.math3.ode.FieldEquationsMapper#FieldEquationsMapper(FieldEquationsMapper<T extends RealFieldElement>,int)"],
    "org.apache.commons.math3.linear.AbstractFieldMatrix#getData()": [
        "org.apache.commons.math3.linear.SparseFieldMatrix#getEntry(int,int)",
        "org.apache.commons.math3.linear.SparseFieldMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.BlockFieldMatrix#getRowDimension()",
        "org.apache.commons.math3.util.MathArrays.buildArray(Field<T>,int,int)",
        "org.apache.commons.math3.linear.BlockFieldMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.SparseFieldMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.Array2DRowFieldMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.Array2DRowFieldMatrix#getEntry(int,int)",
        "org.apache.commons.math3.linear.BlockFieldMatrix#getEntry(int,int)",
        "org.apache.commons.math3.linear.Array2DRowFieldMatrix#getColumnDimension()"
    ],
    "org.apache.commons.math3.ode.ParameterizedWrapper#computeDerivatives(double,double[],double[])": [
        "org.apache.commons.math3.ode.MultistepIntegrator#start(double,double[],double)$FirstOrderDifferentialEquations$1#computeDerivatives(double,double[],double[])",
        "org.apache.commons.math3.ode.FirstOrderConverter#computeDerivatives(double,double[],double[])",
        "org.apache.commons.math3.ode.JacobianMatrices.MainStateJacobianWrapper#computeDerivatives(double,double[],double[])"
    ],
    "org.apache.commons.math3.analysis.polynomials.PolynomialSplineFunction#polynomialSplineDerivative()": [
        "org.apache.commons.math3.analysis.polynomials.PolynomialSplineFunction#PolynomialSplineFunction(double[],PolynomialFunction[])",
        "org.apache.commons.math3.analysis.polynomials.PolynomialFunction#polynomialDerivative()"
    ],
    "org.apache.commons.math3.linear.BiDiagonalTransformer#getB()": ["org.apache.commons.math3.linear.MatrixUtils.createRealMatrix(double[][])"],
    "org.apache.commons.math3.geometry.partitioning.utilities.AVLTree#size()": ["org.apache.commons.math3.geometry.partitioning.utilities.AVLTree.Node#size()"],
    "org.apache.commons.math3.optim.nonlinear.scalar.gradient.NonLinearConjugateGradientOptimizer#NonLinearConjugateGradientOptimizer(Formula,ConvergenceChecker<PointValuePair>)": [
        "org.apache.commons.math3.optim.nonlinear.scalar.gradient.NonLinearConjugateGradientOptimizer.IdentityPreconditioner.<init>()",
        "org.apache.commons.math3.optim.nonlinear.scalar.gradient.NonLinearConjugateGradientOptimizer#NonLinearConjugateGradientOptimizer(Formula,ConvergenceChecker<PointValuePair>,double,double,double,Preconditioner)",
        "org.apache.commons.math3.optim.nonlinear.scalar.gradient.NonLinearConjugateGradientOptimizer.Formula.<staticinit>()"
    ],
    "org.apache.commons.math3.ode.nonstiff.DormandPrince54FieldIntegrator#getB()": [
        "org.apache.commons.math3.ode.AbstractFieldIntegrator#getField()",
        "org.apache.commons.math3.util.BigRealField#getZero()",
        "org.apache.commons.math3.analysis.differentiation.SparseGradient#getField()$Field$1#getZero()",
        "org.apache.commons.math3.analysis.differentiation.DerivativeStructure#getField()$Field$1#getZero()",
        "org.apache.commons.math3.fraction.FractionField#getZero()",
        "org.apache.commons.math3.util.Decimal64Field#getZero()",
        "org.apache.commons.math3.ode.nonstiff.EmbeddedRungeKuttaFieldIntegrator#fraction(int,int)",
        "org.apache.commons.math3.dfp.DfpField#getZero()",
        "org.apache.commons.math3.complex.ComplexField#getZero()",
        "org.apache.commons.math3.fraction.BigFractionField#getZero()",
        "org.apache.commons.math3.util.MathArrays.buildArray(Field<T>,int)"
    ],
    "org.apache.commons.math3.ode.nonstiff.LutherStepInterpolator#LutherStepInterpolator(LutherStepInterpolator)": [
        "org.apache.commons.math3.ode.nonstiff.LutherStepInterpolator.<init>()",
        "org.apache.commons.math3.ode.nonstiff.RungeKuttaStepInterpolator#RungeKuttaStepInterpolator(RungeKuttaStepInterpolator)"
    ],
    "org.apache.commons.math3.linear.ArrayFieldVector#checkVectorDimensions(FieldVector<T extends FieldElement>)": [
        "org.apache.commons.math3.linear.SparseFieldVector#getDimension()",
        "org.apache.commons.math3.linear.ArrayFieldVector#checkVectorDimensions(int)",
        "org.apache.commons.math3.linear.ArrayFieldVector#getDimension()"
    ],
    "org.apache.commons.math3.optim.SimpleVectorValueChecker#SimpleVectorValueChecker(double,double)": [
        "org.apache.commons.math3.optim.AbstractConvergenceChecker#AbstractConvergenceChecker(double,double)",
        "org.apache.commons.math3.optim.SimpleVectorValueChecker.<init>()",
        "org.apache.commons.math3.optim.SimpleVectorValueChecker.<staticinit>()"
    ],
    "org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet.buildTree(double,double,double)": [
        "org.apache.commons.math3.geometry.euclidean.oned.OrientedPoint#wholeHyperplane()",
        "org.apache.commons.math3.geometry.euclidean.oned.Vector1D#Vector1D(double)",
        "org.apache.commons.math3.geometry.partitioning.BSPTree#BSPTree(Object)",
        "org.apache.commons.math3.geometry.partitioning.BSPTree#BSPTree(SubHyperplane<S extends Space>,BSPTree<S extends Space>,BSPTree<S extends Space>,Object)",
        "org.apache.commons.math3.geometry.euclidean.oned.OrientedPoint#OrientedPoint(Vector1D,boolean,double)"
    ],
    "org.apache.commons.math3.stat.descriptive.rank.Median#withNaNStrategy(NaNStrategy)": [
        "org.apache.commons.math3.stat.descriptive.rank.Percentile#getEstimationType()",
        "org.apache.commons.math3.stat.descriptive.rank.Percentile#getKthSelector()",
        "org.apache.commons.math3.stat.descriptive.rank.Median#Median(EstimationType,NaNStrategy,KthSelector)"
    ],
    "org.apache.commons.math3.exception.MathRuntimeException#getLocalizedMessage()": ["org.apache.commons.math3.exception.util.ExceptionContext#getLocalizedMessage()"],
    "org.apache.commons.math3.linear.AbstractFieldMatrix#walkInColumnOrder(FieldMatrixPreservingVisitor<T extends FieldElement>,int,int,int,int)": [
        "org.apache.commons.math3.linear.SparseFieldMatrix#getEntry(int,int)",
        "org.apache.commons.math3.linear.BlockFieldMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.SparseFieldMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.AbstractFieldMatrix#checkSubMatrixIndex(int,int,int,int)",
        "org.apache.commons.math3.linear.AbstractFieldMatrix#transpose()$DefaultFieldMatrixPreservingVisitor$1#visit(int,int,T extends FieldElement)",
        "org.apache.commons.math3.linear.DefaultFieldMatrixPreservingVisitor#start(int,int,int,int,int,int)",
        "org.apache.commons.math3.linear.Array2DRowFieldMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.SparseFieldMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.BlockFieldMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.DefaultFieldMatrixPreservingVisitor#end()",
        "org.apache.commons.math3.linear.MatrixUtils.FractionMatrixConverter#start(int,int,int,int,int,int)",
        "org.apache.commons.math3.linear.DefaultFieldMatrixPreservingVisitor#visit(int,int,T extends FieldElement)",
        "org.apache.commons.math3.linear.MatrixUtils.BigFractionMatrixConverter#start(int,int,int,int,int,int)",
        "org.apache.commons.math3.linear.Array2DRowFieldMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.AbstractFieldMatrix#copySubMatrix(int,int,int,int,T extends FieldElement[][])$DefaultFieldMatrixPreservingVisitor$1#start(int,int,int,int,int,int)",
        "org.apache.commons.math3.linear.Array2DRowFieldMatrix#getEntry(int,int)",
        "org.apache.commons.math3.ode.nonstiff.AdamsMoultonFieldIntegrator.Corrector#start(int,int,int,int,int,int)",
        "org.apache.commons.math3.linear.BlockFieldMatrix#getEntry(int,int)",
        "org.apache.commons.math3.ode.nonstiff.AdamsMoultonFieldIntegrator.Corrector#end()",
        "org.apache.commons.math3.linear.AbstractFieldMatrix#copySubMatrix(int,int,int,int,T extends FieldElement[][])$DefaultFieldMatrixPreservingVisitor$1#visit(int,int,T extends FieldElement)"
    ],
    "org.apache.commons.math3.geometry.euclidean.threed.Plane#Plane(Vector3D,Vector3D,Vector3D,double)": [
        "org.apache.commons.math3.geometry.euclidean.threed.Plane#Plane(Vector3D,Vector3D,double)",
        "org.apache.commons.math3.geometry.euclidean.threed.Vector3D#crossProduct(Vector<Euclidean3D>)",
        "org.apache.commons.math3.geometry.euclidean.threed.Vector3D#subtract(Vector<Euclidean3D>)"
    ],
    "org.apache.commons.math3.special.Beta.logGammaMinusLogGammaSum(double,double)": [
        "org.apache.commons.math3.special.Beta.deltaMinusDeltaSum(double,double)",
        "org.apache.commons.math3.util.FastMath.log1p(double)",
        "org.apache.commons.math3.util.FastMath.log(double)"
    ],
    "org.apache.commons.math3.linear.RealVector#combineToSelf(double,double,RealVector)": [
        "org.apache.commons.math3.linear.OpenMapRealVector#getDimension()",
        "org.apache.commons.math3.linear.ArrayRealVector#checkVectorDimensions(RealVector)",
        "org.apache.commons.math3.linear.ArrayRealVector#getDimension()",
        "org.apache.commons.math3.linear.OpenMapRealVector#setEntry(int,double)",
        "org.apache.commons.math3.linear.ArrayRealVector#getEntry(int)",
        "org.apache.commons.math3.linear.RealVector.unmodifiableRealVector(RealVector)$RealVector$1#getDimension()",
        "org.apache.commons.math3.linear.OpenMapRealVector#getEntry(int)",
        "org.apache.commons.math3.linear.RealVector.unmodifiableRealVector(RealVector)$RealVector$1#setEntry(int,double)",
        "org.apache.commons.math3.linear.ArrayRealVector#setEntry(int,double)",
        "org.apache.commons.math3.linear.RealVector#checkVectorDimensions(RealVector)",
        "org.apache.commons.math3.linear.RealVector.unmodifiableRealVector(RealVector)$RealVector$1#getEntry(int)"
    ],
    "org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D#getDelta()": ["org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D#getNorm()"],
    "org.apache.commons.math3.analysis.integration.gauss.GaussIntegrator#GaussIntegrator(double[],double[])": [
        "org.apache.commons.math3.exception.DimensionMismatchException#DimensionMismatchException(int,int)",
        "org.apache.commons.math3.util.MathArrays.checkOrder(double[],OrderDirection,boolean,boolean)",
        "org.apache.commons.math3.analysis.integration.gauss.GaussIntegrator.<init>()",
        "org.apache.commons.math3.util.MathArrays.OrderDirection.<staticinit>()"
    ],
    "org.apache.commons.math3.ode.sampling.NordsieckStepInterpolator#getInterpolatedStateVariation()": ["org.apache.commons.math3.ode.sampling.AbstractStepInterpolator#getInterpolatedState()"],
    "org.apache.commons.math3.optimization.direct.MultivariateFunctionMappingAdapter.LowerUpperBoundMapper#unboundedToBounded(double)": [
        "org.apache.commons.math3.analysis.FunctionUtils.multiply(DifferentiableUnivariateFunction[]...)$UnivariateFunction$1$UnivariateFunction$1#derivative()$UnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.polynomials.PolynomialSplineFunction#value(double)",
        "org.apache.commons.math3.analysis.function.Gaussian#value(double)",
        "org.apache.commons.math3.analysis.function.Tanh#value(double)",
        "org.apache.commons.math3.analysis.function.Inverse#value(double)",
        "org.apache.commons.math3.analysis.function.HarmonicOscillator#value(double)",
        "org.apache.commons.math3.analysis.FunctionUtils.fix1stArgument(BivariateFunction,double)$UnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.function.Asin#value(double)",
        "org.apache.commons.math3.analysis.function.Asinh#value(double)",
        "org.apache.commons.math3.analysis.FunctionUtils.multiply(UnivariateFunction[]...)$UnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.function.Atan#value(double)",
        "org.apache.commons.math3.analysis.FunctionUtils.toDifferentiableUnivariateFunction(UnivariateDifferentiableFunction)$DifferentiableUnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.function.Cbrt#value(double)",
        "org.apache.commons.math3.analysis.polynomials.PolynomialFunctionLagrangeForm#value(double)",
        "org.apache.commons.math3.analysis.function.Exp#value(double)",
        "org.apache.commons.math3.special.BesselJ#value(double)",
        "org.apache.commons.math3.analysis.polynomials.PolynomialFunctionNewtonForm#value(double)",
        "org.apache.commons.math3.analysis.FunctionUtils.add(UnivariateFunction[]...)$UnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.function.Sin#value(double)",
        "org.apache.commons.math3.analysis.function.Cos#value(double)",
        "org.apache.commons.math3.analysis.interpolation.UnivariatePeriodicInterpolator#interpolate(double[],double[])$UnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.function.Log10#value(double)",
        "org.apache.commons.math3.analysis.function.Sqrt#value(double)",
        "org.apache.commons.math3.analysis.function.Log#value(double)",
        "org.apache.commons.math3.analysis.function.Sinc#value(double)",
        "org.apache.commons.math3.ode.events.EventState#evaluateStep(StepInterpolator)$UnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.function.Minus#value(double)",
        "org.apache.commons.math3.analysis.integration.IterativeLegendreGaussIntegrator#stage(int)$UnivariateFunction$1#value(double)",
        "org.apache.commons.math3.optimization.general.NonLinearConjugateGradientOptimizer.LineSearchFunction#value(double)",
        "org.apache.commons.math3.analysis.function.Floor#value(double)",
        "org.apache.commons.math3.analysis.FunctionUtils.multiply(DifferentiableUnivariateFunction[]...)$DifferentiableUnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.FunctionUtils.combine(BivariateFunction,UnivariateFunction,UnivariateFunction)$UnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.FunctionUtils.add(DifferentiableUnivariateFunction[]...)$UnivariateFunction$1$UnivariateFunction$1#derivative()$UnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.function.Sinh#value(double)",
        "org.apache.commons.math3.analysis.FunctionUtils.multiply(UnivariateDifferentiableFunction[]...)$UnivariateDifferentiableFunction$1#value(double)",
        "org.apache.commons.math3.analysis.function.Tan#value(double)",
        "org.apache.commons.math3.distribution.AbstractRealDistribution#inverseCumulativeProbability(double)$UnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.FunctionUtils.add(DifferentiableUnivariateFunction[]...)$DifferentiableUnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.function.Ceil#value(double)",
        "org.apache.commons.math3.analysis.function.Logistic#value(double)",
        "org.apache.commons.math3.analysis.function.Signum#value(double)",
        "org.apache.commons.math3.analysis.function.Constant#value(double)",
        "org.apache.commons.math3.analysis.function.Atanh#value(double)",
        "org.apache.commons.math3.analysis.FunctionUtils.compose(DifferentiableUnivariateFunction[]...)$UnivariateFunction$1$UnivariateFunction$1#derivative()$UnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.FunctionUtils.add(UnivariateDifferentiableFunction[]...)$UnivariateDifferentiableFunction$1#value(double)",
        "org.apache.commons.math3.analysis.function.Abs#value(double)",
        "org.apache.commons.math3.analysis.differentiation.FiniteDifferencesDifferentiator#differentiate(UnivariateFunction)$UnivariateDifferentiableFunction$1#value(double)",
        "org.apache.commons.math3.analysis.function.Identity#value(double)",
        "org.apache.commons.math3.analysis.function.Expm1#value(double)",
        "org.apache.commons.math3.analysis.function.Logit#value(double)",
        "org.apache.commons.math3.analysis.function.Log1p#value(double)",
        "org.apache.commons.math3.analysis.FunctionUtils.fix2ndArgument(BivariateFunction,double)$UnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.FunctionUtils.toUnivariateDifferential(DifferentiableUnivariateFunction)$UnivariateDifferentiableFunction$1#value(double)",
        "org.apache.commons.math3.analysis.FunctionUtils.toDifferentiableUnivariateFunction(UnivariateDifferentiableFunction)$UnivariateFunction$1$UnivariateFunction$1#derivative()$UnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.polynomials.PolynomialFunction#value(double)",
        "org.apache.commons.math3.analysis.function.Rint#value(double)",
        "org.apache.commons.math3.analysis.FunctionUtils.compose(UnivariateFunction[]...)$UnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.function.Cosh#value(double)",
        "org.apache.commons.math3.optimization.direct.PowellOptimizer.LineSearch#search(double[],double[])$UnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.FunctionUtils.compose(DifferentiableUnivariateFunction[]...)$DifferentiableUnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.function.Acosh#value(double)",
        "org.apache.commons.math3.analysis.function.StepFunction#value(double)",
        "org.apache.commons.math3.analysis.FunctionUtils.compose(UnivariateDifferentiableFunction[]...)$UnivariateDifferentiableFunction$1#value(double)",
        "org.apache.commons.math3.analysis.function.Acos#value(double)",
        "org.apache.commons.math3.analysis.function.Power#value(double)",
        "org.apache.commons.math3.optim.nonlinear.scalar.LineSearch#search(double[],double[])$UnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.function.Sigmoid#value(double)",
        "org.apache.commons.math3.analysis.function.Ulp#value(double)"
    ],
    "org.apache.commons.math3.analysis.differentiation.DerivativeStructure#asin()": [
        "org.apache.commons.math3.analysis.differentiation.DSCompiler#asin(double[],int,double[],int)",
        "org.apache.commons.math3.analysis.differentiation.DerivativeStructure#DerivativeStructure(DSCompiler)"
    ],
    "org.apache.commons.math3.userguide.LowDiscrepancyGeneratorComparison.Display#Display()$RandomVectorGenerator$1.<init>()": ["org.apache.commons.math3.random.MersenneTwister#MersenneTwister(int)"],
    "org.apache.commons.math3.optimization.direct.CMAESOptimizer.sumRows(RealMatrix)": [
        "org.apache.commons.math3.linear.DiagonalMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.Array2DRowRealMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.BlockFieldMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.SparseFieldMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.DiagonalMatrix#getEntry(int,int)",
        "org.apache.commons.math3.linear.OpenMapRealMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.OpenMapRealMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.DiagonalMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.OpenMapRealMatrix#getEntry(int,int)",
        "org.apache.commons.math3.linear.Array2DRowFieldMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.BlockRealMatrix#getEntry(int,int)",
        "org.apache.commons.math3.linear.Array2DRowRealMatrix#Array2DRowRealMatrix(double[][],boolean)",
        "org.apache.commons.math3.linear.SparseFieldMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.BlockFieldMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.BlockRealMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.Array2DRowRealMatrix#getEntry(int,int)",
        "org.apache.commons.math3.linear.Array2DRowRealMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.Array2DRowFieldMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.BlockRealMatrix#getColumnDimension()"
    ],
    "org.apache.commons.math3.optimization.LeastSquaresConverter#LeastSquaresConverter(MultivariateVectorFunction,double[])": ["org.apache.commons.math3.optimization.LeastSquaresConverter.<init>()"],
    "org.apache.commons.math3.ode.nonstiff.AdamsFieldStepInterpolator#AdamsFieldStepInterpolator(T extends RealFieldElement,FieldODEStateAndDerivative<T extends RealFieldElement>,T extends RealFieldElement[],Array2DRowFieldMatrix<T extends RealFieldElement>,boolean,FieldODEStateAndDerivative<T extends RealFieldElement>,FieldODEStateAndDerivative<T extends RealFieldElement>,FieldEquationsMapper<T extends RealFieldElement>)": ["org.apache.commons.math3.ode.nonstiff.AdamsFieldStepInterpolator#AdamsFieldStepInterpolator(T extends RealFieldElement,FieldODEStateAndDerivative<T extends RealFieldElement>,T extends RealFieldElement[],Array2DRowFieldMatrix<T extends RealFieldElement>,boolean,FieldODEStateAndDerivative<T extends RealFieldElement>,FieldODEStateAndDerivative<T extends RealFieldElement>,FieldODEStateAndDerivative<T extends RealFieldElement>,FieldODEStateAndDerivative<T extends RealFieldElement>,FieldEquationsMapper<T extends RealFieldElement>)"],
    "org.apache.commons.math3.ml.neuralnet.Network.SerializationProxy#readResolve()": ["org.apache.commons.math3.ml.neuralnet.Network#Network(long,int,Neuron[],long[][])"],
    "org.apache.commons.math3.util.BigReal#BigReal(BigDecimal)": ["org.apache.commons.math3.util.BigReal.<init>()"],
    "org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D#distance1(Vector3D)": [
        "org.apache.commons.math3.geometry.euclidean.threed.Vector3D#getZ()",
        "org.apache.commons.math3.geometry.euclidean.threed.Vector3D#getY()",
        "org.apache.commons.math3.geometry.euclidean.threed.Vector3D#getX()"
    ],
    "org.apache.commons.math3.analysis.function.HarmonicOscillator#HarmonicOscillator(double,double,double)": ["org.apache.commons.math3.analysis.function.HarmonicOscillator.<init>()"],
    "org.apache.commons.math3.analysis.function.Cbrt#derivative()": [
        "org.apache.commons.math3.analysis.function.Log10#derivative()",
        "org.apache.commons.math3.analysis.function.Power#derivative()",
        "org.apache.commons.math3.analysis.function.Sin#derivative()",
        "org.apache.commons.math3.analysis.function.Exp#derivative()",
        "org.apache.commons.math3.analysis.function.HarmonicOscillator#derivative()",
        "org.apache.commons.math3.analysis.polynomials.PolynomialFunction#derivative()",
        "org.apache.commons.math3.analysis.function.Logit#derivative()",
        "org.apache.commons.math3.analysis.function.Cbrt#derivative()",
        "org.apache.commons.math3.analysis.FunctionUtils.toDifferentiableUnivariateFunction(UnivariateDifferentiableFunction)",
        "org.apache.commons.math3.analysis.FunctionUtils.toDifferentiableUnivariateFunction(UnivariateDifferentiableFunction)$DifferentiableUnivariateFunction$1#derivative()",
        "org.apache.commons.math3.analysis.polynomials.PolynomialSplineFunction#derivative()",
        "org.apache.commons.math3.analysis.function.Cosh#derivative()",
        "org.apache.commons.math3.analysis.function.Identity#derivative()",
        "org.apache.commons.math3.analysis.function.Inverse#derivative()",
        "org.apache.commons.math3.analysis.function.Acosh#derivative()",
        "org.apache.commons.math3.analysis.function.Acos#derivative()",
        "org.apache.commons.math3.analysis.function.Atan#derivative()",
        "org.apache.commons.math3.analysis.function.Log#derivative()",
        "org.apache.commons.math3.analysis.function.Sqrt#derivative()",
        "org.apache.commons.math3.analysis.function.Logistic#derivative()",
        "org.apache.commons.math3.analysis.function.Expm1#derivative()",
        "org.apache.commons.math3.analysis.function.Asinh#derivative()",
        "org.apache.commons.math3.analysis.function.Gaussian#derivative()",
        "org.apache.commons.math3.analysis.function.Sinc#derivative()",
        "org.apache.commons.math3.analysis.function.Sigmoid#derivative()",
        "org.apache.commons.math3.analysis.function.Constant#derivative()",
        "org.apache.commons.math3.analysis.function.Sinh#derivative()",
        "org.apache.commons.math3.analysis.function.Tanh#derivative()",
        "org.apache.commons.math3.analysis.function.Asin#derivative()",
        "org.apache.commons.math3.analysis.function.Minus#derivative()",
        "org.apache.commons.math3.analysis.FunctionUtils.compose(DifferentiableUnivariateFunction[]...)$DifferentiableUnivariateFunction$1#derivative()",
        "org.apache.commons.math3.analysis.FunctionUtils.add(DifferentiableUnivariateFunction[]...)$DifferentiableUnivariateFunction$1#derivative()",
        "org.apache.commons.math3.analysis.FunctionUtils.multiply(DifferentiableUnivariateFunction[]...)$DifferentiableUnivariateFunction$1#derivative()",
        "org.apache.commons.math3.analysis.function.Log1p#derivative()",
        "org.apache.commons.math3.analysis.function.Tan#derivative()",
        "org.apache.commons.math3.analysis.function.Cos#derivative()",
        "org.apache.commons.math3.analysis.function.Atanh#derivative()"
    ],
    "org.apache.commons.math3.stat.correlation.SpearmansCorrelation#rankTransform(RealMatrix)": [
        "org.apache.commons.math3.linear.DiagonalMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.Array2DRowRealMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.BlockRealMatrix#setColumn(int,double[])",
        "org.apache.commons.math3.linear.BlockFieldMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.BlockRealMatrix#copy()",
        "org.apache.commons.math3.stat.correlation.SpearmansCorrelation#getNaNPositions(double[])",
        "org.apache.commons.math3.stat.ranking.NaNStrategy.<staticinit>()",
        "org.apache.commons.math3.stat.correlation.SpearmansCorrelation#removeValues(double[],Set<Integer>)",
        "org.apache.commons.math3.linear.OpenMapRealMatrix#copy()",
        "org.apache.commons.math3.linear.OpenMapRealMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.DiagonalMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.BlockFieldMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.BlockRealMatrix#getRowDimension()",
        "org.apache.commons.math3.stat.ranking.NaturalRanking#getNanStrategy()",
        "org.apache.commons.math3.linear.Array2DRowRealMatrix#copy()",
        "org.apache.commons.math3.linear.DiagonalMatrix#copy()",
        "org.apache.commons.math3.linear.AbstractRealMatrix#getColumn(int)",
        "org.apache.commons.math3.linear.BlockRealMatrix#getColumn(int)",
        "org.apache.commons.math3.linear.SparseFieldMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.AbstractRealMatrix#setColumn(int,double[])",
        "org.apache.commons.math3.linear.OpenMapRealMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.Array2DRowFieldMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.BlockRealMatrix#BlockRealMatrix(int,int)",
        "org.apache.commons.math3.linear.SparseFieldMatrix#getColumnDimension()",
        "org.apache.commons.math3.stat.ranking.NaturalRanking#rank(double[])",
        "org.apache.commons.math3.linear.Array2DRowRealMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.Array2DRowFieldMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.BlockRealMatrix#getColumnDimension()"
    ],
    "org.apache.commons.math3.analysis.interpolation.BicubicSplineFunction#BicubicSplineFunction(double[],boolean)": [
        "org.apache.commons.math3.analysis.interpolation.BicubicSplineFunction.<init>()",
        "org.apache.commons.math3.analysis.interpolation.BicubicSplineFunction#BicubicSplineFunction(double[],boolean)$BivariateFunction$2.<init>()",
        "org.apache.commons.math3.analysis.interpolation.BicubicSplineFunction#BicubicSplineFunction(double[],boolean)$BivariateFunction$4.<init>()",
        "org.apache.commons.math3.analysis.interpolation.BicubicSplineFunction.<staticinit>()",
        "org.apache.commons.math3.analysis.interpolation.BicubicSplineFunction#BicubicSplineFunction(double[],boolean)$BivariateFunction$3.<init>()",
        "org.apache.commons.math3.analysis.interpolation.BicubicSplineFunction#BicubicSplineFunction(double[],boolean)$BivariateFunction$5.<init>()",
        "org.apache.commons.math3.analysis.interpolation.BicubicSplineFunction#BicubicSplineFunction(double[],boolean)$BivariateFunction$1.<init>()"
    ],
    "org.apache.commons.math3.userguide.genetics.RandomPolygonMutation#mutate(Chromosome)": [
        "org.apache.commons.math3.userguide.genetics.PolygonChromosome#getPolygonRepresentation()",
        "org.apache.commons.math3.userguide.genetics.Polygon#mutate(float,float)",
        "org.apache.commons.math3.userguide.genetics.PolygonChromosome#PolygonChromosome(List<Polygon>)"
    ],
    "org.apache.commons.math3.analysis.differentiation.DerivativeStructure#log1p()": [
        "org.apache.commons.math3.analysis.differentiation.DerivativeStructure#DerivativeStructure(DSCompiler)",
        "org.apache.commons.math3.analysis.differentiation.DSCompiler#log1p(double[],int,double[],int)"
    ],
    "org.apache.commons.math3.transform.TransformUtils.createComplexArray(double[][])": [
        "org.apache.commons.math3.exception.DimensionMismatchException#DimensionMismatchException(int,int)",
        "org.apache.commons.math3.complex.Complex#Complex(double,double)"
    ],
    "org.apache.commons.math3.optimization.BaseMultivariateMultiStartOptimizer#BaseMultivariateMultiStartOptimizer(BaseMultivariateOptimizer<FUNC extends MultivariateFunction>,int,RandomVectorGenerator)": [
        "org.apache.commons.math3.exception.NullArgumentException#NullArgumentException()",
        "org.apache.commons.math3.optimization.BaseMultivariateMultiStartOptimizer.<init>()"
    ],
    "org.apache.commons.math3.geometry.partitioning.AbstractRegion#setBarycenter(Vector<S extends Space>)": ["org.apache.commons.math3.geometry.partitioning.AbstractRegion#setBarycenter(Point<S extends Space>)"],
    "org.apache.commons.math3.analysis.FunctionUtils.multiply(UnivariateFunction[]...)$UnivariateFunction$1#value(double)": [
        "org.apache.commons.math3.analysis.FunctionUtils.multiply(DifferentiableUnivariateFunction[]...)$UnivariateFunction$1$UnivariateFunction$1#derivative()$UnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.polynomials.PolynomialSplineFunction#value(double)",
        "org.apache.commons.math3.analysis.function.Gaussian#value(double)",
        "org.apache.commons.math3.analysis.function.Tanh#value(double)",
        "org.apache.commons.math3.analysis.function.Inverse#value(double)",
        "org.apache.commons.math3.analysis.function.HarmonicOscillator#value(double)",
        "org.apache.commons.math3.analysis.FunctionUtils.fix1stArgument(BivariateFunction,double)$UnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.function.Asin#value(double)",
        "org.apache.commons.math3.analysis.function.Asinh#value(double)",
        "org.apache.commons.math3.analysis.FunctionUtils.multiply(UnivariateFunction[]...)$UnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.function.Atan#value(double)",
        "org.apache.commons.math3.analysis.FunctionUtils.toDifferentiableUnivariateFunction(UnivariateDifferentiableFunction)$DifferentiableUnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.function.Cbrt#value(double)",
        "org.apache.commons.math3.analysis.polynomials.PolynomialFunctionLagrangeForm#value(double)",
        "org.apache.commons.math3.analysis.function.Exp#value(double)",
        "org.apache.commons.math3.special.BesselJ#value(double)",
        "org.apache.commons.math3.analysis.polynomials.PolynomialFunctionNewtonForm#value(double)",
        "org.apache.commons.math3.analysis.FunctionUtils.add(UnivariateFunction[]...)$UnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.function.Sin#value(double)",
        "org.apache.commons.math3.analysis.function.Cos#value(double)",
        "org.apache.commons.math3.analysis.interpolation.UnivariatePeriodicInterpolator#interpolate(double[],double[])$UnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.function.Log10#value(double)",
        "org.apache.commons.math3.analysis.function.Sqrt#value(double)",
        "org.apache.commons.math3.analysis.function.Log#value(double)",
        "org.apache.commons.math3.analysis.function.Sinc#value(double)",
        "org.apache.commons.math3.ode.events.EventState#evaluateStep(StepInterpolator)$UnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.function.Minus#value(double)",
        "org.apache.commons.math3.analysis.integration.IterativeLegendreGaussIntegrator#stage(int)$UnivariateFunction$1#value(double)",
        "org.apache.commons.math3.optimization.general.NonLinearConjugateGradientOptimizer.LineSearchFunction#value(double)",
        "org.apache.commons.math3.analysis.function.Floor#value(double)",
        "org.apache.commons.math3.analysis.FunctionUtils.multiply(DifferentiableUnivariateFunction[]...)$DifferentiableUnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.FunctionUtils.combine(BivariateFunction,UnivariateFunction,UnivariateFunction)$UnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.FunctionUtils.add(DifferentiableUnivariateFunction[]...)$UnivariateFunction$1$UnivariateFunction$1#derivative()$UnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.function.Sinh#value(double)",
        "org.apache.commons.math3.analysis.FunctionUtils.multiply(UnivariateDifferentiableFunction[]...)$UnivariateDifferentiableFunction$1#value(double)",
        "org.apache.commons.math3.analysis.function.Tan#value(double)",
        "org.apache.commons.math3.distribution.AbstractRealDistribution#inverseCumulativeProbability(double)$UnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.FunctionUtils.add(DifferentiableUnivariateFunction[]...)$DifferentiableUnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.function.Ceil#value(double)",
        "org.apache.commons.math3.analysis.function.Logistic#value(double)",
        "org.apache.commons.math3.analysis.function.Signum#value(double)",
        "org.apache.commons.math3.analysis.function.Constant#value(double)",
        "org.apache.commons.math3.analysis.function.Atanh#value(double)",
        "org.apache.commons.math3.analysis.FunctionUtils.compose(DifferentiableUnivariateFunction[]...)$UnivariateFunction$1$UnivariateFunction$1#derivative()$UnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.FunctionUtils.add(UnivariateDifferentiableFunction[]...)$UnivariateDifferentiableFunction$1#value(double)",
        "org.apache.commons.math3.analysis.function.Abs#value(double)",
        "org.apache.commons.math3.analysis.differentiation.FiniteDifferencesDifferentiator#differentiate(UnivariateFunction)$UnivariateDifferentiableFunction$1#value(double)",
        "org.apache.commons.math3.analysis.function.Identity#value(double)",
        "org.apache.commons.math3.analysis.function.Expm1#value(double)",
        "org.apache.commons.math3.analysis.function.Logit#value(double)",
        "org.apache.commons.math3.analysis.function.Log1p#value(double)",
        "org.apache.commons.math3.analysis.FunctionUtils.fix2ndArgument(BivariateFunction,double)$UnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.FunctionUtils.toUnivariateDifferential(DifferentiableUnivariateFunction)$UnivariateDifferentiableFunction$1#value(double)",
        "org.apache.commons.math3.analysis.FunctionUtils.toDifferentiableUnivariateFunction(UnivariateDifferentiableFunction)$UnivariateFunction$1$UnivariateFunction$1#derivative()$UnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.polynomials.PolynomialFunction#value(double)",
        "org.apache.commons.math3.analysis.function.Rint#value(double)",
        "org.apache.commons.math3.analysis.FunctionUtils.compose(UnivariateFunction[]...)$UnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.function.Cosh#value(double)",
        "org.apache.commons.math3.optimization.direct.PowellOptimizer.LineSearch#search(double[],double[])$UnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.FunctionUtils.compose(DifferentiableUnivariateFunction[]...)$DifferentiableUnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.function.Acosh#value(double)",
        "org.apache.commons.math3.analysis.function.StepFunction#value(double)",
        "org.apache.commons.math3.analysis.FunctionUtils.compose(UnivariateDifferentiableFunction[]...)$UnivariateDifferentiableFunction$1#value(double)",
        "org.apache.commons.math3.analysis.function.Acos#value(double)",
        "org.apache.commons.math3.analysis.function.Power#value(double)",
        "org.apache.commons.math3.optim.nonlinear.scalar.LineSearch#search(double[],double[])$UnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.function.Sigmoid#value(double)",
        "org.apache.commons.math3.analysis.function.Ulp#value(double)"
    ],
    "org.apache.commons.math3.util.FastMath.atan(double)": ["org.apache.commons.math3.util.FastMath.atan(double,double,boolean)"],
    "org.apache.commons.math3.optimization.fitting.PolynomialFitter#fit(int,double[])": [
        "org.apache.commons.math3.analysis.polynomials.PolynomialFunction.Parametric.<init>()",
        "org.apache.commons.math3.optimization.fitting.CurveFitter#fit(int,T extends ParametricUnivariateFunction,double[])"
    ],
    "org.apache.commons.math3.fraction.BigFraction#percentageValue()": [
        "org.apache.commons.math3.fraction.BigFraction#doubleValue()",
        "org.apache.commons.math3.fraction.BigFraction#multiply(BigInteger)",
        "org.apache.commons.math3.fraction.BigFraction.<staticinit>()"
    ],
    "org.apache.commons.math3.linear.CholeskyDecomposition.Solver#Solver(double[][])": ["org.apache.commons.math3.linear.CholeskyDecomposition.Solver.<init>()"],
    "org.apache.commons.math3.util.MathUtils.<staticinit>()": ["org.apache.commons.math3.util.FastMath.<staticinit>()"],
    "org.apache.commons.math3.complex.Complex#negate()": [
        "org.apache.commons.math3.complex.Complex.<staticinit>()",
        "org.apache.commons.math3.complex.Complex#createComplex(double,double)"
    ],
    "org.apache.commons.math3.linear.BlockFieldMatrix#setColumn(int,T extends FieldElement[])": [
        "org.apache.commons.math3.linear.BlockFieldMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.BlockFieldMatrix#blockHeight(int)",
        "org.apache.commons.math3.linear.BlockFieldMatrix#blockWidth(int)",
        "org.apache.commons.math3.linear.MatrixDimensionMismatchException#MatrixDimensionMismatchException(int,int,int,int)",
        "org.apache.commons.math3.linear.AbstractFieldMatrix#checkColumnIndex(int)",
        "org.apache.commons.math3.linear.BlockFieldMatrix.<staticinit>()"
    ],
    "org.apache.commons.math3.util.ContinuedFraction#evaluate(double,double,int)": [
        "org.apache.commons.math3.util.Precision.equals(double,double,double)",
        "org.apache.commons.math3.special.Beta.regularizedBeta(double,double,double,double,int)$ContinuedFraction$1#getA(int,double)",
        "org.apache.commons.math3.util.FastMath.abs(double)",
        "org.apache.commons.math3.special.Gamma.regularizedGammaQ(double,double,double,int)$ContinuedFraction$1#getA(int,double)",
        "org.apache.commons.math3.special.Beta.regularizedBeta(double,double,double,double,int)$ContinuedFraction$1#getB(int,double)",
        "org.apache.commons.math3.exception.util.LocalizedFormats.<staticinit>()",
        "org.apache.commons.math3.special.Gamma.regularizedGammaQ(double,double,double,int)$ContinuedFraction$1#getB(int,double)"
    ],
    "org.apache.commons.math3.optimization.direct.MultiDirectionalSimplex#MultiDirectionalSimplex(double[][],double,double)": [
        "org.apache.commons.math3.optimization.direct.MultiDirectionalSimplex.<init>()",
        "org.apache.commons.math3.optimization.direct.AbstractSimplex#AbstractSimplex(double[][])"
    ],
    "org.apache.commons.math3.optimization.direct.BaseAbstractMultivariateVectorOptimizer#BaseAbstractMultivariateVectorOptimizer(ConvergenceChecker<PointVectorValuePair>)": ["org.apache.commons.math3.optimization.direct.BaseAbstractMultivariateVectorOptimizer.<init>()"],
    "org.apache.commons.math3.optim.nonlinear.scalar.MultivariateOptimizer#optimize(OptimizationData[]...)": ["org.apache.commons.math3.optim.BaseMultivariateOptimizer#optimize(OptimizationData[]...)"],
    "org.apache.commons.math3.util.MathArrays.distanceInf(double[],double[])": [
        "org.apache.commons.math3.util.FastMath.abs(double)",
        "org.apache.commons.math3.util.FastMath.max(double,double)",
        "org.apache.commons.math3.util.MathArrays.checkEqualLength(double[],double[])"
    ],
    "org.apache.commons.math3.linear.DiagonalMatrix#add(DiagonalMatrix)": [
        "org.apache.commons.math3.linear.MatrixUtils.checkAdditionCompatible(AnyMatrix,AnyMatrix)",
        "org.apache.commons.math3.linear.DiagonalMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.DiagonalMatrix#DiagonalMatrix(double[],boolean)"
    ],
    "org.apache.commons.math3.optimization.LeastSquaresConverter#LeastSquaresConverter(MultivariateVectorFunction,double[],RealMatrix)": [
        "org.apache.commons.math3.linear.DiagonalMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.Array2DRowRealMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.BlockFieldMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.BlockRealMatrix#copy()",
        "org.apache.commons.math3.linear.OpenMapRealMatrix#copy()",
        "org.apache.commons.math3.linear.OpenMapRealMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.Array2DRowFieldMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.SparseFieldMatrix#getColumnDimension()",
        "org.apache.commons.math3.exception.DimensionMismatchException#DimensionMismatchException(int,int)",
        "org.apache.commons.math3.linear.Array2DRowRealMatrix#copy()",
        "org.apache.commons.math3.linear.BlockRealMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.DiagonalMatrix#copy()",
        "org.apache.commons.math3.optimization.LeastSquaresConverter.<init>()"
    ],
    "org.apache.commons.math3.optim.nonlinear.vector.MultivariateVectorOptimizer#getWeight()": [
        "org.apache.commons.math3.linear.Array2DRowRealMatrix#copy()",
        "org.apache.commons.math3.linear.BlockRealMatrix#copy()",
        "org.apache.commons.math3.linear.DiagonalMatrix#copy()",
        "org.apache.commons.math3.linear.OpenMapRealMatrix#copy()"
    ],
    "org.apache.commons.math3.geometry.euclidean.threed.FieldRotation#compose(FieldRotation<T extends RealFieldElement>,RotationConvention)": [
        "org.apache.commons.math3.geometry.euclidean.threed.FieldRotation#composeInternal(FieldRotation<T extends RealFieldElement>)",
        "org.apache.commons.math3.geometry.euclidean.threed.RotationConvention.<staticinit>()"
    ],
    "org.apache.commons.math3.util.MathArrays#MathArrays()": ["org.apache.commons.math3.util.MathArrays.<init>()"],
    "org.apache.commons.math3.linear.RealVector.unmodifiableRealVector(RealVector)$Iterator$1$Iterator$1#iterator()$Iterator$1#remove()": ["org.apache.commons.math3.exception.MathUnsupportedOperationException#MathUnsupportedOperationException()"],
    "org.apache.commons.math3.distribution.ParetoDistribution#ParetoDistribution(RandomGenerator,double,double,double)": [
        "org.apache.commons.math3.distribution.ParetoDistribution.<init>()",
        "org.apache.commons.math3.distribution.AbstractRealDistribution#AbstractRealDistribution(RandomGenerator)",
        "org.apache.commons.math3.exception.util.LocalizedFormats.<staticinit>()"
    ],
    "org.apache.commons.math3.fraction.AbstractFormat#setDenominatorFormat(NumberFormat)": ["org.apache.commons.math3.exception.util.LocalizedFormats.<staticinit>()"],
    "org.apache.commons.math3.optim.linear.SimplexSolver#getPivotRow(SimplexTableau,int)": [
        "org.apache.commons.math3.optim.linear.SimplexTableau#getBasicVariable(int)",
        "org.apache.commons.math3.util.Precision.compareTo(double,double,double)",
        "org.apache.commons.math3.util.FastMath.abs(double)",
        "org.apache.commons.math3.optim.linear.SimplexTableau#getWidth()",
        "org.apache.commons.math3.optim.linear.SimplexTableau#getBasicRow(int)",
        "org.apache.commons.math3.optim.linear.SimplexTableau#getArtificialVariableOffset()",
        "org.apache.commons.math3.optim.linear.SimplexTableau#getNumArtificialVariables()",
        "org.apache.commons.math3.util.Precision.equals(double,double,int)",
        "org.apache.commons.math3.optim.linear.SimplexTableau#getNumObjectiveFunctions()",
        "org.apache.commons.math3.optim.linear.SimplexTableau#getHeight()",
        "org.apache.commons.math3.optim.linear.SimplexTableau#getEntry(int,int)"
    ],
    "org.apache.commons.math3.fitting.HarmonicCurveFitter#getProblem(Collection<WeightedObservedPoint>)": [
        "org.apache.commons.math3.fitting.HarmonicCurveFitter.ParameterGuesser#guess()",
        "org.apache.commons.math3.fitting.leastsquares.LeastSquaresBuilder#maxIterations(int)",
        "org.apache.commons.math3.fitting.leastsquares.LeastSquaresBuilder.<init>()",
        "org.apache.commons.math3.fitting.HarmonicCurveFitter.ParameterGuesser#ParameterGuesser(Collection<WeightedObservedPoint>)",
        "org.apache.commons.math3.fitting.leastsquares.LeastSquaresBuilder#target(double[])",
        "org.apache.commons.math3.fitting.leastsquares.LeastSquaresBuilder#model(MultivariateVectorFunction,MultivariateMatrixFunction)",
        "org.apache.commons.math3.fitting.WeightedObservedPoint#getWeight()",
        "org.apache.commons.math3.fitting.AbstractCurveFitter.TheoreticalValuesFunction#getModelFunctionJacobian()",
        "org.apache.commons.math3.fitting.WeightedObservedPoint#getY()",
        "org.apache.commons.math3.fitting.AbstractCurveFitter.TheoreticalValuesFunction#getModelFunction()",
        "org.apache.commons.math3.fitting.leastsquares.LeastSquaresBuilder#build()",
        "org.apache.commons.math3.fitting.leastsquares.LeastSquaresBuilder#maxEvaluations(int)",
        "org.apache.commons.math3.fitting.HarmonicCurveFitter.<staticinit>()",
        "org.apache.commons.math3.fitting.leastsquares.LeastSquaresBuilder#weight(RealMatrix)",
        "org.apache.commons.math3.linear.DiagonalMatrix#DiagonalMatrix(double[])",
        "org.apache.commons.math3.fitting.leastsquares.LeastSquaresBuilder#start(double[])",
        "org.apache.commons.math3.fitting.AbstractCurveFitter.TheoreticalValuesFunction#TheoreticalValuesFunction(ParametricUnivariateFunction,Collection<WeightedObservedPoint>)"
    ],
    "org.apache.commons.math3.optim.univariate.UnivariateOptimizer#optimize(OptimizationData[]...)": ["org.apache.commons.math3.optim.BaseOptimizer#optimize(OptimizationData[]...)"],
    "org.apache.commons.math3.stat.descriptive.rank.Percentile#setData(double[])": [
        "org.apache.commons.math3.stat.descriptive.AbstractUnivariateStatistic#setData(double[])",
        "org.apache.commons.math3.stat.descriptive.rank.Percentile.<staticinit>()"
    ],
    "org.apache.commons.math3.optim.nonlinear.scalar.MultivariateOptimizer#computeObjectiveValue(double[])": [
        "org.apache.commons.math3.optim.nonlinear.scalar.MultivariateFunctionMappingAdapter#value(double[])",
        "org.apache.commons.math3.optim.BaseOptimizer#incrementEvaluationCount()",
        "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizer#doOptimize()$MultivariateFunction$1#value(double[])",
        "org.apache.commons.math3.optimization.direct.MultivariateFunctionMappingAdapter#value(double[])",
        "org.apache.commons.math3.analysis.FunctionUtils.toMultivariateDifferentiableFunction(DifferentiableMultivariateFunction)$MultivariateDifferentiableFunction$1#value(double[])",
        "org.apache.commons.math3.analysis.FunctionUtils.toDifferentiableMultivariateFunction(MultivariateDifferentiableFunction)$DifferentiableMultivariateFunction$1#value(double[])",
        "org.apache.commons.math3.analysis.interpolation.MicrosphereInterpolatingFunction#value(double[])",
        "org.apache.commons.math3.analysis.interpolation.MicrosphereProjectionInterpolator#interpolate(double[][],double[])$MultivariateFunction$1#value(double[])",
        "org.apache.commons.math3.optimization.direct.MultivariateFunctionPenaltyAdapter#value(double[])",
        "org.apache.commons.math3.optim.nonlinear.scalar.MultivariateFunctionPenaltyAdapter#value(double[])",
        "org.apache.commons.math3.optim.linear.LinearObjectiveFunction#value(double[])",
        "org.apache.commons.math3.analysis.FunctionUtils.collector(BivariateFunction,UnivariateFunction,double)$MultivariateFunction$1#value(double[])",
        "org.apache.commons.math3.optim.nonlinear.scalar.LeastSquaresConverter#value(double[])",
        "org.apache.commons.math3.analysis.FunctionUtils.toDifferentiableMultivariateFunction(MultivariateDifferentiableFunction)$MultivariateFunction$1$MultivariateFunction$1#partialDerivative(int)$MultivariateFunction$1#value(double[])",
        "org.apache.commons.math3.optimization.LeastSquaresConverter#value(double[])",
        "org.apache.commons.math3.optimization.direct.SimplexOptimizer#doOptimize()$MultivariateFunction$1#value(double[])"
    ],
    "org.apache.commons.math3.analysis.differentiation.SparseGradient#acos()": [
        "org.apache.commons.math3.analysis.differentiation.SparseGradient#SparseGradient(double,double,Map<Integer, Double>)",
        "org.apache.commons.math3.util.FastMath.acos(double)",
        "org.apache.commons.math3.util.FastMath.sqrt(double)"
    ],
    "org.apache.commons.math3.linear.RealMatrixFormat.getInstance()": ["org.apache.commons.math3.linear.RealMatrixFormat.getInstance(Locale)"],
    "org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator#storeTime(double)": ["org.apache.commons.math3.ode.sampling.AbstractStepInterpolator#storeTime(double)"],
    "org.apache.commons.math3.analysis.differentiation.FiniteDifferencesDifferentiator#differentiate(UnivariateFunction)$UnivariateDifferentiableFunction$1#value(double)": [
        "org.apache.commons.math3.analysis.FunctionUtils.multiply(DifferentiableUnivariateFunction[]...)$UnivariateFunction$1$UnivariateFunction$1#derivative()$UnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.polynomials.PolynomialSplineFunction#value(double)",
        "org.apache.commons.math3.analysis.function.Gaussian#value(double)",
        "org.apache.commons.math3.analysis.function.Tanh#value(double)",
        "org.apache.commons.math3.analysis.function.Inverse#value(double)",
        "org.apache.commons.math3.analysis.function.HarmonicOscillator#value(double)",
        "org.apache.commons.math3.analysis.FunctionUtils.fix1stArgument(BivariateFunction,double)$UnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.function.Asin#value(double)",
        "org.apache.commons.math3.analysis.function.Asinh#value(double)",
        "org.apache.commons.math3.analysis.FunctionUtils.multiply(UnivariateFunction[]...)$UnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.function.Atan#value(double)",
        "org.apache.commons.math3.analysis.FunctionUtils.toDifferentiableUnivariateFunction(UnivariateDifferentiableFunction)$DifferentiableUnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.function.Cbrt#value(double)",
        "org.apache.commons.math3.analysis.polynomials.PolynomialFunctionLagrangeForm#value(double)",
        "org.apache.commons.math3.analysis.function.Exp#value(double)",
        "org.apache.commons.math3.special.BesselJ#value(double)",
        "org.apache.commons.math3.analysis.polynomials.PolynomialFunctionNewtonForm#value(double)",
        "org.apache.commons.math3.analysis.FunctionUtils.add(UnivariateFunction[]...)$UnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.function.Sin#value(double)",
        "org.apache.commons.math3.analysis.function.Cos#value(double)",
        "org.apache.commons.math3.analysis.interpolation.UnivariatePeriodicInterpolator#interpolate(double[],double[])$UnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.function.Log10#value(double)",
        "org.apache.commons.math3.analysis.function.Sqrt#value(double)",
        "org.apache.commons.math3.analysis.function.Log#value(double)",
        "org.apache.commons.math3.analysis.function.Sinc#value(double)",
        "org.apache.commons.math3.ode.events.EventState#evaluateStep(StepInterpolator)$UnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.function.Minus#value(double)",
        "org.apache.commons.math3.analysis.integration.IterativeLegendreGaussIntegrator#stage(int)$UnivariateFunction$1#value(double)",
        "org.apache.commons.math3.optimization.general.NonLinearConjugateGradientOptimizer.LineSearchFunction#value(double)",
        "org.apache.commons.math3.analysis.function.Floor#value(double)",
        "org.apache.commons.math3.analysis.FunctionUtils.multiply(DifferentiableUnivariateFunction[]...)$DifferentiableUnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.FunctionUtils.combine(BivariateFunction,UnivariateFunction,UnivariateFunction)$UnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.FunctionUtils.add(DifferentiableUnivariateFunction[]...)$UnivariateFunction$1$UnivariateFunction$1#derivative()$UnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.function.Sinh#value(double)",
        "org.apache.commons.math3.analysis.FunctionUtils.multiply(UnivariateDifferentiableFunction[]...)$UnivariateDifferentiableFunction$1#value(double)",
        "org.apache.commons.math3.analysis.function.Tan#value(double)",
        "org.apache.commons.math3.distribution.AbstractRealDistribution#inverseCumulativeProbability(double)$UnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.FunctionUtils.add(DifferentiableUnivariateFunction[]...)$DifferentiableUnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.function.Ceil#value(double)",
        "org.apache.commons.math3.analysis.function.Logistic#value(double)",
        "org.apache.commons.math3.analysis.function.Signum#value(double)",
        "org.apache.commons.math3.analysis.function.Constant#value(double)",
        "org.apache.commons.math3.analysis.function.Atanh#value(double)",
        "org.apache.commons.math3.analysis.FunctionUtils.compose(DifferentiableUnivariateFunction[]...)$UnivariateFunction$1$UnivariateFunction$1#derivative()$UnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.FunctionUtils.add(UnivariateDifferentiableFunction[]...)$UnivariateDifferentiableFunction$1#value(double)",
        "org.apache.commons.math3.analysis.function.Abs#value(double)",
        "org.apache.commons.math3.analysis.differentiation.FiniteDifferencesDifferentiator#differentiate(UnivariateFunction)$UnivariateDifferentiableFunction$1#value(double)",
        "org.apache.commons.math3.analysis.function.Identity#value(double)",
        "org.apache.commons.math3.analysis.function.Expm1#value(double)",
        "org.apache.commons.math3.analysis.function.Logit#value(double)",
        "org.apache.commons.math3.analysis.function.Log1p#value(double)",
        "org.apache.commons.math3.analysis.FunctionUtils.fix2ndArgument(BivariateFunction,double)$UnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.FunctionUtils.toUnivariateDifferential(DifferentiableUnivariateFunction)$UnivariateDifferentiableFunction$1#value(double)",
        "org.apache.commons.math3.analysis.FunctionUtils.toDifferentiableUnivariateFunction(UnivariateDifferentiableFunction)$UnivariateFunction$1$UnivariateFunction$1#derivative()$UnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.polynomials.PolynomialFunction#value(double)",
        "org.apache.commons.math3.analysis.function.Rint#value(double)",
        "org.apache.commons.math3.analysis.FunctionUtils.compose(UnivariateFunction[]...)$UnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.function.Cosh#value(double)",
        "org.apache.commons.math3.optimization.direct.PowellOptimizer.LineSearch#search(double[],double[])$UnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.FunctionUtils.compose(DifferentiableUnivariateFunction[]...)$DifferentiableUnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.function.Acosh#value(double)",
        "org.apache.commons.math3.analysis.function.StepFunction#value(double)",
        "org.apache.commons.math3.analysis.FunctionUtils.compose(UnivariateDifferentiableFunction[]...)$UnivariateDifferentiableFunction$1#value(double)",
        "org.apache.commons.math3.analysis.function.Acos#value(double)",
        "org.apache.commons.math3.analysis.function.Power#value(double)",
        "org.apache.commons.math3.optim.nonlinear.scalar.LineSearch#search(double[],double[])$UnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.function.Sigmoid#value(double)",
        "org.apache.commons.math3.analysis.function.Ulp#value(double)"
    ],
    "org.apache.commons.math3.util.Precision.equals(double,double,int)": [
        "org.apache.commons.math3.util.FastMath.abs(long)",
        "org.apache.commons.math3.util.Precision.<staticinit>()"
    ],
    "org.apache.commons.math3.stat.inference.TestUtils.kolmogorovSmirnovTest(RealDistribution,double[],double)": [
        "org.apache.commons.math3.stat.inference.KolmogorovSmirnovTest#kolmogorovSmirnovTest(RealDistribution,double[],double)",
        "org.apache.commons.math3.stat.inference.TestUtils.<staticinit>()"
    ],
    "org.apache.commons.math3.fitting.GaussianCurveFitter.create()": ["org.apache.commons.math3.fitting.GaussianCurveFitter#GaussianCurveFitter(double[],int)"],
    "org.apache.commons.math3.distribution.MixtureMultivariateNormalDistribution#MixtureMultivariateNormalDistribution(RandomGenerator,List<Pair<Double, MultivariateNormalDistribution>>)": [
        "org.apache.commons.math3.distribution.MixtureMultivariateNormalDistribution.<init>()",
        "org.apache.commons.math3.distribution.MixtureMultivariateRealDistribution#MixtureMultivariateRealDistribution(RandomGenerator,List<Pair<Double, T extends MultivariateRealDistribution>>)"
    ],
    "org.apache.commons.math3.optimization.direct.BaseAbstractMultivariateVectorOptimizer#optimizeInternal(int,FUNC extends MultivariateVectorFunction,double[],double[],double[])": [
        "org.apache.commons.math3.exception.DimensionMismatchException#DimensionMismatchException(int,int)",
        "org.apache.commons.math3.exception.NullArgumentException#NullArgumentException()",
        "org.apache.commons.math3.optimization.InitialGuess#InitialGuess(double[])",
        "org.apache.commons.math3.optimization.Target#Target(double[])",
        "org.apache.commons.math3.optimization.Weight#Weight(double[])"
    ],
    "org.apache.commons.math3.linear.SchurTransformer#getP()": ["org.apache.commons.math3.linear.MatrixUtils.createRealMatrix(double[][])"],
    "org.apache.commons.math3.linear.AbstractRealMatrix#AbstractRealMatrix()": [
        "org.apache.commons.math3.linear.AbstractRealMatrix.<init>()",
        "org.apache.commons.math3.linear.RealLinearOperator.<init>()"
    ],
    "org.apache.commons.math3.optimization.fitting.HarmonicFitter#fit(double[])": [
        "org.apache.commons.math3.analysis.function.HarmonicOscillator.Parametric.<init>()",
        "org.apache.commons.math3.optimization.fitting.CurveFitter#fit(T extends ParametricUnivariateFunction,double[])"
    ],
    "org.apache.commons.math3.linear.RealVector.unmodifiableRealVector(RealVector).UnmodifiableEntry.UnmodifiableEntry#getValue()": [
        "org.apache.commons.math3.linear.OpenMapRealVector.OpenMapEntry#getIndex()",
        "org.apache.commons.math3.linear.ArrayRealVector#getEntry(int)",
        "org.apache.commons.math3.linear.OpenMapRealVector#getEntry(int)",
        "org.apache.commons.math3.linear.RealVector.unmodifiableRealVector(RealVector)$RealVector$1#getEntry(int)",
        "org.apache.commons.math3.linear.RealVector.Entry#getIndex()"
    ],
    "org.apache.commons.math3.userguide.ClusterAlgorithmComparison.main(String[])": [
        "org.apache.commons.math3.userguide.ExampleUtils.showExampleFrame(ExampleFrame)",
        "org.apache.commons.math3.userguide.ClusterAlgorithmComparison.Display#Display()"
    ],
    "org.apache.commons.math3.exception.InsufficientDataException#InsufficientDataException()": ["org.apache.commons.math3.exception.util.LocalizedFormats.<staticinit>()"],
    "org.apache.commons.math3.geometry.euclidean.twod.Vector2D#Vector2D(double,Vector2D)": ["org.apache.commons.math3.geometry.euclidean.twod.Vector2D.<init>()"],
    "org.apache.commons.math3.util.MathArrays.copyOf(double[],int)": ["org.apache.commons.math3.util.FastMath.min(int,int)"],
    "org.apache.commons.math3.util.MathArrays.checkEqualLength(double[],double[],boolean)": ["org.apache.commons.math3.exception.DimensionMismatchException#DimensionMismatchException(int,int)"],
    "org.apache.commons.math3.dfp.DfpMath.pow(Dfp,int)": [
        "org.apache.commons.math3.dfp.Dfp#Dfp(Dfp)",
        "org.apache.commons.math3.dfp.DfpDec#newInstance(Dfp)",
        "org.apache.commons.math3.dfp.Dfp#getOne()",
        "org.apache.commons.math3.dfp.Dfp#newInstance(Dfp)",
        "org.apache.commons.math3.dfp.Dfp#multiply(Dfp)",
        "org.apache.commons.math3.dfp.Dfp#divide(Dfp)"
    ],
    "org.apache.commons.math3.util.FastMath.floorDiv(int,int)": ["org.apache.commons.math3.exception.util.LocalizedFormats.<staticinit>()"],
    "org.apache.commons.math3.geometry.partitioning.AbstractRegion#recurseIntersection(BSPTree<S extends Space>,SubHyperplane<S extends Space>)": [
        "org.apache.commons.math3.geometry.partitioning.SubHyperplane.SplitSubHyperplane#getMinus()",
        "org.apache.commons.math3.geometry.partitioning.BSPTree#getCut()",
        "org.apache.commons.math3.geometry.partitioning.BSPTree#getPlus()",
        "org.apache.commons.math3.geometry.partitioning.SubHyperplane.SplitSubHyperplane#getPlus()",
        "org.apache.commons.math3.geometry.partitioning.AbstractSubHyperplane#copySelf()",
        "org.apache.commons.math3.geometry.partitioning.BSPTree#getMinus()",
        "org.apache.commons.math3.geometry.partitioning.AbstractRegion#recurseIntersection(BSPTree<S extends Space>,SubHyperplane<S extends Space>)",
        "org.apache.commons.math3.geometry.partitioning.BSPTree#getAttribute()",
        "org.apache.commons.math3.geometry.partitioning.AbstractSubHyperplane#getHyperplane()",
        "org.apache.commons.math3.geometry.partitioning.AbstractSubHyperplane#reunite(SubHyperplane<S extends Space>)"
    ],
    "org.apache.commons.math3.linear.CholeskyDecomposition.Solver#solve(RealMatrix)": [
        "org.apache.commons.math3.linear.DiagonalMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.Array2DRowRealMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.BlockFieldMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.SparseFieldMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.OpenMapRealMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.Array2DRowRealMatrix#Array2DRowRealMatrix(double[][])",
        "org.apache.commons.math3.linear.OpenMapRealMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.DiagonalMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.DiagonalMatrix#getData()",
        "org.apache.commons.math3.linear.AbstractRealMatrix#getData()",
        "org.apache.commons.math3.linear.Array2DRowFieldMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.BlockFieldMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.SparseFieldMatrix#getColumnDimension()",
        "org.apache.commons.math3.exception.DimensionMismatchException#DimensionMismatchException(int,int)",
        "org.apache.commons.math3.linear.BlockRealMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.Array2DRowRealMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.Array2DRowRealMatrix#getData()",
        "org.apache.commons.math3.linear.Array2DRowFieldMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.BlockRealMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.BlockRealMatrix#getData()"
    ],
    "org.apache.commons.math3.linear.SymmLQ.State#betaEqualsZero()": ["org.apache.commons.math3.linear.SymmLQ.State.<staticinit>()"],
    "org.apache.commons.math3.geometry.euclidean.threed.OutlineExtractor#getOutline(PolyhedronsSet)": [
        "org.apache.commons.math3.geometry.euclidean.threed.OutlineExtractor.BoundaryProjector#getProjected()",
        "org.apache.commons.math3.geometry.partitioning.BSPTree#visit(BSPTreeVisitor<S extends Space>)",
        "org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet#getVertices()",
        "org.apache.commons.math3.geometry.partitioning.AbstractRegion#getTolerance()",
        "org.apache.commons.math3.geometry.euclidean.threed.OutlineExtractor#pointIsBetween(Vector2D[],int,int)",
        "org.apache.commons.math3.geometry.partitioning.AbstractRegion#getTree(boolean)",
        "org.apache.commons.math3.geometry.euclidean.threed.OutlineExtractor.BoundaryProjector#BoundaryProjector(double)"
    ],
    "org.apache.commons.math3.linear.SparseFieldVector#toArray()": [
        "org.apache.commons.math3.util.OpenIntToFieldHashMap.Iterator#hasNext()",
        "org.apache.commons.math3.util.OpenIntToFieldHashMap#iterator()",
        "org.apache.commons.math3.util.OpenIntToFieldHashMap.Iterator#key()",
        "org.apache.commons.math3.util.OpenIntToFieldHashMap.Iterator#value()",
        "org.apache.commons.math3.util.MathArrays.buildArray(Field<T>,int)",
        "org.apache.commons.math3.util.OpenIntToFieldHashMap.Iterator#advance()"
    ],
    "org.apache.commons.math3.linear.ArrayRealVector#getEntry(int)": [
        "org.apache.commons.math3.linear.ArrayRealVector#getDimension()",
        "org.apache.commons.math3.exception.util.LocalizedFormats.<staticinit>()"
    ],
    "org.apache.commons.math3.random.MersenneTwister#MersenneTwister(int[])": [
        "org.apache.commons.math3.random.MersenneTwister.<staticinit>()",
        "org.apache.commons.math3.random.BitsStreamGenerator#BitsStreamGenerator()",
        "org.apache.commons.math3.random.MersenneTwister#setSeed(int[])",
        "org.apache.commons.math3.random.MersenneTwister.<init>()"
    ],
    "org.apache.commons.math3.stat.inference.OneWayAnova#OneWayAnova()": ["org.apache.commons.math3.stat.inference.OneWayAnova.<init>()"],
    "org.apache.commons.math3.analysis.interpolation.FieldHermiteInterpolator#value(T extends FieldElement)": [
        "org.apache.commons.math3.exception.NoDataException#NoDataException(Localizable)",
        "org.apache.commons.math3.util.MathUtils.checkNotNull(Object)",
        "org.apache.commons.math3.util.MathArrays.buildArray(Field<T>,int)",
        "org.apache.commons.math3.exception.util.LocalizedFormats.<staticinit>()"
    ],
    "org.apache.commons.math3.optimization.SimpleVectorValueChecker#SimpleVectorValueChecker(double,double)": [
        "org.apache.commons.math3.optimization.SimpleVectorValueChecker.<init>()",
        "org.apache.commons.math3.optimization.SimpleVectorValueChecker.<staticinit>()",
        "org.apache.commons.math3.optimization.AbstractConvergenceChecker#AbstractConvergenceChecker(double,double)"
    ],
    "org.apache.commons.math3.linear.FieldLUDecomposition#FieldLUDecomposition(FieldMatrix<T extends FieldElement>)": [
        "org.apache.commons.math3.linear.DiagonalMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.Array2DRowRealMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.BlockFieldMatrix#getColumnDimension()",
        "org.apache.commons.math3.util.BigRealField#getZero()",
        "org.apache.commons.math3.linear.OpenMapRealMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.BlockFieldMatrix#getData()",
        "org.apache.commons.math3.linear.DiagonalMatrix#getRowDimension()",
        "org.apache.commons.math3.dfp.DfpField#getZero()",
        "org.apache.commons.math3.linear.BlockFieldMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.AbstractRealMatrix#isSquare()",
        "org.apache.commons.math3.linear.BlockRealMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.NonSquareMatrixException#NonSquareMatrixException(int,int)",
        "org.apache.commons.math3.fraction.FractionField#getZero()",
        "org.apache.commons.math3.linear.AbstractFieldMatrix#isSquare()",
        "org.apache.commons.math3.complex.ComplexField#getZero()",
        "org.apache.commons.math3.linear.Array2DRowFieldMatrix#getData()",
        "org.apache.commons.math3.linear.AbstractFieldMatrix#getData()",
        "org.apache.commons.math3.analysis.differentiation.SparseGradient#getField()$Field$1#getZero()",
        "org.apache.commons.math3.linear.SparseFieldMatrix#getRowDimension()",
        "org.apache.commons.math3.util.Decimal64Field#getZero()",
        "org.apache.commons.math3.linear.OpenMapRealMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.Array2DRowFieldMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.SparseFieldMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.FieldLUDecomposition.<init>()",
        "org.apache.commons.math3.linear.AbstractFieldMatrix#getField()",
        "org.apache.commons.math3.linear.Array2DRowRealMatrix#getRowDimension()",
        "org.apache.commons.math3.analysis.differentiation.DerivativeStructure#getField()$Field$1#getZero()",
        "org.apache.commons.math3.linear.Array2DRowFieldMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.BlockRealMatrix#getColumnDimension()",
        "org.apache.commons.math3.fraction.BigFractionField#getZero()"
    ],
    "org.apache.commons.math3.analysis.differentiation.FiniteDifferencesDifferentiator#differentiate(UnivariateFunction)$UnivariateDifferentiableFunction$1#value(DerivativeStructure)": [
        "org.apache.commons.math3.analysis.FunctionUtils.multiply(DifferentiableUnivariateFunction[]...)$UnivariateFunction$1$UnivariateFunction$1#derivative()$UnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.polynomials.PolynomialSplineFunction#value(double)",
        "org.apache.commons.math3.analysis.function.Gaussian#value(double)",
        "org.apache.commons.math3.analysis.function.Tanh#value(double)",
        "org.apache.commons.math3.util.FastMath.min(double,double)",
        "org.apache.commons.math3.analysis.function.Inverse#value(double)",
        "org.apache.commons.math3.analysis.function.HarmonicOscillator#value(double)",
        "org.apache.commons.math3.analysis.FunctionUtils.fix1stArgument(BivariateFunction,double)$UnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.function.Asin#value(double)",
        "org.apache.commons.math3.analysis.function.Asinh#value(double)",
        "org.apache.commons.math3.analysis.FunctionUtils.multiply(UnivariateFunction[]...)$UnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.function.Atan#value(double)",
        "org.apache.commons.math3.analysis.FunctionUtils.toDifferentiableUnivariateFunction(UnivariateDifferentiableFunction)$DifferentiableUnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.function.Cbrt#value(double)",
        "org.apache.commons.math3.analysis.polynomials.PolynomialFunctionLagrangeForm#value(double)",
        "org.apache.commons.math3.analysis.function.Exp#value(double)",
        "org.apache.commons.math3.special.BesselJ#value(double)",
        "org.apache.commons.math3.analysis.polynomials.PolynomialFunctionNewtonForm#value(double)",
        "org.apache.commons.math3.analysis.FunctionUtils.add(UnivariateFunction[]...)$UnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.function.Sin#value(double)",
        "org.apache.commons.math3.analysis.function.Cos#value(double)",
        "org.apache.commons.math3.analysis.interpolation.UnivariatePeriodicInterpolator#interpolate(double[],double[])$UnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.function.Log10#value(double)",
        "org.apache.commons.math3.analysis.function.Sqrt#value(double)",
        "org.apache.commons.math3.analysis.function.Log#value(double)",
        "org.apache.commons.math3.analysis.function.Sinc#value(double)",
        "org.apache.commons.math3.ode.events.EventState#evaluateStep(StepInterpolator)$UnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.function.Minus#value(double)",
        "org.apache.commons.math3.analysis.integration.IterativeLegendreGaussIntegrator#stage(int)$UnivariateFunction$1#value(double)",
        "org.apache.commons.math3.optimization.general.NonLinearConjugateGradientOptimizer.LineSearchFunction#value(double)",
        "org.apache.commons.math3.analysis.function.Floor#value(double)",
        "org.apache.commons.math3.analysis.FunctionUtils.multiply(DifferentiableUnivariateFunction[]...)$DifferentiableUnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.FunctionUtils.combine(BivariateFunction,UnivariateFunction,UnivariateFunction)$UnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.FunctionUtils.add(DifferentiableUnivariateFunction[]...)$UnivariateFunction$1$UnivariateFunction$1#derivative()$UnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.function.Sinh#value(double)",
        "org.apache.commons.math3.analysis.FunctionUtils.multiply(UnivariateDifferentiableFunction[]...)$UnivariateDifferentiableFunction$1#value(double)",
        "org.apache.commons.math3.analysis.function.Tan#value(double)",
        "org.apache.commons.math3.distribution.AbstractRealDistribution#inverseCumulativeProbability(double)$UnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.FunctionUtils.add(DifferentiableUnivariateFunction[]...)$DifferentiableUnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.function.Ceil#value(double)",
        "org.apache.commons.math3.analysis.function.Logistic#value(double)",
        "org.apache.commons.math3.analysis.function.Signum#value(double)",
        "org.apache.commons.math3.analysis.function.Constant#value(double)",
        "org.apache.commons.math3.analysis.function.Atanh#value(double)",
        "org.apache.commons.math3.analysis.FunctionUtils.compose(DifferentiableUnivariateFunction[]...)$UnivariateFunction$1$UnivariateFunction$1#derivative()$UnivariateFunction$1#value(double)",
        "org.apache.commons.math3.util.FastMath.max(double,double)",
        "org.apache.commons.math3.analysis.FunctionUtils.add(UnivariateDifferentiableFunction[]...)$UnivariateDifferentiableFunction$1#value(double)",
        "org.apache.commons.math3.analysis.function.Abs#value(double)",
        "org.apache.commons.math3.analysis.differentiation.FiniteDifferencesDifferentiator#differentiate(UnivariateFunction)$UnivariateDifferentiableFunction$1#value(double)",
        "org.apache.commons.math3.analysis.function.Identity#value(double)",
        "org.apache.commons.math3.analysis.function.Expm1#value(double)",
        "org.apache.commons.math3.analysis.function.Logit#value(double)",
        "org.apache.commons.math3.analysis.function.Log1p#value(double)",
        "org.apache.commons.math3.analysis.FunctionUtils.fix2ndArgument(BivariateFunction,double)$UnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.FunctionUtils.toUnivariateDifferential(DifferentiableUnivariateFunction)$UnivariateDifferentiableFunction$1#value(double)",
        "org.apache.commons.math3.analysis.FunctionUtils.toDifferentiableUnivariateFunction(UnivariateDifferentiableFunction)$UnivariateFunction$1$UnivariateFunction$1#derivative()$UnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.differentiation.DerivativeStructure#getOrder()",
        "org.apache.commons.math3.analysis.polynomials.PolynomialFunction#value(double)",
        "org.apache.commons.math3.analysis.function.Rint#value(double)",
        "org.apache.commons.math3.analysis.FunctionUtils.compose(UnivariateFunction[]...)$UnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.function.Cosh#value(double)",
        "org.apache.commons.math3.optimization.direct.PowellOptimizer.LineSearch#search(double[],double[])$UnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.FunctionUtils.compose(DifferentiableUnivariateFunction[]...)$DifferentiableUnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.function.Acosh#value(double)",
        "org.apache.commons.math3.analysis.function.StepFunction#value(double)",
        "org.apache.commons.math3.analysis.FunctionUtils.compose(UnivariateDifferentiableFunction[]...)$UnivariateDifferentiableFunction$1#value(double)",
        "org.apache.commons.math3.analysis.function.Acos#value(double)",
        "org.apache.commons.math3.analysis.differentiation.FiniteDifferencesDifferentiator#evaluate(DerivativeStructure,double,double[])",
        "org.apache.commons.math3.analysis.function.Power#value(double)",
        "org.apache.commons.math3.analysis.differentiation.DerivativeStructure#getValue()",
        "org.apache.commons.math3.optim.nonlinear.scalar.LineSearch#search(double[],double[])$UnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.function.Sigmoid#value(double)",
        "org.apache.commons.math3.analysis.function.Ulp#value(double)"
    ],
    "org.apache.commons.math3.optim.PointValuePair#getPoint()": ["org.apache.commons.math3.util.Pair#getKey()"],
    "org.apache.commons.math3.analysis.polynomials.PolynomialSplineFunction#value(DerivativeStructure)": [
        "org.apache.commons.math3.analysis.differentiation.DerivativeStructure#subtract(double)",
        "org.apache.commons.math3.analysis.polynomials.PolynomialFunction#value(DerivativeStructure)",
        "org.apache.commons.math3.analysis.differentiation.DerivativeStructure#getValue()"
    ],
    "org.apache.commons.math3.linear.OpenMapRealVector#OpenMapRealVector(Double[])": [
        "org.apache.commons.math3.linear.OpenMapRealVector#OpenMapRealVector(Double[],double)",
        "org.apache.commons.math3.linear.OpenMapRealVector.<staticinit>()"
    ],
    "org.apache.commons.math3.fraction.ProperFractionFormat#parse(String,ParsePosition)": [
        "org.apache.commons.math3.util.FastMath.abs(int)",
        "org.apache.commons.math3.fraction.AbstractFormat#getNumeratorFormat()",
        "org.apache.commons.math3.fraction.ProperFractionFormat#getWholeFormat()",
        "org.apache.commons.math3.util.MathUtils.copySign(int,int)",
        "org.apache.commons.math3.fraction.AbstractFormat#getDenominatorFormat()",
        "org.apache.commons.math3.fraction.FractionFormat#parse(String,ParsePosition)",
        "org.apache.commons.math3.fraction.Fraction#Fraction(double,int)",
        "org.apache.commons.math3.fraction.AbstractFormat.parseAndIgnoreWhitespace(String,ParsePosition)",
        "org.apache.commons.math3.fraction.Fraction#Fraction(int,int)",
        "org.apache.commons.math3.fraction.AbstractFormat.parseNextCharacter(String,ParsePosition)"
    ],
    "org.apache.commons.math3.linear.Array2DRowRealMatrix#walkInColumnOrder(RealMatrixPreservingVisitor)": [
        "org.apache.commons.math3.linear.DefaultRealMatrixPreservingVisitor#start(int,int,int,int,int,int)",
        "org.apache.commons.math3.linear.Array2DRowRealMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.AbstractRealMatrix#copySubMatrix(int,int,int,int,double[][])$DefaultRealMatrixPreservingVisitor$1#start(int,int,int,int,int,int)",
        "org.apache.commons.math3.linear.DefaultRealMatrixPreservingVisitor#visit(int,int,double)",
        "org.apache.commons.math3.linear.SingularValueDecomposition#getCovariance(double)$DefaultRealMatrixPreservingVisitor$1#visit(int,int,double)",
        "org.apache.commons.math3.linear.AbstractRealMatrix#getNorm()$RealMatrixPreservingVisitor$1#end()",
        "org.apache.commons.math3.linear.AbstractRealMatrix#getFrobeniusNorm()$RealMatrixPreservingVisitor$1#end()",
        "org.apache.commons.math3.linear.AbstractRealMatrix#getFrobeniusNorm()$RealMatrixPreservingVisitor$1#visit(int,int,double)",
        "org.apache.commons.math3.linear.AbstractRealMatrix#getFrobeniusNorm()$RealMatrixPreservingVisitor$1#start(int,int,int,int,int,int)",
        "org.apache.commons.math3.linear.DefaultRealMatrixPreservingVisitor#end()",
        "org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator.Corrector#start(int,int,int,int,int,int)",
        "org.apache.commons.math3.linear.AbstractRealMatrix#getNorm()$RealMatrixPreservingVisitor$1#visit(int,int,double)",
        "org.apache.commons.math3.linear.AbstractRealMatrix#copySubMatrix(int,int,int,int,double[][])$DefaultRealMatrixPreservingVisitor$1#visit(int,int,double)",
        "org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator.Corrector#visit(int,int,double)",
        "org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator.Corrector#end()",
        "org.apache.commons.math3.linear.Array2DRowRealMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.AbstractRealMatrix#getNorm()$RealMatrixPreservingVisitor$1#start(int,int,int,int,int,int)",
        "org.apache.commons.math3.linear.AbstractRealMatrix#transpose()$DefaultRealMatrixPreservingVisitor$1#visit(int,int,double)"
    ],
    "org.apache.commons.math3.dfp.Dfp#Dfp(DfpField)": [
        "org.apache.commons.math3.dfp.Dfp.<staticinit>()",
        "org.apache.commons.math3.dfp.Dfp.<init>()",
        "org.apache.commons.math3.dfp.DfpField#getRadixDigits()"
    ],
    "org.apache.commons.math3.linear.AbstractRealMatrix#getRowVector(int)": [
        "org.apache.commons.math3.linear.ArrayRealVector#ArrayRealVector(double[],boolean)",
        "org.apache.commons.math3.linear.BlockRealMatrix#getRow(int)",
        "org.apache.commons.math3.linear.AbstractRealMatrix#getRow(int)"
    ],
    "org.apache.commons.math3.ode.ParameterizedWrapper#ParameterizedWrapper(FirstOrderDifferentialEquations)": ["org.apache.commons.math3.ode.ParameterizedWrapper.<init>()"],
    "org.apache.commons.math3.stat.inference.KolmogorovSmirnovTest#createRoundedH(double,int)": [
        "org.apache.commons.math3.linear.MatrixUtils.createRealMatrix(double[][])",
        "org.apache.commons.math3.util.FastMath.pow(double,int)"
    ],
    "org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet#PolygonsSet(BSPTree<Euclidean2D>,double)": [
        "org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.<init>()",
        "org.apache.commons.math3.geometry.partitioning.AbstractRegion#AbstractRegion(BSPTree<S extends Space>,double)"
    ],
    "org.apache.commons.math3.complex.Complex#Complex(double,double)": ["org.apache.commons.math3.complex.Complex.<init>()"],
    "org.apache.commons.math3.analysis.differentiation.DerivativeStructure#atanh()": [
        "org.apache.commons.math3.analysis.differentiation.DSCompiler#atanh(double[],int,double[],int)",
        "org.apache.commons.math3.analysis.differentiation.DerivativeStructure#DerivativeStructure(DSCompiler)"
    ],
    "org.apache.commons.math3.dfp.Dfp#rootN(int)": [
        "org.apache.commons.math3.dfp.Dfp#getOne()",
        "org.apache.commons.math3.dfp.Dfp#negate()",
        "org.apache.commons.math3.dfp.DfpMath.pow(Dfp,Dfp)",
        "org.apache.commons.math3.dfp.Dfp#divide(int)"
    ],
    "org.apache.commons.math3.stat.descriptive.MultivariateSummaryStatistics#getCovariance()": ["org.apache.commons.math3.stat.descriptive.moment.VectorialCovariance#getResult()"],
    "org.apache.commons.math3.util.Decimal64Field.getInstance()": ["org.apache.commons.math3.util.Decimal64Field.<staticinit>()"],
    "org.apache.commons.math3.util.OpenIntToDoubleHashMap#growTable()": [
        "org.apache.commons.math3.util.OpenIntToDoubleHashMap.<staticinit>()",
        "org.apache.commons.math3.util.OpenIntToDoubleHashMap.findInsertionIndex(int[],byte[],int,int)"
    ],
    "org.apache.commons.math3.dfp.Dfp#round(int)": [
        "org.apache.commons.math3.dfp.DfpField.<staticinit>()",
        "org.apache.commons.math3.dfp.DfpField.RoundingMode.<staticinit>()",
        "org.apache.commons.math3.dfp.DfpField#getRoundingMode()",
        "org.apache.commons.math3.dfp.DfpField#setIEEEFlagsBits(int)",
        "org.apache.commons.math3.dfp.Dfp.<staticinit>()",
        "org.apache.commons.math3.dfp.Dfp#shiftRight()"
    ],
    "org.apache.commons.math3.fitting.PolynomialFitter#fit(double[])": [
        "org.apache.commons.math3.fitting.CurveFitter#fit(T extends ParametricUnivariateFunction,double[])",
        "org.apache.commons.math3.analysis.polynomials.PolynomialFunction.Parametric.<init>()"
    ],
    "org.apache.commons.math3.linear.AbstractFieldMatrix#transpose()$DefaultFieldMatrixPreservingVisitor$1.<init>()": ["org.apache.commons.math3.linear.DefaultFieldMatrixPreservingVisitor#DefaultFieldMatrixPreservingVisitor(T extends FieldElement)"],
    "org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.boxBoundary(double,double,double,double,double)": [
        "org.apache.commons.math3.geometry.euclidean.twod.Line#Line(Vector2D,Vector2D,double)",
        "org.apache.commons.math3.geometry.euclidean.twod.Vector2D#Vector2D(double,double)"
    ],
    "org.apache.commons.math3.ode.nonstiff.EulerIntegrator#EulerIntegrator(double)": [
        "org.apache.commons.math3.ode.nonstiff.EulerIntegrator.<init>()",
        "org.apache.commons.math3.ode.nonstiff.EulerStepInterpolator#EulerStepInterpolator()",
        "org.apache.commons.math3.ode.nonstiff.EulerIntegrator.<staticinit>()",
        "org.apache.commons.math3.ode.nonstiff.RungeKuttaIntegrator#RungeKuttaIntegrator(String,double[],double[][],double[],RungeKuttaStepInterpolator,double)"
    ],
    "org.apache.commons.math3.linear.RealVector#iterator()$Iterator$1#remove()": ["org.apache.commons.math3.exception.MathUnsupportedOperationException#MathUnsupportedOperationException()"],
    "org.apache.commons.math3.linear.QRDecomposition.Solver#getInverse()": [
        "org.apache.commons.math3.linear.MatrixUtils.createRealIdentityMatrix(int)",
        "org.apache.commons.math3.linear.QRDecomposition.Solver#solve(RealMatrix)"
    ],
    "org.apache.commons.math3.analysis.FunctionUtils.add(DifferentiableUnivariateFunction[]...)$DifferentiableUnivariateFunction$1#derivative()": ["org.apache.commons.math3.analysis.FunctionUtils.add(DifferentiableUnivariateFunction[]...)$UnivariateFunction$1$UnivariateFunction$1#derivative()$UnivariateFunction$1.<init>()"],
    "org.apache.commons.math3.geometry.partitioning.BSPTree#pruneAroundConvexCell(Object,Object,Object)": [
        "org.apache.commons.math3.geometry.partitioning.BSPTree#BSPTree(SubHyperplane<S extends Space>,BSPTree<S extends Space>,BSPTree<S extends Space>,Object)",
        "org.apache.commons.math3.geometry.partitioning.BSPTree#BSPTree(Object)",
        "org.apache.commons.math3.geometry.partitioning.AbstractSubHyperplane#copySelf()"
    ],
    "org.apache.commons.math3.analysis.differentiation.DerivativeStructure#linearCombination(double,DerivativeStructure,double,DerivativeStructure)": [
        "org.apache.commons.math3.analysis.differentiation.DerivativeStructure#getValue()",
        "org.apache.commons.math3.analysis.differentiation.DerivativeStructure#add(DerivativeStructure)",
        "org.apache.commons.math3.analysis.differentiation.DerivativeStructure#DerivativeStructure(int,int,double[]...)",
        "org.apache.commons.math3.analysis.differentiation.DerivativeStructure#getOrder()",
        "org.apache.commons.math3.analysis.differentiation.DerivativeStructure#multiply(double)",
        "org.apache.commons.math3.util.MathArrays.linearCombination(double,double,double,double)",
        "org.apache.commons.math3.analysis.differentiation.DerivativeStructure#getFreeParameters()",
        "org.apache.commons.math3.analysis.differentiation.DerivativeStructure#getAllDerivatives()"
    ],
    "org.apache.commons.math3.random.RandomDataGenerator#nextSample(Collection<?>,int)": [
        "org.apache.commons.math3.random.RandomDataGenerator#nextPermutation(int,int)",
        "org.apache.commons.math3.exception.util.LocalizedFormats.<staticinit>()"
    ],
    "org.apache.commons.math3.stat.descriptive.MultivariateSummaryStatistics#setImpl(StorelessUnivariateStatistic[],StorelessUnivariateStatistic[])": [
        "org.apache.commons.math3.stat.descriptive.MultivariateSummaryStatistics#checkDimension(int)",
        "org.apache.commons.math3.stat.descriptive.MultivariateSummaryStatistics#checkEmpty()"
    ],
    "org.apache.commons.math3.geometry.euclidean.threed.Rotation#Rotation(double,double,double,double,boolean)": [
        "org.apache.commons.math3.util.FastMath.sqrt(double)",
        "org.apache.commons.math3.geometry.euclidean.threed.Rotation.<init>()"
    ],
    "org.apache.commons.math3.stat.descriptive.rank.Median#Median()": [
        "org.apache.commons.math3.stat.descriptive.rank.Median.<init>()",
        "org.apache.commons.math3.stat.descriptive.rank.Percentile#Percentile(double)",
        "org.apache.commons.math3.stat.descriptive.rank.Median.<staticinit>()"
    ],
    "org.apache.commons.math3.util.FastMath.floorMod(long,long)": ["org.apache.commons.math3.exception.util.LocalizedFormats.<staticinit>()"],
    "org.apache.commons.math3.linear.ArrayRealVector#setEntry(int,double)": ["org.apache.commons.math3.linear.RealVector#checkIndex(int)"],
    "org.apache.commons.math3.ode.AbstractFieldIntegrator#addEventHandler(FieldEventHandler<T extends RealFieldElement>,double,double,int,BracketedRealFieldUnivariateSolver<T extends RealFieldElement>)": [
        "org.apache.commons.math3.analysis.differentiation.DerivativeStructure#add(double)",
        "org.apache.commons.math3.util.BigRealField#getZero()",
        "org.apache.commons.math3.analysis.differentiation.SparseGradient#getField()$Field$1#getZero()",
        "org.apache.commons.math3.analysis.differentiation.DerivativeStructure#getField()$Field$1#getZero()",
        "org.apache.commons.math3.fraction.FractionField#getZero()",
        "org.apache.commons.math3.util.Decimal64Field#getZero()",
        "org.apache.commons.math3.dfp.DfpField#getZero()",
        "org.apache.commons.math3.complex.ComplexField#getZero()",
        "org.apache.commons.math3.fraction.BigFractionField#getZero()",
        "org.apache.commons.math3.util.Decimal64#add(double)",
        "org.apache.commons.math3.analysis.differentiation.SparseGradient#add(double)",
        "org.apache.commons.math3.dfp.Dfp#add(double)"
    ],
    "org.apache.commons.math3.ml.neuralnet.sofm.NeighbourhoodSizeFunctionFactory.quasiSigmoidDecay(double,double,long)$NeighbourhoodSizeFunction$1.<init>()": ["org.apache.commons.math3.ml.neuralnet.sofm.util.QuasiSigmoidDecayFunction#QuasiSigmoidDecayFunction(double,double,long)"],
    "org.apache.commons.math3.random.Well512a#Well512a(int[])": [
        "org.apache.commons.math3.random.AbstractWell#AbstractWell(int,int,int,int,int[])",
        "org.apache.commons.math3.random.Well512a.<staticinit>()",
        "org.apache.commons.math3.random.Well512a.<init>()"
    ],
    "org.apache.commons.math3.dfp.DfpDec#newInstance(byte,byte)": [
        "org.apache.commons.math3.dfp.Dfp#getField()",
        "org.apache.commons.math3.dfp.DfpDec#DfpDec(DfpField,byte,byte)"
    ],
    "org.apache.commons.math3.geometry.euclidean.twod.Vector2DFormat#parse(String,ParsePosition)": [
        "org.apache.commons.math3.geometry.VectorFormat#parseCoordinates(int,String,ParsePosition)",
        "org.apache.commons.math3.geometry.euclidean.twod.Vector2D#Vector2D(double,double)"
    ],
    "org.apache.commons.math3.optim.linear.LinearConstraint#hashCode()": [
        "org.apache.commons.math3.linear.ArrayRealVector#hashCode()",
        "org.apache.commons.math3.linear.RealVector#hashCode()",
        "org.apache.commons.math3.linear.OpenMapRealVector#hashCode()"
    ],
    "org.apache.commons.math3.dfp.Dfp#lessThan(Dfp)": [
        "org.apache.commons.math3.dfp.DfpDec#newInstance(Dfp)",
        "org.apache.commons.math3.dfp.Dfp.<staticinit>()",
        "org.apache.commons.math3.dfp.Dfp#dotrap(int,String,Dfp,Dfp)",
        "org.apache.commons.math3.dfp.Dfp#newInstance(Dfp)",
        "org.apache.commons.math3.dfp.DfpField.<staticinit>()",
        "org.apache.commons.math3.dfp.DfpField#setIEEEFlagsBits(int)",
        "org.apache.commons.math3.dfp.DfpField#getRadixDigits()",
        "org.apache.commons.math3.dfp.Dfp.compare(Dfp,Dfp)",
        "org.apache.commons.math3.dfp.Dfp#isNaN()",
        "org.apache.commons.math3.dfp.Dfp#getZero()"
    ],
    "org.apache.commons.math3.analysis.solvers.NewtonRaphsonSolver#NewtonRaphsonSolver(double)": [
        "org.apache.commons.math3.analysis.solvers.NewtonRaphsonSolver.<init>()",
        "org.apache.commons.math3.analysis.solvers.AbstractUnivariateDifferentiableSolver#AbstractUnivariateDifferentiableSolver(double)"
    ],
    "org.apache.commons.math3.fraction.BigFractionFormat.getProperInstance()": ["org.apache.commons.math3.fraction.BigFractionFormat.getProperInstance(Locale)"],
    "org.apache.commons.math3.geometry.spherical.twod.PropertiesComputer#getBarycenter()": [
        "org.apache.commons.math3.geometry.spherical.twod.S2Point.<staticinit>()",
        "org.apache.commons.math3.geometry.spherical.twod.S2Point#S2Point(Vector3D)",
        "org.apache.commons.math3.geometry.euclidean.threed.Vector3D#getNormSq()"
    ],
    "org.apache.commons.math3.userguide.genetics.HelloWorldExample.StringChromosome#StringChromosome(String)": [
        "org.apache.commons.math3.userguide.genetics.HelloWorldExample.asList(String)",
        "org.apache.commons.math3.userguide.genetics.HelloWorldExample.StringChromosome#StringChromosome(List<Character>)"
    ],
    "org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet.RotationTransform#apply(SubHyperplane<Euclidean2D>,Hyperplane<Euclidean3D>,Hyperplane<Euclidean3D>)": [
        "org.apache.commons.math3.geometry.euclidean.twod.Vector2D#getY()",
        "org.apache.commons.math3.geometry.euclidean.twod.Vector2D#getX()",
        "org.apache.commons.math3.geometry.partitioning.AbstractSubHyperplane#applyTransform(Transform<S extends Space, T extends Space>)",
        "org.apache.commons.math3.geometry.euclidean.twod.Line.getTransform(double,double,double,double,double,double)",
        "org.apache.commons.math3.geometry.euclidean.twod.Vector2D#Vector2D(double,double)",
        "org.apache.commons.math3.geometry.euclidean.threed.Plane#toSubSpace(Point<Euclidean3D>)",
        "org.apache.commons.math3.geometry.euclidean.threed.Plane#toSpace(Point<Euclidean2D>)",
        "org.apache.commons.math3.geometry.euclidean.threed.Plane#getOrigin()",
        "org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet.RotationTransform#apply(Point<Euclidean3D>)"
    ],
    "org.apache.commons.math3.distribution.LaplaceDistribution#density(double)": [
        "org.apache.commons.math3.util.FastMath.abs(double)",
        "org.apache.commons.math3.util.FastMath.exp(double)"
    ],
    "org.apache.commons.math3.fraction.ProperFractionFormat#ProperFractionFormat(NumberFormat)": ["org.apache.commons.math3.fraction.ProperFractionFormat#ProperFractionFormat(NumberFormat,NumberFormat,NumberFormat)"],
    "org.apache.commons.math3.optim.linear.SimplexSolver#doIteration(SimplexTableau)": [
        "org.apache.commons.math3.optim.linear.SimplexTableau#performRowOperations(int,int)",
        "org.apache.commons.math3.optim.linear.UnboundedSolutionException#UnboundedSolutionException()",
        "org.apache.commons.math3.optim.BaseOptimizer#incrementIterationCount()",
        "org.apache.commons.math3.optim.linear.SimplexSolver#getPivotRow(SimplexTableau,int)",
        "org.apache.commons.math3.optim.linear.SimplexSolver#getPivotColumn(SimplexTableau)"
    ],
    "org.apache.commons.math3.stat.descriptive.DescriptiveStatistics#copy()": [
        "org.apache.commons.math3.stat.descriptive.DescriptiveStatistics#DescriptiveStatistics()",
        "org.apache.commons.math3.stat.descriptive.DescriptiveStatistics.copy(DescriptiveStatistics,DescriptiveStatistics)"
    ],
    "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizer#checkParameters()": [
        "org.apache.commons.math3.exception.NullArgumentException#NullArgumentException()",
        "org.apache.commons.math3.optim.BaseMultivariateOptimizer#getUpperBound()",
        "org.apache.commons.math3.exception.util.LocalizedFormats.<staticinit>()",
        "org.apache.commons.math3.optim.BaseMultivariateOptimizer#getLowerBound()"
    ],
    "org.apache.commons.math3.optimization.direct.CMAESOptimizer#parseOptimizationData(OptimizationData[]...)": [
        "org.apache.commons.math3.optimization.direct.CMAESOptimizer.PopulationSize#getPopulationSize()",
        "org.apache.commons.math3.optimization.direct.CMAESOptimizer.Sigma#getSigma()"
    ],
    "org.apache.commons.math3.optimization.univariate.BrentOptimizer#BrentOptimizer(double,double,ConvergenceChecker<UnivariatePointValuePair>)": [
        "org.apache.commons.math3.optimization.univariate.BaseAbstractUnivariateOptimizer#BaseAbstractUnivariateOptimizer(ConvergenceChecker<UnivariatePointValuePair>)",
        "org.apache.commons.math3.optimization.univariate.BrentOptimizer.<init>()",
        "org.apache.commons.math3.optimization.univariate.BrentOptimizer.<staticinit>()"
    ],
    "org.apache.commons.math3.optimization.direct.CMAESOptimizer#checkParameters()": [
        "org.apache.commons.math3.exception.DimensionMismatchException#DimensionMismatchException(int,int)",
        "org.apache.commons.math3.optimization.direct.BaseAbstractMultivariateOptimizer#getLowerBound()",
        "org.apache.commons.math3.optimization.direct.BaseAbstractMultivariateOptimizer#getStartPoint()",
        "org.apache.commons.math3.optimization.direct.BaseAbstractMultivariateOptimizer#getUpperBound()"
    ],
    "org.apache.commons.math3.linear.RealVector.unmodifiableRealVector(RealVector)$RealVector$1#combineToSelf(double,double,RealVector)": ["org.apache.commons.math3.exception.MathUnsupportedOperationException#MathUnsupportedOperationException()"],
    "org.apache.commons.math3.optimization.AbstractConvergenceChecker#AbstractConvergenceChecker()": [
        "org.apache.commons.math3.optimization.AbstractConvergenceChecker.<staticinit>()",
        "org.apache.commons.math3.optimization.AbstractConvergenceChecker.<init>()"
    ],
    "org.apache.commons.math3.distribution.KolmogorovSmirnovDistribution#roundedK(double)": [
        "org.apache.commons.math3.linear.SparseFieldMatrix#getEntry(int,int)",
        "org.apache.commons.math3.util.FastMath.ceil(double)",
        "org.apache.commons.math3.distribution.KolmogorovSmirnovDistribution#createH(double)",
        "org.apache.commons.math3.linear.Array2DRowRealMatrix#setEntry(int,int,double)",
        "org.apache.commons.math3.linear.SparseFieldMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.DiagonalMatrix#getEntry(int,int)",
        "org.apache.commons.math3.linear.OpenMapRealMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.DiagonalMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.BlockRealMatrix#setEntry(int,int,double)",
        "org.apache.commons.math3.linear.OpenMapRealMatrix#setEntry(int,int,double)",
        "org.apache.commons.math3.linear.Array2DRowRealMatrix#Array2DRowRealMatrix(int,int)",
        "org.apache.commons.math3.linear.OpenMapRealMatrix#getEntry(int,int)",
        "org.apache.commons.math3.linear.AbstractRealMatrix#power(int)",
        "org.apache.commons.math3.linear.BlockRealMatrix#getEntry(int,int)",
        "org.apache.commons.math3.linear.BlockFieldMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.BlockRealMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.Array2DRowRealMatrix#getEntry(int,int)",
        "org.apache.commons.math3.linear.Array2DRowRealMatrix#getRowDimension()",
        "org.apache.commons.math3.fraction.BigFraction#doubleValue()",
        "org.apache.commons.math3.linear.Array2DRowFieldMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.Array2DRowFieldMatrix#getEntry(int,int)",
        "org.apache.commons.math3.linear.BlockFieldMatrix#getEntry(int,int)",
        "org.apache.commons.math3.linear.DiagonalMatrix#setEntry(int,int,double)"
    ],
    "org.apache.commons.math3.linear.Array2DRowRealMatrix#multiply(Array2DRowRealMatrix)": [
        "org.apache.commons.math3.linear.Array2DRowRealMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.Array2DRowRealMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.MatrixUtils.checkMultiplicationCompatible(AnyMatrix,AnyMatrix)",
        "org.apache.commons.math3.linear.Array2DRowRealMatrix#Array2DRowRealMatrix(double[][],boolean)"
    ],
    "org.apache.commons.math3.geometry.euclidean.threed.FieldRotation#FieldRotation(RotationOrder,RotationConvention,T extends RealFieldElement,T extends RealFieldElement,T extends RealFieldElement)": [
        "org.apache.commons.math3.geometry.euclidean.threed.RotationOrder#getA3()",
        "org.apache.commons.math3.geometry.euclidean.threed.RotationOrder#getA2()",
        "org.apache.commons.math3.geometry.euclidean.threed.RotationOrder#getA1()",
        "org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D#FieldVector3D(T extends RealFieldElement,Vector3D)",
        "org.apache.commons.math3.geometry.euclidean.threed.FieldRotation#FieldRotation(FieldVector3D<T extends RealFieldElement>,T extends RealFieldElement,RotationConvention)",
        "org.apache.commons.math3.geometry.euclidean.threed.FieldRotation.<init>()",
        "org.apache.commons.math3.geometry.euclidean.threed.FieldRotation#compose(FieldRotation<T extends RealFieldElement>,RotationConvention)"
    ],
    "org.apache.commons.math3.linear.AbstractFieldMatrix#walkInRowOrder(FieldMatrixChangingVisitor<T extends FieldElement>,int,int,int,int)": [
        "org.apache.commons.math3.linear.SparseFieldMatrix#getEntry(int,int)",
        "org.apache.commons.math3.linear.BlockFieldMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.DefaultFieldMatrixChangingVisitor#start(int,int,int,int,int,int)",
        "org.apache.commons.math3.linear.SparseFieldMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.SparseFieldMatrix#setEntry(int,int,T extends FieldElement)",
        "org.apache.commons.math3.linear.Array2DRowFieldMatrix#setEntry(int,int,T extends FieldElement)",
        "org.apache.commons.math3.linear.BlockFieldMatrix#setEntry(int,int,T extends FieldElement)",
        "org.apache.commons.math3.linear.AbstractFieldMatrix#checkSubMatrixIndex(int,int,int,int)",
        "org.apache.commons.math3.linear.DefaultFieldMatrixChangingVisitor#end()",
        "org.apache.commons.math3.linear.Array2DRowFieldMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.SparseFieldMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.BlockFieldMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.DefaultFieldMatrixChangingVisitor#visit(int,int,T extends FieldElement)",
        "org.apache.commons.math3.linear.Array2DRowFieldMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.AbstractFieldMatrix#getSubMatrix(int[],int[])$DefaultFieldMatrixChangingVisitor$1#visit(int,int,T extends FieldElement)",
        "org.apache.commons.math3.linear.Array2DRowFieldMatrix#getEntry(int,int)",
        "org.apache.commons.math3.linear.BlockFieldMatrix#getEntry(int,int)"
    ],
    "org.apache.commons.math3.optimization.Target#Target(double[])": ["org.apache.commons.math3.optimization.Target.<init>()"],
    "org.apache.commons.math3.optim.nonlinear.vector.JacobianMultivariateVectorOptimizer#JacobianMultivariateVectorOptimizer(ConvergenceChecker<PointVectorValuePair>)": [
        "org.apache.commons.math3.optim.nonlinear.vector.MultivariateVectorOptimizer#MultivariateVectorOptimizer(ConvergenceChecker<PointVectorValuePair>)",
        "org.apache.commons.math3.optim.nonlinear.vector.JacobianMultivariateVectorOptimizer.<init>()"
    ],
    "org.apache.commons.math3.special.Beta.logBeta(double,double)": [
        "org.apache.commons.math3.special.Beta.<staticinit>()",
        "org.apache.commons.math3.util.FastMath.log1p(double)",
        "org.apache.commons.math3.util.FastMath.max(double,double)",
        "org.apache.commons.math3.special.Gamma.logGamma(double)",
        "org.apache.commons.math3.util.FastMath.floor(double)",
        "org.apache.commons.math3.util.FastMath.min(double,double)",
        "org.apache.commons.math3.special.Beta.logGammaMinusLogGammaSum(double,double)",
        "org.apache.commons.math3.special.Beta.sumDeltaMinusDeltaSum(double,double)",
        "org.apache.commons.math3.util.FastMath.log(double)",
        "org.apache.commons.math3.special.Beta.logGammaSum(double,double)",
        "org.apache.commons.math3.special.Gamma.gamma(double)"
    ],
    "org.apache.commons.math3.geometry.euclidean.threed.FieldRotation#composeInverseInternal(Rotation)": [
        "org.apache.commons.math3.geometry.euclidean.threed.Rotation#getQ3()",
        "org.apache.commons.math3.geometry.euclidean.threed.Rotation#getQ2()",
        "org.apache.commons.math3.geometry.euclidean.threed.Rotation#getQ1()",
        "org.apache.commons.math3.geometry.euclidean.threed.Rotation#getQ0()",
        "org.apache.commons.math3.geometry.euclidean.threed.FieldRotation#FieldRotation(T extends RealFieldElement,T extends RealFieldElement,T extends RealFieldElement,T extends RealFieldElement,boolean)"
    ],
    "org.apache.commons.math3.stat.descriptive.SummaryStatistics#copy()": [
        "org.apache.commons.math3.stat.descriptive.SummaryStatistics.copy(SummaryStatistics,SummaryStatistics)",
        "org.apache.commons.math3.stat.descriptive.SummaryStatistics#SummaryStatistics()"
    ],
    "org.apache.commons.math3.random.Well44497b#Well44497b(long)": [
        "org.apache.commons.math3.random.Well44497b.<init>()",
        "org.apache.commons.math3.random.AbstractWell#AbstractWell(int,int,int,int,long)",
        "org.apache.commons.math3.random.Well44497b.<staticinit>()"
    ],
    "org.apache.commons.math3.geometry.euclidean.twod.Vector2D#negate()": ["org.apache.commons.math3.geometry.euclidean.twod.Vector2D#Vector2D(double,double)"],
    "org.apache.commons.math3.ode.events.FieldEventState#evaluateStep(FieldStepInterpolator<T extends RealFieldElement>)$RealFieldUnivariateFunction$1#value(T extends RealFieldElement)": ["org.apache.commons.math3.ode.sampling.AbstractFieldStepInterpolator#getInterpolatedState(T extends RealFieldElement)"],
    "org.apache.commons.math3.geometry.euclidean.threed.Rotation#getAngle()": [
        "org.apache.commons.math3.util.FastMath.acos(double)",
        "org.apache.commons.math3.util.FastMath.sqrt(double)",
        "org.apache.commons.math3.util.FastMath.asin(double)"
    ],
    "org.apache.commons.math3.random.RandomDataGenerator#nextGaussian(double,double)": [
        "org.apache.commons.math3.random.RandomAdaptor#nextGaussian()",
        "org.apache.commons.math3.random.RandomDataGenerator#getRandomGenerator()",
        "org.apache.commons.math3.random.SynchronizedRandomGenerator#nextGaussian()",
        "org.apache.commons.math3.random.RandomGeneratorFactory.createRandomGenerator(Random)$RandomGenerator$1#nextGaussian()",
        "org.apache.commons.math3.random.BitsStreamGenerator#nextGaussian()",
        "org.apache.commons.math3.random.AbstractRandomGenerator#nextGaussian()",
        "org.apache.commons.math3.exception.util.LocalizedFormats.<staticinit>()"
    ],
    "org.apache.commons.math3.geometry.partitioning.RegionFactory.NodesCleaner#visitOrder(BSPTree<S extends Space>)": ["org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor.Order.<staticinit>()"],
    "org.apache.commons.math3.userguide.genetics.PolygonChromosome#toString()": ["org.apache.commons.math3.genetics.Chromosome#getFitness()"],
    "org.apache.commons.math3.stat.inference.TTest#tTest(double[],double[],double)": [
        "org.apache.commons.math3.stat.inference.TTest#tTest(double[],double[])",
        "org.apache.commons.math3.stat.inference.TTest#checkSignificanceLevel(double)"
    ],
    "org.apache.commons.math3.analysis.function.Sigmoid.Parametric#gradient(double,double[]...)": [
        "org.apache.commons.math3.analysis.function.Sigmoid.Parametric#validateParameters(double[])",
        "org.apache.commons.math3.util.FastMath.exp(double)"
    ],
    "org.apache.commons.math3.special.Beta.logGammaSum(double,double)": [
        "org.apache.commons.math3.util.FastMath.log1p(double)",
        "org.apache.commons.math3.util.FastMath.log(double)",
        "org.apache.commons.math3.special.Gamma.logGamma1p(double)"
    ],
    "org.apache.commons.math3.geometry.euclidean.oned.Vector1D#distance(Vector<Euclidean1D>)": ["org.apache.commons.math3.geometry.euclidean.oned.Vector1D#distance(Point<Euclidean1D>)"],
    "org.apache.commons.math3.analysis.FunctionUtils.multiply(UnivariateFunction[]...)": ["org.apache.commons.math3.analysis.FunctionUtils.multiply(UnivariateFunction[]...)$UnivariateFunction$1.<init>()"],
    "org.apache.commons.math3.analysis.differentiation.DerivativeStructure#add(DerivativeStructure)": [
        "org.apache.commons.math3.analysis.differentiation.DerivativeStructure#DerivativeStructure(DerivativeStructure)",
        "org.apache.commons.math3.analysis.differentiation.DSCompiler#add(double[],int,double[],int,double[],int)",
        "org.apache.commons.math3.analysis.differentiation.DSCompiler#checkCompatibility(DSCompiler)"
    ],
    "org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator#doCopy()": ["org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator#DormandPrince853StepInterpolator(DormandPrince853StepInterpolator)"],
    "org.apache.commons.math3.distribution.PascalDistribution#getNumericalMean()": [
        "org.apache.commons.math3.distribution.PascalDistribution#getNumberOfSuccesses()",
        "org.apache.commons.math3.distribution.PascalDistribution#getProbabilityOfSuccess()"
    ],
    "org.apache.commons.math3.analysis.differentiation.SparseGradient#tan()": [
        "org.apache.commons.math3.analysis.differentiation.SparseGradient#SparseGradient(double,double,Map<Integer, Double>)",
        "org.apache.commons.math3.util.FastMath.tan(double)"
    ],
    "org.apache.commons.math3.random.EmpiricalDistribution#load(double[])": [
        "org.apache.commons.math3.random.EmpiricalDistribution#fillBinStats(DataAdapter)",
        "org.apache.commons.math3.exception.MathInternalError#MathInternalError()",
        "org.apache.commons.math3.random.EmpiricalDistribution.ArrayDataAdapter#ArrayDataAdapter(double[])",
        "org.apache.commons.math3.random.EmpiricalDistribution.ArrayDataAdapter#computeStats()",
        "org.apache.commons.math3.random.EmpiricalDistribution.StreamDataAdapter#computeStats()"
    ],
    "org.apache.commons.math3.stat.inference.TestUtils.tTest(StatisticalSummary,StatisticalSummary)": [
        "org.apache.commons.math3.stat.inference.TTest#tTest(StatisticalSummary,StatisticalSummary)",
        "org.apache.commons.math3.stat.inference.TestUtils.<staticinit>()"
    ],
    "org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator.Corrector#end()": [
        "org.apache.commons.math3.util.FastMath.abs(double)",
        "org.apache.commons.math3.util.FastMath.max(double,double)",
        "org.apache.commons.math3.util.FastMath.sqrt(double)"
    ],
    "org.apache.commons.math3.optim.linear.LinearObjectiveFunction#value(RealVector)": [
        "org.apache.commons.math3.linear.RealVector#dotProduct(RealVector)",
        "org.apache.commons.math3.linear.ArrayRealVector#dotProduct(RealVector)",
        "org.apache.commons.math3.linear.RealVector.unmodifiableRealVector(RealVector)$RealVector$1#dotProduct(RealVector)"
    ],
    "org.apache.commons.math3.linear.SparseFieldMatrix#SparseFieldMatrix(Field<T extends FieldElement>,int,int)": [
        "org.apache.commons.math3.linear.AbstractFieldMatrix#AbstractFieldMatrix(Field<T extends FieldElement>,int,int)",
        "org.apache.commons.math3.linear.SparseFieldMatrix.<init>()",
        "org.apache.commons.math3.util.OpenIntToFieldHashMap#OpenIntToFieldHashMap(Field<T extends FieldElement>)"
    ],
    "org.apache.commons.math3.optimization.direct.BaseAbstractMultivariateOptimizer#BaseAbstractMultivariateOptimizer()": [
        "org.apache.commons.math3.optimization.direct.BaseAbstractMultivariateOptimizer#BaseAbstractMultivariateOptimizer(ConvergenceChecker<PointValuePair>)",
        "org.apache.commons.math3.optimization.SimpleValueChecker#SimpleValueChecker()"
    ],
    "org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D.LazyHolder.<staticinit>()": ["org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D#Euclidean3D()"],
    "org.apache.commons.math3.geometry.euclidean.threed.RotationOrder#RotationOrder(String,Vector3D,Vector3D,Vector3D)": ["org.apache.commons.math3.geometry.euclidean.threed.RotationOrder.<init>()"],
    "org.apache.commons.math3.linear.ArrayRealVector#ArrayRealVector(double[],boolean)": [
        "org.apache.commons.math3.linear.RealVector.<init>()",
        "org.apache.commons.math3.exception.NullArgumentException#NullArgumentException()",
        "org.apache.commons.math3.linear.ArrayRealVector.<init>()"
    ],
    "org.apache.commons.math3.linear.AbstractFieldMatrix#walkInOptimizedOrder(FieldMatrixPreservingVisitor<T extends FieldElement>,int,int,int,int)": [
        "org.apache.commons.math3.linear.AbstractFieldMatrix#walkInRowOrder(FieldMatrixPreservingVisitor<T extends FieldElement>,int,int,int,int)",
        "org.apache.commons.math3.linear.BlockFieldMatrix#walkInRowOrder(FieldMatrixPreservingVisitor<T extends FieldElement>,int,int,int,int)",
        "org.apache.commons.math3.linear.Array2DRowFieldMatrix#walkInRowOrder(FieldMatrixPreservingVisitor<T extends FieldElement>,int,int,int,int)"
    ],
    "org.apache.commons.math3.transform.FastSineTransformer#transform(UnivariateFunction,double,double,int,TransformType)": [
        "org.apache.commons.math3.transform.FastSineTransformer#transform(double[],TransformType)",
        "org.apache.commons.math3.analysis.FunctionUtils.sample(UnivariateFunction,double,double,int)"
    ],
    "org.apache.commons.math3.util.ResizableDoubleArray#ResizableDoubleArray(double[])": [
        "org.apache.commons.math3.util.ResizableDoubleArray.<staticinit>()",
        "org.apache.commons.math3.util.ResizableDoubleArray.ExpansionMode.<staticinit>()",
        "org.apache.commons.math3.util.ResizableDoubleArray#ResizableDoubleArray(int,double,double,ExpansionMode,double[]...)"
    ],
    "org.apache.commons.math3.stat.inference.TestUtils.pairedTTest(double[],double[])": [
        "org.apache.commons.math3.stat.inference.TestUtils.<staticinit>()",
        "org.apache.commons.math3.stat.inference.TTest#pairedTTest(double[],double[])"
    ],
    "org.apache.commons.math3.distribution.AbstractRealDistribution#sample()": [
        "org.apache.commons.math3.distribution.EnumeratedRealDistribution#inverseCumulativeProbability(double)",
        "org.apache.commons.math3.distribution.AbstractRealDistribution#inverseCumulativeProbability(double)",
        "org.apache.commons.math3.distribution.ExponentialDistribution#inverseCumulativeProbability(double)",
        "org.apache.commons.math3.distribution.CauchyDistribution#inverseCumulativeProbability(double)",
        "org.apache.commons.math3.random.BitsStreamGenerator#nextDouble()",
        "org.apache.commons.math3.distribution.LaplaceDistribution#inverseCumulativeProbability(double)",
        "org.apache.commons.math3.distribution.UniformRealDistribution#inverseCumulativeProbability(double)",
        "org.apache.commons.math3.random.EmpiricalDistribution#inverseCumulativeProbability(double)",
        "org.apache.commons.math3.random.SynchronizedRandomGenerator#nextDouble()",
        "org.apache.commons.math3.distribution.GumbelDistribution#inverseCumulativeProbability(double)",
        "org.apache.commons.math3.distribution.LogisticDistribution#inverseCumulativeProbability(double)",
        "org.apache.commons.math3.random.RandomAdaptor#nextDouble()",
        "org.apache.commons.math3.distribution.ConstantRealDistribution#inverseCumulativeProbability(double)",
        "org.apache.commons.math3.distribution.LevyDistribution#inverseCumulativeProbability(double)",
        "org.apache.commons.math3.distribution.TriangularDistribution#inverseCumulativeProbability(double)",
        "org.apache.commons.math3.distribution.WeibullDistribution#inverseCumulativeProbability(double)",
        "org.apache.commons.math3.random.RandomGeneratorFactory.createRandomGenerator(Random)$RandomGenerator$1#nextDouble()",
        "org.apache.commons.math3.distribution.NormalDistribution#inverseCumulativeProbability(double)"
    ],
    "org.apache.commons.math3.stat.descriptive.moment.StandardDeviation#StandardDeviation(StandardDeviation)": [
        "org.apache.commons.math3.stat.descriptive.moment.StandardDeviation.copy(StandardDeviation,StandardDeviation)",
        "org.apache.commons.math3.stat.descriptive.moment.StandardDeviation.<init>()",
        "org.apache.commons.math3.stat.descriptive.AbstractStorelessUnivariateStatistic.<init>()"
    ],
    "org.apache.commons.math3.dfp.DfpDec#newInstance(byte)": [
        "org.apache.commons.math3.dfp.DfpDec#DfpDec(DfpField,byte)",
        "org.apache.commons.math3.dfp.Dfp#getField()"
    ],
    "org.apache.commons.math3.analysis.differentiation.DerivativeStructure#tanh()": [
        "org.apache.commons.math3.analysis.differentiation.DSCompiler#tanh(double[],int,double[],int)",
        "org.apache.commons.math3.analysis.differentiation.DerivativeStructure#DerivativeStructure(DSCompiler)"
    ],
    "org.apache.commons.math3.stat.descriptive.MultivariateSummaryStatistics#getSumLog()": ["org.apache.commons.math3.stat.descriptive.MultivariateSummaryStatistics#getResults(StorelessUnivariateStatistic[])"],
    "org.apache.commons.math3.analysis.integration.gauss.BaseRuleFactory#getRuleInternal(int)": [
        "org.apache.commons.math3.analysis.integration.gauss.BaseRuleFactory#addRule(Pair<T extends Number[], T extends Number[]>)",
        "org.apache.commons.math3.analysis.integration.gauss.BaseRuleFactory#getRuleInternal(int)",
        "org.apache.commons.math3.analysis.integration.gauss.LegendreRuleFactory#computeRule(int)",
        "org.apache.commons.math3.analysis.integration.gauss.HermiteRuleFactory#computeRule(int)",
        "org.apache.commons.math3.analysis.integration.gauss.LegendreHighPrecisionRuleFactory#computeRule(int)"
    ],
    "org.apache.commons.math3.fitting.AbstractCurveFitter#getOptimizer()": ["org.apache.commons.math3.fitting.leastsquares.LevenbergMarquardtOptimizer#LevenbergMarquardtOptimizer()"],
    "org.apache.commons.math3.linear.AbstractRealMatrix#operate(RealVector)": [
        "org.apache.commons.math3.linear.DiagonalMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.Array2DRowRealMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.DiagonalMatrix#getEntry(int,int)",
        "org.apache.commons.math3.linear.OpenMapRealMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.ArrayRealVector#getDataRef()",
        "org.apache.commons.math3.linear.DiagonalMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.AbstractRealMatrix#operate(double[])",
        "org.apache.commons.math3.linear.BlockRealMatrix#getEntry(int,int)",
        "org.apache.commons.math3.linear.OpenMapRealVector#getDimension()",
        "org.apache.commons.math3.exception.DimensionMismatchException#DimensionMismatchException(int,int)",
        "org.apache.commons.math3.linear.BlockRealMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.ArrayRealVector#ArrayRealVector(double[],boolean)",
        "org.apache.commons.math3.linear.RealVector.unmodifiableRealVector(RealVector)$RealVector$1#getDimension()",
        "org.apache.commons.math3.linear.Array2DRowRealMatrix#operate(double[])",
        "org.apache.commons.math3.linear.ArrayRealVector#getDimension()",
        "org.apache.commons.math3.linear.OpenMapRealMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.OpenMapRealMatrix#getEntry(int,int)",
        "org.apache.commons.math3.linear.DiagonalMatrix#operate(double[])",
        "org.apache.commons.math3.linear.ArrayRealVector#getEntry(int)",
        "org.apache.commons.math3.linear.Array2DRowRealMatrix#getEntry(int,int)",
        "org.apache.commons.math3.linear.Array2DRowRealMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.BlockRealMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.BlockRealMatrix#operate(double[])",
        "org.apache.commons.math3.linear.OpenMapRealVector#getEntry(int)",
        "org.apache.commons.math3.linear.RealVector.unmodifiableRealVector(RealVector)$RealVector$1#getEntry(int)"
    ],
    "org.apache.commons.math3.linear.ArrayFieldVector#ArrayFieldVector(Field<T extends FieldElement>,int)": [
        "org.apache.commons.math3.util.MathArrays.buildArray(Field<T>,int)",
        "org.apache.commons.math3.linear.ArrayFieldVector.<init>()"
    ],
    "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.BOBYQAOptimizer#trsbox(double,ArrayRealVector,ArrayRealVector,ArrayRealVector,ArrayRealVector,ArrayRealVector)": [
        "org.apache.commons.math3.linear.OpenMapRealVector#ebeMultiply(RealVector)",
        "org.apache.commons.math3.util.FastMath.max(double,double)",
        "org.apache.commons.math3.linear.ArrayRealVector#getDimension()",
        "org.apache.commons.math3.util.FastMath.min(double,double)",
        "org.apache.commons.math3.exception.util.LocalizedFormats.<staticinit>()",
        "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.BOBYQAOptimizer.<staticinit>()",
        "org.apache.commons.math3.linear.ArrayRealVector#getEntry(int)",
        "org.apache.commons.math3.linear.ArrayRealVector#setEntry(int,double)",
        "org.apache.commons.math3.linear.RealVector.unmodifiableRealVector(RealVector)$RealVector$1#ebeMultiply(RealVector)",
        "org.apache.commons.math3.linear.Array2DRowRealMatrix#getEntry(int,int)",
        "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.BOBYQAOptimizer.printMethod()",
        "org.apache.commons.math3.util.FastMath.sqrt(double)",
        "org.apache.commons.math3.linear.ArrayRealVector#ebeMultiply(RealVector)",
        "org.apache.commons.math3.linear.AbstractRealMatrix#operate(RealVector)",
        "org.apache.commons.math3.linear.OpenMapRealVector#getEntry(int)",
        "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.BOBYQAOptimizer.printState(int)",
        "org.apache.commons.math3.linear.RealVector.unmodifiableRealVector(RealVector)$RealVector$1#getEntry(int)"
    ],
    "org.apache.commons.math3.stat.StatUtils.mean(double[],int,int)": [
        "org.apache.commons.math3.stat.descriptive.moment.Skewness#evaluate(double[],int,int)",
        "org.apache.commons.math3.stat.descriptive.moment.Variance#evaluate(double[],int,int)",
        "org.apache.commons.math3.stat.descriptive.moment.SemiVariance#evaluate(double[],int,int)",
        "org.apache.commons.math3.stat.descriptive.moment.GeometricMean#evaluate(double[],int,int)",
        "org.apache.commons.math3.stat.descriptive.summary.SumOfLogs#evaluate(double[],int,int)",
        "org.apache.commons.math3.stat.descriptive.moment.StandardDeviation#evaluate(double[],int,int)",
        "org.apache.commons.math3.stat.descriptive.summary.Sum#evaluate(double[],int,int)",
        "org.apache.commons.math3.stat.descriptive.rank.Min#evaluate(double[],int,int)",
        "org.apache.commons.math3.stat.descriptive.rank.Percentile#evaluate(double[],int,int)",
        "org.apache.commons.math3.stat.descriptive.rank.Max#evaluate(double[],int,int)",
        "org.apache.commons.math3.stat.StatUtils.<staticinit>()",
        "org.apache.commons.math3.stat.descriptive.summary.SumOfSquares#evaluate(double[],int,int)",
        "org.apache.commons.math3.stat.descriptive.moment.Mean#evaluate(double[],int,int)",
        "org.apache.commons.math3.stat.descriptive.summary.Product#evaluate(double[],int,int)",
        "org.apache.commons.math3.stat.descriptive.moment.Kurtosis#evaluate(double[],int,int)",
        "org.apache.commons.math3.stat.descriptive.AbstractStorelessUnivariateStatistic#evaluate(double[],int,int)"
    ],
    "org.apache.commons.math3.stat.descriptive.SynchronizedMultivariateSummaryStatistics#clear()": ["org.apache.commons.math3.stat.descriptive.MultivariateSummaryStatistics#clear()"],
    "org.apache.commons.math3.analysis.differentiation.SparseGradient#SparseGradient(double,Map<Integer, Double>)": ["org.apache.commons.math3.analysis.differentiation.SparseGradient.<init>()"],
    "org.apache.commons.math3.util.FastMath.asinh(double)": [
        "org.apache.commons.math3.util.FastMath.log(double)",
        "org.apache.commons.math3.util.FastMath.<staticinit>()",
        "org.apache.commons.math3.util.FastMath.sqrt(double)"
    ],
    "org.apache.commons.math3.optim.SimpleBounds#SimpleBounds(double[],double[])": ["org.apache.commons.math3.optim.SimpleBounds.<init>()"],
    "org.apache.commons.math3.distribution.PascalDistribution#probability(int)": [
        "org.apache.commons.math3.util.FastMath.pow(double,int)",
        "org.apache.commons.math3.util.CombinatoricsUtils.binomialCoefficientDouble(int,int)"
    ],
    "org.apache.commons.math3.linear.RealVector.unmodifiableRealVector(RealVector)$RealVector$1#getNorm()": [
        "org.apache.commons.math3.linear.RealVector#getNorm()",
        "org.apache.commons.math3.linear.RealVector.unmodifiableRealVector(RealVector)$RealVector$1#getNorm()",
        "org.apache.commons.math3.linear.ArrayRealVector#getNorm()"
    ],
    "org.apache.commons.math3.optimization.linear.SimplexTableau#setEntry(int,int,double)": [
        "org.apache.commons.math3.linear.BlockRealMatrix#setEntry(int,int,double)",
        "org.apache.commons.math3.linear.OpenMapRealMatrix#setEntry(int,int,double)",
        "org.apache.commons.math3.linear.Array2DRowRealMatrix#setEntry(int,int,double)",
        "org.apache.commons.math3.linear.DiagonalMatrix#setEntry(int,int,double)"
    ],
    "org.apache.commons.math3.ode.nonstiff.RungeKuttaIntegrator#integrate(ExpandableStatefulODE,double)": [
        "org.apache.commons.math3.ode.nonstiff.RungeKuttaStepInterpolator#reinitialize(AbstractIntegrator,double[],double[][],boolean,EquationsMapper,EquationsMapper[])",
        "org.apache.commons.math3.ode.ExpandableStatefulODE#setCompleteState(double[])",
        "org.apache.commons.math3.ode.AbstractIntegrator#computeDerivatives(double,double[],double[])",
        "org.apache.commons.math3.ode.nonstiff.DormandPrince54StepInterpolator#storeTime(double)",
        "org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator#storeTime(double)",
        "org.apache.commons.math3.ode.ExpandableStatefulODE#getTime()",
        "org.apache.commons.math3.ode.AbstractIntegrator#acceptStep(AbstractStepInterpolator,double[],double[],double)",
        "org.apache.commons.math3.ode.nonstiff.RungeKuttaStepInterpolator#shift()",
        "org.apache.commons.math3.ode.AbstractIntegrator#sanityChecks(ExpandableStatefulODE,double)",
        "org.apache.commons.math3.ode.ExpandableStatefulODE#getPrimaryMapper()",
        "org.apache.commons.math3.ode.ExpandableStatefulODE#getSecondaryMappers()",
        "org.apache.commons.math3.ode.nonstiff.DormandPrince54StepInterpolator#reinitialize(AbstractIntegrator,double[],double[][],boolean,EquationsMapper,EquationsMapper[])",
        "org.apache.commons.math3.ode.AbstractIntegrator#initIntegration(double,double[],double)",
        "org.apache.commons.math3.ode.sampling.AbstractStepInterpolator#storeTime(double)",
        "org.apache.commons.math3.ode.sampling.AbstractStepInterpolator#copy()",
        "org.apache.commons.math3.ode.nonstiff.AdaptiveStepsizeIntegrator#sanityChecks(ExpandableStatefulODE,double)",
        "org.apache.commons.math3.ode.ExpandableStatefulODE#getCompleteState()",
        "org.apache.commons.math3.ode.ExpandableStatefulODE#setTime(double)",
        "org.apache.commons.math3.ode.AbstractIntegrator#setEquations(ExpandableStatefulODE)",
        "org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator#reinitialize(AbstractIntegrator,double[],double[][],boolean,EquationsMapper,EquationsMapper[])"
    ],
    "org.apache.commons.math3.stat.correlation.PearsonsCorrelation#covarianceToCorrelation(RealMatrix)": [
        "org.apache.commons.math3.linear.DiagonalMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.Array2DRowRealMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.BlockFieldMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.Array2DRowRealMatrix#setEntry(int,int,double)",
        "org.apache.commons.math3.linear.DiagonalMatrix#getEntry(int,int)",
        "org.apache.commons.math3.linear.OpenMapRealMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.BlockRealMatrix#setEntry(int,int,double)",
        "org.apache.commons.math3.linear.OpenMapRealMatrix#setEntry(int,int,double)",
        "org.apache.commons.math3.linear.OpenMapRealMatrix#getEntry(int,int)",
        "org.apache.commons.math3.linear.BlockRealMatrix#BlockRealMatrix(int,int)",
        "org.apache.commons.math3.linear.Array2DRowFieldMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.BlockRealMatrix#getEntry(int,int)",
        "org.apache.commons.math3.linear.SparseFieldMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.Array2DRowRealMatrix#getEntry(int,int)",
        "org.apache.commons.math3.util.FastMath.sqrt(double)",
        "org.apache.commons.math3.linear.BlockRealMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.DiagonalMatrix#setEntry(int,int,double)"
    ],
    "org.apache.commons.math3.transform.FastHadamardTransformer#fht(double[])": [
        "org.apache.commons.math3.exception.util.LocalizedFormats.<staticinit>()",
        "org.apache.commons.math3.util.ArithmeticUtils.isPowerOfTwo(long)"
    ],
    "org.apache.commons.math3.geometry.partitioning.BoundaryProjector#visitInternalNode(BSPTree<S extends Space>)": [
        "org.apache.commons.math3.geometry.partitioning.BoundaryProjector#singularProjection(Point<S extends Space>,Hyperplane<S extends Space>,Region<T extends Space>)",
        "org.apache.commons.math3.geometry.partitioning.BSPTree#getCut()",
        "org.apache.commons.math3.util.FastMath.abs(double)",
        "org.apache.commons.math3.geometry.partitioning.AbstractSubHyperplane#getHyperplane()",
        "org.apache.commons.math3.geometry.partitioning.BoundaryProjector#belongsToPart(Point<S extends Space>,Hyperplane<S extends Space>,Region<T extends Space>)",
        "org.apache.commons.math3.geometry.partitioning.BoundaryProjector#boundaryRegions(BSPTree<S extends Space>)"
    ],
    "org.apache.commons.math3.userguide.ClusterAlgorithmComparison.makeCircles(int,boolean,double,double,RandomGenerator)": [
        "org.apache.commons.math3.distribution.NormalDistribution#NormalDistribution(RandomGenerator,double,double,double)",
        "org.apache.commons.math3.userguide.ClusterAlgorithmComparison.generateNoiseVector(NormalDistribution)",
        "org.apache.commons.math3.geometry.euclidean.twod.Vector2D#add(Vector<Euclidean2D>)",
        "org.apache.commons.math3.util.FastMath.sin(double)",
        "org.apache.commons.math3.geometry.euclidean.twod.Vector2D#scalarMultiply(double)",
        "org.apache.commons.math3.geometry.euclidean.twod.Vector2D#Vector2D(double,double)",
        "org.apache.commons.math3.random.RandomAdaptor#RandomAdaptor(RandomGenerator)",
        "org.apache.commons.math3.util.FastMath.<staticinit>()",
        "org.apache.commons.math3.util.FastMath.cos(double)"
    ],
    "org.apache.commons.math3.fitting.HarmonicCurveFitter.ParameterGuesser#ParameterGuesser(Collection<WeightedObservedPoint>)": [
        "org.apache.commons.math3.fitting.HarmonicCurveFitter.ParameterGuesser#sortObservations(Collection<WeightedObservedPoint>)",
        "org.apache.commons.math3.fitting.HarmonicCurveFitter.ParameterGuesser.<init>()",
        "org.apache.commons.math3.fitting.HarmonicCurveFitter.ParameterGuesser#guessAOmega(WeightedObservedPoint[])",
        "org.apache.commons.math3.exception.util.LocalizedFormats.<staticinit>()",
        "org.apache.commons.math3.fitting.HarmonicCurveFitter.ParameterGuesser#guessPhi(WeightedObservedPoint[])"
    ],
    "org.apache.commons.math3.complex.Quaternion#getInverse()": [
        "org.apache.commons.math3.complex.Quaternion#Quaternion(double,double,double,double)",
        "org.apache.commons.math3.util.Precision.<staticinit>()",
        "org.apache.commons.math3.exception.util.LocalizedFormats.<staticinit>()"
    ],
    "org.apache.commons.math3.ode.events.EventState#evaluateStep(StepInterpolator)$UnivariateFunction$1#value(double)": [
        "org.apache.commons.math3.ode.sampling.AbstractStepInterpolator#setInterpolatedTime(double)",
        "org.apache.commons.math3.ode.events.EventState#getCompleteState(StepInterpolator)",
        "org.apache.commons.math3.ode.events.EventFilter#g(double,double[])",
        "org.apache.commons.math3.ode.events.EventState.LocalMaxCountExceededException#LocalMaxCountExceededException(MaxCountExceededException)"
    ],
    "org.apache.commons.math3.analysis.differentiation.DerivativeStructure#toRadians()": [
        "org.apache.commons.math3.util.FastMath.toRadians(double)",
        "org.apache.commons.math3.analysis.differentiation.DerivativeStructure#DerivativeStructure(DSCompiler)"
    ],
    "org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile.Marker#Marker(double,double,double,double)": ["org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile.Marker#Marker()"],
    "org.apache.commons.math3.optimization.direct.MultivariateFunctionMappingAdapter.LowerUpperBoundMapper#boundedToUnbounded(double)": [
        "org.apache.commons.math3.analysis.FunctionUtils.multiply(DifferentiableUnivariateFunction[]...)$UnivariateFunction$1$UnivariateFunction$1#derivative()$UnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.polynomials.PolynomialSplineFunction#value(double)",
        "org.apache.commons.math3.analysis.function.Gaussian#value(double)",
        "org.apache.commons.math3.analysis.function.Tanh#value(double)",
        "org.apache.commons.math3.analysis.function.Inverse#value(double)",
        "org.apache.commons.math3.analysis.function.HarmonicOscillator#value(double)",
        "org.apache.commons.math3.analysis.FunctionUtils.fix1stArgument(BivariateFunction,double)$UnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.function.Asin#value(double)",
        "org.apache.commons.math3.analysis.function.Asinh#value(double)",
        "org.apache.commons.math3.analysis.FunctionUtils.multiply(UnivariateFunction[]...)$UnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.function.Atan#value(double)",
        "org.apache.commons.math3.analysis.FunctionUtils.toDifferentiableUnivariateFunction(UnivariateDifferentiableFunction)$DifferentiableUnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.function.Cbrt#value(double)",
        "org.apache.commons.math3.analysis.polynomials.PolynomialFunctionLagrangeForm#value(double)",
        "org.apache.commons.math3.analysis.function.Exp#value(double)",
        "org.apache.commons.math3.special.BesselJ#value(double)",
        "org.apache.commons.math3.analysis.polynomials.PolynomialFunctionNewtonForm#value(double)",
        "org.apache.commons.math3.analysis.FunctionUtils.add(UnivariateFunction[]...)$UnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.function.Sin#value(double)",
        "org.apache.commons.math3.analysis.function.Cos#value(double)",
        "org.apache.commons.math3.analysis.interpolation.UnivariatePeriodicInterpolator#interpolate(double[],double[])$UnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.function.Log10#value(double)",
        "org.apache.commons.math3.analysis.function.Sqrt#value(double)",
        "org.apache.commons.math3.analysis.function.Log#value(double)",
        "org.apache.commons.math3.analysis.function.Sinc#value(double)",
        "org.apache.commons.math3.ode.events.EventState#evaluateStep(StepInterpolator)$UnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.function.Minus#value(double)",
        "org.apache.commons.math3.analysis.integration.IterativeLegendreGaussIntegrator#stage(int)$UnivariateFunction$1#value(double)",
        "org.apache.commons.math3.optimization.general.NonLinearConjugateGradientOptimizer.LineSearchFunction#value(double)",
        "org.apache.commons.math3.analysis.function.Floor#value(double)",
        "org.apache.commons.math3.analysis.FunctionUtils.multiply(DifferentiableUnivariateFunction[]...)$DifferentiableUnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.FunctionUtils.combine(BivariateFunction,UnivariateFunction,UnivariateFunction)$UnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.FunctionUtils.add(DifferentiableUnivariateFunction[]...)$UnivariateFunction$1$UnivariateFunction$1#derivative()$UnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.function.Sinh#value(double)",
        "org.apache.commons.math3.analysis.FunctionUtils.multiply(UnivariateDifferentiableFunction[]...)$UnivariateDifferentiableFunction$1#value(double)",
        "org.apache.commons.math3.analysis.function.Tan#value(double)",
        "org.apache.commons.math3.distribution.AbstractRealDistribution#inverseCumulativeProbability(double)$UnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.FunctionUtils.add(DifferentiableUnivariateFunction[]...)$DifferentiableUnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.function.Ceil#value(double)",
        "org.apache.commons.math3.analysis.function.Logistic#value(double)",
        "org.apache.commons.math3.analysis.function.Signum#value(double)",
        "org.apache.commons.math3.analysis.function.Constant#value(double)",
        "org.apache.commons.math3.analysis.function.Atanh#value(double)",
        "org.apache.commons.math3.analysis.FunctionUtils.compose(DifferentiableUnivariateFunction[]...)$UnivariateFunction$1$UnivariateFunction$1#derivative()$UnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.FunctionUtils.add(UnivariateDifferentiableFunction[]...)$UnivariateDifferentiableFunction$1#value(double)",
        "org.apache.commons.math3.analysis.function.Abs#value(double)",
        "org.apache.commons.math3.analysis.differentiation.FiniteDifferencesDifferentiator#differentiate(UnivariateFunction)$UnivariateDifferentiableFunction$1#value(double)",
        "org.apache.commons.math3.analysis.function.Identity#value(double)",
        "org.apache.commons.math3.analysis.function.Expm1#value(double)",
        "org.apache.commons.math3.analysis.function.Logit#value(double)",
        "org.apache.commons.math3.analysis.function.Log1p#value(double)",
        "org.apache.commons.math3.analysis.FunctionUtils.fix2ndArgument(BivariateFunction,double)$UnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.FunctionUtils.toUnivariateDifferential(DifferentiableUnivariateFunction)$UnivariateDifferentiableFunction$1#value(double)",
        "org.apache.commons.math3.analysis.FunctionUtils.toDifferentiableUnivariateFunction(UnivariateDifferentiableFunction)$UnivariateFunction$1$UnivariateFunction$1#derivative()$UnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.polynomials.PolynomialFunction#value(double)",
        "org.apache.commons.math3.analysis.function.Rint#value(double)",
        "org.apache.commons.math3.analysis.FunctionUtils.compose(UnivariateFunction[]...)$UnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.function.Cosh#value(double)",
        "org.apache.commons.math3.optimization.direct.PowellOptimizer.LineSearch#search(double[],double[])$UnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.FunctionUtils.compose(DifferentiableUnivariateFunction[]...)$DifferentiableUnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.function.Acosh#value(double)",
        "org.apache.commons.math3.analysis.function.StepFunction#value(double)",
        "org.apache.commons.math3.analysis.FunctionUtils.compose(UnivariateDifferentiableFunction[]...)$UnivariateDifferentiableFunction$1#value(double)",
        "org.apache.commons.math3.analysis.function.Acos#value(double)",
        "org.apache.commons.math3.analysis.function.Power#value(double)",
        "org.apache.commons.math3.optim.nonlinear.scalar.LineSearch#search(double[],double[])$UnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.function.Sigmoid#value(double)",
        "org.apache.commons.math3.analysis.function.Ulp#value(double)"
    ],
    "org.apache.commons.math3.random.SynchronizedRandomGenerator#setSeed(int[])": [
        "org.apache.commons.math3.random.ISAACRandom#setSeed(int[])",
        "org.apache.commons.math3.random.AbstractRandomGenerator#setSeed(int[])",
        "org.apache.commons.math3.random.JDKRandomGenerator#setSeed(int[])",
        "org.apache.commons.math3.random.MersenneTwister#setSeed(int[])",
        "org.apache.commons.math3.random.AbstractWell#setSeed(int[])",
        "org.apache.commons.math3.random.RandomAdaptor#setSeed(int[])",
        "org.apache.commons.math3.random.SynchronizedRandomGenerator#setSeed(int[])",
        "org.apache.commons.math3.random.RandomGeneratorFactory.createRandomGenerator(Random)$RandomGenerator$1#setSeed(int[])"
    ],
    "org.apache.commons.math3.stat.descriptive.moment.Kurtosis.copy(Kurtosis,Kurtosis)": [
        "org.apache.commons.math3.stat.descriptive.moment.FourthMoment#copy()",
        "org.apache.commons.math3.util.MathUtils.checkNotNull(Object)",
        "org.apache.commons.math3.stat.descriptive.AbstractUnivariateStatistic#setData(double[])",
        "org.apache.commons.math3.stat.descriptive.rank.Percentile#setData(double[])",
        "org.apache.commons.math3.stat.descriptive.AbstractUnivariateStatistic#getDataRef()"
    ],
    "org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D#toString(NumberFormat)": [
        "org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D#toVector3D()",
        "org.apache.commons.math3.geometry.VectorFormat#format(Vector<S extends Space>)",
        "org.apache.commons.math3.geometry.euclidean.threed.Vector3DFormat#Vector3DFormat(NumberFormat)"
    ],
    "org.apache.commons.math3.ode.sampling.StepNormalizer#storeStep(StepInterpolator,double)": [
        "org.apache.commons.math3.ode.sampling.AbstractStepInterpolator#getInterpolatedDerivatives()",
        "org.apache.commons.math3.ode.sampling.AbstractStepInterpolator#setInterpolatedTime(double)",
        "org.apache.commons.math3.ode.sampling.AbstractStepInterpolator#getInterpolatedState()"
    ],
    "org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D.getInstance()": ["org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D.LazyHolder.<staticinit>()"],
    "org.apache.commons.math3.util.Precision.compareTo(double,double,double)": ["org.apache.commons.math3.util.Precision.equals(double,double,double)"],
    "org.apache.commons.math3.analysis.integration.gauss.LegendreHighPrecisionRuleFactory#LegendreHighPrecisionRuleFactory()": ["org.apache.commons.math3.analysis.integration.gauss.LegendreHighPrecisionRuleFactory#LegendreHighPrecisionRuleFactory(MathContext)"],
    "org.apache.commons.math3.analysis.solvers.FieldBracketingNthOrderBrentSolver#getMaxEvaluations()": ["org.apache.commons.math3.util.IntegerSequence.Incrementor#getMaximalCount()"],
    "org.apache.commons.math3.optimization.direct.CMAESOptimizer#updateCovarianceDiagonalOnly(boolean,RealMatrix)": [
        "org.apache.commons.math3.optimization.direct.CMAESOptimizer.sqrt(RealMatrix)",
        "org.apache.commons.math3.linear.BlockRealMatrix#scalarMultiply(double)",
        "org.apache.commons.math3.linear.OpenMapRealMatrix#multiply(RealMatrix)",
        "org.apache.commons.math3.optimization.direct.CMAESOptimizer.times(RealMatrix,RealMatrix)",
        "org.apache.commons.math3.optimization.direct.CMAESOptimizer.eye(int,int)",
        "org.apache.commons.math3.optimization.direct.CMAESOptimizer.square(RealMatrix)",
        "org.apache.commons.math3.linear.AbstractRealMatrix#multiply(RealMatrix)",
        "org.apache.commons.math3.linear.BlockRealMatrix#add(RealMatrix)",
        "org.apache.commons.math3.linear.AbstractRealMatrix#scalarMultiply(double)",
        "org.apache.commons.math3.linear.AbstractRealMatrix#add(RealMatrix)",
        "org.apache.commons.math3.linear.DiagonalMatrix#multiply(RealMatrix)",
        "org.apache.commons.math3.optimization.direct.CMAESOptimizer.diag(RealMatrix)",
        "org.apache.commons.math3.linear.BlockRealMatrix#multiply(RealMatrix)"
    ],
    "org.apache.commons.math3.stat.inference.TestUtils.homoscedasticTTest(double[],double[])": [
        "org.apache.commons.math3.stat.inference.TTest#homoscedasticTTest(double[],double[])",
        "org.apache.commons.math3.stat.inference.TestUtils.<staticinit>()"
    ],
    "org.apache.commons.math3.geometry.euclidean.twod.NestedLoops#NestedLoops(Vector2D[],double)": [
        "org.apache.commons.math3.geometry.euclidean.twod.SubLine#SubLine(Hyperplane<Euclidean2D>,Region<Euclidean1D>)",
        "org.apache.commons.math3.geometry.partitioning.RegionFactory#getComplement(Region<S extends Space>)",
        "org.apache.commons.math3.geometry.euclidean.oned.Vector1D#getX()",
        "org.apache.commons.math3.exception.util.LocalizedFormats.<staticinit>()",
        "org.apache.commons.math3.geometry.euclidean.twod.NestedLoops.<init>()",
        "org.apache.commons.math3.geometry.euclidean.twod.Line#Line(Vector2D,Vector2D,double)",
        "org.apache.commons.math3.geometry.partitioning.AbstractRegion#getSize()",
        "org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet#IntervalsSet(double,double,double)",
        "org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile.FixedCapacityList#add(E)",
        "org.apache.commons.math3.geometry.partitioning.RegionFactory#RegionFactory()",
        "org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet#PolygonsSet(Collection<SubHyperplane<Euclidean2D>>,double)",
        "org.apache.commons.math3.geometry.euclidean.twod.Line#toSubSpace(Point<Euclidean2D>)"
    ],
    "org.apache.commons.math3.util.Decimal64#cbrt()": [
        "org.apache.commons.math3.util.FastMath.cbrt(double)",
        "org.apache.commons.math3.util.Decimal64#Decimal64(double)"
    ],
    "org.apache.commons.math3.analysis.solvers.MullerSolver2#doSolve()": [
        "org.apache.commons.math3.analysis.solvers.BaseAbstractUnivariateSolver#getAbsoluteAccuracy()",
        "org.apache.commons.math3.analysis.solvers.BaseAbstractUnivariateSolver#getMin()",
        "org.apache.commons.math3.analysis.solvers.BaseAbstractUnivariateSolver#computeObjectiveValue(double)",
        "org.apache.commons.math3.analysis.solvers.BaseAbstractUnivariateSolver#getFunctionValueAccuracy()",
        "org.apache.commons.math3.util.FastMath.random()",
        "org.apache.commons.math3.util.FastMath.abs(double)",
        "org.apache.commons.math3.util.FastMath.max(double,double)",
        "org.apache.commons.math3.util.FastMath.sqrt(double)",
        "org.apache.commons.math3.analysis.solvers.BaseAbstractUnivariateSolver#getRelativeAccuracy()",
        "org.apache.commons.math3.analysis.solvers.BaseAbstractUnivariateSolver#getMax()",
        "org.apache.commons.math3.analysis.solvers.BaseAbstractUnivariateSolver#verifyInterval(double,double)",
        "org.apache.commons.math3.exception.NoBracketingException#NoBracketingException(double,double,double,double)"
    ],
    "org.apache.commons.math3.stat.StatUtils.sumSq(double[],int,int)": [
        "org.apache.commons.math3.stat.descriptive.moment.Skewness#evaluate(double[],int,int)",
        "org.apache.commons.math3.stat.descriptive.moment.Variance#evaluate(double[],int,int)",
        "org.apache.commons.math3.stat.descriptive.moment.SemiVariance#evaluate(double[],int,int)",
        "org.apache.commons.math3.stat.descriptive.moment.GeometricMean#evaluate(double[],int,int)",
        "org.apache.commons.math3.stat.descriptive.summary.SumOfLogs#evaluate(double[],int,int)",
        "org.apache.commons.math3.stat.descriptive.moment.StandardDeviation#evaluate(double[],int,int)",
        "org.apache.commons.math3.stat.descriptive.summary.Sum#evaluate(double[],int,int)",
        "org.apache.commons.math3.stat.descriptive.rank.Min#evaluate(double[],int,int)",
        "org.apache.commons.math3.stat.descriptive.rank.Percentile#evaluate(double[],int,int)",
        "org.apache.commons.math3.stat.StatUtils.<staticinit>()",
        "org.apache.commons.math3.stat.descriptive.rank.Max#evaluate(double[],int,int)",
        "org.apache.commons.math3.stat.descriptive.summary.SumOfSquares#evaluate(double[],int,int)",
        "org.apache.commons.math3.stat.descriptive.moment.Mean#evaluate(double[],int,int)",
        "org.apache.commons.math3.stat.descriptive.summary.Product#evaluate(double[],int,int)",
        "org.apache.commons.math3.stat.descriptive.moment.Kurtosis#evaluate(double[],int,int)",
        "org.apache.commons.math3.stat.descriptive.AbstractStorelessUnivariateStatistic#evaluate(double[],int,int)"
    ],
    "org.apache.commons.math3.geometry.euclidean.oned.Interval#Interval(double,double)": [
        "org.apache.commons.math3.geometry.euclidean.oned.Interval.<init>()",
        "org.apache.commons.math3.exception.util.LocalizedFormats.<staticinit>()"
    ],
    "org.apache.commons.math3.optimization.fitting.GaussianFitter#fit()": [
        "org.apache.commons.math3.optimization.fitting.GaussianFitter#fit(double[])",
        "org.apache.commons.math3.optimization.fitting.CurveFitter#getObservations()",
        "org.apache.commons.math3.optimization.fitting.GaussianFitter.ParameterGuesser#guess()",
        "org.apache.commons.math3.optimization.fitting.GaussianFitter.ParameterGuesser#ParameterGuesser(WeightedObservedPoint[])"
    ],
    "org.apache.commons.math3.optim.univariate.BrentOptimizer#doOptimize()": [
        "org.apache.commons.math3.optim.nonlinear.scalar.GoalType.<staticinit>()",
        "org.apache.commons.math3.optim.BaseOptimizer#getConvergenceChecker()",
        "org.apache.commons.math3.optim.univariate.UnivariateOptimizer#getStartValue()",
        "org.apache.commons.math3.optim.univariate.UnivariateOptimizer#computeObjectiveValue(double)",
        "org.apache.commons.math3.optim.univariate.BrentOptimizer#best(UnivariatePointValuePair,UnivariatePointValuePair,boolean)",
        "org.apache.commons.math3.optim.univariate.UnivariatePointValuePair#UnivariatePointValuePair(double,double)",
        "org.apache.commons.math3.optim.univariate.UnivariateOptimizer#getMax()",
        "org.apache.commons.math3.optim.BaseOptimizer#getIterations()",
        "org.apache.commons.math3.util.Precision.equals(double,double)",
        "org.apache.commons.math3.util.FastMath.abs(double)",
        "org.apache.commons.math3.optim.univariate.BrentOptimizer.<staticinit>()",
        "org.apache.commons.math3.optim.univariate.UnivariateOptimizer#getGoalType()",
        "org.apache.commons.math3.optim.univariate.UnivariateOptimizer#getMin()",
        "org.apache.commons.math3.optim.BaseOptimizer#incrementIterationCount()"
    ],
    "org.apache.commons.math3.dfp.Dfp#remainder(double)": [
        "org.apache.commons.math3.dfp.DfpDec#newInstance(double)",
        "org.apache.commons.math3.dfp.Dfp#remainder(Dfp)",
        "org.apache.commons.math3.dfp.Dfp#newInstance(double)"
    ],
    "org.apache.commons.math3.analysis.differentiation.DSCompiler#cosh(double[],int,double[],int)": [
        "org.apache.commons.math3.util.FastMath.cosh(double)",
        "org.apache.commons.math3.util.FastMath.sinh(double)",
        "org.apache.commons.math3.analysis.differentiation.DSCompiler#compose(double[],int,double[],double[],int)"
    ],
    "org.apache.commons.math3.geometry.euclidean.threed.Vector3D#equals(Object)": [
        "org.apache.commons.math3.geometry.euclidean.threed.Vector3D.<staticinit>()",
        "org.apache.commons.math3.geometry.euclidean.threed.Vector3D#isNaN()"
    ],
    "org.apache.commons.math3.analysis.solvers.PegasusSolver#PegasusSolver(double)": [
        "org.apache.commons.math3.analysis.solvers.BaseSecantSolver.Method.<staticinit>()",
        "org.apache.commons.math3.analysis.solvers.PegasusSolver.<init>()",
        "org.apache.commons.math3.analysis.solvers.BaseSecantSolver#BaseSecantSolver(double,Method)"
    ],
    "org.apache.commons.math3.exception.util.ExceptionContext#buildMessage(Locale,String)": [
        "org.apache.commons.math3.exception.util.LocalizedFormats#getLocalizedString(Locale)",
        "org.apache.commons.math3.exception.util.DummyLocalizable#getLocalizedString(Locale)"
    ],
    "org.apache.commons.math3.stat.descriptive.SynchronizedSummaryStatistics#getVariance()": ["org.apache.commons.math3.stat.descriptive.SummaryStatistics#getVariance()"],
    "org.apache.commons.math3.linear.AbstractFieldMatrix#preMultiply(T extends FieldElement[])": [
        "org.apache.commons.math3.linear.SparseFieldMatrix#getEntry(int,int)",
        "org.apache.commons.math3.linear.BlockFieldMatrix#getColumnDimension()",
        "org.apache.commons.math3.util.BigRealField#getZero()",
        "org.apache.commons.math3.analysis.differentiation.SparseGradient#getField()$Field$1#getZero()",
        "org.apache.commons.math3.linear.SparseFieldMatrix#getRowDimension()",
        "org.apache.commons.math3.util.Decimal64Field#getZero()",
        "org.apache.commons.math3.dfp.DfpField#getZero()",
        "org.apache.commons.math3.linear.Array2DRowFieldMatrix#getColumnDimension()",
        "org.apache.commons.math3.exception.DimensionMismatchException#DimensionMismatchException(int,int)",
        "org.apache.commons.math3.linear.SparseFieldMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.BlockFieldMatrix#getRowDimension()",
        "org.apache.commons.math3.analysis.differentiation.DerivativeStructure#getField()$Field$1#getZero()",
        "org.apache.commons.math3.fraction.FractionField#getZero()",
        "org.apache.commons.math3.linear.Array2DRowFieldMatrix#getRowDimension()",
        "org.apache.commons.math3.complex.ComplexField#getZero()",
        "org.apache.commons.math3.linear.Array2DRowFieldMatrix#getEntry(int,int)",
        "org.apache.commons.math3.fraction.BigFractionField#getZero()",
        "org.apache.commons.math3.util.MathArrays.buildArray(Field<T>,int)",
        "org.apache.commons.math3.linear.BlockFieldMatrix#getEntry(int,int)"
    ],
    "org.apache.commons.math3.fitting.CurveFitter#fit(T extends ParametricUnivariateFunction,double[])": ["org.apache.commons.math3.fitting.CurveFitter#fit(int,T extends ParametricUnivariateFunction,double[])"],
    "org.apache.commons.math3.complex.Quaternion#getConjugate()": ["org.apache.commons.math3.complex.Quaternion#Quaternion(double,double,double,double)"],
    "org.apache.commons.math3.geometry.spherical.twod.SphericalPolygonsSet#SphericalPolygonsSet(BSPTree<Sphere2D>,double)": [
        "org.apache.commons.math3.geometry.spherical.twod.SphericalPolygonsSet.<init>()",
        "org.apache.commons.math3.geometry.partitioning.AbstractRegion#AbstractRegion(BSPTree<S extends Space>,double)"
    ],
    "org.apache.commons.math3.analysis.solvers.BrentSolver#BrentSolver(double,double,double)": [
        "org.apache.commons.math3.analysis.solvers.BrentSolver.<init>()",
        "org.apache.commons.math3.analysis.solvers.AbstractUnivariateSolver#AbstractUnivariateSolver(double,double,double)"
    ],
    "org.apache.commons.math3.ode.nonstiff.AdaptiveStepsizeIntegrator#AdaptiveStepsizeIntegrator(String,double,double,double,double)": [
        "org.apache.commons.math3.ode.nonstiff.AdaptiveStepsizeIntegrator#setStepSizeControl(double,double,double,double)",
        "org.apache.commons.math3.ode.nonstiff.AdaptiveStepsizeIntegrator.<init>()",
        "org.apache.commons.math3.ode.AbstractIntegrator#AbstractIntegrator(String)",
        "org.apache.commons.math3.ode.nonstiff.AdaptiveStepsizeIntegrator#resetInternalState()"
    ],
    "org.apache.commons.math3.util.ResizableDoubleArray#checkContractExpand(double,double)": [
        "org.apache.commons.math3.exception.MathIllegalArgumentException#getContext()",
        "org.apache.commons.math3.exception.util.LocalizedFormats.<staticinit>()"
    ],
    "org.apache.commons.math3.util.BigReal#reciprocal()": [
        "org.apache.commons.math3.util.BigReal#BigReal(char[])",
        "org.apache.commons.math3.exception.util.LocalizedFormats.<staticinit>()"
    ],
    "org.apache.commons.math3.random.RandomAdaptor#RandomAdaptor()": ["org.apache.commons.math3.random.RandomAdaptor.<init>()"],
    "org.apache.commons.math3.ode.nonstiff.ClassicalRungeKuttaStepInterpolator#doCopy()": ["org.apache.commons.math3.ode.nonstiff.ClassicalRungeKuttaStepInterpolator#ClassicalRungeKuttaStepInterpolator(ClassicalRungeKuttaStepInterpolator)"],
    "org.apache.commons.math3.fitting.leastsquares.OptimumImpl#getPoint()": [
        "org.apache.commons.math3.fitting.leastsquares.DenseWeightedEvaluation#getPoint()",
        "org.apache.commons.math3.fitting.leastsquares.LeastSquaresFactory.LocalLeastSquaresProblem.LazyUnweightedEvaluation#getPoint()",
        "org.apache.commons.math3.fitting.leastsquares.OptimumImpl#getPoint()",
        "org.apache.commons.math3.fitting.leastsquares.LeastSquaresFactory.LocalLeastSquaresProblem.UnweightedEvaluation#getPoint()"
    ],
    "org.apache.commons.math3.optim.nonlinear.scalar.MultivariateFunctionMappingAdapter#unboundedToBounded(double[])": [
        "org.apache.commons.math3.optim.nonlinear.scalar.MultivariateFunctionMappingAdapter.LowerBoundMapper#unboundedToBounded(double)",
        "org.apache.commons.math3.optim.nonlinear.scalar.MultivariateFunctionMappingAdapter.UpperBoundMapper#unboundedToBounded(double)",
        "org.apache.commons.math3.optim.nonlinear.scalar.MultivariateFunctionMappingAdapter.NoBoundsMapper#unboundedToBounded(double)",
        "org.apache.commons.math3.optim.nonlinear.scalar.MultivariateFunctionMappingAdapter.LowerUpperBoundMapper#unboundedToBounded(double)"
    ],
    "org.apache.commons.math3.optimization.linear.LinearConstraint#LinearConstraint(RealVector,Relationship,double)": ["org.apache.commons.math3.optimization.linear.LinearConstraint.<init>()"],
    "org.apache.commons.math3.analysis.function.Sinc#Sinc()": ["org.apache.commons.math3.analysis.function.Sinc#Sinc(boolean)"],
    "org.apache.commons.math3.ml.neuralnet.twod.util.HitHistogram#HitHistogram(boolean,DistanceMeasure)": ["org.apache.commons.math3.ml.neuralnet.twod.util.HitHistogram.<init>()"],
    "org.apache.commons.math3.optimization.direct.NelderMeadSimplex#NelderMeadSimplex(double[],double,double,double,double)": [
        "org.apache.commons.math3.optimization.direct.AbstractSimplex#AbstractSimplex(double[])",
        "org.apache.commons.math3.optimization.direct.NelderMeadSimplex.<init>()"
    ],
    "org.apache.commons.math3.util.FastMath.sinQ(double,double)": [
        "org.apache.commons.math3.util.FastMath.<staticinit>()",
        "org.apache.commons.math3.util.FastMath.polySine(double)",
        "org.apache.commons.math3.util.FastMath.polyCosine(double)"
    ],
    "org.apache.commons.math3.analysis.integration.gauss.GaussIntegratorFactory.getRule(BaseRuleFactory<? extends Number>,int)": ["org.apache.commons.math3.analysis.integration.gauss.BaseRuleFactory#getRule(int)"],
    "org.apache.commons.math3.util.MathArrays.sortInPlace(double[],OrderDirection,double[][]...)$Comparator$1#compare(PairDoubleInteger,PairDoubleInteger)": ["org.apache.commons.math3.util.MathArrays.PairDoubleInteger#getKey()"],
    "org.apache.commons.math3.linear.SymmLQ#solve(RealLinearOperator,RealLinearOperator,RealVector,boolean,double)": [
        "org.apache.commons.math3.linear.DiagonalMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.Array2DRowRealMatrix#getColumnDimension()",
        "org.apache.commons.math3.util.MathUtils.checkNotNull(Object)",
        "org.apache.commons.math3.linear.OpenMapRealMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.JacobiPreconditioner#getColumnDimension()",
        "org.apache.commons.math3.linear.ArrayRealVector#ArrayRealVector(int)",
        "org.apache.commons.math3.linear.BlockRealMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.SymmLQ#solveInPlace(RealLinearOperator,RealLinearOperator,RealVector,RealVector,boolean,double)",
        "org.apache.commons.math3.linear.JacobiPreconditioner#sqrt()$RealLinearOperator$1#getColumnDimension()"
    ],
    "org.apache.commons.math3.util.ResizableDoubleArray#ResizableDoubleArray(int,double)": [
        "org.apache.commons.math3.util.ResizableDoubleArray.<staticinit>()",
        "org.apache.commons.math3.util.ResizableDoubleArray#ResizableDoubleArray(int,double,double)"
    ],
    "org.apache.commons.math3.analysis.differentiation.SparseGradient#log1p()": [
        "org.apache.commons.math3.analysis.differentiation.SparseGradient#SparseGradient(double,double,Map<Integer, Double>)",
        "org.apache.commons.math3.util.FastMath.log1p(double)"
    ],
    "org.apache.commons.math3.geometry.euclidean.threed.Vector3D#getZero()": ["org.apache.commons.math3.geometry.euclidean.threed.Vector3D.<staticinit>()"],
    "org.apache.commons.math3.stat.interval.IntervalUtils.<staticinit>()": [
        "org.apache.commons.math3.stat.interval.ClopperPearsonInterval.<init>()",
        "org.apache.commons.math3.stat.interval.AgrestiCoullInterval.<init>()",
        "org.apache.commons.math3.stat.interval.NormalApproximationInterval.<init>()",
        "org.apache.commons.math3.stat.interval.WilsonScoreInterval.<init>()"
    ],
    "org.apache.commons.math3.fraction.BigFraction#add(int)": ["org.apache.commons.math3.fraction.BigFraction#add(BigInteger)"],
    "org.apache.commons.math3.ode.sampling.AbstractStepInterpolator#getInterpolatedSecondaryDerivatives(int)": [
        "org.apache.commons.math3.ode.EquationsMapper#extractEquationData(double[],double[])",
        "org.apache.commons.math3.ode.sampling.AbstractStepInterpolator#evaluateCompleteInterpolatedState()"
    ],
    "org.apache.commons.math3.util.ResizableDoubleArray#shouldContract()": ["org.apache.commons.math3.util.ResizableDoubleArray.ExpansionMode.<staticinit>()"],
    "org.apache.commons.math3.random.RandomDataImpl#nextUniform(double,double)": ["org.apache.commons.math3.random.RandomDataGenerator#nextUniform(double,double)"],
    "org.apache.commons.math3.random.RandomDataImpl#nextSecureHexString(int)": ["org.apache.commons.math3.random.RandomDataGenerator#nextSecureHexString(int)"],
    "org.apache.commons.math3.random.Well44497a#Well44497a(int)": [
        "org.apache.commons.math3.random.Well44497a.<init>()",
        "org.apache.commons.math3.random.AbstractWell#AbstractWell(int,int,int,int,int)",
        "org.apache.commons.math3.random.Well44497a.<staticinit>()"
    ],
    "org.apache.commons.math3.ode.nonstiff.GillIntegrator.<staticinit>()": ["org.apache.commons.math3.util.FastMath.sqrt(double)"],
    "org.apache.commons.math3.stat.inference.OneWayAnova#anovaStats(Collection<double[]>)": [
        "org.apache.commons.math3.stat.inference.OneWayAnova#anovaStats(Collection<SummaryStatistics>,boolean)",
        "org.apache.commons.math3.stat.descriptive.SummaryStatistics#addValue(double)",
        "org.apache.commons.math3.util.MathUtils.checkNotNull(Object)",
        "org.apache.commons.math3.stat.descriptive.AggregateSummaryStatistics.AggregatingSummaryStatistics#addValue(double)",
        "org.apache.commons.math3.stat.descriptive.SynchronizedSummaryStatistics#addValue(double)",
        "org.apache.commons.math3.stat.descriptive.SummaryStatistics#SummaryStatistics()"
    ],
    "org.apache.commons.math3.ode.MultistepFieldIntegrator.FieldNordsieckInitializer#handleStep(FieldStepInterpolator<T extends RealFieldElement>,boolean)": [
        "org.apache.commons.math3.ode.sampling.AbstractFieldStepInterpolator#getPreviousState()",
        "org.apache.commons.math3.ode.AbstractFieldIntegrator#getField()",
        "org.apache.commons.math3.ode.AbstractFieldIntegrator#setStepStart(FieldODEStateAndDerivative<T extends RealFieldElement>)",
        "org.apache.commons.math3.ode.FieldEquationsMapper#mapState(FieldODEState<T extends RealFieldElement>)",
        "org.apache.commons.math3.ode.FieldEquationsMapper#mapDerivative(FieldODEStateAndDerivative<T extends RealFieldElement>)",
        "org.apache.commons.math3.ode.MultistepFieldIntegrator.InitializationCompletedMarkerException#InitializationCompletedMarkerException()",
        "org.apache.commons.math3.ode.AbstractFieldIntegrator#setStepSize(T extends RealFieldElement)",
        "org.apache.commons.math3.ode.sampling.AbstractFieldStepInterpolator#getCurrentState()",
        "org.apache.commons.math3.ode.FieldODEState#getTime()",
        "org.apache.commons.math3.util.MathArrays.buildArray(Field<T>,int)",
        "org.apache.commons.math3.ode.nonstiff.AdamsFieldIntegrator#initializeHighOrderDerivatives(T extends RealFieldElement,T extends RealFieldElement[],T extends RealFieldElement[][],T extends RealFieldElement[][])",
        "org.apache.commons.math3.ode.AbstractFieldIntegrator#getStepSize()"
    ],
    "org.apache.commons.math3.dfp.Dfp#pow(int)": ["org.apache.commons.math3.dfp.DfpMath.pow(Dfp,int)"],
    "org.apache.commons.math3.util.Decimal64#linearCombination(double,Decimal64,double,Decimal64)": [
        "org.apache.commons.math3.util.Decimal64#Decimal64(double)",
        "org.apache.commons.math3.util.MathArrays.linearCombination(double,double,double,double)"
    ],
    "org.apache.commons.math3.geometry.partitioning.AbstractRegion#checkPoint(BSPTree<S extends Space>,Point<S extends Space>)": [
        "org.apache.commons.math3.geometry.partitioning.AbstractRegion#checkPoint(BSPTree<S extends Space>,Point<S extends Space>)",
        "org.apache.commons.math3.geometry.partitioning.BSPTree#getPlus()",
        "org.apache.commons.math3.geometry.partitioning.BSPTree#getCut()",
        "org.apache.commons.math3.geometry.partitioning.BSPTree#getCell(Point<S extends Space>,double)",
        "org.apache.commons.math3.geometry.partitioning.Region.Location.<staticinit>()",
        "org.apache.commons.math3.geometry.partitioning.BSPTree#getMinus()",
        "org.apache.commons.math3.geometry.partitioning.BSPTree#getAttribute()"
    ],
    "org.apache.commons.math3.linear.OpenMapRealVector#isDefaultValue(double)": ["org.apache.commons.math3.util.FastMath.abs(double)"],
    "org.apache.commons.math3.optimization.general.AbstractLeastSquaresOptimizer#computeResiduals(double[])": [
        "org.apache.commons.math3.exception.DimensionMismatchException#DimensionMismatchException(int,int)",
        "org.apache.commons.math3.optimization.direct.BaseAbstractMultivariateVectorOptimizer#getTarget()"
    ],
    "org.apache.commons.math3.analysis.integration.gauss.LegendreHighPrecisionRuleFactory#computeRule(int)": [
        "org.apache.commons.math3.util.Pair#getFirst()",
        "org.apache.commons.math3.analysis.integration.gauss.BaseRuleFactory#getRuleInternal(int)",
        "org.apache.commons.math3.util.Pair#Pair(K,V)"
    ],
    "org.apache.commons.math3.distribution.AbstractIntegerDistribution#checkedCumulativeProbability(int)": [
        "org.apache.commons.math3.distribution.PascalDistribution#cumulativeProbability(int)",
        "org.apache.commons.math3.distribution.BinomialDistribution#cumulativeProbability(int)",
        "org.apache.commons.math3.distribution.ZipfDistribution#cumulativeProbability(int)",
        "org.apache.commons.math3.exception.util.LocalizedFormats.<staticinit>()",
        "org.apache.commons.math3.distribution.EnumeratedIntegerDistribution#cumulativeProbability(int)",
        "org.apache.commons.math3.distribution.HypergeometricDistribution#cumulativeProbability(int)",
        "org.apache.commons.math3.distribution.GeometricDistribution#cumulativeProbability(int)",
        "org.apache.commons.math3.distribution.PoissonDistribution#cumulativeProbability(int)",
        "org.apache.commons.math3.distribution.UniformIntegerDistribution#cumulativeProbability(int)"
    ],
    "org.apache.commons.math3.optim.linear.SimplexTableau#getHeight()": ["org.apache.commons.math3.linear.Array2DRowRealMatrix#getRowDimension()"],
    "org.apache.commons.math3.linear.OpenMapRealVector#OpenMapRealVector(OpenMapRealVector)": [
        "org.apache.commons.math3.linear.OpenMapRealVector#getDimension()",
        "org.apache.commons.math3.linear.OpenMapRealVector#getEntries()",
        "org.apache.commons.math3.linear.OpenMapRealVector.<init>()",
        "org.apache.commons.math3.linear.SparseRealVector.<init>()",
        "org.apache.commons.math3.util.OpenIntToDoubleHashMap#OpenIntToDoubleHashMap(OpenIntToDoubleHashMap)"
    ],
    "org.apache.commons.math3.linear.RealVector.unmodifiableRealVector(RealVector)$RealVector$1#getL1Distance(RealVector)": [
        "org.apache.commons.math3.linear.OpenMapRealVector#getL1Distance(RealVector)",
        "org.apache.commons.math3.linear.ArrayRealVector#getL1Distance(RealVector)",
        "org.apache.commons.math3.linear.RealVector#getL1Distance(RealVector)",
        "org.apache.commons.math3.linear.RealVector.unmodifiableRealVector(RealVector)$RealVector$1#getL1Distance(RealVector)"
    ],
    "org.apache.commons.math3.optimization.direct.MultivariateFunctionMappingAdapter.UpperBoundMapper#UpperBoundMapper(double)": ["org.apache.commons.math3.optimization.direct.MultivariateFunctionMappingAdapter.UpperBoundMapper.<init>()"],
    "org.apache.commons.math3.analysis.polynomials.PolynomialFunction#add(PolynomialFunction)": [
        "org.apache.commons.math3.util.FastMath.min(int,int)",
        "org.apache.commons.math3.util.FastMath.max(int,int)",
        "org.apache.commons.math3.analysis.polynomials.PolynomialFunction#PolynomialFunction(double[])"
    ],
    "org.apache.commons.math3.stat.descriptive.moment.Skewness#evaluate(double[],int,int)": [
        "org.apache.commons.math3.stat.descriptive.AbstractUnivariateStatistic#test(double[],int,int)",
        "org.apache.commons.math3.stat.descriptive.moment.Mean#Mean()",
        "org.apache.commons.math3.stat.descriptive.moment.Mean#evaluate(double[],int,int)",
        "org.apache.commons.math3.util.FastMath.sqrt(double)"
    ],
    "org.apache.commons.math3.analysis.differentiation.DSCompiler#asin(double[],int,double[],int)": [
        "org.apache.commons.math3.util.FastMath.sqrt(double)",
        "org.apache.commons.math3.analysis.differentiation.DSCompiler#compose(double[],int,double[],double[],int)",
        "org.apache.commons.math3.util.FastMath.asin(double)"
    ],
    "org.apache.commons.math3.ode.AbstractFieldIntegrator#AbstractFieldIntegrator(Field<T extends RealFieldElement>,String)": [
        "org.apache.commons.math3.ode.AbstractFieldIntegrator.<init>()",
        "org.apache.commons.math3.util.IntegerSequence.Incrementor.create()",
        "org.apache.commons.math3.util.IntegerSequence.Incrementor#withMaximalCount(int)"
    ],
    "org.apache.commons.math3.stat.inference.MannWhitneyUTest#MannWhitneyUTest()": [
        "org.apache.commons.math3.stat.ranking.NaturalRanking#NaturalRanking(NaNStrategy,TiesStrategy)",
        "org.apache.commons.math3.stat.ranking.NaNStrategy.<staticinit>()",
        "org.apache.commons.math3.stat.inference.MannWhitneyUTest.<init>()",
        "org.apache.commons.math3.stat.ranking.TiesStrategy.<staticinit>()"
    ],
    "org.apache.commons.math3.util.MathArrays.checkOrder(double[])": [
        "org.apache.commons.math3.util.MathArrays.checkOrder(double[],OrderDirection,boolean)",
        "org.apache.commons.math3.util.MathArrays.OrderDirection.<staticinit>()"
    ],
    "org.apache.commons.math3.linear.BlockFieldMatrix#preMultiply(T extends FieldElement[])": [
        "org.apache.commons.math3.linear.BlockFieldMatrix#blockWidth(int)",
        "org.apache.commons.math3.util.BigRealField#getZero()",
        "org.apache.commons.math3.analysis.differentiation.SparseGradient#getField()$Field$1#getZero()",
        "org.apache.commons.math3.util.Decimal64Field#getZero()",
        "org.apache.commons.math3.dfp.DfpField#getZero()",
        "org.apache.commons.math3.util.FastMath.min(int,int)",
        "org.apache.commons.math3.exception.DimensionMismatchException#DimensionMismatchException(int,int)",
        "org.apache.commons.math3.linear.AbstractFieldMatrix#getField()",
        "org.apache.commons.math3.analysis.differentiation.DerivativeStructure#getField()$Field$1#getZero()",
        "org.apache.commons.math3.fraction.FractionField#getZero()",
        "org.apache.commons.math3.complex.ComplexField#getZero()",
        "org.apache.commons.math3.fraction.BigFractionField#getZero()",
        "org.apache.commons.math3.linear.BlockFieldMatrix.<staticinit>()",
        "org.apache.commons.math3.util.MathArrays.buildArray(Field<T>,int)"
    ],
    "org.apache.commons.math3.linear.ArrayFieldVector#mapMultiply(T extends FieldElement)": [
        "org.apache.commons.math3.util.MathArrays.buildArray(Field<T>,int)",
        "org.apache.commons.math3.linear.ArrayFieldVector#ArrayFieldVector(Field<T extends FieldElement>,T extends FieldElement[],boolean)"
    ],
    "org.apache.commons.math3.geometry.VectorFormat#VectorFormat(NumberFormat)": [
        "org.apache.commons.math3.geometry.VectorFormat.<staticinit>()",
        "org.apache.commons.math3.geometry.VectorFormat#VectorFormat(String,String,String,NumberFormat)"
    ],
    "org.apache.commons.math3.fraction.BigFraction#BigFraction(double,int)": ["org.apache.commons.math3.fraction.BigFraction#BigFraction(double,double,int,int)"],
    "org.apache.commons.math3.transform.FastFourierTransformer#mdfft(Object,TransformType)": [
        "org.apache.commons.math3.transform.FastFourierTransformer.MultiDimensionalComplexMatrix#MultiDimensionalComplexMatrix(Object)",
        "org.apache.commons.math3.transform.FastFourierTransformer.MultiDimensionalComplexMatrix#getArray()",
        "org.apache.commons.math3.transform.FastFourierTransformer.MultiDimensionalComplexMatrix#clone()",
        "org.apache.commons.math3.transform.FastFourierTransformer#mdfft(MultiDimensionalComplexMatrix,TransformType,int,int[])",
        "org.apache.commons.math3.transform.FastFourierTransformer.MultiDimensionalComplexMatrix#getDimensionSizes()"
    ],
    "org.apache.commons.math3.util.OpenIntToDoubleHashMap#OpenIntToDoubleHashMap(int)": ["org.apache.commons.math3.util.OpenIntToDoubleHashMap#OpenIntToDoubleHashMap(int,double)"],
    "org.apache.commons.math3.stat.inference.TestUtils.exactP(double,int,int,boolean)": [
        "org.apache.commons.math3.stat.inference.KolmogorovSmirnovTest#exactP(double,int,int,boolean)",
        "org.apache.commons.math3.stat.inference.TestUtils.<staticinit>()"
    ],
    "org.apache.commons.math3.analysis.function.Inverse#value(DerivativeStructure)": ["org.apache.commons.math3.analysis.differentiation.DerivativeStructure#reciprocal()"],
    "org.apache.commons.math3.util.MathArrays.shuffle(int[],RandomGenerator)": [
        "org.apache.commons.math3.util.MathArrays.shuffle(int[],int,Position,RandomGenerator)",
        "org.apache.commons.math3.util.MathArrays.Position.<staticinit>()"
    ],
    "org.apache.commons.math3.linear.DiagonalMatrix#isSingular(double)": ["org.apache.commons.math3.util.Precision.equals(double,double,double)"],
    "org.apache.commons.math3.stat.correlation.SpearmansCorrelation#correlation(double[],double[])": [
        "org.apache.commons.math3.exception.DimensionMismatchException#DimensionMismatchException(int,int)",
        "org.apache.commons.math3.stat.correlation.SpearmansCorrelation#getNaNPositions(double[])",
        "org.apache.commons.math3.stat.correlation.PearsonsCorrelation#correlation(double[],double[])",
        "org.apache.commons.math3.stat.ranking.NaNStrategy.<staticinit>()",
        "org.apache.commons.math3.stat.ranking.NaturalRanking#rank(double[])",
        "org.apache.commons.math3.stat.correlation.SpearmansCorrelation#removeValues(double[],Set<Integer>)",
        "org.apache.commons.math3.exception.util.LocalizedFormats.<staticinit>()",
        "org.apache.commons.math3.stat.ranking.NaturalRanking#getNanStrategy()",
        "org.apache.commons.math3.stat.correlation.PearsonsCorrelation#PearsonsCorrelation()"
    ],
    "org.apache.commons.math3.analysis.integration.LegendreGaussIntegrator#LegendreGaussIntegrator(int,double,double)": [
        "org.apache.commons.math3.analysis.integration.BaseAbstractUnivariateIntegrator.<staticinit>()",
        "org.apache.commons.math3.analysis.integration.LegendreGaussIntegrator#LegendreGaussIntegrator(int,double,double,int,int)"
    ],
    "org.apache.commons.math3.geometry.euclidean.threed.SphericalCoordinates.DataTransferObject#DataTransferObject(double,double,double)": ["org.apache.commons.math3.geometry.euclidean.threed.SphericalCoordinates.DataTransferObject.<init>()"],
    "org.apache.commons.math3.linear.MatrixUtils.isSymmetricInternal(RealMatrix,double,boolean)": [
        "org.apache.commons.math3.linear.DiagonalMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.Array2DRowRealMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.BlockFieldMatrix#getColumnDimension()",
        "org.apache.commons.math3.util.FastMath.max(double,double)",
        "org.apache.commons.math3.linear.SparseFieldMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.DiagonalMatrix#getEntry(int,int)",
        "org.apache.commons.math3.linear.OpenMapRealMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.OpenMapRealMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.DiagonalMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.OpenMapRealMatrix#getEntry(int,int)",
        "org.apache.commons.math3.linear.Array2DRowFieldMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.NonSymmetricMatrixException#NonSymmetricMatrixException(int,int,double)",
        "org.apache.commons.math3.linear.BlockRealMatrix#getEntry(int,int)",
        "org.apache.commons.math3.linear.SparseFieldMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.BlockFieldMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.Array2DRowRealMatrix#getEntry(int,int)",
        "org.apache.commons.math3.linear.BlockRealMatrix#getRowDimension()",
        "org.apache.commons.math3.util.FastMath.abs(double)",
        "org.apache.commons.math3.linear.Array2DRowRealMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.NonSquareMatrixException#NonSquareMatrixException(int,int)",
        "org.apache.commons.math3.linear.Array2DRowFieldMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.BlockRealMatrix#getColumnDimension()"
    ],
    "org.apache.commons.math3.stat.regression.SimpleRegression#getR()": [
        "org.apache.commons.math3.stat.regression.SimpleRegression#getRSquare()",
        "org.apache.commons.math3.stat.regression.SimpleRegression#getSlope()",
        "org.apache.commons.math3.util.FastMath.sqrt(double)"
    ],
    "org.apache.commons.math3.geometry.partitioning.AbstractRegion#AbstractRegion(BSPTree<S extends Space>,double)": ["org.apache.commons.math3.geometry.partitioning.AbstractRegion.<init>()"],
    "org.apache.commons.math3.random.Well1024a#Well1024a(int[])": [
        "org.apache.commons.math3.random.Well1024a.<staticinit>()",
        "org.apache.commons.math3.random.Well1024a.<init>()",
        "org.apache.commons.math3.random.AbstractWell#AbstractWell(int,int,int,int,int[])"
    ],
    "org.apache.commons.math3.linear.ArrayFieldVector#walkInOptimizedOrder(FieldVectorPreservingVisitor<T extends FieldElement>)": ["org.apache.commons.math3.linear.ArrayFieldVector#walkInDefaultOrder(FieldVectorPreservingVisitor<T extends FieldElement>)"],
    "org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile.FixedCapacityList#FixedCapacityList(int)": ["org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile.FixedCapacityList.<init>()"],
    "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer.min(RealMatrix)": [
        "org.apache.commons.math3.linear.DiagonalMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.Array2DRowRealMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.BlockFieldMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.SparseFieldMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.DiagonalMatrix#getEntry(int,int)",
        "org.apache.commons.math3.linear.OpenMapRealMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.OpenMapRealMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.DiagonalMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.OpenMapRealMatrix#getEntry(int,int)",
        "org.apache.commons.math3.linear.BlockRealMatrix#getEntry(int,int)",
        "org.apache.commons.math3.linear.Array2DRowFieldMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.BlockFieldMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.SparseFieldMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.BlockRealMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.Array2DRowRealMatrix#getEntry(int,int)",
        "org.apache.commons.math3.linear.Array2DRowRealMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.Array2DRowFieldMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.BlockRealMatrix#getColumnDimension()"
    ],
    "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer.times(RealMatrix,RealMatrix)": [
        "org.apache.commons.math3.linear.DiagonalMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.Array2DRowRealMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.BlockFieldMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.SparseFieldMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.DiagonalMatrix#getEntry(int,int)",
        "org.apache.commons.math3.linear.OpenMapRealMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.OpenMapRealMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.DiagonalMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.OpenMapRealMatrix#getEntry(int,int)",
        "org.apache.commons.math3.linear.BlockRealMatrix#getEntry(int,int)",
        "org.apache.commons.math3.linear.Array2DRowFieldMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.Array2DRowRealMatrix#Array2DRowRealMatrix(double[][],boolean)",
        "org.apache.commons.math3.linear.SparseFieldMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.BlockFieldMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.Array2DRowRealMatrix#getEntry(int,int)",
        "org.apache.commons.math3.linear.BlockRealMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.Array2DRowRealMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.Array2DRowFieldMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.BlockRealMatrix#getColumnDimension()"
    ],
    "org.apache.commons.math3.linear.MatrixUtils.createRowRealMatrix(double[])": [
        "org.apache.commons.math3.exception.NullArgumentException#NullArgumentException()",
        "org.apache.commons.math3.linear.BlockRealMatrix#setEntry(int,int,double)",
        "org.apache.commons.math3.linear.OpenMapRealMatrix#setEntry(int,int,double)",
        "org.apache.commons.math3.linear.MatrixUtils.createRealMatrix(int,int)",
        "org.apache.commons.math3.linear.Array2DRowRealMatrix#setEntry(int,int,double)",
        "org.apache.commons.math3.linear.DiagonalMatrix#setEntry(int,int,double)"
    ],
    "org.apache.commons.math3.optimization.general.NonLinearConjugateGradientOptimizer#doOptimize()": [
        "org.apache.commons.math3.optimization.direct.BaseAbstractMultivariateOptimizer#getMaxEvaluations()",
        "org.apache.commons.math3.optimization.direct.BaseAbstractMultivariateOptimizer#computeObjectiveValue(double[])",
        "org.apache.commons.math3.optimization.PointValuePair#PointValuePair(double[],double)",
        "org.apache.commons.math3.optimization.direct.BaseAbstractMultivariateOptimizer#getStartPoint()",
        "org.apache.commons.math3.optimization.general.NonLinearConjugateGradientOptimizer.LineSearchFunction#LineSearchFunction(double[])",
        "org.apache.commons.math3.analysis.solvers.BaseAbstractUnivariateSolver#solve(int,FUNC extends UnivariateFunction,double,double,double)",
        "org.apache.commons.math3.optimization.GoalType.<staticinit>()",
        "org.apache.commons.math3.optimization.direct.BaseAbstractMultivariateOptimizer#getGoalType()",
        "org.apache.commons.math3.optimization.direct.BaseAbstractMultivariateOptimizer#getConvergenceChecker()",
        "org.apache.commons.math3.optimization.general.ConjugateGradientFormula.<staticinit>()",
        "org.apache.commons.math3.optimization.general.NonLinearConjugateGradientOptimizer.IdentityPreconditioner#precondition(double[],double[])",
        "org.apache.commons.math3.optimization.general.NonLinearConjugateGradientOptimizer#findUpperBound(UnivariateFunction,double,double)",
        "org.apache.commons.math3.analysis.solvers.BaseAbstractUnivariateSolver#getEvaluations()",
        "org.apache.commons.math3.optimization.general.AbstractScalarDifferentiableOptimizer#computeObjectiveGradient(double[])"
    ],
    "org.apache.commons.math3.util.FastMath.incrementExact(int)": ["org.apache.commons.math3.exception.util.LocalizedFormats.<staticinit>()"],
    "org.apache.commons.math3.analysis.differentiation.SparseGradient#toRadians()": [
        "org.apache.commons.math3.analysis.differentiation.SparseGradient#SparseGradient(double,double,Map<Integer, Double>)",
        "org.apache.commons.math3.util.FastMath.toRadians(double)"
    ],
    "org.apache.commons.math3.distribution.CauchyDistribution#CauchyDistribution(double,double)": [
        "org.apache.commons.math3.distribution.CauchyDistribution.<staticinit>()",
        "org.apache.commons.math3.distribution.CauchyDistribution#CauchyDistribution(double,double,double)"
    ],
    "org.apache.commons.math3.geometry.euclidean.threed.FieldRotation#composeInverseInternal(FieldRotation<T extends RealFieldElement>)": ["org.apache.commons.math3.geometry.euclidean.threed.FieldRotation#FieldRotation(T extends RealFieldElement,T extends RealFieldElement,T extends RealFieldElement,T extends RealFieldElement,boolean)"],
    "org.apache.commons.math3.ml.neuralnet.twod.NeuronSquareMesh2D.SerializationProxy#readResolve()": ["org.apache.commons.math3.ml.neuralnet.twod.NeuronSquareMesh2D#NeuronSquareMesh2D(boolean,boolean,SquareNeighbourhood,double[][][])"],
    "org.apache.commons.math3.stat.Frequency#addValue(int)": ["org.apache.commons.math3.stat.Frequency#addValue(long)"],
    "org.apache.commons.math3.analysis.differentiation.FiniteDifferencesDifferentiator#FiniteDifferencesDifferentiator(int,double)": ["org.apache.commons.math3.analysis.differentiation.FiniteDifferencesDifferentiator#FiniteDifferencesDifferentiator(int,double,double,double)"],
    "org.apache.commons.math3.geometry.spherical.twod.SphericalPolygonsSet.verticesToTree(double,S2Point[]...)": [
        "org.apache.commons.math3.geometry.spherical.twod.Edge#Edge(Vertex,Vertex,double,Circle)",
        "org.apache.commons.math3.geometry.partitioning.BSPTree#BSPTree(Object)",
        "org.apache.commons.math3.geometry.spherical.twod.Vertex#getLocation()",
        "org.apache.commons.math3.geometry.spherical.twod.SphericalPolygonsSet.insertEdges(double,BSPTree<Sphere2D>,List<Edge>)",
        "org.apache.commons.math3.geometry.spherical.twod.Vertex#bindWith(Circle)",
        "org.apache.commons.math3.geometry.partitioning.BSPTree#BSPTree()",
        "org.apache.commons.math3.util.FastMath.abs(double)",
        "org.apache.commons.math3.geometry.spherical.twod.Vertex#sharedCircleWith(Vertex)",
        "org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(Vector3D,Vector3D)",
        "org.apache.commons.math3.geometry.spherical.twod.Vertex#Vertex(S2Point)",
        "org.apache.commons.math3.geometry.spherical.twod.Circle#Circle(S2Point,S2Point,double)",
        "org.apache.commons.math3.geometry.spherical.twod.Circle#getOffset(Point<Sphere2D>)",
        "org.apache.commons.math3.geometry.spherical.twod.S2Point#getVector()"
    ],
    "org.apache.commons.math3.util.Decimal64#acosh()": [
        "org.apache.commons.math3.util.Decimal64#Decimal64(double)",
        "org.apache.commons.math3.util.FastMath.acosh(double)"
    ],
    "org.apache.commons.math3.stat.inference.KolmogorovSmirnovTest#ksSum(double,double,int)": ["org.apache.commons.math3.util.FastMath.exp(double)"],
    "org.apache.commons.math3.random.UniformRandomGenerator.<staticinit>()": ["org.apache.commons.math3.util.FastMath.sqrt(double)"],
    "org.apache.commons.math3.ode.nonstiff.DormandPrince54StepInterpolator#DormandPrince54StepInterpolator(DormandPrince54StepInterpolator)": [
        "org.apache.commons.math3.ode.nonstiff.RungeKuttaStepInterpolator#RungeKuttaStepInterpolator(RungeKuttaStepInterpolator)",
        "org.apache.commons.math3.ode.nonstiff.DormandPrince54StepInterpolator.<init>()"
    ],
    "org.apache.commons.math3.ode.nonstiff.MidpointFieldIntegrator#getA()": [
        "org.apache.commons.math3.util.MathArrays.buildArray(Field<T>,int,int)",
        "org.apache.commons.math3.ode.AbstractFieldIntegrator#getField()",
        "org.apache.commons.math3.ode.nonstiff.RungeKuttaFieldIntegrator#fraction(int,int)"
    ],
    "org.apache.commons.math3.util.OpenIntToFieldHashMap#OpenIntToFieldHashMap(Field<T extends FieldElement>,T extends FieldElement)": [
        "org.apache.commons.math3.util.OpenIntToFieldHashMap#OpenIntToFieldHashMap(Field<T extends FieldElement>,int,T extends FieldElement)",
        "org.apache.commons.math3.util.OpenIntToFieldHashMap.<staticinit>()"
    ],
    "org.apache.commons.math3.linear.RealVector.unmodifiableRealVector(RealVector)$Iterator$1$Iterator$1#sparseIterator()$Iterator$1#next()": [
        "org.apache.commons.math3.linear.RealVector#iterator()$Iterator$1#next()",
        "org.apache.commons.math3.linear.RealVector.unmodifiableRealVector(RealVector)$Iterator$1$Iterator$1#iterator()$Iterator$1#next()",
        "org.apache.commons.math3.linear.RealVector.SparseEntryIterator#next()",
        "org.apache.commons.math3.linear.RealVector.unmodifiableRealVector(RealVector)$Iterator$1$Iterator$1#sparseIterator()$Iterator$1#next()",
        "org.apache.commons.math3.linear.RealVector.Entry#setIndex(int)"
    ],
    "org.apache.commons.math3.dfp.Dfp#multiply(double)": [
        "org.apache.commons.math3.dfp.DfpDec#newInstance(double)",
        "org.apache.commons.math3.dfp.Dfp#newInstance(double)",
        "org.apache.commons.math3.dfp.Dfp#multiply(Dfp)"
    ],
    "org.apache.commons.math3.linear.AbstractRealMatrix#getColumnVector(int)": [
        "org.apache.commons.math3.linear.ArrayRealVector#ArrayRealVector(double[],boolean)",
        "org.apache.commons.math3.linear.AbstractRealMatrix#getColumn(int)",
        "org.apache.commons.math3.linear.BlockRealMatrix#getColumn(int)"
    ],
    "org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet#firstIntersection(Vector3D,Line)": [
        "org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet#recurseFirstIntersection(BSPTree<Euclidean3D>,Vector3D,Line)",
        "org.apache.commons.math3.geometry.partitioning.AbstractRegion#getTree(boolean)"
    ],
    "org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D.angle(Vector3D,FieldVector3D<T extends RealFieldElement>)": ["org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D.angle(FieldVector3D<T extends RealFieldElement>,Vector3D)"],
    "org.apache.commons.math3.stat.clustering.KMeansPlusPlusClusterer#KMeansPlusPlusClusterer(Random,EmptyClusterStrategy)": ["org.apache.commons.math3.stat.clustering.KMeansPlusPlusClusterer.<init>()"],
    "org.apache.commons.math3.linear.MatrixUtils.createFieldDiagonalMatrix(T extends FieldElement[])": [
        "org.apache.commons.math3.linear.Array2DRowFieldMatrix#setEntry(int,int,T extends FieldElement)",
        "org.apache.commons.math3.linear.BlockFieldMatrix#setEntry(int,int,T extends FieldElement)",
        "org.apache.commons.math3.linear.SparseFieldMatrix#setEntry(int,int,T extends FieldElement)",
        "org.apache.commons.math3.linear.MatrixUtils.createFieldMatrix(Field<T extends FieldElement>,int,int)"
    ],
    "org.apache.commons.math3.geometry.euclidean.threed.SphereGenerator#minor(BigFraction[],BigFraction[],BigFraction[])": [
        "org.apache.commons.math3.fraction.BigFraction#subtract(BigFraction)",
        "org.apache.commons.math3.fraction.BigFraction#add(BigFraction)",
        "org.apache.commons.math3.fraction.BigFraction#multiply(BigFraction)"
    ],
    "org.apache.commons.math3.optim.nonlinear.scalar.LeastSquaresConverter#LeastSquaresConverter(MultivariateVectorFunction,double[])": ["org.apache.commons.math3.optim.nonlinear.scalar.LeastSquaresConverter.<init>()"],
    "org.apache.commons.math3.ode.nonstiff.LutherFieldStepInterpolator#computeInterpolatedStateAndDerivatives(FieldEquationsMapper<T extends RealFieldElement>,T extends RealFieldElement,T extends RealFieldElement,T extends RealFieldElement,T extends RealFieldElement)": [
        "org.apache.commons.math3.ode.nonstiff.RungeKuttaFieldStepInterpolator#previousStateLinearCombination(T extends RealFieldElement[]...)",
        "org.apache.commons.math3.ode.nonstiff.RungeKuttaFieldStepInterpolator#currentStateLinearCombination(T extends RealFieldElement[]...)",
        "org.apache.commons.math3.ode.nonstiff.RungeKuttaFieldStepInterpolator#derivativeLinearCombination(T extends RealFieldElement[]...)",
        "org.apache.commons.math3.ode.sampling.AbstractFieldStepInterpolator#getGlobalPreviousState()",
        "org.apache.commons.math3.ode.FieldODEStateAndDerivative#FieldODEStateAndDerivative(T extends RealFieldElement,T extends RealFieldElement[],T extends RealFieldElement[])"
    ],
    "org.apache.commons.math3.distribution.ZipfDistribution#calculateNumericalVariance()": [
        "org.apache.commons.math3.distribution.ZipfDistribution#getNumberOfElements()",
        "org.apache.commons.math3.distribution.ZipfDistribution#getExponent()",
        "org.apache.commons.math3.distribution.ZipfDistribution#generalizedHarmonic(int,double)"
    ],
    "org.apache.commons.math3.stat.inference.KolmogorovSmirnovTest#kolmogorovSmirnovTest(RealDistribution,double[],double)": [
        "org.apache.commons.math3.stat.inference.KolmogorovSmirnovTest#kolmogorovSmirnovTest(RealDistribution,double[])",
        "org.apache.commons.math3.exception.util.LocalizedFormats.<staticinit>()"
    ],
    "org.apache.commons.math3.exception.NotStrictlyPositiveException#NotStrictlyPositiveException(Localizable,Number)": [
        "org.apache.commons.math3.exception.NotStrictlyPositiveException.<init>()",
        "org.apache.commons.math3.exception.MathIllegalNumberException.<staticinit>()"
    ],
    "org.apache.commons.math3.fitting.leastsquares.LevenbergMarquardtOptimizer#LevenbergMarquardtOptimizer(double,double,double,double,double)": ["org.apache.commons.math3.fitting.leastsquares.LevenbergMarquardtOptimizer.<init>()"],
    "org.apache.commons.math3.optimization.direct.AbstractSimplex#AbstractSimplex(int,double)": [
        "org.apache.commons.math3.optimization.direct.AbstractSimplex#AbstractSimplex(double[])",
        "org.apache.commons.math3.optimization.direct.AbstractSimplex.createHypercubeSteps(int,double)"
    ],
    "org.apache.commons.math3.dfp.DfpDec#nextAfter(Dfp)": [
        "org.apache.commons.math3.dfp.Dfp#classify()",
        "org.apache.commons.math3.dfp.Dfp.copysign(Dfp,Dfp)",
        "org.apache.commons.math3.dfp.Dfp.<staticinit>()",
        "org.apache.commons.math3.dfp.Dfp#dotrap(int,String,Dfp,Dfp)",
        "org.apache.commons.math3.dfp.Dfp#add(Dfp)",
        "org.apache.commons.math3.dfp.Dfp#power10(int)",
        "org.apache.commons.math3.dfp.DfpField#getRadixDigits()",
        "org.apache.commons.math3.dfp.Dfp#subtract(Dfp)",
        "org.apache.commons.math3.dfp.Dfp#getField()",
        "org.apache.commons.math3.dfp.DfpDec#newInstance(Dfp)",
        "org.apache.commons.math3.dfp.Dfp#lessThan(Dfp)",
        "org.apache.commons.math3.dfp.Dfp#divide(Dfp)",
        "org.apache.commons.math3.dfp.DfpField.<staticinit>()",
        "org.apache.commons.math3.dfp.DfpDec#getDecimalDigits()",
        "org.apache.commons.math3.dfp.DfpField#setIEEEFlagsBits(int)",
        "org.apache.commons.math3.dfp.Dfp#power10K(int)",
        "org.apache.commons.math3.dfp.Dfp#intLog10()",
        "org.apache.commons.math3.dfp.Dfp#equals(Object)",
        "org.apache.commons.math3.dfp.Dfp#getZero()"
    ],
    "org.apache.commons.math3.util.CombinatoricsUtils.checkBinomial(int,int)": ["org.apache.commons.math3.exception.util.LocalizedFormats.<staticinit>()"],
    "org.apache.commons.math3.analysis.integration.gauss.SymmetricGaussIntegrator#SymmetricGaussIntegrator(Pair<double[], double[]>)": [
        "org.apache.commons.math3.util.Pair#getFirst()",
        "org.apache.commons.math3.analysis.integration.gauss.SymmetricGaussIntegrator#SymmetricGaussIntegrator(double[],double[])",
        "org.apache.commons.math3.util.Pair#getSecond()"
    ],
    "org.apache.commons.math3.fraction.BigFraction#pow(BigInteger)": [
        "org.apache.commons.math3.util.ArithmeticUtils.pow(BigInteger,BigInteger)",
        "org.apache.commons.math3.fraction.BigFraction#BigFraction(BigInteger,BigInteger)",
        "org.apache.commons.math3.fraction.BigFraction.<staticinit>()"
    ],
    "org.apache.commons.math3.userguide.genetics.PolygonChromosome#getPolygonRepresentation()": ["org.apache.commons.math3.genetics.AbstractListChromosome#getRepresentation()"],
    "org.apache.commons.math3.analysis.polynomials.PolynomialFunctionNewtonForm#value(double)": ["org.apache.commons.math3.analysis.polynomials.PolynomialFunctionNewtonForm.evaluate(double[],double[],double)"],
    "org.apache.commons.math3.util.Decimal64#copySign(double)": [
        "org.apache.commons.math3.util.Decimal64#Decimal64(double)",
        "org.apache.commons.math3.util.FastMath.copySign(double,double)"
    ],
    "org.apache.commons.math3.ode.sampling.NordsieckStepInterpolator#doCopy()": ["org.apache.commons.math3.ode.sampling.NordsieckStepInterpolator#NordsieckStepInterpolator(NordsieckStepInterpolator)"],
    "org.apache.commons.math3.distribution.ZipfDistribution#cumulativeProbability(int)": ["org.apache.commons.math3.distribution.ZipfDistribution#generalizedHarmonic(int,double)"],
    "org.apache.commons.math3.geometry.partitioning.BoundaryProjection#BoundaryProjection(Point<S extends Space>,Point<S extends Space>,double)": ["org.apache.commons.math3.geometry.partitioning.BoundaryProjection.<init>()"],
    "org.apache.commons.math3.distribution.EnumeratedIntegerDistribution#getNumericalVariance()": [
        "org.apache.commons.math3.util.Pair#getValue()",
        "org.apache.commons.math3.distribution.EnumeratedDistribution#getPmf()",
        "org.apache.commons.math3.util.Pair#getKey()",
        "org.apache.commons.math3.optim.PointVectorValuePair#getValue()",
        "org.apache.commons.math3.optimization.PointVectorValuePair#getValue()"
    ],
    "org.apache.commons.math3.analysis.differentiation.DerivativeStructure#linearCombination(double,DerivativeStructure,double,DerivativeStructure,double,DerivativeStructure,double,DerivativeStructure)": [
        "org.apache.commons.math3.analysis.differentiation.DerivativeStructure#getValue()",
        "org.apache.commons.math3.analysis.differentiation.DerivativeStructure#add(DerivativeStructure)",
        "org.apache.commons.math3.analysis.differentiation.DerivativeStructure#DerivativeStructure(int,int,double[]...)",
        "org.apache.commons.math3.analysis.differentiation.DerivativeStructure#getOrder()",
        "org.apache.commons.math3.analysis.differentiation.DerivativeStructure#multiply(double)",
        "org.apache.commons.math3.util.MathArrays.linearCombination(double,double,double,double,double,double,double,double)",
        "org.apache.commons.math3.analysis.differentiation.DerivativeStructure#getAllDerivatives()",
        "org.apache.commons.math3.analysis.differentiation.DerivativeStructure#getFreeParameters()"
    ],
    "org.apache.commons.math3.analysis.differentiation.DerivativeStructure#floor()": [
        "org.apache.commons.math3.analysis.differentiation.DSCompiler#getFreeParameters()",
        "org.apache.commons.math3.analysis.differentiation.DSCompiler#getOrder()",
        "org.apache.commons.math3.analysis.differentiation.DerivativeStructure#DerivativeStructure(int,int,double[]...)",
        "org.apache.commons.math3.util.FastMath.floor(double)"
    ],
    "org.apache.commons.math3.util.FastMath.asin(double)": [
        "org.apache.commons.math3.util.FastMath.atan(double,double,boolean)",
        "org.apache.commons.math3.util.FastMath.<staticinit>()",
        "org.apache.commons.math3.util.FastMath.sqrt(double)"
    ],
    "org.apache.commons.math3.distribution.TDistribution#cumulativeProbability(double)": ["org.apache.commons.math3.special.Beta.regularizedBeta(double,double,double)"],
    "org.apache.commons.math3.fraction.BigFraction#pow(int)": [
        "org.apache.commons.math3.fraction.BigFraction#BigFraction(BigInteger,BigInteger)",
        "org.apache.commons.math3.fraction.BigFraction.<staticinit>()"
    ],
    "org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D#add(Vector3D)": [
        "org.apache.commons.math3.geometry.euclidean.threed.Vector3D#getX()",
        "org.apache.commons.math3.geometry.euclidean.threed.Vector3D#getZ()",
        "org.apache.commons.math3.geometry.euclidean.threed.Vector3D#getY()",
        "org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D#FieldVector3D(T extends RealFieldElement,T extends RealFieldElement,T extends RealFieldElement)"
    ],
    "org.apache.commons.math3.stat.inference.TestUtils.homoscedasticT(double[],double[])": [
        "org.apache.commons.math3.stat.inference.TestUtils.<staticinit>()",
        "org.apache.commons.math3.stat.inference.TTest#homoscedasticT(double[],double[])"
    ],
    "org.apache.commons.math3.random.BitsStreamGenerator#nextBytes(byte[],int,int)": ["org.apache.commons.math3.random.BitsStreamGenerator#nextBytesFill(byte[],int,int)"],
    "org.apache.commons.math3.optimization.direct.NelderMeadSimplex#NelderMeadSimplex(double[][],double,double,double,double)": [
        "org.apache.commons.math3.optimization.direct.AbstractSimplex#AbstractSimplex(double[][])",
        "org.apache.commons.math3.optimization.direct.NelderMeadSimplex.<init>()"
    ],
    "org.apache.commons.math3.geometry.partitioning.AbstractRegion#projectToBoundary(Point<S extends Space>)": [
        "org.apache.commons.math3.geometry.partitioning.AbstractRegion#getTree(boolean)",
        "org.apache.commons.math3.geometry.partitioning.BoundaryProjector#getProjection()",
        "org.apache.commons.math3.geometry.partitioning.BSPTree#visit(BSPTreeVisitor<S extends Space>)",
        "org.apache.commons.math3.geometry.partitioning.BoundaryProjector#BoundaryProjector(Point<S extends Space>)"
    ],
    "org.apache.commons.math3.fitting.HarmonicFitter.ParameterGuesser#guessPhi(WeightedObservedPoint[])": [
        "org.apache.commons.math3.fitting.WeightedObservedPoint#getX()",
        "org.apache.commons.math3.util.FastMath.sin(double)",
        "org.apache.commons.math3.util.FastMath.atan2(double,double)",
        "org.apache.commons.math3.fitting.WeightedObservedPoint#getY()",
        "org.apache.commons.math3.util.FastMath.cos(double)"
    ],
    "org.apache.commons.math3.geometry.euclidean.threed.Plane#revertSelf()": ["org.apache.commons.math3.geometry.euclidean.threed.Vector3D#negate()"],
    "org.apache.commons.math3.util.MathUtils.copySign(int,int)": ["org.apache.commons.math3.exception.util.LocalizedFormats.<staticinit>()"],
    "org.apache.commons.math3.linear.OpenMapRealVector#setEntry(int,double)": [
        "org.apache.commons.math3.linear.RealVector#checkIndex(int)",
        "org.apache.commons.math3.util.OpenIntToDoubleHashMap#remove(int)",
        "org.apache.commons.math3.util.OpenIntToDoubleHashMap#put(int,double)",
        "org.apache.commons.math3.linear.OpenMapRealVector#isDefaultValue(double)",
        "org.apache.commons.math3.util.OpenIntToDoubleHashMap#containsKey(int)"
    ],
    "org.apache.commons.math3.complex.ComplexFormat.getAvailableLocales()": [
        "org.apache.commons.math3.fraction.BigFractionFormat.getAvailableLocales()",
        "org.apache.commons.math3.fraction.FractionFormat.getAvailableLocales()"
    ],
    "org.apache.commons.math3.analysis.integration.IterativeLegendreGaussIntegrator#IterativeLegendreGaussIntegrator(int,double,double,int,int)": [
        "org.apache.commons.math3.analysis.integration.BaseAbstractUnivariateIntegrator#BaseAbstractUnivariateIntegrator(double,double,int,int)",
        "org.apache.commons.math3.analysis.integration.IterativeLegendreGaussIntegrator.<init>()",
        "org.apache.commons.math3.exception.util.LocalizedFormats.<staticinit>()"
    ],
    "org.apache.commons.math3.dfp.Dfp#divide(double)": [
        "org.apache.commons.math3.dfp.DfpDec#newInstance(double)",
        "org.apache.commons.math3.dfp.Dfp#newInstance(double)",
        "org.apache.commons.math3.dfp.Dfp#divide(Dfp)"
    ],
    "org.apache.commons.math3.linear.LUDecomposition.Solver#solve(RealMatrix)": [
        "org.apache.commons.math3.linear.DiagonalMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.Array2DRowRealMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.BlockFieldMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.SparseFieldMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.DiagonalMatrix#getEntry(int,int)",
        "org.apache.commons.math3.linear.OpenMapRealMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.SingularMatrixException#SingularMatrixException()",
        "org.apache.commons.math3.linear.OpenMapRealMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.DiagonalMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.OpenMapRealMatrix#getEntry(int,int)",
        "org.apache.commons.math3.linear.Array2DRowRealMatrix#Array2DRowRealMatrix(double[][],boolean)",
        "org.apache.commons.math3.linear.BlockRealMatrix#getEntry(int,int)",
        "org.apache.commons.math3.linear.Array2DRowFieldMatrix#getColumnDimension()",
        "org.apache.commons.math3.exception.DimensionMismatchException#DimensionMismatchException(int,int)",
        "org.apache.commons.math3.linear.BlockFieldMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.SparseFieldMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.BlockRealMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.Array2DRowRealMatrix#getEntry(int,int)",
        "org.apache.commons.math3.linear.Array2DRowRealMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.Array2DRowFieldMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.BlockRealMatrix#getColumnDimension()"
    ],
    "org.apache.commons.math3.linear.OpenMapRealVector#OpenMapRealVector(OpenMapRealVector,int)": [
        "org.apache.commons.math3.linear.OpenMapRealVector#getDimension()",
        "org.apache.commons.math3.linear.OpenMapRealVector.<init>()",
        "org.apache.commons.math3.linear.SparseRealVector.<init>()",
        "org.apache.commons.math3.util.OpenIntToDoubleHashMap#OpenIntToDoubleHashMap(OpenIntToDoubleHashMap)"
    ],
    "org.apache.commons.math3.analysis.differentiation.DSCompiler#tanh(double[],int,double[],int)": [
        "org.apache.commons.math3.analysis.differentiation.DSCompiler#compose(double[],int,double[],double[],int)",
        "org.apache.commons.math3.util.FastMath.tanh(double)"
    ],
    "org.apache.commons.math3.linear.AbstractRealMatrix#getColumn(int)": [
        "org.apache.commons.math3.linear.Array2DRowRealMatrix#getEntry(int,int)",
        "org.apache.commons.math3.linear.BlockRealMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.Array2DRowRealMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.DiagonalMatrix#getEntry(int,int)",
        "org.apache.commons.math3.linear.MatrixUtils.checkColumnIndex(AnyMatrix,int)",
        "org.apache.commons.math3.linear.OpenMapRealMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.DiagonalMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.OpenMapRealMatrix#getEntry(int,int)",
        "org.apache.commons.math3.linear.BlockRealMatrix#getEntry(int,int)"
    ],
    "org.apache.commons.math3.optimization.univariate.SimpleUnivariateValueChecker#converged(int,UnivariatePointValuePair,UnivariatePointValuePair)": [
        "org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair#getValue()",
        "org.apache.commons.math3.optimization.AbstractConvergenceChecker#getAbsoluteThreshold()",
        "org.apache.commons.math3.util.FastMath.max(double,double)",
        "org.apache.commons.math3.optimization.AbstractConvergenceChecker#getRelativeThreshold()",
        "org.apache.commons.math3.util.FastMath.abs(double)",
        "org.apache.commons.math3.optimization.univariate.SimpleUnivariateValueChecker.<staticinit>()"
    ],
    "org.apache.commons.math3.linear.Array2DRowRealMatrix#subtract(Array2DRowRealMatrix)": [
        "org.apache.commons.math3.linear.Array2DRowRealMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.MatrixUtils.checkSubtractionCompatible(AnyMatrix,AnyMatrix)",
        "org.apache.commons.math3.linear.Array2DRowRealMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.Array2DRowRealMatrix#Array2DRowRealMatrix(double[][],boolean)"
    ],
    "org.apache.commons.math3.geometry.partitioning.utilities.AVLTree.Node#delete()": [
        "org.apache.commons.math3.geometry.partitioning.utilities.AVLTree.Node#getLargest()",
        "org.apache.commons.math3.geometry.partitioning.utilities.AVLTree.Node#getSmallest()",
        "org.apache.commons.math3.geometry.partitioning.utilities.AVLTree.Node#rebalanceRightShrunk()",
        "org.apache.commons.math3.geometry.partitioning.utilities.AVLTree.Node#rebalanceLeftShrunk()"
    ],
    "org.apache.commons.math3.util.Decimal64#negate()": ["org.apache.commons.math3.util.Decimal64#Decimal64(double)"],
    "org.apache.commons.math3.geometry.partitioning.BSPTree#condense()": [
        "org.apache.commons.math3.stat.descriptive.AggregateSummaryStatistics.AggregatingSummaryStatistics#equals(Object)",
        "org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile#equals(Object)",
        "org.apache.commons.math3.linear.AbstractRealMatrix#equals(Object)",
        "org.apache.commons.math3.stat.descriptive.SynchronizedMultivariateSummaryStatistics#equals(Object)",
        "org.apache.commons.math3.linear.OpenMapRealVector#equals(Object)",
        "org.apache.commons.math3.stat.descriptive.AbstractStorelessUnivariateStatistic#equals(Object)",
        "org.apache.commons.math3.linear.ArrayRealVector#equals(Object)",
        "org.apache.commons.math3.stat.descriptive.SynchronizedSummaryStatistics#equals(Object)"
    ],
    "org.apache.commons.math3.dfp.Dfp#isZero()": [
        "org.apache.commons.math3.dfp.DfpDec#newInstance(Dfp)",
        "org.apache.commons.math3.dfp.Dfp.<staticinit>()",
        "org.apache.commons.math3.dfp.Dfp#dotrap(int,String,Dfp,Dfp)",
        "org.apache.commons.math3.dfp.Dfp#newInstance(Dfp)",
        "org.apache.commons.math3.dfp.DfpField.<staticinit>()",
        "org.apache.commons.math3.dfp.DfpField#setIEEEFlagsBits(int)",
        "org.apache.commons.math3.dfp.Dfp#isNaN()",
        "org.apache.commons.math3.dfp.Dfp#getZero()",
        "org.apache.commons.math3.dfp.Dfp#isInfinite()"
    ],
    "org.apache.commons.math3.linear.ArrayRealVector#checkVectorDimensions(RealVector)": [
        "org.apache.commons.math3.linear.OpenMapRealVector#getDimension()",
        "org.apache.commons.math3.linear.ArrayRealVector#checkVectorDimensions(int)",
        "org.apache.commons.math3.linear.ArrayRealVector#getDimension()",
        "org.apache.commons.math3.linear.RealVector.unmodifiableRealVector(RealVector)$RealVector$1#getDimension()"
    ],
    "org.apache.commons.math3.dfp.DfpMath.acos(Dfp)": [
        "org.apache.commons.math3.dfp.Dfp.copysign(Dfp,Dfp)",
        "org.apache.commons.math3.dfp.Dfp#newInstance(Dfp)",
        "org.apache.commons.math3.dfp.Dfp#sqrt()",
        "org.apache.commons.math3.dfp.DfpField#getPi()",
        "org.apache.commons.math3.dfp.Dfp#getField()",
        "org.apache.commons.math3.dfp.Dfp#subtract(Dfp)",
        "org.apache.commons.math3.dfp.DfpDec#newInstance(Dfp)",
        "org.apache.commons.math3.dfp.Dfp#lessThan(Dfp)",
        "org.apache.commons.math3.dfp.Dfp#getOne()",
        "org.apache.commons.math3.dfp.DfpMath.atan(Dfp)",
        "org.apache.commons.math3.dfp.Dfp#divide(Dfp)",
        "org.apache.commons.math3.dfp.Dfp#multiply(Dfp)",
        "org.apache.commons.math3.dfp.Dfp#getZero()"
    ],
    "org.apache.commons.math3.userguide.genetics.ImageEvolutionExample.main(String[])": [
        "org.apache.commons.math3.userguide.ExampleUtils.showExampleFrame(ExampleFrame)",
        "org.apache.commons.math3.userguide.genetics.ImageEvolutionExample.Display#Display()"
    ],
    "org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet#recurseFirstIntersection(BSPTree<Euclidean3D>,Vector3D,Line)": [
        "org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet#recurseFirstIntersection(BSPTree<Euclidean3D>,Vector3D,Line)",
        "org.apache.commons.math3.geometry.partitioning.BSPTree#getPlus()",
        "org.apache.commons.math3.util.FastMath.abs(double)",
        "org.apache.commons.math3.geometry.partitioning.BSPTree#getCut()",
        "org.apache.commons.math3.geometry.partitioning.AbstractRegion#getTolerance()",
        "org.apache.commons.math3.geometry.partitioning.BSPTree#getMinus()",
        "org.apache.commons.math3.geometry.euclidean.threed.Plane#intersection(Line)",
        "org.apache.commons.math3.geometry.euclidean.threed.Line#getAbscissa(Vector3D)",
        "org.apache.commons.math3.geometry.euclidean.threed.Plane#getOffset(Point<Euclidean3D>)",
        "org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet#boundaryFacet(Vector3D,BSPTree<Euclidean3D>)",
        "org.apache.commons.math3.geometry.partitioning.AbstractSubHyperplane#getHyperplane()"
    ],
    "org.apache.commons.math3.optimization.direct.CMAESOptimizer.square(RealMatrix)": [
        "org.apache.commons.math3.linear.DiagonalMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.Array2DRowRealMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.BlockFieldMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.SparseFieldMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.DiagonalMatrix#getEntry(int,int)",
        "org.apache.commons.math3.linear.OpenMapRealMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.OpenMapRealMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.DiagonalMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.OpenMapRealMatrix#getEntry(int,int)",
        "org.apache.commons.math3.linear.Array2DRowRealMatrix#Array2DRowRealMatrix(double[][],boolean)",
        "org.apache.commons.math3.linear.Array2DRowFieldMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.BlockRealMatrix#getEntry(int,int)",
        "org.apache.commons.math3.linear.BlockFieldMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.SparseFieldMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.BlockRealMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.Array2DRowRealMatrix#getEntry(int,int)",
        "org.apache.commons.math3.linear.Array2DRowRealMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.Array2DRowFieldMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.BlockRealMatrix#getColumnDimension()"
    ],
    "org.apache.commons.math3.linear.AbstractRealMatrix#getFrobeniusNorm()$RealMatrixPreservingVisitor$1#end()": ["org.apache.commons.math3.util.FastMath.sqrt(double)"],
    "org.apache.commons.math3.util.OpenIntToFieldHashMap.computeCapacity(int)": [
        "org.apache.commons.math3.util.OpenIntToFieldHashMap.nextPowerOfTwo(int)",
        "org.apache.commons.math3.util.FastMath.ceil(double)",
        "org.apache.commons.math3.util.OpenIntToFieldHashMap.<staticinit>()"
    ],
    "org.apache.commons.math3.optim.nonlinear.scalar.MultivariateFunctionMappingAdapter.LowerBoundMapper#unboundedToBounded(double)": ["org.apache.commons.math3.util.FastMath.exp(double)"],
    "org.apache.commons.math3.optim.AbstractConvergenceChecker#AbstractConvergenceChecker(double,double)": ["org.apache.commons.math3.optim.AbstractConvergenceChecker.<init>()"],
    "org.apache.commons.math3.linear.OpenMapRealVector#isInfinite()": [
        "org.apache.commons.math3.util.OpenIntToDoubleHashMap.Iterator#advance()",
        "org.apache.commons.math3.util.OpenIntToDoubleHashMap.Iterator#value()",
        "org.apache.commons.math3.util.OpenIntToDoubleHashMap#iterator()",
        "org.apache.commons.math3.util.OpenIntToDoubleHashMap.Iterator#hasNext()"
    ],
    "org.apache.commons.math3.stat.interval.ConfidenceInterval#ConfidenceInterval(double,double,double)": [
        "org.apache.commons.math3.stat.interval.ConfidenceInterval#checkParameters(double,double,double)",
        "org.apache.commons.math3.stat.interval.ConfidenceInterval.<init>()"
    ],
    "org.apache.commons.math3.distribution.FDistribution#FDistribution(RandomGenerator,double,double,double)": [
        "org.apache.commons.math3.distribution.FDistribution.<init>()",
        "org.apache.commons.math3.distribution.AbstractRealDistribution#AbstractRealDistribution(RandomGenerator)",
        "org.apache.commons.math3.exception.util.LocalizedFormats.<staticinit>()"
    ],
    "org.apache.commons.math3.optimization.direct.MultiDirectionalSimplex#iterate(MultivariateFunction,Comparator<PointValuePair>)": [
        "org.apache.commons.math3.optimization.direct.MultiDirectionalSimplex#evaluateNewSimplex(MultivariateFunction,PointValuePair[],double,Comparator<PointValuePair>)",
        "org.apache.commons.math3.optimization.direct.AbstractSimplex#getPoints()",
        "org.apache.commons.math3.optimization.direct.AbstractSimplex#setPoints(PointValuePair[])",
        "org.apache.commons.math3.optimization.direct.SimplexOptimizer#doOptimize()$Comparator$1#compare(PointValuePair,PointValuePair)",
        "org.apache.commons.math3.stat.correlation.KendallsCorrelation#correlation(double[],double[])$Comparator$1#compare(Pair<Double, Double>,Pair<Double, Double>)",
        "org.apache.commons.math3.stat.Frequency.NaturalComparator#compare(Comparable<T extends Comparable>,Comparable<T extends Comparable>)",
        "org.apache.commons.math3.optimization.BaseMultivariateMultiStartOptimizer#sortPairs(GoalType)$Comparator$1#compare(PointValuePair,PointValuePair)"
    ],
    "org.apache.commons.math3.stat.inference.KolmogorovSmirnovTest.fixTies(double[],double[])": [
        "org.apache.commons.math3.stat.inference.KolmogorovSmirnovTest.jitter(double[],RealDistribution)",
        "org.apache.commons.math3.util.MathArrays.unique(double[])",
        "org.apache.commons.math3.exception.MathInternalError#MathInternalError()",
        "org.apache.commons.math3.distribution.UniformRealDistribution#UniformRealDistribution(RandomGenerator,double,double)",
        "org.apache.commons.math3.stat.inference.KolmogorovSmirnovTest.hasTies(double[],double[])",
        "org.apache.commons.math3.random.JDKRandomGenerator#JDKRandomGenerator(int)"
    ],
    "org.apache.commons.math3.linear.BlockFieldMatrix#walkInOptimizedOrder(FieldMatrixPreservingVisitor<T extends FieldElement>)": [
        "org.apache.commons.math3.linear.DefaultFieldMatrixPreservingVisitor#end()",
        "org.apache.commons.math3.linear.DefaultFieldMatrixPreservingVisitor#visit(int,int,T extends FieldElement)",
        "org.apache.commons.math3.linear.MatrixUtils.FractionMatrixConverter#start(int,int,int,int,int,int)",
        "org.apache.commons.math3.linear.MatrixUtils.BigFractionMatrixConverter#start(int,int,int,int,int,int)",
        "org.apache.commons.math3.linear.AbstractFieldMatrix#transpose()$DefaultFieldMatrixPreservingVisitor$1#visit(int,int,T extends FieldElement)",
        "org.apache.commons.math3.linear.AbstractFieldMatrix#copySubMatrix(int,int,int,int,T extends FieldElement[][])$DefaultFieldMatrixPreservingVisitor$1#start(int,int,int,int,int,int)",
        "org.apache.commons.math3.ode.nonstiff.AdamsMoultonFieldIntegrator.Corrector#start(int,int,int,int,int,int)",
        "org.apache.commons.math3.linear.BlockFieldMatrix.<staticinit>()",
        "org.apache.commons.math3.util.FastMath.min(int,int)",
        "org.apache.commons.math3.linear.DefaultFieldMatrixPreservingVisitor#start(int,int,int,int,int,int)",
        "org.apache.commons.math3.linear.AbstractFieldMatrix#copySubMatrix(int,int,int,int,T extends FieldElement[][])$DefaultFieldMatrixPreservingVisitor$1#visit(int,int,T extends FieldElement)",
        "org.apache.commons.math3.ode.nonstiff.AdamsMoultonFieldIntegrator.Corrector#end()"
    ],
    "org.apache.commons.math3.linear.EigenDecomposition#getV()": [
        "org.apache.commons.math3.linear.AbstractRealMatrix#setColumnVector(int,RealVector)",
        "org.apache.commons.math3.linear.BlockRealMatrix#setColumnVector(int,RealVector)",
        "org.apache.commons.math3.linear.MatrixUtils.createRealMatrix(int,int)"
    ],
    "org.apache.commons.math3.fraction.Fraction#subtract(Fraction)": ["org.apache.commons.math3.fraction.Fraction#addSub(Fraction,boolean)"],
    "org.apache.commons.math3.optimization.univariate.BracketFinder#eval(UnivariateFunction,double)": [
        "org.apache.commons.math3.analysis.FunctionUtils.multiply(DifferentiableUnivariateFunction[]...)$UnivariateFunction$1$UnivariateFunction$1#derivative()$UnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.polynomials.PolynomialSplineFunction#value(double)",
        "org.apache.commons.math3.analysis.function.Gaussian#value(double)",
        "org.apache.commons.math3.analysis.function.Tanh#value(double)",
        "org.apache.commons.math3.analysis.function.Inverse#value(double)",
        "org.apache.commons.math3.analysis.function.HarmonicOscillator#value(double)",
        "org.apache.commons.math3.analysis.FunctionUtils.fix1stArgument(BivariateFunction,double)$UnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.function.Asin#value(double)",
        "org.apache.commons.math3.analysis.function.Asinh#value(double)",
        "org.apache.commons.math3.analysis.FunctionUtils.multiply(UnivariateFunction[]...)$UnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.function.Atan#value(double)",
        "org.apache.commons.math3.analysis.FunctionUtils.toDifferentiableUnivariateFunction(UnivariateDifferentiableFunction)$DifferentiableUnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.function.Cbrt#value(double)",
        "org.apache.commons.math3.exception.MaxCountExceededException#getMax()",
        "org.apache.commons.math3.analysis.polynomials.PolynomialFunctionLagrangeForm#value(double)",
        "org.apache.commons.math3.analysis.function.Exp#value(double)",
        "org.apache.commons.math3.special.BesselJ#value(double)",
        "org.apache.commons.math3.analysis.polynomials.PolynomialFunctionNewtonForm#value(double)",
        "org.apache.commons.math3.analysis.FunctionUtils.add(UnivariateFunction[]...)$UnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.function.Sin#value(double)",
        "org.apache.commons.math3.analysis.function.Cos#value(double)",
        "org.apache.commons.math3.analysis.interpolation.UnivariatePeriodicInterpolator#interpolate(double[],double[])$UnivariateFunction$1#value(double)",
        "org.apache.commons.math3.exception.TooManyEvaluationsException#TooManyEvaluationsException(Number)",
        "org.apache.commons.math3.analysis.function.Log10#value(double)",
        "org.apache.commons.math3.analysis.function.Sqrt#value(double)",
        "org.apache.commons.math3.analysis.function.Log#value(double)",
        "org.apache.commons.math3.analysis.function.Sinc#value(double)",
        "org.apache.commons.math3.ode.events.EventState#evaluateStep(StepInterpolator)$UnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.function.Minus#value(double)",
        "org.apache.commons.math3.analysis.integration.IterativeLegendreGaussIntegrator#stage(int)$UnivariateFunction$1#value(double)",
        "org.apache.commons.math3.optimization.general.NonLinearConjugateGradientOptimizer.LineSearchFunction#value(double)",
        "org.apache.commons.math3.analysis.function.Floor#value(double)",
        "org.apache.commons.math3.analysis.FunctionUtils.multiply(DifferentiableUnivariateFunction[]...)$DifferentiableUnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.FunctionUtils.combine(BivariateFunction,UnivariateFunction,UnivariateFunction)$UnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.FunctionUtils.add(DifferentiableUnivariateFunction[]...)$UnivariateFunction$1$UnivariateFunction$1#derivative()$UnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.function.Sinh#value(double)",
        "org.apache.commons.math3.analysis.FunctionUtils.multiply(UnivariateDifferentiableFunction[]...)$UnivariateDifferentiableFunction$1#value(double)",
        "org.apache.commons.math3.analysis.function.Tan#value(double)",
        "org.apache.commons.math3.distribution.AbstractRealDistribution#inverseCumulativeProbability(double)$UnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.FunctionUtils.add(DifferentiableUnivariateFunction[]...)$DifferentiableUnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.function.Ceil#value(double)",
        "org.apache.commons.math3.analysis.function.Logistic#value(double)",
        "org.apache.commons.math3.analysis.function.Signum#value(double)",
        "org.apache.commons.math3.analysis.function.Constant#value(double)",
        "org.apache.commons.math3.analysis.function.Atanh#value(double)",
        "org.apache.commons.math3.analysis.FunctionUtils.compose(DifferentiableUnivariateFunction[]...)$UnivariateFunction$1$UnivariateFunction$1#derivative()$UnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.FunctionUtils.add(UnivariateDifferentiableFunction[]...)$UnivariateDifferentiableFunction$1#value(double)",
        "org.apache.commons.math3.analysis.function.Abs#value(double)",
        "org.apache.commons.math3.analysis.differentiation.FiniteDifferencesDifferentiator#differentiate(UnivariateFunction)$UnivariateDifferentiableFunction$1#value(double)",
        "org.apache.commons.math3.analysis.function.Identity#value(double)",
        "org.apache.commons.math3.analysis.function.Expm1#value(double)",
        "org.apache.commons.math3.util.Incrementor.wrap(Incrementor)$Incrementor$1#incrementCount()",
        "org.apache.commons.math3.analysis.function.Logit#value(double)",
        "org.apache.commons.math3.analysis.function.Log1p#value(double)",
        "org.apache.commons.math3.analysis.FunctionUtils.fix2ndArgument(BivariateFunction,double)$UnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.FunctionUtils.toUnivariateDifferential(DifferentiableUnivariateFunction)$UnivariateDifferentiableFunction$1#value(double)",
        "org.apache.commons.math3.analysis.FunctionUtils.toDifferentiableUnivariateFunction(UnivariateDifferentiableFunction)$UnivariateFunction$1$UnivariateFunction$1#derivative()$UnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.polynomials.PolynomialFunction#value(double)",
        "org.apache.commons.math3.analysis.function.Rint#value(double)",
        "org.apache.commons.math3.analysis.FunctionUtils.compose(UnivariateFunction[]...)$UnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.function.Cosh#value(double)",
        "org.apache.commons.math3.optimization.direct.PowellOptimizer.LineSearch#search(double[],double[])$UnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.FunctionUtils.compose(DifferentiableUnivariateFunction[]...)$DifferentiableUnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.function.Acosh#value(double)",
        "org.apache.commons.math3.analysis.function.StepFunction#value(double)",
        "org.apache.commons.math3.analysis.FunctionUtils.compose(UnivariateDifferentiableFunction[]...)$UnivariateDifferentiableFunction$1#value(double)",
        "org.apache.commons.math3.analysis.function.Acos#value(double)",
        "org.apache.commons.math3.analysis.function.Power#value(double)",
        "org.apache.commons.math3.util.Incrementor#incrementCount()",
        "org.apache.commons.math3.optim.nonlinear.scalar.LineSearch#search(double[],double[])$UnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.function.Sigmoid#value(double)",
        "org.apache.commons.math3.analysis.function.Ulp#value(double)"
    ],
    "org.apache.commons.math3.stat.regression.GLSMultipleLinearRegression#newCovarianceData(double[][])": ["org.apache.commons.math3.linear.Array2DRowRealMatrix#Array2DRowRealMatrix(double[][])"],
    "org.apache.commons.math3.analysis.solvers.AbstractPolynomialSolver#AbstractPolynomialSolver(double)": [
        "org.apache.commons.math3.analysis.solvers.AbstractPolynomialSolver.<init>()",
        "org.apache.commons.math3.analysis.solvers.BaseAbstractUnivariateSolver#BaseAbstractUnivariateSolver(double)"
    ],
    "org.apache.commons.math3.geometry.partitioning.Characterization#touchOutside()": [
        "org.apache.commons.math3.geometry.spherical.oned.SubLimitAngle#isEmpty()",
        "org.apache.commons.math3.geometry.euclidean.oned.SubOrientedPoint#isEmpty()",
        "org.apache.commons.math3.geometry.partitioning.AbstractSubHyperplane#isEmpty()"
    ],
    "org.apache.commons.math3.geometry.euclidean.oned.Vector1D#add(double,Vector<Euclidean1D>)": [
        "org.apache.commons.math3.geometry.euclidean.oned.Vector1D#Vector1D(double)",
        "org.apache.commons.math3.geometry.euclidean.oned.Vector1D#getX()"
    ],
    "org.apache.commons.math3.optimization.direct.BaseAbstractMultivariateVectorOptimizer#parseOptimizationData(OptimizationData[]...)": [
        "org.apache.commons.math3.optimization.InitialGuess#getInitialGuess()",
        "org.apache.commons.math3.optimization.Weight#getWeight()",
        "org.apache.commons.math3.optimization.Target#getTarget()"
    ],
    "org.apache.commons.math3.ode.nonstiff.AdamsBashforthFieldIntegrator#errorEstimation(T extends RealFieldElement[],T extends RealFieldElement[],T extends RealFieldElement[],FieldMatrix<T extends RealFieldElement>)": [
        "org.apache.commons.math3.linear.SparseFieldMatrix#getEntry(int,int)",
        "org.apache.commons.math3.ode.AbstractFieldIntegrator#getField()",
        "org.apache.commons.math3.analysis.differentiation.SparseGradient#multiply(double)",
        "org.apache.commons.math3.dfp.Dfp#multiply(double)",
        "org.apache.commons.math3.linear.SparseFieldMatrix#getRowDimension()",
        "org.apache.commons.math3.util.BigRealField#getZero()",
        "org.apache.commons.math3.analysis.differentiation.SparseGradient#getField()$Field$1#getZero()",
        "org.apache.commons.math3.util.Decimal64Field#getZero()",
        "org.apache.commons.math3.linear.OpenMapRealMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.DiagonalMatrix#getRowDimension()",
        "org.apache.commons.math3.dfp.DfpField#getZero()",
        "org.apache.commons.math3.util.Decimal64#multiply(double)",
        "org.apache.commons.math3.linear.BlockFieldMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.BlockRealMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.Array2DRowRealMatrix#getRowDimension()",
        "org.apache.commons.math3.analysis.differentiation.DerivativeStructure#getField()$Field$1#getZero()",
        "org.apache.commons.math3.fraction.FractionField#getZero()",
        "org.apache.commons.math3.linear.Array2DRowFieldMatrix#getRowDimension()",
        "org.apache.commons.math3.analysis.differentiation.DerivativeStructure#multiply(double)",
        "org.apache.commons.math3.complex.ComplexField#getZero()",
        "org.apache.commons.math3.linear.Array2DRowFieldMatrix#getEntry(int,int)",
        "org.apache.commons.math3.fraction.BigFractionField#getZero()",
        "org.apache.commons.math3.linear.BlockFieldMatrix#getEntry(int,int)"
    ],
    "org.apache.commons.math3.stat.Frequency#getCumPct(long)": ["org.apache.commons.math3.stat.Frequency#getCumPct(long)"],
    "org.apache.commons.math3.random.ISAACRandom.<init>()": ["org.apache.commons.math3.random.ISAACRandom.<staticinit>()"],
    "org.apache.commons.math3.random.RandomAdaptor#nextLong()": [
        "org.apache.commons.math3.random.BitsStreamGenerator#nextLong()",
        "org.apache.commons.math3.random.RandomGeneratorFactory.createRandomGenerator(Random)$RandomGenerator$1#nextLong()",
        "org.apache.commons.math3.random.AbstractRandomGenerator#nextLong()",
        "org.apache.commons.math3.random.RandomAdaptor#nextLong()",
        "org.apache.commons.math3.random.SynchronizedRandomGenerator#nextLong()"
    ],
    "org.apache.commons.math3.ode.nonstiff.EmbeddedRungeKuttaIntegrator#integrate(ExpandableStatefulODE,double)": [
        "org.apache.commons.math3.ode.nonstiff.AdaptiveStepsizeIntegrator#filterStep(double,boolean,boolean)",
        "org.apache.commons.math3.util.FastMath.max(double,double)",
        "org.apache.commons.math3.ode.ExpandableStatefulODE#getTime()",
        "org.apache.commons.math3.ode.nonstiff.DormandPrince54StepInterpolator#storeTime(double)",
        "org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator#storeTime(double)",
        "org.apache.commons.math3.ode.nonstiff.RungeKuttaStepInterpolator#shift()",
        "org.apache.commons.math3.util.FastMath.min(double,double)",
        "org.apache.commons.math3.ode.nonstiff.DormandPrince54Integrator#estimateError(double[][],double[],double[],double)",
        "org.apache.commons.math3.ode.ExpandableStatefulODE#getPrimaryMapper()",
        "org.apache.commons.math3.ode.nonstiff.DormandPrince54Integrator#getOrder()",
        "org.apache.commons.math3.ode.ExpandableStatefulODE#getSecondaryMappers()",
        "org.apache.commons.math3.util.FastMath.abs(double)",
        "org.apache.commons.math3.ode.AbstractIntegrator#initIntegration(double,double[],double)",
        "org.apache.commons.math3.ode.sampling.AbstractStepInterpolator#storeTime(double)",
        "org.apache.commons.math3.ode.sampling.AbstractStepInterpolator#copy()",
        "org.apache.commons.math3.ode.ExpandableStatefulODE#getCompleteState()",
        "org.apache.commons.math3.ode.ExpandableStatefulODE#setTime(double)",
        "org.apache.commons.math3.ode.nonstiff.HighamHall54Integrator#estimateError(double[][],double[],double[],double)",
        "org.apache.commons.math3.ode.AbstractIntegrator#setEquations(ExpandableStatefulODE)",
        "org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator#reinitialize(AbstractIntegrator,double[],double[][],boolean,EquationsMapper,EquationsMapper[])",
        "org.apache.commons.math3.ode.nonstiff.AdaptiveStepsizeIntegrator#initializeStep(boolean,int,double[],double,double[],double[],double[],double[])",
        "org.apache.commons.math3.ode.ExpandableStatefulODE#setCompleteState(double[])",
        "org.apache.commons.math3.ode.nonstiff.RungeKuttaStepInterpolator#reinitialize(AbstractIntegrator,double[],double[][],boolean,EquationsMapper,EquationsMapper[])",
        "org.apache.commons.math3.util.FastMath.pow(double,double)",
        "org.apache.commons.math3.ode.nonstiff.DormandPrince853Integrator#estimateError(double[][],double[],double[],double)",
        "org.apache.commons.math3.ode.AbstractIntegrator#computeDerivatives(double,double[],double[])",
        "org.apache.commons.math3.ode.AbstractIntegrator#acceptStep(AbstractStepInterpolator,double[],double[],double)",
        "org.apache.commons.math3.ode.nonstiff.AdaptiveStepsizeIntegrator#resetInternalState()",
        "org.apache.commons.math3.ode.nonstiff.HighamHall54Integrator#getOrder()",
        "org.apache.commons.math3.ode.nonstiff.DormandPrince54StepInterpolator#reinitialize(AbstractIntegrator,double[],double[][],boolean,EquationsMapper,EquationsMapper[])",
        "org.apache.commons.math3.ode.nonstiff.AdaptiveStepsizeIntegrator#sanityChecks(ExpandableStatefulODE,double)",
        "org.apache.commons.math3.ode.nonstiff.DormandPrince853Integrator#getOrder()"
    ],
    "org.apache.commons.math3.linear.MatrixUtils.createRealVector(double[])": [
        "org.apache.commons.math3.linear.ArrayRealVector#ArrayRealVector(double[],boolean)",
        "org.apache.commons.math3.exception.NullArgumentException#NullArgumentException()"
    ],
    "org.apache.commons.math3.userguide.sofm.ChineseRingsClassifier#createIterable()$Iterator$1$Iterator$1#iterator()$Iterator$1#remove()": ["org.apache.commons.math3.exception.MathUnsupportedOperationException#MathUnsupportedOperationException()"],
    "org.apache.commons.math3.ode.ContinuousOutputFieldModel#append(ContinuousOutputFieldModel<T extends RealFieldElement>)": [
        "org.apache.commons.math3.ode.sampling.AbstractFieldStepInterpolator#getPreviousState()",
        "org.apache.commons.math3.ode.ContinuousOutputFieldModel#checkDimensionsEquality(int,int)",
        "org.apache.commons.math3.ode.FieldODEState#getNumberOfSecondaryStates()",
        "org.apache.commons.math3.exception.util.LocalizedFormats.<staticinit>()",
        "org.apache.commons.math3.ode.ContinuousOutputFieldModel#getInitialTime()",
        "org.apache.commons.math3.ode.sampling.AbstractFieldStepInterpolator#getCurrentState()",
        "org.apache.commons.math3.ode.FieldODEState#getTime()",
        "org.apache.commons.math3.ode.FieldODEState#getSecondaryStateDimension(int)",
        "org.apache.commons.math3.ode.FieldODEState#getStateDimension()"
    ],
    "org.apache.commons.math3.optimization.fitting.HarmonicFitter.ParameterGuesser#guessPhi(WeightedObservedPoint[])": [
        "org.apache.commons.math3.util.FastMath.sin(double)",
        "org.apache.commons.math3.optimization.fitting.WeightedObservedPoint#getY()",
        "org.apache.commons.math3.optimization.fitting.WeightedObservedPoint#getX()",
        "org.apache.commons.math3.util.FastMath.atan2(double,double)",
        "org.apache.commons.math3.util.FastMath.cos(double)"
    ],
    "org.apache.commons.math3.stat.descriptive.DescriptiveStatistics.<init>()": [
        "org.apache.commons.math3.stat.descriptive.summary.Sum#Sum()",
        "org.apache.commons.math3.stat.descriptive.moment.Variance#Variance()",
        "org.apache.commons.math3.stat.descriptive.rank.Max#Max()",
        "org.apache.commons.math3.stat.descriptive.summary.SumOfSquares#SumOfSquares()",
        "org.apache.commons.math3.stat.descriptive.DescriptiveStatistics.<staticinit>()",
        "org.apache.commons.math3.stat.descriptive.moment.Kurtosis#Kurtosis()",
        "org.apache.commons.math3.stat.descriptive.rank.Percentile#Percentile()",
        "org.apache.commons.math3.stat.descriptive.rank.Min#Min()",
        "org.apache.commons.math3.stat.descriptive.moment.Mean#Mean()",
        "org.apache.commons.math3.util.ResizableDoubleArray#ResizableDoubleArray()",
        "org.apache.commons.math3.stat.descriptive.moment.Skewness#Skewness()",
        "org.apache.commons.math3.stat.descriptive.moment.GeometricMean#GeometricMean()"
    ],
    "org.apache.commons.math3.stat.descriptive.rank.Median#Median(Median)": [
        "org.apache.commons.math3.stat.descriptive.rank.Median.<init>()",
        "org.apache.commons.math3.stat.descriptive.rank.Percentile#Percentile(Percentile)"
    ],
    "org.apache.commons.math3.stat.descriptive.rank.Percentile#evaluate(double)": [
        "org.apache.commons.math3.stat.descriptive.AbstractUnivariateStatistic#getDataRef()",
        "org.apache.commons.math3.stat.descriptive.rank.Percentile#evaluate(double[],double)"
    ],
    "org.apache.commons.math3.optim.linear.LinearOptimizer#optimize(OptimizationData[]...)": ["org.apache.commons.math3.optim.nonlinear.scalar.MultivariateOptimizer#optimize(OptimizationData[]...)"],
    "org.apache.commons.math3.util.MathArrays.checkRectangular(long[][])": [
        "org.apache.commons.math3.exception.DimensionMismatchException#DimensionMismatchException(Localizable,int,int)",
        "org.apache.commons.math3.util.MathUtils.checkNotNull(Object)",
        "org.apache.commons.math3.exception.util.LocalizedFormats.<staticinit>()"
    ],
    "org.apache.commons.math3.linear.ArrayFieldVector#ArrayFieldVector(FieldVector<T extends FieldElement>,T extends FieldElement[])": [
        "org.apache.commons.math3.util.MathUtils.checkNotNull(Object)",
        "org.apache.commons.math3.linear.SparseFieldVector#getField()",
        "org.apache.commons.math3.linear.ArrayFieldVector#toArray()",
        "org.apache.commons.math3.linear.ArrayFieldVector.<init>()",
        "org.apache.commons.math3.linear.ArrayFieldVector#getField()",
        "org.apache.commons.math3.linear.SparseFieldVector#toArray()",
        "org.apache.commons.math3.util.MathArrays.buildArray(Field<T>,int)"
    ],
    "org.apache.commons.math3.ode.nonstiff.DormandPrince54FieldIntegrator#getC()": [
        "org.apache.commons.math3.ode.AbstractFieldIntegrator#getField()",
        "org.apache.commons.math3.fraction.BigFractionField#getOne()",
        "org.apache.commons.math3.fraction.FractionField#getOne()",
        "org.apache.commons.math3.analysis.differentiation.SparseGradient#getField()$Field$1#getOne()",
        "org.apache.commons.math3.ode.nonstiff.EmbeddedRungeKuttaFieldIntegrator#fraction(int,int)",
        "org.apache.commons.math3.dfp.DfpField#getOne()",
        "org.apache.commons.math3.util.MathArrays.buildArray(Field<T>,int)",
        "org.apache.commons.math3.analysis.differentiation.DerivativeStructure#getField()$Field$1#getOne()",
        "org.apache.commons.math3.util.Decimal64Field#getOne()",
        "org.apache.commons.math3.complex.ComplexField#getOne()",
        "org.apache.commons.math3.util.BigRealField#getOne()"
    ],
    "org.apache.commons.math3.fitting.SimpleCurveFitter#withStartPoint(double[])": ["org.apache.commons.math3.fitting.SimpleCurveFitter#SimpleCurveFitter(ParametricUnivariateFunction,double[],int)"],
    "org.apache.commons.math3.analysis.solvers.RegulaFalsiSolver#RegulaFalsiSolver()": [
        "org.apache.commons.math3.analysis.solvers.BaseSecantSolver.Method.<staticinit>()",
        "org.apache.commons.math3.analysis.solvers.BaseSecantSolver.<staticinit>()",
        "org.apache.commons.math3.analysis.solvers.RegulaFalsiSolver.<init>()",
        "org.apache.commons.math3.analysis.solvers.BaseSecantSolver#BaseSecantSolver(double,Method)"
    ],
    "org.apache.commons.math3.fitting.leastsquares.LeastSquaresBuilder#build()": ["org.apache.commons.math3.fitting.leastsquares.LeastSquaresFactory.create(MultivariateJacobianFunction,RealVector,RealVector,RealMatrix,ConvergenceChecker<Evaluation>,int,int,boolean,ParameterValidator)"],
    "org.apache.commons.math3.stat.clustering.KMeansPlusPlusClusterer#getFarthestPoint(Collection<Cluster<T extends Clusterable>>)": [
        "org.apache.commons.math3.stat.clustering.Cluster#getPoints()",
        "org.apache.commons.math3.stat.clustering.Cluster#getCenter()",
        "org.apache.commons.math3.exception.util.LocalizedFormats.<staticinit>()"
    ],
    "org.apache.commons.math3.dfp.Dfp#cos()": ["org.apache.commons.math3.dfp.DfpMath.cos(Dfp)"],
    "org.apache.commons.math3.complex.Complex#add(double)": [
        "org.apache.commons.math3.complex.Complex.<staticinit>()",
        "org.apache.commons.math3.complex.Complex#createComplex(double,double)"
    ],
    "org.apache.commons.math3.util.FastMathCalc.split(double,double[])": ["org.apache.commons.math3.util.FastMathCalc.<staticinit>()"],
    "org.apache.commons.math3.geometry.euclidean.threed.Vector3D#Vector3D(double,Vector3D,double,Vector3D,double,Vector3D,double,Vector3D)": [
        "org.apache.commons.math3.util.MathArrays.linearCombination(double,double,double,double,double,double,double,double)",
        "org.apache.commons.math3.geometry.euclidean.threed.Vector3D.<init>()"
    ],
    "org.apache.commons.math3.analysis.interpolation.LoessInterpolator#LoessInterpolator()": [
        "org.apache.commons.math3.analysis.interpolation.LoessInterpolator.<staticinit>()",
        "org.apache.commons.math3.analysis.interpolation.LoessInterpolator.<init>()"
    ],
    "org.apache.commons.math3.analysis.polynomials.PolynomialSplineFunction#PolynomialSplineFunction(double[],PolynomialFunction[])": [
        "org.apache.commons.math3.exception.DimensionMismatchException#DimensionMismatchException(int,int)",
        "org.apache.commons.math3.analysis.polynomials.PolynomialSplineFunction.<init>()",
        "org.apache.commons.math3.exception.NullArgumentException#NullArgumentException()",
        "org.apache.commons.math3.util.MathArrays.checkOrder(double[])",
        "org.apache.commons.math3.exception.util.LocalizedFormats.<staticinit>()"
    ],
    "org.apache.commons.math3.ode.nonstiff.AdamsFieldIntegrator#initializeHighOrderDerivatives(T extends RealFieldElement,T extends RealFieldElement[],T extends RealFieldElement[][],T extends RealFieldElement[][])": ["org.apache.commons.math3.ode.nonstiff.AdamsNordsieckFieldTransformer#initializeHighOrderDerivatives(T extends RealFieldElement,T extends RealFieldElement[],T extends RealFieldElement[][],T extends RealFieldElement[][])"],
    "org.apache.commons.math3.geometry.euclidean.threed.SubPlane#buildNew(Hyperplane<Euclidean3D>,Region<Euclidean2D>)": ["org.apache.commons.math3.geometry.euclidean.threed.SubPlane#SubPlane(Hyperplane<Euclidean3D>,Region<Euclidean2D>)"],
    "org.apache.commons.math3.linear.RealVector#projection(RealVector)": [
        "org.apache.commons.math3.linear.RealVector#dotProduct(RealVector)",
        "org.apache.commons.math3.linear.RealVector#mapMultiply(double)",
        "org.apache.commons.math3.linear.RealVector.unmodifiableRealVector(RealVector)$RealVector$1#dotProduct(RealVector)",
        "org.apache.commons.math3.linear.RealVector.unmodifiableRealVector(RealVector)$RealVector$1#mapMultiply(double)",
        "org.apache.commons.math3.exception.util.LocalizedFormats.<staticinit>()",
        "org.apache.commons.math3.linear.ArrayRealVector#dotProduct(RealVector)"
    ],
    "org.apache.commons.math3.fraction.Fraction#negate()": [
        "org.apache.commons.math3.fraction.Fraction#Fraction(int,int)",
        "org.apache.commons.math3.exception.util.LocalizedFormats.<staticinit>()"
    ],
    "org.apache.commons.math3.fraction.BigFraction#multiply(BigInteger)": [
        "org.apache.commons.math3.exception.NullArgumentException#NullArgumentException()",
        "org.apache.commons.math3.fraction.BigFraction#BigFraction(BigInteger,BigInteger)",
        "org.apache.commons.math3.fraction.BigFraction.<staticinit>()"
    ],
    "org.apache.commons.math3.distribution.HypergeometricDistribution#getSupportUpperBound()": [
        "org.apache.commons.math3.util.FastMath.min(int,int)",
        "org.apache.commons.math3.distribution.HypergeometricDistribution#getSampleSize()",
        "org.apache.commons.math3.distribution.HypergeometricDistribution#getNumberOfSuccesses()"
    ],
    "org.apache.commons.math3.util.Decimal64#acos()": [
        "org.apache.commons.math3.util.FastMath.acos(double)",
        "org.apache.commons.math3.util.Decimal64#Decimal64(double)"
    ],
    "org.apache.commons.math3.linear.AbstractFieldMatrix.buildArray(Field<T extends FieldElement>,int)": ["org.apache.commons.math3.util.MathArrays.buildArray(Field<T>,int)"],
    "org.apache.commons.math3.linear.SingularValueDecomposition#getS()": ["org.apache.commons.math3.linear.MatrixUtils.createRealDiagonalMatrix(double[])"],
    "org.apache.commons.math3.distribution.fitting.MultivariateNormalMixtureExpectationMaximization#MultivariateNormalMixtureExpectationMaximization(double[][])": [
        "org.apache.commons.math3.exception.DimensionMismatchException#DimensionMismatchException(int,int)",
        "org.apache.commons.math3.util.MathArrays.copyOf(double[],int)",
        "org.apache.commons.math3.distribution.fitting.MultivariateNormalMixtureExpectationMaximization.<init>()",
        "org.apache.commons.math3.exception.util.LocalizedFormats.<staticinit>()"
    ],
    "org.apache.commons.math3.ode.nonstiff.AdamsMoultonFieldIntegrator#integrate(FieldExpandableODE<T extends RealFieldElement>,FieldODEState<T extends RealFieldElement>,T extends RealFieldElement)": [
        "org.apache.commons.math3.ode.AbstractFieldIntegrator#acceptStep(AbstractFieldStepInterpolator<T extends RealFieldElement>,T extends RealFieldElement)",
        "org.apache.commons.math3.util.BigRealField#getZero()",
        "org.apache.commons.math3.ode.FieldEquationsMapper#mapState(FieldODEState<T extends RealFieldElement>)",
        "org.apache.commons.math3.ode.AbstractFieldIntegrator#getStepStart()",
        "org.apache.commons.math3.ode.nonstiff.AdamsFieldStepInterpolator#AdamsFieldStepInterpolator(T extends RealFieldElement,FieldODEStateAndDerivative<T extends RealFieldElement>,T extends RealFieldElement[],Array2DRowFieldMatrix<T extends RealFieldElement>,boolean,FieldODEStateAndDerivative<T extends RealFieldElement>,FieldODEStateAndDerivative<T extends RealFieldElement>,FieldEquationsMapper<T extends RealFieldElement>)",
        "org.apache.commons.math3.ode.AbstractFieldIntegrator#setStepSize(T extends RealFieldElement)",
        "org.apache.commons.math3.dfp.DfpField#getZero()",
        "org.apache.commons.math3.linear.AbstractFieldMatrix#walkInOptimizedOrder(FieldMatrixPreservingVisitor<T extends FieldElement>)",
        "org.apache.commons.math3.ode.FieldODEState#getTime()",
        "org.apache.commons.math3.ode.nonstiff.AdaptiveStepsizeFieldIntegrator#filterStep(T extends RealFieldElement,boolean,boolean)",
        "org.apache.commons.math3.ode.nonstiff.AdamsMoultonFieldIntegrator.Corrector#Corrector(T extends RealFieldElement[],T extends RealFieldElement[],T extends RealFieldElement[])",
        "org.apache.commons.math3.ode.AbstractFieldIntegrator#computeDerivatives(T extends RealFieldElement,T extends RealFieldElement[])",
        "org.apache.commons.math3.fraction.FractionField#getZero()",
        "org.apache.commons.math3.ode.AbstractFieldIntegrator#isLastStep()",
        "org.apache.commons.math3.complex.ComplexField#getZero()",
        "org.apache.commons.math3.ode.nonstiff.AdaptiveStepsizeFieldIntegrator#sanityChecks(FieldODEState<T extends RealFieldElement>,T extends RealFieldElement)",
        "org.apache.commons.math3.util.MathArrays.buildArray(Field<T>,int)",
        "org.apache.commons.math3.ode.AbstractFieldIntegrator#getField()",
        "org.apache.commons.math3.ode.AbstractFieldIntegrator#initIntegration(FieldExpandableODE<T extends RealFieldElement>,T extends RealFieldElement,T extends RealFieldElement[],T extends RealFieldElement)",
        "org.apache.commons.math3.ode.nonstiff.AdamsFieldIntegrator#updateHighOrderDerivativesPhase1(Array2DRowFieldMatrix<T extends RealFieldElement>)",
        "org.apache.commons.math3.ode.AbstractFieldIntegrator#setStepStart(FieldODEStateAndDerivative<T extends RealFieldElement>)",
        "org.apache.commons.math3.analysis.differentiation.SparseGradient#getField()$Field$1#getZero()",
        "org.apache.commons.math3.util.Decimal64Field#getZero()",
        "org.apache.commons.math3.ode.FieldExpandableODE#getMapper()",
        "org.apache.commons.math3.ode.FieldODEState#getState()",
        "org.apache.commons.math3.ode.nonstiff.AdamsFieldStepInterpolator.taylor(FieldODEStateAndDerivative<S extends RealFieldElement>,S extends RealFieldElement,S extends RealFieldElement,S extends RealFieldElement[],Array2DRowFieldMatrix<S extends RealFieldElement>)",
        "org.apache.commons.math3.analysis.differentiation.SparseGradient#add(double)",
        "org.apache.commons.math3.ode.AbstractFieldIntegrator#getStepSize()",
        "org.apache.commons.math3.ode.AbstractFieldIntegrator#setIsLastStep(boolean)",
        "org.apache.commons.math3.ode.FieldODEStateAndDerivative#FieldODEStateAndDerivative(T extends RealFieldElement,T extends RealFieldElement[],T extends RealFieldElement[])",
        "org.apache.commons.math3.ode.MultistepFieldIntegrator#computeStepGrowShrinkFactor(T extends RealFieldElement)",
        "org.apache.commons.math3.ode.MultistepFieldIntegrator#start(FieldExpandableODE<T extends RealFieldElement>,FieldODEState<T extends RealFieldElement>,T extends RealFieldElement)",
        "org.apache.commons.math3.linear.BlockFieldMatrix#walkInOptimizedOrder(FieldMatrixPreservingVisitor<T extends FieldElement>)",
        "org.apache.commons.math3.analysis.differentiation.DerivativeStructure#add(double)",
        "org.apache.commons.math3.ode.MultistepFieldIntegrator#rescale(T extends RealFieldElement)",
        "org.apache.commons.math3.analysis.differentiation.DerivativeStructure#getField()$Field$1#getZero()",
        "org.apache.commons.math3.ode.nonstiff.AdamsFieldIntegrator#updateHighOrderDerivativesPhase2(T extends RealFieldElement[],T extends RealFieldElement[],Array2DRowFieldMatrix<T extends RealFieldElement>)",
        "org.apache.commons.math3.fraction.BigFractionField#getZero()",
        "org.apache.commons.math3.ode.AbstractFieldIntegrator#resetOccurred()",
        "org.apache.commons.math3.util.Decimal64#add(double)",
        "org.apache.commons.math3.dfp.Dfp#add(double)"
    ],
    "org.apache.commons.math3.ode.sampling.FieldStepNormalizer#doNormalizedStep(boolean)": [
        "org.apache.commons.math3.ode.FieldODEState#getTime()",
        "org.apache.commons.math3.ode.sampling.StepNormalizerBounds#firstIncluded()"
    ],
    "org.apache.commons.math3.analysis.function.Sigmoid.Parametric#value(double,double[]...)": [
        "org.apache.commons.math3.analysis.function.Sigmoid.value(double,double,double)",
        "org.apache.commons.math3.analysis.function.Sigmoid.Parametric#validateParameters(double[])"
    ],
    "org.apache.commons.math3.geometry.euclidean.twod.Line#Line(Vector2D,Vector2D,double)": [
        "org.apache.commons.math3.geometry.euclidean.twod.Line.<init>()",
        "org.apache.commons.math3.geometry.euclidean.twod.Line#reset(Vector2D,Vector2D)"
    ],
    "org.apache.commons.math3.stat.descriptive.DescriptiveStatistics#getPopulationVariance()": [
        "org.apache.commons.math3.stat.descriptive.moment.Variance#Variance(boolean)",
        "org.apache.commons.math3.stat.descriptive.DescriptiveStatistics#apply(UnivariateStatistic)",
        "org.apache.commons.math3.stat.descriptive.SynchronizedDescriptiveStatistics#apply(UnivariateStatistic)"
    ],
    "org.apache.commons.math3.complex.Complex#divide(double)": [
        "org.apache.commons.math3.complex.Complex.<staticinit>()",
        "org.apache.commons.math3.complex.Complex#isInfinite()",
        "org.apache.commons.math3.complex.Complex#createComplex(double,double)"
    ],
    "org.apache.commons.math3.optimization.direct.CMAESOptimizer.Sigma#Sigma(double[])": ["org.apache.commons.math3.optimization.direct.CMAESOptimizer.Sigma.<init>()"],
    "org.apache.commons.math3.ml.neuralnet.twod.NeuronSquareMesh2D#getNeuron(int,int)": ["org.apache.commons.math3.ml.neuralnet.Network#getNeuron(long)"],
    "org.apache.commons.math3.distribution.TDistribution#logDensity(double)": ["org.apache.commons.math3.util.FastMath.log(double)"],
    "org.apache.commons.math3.optim.BaseOptimizer#getEvaluations()": ["org.apache.commons.math3.util.Incrementor#getCount()"],
    "org.apache.commons.math3.linear.AbstractFieldMatrix#walkInOptimizedOrder(FieldMatrixPreservingVisitor<T extends FieldElement>)": [
        "org.apache.commons.math3.linear.BlockFieldMatrix#walkInRowOrder(FieldMatrixPreservingVisitor<T extends FieldElement>)",
        "org.apache.commons.math3.linear.Array2DRowFieldMatrix#walkInRowOrder(FieldMatrixPreservingVisitor<T extends FieldElement>)",
        "org.apache.commons.math3.linear.AbstractFieldMatrix#walkInRowOrder(FieldMatrixPreservingVisitor<T extends FieldElement>)"
    ],
    "org.apache.commons.math3.random.HaltonSequenceGenerator#skipTo(int)": ["org.apache.commons.math3.random.HaltonSequenceGenerator#nextVector()"],
    "org.apache.commons.math3.stat.inference.BinomialTest#binomialTest(int,int,double,AlternativeHypothesis,double)": ["org.apache.commons.math3.stat.inference.BinomialTest#binomialTest(int,int,double,AlternativeHypothesis)"],
    "org.apache.commons.math3.stat.regression.AbstractMultipleLinearRegression#newSampleData(double[],int,int)": [
        "org.apache.commons.math3.exception.DimensionMismatchException#DimensionMismatchException(int,int)",
        "org.apache.commons.math3.linear.ArrayRealVector#ArrayRealVector(double[])",
        "org.apache.commons.math3.exception.NullArgumentException#NullArgumentException()",
        "org.apache.commons.math3.exception.util.LocalizedFormats.<staticinit>()",
        "org.apache.commons.math3.linear.Array2DRowRealMatrix#Array2DRowRealMatrix(double[][])"
    ],
    "org.apache.commons.math3.distribution.UniformRealDistribution#sample()": [
        "org.apache.commons.math3.random.SynchronizedRandomGenerator#nextDouble()",
        "org.apache.commons.math3.random.RandomGeneratorFactory.createRandomGenerator(Random)$RandomGenerator$1#nextDouble()",
        "org.apache.commons.math3.random.RandomAdaptor#nextDouble()",
        "org.apache.commons.math3.random.BitsStreamGenerator#nextDouble()"
    ],
    "org.apache.commons.math3.complex.ComplexField.LazyHolder.<staticinit>()": ["org.apache.commons.math3.complex.ComplexField#ComplexField()"],
    "org.apache.commons.math3.stat.descriptive.SummaryStatistics#getGeometricMean()": [
        "org.apache.commons.math3.stat.descriptive.moment.FirstMoment#getResult()",
        "org.apache.commons.math3.stat.descriptive.rank.Min#getResult()",
        "org.apache.commons.math3.stat.descriptive.moment.GeometricMean#getResult()",
        "org.apache.commons.math3.stat.descriptive.moment.Variance#getResult()",
        "org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile#getResult()",
        "org.apache.commons.math3.stat.descriptive.summary.Sum#getResult()",
        "org.apache.commons.math3.stat.descriptive.moment.FourthMoment#getResult()",
        "org.apache.commons.math3.stat.descriptive.moment.StandardDeviation#getResult()",
        "org.apache.commons.math3.stat.descriptive.summary.SumOfLogs#getResult()",
        "org.apache.commons.math3.stat.descriptive.summary.Product#getResult()",
        "org.apache.commons.math3.stat.descriptive.summary.SumOfSquares#getResult()",
        "org.apache.commons.math3.stat.descriptive.moment.Skewness#getResult()",
        "org.apache.commons.math3.stat.descriptive.moment.Kurtosis#getResult()",
        "org.apache.commons.math3.stat.descriptive.rank.Max#getResult()",
        "org.apache.commons.math3.stat.descriptive.moment.SecondMoment#getResult()",
        "org.apache.commons.math3.stat.descriptive.moment.ThirdMoment#getResult()",
        "org.apache.commons.math3.stat.descriptive.moment.Mean#getResult()"
    ],
    "org.apache.commons.math3.random.SynchronizedRandomGenerator#setSeed(int)": [
        "org.apache.commons.math3.random.RandomGeneratorFactory.createRandomGenerator(Random)$RandomGenerator$1#setSeed(int)",
        "org.apache.commons.math3.random.ISAACRandom#setSeed(int)",
        "org.apache.commons.math3.random.AbstractWell#setSeed(int)",
        "org.apache.commons.math3.random.JDKRandomGenerator#setSeed(int)",
        "org.apache.commons.math3.random.MersenneTwister#setSeed(int)",
        "org.apache.commons.math3.random.RandomAdaptor#setSeed(int)",
        "org.apache.commons.math3.random.AbstractRandomGenerator#setSeed(int)",
        "org.apache.commons.math3.random.SynchronizedRandomGenerator#setSeed(int)"
    ],
    "org.apache.commons.math3.transform.FastFourierTransformer#transform(UnivariateFunction,double,double,int,TransformType)": [
        "org.apache.commons.math3.transform.FastFourierTransformer#transform(double[],TransformType)",
        "org.apache.commons.math3.analysis.FunctionUtils.sample(UnivariateFunction,double,double,int)"
    ],
    "org.apache.commons.math3.stat.regression.MillerUpdatingRegression#getPartialCorrelations(int)": ["org.apache.commons.math3.util.FastMath.sqrt(double)"],
    "org.apache.commons.math3.ml.clustering.KMeansPlusPlusClusterer#KMeansPlusPlusClusterer(int,int)": [
        "org.apache.commons.math3.ml.distance.EuclideanDistance.<init>()",
        "org.apache.commons.math3.ml.clustering.KMeansPlusPlusClusterer#KMeansPlusPlusClusterer(int,int,DistanceMeasure)"
    ],
    "org.apache.commons.math3.ode.nonstiff.EmbeddedRungeKuttaFieldIntegrator#EmbeddedRungeKuttaFieldIntegrator(Field<T extends RealFieldElement>,String,int,double,double,double[],double[])": [
        "org.apache.commons.math3.analysis.differentiation.DerivativeStructure#divide(double)",
        "org.apache.commons.math3.util.BigRealField#getZero()",
        "org.apache.commons.math3.ode.nonstiff.DormandPrince853FieldIntegrator#getB()",
        "org.apache.commons.math3.ode.nonstiff.EulerFieldIntegrator#getC()",
        "org.apache.commons.math3.util.BigRealField#getOne()",
        "org.apache.commons.math3.ode.nonstiff.EulerFieldIntegrator#getA()",
        "org.apache.commons.math3.ode.nonstiff.LutherFieldIntegrator#getA()",
        "org.apache.commons.math3.ode.nonstiff.GillFieldIntegrator#getC()",
        "org.apache.commons.math3.fraction.FractionField#getZero()",
        "org.apache.commons.math3.ode.nonstiff.ClassicalRungeKuttaFieldIntegrator#getC()",
        "org.apache.commons.math3.ode.nonstiff.MidpointFieldIntegrator#getB()",
        "org.apache.commons.math3.complex.ComplexField#getZero()",
        "org.apache.commons.math3.util.Decimal64#divide(double)",
        "org.apache.commons.math3.ode.nonstiff.GillFieldIntegrator#getA()",
        "org.apache.commons.math3.ode.nonstiff.ClassicalRungeKuttaFieldIntegrator#getA()",
        "org.apache.commons.math3.ode.nonstiff.DormandPrince853FieldIntegrator#getOrder()",
        "org.apache.commons.math3.ode.nonstiff.HighamHall54FieldIntegrator#getA()",
        "org.apache.commons.math3.fraction.BigFractionField#getOne()",
        "org.apache.commons.math3.ode.nonstiff.HighamHall54FieldIntegrator#getC()",
        "org.apache.commons.math3.analysis.differentiation.SparseGradient#getField()$Field$1#getZero()",
        "org.apache.commons.math3.analysis.differentiation.SparseGradient#getField()$Field$1#getOne()",
        "org.apache.commons.math3.ode.nonstiff.DormandPrince54FieldIntegrator#getC()",
        "org.apache.commons.math3.analysis.differentiation.SparseGradient#add(double)",
        "org.apache.commons.math3.complex.ComplexField#getOne()",
        "org.apache.commons.math3.ode.nonstiff.DormandPrince54FieldIntegrator#getA()",
        "org.apache.commons.math3.ode.nonstiff.ThreeEighthesFieldIntegrator#getB()",
        "org.apache.commons.math3.ode.nonstiff.LutherFieldIntegrator#getC()",
        "org.apache.commons.math3.analysis.differentiation.DerivativeStructure#add(double)",
        "org.apache.commons.math3.fraction.BigFractionField#getZero()",
        "org.apache.commons.math3.dfp.DfpField#getOne()",
        "org.apache.commons.math3.analysis.differentiation.DerivativeStructure#getField()$Field$1#getOne()",
        "org.apache.commons.math3.util.Decimal64Field#getOne()",
        "org.apache.commons.math3.dfp.Dfp#add(double)",
        "org.apache.commons.math3.dfp.DfpField#getZero()",
        "org.apache.commons.math3.ode.nonstiff.EmbeddedRungeKuttaFieldIntegrator.<init>()",
        "org.apache.commons.math3.ode.nonstiff.EulerFieldIntegrator#getB()",
        "org.apache.commons.math3.ode.nonstiff.DormandPrince853FieldIntegrator#getA()",
        "org.apache.commons.math3.ode.nonstiff.LutherFieldIntegrator#getB()",
        "org.apache.commons.math3.ode.nonstiff.DormandPrince853FieldIntegrator#getC()",
        "org.apache.commons.math3.dfp.Dfp#divide(double)",
        "org.apache.commons.math3.ode.nonstiff.HighamHall54FieldIntegrator#getOrder()",
        "org.apache.commons.math3.ode.nonstiff.AdaptiveStepsizeFieldIntegrator#AdaptiveStepsizeFieldIntegrator(Field<T extends RealFieldElement>,String,double,double,double[],double[])",
        "org.apache.commons.math3.ode.nonstiff.ClassicalRungeKuttaFieldIntegrator#getB()",
        "org.apache.commons.math3.ode.nonstiff.MidpointFieldIntegrator#getC()",
        "org.apache.commons.math3.ode.nonstiff.MidpointFieldIntegrator#getA()",
        "org.apache.commons.math3.ode.nonstiff.GillFieldIntegrator#getB()",
        "org.apache.commons.math3.ode.nonstiff.HighamHall54FieldIntegrator#getB()",
        "org.apache.commons.math3.fraction.FractionField#getOne()",
        "org.apache.commons.math3.util.Decimal64Field#getZero()",
        "org.apache.commons.math3.analysis.differentiation.SparseGradient#divide(double)",
        "org.apache.commons.math3.ode.nonstiff.DormandPrince54FieldIntegrator#getOrder()",
        "org.apache.commons.math3.ode.nonstiff.DormandPrince54FieldIntegrator#getB()",
        "org.apache.commons.math3.ode.nonstiff.ThreeEighthesFieldIntegrator#getC()",
        "org.apache.commons.math3.ode.nonstiff.ThreeEighthesFieldIntegrator#getA()",
        "org.apache.commons.math3.analysis.differentiation.DerivativeStructure#getField()$Field$1#getZero()",
        "org.apache.commons.math3.util.Decimal64#add(double)"
    ],
    "org.apache.commons.math3.stat.StatUtils.min(double[],int,int)": [
        "org.apache.commons.math3.stat.descriptive.moment.Skewness#evaluate(double[],int,int)",
        "org.apache.commons.math3.stat.descriptive.moment.Variance#evaluate(double[],int,int)",
        "org.apache.commons.math3.stat.descriptive.moment.SemiVariance#evaluate(double[],int,int)",
        "org.apache.commons.math3.stat.descriptive.moment.GeometricMean#evaluate(double[],int,int)",
        "org.apache.commons.math3.stat.descriptive.summary.SumOfLogs#evaluate(double[],int,int)",
        "org.apache.commons.math3.stat.descriptive.moment.StandardDeviation#evaluate(double[],int,int)",
        "org.apache.commons.math3.stat.descriptive.summary.Sum#evaluate(double[],int,int)",
        "org.apache.commons.math3.stat.descriptive.rank.Min#evaluate(double[],int,int)",
        "org.apache.commons.math3.stat.descriptive.rank.Percentile#evaluate(double[],int,int)",
        "org.apache.commons.math3.stat.descriptive.rank.Max#evaluate(double[],int,int)",
        "org.apache.commons.math3.stat.StatUtils.<staticinit>()",
        "org.apache.commons.math3.stat.descriptive.summary.SumOfSquares#evaluate(double[],int,int)",
        "org.apache.commons.math3.stat.descriptive.moment.Mean#evaluate(double[],int,int)",
        "org.apache.commons.math3.stat.descriptive.summary.Product#evaluate(double[],int,int)",
        "org.apache.commons.math3.stat.descriptive.moment.Kurtosis#evaluate(double[],int,int)",
        "org.apache.commons.math3.stat.descriptive.AbstractStorelessUnivariateStatistic#evaluate(double[],int,int)"
    ],
    "org.apache.commons.math3.linear.RealVector.SparseEntryIterator#SparseEntryIterator()": [
        "org.apache.commons.math3.linear.RealVector.Entry#getValue()",
        "org.apache.commons.math3.linear.OpenMapRealVector#getDimension()",
        "org.apache.commons.math3.linear.RealVector.Entry#Entry()",
        "org.apache.commons.math3.linear.RealVector.unmodifiableRealVector(RealVector).UnmodifiableEntry.UnmodifiableEntry#getValue()",
        "org.apache.commons.math3.linear.ArrayRealVector#getDimension()",
        "org.apache.commons.math3.linear.OpenMapRealVector.OpenMapEntry#getValue()",
        "org.apache.commons.math3.linear.RealVector.SparseEntryIterator#advance(Entry)",
        "org.apache.commons.math3.linear.RealVector.unmodifiableRealVector(RealVector)$RealVector$1#getDimension()",
        "org.apache.commons.math3.linear.RealVector.SparseEntryIterator.<init>()"
    ],
    "org.apache.commons.math3.util.BigReal#getField()": ["org.apache.commons.math3.util.BigRealField.getInstance()"],
    "org.apache.commons.math3.geometry.spherical.oned.ArcsSet#computeGeometricalProperties()": [
        "org.apache.commons.math3.geometry.spherical.oned.S1Point.<staticinit>()",
        "org.apache.commons.math3.util.Precision.<staticinit>()",
        "org.apache.commons.math3.geometry.spherical.oned.LimitAngle#getLocation()",
        "org.apache.commons.math3.util.MathUtils.<staticinit>()",
        "org.apache.commons.math3.geometry.partitioning.BSPTree#getCut()",
        "org.apache.commons.math3.geometry.spherical.oned.S1Point#S1Point(double)",
        "org.apache.commons.math3.geometry.partitioning.AbstractRegion#getTree(boolean)",
        "org.apache.commons.math3.geometry.partitioning.AbstractRegion#setBarycenter(Point<S extends Space>)",
        "org.apache.commons.math3.geometry.partitioning.AbstractRegion#setSize(double)",
        "org.apache.commons.math3.geometry.partitioning.BSPTree#getAttribute()",
        "org.apache.commons.math3.util.Precision.equals(double,double,int)",
        "org.apache.commons.math3.geometry.partitioning.AbstractSubHyperplane#getHyperplane()"
    ],
    "org.apache.commons.math3.fitting.WeightedObservedPoints#add(double,double,double)": ["org.apache.commons.math3.fitting.WeightedObservedPoint#WeightedObservedPoint(double,double,double)"],
    "org.apache.commons.math3.stat.correlation.StorelessBivariateCovariance#StorelessBivariateCovariance()": ["org.apache.commons.math3.stat.correlation.StorelessBivariateCovariance#StorelessBivariateCovariance(boolean)"],
    "org.apache.commons.math3.distribution.EnumeratedRealDistribution#EnumeratedRealDistribution(RandomGenerator,double[])": [
        "org.apache.commons.math3.distribution.EnumeratedRealDistribution.<init>()",
        "org.apache.commons.math3.distribution.EnumeratedDistribution#EnumeratedDistribution(RandomGenerator,List<Pair<T, Double>>)",
        "org.apache.commons.math3.distribution.EnumeratedRealDistribution.createDistribution(double[],double[])",
        "org.apache.commons.math3.distribution.AbstractRealDistribution#AbstractRealDistribution(RandomGenerator)"
    ],
    "org.apache.commons.math3.ode.events.EventState#stop()": ["org.apache.commons.math3.ode.events.EventHandler.Action.<staticinit>()"],
    "org.apache.commons.math3.dfp.Dfp#ceil()": [
        "org.apache.commons.math3.dfp.Dfp#trunc(RoundingMode)",
        "org.apache.commons.math3.dfp.DfpField.RoundingMode.<staticinit>()"
    ],
    "org.apache.commons.math3.geometry.enclosing.WelzlEncloser#pivotingBall(Iterable<P extends Point>)": [
        "org.apache.commons.math3.util.Combinations#iterator()",
        "org.apache.commons.math3.exception.MathInternalError#MathInternalError()",
        "org.apache.commons.math3.geometry.enclosing.EnclosingBall#contains(P extends Point,double)",
        "org.apache.commons.math3.geometry.spherical.oned.ArcsSet#iterator()",
        "org.apache.commons.math3.geometry.enclosing.WelzlEncloser#selectFarthest(Iterable<P extends Point>,EnclosingBall<S extends Space, P extends Point>)",
        "org.apache.commons.math3.geometry.enclosing.EnclosingBall#getRadius()",
        "org.apache.commons.math3.util.IntegerSequence.Range#iterator()",
        "org.apache.commons.math3.ml.neuralnet.twod.NeuronSquareMesh2D#iterator()",
        "org.apache.commons.math3.geometry.enclosing.EnclosingBall#getSupportSize()",
        "org.apache.commons.math3.geometry.enclosing.WelzlEncloser#moveToFrontBall(List<P extends Point>,int,List<P extends Point>)",
        "org.apache.commons.math3.genetics.ListPopulation#iterator()",
        "org.apache.commons.math3.userguide.sofm.ChineseRingsClassifier#createIterable()$Iterable$1#iterator()",
        "org.apache.commons.math3.ml.neuralnet.Network#iterator()",
        "org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet#iterator()",
        "org.apache.commons.math3.geometry.partitioning.NodesSet#iterator()"
    ],
    "org.apache.commons.math3.ode.nonstiff.DormandPrince54StepInterpolator#storeTime(double)": ["org.apache.commons.math3.ode.sampling.AbstractStepInterpolator#storeTime(double)"],
    "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.BOBYQAOptimizer#BOBYQAOptimizer(int,double,double)": [
        "org.apache.commons.math3.optim.nonlinear.scalar.MultivariateOptimizer#MultivariateOptimizer(ConvergenceChecker<PointValuePair>)",
        "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.BOBYQAOptimizer.<init>()"
    ],
    "org.apache.commons.math3.ode.nonstiff.DormandPrince853Integrator#DormandPrince853Integrator(double,double,double[],double[])": [
        "org.apache.commons.math3.ode.nonstiff.DormandPrince853Integrator.<staticinit>()",
        "org.apache.commons.math3.ode.nonstiff.DormandPrince853Integrator.<init>()",
        "org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator#DormandPrince853StepInterpolator()",
        "org.apache.commons.math3.ode.nonstiff.EmbeddedRungeKuttaIntegrator#EmbeddedRungeKuttaIntegrator(String,boolean,double[],double[][],double[],RungeKuttaStepInterpolator,double,double,double[],double[])"
    ],
    "org.apache.commons.math3.linear.ArrayRealVector#walkInDefaultOrder(RealVectorPreservingVisitor,int,int)": ["org.apache.commons.math3.linear.RealVector#checkIndices(int,int)"],
    "org.apache.commons.math3.exception.MathArithmeticException#getMessage()": ["org.apache.commons.math3.exception.util.ExceptionContext#getMessage()"],
    "org.apache.commons.math3.optimization.direct.BOBYQAOptimizer#BOBYQAOptimizer(int,double,double)": [
        "org.apache.commons.math3.optimization.direct.BOBYQAOptimizer.<init>()",
        "org.apache.commons.math3.optimization.direct.BaseAbstractMultivariateSimpleBoundsOptimizer#BaseAbstractMultivariateSimpleBoundsOptimizer(ConvergenceChecker<PointValuePair>)"
    ],
    "org.apache.commons.math3.analysis.interpolation.MicrosphereProjectionInterpolator#MicrosphereProjectionInterpolator(InterpolatingMicrosphere,double,boolean,double)": ["org.apache.commons.math3.analysis.interpolation.MicrosphereProjectionInterpolator.<init>()"],
    "org.apache.commons.math3.distribution.GumbelDistribution#GumbelDistribution(RandomGenerator,double,double)": [
        "org.apache.commons.math3.distribution.AbstractRealDistribution#AbstractRealDistribution(RandomGenerator)",
        "org.apache.commons.math3.distribution.GumbelDistribution.<init>()",
        "org.apache.commons.math3.exception.util.LocalizedFormats.<staticinit>()"
    ],
    "org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D#scalarMultiply(double)": ["org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D#FieldVector3D(T extends RealFieldElement,T extends RealFieldElement,T extends RealFieldElement)"],
    "org.apache.commons.math3.linear.ArrayFieldVector#ArrayFieldVector(FieldVector<T extends FieldElement>)": [
        "org.apache.commons.math3.linear.SparseFieldVector#getField()",
        "org.apache.commons.math3.util.MathUtils.checkNotNull(Object)",
        "org.apache.commons.math3.linear.SparseFieldVector#getEntry(int)",
        "org.apache.commons.math3.linear.ArrayFieldVector#getDimension()",
        "org.apache.commons.math3.linear.ArrayFieldVector.<init>()",
        "org.apache.commons.math3.linear.ArrayFieldVector#getField()",
        "org.apache.commons.math3.linear.ArrayFieldVector#getEntry(int)",
        "org.apache.commons.math3.linear.SparseFieldVector#getDimension()",
        "org.apache.commons.math3.util.MathArrays.buildArray(Field<T>,int)"
    ],
    "org.apache.commons.math3.linear.AbstractRealMatrix#walkInOptimizedOrder(RealMatrixChangingVisitor)": [
        "org.apache.commons.math3.linear.Array2DRowRealMatrix#walkInRowOrder(RealMatrixChangingVisitor)",
        "org.apache.commons.math3.linear.BlockRealMatrix#walkInRowOrder(RealMatrixChangingVisitor)",
        "org.apache.commons.math3.linear.AbstractRealMatrix#walkInRowOrder(RealMatrixChangingVisitor)"
    ],
    "org.apache.commons.math3.geometry.euclidean.threed.OutlineExtractor#pointIsBetween(Vector2D[],int,int)": [
        "org.apache.commons.math3.geometry.euclidean.twod.Vector2D#getY()",
        "org.apache.commons.math3.geometry.euclidean.twod.Vector2D#getX()",
        "org.apache.commons.math3.util.FastMath.abs(double)",
        "org.apache.commons.math3.util.FastMath.sqrt(double)"
    ],
    "org.apache.commons.math3.fraction.BigFraction#pow(double)": ["org.apache.commons.math3.util.FastMath.pow(double,double)"],
    "org.apache.commons.math3.stat.descriptive.SynchronizedSummaryStatistics.copy(SynchronizedSummaryStatistics,SynchronizedSummaryStatistics)": [
        "org.apache.commons.math3.stat.descriptive.SummaryStatistics.copy(SummaryStatistics,SummaryStatistics)",
        "org.apache.commons.math3.util.MathUtils.checkNotNull(Object)"
    ],
    "org.apache.commons.math3.linear.OpenMapRealVector#set(double)": ["org.apache.commons.math3.linear.OpenMapRealVector#setEntry(int,double)"],
    "org.apache.commons.math3.optimization.MultivariateDifferentiableMultiStartOptimizer#MultivariateDifferentiableMultiStartOptimizer(MultivariateDifferentiableOptimizer,int,RandomVectorGenerator)": [
        "org.apache.commons.math3.optimization.BaseMultivariateMultiStartOptimizer#BaseMultivariateMultiStartOptimizer(BaseMultivariateOptimizer<FUNC extends MultivariateFunction>,int,RandomVectorGenerator)",
        "org.apache.commons.math3.optimization.MultivariateDifferentiableMultiStartOptimizer.<init>()"
    ],
    "org.apache.commons.math3.stat.descriptive.moment.SemiVariance#evaluate(double[],double,Direction,boolean,int,int)": [
        "org.apache.commons.math3.stat.descriptive.moment.SemiVariance.Direction#getDirection()",
        "org.apache.commons.math3.stat.descriptive.AbstractUnivariateStatistic#test(double[],int,int)"
    ],
    "org.apache.commons.math3.stat.regression.MillerUpdatingRegression#regcf(int)": [
        "org.apache.commons.math3.stat.regression.MillerUpdatingRegression#tolset()",
        "org.apache.commons.math3.stat.regression.MillerUpdatingRegression#smartAdd(double,double)",
        "org.apache.commons.math3.util.FastMath.sqrt(double)",
        "org.apache.commons.math3.exception.util.LocalizedFormats.<staticinit>()"
    ],
    "org.apache.commons.math3.linear.AbstractRealMatrix#getSubMatrix(int,int,int,int)": [
        "org.apache.commons.math3.linear.Array2DRowRealMatrix#setEntry(int,int,double)",
        "org.apache.commons.math3.linear.DiagonalMatrix#getEntry(int,int)",
        "org.apache.commons.math3.linear.BlockRealMatrix#setEntry(int,int,double)",
        "org.apache.commons.math3.linear.OpenMapRealMatrix#setEntry(int,int,double)",
        "org.apache.commons.math3.linear.OpenMapRealMatrix#getEntry(int,int)",
        "org.apache.commons.math3.linear.DiagonalMatrix#createMatrix(int,int)",
        "org.apache.commons.math3.linear.BlockRealMatrix#getEntry(int,int)",
        "org.apache.commons.math3.linear.Array2DRowRealMatrix#getEntry(int,int)",
        "org.apache.commons.math3.linear.MatrixUtils.checkSubMatrixIndex(AnyMatrix,int,int,int,int)",
        "org.apache.commons.math3.linear.OpenMapRealMatrix#createMatrix(int,int)",
        "org.apache.commons.math3.linear.Array2DRowRealMatrix#createMatrix(int,int)",
        "org.apache.commons.math3.linear.DiagonalMatrix#setEntry(int,int,double)",
        "org.apache.commons.math3.linear.BlockRealMatrix#createMatrix(int,int)"
    ],
    "org.apache.commons.math3.linear.SparseFieldVector#mapInv()": [
        "org.apache.commons.math3.linear.SparseFieldVector#copy()",
        "org.apache.commons.math3.linear.SparseFieldVector#mapInvToSelf()",
        "org.apache.commons.math3.linear.ArrayFieldVector#mapInvToSelf()"
    ],
    "org.apache.commons.math3.filter.KalmanFilter#getErrorCovarianceMatrix()": [
        "org.apache.commons.math3.linear.Array2DRowRealMatrix#copy()",
        "org.apache.commons.math3.linear.BlockRealMatrix#copy()",
        "org.apache.commons.math3.linear.DiagonalMatrix#copy()",
        "org.apache.commons.math3.linear.OpenMapRealMatrix#copy()"
    ],
    "org.apache.commons.math3.analysis.solvers.BaseAbstractUnivariateSolver#verifyBracketing(double,double)": ["org.apache.commons.math3.analysis.solvers.UnivariateSolverUtils.verifyBracketing(UnivariateFunction,double,double)"],
    "org.apache.commons.math3.random.MersenneTwister#MersenneTwister(int)": [
        "org.apache.commons.math3.random.MersenneTwister.<staticinit>()",
        "org.apache.commons.math3.random.BitsStreamGenerator#BitsStreamGenerator()",
        "org.apache.commons.math3.random.MersenneTwister.<init>()",
        "org.apache.commons.math3.random.MersenneTwister#setSeed(int)"
    ],
    "org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distance1(Vector3D,Vector3D)": ["org.apache.commons.math3.geometry.euclidean.threed.Vector3D#distance1(Vector<Euclidean3D>)"],
    "org.apache.commons.math3.ode.FieldEquationsMapper#insertEquationData(int,T extends RealFieldElement[],T extends RealFieldElement[])": [
        "org.apache.commons.math3.exception.DimensionMismatchException#DimensionMismatchException(int,int)",
        "org.apache.commons.math3.ode.FieldEquationsMapper#checkIndex(int)"
    ],
    "org.apache.commons.math3.optimization.general.AbstractLeastSquaresOptimizer#computeWeightedJacobian(double[])": [
        "org.apache.commons.math3.exception.DimensionMismatchException#DimensionMismatchException(int,int)",
        "org.apache.commons.math3.linear.AbstractRealMatrix#multiply(RealMatrix)",
        "org.apache.commons.math3.linear.OpenMapRealMatrix#multiply(RealMatrix)",
        "org.apache.commons.math3.optimization.direct.BaseAbstractMultivariateVectorOptimizer#getTarget()",
        "org.apache.commons.math3.optimization.fitting.CurveFitter.TheoreticalValuesFunction#value(DerivativeStructure[])",
        "org.apache.commons.math3.analysis.FunctionUtils.toMultivariateDifferentiableVectorFunction(DifferentiableMultivariateVectorFunction)$MultivariateDifferentiableVectorFunction$1#value(DerivativeStructure[])",
        "org.apache.commons.math3.linear.MatrixUtils.createRealMatrix(double[][])",
        "org.apache.commons.math3.linear.DiagonalMatrix#multiply(RealMatrix)",
        "org.apache.commons.math3.analysis.differentiation.DerivativeStructure#DerivativeStructure(int,int,int,double)",
        "org.apache.commons.math3.linear.BlockRealMatrix#multiply(RealMatrix)",
        "org.apache.commons.math3.analysis.differentiation.DerivativeStructure#getPartialDerivative(int[]...)"
    ],
    "org.apache.commons.math3.analysis.interpolation.DividedDifferenceInterpolator#interpolate(double[],double[])": [
        "org.apache.commons.math3.analysis.polynomials.PolynomialFunctionNewtonForm#PolynomialFunctionNewtonForm(double[],double[])",
        "org.apache.commons.math3.analysis.interpolation.DividedDifferenceInterpolator.computeDividedDifference(double[],double[])",
        "org.apache.commons.math3.analysis.polynomials.PolynomialFunctionLagrangeForm.verifyInterpolationArray(double[],double[],boolean)"
    ],
    "org.apache.commons.math3.optimization.PointVectorValuePair#getValueRef()": ["org.apache.commons.math3.util.Pair#getValue()"],
    "org.apache.commons.math3.stat.regression.RegressionResults#getRegressionSumSquares()": ["org.apache.commons.math3.stat.regression.RegressionResults.<staticinit>()"],
    "org.apache.commons.math3.stat.Frequency#getPct(int)": ["org.apache.commons.math3.stat.Frequency#getPct(long)"],
    "org.apache.commons.math3.optimization.direct.NelderMeadSimplex#iterate(MultivariateFunction,Comparator<PointValuePair>)": [
        "org.apache.commons.math3.optimization.direct.AbstractSimplex#getDimension()",
        "org.apache.commons.math3.optim.nonlinear.scalar.MultivariateFunctionMappingAdapter#value(double[])",
        "org.apache.commons.math3.optimization.direct.MultivariateFunctionMappingAdapter#value(double[])",
        "org.apache.commons.math3.analysis.FunctionUtils.toMultivariateDifferentiableFunction(DifferentiableMultivariateFunction)$MultivariateDifferentiableFunction$1#value(double[])",
        "org.apache.commons.math3.analysis.FunctionUtils.toDifferentiableMultivariateFunction(MultivariateDifferentiableFunction)$DifferentiableMultivariateFunction$1#value(double[])",
        "org.apache.commons.math3.analysis.interpolation.MicrosphereProjectionInterpolator#interpolate(double[][],double[])$MultivariateFunction$1#value(double[])",
        "org.apache.commons.math3.optimization.direct.AbstractSimplex#setPoint(int,PointValuePair)",
        "org.apache.commons.math3.optimization.direct.MultivariateFunctionPenaltyAdapter#value(double[])",
        "org.apache.commons.math3.optim.nonlinear.scalar.MultivariateFunctionPenaltyAdapter#value(double[])",
        "org.apache.commons.math3.stat.correlation.KendallsCorrelation#correlation(double[],double[])$Comparator$1#compare(Pair<Double, Double>,Pair<Double, Double>)",
        "org.apache.commons.math3.optim.linear.LinearObjectiveFunction#value(double[])",
        "org.apache.commons.math3.analysis.FunctionUtils.collector(BivariateFunction,UnivariateFunction,double)$MultivariateFunction$1#value(double[])",
        "org.apache.commons.math3.optimization.PointValuePair#getPointRef()",
        "org.apache.commons.math3.optim.nonlinear.scalar.LeastSquaresConverter#value(double[])",
        "org.apache.commons.math3.optimization.direct.AbstractSimplex#replaceWorstPoint(PointValuePair,Comparator<PointValuePair>)",
        "org.apache.commons.math3.optimization.LeastSquaresConverter#value(double[])",
        "org.apache.commons.math3.optimization.direct.AbstractSimplex#getPoint(int)",
        "org.apache.commons.math3.stat.Frequency.NaturalComparator#compare(Comparable<T extends Comparable>,Comparable<T extends Comparable>)",
        "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizer#doOptimize()$MultivariateFunction$1#value(double[])",
        "org.apache.commons.math3.analysis.interpolation.MicrosphereInterpolatingFunction#value(double[])",
        "org.apache.commons.math3.optimization.direct.AbstractSimplex#evaluate(MultivariateFunction,Comparator<PointValuePair>)",
        "org.apache.commons.math3.optimization.direct.SimplexOptimizer#doOptimize()$Comparator$1#compare(PointValuePair,PointValuePair)",
        "org.apache.commons.math3.optimization.BaseMultivariateMultiStartOptimizer#sortPairs(GoalType)$Comparator$1#compare(PointValuePair,PointValuePair)",
        "org.apache.commons.math3.optimization.PointValuePair#getPoint()",
        "org.apache.commons.math3.analysis.FunctionUtils.toDifferentiableMultivariateFunction(MultivariateDifferentiableFunction)$MultivariateFunction$1$MultivariateFunction$1#partialDerivative(int)$MultivariateFunction$1#value(double[])",
        "org.apache.commons.math3.optimization.PointValuePair#PointValuePair(double[],double,boolean)",
        "org.apache.commons.math3.optimization.direct.SimplexOptimizer#doOptimize()$MultivariateFunction$1#value(double[])"
    ],
    "org.apache.commons.math3.stat.regression.MillerUpdatingRegression#addObservation(double[],double)": [
        "org.apache.commons.math3.util.MathArrays.copyOf(double[],int)",
        "org.apache.commons.math3.stat.regression.MillerUpdatingRegression#include(double[],double,double)",
        "org.apache.commons.math3.exception.util.LocalizedFormats.<staticinit>()"
    ],
    "org.apache.commons.math3.stat.StatUtils.mode(double[])": [
        "org.apache.commons.math3.exception.util.LocalizedFormats.<staticinit>()",
        "org.apache.commons.math3.stat.StatUtils.getMode(double[],int,int)"
    ],
    "org.apache.commons.math3.stat.descriptive.moment.GeometricMean#getN()": [
        "org.apache.commons.math3.stat.descriptive.moment.Variance#getN()",
        "org.apache.commons.math3.stat.descriptive.summary.Sum#getN()",
        "org.apache.commons.math3.stat.descriptive.summary.SumOfSquares#getN()",
        "org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile#getN()",
        "org.apache.commons.math3.stat.descriptive.moment.Kurtosis#getN()",
        "org.apache.commons.math3.stat.descriptive.moment.FirstMoment#getN()",
        "org.apache.commons.math3.stat.descriptive.moment.StandardDeviation#getN()",
        "org.apache.commons.math3.stat.descriptive.rank.Min#getN()",
        "org.apache.commons.math3.stat.descriptive.moment.Mean#getN()",
        "org.apache.commons.math3.stat.descriptive.summary.SumOfLogs#getN()",
        "org.apache.commons.math3.stat.descriptive.moment.Skewness#getN()",
        "org.apache.commons.math3.stat.descriptive.rank.Max#getN()",
        "org.apache.commons.math3.stat.descriptive.moment.GeometricMean#getN()",
        "org.apache.commons.math3.stat.descriptive.summary.Product#getN()"
    ],
    "org.apache.commons.math3.ode.ExpandableStatefulODE#setPrimaryState(double[])": ["org.apache.commons.math3.exception.DimensionMismatchException#DimensionMismatchException(int,int)"],
    "org.apache.commons.math3.linear.OpenMapRealMatrix#multiplyEntry(int,int,double)": [
        "org.apache.commons.math3.util.OpenIntToDoubleHashMap#remove(int)",
        "org.apache.commons.math3.util.OpenIntToDoubleHashMap#put(int,double)",
        "org.apache.commons.math3.util.OpenIntToDoubleHashMap#get(int)",
        "org.apache.commons.math3.linear.OpenMapRealMatrix#computeKey(int,int)",
        "org.apache.commons.math3.linear.MatrixUtils.checkRowIndex(AnyMatrix,int)",
        "org.apache.commons.math3.linear.MatrixUtils.checkColumnIndex(AnyMatrix,int)"
    ],
    "org.apache.commons.math3.stat.regression.MillerUpdatingRegression#MillerUpdatingRegression(int,boolean,double)": [
        "org.apache.commons.math3.stat.regression.MillerUpdatingRegression.<init>()",
        "org.apache.commons.math3.exception.util.LocalizedFormats.<staticinit>()"
    ],
    "org.apache.commons.math3.linear.RealVector#walkInOptimizedOrder(RealVectorChangingVisitor)": [
        "org.apache.commons.math3.linear.ArrayRealVector#walkInDefaultOrder(RealVectorChangingVisitor)",
        "org.apache.commons.math3.linear.RealVector#walkInDefaultOrder(RealVectorChangingVisitor)"
    ],
    "org.apache.commons.math3.optim.PointVectorValuePair.DataTransferObject#DataTransferObject(double[],double[])": ["org.apache.commons.math3.optim.PointVectorValuePair.DataTransferObject.<init>()"],
    "org.apache.commons.math3.stat.descriptive.SynchronizedDescriptiveStatistics#SynchronizedDescriptiveStatistics()": [
        "org.apache.commons.math3.stat.descriptive.DescriptiveStatistics.<staticinit>()",
        "org.apache.commons.math3.stat.descriptive.SynchronizedDescriptiveStatistics#SynchronizedDescriptiveStatistics(int)"
    ],
    "org.apache.commons.math3.util.FastMath.atan2(double,double)": [
        "org.apache.commons.math3.util.FastMath.atan(double,double,boolean)",
        "org.apache.commons.math3.util.FastMath.copySign(double,double)",
        "org.apache.commons.math3.util.FastMath.<staticinit>()",
        "org.apache.commons.math3.util.FastMath.doubleHighPart(double)"
    ],
    "org.apache.commons.math3.ode.nonstiff.RungeKuttaFieldIntegrator#RungeKuttaFieldIntegrator(Field<T extends RealFieldElement>,String,T extends RealFieldElement)": [
        "org.apache.commons.math3.ode.AbstractFieldIntegrator#AbstractFieldIntegrator(Field<T extends RealFieldElement>,String)",
        "org.apache.commons.math3.ode.nonstiff.RungeKuttaFieldIntegrator.<init>()",
        "org.apache.commons.math3.ode.nonstiff.DormandPrince853FieldIntegrator#getB()",
        "org.apache.commons.math3.ode.nonstiff.EulerFieldIntegrator#getC()",
        "org.apache.commons.math3.ode.nonstiff.EulerFieldIntegrator#getB()",
        "org.apache.commons.math3.ode.nonstiff.DormandPrince853FieldIntegrator#getA()",
        "org.apache.commons.math3.ode.nonstiff.LutherFieldIntegrator#getB()",
        "org.apache.commons.math3.ode.nonstiff.EulerFieldIntegrator#getA()",
        "org.apache.commons.math3.ode.nonstiff.LutherFieldIntegrator#getA()",
        "org.apache.commons.math3.ode.nonstiff.DormandPrince853FieldIntegrator#getC()",
        "org.apache.commons.math3.ode.nonstiff.GillFieldIntegrator#getC()",
        "org.apache.commons.math3.ode.nonstiff.ClassicalRungeKuttaFieldIntegrator#getC()",
        "org.apache.commons.math3.ode.nonstiff.ClassicalRungeKuttaFieldIntegrator#getB()",
        "org.apache.commons.math3.ode.nonstiff.MidpointFieldIntegrator#getC()",
        "org.apache.commons.math3.ode.nonstiff.MidpointFieldIntegrator#getB()",
        "org.apache.commons.math3.ode.nonstiff.MidpointFieldIntegrator#getA()",
        "org.apache.commons.math3.ode.nonstiff.GillFieldIntegrator#getA()",
        "org.apache.commons.math3.ode.nonstiff.ClassicalRungeKuttaFieldIntegrator#getA()",
        "org.apache.commons.math3.ode.nonstiff.GillFieldIntegrator#getB()",
        "org.apache.commons.math3.ode.nonstiff.HighamHall54FieldIntegrator#getA()",
        "org.apache.commons.math3.ode.nonstiff.HighamHall54FieldIntegrator#getB()",
        "org.apache.commons.math3.ode.nonstiff.HighamHall54FieldIntegrator#getC()",
        "org.apache.commons.math3.ode.nonstiff.DormandPrince54FieldIntegrator#getC()",
        "org.apache.commons.math3.ode.nonstiff.DormandPrince54FieldIntegrator#getB()",
        "org.apache.commons.math3.ode.nonstiff.DormandPrince54FieldIntegrator#getA()",
        "org.apache.commons.math3.ode.nonstiff.ThreeEighthesFieldIntegrator#getB()",
        "org.apache.commons.math3.ode.nonstiff.LutherFieldIntegrator#getC()",
        "org.apache.commons.math3.ode.nonstiff.ThreeEighthesFieldIntegrator#getC()",
        "org.apache.commons.math3.ode.nonstiff.ThreeEighthesFieldIntegrator#getA()"
    ],
    "org.apache.commons.math3.ode.nonstiff.MidpointStepInterpolator#doCopy()": ["org.apache.commons.math3.ode.nonstiff.MidpointStepInterpolator#MidpointStepInterpolator(MidpointStepInterpolator)"],
    "org.apache.commons.math3.geometry.spherical.oned.LimitAngle#LimitAngle(S1Point,boolean,double)": ["org.apache.commons.math3.geometry.spherical.oned.LimitAngle.<init>()"],
    "org.apache.commons.math3.analysis.differentiation.SparseGradient#linearCombination(double,SparseGradient,double,SparseGradient,double,SparseGradient,double,SparseGradient)": [
        "org.apache.commons.math3.util.MathArrays.linearCombination(double,double,double,double,double,double,double,double)",
        "org.apache.commons.math3.analysis.differentiation.SparseGradient#multiply(double)",
        "org.apache.commons.math3.analysis.differentiation.SparseGradient#add(SparseGradient)"
    ],
    "org.apache.commons.math3.fraction.FractionFormat.getImproperInstance(Locale)": [
        "org.apache.commons.math3.fraction.AbstractFormat.getDefaultNumberFormat(Locale)",
        "org.apache.commons.math3.fraction.FractionFormat#FractionFormat(NumberFormat)"
    ],
    "org.apache.commons.math3.optimization.linear.SimplexTableau#getBasicRow(int)": [
        "org.apache.commons.math3.optimization.linear.SimplexTableau#getHeight()",
        "org.apache.commons.math3.util.Precision.equals(double,double,int)",
        "org.apache.commons.math3.optimization.linear.SimplexTableau#getEntry(int,int)"
    ],
    "org.apache.commons.math3.stat.descriptive.SynchronizedSummaryStatistics#setGeoMeanImpl(StorelessUnivariateStatistic)": ["org.apache.commons.math3.stat.descriptive.SummaryStatistics#setGeoMeanImpl(StorelessUnivariateStatistic)"],
    "org.apache.commons.math3.geometry.VectorFormat#format(StringBuffer,FieldPosition,double[]...)": ["org.apache.commons.math3.util.CompositeFormat.formatDouble(double,NumberFormat,StringBuffer,FieldPosition)"],
    "org.apache.commons.math3.geometry.euclidean.oned.Vector1DFormat#Vector1DFormat(String,String)": [
        "org.apache.commons.math3.geometry.euclidean.oned.Vector1DFormat.<init>()",
        "org.apache.commons.math3.geometry.VectorFormat#VectorFormat(String,String,String,NumberFormat)",
        "org.apache.commons.math3.util.CompositeFormat.getDefaultNumberFormat()",
        "org.apache.commons.math3.geometry.VectorFormat.<staticinit>()"
    ],
    "org.apache.commons.math3.analysis.differentiation.DerivativeStructure#hypot(DerivativeStructure)": [
        "org.apache.commons.math3.analysis.differentiation.DerivativeStructure#getExponent()",
        "org.apache.commons.math3.analysis.differentiation.DerivativeStructure#add(DerivativeStructure)",
        "org.apache.commons.math3.analysis.differentiation.DerivativeStructure#abs()",
        "org.apache.commons.math3.analysis.differentiation.DerivativeStructure#DerivativeStructure(int,int,double[]...)",
        "org.apache.commons.math3.analysis.differentiation.DerivativeStructure#scalb(int)",
        "org.apache.commons.math3.analysis.differentiation.DSCompiler#checkCompatibility(DSCompiler)",
        "org.apache.commons.math3.analysis.differentiation.DerivativeStructure#multiply(DerivativeStructure)",
        "org.apache.commons.math3.analysis.differentiation.DSCompiler#getFreeParameters()",
        "org.apache.commons.math3.analysis.differentiation.DerivativeStructure#sqrt()"
    ],
    "org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile.Marker#Marker()": ["org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile.Marker.<init>()"],
    "org.apache.commons.math3.analysis.interpolation.TricubicFunction.<init>()": ["org.apache.commons.math3.analysis.interpolation.TricubicFunction.<staticinit>()"],
    "org.apache.commons.math3.linear.MatrixUtils.inverse(RealMatrix)": ["org.apache.commons.math3.linear.MatrixUtils.inverse(RealMatrix,double)"],
    "org.apache.commons.math3.random.AbstractWell#AbstractWell(int,int,int,int,int)": ["org.apache.commons.math3.random.AbstractWell#AbstractWell(int,int,int,int,int[])"],
    "org.apache.commons.math3.ode.nonstiff.AdamsNordsieckFieldTransformer#updateHighOrderDerivativesPhase1(Array2DRowFieldMatrix<T extends RealFieldElement>)": ["org.apache.commons.math3.linear.Array2DRowFieldMatrix#multiply(Array2DRowFieldMatrix<T extends FieldElement>)"],
    "org.apache.commons.math3.stat.descriptive.SummaryStatistics#setMeanImpl(StorelessUnivariateStatistic)": ["org.apache.commons.math3.stat.descriptive.SummaryStatistics#checkEmpty()"],
    "org.apache.commons.math3.linear.EigenDecomposition#findEigenVectorsFromSchur(SchurTransformer)": [
        "org.apache.commons.math3.util.Precision.equals(double,double,double)",
        "org.apache.commons.math3.util.FastMath.max(double,double)",
        "org.apache.commons.math3.complex.Complex#getImaginary()",
        "org.apache.commons.math3.util.FastMath.max(int,int)",
        "org.apache.commons.math3.exception.util.LocalizedFormats.<staticinit>()",
        "org.apache.commons.math3.linear.SchurTransformer#getT()",
        "org.apache.commons.math3.linear.DiagonalMatrix#getData()",
        "org.apache.commons.math3.linear.AbstractRealMatrix#getData()",
        "org.apache.commons.math3.util.FastMath.min(int,int)",
        "org.apache.commons.math3.linear.SchurTransformer#getP()",
        "org.apache.commons.math3.util.Precision.equals(double,double)",
        "org.apache.commons.math3.linear.EigenDecomposition.<staticinit>()",
        "org.apache.commons.math3.complex.Complex#getReal()",
        "org.apache.commons.math3.util.Precision.compareTo(double,double,double)",
        "org.apache.commons.math3.util.Precision.<staticinit>()",
        "org.apache.commons.math3.util.FastMath.abs(double)",
        "org.apache.commons.math3.linear.EigenDecomposition#cdiv(double,double,double,double)",
        "org.apache.commons.math3.linear.Array2DRowRealMatrix#getData()",
        "org.apache.commons.math3.linear.ArrayRealVector#ArrayRealVector(double[])",
        "org.apache.commons.math3.linear.BlockRealMatrix#getData()"
    ],
    "org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet#IntervalsSet(BSPTree<Euclidean1D>)": [
        "org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet.<staticinit>()",
        "org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet#IntervalsSet(BSPTree<Euclidean1D>,double)"
    ],
    "org.apache.commons.math3.linear.BlockRealMatrix#subtract(BlockRealMatrix)": [
        "org.apache.commons.math3.linear.MatrixUtils.checkSubtractionCompatible(AnyMatrix,AnyMatrix)",
        "org.apache.commons.math3.linear.BlockRealMatrix#BlockRealMatrix(int,int)"
    ],
    "org.apache.commons.math3.geometry.euclidean.twod.Vector2D#normalize()": [
        "org.apache.commons.math3.geometry.euclidean.twod.Vector2D#getNorm()",
        "org.apache.commons.math3.geometry.euclidean.twod.Vector2D#scalarMultiply(double)",
        "org.apache.commons.math3.exception.util.LocalizedFormats.<staticinit>()"
    ],
    "org.apache.commons.math3.linear.SparseFieldVector#append(T extends FieldElement)": [
        "org.apache.commons.math3.linear.SparseFieldVector#setEntry(int,T extends FieldElement)",
        "org.apache.commons.math3.util.MathUtils.checkNotNull(Object)",
        "org.apache.commons.math3.linear.SparseFieldVector#SparseFieldVector(SparseFieldVector<T extends FieldElement>,int)",
        "org.apache.commons.math3.linear.ArrayFieldVector#setEntry(int,T extends FieldElement)"
    ],
    "org.apache.commons.math3.util.ArithmeticUtils.pow(BigInteger,long)": ["org.apache.commons.math3.exception.util.LocalizedFormats.<staticinit>()"],
    "org.apache.commons.math3.util.MathArrays.sortInPlace(double[],double[][]...)": [
        "org.apache.commons.math3.util.MathArrays.sortInPlace(double[],OrderDirection,double[][]...)",
        "org.apache.commons.math3.util.MathArrays.OrderDirection.<staticinit>()"
    ],
    "org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair#UnivariatePointValuePair(double,double)": ["org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair.<init>()"],
    "org.apache.commons.math3.util.FastMath.hypot(double,double)": [
        "org.apache.commons.math3.util.FastMath.scalb(double,int)",
        "org.apache.commons.math3.util.FastMath.abs(double)",
        "org.apache.commons.math3.util.FastMath.getExponent(double)",
        "org.apache.commons.math3.util.FastMath.sqrt(double)"
    ],
    "org.apache.commons.math3.optimization.PointValuePair#writeReplace()": [
        "org.apache.commons.math3.util.Pair#getValue()",
        "org.apache.commons.math3.util.Pair#getKey()",
        "org.apache.commons.math3.optim.PointVectorValuePair#getValue()",
        "org.apache.commons.math3.optimization.PointVectorValuePair#getValue()"
    ],
    "org.apache.commons.math3.geometry.partitioning.BSPTree#BSPTree()": ["org.apache.commons.math3.geometry.partitioning.BSPTree.<init>()"],
    "org.apache.commons.math3.transform.FastSineTransformer#transform(double[],TransformType)": [
        "org.apache.commons.math3.transform.DstNormalization.<staticinit>()",
        "org.apache.commons.math3.transform.TransformUtils.scaleArray(double[],double)",
        "org.apache.commons.math3.util.FastMath.sqrt(double)",
        "org.apache.commons.math3.transform.FastSineTransformer#fst(double[])",
        "org.apache.commons.math3.transform.TransformType.<staticinit>()"
    ],
    "org.apache.commons.math3.analysis.polynomials.PolynomialFunctionLagrangeForm.verifyInterpolationArray(double[],double[],boolean)": [
        "org.apache.commons.math3.exception.DimensionMismatchException#DimensionMismatchException(int,int)",
        "org.apache.commons.math3.util.MathArrays.checkOrder(double[],OrderDirection,boolean,boolean)",
        "org.apache.commons.math3.util.MathArrays.OrderDirection.<staticinit>()",
        "org.apache.commons.math3.exception.util.LocalizedFormats.<staticinit>()"
    ],
    "org.apache.commons.math3.linear.ArrayFieldVector#mapAdd(T extends FieldElement)": [
        "org.apache.commons.math3.linear.ArrayFieldVector#ArrayFieldVector(Field<T extends FieldElement>,T extends FieldElement[],boolean)",
        "org.apache.commons.math3.util.MathArrays.buildArray(Field<T>,int)"
    ],
    "org.apache.commons.math3.linear.Array2DRowFieldMatrix#copyOut()": [
        "org.apache.commons.math3.util.MathArrays.buildArray(Field<T>,int,int)",
        "org.apache.commons.math3.linear.Array2DRowFieldMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.AbstractFieldMatrix#getField()",
        "org.apache.commons.math3.linear.Array2DRowFieldMatrix#getColumnDimension()"
    ],
    "org.apache.commons.math3.geometry.euclidean.twod.Line#copySelf()": ["org.apache.commons.math3.geometry.euclidean.twod.Line#Line(Line)"],
    "org.apache.commons.math3.analysis.interpolation.BicubicSplineInterpolatingFunction#BicubicSplineInterpolatingFunction(double[],double[],double[][],double[][],double[][],double[][])": ["org.apache.commons.math3.analysis.interpolation.BicubicSplineInterpolatingFunction#BicubicSplineInterpolatingFunction(double[],double[],double[][],double[][],double[][],double[][],boolean)"],
    "org.apache.commons.math3.stat.descriptive.rank.Max#Max()": [
        "org.apache.commons.math3.stat.descriptive.rank.Max.<init>()",
        "org.apache.commons.math3.stat.descriptive.AbstractStorelessUnivariateStatistic.<init>()"
    ],
    "org.apache.commons.math3.util.FastMathCalc.printarray(PrintStream,String,int,double[][])": [
        "org.apache.commons.math3.util.FastMathCalc.<staticinit>()",
        "org.apache.commons.math3.util.FastMathCalc.checkLen(int,int)",
        "org.apache.commons.math3.util.FastMathCalc.format(double)"
    ],
    "org.apache.commons.math3.geometry.spherical.twod.PropertiesComputer#PropertiesComputer(double)": [
        "org.apache.commons.math3.geometry.euclidean.threed.Vector3D.<staticinit>()",
        "org.apache.commons.math3.geometry.spherical.twod.PropertiesComputer.<init>()"
    ],
    "org.apache.commons.math3.analysis.differentiation.SparseGradient#copySign(double)": ["org.apache.commons.math3.analysis.differentiation.SparseGradient#negate()"],
    "org.apache.commons.math3.analysis.solvers.BrentSolver#brent(double,double,double,double)": [
        "org.apache.commons.math3.analysis.solvers.BaseAbstractUnivariateSolver#getAbsoluteAccuracy()",
        "org.apache.commons.math3.analysis.solvers.BaseAbstractUnivariateSolver#computeObjectiveValue(double)",
        "org.apache.commons.math3.analysis.solvers.BaseAbstractUnivariateSolver#getRelativeAccuracy()",
        "org.apache.commons.math3.util.Precision.equals(double,double)",
        "org.apache.commons.math3.util.FastMath.abs(double)"
    ],
    "org.apache.commons.math3.linear.SparseFieldVector#SparseFieldVector(Field<T extends FieldElement>,int)": [
        "org.apache.commons.math3.linear.SparseFieldVector.<init>()",
        "org.apache.commons.math3.util.OpenIntToFieldHashMap#OpenIntToFieldHashMap(Field<T extends FieldElement>)"
    ],
    "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.BOBYQAOptimizer#altmov(int,double)": [
        "org.apache.commons.math3.linear.Array2DRowRealMatrix#getEntry(int,int)",
        "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.BOBYQAOptimizer.printMethod()",
        "org.apache.commons.math3.util.FastMath.abs(double)",
        "org.apache.commons.math3.linear.ArrayRealVector#getDimension()",
        "org.apache.commons.math3.util.FastMath.max(double,double)",
        "org.apache.commons.math3.util.FastMath.sqrt(double)",
        "org.apache.commons.math3.util.FastMath.min(double,double)",
        "org.apache.commons.math3.linear.ArrayRealVector#ArrayRealVector(int)",
        "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.BOBYQAOptimizer.<staticinit>()",
        "org.apache.commons.math3.linear.ArrayRealVector#getEntry(int)",
        "org.apache.commons.math3.linear.ArrayRealVector#setEntry(int,double)"
    ],
    "org.apache.commons.math3.fraction.AbstractFormat.getDefaultNumberFormat()": ["org.apache.commons.math3.fraction.AbstractFormat.getDefaultNumberFormat(Locale)"],
    "org.apache.commons.math3.stat.descriptive.rank.Percentile#withKthSelector(KthSelector)": ["org.apache.commons.math3.stat.descriptive.rank.Percentile#Percentile(double,EstimationType,NaNStrategy,KthSelector)"],
    "org.apache.commons.math3.complex.Complex#conjugate()": [
        "org.apache.commons.math3.complex.Complex.<staticinit>()",
        "org.apache.commons.math3.complex.Complex#createComplex(double,double)"
    ],
    "org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D.crossProduct(Vector3D,FieldVector3D<T extends RealFieldElement>)": [
        "org.apache.commons.math3.geometry.euclidean.threed.Vector3D#getX()",
        "org.apache.commons.math3.geometry.euclidean.threed.Vector3D#getZ()",
        "org.apache.commons.math3.geometry.euclidean.threed.Vector3D#getY()",
        "org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D#FieldVector3D(T extends RealFieldElement,T extends RealFieldElement,T extends RealFieldElement)"
    ],
    "org.apache.commons.math3.geometry.euclidean.twod.DiskGenerator#ballOnSupport(List<Vector2D>)": [
        "org.apache.commons.math3.geometry.euclidean.twod.Vector2D#getY()",
        "org.apache.commons.math3.geometry.euclidean.twod.Vector2D#getX()",
        "org.apache.commons.math3.fraction.BigFraction#subtract(BigFraction)",
        "org.apache.commons.math3.fraction.BigFraction#BigFraction(double)",
        "org.apache.commons.math3.geometry.euclidean.twod.Vector2D#distance(Vector<Euclidean2D>)",
        "org.apache.commons.math3.fraction.BigFraction#multiply(BigFraction)",
        "org.apache.commons.math3.geometry.euclidean.twod.Vector2D#Vector2D(double,double)",
        "org.apache.commons.math3.geometry.euclidean.twod.Vector2D#Vector2D(double,Vector2D,double,Vector2D)",
        "org.apache.commons.math3.fraction.BigFraction#add(BigFraction)",
        "org.apache.commons.math3.fraction.BigFraction#divide(BigFraction)",
        "org.apache.commons.math3.fraction.BigFraction#multiply(int)",
        "org.apache.commons.math3.fraction.BigFraction#doubleValue()",
        "org.apache.commons.math3.util.FastMath.sqrt(double)",
        "org.apache.commons.math3.fraction.BigFraction#negate()",
        "org.apache.commons.math3.geometry.euclidean.twod.DiskGenerator#minor(BigFraction[],BigFraction[])",
        "org.apache.commons.math3.geometry.euclidean.twod.Vector2D.<staticinit>()"
    ],
    "org.apache.commons.math3.random.BitsStreamGenerator#nextGaussian()": [
        "org.apache.commons.math3.util.FastMath.sin(double)",
        "org.apache.commons.math3.util.FastMath.log(double)",
        "org.apache.commons.math3.util.FastMath.sqrt(double)",
        "org.apache.commons.math3.random.BitsStreamGenerator#nextDouble()",
        "org.apache.commons.math3.util.FastMath.<staticinit>()",
        "org.apache.commons.math3.util.FastMath.cos(double)"
    ],
    "org.apache.commons.math3.stat.inference.TestUtils.chiSquare(long[][])": [
        "org.apache.commons.math3.stat.inference.ChiSquareTest#chiSquare(long[][])",
        "org.apache.commons.math3.stat.inference.TestUtils.<staticinit>()"
    ],
    "org.apache.commons.math3.geometry.euclidean.twod.Line#getPointAt(Vector1D,double)": [
        "org.apache.commons.math3.geometry.euclidean.oned.Vector1D#getX()",
        "org.apache.commons.math3.geometry.euclidean.twod.Vector2D#Vector2D(double,double)",
        "org.apache.commons.math3.util.MathArrays.linearCombination(double,double,double,double)"
    ],
    "org.apache.commons.math3.analysis.differentiation.GradientFunction#GradientFunction(MultivariateDifferentiableFunction)": ["org.apache.commons.math3.analysis.differentiation.GradientFunction.<init>()"],
    "org.apache.commons.math3.random.RandomDataGenerator#nextSecureHexString(int)": [
        "org.apache.commons.math3.random.BitsStreamGenerator#nextBytes(byte[])",
        "org.apache.commons.math3.random.AbstractRandomGenerator#nextBytes(byte[])",
        "org.apache.commons.math3.exception.util.LocalizedFormats.<staticinit>()",
        "org.apache.commons.math3.random.RandomGeneratorFactory.createRandomGenerator(Random)$RandomGenerator$1#nextBytes(byte[])",
        "org.apache.commons.math3.random.SynchronizedRandomGenerator#nextBytes(byte[])",
        "org.apache.commons.math3.random.RandomAdaptor#nextBytes(byte[])",
        "org.apache.commons.math3.exception.MathInternalError#MathInternalError(Throwable)",
        "org.apache.commons.math3.random.RandomDataGenerator#getSecRan()"
    ],
    "org.apache.commons.math3.linear.SchurTransformer.<init>()": ["org.apache.commons.math3.util.Precision.<staticinit>()"],
    "org.apache.commons.math3.analysis.polynomials.PolynomialsUtils.createLaguerrePolynomial(int)": [
        "org.apache.commons.math3.analysis.polynomials.PolynomialsUtils.createLaguerrePolynomial(int)$RecurrenceCoefficientsGenerator$1.<init>()",
        "org.apache.commons.math3.analysis.polynomials.PolynomialsUtils.<staticinit>()",
        "org.apache.commons.math3.analysis.polynomials.PolynomialsUtils.buildPolynomial(int,List<BigFraction>,RecurrenceCoefficientsGenerator)"
    ],
    "org.apache.commons.math3.stat.StatUtils.percentile(double[],int,int,double)": [
        "org.apache.commons.math3.stat.StatUtils.<staticinit>()",
        "org.apache.commons.math3.stat.descriptive.rank.Percentile#evaluate(double[],int,int,double)"
    ],
    "org.apache.commons.math3.geometry.partitioning.Characterization#addInsideTouching(SubHyperplane<S extends Space>,List<BSPTree<S extends Space>>)": [
        "org.apache.commons.math3.geometry.partitioning.AbstractSubHyperplane#reunite(SubHyperplane<S extends Space>)",
        "org.apache.commons.math3.geometry.partitioning.NodesSet#addAll(Iterable<BSPTree<S extends Space>>)"
    ],
    "org.apache.commons.math3.ode.sampling.StepNormalizer#StepNormalizer(double,FixedStepHandler,StepNormalizerMode)": [
        "org.apache.commons.math3.ode.sampling.StepNormalizerBounds.<staticinit>()",
        "org.apache.commons.math3.ode.sampling.StepNormalizer#StepNormalizer(double,FixedStepHandler,StepNormalizerMode,StepNormalizerBounds)"
    ],
    "org.apache.commons.math3.linear.Array2DRowRealMatrix#getData()": ["org.apache.commons.math3.linear.Array2DRowRealMatrix#copyOut()"],
    "org.apache.commons.math3.linear.BlockRealMatrix#add(RealMatrix)": [
        "org.apache.commons.math3.linear.BlockRealMatrix#add(BlockRealMatrix)",
        "org.apache.commons.math3.linear.Array2DRowRealMatrix#getEntry(int,int)",
        "org.apache.commons.math3.linear.DiagonalMatrix#getEntry(int,int)",
        "org.apache.commons.math3.linear.OpenMapRealMatrix#getEntry(int,int)",
        "org.apache.commons.math3.linear.MatrixUtils.checkAdditionCompatible(AnyMatrix,AnyMatrix)",
        "org.apache.commons.math3.util.FastMath.min(int,int)",
        "org.apache.commons.math3.linear.BlockRealMatrix.<staticinit>()",
        "org.apache.commons.math3.linear.BlockRealMatrix#getEntry(int,int)",
        "org.apache.commons.math3.linear.BlockRealMatrix#BlockRealMatrix(int,int)"
    ],
    "org.apache.commons.math3.fraction.ProperFractionFormat#ProperFractionFormat(NumberFormat,NumberFormat,NumberFormat)": [
        "org.apache.commons.math3.fraction.FractionFormat#FractionFormat(NumberFormat,NumberFormat)",
        "org.apache.commons.math3.fraction.ProperFractionFormat#setWholeFormat(NumberFormat)",
        "org.apache.commons.math3.fraction.ProperFractionFormat.<init>()"
    ],
    "org.apache.commons.math3.analysis.interpolation.InterpolatingMicrosphere2D#copy()": ["org.apache.commons.math3.analysis.interpolation.InterpolatingMicrosphere2D#InterpolatingMicrosphere2D(InterpolatingMicrosphere2D)"],
    "org.apache.commons.math3.optimization.direct.AbstractSimplex#AbstractSimplex(double[][])": [
        "org.apache.commons.math3.exception.DimensionMismatchException#DimensionMismatchException(int,int)",
        "org.apache.commons.math3.optimization.direct.AbstractSimplex.<init>()",
        "org.apache.commons.math3.exception.util.LocalizedFormats.<staticinit>()"
    ],
    "org.apache.commons.math3.geometry.euclidean.twod.Vector2D#toString(NumberFormat)": [
        "org.apache.commons.math3.geometry.euclidean.twod.Vector2DFormat#Vector2DFormat(NumberFormat)",
        "org.apache.commons.math3.geometry.VectorFormat#format(Vector<S extends Space>)"
    ],
    "org.apache.commons.math3.stat.descriptive.moment.FourthMoment#copy()": [
        "org.apache.commons.math3.stat.descriptive.moment.FourthMoment.copy(FourthMoment,FourthMoment)",
        "org.apache.commons.math3.stat.descriptive.moment.FourthMoment#FourthMoment()"
    ],
    "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.NelderMeadSimplex#NelderMeadSimplex(double[])": [
        "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.NelderMeadSimplex.<staticinit>()",
        "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.NelderMeadSimplex#NelderMeadSimplex(double[],double,double,double,double)"
    ],
    "org.apache.commons.math3.stat.Frequency#getSumFreq()": [
        "org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet.SubIntervalsIterator#hasNext()",
        "org.apache.commons.math3.util.MultidimensionalCounter.Iterator#next()",
        "org.apache.commons.math3.linear.RealVector#iterator()$Iterator$1#hasNext()",
        "org.apache.commons.math3.userguide.sofm.ChineseRingsClassifier#createRandomIterator(long)$Iterator$1#hasNext()",
        "org.apache.commons.math3.util.IntegerSequence.Incrementor#hasNext()",
        "org.apache.commons.math3.linear.RealVector.unmodifiableRealVector(RealVector)$Iterator$1$Iterator$1#sparseIterator()$Iterator$1#hasNext()",
        "org.apache.commons.math3.geometry.spherical.oned.ArcsSet.SubArcsIterator#hasNext()",
        "org.apache.commons.math3.util.Combinations.LexicographicIterator#hasNext()",
        "org.apache.commons.math3.util.IntegerSequence.Incrementor#next()",
        "org.apache.commons.math3.linear.RealVector.SparseEntryIterator#hasNext()",
        "org.apache.commons.math3.userguide.sofm.ChineseRingsClassifier#createIterable()$Iterator$1$Iterator$1#iterator()$Iterator$1#hasNext()",
        "org.apache.commons.math3.linear.RealVector.unmodifiableRealVector(RealVector)$Iterator$1$Iterator$1#iterator()$Iterator$1#hasNext()",
        "org.apache.commons.math3.util.Combinations.SingletonIterator#hasNext()",
        "org.apache.commons.math3.util.MultidimensionalCounter.Iterator#hasNext()"
    ],
    "org.apache.commons.math3.geometry.spherical.oned.ArcsSet.Split#Split(ArcsSet,ArcsSet)": ["org.apache.commons.math3.geometry.spherical.oned.ArcsSet.Split.<init>()"],
    "org.apache.commons.math3.util.FastMathCalc.slowLog(double)": [
        "org.apache.commons.math3.util.FastMathCalc.split(double,double[])",
        "org.apache.commons.math3.util.FastMathCalc.splitAdd(double[],double[],double[])",
        "org.apache.commons.math3.util.FastMathCalc.<staticinit>()",
        "org.apache.commons.math3.util.FastMathCalc.splitMult(double[],double[],double[])",
        "org.apache.commons.math3.util.FastMathCalc.splitReciprocal(double[],double[])",
        "org.apache.commons.math3.util.FastMathCalc.resplit(double[])"
    ],
    "org.apache.commons.math3.fitting.leastsquares.LevenbergMarquardtOptimizer#withRankingThreshold(double)": ["org.apache.commons.math3.fitting.leastsquares.LevenbergMarquardtOptimizer#LevenbergMarquardtOptimizer(double,double,double,double,double)"],
    "org.apache.commons.math3.stat.descriptive.AbstractUnivariateStatistic#evaluate(double[])": [
        "org.apache.commons.math3.stat.descriptive.AbstractUnivariateStatistic#test(double[],int,int)",
        "org.apache.commons.math3.stat.descriptive.moment.Skewness#evaluate(double[],int,int)",
        "org.apache.commons.math3.stat.descriptive.moment.Variance#evaluate(double[],int,int)",
        "org.apache.commons.math3.stat.descriptive.moment.SemiVariance#evaluate(double[],int,int)",
        "org.apache.commons.math3.stat.descriptive.moment.GeometricMean#evaluate(double[],int,int)",
        "org.apache.commons.math3.stat.descriptive.summary.SumOfLogs#evaluate(double[],int,int)",
        "org.apache.commons.math3.stat.descriptive.moment.StandardDeviation#evaluate(double[],int,int)",
        "org.apache.commons.math3.stat.descriptive.summary.Sum#evaluate(double[],int,int)",
        "org.apache.commons.math3.stat.descriptive.rank.Min#evaluate(double[],int,int)",
        "org.apache.commons.math3.stat.descriptive.rank.Percentile#evaluate(double[],int,int)",
        "org.apache.commons.math3.stat.descriptive.rank.Max#evaluate(double[],int,int)",
        "org.apache.commons.math3.stat.descriptive.summary.SumOfSquares#evaluate(double[],int,int)",
        "org.apache.commons.math3.stat.descriptive.moment.Mean#evaluate(double[],int,int)",
        "org.apache.commons.math3.stat.descriptive.summary.Product#evaluate(double[],int,int)",
        "org.apache.commons.math3.stat.descriptive.moment.Kurtosis#evaluate(double[],int,int)",
        "org.apache.commons.math3.stat.descriptive.AbstractStorelessUnivariateStatistic#evaluate(double[],int,int)"
    ],
    "org.apache.commons.math3.stat.descriptive.AggregateSummaryStatistics.aggregate(Collection<? extends StatisticalSummary>)": [
        "org.apache.commons.math3.stat.descriptive.SummaryStatistics#getMax()",
        "org.apache.commons.math3.stat.descriptive.SynchronizedSummaryStatistics#getMin()",
        "org.apache.commons.math3.stat.descriptive.StatisticalSummaryValues#getVariance()",
        "org.apache.commons.math3.stat.descriptive.DescriptiveStatistics#getSum()",
        "org.apache.commons.math3.linear.RealVector#iterator()$Iterator$1#hasNext()",
        "org.apache.commons.math3.stat.descriptive.DescriptiveStatistics#getMax()",
        "org.apache.commons.math3.linear.RealVector.unmodifiableRealVector(RealVector)$Iterator$1$Iterator$1#sparseIterator()$Iterator$1#hasNext()",
        "org.apache.commons.math3.geometry.spherical.oned.ArcsSet.SubArcsIterator#hasNext()",
        "org.apache.commons.math3.stat.descriptive.StatisticalSummaryValues#getMin()",
        "org.apache.commons.math3.stat.descriptive.AggregateSummaryStatistics#getMean()",
        "org.apache.commons.math3.stat.descriptive.SummaryStatistics#getSum()",
        "org.apache.commons.math3.stat.descriptive.SynchronizedSummaryStatistics#getVariance()",
        "org.apache.commons.math3.stat.descriptive.AggregateSummaryStatistics#getMax()",
        "org.apache.commons.math3.util.Combinations.LexicographicIterator#hasNext()",
        "org.apache.commons.math3.stat.descriptive.SummaryStatistics#getMean()",
        "org.apache.commons.math3.stat.descriptive.StatisticalSummaryValues#getN()",
        "org.apache.commons.math3.stat.descriptive.SummaryStatistics#getN()",
        "org.apache.commons.math3.linear.RealVector.SparseEntryIterator#hasNext()",
        "org.apache.commons.math3.userguide.sofm.ChineseRingsClassifier#createIterable()$Iterator$1$Iterator$1#iterator()$Iterator$1#hasNext()",
        "org.apache.commons.math3.stat.descriptive.StatisticalSummaryValues#getMean()",
        "org.apache.commons.math3.stat.descriptive.AggregateSummaryStatistics#getVariance()",
        "org.apache.commons.math3.stat.descriptive.SynchronizedSummaryStatistics#getMax()",
        "org.apache.commons.math3.util.MultidimensionalCounter.Iterator#hasNext()",
        "org.apache.commons.math3.stat.descriptive.DescriptiveStatistics#getVariance()",
        "org.apache.commons.math3.stat.descriptive.SummaryStatistics#getVariance()",
        "org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet.SubIntervalsIterator#hasNext()",
        "org.apache.commons.math3.stat.descriptive.SynchronizedSummaryStatistics#getSum()",
        "org.apache.commons.math3.userguide.sofm.ChineseRingsClassifier#createRandomIterator(long)$Iterator$1#hasNext()",
        "org.apache.commons.math3.util.IntegerSequence.Incrementor#hasNext()",
        "org.apache.commons.math3.stat.descriptive.DescriptiveStatistics#getN()",
        "org.apache.commons.math3.stat.descriptive.DescriptiveStatistics#getMin()",
        "org.apache.commons.math3.stat.descriptive.AggregateSummaryStatistics#getSum()",
        "org.apache.commons.math3.stat.descriptive.StatisticalSummaryValues#getMax()",
        "org.apache.commons.math3.stat.descriptive.StatisticalSummaryValues#getSum()",
        "org.apache.commons.math3.stat.descriptive.AggregateSummaryStatistics#getN()",
        "org.apache.commons.math3.stat.descriptive.StatisticalSummaryValues#StatisticalSummaryValues(double,double,long,double,double,double)",
        "org.apache.commons.math3.stat.descriptive.SynchronizedSummaryStatistics#getN()",
        "org.apache.commons.math3.linear.RealVector.unmodifiableRealVector(RealVector)$Iterator$1$Iterator$1#iterator()$Iterator$1#hasNext()",
        "org.apache.commons.math3.util.Combinations.SingletonIterator#hasNext()",
        "org.apache.commons.math3.stat.descriptive.AggregateSummaryStatistics#getMin()",
        "org.apache.commons.math3.stat.descriptive.DescriptiveStatistics#getMean()",
        "org.apache.commons.math3.stat.descriptive.SummaryStatistics#getMin()",
        "org.apache.commons.math3.stat.descriptive.SynchronizedSummaryStatistics#getMean()",
        "org.apache.commons.math3.stat.descriptive.SynchronizedDescriptiveStatistics#getN()"
    ],
    "org.apache.commons.math3.analysis.integration.MidPointIntegrator#stage(int,double,double,double)": ["org.apache.commons.math3.analysis.integration.BaseAbstractUnivariateIntegrator#computeObjectiveValue(double)"],
    "org.apache.commons.math3.linear.AbstractFieldMatrix.extractField(T extends FieldElement[])": [
        "org.apache.commons.math3.exception.NoDataException#NoDataException(Localizable)",
        "org.apache.commons.math3.exception.util.LocalizedFormats.<staticinit>()"
    ],
    "org.apache.commons.math3.stat.ranking.NaturalRanking#NaturalRanking(NaNStrategy,RandomGenerator)": [
        "org.apache.commons.math3.random.RandomDataGenerator#RandomDataGenerator(RandomGenerator)",
        "org.apache.commons.math3.stat.ranking.NaturalRanking.<init>()",
        "org.apache.commons.math3.stat.ranking.TiesStrategy.<staticinit>()"
    ],
    "org.apache.commons.math3.linear.OpenMapRealVector.OpenMapSparseIterator#hasNext()": ["org.apache.commons.math3.util.OpenIntToDoubleHashMap.Iterator#hasNext()"],
    "org.apache.commons.math3.stat.correlation.Covariance#computeCovarianceMatrix(double[][])": ["org.apache.commons.math3.stat.correlation.Covariance#computeCovarianceMatrix(double[][],boolean)"],
    "org.apache.commons.math3.userguide.LowDiscrepancyGeneratorComparison.Plot#transform(Vector2D,int,int)": [
        "org.apache.commons.math3.userguide.LowDiscrepancyGeneratorComparison.Plot.<staticinit>()",
        "org.apache.commons.math3.geometry.euclidean.twod.Vector2D#toArray()",
        "org.apache.commons.math3.geometry.euclidean.twod.Vector2D#Vector2D(double[])"
    ],
    "org.apache.commons.math3.linear.ArrayFieldVector#projection(ArrayFieldVector<T extends FieldElement>)": [
        "org.apache.commons.math3.linear.ArrayFieldVector#dotProduct(ArrayFieldVector<T extends FieldElement>)",
        "org.apache.commons.math3.linear.ArrayFieldVector#mapMultiply(T extends FieldElement)"
    ],
    "org.apache.commons.math3.util.MathArrays.isMonotonic(T extends Comparable[],OrderDirection,boolean)": [
        "org.apache.commons.math3.exception.MathInternalError#MathInternalError()",
        "org.apache.commons.math3.util.MathArrays.OrderDirection.<staticinit>()"
    ],
    "org.apache.commons.math3.linear.ArrayRealVector#getSubVector(int,int)": [
        "org.apache.commons.math3.linear.RealVector#checkIndex(int)",
        "org.apache.commons.math3.linear.ArrayRealVector#ArrayRealVector(int)",
        "org.apache.commons.math3.exception.util.LocalizedFormats.<staticinit>()"
    ],
    "org.apache.commons.math3.util.Pair#Pair(Pair<? extends K, ? extends V>)": [
        "org.apache.commons.math3.util.Pair#getValue()",
        "org.apache.commons.math3.util.Pair#getKey()",
        "org.apache.commons.math3.optim.PointVectorValuePair#getValue()",
        "org.apache.commons.math3.optimization.PointVectorValuePair#getValue()",
        "org.apache.commons.math3.util.Pair#Pair(K,V)"
    ],
    "org.apache.commons.math3.transform.FastFourierTransformer#transform(double[],TransformType)": [
        "org.apache.commons.math3.util.MathArrays.copyOf(double[],int)",
        "org.apache.commons.math3.transform.TransformUtils.createComplexArray(double[][])",
        "org.apache.commons.math3.transform.FastFourierTransformer.transformInPlace(double[][],DftNormalization,TransformType)"
    ],
    "org.apache.commons.math3.ode.nonstiff.AdaptiveStepsizeFieldIntegrator#setStepSizeControl(double,double,double,double)": [
        "org.apache.commons.math3.util.BigRealField#getZero()",
        "org.apache.commons.math3.dfp.DfpField#getZero()",
        "org.apache.commons.math3.util.BigRealField#getOne()",
        "org.apache.commons.math3.util.FastMath.abs(double)",
        "org.apache.commons.math3.fraction.FractionField#getZero()",
        "org.apache.commons.math3.complex.ComplexField#getZero()",
        "org.apache.commons.math3.fraction.Fraction#negate()",
        "org.apache.commons.math3.util.Decimal64#negate()",
        "org.apache.commons.math3.analysis.differentiation.DerivativeStructure#negate()",
        "org.apache.commons.math3.ode.AbstractFieldIntegrator#getField()",
        "org.apache.commons.math3.fraction.BigFractionField#getOne()",
        "org.apache.commons.math3.fraction.FractionField#getOne()",
        "org.apache.commons.math3.analysis.differentiation.SparseGradient#getField()$Field$1#getZero()",
        "org.apache.commons.math3.analysis.differentiation.SparseGradient#getField()$Field$1#getOne()",
        "org.apache.commons.math3.complex.Complex#negate()",
        "org.apache.commons.math3.util.Decimal64Field#getZero()",
        "org.apache.commons.math3.analysis.differentiation.SparseGradient#add(double)",
        "org.apache.commons.math3.complex.ComplexField#getOne()",
        "org.apache.commons.math3.analysis.differentiation.SparseGradient#negate()",
        "org.apache.commons.math3.analysis.differentiation.DerivativeStructure#add(double)",
        "org.apache.commons.math3.analysis.differentiation.DerivativeStructure#getField()$Field$1#getZero()",
        "org.apache.commons.math3.fraction.BigFraction#negate()",
        "org.apache.commons.math3.fraction.BigFractionField#getZero()",
        "org.apache.commons.math3.dfp.DfpField#getOne()",
        "org.apache.commons.math3.dfp.Dfp#negate()",
        "org.apache.commons.math3.analysis.differentiation.DerivativeStructure#getField()$Field$1#getOne()",
        "org.apache.commons.math3.util.Decimal64#add(double)",
        "org.apache.commons.math3.util.Decimal64Field#getOne()",
        "org.apache.commons.math3.dfp.Dfp#add(double)",
        "org.apache.commons.math3.util.BigReal#negate()"
    ],
    "org.apache.commons.math3.dfp.DfpMath.cosInternal(Dfp[])": [
        "org.apache.commons.math3.dfp.Dfp#getOne()",
        "org.apache.commons.math3.dfp.Dfp#multiply(Dfp)",
        "org.apache.commons.math3.dfp.Dfp#divide(int)",
        "org.apache.commons.math3.dfp.Dfp#add(Dfp)",
        "org.apache.commons.math3.dfp.Dfp#Dfp(Dfp)",
        "org.apache.commons.math3.dfp.Dfp#negate()",
        "org.apache.commons.math3.dfp.Dfp#equals(Object)"
    ],
    "org.apache.commons.math3.analysis.solvers.BaseAbstractUnivariateSolver#getEvaluations()": ["org.apache.commons.math3.util.IntegerSequence.Incrementor#getCount()"],
    "org.apache.commons.math3.distribution.MixtureMultivariateRealDistribution#reseedRandomGenerator(long)": ["org.apache.commons.math3.distribution.AbstractMultivariateRealDistribution#reseedRandomGenerator(long)"],
    "org.apache.commons.math3.stat.descriptive.moment.Mean#evaluate(double[],int,int)": [
        "org.apache.commons.math3.stat.descriptive.summary.Sum#evaluate(double[],int,int)",
        "org.apache.commons.math3.stat.descriptive.summary.Sum#Sum()",
        "org.apache.commons.math3.stat.descriptive.AbstractUnivariateStatistic#test(double[],int,int)"
    ],
    "org.apache.commons.math3.complex.Complex#createComplex(double,double)": ["org.apache.commons.math3.complex.Complex#Complex(double,double)"],
    "org.apache.commons.math3.geometry.euclidean.twod.hull.MonotoneChain#MonotoneChain()": ["org.apache.commons.math3.geometry.euclidean.twod.hull.MonotoneChain#MonotoneChain(boolean)"],
    "org.apache.commons.math3.distribution.LogNormalDistribution#LogNormalDistribution(RandomGenerator,double,double,double)": [
        "org.apache.commons.math3.util.FastMath.log(double)",
        "org.apache.commons.math3.util.FastMath.<staticinit>()",
        "org.apache.commons.math3.distribution.LogNormalDistribution.<init>()",
        "org.apache.commons.math3.distribution.AbstractRealDistribution#AbstractRealDistribution(RandomGenerator)",
        "org.apache.commons.math3.exception.util.LocalizedFormats.<staticinit>()"
    ],
    "org.apache.commons.math3.stat.regression.AbstractMultipleLinearRegression#estimateRegressionParametersVariance()": [
        "org.apache.commons.math3.stat.regression.GLSMultipleLinearRegression#calculateBetaVariance()",
        "org.apache.commons.math3.linear.DiagonalMatrix#getData()",
        "org.apache.commons.math3.linear.AbstractRealMatrix#getData()",
        "org.apache.commons.math3.linear.Array2DRowRealMatrix#getData()",
        "org.apache.commons.math3.linear.BlockRealMatrix#getData()",
        "org.apache.commons.math3.stat.regression.OLSMultipleLinearRegression#calculateBetaVariance()"
    ],
    "org.apache.commons.math3.optimization.fitting.GaussianFitter#fit(double[])$Parametric$1.<init>()": ["org.apache.commons.math3.analysis.function.Gaussian.Parametric.<init>()"],
    "org.apache.commons.math3.stat.descriptive.rank.Percentile#Percentile()": [
        "org.apache.commons.math3.stat.descriptive.rank.Percentile#Percentile(double)",
        "org.apache.commons.math3.stat.descriptive.rank.Percentile.EstimationType.<staticinit>()",
        "org.apache.commons.math3.stat.ranking.NaNStrategy.<staticinit>()"
    ],
    "org.apache.commons.math3.geometry.partitioning.AbstractRegion#isFull()": ["org.apache.commons.math3.geometry.partitioning.AbstractRegion#isFull(BSPTree<S extends Space>)"],
    "org.apache.commons.math3.distribution.UniformIntegerDistribution#UniformIntegerDistribution(int,int)": [
        "org.apache.commons.math3.random.Well19937c#Well19937c()",
        "org.apache.commons.math3.distribution.UniformIntegerDistribution#UniformIntegerDistribution(RandomGenerator,int,int)"
    ],
    "org.apache.commons.math3.geometry.euclidean.oned.Vector1DFormat#format(Vector<Euclidean1D>,StringBuffer,FieldPosition)": [
        "org.apache.commons.math3.geometry.VectorFormat#format(StringBuffer,FieldPosition,double[]...)",
        "org.apache.commons.math3.geometry.euclidean.oned.Vector1D#getX()"
    ],
    "org.apache.commons.math3.stat.descriptive.SynchronizedSummaryStatistics#setSumsqImpl(StorelessUnivariateStatistic)": ["org.apache.commons.math3.stat.descriptive.SummaryStatistics#setSumsqImpl(StorelessUnivariateStatistic)"],
    "org.apache.commons.math3.analysis.solvers.MullerSolver#MullerSolver()": [
        "org.apache.commons.math3.analysis.solvers.MullerSolver.<staticinit>()",
        "org.apache.commons.math3.analysis.solvers.MullerSolver#MullerSolver(double)"
    ],
    "org.apache.commons.math3.optimization.linear.LinearConstraint#equals(Object)": [
        "org.apache.commons.math3.linear.OpenMapRealVector#equals(Object)",
        "org.apache.commons.math3.linear.ArrayRealVector#equals(Object)",
        "org.apache.commons.math3.linear.RealVector#equals(Object)"
    ],
    "org.apache.commons.math3.stat.inference.TTest#tTest(StatisticalSummary,StatisticalSummary)": [
        "org.apache.commons.math3.stat.descriptive.SummaryStatistics#getVariance()",
        "org.apache.commons.math3.stat.descriptive.StatisticalSummaryValues#getVariance()",
        "org.apache.commons.math3.stat.descriptive.DescriptiveStatistics#getN()",
        "org.apache.commons.math3.stat.descriptive.AggregateSummaryStatistics#getMean()",
        "org.apache.commons.math3.stat.descriptive.SummaryStatistics#getMean()",
        "org.apache.commons.math3.stat.descriptive.SynchronizedSummaryStatistics#getVariance()",
        "org.apache.commons.math3.stat.descriptive.StatisticalSummaryValues#getN()",
        "org.apache.commons.math3.stat.descriptive.SummaryStatistics#getN()",
        "org.apache.commons.math3.stat.inference.TTest#tTest(double,double,double,double,double,double)",
        "org.apache.commons.math3.stat.descriptive.StatisticalSummaryValues#getMean()",
        "org.apache.commons.math3.stat.descriptive.AggregateSummaryStatistics#getN()",
        "org.apache.commons.math3.stat.inference.TTest#checkSampleData(StatisticalSummary)",
        "org.apache.commons.math3.stat.descriptive.SynchronizedSummaryStatistics#getN()",
        "org.apache.commons.math3.stat.descriptive.AggregateSummaryStatistics#getVariance()",
        "org.apache.commons.math3.stat.descriptive.DescriptiveStatistics#getMean()",
        "org.apache.commons.math3.stat.descriptive.SynchronizedDescriptiveStatistics#getN()",
        "org.apache.commons.math3.stat.descriptive.SynchronizedSummaryStatistics#getMean()",
        "org.apache.commons.math3.stat.descriptive.DescriptiveStatistics#getVariance()"
    ],
    "org.apache.commons.math3.distribution.MultivariateNormalDistribution#getCovariances()": [
        "org.apache.commons.math3.linear.Array2DRowRealMatrix#copy()",
        "org.apache.commons.math3.linear.BlockRealMatrix#copy()",
        "org.apache.commons.math3.linear.DiagonalMatrix#copy()",
        "org.apache.commons.math3.linear.OpenMapRealMatrix#copy()"
    ],
    "org.apache.commons.math3.linear.ArrayRealVector#getL1Distance(RealVector)": [
        "org.apache.commons.math3.linear.ArrayRealVector#checkVectorDimensions(int)",
        "org.apache.commons.math3.linear.ArrayRealVector#checkVectorDimensions(RealVector)",
        "org.apache.commons.math3.util.FastMath.abs(double)",
        "org.apache.commons.math3.linear.ArrayRealVector#getEntry(int)",
        "org.apache.commons.math3.linear.OpenMapRealVector#getEntry(int)",
        "org.apache.commons.math3.linear.RealVector.unmodifiableRealVector(RealVector)$RealVector$1#getEntry(int)"
    ],
    "org.apache.commons.math3.geometry.euclidean.threed.Line#reset(Vector3D,Vector3D)": [
        "org.apache.commons.math3.geometry.euclidean.threed.Vector3D#Vector3D(double,Vector3D)",
        "org.apache.commons.math3.util.FastMath.sqrt(double)",
        "org.apache.commons.math3.exception.util.LocalizedFormats.<staticinit>()",
        "org.apache.commons.math3.geometry.euclidean.threed.Vector3D#getNormSq()",
        "org.apache.commons.math3.geometry.euclidean.threed.Vector3D#Vector3D(double,Vector3D,double,Vector3D)",
        "org.apache.commons.math3.geometry.euclidean.threed.Vector3D#dotProduct(Vector<Euclidean3D>)",
        "org.apache.commons.math3.geometry.euclidean.threed.Vector3D#subtract(Vector<Euclidean3D>)"
    ],
    "org.apache.commons.math3.util.ResizableDoubleArray.<init>()": ["org.apache.commons.math3.util.ResizableDoubleArray.ExpansionMode.<staticinit>()"],
    "org.apache.commons.math3.random.Well512a#Well512a(long)": [
        "org.apache.commons.math3.random.Well512a.<staticinit>()",
        "org.apache.commons.math3.random.Well512a.<init>()",
        "org.apache.commons.math3.random.AbstractWell#AbstractWell(int,int,int,int,long)"
    ],
    "org.apache.commons.math3.distribution.AbstractMultivariateRealDistribution#AbstractMultivariateRealDistribution(RandomGenerator,int)": ["org.apache.commons.math3.distribution.AbstractMultivariateRealDistribution.<init>()"],
    "org.apache.commons.math3.util.OpenIntToFieldHashMap#iterator()": ["org.apache.commons.math3.util.OpenIntToFieldHashMap.Iterator#Iterator()"],
    "org.apache.commons.math3.distribution.MixtureMultivariateNormalDistribution#MixtureMultivariateNormalDistribution(double[],double[][],double[][][])": [
        "org.apache.commons.math3.distribution.MixtureMultivariateRealDistribution#MixtureMultivariateRealDistribution(List<Pair<Double, T extends MultivariateRealDistribution>>)",
        "org.apache.commons.math3.distribution.MixtureMultivariateNormalDistribution.<init>()",
        "org.apache.commons.math3.distribution.MixtureMultivariateNormalDistribution.createComponents(double[],double[][],double[][][])"
    ],
    "org.apache.commons.math3.stat.interval.WilsonScoreInterval#createInterval(int,int,double)": [
        "org.apache.commons.math3.util.FastMath.pow(double,int)",
        "org.apache.commons.math3.stat.interval.IntervalUtils.checkParameters(int,int,double)",
        "org.apache.commons.math3.stat.interval.ConfidenceInterval#ConfidenceInterval(double,double,double)",
        "org.apache.commons.math3.util.FastMath.sqrt(double)",
        "org.apache.commons.math3.distribution.NormalDistribution#NormalDistribution()",
        "org.apache.commons.math3.distribution.NormalDistribution#inverseCumulativeProbability(double)"
    ],
    "org.apache.commons.math3.linear.AbstractFieldMatrix#walkInColumnOrder(FieldMatrixPreservingVisitor<T extends FieldElement>)": [
        "org.apache.commons.math3.linear.SparseFieldMatrix#getEntry(int,int)",
        "org.apache.commons.math3.linear.BlockFieldMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.SparseFieldMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.AbstractFieldMatrix#transpose()$DefaultFieldMatrixPreservingVisitor$1#visit(int,int,T extends FieldElement)",
        "org.apache.commons.math3.linear.DefaultFieldMatrixPreservingVisitor#start(int,int,int,int,int,int)",
        "org.apache.commons.math3.linear.Array2DRowFieldMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.SparseFieldMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.BlockFieldMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.DefaultFieldMatrixPreservingVisitor#end()",
        "org.apache.commons.math3.linear.DefaultFieldMatrixPreservingVisitor#visit(int,int,T extends FieldElement)",
        "org.apache.commons.math3.linear.MatrixUtils.FractionMatrixConverter#start(int,int,int,int,int,int)",
        "org.apache.commons.math3.linear.MatrixUtils.BigFractionMatrixConverter#start(int,int,int,int,int,int)",
        "org.apache.commons.math3.linear.Array2DRowFieldMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.AbstractFieldMatrix#copySubMatrix(int,int,int,int,T extends FieldElement[][])$DefaultFieldMatrixPreservingVisitor$1#start(int,int,int,int,int,int)",
        "org.apache.commons.math3.linear.Array2DRowFieldMatrix#getEntry(int,int)",
        "org.apache.commons.math3.ode.nonstiff.AdamsMoultonFieldIntegrator.Corrector#start(int,int,int,int,int,int)",
        "org.apache.commons.math3.linear.BlockFieldMatrix#getEntry(int,int)",
        "org.apache.commons.math3.linear.AbstractFieldMatrix#copySubMatrix(int,int,int,int,T extends FieldElement[][])$DefaultFieldMatrixPreservingVisitor$1#visit(int,int,T extends FieldElement)",
        "org.apache.commons.math3.ode.nonstiff.AdamsMoultonFieldIntegrator.Corrector#end()"
    ],
    "org.apache.commons.math3.stat.ranking.NaturalRanking#NaturalRanking(TiesStrategy)": [
        "org.apache.commons.math3.stat.ranking.NaturalRanking.<init>()",
        "org.apache.commons.math3.stat.ranking.NaturalRanking.<staticinit>()",
        "org.apache.commons.math3.random.RandomDataGenerator#RandomDataGenerator()"
    ],
    "org.apache.commons.math3.optimization.direct.MultivariateFunctionMappingAdapter#value(double[])": [
        "org.apache.commons.math3.optim.nonlinear.scalar.MultivariateFunctionMappingAdapter#value(double[])",
        "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizer#doOptimize()$MultivariateFunction$1#value(double[])",
        "org.apache.commons.math3.optimization.direct.MultivariateFunctionMappingAdapter#value(double[])",
        "org.apache.commons.math3.analysis.FunctionUtils.toMultivariateDifferentiableFunction(DifferentiableMultivariateFunction)$MultivariateDifferentiableFunction$1#value(double[])",
        "org.apache.commons.math3.analysis.FunctionUtils.toDifferentiableMultivariateFunction(MultivariateDifferentiableFunction)$DifferentiableMultivariateFunction$1#value(double[])",
        "org.apache.commons.math3.analysis.interpolation.MicrosphereInterpolatingFunction#value(double[])",
        "org.apache.commons.math3.analysis.interpolation.MicrosphereProjectionInterpolator#interpolate(double[][],double[])$MultivariateFunction$1#value(double[])",
        "org.apache.commons.math3.optimization.direct.MultivariateFunctionPenaltyAdapter#value(double[])",
        "org.apache.commons.math3.optim.nonlinear.scalar.MultivariateFunctionPenaltyAdapter#value(double[])",
        "org.apache.commons.math3.optim.linear.LinearObjectiveFunction#value(double[])",
        "org.apache.commons.math3.analysis.FunctionUtils.collector(BivariateFunction,UnivariateFunction,double)$MultivariateFunction$1#value(double[])",
        "org.apache.commons.math3.optim.nonlinear.scalar.LeastSquaresConverter#value(double[])",
        "org.apache.commons.math3.analysis.FunctionUtils.toDifferentiableMultivariateFunction(MultivariateDifferentiableFunction)$MultivariateFunction$1$MultivariateFunction$1#partialDerivative(int)$MultivariateFunction$1#value(double[])",
        "org.apache.commons.math3.optimization.direct.MultivariateFunctionMappingAdapter#unboundedToBounded(double[])",
        "org.apache.commons.math3.optimization.LeastSquaresConverter#value(double[])",
        "org.apache.commons.math3.optimization.direct.SimplexOptimizer#doOptimize()$MultivariateFunction$1#value(double[])"
    ],
    "org.apache.commons.math3.analysis.function.Exp#value(DerivativeStructure)": ["org.apache.commons.math3.analysis.differentiation.DerivativeStructure#exp()"],
    "org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet.SubIntervalsIterator#selectPending()": [
        "org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet#isIntervalStart(BSPTree<Euclidean1D>)",
        "org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet#getAngle(BSPTree<Euclidean1D>)",
        "org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet#nextInternalNode(BSPTree<Euclidean1D>)",
        "org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet#isIntervalEnd(BSPTree<Euclidean1D>)"
    ],
    "org.apache.commons.math3.fraction.BigFractionField#BigFractionField()": ["org.apache.commons.math3.fraction.BigFractionField.<init>()"],
    "org.apache.commons.math3.linear.IterativeLinearSolverEvent#getResidual()": ["org.apache.commons.math3.exception.MathUnsupportedOperationException#MathUnsupportedOperationException()"],
    "org.apache.commons.math3.ode.AbstractIntegrator#AbstractIntegrator(String)": [
        "org.apache.commons.math3.ode.AbstractIntegrator.<init>()",
        "org.apache.commons.math3.util.IntegerSequence.Incrementor.create()",
        "org.apache.commons.math3.util.IntegerSequence.Incrementor#withMaximalCount(int)"
    ],
    "org.apache.commons.math3.geometry.euclidean.twod.Line#reset(Vector2D,double)": [
        "org.apache.commons.math3.geometry.euclidean.twod.Vector2D#getY()",
        "org.apache.commons.math3.geometry.euclidean.twod.Vector2D#getX()",
        "org.apache.commons.math3.util.FastMath.sin(double)",
        "org.apache.commons.math3.util.MathUtils.normalizeAngle(double,double)",
        "org.apache.commons.math3.util.MathArrays.linearCombination(double,double,double,double)",
        "org.apache.commons.math3.geometry.euclidean.twod.Line#unlinkReverse()",
        "org.apache.commons.math3.util.FastMath.<staticinit>()",
        "org.apache.commons.math3.util.FastMath.cos(double)"
    ],
    "org.apache.commons.math3.optimization.direct.BaseAbstractMultivariateSimpleBoundsOptimizer#BaseAbstractMultivariateSimpleBoundsOptimizer()": [
        "org.apache.commons.math3.optimization.direct.BaseAbstractMultivariateOptimizer#BaseAbstractMultivariateOptimizer()",
        "org.apache.commons.math3.optimization.direct.BaseAbstractMultivariateSimpleBoundsOptimizer.<init>()"
    ],
    "org.apache.commons.math3.geometry.spherical.twod.Sphere2D#getSubSpace()": ["org.apache.commons.math3.geometry.spherical.oned.Sphere1D.getInstance()"],
    "org.apache.commons.math3.stat.descriptive.AggregateSummaryStatistics#getVariance()": [
        "org.apache.commons.math3.stat.descriptive.SummaryStatistics#getVariance()",
        "org.apache.commons.math3.stat.descriptive.SynchronizedSummaryStatistics#getVariance()"
    ],
    "org.apache.commons.math3.linear.MatrixUtils.BigFractionMatrixConverter#BigFractionMatrixConverter()": [
        "org.apache.commons.math3.linear.DefaultFieldMatrixPreservingVisitor#DefaultFieldMatrixPreservingVisitor(T extends FieldElement)",
        "org.apache.commons.math3.linear.MatrixUtils.BigFractionMatrixConverter.<init>()",
        "org.apache.commons.math3.fraction.BigFraction.<staticinit>()"
    ],
    "org.apache.commons.math3.geometry.partitioning.RegionFactory#recurseComplement(BSPTree<S extends Space>)": [
        "org.apache.commons.math3.geometry.partitioning.BoundaryAttribute#getSplitters()",
        "org.apache.commons.math3.geometry.partitioning.RegionFactory#recurseComplement(BSPTree<S extends Space>,Map<BSPTree<S extends Space>, BSPTree<S extends Space>>)",
        "org.apache.commons.math3.geometry.partitioning.NodesSet#add(BSPTree<S extends Space>)"
    ],
    "org.apache.commons.math3.distribution.ZipfDistribution#getNumericalVariance()": ["org.apache.commons.math3.distribution.ZipfDistribution#calculateNumericalVariance()"],
    "org.apache.commons.math3.optim.linear.SimplexTableau#copyArray(double[],double[])": ["org.apache.commons.math3.optim.linear.SimplexTableau#getNumObjectiveFunctions()"],
    "org.apache.commons.math3.optimization.direct.BaseAbstractMultivariateVectorOptimizer.<init>()": ["org.apache.commons.math3.util.Incrementor#Incrementor()"],
    "org.apache.commons.math3.ode.AbstractFieldIntegrator#initIntegration(FieldExpandableODE<T extends RealFieldElement>,T extends RealFieldElement,T extends RealFieldElement[],T extends RealFieldElement)": [
        "org.apache.commons.math3.util.IntegerSequence.Incrementor#withStart(int)",
        "org.apache.commons.math3.ode.sampling.FieldStepNormalizer#init(FieldODEStateAndDerivative<T extends RealFieldElement>,T extends RealFieldElement)",
        "org.apache.commons.math3.ode.FieldExpandableODE#init(T extends RealFieldElement,T extends RealFieldElement[],T extends RealFieldElement)",
        "org.apache.commons.math3.ode.AbstractFieldIntegrator#setStateInitialized(boolean)",
        "org.apache.commons.math3.ode.AbstractFieldIntegrator#computeDerivatives(T extends RealFieldElement,T extends RealFieldElement[])",
        "org.apache.commons.math3.ode.ContinuousOutputFieldModel#init(FieldODEStateAndDerivative<T extends RealFieldElement>,T extends RealFieldElement)",
        "org.apache.commons.math3.ode.MultistepFieldIntegrator.FieldNordsieckInitializer#init(FieldODEStateAndDerivative<T extends RealFieldElement>,T extends RealFieldElement)",
        "org.apache.commons.math3.ode.events.FieldEventState#getEventHandler()",
        "org.apache.commons.math3.ode.FieldODEStateAndDerivative#FieldODEStateAndDerivative(T extends RealFieldElement,T extends RealFieldElement[],T extends RealFieldElement[])"
    ],
    "org.apache.commons.math3.linear.PreconditionedIterativeLinearSolver#solveInPlace(RealLinearOperator,RealVector,RealVector)": [
        "org.apache.commons.math3.linear.ConjugateGradient#solveInPlace(RealLinearOperator,RealLinearOperator,RealVector,RealVector)",
        "org.apache.commons.math3.linear.SymmLQ#solveInPlace(RealLinearOperator,RealLinearOperator,RealVector,RealVector)"
    ],
    "org.apache.commons.math3.linear.MatrixUtils.solveLowerTriangularSystem(RealMatrix,RealVector)": [
        "org.apache.commons.math3.linear.DiagonalMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.Array2DRowRealMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.BlockFieldMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.DiagonalMatrix#getEntry(int,int)",
        "org.apache.commons.math3.exception.util.LocalizedFormats.<staticinit>()",
        "org.apache.commons.math3.linear.OpenMapRealVector#setEntry(int,double)",
        "org.apache.commons.math3.linear.OpenMapRealMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.DiagonalMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.ArrayRealVector#setEntry(int,double)",
        "org.apache.commons.math3.linear.BlockRealMatrix#getEntry(int,int)",
        "org.apache.commons.math3.linear.OpenMapRealVector#getDimension()",
        "org.apache.commons.math3.exception.DimensionMismatchException#DimensionMismatchException(int,int)",
        "org.apache.commons.math3.linear.BlockFieldMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.BlockRealMatrix#getRowDimension()",
        "org.apache.commons.math3.util.Precision.<staticinit>()",
        "org.apache.commons.math3.util.FastMath.abs(double)",
        "org.apache.commons.math3.linear.NonSquareMatrixException#NonSquareMatrixException(int,int)",
        "org.apache.commons.math3.linear.RealVector.unmodifiableRealVector(RealVector)$RealVector$1#getDimension()",
        "org.apache.commons.math3.linear.ArrayRealVector#getDimension()",
        "org.apache.commons.math3.linear.SparseFieldMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.OpenMapRealMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.ArrayRealVector#getEntry(int)",
        "org.apache.commons.math3.linear.OpenMapRealMatrix#getEntry(int,int)",
        "org.apache.commons.math3.linear.RealVector.unmodifiableRealVector(RealVector)$RealVector$1#setEntry(int,double)",
        "org.apache.commons.math3.linear.Array2DRowFieldMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.SparseFieldMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.Array2DRowRealMatrix#getEntry(int,int)",
        "org.apache.commons.math3.linear.Array2DRowRealMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.Array2DRowFieldMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.BlockRealMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.OpenMapRealVector#getEntry(int)",
        "org.apache.commons.math3.linear.RealVector.unmodifiableRealVector(RealVector)$RealVector$1#getEntry(int)"
    ],
    "org.apache.commons.math3.util.Decimal64#remainder(double)": [
        "org.apache.commons.math3.util.Decimal64#Decimal64(double)",
        "org.apache.commons.math3.util.FastMath.IEEEremainder(double,double)"
    ],
    "org.apache.commons.math3.geometry.partitioning.BSPTree#getCell(Point<S extends Space>,double)": [
        "org.apache.commons.math3.util.FastMath.abs(double)",
        "org.apache.commons.math3.geometry.partitioning.BSPTree#getCell(Point<S extends Space>,double)",
        "org.apache.commons.math3.geometry.partitioning.AbstractSubHyperplane#getHyperplane()"
    ],
    "org.apache.commons.math3.analysis.function.Atan#value(DerivativeStructure)": ["org.apache.commons.math3.analysis.differentiation.DerivativeStructure#atan()"],
    "org.apache.commons.math3.dfp.Dfp#power10(int)": [
        "org.apache.commons.math3.dfp.DfpDec#newInstance(Dfp)",
        "org.apache.commons.math3.dfp.Dfp#getOne()",
        "org.apache.commons.math3.dfp.Dfp#multiply(int)",
        "org.apache.commons.math3.dfp.Dfp#newInstance(Dfp)"
    ],
    "org.apache.commons.math3.linear.RealVector.unmodifiableRealVector(RealVector).UnmodifiableEntry.UnmodifiableEntry.<init>()": ["org.apache.commons.math3.linear.RealVector.Entry#Entry()"],
    "org.apache.commons.math3.stat.regression.OLSMultipleLinearRegression#calculateBetaVariance()": [
        "org.apache.commons.math3.linear.DiagonalMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.Array2DRowRealMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.BlockFieldMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.CholeskyDecomposition.Solver#getInverse()",
        "org.apache.commons.math3.linear.EigenDecomposition.Solver#getInverse()",
        "org.apache.commons.math3.linear.LUDecomposition#getSolver()",
        "org.apache.commons.math3.linear.OpenMapRealMatrix#multiply(RealMatrix)",
        "org.apache.commons.math3.linear.BlockRealMatrix#getSubMatrix(int,int,int,int)",
        "org.apache.commons.math3.linear.OpenMapRealMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.SingularValueDecomposition.Solver#getInverse()",
        "org.apache.commons.math3.linear.RRQRDecomposition.Solver#getInverse()",
        "org.apache.commons.math3.linear.LUDecomposition#LUDecomposition(RealMatrix)",
        "org.apache.commons.math3.linear.DiagonalMatrix#multiply(RealMatrix)",
        "org.apache.commons.math3.stat.regression.AbstractMultipleLinearRegression#getX()",
        "org.apache.commons.math3.linear.BlockRealMatrix#multiply(RealMatrix)",
        "org.apache.commons.math3.linear.LUDecomposition.Solver#getInverse()",
        "org.apache.commons.math3.linear.BlockRealMatrix#transpose()",
        "org.apache.commons.math3.linear.Array2DRowFieldMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.SparseFieldMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.QRDecomposition.Solver#getInverse()",
        "org.apache.commons.math3.linear.AbstractRealMatrix#multiply(RealMatrix)",
        "org.apache.commons.math3.linear.AbstractRealMatrix#transpose()",
        "org.apache.commons.math3.linear.BlockRealMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.AbstractRealMatrix#getSubMatrix(int,int,int,int)",
        "org.apache.commons.math3.linear.QRDecomposition#getR()"
    ],
    "org.apache.commons.math3.ml.neuralnet.Neuron#compareAndSetFeatures(double[],double[])": [
        "org.apache.commons.math3.exception.DimensionMismatchException#DimensionMismatchException(int,int)",
        "org.apache.commons.math3.ml.neuralnet.Neuron#containSameValues(double[],double[])"
    ],
    "org.apache.commons.math3.random.EmpiricalDistribution#cumulativeProbability(double)": [
        "org.apache.commons.math3.distribution.BetaDistribution#cumulativeProbability(double)",
        "org.apache.commons.math3.distribution.CauchyDistribution#getNumericalMean()",
        "org.apache.commons.math3.distribution.ConstantRealDistribution#cumulativeProbability(double)",
        "org.apache.commons.math3.distribution.TDistribution#getNumericalMean()",
        "org.apache.commons.math3.distribution.LogNormalDistribution#getNumericalMean()",
        "org.apache.commons.math3.distribution.EnumeratedRealDistribution#getNumericalMean()",
        "org.apache.commons.math3.random.EmpiricalDistribution#getNumericalMean()",
        "org.apache.commons.math3.distribution.LogisticDistribution#getNumericalMean()",
        "org.apache.commons.math3.distribution.LaplaceDistribution#cumulativeProbability(double)",
        "org.apache.commons.math3.distribution.ConstantRealDistribution#getNumericalMean()",
        "org.apache.commons.math3.distribution.NormalDistribution#getNumericalMean()",
        "org.apache.commons.math3.distribution.EnumeratedRealDistribution#cumulativeProbability(double)",
        "org.apache.commons.math3.distribution.TriangularDistribution#cumulativeProbability(double)",
        "org.apache.commons.math3.distribution.WeibullDistribution#cumulativeProbability(double)",
        "org.apache.commons.math3.random.EmpiricalDistribution#findBin(double)",
        "org.apache.commons.math3.distribution.WeibullDistribution#getNumericalMean()",
        "org.apache.commons.math3.distribution.LogNormalDistribution#cumulativeProbability(double)",
        "org.apache.commons.math3.distribution.FDistribution#getNumericalMean()",
        "org.apache.commons.math3.distribution.FDistribution#cumulativeProbability(double)",
        "org.apache.commons.math3.distribution.GumbelDistribution#getNumericalMean()",
        "org.apache.commons.math3.distribution.LevyDistribution#getNumericalMean()",
        "org.apache.commons.math3.distribution.ExponentialDistribution#getNumericalMean()",
        "org.apache.commons.math3.random.EmpiricalDistribution#kB(int)",
        "org.apache.commons.math3.random.EmpiricalDistribution#k(double)",
        "org.apache.commons.math3.distribution.ChiSquaredDistribution#getNumericalMean()",
        "org.apache.commons.math3.distribution.NormalDistribution#cumulativeProbability(double)",
        "org.apache.commons.math3.distribution.ChiSquaredDistribution#cumulativeProbability(double)",
        "org.apache.commons.math3.distribution.UniformRealDistribution#cumulativeProbability(double)",
        "org.apache.commons.math3.random.EmpiricalDistribution#getUpperBounds()",
        "org.apache.commons.math3.distribution.GammaDistribution#getNumericalMean()",
        "org.apache.commons.math3.distribution.ParetoDistribution#getNumericalMean()",
        "org.apache.commons.math3.distribution.ParetoDistribution#cumulativeProbability(double)",
        "org.apache.commons.math3.distribution.NakagamiDistribution#getNumericalMean()",
        "org.apache.commons.math3.distribution.GumbelDistribution#cumulativeProbability(double)",
        "org.apache.commons.math3.random.EmpiricalDistribution#pB(int)",
        "org.apache.commons.math3.distribution.LevyDistribution#cumulativeProbability(double)",
        "org.apache.commons.math3.distribution.TriangularDistribution#getNumericalMean()",
        "org.apache.commons.math3.random.EmpiricalDistribution#cumulativeProbability(double)",
        "org.apache.commons.math3.random.EmpiricalDistribution#pBminus(int)",
        "org.apache.commons.math3.distribution.TDistribution#cumulativeProbability(double)",
        "org.apache.commons.math3.distribution.LogisticDistribution#cumulativeProbability(double)",
        "org.apache.commons.math3.distribution.UniformRealDistribution#getNumericalMean()",
        "org.apache.commons.math3.distribution.GammaDistribution#cumulativeProbability(double)",
        "org.apache.commons.math3.distribution.LaplaceDistribution#getNumericalMean()",
        "org.apache.commons.math3.distribution.ExponentialDistribution#cumulativeProbability(double)",
        "org.apache.commons.math3.distribution.CauchyDistribution#cumulativeProbability(double)",
        "org.apache.commons.math3.distribution.BetaDistribution#getNumericalMean()",
        "org.apache.commons.math3.distribution.NakagamiDistribution#cumulativeProbability(double)"
    ],
    "org.apache.commons.math3.random.SynchronizedRandomGenerator#nextInt(int)": [
        "org.apache.commons.math3.random.BitsStreamGenerator#nextInt(int)",
        "org.apache.commons.math3.random.AbstractRandomGenerator#nextInt(int)",
        "org.apache.commons.math3.random.SynchronizedRandomGenerator#nextInt(int)",
        "org.apache.commons.math3.random.RandomAdaptor#nextInt(int)",
        "org.apache.commons.math3.random.RandomGeneratorFactory.createRandomGenerator(Random)$RandomGenerator$1#nextInt(int)"
    ],
    "org.apache.commons.math3.geometry.enclosing.WelzlEncloser#WelzlEncloser(double,SupportBallGenerator<S extends Space, P extends Point>)": ["org.apache.commons.math3.geometry.enclosing.WelzlEncloser.<init>()"],
    "org.apache.commons.math3.linear.SparseFieldVector#subtract(SparseFieldVector<T extends FieldElement>)": [
        "org.apache.commons.math3.linear.SparseFieldVector#checkVectorDimensions(int)",
        "org.apache.commons.math3.util.OpenIntToFieldHashMap#get(int)",
        "org.apache.commons.math3.util.OpenIntToFieldHashMap.Iterator#hasNext()",
        "org.apache.commons.math3.linear.SparseFieldVector#copy()",
        "org.apache.commons.math3.util.OpenIntToFieldHashMap.Iterator#key()",
        "org.apache.commons.math3.util.OpenIntToFieldHashMap.Iterator#value()",
        "org.apache.commons.math3.util.BigRealField#getZero()",
        "org.apache.commons.math3.analysis.differentiation.SparseGradient#getField()$Field$1#getZero()",
        "org.apache.commons.math3.util.Decimal64Field#getZero()",
        "org.apache.commons.math3.dfp.DfpField#getZero()",
        "org.apache.commons.math3.util.OpenIntToFieldHashMap.Iterator#advance()",
        "org.apache.commons.math3.linear.SparseFieldVector#getEntries()",
        "org.apache.commons.math3.util.OpenIntToFieldHashMap#containsKey(int)",
        "org.apache.commons.math3.analysis.differentiation.DerivativeStructure#getField()$Field$1#getZero()",
        "org.apache.commons.math3.fraction.FractionField#getZero()",
        "org.apache.commons.math3.linear.SparseFieldVector#setEntry(int,T extends FieldElement)",
        "org.apache.commons.math3.linear.SparseFieldVector#getDimension()",
        "org.apache.commons.math3.util.OpenIntToFieldHashMap#iterator()",
        "org.apache.commons.math3.complex.ComplexField#getZero()",
        "org.apache.commons.math3.fraction.BigFractionField#getZero()"
    ],
    "org.apache.commons.math3.optimization.PointVectorValuePair#writeReplace()": [
        "org.apache.commons.math3.util.Pair#getKey()",
        "org.apache.commons.math3.optimization.PointVectorValuePair#getValue()"
    ],
    "org.apache.commons.math3.stat.descriptive.SynchronizedDescriptiveStatistics#getN()": ["org.apache.commons.math3.stat.descriptive.DescriptiveStatistics#getN()"],
    "org.apache.commons.math3.linear.DiagonalMatrix#DiagonalMatrix(int)": [
        "org.apache.commons.math3.linear.DiagonalMatrix.<init>()",
        "org.apache.commons.math3.linear.AbstractRealMatrix#AbstractRealMatrix(int,int)"
    ],
    "org.apache.commons.math3.fitting.leastsquares.LeastSquaresAdapter#getIterationCounter()": [
        "org.apache.commons.math3.optim.AbstractOptimizationProblem#getIterationCounter()",
        "org.apache.commons.math3.fitting.leastsquares.LeastSquaresAdapter#getIterationCounter()"
    ],
    "org.apache.commons.math3.util.FastMath.tanQ(double,double,boolean)": [
        "org.apache.commons.math3.util.FastMath.<staticinit>()",
        "org.apache.commons.math3.util.FastMath.polySine(double)",
        "org.apache.commons.math3.util.FastMath.polyCosine(double)"
    ],
    "org.apache.commons.math3.random.ISAACRandom#setSeed(int[])": [
        "org.apache.commons.math3.random.ISAACRandom#initState()",
        "org.apache.commons.math3.util.FastMath.min(int,int)",
        "org.apache.commons.math3.random.ISAACRandom#setSeed(long)"
    ],
    "org.apache.commons.math3.linear.SparseFieldMatrix#addToEntry(int,int,T extends FieldElement)": [
        "org.apache.commons.math3.util.OpenIntToFieldHashMap#get(int)",
        "org.apache.commons.math3.util.BigRealField#getZero()",
        "org.apache.commons.math3.analysis.differentiation.SparseGradient#getField()$Field$1#getZero()",
        "org.apache.commons.math3.util.Decimal64Field#getZero()",
        "org.apache.commons.math3.dfp.DfpField#getZero()",
        "org.apache.commons.math3.linear.AbstractFieldMatrix#getField()",
        "org.apache.commons.math3.util.OpenIntToFieldHashMap#remove(int)",
        "org.apache.commons.math3.analysis.differentiation.DerivativeStructure#getField()$Field$1#getZero()",
        "org.apache.commons.math3.fraction.FractionField#getZero()",
        "org.apache.commons.math3.complex.ComplexField#getZero()",
        "org.apache.commons.math3.linear.SparseFieldMatrix#computeKey(int,int)",
        "org.apache.commons.math3.fraction.BigFractionField#getZero()",
        "org.apache.commons.math3.linear.AbstractFieldMatrix#checkColumnIndex(int)",
        "org.apache.commons.math3.util.OpenIntToFieldHashMap#put(int,T extends FieldElement)",
        "org.apache.commons.math3.linear.AbstractFieldMatrix#checkRowIndex(int)"
    ],
    "org.apache.commons.math3.optimization.fitting.CurveFitter.OldTheoreticalValuesFunction#OldTheoreticalValuesFunction(ParametricUnivariateFunction)": ["org.apache.commons.math3.optimization.fitting.CurveFitter.OldTheoreticalValuesFunction.<init>()"],
    "org.apache.commons.math3.fraction.BigFractionField.LazyHolder.<staticinit>()": ["org.apache.commons.math3.fraction.BigFractionField#BigFractionField()"],
    "org.apache.commons.math3.geometry.euclidean.oned.Vector1D#Vector1D(double,Vector1D)": ["org.apache.commons.math3.geometry.euclidean.oned.Vector1D.<init>()"],
    "org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet#PolygonsSet(double)": [
        "org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.<init>()",
        "org.apache.commons.math3.geometry.partitioning.AbstractRegion#AbstractRegion(double)"
    ],
    "org.apache.commons.math3.distribution.MultivariateNormalDistribution#getMeans()": ["org.apache.commons.math3.util.MathArrays.copyOf(double[])"],
    "org.apache.commons.math3.stat.descriptive.SynchronizedDescriptiveStatistics#getElement(int)": ["org.apache.commons.math3.stat.descriptive.DescriptiveStatistics#getElement(int)"],
    "org.apache.commons.math3.analysis.function.Sinh#value(DerivativeStructure)": ["org.apache.commons.math3.analysis.differentiation.DerivativeStructure#sinh()"],
    "org.apache.commons.math3.distribution.HypergeometricDistribution#calculateNumericalVariance()": [
        "org.apache.commons.math3.distribution.HypergeometricDistribution#getSampleSize()",
        "org.apache.commons.math3.distribution.HypergeometricDistribution#getNumberOfSuccesses()",
        "org.apache.commons.math3.distribution.HypergeometricDistribution#getPopulationSize()"
    ],
    "org.apache.commons.math3.util.BigReal#multiply(BigReal)": ["org.apache.commons.math3.util.BigReal#BigReal(char[])"],
    "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer#updateCovarianceDiagonalOnly(boolean,RealMatrix)": [
        "org.apache.commons.math3.linear.BlockRealMatrix#scalarMultiply(double)",
        "org.apache.commons.math3.linear.OpenMapRealMatrix#multiply(RealMatrix)",
        "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer.diag(RealMatrix)",
        "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer.times(RealMatrix,RealMatrix)",
        "org.apache.commons.math3.linear.AbstractRealMatrix#multiply(RealMatrix)",
        "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer.sqrt(RealMatrix)",
        "org.apache.commons.math3.linear.AbstractRealMatrix#scalarMultiply(double)",
        "org.apache.commons.math3.linear.BlockRealMatrix#add(RealMatrix)",
        "org.apache.commons.math3.linear.AbstractRealMatrix#add(RealMatrix)",
        "org.apache.commons.math3.linear.DiagonalMatrix#multiply(RealMatrix)",
        "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer.square(RealMatrix)",
        "org.apache.commons.math3.linear.BlockRealMatrix#multiply(RealMatrix)",
        "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer.eye(int,int)"
    ],
    "org.apache.commons.math3.random.RandomDataGenerator#nextPermutation(int,int)": [
        "org.apache.commons.math3.util.MathArrays.natural(int)",
        "org.apache.commons.math3.random.RandomDataGenerator#getRandomGenerator()",
        "org.apache.commons.math3.util.MathArrays.copyOf(int[],int)",
        "org.apache.commons.math3.util.MathArrays.shuffle(int[],RandomGenerator)",
        "org.apache.commons.math3.exception.util.LocalizedFormats.<staticinit>()"
    ],
    "org.apache.commons.math3.optim.PointValuePair#PointValuePair(double[],double)": ["org.apache.commons.math3.optim.PointValuePair#PointValuePair(double[],double,boolean)"],
    "org.apache.commons.math3.ode.sampling.FieldStepNormalizer#FieldStepNormalizer(double,FieldFixedStepHandler<T extends RealFieldElement>)": [
        "org.apache.commons.math3.ode.sampling.StepNormalizerBounds.<staticinit>()",
        "org.apache.commons.math3.ode.sampling.StepNormalizerMode.<staticinit>()",
        "org.apache.commons.math3.ode.sampling.FieldStepNormalizer#FieldStepNormalizer(double,FieldFixedStepHandler<T extends RealFieldElement>,StepNormalizerMode,StepNormalizerBounds)"
    ],
    "org.apache.commons.math3.geometry.partitioning.BSPTree#merge(BSPTree<S extends Space>,LeafMerger<S extends Space>,BSPTree<S extends Space>,boolean)": [
        "org.apache.commons.math3.geometry.partitioning.BSPTree#condense()",
        "org.apache.commons.math3.geometry.euclidean.oned.OrientedPoint#wholeHyperplane()",
        "org.apache.commons.math3.geometry.partitioning.RegionFactory.XorMerger#merge(BSPTree<S extends Space>,BSPTree<S extends Space>,BSPTree<S extends Space>,boolean,boolean)",
        "org.apache.commons.math3.geometry.euclidean.twod.Line#wholeHyperplane()",
        "org.apache.commons.math3.geometry.partitioning.RegionFactory.DifferenceMerger#merge(BSPTree<S extends Space>,BSPTree<S extends Space>,BSPTree<S extends Space>,boolean,boolean)",
        "org.apache.commons.math3.geometry.partitioning.BSPTree#merge(BSPTree<S extends Space>,LeafMerger<S extends Space>,BSPTree<S extends Space>,boolean)",
        "org.apache.commons.math3.geometry.euclidean.threed.Plane#wholeHyperplane()",
        "org.apache.commons.math3.geometry.partitioning.BSPTree#fitToCell(SubHyperplane<S extends Space>)",
        "org.apache.commons.math3.geometry.spherical.twod.Circle#wholeHyperplane()",
        "org.apache.commons.math3.geometry.spherical.oned.LimitAngle#wholeHyperplane()",
        "org.apache.commons.math3.geometry.partitioning.RegionFactory.UnionMerger#merge(BSPTree<S extends Space>,BSPTree<S extends Space>,BSPTree<S extends Space>,boolean,boolean)",
        "org.apache.commons.math3.geometry.partitioning.BSPTree#split(SubHyperplane<S extends Space>)",
        "org.apache.commons.math3.geometry.partitioning.AbstractSubHyperplane#getHyperplane()",
        "org.apache.commons.math3.geometry.partitioning.RegionFactory.IntersectionMerger#merge(BSPTree<S extends Space>,BSPTree<S extends Space>,BSPTree<S extends Space>,boolean,boolean)"
    ],
    "org.apache.commons.math3.analysis.function.Sin#derivative()": ["org.apache.commons.math3.analysis.function.Cos.<init>()"],
    "org.apache.commons.math3.stat.correlation.StorelessCovariance#increment(double[])": [
        "org.apache.commons.math3.exception.DimensionMismatchException#DimensionMismatchException(int,int)",
        "org.apache.commons.math3.stat.correlation.StorelessBivariateCovariance#increment(double,double)",
        "org.apache.commons.math3.stat.correlation.StorelessCovariance#getElement(int,int)"
    ],
    "org.apache.commons.math3.linear.AbstractFieldMatrix#setRowMatrix(int,FieldMatrix<T extends FieldElement>)": [
        "org.apache.commons.math3.linear.SparseFieldMatrix#getEntry(int,int)",
        "org.apache.commons.math3.linear.DiagonalMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.Array2DRowRealMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.BlockFieldMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.SparseFieldMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.OpenMapRealMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.SparseFieldMatrix#setEntry(int,int,T extends FieldElement)",
        "org.apache.commons.math3.linear.Array2DRowFieldMatrix#setEntry(int,int,T extends FieldElement)",
        "org.apache.commons.math3.linear.BlockFieldMatrix#setEntry(int,int,T extends FieldElement)",
        "org.apache.commons.math3.linear.OpenMapRealMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.DiagonalMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.Array2DRowFieldMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.SparseFieldMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.BlockFieldMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.BlockRealMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.Array2DRowRealMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.Array2DRowFieldMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.BlockRealMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.Array2DRowFieldMatrix#getEntry(int,int)",
        "org.apache.commons.math3.linear.MatrixDimensionMismatchException#MatrixDimensionMismatchException(int,int,int,int)",
        "org.apache.commons.math3.linear.BlockFieldMatrix#getEntry(int,int)",
        "org.apache.commons.math3.linear.AbstractFieldMatrix#checkRowIndex(int)"
    ],
    "org.apache.commons.math3.stat.descriptive.moment.Skewness#Skewness()": [
        "org.apache.commons.math3.stat.descriptive.AbstractStorelessUnivariateStatistic.<init>()",
        "org.apache.commons.math3.stat.descriptive.moment.ThirdMoment#ThirdMoment()",
        "org.apache.commons.math3.stat.descriptive.moment.Skewness.<init>()"
    ],
    "org.apache.commons.math3.geometry.euclidean.threed.SubLine#SubLine(Segment)": [
        "org.apache.commons.math3.geometry.euclidean.threed.Segment#getStart()",
        "org.apache.commons.math3.geometry.euclidean.threed.Line#getTolerance()",
        "org.apache.commons.math3.geometry.euclidean.threed.Segment#getLine()",
        "org.apache.commons.math3.geometry.euclidean.threed.Segment#getEnd()",
        "org.apache.commons.math3.geometry.euclidean.threed.SubLine.buildIntervalSet(Vector3D,Vector3D,double)",
        "org.apache.commons.math3.geometry.euclidean.threed.SubLine#SubLine(Line,IntervalsSet)"
    ],
    "org.apache.commons.math3.ode.nonstiff.EulerFieldIntegrator#EulerFieldIntegrator(Field<T extends RealFieldElement>,T extends RealFieldElement)": [
        "org.apache.commons.math3.ode.nonstiff.RungeKuttaFieldIntegrator#RungeKuttaFieldIntegrator(Field<T extends RealFieldElement>,String,T extends RealFieldElement)",
        "org.apache.commons.math3.ode.nonstiff.EulerFieldIntegrator.<init>()"
    ],
    "org.apache.commons.math3.linear.SparseFieldVector#mapDivide(T extends FieldElement)": [
        "org.apache.commons.math3.linear.SparseFieldVector#copy()",
        "org.apache.commons.math3.linear.SparseFieldVector#mapDivideToSelf(T extends FieldElement)",
        "org.apache.commons.math3.linear.ArrayFieldVector#mapDivideToSelf(T extends FieldElement)"
    ],
    "org.apache.commons.math3.dfp.DfpDec#round(int)": [
        "org.apache.commons.math3.dfp.DfpField.RoundingMode.<staticinit>()",
        "org.apache.commons.math3.dfp.Dfp.<staticinit>()",
        "org.apache.commons.math3.dfp.Dfp#shiftRight()",
        "org.apache.commons.math3.dfp.DfpField.<staticinit>()",
        "org.apache.commons.math3.dfp.Dfp#round(int)",
        "org.apache.commons.math3.dfp.DfpField#getRoundingMode()",
        "org.apache.commons.math3.dfp.DfpField#setIEEEFlagsBits(int)",
        "org.apache.commons.math3.dfp.DfpDec#getDecimalDigits()",
        "org.apache.commons.math3.dfp.Dfp#getField()"
    ],
    "org.apache.commons.math3.optimization.univariate.BaseUnivariateOptimizer#optimize(int,FUNC extends UnivariateFunction,GoalType,double,double,double)": ["org.apache.commons.math3.optimization.GoalType.<staticinit>()"],
    "org.apache.commons.math3.util.OpenIntToDoubleHashMap#remove(int)": [
        "org.apache.commons.math3.util.OpenIntToDoubleHashMap.<staticinit>()",
        "org.apache.commons.math3.util.OpenIntToDoubleHashMap#containsKey(int,int)",
        "org.apache.commons.math3.util.OpenIntToDoubleHashMap#doRemove(int)",
        "org.apache.commons.math3.util.OpenIntToDoubleHashMap.probe(int,int)",
        "org.apache.commons.math3.util.OpenIntToDoubleHashMap.perturb(int)",
        "org.apache.commons.math3.util.OpenIntToDoubleHashMap.hashOf(int)"
    ],
    "org.apache.commons.math3.linear.RealMatrixFormat.getAvailableLocales()": [
        "org.apache.commons.math3.fraction.BigFractionFormat.getAvailableLocales()",
        "org.apache.commons.math3.fraction.FractionFormat.getAvailableLocales()"
    ],
    "org.apache.commons.math3.optimization.linear.LinearObjectiveFunction#hashCode()": [
        "org.apache.commons.math3.linear.ArrayRealVector#hashCode()",
        "org.apache.commons.math3.linear.RealVector#hashCode()",
        "org.apache.commons.math3.linear.OpenMapRealVector#hashCode()"
    ],
    "org.apache.commons.math3.linear.JacobiPreconditioner.create(RealLinearOperator)": [
        "org.apache.commons.math3.linear.DiagonalMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.Array2DRowRealMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.DiagonalMatrix#getEntry(int,int)",
        "org.apache.commons.math3.linear.OpenMapRealMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.JacobiPreconditioner#operate(RealVector)",
        "org.apache.commons.math3.linear.DiagonalMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.ArrayRealVector#setEntry(int,double)",
        "org.apache.commons.math3.linear.BlockRealMatrix#getEntry(int,int)",
        "org.apache.commons.math3.linear.NonSquareOperatorException#NonSquareOperatorException(int,int)",
        "org.apache.commons.math3.linear.BlockRealMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.JacobiPreconditioner#sqrt()$RealLinearOperator$1#getRowDimension()",
        "org.apache.commons.math3.linear.JacobiPreconditioner#JacobiPreconditioner(double[],boolean)",
        "org.apache.commons.math3.linear.JacobiPreconditioner#sqrt()$RealLinearOperator$1#operate(RealVector)",
        "org.apache.commons.math3.linear.JacobiPreconditioner#getRowDimension()",
        "org.apache.commons.math3.linear.ArrayRealVector#ArrayRealVector(int)",
        "org.apache.commons.math3.linear.JacobiPreconditioner#getColumnDimension()",
        "org.apache.commons.math3.linear.OpenMapRealMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.JacobiPreconditioner#sqrt()$RealLinearOperator$1#getColumnDimension()",
        "org.apache.commons.math3.linear.OpenMapRealMatrix#getEntry(int,int)",
        "org.apache.commons.math3.linear.ArrayRealVector#getEntry(int)",
        "org.apache.commons.math3.linear.Array2DRowRealMatrix#getEntry(int,int)",
        "org.apache.commons.math3.linear.Array2DRowRealMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.ArrayRealVector#set(double)",
        "org.apache.commons.math3.linear.AbstractRealMatrix#operate(RealVector)",
        "org.apache.commons.math3.linear.BlockRealMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.OpenMapRealVector#getEntry(int)",
        "org.apache.commons.math3.linear.RealVector.unmodifiableRealVector(RealVector)$RealVector$1#getEntry(int)"
    ],
    "org.apache.commons.math3.fitting.leastsquares.LeastSquaresFactory.squareRoot(RealMatrix)": [
        "org.apache.commons.math3.linear.EigenDecomposition#EigenDecomposition(RealMatrix)",
        "org.apache.commons.math3.linear.Array2DRowRealMatrix#setEntry(int,int,double)",
        "org.apache.commons.math3.linear.SparseFieldMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.DiagonalMatrix#getEntry(int,int)",
        "org.apache.commons.math3.linear.OpenMapRealMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.DiagonalMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.BlockRealMatrix#setEntry(int,int,double)",
        "org.apache.commons.math3.linear.OpenMapRealMatrix#setEntry(int,int,double)",
        "org.apache.commons.math3.linear.OpenMapRealMatrix#getEntry(int,int)",
        "org.apache.commons.math3.linear.EigenDecomposition#getSquareRoot()",
        "org.apache.commons.math3.linear.BlockRealMatrix#getEntry(int,int)",
        "org.apache.commons.math3.linear.BlockFieldMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.Array2DRowRealMatrix#getEntry(int,int)",
        "org.apache.commons.math3.linear.BlockRealMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.Array2DRowRealMatrix#getRowDimension()",
        "org.apache.commons.math3.util.FastMath.sqrt(double)",
        "org.apache.commons.math3.linear.Array2DRowFieldMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.DiagonalMatrix#setEntry(int,int,double)",
        "org.apache.commons.math3.linear.DiagonalMatrix#DiagonalMatrix(int)"
    ],
    "org.apache.commons.math3.stat.descriptive.MultivariateSummaryStatistics#getMean()": ["org.apache.commons.math3.stat.descriptive.MultivariateSummaryStatistics#getResults(StorelessUnivariateStatistic[])"],
    "org.apache.commons.math3.geometry.euclidean.twod.Line.LineTransform#apply(SubHyperplane<Euclidean1D>,Hyperplane<Euclidean2D>,Hyperplane<Euclidean2D>)": [
        "org.apache.commons.math3.geometry.euclidean.twod.Line#toSubSpace(Vector<Euclidean2D>)",
        "org.apache.commons.math3.geometry.euclidean.oned.OrientedPoint#wholeHyperplane()",
        "org.apache.commons.math3.geometry.euclidean.oned.OrientedPoint#getLocation()",
        "org.apache.commons.math3.geometry.euclidean.twod.Line#toSpace(Vector<Euclidean1D>)",
        "org.apache.commons.math3.geometry.euclidean.oned.OrientedPoint#isDirect()",
        "org.apache.commons.math3.geometry.euclidean.twod.Line.LineTransform#apply(Point<Euclidean2D>)",
        "org.apache.commons.math3.geometry.partitioning.AbstractSubHyperplane#getHyperplane()",
        "org.apache.commons.math3.geometry.euclidean.oned.OrientedPoint#OrientedPoint(Vector1D,boolean,double)"
    ],
    "org.apache.commons.math3.stat.descriptive.SummaryStatistics#getVariance()": [
        "org.apache.commons.math3.stat.descriptive.moment.FirstMoment#getResult()",
        "org.apache.commons.math3.stat.descriptive.rank.Min#getResult()",
        "org.apache.commons.math3.stat.descriptive.moment.GeometricMean#getResult()",
        "org.apache.commons.math3.stat.descriptive.moment.Variance#getResult()",
        "org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile#getResult()",
        "org.apache.commons.math3.stat.descriptive.summary.Sum#getResult()",
        "org.apache.commons.math3.stat.descriptive.moment.FourthMoment#getResult()",
        "org.apache.commons.math3.stat.descriptive.moment.StandardDeviation#getResult()",
        "org.apache.commons.math3.stat.descriptive.summary.SumOfLogs#getResult()",
        "org.apache.commons.math3.stat.descriptive.summary.Product#getResult()",
        "org.apache.commons.math3.stat.descriptive.summary.SumOfSquares#getResult()",
        "org.apache.commons.math3.stat.descriptive.moment.Skewness#getResult()",
        "org.apache.commons.math3.stat.descriptive.moment.Kurtosis#getResult()",
        "org.apache.commons.math3.stat.descriptive.rank.Max#getResult()",
        "org.apache.commons.math3.stat.descriptive.moment.SecondMoment#getResult()",
        "org.apache.commons.math3.stat.descriptive.moment.ThirdMoment#getResult()",
        "org.apache.commons.math3.stat.descriptive.moment.Mean#getResult()"
    ],
    "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizer#optimize(OptimizationData[]...)": ["org.apache.commons.math3.optim.nonlinear.scalar.MultivariateOptimizer#optimize(OptimizationData[]...)"],
    "org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.SegmentsBuilder#addContribution(SubHyperplane<Euclidean2D>,BSPTree<Euclidean2D>,Iterable<BSPTree<Euclidean2D>>,boolean)": [
        "org.apache.commons.math3.geometry.euclidean.oned.Vector1D#Vector1D(double)",
        "org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.ConnectableSegment#ConnectableSegment(Vector2D,Vector2D,Line,BSPTree<Euclidean2D>,BSPTree<Euclidean2D>,BSPTree<Euclidean2D>)",
        "org.apache.commons.math3.geometry.euclidean.oned.Interval#getInf()",
        "org.apache.commons.math3.geometry.euclidean.oned.Interval#getSup()",
        "org.apache.commons.math3.geometry.euclidean.twod.Line#toSpace(Point<Euclidean1D>)",
        "org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet#asList()",
        "org.apache.commons.math3.geometry.euclidean.twod.Line#getReverse()",
        "org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.SegmentsBuilder#selectClosest(Vector2D,Iterable<BSPTree<Euclidean2D>>)",
        "org.apache.commons.math3.geometry.partitioning.AbstractSubHyperplane#getRemainingRegion()",
        "org.apache.commons.math3.geometry.partitioning.AbstractSubHyperplane#getHyperplane()"
    ],
    "org.apache.commons.math3.stat.descriptive.moment.SemiVariance#evaluate(double[],int,int)": [
        "org.apache.commons.math3.stat.descriptive.moment.Mean#Mean()",
        "org.apache.commons.math3.stat.descriptive.moment.Mean#evaluate(double[],int,int)",
        "org.apache.commons.math3.stat.descriptive.moment.SemiVariance#evaluate(double[],double,Direction,boolean,int,int)"
    ],
    "org.apache.commons.math3.stat.descriptive.SynchronizedSummaryStatistics#getSumImpl()": ["org.apache.commons.math3.stat.descriptive.SummaryStatistics#getSumImpl()"],
    "org.apache.commons.math3.linear.ArrayRealVector#ArrayRealVector()": [
        "org.apache.commons.math3.linear.RealVector.<init>()",
        "org.apache.commons.math3.linear.ArrayRealVector.<init>()"
    ],
    "org.apache.commons.math3.linear.MatrixUtils.BigFractionMatrixConverter#visit(int,int,BigFraction)": ["org.apache.commons.math3.fraction.BigFraction#doubleValue()"],
    "org.apache.commons.math3.optimization.general.LevenbergMarquardtOptimizer#LevenbergMarquardtOptimizer(ConvergenceChecker<PointVectorValuePair>)": [
        "org.apache.commons.math3.optimization.general.LevenbergMarquardtOptimizer#LevenbergMarquardtOptimizer(double,ConvergenceChecker<PointVectorValuePair>,double,double,double,double)",
        "org.apache.commons.math3.util.Precision.<staticinit>()"
    ],
    "org.apache.commons.math3.analysis.function.Asinh#value(DerivativeStructure)": ["org.apache.commons.math3.analysis.differentiation.DerivativeStructure#asinh()"],
    "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.AbstractSimplex#build(double[])": [
        "org.apache.commons.math3.exception.DimensionMismatchException#DimensionMismatchException(int,int)",
        "org.apache.commons.math3.optim.PointValuePair#PointValuePair(double[],double)"
    ],
    "org.apache.commons.math3.linear.OpenMapRealVector.OpenMapSparseIterator#next()": ["org.apache.commons.math3.util.OpenIntToDoubleHashMap.Iterator#advance()"],
    "org.apache.commons.math3.optimization.univariate.BaseAbstractUnivariateOptimizer.<init>()": ["org.apache.commons.math3.util.Incrementor#Incrementor()"],
    "org.apache.commons.math3.ode.nonstiff.LutherFieldStepInterpolator#LutherFieldStepInterpolator(Field<T extends RealFieldElement>,boolean,T extends RealFieldElement[][],FieldODEStateAndDerivative<T extends RealFieldElement>,FieldODEStateAndDerivative<T extends RealFieldElement>,FieldODEStateAndDerivative<T extends RealFieldElement>,FieldODEStateAndDerivative<T extends RealFieldElement>,FieldEquationsMapper<T extends RealFieldElement>)": [
        "org.apache.commons.math3.ode.nonstiff.RungeKuttaFieldStepInterpolator#RungeKuttaFieldStepInterpolator(Field<T extends RealFieldElement>,boolean,T extends RealFieldElement[][],FieldODEStateAndDerivative<T extends RealFieldElement>,FieldODEStateAndDerivative<T extends RealFieldElement>,FieldODEStateAndDerivative<T extends RealFieldElement>,FieldODEStateAndDerivative<T extends RealFieldElement>,FieldEquationsMapper<T extends RealFieldElement>)",
        "org.apache.commons.math3.util.BigRealField#getZero()",
        "org.apache.commons.math3.analysis.differentiation.SparseGradient#getField()$Field$1#getZero()",
        "org.apache.commons.math3.util.Decimal64Field#getZero()",
        "org.apache.commons.math3.ode.nonstiff.LutherFieldStepInterpolator.<init>()",
        "org.apache.commons.math3.dfp.DfpField#getZero()",
        "org.apache.commons.math3.analysis.differentiation.SparseGradient#add(double)",
        "org.apache.commons.math3.analysis.differentiation.DerivativeStructure#add(double)",
        "org.apache.commons.math3.analysis.differentiation.DerivativeStructure#getField()$Field$1#getZero()",
        "org.apache.commons.math3.fraction.FractionField#getZero()",
        "org.apache.commons.math3.complex.ComplexField#getZero()",
        "org.apache.commons.math3.fraction.BigFractionField#getZero()",
        "org.apache.commons.math3.util.Decimal64#add(double)",
        "org.apache.commons.math3.dfp.Dfp#add(double)"
    ],
    "org.apache.commons.math3.ode.nonstiff.AdamsBashforthIntegrator#integrate(ExpandableStatefulODE,double)": [
        "org.apache.commons.math3.ode.sampling.NordsieckStepInterpolator#rescale(double)",
        "org.apache.commons.math3.ode.nonstiff.AdaptiveStepsizeIntegrator#filterStep(double,boolean,boolean)",
        "org.apache.commons.math3.ode.nonstiff.DormandPrince54StepInterpolator#storeTime(double)",
        "org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator#storeTime(double)",
        "org.apache.commons.math3.ode.ExpandableStatefulODE#getTime()",
        "org.apache.commons.math3.ode.nonstiff.RungeKuttaStepInterpolator#shift()",
        "org.apache.commons.math3.ode.ExpandableStatefulODE#getPrimaryMapper()",
        "org.apache.commons.math3.ode.sampling.AbstractStepInterpolator#getInterpolatedState()",
        "org.apache.commons.math3.ode.nonstiff.AdamsIntegrator#updateHighOrderDerivativesPhase1(Array2DRowRealMatrix)",
        "org.apache.commons.math3.ode.ExpandableStatefulODE#getSecondaryMappers()",
        "org.apache.commons.math3.ode.AbstractIntegrator#initIntegration(double,double[],double)",
        "org.apache.commons.math3.ode.sampling.AbstractStepInterpolator#storeTime(double)",
        "org.apache.commons.math3.ode.sampling.NordsieckStepInterpolator#NordsieckStepInterpolator()",
        "org.apache.commons.math3.ode.MultistepIntegrator#start(double,double[],double)",
        "org.apache.commons.math3.ode.ExpandableStatefulODE#getCompleteState()",
        "org.apache.commons.math3.ode.ExpandableStatefulODE#setTime(double)",
        "org.apache.commons.math3.ode.AbstractIntegrator#setEquations(ExpandableStatefulODE)",
        "org.apache.commons.math3.ode.ExpandableStatefulODE#setCompleteState(double[])",
        "org.apache.commons.math3.ode.AbstractIntegrator#computeDerivatives(double,double[],double[])",
        "org.apache.commons.math3.ode.AbstractIntegrator#acceptStep(AbstractStepInterpolator,double[],double[],double)",
        "org.apache.commons.math3.ode.sampling.NordsieckStepInterpolator#reinitialize(double[],boolean,EquationsMapper,EquationsMapper[])",
        "org.apache.commons.math3.ode.nonstiff.AdaptiveStepsizeIntegrator#resetInternalState()",
        "org.apache.commons.math3.ode.AbstractIntegrator#getExpandable()",
        "org.apache.commons.math3.ode.EquationsMapper#insertEquationData(double[],double[])",
        "org.apache.commons.math3.ode.sampling.AbstractStepInterpolator#getInterpolatedSecondaryState(int)",
        "org.apache.commons.math3.ode.sampling.NordsieckStepInterpolator#reinitialize(double,double,double[],Array2DRowRealMatrix)",
        "org.apache.commons.math3.ode.sampling.AbstractStepInterpolator#shift()",
        "org.apache.commons.math3.ode.MultistepIntegrator#computeStepGrowShrinkFactor(double)",
        "org.apache.commons.math3.ode.nonstiff.AdaptiveStepsizeIntegrator#sanityChecks(ExpandableStatefulODE,double)",
        "org.apache.commons.math3.ode.nonstiff.AdamsBashforthIntegrator#errorEstimation(double[],double[],double[],RealMatrix)",
        "org.apache.commons.math3.ode.nonstiff.AdamsIntegrator#updateHighOrderDerivativesPhase2(double[],double[],Array2DRowRealMatrix)"
    ],
    "org.apache.commons.math3.geometry.euclidean.twod.Line#toSubSpace(Point<Euclidean2D>)": [
        "org.apache.commons.math3.geometry.euclidean.twod.Vector2D#getY()",
        "org.apache.commons.math3.geometry.euclidean.oned.Vector1D#Vector1D(double)",
        "org.apache.commons.math3.geometry.euclidean.twod.Vector2D#getX()",
        "org.apache.commons.math3.util.MathArrays.linearCombination(double,double,double,double)"
    ],
    "org.apache.commons.math3.geometry.spherical.twod.EdgesBuilder#EdgesBuilder(BSPTree<Sphere2D>,double)": ["org.apache.commons.math3.geometry.spherical.twod.EdgesBuilder.<init>()"],
    "org.apache.commons.math3.util.FastMath.cbrt(double)": ["org.apache.commons.math3.util.FastMath.<staticinit>()"],
    "org.apache.commons.math3.optim.nonlinear.vector.MultivariateVectorOptimizer#MultivariateVectorOptimizer(ConvergenceChecker<PointVectorValuePair>)": [
        "org.apache.commons.math3.optim.BaseMultivariateOptimizer#BaseMultivariateOptimizer(ConvergenceChecker<PAIR>)",
        "org.apache.commons.math3.optim.nonlinear.vector.MultivariateVectorOptimizer.<init>()"
    ],
    "org.apache.commons.math3.linear.MatrixUtils.createRealMatrix(double[][])": [
        "org.apache.commons.math3.exception.NullArgumentException#NullArgumentException()",
        "org.apache.commons.math3.linear.BlockRealMatrix#BlockRealMatrix(double[][])",
        "org.apache.commons.math3.linear.Array2DRowRealMatrix#Array2DRowRealMatrix(double[][])"
    ],
    "org.apache.commons.math3.linear.BlockFieldMatrix#add(FieldMatrix<T extends FieldElement>)": [
        "org.apache.commons.math3.linear.SparseFieldMatrix#getEntry(int,int)",
        "org.apache.commons.math3.linear.AbstractFieldMatrix#getField()",
        "org.apache.commons.math3.linear.BlockFieldMatrix#add(BlockFieldMatrix<T extends FieldElement>)",
        "org.apache.commons.math3.linear.AbstractFieldMatrix#checkAdditionCompatible(FieldMatrix<T extends FieldElement>)",
        "org.apache.commons.math3.linear.Array2DRowFieldMatrix#getEntry(int,int)",
        "org.apache.commons.math3.linear.BlockFieldMatrix.<staticinit>()",
        "org.apache.commons.math3.util.FastMath.min(int,int)",
        "org.apache.commons.math3.linear.BlockFieldMatrix#getEntry(int,int)",
        "org.apache.commons.math3.linear.BlockFieldMatrix#BlockFieldMatrix(Field<T extends FieldElement>,int,int)"
    ],
    "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer.square(RealMatrix)": [
        "org.apache.commons.math3.linear.DiagonalMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.Array2DRowRealMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.BlockFieldMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.SparseFieldMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.DiagonalMatrix#getEntry(int,int)",
        "org.apache.commons.math3.linear.OpenMapRealMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.OpenMapRealMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.DiagonalMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.OpenMapRealMatrix#getEntry(int,int)",
        "org.apache.commons.math3.linear.Array2DRowFieldMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.BlockRealMatrix#getEntry(int,int)",
        "org.apache.commons.math3.linear.Array2DRowRealMatrix#Array2DRowRealMatrix(double[][],boolean)",
        "org.apache.commons.math3.linear.SparseFieldMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.BlockFieldMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.BlockRealMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.Array2DRowRealMatrix#getEntry(int,int)",
        "org.apache.commons.math3.linear.Array2DRowRealMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.Array2DRowFieldMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.BlockRealMatrix#getColumnDimension()"
    ],
    "org.apache.commons.math3.userguide.sofm.ChineseRings#ChineseRings(Vector3D,double,double,double,double,int,int)": [
        "org.apache.commons.math3.distribution.ExponentialDistribution#sample()",
        "org.apache.commons.math3.geometry.euclidean.threed.Vector3D.<staticinit>()",
        "org.apache.commons.math3.distribution.AbstractRealDistribution#sample()",
        "org.apache.commons.math3.random.UnitSphereRandomVectorGenerator#UnitSphereRandomVectorGenerator(int)",
        "org.apache.commons.math3.random.UnitSphereRandomVectorGenerator#nextVector()",
        "org.apache.commons.math3.distribution.EnumeratedRealDistribution#sample()",
        "org.apache.commons.math3.geometry.euclidean.threed.Vector3D#Vector3D(double,double,double)",
        "org.apache.commons.math3.distribution.UniformRealDistribution#UniformRealDistribution(double,double)",
        "org.apache.commons.math3.distribution.BetaDistribution#sample()",
        "org.apache.commons.math3.distribution.LogNormalDistribution#sample()",
        "org.apache.commons.math3.geometry.euclidean.threed.Vector3D#normalize()",
        "org.apache.commons.math3.userguide.sofm.ChineseRings.<init>()",
        "org.apache.commons.math3.geometry.euclidean.threed.Rotation#applyTo(Vector3D)",
        "org.apache.commons.math3.distribution.ParetoDistribution#sample()",
        "org.apache.commons.math3.distribution.UniformRealDistribution#sample()",
        "org.apache.commons.math3.distribution.NormalDistribution#sample()",
        "org.apache.commons.math3.geometry.euclidean.threed.Rotation#Rotation(Vector3D,Vector3D)",
        "org.apache.commons.math3.distribution.ConstantRealDistribution#sample()",
        "org.apache.commons.math3.distribution.GammaDistribution#sample()"
    ],
    "org.apache.commons.math3.linear.AbstractRealMatrix#getTrace()": [
        "org.apache.commons.math3.linear.DiagonalMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.Array2DRowRealMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.DiagonalMatrix#getEntry(int,int)",
        "org.apache.commons.math3.linear.OpenMapRealMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.OpenMapRealMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.DiagonalMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.OpenMapRealMatrix#getEntry(int,int)",
        "org.apache.commons.math3.linear.BlockRealMatrix#getEntry(int,int)",
        "org.apache.commons.math3.linear.BlockRealMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.Array2DRowRealMatrix#getEntry(int,int)",
        "org.apache.commons.math3.linear.Array2DRowRealMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.NonSquareMatrixException#NonSquareMatrixException(int,int)",
        "org.apache.commons.math3.linear.BlockRealMatrix#getColumnDimension()"
    ],
    "org.apache.commons.math3.geometry.partitioning.NodesSet#addAll(Iterable<BSPTree<S extends Space>>)": ["org.apache.commons.math3.geometry.partitioning.NodesSet#add(BSPTree<S extends Space>)"],
    "org.apache.commons.math3.fraction.FractionField#FractionField()": ["org.apache.commons.math3.fraction.FractionField.<init>()"],
    "org.apache.commons.math3.analysis.function.Logit.Parametric#value(double,double[]...)": [
        "org.apache.commons.math3.analysis.function.Logit.Parametric#validateParameters(double[])",
        "org.apache.commons.math3.analysis.function.Logit.value(double,double,double)"
    ],
    "org.apache.commons.math3.analysis.interpolation.BicubicSplineInterpolatingFunction#value(double,double)": [
        "org.apache.commons.math3.analysis.interpolation.BicubicSplineInterpolatingFunction#searchIndex(double,double[])",
        "org.apache.commons.math3.analysis.interpolation.BicubicSplineFunction#value(double,double)"
    ],
    "org.apache.commons.math3.geometry.euclidean.threed.Rotation.<staticinit>()": ["org.apache.commons.math3.geometry.euclidean.threed.Rotation#Rotation(double,double,double,double,boolean)"],
    "org.apache.commons.math3.dfp.Dfp#multiply(Dfp)": [
        "org.apache.commons.math3.dfp.DfpDec#newInstance(Dfp)",
        "org.apache.commons.math3.dfp.Dfp.<staticinit>()",
        "org.apache.commons.math3.dfp.Dfp#dotrap(int,String,Dfp,Dfp)",
        "org.apache.commons.math3.dfp.Dfp#newInstance(Dfp)",
        "org.apache.commons.math3.dfp.DfpField.<staticinit>()",
        "org.apache.commons.math3.dfp.DfpDec#round(int)",
        "org.apache.commons.math3.dfp.Dfp#round(int)",
        "org.apache.commons.math3.dfp.DfpField#setIEEEFlagsBits(int)",
        "org.apache.commons.math3.dfp.DfpField#getRadixDigits()",
        "org.apache.commons.math3.dfp.Dfp#isNaN()",
        "org.apache.commons.math3.dfp.Dfp#getZero()"
    ],
    "org.apache.commons.math3.linear.AbstractFieldMatrix#AbstractFieldMatrix(Field<T extends FieldElement>,int,int)": [
        "org.apache.commons.math3.linear.AbstractFieldMatrix.<init>()",
        "org.apache.commons.math3.exception.util.LocalizedFormats.<staticinit>()"
    ],
    "org.apache.commons.math3.dfp.DfpMath.atanInternal(Dfp)": [
        "org.apache.commons.math3.dfp.Dfp#add(Dfp)",
        "org.apache.commons.math3.dfp.Dfp#Dfp(Dfp)",
        "org.apache.commons.math3.dfp.Dfp#negate()",
        "org.apache.commons.math3.dfp.Dfp#equals(Object)",
        "org.apache.commons.math3.dfp.Dfp#multiply(Dfp)",
        "org.apache.commons.math3.dfp.Dfp#divide(int)"
    ],
    "org.apache.commons.math3.optimization.SimpleValueChecker#SimpleValueChecker(double,double,int)": [
        "org.apache.commons.math3.optimization.SimpleValueChecker.<init>()",
        "org.apache.commons.math3.optimization.AbstractConvergenceChecker#AbstractConvergenceChecker(double,double)"
    ],
    "org.apache.commons.math3.analysis.FunctionUtils.compose(DifferentiableUnivariateFunction[]...)$UnivariateFunction$1$UnivariateFunction$1#derivative()$UnivariateFunction$1#value(double)": [
        "org.apache.commons.math3.analysis.polynomials.PolynomialSplineFunction#value(double)",
        "org.apache.commons.math3.analysis.function.Tanh#value(double)",
        "org.apache.commons.math3.analysis.function.Power#derivative()",
        "org.apache.commons.math3.analysis.function.Exp#derivative()",
        "org.apache.commons.math3.analysis.function.HarmonicOscillator#derivative()",
        "org.apache.commons.math3.analysis.polynomials.PolynomialFunction#derivative()",
        "org.apache.commons.math3.analysis.function.HarmonicOscillator#value(double)",
        "org.apache.commons.math3.analysis.function.Logit#derivative()",
        "org.apache.commons.math3.analysis.polynomials.PolynomialSplineFunction#derivative()",
        "org.apache.commons.math3.analysis.FunctionUtils.fix1stArgument(BivariateFunction,double)$UnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.function.Asinh#value(double)",
        "org.apache.commons.math3.analysis.function.Inverse#derivative()",
        "org.apache.commons.math3.analysis.FunctionUtils.toDifferentiableUnivariateFunction(UnivariateDifferentiableFunction)$DifferentiableUnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.function.Cbrt#value(double)",
        "org.apache.commons.math3.analysis.function.Atan#derivative()",
        "org.apache.commons.math3.analysis.FunctionUtils.add(UnivariateFunction[]...)$UnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.function.Sin#value(double)",
        "org.apache.commons.math3.analysis.function.Expm1#derivative()",
        "org.apache.commons.math3.analysis.function.Sigmoid#derivative()",
        "org.apache.commons.math3.analysis.interpolation.UnivariatePeriodicInterpolator#interpolate(double[],double[])$UnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.function.Sqrt#value(double)",
        "org.apache.commons.math3.analysis.function.Sinc#value(double)",
        "org.apache.commons.math3.ode.events.EventState#evaluateStep(StepInterpolator)$UnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.integration.IterativeLegendreGaussIntegrator#stage(int)$UnivariateFunction$1#value(double)",
        "org.apache.commons.math3.optimization.general.NonLinearConjugateGradientOptimizer.LineSearchFunction#value(double)",
        "org.apache.commons.math3.analysis.function.Floor#value(double)",
        "org.apache.commons.math3.analysis.FunctionUtils.multiply(DifferentiableUnivariateFunction[]...)$DifferentiableUnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.FunctionUtils.combine(BivariateFunction,UnivariateFunction,UnivariateFunction)$UnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.FunctionUtils.add(DifferentiableUnivariateFunction[]...)$UnivariateFunction$1$UnivariateFunction$1#derivative()$UnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.FunctionUtils.add(DifferentiableUnivariateFunction[]...)$DifferentiableUnivariateFunction$1#derivative()",
        "org.apache.commons.math3.analysis.function.Log1p#derivative()",
        "org.apache.commons.math3.analysis.function.Tan#derivative()",
        "org.apache.commons.math3.analysis.function.Sinh#value(double)",
        "org.apache.commons.math3.analysis.function.Tan#value(double)",
        "org.apache.commons.math3.distribution.AbstractRealDistribution#inverseCumulativeProbability(double)$UnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.FunctionUtils.add(DifferentiableUnivariateFunction[]...)$DifferentiableUnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.function.Cos#derivative()",
        "org.apache.commons.math3.analysis.function.Atanh#derivative()",
        "org.apache.commons.math3.analysis.function.Ceil#value(double)",
        "org.apache.commons.math3.analysis.function.Atanh#value(double)",
        "org.apache.commons.math3.analysis.FunctionUtils.compose(DifferentiableUnivariateFunction[]...)$UnivariateFunction$1$UnivariateFunction$1#derivative()$UnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.FunctionUtils.toDifferentiableUnivariateFunction(UnivariateDifferentiableFunction)$DifferentiableUnivariateFunction$1#derivative()",
        "org.apache.commons.math3.analysis.function.Logit#value(double)",
        "org.apache.commons.math3.analysis.function.Log1p#value(double)",
        "org.apache.commons.math3.analysis.FunctionUtils.toUnivariateDifferential(DifferentiableUnivariateFunction)$UnivariateDifferentiableFunction$1#value(double)",
        "org.apache.commons.math3.analysis.FunctionUtils.toDifferentiableUnivariateFunction(UnivariateDifferentiableFunction)$UnivariateFunction$1$UnivariateFunction$1#derivative()$UnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.function.Log#derivative()",
        "org.apache.commons.math3.analysis.function.Logistic#derivative()",
        "org.apache.commons.math3.analysis.FunctionUtils.compose(UnivariateFunction[]...)$UnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.function.Asinh#derivative()",
        "org.apache.commons.math3.analysis.function.Cosh#value(double)",
        "org.apache.commons.math3.analysis.FunctionUtils.compose(DifferentiableUnivariateFunction[]...)$DifferentiableUnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.function.StepFunction#value(double)",
        "org.apache.commons.math3.analysis.function.Constant#derivative()",
        "org.apache.commons.math3.analysis.function.Acos#value(double)",
        "org.apache.commons.math3.analysis.function.Tanh#derivative()",
        "org.apache.commons.math3.analysis.function.Minus#derivative()",
        "org.apache.commons.math3.analysis.FunctionUtils.compose(DifferentiableUnivariateFunction[]...)$DifferentiableUnivariateFunction$1#derivative()",
        "org.apache.commons.math3.optim.nonlinear.scalar.LineSearch#search(double[],double[])$UnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.function.Sigmoid#value(double)",
        "org.apache.commons.math3.analysis.FunctionUtils.multiply(DifferentiableUnivariateFunction[]...)$DifferentiableUnivariateFunction$1#derivative()",
        "org.apache.commons.math3.analysis.function.Ulp#value(double)",
        "org.apache.commons.math3.analysis.FunctionUtils.multiply(DifferentiableUnivariateFunction[]...)$UnivariateFunction$1$UnivariateFunction$1#derivative()$UnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.function.Log10#derivative()",
        "org.apache.commons.math3.analysis.function.Gaussian#value(double)",
        "org.apache.commons.math3.analysis.function.Inverse#value(double)",
        "org.apache.commons.math3.analysis.function.Cbrt#derivative()",
        "org.apache.commons.math3.analysis.function.Asin#value(double)",
        "org.apache.commons.math3.analysis.FunctionUtils.multiply(UnivariateFunction[]...)$UnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.function.Atan#value(double)",
        "org.apache.commons.math3.analysis.function.Identity#derivative()",
        "org.apache.commons.math3.analysis.polynomials.PolynomialFunctionLagrangeForm#value(double)",
        "org.apache.commons.math3.analysis.function.Exp#value(double)",
        "org.apache.commons.math3.analysis.function.Sqrt#derivative()",
        "org.apache.commons.math3.special.BesselJ#value(double)",
        "org.apache.commons.math3.analysis.polynomials.PolynomialFunctionNewtonForm#value(double)",
        "org.apache.commons.math3.analysis.function.Cos#value(double)",
        "org.apache.commons.math3.analysis.function.Gaussian#derivative()",
        "org.apache.commons.math3.analysis.function.Sinc#derivative()",
        "org.apache.commons.math3.analysis.function.Log10#value(double)",
        "org.apache.commons.math3.analysis.function.Sinh#derivative()",
        "org.apache.commons.math3.analysis.function.Log#value(double)",
        "org.apache.commons.math3.analysis.function.Minus#value(double)",
        "org.apache.commons.math3.analysis.FunctionUtils.multiply(UnivariateDifferentiableFunction[]...)$UnivariateDifferentiableFunction$1#value(double)",
        "org.apache.commons.math3.analysis.function.Logistic#value(double)",
        "org.apache.commons.math3.analysis.function.Signum#value(double)",
        "org.apache.commons.math3.analysis.function.Constant#value(double)",
        "org.apache.commons.math3.analysis.FunctionUtils.add(UnivariateDifferentiableFunction[]...)$UnivariateDifferentiableFunction$1#value(double)",
        "org.apache.commons.math3.analysis.function.Sin#derivative()",
        "org.apache.commons.math3.analysis.function.Abs#value(double)",
        "org.apache.commons.math3.analysis.differentiation.FiniteDifferencesDifferentiator#differentiate(UnivariateFunction)$UnivariateDifferentiableFunction$1#value(double)",
        "org.apache.commons.math3.analysis.function.Identity#value(double)",
        "org.apache.commons.math3.analysis.function.Expm1#value(double)",
        "org.apache.commons.math3.analysis.function.Cosh#derivative()",
        "org.apache.commons.math3.analysis.FunctionUtils.fix2ndArgument(BivariateFunction,double)$UnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.function.Acosh#derivative()",
        "org.apache.commons.math3.analysis.polynomials.PolynomialFunction#value(double)",
        "org.apache.commons.math3.analysis.function.Acos#derivative()",
        "org.apache.commons.math3.analysis.function.Rint#value(double)",
        "org.apache.commons.math3.optimization.direct.PowellOptimizer.LineSearch#search(double[],double[])$UnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.function.Acosh#value(double)",
        "org.apache.commons.math3.analysis.FunctionUtils.compose(UnivariateDifferentiableFunction[]...)$UnivariateDifferentiableFunction$1#value(double)",
        "org.apache.commons.math3.analysis.function.Asin#derivative()",
        "org.apache.commons.math3.analysis.function.Power#value(double)"
    ],
    "org.apache.commons.math3.linear.BlockRealMatrix#setRowMatrix(int,RealMatrix)": [
        "org.apache.commons.math3.linear.BlockRealMatrix#setRowMatrix(int,BlockRealMatrix)",
        "org.apache.commons.math3.linear.AbstractRealMatrix#setRowMatrix(int,RealMatrix)"
    ],
    "org.apache.commons.math3.stat.inference.OneWayAnova#anovaStats(Collection<SummaryStatistics>,boolean)": [
        "org.apache.commons.math3.util.MathUtils.checkNotNull(Object)",
        "org.apache.commons.math3.exception.DimensionMismatchException#DimensionMismatchException(Localizable,int,int)",
        "org.apache.commons.math3.stat.descriptive.SummaryStatistics#getSumsq()",
        "org.apache.commons.math3.stat.descriptive.SynchronizedSummaryStatistics#getSum()",
        "org.apache.commons.math3.stat.inference.OneWayAnova.AnovaStats#AnovaStats(int,int,double)",
        "org.apache.commons.math3.exception.util.LocalizedFormats.<staticinit>()",
        "org.apache.commons.math3.stat.descriptive.SummaryStatistics#getSum()",
        "org.apache.commons.math3.stat.descriptive.SynchronizedSummaryStatistics#getN()",
        "org.apache.commons.math3.stat.descriptive.SynchronizedSummaryStatistics#getSumsq()",
        "org.apache.commons.math3.stat.descriptive.SummaryStatistics#getN()"
    ],
    "org.apache.commons.math3.distribution.PascalDistribution#logProbability(int)": ["org.apache.commons.math3.util.CombinatoricsUtils.binomialCoefficientLog(int,int)"],
    "org.apache.commons.math3.analysis.differentiation.DerivativeStructure#atan2(DerivativeStructure)": [
        "org.apache.commons.math3.analysis.differentiation.DerivativeStructure#DerivativeStructure(DSCompiler)",
        "org.apache.commons.math3.analysis.differentiation.DSCompiler#atan2(double[],int,double[],int,double[],int)",
        "org.apache.commons.math3.analysis.differentiation.DSCompiler#checkCompatibility(DSCompiler)"
    ],
    "org.apache.commons.math3.optim.nonlinear.vector.jacobian.GaussNewtonOptimizer#GaussNewtonOptimizer(boolean,ConvergenceChecker<PointVectorValuePair>)": [
        "org.apache.commons.math3.optim.nonlinear.vector.jacobian.GaussNewtonOptimizer.<init>()",
        "org.apache.commons.math3.optim.nonlinear.vector.jacobian.AbstractLeastSquaresOptimizer#AbstractLeastSquaresOptimizer(ConvergenceChecker<PointVectorValuePair>)"
    ],
    "org.apache.commons.math3.genetics.ElitisticListPopulation#nextGeneration()": [
        "org.apache.commons.math3.util.FastMath.ceil(double)",
        "org.apache.commons.math3.genetics.ListPopulation#getPopulationLimit()",
        "org.apache.commons.math3.genetics.ElitisticListPopulation#getElitismRate()",
        "org.apache.commons.math3.genetics.ElitisticListPopulation#ElitisticListPopulation(int,double)",
        "org.apache.commons.math3.genetics.ListPopulation#getChromosomeList()",
        "org.apache.commons.math3.genetics.ListPopulation#addChromosome(Chromosome)"
    ],
    "org.apache.commons.math3.stat.descriptive.moment.SecondMoment#clear()": ["org.apache.commons.math3.stat.descriptive.moment.FirstMoment#clear()"],
    "org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile.Markers#processDataPoint(double)": [
        "org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile.Markers#updateDesiredPositions()",
        "org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile.Markers#adjustHeightsOfMarkers()",
        "org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile.Markers#findCellAndUpdateMinMax(double)",
        "org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile.Markers#incrementPositions(int,int,int)",
        "org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile.Markers#getPercentileValue()"
    ],
    "org.apache.commons.math3.analysis.differentiation.DerivativeStructure#sin()": [
        "org.apache.commons.math3.analysis.differentiation.DSCompiler#sin(double[],int,double[],int)",
        "org.apache.commons.math3.analysis.differentiation.DerivativeStructure#DerivativeStructure(DSCompiler)"
    ],
    "org.apache.commons.math3.geometry.euclidean.threed.Vector3D#getNormInf()": [
        "org.apache.commons.math3.util.FastMath.max(double,double)",
        "org.apache.commons.math3.util.FastMath.abs(double)"
    ],
    "org.apache.commons.math3.random.Well1024a#Well1024a(int)": [
        "org.apache.commons.math3.random.AbstractWell#AbstractWell(int,int,int,int,int)",
        "org.apache.commons.math3.random.Well1024a.<staticinit>()",
        "org.apache.commons.math3.random.Well1024a.<init>()"
    ],
    "org.apache.commons.math3.ml.clustering.DBSCANClusterer#DBSCANClusterer(double,int,DistanceMeasure)": [
        "org.apache.commons.math3.ml.clustering.Clusterer#Clusterer(DistanceMeasure)",
        "org.apache.commons.math3.ml.clustering.DBSCANClusterer.<init>()"
    ],
    "org.apache.commons.math3.linear.DiagonalMatrix#copy()": ["org.apache.commons.math3.linear.DiagonalMatrix#DiagonalMatrix(double[])"],
    "org.apache.commons.math3.special.Gamma.<staticinit>()": [
        "org.apache.commons.math3.util.FastMath.log(double)",
        "org.apache.commons.math3.util.FastMath.<staticinit>()"
    ],
    "org.apache.commons.math3.stat.Frequency#toString()": [
        "org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet.SubIntervalsIterator#hasNext()",
        "org.apache.commons.math3.linear.RealVector#iterator()$Iterator$1#hasNext()",
        "org.apache.commons.math3.stat.Frequency#getPct(Comparable<?>)",
        "org.apache.commons.math3.userguide.sofm.ChineseRingsClassifier#createRandomIterator(long)$Iterator$1#hasNext()",
        "org.apache.commons.math3.util.IntegerSequence.Incrementor#hasNext()",
        "org.apache.commons.math3.linear.RealVector.unmodifiableRealVector(RealVector)$Iterator$1$Iterator$1#sparseIterator()$Iterator$1#hasNext()",
        "org.apache.commons.math3.geometry.spherical.oned.ArcsSet.SubArcsIterator#hasNext()",
        "org.apache.commons.math3.util.Combinations.LexicographicIterator#hasNext()",
        "org.apache.commons.math3.stat.Frequency#getCumPct(Comparable<?>)",
        "org.apache.commons.math3.linear.RealVector.SparseEntryIterator#hasNext()",
        "org.apache.commons.math3.userguide.sofm.ChineseRingsClassifier#createIterable()$Iterator$1$Iterator$1#iterator()$Iterator$1#hasNext()",
        "org.apache.commons.math3.stat.Frequency#getCount(Comparable<?>)",
        "org.apache.commons.math3.linear.RealVector.unmodifiableRealVector(RealVector)$Iterator$1$Iterator$1#iterator()$Iterator$1#hasNext()",
        "org.apache.commons.math3.util.Combinations.SingletonIterator#hasNext()",
        "org.apache.commons.math3.util.MultidimensionalCounter.Iterator#hasNext()"
    ],
    "org.apache.commons.math3.geometry.spherical.twod.PropertiesComputer#convexCellBarycenter(Vertex)": [
        "org.apache.commons.math3.geometry.spherical.twod.Edge#getCircle()",
        "org.apache.commons.math3.geometry.euclidean.threed.Vector3D#normalize()",
        "org.apache.commons.math3.geometry.euclidean.threed.Vector3D.<staticinit>()",
        "org.apache.commons.math3.geometry.spherical.twod.Circle#getPole()",
        "org.apache.commons.math3.geometry.spherical.twod.Edge#getStart()",
        "org.apache.commons.math3.geometry.spherical.twod.Edge#getEnd()",
        "org.apache.commons.math3.geometry.spherical.twod.Edge#getLength()",
        "org.apache.commons.math3.geometry.spherical.twod.Vertex#getOutgoing()",
        "org.apache.commons.math3.geometry.euclidean.threed.Vector3D#Vector3D(double,Vector3D,double,Vector3D)"
    ],
    "org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet.RotationTransform#apply(Hyperplane<Euclidean3D>)": ["org.apache.commons.math3.geometry.euclidean.threed.Plane#rotate(Vector3D,Rotation)"],
    "org.apache.commons.math3.distribution.GeometricDistribution#inverseCumulativeProbability(double)": ["org.apache.commons.math3.util.FastMath.log1p(double)"],
    "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizer#doOptimize()$MultivariateFunction$1#value(double[])": ["org.apache.commons.math3.optim.nonlinear.scalar.MultivariateOptimizer#computeObjectiveValue(double[])"],
    "org.apache.commons.math3.distribution.ChiSquaredDistribution#cumulativeProbability(double)": ["org.apache.commons.math3.distribution.GammaDistribution#cumulativeProbability(double)"],
    "org.apache.commons.math3.stat.inference.GTest#gTest(double[],long[])": [
        "org.apache.commons.math3.stat.inference.GTest#g(double[],long[])",
        "org.apache.commons.math3.distribution.ChiSquaredDistribution#ChiSquaredDistribution(double,double)",
        "org.apache.commons.math3.distribution.ChiSquaredDistribution#cumulativeProbability(double)"
    ],
    "org.apache.commons.math3.analysis.function.Tanh#derivative()": [
        "org.apache.commons.math3.analysis.function.Log10#derivative()",
        "org.apache.commons.math3.analysis.function.Power#derivative()",
        "org.apache.commons.math3.analysis.function.Sin#derivative()",
        "org.apache.commons.math3.analysis.function.Exp#derivative()",
        "org.apache.commons.math3.analysis.function.HarmonicOscillator#derivative()",
        "org.apache.commons.math3.analysis.polynomials.PolynomialFunction#derivative()",
        "org.apache.commons.math3.analysis.function.Logit#derivative()",
        "org.apache.commons.math3.analysis.function.Cbrt#derivative()",
        "org.apache.commons.math3.analysis.FunctionUtils.toDifferentiableUnivariateFunction(UnivariateDifferentiableFunction)",
        "org.apache.commons.math3.analysis.FunctionUtils.toDifferentiableUnivariateFunction(UnivariateDifferentiableFunction)$DifferentiableUnivariateFunction$1#derivative()",
        "org.apache.commons.math3.analysis.polynomials.PolynomialSplineFunction#derivative()",
        "org.apache.commons.math3.analysis.function.Cosh#derivative()",
        "org.apache.commons.math3.analysis.function.Identity#derivative()",
        "org.apache.commons.math3.analysis.function.Inverse#derivative()",
        "org.apache.commons.math3.analysis.function.Acosh#derivative()",
        "org.apache.commons.math3.analysis.function.Acos#derivative()",
        "org.apache.commons.math3.analysis.function.Atan#derivative()",
        "org.apache.commons.math3.analysis.function.Log#derivative()",
        "org.apache.commons.math3.analysis.function.Sqrt#derivative()",
        "org.apache.commons.math3.analysis.function.Logistic#derivative()",
        "org.apache.commons.math3.analysis.function.Expm1#derivative()",
        "org.apache.commons.math3.analysis.function.Asinh#derivative()",
        "org.apache.commons.math3.analysis.function.Gaussian#derivative()",
        "org.apache.commons.math3.analysis.function.Sinc#derivative()",
        "org.apache.commons.math3.analysis.function.Sigmoid#derivative()",
        "org.apache.commons.math3.analysis.function.Constant#derivative()",
        "org.apache.commons.math3.analysis.function.Sinh#derivative()",
        "org.apache.commons.math3.analysis.function.Tanh#derivative()",
        "org.apache.commons.math3.analysis.function.Asin#derivative()",
        "org.apache.commons.math3.analysis.function.Minus#derivative()",
        "org.apache.commons.math3.analysis.FunctionUtils.compose(DifferentiableUnivariateFunction[]...)$DifferentiableUnivariateFunction$1#derivative()",
        "org.apache.commons.math3.analysis.FunctionUtils.add(DifferentiableUnivariateFunction[]...)$DifferentiableUnivariateFunction$1#derivative()",
        "org.apache.commons.math3.analysis.FunctionUtils.multiply(DifferentiableUnivariateFunction[]...)$DifferentiableUnivariateFunction$1#derivative()",
        "org.apache.commons.math3.analysis.function.Log1p#derivative()",
        "org.apache.commons.math3.analysis.function.Tan#derivative()",
        "org.apache.commons.math3.analysis.function.Cos#derivative()",
        "org.apache.commons.math3.analysis.function.Atanh#derivative()"
    ],
    "org.apache.commons.math3.geometry.euclidean.threed.FieldRotation#applyInverseTo(Vector3D)": [
        "org.apache.commons.math3.geometry.euclidean.threed.Vector3D#getX()",
        "org.apache.commons.math3.geometry.euclidean.threed.Vector3D#getZ()",
        "org.apache.commons.math3.geometry.euclidean.threed.Vector3D#getY()",
        "org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D#FieldVector3D(T extends RealFieldElement,T extends RealFieldElement,T extends RealFieldElement)"
    ],
    "org.apache.commons.math3.stat.inference.ChiSquareTest#ChiSquareTest()": ["org.apache.commons.math3.stat.inference.ChiSquareTest.<init>()"],
    "org.apache.commons.math3.stat.descriptive.moment.VectorialCovariance#VectorialCovariance(int,boolean)": ["org.apache.commons.math3.stat.descriptive.moment.VectorialCovariance.<init>()"],
    "org.apache.commons.math3.analysis.integration.BaseAbstractUnivariateIntegrator#integrate(int,UnivariateFunction,double,double)": [
        "org.apache.commons.math3.analysis.integration.MidPointIntegrator#doIntegrate()",
        "org.apache.commons.math3.analysis.integration.TrapezoidIntegrator#doIntegrate()",
        "org.apache.commons.math3.analysis.integration.IterativeLegendreGaussIntegrator#doIntegrate()",
        "org.apache.commons.math3.analysis.integration.LegendreGaussIntegrator#doIntegrate()",
        "org.apache.commons.math3.analysis.integration.SimpsonIntegrator#doIntegrate()",
        "org.apache.commons.math3.analysis.integration.RombergIntegrator#doIntegrate()",
        "org.apache.commons.math3.analysis.integration.BaseAbstractUnivariateIntegrator#setup(int,UnivariateFunction,double,double)"
    ],
    "org.apache.commons.math3.distribution.CauchyDistribution#cumulativeProbability(double)": [
        "org.apache.commons.math3.util.FastMath.atan(double)",
        "org.apache.commons.math3.util.FastMath.<staticinit>()"
    ],
    "org.apache.commons.math3.stat.descriptive.moment.Kurtosis#evaluate(double[],int,int)": [
        "org.apache.commons.math3.util.FastMath.pow(double,double)",
        "org.apache.commons.math3.stat.descriptive.moment.Variance#Variance()",
        "org.apache.commons.math3.stat.descriptive.AbstractStorelessUnivariateStatistic#incrementAll(double[],int,int)",
        "org.apache.commons.math3.stat.descriptive.AbstractUnivariateStatistic#test(double[],int,int)",
        "org.apache.commons.math3.stat.descriptive.moment.Variance#getResult()",
        "org.apache.commons.math3.util.FastMath.sqrt(double)"
    ],
    "org.apache.commons.math3.analysis.integration.gauss.GaussIntegrator#integrate(UnivariateFunction)": [
        "org.apache.commons.math3.analysis.FunctionUtils.multiply(DifferentiableUnivariateFunction[]...)$UnivariateFunction$1$UnivariateFunction$1#derivative()$UnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.polynomials.PolynomialSplineFunction#value(double)",
        "org.apache.commons.math3.analysis.function.Gaussian#value(double)",
        "org.apache.commons.math3.analysis.function.Tanh#value(double)",
        "org.apache.commons.math3.analysis.function.Inverse#value(double)",
        "org.apache.commons.math3.analysis.function.HarmonicOscillator#value(double)",
        "org.apache.commons.math3.analysis.FunctionUtils.fix1stArgument(BivariateFunction,double)$UnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.function.Asin#value(double)",
        "org.apache.commons.math3.analysis.function.Asinh#value(double)",
        "org.apache.commons.math3.analysis.FunctionUtils.multiply(UnivariateFunction[]...)$UnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.function.Atan#value(double)",
        "org.apache.commons.math3.analysis.FunctionUtils.toDifferentiableUnivariateFunction(UnivariateDifferentiableFunction)$DifferentiableUnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.function.Cbrt#value(double)",
        "org.apache.commons.math3.analysis.polynomials.PolynomialFunctionLagrangeForm#value(double)",
        "org.apache.commons.math3.analysis.function.Exp#value(double)",
        "org.apache.commons.math3.special.BesselJ#value(double)",
        "org.apache.commons.math3.analysis.polynomials.PolynomialFunctionNewtonForm#value(double)",
        "org.apache.commons.math3.analysis.FunctionUtils.add(UnivariateFunction[]...)$UnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.function.Sin#value(double)",
        "org.apache.commons.math3.analysis.function.Cos#value(double)",
        "org.apache.commons.math3.analysis.interpolation.UnivariatePeriodicInterpolator#interpolate(double[],double[])$UnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.function.Log10#value(double)",
        "org.apache.commons.math3.analysis.function.Sqrt#value(double)",
        "org.apache.commons.math3.analysis.function.Log#value(double)",
        "org.apache.commons.math3.analysis.function.Sinc#value(double)",
        "org.apache.commons.math3.ode.events.EventState#evaluateStep(StepInterpolator)$UnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.function.Minus#value(double)",
        "org.apache.commons.math3.analysis.integration.IterativeLegendreGaussIntegrator#stage(int)$UnivariateFunction$1#value(double)",
        "org.apache.commons.math3.optimization.general.NonLinearConjugateGradientOptimizer.LineSearchFunction#value(double)",
        "org.apache.commons.math3.analysis.function.Floor#value(double)",
        "org.apache.commons.math3.analysis.FunctionUtils.multiply(DifferentiableUnivariateFunction[]...)$DifferentiableUnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.FunctionUtils.combine(BivariateFunction,UnivariateFunction,UnivariateFunction)$UnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.FunctionUtils.add(DifferentiableUnivariateFunction[]...)$UnivariateFunction$1$UnivariateFunction$1#derivative()$UnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.function.Sinh#value(double)",
        "org.apache.commons.math3.analysis.FunctionUtils.multiply(UnivariateDifferentiableFunction[]...)$UnivariateDifferentiableFunction$1#value(double)",
        "org.apache.commons.math3.analysis.function.Tan#value(double)",
        "org.apache.commons.math3.distribution.AbstractRealDistribution#inverseCumulativeProbability(double)$UnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.FunctionUtils.add(DifferentiableUnivariateFunction[]...)$DifferentiableUnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.function.Ceil#value(double)",
        "org.apache.commons.math3.analysis.function.Logistic#value(double)",
        "org.apache.commons.math3.analysis.function.Signum#value(double)",
        "org.apache.commons.math3.analysis.function.Constant#value(double)",
        "org.apache.commons.math3.analysis.function.Atanh#value(double)",
        "org.apache.commons.math3.analysis.FunctionUtils.compose(DifferentiableUnivariateFunction[]...)$UnivariateFunction$1$UnivariateFunction$1#derivative()$UnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.FunctionUtils.add(UnivariateDifferentiableFunction[]...)$UnivariateDifferentiableFunction$1#value(double)",
        "org.apache.commons.math3.analysis.function.Abs#value(double)",
        "org.apache.commons.math3.analysis.differentiation.FiniteDifferencesDifferentiator#differentiate(UnivariateFunction)$UnivariateDifferentiableFunction$1#value(double)",
        "org.apache.commons.math3.analysis.function.Identity#value(double)",
        "org.apache.commons.math3.analysis.function.Expm1#value(double)",
        "org.apache.commons.math3.analysis.function.Logit#value(double)",
        "org.apache.commons.math3.analysis.function.Log1p#value(double)",
        "org.apache.commons.math3.analysis.FunctionUtils.fix2ndArgument(BivariateFunction,double)$UnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.FunctionUtils.toUnivariateDifferential(DifferentiableUnivariateFunction)$UnivariateDifferentiableFunction$1#value(double)",
        "org.apache.commons.math3.analysis.FunctionUtils.toDifferentiableUnivariateFunction(UnivariateDifferentiableFunction)$UnivariateFunction$1$UnivariateFunction$1#derivative()$UnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.polynomials.PolynomialFunction#value(double)",
        "org.apache.commons.math3.analysis.function.Rint#value(double)",
        "org.apache.commons.math3.analysis.FunctionUtils.compose(UnivariateFunction[]...)$UnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.function.Cosh#value(double)",
        "org.apache.commons.math3.optimization.direct.PowellOptimizer.LineSearch#search(double[],double[])$UnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.FunctionUtils.compose(DifferentiableUnivariateFunction[]...)$DifferentiableUnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.function.Acosh#value(double)",
        "org.apache.commons.math3.analysis.function.StepFunction#value(double)",
        "org.apache.commons.math3.analysis.FunctionUtils.compose(UnivariateDifferentiableFunction[]...)$UnivariateDifferentiableFunction$1#value(double)",
        "org.apache.commons.math3.analysis.function.Acos#value(double)",
        "org.apache.commons.math3.analysis.function.Power#value(double)",
        "org.apache.commons.math3.optim.nonlinear.scalar.LineSearch#search(double[],double[])$UnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.function.Sigmoid#value(double)",
        "org.apache.commons.math3.analysis.function.Ulp#value(double)"
    ],
    "org.apache.commons.math3.genetics.ChromosomePair#toString()": [
        "org.apache.commons.math3.genetics.ChromosomePair#getFirst()",
        "org.apache.commons.math3.genetics.ChromosomePair#getSecond()"
    ],
    "org.apache.commons.math3.util.MathArrays.cosAngle(double[],double[])": [
        "org.apache.commons.math3.util.MathArrays.safeNorm(double[])",
        "org.apache.commons.math3.util.MathArrays.linearCombination(double[],double[])"
    ],
    "org.apache.commons.math3.stat.descriptive.moment.FirstMoment#FirstMoment()": [
        "org.apache.commons.math3.stat.descriptive.moment.FirstMoment.<init>()",
        "org.apache.commons.math3.stat.descriptive.AbstractStorelessUnivariateStatistic.<init>()"
    ],
    "org.apache.commons.math3.stat.descriptive.moment.GeometricMean#clear()": [
        "org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile#clear()",
        "org.apache.commons.math3.stat.descriptive.moment.Variance#clear()",
        "org.apache.commons.math3.stat.descriptive.moment.Kurtosis#clear()",
        "org.apache.commons.math3.stat.descriptive.moment.StandardDeviation#clear()",
        "org.apache.commons.math3.stat.descriptive.rank.Max#clear()",
        "org.apache.commons.math3.stat.descriptive.moment.Mean#clear()",
        "org.apache.commons.math3.stat.descriptive.moment.ThirdMoment#clear()",
        "org.apache.commons.math3.stat.descriptive.moment.SecondMoment#clear()",
        "org.apache.commons.math3.stat.descriptive.moment.FourthMoment#clear()",
        "org.apache.commons.math3.stat.descriptive.moment.GeometricMean#clear()",
        "org.apache.commons.math3.stat.descriptive.summary.SumOfLogs#clear()",
        "org.apache.commons.math3.stat.descriptive.summary.Sum#clear()",
        "org.apache.commons.math3.stat.descriptive.rank.Min#clear()",
        "org.apache.commons.math3.stat.descriptive.summary.SumOfSquares#clear()",
        "org.apache.commons.math3.stat.descriptive.summary.Product#clear()",
        "org.apache.commons.math3.stat.descriptive.moment.FirstMoment#clear()",
        "org.apache.commons.math3.stat.descriptive.moment.Skewness#clear()"
    ],
    "org.apache.commons.math3.linear.ArrayRealVector#ArrayRealVector(ArrayRealVector)": ["org.apache.commons.math3.linear.ArrayRealVector#ArrayRealVector(ArrayRealVector,boolean)"],
    "org.apache.commons.math3.stat.descriptive.SynchronizedMultivariateSummaryStatistics#getSumSq()": ["org.apache.commons.math3.stat.descriptive.MultivariateSummaryStatistics#getSumSq()"],
    "org.apache.commons.math3.geometry.euclidean.twod.Vector2D#add(Vector<Euclidean2D>)": [
        "org.apache.commons.math3.geometry.euclidean.twod.Vector2D#getY()",
        "org.apache.commons.math3.geometry.euclidean.twod.Vector2D#getX()",
        "org.apache.commons.math3.geometry.euclidean.twod.Vector2D#Vector2D(double,double)"
    ],
    "org.apache.commons.math3.ode.nonstiff.MidpointFieldIntegrator#getB()": [
        "org.apache.commons.math3.ode.AbstractFieldIntegrator#getField()",
        "org.apache.commons.math3.fraction.BigFractionField#getOne()",
        "org.apache.commons.math3.fraction.FractionField#getOne()",
        "org.apache.commons.math3.analysis.differentiation.SparseGradient#getField()$Field$1#getOne()",
        "org.apache.commons.math3.util.BigRealField#getZero()",
        "org.apache.commons.math3.analysis.differentiation.SparseGradient#getField()$Field$1#getZero()",
        "org.apache.commons.math3.util.Decimal64Field#getZero()",
        "org.apache.commons.math3.dfp.DfpField#getZero()",
        "org.apache.commons.math3.complex.ComplexField#getOne()",
        "org.apache.commons.math3.util.BigRealField#getOne()",
        "org.apache.commons.math3.analysis.differentiation.DerivativeStructure#getField()$Field$1#getZero()",
        "org.apache.commons.math3.fraction.FractionField#getZero()",
        "org.apache.commons.math3.complex.ComplexField#getZero()",
        "org.apache.commons.math3.dfp.DfpField#getOne()",
        "org.apache.commons.math3.fraction.BigFractionField#getZero()",
        "org.apache.commons.math3.analysis.differentiation.DerivativeStructure#getField()$Field$1#getOne()",
        "org.apache.commons.math3.util.MathArrays.buildArray(Field<T>,int)",
        "org.apache.commons.math3.util.Decimal64Field#getOne()"
    ],
    "org.apache.commons.math3.ode.nonstiff.RungeKuttaIntegrator#singleStep(FirstOrderDifferentialEquations,double,double[],double)": [
        "org.apache.commons.math3.ode.MultistepIntegrator#start(double,double[],double)$FirstOrderDifferentialEquations$1#computeDerivatives(double,double[],double[])",
        "org.apache.commons.math3.ode.FirstOrderConverter#computeDerivatives(double,double[],double[])",
        "org.apache.commons.math3.ode.JacobianMatrices.MainStateJacobianWrapper#computeDerivatives(double,double[],double[])"
    ],
    "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer.zeros(int,int)": ["org.apache.commons.math3.linear.Array2DRowRealMatrix#Array2DRowRealMatrix(int,int)"],
    "org.apache.commons.math3.linear.JacobiPreconditioner#sqrt()$RealLinearOperator$1#operate(RealVector)": [
        "org.apache.commons.math3.linear.ArrayRealVector#ArrayRealVector(double[],boolean)",
        "org.apache.commons.math3.linear.RealVector.unmodifiableRealVector(RealVector)$RealVector$1#toArray()",
        "org.apache.commons.math3.util.MathArrays.ebeDivide(double[],double[])",
        "org.apache.commons.math3.linear.OpenMapRealVector#toArray()",
        "org.apache.commons.math3.linear.RealVector#toArray()",
        "org.apache.commons.math3.linear.ArrayRealVector#toArray()"
    ],
    "org.apache.commons.math3.random.EmpiricalDistribution#getNumericalVariance()": [
        "org.apache.commons.math3.stat.descriptive.SummaryStatistics#getVariance()",
        "org.apache.commons.math3.stat.descriptive.SynchronizedSummaryStatistics#getVariance()"
    ],
    "org.apache.commons.math3.fitting.leastsquares.LeastSquaresFactory.create(MultivariateJacobianFunction,RealVector,RealVector,ConvergenceChecker<Evaluation>,int,int)": ["org.apache.commons.math3.fitting.leastsquares.LeastSquaresFactory.create(MultivariateJacobianFunction,RealVector,RealVector,RealMatrix,ConvergenceChecker<Evaluation>,int,int,boolean,ParameterValidator)"],
    "org.apache.commons.math3.stat.descriptive.AbstractUnivariateStatistic#test(double[],int,int)": ["org.apache.commons.math3.util.MathArrays.verifyValues(double[],int,int,boolean)"],
    "org.apache.commons.math3.analysis.differentiation.DSCompiler.compileLowerIndirection(int,int,DSCompiler,DSCompiler)": ["org.apache.commons.math3.analysis.differentiation.DSCompiler#getSize()"],
    "org.apache.commons.math3.util.CombinatoricsUtils.stirlingS2(int,int)": [
        "org.apache.commons.math3.util.ArithmeticUtils.pow(int,int)",
        "org.apache.commons.math3.util.CombinatoricsUtils.binomialCoefficient(int,int)",
        "org.apache.commons.math3.util.CombinatoricsUtils.factorial(int)",
        "org.apache.commons.math3.util.CombinatoricsUtils.<staticinit>()",
        "org.apache.commons.math3.exception.util.LocalizedFormats.<staticinit>()"
    ],
    "org.apache.commons.math3.linear.AbstractRealMatrix#walkInOptimizedOrder(RealMatrixPreservingVisitor)": [
        "org.apache.commons.math3.linear.BlockRealMatrix#walkInRowOrder(RealMatrixPreservingVisitor)",
        "org.apache.commons.math3.linear.AbstractRealMatrix#walkInRowOrder(RealMatrixPreservingVisitor)",
        "org.apache.commons.math3.linear.Array2DRowRealMatrix#walkInRowOrder(RealMatrixPreservingVisitor)"
    ],
    "org.apache.commons.math3.userguide.sofm.ChineseRingsClassifier.printHit(String,ChineseRingsClassifier)": ["org.apache.commons.math3.userguide.sofm.ChineseRingsClassifier#computeHitHistogram()"],
    "org.apache.commons.math3.geometry.partitioning.AbstractRegion#side(Hyperplane<S extends Space>)": [
        "org.apache.commons.math3.geometry.partitioning.InsideFinder#recurseSides(BSPTree<S extends Space>,SubHyperplane<S extends Space>)",
        "org.apache.commons.math3.geometry.euclidean.oned.OrientedPoint#wholeHyperplane()",
        "org.apache.commons.math3.geometry.spherical.twod.Circle#wholeHyperplane()",
        "org.apache.commons.math3.geometry.partitioning.Side.<staticinit>()",
        "org.apache.commons.math3.geometry.partitioning.InsideFinder#InsideFinder(Region<S extends Space>)",
        "org.apache.commons.math3.geometry.spherical.oned.LimitAngle#wholeHyperplane()",
        "org.apache.commons.math3.geometry.euclidean.twod.Line#wholeHyperplane()",
        "org.apache.commons.math3.geometry.euclidean.threed.Plane#wholeHyperplane()",
        "org.apache.commons.math3.geometry.partitioning.InsideFinder#plusFound()",
        "org.apache.commons.math3.geometry.partitioning.InsideFinder#minusFound()"
    ],
    "org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile#toString()": ["org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile.<staticinit>()"],
    "org.apache.commons.math3.linear.IterativeLinearSolver.checkParameters(RealLinearOperator,RealVector,RealVector)": [
        "org.apache.commons.math3.linear.JacobiPreconditioner#getRowDimension()",
        "org.apache.commons.math3.linear.DiagonalMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.Array2DRowRealMatrix#getColumnDimension()",
        "org.apache.commons.math3.util.MathUtils.checkNotNull(Object)",
        "org.apache.commons.math3.linear.ArrayRealVector#getDimension()",
        "org.apache.commons.math3.linear.OpenMapRealMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.JacobiPreconditioner#getColumnDimension()",
        "org.apache.commons.math3.linear.OpenMapRealMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.DiagonalMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.JacobiPreconditioner#sqrt()$RealLinearOperator$1#getColumnDimension()",
        "org.apache.commons.math3.linear.NonSquareOperatorException#NonSquareOperatorException(int,int)",
        "org.apache.commons.math3.linear.OpenMapRealVector#getDimension()",
        "org.apache.commons.math3.exception.DimensionMismatchException#DimensionMismatchException(int,int)",
        "org.apache.commons.math3.linear.BlockRealMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.JacobiPreconditioner#sqrt()$RealLinearOperator$1#getRowDimension()",
        "org.apache.commons.math3.linear.Array2DRowRealMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.BlockRealMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.RealVector.unmodifiableRealVector(RealVector)$RealVector$1#getDimension()"
    ],
    "org.apache.commons.math3.fitting.HarmonicCurveFitter#HarmonicCurveFitter(double[],int)": [
        "org.apache.commons.math3.fitting.AbstractCurveFitter.<init>()",
        "org.apache.commons.math3.fitting.HarmonicCurveFitter.<init>()"
    ],
    "org.apache.commons.math3.linear.Array2DRowFieldMatrix#Array2DRowFieldMatrix(Field<T extends FieldElement>,int,int)": [
        "org.apache.commons.math3.util.MathArrays.buildArray(Field<T>,int,int)",
        "org.apache.commons.math3.linear.AbstractFieldMatrix#AbstractFieldMatrix(Field<T extends FieldElement>,int,int)",
        "org.apache.commons.math3.linear.Array2DRowFieldMatrix.<init>()"
    ],
    "org.apache.commons.math3.optimization.fitting.GaussianFitter.ParameterGuesser#findMaxY(WeightedObservedPoint[])": ["org.apache.commons.math3.optimization.fitting.WeightedObservedPoint#getY()"],
    "org.apache.commons.math3.util.MultidimensionalCounter.Iterator#next()": ["org.apache.commons.math3.util.MultidimensionalCounter.Iterator#hasNext()"],
    "org.apache.commons.math3.ode.nonstiff.AdaptiveStepsizeIntegrator#filterStep(double,boolean,boolean)": [
        "org.apache.commons.math3.util.FastMath.abs(double)",
        "org.apache.commons.math3.exception.util.LocalizedFormats.<staticinit>()"
    ],
    "org.apache.commons.math3.fraction.BigFractionFormat#format(BigFraction,StringBuffer,FieldPosition)": [
        "org.apache.commons.math3.fraction.BigFraction#getNumerator()",
        "org.apache.commons.math3.fraction.BigFraction#getDenominator()",
        "org.apache.commons.math3.fraction.AbstractFormat#getNumeratorFormat()",
        "org.apache.commons.math3.fraction.FractionFormat#format(Object,StringBuffer,FieldPosition)",
        "org.apache.commons.math3.fraction.BigFractionFormat#format(Object,StringBuffer,FieldPosition)",
        "org.apache.commons.math3.fraction.AbstractFormat#getDenominatorFormat()"
    ],
    "org.apache.commons.math3.analysis.interpolation.TricubicSplineInterpolatingFunction#TricubicSplineInterpolatingFunction(double[],double[],double[],double[][][],double[][][],double[][][],double[][][],double[][][],double[][][],double[][][],double[][][])": [
        "org.apache.commons.math3.exception.DimensionMismatchException#DimensionMismatchException(int,int)",
        "org.apache.commons.math3.analysis.interpolation.TricubicSplineInterpolatingFunction.<init>()",
        "org.apache.commons.math3.exception.NoDataException#NoDataException()",
        "org.apache.commons.math3.analysis.interpolation.TricubicSplineFunction#TricubicSplineFunction(double[])",
        "org.apache.commons.math3.analysis.interpolation.TricubicSplineInterpolatingFunction#computeSplineCoefficients(double[])",
        "org.apache.commons.math3.util.MathArrays.checkOrder(double[])"
    ],
    "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer.selectColumns(RealMatrix,int[])": [
        "org.apache.commons.math3.linear.BlockFieldMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.Array2DRowRealMatrix#getEntry(int,int)",
        "org.apache.commons.math3.linear.BlockRealMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.Array2DRowRealMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.SparseFieldMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.DiagonalMatrix#getEntry(int,int)",
        "org.apache.commons.math3.linear.OpenMapRealMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.DiagonalMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.Array2DRowFieldMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.OpenMapRealMatrix#getEntry(int,int)",
        "org.apache.commons.math3.linear.BlockRealMatrix#getEntry(int,int)",
        "org.apache.commons.math3.linear.Array2DRowRealMatrix#Array2DRowRealMatrix(double[][],boolean)"
    ],
    "org.apache.commons.math3.util.IntegerSequence.range(int,int,int)": ["org.apache.commons.math3.util.IntegerSequence.Range#Range(int,int,int)"],
    "org.apache.commons.math3.linear.ArrayFieldVector#copy()": ["org.apache.commons.math3.linear.ArrayFieldVector#ArrayFieldVector(ArrayFieldVector<T extends FieldElement>,boolean)"],
    "org.apache.commons.math3.geometry.euclidean.oned.Interval#getLower()": ["org.apache.commons.math3.geometry.euclidean.oned.Interval#getInf()"],
    "org.apache.commons.math3.stat.inference.TTest#t(double,double,double,double)": ["org.apache.commons.math3.util.FastMath.sqrt(double)"],
    "org.apache.commons.math3.stat.descriptive.summary.SumOfSquares.copy(SumOfSquares,SumOfSquares)": [
        "org.apache.commons.math3.stat.descriptive.AbstractUnivariateStatistic#setData(double[])",
        "org.apache.commons.math3.util.MathUtils.checkNotNull(Object)",
        "org.apache.commons.math3.stat.descriptive.rank.Percentile#setData(double[])",
        "org.apache.commons.math3.stat.descriptive.AbstractUnivariateStatistic#getDataRef()"
    ],
    "org.apache.commons.math3.optimization.univariate.BaseAbstractUnivariateOptimizer#BaseAbstractUnivariateOptimizer(ConvergenceChecker<UnivariatePointValuePair>)": ["org.apache.commons.math3.optimization.univariate.BaseAbstractUnivariateOptimizer.<init>()"],
    "org.apache.commons.math3.analysis.interpolation.BicubicInterpolatingFunction#BicubicInterpolatingFunction(double[],double[],double[][],double[][],double[][],double[][])": [
        "org.apache.commons.math3.exception.DimensionMismatchException#DimensionMismatchException(int,int)",
        "org.apache.commons.math3.exception.NoDataException#NoDataException()",
        "org.apache.commons.math3.analysis.interpolation.BicubicFunction#BicubicFunction(double[])",
        "org.apache.commons.math3.analysis.interpolation.BicubicInterpolatingFunction#computeSplineCoefficients(double[])",
        "org.apache.commons.math3.analysis.interpolation.BicubicInterpolatingFunction.<init>()",
        "org.apache.commons.math3.util.MathArrays.checkOrder(double[])"
    ],
    "org.apache.commons.math3.distribution.AbstractRealDistribution.<init>()": [
        "org.apache.commons.math3.distribution.AbstractRealDistribution.<staticinit>()",
        "org.apache.commons.math3.random.RandomDataImpl#RandomDataImpl()"
    ],
    "org.apache.commons.math3.util.Decimal64#linearCombination(Decimal64,Decimal64,Decimal64,Decimal64,Decimal64,Decimal64)": [
        "org.apache.commons.math3.util.MathArrays.linearCombination(double,double,double,double,double,double)",
        "org.apache.commons.math3.util.Decimal64#Decimal64(double)"
    ],
    "org.apache.commons.math3.geometry.euclidean.twod.SubLine.buildIntervalSet(Vector2D,Vector2D,double)": [
        "org.apache.commons.math3.geometry.euclidean.twod.Line#Line(Vector2D,Vector2D,double)",
        "org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet#IntervalsSet(double,double,double)",
        "org.apache.commons.math3.geometry.euclidean.oned.Vector1D#getX()",
        "org.apache.commons.math3.geometry.euclidean.twod.Line#toSubSpace(Point<Euclidean2D>)"
    ],
    "org.apache.commons.math3.complex.Complex#cosh()": [
        "org.apache.commons.math3.util.FastMath.sin(double)",
        "org.apache.commons.math3.util.FastMath.cosh(double)",
        "org.apache.commons.math3.complex.Complex.<staticinit>()",
        "org.apache.commons.math3.util.FastMath.sinh(double)",
        "org.apache.commons.math3.complex.Complex#createComplex(double,double)",
        "org.apache.commons.math3.util.FastMath.cos(double)"
    ],
    "org.apache.commons.math3.optim.BaseMultivariateOptimizer#parseOptimizationData(OptimizationData[]...)": [
        "org.apache.commons.math3.optim.BaseMultivariateOptimizer#checkParameters()",
        "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.PowellOptimizer#checkParameters()",
        "org.apache.commons.math3.optim.SimpleBounds#getUpper()",
        "org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizer#checkParameters()",
        "org.apache.commons.math3.optim.nonlinear.vector.jacobian.GaussNewtonOptimizer#checkParameters()",
        "org.apache.commons.math3.optim.nonlinear.scalar.gradient.NonLinearConjugateGradientOptimizer#checkParameters()",
        "org.apache.commons.math3.optim.BaseOptimizer#parseOptimizationData(OptimizationData[]...)",
        "org.apache.commons.math3.optim.InitialGuess#getInitialGuess()",
        "org.apache.commons.math3.optim.nonlinear.vector.MultivariateVectorOptimizer#checkParameters()",
        "org.apache.commons.math3.optim.SimpleBounds#getLower()",
        "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer#checkParameters()",
        "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizer#checkParameters()"
    ],
    "org.apache.commons.math3.optimization.direct.AbstractSimplex#AbstractSimplex(int)": ["org.apache.commons.math3.optimization.direct.AbstractSimplex#AbstractSimplex(int,double)"],
    "org.apache.commons.math3.ode.nonstiff.DormandPrince853FieldIntegrator#DormandPrince853FieldIntegrator(Field<T extends RealFieldElement>,double,double,double[],double[])": [
        "org.apache.commons.math3.ode.nonstiff.DormandPrince853FieldIntegrator.<staticinit>()",
        "org.apache.commons.math3.ode.nonstiff.DormandPrince853FieldIntegrator.<init>()",
        "org.apache.commons.math3.ode.nonstiff.EmbeddedRungeKuttaFieldIntegrator#EmbeddedRungeKuttaFieldIntegrator(Field<T extends RealFieldElement>,String,int,double,double,double[],double[])",
        "org.apache.commons.math3.ode.nonstiff.EmbeddedRungeKuttaFieldIntegrator#fraction(double,double)"
    ],
    "org.apache.commons.math3.optimization.univariate.BaseAbstractUnivariateOptimizer#optimize(int,UnivariateFunction,GoalType,double,double,double)": [
        "org.apache.commons.math3.exception.NullArgumentException#NullArgumentException()",
        "org.apache.commons.math3.optimization.univariate.BrentOptimizer#doOptimize()",
        "org.apache.commons.math3.util.Incrementor.wrap(Incrementor)$Incrementor$1#setMaximalCount(int)",
        "org.apache.commons.math3.util.Incrementor#setMaximalCount(int)",
        "org.apache.commons.math3.util.Incrementor.wrap(Incrementor)$Incrementor$1#resetCount()",
        "org.apache.commons.math3.util.Incrementor#resetCount()"
    ],
    "org.apache.commons.math3.genetics.Chromosome#findSameChromosome(Population)": [
        "org.apache.commons.math3.genetics.Chromosome#isSame(Chromosome)",
        "org.apache.commons.math3.genetics.BinaryChromosome#isSame(Chromosome)",
        "org.apache.commons.math3.genetics.RandomKey#isSame(Chromosome)"
    ],
    "org.apache.commons.math3.special.Gamma.digamma(double)": [
        "org.apache.commons.math3.special.Gamma.digamma(double)",
        "org.apache.commons.math3.util.FastMath.log(double)",
        "org.apache.commons.math3.special.Gamma.<staticinit>()"
    ],
    "org.apache.commons.math3.stat.descriptive.summary.Sum#copy()": [
        "org.apache.commons.math3.stat.descriptive.summary.Sum.copy(Sum,Sum)",
        "org.apache.commons.math3.stat.descriptive.summary.Sum#Sum()"
    ],
    "org.apache.commons.math3.random.ISAACRandom#setSeed(long)": ["org.apache.commons.math3.random.ISAACRandom#setSeed(int[])"],
    "org.apache.commons.math3.analysis.differentiation.DSCompiler.getCompiler(int,int)": [
        "org.apache.commons.math3.analysis.differentiation.DSCompiler.<staticinit>()",
        "org.apache.commons.math3.analysis.differentiation.DSCompiler#DSCompiler(int,int,DSCompiler,DSCompiler)",
        "org.apache.commons.math3.util.FastMath.min(int,int)",
        "org.apache.commons.math3.util.FastMath.max(int,int)"
    ],
    "org.apache.commons.math3.optim.PointVectorValuePair.DataTransferObject#readResolve()": ["org.apache.commons.math3.optim.PointVectorValuePair#PointVectorValuePair(double[],double[],boolean)"],
    "org.apache.commons.math3.linear.SparseFieldVector#SparseFieldVector(Field<T extends FieldElement>,int,int)": [
        "org.apache.commons.math3.util.OpenIntToFieldHashMap#OpenIntToFieldHashMap(Field<T extends FieldElement>,int)",
        "org.apache.commons.math3.linear.SparseFieldVector.<init>()"
    ],
    "org.apache.commons.math3.geometry.partitioning.AbstractRegion#AbstractRegion(Collection<SubHyperplane<S extends Space>>,double)": [
        "org.apache.commons.math3.geometry.partitioning.BSPTree#BSPTree()",
        "org.apache.commons.math3.geometry.partitioning.BSPTree#BSPTree(Object)",
        "org.apache.commons.math3.geometry.partitioning.BSPTree#visit(BSPTreeVisitor<S extends Space>)",
        "org.apache.commons.math3.geometry.partitioning.AbstractRegion#AbstractRegion(Collection<SubHyperplane<S extends Space>>,double)$Comparator$1.<init>()",
        "org.apache.commons.math3.geometry.partitioning.AbstractRegion#AbstractRegion(Collection<SubHyperplane<S extends Space>>,double)$BSPTreeVisitor$1.<init>()",
        "org.apache.commons.math3.geometry.partitioning.AbstractRegion.<init>()",
        "org.apache.commons.math3.geometry.partitioning.AbstractRegion#insertCuts(BSPTree<S extends Space>,Collection<SubHyperplane<S extends Space>>)"
    ],
    "org.apache.commons.math3.optimization.univariate.BracketFinder.<init>()": ["org.apache.commons.math3.util.Incrementor#Incrementor()"],
    "org.apache.commons.math3.analysis.solvers.PegasusSolver#PegasusSolver(double,double)": [
        "org.apache.commons.math3.analysis.solvers.BaseSecantSolver.Method.<staticinit>()",
        "org.apache.commons.math3.analysis.solvers.PegasusSolver.<init>()",
        "org.apache.commons.math3.analysis.solvers.BaseSecantSolver#BaseSecantSolver(double,double,Method)"
    ],
    "org.apache.commons.math3.linear.RealMatrixFormat#format(RealMatrix,StringBuffer,FieldPosition)": [
        "org.apache.commons.math3.linear.DiagonalMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.Array2DRowRealMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.BlockFieldMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.SparseFieldMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.DiagonalMatrix#getEntry(int,int)",
        "org.apache.commons.math3.linear.OpenMapRealMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.OpenMapRealMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.DiagonalMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.OpenMapRealMatrix#getEntry(int,int)",
        "org.apache.commons.math3.linear.BlockRealMatrix#getEntry(int,int)",
        "org.apache.commons.math3.linear.Array2DRowFieldMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.BlockFieldMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.SparseFieldMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.Array2DRowRealMatrix#getEntry(int,int)",
        "org.apache.commons.math3.linear.BlockRealMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.Array2DRowRealMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.Array2DRowFieldMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.BlockRealMatrix#getColumnDimension()",
        "org.apache.commons.math3.util.CompositeFormat.formatDouble(double,NumberFormat,StringBuffer,FieldPosition)"
    ],
    "org.apache.commons.math3.ode.events.EventFilter#init(double,double[],double)": [
        "org.apache.commons.math3.ode.events.EventFilter#init(double,double[],double)",
        "org.apache.commons.math3.ode.events.Transformer.<staticinit>()"
    ],
    "org.apache.commons.math3.special.Beta.regularizedBeta(double,double,double,double,int)": [
        "org.apache.commons.math3.util.FastMath.log1p(double)",
        "org.apache.commons.math3.util.FastMath.exp(double)",
        "org.apache.commons.math3.special.Beta.regularizedBeta(double,double,double,double,int)",
        "org.apache.commons.math3.special.Beta.logBeta(double,double)",
        "org.apache.commons.math3.util.ContinuedFraction#evaluate(double,double,int)",
        "org.apache.commons.math3.util.FastMath.log(double)",
        "org.apache.commons.math3.special.Beta.regularizedBeta(double,double,double,double,int)$ContinuedFraction$1.<init>()"
    ],
    "org.apache.commons.math3.distribution.fitting.MultivariateNormalMixtureExpectationMaximization#getFittedModel()": [
        "org.apache.commons.math3.distribution.MixtureMultivariateRealDistribution#getComponents()",
        "org.apache.commons.math3.distribution.MixtureMultivariateNormalDistribution#MixtureMultivariateNormalDistribution(List<Pair<Double, MultivariateNormalDistribution>>)"
    ],
    "org.apache.commons.math3.stat.regression.RegressionResults#getErrorSumSquares()": ["org.apache.commons.math3.stat.regression.RegressionResults.<staticinit>()"],
    "org.apache.commons.math3.stat.inference.TestUtils.kolmogorovSmirnovTest(double[],double[],boolean)": [
        "org.apache.commons.math3.stat.inference.KolmogorovSmirnovTest#kolmogorovSmirnovTest(double[],double[],boolean)",
        "org.apache.commons.math3.stat.inference.TestUtils.<staticinit>()"
    ],
    "org.apache.commons.math3.util.FastMath.expm1(double)": ["org.apache.commons.math3.util.FastMath.expm1(double,double[])"],
    "org.apache.commons.math3.util.ArithmeticUtils#ArithmeticUtils()": ["org.apache.commons.math3.util.ArithmeticUtils.<init>()"],
    "org.apache.commons.math3.random.JDKRandomGenerator#JDKRandomGenerator()": ["org.apache.commons.math3.random.JDKRandomGenerator.<init>()"],
    "org.apache.commons.math3.primes.Primes.nextPrime(int)": [
        "org.apache.commons.math3.primes.Primes.isPrime(int)",
        "org.apache.commons.math3.exception.util.LocalizedFormats.<staticinit>()"
    ],
    "org.apache.commons.math3.util.OpenIntToDoubleHashMap#OpenIntToDoubleHashMap(double)": [
        "org.apache.commons.math3.util.OpenIntToDoubleHashMap.<staticinit>()",
        "org.apache.commons.math3.util.OpenIntToDoubleHashMap#OpenIntToDoubleHashMap(int,double)"
    ],
    "org.apache.commons.math3.util.IntegerSequence.Incrementor#canIncrement()": ["org.apache.commons.math3.util.IntegerSequence.Incrementor#canIncrement(int)"],
    "org.apache.commons.math3.special.Erf.erfcInv(double)": ["org.apache.commons.math3.special.Erf.erfInv(double)"],
    "org.apache.commons.math3.distribution.EnumeratedDistribution#sample(int,T[])": [
        "org.apache.commons.math3.distribution.EnumeratedDistribution#sample()",
        "org.apache.commons.math3.exception.util.LocalizedFormats.<staticinit>()"
    ],
    "org.apache.commons.math3.linear.Array2DRowFieldMatrix#createMatrix(int,int)": [
        "org.apache.commons.math3.linear.Array2DRowFieldMatrix#Array2DRowFieldMatrix(Field<T extends FieldElement>,int,int)",
        "org.apache.commons.math3.linear.AbstractFieldMatrix#getField()"
    ],
    "org.apache.commons.math3.dfp.Dfp#complement(int)": ["org.apache.commons.math3.dfp.Dfp.<staticinit>()"],
    "org.apache.commons.math3.random.RandomGeneratorFactory.createRandomGenerator(Random)$RandomGenerator$1#nextGaussian()": ["org.apache.commons.math3.random.RandomAdaptor#nextGaussian()"],
    "org.apache.commons.math3.geometry.partitioning.utilities.AVLTree#getLargest()": ["org.apache.commons.math3.geometry.partitioning.utilities.AVLTree.Node#getLargest()"],
    "org.apache.commons.math3.stat.descriptive.SynchronizedDescriptiveStatistics#setWindowSize(int)": ["org.apache.commons.math3.stat.descriptive.DescriptiveStatistics#setWindowSize(int)"],
    "org.apache.commons.math3.geometry.spherical.twod.Circle#reset(Vector3D)": [
        "org.apache.commons.math3.geometry.euclidean.threed.Vector3D#normalize()",
        "org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(Vector3D,Vector3D)",
        "org.apache.commons.math3.geometry.euclidean.threed.Vector3D#orthogonal()"
    ],
    "org.apache.commons.math3.stat.regression.RegressionResults#RegressionResults(double[],double[][],boolean,long,int,double,double,double,boolean,boolean)": [
        "org.apache.commons.math3.stat.regression.RegressionResults.<staticinit>()",
        "org.apache.commons.math3.stat.regression.RegressionResults.<init>()",
        "org.apache.commons.math3.util.MathArrays.copyOf(double[])"
    ],
    "org.apache.commons.math3.util.FastMathCalc.splitReciprocal(double[],double[])": ["org.apache.commons.math3.util.FastMathCalc.resplit(double[])"],
    "org.apache.commons.math3.util.ContinuedFraction#ContinuedFraction()": ["org.apache.commons.math3.util.ContinuedFraction.<init>()"],
    "org.apache.commons.math3.stat.descriptive.moment.GeometricMean#copy()": [
        "org.apache.commons.math3.stat.descriptive.moment.GeometricMean.copy(GeometricMean,GeometricMean)",
        "org.apache.commons.math3.stat.descriptive.moment.GeometricMean#GeometricMean()"
    ],
    "org.apache.commons.math3.geometry.partitioning.RegionFactory.DifferenceMerger#fixNode(BSPTree<S extends Space>)": [
        "org.apache.commons.math3.geometry.partitioning.BSPTree#pruneAroundConvexCell(Object,Object,Object)",
        "org.apache.commons.math3.geometry.partitioning.AbstractRegion#checkPoint(Point<S extends Space>)",
        "org.apache.commons.math3.geometry.partitioning.BSPTree#BSPTree(Object)",
        "org.apache.commons.math3.geometry.partitioning.AbstractRegion#getBarycenter()",
        "org.apache.commons.math3.geometry.partitioning.Region.Location.<staticinit>()"
    ],
    "org.apache.commons.math3.linear.RRQRDecomposition.Solver#solve(RealVector)": [
        "org.apache.commons.math3.linear.QRDecomposition.Solver#solve(RealVector)",
        "org.apache.commons.math3.linear.CholeskyDecomposition.Solver#solve(RealVector)",
        "org.apache.commons.math3.linear.SingularValueDecomposition.Solver#solve(RealVector)",
        "org.apache.commons.math3.linear.RRQRDecomposition.Solver#solve(RealVector)",
        "org.apache.commons.math3.linear.AbstractRealMatrix#operate(RealVector)",
        "org.apache.commons.math3.linear.LUDecomposition.Solver#solve(RealVector)",
        "org.apache.commons.math3.linear.EigenDecomposition.Solver#solve(RealVector)"
    ],
    "org.apache.commons.math3.geometry.spherical.oned.ArcsSet#previousInternalNode(BSPTree<Sphere1D>)": [
        "org.apache.commons.math3.geometry.spherical.oned.ArcsSet#isBeforeParent(BSPTree<Sphere1D>)",
        "org.apache.commons.math3.geometry.partitioning.BSPTree#getParent()",
        "org.apache.commons.math3.geometry.partitioning.BSPTree#getCut()",
        "org.apache.commons.math3.geometry.spherical.oned.ArcsSet#leafBefore(BSPTree<Sphere1D>)",
        "org.apache.commons.math3.geometry.spherical.oned.ArcsSet#childBefore(BSPTree<Sphere1D>)"
    ],
    "org.apache.commons.math3.fitting.PolynomialCurveFitter.create(int)": ["org.apache.commons.math3.fitting.PolynomialCurveFitter#PolynomialCurveFitter(double[],int)"],
    "org.apache.commons.math3.util.MathArrays.ebeSubtract(double[],double[])": ["org.apache.commons.math3.util.MathArrays.checkEqualLength(double[],double[])"],
    "org.apache.commons.math3.linear.BlockRealMatrix#scalarMultiply(double)": ["org.apache.commons.math3.linear.BlockRealMatrix#BlockRealMatrix(int,int)"],
    "org.apache.commons.math3.ode.nonstiff.EmbeddedRungeKuttaIntegrator#EmbeddedRungeKuttaIntegrator(String,boolean,double[],double[][],double[],RungeKuttaStepInterpolator,double,double,double[],double[])": [
        "org.apache.commons.math3.ode.nonstiff.DormandPrince54Integrator#getOrder()",
        "org.apache.commons.math3.ode.nonstiff.AdaptiveStepsizeIntegrator#AdaptiveStepsizeIntegrator(String,double,double,double[],double[])",
        "org.apache.commons.math3.ode.nonstiff.EmbeddedRungeKuttaIntegrator#setMaxGrowth(double)",
        "org.apache.commons.math3.ode.nonstiff.EmbeddedRungeKuttaIntegrator.<init>()",
        "org.apache.commons.math3.ode.nonstiff.EmbeddedRungeKuttaIntegrator#setMinReduction(double)",
        "org.apache.commons.math3.ode.nonstiff.EmbeddedRungeKuttaIntegrator#setSafety(double)",
        "org.apache.commons.math3.ode.nonstiff.DormandPrince853Integrator#getOrder()",
        "org.apache.commons.math3.ode.nonstiff.HighamHall54Integrator#getOrder()"
    ],
    "org.apache.commons.math3.linear.MatrixUtils.solveUpperTriangularSystem(RealMatrix,RealVector)": [
        "org.apache.commons.math3.linear.DiagonalMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.Array2DRowRealMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.BlockFieldMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.DiagonalMatrix#getEntry(int,int)",
        "org.apache.commons.math3.linear.OpenMapRealMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.OpenMapRealVector#setEntry(int,double)",
        "org.apache.commons.math3.exception.util.LocalizedFormats.<staticinit>()",
        "org.apache.commons.math3.linear.DiagonalMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.ArrayRealVector#setEntry(int,double)",
        "org.apache.commons.math3.linear.BlockRealMatrix#getEntry(int,int)",
        "org.apache.commons.math3.linear.BlockFieldMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.OpenMapRealVector#getDimension()",
        "org.apache.commons.math3.exception.DimensionMismatchException#DimensionMismatchException(int,int)",
        "org.apache.commons.math3.linear.BlockRealMatrix#getRowDimension()",
        "org.apache.commons.math3.util.Precision.<staticinit>()",
        "org.apache.commons.math3.linear.NonSquareMatrixException#NonSquareMatrixException(int,int)",
        "org.apache.commons.math3.util.FastMath.abs(double)",
        "org.apache.commons.math3.linear.RealVector.unmodifiableRealVector(RealVector)$RealVector$1#getDimension()",
        "org.apache.commons.math3.linear.ArrayRealVector#getDimension()",
        "org.apache.commons.math3.linear.SparseFieldMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.OpenMapRealMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.ArrayRealVector#getEntry(int)",
        "org.apache.commons.math3.linear.OpenMapRealMatrix#getEntry(int,int)",
        "org.apache.commons.math3.linear.RealVector.unmodifiableRealVector(RealVector)$RealVector$1#setEntry(int,double)",
        "org.apache.commons.math3.linear.Array2DRowFieldMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.SparseFieldMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.Array2DRowRealMatrix#getEntry(int,int)",
        "org.apache.commons.math3.linear.Array2DRowRealMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.Array2DRowFieldMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.BlockRealMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.OpenMapRealVector#getEntry(int)",
        "org.apache.commons.math3.linear.RealVector.unmodifiableRealVector(RealVector)$RealVector$1#getEntry(int)"
    ],
    "org.apache.commons.math3.geometry.euclidean.threed.Vector3D#Vector3D(double,Vector3D,double,Vector3D)": [
        "org.apache.commons.math3.util.MathArrays.linearCombination(double,double,double,double)",
        "org.apache.commons.math3.geometry.euclidean.threed.Vector3D.<init>()"
    ],
    "org.apache.commons.math3.geometry.VectorFormat#VectorFormat()": [
        "org.apache.commons.math3.util.CompositeFormat.getDefaultNumberFormat()",
        "org.apache.commons.math3.geometry.VectorFormat.<staticinit>()",
        "org.apache.commons.math3.geometry.VectorFormat#VectorFormat(String,String,String,NumberFormat)"
    ],
    "org.apache.commons.math3.linear.BlockFieldMatrix#subtract(FieldMatrix<T extends FieldElement>)": [
        "org.apache.commons.math3.linear.SparseFieldMatrix#getEntry(int,int)",
        "org.apache.commons.math3.linear.AbstractFieldMatrix#getField()",
        "org.apache.commons.math3.linear.BlockFieldMatrix#subtract(BlockFieldMatrix<T extends FieldElement>)",
        "org.apache.commons.math3.linear.Array2DRowFieldMatrix#getEntry(int,int)",
        "org.apache.commons.math3.linear.BlockFieldMatrix.<staticinit>()",
        "org.apache.commons.math3.linear.BlockFieldMatrix#getEntry(int,int)",
        "org.apache.commons.math3.util.FastMath.min(int,int)",
        "org.apache.commons.math3.linear.BlockFieldMatrix#BlockFieldMatrix(Field<T extends FieldElement>,int,int)",
        "org.apache.commons.math3.linear.AbstractFieldMatrix#checkSubtractionCompatible(FieldMatrix<T extends FieldElement>)"
    ],
    "org.apache.commons.math3.ode.nonstiff.AdamsFieldIntegrator#updateHighOrderDerivativesPhase2(T extends RealFieldElement[],T extends RealFieldElement[],Array2DRowFieldMatrix<T extends RealFieldElement>)": ["org.apache.commons.math3.ode.nonstiff.AdamsNordsieckFieldTransformer#updateHighOrderDerivativesPhase2(T extends RealFieldElement[],T extends RealFieldElement[],Array2DRowFieldMatrix<T extends RealFieldElement>)"],
    "org.apache.commons.math3.stat.inference.KolmogorovSmirnovTest#roundedK(double,int)": [
        "org.apache.commons.math3.linear.Array2DRowRealMatrix#getEntry(int,int)",
        "org.apache.commons.math3.stat.inference.KolmogorovSmirnovTest#createRoundedH(double,int)",
        "org.apache.commons.math3.linear.OpenMapRealMatrix#getEntry(int,int)",
        "org.apache.commons.math3.linear.DiagonalMatrix#getEntry(int,int)",
        "org.apache.commons.math3.linear.BlockRealMatrix#getEntry(int,int)",
        "org.apache.commons.math3.linear.AbstractRealMatrix#power(int)"
    ],
    "org.apache.commons.math3.optim.BaseOptimizer#getMaxEvaluations()": ["org.apache.commons.math3.util.Incrementor#getMaximalCount()"],
    "org.apache.commons.math3.geometry.euclidean.threed.Vector3D#Vector3D(double,double)": [
        "org.apache.commons.math3.util.FastMath.sin(double)",
        "org.apache.commons.math3.util.FastMath.cos(double)",
        "org.apache.commons.math3.geometry.euclidean.threed.Vector3D.<init>()"
    ],
    "org.apache.commons.math3.stat.inference.TestUtils.kolmogorovSmirnovTest(RealDistribution,double[])": [
        "org.apache.commons.math3.stat.inference.KolmogorovSmirnovTest#kolmogorovSmirnovTest(RealDistribution,double[])",
        "org.apache.commons.math3.stat.inference.TestUtils.<staticinit>()"
    ],
    "org.apache.commons.math3.linear.Array2DRowFieldMatrix#getEntry(int,int)": [
        "org.apache.commons.math3.linear.AbstractFieldMatrix#checkColumnIndex(int)",
        "org.apache.commons.math3.linear.AbstractFieldMatrix#checkRowIndex(int)"
    ],
    "org.apache.commons.math3.analysis.interpolation.TricubicSplineFunction#TricubicSplineFunction(double[])": [
        "org.apache.commons.math3.analysis.interpolation.TricubicSplineFunction.<staticinit>()",
        "org.apache.commons.math3.analysis.interpolation.TricubicSplineFunction.<init>()"
    ],
    "org.apache.commons.math3.optimization.fitting.GaussianFitter#fit(double[])$Parametric$1#value(double,double[]...)": ["org.apache.commons.math3.analysis.function.Gaussian.Parametric#value(double,double[]...)"],
    "org.apache.commons.math3.ode.ParameterizedWrapper#getParameter(String)": [
        "org.apache.commons.math3.ode.UnknownParameterException#UnknownParameterException(String)",
        "org.apache.commons.math3.ode.ParameterizedWrapper#isSupported(String)"
    ],
    "org.apache.commons.math3.optimization.general.LevenbergMarquardtOptimizer#LevenbergMarquardtOptimizer(double,ConvergenceChecker<PointVectorValuePair>,double,double,double,double)": [
        "org.apache.commons.math3.optimization.general.LevenbergMarquardtOptimizer.<init>()",
        "org.apache.commons.math3.optimization.general.AbstractLeastSquaresOptimizer#AbstractLeastSquaresOptimizer(ConvergenceChecker<PointVectorValuePair>)"
    ],
    "org.apache.commons.math3.ode.nonstiff.EmbeddedRungeKuttaIntegrator#EmbeddedRungeKuttaIntegrator(String,boolean,double[],double[][],double[],RungeKuttaStepInterpolator,double,double,double,double)": [
        "org.apache.commons.math3.ode.nonstiff.DormandPrince54Integrator#getOrder()",
        "org.apache.commons.math3.ode.nonstiff.EmbeddedRungeKuttaIntegrator#setMaxGrowth(double)",
        "org.apache.commons.math3.ode.nonstiff.EmbeddedRungeKuttaIntegrator.<init>()",
        "org.apache.commons.math3.ode.nonstiff.EmbeddedRungeKuttaIntegrator#setMinReduction(double)",
        "org.apache.commons.math3.ode.nonstiff.EmbeddedRungeKuttaIntegrator#setSafety(double)",
        "org.apache.commons.math3.ode.nonstiff.AdaptiveStepsizeIntegrator#AdaptiveStepsizeIntegrator(String,double,double,double,double)",
        "org.apache.commons.math3.ode.nonstiff.DormandPrince853Integrator#getOrder()",
        "org.apache.commons.math3.ode.nonstiff.HighamHall54Integrator#getOrder()"
    ],
    "org.apache.commons.math3.fitting.CurveFitter.TheoreticalValuesFunction#getModelFunction()": [
        "org.apache.commons.math3.optim.nonlinear.vector.ModelFunction#ModelFunction(MultivariateVectorFunction)",
        "org.apache.commons.math3.fitting.CurveFitter.TheoreticalValuesFunction#getModelFunction()$MultivariateVectorFunction$1.<init>()"
    ],
    "org.apache.commons.math3.ode.nonstiff.RungeKuttaFieldStepInterpolator#currentStateLinearCombination(T extends RealFieldElement[]...)": [
        "org.apache.commons.math3.ode.FieldODEState#getState()",
        "org.apache.commons.math3.ode.nonstiff.RungeKuttaFieldStepInterpolator#combine(T extends RealFieldElement[],T extends RealFieldElement[]...)",
        "org.apache.commons.math3.ode.sampling.AbstractFieldStepInterpolator#getCurrentState()"
    ],
    "org.apache.commons.math3.geometry.euclidean.threed.Line#Line(Vector3D,Vector3D)": [
        "org.apache.commons.math3.geometry.euclidean.threed.Line#Line(Vector3D,Vector3D,double)",
        "org.apache.commons.math3.geometry.euclidean.threed.Line.<staticinit>()"
    ],
    "org.apache.commons.math3.geometry.spherical.twod.SphericalPolygonsSet#SphericalPolygonsSet(double,S2Point[]...)": [
        "org.apache.commons.math3.geometry.spherical.twod.SphericalPolygonsSet.verticesToTree(double,S2Point[]...)",
        "org.apache.commons.math3.geometry.spherical.twod.SphericalPolygonsSet.<init>()",
        "org.apache.commons.math3.geometry.partitioning.AbstractRegion#AbstractRegion(BSPTree<S extends Space>,double)"
    ],
    "org.apache.commons.math3.complex.Complex#exp()": [
        "org.apache.commons.math3.util.FastMath.sin(double)",
        "org.apache.commons.math3.complex.Complex.<staticinit>()",
        "org.apache.commons.math3.util.FastMath.exp(double)",
        "org.apache.commons.math3.complex.Complex#createComplex(double,double)",
        "org.apache.commons.math3.util.FastMath.cos(double)"
    ],
    "org.apache.commons.math3.optimization.direct.BaseAbstractMultivariateOptimizer#optimize(int,FUNC extends MultivariateFunction,GoalType,double[])": ["org.apache.commons.math3.optimization.InitialGuess#InitialGuess(double[])"],
    "org.apache.commons.math3.random.JDKRandomGenerator#setSeed(int[])": [
        "org.apache.commons.math3.random.RandomGeneratorFactory.convertToLong(int[])",
        "org.apache.commons.math3.random.JDKRandomGenerator#setSeed(int)"
    ],
    "org.apache.commons.math3.stat.regression.SimpleRegression#getSignificance()": [
        "org.apache.commons.math3.stat.regression.SimpleRegression#getSlope()",
        "org.apache.commons.math3.util.FastMath.abs(double)",
        "org.apache.commons.math3.distribution.TDistribution#cumulativeProbability(double)",
        "org.apache.commons.math3.stat.regression.SimpleRegression#getSlopeStdErr()",
        "org.apache.commons.math3.distribution.TDistribution#TDistribution(double)"
    ],
    "org.apache.commons.math3.util.FastMath.pow(double,double)": [
        "org.apache.commons.math3.util.FastMath.log(double,double[])",
        "org.apache.commons.math3.util.FastMath.<staticinit>()",
        "org.apache.commons.math3.util.FastMath.pow(double,long)",
        "org.apache.commons.math3.util.FastMath.exp(double,double,double[])"
    ],
    "org.apache.commons.math3.optim.BaseMultivariateOptimizer#BaseMultivariateOptimizer(ConvergenceChecker<PAIR>)": [
        "org.apache.commons.math3.optim.BaseMultivariateOptimizer.<init>()",
        "org.apache.commons.math3.optim.BaseOptimizer#BaseOptimizer(ConvergenceChecker<PAIR>)"
    ],
    "org.apache.commons.math3.ml.neuralnet.sofm.NeighbourhoodSizeFunctionFactory.quasiSigmoidDecay(double,double,long)$NeighbourhoodSizeFunction$1#value(long)": [
        "org.apache.commons.math3.util.FastMath.rint(double)",
        "org.apache.commons.math3.ml.neuralnet.sofm.util.QuasiSigmoidDecayFunction#value(long)"
    ],
    "org.apache.commons.math3.userguide.filter.ConstantVoltageExample.VoltMeter#getMeasuredVoltage()": [
        "org.apache.commons.math3.userguide.filter.ConstantVoltageExample.VoltMeter#getVoltage()",
        "org.apache.commons.math3.random.RandomAdaptor#nextGaussian()",
        "org.apache.commons.math3.random.SynchronizedRandomGenerator#nextGaussian()",
        "org.apache.commons.math3.random.RandomGeneratorFactory.createRandomGenerator(Random)$RandomGenerator$1#nextGaussian()",
        "org.apache.commons.math3.random.BitsStreamGenerator#nextGaussian()",
        "org.apache.commons.math3.random.AbstractRandomGenerator#nextGaussian()"
    ],
    "org.apache.commons.math3.linear.Array2DRowRealMatrix#Array2DRowRealMatrix(double[][],boolean)": [
        "org.apache.commons.math3.linear.AbstractRealMatrix#AbstractRealMatrix()",
        "org.apache.commons.math3.exception.DimensionMismatchException#DimensionMismatchException(int,int)",
        "org.apache.commons.math3.exception.NullArgumentException#NullArgumentException()",
        "org.apache.commons.math3.exception.util.LocalizedFormats.<staticinit>()",
        "org.apache.commons.math3.exception.NoDataException#NoDataException(Localizable)",
        "org.apache.commons.math3.linear.Array2DRowRealMatrix.<init>()",
        "org.apache.commons.math3.linear.Array2DRowRealMatrix#copyIn(double[][])"
    ],
    "org.apache.commons.math3.optimization.fitting.CurveFitter.TheoreticalValuesFunction#value(double[])": [
        "org.apache.commons.math3.fitting.GaussianCurveFitter$Parametric$1#value(double,double[]...)",
        "org.apache.commons.math3.analysis.function.Logit.Parametric#value(double,double[]...)",
        "org.apache.commons.math3.analysis.polynomials.PolynomialFunction.Parametric#value(double,double[]...)",
        "org.apache.commons.math3.analysis.function.Sigmoid.Parametric#value(double,double[]...)",
        "org.apache.commons.math3.analysis.function.Logistic.Parametric#value(double,double[]...)",
        "org.apache.commons.math3.analysis.function.Gaussian.Parametric#value(double,double[]...)",
        "org.apache.commons.math3.optimization.fitting.WeightedObservedPoint#getX()",
        "org.apache.commons.math3.optimization.fitting.GaussianFitter#fit(double[])$Parametric$1#value(double,double[]...)",
        "org.apache.commons.math3.analysis.function.HarmonicOscillator.Parametric#value(double,double[]...)",
        "org.apache.commons.math3.fitting.GaussianFitter#fit(double[])$Parametric$1#value(double,double[]...)"
    ],
    "org.apache.commons.math3.analysis.differentiation.DerivativeStructure#createConstant(double)": [
        "org.apache.commons.math3.analysis.differentiation.DerivativeStructure#DerivativeStructure(int,int,double[]...)",
        "org.apache.commons.math3.analysis.differentiation.DerivativeStructure#getFreeParameters()",
        "org.apache.commons.math3.analysis.differentiation.DerivativeStructure#getOrder()"
    ],
    "org.apache.commons.math3.optimization.general.AbstractLeastSquaresOptimizer#optimize(int,MultivariateDifferentiableVectorFunction,double[],double[],double[])": [
        "org.apache.commons.math3.optimization.Weight#Weight(double[])",
        "org.apache.commons.math3.optimization.InitialGuess#InitialGuess(double[])",
        "org.apache.commons.math3.optimization.Target#Target(double[])"
    ],
    "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.NelderMeadSimplex#NelderMeadSimplex(int,double,double,double,double,double)": [
        "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.NelderMeadSimplex.<init>()",
        "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.AbstractSimplex#AbstractSimplex(int,double)"
    ],
    "org.apache.commons.math3.optimization.univariate.BracketFinder#search(UnivariateFunction,GoalType,double,double)": [
        "org.apache.commons.math3.optimization.GoalType.<staticinit>()",
        "org.apache.commons.math3.util.FastMath.abs(double)",
        "org.apache.commons.math3.optimization.univariate.BracketFinder#eval(UnivariateFunction,double)",
        "org.apache.commons.math3.util.Incrementor.wrap(Incrementor)$Incrementor$1#resetCount()",
        "org.apache.commons.math3.optimization.univariate.BracketFinder.<staticinit>()",
        "org.apache.commons.math3.util.Incrementor#resetCount()"
    ],
    "org.apache.commons.math3.geometry.partitioning.BoundaryProjector#belongsToPart(Point<S extends Space>,Hyperplane<S extends Space>,Region<T extends Space>)": [
        "org.apache.commons.math3.geometry.partitioning.AbstractRegion#checkPoint(Point<S extends Space>)",
        "org.apache.commons.math3.geometry.partitioning.Region.Location.<staticinit>()"
    ],
    "org.apache.commons.math3.fitting.leastsquares.AbstractEvaluation#getSigma(double)": [
        "org.apache.commons.math3.linear.DiagonalMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.Array2DRowRealMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.BlockFieldMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.DiagonalMatrix#getEntry(int,int)",
        "org.apache.commons.math3.fitting.leastsquares.AbstractEvaluation#getCovariances(double)",
        "org.apache.commons.math3.linear.OpenMapRealVector#setEntry(int,double)",
        "org.apache.commons.math3.linear.ArrayRealVector#ArrayRealVector(int)",
        "org.apache.commons.math3.linear.OpenMapRealMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.OpenMapRealMatrix#getEntry(int,int)",
        "org.apache.commons.math3.linear.RealVector.unmodifiableRealVector(RealVector)$RealVector$1#setEntry(int,double)",
        "org.apache.commons.math3.linear.ArrayRealVector#setEntry(int,double)",
        "org.apache.commons.math3.linear.BlockRealMatrix#getEntry(int,int)",
        "org.apache.commons.math3.linear.Array2DRowFieldMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.SparseFieldMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.Array2DRowRealMatrix#getEntry(int,int)",
        "org.apache.commons.math3.util.FastMath.sqrt(double)",
        "org.apache.commons.math3.linear.BlockRealMatrix#getColumnDimension()"
    ],
    "org.apache.commons.math3.userguide.filter.ConstantVoltageExample.Display#Display()": [
        "org.apache.commons.math3.userguide.filter.ConstantVoltageExample.createComponent()",
        "org.apache.commons.math3.userguide.ExampleUtils.ExampleFrame.<init>()",
        "org.apache.commons.math3.userguide.filter.ConstantVoltageExample.Display.<init>()"
    ],
    "org.apache.commons.math3.geometry.spherical.twod.Sphere2D.LazyHolder.<staticinit>()": ["org.apache.commons.math3.geometry.spherical.twod.Sphere2D#Sphere2D()"],
    "org.apache.commons.math3.geometry.partitioning.Characterization#Characterization(BSPTree<S extends Space>,SubHyperplane<S extends Space>)": [
        "org.apache.commons.math3.geometry.partitioning.NodesSet#NodesSet()",
        "org.apache.commons.math3.geometry.partitioning.Characterization.<init>()",
        "org.apache.commons.math3.geometry.partitioning.Characterization#characterize(BSPTree<S extends Space>,SubHyperplane<S extends Space>,List<BSPTree<S extends Space>>)"
    ],
    "org.apache.commons.math3.analysis.interpolation.MicrosphereProjectionInterpolator#interpolate(double[][],double[])$MultivariateFunction$1#value(double[])": ["org.apache.commons.math3.analysis.interpolation.InterpolatingMicrosphere#value(double[],double[][],double[],double,double)"],
    "org.apache.commons.math3.stat.inference.KolmogorovSmirnovTest#kolmogorovSmirnovTest(RealDistribution,double[])": ["org.apache.commons.math3.stat.inference.KolmogorovSmirnovTest#kolmogorovSmirnovTest(RealDistribution,double[],boolean)"],
    "org.apache.commons.math3.linear.ArrayFieldVector#mapDivide(T extends FieldElement)": [
        "org.apache.commons.math3.util.MathUtils.checkNotNull(Object)",
        "org.apache.commons.math3.util.MathArrays.buildArray(Field<T>,int)",
        "org.apache.commons.math3.linear.ArrayFieldVector#ArrayFieldVector(Field<T extends FieldElement>,T extends FieldElement[],boolean)"
    ],
    "org.apache.commons.math3.linear.RealVector#toArray()": [
        "org.apache.commons.math3.linear.OpenMapRealVector#getDimension()",
        "org.apache.commons.math3.linear.ArrayRealVector#getEntry(int)",
        "org.apache.commons.math3.linear.ArrayRealVector#getDimension()",
        "org.apache.commons.math3.linear.RealVector.unmodifiableRealVector(RealVector)$RealVector$1#getDimension()",
        "org.apache.commons.math3.linear.OpenMapRealVector#getEntry(int)",
        "org.apache.commons.math3.linear.RealVector.unmodifiableRealVector(RealVector)$RealVector$1#getEntry(int)"
    ],
    "org.apache.commons.math3.fraction.BigFraction#reduce()": ["org.apache.commons.math3.fraction.BigFraction#BigFraction(BigInteger,BigInteger)"],
    "org.apache.commons.math3.ode.AbstractFieldIntegrator#computeDerivatives(T extends RealFieldElement,T extends RealFieldElement[])": [
        "org.apache.commons.math3.util.IntegerSequence.Incrementor#increment()",
        "org.apache.commons.math3.ode.FieldExpandableODE#computeDerivatives(T extends RealFieldElement,T extends RealFieldElement[])"
    ],
    "org.apache.commons.math3.distribution.GammaDistribution#GammaDistribution(RandomGenerator,double,double)": [
        "org.apache.commons.math3.distribution.GammaDistribution.<staticinit>()",
        "org.apache.commons.math3.distribution.GammaDistribution#GammaDistribution(RandomGenerator,double,double,double)"
    ],
    "org.apache.commons.math3.util.Precision.equals(float,float)": ["org.apache.commons.math3.util.Precision.equals(float,float,int)"],
    "org.apache.commons.math3.util.Incrementor.wrap(Incrementor)$Incrementor$1#setMaximalCount(int)": [
        "org.apache.commons.math3.util.Incrementor#setMaximalCount(int)",
        "org.apache.commons.math3.util.IntegerSequence.Incrementor#withMaximalCount(int)"
    ],
    "org.apache.commons.math3.analysis.solvers.SecantSolver#SecantSolver()": [
        "org.apache.commons.math3.analysis.solvers.SecantSolver.<init>()",
        "org.apache.commons.math3.analysis.solvers.SecantSolver.<staticinit>()",
        "org.apache.commons.math3.analysis.solvers.AbstractUnivariateSolver#AbstractUnivariateSolver(double)"
    ],
    "org.apache.commons.math3.optim.linear.LinearConstraint#LinearConstraint(double[],double,Relationship,double[],double)": [
        "org.apache.commons.math3.linear.ArrayRealVector#ArrayRealVector(double[],boolean)",
        "org.apache.commons.math3.optim.linear.LinearConstraint.<init>()"
    ],
    "org.apache.commons.math3.analysis.differentiation.FiniteDifferencesDifferentiator#differentiate(UnivariateMatrixFunction)$UnivariateDifferentiableMatrixFunction$1#value(double)": ["org.apache.commons.math3.analysis.differentiation.FiniteDifferencesDifferentiator#differentiate(UnivariateMatrixFunction)$UnivariateDifferentiableMatrixFunction$1#value(double)"],
    "org.apache.commons.math3.distribution.ZipfDistribution.ZipfRejectionInversionSampler#ZipfRejectionInversionSampler(int,double)": [
        "org.apache.commons.math3.distribution.ZipfDistribution.ZipfRejectionInversionSampler#hIntegral(double)",
        "org.apache.commons.math3.distribution.ZipfDistribution.ZipfRejectionInversionSampler#hIntegralInverse(double)",
        "org.apache.commons.math3.distribution.ZipfDistribution.ZipfRejectionInversionSampler.<init>()",
        "org.apache.commons.math3.distribution.ZipfDistribution.ZipfRejectionInversionSampler#h(double)"
    ],
    "org.apache.commons.math3.analysis.differentiation.DerivativeStructure#rint()": [
        "org.apache.commons.math3.analysis.differentiation.DSCompiler#getFreeParameters()",
        "org.apache.commons.math3.analysis.differentiation.DSCompiler#getOrder()",
        "org.apache.commons.math3.util.FastMath.rint(double)",
        "org.apache.commons.math3.analysis.differentiation.DerivativeStructure#DerivativeStructure(int,int,double[]...)"
    ],
    "org.apache.commons.math3.ode.events.FilterType$FilterType$1#selectTransformer(Transformer,double,boolean)": [
        "org.apache.commons.math3.ode.events.Transformer.<staticinit>()",
        "org.apache.commons.math3.exception.MathInternalError#MathInternalError()",
        "org.apache.commons.math3.util.Precision.<staticinit>()"
    ],
    "org.apache.commons.math3.linear.OpenMapRealVector#copy()": ["org.apache.commons.math3.linear.OpenMapRealVector#OpenMapRealVector(OpenMapRealVector)"],
    "org.apache.commons.math3.ml.neuralnet.MapUtils.findBest(double[],Iterable<Neuron>,DistanceMeasure)": [
        "org.apache.commons.math3.ml.distance.EuclideanDistance#compute(double[],double[])",
        "org.apache.commons.math3.ml.distance.ChebyshevDistance#compute(double[],double[])",
        "org.apache.commons.math3.ml.distance.ManhattanDistance#compute(double[],double[])",
        "org.apache.commons.math3.ml.distance.CanberraDistance#compute(double[],double[])",
        "org.apache.commons.math3.ml.distance.EarthMoversDistance#compute(double[],double[])",
        "org.apache.commons.math3.ml.neuralnet.Neuron#getFeatures()"
    ],
    "org.apache.commons.math3.analysis.differentiation.DerivativeStructure#atan()": [
        "org.apache.commons.math3.analysis.differentiation.DerivativeStructure#DerivativeStructure(DSCompiler)",
        "org.apache.commons.math3.analysis.differentiation.DSCompiler#atan(double[],int,double[],int)"
    ],
    "org.apache.commons.math3.analysis.differentiation.DerivativeStructure#divide(double)": ["org.apache.commons.math3.analysis.differentiation.DerivativeStructure#DerivativeStructure(DerivativeStructure)"],
    "org.apache.commons.math3.fraction.AbstractFormat#setNumeratorFormat(NumberFormat)": ["org.apache.commons.math3.exception.util.LocalizedFormats.<staticinit>()"],
    "org.apache.commons.math3.stat.descriptive.moment.StandardDeviation#clear()": ["org.apache.commons.math3.stat.descriptive.moment.Variance#clear()"],
    "org.apache.commons.math3.optimization.direct.BaseAbstractMultivariateOptimizer#computeObjectiveValue(double[])": [
        "org.apache.commons.math3.optim.nonlinear.scalar.MultivariateFunctionMappingAdapter#value(double[])",
        "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizer#doOptimize()$MultivariateFunction$1#value(double[])",
        "org.apache.commons.math3.optimization.direct.MultivariateFunctionMappingAdapter#value(double[])",
        "org.apache.commons.math3.analysis.FunctionUtils.toMultivariateDifferentiableFunction(DifferentiableMultivariateFunction)$MultivariateDifferentiableFunction$1#value(double[])",
        "org.apache.commons.math3.exception.TooManyEvaluationsException#TooManyEvaluationsException(Number)",
        "org.apache.commons.math3.analysis.FunctionUtils.toDifferentiableMultivariateFunction(MultivariateDifferentiableFunction)$DifferentiableMultivariateFunction$1#value(double[])",
        "org.apache.commons.math3.analysis.interpolation.MicrosphereInterpolatingFunction#value(double[])",
        "org.apache.commons.math3.analysis.interpolation.MicrosphereProjectionInterpolator#interpolate(double[][],double[])$MultivariateFunction$1#value(double[])",
        "org.apache.commons.math3.optimization.direct.MultivariateFunctionPenaltyAdapter#value(double[])",
        "org.apache.commons.math3.optim.nonlinear.scalar.MultivariateFunctionPenaltyAdapter#value(double[])",
        "org.apache.commons.math3.util.Incrementor.wrap(Incrementor)$Incrementor$1#incrementCount()",
        "org.apache.commons.math3.optim.linear.LinearObjectiveFunction#value(double[])",
        "org.apache.commons.math3.util.Incrementor#incrementCount()",
        "org.apache.commons.math3.analysis.FunctionUtils.collector(BivariateFunction,UnivariateFunction,double)$MultivariateFunction$1#value(double[])",
        "org.apache.commons.math3.exception.MaxCountExceededException#getMax()",
        "org.apache.commons.math3.optim.nonlinear.scalar.LeastSquaresConverter#value(double[])",
        "org.apache.commons.math3.analysis.FunctionUtils.toDifferentiableMultivariateFunction(MultivariateDifferentiableFunction)$MultivariateFunction$1$MultivariateFunction$1#partialDerivative(int)$MultivariateFunction$1#value(double[])",
        "org.apache.commons.math3.optimization.LeastSquaresConverter#value(double[])",
        "org.apache.commons.math3.optimization.direct.SimplexOptimizer#doOptimize()$MultivariateFunction$1#value(double[])"
    ],
    "org.apache.commons.math3.linear.Array2DRowRealMatrix#walkInRowOrder(RealMatrixPreservingVisitor,int,int,int,int)": [
        "org.apache.commons.math3.linear.Array2DRowRealMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.DefaultRealMatrixPreservingVisitor#start(int,int,int,int,int,int)",
        "org.apache.commons.math3.linear.AbstractRealMatrix#copySubMatrix(int,int,int,int,double[][])$DefaultRealMatrixPreservingVisitor$1#start(int,int,int,int,int,int)",
        "org.apache.commons.math3.linear.DefaultRealMatrixPreservingVisitor#visit(int,int,double)",
        "org.apache.commons.math3.linear.SingularValueDecomposition#getCovariance(double)$DefaultRealMatrixPreservingVisitor$1#visit(int,int,double)",
        "org.apache.commons.math3.linear.AbstractRealMatrix#getNorm()$RealMatrixPreservingVisitor$1#end()",
        "org.apache.commons.math3.linear.AbstractRealMatrix#getFrobeniusNorm()$RealMatrixPreservingVisitor$1#end()",
        "org.apache.commons.math3.linear.AbstractRealMatrix#getFrobeniusNorm()$RealMatrixPreservingVisitor$1#visit(int,int,double)",
        "org.apache.commons.math3.linear.DefaultRealMatrixPreservingVisitor#end()",
        "org.apache.commons.math3.linear.AbstractRealMatrix#getFrobeniusNorm()$RealMatrixPreservingVisitor$1#start(int,int,int,int,int,int)",
        "org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator.Corrector#start(int,int,int,int,int,int)",
        "org.apache.commons.math3.linear.AbstractRealMatrix#getNorm()$RealMatrixPreservingVisitor$1#visit(int,int,double)",
        "org.apache.commons.math3.linear.AbstractRealMatrix#copySubMatrix(int,int,int,int,double[][])$DefaultRealMatrixPreservingVisitor$1#visit(int,int,double)",
        "org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator.Corrector#visit(int,int,double)",
        "org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator.Corrector#end()",
        "org.apache.commons.math3.linear.Array2DRowRealMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.MatrixUtils.checkSubMatrixIndex(AnyMatrix,int,int,int,int)",
        "org.apache.commons.math3.linear.AbstractRealMatrix#getNorm()$RealMatrixPreservingVisitor$1#start(int,int,int,int,int,int)",
        "org.apache.commons.math3.linear.AbstractRealMatrix#transpose()$DefaultRealMatrixPreservingVisitor$1#visit(int,int,double)"
    ],
    "org.apache.commons.math3.linear.Array2DRowRealMatrix#walkInColumnOrder(RealMatrixChangingVisitor,int,int,int,int)": [
        "org.apache.commons.math3.linear.Array2DRowRealMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.AbstractRealMatrix#getSubMatrix(int[],int[])$DefaultRealMatrixChangingVisitor$1#visit(int,int,double)",
        "org.apache.commons.math3.linear.DefaultRealMatrixChangingVisitor#end()",
        "org.apache.commons.math3.linear.Array2DRowRealMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.MatrixUtils.checkSubMatrixIndex(AnyMatrix,int,int,int,int)",
        "org.apache.commons.math3.linear.DefaultRealMatrixChangingVisitor#visit(int,int,double)",
        "org.apache.commons.math3.linear.DefaultRealMatrixChangingVisitor#start(int,int,int,int,int,int)"
    ],
    "org.apache.commons.math3.optimization.direct.CMAESOptimizer.eye(int,int)": ["org.apache.commons.math3.linear.Array2DRowRealMatrix#Array2DRowRealMatrix(double[][],boolean)"],
    "org.apache.commons.math3.dfp.Dfp#log10()": ["org.apache.commons.math3.dfp.Dfp#intLog10()"],
    "org.apache.commons.math3.optimization.univariate.UnivariateMultiStartOptimizer#sortPairs(GoalType)": ["org.apache.commons.math3.optimization.univariate.UnivariateMultiStartOptimizer#sortPairs(GoalType)$Comparator$1.<init>()"],
    "org.apache.commons.math3.geometry.euclidean.threed.Rotation#Rotation(RotationOrder,RotationConvention,double,double,double)": [
        "org.apache.commons.math3.geometry.euclidean.threed.RotationOrder#getA3()",
        "org.apache.commons.math3.geometry.euclidean.threed.Rotation#Rotation(Vector3D,double,RotationConvention)",
        "org.apache.commons.math3.geometry.euclidean.threed.RotationOrder#getA2()",
        "org.apache.commons.math3.geometry.euclidean.threed.RotationOrder#getA1()",
        "org.apache.commons.math3.geometry.euclidean.threed.Rotation.<init>()",
        "org.apache.commons.math3.geometry.euclidean.threed.Rotation#compose(Rotation,RotationConvention)"
    ],
    "org.apache.commons.math3.ode.JacobianMatrices#getCurrentParameterJacobian(String,double[])": [
        "org.apache.commons.math3.ode.ExpandableStatefulODE#getSecondaryState(int)",
        "org.apache.commons.math3.ode.ParameterConfiguration#getParameterName()"
    ],
    "org.apache.commons.math3.stat.descriptive.rank.Percentile#getPivots(double[])": [
        "org.apache.commons.math3.stat.descriptive.AbstractUnivariateStatistic#getDataRef()",
        "org.apache.commons.math3.stat.descriptive.rank.Percentile.<staticinit>()"
    ],
    "org.apache.commons.math3.distribution.TDistribution#TDistribution(RandomGenerator,double)": [
        "org.apache.commons.math3.distribution.TDistribution#TDistribution(RandomGenerator,double,double)",
        "org.apache.commons.math3.distribution.TDistribution.<staticinit>()"
    ],
    "org.apache.commons.math3.linear.EigenDecomposition#EigenDecomposition(RealMatrix,double)": ["org.apache.commons.math3.linear.EigenDecomposition#EigenDecomposition(RealMatrix)"],
    "org.apache.commons.math3.distribution.BetaDistribution#density(double)": [
        "org.apache.commons.math3.util.FastMath.exp(double)",
        "org.apache.commons.math3.distribution.BetaDistribution#logDensity(double)"
    ],
    "org.apache.commons.math3.fitting.GaussianCurveFitter.ParameterGuesser#findMaxY(WeightedObservedPoint[])": ["org.apache.commons.math3.fitting.WeightedObservedPoint#getY()"],
    "org.apache.commons.math3.geometry.partitioning.BSPTree#insertCut(Hyperplane<S extends Space>)": [
        "org.apache.commons.math3.geometry.euclidean.oned.OrientedPoint#wholeHyperplane()",
        "org.apache.commons.math3.geometry.partitioning.AbstractSubHyperplane#isEmpty()",
        "org.apache.commons.math3.geometry.partitioning.BSPTree#BSPTree()",
        "org.apache.commons.math3.geometry.spherical.twod.Circle#wholeHyperplane()",
        "org.apache.commons.math3.geometry.spherical.oned.LimitAngle#wholeHyperplane()",
        "org.apache.commons.math3.geometry.euclidean.twod.Line#wholeHyperplane()",
        "org.apache.commons.math3.geometry.euclidean.oned.SubOrientedPoint#isEmpty()",
        "org.apache.commons.math3.geometry.euclidean.threed.Plane#wholeHyperplane()",
        "org.apache.commons.math3.geometry.spherical.oned.SubLimitAngle#isEmpty()",
        "org.apache.commons.math3.geometry.partitioning.BSPTree#fitToCell(SubHyperplane<S extends Space>)"
    ],
    "org.apache.commons.math3.distribution.LevyDistribution#logDensity(double)": [
        "org.apache.commons.math3.util.FastMath.log(double)",
        "org.apache.commons.math3.util.FastMath.<staticinit>()"
    ],
    "org.apache.commons.math3.geometry.euclidean.threed.Rotation#compose(Rotation,RotationConvention)": [
        "org.apache.commons.math3.geometry.euclidean.threed.Rotation#composeInternal(Rotation)",
        "org.apache.commons.math3.geometry.euclidean.threed.RotationConvention.<staticinit>()"
    ],
    "org.apache.commons.math3.dfp.DfpDec#newInstance(long)": [
        "org.apache.commons.math3.dfp.DfpDec#DfpDec(DfpField,long)",
        "org.apache.commons.math3.dfp.Dfp#getField()"
    ],
    "org.apache.commons.math3.optim.linear.LinearConstraint#writeObject(ObjectOutputStream)": ["org.apache.commons.math3.linear.MatrixUtils.serializeRealVector(RealVector,ObjectOutputStream)"],
    "org.apache.commons.math3.genetics.ListPopulation#ListPopulation(List<Chromosome>,int)": [
        "org.apache.commons.math3.exception.NullArgumentException#NullArgumentException()",
        "org.apache.commons.math3.genetics.ListPopulation.<init>()",
        "org.apache.commons.math3.exception.util.LocalizedFormats.<staticinit>()"
    ],
    "org.apache.commons.math3.optimization.direct.BaseAbstractMultivariateSimpleBoundsOptimizer#BaseAbstractMultivariateSimpleBoundsOptimizer(ConvergenceChecker<PointValuePair>)": [
        "org.apache.commons.math3.optimization.direct.BaseAbstractMultivariateSimpleBoundsOptimizer.<init>()",
        "org.apache.commons.math3.optimization.direct.BaseAbstractMultivariateOptimizer#BaseAbstractMultivariateOptimizer(ConvergenceChecker<PointValuePair>)"
    ],
    "org.apache.commons.math3.linear.OpenMapRealVector#ebeDivide(RealVector)": [
        "org.apache.commons.math3.linear.OpenMapRealVector#getDimension()",
        "org.apache.commons.math3.linear.RealVector#checkVectorDimensions(int)",
        "org.apache.commons.math3.linear.ArrayRealVector#getDimension()",
        "org.apache.commons.math3.linear.OpenMapRealVector#setEntry(int,double)",
        "org.apache.commons.math3.linear.ArrayRealVector#checkVectorDimensions(int)",
        "org.apache.commons.math3.linear.ArrayRealVector#getEntry(int)",
        "org.apache.commons.math3.linear.RealVector.unmodifiableRealVector(RealVector)$RealVector$1#getDimension()",
        "org.apache.commons.math3.linear.OpenMapRealVector#getEntry(int)",
        "org.apache.commons.math3.linear.OpenMapRealVector#OpenMapRealVector(OpenMapRealVector)",
        "org.apache.commons.math3.linear.RealVector.unmodifiableRealVector(RealVector)$RealVector$1#getEntry(int)"
    ],
    "org.apache.commons.math3.random.RandomDataGenerator#nextGamma(double,double)": [
        "org.apache.commons.math3.random.RandomDataGenerator#getRandomGenerator()",
        "org.apache.commons.math3.distribution.GammaDistribution#sample()",
        "org.apache.commons.math3.distribution.GammaDistribution#GammaDistribution(RandomGenerator,double,double,double)",
        "org.apache.commons.math3.distribution.GammaDistribution.<staticinit>()"
    ],
    "org.apache.commons.math3.stat.descriptive.SynchronizedMultivariateSummaryStatistics#getSumImpl()": ["org.apache.commons.math3.stat.descriptive.MultivariateSummaryStatistics#getSumImpl()"],
    "org.apache.commons.math3.analysis.function.Cos#derivative()": [
        "org.apache.commons.math3.analysis.function.Log10#derivative()",
        "org.apache.commons.math3.analysis.function.Power#derivative()",
        "org.apache.commons.math3.analysis.function.Sin#derivative()",
        "org.apache.commons.math3.analysis.function.Exp#derivative()",
        "org.apache.commons.math3.analysis.function.HarmonicOscillator#derivative()",
        "org.apache.commons.math3.analysis.polynomials.PolynomialFunction#derivative()",
        "org.apache.commons.math3.analysis.function.Logit#derivative()",
        "org.apache.commons.math3.analysis.function.Cbrt#derivative()",
        "org.apache.commons.math3.analysis.FunctionUtils.toDifferentiableUnivariateFunction(UnivariateDifferentiableFunction)",
        "org.apache.commons.math3.analysis.FunctionUtils.toDifferentiableUnivariateFunction(UnivariateDifferentiableFunction)$DifferentiableUnivariateFunction$1#derivative()",
        "org.apache.commons.math3.analysis.polynomials.PolynomialSplineFunction#derivative()",
        "org.apache.commons.math3.analysis.function.Cosh#derivative()",
        "org.apache.commons.math3.analysis.function.Identity#derivative()",
        "org.apache.commons.math3.analysis.function.Inverse#derivative()",
        "org.apache.commons.math3.analysis.function.Acosh#derivative()",
        "org.apache.commons.math3.analysis.function.Acos#derivative()",
        "org.apache.commons.math3.analysis.function.Atan#derivative()",
        "org.apache.commons.math3.analysis.function.Log#derivative()",
        "org.apache.commons.math3.analysis.function.Sqrt#derivative()",
        "org.apache.commons.math3.analysis.function.Logistic#derivative()",
        "org.apache.commons.math3.analysis.function.Expm1#derivative()",
        "org.apache.commons.math3.analysis.function.Asinh#derivative()",
        "org.apache.commons.math3.analysis.function.Gaussian#derivative()",
        "org.apache.commons.math3.analysis.function.Sinc#derivative()",
        "org.apache.commons.math3.analysis.function.Sigmoid#derivative()",
        "org.apache.commons.math3.analysis.function.Constant#derivative()",
        "org.apache.commons.math3.analysis.function.Sinh#derivative()",
        "org.apache.commons.math3.analysis.function.Tanh#derivative()",
        "org.apache.commons.math3.analysis.function.Asin#derivative()",
        "org.apache.commons.math3.analysis.function.Minus#derivative()",
        "org.apache.commons.math3.analysis.FunctionUtils.compose(DifferentiableUnivariateFunction[]...)$DifferentiableUnivariateFunction$1#derivative()",
        "org.apache.commons.math3.analysis.FunctionUtils.add(DifferentiableUnivariateFunction[]...)$DifferentiableUnivariateFunction$1#derivative()",
        "org.apache.commons.math3.analysis.FunctionUtils.multiply(DifferentiableUnivariateFunction[]...)$DifferentiableUnivariateFunction$1#derivative()",
        "org.apache.commons.math3.analysis.function.Log1p#derivative()",
        "org.apache.commons.math3.analysis.function.Tan#derivative()",
        "org.apache.commons.math3.analysis.function.Cos#derivative()",
        "org.apache.commons.math3.analysis.function.Atanh#derivative()"
    ],
    "org.apache.commons.math3.distribution.UniformRealDistribution#UniformRealDistribution()": ["org.apache.commons.math3.distribution.UniformRealDistribution#UniformRealDistribution(double,double)"],
    "org.apache.commons.math3.geometry.partitioning.BoundaryProjector#addRegion(SubHyperplane<S extends Space>,List<Region<T extends Space>>)": ["org.apache.commons.math3.geometry.partitioning.AbstractSubHyperplane#getRemainingRegion()"],
    "org.apache.commons.math3.linear.Array2DRowRealMatrix#add(Array2DRowRealMatrix)": [
        "org.apache.commons.math3.linear.Array2DRowRealMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.Array2DRowRealMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.MatrixUtils.checkAdditionCompatible(AnyMatrix,AnyMatrix)",
        "org.apache.commons.math3.linear.Array2DRowRealMatrix#Array2DRowRealMatrix(double[][],boolean)"
    ],
    "org.apache.commons.math3.linear.QRDecomposition.Solver#Solver(double[][],double[],double)": ["org.apache.commons.math3.linear.QRDecomposition.Solver.<init>()"],
    "org.apache.commons.math3.distribution.BinomialDistribution#BinomialDistribution(RandomGenerator,int,double)": [
        "org.apache.commons.math3.distribution.AbstractIntegerDistribution#AbstractIntegerDistribution(RandomGenerator)",
        "org.apache.commons.math3.distribution.BinomialDistribution.<init>()",
        "org.apache.commons.math3.exception.util.LocalizedFormats.<staticinit>()"
    ],
    "org.apache.commons.math3.linear.RealVectorFormat#RealVectorFormat(String,String,String)": [
        "org.apache.commons.math3.linear.RealVectorFormat#RealVectorFormat(String,String,String,NumberFormat)",
        "org.apache.commons.math3.util.CompositeFormat.getDefaultNumberFormat()"
    ],
    "org.apache.commons.math3.util.ArithmeticUtils.factorial(int)": ["org.apache.commons.math3.util.CombinatoricsUtils.factorial(int)"],
    "org.apache.commons.math3.linear.SparseFieldVector#walkInDefaultOrder(FieldVectorChangingVisitor<T extends FieldElement>,int,int)": [
        "org.apache.commons.math3.linear.SparseFieldVector#setEntry(int,T extends FieldElement)",
        "org.apache.commons.math3.linear.SparseFieldVector#getDimension()",
        "org.apache.commons.math3.linear.SparseFieldVector#getEntry(int)",
        "org.apache.commons.math3.linear.SparseFieldVector#checkIndices(int,int)"
    ],
    "org.apache.commons.math3.util.FastMath.Split#pow(long)": [
        "org.apache.commons.math3.util.FastMath.Split#Split(double)",
        "org.apache.commons.math3.util.FastMath.copySign(double,double)",
        "org.apache.commons.math3.util.FastMath.abs(double)",
        "org.apache.commons.math3.util.FastMath.Split.<staticinit>()",
        "org.apache.commons.math3.util.FastMath.Split#Split(double,double,double)",
        "org.apache.commons.math3.util.FastMath.Split#Split(double,double)",
        "org.apache.commons.math3.util.FastMath.Split#multiply(Split)"
    ],
    "org.apache.commons.math3.stat.inference.TTest#homoscedasticT(double[],double[])": [
        "org.apache.commons.math3.stat.StatUtils.mean(double[])",
        "org.apache.commons.math3.stat.inference.TTest#homoscedasticT(double,double,double,double,double,double)",
        "org.apache.commons.math3.stat.inference.TTest#checkSampleData(double[])",
        "org.apache.commons.math3.stat.StatUtils.variance(double[])"
    ],
    "org.apache.commons.math3.analysis.function.Asinh#derivative()": [
        "org.apache.commons.math3.analysis.function.Log10#derivative()",
        "org.apache.commons.math3.analysis.function.Power#derivative()",
        "org.apache.commons.math3.analysis.function.Sin#derivative()",
        "org.apache.commons.math3.analysis.function.Exp#derivative()",
        "org.apache.commons.math3.analysis.function.HarmonicOscillator#derivative()",
        "org.apache.commons.math3.analysis.polynomials.PolynomialFunction#derivative()",
        "org.apache.commons.math3.analysis.function.Logit#derivative()",
        "org.apache.commons.math3.analysis.function.Cbrt#derivative()",
        "org.apache.commons.math3.analysis.FunctionUtils.toDifferentiableUnivariateFunction(UnivariateDifferentiableFunction)",
        "org.apache.commons.math3.analysis.FunctionUtils.toDifferentiableUnivariateFunction(UnivariateDifferentiableFunction)$DifferentiableUnivariateFunction$1#derivative()",
        "org.apache.commons.math3.analysis.polynomials.PolynomialSplineFunction#derivative()",
        "org.apache.commons.math3.analysis.function.Cosh#derivative()",
        "org.apache.commons.math3.analysis.function.Identity#derivative()",
        "org.apache.commons.math3.analysis.function.Inverse#derivative()",
        "org.apache.commons.math3.analysis.function.Acosh#derivative()",
        "org.apache.commons.math3.analysis.function.Acos#derivative()",
        "org.apache.commons.math3.analysis.function.Atan#derivative()",
        "org.apache.commons.math3.analysis.function.Log#derivative()",
        "org.apache.commons.math3.analysis.function.Sqrt#derivative()",
        "org.apache.commons.math3.analysis.function.Logistic#derivative()",
        "org.apache.commons.math3.analysis.function.Expm1#derivative()",
        "org.apache.commons.math3.analysis.function.Asinh#derivative()",
        "org.apache.commons.math3.analysis.function.Gaussian#derivative()",
        "org.apache.commons.math3.analysis.function.Sinc#derivative()",
        "org.apache.commons.math3.analysis.function.Sigmoid#derivative()",
        "org.apache.commons.math3.analysis.function.Constant#derivative()",
        "org.apache.commons.math3.analysis.function.Sinh#derivative()",
        "org.apache.commons.math3.analysis.function.Tanh#derivative()",
        "org.apache.commons.math3.analysis.function.Asin#derivative()",
        "org.apache.commons.math3.analysis.function.Minus#derivative()",
        "org.apache.commons.math3.analysis.FunctionUtils.compose(DifferentiableUnivariateFunction[]...)$DifferentiableUnivariateFunction$1#derivative()",
        "org.apache.commons.math3.analysis.FunctionUtils.add(DifferentiableUnivariateFunction[]...)$DifferentiableUnivariateFunction$1#derivative()",
        "org.apache.commons.math3.analysis.FunctionUtils.multiply(DifferentiableUnivariateFunction[]...)$DifferentiableUnivariateFunction$1#derivative()",
        "org.apache.commons.math3.analysis.function.Log1p#derivative()",
        "org.apache.commons.math3.analysis.function.Tan#derivative()",
        "org.apache.commons.math3.analysis.function.Cos#derivative()",
        "org.apache.commons.math3.analysis.function.Atanh#derivative()"
    ],
    "org.apache.commons.math3.ode.ExpandableStatefulODE#getTotalDimension()": [
        "org.apache.commons.math3.ode.EquationsMapper#getDimension()",
        "org.apache.commons.math3.ode.EquationsMapper#getFirstIndex()"
    ],
    "org.apache.commons.math3.geometry.VectorFormat#VectorFormat(String,String,String)": [
        "org.apache.commons.math3.util.CompositeFormat.getDefaultNumberFormat()",
        "org.apache.commons.math3.geometry.VectorFormat#VectorFormat(String,String,String,NumberFormat)"
    ],
    "org.apache.commons.math3.optim.linear.LinearObjectiveFunction#readObject(ObjectInputStream)": ["org.apache.commons.math3.linear.MatrixUtils.deserializeRealVector(Object,String,ObjectInputStream)"],
    "org.apache.commons.math3.stat.descriptive.moment.SemiVariance#copy()": [
        "org.apache.commons.math3.stat.descriptive.moment.SemiVariance.copy(SemiVariance,SemiVariance)",
        "org.apache.commons.math3.stat.descriptive.moment.SemiVariance#SemiVariance()"
    ],
    "org.apache.commons.math3.analysis.function.Gaussian.Parametric#validateParameters(double[])": [
        "org.apache.commons.math3.exception.DimensionMismatchException#DimensionMismatchException(int,int)",
        "org.apache.commons.math3.exception.NullArgumentException#NullArgumentException()"
    ],
    "org.apache.commons.math3.linear.AbstractFieldMatrix#walkInRowOrder(FieldMatrixPreservingVisitor<T extends FieldElement>,int,int,int,int)": [
        "org.apache.commons.math3.linear.SparseFieldMatrix#getEntry(int,int)",
        "org.apache.commons.math3.linear.BlockFieldMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.SparseFieldMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.AbstractFieldMatrix#checkSubMatrixIndex(int,int,int,int)",
        "org.apache.commons.math3.linear.AbstractFieldMatrix#transpose()$DefaultFieldMatrixPreservingVisitor$1#visit(int,int,T extends FieldElement)",
        "org.apache.commons.math3.linear.DefaultFieldMatrixPreservingVisitor#start(int,int,int,int,int,int)",
        "org.apache.commons.math3.linear.Array2DRowFieldMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.SparseFieldMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.BlockFieldMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.DefaultFieldMatrixPreservingVisitor#end()",
        "org.apache.commons.math3.linear.DefaultFieldMatrixPreservingVisitor#visit(int,int,T extends FieldElement)",
        "org.apache.commons.math3.linear.MatrixUtils.FractionMatrixConverter#start(int,int,int,int,int,int)",
        "org.apache.commons.math3.linear.MatrixUtils.BigFractionMatrixConverter#start(int,int,int,int,int,int)",
        "org.apache.commons.math3.linear.Array2DRowFieldMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.AbstractFieldMatrix#copySubMatrix(int,int,int,int,T extends FieldElement[][])$DefaultFieldMatrixPreservingVisitor$1#start(int,int,int,int,int,int)",
        "org.apache.commons.math3.linear.Array2DRowFieldMatrix#getEntry(int,int)",
        "org.apache.commons.math3.ode.nonstiff.AdamsMoultonFieldIntegrator.Corrector#start(int,int,int,int,int,int)",
        "org.apache.commons.math3.linear.BlockFieldMatrix#getEntry(int,int)",
        "org.apache.commons.math3.linear.AbstractFieldMatrix#copySubMatrix(int,int,int,int,T extends FieldElement[][])$DefaultFieldMatrixPreservingVisitor$1#visit(int,int,T extends FieldElement)",
        "org.apache.commons.math3.ode.nonstiff.AdamsMoultonFieldIntegrator.Corrector#end()"
    ],
    "org.apache.commons.math3.util.Decimal64#scalb(int)": [
        "org.apache.commons.math3.util.FastMath.scalb(double,int)",
        "org.apache.commons.math3.util.Decimal64#Decimal64(double)"
    ],
    "org.apache.commons.math3.analysis.differentiation.DerivativeStructure#abs()": ["org.apache.commons.math3.analysis.differentiation.DerivativeStructure#negate()"],
    "org.apache.commons.math3.analysis.FunctionUtils.toMultivariateDifferentiableFunction(DifferentiableMultivariateFunction)": ["org.apache.commons.math3.analysis.FunctionUtils.toMultivariateDifferentiableFunction(DifferentiableMultivariateFunction)$MultivariateDifferentiableFunction$1.<init>()"],
    "org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.Edge#split(Line)": [
        "org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.Edge#Edge(Vertex,Vertex,Line)",
        "org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.Vertex#Vertex(Vector2D)",
        "org.apache.commons.math3.geometry.euclidean.twod.Line#intersection(Line)",
        "org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.Vertex#bindWith(Line)"
    ],
    "org.apache.commons.math3.stat.Frequency#getPct(char)": ["org.apache.commons.math3.stat.Frequency#getPct(long)"],
    "org.apache.commons.math3.stat.inference.TestUtils.kolmogorovSmirnovStatistic(RealDistribution,double[])": [
        "org.apache.commons.math3.stat.inference.KolmogorovSmirnovTest#kolmogorovSmirnovStatistic(RealDistribution,double[])",
        "org.apache.commons.math3.stat.inference.TestUtils.<staticinit>()"
    ],
    "org.apache.commons.math3.optimization.fitting.HarmonicFitter#HarmonicFitter(DifferentiableMultivariateVectorOptimizer)": [
        "org.apache.commons.math3.optimization.fitting.CurveFitter#CurveFitter(DifferentiableMultivariateVectorOptimizer)",
        "org.apache.commons.math3.optimization.fitting.HarmonicFitter.<init>()"
    ],
    "org.apache.commons.math3.stat.descriptive.rank.Median#Median(EstimationType,NaNStrategy,KthSelector)": [
        "org.apache.commons.math3.stat.descriptive.rank.Percentile#Percentile(double,EstimationType,NaNStrategy,KthSelector)",
        "org.apache.commons.math3.stat.descriptive.rank.Median.<init>()",
        "org.apache.commons.math3.stat.descriptive.rank.Median.<staticinit>()"
    ],
    "org.apache.commons.math3.dfp.DfpMath.split(DfpField,String)": [
        "org.apache.commons.math3.dfp.DfpField#newDfp(String)",
        "org.apache.commons.math3.dfp.DfpField#getRadixDigits()"
    ],
    "org.apache.commons.math3.linear.RRQRDecomposition#RRQRDecomposition(RealMatrix,double)": [
        "org.apache.commons.math3.linear.QRDecomposition#QRDecomposition(RealMatrix,double)",
        "org.apache.commons.math3.linear.RRQRDecomposition.<init>()"
    ],
    "org.apache.commons.math3.linear.MatrixUtils.createFieldVector(T extends FieldElement[])": [
        "org.apache.commons.math3.linear.ArrayFieldVector#ArrayFieldVector(Field<T extends FieldElement>,T extends FieldElement[],boolean)",
        "org.apache.commons.math3.exception.NullArgumentException#NullArgumentException()",
        "org.apache.commons.math3.exception.util.LocalizedFormats.<staticinit>()"
    ],
    "org.apache.commons.math3.ode.events.Transformer$Transformer$1.<init>()": ["org.apache.commons.math3.ode.events.Transformer.<init>()"],
    "org.apache.commons.math3.geometry.euclidean.threed.Rotation#Rotation(Vector3D,double)": [
        "org.apache.commons.math3.geometry.euclidean.threed.Rotation#Rotation(Vector3D,double,RotationConvention)",
        "org.apache.commons.math3.geometry.euclidean.threed.RotationConvention.<staticinit>()"
    ],
    "org.apache.commons.math3.ml.neuralnet.twod.util.LocationFinder#LocationFinder(NeuronSquareMesh2D)": [
        "org.apache.commons.math3.ml.neuralnet.twod.NeuronSquareMesh2D#getNumberOfRows()",
        "org.apache.commons.math3.ml.neuralnet.twod.NeuronSquareMesh2D#getNeuron(int,int)",
        "org.apache.commons.math3.ml.neuralnet.Neuron#getIdentifier()",
        "org.apache.commons.math3.ml.neuralnet.twod.util.LocationFinder.Location#Location(int,int)",
        "org.apache.commons.math3.ml.neuralnet.twod.util.LocationFinder.<init>()",
        "org.apache.commons.math3.ml.neuralnet.twod.NeuronSquareMesh2D#getNumberOfColumns()",
        "org.apache.commons.math3.exception.MathIllegalStateException#MathIllegalStateException()"
    ],
    "org.apache.commons.math3.linear.BlockFieldMatrix#walkInRowOrder(FieldMatrixChangingVisitor<T extends FieldElement>,int,int,int,int)": [
        "org.apache.commons.math3.linear.BlockFieldMatrix#blockWidth(int)",
        "org.apache.commons.math3.linear.DefaultFieldMatrixChangingVisitor#start(int,int,int,int,int,int)",
        "org.apache.commons.math3.linear.DefaultFieldMatrixChangingVisitor#visit(int,int,T extends FieldElement)",
        "org.apache.commons.math3.util.FastMath.max(int,int)",
        "org.apache.commons.math3.linear.AbstractFieldMatrix#checkSubMatrixIndex(int,int,int,int)",
        "org.apache.commons.math3.linear.AbstractFieldMatrix#getSubMatrix(int[],int[])$DefaultFieldMatrixChangingVisitor$1#visit(int,int,T extends FieldElement)",
        "org.apache.commons.math3.linear.BlockFieldMatrix.<staticinit>()",
        "org.apache.commons.math3.util.FastMath.min(int,int)",
        "org.apache.commons.math3.linear.DefaultFieldMatrixChangingVisitor#end()"
    ],
    "org.apache.commons.math3.geometry.euclidean.threed.FieldRotation#toRotation()": ["org.apache.commons.math3.geometry.euclidean.threed.Rotation#Rotation(double,double,double,double,boolean)"],
    "org.apache.commons.math3.stat.descriptive.rank.Percentile.EstimationType$EstimationType$1#estimate(double[],int[],double,int,KthSelector)": [
        "org.apache.commons.math3.stat.descriptive.rank.Percentile.EstimationType#estimate(double[],int[],double,int,KthSelector)",
        "org.apache.commons.math3.util.FastMath.ceil(double)",
        "org.apache.commons.math3.util.FastMath.floor(double)"
    ],
    "org.apache.commons.math3.optimization.linear.SimplexTableau#getSolution()": [
        "org.apache.commons.math3.optimization.linear.LinearObjectiveFunction#getValue(double[])",
        "org.apache.commons.math3.optimization.linear.SimplexTableau#getRhsOffset()",
        "org.apache.commons.math3.optimization.linear.SimplexTableau#getBasicRow(int)",
        "org.apache.commons.math3.optimization.linear.SimplexTableau#getEntry(int,int)",
        "org.apache.commons.math3.optimization.PointValuePair#PointValuePair(double[],double)",
        "org.apache.commons.math3.optimization.linear.SimplexTableau.<staticinit>()",
        "org.apache.commons.math3.optimization.linear.SimplexTableau#getOriginalNumDecisionVariables()"
    ],
    "org.apache.commons.math3.linear.AbstractFieldMatrix#getSubMatrix(int,int,int,int)": [
        "org.apache.commons.math3.linear.SparseFieldMatrix#getEntry(int,int)",
        "org.apache.commons.math3.linear.SparseFieldMatrix#setEntry(int,int,T extends FieldElement)",
        "org.apache.commons.math3.linear.BlockFieldMatrix#createMatrix(int,int)",
        "org.apache.commons.math3.linear.Array2DRowFieldMatrix#setEntry(int,int,T extends FieldElement)",
        "org.apache.commons.math3.linear.BlockFieldMatrix#setEntry(int,int,T extends FieldElement)",
        "org.apache.commons.math3.linear.AbstractFieldMatrix#checkSubMatrixIndex(int,int,int,int)",
        "org.apache.commons.math3.linear.SparseFieldMatrix#createMatrix(int,int)",
        "org.apache.commons.math3.linear.Array2DRowFieldMatrix#getEntry(int,int)",
        "org.apache.commons.math3.linear.Array2DRowFieldMatrix#createMatrix(int,int)",
        "org.apache.commons.math3.linear.BlockFieldMatrix#getEntry(int,int)"
    ],
    "org.apache.commons.math3.dfp.Dfp#sqrt()": [
        "org.apache.commons.math3.dfp.DfpDec#newInstance(Dfp)",
        "org.apache.commons.math3.dfp.Dfp.<staticinit>()",
        "org.apache.commons.math3.dfp.Dfp#dotrap(int,String,Dfp,Dfp)",
        "org.apache.commons.math3.dfp.Dfp#unequal(Dfp)",
        "org.apache.commons.math3.dfp.Dfp#newInstance(Dfp)",
        "org.apache.commons.math3.dfp.Dfp#divide(int)",
        "org.apache.commons.math3.dfp.Dfp#divide(Dfp)",
        "org.apache.commons.math3.dfp.Dfp#add(Dfp)",
        "org.apache.commons.math3.dfp.DfpField.<staticinit>()",
        "org.apache.commons.math3.dfp.DfpField#setIEEEFlagsBits(int)",
        "org.apache.commons.math3.dfp.Dfp#equals(Object)",
        "org.apache.commons.math3.dfp.Dfp#getZero()"
    ],
    "org.apache.commons.math3.geometry.euclidean.twod.Line#Line(Line)": [
        "org.apache.commons.math3.geometry.euclidean.twod.Line.<init>()",
        "org.apache.commons.math3.util.FastMath.<staticinit>()",
        "org.apache.commons.math3.util.MathUtils.normalizeAngle(double,double)"
    ],
    "org.apache.commons.math3.optim.univariate.UnivariateOptimizer#UnivariateOptimizer(ConvergenceChecker<UnivariatePointValuePair>)": [
        "org.apache.commons.math3.optim.univariate.UnivariateOptimizer.<init>()",
        "org.apache.commons.math3.optim.BaseOptimizer#BaseOptimizer(ConvergenceChecker<PAIR>)"
    ],
    "org.apache.commons.math3.analysis.interpolation.TricubicFunction#value(double,double,double)": ["org.apache.commons.math3.analysis.interpolation.TricubicFunction.<staticinit>()"],
    "org.apache.commons.math3.ml.neuralnet.sofm.NeighbourhoodSizeFunctionFactory.exponentialDecay(double,double,long)$NeighbourhoodSizeFunction$1#value(long)": [
        "org.apache.commons.math3.util.FastMath.rint(double)",
        "org.apache.commons.math3.ml.neuralnet.sofm.util.ExponentialDecayFunction#value(long)"
    ],
    "org.apache.commons.math3.geometry.partitioning.BSPTree#split(SubHyperplane<S extends Space>)": [
        "org.apache.commons.math3.geometry.partitioning.BSPTree#condense()",
        "org.apache.commons.math3.geometry.partitioning.SubHyperplane.SplitSubHyperplane#getSide()",
        "org.apache.commons.math3.geometry.partitioning.BSPTree#BSPTree(Object)",
        "org.apache.commons.math3.geometry.partitioning.Side.<staticinit>()",
        "org.apache.commons.math3.geometry.partitioning.SubHyperplane.SplitSubHyperplane#getMinus()",
        "org.apache.commons.math3.geometry.partitioning.SubHyperplane.SplitSubHyperplane#getPlus()",
        "org.apache.commons.math3.geometry.partitioning.AbstractSubHyperplane#copySelf()",
        "org.apache.commons.math3.geometry.partitioning.BSPTree#copySelf()",
        "org.apache.commons.math3.geometry.partitioning.BSPTree#split(SubHyperplane<S extends Space>)",
        "org.apache.commons.math3.geometry.partitioning.BSPTree#BSPTree(SubHyperplane<S extends Space>,BSPTree<S extends Space>,BSPTree<S extends Space>,Object)",
        "org.apache.commons.math3.geometry.partitioning.AbstractSubHyperplane#getHyperplane()"
    ],
    "org.apache.commons.math3.linear.HessenbergTransformer#getPT()": [
        "org.apache.commons.math3.linear.HessenbergTransformer#getP()",
        "org.apache.commons.math3.linear.BlockRealMatrix#transpose()",
        "org.apache.commons.math3.linear.AbstractRealMatrix#transpose()"
    ],
    "org.apache.commons.math3.transform.FastCosineTransformer#FastCosineTransformer(DctNormalization)": ["org.apache.commons.math3.transform.FastCosineTransformer.<init>()"],
    "org.apache.commons.math3.userguide.genetics.HelloWorldExample.StringChromosome#StringChromosome(List<Character>)": [
        "org.apache.commons.math3.userguide.genetics.HelloWorldExample.StringChromosome.<init>()",
        "org.apache.commons.math3.genetics.AbstractListChromosome#AbstractListChromosome(List<T>)"
    ],
    "org.apache.commons.math3.optim.PointValuePair#writeReplace()": [
        "org.apache.commons.math3.util.Pair#getValue()",
        "org.apache.commons.math3.util.Pair#getKey()",
        "org.apache.commons.math3.optim.PointVectorValuePair#getValue()",
        "org.apache.commons.math3.optimization.PointVectorValuePair#getValue()"
    ],
    "org.apache.commons.math3.dfp.DfpMath.sinInternal(Dfp[])": [
        "org.apache.commons.math3.dfp.Dfp#getOne()",
        "org.apache.commons.math3.dfp.Dfp#multiply(Dfp)",
        "org.apache.commons.math3.dfp.Dfp#divide(int)",
        "org.apache.commons.math3.dfp.Dfp#add(Dfp)",
        "org.apache.commons.math3.dfp.Dfp#Dfp(Dfp)",
        "org.apache.commons.math3.dfp.Dfp#negate()",
        "org.apache.commons.math3.dfp.Dfp#equals(Object)"
    ],
    "org.apache.commons.math3.fitting.SimpleCurveFitter#SimpleCurveFitter(ParametricUnivariateFunction,double[],int)": [
        "org.apache.commons.math3.fitting.AbstractCurveFitter.<init>()",
        "org.apache.commons.math3.fitting.SimpleCurveFitter.<init>()"
    ],
    "org.apache.commons.math3.geometry.partitioning.utilities.OrderedTuple.mantissa(long)": ["org.apache.commons.math3.geometry.partitioning.utilities.OrderedTuple.<staticinit>()"],
    "org.apache.commons.math3.stat.descriptive.MultivariateSummaryStatistics#getGeometricMean()": ["org.apache.commons.math3.stat.descriptive.MultivariateSummaryStatistics#getResults(StorelessUnivariateStatistic[])"],
    "org.apache.commons.math3.linear.SparseFieldVector#getEntry(int)": [
        "org.apache.commons.math3.util.OpenIntToFieldHashMap#get(int)",
        "org.apache.commons.math3.linear.SparseFieldVector#checkIndex(int)"
    ],
    "org.apache.commons.math3.analysis.solvers.SecantSolver#doSolve()": [
        "org.apache.commons.math3.analysis.solvers.BaseAbstractUnivariateSolver#getAbsoluteAccuracy()",
        "org.apache.commons.math3.analysis.solvers.BaseAbstractUnivariateSolver#getMin()",
        "org.apache.commons.math3.analysis.solvers.BaseAbstractUnivariateSolver#computeObjectiveValue(double)",
        "org.apache.commons.math3.analysis.solvers.BaseAbstractUnivariateSolver#getFunctionValueAccuracy()",
        "org.apache.commons.math3.util.FastMath.max(double,double)",
        "org.apache.commons.math3.util.FastMath.abs(double)",
        "org.apache.commons.math3.analysis.solvers.BaseAbstractUnivariateSolver#getRelativeAccuracy()",
        "org.apache.commons.math3.analysis.solvers.BaseAbstractUnivariateSolver#getMax()",
        "org.apache.commons.math3.analysis.solvers.BaseAbstractUnivariateSolver#verifyBracketing(double,double)"
    ],
    "org.apache.commons.math3.geometry.spherical.twod.SphericalPolygonsSet#SphericalPolygonsSet(Vector3D,Vector3D,double,int,double)": [
        "org.apache.commons.math3.geometry.spherical.twod.SphericalPolygonsSet.createRegularPolygonVertices(Vector3D,Vector3D,double,int)",
        "org.apache.commons.math3.geometry.spherical.twod.SphericalPolygonsSet#SphericalPolygonsSet(double,S2Point[]...)"
    ],
    "org.apache.commons.math3.fitting.leastsquares.LeastSquaresFactory.LocalValueAndJacobianFunction#computeValue(double[])": [
        "org.apache.commons.math3.fitting.AbstractCurveFitter.TheoreticalValuesFunction#getModelFunction()$MultivariateVectorFunction$1#value(double[])",
        "org.apache.commons.math3.optimization.fitting.CurveFitter.TheoreticalValuesFunction#value(double[])",
        "org.apache.commons.math3.analysis.FunctionUtils.toDifferentiableMultivariateFunction(MultivariateDifferentiableFunction)$MultivariateVectorFunction$1$MultivariateVectorFunction$1#gradient()$MultivariateVectorFunction$1#value(double[])",
        "org.apache.commons.math3.linear.ArrayRealVector#ArrayRealVector(double[],boolean)",
        "org.apache.commons.math3.analysis.FunctionUtils.toMultivariateDifferentiableVectorFunction(DifferentiableMultivariateVectorFunction)$MultivariateDifferentiableVectorFunction$1#value(double[])",
        "org.apache.commons.math3.analysis.FunctionUtils.toDifferentiableMultivariateVectorFunction(MultivariateDifferentiableVectorFunction)$DifferentiableMultivariateVectorFunction$1#value(double[])",
        "org.apache.commons.math3.fitting.CurveFitter.TheoreticalValuesFunction#getModelFunction()$MultivariateVectorFunction$1#value(double[])",
        "org.apache.commons.math3.analysis.differentiation.GradientFunction#value(double[])",
        "org.apache.commons.math3.optimization.fitting.CurveFitter.OldTheoreticalValuesFunction#value(double[])"
    ],
    "org.apache.commons.math3.random.SobolSequenceGenerator#initDirectionVector(int,int,int[])": ["org.apache.commons.math3.random.SobolSequenceGenerator.<staticinit>()"],
    "org.apache.commons.math3.random.EmpiricalDistribution#EmpiricalDistribution()": [
        "org.apache.commons.math3.random.EmpiricalDistribution.<staticinit>()",
        "org.apache.commons.math3.random.EmpiricalDistribution#EmpiricalDistribution(int)"
    ],
    "org.apache.commons.math3.distribution.WeibullDistribution#WeibullDistribution(double,double,double)": [
        "org.apache.commons.math3.random.Well19937c#Well19937c()",
        "org.apache.commons.math3.distribution.WeibullDistribution#WeibullDistribution(RandomGenerator,double,double,double)",
        "org.apache.commons.math3.distribution.WeibullDistribution.<staticinit>()"
    ],
    "org.apache.commons.math3.linear.AbstractRealMatrix.<staticinit>()": [
        "org.apache.commons.math3.linear.RealMatrixFormat.getInstance(Locale)",
        "org.apache.commons.math3.linear.RealMatrixFormat#getFormat()"
    ],
    "org.apache.commons.math3.stat.StatUtils.sum(double[],int,int)": [
        "org.apache.commons.math3.stat.descriptive.moment.Skewness#evaluate(double[],int,int)",
        "org.apache.commons.math3.stat.descriptive.moment.Variance#evaluate(double[],int,int)",
        "org.apache.commons.math3.stat.descriptive.moment.SemiVariance#evaluate(double[],int,int)",
        "org.apache.commons.math3.stat.descriptive.moment.GeometricMean#evaluate(double[],int,int)",
        "org.apache.commons.math3.stat.descriptive.summary.SumOfLogs#evaluate(double[],int,int)",
        "org.apache.commons.math3.stat.descriptive.moment.StandardDeviation#evaluate(double[],int,int)",
        "org.apache.commons.math3.stat.descriptive.summary.Sum#evaluate(double[],int,int)",
        "org.apache.commons.math3.stat.descriptive.rank.Min#evaluate(double[],int,int)",
        "org.apache.commons.math3.stat.descriptive.rank.Percentile#evaluate(double[],int,int)",
        "org.apache.commons.math3.stat.StatUtils.<staticinit>()",
        "org.apache.commons.math3.stat.descriptive.rank.Max#evaluate(double[],int,int)",
        "org.apache.commons.math3.stat.descriptive.summary.SumOfSquares#evaluate(double[],int,int)",
        "org.apache.commons.math3.stat.descriptive.moment.Mean#evaluate(double[],int,int)",
        "org.apache.commons.math3.stat.descriptive.summary.Product#evaluate(double[],int,int)",
        "org.apache.commons.math3.stat.descriptive.moment.Kurtosis#evaluate(double[],int,int)",
        "org.apache.commons.math3.stat.descriptive.AbstractStorelessUnivariateStatistic#evaluate(double[],int,int)"
    ],
    "org.apache.commons.math3.ode.nonstiff.MidpointFieldStepInterpolator#MidpointFieldStepInterpolator(Field<T extends RealFieldElement>,boolean,T extends RealFieldElement[][],FieldODEStateAndDerivative<T extends RealFieldElement>,FieldODEStateAndDerivative<T extends RealFieldElement>,FieldODEStateAndDerivative<T extends RealFieldElement>,FieldODEStateAndDerivative<T extends RealFieldElement>,FieldEquationsMapper<T extends RealFieldElement>)": [
        "org.apache.commons.math3.ode.nonstiff.RungeKuttaFieldStepInterpolator#RungeKuttaFieldStepInterpolator(Field<T extends RealFieldElement>,boolean,T extends RealFieldElement[][],FieldODEStateAndDerivative<T extends RealFieldElement>,FieldODEStateAndDerivative<T extends RealFieldElement>,FieldODEStateAndDerivative<T extends RealFieldElement>,FieldODEStateAndDerivative<T extends RealFieldElement>,FieldEquationsMapper<T extends RealFieldElement>)",
        "org.apache.commons.math3.ode.nonstiff.MidpointFieldStepInterpolator.<init>()"
    ],
    "org.apache.commons.math3.geometry.euclidean.twod.hull.MonotoneChain#findHullVertices(Collection<Vector2D>)": [
        "org.apache.commons.math3.geometry.euclidean.twod.hull.MonotoneChain#findHullVertices(Collection<Vector2D>)$Comparator$1.<init>()",
        "org.apache.commons.math3.geometry.euclidean.twod.hull.MonotoneChain#updateHull(Vector2D,List<Vector2D>)"
    ],
    "org.apache.commons.math3.geometry.spherical.twod.Circle#getOffset(Point<Sphere2D>)": [
        "org.apache.commons.math3.geometry.spherical.twod.Circle#getOffset(Vector3D)",
        "org.apache.commons.math3.geometry.spherical.twod.S2Point#getVector()"
    ],
    "org.apache.commons.math3.optim.BaseOptimizer#BaseOptimizer(ConvergenceChecker<PAIR>)": ["org.apache.commons.math3.optim.BaseOptimizer#BaseOptimizer(ConvergenceChecker<PAIR>,int,int)"],
    "org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet#nextInternalNode(BSPTree<Euclidean1D>)": [
        "org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet#isAfterParent(BSPTree<Euclidean1D>)",
        "org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet#childAfter(BSPTree<Euclidean1D>)",
        "org.apache.commons.math3.geometry.partitioning.BSPTree#getParent()",
        "org.apache.commons.math3.geometry.partitioning.BSPTree#getCut()",
        "org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet#leafAfter(BSPTree<Euclidean1D>)"
    ],
    "org.apache.commons.math3.stat.descriptive.SynchronizedMultivariateSummaryStatistics#setMaxImpl(StorelessUnivariateStatistic[])": ["org.apache.commons.math3.stat.descriptive.MultivariateSummaryStatistics#setMaxImpl(StorelessUnivariateStatistic[])"],
    "org.apache.commons.math3.linear.ArrayRealVector#ArrayRealVector(ArrayRealVector,boolean)": [
        "org.apache.commons.math3.linear.RealVector.<init>()",
        "org.apache.commons.math3.linear.ArrayRealVector.<init>()"
    ],
    "org.apache.commons.math3.util.MultidimensionalCounter#getSizes()": ["org.apache.commons.math3.util.MathArrays.copyOf(int[])"],
    "org.apache.commons.math3.genetics.FixedElapsedTime#FixedElapsedTime(long)": ["org.apache.commons.math3.genetics.FixedElapsedTime#FixedElapsedTime(long,TimeUnit)"],
    "org.apache.commons.math3.ode.nonstiff.EulerFieldIntegrator#getC()": [
        "org.apache.commons.math3.ode.AbstractFieldIntegrator#getField()",
        "org.apache.commons.math3.util.MathArrays.buildArray(Field<T>,int)"
    ],
    "org.apache.commons.math3.stat.descriptive.StatisticalSummaryValues#hashCode()": [
        "org.apache.commons.math3.stat.descriptive.StatisticalSummaryValues#getVariance()",
        "org.apache.commons.math3.stat.descriptive.StatisticalSummaryValues#getMax()",
        "org.apache.commons.math3.stat.descriptive.StatisticalSummaryValues#getMean()",
        "org.apache.commons.math3.stat.descriptive.StatisticalSummaryValues#getSum()",
        "org.apache.commons.math3.util.MathUtils.hash(double)",
        "org.apache.commons.math3.stat.descriptive.StatisticalSummaryValues#getMin()",
        "org.apache.commons.math3.stat.descriptive.StatisticalSummaryValues#getN()"
    ],
    "org.apache.commons.math3.analysis.differentiation.DSCompiler#pow(double,double[],int,double[],int)": [
        "org.apache.commons.math3.util.FastMath.log(double)",
        "org.apache.commons.math3.util.FastMath.pow(double,double)",
        "org.apache.commons.math3.analysis.differentiation.DSCompiler#compose(double[],int,double[],double[],int)"
    ],
    "org.apache.commons.math3.distribution.HypergeometricDistribution#getDomain(int,int,int)": [
        "org.apache.commons.math3.distribution.HypergeometricDistribution#getUpperDomain(int,int)",
        "org.apache.commons.math3.distribution.HypergeometricDistribution#getLowerDomain(int,int,int)"
    ],
    "org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizer#determineLMParameter(double[],double,double[],double[],double[],double[])": [
        "org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizer#determineLMDirection(double[],double[],double[],double[])",
        "org.apache.commons.math3.util.Precision.<staticinit>()",
        "org.apache.commons.math3.util.FastMath.max(double,double)",
        "org.apache.commons.math3.util.FastMath.abs(double)",
        "org.apache.commons.math3.util.FastMath.sqrt(double)",
        "org.apache.commons.math3.util.FastMath.min(double,double)"
    ],
    "org.apache.commons.math3.dfp.DfpMath.split(Dfp)": [
        "org.apache.commons.math3.dfp.Dfp#add(Dfp)",
        "org.apache.commons.math3.dfp.Dfp#power10K(int)",
        "org.apache.commons.math3.dfp.Dfp#getRadixDigits()",
        "org.apache.commons.math3.dfp.Dfp#subtract(Dfp)",
        "org.apache.commons.math3.dfp.Dfp#multiply(Dfp)"
    ],
    "org.apache.commons.math3.geometry.euclidean.threed.Vector3D.dotProduct(Vector3D,Vector3D)": ["org.apache.commons.math3.geometry.euclidean.threed.Vector3D#dotProduct(Vector<Euclidean3D>)"],
    "org.apache.commons.math3.stat.inference.TestUtils.chiSquareTest(double[],long[],double)": [
        "org.apache.commons.math3.stat.inference.ChiSquareTest#chiSquareTest(double[],long[],double)",
        "org.apache.commons.math3.stat.inference.TestUtils.<staticinit>()"
    ],
    "org.apache.commons.math3.analysis.solvers.BaseAbstractUnivariateSolver#setup(int,FUNC extends UnivariateFunction,double,double,double)": [
        "org.apache.commons.math3.util.IntegerSequence.Incrementor#withStart(int)",
        "org.apache.commons.math3.util.MathUtils.checkNotNull(Object)",
        "org.apache.commons.math3.util.IntegerSequence.Incrementor#withMaximalCount(int)"
    ],
    "org.apache.commons.math3.analysis.differentiation.SparseGradient#multiply(double)": ["org.apache.commons.math3.analysis.differentiation.SparseGradient#SparseGradient(double,double,Map<Integer, Double>)"],
    "org.apache.commons.math3.ode.AbstractIntegrator#acceptStep(AbstractStepInterpolator,double[],double[],double)$Comparator$1#compare(EventState,EventState)": ["org.apache.commons.math3.ode.events.EventState#getEventTime()"],
    "org.apache.commons.math3.distribution.HypergeometricDistribution#upperCumulativeProbability(int)": [
        "org.apache.commons.math3.distribution.HypergeometricDistribution#innerCumulativeProbability(int,int,int)",
        "org.apache.commons.math3.distribution.HypergeometricDistribution#getDomain(int,int,int)"
    ],
    "org.apache.commons.math3.linear.FieldLUDecomposition#getL()": [
        "org.apache.commons.math3.fraction.BigFractionField#getOne()",
        "org.apache.commons.math3.fraction.FractionField#getOne()",
        "org.apache.commons.math3.analysis.differentiation.SparseGradient#getField()$Field$1#getOne()",
        "org.apache.commons.math3.linear.Array2DRowFieldMatrix#Array2DRowFieldMatrix(Field<T extends FieldElement>,int,int)",
        "org.apache.commons.math3.linear.SparseFieldMatrix#setEntry(int,int,T extends FieldElement)",
        "org.apache.commons.math3.linear.Array2DRowFieldMatrix#setEntry(int,int,T extends FieldElement)",
        "org.apache.commons.math3.linear.BlockFieldMatrix#setEntry(int,int,T extends FieldElement)",
        "org.apache.commons.math3.dfp.DfpField#getOne()",
        "org.apache.commons.math3.analysis.differentiation.DerivativeStructure#getField()$Field$1#getOne()",
        "org.apache.commons.math3.util.Decimal64Field#getOne()",
        "org.apache.commons.math3.complex.ComplexField#getOne()",
        "org.apache.commons.math3.util.BigRealField#getOne()"
    ],
    "org.apache.commons.math3.optimization.linear.UnboundedSolutionException#UnboundedSolutionException()": [
        "org.apache.commons.math3.exception.util.LocalizedFormats.<staticinit>()",
        "org.apache.commons.math3.optimization.linear.UnboundedSolutionException.<init>()"
    ],
    "org.apache.commons.math3.ode.nonstiff.DormandPrince54FieldStepInterpolator#computeInterpolatedStateAndDerivatives(FieldEquationsMapper<T extends RealFieldElement>,T extends RealFieldElement,T extends RealFieldElement,T extends RealFieldElement,T extends RealFieldElement)": [
        "org.apache.commons.math3.ode.nonstiff.RungeKuttaFieldStepInterpolator#previousStateLinearCombination(T extends RealFieldElement[]...)",
        "org.apache.commons.math3.ode.nonstiff.RungeKuttaFieldStepInterpolator#currentStateLinearCombination(T extends RealFieldElement[]...)",
        "org.apache.commons.math3.ode.nonstiff.RungeKuttaFieldStepInterpolator#derivativeLinearCombination(T extends RealFieldElement[]...)",
        "org.apache.commons.math3.ode.sampling.AbstractFieldStepInterpolator#getGlobalPreviousState()",
        "org.apache.commons.math3.ode.FieldODEStateAndDerivative#FieldODEStateAndDerivative(T extends RealFieldElement,T extends RealFieldElement[],T extends RealFieldElement[])"
    ],
    "org.apache.commons.math3.primes.PollardRho.gcdPositive(int,int)": [
        "org.apache.commons.math3.util.FastMath.min(int,int)",
        "org.apache.commons.math3.util.FastMath.abs(int)"
    ],
    "org.apache.commons.math3.analysis.integration.BaseAbstractUnivariateIntegrator#getEvaluations()": ["org.apache.commons.math3.util.IntegerSequence.Incrementor#getCount()"],
    "org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(Vector3D,Vector3D)": ["org.apache.commons.math3.geometry.euclidean.threed.Vector3D#crossProduct(Vector<Euclidean3D>)"],
    "org.apache.commons.math3.geometry.euclidean.twod.Line#getOffset(Vector<Euclidean2D>)": ["org.apache.commons.math3.geometry.euclidean.twod.Line#getOffset(Point<Euclidean2D>)"],
    "org.apache.commons.math3.optimization.fitting.GaussianFitter.ParameterGuesser#ParameterGuesser(WeightedObservedPoint[])": [
        "org.apache.commons.math3.optimization.fitting.GaussianFitter.ParameterGuesser.<init>()",
        "org.apache.commons.math3.optimization.fitting.GaussianFitter.ParameterGuesser#sortObservations(WeightedObservedPoint[])",
        "org.apache.commons.math3.optimization.fitting.GaussianFitter.ParameterGuesser#basicGuess(WeightedObservedPoint[])",
        "org.apache.commons.math3.exception.util.LocalizedFormats.<staticinit>()"
    ],
    "org.apache.commons.math3.ode.nonstiff.MidpointFieldIntegrator#MidpointFieldIntegrator(Field<T extends RealFieldElement>,T extends RealFieldElement)": [
        "org.apache.commons.math3.ode.nonstiff.MidpointFieldIntegrator.<init>()",
        "org.apache.commons.math3.ode.nonstiff.RungeKuttaFieldIntegrator#RungeKuttaFieldIntegrator(Field<T extends RealFieldElement>,String,T extends RealFieldElement)"
    ],
    "org.apache.commons.math3.optimization.linear.AbstractLinearOptimizer#optimize(LinearObjectiveFunction,Collection<LinearConstraint>,GoalType,boolean)": ["org.apache.commons.math3.optimization.linear.SimplexSolver#doOptimize()"],
    "org.apache.commons.math3.stat.descriptive.rank.Percentile.EstimationType$EstimationType$1#index(double,int)": ["org.apache.commons.math3.util.FastMath.rint(double)"],
    "org.apache.commons.math3.optimization.direct.MultiDirectionalSimplex#MultiDirectionalSimplex(int,double)": [
        "org.apache.commons.math3.optimization.direct.MultiDirectionalSimplex#MultiDirectionalSimplex(int,double,double,double)",
        "org.apache.commons.math3.optimization.direct.MultiDirectionalSimplex.<staticinit>()"
    ],
    "org.apache.commons.math3.stat.descriptive.rank.Min#Min()": [
        "org.apache.commons.math3.stat.descriptive.rank.Min.<init>()",
        "org.apache.commons.math3.stat.descriptive.AbstractStorelessUnivariateStatistic.<init>()"
    ],
    "org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(double[],double[])": ["org.apache.commons.math3.util.Precision.equalsIncludingNaN(double,double)"],
    "org.apache.commons.math3.geometry.euclidean.twod.SubLine#buildNew(Hyperplane<Euclidean2D>,Region<Euclidean1D>)": ["org.apache.commons.math3.geometry.euclidean.twod.SubLine#SubLine(Hyperplane<Euclidean2D>,Region<Euclidean1D>)"],
    "org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D#FieldVector3D(T extends RealFieldElement,Vector3D,T extends RealFieldElement,Vector3D)": [
        "org.apache.commons.math3.geometry.euclidean.threed.Vector3D#getX()",
        "org.apache.commons.math3.geometry.euclidean.threed.Vector3D#getZ()",
        "org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D.<init>()",
        "org.apache.commons.math3.geometry.euclidean.threed.Vector3D#getY()"
    ],
    "org.apache.commons.math3.stat.descriptive.moment.Mean#evaluate(double[],double[],int,int)": [
        "org.apache.commons.math3.stat.descriptive.summary.Sum#evaluate(double[],double[],int,int)",
        "org.apache.commons.math3.stat.descriptive.summary.Sum#Sum()",
        "org.apache.commons.math3.stat.descriptive.summary.Sum#evaluate(double[],int,int)",
        "org.apache.commons.math3.stat.descriptive.AbstractUnivariateStatistic#test(double[],double[],int,int)"
    ],
    "org.apache.commons.math3.distribution.AbstractIntegerDistribution#cumulativeProbability(int,int)": [
        "org.apache.commons.math3.distribution.PascalDistribution#cumulativeProbability(int)",
        "org.apache.commons.math3.distribution.BinomialDistribution#cumulativeProbability(int)",
        "org.apache.commons.math3.distribution.ZipfDistribution#cumulativeProbability(int)",
        "org.apache.commons.math3.exception.util.LocalizedFormats.<staticinit>()",
        "org.apache.commons.math3.distribution.EnumeratedIntegerDistribution#cumulativeProbability(int)",
        "org.apache.commons.math3.distribution.HypergeometricDistribution#cumulativeProbability(int)",
        "org.apache.commons.math3.distribution.GeometricDistribution#cumulativeProbability(int)",
        "org.apache.commons.math3.distribution.PoissonDistribution#cumulativeProbability(int)",
        "org.apache.commons.math3.distribution.UniformIntegerDistribution#cumulativeProbability(int)"
    ],
    "org.apache.commons.math3.stat.descriptive.MultivariateSummaryStatistics#hashCode()": [
        "org.apache.commons.math3.stat.descriptive.MultivariateSummaryStatistics#getCovariance()",
        "org.apache.commons.math3.stat.descriptive.MultivariateSummaryStatistics#getSumSq()",
        "org.apache.commons.math3.stat.descriptive.MultivariateSummaryStatistics#getGeometricMean()",
        "org.apache.commons.math3.stat.descriptive.SynchronizedMultivariateSummaryStatistics#getN()",
        "org.apache.commons.math3.util.MathUtils.hash(double[])",
        "org.apache.commons.math3.stat.descriptive.SynchronizedMultivariateSummaryStatistics#getCovariance()",
        "org.apache.commons.math3.stat.descriptive.SynchronizedMultivariateSummaryStatistics#getMean()",
        "org.apache.commons.math3.stat.descriptive.MultivariateSummaryStatistics#getMin()",
        "org.apache.commons.math3.util.MathUtils.hash(double)",
        "org.apache.commons.math3.stat.descriptive.MultivariateSummaryStatistics#getSumLog()",
        "org.apache.commons.math3.stat.descriptive.SynchronizedMultivariateSummaryStatistics#getGeometricMean()",
        "org.apache.commons.math3.stat.descriptive.SynchronizedMultivariateSummaryStatistics#getSumLog()",
        "org.apache.commons.math3.stat.descriptive.MultivariateSummaryStatistics#getN()",
        "org.apache.commons.math3.stat.descriptive.SynchronizedMultivariateSummaryStatistics#getMin()",
        "org.apache.commons.math3.stat.descriptive.SynchronizedMultivariateSummaryStatistics#getMax()",
        "org.apache.commons.math3.stat.descriptive.SynchronizedMultivariateSummaryStatistics#getSumSq()",
        "org.apache.commons.math3.stat.descriptive.MultivariateSummaryStatistics#getSum()",
        "org.apache.commons.math3.stat.descriptive.SynchronizedMultivariateSummaryStatistics#getSum()",
        "org.apache.commons.math3.stat.descriptive.MultivariateSummaryStatistics#getMax()",
        "org.apache.commons.math3.stat.descriptive.MultivariateSummaryStatistics#getMean()"
    ],
    "org.apache.commons.math3.fraction.BigFraction#floatValue()": [
        "org.apache.commons.math3.util.FastMath.getExponent(float)",
        "org.apache.commons.math3.util.FastMath.max(int,int)"
    ],
    "org.apache.commons.math3.stat.correlation.SpearmansCorrelation#getCorrelationMatrix()": ["org.apache.commons.math3.stat.correlation.PearsonsCorrelation#getCorrelationMatrix()"],
    "org.apache.commons.math3.exception.NoDataException#NoDataException(Localizable)": ["org.apache.commons.math3.exception.NoDataException.<init>()"],
    "org.apache.commons.math3.dfp.BracketingNthOrderBrentSolverDFP#BracketingNthOrderBrentSolverDFP(Dfp,Dfp,Dfp,int)": [
        "org.apache.commons.math3.analysis.solvers.FieldBracketingNthOrderBrentSolver#FieldBracketingNthOrderBrentSolver(T extends RealFieldElement,T extends RealFieldElement,T extends RealFieldElement,int)",
        "org.apache.commons.math3.dfp.BracketingNthOrderBrentSolverDFP.<init>()"
    ],
    "org.apache.commons.math3.stat.descriptive.moment.GeometricMean#getResult()": [
        "org.apache.commons.math3.stat.descriptive.moment.FirstMoment#getResult()",
        "org.apache.commons.math3.stat.descriptive.moment.Variance#getN()",
        "org.apache.commons.math3.stat.descriptive.rank.Min#getResult()",
        "org.apache.commons.math3.stat.descriptive.moment.Kurtosis#getN()",
        "org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile#getResult()",
        "org.apache.commons.math3.stat.descriptive.moment.FirstMoment#getN()",
        "org.apache.commons.math3.stat.descriptive.moment.FourthMoment#getResult()",
        "org.apache.commons.math3.util.FastMath.exp(double)",
        "org.apache.commons.math3.stat.descriptive.summary.Product#getResult()",
        "org.apache.commons.math3.stat.descriptive.rank.Max#getN()",
        "org.apache.commons.math3.stat.descriptive.summary.SumOfSquares#getResult()",
        "org.apache.commons.math3.stat.descriptive.moment.Skewness#getResult()",
        "org.apache.commons.math3.stat.descriptive.moment.Kurtosis#getResult()",
        "org.apache.commons.math3.stat.descriptive.moment.GeometricMean#getN()",
        "org.apache.commons.math3.stat.descriptive.moment.ThirdMoment#getResult()",
        "org.apache.commons.math3.stat.descriptive.moment.Mean#getResult()",
        "org.apache.commons.math3.stat.descriptive.summary.Sum#getN()",
        "org.apache.commons.math3.stat.descriptive.summary.SumOfSquares#getN()",
        "org.apache.commons.math3.stat.descriptive.moment.GeometricMean#getResult()",
        "org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile#getN()",
        "org.apache.commons.math3.stat.descriptive.moment.Variance#getResult()",
        "org.apache.commons.math3.stat.descriptive.moment.StandardDeviation#getN()",
        "org.apache.commons.math3.stat.descriptive.summary.Sum#getResult()",
        "org.apache.commons.math3.stat.descriptive.rank.Min#getN()",
        "org.apache.commons.math3.stat.descriptive.moment.StandardDeviation#getResult()",
        "org.apache.commons.math3.stat.descriptive.moment.Mean#getN()",
        "org.apache.commons.math3.stat.descriptive.summary.SumOfLogs#getN()",
        "org.apache.commons.math3.stat.descriptive.summary.SumOfLogs#getResult()",
        "org.apache.commons.math3.stat.descriptive.moment.Skewness#getN()",
        "org.apache.commons.math3.stat.descriptive.rank.Max#getResult()",
        "org.apache.commons.math3.stat.descriptive.moment.SecondMoment#getResult()",
        "org.apache.commons.math3.stat.descriptive.summary.Product#getN()"
    ],
    "org.apache.commons.math3.optim.PointValuePair#PointValuePair(double[],double,boolean)": [
        "org.apache.commons.math3.optim.PointValuePair.<init>()",
        "org.apache.commons.math3.util.Pair#Pair(K,V)"
    ],
    "org.apache.commons.math3.stat.descriptive.rank.Percentile#medianOf3(double[],int,int)": [
        "org.apache.commons.math3.util.MedianOf3PivotingStrategy#pivotIndex(double[],int,int)",
        "org.apache.commons.math3.util.MedianOf3PivotingStrategy.<init>()"
    ],
    "org.apache.commons.math3.linear.OpenMapRealVector.OpenMapSparseIterator#OpenMapSparseIterator()": [
        "org.apache.commons.math3.util.OpenIntToDoubleHashMap#iterator()",
        "org.apache.commons.math3.linear.OpenMapRealVector.OpenMapSparseIterator.<init>()",
        "org.apache.commons.math3.linear.OpenMapRealVector.OpenMapEntry#OpenMapEntry(Iterator)"
    ],
    "org.apache.commons.math3.random.CorrelatedRandomVectorGenerator#CorrelatedRandomVectorGenerator(RealMatrix,double,NormalizedRandomGenerator)": [
        "org.apache.commons.math3.linear.BlockFieldMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.BlockRealMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.RectangularCholeskyDecomposition#getRootMatrix()",
        "org.apache.commons.math3.linear.Array2DRowRealMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.SparseFieldMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.OpenMapRealMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.DiagonalMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.Array2DRowFieldMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.RectangularCholeskyDecomposition#getRank()",
        "org.apache.commons.math3.random.CorrelatedRandomVectorGenerator.<init>()",
        "org.apache.commons.math3.linear.RectangularCholeskyDecomposition#RectangularCholeskyDecomposition(RealMatrix,double)"
    ],
    "org.apache.commons.math3.util.FastMath.acosh(double)": [
        "org.apache.commons.math3.util.FastMath.log(double)",
        "org.apache.commons.math3.util.FastMath.sqrt(double)"
    ],
    "org.apache.commons.math3.random.ValueServer#getNextDigest()": [
        "org.apache.commons.math3.random.EmpiricalDistribution#getBinStats()",
        "org.apache.commons.math3.random.EmpiricalDistribution#getNextValue()",
        "org.apache.commons.math3.exception.util.LocalizedFormats.<staticinit>()"
    ],
    "org.apache.commons.math3.stat.inference.WilcoxonSignedRankTest#WilcoxonSignedRankTest(NaNStrategy,TiesStrategy)": [
        "org.apache.commons.math3.stat.inference.WilcoxonSignedRankTest.<init>()",
        "org.apache.commons.math3.stat.ranking.NaturalRanking#NaturalRanking(NaNStrategy,TiesStrategy)"
    ],
    "org.apache.commons.math3.fitting.leastsquares.GaussNewtonOptimizer#optimize(LeastSquaresProblem)": [
        "org.apache.commons.math3.fitting.leastsquares.GaussNewtonOptimizer.Decomposition$Decomposition$1#solve(RealMatrix,RealVector)",
        "org.apache.commons.math3.util.Incrementor#getCount()",
        "org.apache.commons.math3.fitting.leastsquares.LeastSquaresFactory.countEvaluations(LeastSquaresProblem,Incrementor)$LeastSquaresAdapter$1#evaluate(RealVector)",
        "org.apache.commons.math3.linear.OpenMapRealVector#add(RealVector)",
        "org.apache.commons.math3.fitting.leastsquares.DenseWeightedEvaluation#getPoint()",
        "org.apache.commons.math3.fitting.leastsquares.LeastSquaresFactory.LocalLeastSquaresProblem.LazyUnweightedEvaluation#getPoint()",
        "org.apache.commons.math3.optim.AbstractOptimizationProblem#getEvaluationCounter()",
        "org.apache.commons.math3.fitting.leastsquares.LeastSquaresAdapter#getConvergenceChecker()",
        "org.apache.commons.math3.util.Incrementor.wrap(Incrementor)$Incrementor$1#incrementCount()",
        "org.apache.commons.math3.fitting.leastsquares.LeastSquaresFactory.LocalLeastSquaresProblem.UnweightedEvaluation#getJacobian()",
        "org.apache.commons.math3.fitting.leastsquares.OptimumImpl#getResiduals()",
        "org.apache.commons.math3.fitting.leastsquares.OptimumImpl#OptimumImpl(Evaluation,int,int)",
        "org.apache.commons.math3.fitting.leastsquares.LeastSquaresFactory.LocalLeastSquaresProblem.UnweightedEvaluation#getPoint()",
        "org.apache.commons.math3.linear.ArrayRealVector#add(RealVector)",
        "org.apache.commons.math3.fitting.leastsquares.LeastSquaresAdapter#evaluate(RealVector)",
        "org.apache.commons.math3.fitting.leastsquares.OptimumImpl#getJacobian()",
        "org.apache.commons.math3.fitting.leastsquares.LeastSquaresAdapter#getEvaluationCounter()",
        "org.apache.commons.math3.fitting.leastsquares.OptimumImpl#getPoint()",
        "org.apache.commons.math3.linear.RealVector.unmodifiableRealVector(RealVector)$RealVector$1#add(RealVector)",
        "org.apache.commons.math3.fitting.leastsquares.DenseWeightedEvaluation#getJacobian()",
        "org.apache.commons.math3.fitting.leastsquares.LeastSquaresFactory.LocalLeastSquaresProblem#getStart()",
        "org.apache.commons.math3.fitting.leastsquares.LeastSquaresFactory.LocalLeastSquaresProblem.LazyUnweightedEvaluation#getResiduals()",
        "org.apache.commons.math3.fitting.leastsquares.LeastSquaresFactory.LocalLeastSquaresProblem#evaluate(RealVector)",
        "org.apache.commons.math3.optim.AbstractOptimizationProblem#getIterationCounter()",
        "org.apache.commons.math3.fitting.leastsquares.LeastSquaresFactory.LocalLeastSquaresProblem.UnweightedEvaluation#getResiduals()",
        "org.apache.commons.math3.fitting.leastsquares.DenseWeightedEvaluation#getResiduals()",
        "org.apache.commons.math3.exception.NullArgumentException#NullArgumentException()",
        "org.apache.commons.math3.util.Incrementor#incrementCount()",
        "org.apache.commons.math3.optim.AbstractOptimizationProblem#getConvergenceChecker()",
        "org.apache.commons.math3.fitting.leastsquares.LeastSquaresAdapter#getStart()",
        "org.apache.commons.math3.fitting.leastsquares.LeastSquaresFactory.LocalLeastSquaresProblem.LazyUnweightedEvaluation#getJacobian()",
        "org.apache.commons.math3.fitting.leastsquares.LeastSquaresFactory.weightMatrix(LeastSquaresProblem,RealMatrix)$LeastSquaresAdapter$1#evaluate(RealVector)",
        "org.apache.commons.math3.linear.RealVector#add(RealVector)",
        "org.apache.commons.math3.fitting.leastsquares.LeastSquaresAdapter#getIterationCounter()"
    ],
    "org.apache.commons.math3.util.Decimal64#add(Decimal64)": ["org.apache.commons.math3.util.Decimal64#Decimal64(double)"],
    "org.apache.commons.math3.linear.ArrayRealVector#ArrayRealVector(ArrayRealVector,ArrayRealVector)": [
        "org.apache.commons.math3.linear.RealVector.<init>()",
        "org.apache.commons.math3.linear.ArrayRealVector.<init>()"
    ],
    "org.apache.commons.math3.stat.regression.MillerUpdatingRegression#include(double[],double,double)": [
        "org.apache.commons.math3.util.FastMath.abs(double)",
        "org.apache.commons.math3.stat.regression.MillerUpdatingRegression#smartAdd(double,double)",
        "org.apache.commons.math3.util.Precision.<staticinit>()"
    ],
    "org.apache.commons.math3.ode.nonstiff.LutherIntegrator.<staticinit>()": ["org.apache.commons.math3.util.FastMath.sqrt(double)"],
    "org.apache.commons.math3.analysis.solvers.BaseSecantSolver#doSolve()": [
        "org.apache.commons.math3.analysis.solvers.BaseAbstractUnivariateSolver#getAbsoluteAccuracy()",
        "org.apache.commons.math3.analysis.solvers.BaseAbstractUnivariateSolver#getMin()",
        "org.apache.commons.math3.analysis.solvers.BaseAbstractUnivariateSolver#computeObjectiveValue(double)",
        "org.apache.commons.math3.exception.MathInternalError#MathInternalError()",
        "org.apache.commons.math3.util.FastMath.max(double,double)",
        "org.apache.commons.math3.analysis.solvers.BaseSecantSolver.Method.<staticinit>()",
        "org.apache.commons.math3.analysis.solvers.BaseAbstractUnivariateSolver#getRelativeAccuracy()",
        "org.apache.commons.math3.analysis.solvers.BaseAbstractUnivariateSolver#getFunctionValueAccuracy()",
        "org.apache.commons.math3.util.FastMath.abs(double)",
        "org.apache.commons.math3.analysis.solvers.AllowedSolution.<staticinit>()",
        "org.apache.commons.math3.exception.ConvergenceException#ConvergenceException()",
        "org.apache.commons.math3.analysis.solvers.BaseAbstractUnivariateSolver#getMax()",
        "org.apache.commons.math3.analysis.solvers.BaseAbstractUnivariateSolver#verifyBracketing(double,double)"
    ],
    "org.apache.commons.math3.exception.NotFiniteNumberException#NotFiniteNumberException(Number,Object[]...)": ["org.apache.commons.math3.exception.util.LocalizedFormats.<staticinit>()"],
    "org.apache.commons.math3.stat.regression.RegressionResults#getCovarianceOfParameters(int,int)": ["org.apache.commons.math3.stat.regression.RegressionResults#getVcvElement(int,int)"],
    "org.apache.commons.math3.linear.OpenMapRealVector#ebeMultiply(RealVector)": [
        "org.apache.commons.math3.linear.ArrayRealVector#getDimension()",
        "org.apache.commons.math3.util.OpenIntToDoubleHashMap#iterator()",
        "org.apache.commons.math3.linear.OpenMapRealVector#setEntry(int,double)",
        "org.apache.commons.math3.util.OpenIntToDoubleHashMap.Iterator#advance()",
        "org.apache.commons.math3.linear.ArrayRealVector#checkVectorDimensions(int)",
        "org.apache.commons.math3.linear.ArrayRealVector#getEntry(int)",
        "org.apache.commons.math3.linear.OpenMapRealVector#getDimension()",
        "org.apache.commons.math3.util.OpenIntToDoubleHashMap.Iterator#value()",
        "org.apache.commons.math3.linear.RealVector#checkVectorDimensions(int)",
        "org.apache.commons.math3.util.OpenIntToDoubleHashMap.Iterator#key()",
        "org.apache.commons.math3.linear.RealVector.unmodifiableRealVector(RealVector)$RealVector$1#getDimension()",
        "org.apache.commons.math3.linear.OpenMapRealVector#getEntry(int)",
        "org.apache.commons.math3.linear.OpenMapRealVector#OpenMapRealVector(OpenMapRealVector)",
        "org.apache.commons.math3.util.OpenIntToDoubleHashMap.Iterator#hasNext()",
        "org.apache.commons.math3.linear.RealVector.unmodifiableRealVector(RealVector)$RealVector$1#getEntry(int)"
    ],
    "org.apache.commons.math3.fitting.leastsquares.OptimumImpl#getJacobian()": [
        "org.apache.commons.math3.fitting.leastsquares.DenseWeightedEvaluation#getJacobian()",
        "org.apache.commons.math3.fitting.leastsquares.LeastSquaresFactory.LocalLeastSquaresProblem.LazyUnweightedEvaluation#getJacobian()",
        "org.apache.commons.math3.fitting.leastsquares.OptimumImpl#getJacobian()",
        "org.apache.commons.math3.fitting.leastsquares.LeastSquaresFactory.LocalLeastSquaresProblem.UnweightedEvaluation#getJacobian()"
    ],
    "org.apache.commons.math3.stat.inference.KolmogorovSmirnovTest#bootstrap(double[],double[],int,boolean)": [
        "org.apache.commons.math3.distribution.AbstractRealDistribution#sample(int)",
        "org.apache.commons.math3.stat.inference.KolmogorovSmirnovTest#integralKolmogorovSmirnovStatistic(double[],double[])",
        "org.apache.commons.math3.distribution.EnumeratedRealDistribution#EnumeratedRealDistribution(RandomGenerator,double[])"
    ],
    "org.apache.commons.math3.stat.StatUtils.getMode(double[],int,int)": [
        "org.apache.commons.math3.stat.Frequency#getMode()",
        "org.apache.commons.math3.stat.Frequency#Frequency()",
        "org.apache.commons.math3.stat.Frequency#addValue(long)"
    ],
    "org.apache.commons.math3.geometry.euclidean.threed.Line#distance(Vector3D)": [
        "org.apache.commons.math3.geometry.euclidean.threed.Vector3D#getNorm()",
        "org.apache.commons.math3.geometry.euclidean.threed.Vector3D#Vector3D(double,Vector3D,double,Vector3D)",
        "org.apache.commons.math3.geometry.euclidean.threed.Vector3D#dotProduct(Vector<Euclidean3D>)",
        "org.apache.commons.math3.geometry.euclidean.threed.Vector3D#subtract(Vector<Euclidean3D>)"
    ],
    "org.apache.commons.math3.optim.linear.SimplexSolver#isValidPivotColumn(SimplexTableau,int)": [
        "org.apache.commons.math3.util.Precision.compareTo(double,double,double)",
        "org.apache.commons.math3.optim.linear.SimplexTableau#getNumObjectiveFunctions()",
        "org.apache.commons.math3.optim.linear.SimplexTableau#getHeight()",
        "org.apache.commons.math3.optim.linear.SimplexTableau#getEntry(int,int)"
    ],
    "org.apache.commons.math3.fraction.BigFractionField#getZero()": ["org.apache.commons.math3.fraction.BigFraction.<staticinit>()"],
    "org.apache.commons.math3.fitting.leastsquares.LeastSquaresFactory.model(MultivariateVectorFunction,MultivariateMatrixFunction)": ["org.apache.commons.math3.fitting.leastsquares.LeastSquaresFactory.LocalValueAndJacobianFunction#LocalValueAndJacobianFunction(MultivariateVectorFunction,MultivariateMatrixFunction)"],
    "org.apache.commons.math3.linear.TriDiagonalTransformer#getT()": ["org.apache.commons.math3.linear.MatrixUtils.createRealMatrix(double[][])"],
    "org.apache.commons.math3.linear.AbstractRealMatrix#scalarAdd(double)": [
        "org.apache.commons.math3.linear.DiagonalMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.Array2DRowRealMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.Array2DRowRealMatrix#setEntry(int,int,double)",
        "org.apache.commons.math3.linear.DiagonalMatrix#getEntry(int,int)",
        "org.apache.commons.math3.linear.OpenMapRealMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.BlockRealMatrix#setEntry(int,int,double)",
        "org.apache.commons.math3.linear.OpenMapRealMatrix#setEntry(int,int,double)",
        "org.apache.commons.math3.linear.OpenMapRealMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.DiagonalMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.OpenMapRealMatrix#getEntry(int,int)",
        "org.apache.commons.math3.linear.DiagonalMatrix#createMatrix(int,int)",
        "org.apache.commons.math3.linear.BlockRealMatrix#getEntry(int,int)",
        "org.apache.commons.math3.linear.Array2DRowRealMatrix#getEntry(int,int)",
        "org.apache.commons.math3.linear.BlockRealMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.Array2DRowRealMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.OpenMapRealMatrix#createMatrix(int,int)",
        "org.apache.commons.math3.linear.BlockRealMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.Array2DRowRealMatrix#createMatrix(int,int)",
        "org.apache.commons.math3.linear.BlockRealMatrix#createMatrix(int,int)",
        "org.apache.commons.math3.linear.DiagonalMatrix#setEntry(int,int,double)"
    ],
    "org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D.dotProduct(Vector3D,FieldVector3D<T extends RealFieldElement>)": ["org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D#dotProduct(Vector3D)"],
    "org.apache.commons.math3.analysis.polynomials.PolynomialFunction#multiply(PolynomialFunction)": [
        "org.apache.commons.math3.util.FastMath.min(int,int)",
        "org.apache.commons.math3.util.FastMath.max(int,int)",
        "org.apache.commons.math3.analysis.polynomials.PolynomialFunction#PolynomialFunction(double[])"
    ],
    "org.apache.commons.math3.stat.correlation.Covariance#computeCovarianceMatrix(double[][],boolean)": [
        "org.apache.commons.math3.stat.correlation.Covariance#computeCovarianceMatrix(RealMatrix,boolean)",
        "org.apache.commons.math3.linear.BlockRealMatrix#BlockRealMatrix(double[][])"
    ],
    "org.apache.commons.math3.fitting.HarmonicCurveFitter.create()": ["org.apache.commons.math3.fitting.HarmonicCurveFitter#HarmonicCurveFitter(double[],int)"],
    "org.apache.commons.math3.userguide.LowDiscrepancyGeneratorComparison.Plot#Plot(List<Vector2D>)": ["org.apache.commons.math3.userguide.LowDiscrepancyGeneratorComparison.Plot.<init>()"],
    "org.apache.commons.math3.analysis.integration.LegendreGaussIntegrator#LegendreGaussIntegrator(int,int,int)": [
        "org.apache.commons.math3.analysis.integration.BaseAbstractUnivariateIntegrator.<staticinit>()",
        "org.apache.commons.math3.analysis.integration.LegendreGaussIntegrator#LegendreGaussIntegrator(int,double,double,int,int)"
    ],
    "org.apache.commons.math3.stat.StatUtils.percentile(double[],double)": [
        "org.apache.commons.math3.stat.StatUtils.<staticinit>()",
        "org.apache.commons.math3.stat.descriptive.rank.Percentile#evaluate(double[],double)"
    ],
    "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer.sequence(double,double,double)": ["org.apache.commons.math3.linear.Array2DRowRealMatrix#Array2DRowRealMatrix(double[][],boolean)"],
    "org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D.dotProduct(FieldVector3D<T extends RealFieldElement>,FieldVector3D<T extends RealFieldElement>)": ["org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D#dotProduct(FieldVector3D<T extends RealFieldElement>)"],
    "org.apache.commons.math3.fitting.GaussianCurveFitter$Parametric$1#gradient(double,double[]...)": ["org.apache.commons.math3.analysis.function.Gaussian.Parametric#gradient(double,double[]...)"],
    "org.apache.commons.math3.geometry.spherical.oned.S1Point.<staticinit>()": [
        "org.apache.commons.math3.geometry.spherical.oned.S1Point#S1Point(double,Vector2D)",
        "org.apache.commons.math3.geometry.euclidean.twod.Vector2D.<staticinit>()"
    ],
    "org.apache.commons.math3.linear.SymmLQ#solve(RealLinearOperator,RealVector,RealVector)": [
        "org.apache.commons.math3.linear.ArrayRealVector#copy()",
        "org.apache.commons.math3.linear.RealVector.unmodifiableRealVector(RealVector)$RealVector$1#copy()",
        "org.apache.commons.math3.util.MathUtils.checkNotNull(Object)",
        "org.apache.commons.math3.linear.SymmLQ#solveInPlace(RealLinearOperator,RealLinearOperator,RealVector,RealVector,boolean,double)",
        "org.apache.commons.math3.linear.OpenMapRealVector#copy()"
    ],
    "org.apache.commons.math3.geometry.spherical.twod.SphericalPolygonsSet#getInsidePoints()": [
        "org.apache.commons.math3.geometry.partitioning.AbstractRegion#getTree(boolean)",
        "org.apache.commons.math3.geometry.spherical.twod.PropertiesComputer#PropertiesComputer(double)",
        "org.apache.commons.math3.geometry.spherical.twod.PropertiesComputer#getConvexCellsInsidePoints()",
        "org.apache.commons.math3.geometry.partitioning.BSPTree#visit(BSPTreeVisitor<S extends Space>)",
        "org.apache.commons.math3.geometry.partitioning.AbstractRegion#getTolerance()"
    ],
    "org.apache.commons.math3.userguide.genetics.Polygon#mutate(float,float)": [
        "org.apache.commons.math3.random.AbstractRandomGenerator#nextFloat()",
        "org.apache.commons.math3.random.SynchronizedRandomGenerator#nextFloat()",
        "org.apache.commons.math3.genetics.GeneticAlgorithm.getRandomGenerator()",
        "org.apache.commons.math3.random.RandomGeneratorFactory.createRandomGenerator(Random)$RandomGenerator$1#nextFloat()",
        "org.apache.commons.math3.random.BitsStreamGenerator#nextFloat()",
        "org.apache.commons.math3.random.RandomAdaptor#nextFloat()",
        "org.apache.commons.math3.userguide.genetics.Polygon.<init>()"
    ],
    "org.apache.commons.math3.linear.BlockFieldMatrix#setRowMatrix(int,FieldMatrix<T extends FieldElement>)": [
        "org.apache.commons.math3.linear.BlockFieldMatrix#setRowMatrix(int,BlockFieldMatrix<T extends FieldElement>)",
        "org.apache.commons.math3.linear.AbstractFieldMatrix#setRowMatrix(int,FieldMatrix<T extends FieldElement>)"
    ],
    "org.apache.commons.math3.ode.sampling.NordsieckStepInterpolator#computeInterpolatedStateAndDerivatives(double,double)": [
        "org.apache.commons.math3.util.FastMath.pow(double,int)",
        "org.apache.commons.math3.linear.Array2DRowRealMatrix#getDataRef()"
    ],
    "org.apache.commons.math3.stat.inference.KolmogorovSmirnovTest#kolmogorovSmirnovStatistic(double[],double[])": ["org.apache.commons.math3.stat.inference.KolmogorovSmirnovTest#integralKolmogorovSmirnovStatistic(double[],double[])"],
    "org.apache.commons.math3.random.BitsStreamGenerator#nextDouble()": [
        "org.apache.commons.math3.random.ISAACRandom#next(int)",
        "org.apache.commons.math3.random.MersenneTwister#next(int)",
        "org.apache.commons.math3.random.Well19937a#next(int)",
        "org.apache.commons.math3.random.Well1024a#next(int)",
        "org.apache.commons.math3.random.Well44497b#next(int)",
        "org.apache.commons.math3.random.Well512a#next(int)",
        "org.apache.commons.math3.random.Well44497a#next(int)",
        "org.apache.commons.math3.random.Well19937c#next(int)"
    ],
    "org.apache.commons.math3.analysis.interpolation.InterpolatingMicrosphere.FacetData#FacetData(double,double)": ["org.apache.commons.math3.analysis.interpolation.InterpolatingMicrosphere.FacetData.<init>()"],
    "org.apache.commons.math3.stat.regression.RegressionResults#getStdErrorOfEstimate(int)": [
        "org.apache.commons.math3.util.FastMath.sqrt(double)",
        "org.apache.commons.math3.stat.regression.RegressionResults#getVcvElement(int,int)"
    ],
    "org.apache.commons.math3.ode.sampling.FieldStepNormalizer#isNextInStep(T extends RealFieldElement,FieldStepInterpolator<T extends RealFieldElement>)": [
        "org.apache.commons.math3.util.Decimal64#getReal()",
        "org.apache.commons.math3.ode.sampling.AbstractFieldStepInterpolator#getCurrentState()",
        "org.apache.commons.math3.dfp.Dfp#getReal()",
        "org.apache.commons.math3.ode.FieldODEState#getTime()",
        "org.apache.commons.math3.analysis.differentiation.SparseGradient#getReal()",
        "org.apache.commons.math3.analysis.differentiation.DerivativeStructure#getReal()"
    ],
    "org.apache.commons.math3.stat.inference.TestUtils.tTest(StatisticalSummary,StatisticalSummary,double)": [
        "org.apache.commons.math3.stat.inference.TTest#tTest(StatisticalSummary,StatisticalSummary,double)",
        "org.apache.commons.math3.stat.inference.TestUtils.<staticinit>()"
    ],
    "org.apache.commons.math3.util.FastMath.nextDown(float)": ["org.apache.commons.math3.util.FastMath.nextAfter(float,double)"],
    "org.apache.commons.math3.stat.regression.GLSMultipleLinearRegression.<init>()": ["org.apache.commons.math3.stat.regression.AbstractMultipleLinearRegression.<init>()"],
    "org.apache.commons.math3.geometry.spherical.oned.S1Point#equals(Object)": [
        "org.apache.commons.math3.geometry.spherical.oned.S1Point#isNaN()",
        "org.apache.commons.math3.geometry.spherical.oned.S1Point.<staticinit>()"
    ],
    "org.apache.commons.math3.util.FastMath.multiplyExact(long,long)": ["org.apache.commons.math3.exception.util.LocalizedFormats.<staticinit>()"],
    "org.apache.commons.math3.ml.neuralnet.sofm.LearningFactorFunctionFactory#LearningFactorFunctionFactory()": ["org.apache.commons.math3.ml.neuralnet.sofm.LearningFactorFunctionFactory.<init>()"],
    "org.apache.commons.math3.geometry.spherical.twod.Circle#getInsideArc(Circle)": [
        "org.apache.commons.math3.geometry.spherical.twod.Circle#getPhase(Vector3D)",
        "org.apache.commons.math3.geometry.spherical.oned.Arc#Arc(double,double,double)",
        "org.apache.commons.math3.util.FastMath.<staticinit>()"
    ],
    "org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet.FacetsContributionVisitor#FacetsContributionVisitor()": [
        "org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet.FacetsContributionVisitor.<init>()",
        "org.apache.commons.math3.geometry.partitioning.AbstractRegion#setSize(double)",
        "org.apache.commons.math3.geometry.partitioning.AbstractRegion#setBarycenter(Point<S extends Space>)",
        "org.apache.commons.math3.geometry.euclidean.threed.Vector3D#Vector3D(double,double,double)"
    ],
    "org.apache.commons.math3.ml.neuralnet.oned.NeuronString.SerializationProxy#readResolve()": ["org.apache.commons.math3.ml.neuralnet.oned.NeuronString#NeuronString(boolean,double[][])"],
    "org.apache.commons.math3.exception.MathIllegalArgumentException#getMessage()": ["org.apache.commons.math3.exception.util.ExceptionContext#getMessage()"],
    "org.apache.commons.math3.ode.nonstiff.GraggBulirschStoerStepInterpolator#estimateError(double[])": ["org.apache.commons.math3.util.FastMath.sqrt(double)"],
    "org.apache.commons.math3.analysis.polynomials.PolynomialFunction#derivative()": ["org.apache.commons.math3.analysis.polynomials.PolynomialFunction#polynomialDerivative()"],
    "org.apache.commons.math3.distribution.UniformRealDistribution#UniformRealDistribution(double,double)": [
        "org.apache.commons.math3.random.Well19937c#Well19937c()",
        "org.apache.commons.math3.distribution.UniformRealDistribution#UniformRealDistribution(RandomGenerator,double,double)"
    ],
    "org.apache.commons.math3.stat.inference.KolmogorovSmirnovTest#cdf(double,int)": ["org.apache.commons.math3.stat.inference.KolmogorovSmirnovTest#cdf(double,int,boolean)"],
    "org.apache.commons.math3.geometry.euclidean.threed.FieldRotation.applyTo(Rotation,FieldVector3D<T extends RealFieldElement>)": [
        "org.apache.commons.math3.geometry.euclidean.threed.Rotation#getQ3()",
        "org.apache.commons.math3.geometry.euclidean.threed.Rotation#getQ2()",
        "org.apache.commons.math3.geometry.euclidean.threed.Rotation#getQ1()",
        "org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D#getZ()",
        "org.apache.commons.math3.geometry.euclidean.threed.Rotation#getQ0()",
        "org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D#getY()",
        "org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D#getX()",
        "org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D#FieldVector3D(T extends RealFieldElement,T extends RealFieldElement,T extends RealFieldElement)"
    ],
    "org.apache.commons.math3.ml.clustering.FuzzyKMeansClusterer#updateClusterCenters()": [
        "org.apache.commons.math3.ml.clustering.DoublePoint#getPoint()",
        "org.apache.commons.math3.util.FastMath.pow(double,double)",
        "org.apache.commons.math3.ml.clustering.CentroidCluster#getCenter()",
        "org.apache.commons.math3.ml.clustering.DoublePoint#DoublePoint(double[])",
        "org.apache.commons.math3.ml.clustering.CentroidCluster#CentroidCluster(Clusterable)",
        "org.apache.commons.math3.util.MathArrays.scaleInPlace(double,double[])"
    ],
    "org.apache.commons.math3.geometry.euclidean.twod.Line#setAngle(double)": [
        "org.apache.commons.math3.util.FastMath.sin(double)",
        "org.apache.commons.math3.util.MathUtils.normalizeAngle(double,double)",
        "org.apache.commons.math3.geometry.euclidean.twod.Line#unlinkReverse()",
        "org.apache.commons.math3.util.FastMath.<staticinit>()",
        "org.apache.commons.math3.util.FastMath.cos(double)"
    ],
    "org.apache.commons.math3.ode.nonstiff.EulerStepInterpolator#EulerStepInterpolator()": [
        "org.apache.commons.math3.ode.nonstiff.EulerStepInterpolator.<init>()",
        "org.apache.commons.math3.ode.nonstiff.RungeKuttaStepInterpolator#RungeKuttaStepInterpolator()"
    ],
    "org.apache.commons.math3.stat.regression.OLSMultipleLinearRegression#OLSMultipleLinearRegression(double)": [
        "org.apache.commons.math3.stat.regression.AbstractMultipleLinearRegression.<init>()",
        "org.apache.commons.math3.stat.regression.OLSMultipleLinearRegression.<init>()"
    ],
    "org.apache.commons.math3.util.BigReal#multiply(int)": ["org.apache.commons.math3.util.BigReal#BigReal(char[])"],
    "org.apache.commons.math3.optimization.PointValuePair.DataTransferObject#readResolve()": ["org.apache.commons.math3.optimization.PointValuePair#PointValuePair(double[],double,boolean)"],
    "org.apache.commons.math3.analysis.interpolation.TricubicSplineInterpolator#interpolate(double[],double[],double[],double[][][])": [
        "org.apache.commons.math3.exception.DimensionMismatchException#DimensionMismatchException(int,int)",
        "org.apache.commons.math3.analysis.interpolation.BicubicSplineInterpolatingFunction#partialDerivativeY(double,double)",
        "org.apache.commons.math3.analysis.interpolation.TricubicSplineInterpolator#nextIndex(int,int)",
        "org.apache.commons.math3.analysis.interpolation.BicubicSplineInterpolatingFunction#partialDerivativeXY(double,double)",
        "org.apache.commons.math3.analysis.interpolation.BicubicSplineInterpolator#BicubicSplineInterpolator(boolean)",
        "org.apache.commons.math3.util.MathArrays.checkOrder(double[])",
        "org.apache.commons.math3.analysis.interpolation.BicubicSplineInterpolator#interpolate(double[],double[],double[][])",
        "org.apache.commons.math3.exception.NoDataException#NoDataException()",
        "org.apache.commons.math3.analysis.interpolation.TricubicSplineInterpolatingFunction#TricubicSplineInterpolatingFunction(double[],double[],double[],double[][][],double[][][],double[][][],double[][][],double[][][],double[][][],double[][][],double[][][])",
        "org.apache.commons.math3.analysis.interpolation.TricubicSplineInterpolator#previousIndex(int)",
        "org.apache.commons.math3.analysis.interpolation.SmoothingPolynomialBicubicSplineInterpolator#interpolate(double[],double[],double[][])",
        "org.apache.commons.math3.analysis.interpolation.BicubicSplineInterpolatingFunction#partialDerivativeX(double,double)"
    ],
    "org.apache.commons.math3.geometry.euclidean.threed.Rotation.distance(Rotation,Rotation)": [
        "org.apache.commons.math3.geometry.euclidean.threed.Rotation#getAngle()",
        "org.apache.commons.math3.geometry.euclidean.threed.Rotation#composeInverseInternal(Rotation)"
    ],
    "org.apache.commons.math3.linear.BlockRealMatrix#getColumnVector(int)": [
        "org.apache.commons.math3.linear.ArrayRealVector#ArrayRealVector(double[],boolean)",
        "org.apache.commons.math3.linear.BlockRealMatrix#blockHeight(int)",
        "org.apache.commons.math3.linear.BlockRealMatrix.<staticinit>()",
        "org.apache.commons.math3.linear.BlockRealMatrix#blockWidth(int)",
        "org.apache.commons.math3.linear.MatrixUtils.checkColumnIndex(AnyMatrix,int)"
    ],
    "org.apache.commons.math3.util.FastMath.ceil(double)": ["org.apache.commons.math3.util.FastMath.floor(double)"],
    "org.apache.commons.math3.analysis.solvers.AbstractDifferentiableUnivariateSolver#AbstractDifferentiableUnivariateSolver(double,double,double)": [
        "org.apache.commons.math3.analysis.solvers.BaseAbstractUnivariateSolver#BaseAbstractUnivariateSolver(double,double,double)",
        "org.apache.commons.math3.analysis.solvers.AbstractDifferentiableUnivariateSolver.<init>()"
    ],
    "org.apache.commons.math3.geometry.partitioning.AbstractRegion#getSize()": [
        "org.apache.commons.math3.geometry.spherical.oned.ArcsSet#computeGeometricalProperties()",
        "org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet#computeGeometricalProperties()",
        "org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet#computeGeometricalProperties()",
        "org.apache.commons.math3.geometry.spherical.twod.SphericalPolygonsSet#computeGeometricalProperties()",
        "org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet#computeGeometricalProperties()"
    ],
    "org.apache.commons.math3.linear.BlockRealMatrix#walkInOptimizedOrder(RealMatrixPreservingVisitor,int,int,int,int)": [
        "org.apache.commons.math3.linear.DefaultRealMatrixPreservingVisitor#start(int,int,int,int,int,int)",
        "org.apache.commons.math3.linear.AbstractRealMatrix#copySubMatrix(int,int,int,int,double[][])$DefaultRealMatrixPreservingVisitor$1#start(int,int,int,int,int,int)",
        "org.apache.commons.math3.linear.DefaultRealMatrixPreservingVisitor#visit(int,int,double)",
        "org.apache.commons.math3.linear.SingularValueDecomposition#getCovariance(double)$DefaultRealMatrixPreservingVisitor$1#visit(int,int,double)",
        "org.apache.commons.math3.linear.AbstractRealMatrix#getNorm()$RealMatrixPreservingVisitor$1#end()",
        "org.apache.commons.math3.util.FastMath.max(int,int)",
        "org.apache.commons.math3.linear.BlockRealMatrix#blockWidth(int)",
        "org.apache.commons.math3.linear.AbstractRealMatrix#getFrobeniusNorm()$RealMatrixPreservingVisitor$1#end()",
        "org.apache.commons.math3.linear.AbstractRealMatrix#getFrobeniusNorm()$RealMatrixPreservingVisitor$1#visit(int,int,double)",
        "org.apache.commons.math3.linear.DefaultRealMatrixPreservingVisitor#end()",
        "org.apache.commons.math3.linear.AbstractRealMatrix#getFrobeniusNorm()$RealMatrixPreservingVisitor$1#start(int,int,int,int,int,int)",
        "org.apache.commons.math3.util.FastMath.min(int,int)",
        "org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator.Corrector#start(int,int,int,int,int,int)",
        "org.apache.commons.math3.linear.BlockRealMatrix.<staticinit>()",
        "org.apache.commons.math3.linear.AbstractRealMatrix#getNorm()$RealMatrixPreservingVisitor$1#visit(int,int,double)",
        "org.apache.commons.math3.linear.AbstractRealMatrix#copySubMatrix(int,int,int,int,double[][])$DefaultRealMatrixPreservingVisitor$1#visit(int,int,double)",
        "org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator.Corrector#visit(int,int,double)",
        "org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator.Corrector#end()",
        "org.apache.commons.math3.linear.MatrixUtils.checkSubMatrixIndex(AnyMatrix,int,int,int,int)",
        "org.apache.commons.math3.linear.AbstractRealMatrix#getNorm()$RealMatrixPreservingVisitor$1#start(int,int,int,int,int,int)",
        "org.apache.commons.math3.linear.AbstractRealMatrix#transpose()$DefaultRealMatrixPreservingVisitor$1#visit(int,int,double)"
    ],
    "org.apache.commons.math3.random.RandomAdaptor#nextBoolean()": [
        "org.apache.commons.math3.random.SynchronizedRandomGenerator#nextBoolean()",
        "org.apache.commons.math3.random.RandomAdaptor#nextBoolean()",
        "org.apache.commons.math3.random.RandomGeneratorFactory.createRandomGenerator(Random)$RandomGenerator$1#nextBoolean()",
        "org.apache.commons.math3.random.BitsStreamGenerator#nextBoolean()",
        "org.apache.commons.math3.random.AbstractRandomGenerator#nextBoolean()"
    ],
    "org.apache.commons.math3.optim.nonlinear.scalar.MultivariateFunctionMappingAdapter.LowerBoundMapper#LowerBoundMapper(double)": ["org.apache.commons.math3.optim.nonlinear.scalar.MultivariateFunctionMappingAdapter.LowerBoundMapper.<init>()"],
    "org.apache.commons.math3.random.RandomDataGenerator#nextSecureLong(long,long)": [
        "org.apache.commons.math3.exception.util.LocalizedFormats.<staticinit>()",
        "org.apache.commons.math3.random.RandomDataGenerator.nextLong(RandomGenerator,long)",
        "org.apache.commons.math3.random.BitsStreamGenerator#nextInt(int)",
        "org.apache.commons.math3.random.RandomAdaptor#nextLong()",
        "org.apache.commons.math3.random.RandomAdaptor#nextInt(int)",
        "org.apache.commons.math3.random.RandomGeneratorFactory.createRandomGenerator(Random)$RandomGenerator$1#nextLong()",
        "org.apache.commons.math3.random.AbstractRandomGenerator#nextLong()",
        "org.apache.commons.math3.random.RandomGeneratorFactory.createRandomGenerator(Random)$RandomGenerator$1#nextInt(int)",
        "org.apache.commons.math3.random.BitsStreamGenerator#nextLong()",
        "org.apache.commons.math3.random.AbstractRandomGenerator#nextInt(int)",
        "org.apache.commons.math3.random.SynchronizedRandomGenerator#nextInt(int)",
        "org.apache.commons.math3.random.SynchronizedRandomGenerator#nextLong()",
        "org.apache.commons.math3.random.RandomDataGenerator#getSecRan()"
    ],
    "org.apache.commons.math3.util.OpenIntToDoubleHashMap#doRemove(int)": ["org.apache.commons.math3.util.OpenIntToDoubleHashMap.<staticinit>()"],
    "org.apache.commons.math3.analysis.interpolation.SplineInterpolator#interpolate(double[],double[])": [
        "org.apache.commons.math3.exception.DimensionMismatchException#DimensionMismatchException(int,int)",
        "org.apache.commons.math3.analysis.polynomials.PolynomialSplineFunction#PolynomialSplineFunction(double[],PolynomialFunction[])",
        "org.apache.commons.math3.util.MathArrays.checkOrder(double[])",
        "org.apache.commons.math3.analysis.polynomials.PolynomialFunction#PolynomialFunction(double[])",
        "org.apache.commons.math3.exception.util.LocalizedFormats.<staticinit>()"
    ],
    "org.apache.commons.math3.ode.nonstiff.HighamHall54FieldIntegrator#HighamHall54FieldIntegrator(Field<T extends RealFieldElement>,double,double,double,double)": [
        "org.apache.commons.math3.util.BigRealField#getZero()",
        "org.apache.commons.math3.analysis.differentiation.SparseGradient#getField()$Field$1#getZero()",
        "org.apache.commons.math3.util.Decimal64Field#getZero()",
        "org.apache.commons.math3.ode.nonstiff.EmbeddedRungeKuttaFieldIntegrator#fraction(int,int)",
        "org.apache.commons.math3.dfp.DfpField#getZero()",
        "org.apache.commons.math3.ode.nonstiff.HighamHall54FieldIntegrator.<staticinit>()",
        "org.apache.commons.math3.ode.nonstiff.EmbeddedRungeKuttaFieldIntegrator#EmbeddedRungeKuttaFieldIntegrator(Field<T extends RealFieldElement>,String,int,double,double,double,double)",
        "org.apache.commons.math3.analysis.differentiation.DerivativeStructure#getField()$Field$1#getZero()",
        "org.apache.commons.math3.fraction.FractionField#getZero()",
        "org.apache.commons.math3.ode.nonstiff.HighamHall54FieldIntegrator.<init>()",
        "org.apache.commons.math3.complex.ComplexField#getZero()",
        "org.apache.commons.math3.fraction.BigFractionField#getZero()",
        "org.apache.commons.math3.util.MathArrays.buildArray(Field<T>,int)"
    ],
    "org.apache.commons.math3.optim.linear.SimplexTableau#getWidth()": ["org.apache.commons.math3.linear.Array2DRowRealMatrix#getColumnDimension()"],
    "org.apache.commons.math3.ode.nonstiff.ClassicalRungeKuttaFieldStepInterpolator#create(Field<T extends RealFieldElement>,boolean,T extends RealFieldElement[][],FieldODEStateAndDerivative<T extends RealFieldElement>,FieldODEStateAndDerivative<T extends RealFieldElement>,FieldODEStateAndDerivative<T extends RealFieldElement>,FieldODEStateAndDerivative<T extends RealFieldElement>,FieldEquationsMapper<T extends RealFieldElement>)": ["org.apache.commons.math3.ode.nonstiff.ClassicalRungeKuttaFieldStepInterpolator#ClassicalRungeKuttaFieldStepInterpolator(Field<T extends RealFieldElement>,boolean,T extends RealFieldElement[][],FieldODEStateAndDerivative<T extends RealFieldElement>,FieldODEStateAndDerivative<T extends RealFieldElement>,FieldODEStateAndDerivative<T extends RealFieldElement>,FieldODEStateAndDerivative<T extends RealFieldElement>,FieldEquationsMapper<T extends RealFieldElement>)"],
    "org.apache.commons.math3.linear.RealVector.unmodifiableRealVector(RealVector)$RealVector$1#getSubVector(int,int)": [
        "org.apache.commons.math3.linear.RealVector.unmodifiableRealVector(RealVector)$RealVector$1#getSubVector(int,int)",
        "org.apache.commons.math3.linear.ArrayRealVector#getSubVector(int,int)",
        "org.apache.commons.math3.linear.OpenMapRealVector#getSubVector(int,int)"
    ],
    "org.apache.commons.math3.linear.AbstractRealMatrix#preMultiply(double[])": [
        "org.apache.commons.math3.linear.DiagonalMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.Array2DRowRealMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.DiagonalMatrix#getEntry(int,int)",
        "org.apache.commons.math3.linear.OpenMapRealMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.OpenMapRealMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.DiagonalMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.OpenMapRealMatrix#getEntry(int,int)",
        "org.apache.commons.math3.linear.BlockRealMatrix#getEntry(int,int)",
        "org.apache.commons.math3.exception.DimensionMismatchException#DimensionMismatchException(int,int)",
        "org.apache.commons.math3.linear.BlockRealMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.Array2DRowRealMatrix#getEntry(int,int)",
        "org.apache.commons.math3.linear.Array2DRowRealMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.BlockRealMatrix#getColumnDimension()"
    ],
    "org.apache.commons.math3.geometry.euclidean.twod.Segment#distance(Vector2D)": [
        "org.apache.commons.math3.geometry.euclidean.twod.Vector2D#getY()",
        "org.apache.commons.math3.geometry.euclidean.twod.Vector2D#getX()",
        "org.apache.commons.math3.geometry.euclidean.twod.Vector2D#distance(Point<Euclidean2D>)",
        "org.apache.commons.math3.geometry.euclidean.twod.Segment#getStart()",
        "org.apache.commons.math3.geometry.euclidean.twod.Segment#getEnd()",
        "org.apache.commons.math3.util.FastMath.min(double,double)",
        "org.apache.commons.math3.geometry.euclidean.twod.Vector2D#Vector2D(double,double)"
    ],
    "org.apache.commons.math3.dfp.Dfp#strictlyNegative()": [
        "org.apache.commons.math3.dfp.DfpDec#newInstance(Dfp)",
        "org.apache.commons.math3.dfp.Dfp.<staticinit>()",
        "org.apache.commons.math3.dfp.Dfp#dotrap(int,String,Dfp,Dfp)",
        "org.apache.commons.math3.dfp.Dfp#newInstance(Dfp)",
        "org.apache.commons.math3.dfp.DfpField.<staticinit>()",
        "org.apache.commons.math3.dfp.DfpField#setIEEEFlagsBits(int)",
        "org.apache.commons.math3.dfp.Dfp#isNaN()",
        "org.apache.commons.math3.dfp.Dfp#getZero()",
        "org.apache.commons.math3.dfp.Dfp#isInfinite()"
    ],
    "org.apache.commons.math3.ode.AbstractIntegrator#AbstractIntegrator()": ["org.apache.commons.math3.ode.AbstractIntegrator#AbstractIntegrator(String)"],
    "org.apache.commons.math3.stat.inference.KolmogorovSmirnovTest#integralMonteCarloP(long,int,int,int)": [
        "org.apache.commons.math3.util.FastMath.min(int,int)",
        "org.apache.commons.math3.stat.inference.KolmogorovSmirnovTest.fillBooleanArrayRandomlyWithFixedNumberTrueValues(boolean[],int,RandomGenerator)",
        "org.apache.commons.math3.util.FastMath.max(int,int)"
    ],
    "org.apache.commons.math3.stat.descriptive.rank.Percentile#copy()": ["org.apache.commons.math3.stat.descriptive.rank.Percentile#Percentile(Percentile)"],
    "org.apache.commons.math3.genetics.ElitisticListPopulation#ElitisticListPopulation(List<Chromosome>,int,double)": [
        "org.apache.commons.math3.genetics.ElitisticListPopulation#setElitismRate(double)",
        "org.apache.commons.math3.genetics.ListPopulation#ListPopulation(List<Chromosome>,int)",
        "org.apache.commons.math3.genetics.ElitisticListPopulation.<init>()"
    ],
    "org.apache.commons.math3.geometry.euclidean.threed.Vector3D#getSpace()": ["org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D.getInstance()"],
    "org.apache.commons.math3.analysis.interpolation.InterpolatingMicrosphere#interpolate()": [
        "org.apache.commons.math3.analysis.interpolation.InterpolatingMicrosphere.FacetData#sample()",
        "org.apache.commons.math3.analysis.interpolation.InterpolatingMicrosphere.FacetData#illumination()"
    ],
    "org.apache.commons.math3.analysis.FunctionUtils.compose(DifferentiableUnivariateFunction[]...)$DifferentiableUnivariateFunction$1#value(double)": [
        "org.apache.commons.math3.analysis.FunctionUtils.multiply(DifferentiableUnivariateFunction[]...)$UnivariateFunction$1$UnivariateFunction$1#derivative()$UnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.polynomials.PolynomialSplineFunction#value(double)",
        "org.apache.commons.math3.analysis.function.Gaussian#value(double)",
        "org.apache.commons.math3.analysis.function.Tanh#value(double)",
        "org.apache.commons.math3.analysis.function.Inverse#value(double)",
        "org.apache.commons.math3.analysis.function.HarmonicOscillator#value(double)",
        "org.apache.commons.math3.analysis.FunctionUtils.fix1stArgument(BivariateFunction,double)$UnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.function.Asin#value(double)",
        "org.apache.commons.math3.analysis.function.Asinh#value(double)",
        "org.apache.commons.math3.analysis.FunctionUtils.multiply(UnivariateFunction[]...)$UnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.function.Atan#value(double)",
        "org.apache.commons.math3.analysis.FunctionUtils.toDifferentiableUnivariateFunction(UnivariateDifferentiableFunction)$DifferentiableUnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.function.Cbrt#value(double)",
        "org.apache.commons.math3.analysis.polynomials.PolynomialFunctionLagrangeForm#value(double)",
        "org.apache.commons.math3.analysis.function.Exp#value(double)",
        "org.apache.commons.math3.special.BesselJ#value(double)",
        "org.apache.commons.math3.analysis.polynomials.PolynomialFunctionNewtonForm#value(double)",
        "org.apache.commons.math3.analysis.FunctionUtils.add(UnivariateFunction[]...)$UnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.function.Sin#value(double)",
        "org.apache.commons.math3.analysis.function.Cos#value(double)",
        "org.apache.commons.math3.analysis.interpolation.UnivariatePeriodicInterpolator#interpolate(double[],double[])$UnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.function.Log10#value(double)",
        "org.apache.commons.math3.analysis.function.Sqrt#value(double)",
        "org.apache.commons.math3.analysis.function.Log#value(double)",
        "org.apache.commons.math3.analysis.function.Sinc#value(double)",
        "org.apache.commons.math3.ode.events.EventState#evaluateStep(StepInterpolator)$UnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.function.Minus#value(double)",
        "org.apache.commons.math3.analysis.integration.IterativeLegendreGaussIntegrator#stage(int)$UnivariateFunction$1#value(double)",
        "org.apache.commons.math3.optimization.general.NonLinearConjugateGradientOptimizer.LineSearchFunction#value(double)",
        "org.apache.commons.math3.analysis.function.Floor#value(double)",
        "org.apache.commons.math3.analysis.FunctionUtils.multiply(DifferentiableUnivariateFunction[]...)$DifferentiableUnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.FunctionUtils.combine(BivariateFunction,UnivariateFunction,UnivariateFunction)$UnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.FunctionUtils.add(DifferentiableUnivariateFunction[]...)$UnivariateFunction$1$UnivariateFunction$1#derivative()$UnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.function.Sinh#value(double)",
        "org.apache.commons.math3.analysis.FunctionUtils.multiply(UnivariateDifferentiableFunction[]...)$UnivariateDifferentiableFunction$1#value(double)",
        "org.apache.commons.math3.analysis.function.Tan#value(double)",
        "org.apache.commons.math3.distribution.AbstractRealDistribution#inverseCumulativeProbability(double)$UnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.FunctionUtils.add(DifferentiableUnivariateFunction[]...)$DifferentiableUnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.function.Ceil#value(double)",
        "org.apache.commons.math3.analysis.function.Logistic#value(double)",
        "org.apache.commons.math3.analysis.function.Signum#value(double)",
        "org.apache.commons.math3.analysis.function.Constant#value(double)",
        "org.apache.commons.math3.analysis.function.Atanh#value(double)",
        "org.apache.commons.math3.analysis.FunctionUtils.compose(DifferentiableUnivariateFunction[]...)$UnivariateFunction$1$UnivariateFunction$1#derivative()$UnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.FunctionUtils.add(UnivariateDifferentiableFunction[]...)$UnivariateDifferentiableFunction$1#value(double)",
        "org.apache.commons.math3.analysis.function.Abs#value(double)",
        "org.apache.commons.math3.analysis.differentiation.FiniteDifferencesDifferentiator#differentiate(UnivariateFunction)$UnivariateDifferentiableFunction$1#value(double)",
        "org.apache.commons.math3.analysis.function.Identity#value(double)",
        "org.apache.commons.math3.analysis.function.Expm1#value(double)",
        "org.apache.commons.math3.analysis.function.Logit#value(double)",
        "org.apache.commons.math3.analysis.function.Log1p#value(double)",
        "org.apache.commons.math3.analysis.FunctionUtils.fix2ndArgument(BivariateFunction,double)$UnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.FunctionUtils.toUnivariateDifferential(DifferentiableUnivariateFunction)$UnivariateDifferentiableFunction$1#value(double)",
        "org.apache.commons.math3.analysis.FunctionUtils.toDifferentiableUnivariateFunction(UnivariateDifferentiableFunction)$UnivariateFunction$1$UnivariateFunction$1#derivative()$UnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.polynomials.PolynomialFunction#value(double)",
        "org.apache.commons.math3.analysis.function.Rint#value(double)",
        "org.apache.commons.math3.analysis.FunctionUtils.compose(UnivariateFunction[]...)$UnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.function.Cosh#value(double)",
        "org.apache.commons.math3.optimization.direct.PowellOptimizer.LineSearch#search(double[],double[])$UnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.FunctionUtils.compose(DifferentiableUnivariateFunction[]...)$DifferentiableUnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.function.Acosh#value(double)",
        "org.apache.commons.math3.analysis.function.StepFunction#value(double)",
        "org.apache.commons.math3.analysis.FunctionUtils.compose(UnivariateDifferentiableFunction[]...)$UnivariateDifferentiableFunction$1#value(double)",
        "org.apache.commons.math3.analysis.function.Acos#value(double)",
        "org.apache.commons.math3.analysis.function.Power#value(double)",
        "org.apache.commons.math3.optim.nonlinear.scalar.LineSearch#search(double[],double[])$UnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.function.Sigmoid#value(double)",
        "org.apache.commons.math3.analysis.function.Ulp#value(double)"
    ],
    "org.apache.commons.math3.analysis.interpolation.TricubicFunction#TricubicFunction(double[])": [
        "org.apache.commons.math3.analysis.interpolation.TricubicFunction.<init>()",
        "org.apache.commons.math3.analysis.interpolation.TricubicFunction.<staticinit>()"
    ],
    "org.apache.commons.math3.analysis.solvers.LaguerreSolver#LaguerreSolver(double,double)": [
        "org.apache.commons.math3.analysis.solvers.AbstractPolynomialSolver#AbstractPolynomialSolver(double,double)",
        "org.apache.commons.math3.analysis.solvers.LaguerreSolver.<init>()"
    ],
    "org.apache.commons.math3.complex.Quaternion#getNorm()": ["org.apache.commons.math3.util.FastMath.sqrt(double)"],
    "org.apache.commons.math3.optimization.direct.MultiDirectionalSimplex#MultiDirectionalSimplex(double[][])": [
        "org.apache.commons.math3.optimization.direct.MultiDirectionalSimplex#MultiDirectionalSimplex(double[][],double,double)",
        "org.apache.commons.math3.optimization.direct.MultiDirectionalSimplex.<staticinit>()"
    ],
    "org.apache.commons.math3.util.CombinatoricsUtils.binomialCoefficientLog(int,int)": [
        "org.apache.commons.math3.util.CombinatoricsUtils.binomialCoefficient(int,int)",
        "org.apache.commons.math3.util.CombinatoricsUtils.binomialCoefficientLog(int,int)",
        "org.apache.commons.math3.util.CombinatoricsUtils.checkBinomial(int,int)",
        "org.apache.commons.math3.util.FastMath.log(double)",
        "org.apache.commons.math3.util.CombinatoricsUtils.binomialCoefficientDouble(int,int)"
    ],
    "org.apache.commons.math3.stat.descriptive.moment.StandardDeviation#getResult()": [
        "org.apache.commons.math3.stat.descriptive.moment.Variance#getResult()",
        "org.apache.commons.math3.util.FastMath.sqrt(double)"
    ],
    "org.apache.commons.math3.ode.ContinuousOutputFieldModel#init(FieldODEStateAndDerivative<T extends RealFieldElement>,T extends RealFieldElement)": ["org.apache.commons.math3.ode.FieldODEState#getTime()"],
    "org.apache.commons.math3.stat.descriptive.rank.Min#copy()": [
        "org.apache.commons.math3.stat.descriptive.rank.Min#Min()",
        "org.apache.commons.math3.stat.descriptive.rank.Min.copy(Min,Min)"
    ],
    "org.apache.commons.math3.fraction.BigFraction#reciprocal()": ["org.apache.commons.math3.fraction.BigFraction#BigFraction(BigInteger,BigInteger)"],
    "org.apache.commons.math3.analysis.solvers.BracketingNthOrderBrentSolver#BracketingNthOrderBrentSolver(double,double,double,int)": [
        "org.apache.commons.math3.analysis.solvers.AbstractUnivariateSolver#AbstractUnivariateSolver(double,double,double)",
        "org.apache.commons.math3.analysis.solvers.BracketingNthOrderBrentSolver.<init>()",
        "org.apache.commons.math3.analysis.solvers.AllowedSolution.<staticinit>()"
    ],
    "org.apache.commons.math3.linear.SparseFieldVector#getData()": ["org.apache.commons.math3.linear.SparseFieldVector#toArray()"],
    "org.apache.commons.math3.optimization.direct.MultivariateFunctionMappingAdapter.NoBoundsMapper#NoBoundsMapper()": ["org.apache.commons.math3.optimization.direct.MultivariateFunctionMappingAdapter.NoBoundsMapper.<init>()"],
    "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer.Sigma#Sigma(double[])": ["org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer.Sigma.<init>()"],
    "org.apache.commons.math3.stat.clustering.KMeansPlusPlusClusterer.chooseInitialCenters(Collection<T extends Clusterable>,int,Random)": [
        "org.apache.commons.math3.random.RandomAdaptor#nextInt(int)",
        "org.apache.commons.math3.random.RandomAdaptor#nextDouble()",
        "org.apache.commons.math3.stat.clustering.Cluster#Cluster(T extends Clusterable)"
    ],
    "org.apache.commons.math3.analysis.function.Identity#derivative()": ["org.apache.commons.math3.analysis.function.Constant#Constant(double)"],
    "org.apache.commons.math3.geometry.spherical.oned.ArcsSet.InconsistentStateAt2PiWrapping#InconsistentStateAt2PiWrapping()": [
        "org.apache.commons.math3.geometry.spherical.oned.ArcsSet.InconsistentStateAt2PiWrapping.<init>()",
        "org.apache.commons.math3.exception.util.LocalizedFormats.<staticinit>()"
    ],
    "org.apache.commons.math3.analysis.differentiation.DerivativeStructure#ceil()": [
        "org.apache.commons.math3.analysis.differentiation.DSCompiler#getFreeParameters()",
        "org.apache.commons.math3.analysis.differentiation.DSCompiler#getOrder()",
        "org.apache.commons.math3.util.FastMath.ceil(double)",
        "org.apache.commons.math3.analysis.differentiation.DerivativeStructure#DerivativeStructure(int,int,double[]...)"
    ],
    "org.apache.commons.math3.analysis.differentiation.DerivativeStructure#pow(double)": [
        "org.apache.commons.math3.analysis.differentiation.DerivativeStructure#DerivativeStructure(DSCompiler)",
        "org.apache.commons.math3.analysis.differentiation.DSCompiler#pow(double[],int,double,double[],int)"
    ],
    "org.apache.commons.math3.optim.linear.LinearOptimizer#LinearOptimizer()": [
        "org.apache.commons.math3.optim.nonlinear.scalar.MultivariateOptimizer#MultivariateOptimizer(ConvergenceChecker<PointValuePair>)",
        "org.apache.commons.math3.optim.linear.LinearOptimizer.<init>()"
    ],
    "org.apache.commons.math3.optim.nonlinear.vector.MultivariateVectorOptimizer#optimize(OptimizationData[]...)": ["org.apache.commons.math3.optim.BaseMultivariateOptimizer#optimize(OptimizationData[]...)"],
    "org.apache.commons.math3.optimization.linear.SimplexTableau#subtractRow(int,int,double)": [
        "org.apache.commons.math3.linear.Array2DRowRealMatrix#getEntry(int,int)",
        "org.apache.commons.math3.linear.Array2DRowRealMatrix#setEntry(int,int,double)",
        "org.apache.commons.math3.util.FastMath.abs(double)",
        "org.apache.commons.math3.linear.DiagonalMatrix#getEntry(int,int)",
        "org.apache.commons.math3.linear.BlockRealMatrix#setEntry(int,int,double)",
        "org.apache.commons.math3.linear.OpenMapRealMatrix#setEntry(int,int,double)",
        "org.apache.commons.math3.optimization.linear.SimplexTableau.<staticinit>()",
        "org.apache.commons.math3.linear.OpenMapRealMatrix#getEntry(int,int)",
        "org.apache.commons.math3.optimization.linear.SimplexTableau#getWidth()",
        "org.apache.commons.math3.linear.DiagonalMatrix#setEntry(int,int,double)",
        "org.apache.commons.math3.linear.BlockRealMatrix#getEntry(int,int)"
    ],
    "org.apache.commons.math3.special.Beta.regularizedBeta(double,double,double,double,int)$ContinuedFraction$1.<init>()": ["org.apache.commons.math3.util.ContinuedFraction#ContinuedFraction()"],
    "org.apache.commons.math3.optimization.PointVectorValuePair#getPointRef()": ["org.apache.commons.math3.util.Pair#getKey()"],
    "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer.FitnessFunction#FitnessFunction()": ["org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer.FitnessFunction.<init>()"],
    "org.apache.commons.math3.ml.neuralnet.sofm.util.QuasiSigmoidDecayFunction#QuasiSigmoidDecayFunction(double,double,long)": [
        "org.apache.commons.math3.analysis.function.Logistic#value(double)",
        "org.apache.commons.math3.analysis.function.Logistic#Logistic(double,double,double,double,double,double)",
        "org.apache.commons.math3.ml.neuralnet.sofm.util.QuasiSigmoidDecayFunction.<init>()"
    ],
    "org.apache.commons.math3.complex.Complex#getArgument()": [
        "org.apache.commons.math3.complex.Complex#getReal()",
        "org.apache.commons.math3.util.FastMath.atan2(double,double)",
        "org.apache.commons.math3.complex.Complex#getImaginary()"
    ],
    "org.apache.commons.math3.fitting.GaussianCurveFitter.ParameterGuesser#sortObservations(Collection<WeightedObservedPoint>)$Comparator$1#compare(WeightedObservedPoint,WeightedObservedPoint)": [
        "org.apache.commons.math3.fitting.WeightedObservedPoint#getX()",
        "org.apache.commons.math3.fitting.WeightedObservedPoint#getY()",
        "org.apache.commons.math3.fitting.WeightedObservedPoint#getWeight()"
    ],
    "org.apache.commons.math3.stat.inference.TestUtils.chiSquareDataSetsComparison(long[],long[])": [
        "org.apache.commons.math3.stat.inference.ChiSquareTest#chiSquareDataSetsComparison(long[],long[])",
        "org.apache.commons.math3.stat.inference.TestUtils.<staticinit>()"
    ],
    "org.apache.commons.math3.geometry.euclidean.threed.SphericalCoordinates#computeJacobian()": [
        "org.apache.commons.math3.geometry.euclidean.threed.Vector3D#getX()",
        "org.apache.commons.math3.geometry.euclidean.threed.Vector3D#getZ()",
        "org.apache.commons.math3.geometry.euclidean.threed.Vector3D#getY()",
        "org.apache.commons.math3.util.FastMath.sqrt(double)"
    ],
    "org.apache.commons.math3.stat.descriptive.DescriptiveStatistics#getMean()": [
        "org.apache.commons.math3.stat.descriptive.DescriptiveStatistics#apply(UnivariateStatistic)",
        "org.apache.commons.math3.stat.descriptive.SynchronizedDescriptiveStatistics#apply(UnivariateStatistic)"
    ],
    "org.apache.commons.math3.distribution.LaplaceDistribution#LaplaceDistribution(double,double)": [
        "org.apache.commons.math3.random.Well19937c#Well19937c()",
        "org.apache.commons.math3.distribution.LaplaceDistribution#LaplaceDistribution(RandomGenerator,double,double)"
    ],
    "org.apache.commons.math3.fitting.leastsquares.LeastSquaresFactory.countEvaluations(LeastSquaresProblem,Incrementor)$LeastSquaresAdapter$1#evaluate(RealVector)": [
        "org.apache.commons.math3.util.Incrementor#incrementCount()",
        "org.apache.commons.math3.util.Incrementor.wrap(Incrementor)$Incrementor$1#incrementCount()",
        "org.apache.commons.math3.fitting.leastsquares.LeastSquaresAdapter#evaluate(RealVector)"
    ],
    "org.apache.commons.math3.linear.RealVector.unmodifiableRealVector(RealVector)$RealVector$1#map(UnivariateFunction)": [
        "org.apache.commons.math3.linear.ArrayRealVector#map(UnivariateFunction)",
        "org.apache.commons.math3.linear.RealVector.unmodifiableRealVector(RealVector)$RealVector$1#map(UnivariateFunction)",
        "org.apache.commons.math3.linear.RealVector#map(UnivariateFunction)"
    ],
    "org.apache.commons.math3.analysis.interpolation.HermiteInterpolator#value(DerivativeStructure)": [
        "org.apache.commons.math3.analysis.differentiation.DerivativeStructure#getField()",
        "org.apache.commons.math3.analysis.differentiation.DerivativeStructure#add(DerivativeStructure)",
        "org.apache.commons.math3.fraction.BigFractionField#getOne()",
        "org.apache.commons.math3.fraction.FractionField#getOne()",
        "org.apache.commons.math3.analysis.differentiation.SparseGradient#getField()$Field$1#getOne()",
        "org.apache.commons.math3.util.BigRealField#getZero()",
        "org.apache.commons.math3.analysis.differentiation.SparseGradient#getField()$Field$1#getZero()",
        "org.apache.commons.math3.util.Decimal64Field#getZero()",
        "org.apache.commons.math3.analysis.differentiation.DerivativeStructure#multiply(DerivativeStructure)",
        "org.apache.commons.math3.dfp.DfpField#getZero()",
        "org.apache.commons.math3.analysis.interpolation.HermiteInterpolator#checkInterpolation()",
        "org.apache.commons.math3.complex.ComplexField#getOne()",
        "org.apache.commons.math3.util.BigRealField#getOne()",
        "org.apache.commons.math3.analysis.differentiation.DerivativeStructure#getField()$Field$1#getZero()",
        "org.apache.commons.math3.fraction.FractionField#getZero()",
        "org.apache.commons.math3.analysis.differentiation.DerivativeStructure#multiply(double)",
        "org.apache.commons.math3.analysis.differentiation.DerivativeStructure#subtract(double)",
        "org.apache.commons.math3.complex.ComplexField#getZero()",
        "org.apache.commons.math3.dfp.DfpField#getOne()",
        "org.apache.commons.math3.fraction.BigFractionField#getZero()",
        "org.apache.commons.math3.analysis.differentiation.DerivativeStructure#getField()$Field$1#getOne()",
        "org.apache.commons.math3.util.Decimal64Field#getOne()"
    ],
    "org.apache.commons.math3.geometry.euclidean.threed.Rotation#getAngles(RotationOrder,RotationConvention)": [
        "org.apache.commons.math3.geometry.euclidean.threed.Rotation#applyInverseTo(Vector3D)",
        "org.apache.commons.math3.geometry.euclidean.threed.Vector3D.<staticinit>()",
        "org.apache.commons.math3.util.FastMath.asin(double)",
        "org.apache.commons.math3.geometry.euclidean.threed.Vector3D#getZ()",
        "org.apache.commons.math3.geometry.euclidean.threed.Vector3D#getY()",
        "org.apache.commons.math3.geometry.euclidean.threed.Rotation#applyTo(Vector3D)",
        "org.apache.commons.math3.util.FastMath.acos(double)",
        "org.apache.commons.math3.geometry.euclidean.threed.RotationOrder.<staticinit>()",
        "org.apache.commons.math3.geometry.euclidean.threed.Vector3D#getX()",
        "org.apache.commons.math3.geometry.euclidean.threed.CardanEulerSingularityException#CardanEulerSingularityException(boolean)",
        "org.apache.commons.math3.geometry.euclidean.threed.RotationConvention.<staticinit>()",
        "org.apache.commons.math3.util.FastMath.atan2(double,double)"
    ],
    "org.apache.commons.math3.analysis.function.Abs#value(double)": ["org.apache.commons.math3.util.FastMath.abs(double)"],
    "org.apache.commons.math3.userguide.sofm.ChineseRingsClassifier.<init>()": ["org.apache.commons.math3.ml.distance.EuclideanDistance.<init>()"],
    "org.apache.commons.math3.optimization.direct.CMAESOptimizer.DoubleIndex#DoubleIndex(double,int)": ["org.apache.commons.math3.optimization.direct.CMAESOptimizer.DoubleIndex.<init>()"],
    "org.apache.commons.math3.linear.NonSquareMatrixException#NonSquareMatrixException(int,int)": [
        "org.apache.commons.math3.exception.DimensionMismatchException#DimensionMismatchException(Localizable,int,int)",
        "org.apache.commons.math3.linear.NonSquareMatrixException.<init>()",
        "org.apache.commons.math3.exception.util.LocalizedFormats.<staticinit>()"
    ],
    "org.apache.commons.math3.dfp.Dfp#positiveOrNull()": [
        "org.apache.commons.math3.dfp.DfpDec#newInstance(Dfp)",
        "org.apache.commons.math3.dfp.Dfp.<staticinit>()",
        "org.apache.commons.math3.dfp.Dfp#dotrap(int,String,Dfp,Dfp)",
        "org.apache.commons.math3.dfp.Dfp#newInstance(Dfp)",
        "org.apache.commons.math3.dfp.DfpField.<staticinit>()",
        "org.apache.commons.math3.dfp.DfpField#setIEEEFlagsBits(int)",
        "org.apache.commons.math3.dfp.Dfp#isNaN()",
        "org.apache.commons.math3.dfp.Dfp#getZero()",
        "org.apache.commons.math3.dfp.Dfp#isInfinite()"
    ],
    "org.apache.commons.math3.optim.nonlinear.scalar.MultivariateFunctionMappingAdapter.LowerUpperBoundMapper#unboundedToBounded(double)": [
        "org.apache.commons.math3.analysis.FunctionUtils.multiply(DifferentiableUnivariateFunction[]...)$UnivariateFunction$1$UnivariateFunction$1#derivative()$UnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.polynomials.PolynomialSplineFunction#value(double)",
        "org.apache.commons.math3.analysis.function.Gaussian#value(double)",
        "org.apache.commons.math3.analysis.function.Tanh#value(double)",
        "org.apache.commons.math3.analysis.function.Inverse#value(double)",
        "org.apache.commons.math3.analysis.function.HarmonicOscillator#value(double)",
        "org.apache.commons.math3.analysis.FunctionUtils.fix1stArgument(BivariateFunction,double)$UnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.function.Asin#value(double)",
        "org.apache.commons.math3.analysis.function.Asinh#value(double)",
        "org.apache.commons.math3.analysis.FunctionUtils.multiply(UnivariateFunction[]...)$UnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.function.Atan#value(double)",
        "org.apache.commons.math3.analysis.FunctionUtils.toDifferentiableUnivariateFunction(UnivariateDifferentiableFunction)$DifferentiableUnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.function.Cbrt#value(double)",
        "org.apache.commons.math3.analysis.polynomials.PolynomialFunctionLagrangeForm#value(double)",
        "org.apache.commons.math3.analysis.function.Exp#value(double)",
        "org.apache.commons.math3.special.BesselJ#value(double)",
        "org.apache.commons.math3.analysis.polynomials.PolynomialFunctionNewtonForm#value(double)",
        "org.apache.commons.math3.analysis.FunctionUtils.add(UnivariateFunction[]...)$UnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.function.Sin#value(double)",
        "org.apache.commons.math3.analysis.function.Cos#value(double)",
        "org.apache.commons.math3.analysis.interpolation.UnivariatePeriodicInterpolator#interpolate(double[],double[])$UnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.function.Log10#value(double)",
        "org.apache.commons.math3.analysis.function.Sqrt#value(double)",
        "org.apache.commons.math3.analysis.function.Log#value(double)",
        "org.apache.commons.math3.analysis.function.Sinc#value(double)",
        "org.apache.commons.math3.ode.events.EventState#evaluateStep(StepInterpolator)$UnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.function.Minus#value(double)",
        "org.apache.commons.math3.analysis.integration.IterativeLegendreGaussIntegrator#stage(int)$UnivariateFunction$1#value(double)",
        "org.apache.commons.math3.optimization.general.NonLinearConjugateGradientOptimizer.LineSearchFunction#value(double)",
        "org.apache.commons.math3.analysis.function.Floor#value(double)",
        "org.apache.commons.math3.analysis.FunctionUtils.multiply(DifferentiableUnivariateFunction[]...)$DifferentiableUnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.FunctionUtils.combine(BivariateFunction,UnivariateFunction,UnivariateFunction)$UnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.FunctionUtils.add(DifferentiableUnivariateFunction[]...)$UnivariateFunction$1$UnivariateFunction$1#derivative()$UnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.function.Sinh#value(double)",
        "org.apache.commons.math3.analysis.FunctionUtils.multiply(UnivariateDifferentiableFunction[]...)$UnivariateDifferentiableFunction$1#value(double)",
        "org.apache.commons.math3.analysis.function.Tan#value(double)",
        "org.apache.commons.math3.distribution.AbstractRealDistribution#inverseCumulativeProbability(double)$UnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.FunctionUtils.add(DifferentiableUnivariateFunction[]...)$DifferentiableUnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.function.Ceil#value(double)",
        "org.apache.commons.math3.analysis.function.Logistic#value(double)",
        "org.apache.commons.math3.analysis.function.Signum#value(double)",
        "org.apache.commons.math3.analysis.function.Constant#value(double)",
        "org.apache.commons.math3.analysis.function.Atanh#value(double)",
        "org.apache.commons.math3.analysis.FunctionUtils.compose(DifferentiableUnivariateFunction[]...)$UnivariateFunction$1$UnivariateFunction$1#derivative()$UnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.FunctionUtils.add(UnivariateDifferentiableFunction[]...)$UnivariateDifferentiableFunction$1#value(double)",
        "org.apache.commons.math3.analysis.function.Abs#value(double)",
        "org.apache.commons.math3.analysis.differentiation.FiniteDifferencesDifferentiator#differentiate(UnivariateFunction)$UnivariateDifferentiableFunction$1#value(double)",
        "org.apache.commons.math3.analysis.function.Identity#value(double)",
        "org.apache.commons.math3.analysis.function.Expm1#value(double)",
        "org.apache.commons.math3.analysis.function.Logit#value(double)",
        "org.apache.commons.math3.analysis.function.Log1p#value(double)",
        "org.apache.commons.math3.analysis.FunctionUtils.fix2ndArgument(BivariateFunction,double)$UnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.FunctionUtils.toUnivariateDifferential(DifferentiableUnivariateFunction)$UnivariateDifferentiableFunction$1#value(double)",
        "org.apache.commons.math3.analysis.FunctionUtils.toDifferentiableUnivariateFunction(UnivariateDifferentiableFunction)$UnivariateFunction$1$UnivariateFunction$1#derivative()$UnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.polynomials.PolynomialFunction#value(double)",
        "org.apache.commons.math3.analysis.function.Rint#value(double)",
        "org.apache.commons.math3.analysis.FunctionUtils.compose(UnivariateFunction[]...)$UnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.function.Cosh#value(double)",
        "org.apache.commons.math3.optimization.direct.PowellOptimizer.LineSearch#search(double[],double[])$UnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.FunctionUtils.compose(DifferentiableUnivariateFunction[]...)$DifferentiableUnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.function.Acosh#value(double)",
        "org.apache.commons.math3.analysis.function.StepFunction#value(double)",
        "org.apache.commons.math3.analysis.FunctionUtils.compose(UnivariateDifferentiableFunction[]...)$UnivariateDifferentiableFunction$1#value(double)",
        "org.apache.commons.math3.analysis.function.Acos#value(double)",
        "org.apache.commons.math3.analysis.function.Power#value(double)",
        "org.apache.commons.math3.optim.nonlinear.scalar.LineSearch#search(double[],double[])$UnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.function.Sigmoid#value(double)",
        "org.apache.commons.math3.analysis.function.Ulp#value(double)"
    ],
    "org.apache.commons.math3.ode.nonstiff.MidpointFieldIntegrator#getC()": [
        "org.apache.commons.math3.ode.AbstractFieldIntegrator#getField()",
        "org.apache.commons.math3.analysis.differentiation.SparseGradient#multiply(double)",
        "org.apache.commons.math3.fraction.BigFractionField#getOne()",
        "org.apache.commons.math3.fraction.FractionField#getOne()",
        "org.apache.commons.math3.dfp.Dfp#multiply(double)",
        "org.apache.commons.math3.analysis.differentiation.SparseGradient#getField()$Field$1#getOne()",
        "org.apache.commons.math3.complex.ComplexField#getOne()",
        "org.apache.commons.math3.util.BigRealField#getOne()",
        "org.apache.commons.math3.util.Decimal64#multiply(double)",
        "org.apache.commons.math3.analysis.differentiation.DerivativeStructure#multiply(double)",
        "org.apache.commons.math3.dfp.DfpField#getOne()",
        "org.apache.commons.math3.util.MathArrays.buildArray(Field<T>,int)",
        "org.apache.commons.math3.analysis.differentiation.DerivativeStructure#getField()$Field$1#getOne()",
        "org.apache.commons.math3.util.Decimal64Field#getOne()"
    ],
    "org.apache.commons.math3.filter.KalmanFilter#getStateEstimation()": [
        "org.apache.commons.math3.linear.RealVector.unmodifiableRealVector(RealVector)$RealVector$1#toArray()",
        "org.apache.commons.math3.linear.OpenMapRealVector#toArray()",
        "org.apache.commons.math3.linear.RealVector#toArray()",
        "org.apache.commons.math3.linear.ArrayRealVector#toArray()"
    ],
    "org.apache.commons.math3.geometry.euclidean.threed.FieldRotation#applyInverseTo(Rotation)": [
        "org.apache.commons.math3.geometry.euclidean.threed.FieldRotation#composeInverse(Rotation,RotationConvention)",
        "org.apache.commons.math3.geometry.euclidean.threed.RotationConvention.<staticinit>()"
    ],
    "org.apache.commons.math3.util.MathArrays.checkNotNaN(double[])": ["org.apache.commons.math3.exception.NotANumberException#NotANumberException()"],
    "org.apache.commons.math3.stat.descriptive.SynchronizedSummaryStatistics#setSumLogImpl(StorelessUnivariateStatistic)": ["org.apache.commons.math3.stat.descriptive.SummaryStatistics#setSumLogImpl(StorelessUnivariateStatistic)"],
    "org.apache.commons.math3.linear.JacobiPreconditioner#getColumnDimension()": ["org.apache.commons.math3.linear.ArrayRealVector#getDimension()"],
    "org.apache.commons.math3.geometry.euclidean.threed.Rotation#revert()": ["org.apache.commons.math3.geometry.euclidean.threed.Rotation#Rotation(double,double,double,double,boolean)"],
    "org.apache.commons.math3.linear.Array2DRowFieldMatrix#Array2DRowFieldMatrix(Field<T extends FieldElement>,T extends FieldElement[][],boolean)": [
        "org.apache.commons.math3.exception.DimensionMismatchException#DimensionMismatchException(int,int)",
        "org.apache.commons.math3.util.MathUtils.checkNotNull(Object)",
        "org.apache.commons.math3.linear.Array2DRowFieldMatrix#copyIn(T extends FieldElement[][])",
        "org.apache.commons.math3.linear.Array2DRowFieldMatrix.<init>()",
        "org.apache.commons.math3.exception.util.LocalizedFormats.<staticinit>()",
        "org.apache.commons.math3.exception.NoDataException#NoDataException(Localizable)",
        "org.apache.commons.math3.linear.AbstractFieldMatrix#AbstractFieldMatrix(Field<T extends FieldElement>)"
    ],
    "org.apache.commons.math3.stat.regression.MillerUpdatingRegression#smartAdd(double,double)": [
        "org.apache.commons.math3.util.FastMath.abs(double)",
        "org.apache.commons.math3.util.Precision.<staticinit>()"
    ],
    "org.apache.commons.math3.linear.OpenMapRealVector#mapAdd(double)": [
        "org.apache.commons.math3.linear.OpenMapRealVector#copy()",
        "org.apache.commons.math3.linear.OpenMapRealVector#mapAddToSelf(double)"
    ],
    "org.apache.commons.math3.ode.MultistepFieldIntegrator#MultistepFieldIntegrator(Field<T extends RealFieldElement>,String,int,int,double,double,double,double)": [
        "org.apache.commons.math3.ode.MultistepFieldIntegrator.<init>()",
        "org.apache.commons.math3.util.FastMath.pow(double,double)",
        "org.apache.commons.math3.ode.MultistepFieldIntegrator#setMinReduction(double)",
        "org.apache.commons.math3.ode.MultistepFieldIntegrator#setMaxGrowth(double)",
        "org.apache.commons.math3.ode.nonstiff.DormandPrince853FieldIntegrator#DormandPrince853FieldIntegrator(Field<T extends RealFieldElement>,double,double,double,double)",
        "org.apache.commons.math3.exception.util.LocalizedFormats.<staticinit>()",
        "org.apache.commons.math3.ode.nonstiff.AdaptiveStepsizeFieldIntegrator#AdaptiveStepsizeFieldIntegrator(Field<T extends RealFieldElement>,String,double,double,double,double)",
        "org.apache.commons.math3.ode.MultistepFieldIntegrator#setSafety(double)"
    ],
    "org.apache.commons.math3.util.FastMath.atan(double,double,boolean)": [
        "org.apache.commons.math3.util.FastMath.<staticinit>()",
        "org.apache.commons.math3.util.FastMath.copySign(double,double)"
    ],
    "org.apache.commons.math3.optimization.direct.BOBYQAOptimizer#trsbox(double,ArrayRealVector,ArrayRealVector,ArrayRealVector,ArrayRealVector,ArrayRealVector)": [
        "org.apache.commons.math3.linear.OpenMapRealVector#ebeMultiply(RealVector)",
        "org.apache.commons.math3.util.FastMath.max(double,double)",
        "org.apache.commons.math3.linear.ArrayRealVector#getDimension()",
        "org.apache.commons.math3.util.FastMath.min(double,double)",
        "org.apache.commons.math3.exception.util.LocalizedFormats.<staticinit>()",
        "org.apache.commons.math3.linear.ArrayRealVector#getEntry(int)",
        "org.apache.commons.math3.optimization.direct.BOBYQAOptimizer.printState(int)",
        "org.apache.commons.math3.linear.ArrayRealVector#setEntry(int,double)",
        "org.apache.commons.math3.linear.RealVector.unmodifiableRealVector(RealVector)$RealVector$1#ebeMultiply(RealVector)",
        "org.apache.commons.math3.linear.Array2DRowRealMatrix#getEntry(int,int)",
        "org.apache.commons.math3.optimization.direct.BOBYQAOptimizer.<staticinit>()",
        "org.apache.commons.math3.util.FastMath.sqrt(double)",
        "org.apache.commons.math3.optimization.direct.BOBYQAOptimizer.printMethod()",
        "org.apache.commons.math3.linear.ArrayRealVector#ebeMultiply(RealVector)",
        "org.apache.commons.math3.linear.AbstractRealMatrix#operate(RealVector)",
        "org.apache.commons.math3.linear.OpenMapRealVector#getEntry(int)",
        "org.apache.commons.math3.linear.RealVector.unmodifiableRealVector(RealVector)$RealVector$1#getEntry(int)"
    ],
    "org.apache.commons.math3.fitting.GaussianFitter#fit()": [
        "org.apache.commons.math3.fitting.GaussianFitter.ParameterGuesser#ParameterGuesser(WeightedObservedPoint[])",
        "org.apache.commons.math3.fitting.CurveFitter#getObservations()",
        "org.apache.commons.math3.fitting.GaussianFitter.ParameterGuesser#guess()",
        "org.apache.commons.math3.fitting.GaussianFitter#fit(double[])"
    ],
    "org.apache.commons.math3.geometry.partitioning.RegionFactory.NodesCleaner#visitInternalNode(BSPTree<S extends Space>)": ["org.apache.commons.math3.geometry.partitioning.BSPTree#setAttribute(Object)"],
    "org.apache.commons.math3.linear.AbstractFieldMatrix#subtract(FieldMatrix<T extends FieldElement>)": [
        "org.apache.commons.math3.linear.SparseFieldMatrix#getEntry(int,int)",
        "org.apache.commons.math3.linear.BlockFieldMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.SparseFieldMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.SparseFieldMatrix#setEntry(int,int,T extends FieldElement)",
        "org.apache.commons.math3.linear.Array2DRowFieldMatrix#setEntry(int,int,T extends FieldElement)",
        "org.apache.commons.math3.linear.BlockFieldMatrix#setEntry(int,int,T extends FieldElement)",
        "org.apache.commons.math3.linear.BlockFieldMatrix#createMatrix(int,int)",
        "org.apache.commons.math3.linear.Array2DRowFieldMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.SparseFieldMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.BlockFieldMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.SparseFieldMatrix#createMatrix(int,int)",
        "org.apache.commons.math3.linear.Array2DRowFieldMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.Array2DRowFieldMatrix#getEntry(int,int)",
        "org.apache.commons.math3.linear.Array2DRowFieldMatrix#createMatrix(int,int)",
        "org.apache.commons.math3.linear.BlockFieldMatrix#getEntry(int,int)",
        "org.apache.commons.math3.linear.AbstractFieldMatrix#checkSubtractionCompatible(FieldMatrix<T extends FieldElement>)"
    ],
    "org.apache.commons.math3.fitting.leastsquares.OptimumImpl#getRMS()": [
        "org.apache.commons.math3.fitting.leastsquares.AbstractEvaluation#getRMS()",
        "org.apache.commons.math3.fitting.leastsquares.OptimumImpl#getRMS()"
    ],
    "org.apache.commons.math3.genetics.UniformCrossover#mate(AbstractListChromosome<T>,AbstractListChromosome<T>)": [
        "org.apache.commons.math3.exception.DimensionMismatchException#DimensionMismatchException(int,int)",
        "org.apache.commons.math3.random.SynchronizedRandomGenerator#nextDouble()",
        "org.apache.commons.math3.genetics.AbstractListChromosome#getRepresentation()",
        "org.apache.commons.math3.genetics.ChromosomePair#ChromosomePair(Chromosome,Chromosome)",
        "org.apache.commons.math3.genetics.GeneticAlgorithm.getRandomGenerator()",
        "org.apache.commons.math3.random.RandomAdaptor#nextDouble()",
        "org.apache.commons.math3.random.RandomGeneratorFactory.createRandomGenerator(Random)$RandomGenerator$1#nextDouble()",
        "org.apache.commons.math3.genetics.AbstractListChromosome#getLength()",
        "org.apache.commons.math3.random.BitsStreamGenerator#nextDouble()"
    ],
    "org.apache.commons.math3.linear.AbstractRealMatrix#setRowMatrix(int,RealMatrix)": [
        "org.apache.commons.math3.linear.DiagonalMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.Array2DRowRealMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.BlockFieldMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.Array2DRowRealMatrix#setEntry(int,int,double)",
        "org.apache.commons.math3.linear.SparseFieldMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.DiagonalMatrix#getEntry(int,int)",
        "org.apache.commons.math3.linear.OpenMapRealMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.BlockRealMatrix#setEntry(int,int,double)",
        "org.apache.commons.math3.linear.OpenMapRealMatrix#setEntry(int,int,double)",
        "org.apache.commons.math3.linear.OpenMapRealMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.DiagonalMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.OpenMapRealMatrix#getEntry(int,int)",
        "org.apache.commons.math3.linear.Array2DRowFieldMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.BlockRealMatrix#getEntry(int,int)",
        "org.apache.commons.math3.linear.SparseFieldMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.BlockFieldMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.BlockRealMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.Array2DRowRealMatrix#getEntry(int,int)",
        "org.apache.commons.math3.linear.Array2DRowRealMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.Array2DRowFieldMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.BlockRealMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.MatrixDimensionMismatchException#MatrixDimensionMismatchException(int,int,int,int)",
        "org.apache.commons.math3.linear.MatrixUtils.checkRowIndex(AnyMatrix,int)",
        "org.apache.commons.math3.linear.DiagonalMatrix#setEntry(int,int,double)"
    ],
    "org.apache.commons.math3.linear.SchurTransformer#SchurTransformer(RealMatrix)": [
        "org.apache.commons.math3.linear.HessenbergTransformer#getH()",
        "org.apache.commons.math3.linear.DiagonalMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.Array2DRowRealMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.BlockFieldMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.OpenMapRealMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.HessenbergTransformer#getP()",
        "org.apache.commons.math3.linear.DiagonalMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.DiagonalMatrix#getData()",
        "org.apache.commons.math3.linear.AbstractRealMatrix#getData()",
        "org.apache.commons.math3.linear.BlockFieldMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.AbstractRealMatrix#isSquare()",
        "org.apache.commons.math3.linear.BlockRealMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.NonSquareMatrixException#NonSquareMatrixException(int,int)",
        "org.apache.commons.math3.linear.AbstractFieldMatrix#isSquare()",
        "org.apache.commons.math3.linear.SparseFieldMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.OpenMapRealMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.SchurTransformer.<init>()",
        "org.apache.commons.math3.linear.Array2DRowFieldMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.SparseFieldMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.SchurTransformer#transform()",
        "org.apache.commons.math3.linear.Array2DRowRealMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.Array2DRowRealMatrix#getData()",
        "org.apache.commons.math3.linear.HessenbergTransformer#HessenbergTransformer(RealMatrix)",
        "org.apache.commons.math3.linear.Array2DRowFieldMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.BlockRealMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.BlockRealMatrix#getData()"
    ],
    "org.apache.commons.math3.special.Gamma.regularizedGammaP(double,double)": [
        "org.apache.commons.math3.special.Gamma.regularizedGammaP(double,double,double,int)",
        "org.apache.commons.math3.special.Gamma.<staticinit>()"
    ],
    "org.apache.commons.math3.analysis.integration.gauss.SymmetricGaussIntegrator#integrate(UnivariateFunction)": [
        "org.apache.commons.math3.analysis.FunctionUtils.multiply(DifferentiableUnivariateFunction[]...)$UnivariateFunction$1$UnivariateFunction$1#derivative()$UnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.polynomials.PolynomialSplineFunction#value(double)",
        "org.apache.commons.math3.analysis.function.Gaussian#value(double)",
        "org.apache.commons.math3.analysis.function.Tanh#value(double)",
        "org.apache.commons.math3.analysis.function.Inverse#value(double)",
        "org.apache.commons.math3.analysis.function.HarmonicOscillator#value(double)",
        "org.apache.commons.math3.analysis.FunctionUtils.fix1stArgument(BivariateFunction,double)$UnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.function.Asin#value(double)",
        "org.apache.commons.math3.analysis.function.Asinh#value(double)",
        "org.apache.commons.math3.analysis.FunctionUtils.multiply(UnivariateFunction[]...)$UnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.function.Atan#value(double)",
        "org.apache.commons.math3.analysis.FunctionUtils.toDifferentiableUnivariateFunction(UnivariateDifferentiableFunction)$DifferentiableUnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.function.Cbrt#value(double)",
        "org.apache.commons.math3.analysis.polynomials.PolynomialFunctionLagrangeForm#value(double)",
        "org.apache.commons.math3.analysis.function.Exp#value(double)",
        "org.apache.commons.math3.special.BesselJ#value(double)",
        "org.apache.commons.math3.analysis.polynomials.PolynomialFunctionNewtonForm#value(double)",
        "org.apache.commons.math3.analysis.FunctionUtils.add(UnivariateFunction[]...)$UnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.function.Sin#value(double)",
        "org.apache.commons.math3.analysis.function.Cos#value(double)",
        "org.apache.commons.math3.analysis.interpolation.UnivariatePeriodicInterpolator#interpolate(double[],double[])$UnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.function.Log10#value(double)",
        "org.apache.commons.math3.analysis.function.Sqrt#value(double)",
        "org.apache.commons.math3.analysis.function.Log#value(double)",
        "org.apache.commons.math3.analysis.function.Sinc#value(double)",
        "org.apache.commons.math3.ode.events.EventState#evaluateStep(StepInterpolator)$UnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.function.Minus#value(double)",
        "org.apache.commons.math3.analysis.integration.IterativeLegendreGaussIntegrator#stage(int)$UnivariateFunction$1#value(double)",
        "org.apache.commons.math3.optimization.general.NonLinearConjugateGradientOptimizer.LineSearchFunction#value(double)",
        "org.apache.commons.math3.analysis.function.Floor#value(double)",
        "org.apache.commons.math3.analysis.FunctionUtils.multiply(DifferentiableUnivariateFunction[]...)$DifferentiableUnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.FunctionUtils.combine(BivariateFunction,UnivariateFunction,UnivariateFunction)$UnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.FunctionUtils.add(DifferentiableUnivariateFunction[]...)$UnivariateFunction$1$UnivariateFunction$1#derivative()$UnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.function.Sinh#value(double)",
        "org.apache.commons.math3.analysis.FunctionUtils.multiply(UnivariateDifferentiableFunction[]...)$UnivariateDifferentiableFunction$1#value(double)",
        "org.apache.commons.math3.analysis.function.Tan#value(double)",
        "org.apache.commons.math3.distribution.AbstractRealDistribution#inverseCumulativeProbability(double)$UnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.FunctionUtils.add(DifferentiableUnivariateFunction[]...)$DifferentiableUnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.function.Ceil#value(double)",
        "org.apache.commons.math3.analysis.function.Logistic#value(double)",
        "org.apache.commons.math3.analysis.function.Signum#value(double)",
        "org.apache.commons.math3.analysis.function.Constant#value(double)",
        "org.apache.commons.math3.analysis.function.Atanh#value(double)",
        "org.apache.commons.math3.analysis.FunctionUtils.compose(DifferentiableUnivariateFunction[]...)$UnivariateFunction$1$UnivariateFunction$1#derivative()$UnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.FunctionUtils.add(UnivariateDifferentiableFunction[]...)$UnivariateDifferentiableFunction$1#value(double)",
        "org.apache.commons.math3.analysis.function.Abs#value(double)",
        "org.apache.commons.math3.analysis.differentiation.FiniteDifferencesDifferentiator#differentiate(UnivariateFunction)$UnivariateDifferentiableFunction$1#value(double)",
        "org.apache.commons.math3.analysis.function.Identity#value(double)",
        "org.apache.commons.math3.analysis.function.Expm1#value(double)",
        "org.apache.commons.math3.analysis.function.Logit#value(double)",
        "org.apache.commons.math3.analysis.function.Log1p#value(double)",
        "org.apache.commons.math3.analysis.FunctionUtils.fix2ndArgument(BivariateFunction,double)$UnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.FunctionUtils.toUnivariateDifferential(DifferentiableUnivariateFunction)$UnivariateDifferentiableFunction$1#value(double)",
        "org.apache.commons.math3.analysis.FunctionUtils.toDifferentiableUnivariateFunction(UnivariateDifferentiableFunction)$UnivariateFunction$1$UnivariateFunction$1#derivative()$UnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.integration.gauss.GaussIntegrator#getWeight(int)",
        "org.apache.commons.math3.analysis.polynomials.PolynomialFunction#value(double)",
        "org.apache.commons.math3.analysis.function.Rint#value(double)",
        "org.apache.commons.math3.analysis.FunctionUtils.compose(UnivariateFunction[]...)$UnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.function.Cosh#value(double)",
        "org.apache.commons.math3.optimization.direct.PowellOptimizer.LineSearch#search(double[],double[])$UnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.FunctionUtils.compose(DifferentiableUnivariateFunction[]...)$DifferentiableUnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.function.Acosh#value(double)",
        "org.apache.commons.math3.analysis.function.StepFunction#value(double)",
        "org.apache.commons.math3.analysis.FunctionUtils.compose(UnivariateDifferentiableFunction[]...)$UnivariateDifferentiableFunction$1#value(double)",
        "org.apache.commons.math3.analysis.function.Acos#value(double)",
        "org.apache.commons.math3.analysis.integration.gauss.GaussIntegrator#getNumberOfPoints()",
        "org.apache.commons.math3.analysis.function.Power#value(double)",
        "org.apache.commons.math3.optim.nonlinear.scalar.LineSearch#search(double[],double[])$UnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.function.Sigmoid#value(double)",
        "org.apache.commons.math3.analysis.function.Ulp#value(double)",
        "org.apache.commons.math3.analysis.integration.gauss.GaussIntegrator#getPoint(int)"
    ],
    "org.apache.commons.math3.stat.inference.KolmogorovSmirnovTest.c(int,int,int,int,long,boolean)": ["org.apache.commons.math3.util.FastMath.abs(long)"],
    "org.apache.commons.math3.analysis.solvers.UnivariateSolverUtils.solve(UnivariateFunction,double,double,double)": [
        "org.apache.commons.math3.analysis.solvers.BrentSolver#BrentSolver(double)",
        "org.apache.commons.math3.analysis.solvers.BaseAbstractUnivariateSolver#solve(int,FUNC extends UnivariateFunction,double,double)",
        "org.apache.commons.math3.exception.util.LocalizedFormats.<staticinit>()"
    ],
    "org.apache.commons.math3.geometry.spherical.twod.S2Point#S2Point(double,double,Vector3D)": ["org.apache.commons.math3.geometry.spherical.twod.S2Point.<init>()"],
    "org.apache.commons.math3.analysis.solvers.AbstractDifferentiableUnivariateSolver#AbstractDifferentiableUnivariateSolver(double)": [
        "org.apache.commons.math3.analysis.solvers.BaseAbstractUnivariateSolver#BaseAbstractUnivariateSolver(double)",
        "org.apache.commons.math3.analysis.solvers.AbstractDifferentiableUnivariateSolver.<init>()"
    ],
    "org.apache.commons.math3.geometry.spherical.oned.Arc#Arc(double,double,double)": [
        "org.apache.commons.math3.util.MathUtils.normalizeAngle(double,double)",
        "org.apache.commons.math3.util.Precision.equals(double,double,int)",
        "org.apache.commons.math3.geometry.spherical.oned.Arc.<init>()",
        "org.apache.commons.math3.util.MathUtils.<staticinit>()",
        "org.apache.commons.math3.util.FastMath.<staticinit>()",
        "org.apache.commons.math3.exception.util.LocalizedFormats.<staticinit>()"
    ],
    "org.apache.commons.math3.geometry.euclidean.twod.Line#wholeHyperplane()": [
        "org.apache.commons.math3.geometry.euclidean.twod.SubLine#SubLine(Hyperplane<Euclidean2D>,Region<Euclidean1D>)",
        "org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet#IntervalsSet(double)"
    ],
    "org.apache.commons.math3.optim.MaxIter#MaxIter(int)": ["org.apache.commons.math3.optim.MaxIter.<init>()"],
    "org.apache.commons.math3.stat.descriptive.AggregateSummaryStatistics#getGeometricMean()": [
        "org.apache.commons.math3.stat.descriptive.SummaryStatistics#getGeometricMean()",
        "org.apache.commons.math3.stat.descriptive.SynchronizedSummaryStatistics#getGeometricMean()"
    ],
    "org.apache.commons.math3.stat.descriptive.DescriptiveStatistics.copy(DescriptiveStatistics,DescriptiveStatistics)": [
        "org.apache.commons.math3.stat.descriptive.moment.ThirdMoment#copy()",
        "org.apache.commons.math3.util.MathUtils.checkNotNull(Object)",
        "org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile#copy()",
        "org.apache.commons.math3.util.ResizableDoubleArray#copy()",
        "org.apache.commons.math3.stat.descriptive.rank.Max#copy()",
        "org.apache.commons.math3.stat.descriptive.summary.SumOfSquares#copy()",
        "org.apache.commons.math3.stat.descriptive.moment.Variance#copy()",
        "org.apache.commons.math3.stat.descriptive.moment.FourthMoment#copy()",
        "org.apache.commons.math3.stat.descriptive.summary.Product#copy()",
        "org.apache.commons.math3.stat.descriptive.moment.SecondMoment#copy()",
        "org.apache.commons.math3.stat.descriptive.moment.SemiVariance#copy()",
        "org.apache.commons.math3.stat.descriptive.moment.Mean#copy()",
        "org.apache.commons.math3.stat.descriptive.moment.FirstMoment#copy()",
        "org.apache.commons.math3.stat.descriptive.moment.Skewness#copy()",
        "org.apache.commons.math3.stat.descriptive.summary.SumOfLogs#copy()",
        "org.apache.commons.math3.stat.descriptive.moment.GeometricMean#copy()",
        "org.apache.commons.math3.stat.descriptive.moment.StandardDeviation#copy()",
        "org.apache.commons.math3.stat.descriptive.rank.Min#copy()",
        "org.apache.commons.math3.stat.descriptive.moment.Kurtosis#copy()",
        "org.apache.commons.math3.stat.descriptive.rank.Percentile#copy()",
        "org.apache.commons.math3.stat.descriptive.summary.Sum#copy()"
    ],
    "org.apache.commons.math3.stat.correlation.KendallsCorrelation#KendallsCorrelation(RealMatrix)": [
        "org.apache.commons.math3.stat.correlation.KendallsCorrelation.<init>()",
        "org.apache.commons.math3.stat.correlation.KendallsCorrelation#computeCorrelationMatrix(RealMatrix)"
    ],
    "org.apache.commons.math3.linear.BlockFieldMatrix#add(BlockFieldMatrix<T extends FieldElement>)": [
        "org.apache.commons.math3.linear.AbstractFieldMatrix#checkAdditionCompatible(FieldMatrix<T extends FieldElement>)",
        "org.apache.commons.math3.linear.BlockFieldMatrix#BlockFieldMatrix(Field<T extends FieldElement>,int,int)",
        "org.apache.commons.math3.linear.AbstractFieldMatrix#getField()"
    ],
    "org.apache.commons.math3.geometry.euclidean.twod.hull.AbstractConvexHullGenerator2D#AbstractConvexHullGenerator2D(boolean)": [
        "org.apache.commons.math3.geometry.euclidean.twod.hull.AbstractConvexHullGenerator2D#AbstractConvexHullGenerator2D(boolean,double)",
        "org.apache.commons.math3.geometry.euclidean.twod.hull.AbstractConvexHullGenerator2D.<staticinit>()"
    ],
    "org.apache.commons.math3.distribution.MixtureMultivariateRealDistribution#sample()": [
        "org.apache.commons.math3.random.SynchronizedRandomGenerator#nextDouble()",
        "org.apache.commons.math3.random.RandomGeneratorFactory.createRandomGenerator(Random)$RandomGenerator$1#nextDouble()",
        "org.apache.commons.math3.random.RandomAdaptor#nextDouble()",
        "org.apache.commons.math3.random.BitsStreamGenerator#nextDouble()"
    ],
    "org.apache.commons.math3.random.EmpiricalDistribution#EmpiricalDistribution(int)": [
        "org.apache.commons.math3.random.EmpiricalDistribution#EmpiricalDistribution(int,RandomDataGenerator)",
        "org.apache.commons.math3.random.RandomDataGenerator#RandomDataGenerator()"
    ],
    "org.apache.commons.math3.analysis.differentiation.DSCompiler#acos(double[],int,double[],int)": [
        "org.apache.commons.math3.util.FastMath.acos(double)",
        "org.apache.commons.math3.util.FastMath.sqrt(double)",
        "org.apache.commons.math3.analysis.differentiation.DSCompiler#compose(double[],int,double[],double[],int)"
    ],
    "org.apache.commons.math3.distribution.NakagamiDistribution#cumulativeProbability(double)": ["org.apache.commons.math3.special.Gamma.regularizedGammaP(double,double)"],
    "org.apache.commons.math3.geometry.spherical.oned.SubLimitAngle#split(Hyperplane<Sphere1D>)": [
        "org.apache.commons.math3.geometry.partitioning.SubHyperplane.SplitSubHyperplane#SplitSubHyperplane(SubHyperplane<U extends Space>,SubHyperplane<U extends Space>)",
        "org.apache.commons.math3.geometry.partitioning.AbstractSubHyperplane#getHyperplane()",
        "org.apache.commons.math3.geometry.spherical.oned.LimitAngle#getLocation()"
    ],
    "org.apache.commons.math3.linear.OpenMapRealMatrix#multiply(OpenMapRealMatrix)": [
        "org.apache.commons.math3.linear.MatrixUtils.checkMultiplicationCompatible(AnyMatrix,AnyMatrix)",
        "org.apache.commons.math3.util.OpenIntToDoubleHashMap#iterator()",
        "org.apache.commons.math3.util.OpenIntToDoubleHashMap#containsKey(int)",
        "org.apache.commons.math3.linear.OpenMapRealMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.OpenMapRealMatrix#OpenMapRealMatrix(int,int)",
        "org.apache.commons.math3.util.OpenIntToDoubleHashMap.Iterator#advance()",
        "org.apache.commons.math3.util.OpenIntToDoubleHashMap#put(int,double)",
        "org.apache.commons.math3.linear.OpenMapRealMatrix#computeKey(int,int)",
        "org.apache.commons.math3.util.OpenIntToDoubleHashMap.Iterator#value()",
        "org.apache.commons.math3.util.OpenIntToDoubleHashMap#remove(int)",
        "org.apache.commons.math3.util.OpenIntToDoubleHashMap.Iterator#key()",
        "org.apache.commons.math3.util.OpenIntToDoubleHashMap#get(int)",
        "org.apache.commons.math3.util.OpenIntToDoubleHashMap.Iterator#hasNext()"
    ],
    "org.apache.commons.math3.random.Well44497a#Well44497a()": [
        "org.apache.commons.math3.random.Well44497a.<init>()",
        "org.apache.commons.math3.random.AbstractWell#AbstractWell(int,int,int,int)",
        "org.apache.commons.math3.random.Well44497a.<staticinit>()"
    ],
    "org.apache.commons.math3.analysis.solvers.BaseAbstractUnivariateSolver#solve(int,FUNC extends UnivariateFunction,double)": ["org.apache.commons.math3.analysis.solvers.BaseAbstractUnivariateSolver#solve(int,FUNC extends UnivariateFunction,double,double,double)"],
    "org.apache.commons.math3.util.MathArrays.copyOfRange(double[],int,int)": ["org.apache.commons.math3.util.FastMath.min(int,int)"],
    "org.apache.commons.math3.stat.regression.RegressionResults#getRSquared()": ["org.apache.commons.math3.stat.regression.RegressionResults.<staticinit>()"],
    "org.apache.commons.math3.random.EmpiricalDistribution.ArrayDataAdapter#ArrayDataAdapter(double[])": [
        "org.apache.commons.math3.random.EmpiricalDistribution.ArrayDataAdapter.<init>()",
        "org.apache.commons.math3.util.MathUtils.checkNotNull(Object)",
        "org.apache.commons.math3.random.EmpiricalDistribution.DataAdapter.<init>()"
    ],
    "org.apache.commons.math3.ode.nonstiff.GillFieldStepInterpolator#GillFieldStepInterpolator(Field<T extends RealFieldElement>,boolean,T extends RealFieldElement[][],FieldODEStateAndDerivative<T extends RealFieldElement>,FieldODEStateAndDerivative<T extends RealFieldElement>,FieldODEStateAndDerivative<T extends RealFieldElement>,FieldODEStateAndDerivative<T extends RealFieldElement>,FieldEquationsMapper<T extends RealFieldElement>)": [
        "org.apache.commons.math3.ode.nonstiff.RungeKuttaFieldStepInterpolator#RungeKuttaFieldStepInterpolator(Field<T extends RealFieldElement>,boolean,T extends RealFieldElement[][],FieldODEStateAndDerivative<T extends RealFieldElement>,FieldODEStateAndDerivative<T extends RealFieldElement>,FieldODEStateAndDerivative<T extends RealFieldElement>,FieldODEStateAndDerivative<T extends RealFieldElement>,FieldEquationsMapper<T extends RealFieldElement>)",
        "org.apache.commons.math3.fraction.BigFractionField#getOne()",
        "org.apache.commons.math3.fraction.FractionField#getOne()",
        "org.apache.commons.math3.analysis.differentiation.SparseGradient#getField()$Field$1#getOne()",
        "org.apache.commons.math3.util.BigRealField#getZero()",
        "org.apache.commons.math3.analysis.differentiation.SparseGradient#getField()$Field$1#getZero()",
        "org.apache.commons.math3.util.Decimal64Field#getZero()",
        "org.apache.commons.math3.ode.nonstiff.GillFieldStepInterpolator.<init>()",
        "org.apache.commons.math3.dfp.DfpField#getZero()",
        "org.apache.commons.math3.analysis.differentiation.SparseGradient#add(double)",
        "org.apache.commons.math3.complex.ComplexField#getOne()",
        "org.apache.commons.math3.util.BigRealField#getOne()",
        "org.apache.commons.math3.analysis.differentiation.DerivativeStructure#add(double)",
        "org.apache.commons.math3.analysis.differentiation.DerivativeStructure#getField()$Field$1#getZero()",
        "org.apache.commons.math3.fraction.FractionField#getZero()",
        "org.apache.commons.math3.complex.ComplexField#getZero()",
        "org.apache.commons.math3.dfp.DfpField#getOne()",
        "org.apache.commons.math3.fraction.BigFractionField#getZero()",
        "org.apache.commons.math3.util.Decimal64#add(double)",
        "org.apache.commons.math3.analysis.differentiation.DerivativeStructure#getField()$Field$1#getOne()",
        "org.apache.commons.math3.dfp.Dfp#add(double)",
        "org.apache.commons.math3.util.Decimal64Field#getOne()"
    ],
    "org.apache.commons.math3.analysis.solvers.FieldBracketingNthOrderBrentSolver#solve(int,RealFieldUnivariateFunction<T extends RealFieldElement>,T extends RealFieldElement,T extends RealFieldElement,AllowedSolution)": ["org.apache.commons.math3.analysis.solvers.FieldBracketingNthOrderBrentSolver#solve(int,RealFieldUnivariateFunction<T extends RealFieldElement>,T extends RealFieldElement,T extends RealFieldElement,T extends RealFieldElement,AllowedSolution)"],
    "org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet#PolyhedronsSet(Collection<SubHyperplane<Euclidean3D>>,double)": [
        "org.apache.commons.math3.geometry.partitioning.AbstractRegion#AbstractRegion(Collection<SubHyperplane<S extends Space>>,double)",
        "org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet.<init>()"
    ],
    "org.apache.commons.math3.geometry.euclidean.threed.Vector3D#getNorm1()": ["org.apache.commons.math3.util.FastMath.abs(double)"],
    "org.apache.commons.math3.stat.descriptive.moment.SemiVariance#evaluate(double[],double)": ["org.apache.commons.math3.stat.descriptive.moment.SemiVariance#evaluate(double[],double,Direction,boolean,int,int)"],
    "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer.sumRows(RealMatrix)": [
        "org.apache.commons.math3.linear.DiagonalMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.Array2DRowRealMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.BlockFieldMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.SparseFieldMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.DiagonalMatrix#getEntry(int,int)",
        "org.apache.commons.math3.linear.OpenMapRealMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.OpenMapRealMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.DiagonalMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.OpenMapRealMatrix#getEntry(int,int)",
        "org.apache.commons.math3.linear.BlockRealMatrix#getEntry(int,int)",
        "org.apache.commons.math3.linear.Array2DRowRealMatrix#Array2DRowRealMatrix(double[][],boolean)",
        "org.apache.commons.math3.linear.Array2DRowFieldMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.SparseFieldMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.BlockFieldMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.Array2DRowRealMatrix#getEntry(int,int)",
        "org.apache.commons.math3.linear.BlockRealMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.Array2DRowRealMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.Array2DRowFieldMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.BlockRealMatrix#getColumnDimension()"
    ],
    "org.apache.commons.math3.linear.MatrixUtils.createRealDiagonalMatrix(double[])": [
        "org.apache.commons.math3.linear.MatrixUtils.createRealMatrix(int,int)",
        "org.apache.commons.math3.linear.BlockRealMatrix#setEntry(int,int,double)",
        "org.apache.commons.math3.linear.OpenMapRealMatrix#setEntry(int,int,double)",
        "org.apache.commons.math3.linear.Array2DRowRealMatrix#setEntry(int,int,double)",
        "org.apache.commons.math3.linear.DiagonalMatrix#setEntry(int,int,double)"
    ],
    "org.apache.commons.math3.geometry.euclidean.oned.Vector1D#add(Vector<Euclidean1D>)": [
        "org.apache.commons.math3.geometry.euclidean.oned.Vector1D#Vector1D(double)",
        "org.apache.commons.math3.geometry.euclidean.oned.Vector1D#getX()"
    ],
    "org.apache.commons.math3.dfp.Dfp#hypot(Dfp)": [
        "org.apache.commons.math3.dfp.Dfp#add(Dfp)",
        "org.apache.commons.math3.dfp.Dfp#sqrt()",
        "org.apache.commons.math3.dfp.Dfp#multiply(Dfp)"
    ],
    "org.apache.commons.math3.geometry.euclidean.twod.Vector2DFormat#Vector2DFormat(String,String,String)": [
        "org.apache.commons.math3.geometry.VectorFormat#VectorFormat(String,String,String,NumberFormat)",
        "org.apache.commons.math3.geometry.euclidean.twod.Vector2DFormat.<init>()",
        "org.apache.commons.math3.util.CompositeFormat.getDefaultNumberFormat()"
    ],
    "org.apache.commons.math3.random.RandomAdaptor#nextInt()": [
        "org.apache.commons.math3.random.BitsStreamGenerator#nextInt()",
        "org.apache.commons.math3.random.SynchronizedRandomGenerator#nextInt()",
        "org.apache.commons.math3.random.AbstractRandomGenerator#nextInt()",
        "org.apache.commons.math3.random.RandomGeneratorFactory.createRandomGenerator(Random)$RandomGenerator$1#nextInt()",
        "org.apache.commons.math3.random.RandomAdaptor#nextInt()"
    ],
    "org.apache.commons.math3.random.Well512a#Well512a(int)": [
        "org.apache.commons.math3.random.AbstractWell#AbstractWell(int,int,int,int,int)",
        "org.apache.commons.math3.random.Well512a.<staticinit>()",
        "org.apache.commons.math3.random.Well512a.<init>()"
    ],
    "org.apache.commons.math3.userguide.genetics.HelloWorldExample.StringChromosome#fitness()": [
        "org.apache.commons.math3.userguide.genetics.HelloWorldExample.<staticinit>()",
        "org.apache.commons.math3.util.FastMath.abs(int)",
        "org.apache.commons.math3.genetics.AbstractListChromosome#getRepresentation()"
    ],
    "org.apache.commons.math3.linear.PreconditionedIterativeLinearSolver#solve(RealLinearOperator,RealLinearOperator,RealVector,RealVector)": [
        "org.apache.commons.math3.linear.ArrayRealVector#copy()",
        "org.apache.commons.math3.linear.RealVector.unmodifiableRealVector(RealVector)$RealVector$1#copy()",
        "org.apache.commons.math3.util.MathUtils.checkNotNull(Object)",
        "org.apache.commons.math3.linear.ConjugateGradient#solveInPlace(RealLinearOperator,RealLinearOperator,RealVector,RealVector)",
        "org.apache.commons.math3.linear.SymmLQ#solveInPlace(RealLinearOperator,RealLinearOperator,RealVector,RealVector)",
        "org.apache.commons.math3.linear.OpenMapRealVector#copy()"
    ],
    "org.apache.commons.math3.geometry.spherical.oned.ArcsSet#isBeforeParent(BSPTree<Sphere1D>)": [
        "org.apache.commons.math3.geometry.partitioning.BSPTree#getParent()",
        "org.apache.commons.math3.geometry.spherical.oned.ArcsSet#childBefore(BSPTree<Sphere1D>)"
    ],
    "org.apache.commons.math3.optimization.linear.SimplexTableau#getRhsOffset()": ["org.apache.commons.math3.optimization.linear.SimplexTableau#getWidth()"],
    "org.apache.commons.math3.stat.Frequency#getCount(Comparable<?>)": ["org.apache.commons.math3.stat.Frequency#getCount(Comparable<?>)"],
    "org.apache.commons.math3.stat.regression.SimpleRegression#getIntercept()": [
        "org.apache.commons.math3.stat.regression.SimpleRegression#getSlope()",
        "org.apache.commons.math3.stat.regression.SimpleRegression#getIntercept(double)"
    ],
    "org.apache.commons.math3.dfp.Dfp#newInstance()": [
        "org.apache.commons.math3.dfp.Dfp#Dfp(DfpField)",
        "org.apache.commons.math3.dfp.Dfp#getField()"
    ],
    "org.apache.commons.math3.linear.TriDiagonalTransformer#TriDiagonalTransformer(RealMatrix)": [
        "org.apache.commons.math3.linear.DiagonalMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.Array2DRowRealMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.BlockFieldMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.SparseFieldMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.OpenMapRealMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.OpenMapRealMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.DiagonalMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.DiagonalMatrix#getData()",
        "org.apache.commons.math3.linear.AbstractRealMatrix#getData()",
        "org.apache.commons.math3.linear.Array2DRowFieldMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.BlockFieldMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.AbstractRealMatrix#isSquare()",
        "org.apache.commons.math3.linear.SparseFieldMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.BlockRealMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.Array2DRowRealMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.TriDiagonalTransformer.<init>()",
        "org.apache.commons.math3.linear.NonSquareMatrixException#NonSquareMatrixException(int,int)",
        "org.apache.commons.math3.linear.TriDiagonalTransformer#transform()",
        "org.apache.commons.math3.linear.Array2DRowRealMatrix#getData()",
        "org.apache.commons.math3.linear.AbstractFieldMatrix#isSquare()",
        "org.apache.commons.math3.linear.Array2DRowFieldMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.BlockRealMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.BlockRealMatrix#getData()"
    ],
    "org.apache.commons.math3.util.OpenIntToDoubleHashMap#containsKey(int)": [
        "org.apache.commons.math3.util.OpenIntToDoubleHashMap.<staticinit>()",
        "org.apache.commons.math3.util.OpenIntToDoubleHashMap#containsKey(int,int)",
        "org.apache.commons.math3.util.OpenIntToDoubleHashMap.probe(int,int)",
        "org.apache.commons.math3.util.OpenIntToDoubleHashMap.perturb(int)",
        "org.apache.commons.math3.util.OpenIntToDoubleHashMap.hashOf(int)"
    ],
    "org.apache.commons.math3.analysis.FunctionUtils.compose(DifferentiableUnivariateFunction[]...)": ["org.apache.commons.math3.analysis.FunctionUtils.compose(DifferentiableUnivariateFunction[]...)$DifferentiableUnivariateFunction$1.<init>()"],
    "org.apache.commons.math3.geometry.partitioning.SubHyperplane#side(Hyperplane<S extends Space>)": ["org.apache.commons.math3.geometry.partitioning.Side.<staticinit>()"],
    "org.apache.commons.math3.ml.clustering.KMeansPlusPlusClusterer#chooseInitialCenters(Collection<T extends Clusterable>)": [
        "org.apache.commons.math3.random.SynchronizedRandomGenerator#nextDouble()",
        "org.apache.commons.math3.ml.clustering.Clusterer#distance(Clusterable,Clusterable)",
        "org.apache.commons.math3.ml.clustering.CentroidCluster#CentroidCluster(Clusterable)",
        "org.apache.commons.math3.random.RandomAdaptor#nextDouble()",
        "org.apache.commons.math3.random.RandomGeneratorFactory.createRandomGenerator(Random)$RandomGenerator$1#nextInt(int)",
        "org.apache.commons.math3.random.BitsStreamGenerator#nextInt(int)",
        "org.apache.commons.math3.random.AbstractRandomGenerator#nextInt(int)",
        "org.apache.commons.math3.random.SynchronizedRandomGenerator#nextInt(int)",
        "org.apache.commons.math3.random.RandomAdaptor#nextInt(int)",
        "org.apache.commons.math3.random.RandomGeneratorFactory.createRandomGenerator(Random)$RandomGenerator$1#nextDouble()",
        "org.apache.commons.math3.random.BitsStreamGenerator#nextDouble()"
    ],
    "org.apache.commons.math3.util.Precision.equalsIncludingNaN(double,double,int)": ["org.apache.commons.math3.util.Precision.equals(double,double,int)"],
    "org.apache.commons.math3.complex.Complex#cos()": [
        "org.apache.commons.math3.util.FastMath.sin(double)",
        "org.apache.commons.math3.util.FastMath.cosh(double)",
        "org.apache.commons.math3.complex.Complex.<staticinit>()",
        "org.apache.commons.math3.complex.Complex#createComplex(double,double)",
        "org.apache.commons.math3.util.FastMath.sinh(double)",
        "org.apache.commons.math3.util.FastMath.cos(double)"
    ],
    "org.apache.commons.math3.geometry.euclidean.threed.Rotation#orthogonalizeMatrix(double[][],double)": [
        "org.apache.commons.math3.util.FastMath.abs(double)",
        "org.apache.commons.math3.exception.util.LocalizedFormats.<staticinit>()"
    ],
    "org.apache.commons.math3.dfp.DfpField.computePi(Dfp,Dfp,Dfp)": [
        "org.apache.commons.math3.dfp.Dfp#add(Dfp)",
        "org.apache.commons.math3.dfp.Dfp#sqrt()",
        "org.apache.commons.math3.dfp.Dfp#subtract(Dfp)",
        "org.apache.commons.math3.dfp.Dfp#equals(Object)",
        "org.apache.commons.math3.dfp.Dfp#multiply(Dfp)",
        "org.apache.commons.math3.dfp.Dfp#divide(Dfp)"
    ],
    "org.apache.commons.math3.ml.clustering.Clusterer#Clusterer(DistanceMeasure)": ["org.apache.commons.math3.ml.clustering.Clusterer.<init>()"],
    "org.apache.commons.math3.stat.descriptive.moment.Mean#clear()": [
        "org.apache.commons.math3.stat.descriptive.moment.FourthMoment#clear()",
        "org.apache.commons.math3.stat.descriptive.moment.FirstMoment#clear()",
        "org.apache.commons.math3.stat.descriptive.moment.ThirdMoment#clear()",
        "org.apache.commons.math3.stat.descriptive.moment.SecondMoment#clear()"
    ],
    "org.apache.commons.math3.complex.ComplexField#getOne()": ["org.apache.commons.math3.complex.Complex.<staticinit>()"],
    "org.apache.commons.math3.stat.inference.TTest#t(double,double[])": [
        "org.apache.commons.math3.stat.inference.TTest#t(double,double,double,double)",
        "org.apache.commons.math3.stat.StatUtils.mean(double[])",
        "org.apache.commons.math3.stat.inference.TTest#checkSampleData(double[])",
        "org.apache.commons.math3.stat.StatUtils.variance(double[])"
    ],
    "org.apache.commons.math3.stat.descriptive.moment.Skewness#copy()": [
        "org.apache.commons.math3.stat.descriptive.moment.Skewness#Skewness()",
        "org.apache.commons.math3.stat.descriptive.moment.Skewness.copy(Skewness,Skewness)"
    ],
    "org.apache.commons.math3.ode.nonstiff.GraggBulirschStoerIntegrator#addEventHandler(EventHandler,double,double,int,UnivariateSolver)": [
        "org.apache.commons.math3.ode.nonstiff.GraggBulirschStoerIntegrator#initializeArrays()",
        "org.apache.commons.math3.ode.AbstractIntegrator#addEventHandler(EventHandler,double,double,int,UnivariateSolver)"
    ],
    "org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile.Markers#toString()": ["org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile.Marker#toString()"],
    "org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D#isInfinite()": ["org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D#isNaN()"],
    "org.apache.commons.math3.analysis.integration.TrapezoidIntegrator#stage(BaseAbstractUnivariateIntegrator,int)": [
        "org.apache.commons.math3.analysis.integration.BaseAbstractUnivariateIntegrator#computeObjectiveValue(double)",
        "org.apache.commons.math3.analysis.integration.BaseAbstractUnivariateIntegrator#getMin()",
        "org.apache.commons.math3.analysis.integration.BaseAbstractUnivariateIntegrator#getMax()"
    ],
    "org.apache.commons.math3.fitting.HarmonicCurveFitter#withMaxIterations(int)": ["org.apache.commons.math3.fitting.HarmonicCurveFitter#HarmonicCurveFitter(double[],int)"],
    "org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet#projectToBoundary(Point<Euclidean1D>)": [
        "org.apache.commons.math3.geometry.partitioning.BoundaryProjection#BoundaryProjection(Point<S extends Space>,Point<S extends Space>,double)",
        "org.apache.commons.math3.geometry.euclidean.oned.Vector1D#getX()",
        "org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet#finiteOrNullPoint(double)"
    ],
    "org.apache.commons.math3.dfp.DfpMath.exp(Dfp)": [
        "org.apache.commons.math3.dfp.Dfp#newInstance()",
        "org.apache.commons.math3.dfp.Dfp#intValue()",
        "org.apache.commons.math3.dfp.Dfp#rint()",
        "org.apache.commons.math3.dfp.DfpMath.expInternal(Dfp)",
        "org.apache.commons.math3.dfp.Dfp.<staticinit>()",
        "org.apache.commons.math3.dfp.DfpField#getESplit()",
        "org.apache.commons.math3.dfp.DfpMath.splitPow(Dfp[],int)",
        "org.apache.commons.math3.dfp.Dfp#subtract(Dfp)",
        "org.apache.commons.math3.dfp.Dfp#getField()",
        "org.apache.commons.math3.dfp.DfpDec#newInstance(byte,byte)",
        "org.apache.commons.math3.dfp.Dfp#multiply(Dfp)",
        "org.apache.commons.math3.dfp.Dfp#newInstance(byte,byte)",
        "org.apache.commons.math3.dfp.DfpDec#newInstance()"
    ],
    "org.apache.commons.math3.analysis.solvers.BaseAbstractUnivariateSolver#verifySequence(double,double,double)": ["org.apache.commons.math3.analysis.solvers.UnivariateSolverUtils.verifySequence(double,double,double)"],
    "org.apache.commons.math3.stat.ranking.NaturalRanking#NaturalRanking(NaNStrategy,TiesStrategy)": [
        "org.apache.commons.math3.random.RandomDataGenerator#RandomDataGenerator()",
        "org.apache.commons.math3.stat.ranking.NaturalRanking.<init>()"
    ],
    "org.apache.commons.math3.analysis.solvers.LaguerreSolver.ComplexSolver#solve(Complex[],Complex)": [
        "org.apache.commons.math3.analysis.solvers.BaseAbstractUnivariateSolver#getAbsoluteAccuracy()",
        "org.apache.commons.math3.complex.Complex#add(Complex)",
        "org.apache.commons.math3.complex.Complex#multiply(Complex)",
        "org.apache.commons.math3.util.FastMath.max(double,double)",
        "org.apache.commons.math3.exception.util.LocalizedFormats.<staticinit>()",
        "org.apache.commons.math3.complex.Complex#equals(Object)",
        "org.apache.commons.math3.exception.NoDataException#NoDataException(Localizable)",
        "org.apache.commons.math3.analysis.solvers.BaseAbstractUnivariateSolver#getRelativeAccuracy()",
        "org.apache.commons.math3.complex.Complex.<staticinit>()",
        "org.apache.commons.math3.complex.Complex#divide(Complex)",
        "org.apache.commons.math3.exception.NullArgumentException#NullArgumentException()",
        "org.apache.commons.math3.complex.Complex#sqrt()",
        "org.apache.commons.math3.analysis.solvers.BaseAbstractUnivariateSolver#getFunctionValueAccuracy()",
        "org.apache.commons.math3.complex.Complex#subtract(Complex)",
        "org.apache.commons.math3.complex.Complex#Complex(double,double)",
        "org.apache.commons.math3.complex.Complex#abs()",
        "org.apache.commons.math3.analysis.solvers.BaseAbstractUnivariateSolver#incrementEvaluationCount()"
    ],
    "org.apache.commons.math3.linear.ArrayRealVector#combineToSelf(double,double,RealVector)": [
        "org.apache.commons.math3.linear.ArrayRealVector#checkVectorDimensions(int)",
        "org.apache.commons.math3.linear.ArrayRealVector#checkVectorDimensions(RealVector)",
        "org.apache.commons.math3.linear.ArrayRealVector#getEntry(int)",
        "org.apache.commons.math3.linear.OpenMapRealVector#getEntry(int)",
        "org.apache.commons.math3.linear.RealVector.unmodifiableRealVector(RealVector)$RealVector$1#getEntry(int)"
    ],
    "org.apache.commons.math3.fitting.GaussianCurveFitter.ParameterGuesser#getInterpolationPointsForY(WeightedObservedPoint[],int,int,double)": [
        "org.apache.commons.math3.fitting.GaussianCurveFitter.ParameterGuesser#isBetween(double,double,double)",
        "org.apache.commons.math3.fitting.WeightedObservedPoint#getY()",
        "org.apache.commons.math3.exception.ZeroException#ZeroException()"
    ],
    "org.apache.commons.math3.optimization.direct.CMAESOptimizer.FitnessFunction#isFeasible(double[])": [
        "org.apache.commons.math3.optimization.direct.BaseAbstractMultivariateOptimizer#getUpperBound()",
        "org.apache.commons.math3.optimization.direct.BaseAbstractMultivariateOptimizer#getLowerBound()"
    ],
    "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.NelderMeadSimplex#NelderMeadSimplex(double[][])": [
        "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.NelderMeadSimplex#NelderMeadSimplex(double[][],double,double,double,double)",
        "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.NelderMeadSimplex.<staticinit>()"
    ],
    "org.apache.commons.math3.util.Decimal64#tanh()": [
        "org.apache.commons.math3.util.Decimal64#Decimal64(double)",
        "org.apache.commons.math3.util.FastMath.tanh(double)"
    ],
    "org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet#asList()": ["org.apache.commons.math3.geometry.euclidean.oned.Interval#Interval(double,double)"],
    "org.apache.commons.math3.optimization.general.AbstractLeastSquaresOptimizer#computeCost(double[])": [
        "org.apache.commons.math3.linear.ArrayRealVector#ArrayRealVector(double[])",
        "org.apache.commons.math3.linear.AbstractRealMatrix#operate(RealVector)",
        "org.apache.commons.math3.util.FastMath.sqrt(double)",
        "org.apache.commons.math3.linear.ArrayRealVector#dotProduct(RealVector)",
        "org.apache.commons.math3.optimization.direct.BaseAbstractMultivariateVectorOptimizer#getWeight()"
    ],
    "org.apache.commons.math3.dfp.Dfp#align(int)": [
        "org.apache.commons.math3.dfp.DfpField.<staticinit>()",
        "org.apache.commons.math3.dfp.Dfp#shiftLeft()",
        "org.apache.commons.math3.dfp.DfpField#setIEEEFlagsBits(int)",
        "org.apache.commons.math3.dfp.Dfp#shiftRight()",
        "org.apache.commons.math3.dfp.Dfp.<staticinit>()",
        "org.apache.commons.math3.dfp.Dfp#dotrap(int,String,Dfp,Dfp)"
    ],
    "org.apache.commons.math3.linear.BlockRealMatrix#setColumnVector(int,RealVector)": [
        "org.apache.commons.math3.linear.ArrayRealVector#getDataRef()",
        "org.apache.commons.math3.linear.AbstractRealMatrix#setColumnVector(int,RealVector)",
        "org.apache.commons.math3.linear.BlockRealMatrix#setColumn(int,double[])"
    ],
    "org.apache.commons.math3.fitting.HarmonicFitter#HarmonicFitter(MultivariateVectorOptimizer)": [
        "org.apache.commons.math3.fitting.HarmonicFitter.<init>()",
        "org.apache.commons.math3.fitting.CurveFitter#CurveFitter(MultivariateVectorOptimizer)"
    ],
    "org.apache.commons.math3.distribution.PoissonDistribution#getNumericalMean()": ["org.apache.commons.math3.distribution.PoissonDistribution#getMean()"],
    "org.apache.commons.math3.util.MathArrays.safeNorm(double[])": ["org.apache.commons.math3.util.FastMath.abs(double)"],
    "org.apache.commons.math3.linear.Array2DRowFieldMatrix#getData()": ["org.apache.commons.math3.linear.Array2DRowFieldMatrix#copyOut()"],
    "org.apache.commons.math3.stat.regression.AbstractMultipleLinearRegression#estimateRegressandVariance()": ["org.apache.commons.math3.stat.regression.AbstractMultipleLinearRegression#calculateYVariance()"],
    "org.apache.commons.math3.util.OpenIntToDoubleHashMap#findInsertionIndex(int)": ["org.apache.commons.math3.util.OpenIntToDoubleHashMap.findInsertionIndex(int[],byte[],int,int)"],
    "org.apache.commons.math3.util.IntegerSequence.Incrementor#increment(int)": [
        "org.apache.commons.math3.util.IntegerSequence.Incrementor$MaxCountExceededCallback$1#trigger(int)",
        "org.apache.commons.math3.util.IntegerSequence.Incrementor#canIncrement(int)",
        "org.apache.commons.math3.util.IterationManager#IterationManager(int,MaxCountExceededCallback)$MaxCountExceededCallback$1#trigger(int)"
    ],
    "org.apache.commons.math3.linear.DiagonalMatrix#subtract(DiagonalMatrix)": [
        "org.apache.commons.math3.linear.DiagonalMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.MatrixUtils.checkSubtractionCompatible(AnyMatrix,AnyMatrix)",
        "org.apache.commons.math3.linear.DiagonalMatrix#DiagonalMatrix(double[],boolean)"
    ],
    "org.apache.commons.math3.stat.inference.KolmogorovSmirnovTest.jitter(double[],RealDistribution)": [
        "org.apache.commons.math3.distribution.ExponentialDistribution#sample()",
        "org.apache.commons.math3.distribution.AbstractRealDistribution#sample()",
        "org.apache.commons.math3.distribution.ParetoDistribution#sample()",
        "org.apache.commons.math3.distribution.UniformRealDistribution#sample()",
        "org.apache.commons.math3.distribution.NormalDistribution#sample()",
        "org.apache.commons.math3.distribution.ConstantRealDistribution#sample()",
        "org.apache.commons.math3.distribution.EnumeratedRealDistribution#sample()",
        "org.apache.commons.math3.distribution.GammaDistribution#sample()",
        "org.apache.commons.math3.distribution.BetaDistribution#sample()",
        "org.apache.commons.math3.distribution.LogNormalDistribution#sample()"
    ],
    "org.apache.commons.math3.distribution.WeibullDistribution#logDensity(double)": [
        "org.apache.commons.math3.util.FastMath.log(double)",
        "org.apache.commons.math3.util.FastMath.exp(double)"
    ],
    "org.apache.commons.math3.analysis.FunctionUtils.toDifferentiableMultivariateFunction(MultivariateDifferentiableFunction)": ["org.apache.commons.math3.analysis.FunctionUtils.toDifferentiableMultivariateFunction(MultivariateDifferentiableFunction)$DifferentiableMultivariateFunction$1.<init>()"],
    "org.apache.commons.math3.geometry.partitioning.utilities.OrderedTuple#equals(Object)": ["org.apache.commons.math3.geometry.partitioning.utilities.OrderedTuple#compareTo(OrderedTuple)"],
    "org.apache.commons.math3.analysis.interpolation.MicrosphereInterpolator#MicrosphereInterpolator()": [
        "org.apache.commons.math3.analysis.interpolation.MicrosphereInterpolator.<staticinit>()",
        "org.apache.commons.math3.analysis.interpolation.MicrosphereInterpolator#MicrosphereInterpolator(int,int)"
    ],
    "org.apache.commons.math3.ode.nonstiff.AdamsMoultonFieldIntegrator.Corrector#end()": [
        "org.apache.commons.math3.ode.AbstractFieldIntegrator#getField()",
        "org.apache.commons.math3.util.BigRealField#getZero()",
        "org.apache.commons.math3.analysis.differentiation.SparseGradient#getField()$Field$1#getZero()",
        "org.apache.commons.math3.analysis.differentiation.DerivativeStructure#getField()$Field$1#getZero()",
        "org.apache.commons.math3.fraction.FractionField#getZero()",
        "org.apache.commons.math3.util.Decimal64Field#getZero()",
        "org.apache.commons.math3.dfp.DfpField#getZero()",
        "org.apache.commons.math3.util.MathUtils.max(T extends RealFieldElement,T extends RealFieldElement)",
        "org.apache.commons.math3.complex.ComplexField#getZero()",
        "org.apache.commons.math3.fraction.BigFractionField#getZero()"
    ],
    "org.apache.commons.math3.linear.RRQRDecomposition.Solver#Solver(DecompositionSolver,RealMatrix)": ["org.apache.commons.math3.linear.RRQRDecomposition.Solver.<init>()"],
    "org.apache.commons.math3.ode.nonstiff.AdamsIntegrator#initializeHighOrderDerivatives(double,double[],double[][],double[][])": ["org.apache.commons.math3.ode.nonstiff.AdamsNordsieckTransformer#initializeHighOrderDerivatives(double,double[],double[][],double[][])"],
    "org.apache.commons.math3.geometry.euclidean.twod.Vector2D#getSpace()": ["org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D.getInstance()"],
    "org.apache.commons.math3.stat.ranking.NaturalRanking#restoreNaNs(double[],List<Integer>)": [
        "org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet.SubIntervalsIterator#hasNext()",
        "org.apache.commons.math3.util.MultidimensionalCounter.Iterator#next()",
        "org.apache.commons.math3.linear.RealVector#iterator()$Iterator$1#hasNext()",
        "org.apache.commons.math3.userguide.sofm.ChineseRingsClassifier#createRandomIterator(long)$Iterator$1#hasNext()",
        "org.apache.commons.math3.util.IntegerSequence.Incrementor#hasNext()",
        "org.apache.commons.math3.linear.RealVector.unmodifiableRealVector(RealVector)$Iterator$1$Iterator$1#sparseIterator()$Iterator$1#hasNext()",
        "org.apache.commons.math3.geometry.spherical.oned.ArcsSet.SubArcsIterator#hasNext()",
        "org.apache.commons.math3.util.Combinations.LexicographicIterator#hasNext()",
        "org.apache.commons.math3.util.IntegerSequence.Incrementor#next()",
        "org.apache.commons.math3.linear.RealVector.SparseEntryIterator#hasNext()",
        "org.apache.commons.math3.userguide.sofm.ChineseRingsClassifier#createIterable()$Iterator$1$Iterator$1#iterator()$Iterator$1#hasNext()",
        "org.apache.commons.math3.linear.RealVector.unmodifiableRealVector(RealVector)$Iterator$1$Iterator$1#iterator()$Iterator$1#hasNext()",
        "org.apache.commons.math3.util.Combinations.SingletonIterator#hasNext()",
        "org.apache.commons.math3.util.MultidimensionalCounter.Iterator#hasNext()"
    ],
    "org.apache.commons.math3.stat.inference.TTest#tTest(double,StatisticalSummary,double)": [
        "org.apache.commons.math3.stat.inference.TTest#tTest(double,StatisticalSummary)",
        "org.apache.commons.math3.stat.inference.TTest#checkSignificanceLevel(double)"
    ],
    "org.apache.commons.math3.stat.descriptive.SynchronizedMultivariateSummaryStatistics#setGeoMeanImpl(StorelessUnivariateStatistic[])": ["org.apache.commons.math3.stat.descriptive.MultivariateSummaryStatistics#setGeoMeanImpl(StorelessUnivariateStatistic[])"],
    "org.apache.commons.math3.optim.BaseOptimizer#incrementEvaluationCount()": [
        "org.apache.commons.math3.util.Incrementor#incrementCount()",
        "org.apache.commons.math3.util.Incrementor.wrap(Incrementor)$Incrementor$1#incrementCount()"
    ],
    "org.apache.commons.math3.geometry.euclidean.threed.Vector3D#crossProduct(Vector<Euclidean3D>)": [
        "org.apache.commons.math3.geometry.euclidean.threed.Vector3D#Vector3D(double,double,double)",
        "org.apache.commons.math3.util.MathArrays.linearCombination(double,double,double,double)"
    ],
    "org.apache.commons.math3.linear.BlockRealMatrix#walkInOptimizedOrder(RealMatrixPreservingVisitor)": [
        "org.apache.commons.math3.linear.DefaultRealMatrixPreservingVisitor#start(int,int,int,int,int,int)",
        "org.apache.commons.math3.linear.AbstractRealMatrix#copySubMatrix(int,int,int,int,double[][])$DefaultRealMatrixPreservingVisitor$1#start(int,int,int,int,int,int)",
        "org.apache.commons.math3.linear.DefaultRealMatrixPreservingVisitor#visit(int,int,double)",
        "org.apache.commons.math3.linear.SingularValueDecomposition#getCovariance(double)$DefaultRealMatrixPreservingVisitor$1#visit(int,int,double)",
        "org.apache.commons.math3.linear.AbstractRealMatrix#getNorm()$RealMatrixPreservingVisitor$1#end()",
        "org.apache.commons.math3.linear.AbstractRealMatrix#getFrobeniusNorm()$RealMatrixPreservingVisitor$1#end()",
        "org.apache.commons.math3.linear.AbstractRealMatrix#getFrobeniusNorm()$RealMatrixPreservingVisitor$1#visit(int,int,double)",
        "org.apache.commons.math3.linear.DefaultRealMatrixPreservingVisitor#end()",
        "org.apache.commons.math3.linear.AbstractRealMatrix#getFrobeniusNorm()$RealMatrixPreservingVisitor$1#start(int,int,int,int,int,int)",
        "org.apache.commons.math3.util.FastMath.min(int,int)",
        "org.apache.commons.math3.linear.BlockRealMatrix.<staticinit>()",
        "org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator.Corrector#start(int,int,int,int,int,int)",
        "org.apache.commons.math3.linear.AbstractRealMatrix#getNorm()$RealMatrixPreservingVisitor$1#visit(int,int,double)",
        "org.apache.commons.math3.linear.AbstractRealMatrix#copySubMatrix(int,int,int,int,double[][])$DefaultRealMatrixPreservingVisitor$1#visit(int,int,double)",
        "org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator.Corrector#visit(int,int,double)",
        "org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator.Corrector#end()",
        "org.apache.commons.math3.linear.AbstractRealMatrix#getNorm()$RealMatrixPreservingVisitor$1#start(int,int,int,int,int,int)",
        "org.apache.commons.math3.linear.AbstractRealMatrix#transpose()$DefaultRealMatrixPreservingVisitor$1#visit(int,int,double)"
    ],
    "org.apache.commons.math3.linear.RealVector.unmodifiableRealVector(RealVector)$RealVector$1#addToEntry(int,double)": ["org.apache.commons.math3.exception.MathUnsupportedOperationException#MathUnsupportedOperationException()"],
    "org.apache.commons.math3.dfp.Dfp#trunc(RoundingMode)": [
        "org.apache.commons.math3.dfp.DfpDec#newInstance(int)",
        "org.apache.commons.math3.dfp.Dfp.<staticinit>()",
        "org.apache.commons.math3.dfp.Dfp#dotrap(int,String,Dfp,Dfp)",
        "org.apache.commons.math3.dfp.Dfp#newInstance(Dfp)",
        "org.apache.commons.math3.dfp.Dfp#newInstance(String)",
        "org.apache.commons.math3.dfp.Dfp#add(Dfp)",
        "org.apache.commons.math3.dfp.DfpDec#newInstance(String)",
        "org.apache.commons.math3.dfp.Dfp#subtract(Dfp)",
        "org.apache.commons.math3.dfp.Dfp#isNaN()",
        "org.apache.commons.math3.dfp.DfpField.RoundingMode.<staticinit>()",
        "org.apache.commons.math3.dfp.DfpDec#newInstance(Dfp)",
        "org.apache.commons.math3.dfp.Dfp#getOne()",
        "org.apache.commons.math3.dfp.Dfp#newInstance(int)",
        "org.apache.commons.math3.dfp.DfpField.<staticinit>()",
        "org.apache.commons.math3.dfp.DfpField#setIEEEFlagsBits(int)",
        "org.apache.commons.math3.dfp.Dfp#greaterThan(Dfp)",
        "org.apache.commons.math3.dfp.Dfp#equals(Object)",
        "org.apache.commons.math3.dfp.Dfp#getZero()"
    ],
    "org.apache.commons.math3.stat.interval.IntervalUtils.checkParameters(int,int,double)": ["org.apache.commons.math3.exception.util.LocalizedFormats.<staticinit>()"],
    "org.apache.commons.math3.stat.descriptive.summary.Product.copy(Product,Product)": [
        "org.apache.commons.math3.util.MathUtils.checkNotNull(Object)",
        "org.apache.commons.math3.stat.descriptive.AbstractUnivariateStatistic#setData(double[])",
        "org.apache.commons.math3.stat.descriptive.rank.Percentile#setData(double[])",
        "org.apache.commons.math3.stat.descriptive.AbstractUnivariateStatistic#getDataRef()"
    ],
    "org.apache.commons.math3.util.MathArrays.copyOf(int[])": ["org.apache.commons.math3.util.MathArrays.copyOf(int[],int)"],
    "org.apache.commons.math3.random.ISAACRandom#isaac()": [
        "org.apache.commons.math3.random.ISAACRandom.<staticinit>()",
        "org.apache.commons.math3.random.ISAACRandom#isaac2()"
    ],
    "org.apache.commons.math3.random.EmpiricalDistribution#findBin(double)": [
        "org.apache.commons.math3.util.FastMath.min(int,int)",
        "org.apache.commons.math3.util.FastMath.ceil(double)",
        "org.apache.commons.math3.util.FastMath.max(int,int)"
    ],
    "org.apache.commons.math3.geometry.euclidean.threed.FieldRotation#applyTo(Rotation)": [
        "org.apache.commons.math3.geometry.euclidean.threed.RotationConvention.<staticinit>()",
        "org.apache.commons.math3.geometry.euclidean.threed.FieldRotation#compose(Rotation,RotationConvention)"
    ],
    "org.apache.commons.math3.ml.neuralnet.FeatureInitializerFactory.randomize(RealDistribution,FeatureInitializer)": ["org.apache.commons.math3.ml.neuralnet.FeatureInitializerFactory.randomize(RealDistribution,FeatureInitializer)$FeatureInitializer$1.<init>()"],
    "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.BOBYQAOptimizer#BOBYQAOptimizer(int)": [
        "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.BOBYQAOptimizer#BOBYQAOptimizer(int,double,double)",
        "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.BOBYQAOptimizer.<staticinit>()"
    ],
    "org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile.Marker.<init>()": [
        "org.apache.commons.math3.analysis.interpolation.LinearInterpolator.<init>()",
        "org.apache.commons.math3.analysis.interpolation.NevilleInterpolator.<init>()"
    ],
    "org.apache.commons.math3.analysis.function.Atan#derivative()": [
        "org.apache.commons.math3.analysis.function.Log10#derivative()",
        "org.apache.commons.math3.analysis.function.Power#derivative()",
        "org.apache.commons.math3.analysis.function.Sin#derivative()",
        "org.apache.commons.math3.analysis.function.Exp#derivative()",
        "org.apache.commons.math3.analysis.function.HarmonicOscillator#derivative()",
        "org.apache.commons.math3.analysis.polynomials.PolynomialFunction#derivative()",
        "org.apache.commons.math3.analysis.FunctionUtils.toDifferentiableUnivariateFunction(UnivariateDifferentiableFunction)",
        "org.apache.commons.math3.analysis.function.Logit#derivative()",
        "org.apache.commons.math3.analysis.function.Cbrt#derivative()",
        "org.apache.commons.math3.analysis.FunctionUtils.toDifferentiableUnivariateFunction(UnivariateDifferentiableFunction)$DifferentiableUnivariateFunction$1#derivative()",
        "org.apache.commons.math3.analysis.polynomials.PolynomialSplineFunction#derivative()",
        "org.apache.commons.math3.analysis.function.Cosh#derivative()",
        "org.apache.commons.math3.analysis.function.Identity#derivative()",
        "org.apache.commons.math3.analysis.function.Inverse#derivative()",
        "org.apache.commons.math3.analysis.function.Acosh#derivative()",
        "org.apache.commons.math3.analysis.function.Acos#derivative()",
        "org.apache.commons.math3.analysis.function.Atan#derivative()",
        "org.apache.commons.math3.analysis.function.Log#derivative()",
        "org.apache.commons.math3.analysis.function.Sqrt#derivative()",
        "org.apache.commons.math3.analysis.function.Logistic#derivative()",
        "org.apache.commons.math3.analysis.function.Expm1#derivative()",
        "org.apache.commons.math3.analysis.function.Asinh#derivative()",
        "org.apache.commons.math3.analysis.function.Gaussian#derivative()",
        "org.apache.commons.math3.analysis.function.Sinc#derivative()",
        "org.apache.commons.math3.analysis.function.Sigmoid#derivative()",
        "org.apache.commons.math3.analysis.function.Constant#derivative()",
        "org.apache.commons.math3.analysis.function.Sinh#derivative()",
        "org.apache.commons.math3.analysis.function.Tanh#derivative()",
        "org.apache.commons.math3.analysis.function.Asin#derivative()",
        "org.apache.commons.math3.analysis.function.Minus#derivative()",
        "org.apache.commons.math3.analysis.FunctionUtils.compose(DifferentiableUnivariateFunction[]...)$DifferentiableUnivariateFunction$1#derivative()",
        "org.apache.commons.math3.analysis.FunctionUtils.add(DifferentiableUnivariateFunction[]...)$DifferentiableUnivariateFunction$1#derivative()",
        "org.apache.commons.math3.analysis.FunctionUtils.multiply(DifferentiableUnivariateFunction[]...)$DifferentiableUnivariateFunction$1#derivative()",
        "org.apache.commons.math3.analysis.function.Log1p#derivative()",
        "org.apache.commons.math3.analysis.function.Tan#derivative()",
        "org.apache.commons.math3.analysis.function.Cos#derivative()",
        "org.apache.commons.math3.analysis.function.Atanh#derivative()"
    ],
    "org.apache.commons.math3.optim.nonlinear.scalar.gradient.NonLinearConjugateGradientOptimizer.BracketingStep#BracketingStep(double)": ["org.apache.commons.math3.optim.nonlinear.scalar.gradient.NonLinearConjugateGradientOptimizer.BracketingStep.<init>()"],
    "org.apache.commons.math3.geometry.spherical.twod.Circle#Circle(Vector3D,Vector3D,Vector3D,double)": ["org.apache.commons.math3.geometry.spherical.twod.Circle.<init>()"],
    "org.apache.commons.math3.userguide.genetics.ImageEvolutionExample.Display.ImagePainter#paint(Graphics)": ["org.apache.commons.math3.userguide.genetics.PolygonChromosome#draw(Graphics2D,int,int)"],
    "org.apache.commons.math3.random.RandomDataGenerator#nextChiSquare(double)": [
        "org.apache.commons.math3.distribution.ExponentialDistribution#sample()",
        "org.apache.commons.math3.random.RandomDataGenerator#getRandomGenerator()",
        "org.apache.commons.math3.distribution.ChiSquaredDistribution#ChiSquaredDistribution(RandomGenerator,double,double)",
        "org.apache.commons.math3.distribution.AbstractRealDistribution#sample()",
        "org.apache.commons.math3.distribution.EnumeratedRealDistribution#sample()",
        "org.apache.commons.math3.distribution.BetaDistribution#sample()",
        "org.apache.commons.math3.distribution.LogNormalDistribution#sample()",
        "org.apache.commons.math3.distribution.ChiSquaredDistribution.<staticinit>()",
        "org.apache.commons.math3.distribution.ParetoDistribution#sample()",
        "org.apache.commons.math3.distribution.UniformRealDistribution#sample()",
        "org.apache.commons.math3.distribution.NormalDistribution#sample()",
        "org.apache.commons.math3.distribution.ConstantRealDistribution#sample()",
        "org.apache.commons.math3.distribution.GammaDistribution#sample()"
    ],
    "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizer#doOptimize()$Comparator$1#compare(PointValuePair,PointValuePair)": [
        "org.apache.commons.math3.util.Pair#getValue()",
        "org.apache.commons.math3.optim.PointVectorValuePair#getValue()",
        "org.apache.commons.math3.optimization.PointVectorValuePair#getValue()"
    ],
    "org.apache.commons.math3.analysis.differentiation.DerivativeStructure#DerivativeStructure(int,int)": [
        "org.apache.commons.math3.analysis.differentiation.DerivativeStructure#DerivativeStructure(DSCompiler)",
        "org.apache.commons.math3.analysis.differentiation.DSCompiler.getCompiler(int,int)"
    ],
    "org.apache.commons.math3.optim.linear.SimplexTableau#findBasicRow(int)": [
        "org.apache.commons.math3.optim.linear.SimplexTableau#getHeight()",
        "org.apache.commons.math3.util.Precision.equals(double,double,int)",
        "org.apache.commons.math3.optim.linear.SimplexTableau#getEntry(int,int)"
    ],
    "org.apache.commons.math3.stat.descriptive.SynchronizedSummaryStatistics#getSumsqImpl()": ["org.apache.commons.math3.stat.descriptive.SummaryStatistics#getSumsqImpl()"],
    "org.apache.commons.math3.util.Decimal64#atan2(Decimal64)": [
        "org.apache.commons.math3.util.Decimal64#Decimal64(double)",
        "org.apache.commons.math3.util.FastMath.atan2(double,double)"
    ],
    "org.apache.commons.math3.userguide.filter.ConstantVoltageExample.main(String[])": [
        "org.apache.commons.math3.userguide.filter.ConstantVoltageExample.Display#Display()",
        "org.apache.commons.math3.userguide.ExampleUtils.showExampleFrame(ExampleFrame)"
    ],
    "org.apache.commons.math3.linear.JacobiPreconditioner#sqrt()": [
        "org.apache.commons.math3.linear.JacobiPreconditioner#sqrt()$RealLinearOperator$1.<init>()",
        "org.apache.commons.math3.analysis.function.Sqrt.<init>()",
        "org.apache.commons.math3.linear.ArrayRealVector#map(UnivariateFunction)"
    ],
    "org.apache.commons.math3.stat.regression.SimpleRegression#getSlope()": ["org.apache.commons.math3.util.FastMath.abs(double)"],
    "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.AbstractSimplex#evaluate(MultivariateFunction,Comparator<PointValuePair>)": [
        "org.apache.commons.math3.optim.nonlinear.scalar.MultivariateFunctionMappingAdapter#value(double[])",
        "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizer#doOptimize()$MultivariateFunction$1#value(double[])",
        "org.apache.commons.math3.optimization.direct.MultivariateFunctionMappingAdapter#value(double[])",
        "org.apache.commons.math3.analysis.FunctionUtils.toMultivariateDifferentiableFunction(DifferentiableMultivariateFunction)$MultivariateDifferentiableFunction$1#value(double[])",
        "org.apache.commons.math3.analysis.FunctionUtils.toDifferentiableMultivariateFunction(MultivariateDifferentiableFunction)$DifferentiableMultivariateFunction$1#value(double[])",
        "org.apache.commons.math3.analysis.interpolation.MicrosphereInterpolatingFunction#value(double[])",
        "org.apache.commons.math3.analysis.interpolation.MicrosphereProjectionInterpolator#interpolate(double[][],double[])$MultivariateFunction$1#value(double[])",
        "org.apache.commons.math3.util.Pair#getValue()",
        "org.apache.commons.math3.optimization.direct.MultivariateFunctionPenaltyAdapter#value(double[])",
        "org.apache.commons.math3.optim.nonlinear.scalar.MultivariateFunctionPenaltyAdapter#value(double[])",
        "org.apache.commons.math3.optim.PointValuePair#PointValuePair(double[],double,boolean)",
        "org.apache.commons.math3.optim.linear.LinearObjectiveFunction#value(double[])",
        "org.apache.commons.math3.optim.PointValuePair#getPointRef()",
        "org.apache.commons.math3.analysis.FunctionUtils.collector(BivariateFunction,UnivariateFunction,double)$MultivariateFunction$1#value(double[])",
        "org.apache.commons.math3.optim.PointVectorValuePair#getValue()",
        "org.apache.commons.math3.optimization.PointVectorValuePair#getValue()",
        "org.apache.commons.math3.optim.nonlinear.scalar.LeastSquaresConverter#value(double[])",
        "org.apache.commons.math3.analysis.FunctionUtils.toDifferentiableMultivariateFunction(MultivariateDifferentiableFunction)$MultivariateFunction$1$MultivariateFunction$1#partialDerivative(int)$MultivariateFunction$1#value(double[])",
        "org.apache.commons.math3.optimization.LeastSquaresConverter#value(double[])",
        "org.apache.commons.math3.optimization.direct.SimplexOptimizer#doOptimize()$MultivariateFunction$1#value(double[])"
    ],
    "org.apache.commons.math3.analysis.function.Sinh#value(double)": ["org.apache.commons.math3.util.FastMath.sinh(double)"],
    "org.apache.commons.math3.stat.correlation.StorelessCovariance#initializeMatrix(boolean)": [
        "org.apache.commons.math3.stat.correlation.StorelessBivariateCovariance#StorelessBivariateCovariance(boolean)",
        "org.apache.commons.math3.stat.correlation.StorelessCovariance#setElement(int,int,StorelessBivariateCovariance)"
    ],
    "org.apache.commons.math3.linear.OpenMapRealVector#OpenMapRealVector(int,double)": [
        "org.apache.commons.math3.linear.OpenMapRealVector.<init>()",
        "org.apache.commons.math3.linear.SparseRealVector.<init>()",
        "org.apache.commons.math3.util.OpenIntToDoubleHashMap#OpenIntToDoubleHashMap(double)"
    ],
    "org.apache.commons.math3.distribution.GeometricDistribution#GeometricDistribution(double)": [
        "org.apache.commons.math3.distribution.GeometricDistribution#GeometricDistribution(RandomGenerator,double)",
        "org.apache.commons.math3.random.Well19937c#Well19937c()"
    ],
    "org.apache.commons.math3.util.Precision.round(float,int)": ["org.apache.commons.math3.util.Precision.round(float,int,int)"],
    "org.apache.commons.math3.geometry.spherical.twod.Circle#Circle(Circle)": ["org.apache.commons.math3.geometry.spherical.twod.Circle#Circle(Vector3D,Vector3D,Vector3D,double)"],
    "org.apache.commons.math3.geometry.euclidean.twod.SubLine#SubLine(Segment)": [
        "org.apache.commons.math3.geometry.euclidean.twod.SubLine.<init>()",
        "org.apache.commons.math3.geometry.euclidean.twod.Segment#getStart()",
        "org.apache.commons.math3.geometry.euclidean.twod.Segment#getEnd()",
        "org.apache.commons.math3.geometry.euclidean.twod.SubLine.buildIntervalSet(Vector2D,Vector2D,double)",
        "org.apache.commons.math3.geometry.euclidean.twod.Line#getTolerance()",
        "org.apache.commons.math3.geometry.euclidean.twod.Segment#getLine()",
        "org.apache.commons.math3.geometry.partitioning.AbstractSubHyperplane#AbstractSubHyperplane(Hyperplane<S extends Space>,Region<T extends Space>)"
    ],
    "org.apache.commons.math3.util.Pair#Pair(K,V)": ["org.apache.commons.math3.util.Pair.<init>()"],
    "org.apache.commons.math3.optimization.direct.BaseAbstractMultivariateVectorOptimizer#getEvaluations()": ["org.apache.commons.math3.util.Incrementor#getCount()"],
    "org.apache.commons.math3.stat.correlation.KendallsCorrelation#computeCorrelationMatrix(RealMatrix)": [
        "org.apache.commons.math3.linear.DiagonalMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.Array2DRowRealMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.BlockFieldMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.Array2DRowRealMatrix#setEntry(int,int,double)",
        "org.apache.commons.math3.stat.correlation.KendallsCorrelation#correlation(double[],double[])",
        "org.apache.commons.math3.linear.OpenMapRealMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.BlockRealMatrix#setEntry(int,int,double)",
        "org.apache.commons.math3.linear.OpenMapRealMatrix#setEntry(int,int,double)",
        "org.apache.commons.math3.linear.Array2DRowFieldMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.BlockRealMatrix#BlockRealMatrix(int,int)",
        "org.apache.commons.math3.linear.SparseFieldMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.BlockRealMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.AbstractRealMatrix#getColumn(int)",
        "org.apache.commons.math3.linear.BlockRealMatrix#getColumn(int)",
        "org.apache.commons.math3.linear.DiagonalMatrix#setEntry(int,int,double)"
    ],
    "org.apache.commons.math3.linear.ArrayRealVector#ArrayRealVector(int,double)": [
        "org.apache.commons.math3.linear.RealVector.<init>()",
        "org.apache.commons.math3.linear.ArrayRealVector.<init>()"
    ],
    "org.apache.commons.math3.stat.descriptive.SummaryStatistics#getQuadraticMean()": [
        "org.apache.commons.math3.stat.descriptive.SynchronizedSummaryStatistics#getN()",
        "org.apache.commons.math3.stat.descriptive.SummaryStatistics#getSumsq()",
        "org.apache.commons.math3.stat.descriptive.SynchronizedSummaryStatistics#getSumsq()",
        "org.apache.commons.math3.stat.descriptive.SummaryStatistics#getN()",
        "org.apache.commons.math3.util.FastMath.sqrt(double)"
    ],
    "org.apache.commons.math3.random.EmpiricalDistribution.StreamDataAdapter#StreamDataAdapter(BufferedReader)": [
        "org.apache.commons.math3.random.EmpiricalDistribution.StreamDataAdapter.<init>()",
        "org.apache.commons.math3.random.EmpiricalDistribution.DataAdapter.<init>()"
    ],
    "org.apache.commons.math3.stat.correlation.SpearmansCorrelation#SpearmansCorrelation(RankingAlgorithm)": [
        "org.apache.commons.math3.stat.correlation.SpearmansCorrelation.<init>()",
        "org.apache.commons.math3.stat.ranking.NaNStrategy.<staticinit>()"
    ],
    "org.apache.commons.math3.optimization.BaseMultivariateMultiStartOptimizer#getConvergenceChecker()": [
        "org.apache.commons.math3.optimization.univariate.BaseAbstractUnivariateOptimizer#getConvergenceChecker()",
        "org.apache.commons.math3.optimization.direct.BaseAbstractMultivariateVectorOptimizer#getConvergenceChecker()",
        "org.apache.commons.math3.optimization.univariate.UnivariateMultiStartOptimizer#getConvergenceChecker()",
        "org.apache.commons.math3.optimization.direct.BaseAbstractMultivariateOptimizer#getConvergenceChecker()",
        "org.apache.commons.math3.optimization.BaseMultivariateVectorMultiStartOptimizer#getConvergenceChecker()",
        "org.apache.commons.math3.optimization.BaseMultivariateMultiStartOptimizer#getConvergenceChecker()"
    ],
    "org.apache.commons.math3.optim.linear.LinearConstraint#LinearConstraint(double[],Relationship,double)": [
        "org.apache.commons.math3.linear.ArrayRealVector#ArrayRealVector(double[])",
        "org.apache.commons.math3.optim.linear.LinearConstraint#LinearConstraint(RealVector,Relationship,double)"
    ],
    "org.apache.commons.math3.linear.SymmLQ.State#refineSolution(RealVector)": [
        "org.apache.commons.math3.linear.ArrayRealVector#getDimension()",
        "org.apache.commons.math3.linear.OpenMapRealVector#setEntry(int,double)",
        "org.apache.commons.math3.linear.ArrayRealVector#getEntry(int)",
        "org.apache.commons.math3.linear.ArrayRealVector#setSubVector(int,RealVector)",
        "org.apache.commons.math3.linear.RealVector.unmodifiableRealVector(RealVector)$RealVector$1#setEntry(int,double)",
        "org.apache.commons.math3.linear.ArrayRealVector#setEntry(int,double)",
        "org.apache.commons.math3.linear.OpenMapRealVector#getDimension()",
        "org.apache.commons.math3.linear.SymmLQ.State.<staticinit>()",
        "org.apache.commons.math3.util.FastMath.sqrt(double)",
        "org.apache.commons.math3.linear.RealVector.unmodifiableRealVector(RealVector)$RealVector$1#setSubVector(int,RealVector)",
        "org.apache.commons.math3.linear.RealVector.unmodifiableRealVector(RealVector)$RealVector$1#getDimension()",
        "org.apache.commons.math3.linear.OpenMapRealVector#setSubVector(int,RealVector)",
        "org.apache.commons.math3.linear.OpenMapRealVector#getEntry(int)",
        "org.apache.commons.math3.linear.RealVector.unmodifiableRealVector(RealVector)$RealVector$1#getEntry(int)"
    ],
    "org.apache.commons.math3.geometry.euclidean.oned.Vector1DFormat#Vector1DFormat()": [
        "org.apache.commons.math3.geometry.euclidean.oned.Vector1DFormat.<init>()",
        "org.apache.commons.math3.geometry.VectorFormat#VectorFormat(String,String,String,NumberFormat)",
        "org.apache.commons.math3.util.CompositeFormat.getDefaultNumberFormat()",
        "org.apache.commons.math3.geometry.VectorFormat.<staticinit>()"
    ],
    "org.apache.commons.math3.geometry.partitioning.BSPTree#getCloseCuts(Point<S extends Space>,double)": ["org.apache.commons.math3.geometry.partitioning.BSPTree#recurseCloseCuts(Point<S extends Space>,double,List<BSPTree<S extends Space>>)"],
    "org.apache.commons.math3.linear.PreconditionedIterativeLinearSolver#PreconditionedIterativeLinearSolver(int)": [
        "org.apache.commons.math3.linear.IterativeLinearSolver#IterativeLinearSolver(int)",
        "org.apache.commons.math3.linear.PreconditionedIterativeLinearSolver.<init>()"
    ],
    "org.apache.commons.math3.distribution.EnumeratedDistribution#reseedRandomGenerator(long)": [
        "org.apache.commons.math3.random.RandomGeneratorFactory.createRandomGenerator(Random)$RandomGenerator$1#setSeed(long)",
        "org.apache.commons.math3.random.AbstractWell#setSeed(long)",
        "org.apache.commons.math3.random.RandomAdaptor#setSeed(long)",
        "org.apache.commons.math3.random.SynchronizedRandomGenerator#setSeed(long)",
        "org.apache.commons.math3.random.MersenneTwister#setSeed(long)",
        "org.apache.commons.math3.random.ISAACRandom#setSeed(long)"
    ],
    "org.apache.commons.math3.ode.JacobianMatrices.MismatchedEquations#MismatchedEquations()": [
        "org.apache.commons.math3.ode.JacobianMatrices.MismatchedEquations.<init>()",
        "org.apache.commons.math3.exception.util.LocalizedFormats.<staticinit>()"
    ],
    "org.apache.commons.math3.stat.descriptive.moment.Variance#Variance(Variance)": [
        "org.apache.commons.math3.stat.descriptive.moment.Variance.<init>()",
        "org.apache.commons.math3.stat.descriptive.moment.Variance.copy(Variance,Variance)",
        "org.apache.commons.math3.stat.descriptive.AbstractStorelessUnivariateStatistic.<init>()"
    ],
    "org.apache.commons.math3.stat.descriptive.SynchronizedSummaryStatistics#getSummary()": ["org.apache.commons.math3.stat.descriptive.SummaryStatistics#getSummary()"],
    "org.apache.commons.math3.linear.Array2DRowFieldMatrix#subtract(Array2DRowFieldMatrix<T extends FieldElement>)": [
        "org.apache.commons.math3.util.MathArrays.buildArray(Field<T>,int,int)",
        "org.apache.commons.math3.linear.Array2DRowFieldMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.AbstractFieldMatrix#getField()",
        "org.apache.commons.math3.linear.Array2DRowFieldMatrix#Array2DRowFieldMatrix(Field<T extends FieldElement>,T extends FieldElement[][],boolean)",
        "org.apache.commons.math3.linear.AbstractFieldMatrix#checkSubtractionCompatible(FieldMatrix<T extends FieldElement>)",
        "org.apache.commons.math3.linear.Array2DRowFieldMatrix#getColumnDimension()"
    ],
    "org.apache.commons.math3.random.JDKRandomGenerator#setSeed(int)": ["org.apache.commons.math3.random.JDKRandomGenerator#setSeed(int)"],
    "org.apache.commons.math3.analysis.integration.TrapezoidIntegrator#TrapezoidIntegrator()": [
        "org.apache.commons.math3.analysis.integration.TrapezoidIntegrator.<staticinit>()",
        "org.apache.commons.math3.analysis.integration.BaseAbstractUnivariateIntegrator#BaseAbstractUnivariateIntegrator(int,int)",
        "org.apache.commons.math3.analysis.integration.TrapezoidIntegrator.<init>()",
        "org.apache.commons.math3.analysis.integration.BaseAbstractUnivariateIntegrator.<staticinit>()"
    ],
    "org.apache.commons.math3.stat.inference.TestUtils.tTest(double,StatisticalSummary,double)": [
        "org.apache.commons.math3.stat.inference.TestUtils.<staticinit>()",
        "org.apache.commons.math3.stat.inference.TTest#tTest(double,StatisticalSummary,double)"
    ],
    "org.apache.commons.math3.optimization.SimpleVectorValueChecker#SimpleVectorValueChecker()": [
        "org.apache.commons.math3.optimization.SimpleVectorValueChecker.<init>()",
        "org.apache.commons.math3.optimization.AbstractConvergenceChecker#AbstractConvergenceChecker()",
        "org.apache.commons.math3.optimization.SimpleVectorValueChecker.<staticinit>()"
    ],
    "org.apache.commons.math3.userguide.LowDiscrepancyGeneratorComparison.Plot#paintComponent(Graphics)": [
        "org.apache.commons.math3.userguide.LowDiscrepancyGeneratorComparison.Plot#transform(Vector2D,int,int)",
        "org.apache.commons.math3.geometry.euclidean.twod.Vector2D#toArray()"
    ],
    "org.apache.commons.math3.linear.ArrayFieldVector#ArrayFieldVector(ArrayFieldVector<T extends FieldElement>,T extends FieldElement[])": ["org.apache.commons.math3.linear.ArrayFieldVector#ArrayFieldVector(FieldVector<T extends FieldElement>,T extends FieldElement[])"],
    "org.apache.commons.math3.linear.ArrayRealVector#copy()": ["org.apache.commons.math3.linear.ArrayRealVector#ArrayRealVector(ArrayRealVector,boolean)"],
    "org.apache.commons.math3.analysis.function.Log10#derivative()": [
        "org.apache.commons.math3.analysis.function.Log10#derivative()",
        "org.apache.commons.math3.analysis.function.Power#derivative()",
        "org.apache.commons.math3.analysis.function.Sin#derivative()",
        "org.apache.commons.math3.analysis.function.Exp#derivative()",
        "org.apache.commons.math3.analysis.function.HarmonicOscillator#derivative()",
        "org.apache.commons.math3.analysis.polynomials.PolynomialFunction#derivative()",
        "org.apache.commons.math3.analysis.FunctionUtils.toDifferentiableUnivariateFunction(UnivariateDifferentiableFunction)",
        "org.apache.commons.math3.analysis.function.Logit#derivative()",
        "org.apache.commons.math3.analysis.function.Cbrt#derivative()",
        "org.apache.commons.math3.analysis.FunctionUtils.toDifferentiableUnivariateFunction(UnivariateDifferentiableFunction)$DifferentiableUnivariateFunction$1#derivative()",
        "org.apache.commons.math3.analysis.polynomials.PolynomialSplineFunction#derivative()",
        "org.apache.commons.math3.analysis.function.Cosh#derivative()",
        "org.apache.commons.math3.analysis.function.Identity#derivative()",
        "org.apache.commons.math3.analysis.function.Inverse#derivative()",
        "org.apache.commons.math3.analysis.function.Acosh#derivative()",
        "org.apache.commons.math3.analysis.function.Acos#derivative()",
        "org.apache.commons.math3.analysis.function.Atan#derivative()",
        "org.apache.commons.math3.analysis.function.Log#derivative()",
        "org.apache.commons.math3.analysis.function.Sqrt#derivative()",
        "org.apache.commons.math3.analysis.function.Logistic#derivative()",
        "org.apache.commons.math3.analysis.function.Expm1#derivative()",
        "org.apache.commons.math3.analysis.function.Asinh#derivative()",
        "org.apache.commons.math3.analysis.function.Gaussian#derivative()",
        "org.apache.commons.math3.analysis.function.Sinc#derivative()",
        "org.apache.commons.math3.analysis.function.Sigmoid#derivative()",
        "org.apache.commons.math3.analysis.function.Constant#derivative()",
        "org.apache.commons.math3.analysis.function.Sinh#derivative()",
        "org.apache.commons.math3.analysis.function.Tanh#derivative()",
        "org.apache.commons.math3.analysis.function.Asin#derivative()",
        "org.apache.commons.math3.analysis.function.Minus#derivative()",
        "org.apache.commons.math3.analysis.FunctionUtils.compose(DifferentiableUnivariateFunction[]...)$DifferentiableUnivariateFunction$1#derivative()",
        "org.apache.commons.math3.analysis.FunctionUtils.add(DifferentiableUnivariateFunction[]...)$DifferentiableUnivariateFunction$1#derivative()",
        "org.apache.commons.math3.analysis.FunctionUtils.multiply(DifferentiableUnivariateFunction[]...)$DifferentiableUnivariateFunction$1#derivative()",
        "org.apache.commons.math3.analysis.function.Log1p#derivative()",
        "org.apache.commons.math3.analysis.function.Tan#derivative()",
        "org.apache.commons.math3.analysis.function.Cos#derivative()",
        "org.apache.commons.math3.analysis.function.Atanh#derivative()"
    ],
    "org.apache.commons.math3.random.RandomGeneratorFactory.createRandomGenerator(Random)$RandomGenerator$1#setSeed(int)": [
        "org.apache.commons.math3.random.JDKRandomGenerator#setSeed(int)",
        "org.apache.commons.math3.random.RandomAdaptor#setSeed(long)"
    ],
    "org.apache.commons.math3.ode.nonstiff.DormandPrince54FieldStepInterpolator#create(Field<T extends RealFieldElement>,boolean,T extends RealFieldElement[][],FieldODEStateAndDerivative<T extends RealFieldElement>,FieldODEStateAndDerivative<T extends RealFieldElement>,FieldODEStateAndDerivative<T extends RealFieldElement>,FieldODEStateAndDerivative<T extends RealFieldElement>,FieldEquationsMapper<T extends RealFieldElement>)": ["org.apache.commons.math3.ode.nonstiff.DormandPrince54FieldStepInterpolator#DormandPrince54FieldStepInterpolator(Field<T extends RealFieldElement>,boolean,T extends RealFieldElement[][],FieldODEStateAndDerivative<T extends RealFieldElement>,FieldODEStateAndDerivative<T extends RealFieldElement>,FieldODEStateAndDerivative<T extends RealFieldElement>,FieldODEStateAndDerivative<T extends RealFieldElement>,FieldEquationsMapper<T extends RealFieldElement>)"],
    "org.apache.commons.math3.optim.univariate.UnivariatePointValuePair#UnivariatePointValuePair(double,double)": ["org.apache.commons.math3.optim.univariate.UnivariatePointValuePair.<init>()"],
    "org.apache.commons.math3.optim.nonlinear.vector.jacobian.AbstractLeastSquaresOptimizer#squareRoot(RealMatrix)": [
        "org.apache.commons.math3.linear.EigenDecomposition#EigenDecomposition(RealMatrix)",
        "org.apache.commons.math3.linear.Array2DRowRealMatrix#setEntry(int,int,double)",
        "org.apache.commons.math3.linear.SparseFieldMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.DiagonalMatrix#getEntry(int,int)",
        "org.apache.commons.math3.linear.BlockRealMatrix#setEntry(int,int,double)",
        "org.apache.commons.math3.linear.OpenMapRealMatrix#setEntry(int,int,double)",
        "org.apache.commons.math3.linear.OpenMapRealMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.DiagonalMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.OpenMapRealMatrix#getEntry(int,int)",
        "org.apache.commons.math3.linear.EigenDecomposition#getSquareRoot()",
        "org.apache.commons.math3.linear.BlockRealMatrix#getEntry(int,int)",
        "org.apache.commons.math3.linear.BlockFieldMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.Array2DRowRealMatrix#getEntry(int,int)",
        "org.apache.commons.math3.linear.BlockRealMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.Array2DRowRealMatrix#getRowDimension()",
        "org.apache.commons.math3.util.FastMath.sqrt(double)",
        "org.apache.commons.math3.linear.Array2DRowFieldMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.DiagonalMatrix#setEntry(int,int,double)",
        "org.apache.commons.math3.linear.DiagonalMatrix#DiagonalMatrix(int)"
    ],
    "org.apache.commons.math3.analysis.polynomials.PolynomialsUtils.<staticinit>()": ["org.apache.commons.math3.fraction.BigFraction.<staticinit>()"],
    "org.apache.commons.math3.linear.BlockFieldMatrix#getColumn(int)": [
        "org.apache.commons.math3.linear.BlockFieldMatrix#blockHeight(int)",
        "org.apache.commons.math3.linear.BlockFieldMatrix#blockWidth(int)",
        "org.apache.commons.math3.linear.AbstractFieldMatrix#getField()",
        "org.apache.commons.math3.linear.AbstractFieldMatrix#checkColumnIndex(int)",
        "org.apache.commons.math3.linear.BlockFieldMatrix.<staticinit>()",
        "org.apache.commons.math3.util.MathArrays.buildArray(Field<T>,int)"
    ],
    "org.apache.commons.math3.stat.descriptive.rank.Percentile#evaluate(double[],int,int,double)": [
        "org.apache.commons.math3.stat.descriptive.AbstractUnivariateStatistic#test(double[],int,int)",
        "org.apache.commons.math3.stat.descriptive.rank.Percentile.EstimationType#evaluate(double[],int[],double,KthSelector)",
        "org.apache.commons.math3.stat.descriptive.rank.Percentile#getWorkArray(double[],int,int)",
        "org.apache.commons.math3.exception.util.LocalizedFormats.<staticinit>()",
        "org.apache.commons.math3.stat.descriptive.rank.Percentile#getPivots(double[])"
    ],
    "org.apache.commons.math3.userguide.genetics.HelloWorldExample.StringChromosome#newFixedLengthChromosome(List<Character>)": ["org.apache.commons.math3.userguide.genetics.HelloWorldExample.StringChromosome#StringChromosome(List<Character>)"],
    "org.apache.commons.math3.util.FastMathLiteralArrays.loadExpIntA()": ["org.apache.commons.math3.util.FastMathLiteralArrays.<staticinit>()"],
    "org.apache.commons.math3.optim.univariate.BrentOptimizer#BrentOptimizer(double,double)": ["org.apache.commons.math3.optim.univariate.BrentOptimizer#BrentOptimizer(double,double,ConvergenceChecker<UnivariatePointValuePair>)"],
    "org.apache.commons.math3.util.Precision.equalsIncludingNaN(float,float)": ["org.apache.commons.math3.util.Precision.equals(float,float,int)"],
    "org.apache.commons.math3.optim.univariate.SearchInterval#SearchInterval(double,double)": ["org.apache.commons.math3.optim.univariate.SearchInterval#SearchInterval(double,double,double)"],
    "org.apache.commons.math3.ml.neuralnet.Network#Network(long,int)": ["org.apache.commons.math3.ml.neuralnet.Network.<init>()"],
    "org.apache.commons.math3.optim.PointVectorValuePair#getPointRef()": ["org.apache.commons.math3.util.Pair#getKey()"],
    "org.apache.commons.math3.optimization.linear.LinearObjectiveFunction#LinearObjectiveFunction(double[],double)": [
        "org.apache.commons.math3.linear.ArrayRealVector#ArrayRealVector(double[])",
        "org.apache.commons.math3.optimization.linear.LinearObjectiveFunction#LinearObjectiveFunction(RealVector,double)"
    ],
    "org.apache.commons.math3.optim.SimpleValueChecker#SimpleValueChecker(double,double,int)": [
        "org.apache.commons.math3.optim.AbstractConvergenceChecker#AbstractConvergenceChecker(double,double)",
        "org.apache.commons.math3.optim.SimpleValueChecker.<init>()"
    ],
    "org.apache.commons.math3.linear.AbstractRealMatrix#power(int)": [
        "org.apache.commons.math3.linear.DiagonalMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.Array2DRowRealMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.BlockRealMatrix#copy()",
        "org.apache.commons.math3.linear.MatrixUtils.createRealIdentityMatrix(int)",
        "org.apache.commons.math3.linear.OpenMapRealMatrix#multiply(RealMatrix)",
        "org.apache.commons.math3.linear.OpenMapRealMatrix#copy()",
        "org.apache.commons.math3.exception.util.LocalizedFormats.<staticinit>()",
        "org.apache.commons.math3.linear.OpenMapRealMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.OpenMapRealMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.DiagonalMatrix#getRowDimension()",
        "org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile.FixedCapacityList#add(E)",
        "org.apache.commons.math3.linear.AbstractRealMatrix#isSquare()",
        "org.apache.commons.math3.linear.BlockRealMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.Array2DRowRealMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.NonSquareMatrixException#NonSquareMatrixException(int,int)",
        "org.apache.commons.math3.linear.AbstractRealMatrix#multiply(RealMatrix)",
        "org.apache.commons.math3.linear.Array2DRowRealMatrix#copy()",
        "org.apache.commons.math3.linear.DiagonalMatrix#copy()",
        "org.apache.commons.math3.linear.BlockRealMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.DiagonalMatrix#multiply(RealMatrix)",
        "org.apache.commons.math3.linear.BlockRealMatrix#multiply(RealMatrix)"
    ],
    "org.apache.commons.math3.stat.descriptive.SynchronizedMultivariateSummaryStatistics#getDimension()": ["org.apache.commons.math3.stat.descriptive.MultivariateSummaryStatistics#getDimension()"],
    "org.apache.commons.math3.linear.SingularOperatorException#SingularOperatorException()": [
        "org.apache.commons.math3.linear.SingularOperatorException.<init>()",
        "org.apache.commons.math3.exception.util.LocalizedFormats.<staticinit>()"
    ],
    "org.apache.commons.math3.util.FastMath.tanh(double)": [
        "org.apache.commons.math3.util.FastMath.<staticinit>()",
        "org.apache.commons.math3.util.FastMath.expm1(double,double[])",
        "org.apache.commons.math3.util.FastMath.exp(double,double,double[])"
    ],
    "org.apache.commons.math3.ode.nonstiff.AdaptiveStepsizeIntegrator#sanityChecks(ExpandableStatefulODE,double)": [
        "org.apache.commons.math3.exception.DimensionMismatchException#DimensionMismatchException(int,int)",
        "org.apache.commons.math3.ode.AbstractIntegrator#sanityChecks(ExpandableStatefulODE,double)",
        "org.apache.commons.math3.ode.ExpandableStatefulODE#getPrimaryMapper()",
        "org.apache.commons.math3.ode.EquationsMapper#getDimension()"
    ],
    "org.apache.commons.math3.util.Combinations#iterator()": [
        "org.apache.commons.math3.exception.MathInternalError#MathInternalError()",
        "org.apache.commons.math3.util.Combinations.LexicographicIterator#LexicographicIterator(int,int)",
        "org.apache.commons.math3.util.MathArrays.natural(int)",
        "org.apache.commons.math3.util.Combinations.IterationOrder.<staticinit>()",
        "org.apache.commons.math3.util.Combinations.SingletonIterator#SingletonIterator(int[])"
    ],
    "org.apache.commons.math3.stat.StatUtils.variance(double[],double)": [
        "org.apache.commons.math3.stat.StatUtils.<staticinit>()",
        "org.apache.commons.math3.stat.descriptive.moment.Variance#evaluate(double[],double)"
    ],
    "org.apache.commons.math3.optimization.linear.SimplexTableau.getInvertedCoefficientSum(RealVector)": [
        "org.apache.commons.math3.linear.RealVector.unmodifiableRealVector(RealVector)$RealVector$1#toArray()",
        "org.apache.commons.math3.linear.OpenMapRealVector#toArray()",
        "org.apache.commons.math3.linear.RealVector#toArray()",
        "org.apache.commons.math3.linear.ArrayRealVector#toArray()"
    ],
    "org.apache.commons.math3.analysis.differentiation.DSCompiler#linearCombination(double,double[],int,double,double[],int,double,double[],int,double[],int)": [
        "org.apache.commons.math3.analysis.differentiation.DSCompiler#getSize()",
        "org.apache.commons.math3.util.MathArrays.linearCombination(double,double,double,double,double,double)"
    ],
    "org.apache.commons.math3.genetics.ListPopulation#addChromosomes(Collection<Chromosome>)": ["org.apache.commons.math3.exception.util.LocalizedFormats.<staticinit>()"],
    "org.apache.commons.math3.optim.linear.SimplexTableau#hashCode()": [
        "org.apache.commons.math3.linear.AbstractRealMatrix#hashCode()",
        "org.apache.commons.math3.optim.linear.LinearObjectiveFunction#hashCode()"
    ],
    "org.apache.commons.math3.geometry.euclidean.threed.Vector3D#toString(NumberFormat)": [
        "org.apache.commons.math3.geometry.euclidean.threed.Vector3DFormat#Vector3DFormat(NumberFormat)",
        "org.apache.commons.math3.geometry.VectorFormat#format(Vector<S extends Space>)"
    ],
    "org.apache.commons.math3.ode.nonstiff.EmbeddedRungeKuttaFieldIntegrator#fraction(double,double)": [
        "org.apache.commons.math3.ode.AbstractFieldIntegrator#getField()",
        "org.apache.commons.math3.analysis.differentiation.SparseGradient#multiply(double)",
        "org.apache.commons.math3.fraction.BigFractionField#getOne()",
        "org.apache.commons.math3.fraction.FractionField#getOne()",
        "org.apache.commons.math3.dfp.Dfp#multiply(double)",
        "org.apache.commons.math3.analysis.differentiation.SparseGradient#getField()$Field$1#getOne()",
        "org.apache.commons.math3.complex.ComplexField#getOne()",
        "org.apache.commons.math3.util.BigRealField#getOne()",
        "org.apache.commons.math3.util.Decimal64#multiply(double)",
        "org.apache.commons.math3.analysis.differentiation.DerivativeStructure#multiply(double)",
        "org.apache.commons.math3.dfp.DfpField#getOne()",
        "org.apache.commons.math3.analysis.differentiation.DerivativeStructure#getField()$Field$1#getOne()",
        "org.apache.commons.math3.util.Decimal64Field#getOne()"
    ],
    "org.apache.commons.math3.optimization.linear.LinearConstraint#LinearConstraint(double[],double,Relationship,double[],double)": [
        "org.apache.commons.math3.linear.ArrayRealVector#ArrayRealVector(double[],boolean)",
        "org.apache.commons.math3.optimization.linear.LinearConstraint.<init>()"
    ],
    "org.apache.commons.math3.geometry.euclidean.threed.Vector3DFormat#parse(String)": [
        "org.apache.commons.math3.geometry.euclidean.threed.Vector3DFormat#parse(String,ParsePosition)",
        "org.apache.commons.math3.exception.MathParseException#MathParseException(String,int,Class<?>)"
    ],
    "org.apache.commons.math3.userguide.genetics.PolygonChromosome.setRefImage(BufferedImage)": ["org.apache.commons.math3.userguide.genetics.PolygonChromosome.<staticinit>()"],
    "org.apache.commons.math3.util.MultidimensionalCounter.Iterator#Iterator()": ["org.apache.commons.math3.util.MultidimensionalCounter.Iterator.<init>()"],
    "org.apache.commons.math3.optim.nonlinear.scalar.LineSearch#search(double[],double[])": [
        "org.apache.commons.math3.optim.nonlinear.scalar.LineSearch#search(double[],double[])$UnivariateFunction$1.<init>()",
        "org.apache.commons.math3.optim.univariate.BracketFinder#getMid()",
        "org.apache.commons.math3.optim.univariate.BracketFinder#getLo()",
        "org.apache.commons.math3.optim.univariate.BracketFinder#getHi()",
        "org.apache.commons.math3.optim.univariate.BracketFinder#search(UnivariateFunction,GoalType,double,double)",
        "org.apache.commons.math3.optim.univariate.UnivariateObjectiveFunction#UnivariateObjectiveFunction(UnivariateFunction)",
        "org.apache.commons.math3.optim.MaxEval#MaxEval(int)",
        "org.apache.commons.math3.optim.nonlinear.scalar.MultivariateOptimizer#getGoalType()",
        "org.apache.commons.math3.optim.univariate.SearchInterval#SearchInterval(double,double,double)"
    ],
    "org.apache.commons.math3.fitting.PolynomialCurveFitter.<staticinit>()": ["org.apache.commons.math3.analysis.polynomials.PolynomialFunction.Parametric.<init>()"],
    "org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile.Markers#adjustHeightsOfMarkers()": [
        "org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile.Markers#estimate(int)",
        "org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile.Markers.<staticinit>()"
    ],
    "org.apache.commons.math3.distribution.AbstractIntegerDistribution#inverseCumulativeProbability(double)": [
        "org.apache.commons.math3.distribution.PoissonDistribution#getSupportLowerBound()",
        "org.apache.commons.math3.distribution.GeometricDistribution#getSupportUpperBound()",
        "org.apache.commons.math3.distribution.HypergeometricDistribution#getSupportLowerBound()",
        "org.apache.commons.math3.distribution.BinomialDistribution#getSupportLowerBound()",
        "org.apache.commons.math3.distribution.PascalDistribution#getNumericalVariance()",
        "org.apache.commons.math3.distribution.ZipfDistribution#getSupportUpperBound()",
        "org.apache.commons.math3.distribution.UniformIntegerDistribution#getSupportLowerBound()",
        "org.apache.commons.math3.distribution.PascalDistribution#getSupportLowerBound()",
        "org.apache.commons.math3.distribution.HypergeometricDistribution#getNumericalVariance()",
        "org.apache.commons.math3.distribution.BinomialDistribution#getNumericalVariance()",
        "org.apache.commons.math3.distribution.EnumeratedIntegerDistribution#getSupportUpperBound()",
        "org.apache.commons.math3.distribution.PascalDistribution#getNumericalMean()",
        "org.apache.commons.math3.distribution.PoissonDistribution#getNumericalVariance()",
        "org.apache.commons.math3.util.FastMath.sqrt(double)",
        "org.apache.commons.math3.distribution.UniformIntegerDistribution#getNumericalMean()",
        "org.apache.commons.math3.distribution.ZipfDistribution#getSupportLowerBound()",
        "org.apache.commons.math3.distribution.BinomialDistribution#getSupportUpperBound()",
        "org.apache.commons.math3.distribution.GeometricDistribution#getSupportLowerBound()",
        "org.apache.commons.math3.distribution.ZipfDistribution#getNumericalVariance()",
        "org.apache.commons.math3.distribution.BinomialDistribution#getNumericalMean()",
        "org.apache.commons.math3.distribution.ZipfDistribution#getNumericalMean()",
        "org.apache.commons.math3.util.FastMath.ceil(double)",
        "org.apache.commons.math3.distribution.PoissonDistribution#getNumericalMean()",
        "org.apache.commons.math3.distribution.HypergeometricDistribution#getSupportUpperBound()",
        "org.apache.commons.math3.distribution.AbstractIntegerDistribution#solveInverseCumulativeProbability(double,int,int)",
        "org.apache.commons.math3.distribution.PascalDistribution#getSupportUpperBound()",
        "org.apache.commons.math3.distribution.GeometricDistribution#getNumericalVariance()",
        "org.apache.commons.math3.distribution.UniformIntegerDistribution#getSupportUpperBound()",
        "org.apache.commons.math3.distribution.EnumeratedIntegerDistribution#getNumericalVariance()",
        "org.apache.commons.math3.distribution.EnumeratedIntegerDistribution#getSupportLowerBound()",
        "org.apache.commons.math3.distribution.EnumeratedIntegerDistribution#getNumericalMean()",
        "org.apache.commons.math3.distribution.PoissonDistribution#getSupportUpperBound()",
        "org.apache.commons.math3.distribution.AbstractIntegerDistribution#checkedCumulativeProbability(int)",
        "org.apache.commons.math3.distribution.GeometricDistribution#getNumericalMean()",
        "org.apache.commons.math3.distribution.UniformIntegerDistribution#getNumericalVariance()",
        "org.apache.commons.math3.distribution.HypergeometricDistribution#getNumericalMean()"
    ],
    "org.apache.commons.math3.util.Combinations#Combinations(int,int,IterationOrder)": [
        "org.apache.commons.math3.util.Combinations.<init>()",
        "org.apache.commons.math3.util.CombinatoricsUtils.checkBinomial(int,int)",
        "org.apache.commons.math3.util.Combinations.IterationOrder.<staticinit>()"
    ],
    "org.apache.commons.math3.fraction.ProperFractionFormat#format(Fraction,StringBuffer,FieldPosition)": [
        "org.apache.commons.math3.util.FastMath.abs(int)",
        "org.apache.commons.math3.fraction.AbstractFormat#getNumeratorFormat()",
        "org.apache.commons.math3.fraction.ProperFractionFormat#getWholeFormat()",
        "org.apache.commons.math3.fraction.BigFractionFormat#format(Object,StringBuffer,FieldPosition)",
        "org.apache.commons.math3.fraction.AbstractFormat#getDenominatorFormat()",
        "org.apache.commons.math3.fraction.AbstractFormat#format(double,StringBuffer,FieldPosition)",
        "org.apache.commons.math3.fraction.Fraction#getDenominator()",
        "org.apache.commons.math3.fraction.FractionFormat#format(Object,StringBuffer,FieldPosition)",
        "org.apache.commons.math3.fraction.Fraction#getNumerator()"
    ],
    "org.apache.commons.math3.optim.nonlinear.vector.jacobian.AbstractLeastSquaresOptimizer#computeWeightedJacobian(double[])": [
        "org.apache.commons.math3.linear.MatrixUtils.createRealMatrix(double[][])",
        "org.apache.commons.math3.optim.nonlinear.vector.JacobianMultivariateVectorOptimizer#computeJacobian(double[])",
        "org.apache.commons.math3.linear.DiagonalMatrix#multiply(RealMatrix)",
        "org.apache.commons.math3.linear.AbstractRealMatrix#multiply(RealMatrix)",
        "org.apache.commons.math3.linear.BlockRealMatrix#multiply(RealMatrix)",
        "org.apache.commons.math3.linear.OpenMapRealMatrix#multiply(RealMatrix)"
    ],
    "org.apache.commons.math3.stat.Frequency#getCumFreq(int)": ["org.apache.commons.math3.stat.Frequency#getCumFreq(Comparable<?>)"],
    "org.apache.commons.math3.ml.neuralnet.twod.util.UnifiedDistanceMatrix#computeImage(NeuronSquareMesh2D)": [
        "org.apache.commons.math3.ml.neuralnet.twod.util.UnifiedDistanceMatrix#individualDistances(NeuronSquareMesh2D)",
        "org.apache.commons.math3.ml.neuralnet.twod.util.UnifiedDistanceMatrix#averageDistances(NeuronSquareMesh2D)"
    ],
    "org.apache.commons.math3.stat.inference.TTest#t(StatisticalSummary,StatisticalSummary)": [
        "org.apache.commons.math3.stat.descriptive.SummaryStatistics#getVariance()",
        "org.apache.commons.math3.stat.descriptive.StatisticalSummaryValues#getVariance()",
        "org.apache.commons.math3.stat.descriptive.DescriptiveStatistics#getN()",
        "org.apache.commons.math3.stat.descriptive.AggregateSummaryStatistics#getMean()",
        "org.apache.commons.math3.stat.descriptive.SummaryStatistics#getMean()",
        "org.apache.commons.math3.stat.descriptive.SynchronizedSummaryStatistics#getVariance()",
        "org.apache.commons.math3.stat.descriptive.StatisticalSummaryValues#getN()",
        "org.apache.commons.math3.stat.descriptive.SummaryStatistics#getN()",
        "org.apache.commons.math3.stat.inference.TTest#t(double,double,double,double,double,double)",
        "org.apache.commons.math3.stat.descriptive.StatisticalSummaryValues#getMean()",
        "org.apache.commons.math3.stat.descriptive.AggregateSummaryStatistics#getN()",
        "org.apache.commons.math3.stat.inference.TTest#checkSampleData(StatisticalSummary)",
        "org.apache.commons.math3.stat.descriptive.AggregateSummaryStatistics#getVariance()",
        "org.apache.commons.math3.stat.descriptive.SynchronizedSummaryStatistics#getN()",
        "org.apache.commons.math3.stat.descriptive.DescriptiveStatistics#getMean()",
        "org.apache.commons.math3.stat.descriptive.SynchronizedSummaryStatistics#getMean()",
        "org.apache.commons.math3.stat.descriptive.DescriptiveStatistics#getVariance()",
        "org.apache.commons.math3.stat.descriptive.SynchronizedDescriptiveStatistics#getN()"
    ],
    "org.apache.commons.math3.optim.nonlinear.scalar.GradientMultivariateOptimizer#optimize(OptimizationData[]...)": ["org.apache.commons.math3.optim.nonlinear.scalar.MultivariateOptimizer#optimize(OptimizationData[]...)"],
    "org.apache.commons.math3.random.RandomDataImpl#nextCauchy(double,double)": ["org.apache.commons.math3.random.RandomDataGenerator#nextCauchy(double,double)"],
    "org.apache.commons.math3.transform.FastHadamardTransformer#transform(int[])": ["org.apache.commons.math3.transform.FastHadamardTransformer#fht(int[])"],
    "org.apache.commons.math3.ode.nonstiff.ClassicalRungeKuttaFieldIntegrator#ClassicalRungeKuttaFieldIntegrator(Field<T extends RealFieldElement>,T extends RealFieldElement)": [
        "org.apache.commons.math3.ode.nonstiff.ClassicalRungeKuttaFieldIntegrator.<init>()",
        "org.apache.commons.math3.ode.nonstiff.RungeKuttaFieldIntegrator#RungeKuttaFieldIntegrator(Field<T extends RealFieldElement>,String,T extends RealFieldElement)"
    ],
    "org.apache.commons.math3.geometry.euclidean.oned.Vector1D#distanceInf(Vector<Euclidean1D>)": ["org.apache.commons.math3.util.FastMath.abs(double)"],
    "org.apache.commons.math3.stat.inference.MannWhitneyUTest#MannWhitneyUTest(NaNStrategy,TiesStrategy)": [
        "org.apache.commons.math3.stat.inference.MannWhitneyUTest.<init>()",
        "org.apache.commons.math3.stat.ranking.NaturalRanking#NaturalRanking(NaNStrategy,TiesStrategy)"
    ],
    "org.apache.commons.math3.util.Decimal64#reciprocal()": ["org.apache.commons.math3.util.Decimal64#Decimal64(double)"],
    "org.apache.commons.math3.linear.BlockRealMatrix#multiply(BlockRealMatrix)": [
        "org.apache.commons.math3.linear.MatrixUtils.checkMultiplicationCompatible(AnyMatrix,AnyMatrix)",
        "org.apache.commons.math3.linear.BlockRealMatrix.<staticinit>()",
        "org.apache.commons.math3.util.FastMath.min(int,int)",
        "org.apache.commons.math3.linear.BlockRealMatrix#blockWidth(int)",
        "org.apache.commons.math3.linear.BlockRealMatrix#BlockRealMatrix(int,int)"
    ],
    "org.apache.commons.math3.util.IntegerSequence.Range#iterator()": [
        "org.apache.commons.math3.util.IntegerSequence.Incrementor#withStart(int)",
        "org.apache.commons.math3.util.IntegerSequence.Incrementor.create()",
        "org.apache.commons.math3.util.IntegerSequence.Incrementor#withIncrement(int)",
        "org.apache.commons.math3.util.IntegerSequence.Incrementor#withMaximalCount(int)"
    ],
    "org.apache.commons.math3.linear.Array2DRowFieldMatrix#addToEntry(int,int,T extends FieldElement)": [
        "org.apache.commons.math3.linear.AbstractFieldMatrix#checkColumnIndex(int)",
        "org.apache.commons.math3.linear.AbstractFieldMatrix#checkRowIndex(int)"
    ],
    "org.apache.commons.math3.ode.nonstiff.AdamsIntegrator#updateHighOrderDerivativesPhase1(Array2DRowRealMatrix)": ["org.apache.commons.math3.ode.nonstiff.AdamsNordsieckTransformer#updateHighOrderDerivativesPhase1(Array2DRowRealMatrix)"],
    "org.apache.commons.math3.optim.nonlinear.scalar.MultivariateFunctionMappingAdapter.UpperBoundMapper#unboundedToBounded(double)": ["org.apache.commons.math3.util.FastMath.exp(double)"],
    "org.apache.commons.math3.genetics.RandomKey#isSame(Chromosome)": ["org.apache.commons.math3.genetics.AbstractListChromosome#getLength()"],
    "org.apache.commons.math3.ode.nonstiff.AdamsIntegrator#AdamsIntegrator(String,int,int,double,double,double[],double[])": [
        "org.apache.commons.math3.ode.nonstiff.AdamsNordsieckTransformer.getInstance(int)",
        "org.apache.commons.math3.ode.MultistepIntegrator#MultistepIntegrator(String,int,int,double,double,double[],double[])",
        "org.apache.commons.math3.ode.nonstiff.AdamsIntegrator.<init>()"
    ],
    "org.apache.commons.math3.ode.nonstiff.EulerFieldStepInterpolator#create(Field<T extends RealFieldElement>,boolean,T extends RealFieldElement[][],FieldODEStateAndDerivative<T extends RealFieldElement>,FieldODEStateAndDerivative<T extends RealFieldElement>,FieldODEStateAndDerivative<T extends RealFieldElement>,FieldODEStateAndDerivative<T extends RealFieldElement>,FieldEquationsMapper<T extends RealFieldElement>)": ["org.apache.commons.math3.ode.nonstiff.EulerFieldStepInterpolator#EulerFieldStepInterpolator(Field<T extends RealFieldElement>,boolean,T extends RealFieldElement[][],FieldODEStateAndDerivative<T extends RealFieldElement>,FieldODEStateAndDerivative<T extends RealFieldElement>,FieldODEStateAndDerivative<T extends RealFieldElement>,FieldODEStateAndDerivative<T extends RealFieldElement>,FieldEquationsMapper<T extends RealFieldElement>)"],
    "org.apache.commons.math3.linear.RealVector.unmodifiableRealVector(RealVector)$RealVector$1#sparseIterator()": [
        "org.apache.commons.math3.linear.OpenMapRealVector#sparseIterator()",
        "org.apache.commons.math3.linear.RealVector.unmodifiableRealVector(RealVector)$RealVector$1#sparseIterator()",
        "org.apache.commons.math3.linear.RealVector.unmodifiableRealVector(RealVector)$Iterator$1$Iterator$1#sparseIterator()$Iterator$1.<init>()",
        "org.apache.commons.math3.linear.RealVector#sparseIterator()"
    ],
    "org.apache.commons.math3.stat.regression.MillerUpdatingRegression#cov(int)": ["org.apache.commons.math3.stat.regression.MillerUpdatingRegression#inverse(double[],int)"],
    "org.apache.commons.math3.optimization.univariate.UnivariateMultiStartOptimizer#optimize(int,FUNC extends UnivariateFunction,GoalType,double,double)": ["org.apache.commons.math3.optimization.univariate.UnivariateMultiStartOptimizer#optimize(int,FUNC extends UnivariateFunction,GoalType,double,double,double)"],
    "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.MultiDirectionalSimplex#evaluateNewSimplex(MultivariateFunction,PointValuePair[],double,Comparator<PointValuePair>)": [
        "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.AbstractSimplex#setPoint(int,PointValuePair)",
        "org.apache.commons.math3.optim.PointValuePair#getPointRef()",
        "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.AbstractSimplex#getSize()",
        "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.AbstractSimplex#evaluate(MultivariateFunction,Comparator<PointValuePair>)",
        "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.AbstractSimplex#getDimension()",
        "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.AbstractSimplex#getPoint(int)",
        "org.apache.commons.math3.optim.PointValuePair#PointValuePair(double[],double,boolean)"
    ],
    "org.apache.commons.math3.stat.descriptive.SynchronizedSummaryStatistics#SynchronizedSummaryStatistics()": [
        "org.apache.commons.math3.stat.descriptive.SummaryStatistics#SummaryStatistics()",
        "org.apache.commons.math3.stat.descriptive.SynchronizedSummaryStatistics.<init>()"
    ],
    "org.apache.commons.math3.ode.FieldExpandableODE#FieldExpandableODE(FirstOrderFieldDifferentialEquations<T extends RealFieldElement>)": [
        "org.apache.commons.math3.ode.FieldEquationsMapper#FieldEquationsMapper(FieldEquationsMapper<T extends RealFieldElement>,int)",
        "org.apache.commons.math3.ode.FieldExpandableODE.<init>()"
    ],
    "org.apache.commons.math3.stat.descriptive.moment.Variance#Variance()": [
        "org.apache.commons.math3.stat.descriptive.moment.SecondMoment#SecondMoment()",
        "org.apache.commons.math3.stat.descriptive.moment.Variance.<init>()",
        "org.apache.commons.math3.stat.descriptive.AbstractStorelessUnivariateStatistic.<init>()"
    ],
    "org.apache.commons.math3.analysis.function.StepFunction#StepFunction(double[],double[])": [
        "org.apache.commons.math3.exception.DimensionMismatchException#DimensionMismatchException(int,int)",
        "org.apache.commons.math3.exception.NoDataException#NoDataException()",
        "org.apache.commons.math3.exception.NullArgumentException#NullArgumentException()",
        "org.apache.commons.math3.analysis.function.StepFunction.<init>()",
        "org.apache.commons.math3.util.MathArrays.checkOrder(double[])",
        "org.apache.commons.math3.util.MathArrays.copyOf(double[])"
    ],
    "org.apache.commons.math3.stat.inference.TestUtils.tTest(double[],double[],double)": [
        "org.apache.commons.math3.stat.inference.TestUtils.<staticinit>()",
        "org.apache.commons.math3.stat.inference.TTest#tTest(double[],double[],double)"
    ],
    "org.apache.commons.math3.analysis.function.Atanh#derivative()": [
        "org.apache.commons.math3.analysis.function.Log10#derivative()",
        "org.apache.commons.math3.analysis.function.Power#derivative()",
        "org.apache.commons.math3.analysis.function.Sin#derivative()",
        "org.apache.commons.math3.analysis.function.Exp#derivative()",
        "org.apache.commons.math3.analysis.function.HarmonicOscillator#derivative()",
        "org.apache.commons.math3.analysis.polynomials.PolynomialFunction#derivative()",
        "org.apache.commons.math3.analysis.FunctionUtils.toDifferentiableUnivariateFunction(UnivariateDifferentiableFunction)",
        "org.apache.commons.math3.analysis.function.Logit#derivative()",
        "org.apache.commons.math3.analysis.function.Cbrt#derivative()",
        "org.apache.commons.math3.analysis.FunctionUtils.toDifferentiableUnivariateFunction(UnivariateDifferentiableFunction)$DifferentiableUnivariateFunction$1#derivative()",
        "org.apache.commons.math3.analysis.polynomials.PolynomialSplineFunction#derivative()",
        "org.apache.commons.math3.analysis.function.Cosh#derivative()",
        "org.apache.commons.math3.analysis.function.Identity#derivative()",
        "org.apache.commons.math3.analysis.function.Inverse#derivative()",
        "org.apache.commons.math3.analysis.function.Acosh#derivative()",
        "org.apache.commons.math3.analysis.function.Acos#derivative()",
        "org.apache.commons.math3.analysis.function.Atan#derivative()",
        "org.apache.commons.math3.analysis.function.Log#derivative()",
        "org.apache.commons.math3.analysis.function.Sqrt#derivative()",
        "org.apache.commons.math3.analysis.function.Logistic#derivative()",
        "org.apache.commons.math3.analysis.function.Expm1#derivative()",
        "org.apache.commons.math3.analysis.function.Asinh#derivative()",
        "org.apache.commons.math3.analysis.function.Gaussian#derivative()",
        "org.apache.commons.math3.analysis.function.Sinc#derivative()",
        "org.apache.commons.math3.analysis.function.Sigmoid#derivative()",
        "org.apache.commons.math3.analysis.function.Constant#derivative()",
        "org.apache.commons.math3.analysis.function.Sinh#derivative()",
        "org.apache.commons.math3.analysis.function.Tanh#derivative()",
        "org.apache.commons.math3.analysis.function.Asin#derivative()",
        "org.apache.commons.math3.analysis.function.Minus#derivative()",
        "org.apache.commons.math3.analysis.FunctionUtils.compose(DifferentiableUnivariateFunction[]...)$DifferentiableUnivariateFunction$1#derivative()",
        "org.apache.commons.math3.analysis.FunctionUtils.add(DifferentiableUnivariateFunction[]...)$DifferentiableUnivariateFunction$1#derivative()",
        "org.apache.commons.math3.analysis.FunctionUtils.multiply(DifferentiableUnivariateFunction[]...)$DifferentiableUnivariateFunction$1#derivative()",
        "org.apache.commons.math3.analysis.function.Log1p#derivative()",
        "org.apache.commons.math3.analysis.function.Tan#derivative()",
        "org.apache.commons.math3.analysis.function.Cos#derivative()",
        "org.apache.commons.math3.analysis.function.Atanh#derivative()"
    ],
    "org.apache.commons.math3.exception.util.ExceptionContext#getMessage()": ["org.apache.commons.math3.exception.util.ExceptionContext#getMessage(Locale)"],
    "org.apache.commons.math3.fitting.leastsquares.DenseWeightedEvaluation#getPoint()": [
        "org.apache.commons.math3.fitting.leastsquares.DenseWeightedEvaluation#getPoint()",
        "org.apache.commons.math3.fitting.leastsquares.LeastSquaresFactory.LocalLeastSquaresProblem.LazyUnweightedEvaluation#getPoint()",
        "org.apache.commons.math3.fitting.leastsquares.OptimumImpl#getPoint()",
        "org.apache.commons.math3.fitting.leastsquares.LeastSquaresFactory.LocalLeastSquaresProblem.UnweightedEvaluation#getPoint()"
    ],
    "org.apache.commons.math3.transform.TransformUtils#TransformUtils()": ["org.apache.commons.math3.transform.TransformUtils.<init>()"],
    "org.apache.commons.math3.stat.descriptive.SummaryStatistics.<init>()": [
        "org.apache.commons.math3.stat.descriptive.summary.Sum#Sum()",
        "org.apache.commons.math3.stat.descriptive.moment.Variance#Variance(SecondMoment)",
        "org.apache.commons.math3.stat.descriptive.rank.Max#Max()",
        "org.apache.commons.math3.stat.descriptive.moment.SecondMoment#SecondMoment()",
        "org.apache.commons.math3.stat.descriptive.summary.SumOfSquares#SumOfSquares()",
        "org.apache.commons.math3.stat.descriptive.moment.GeometricMean#GeometricMean(SumOfLogs)",
        "org.apache.commons.math3.stat.descriptive.moment.Mean#Mean(FirstMoment)",
        "org.apache.commons.math3.stat.descriptive.summary.SumOfLogs#SumOfLogs()",
        "org.apache.commons.math3.stat.descriptive.rank.Min#Min()"
    ],
    "org.apache.commons.math3.random.BitsStreamGenerator#nextInt()": [
        "org.apache.commons.math3.random.ISAACRandom#next(int)",
        "org.apache.commons.math3.random.MersenneTwister#next(int)",
        "org.apache.commons.math3.random.Well19937a#next(int)",
        "org.apache.commons.math3.random.Well1024a#next(int)",
        "org.apache.commons.math3.random.Well44497b#next(int)",
        "org.apache.commons.math3.random.Well512a#next(int)",
        "org.apache.commons.math3.random.Well44497a#next(int)",
        "org.apache.commons.math3.random.Well19937c#next(int)"
    ],
    "org.apache.commons.math3.geometry.spherical.twod.S2Point#S2Point(double,double)": [
        "org.apache.commons.math3.geometry.spherical.twod.S2Point#S2Point(double,double,Vector3D)",
        "org.apache.commons.math3.geometry.spherical.twod.S2Point.vector(double,double)"
    ],
    "org.apache.commons.math3.ode.nonstiff.EulerFieldIntegrator#getB()": [
        "org.apache.commons.math3.ode.AbstractFieldIntegrator#getField()",
        "org.apache.commons.math3.fraction.BigFractionField#getOne()",
        "org.apache.commons.math3.fraction.FractionField#getOne()",
        "org.apache.commons.math3.analysis.differentiation.SparseGradient#getField()$Field$1#getOne()",
        "org.apache.commons.math3.dfp.DfpField#getOne()",
        "org.apache.commons.math3.analysis.differentiation.DerivativeStructure#getField()$Field$1#getOne()",
        "org.apache.commons.math3.util.MathArrays.buildArray(Field<T>,int)",
        "org.apache.commons.math3.util.Decimal64Field#getOne()",
        "org.apache.commons.math3.complex.ComplexField#getOne()",
        "org.apache.commons.math3.util.BigRealField#getOne()"
    ],
    "org.apache.commons.math3.linear.MatrixDimensionMismatchException#getWrongColumnDimension()": ["org.apache.commons.math3.exception.MultiDimensionMismatchException#getWrongDimension(int)"],
    "org.apache.commons.math3.dfp.Dfp#isInfinite()": ["org.apache.commons.math3.dfp.Dfp.<staticinit>()"],
    "org.apache.commons.math3.transform.FastSineTransformer#FastSineTransformer(DstNormalization)": ["org.apache.commons.math3.transform.FastSineTransformer.<init>()"],
    "org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile.<init>()": [
        "org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile.<staticinit>()",
        "org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile.FixedCapacityList#FixedCapacityList(int)"
    ],
    "org.apache.commons.math3.geometry.spherical.oned.S1Point#S1Point(double)": [
        "org.apache.commons.math3.geometry.spherical.oned.S1Point#S1Point(double,Vector2D)",
        "org.apache.commons.math3.util.FastMath.sin(double)",
        "org.apache.commons.math3.geometry.euclidean.twod.Vector2D#Vector2D(double,double)",
        "org.apache.commons.math3.util.MathUtils.normalizeAngle(double,double)",
        "org.apache.commons.math3.util.FastMath.<staticinit>()",
        "org.apache.commons.math3.util.FastMath.cos(double)"
    ],
    "org.apache.commons.math3.linear.RealVectorFormat#parse(String,ParsePosition)": [
        "org.apache.commons.math3.linear.ArrayRealVector#ArrayRealVector(double[],boolean)",
        "org.apache.commons.math3.util.CompositeFormat.parseNumber(String,NumberFormat,ParsePosition)",
        "org.apache.commons.math3.util.CompositeFormat.parseFixedstring(String,String,ParsePosition)",
        "org.apache.commons.math3.util.CompositeFormat.parseAndIgnoreWhitespace(String,ParsePosition)"
    ],
    "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.AbstractSimplex#setPoints(PointValuePair[])": ["org.apache.commons.math3.exception.DimensionMismatchException#DimensionMismatchException(int,int)"],
    "org.apache.commons.math3.linear.BlockRealMatrix#setColumnMatrix(int,BlockRealMatrix)": [
        "org.apache.commons.math3.linear.BlockRealMatrix#blockHeight(int)",
        "org.apache.commons.math3.linear.BlockRealMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.BlockRealMatrix#blockWidth(int)",
        "org.apache.commons.math3.linear.MatrixUtils.checkColumnIndex(AnyMatrix,int)",
        "org.apache.commons.math3.linear.BlockRealMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.MatrixDimensionMismatchException#MatrixDimensionMismatchException(int,int,int,int)",
        "org.apache.commons.math3.linear.BlockRealMatrix.<staticinit>()"
    ],
    "org.apache.commons.math3.analysis.polynomials.PolynomialsUtils.createHermitePolynomial(int)": [
        "org.apache.commons.math3.analysis.polynomials.PolynomialsUtils.createHermitePolynomial(int)$RecurrenceCoefficientsGenerator$1.<init>()",
        "org.apache.commons.math3.analysis.polynomials.PolynomialsUtils.<staticinit>()",
        "org.apache.commons.math3.analysis.polynomials.PolynomialsUtils.buildPolynomial(int,List<BigFraction>,RecurrenceCoefficientsGenerator)"
    ],
    "org.apache.commons.math3.geometry.spherical.twod.EdgesBuilder#getFollowingEdge(Edge)": [
        "org.apache.commons.math3.geometry.spherical.twod.Vertex#getIncoming()",
        "org.apache.commons.math3.geometry.partitioning.BSPTree#getCloseCuts(Point<S extends Space>,double)",
        "org.apache.commons.math3.geometry.spherical.twod.Vertex#getLocation()",
        "org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(Vector3D,Vector3D)",
        "org.apache.commons.math3.exception.util.LocalizedFormats.<staticinit>()",
        "org.apache.commons.math3.geometry.spherical.twod.Edge#getStart()",
        "org.apache.commons.math3.geometry.spherical.twod.Edge#getEnd()",
        "org.apache.commons.math3.geometry.spherical.twod.S2Point#getVector()"
    ],
    "org.apache.commons.math3.stat.descriptive.SynchronizedMultivariateSummaryStatistics#getSumLogImpl()": ["org.apache.commons.math3.stat.descriptive.MultivariateSummaryStatistics#getSumLogImpl()"],
    "org.apache.commons.math3.genetics.OrderedCrossover#mate(AbstractListChromosome<T>,AbstractListChromosome<T>)": [
        "org.apache.commons.math3.exception.DimensionMismatchException#DimensionMismatchException(int,int)",
        "org.apache.commons.math3.genetics.AbstractListChromosome#getRepresentation()",
        "org.apache.commons.math3.genetics.ChromosomePair#ChromosomePair(Chromosome,Chromosome)",
        "org.apache.commons.math3.genetics.GeneticAlgorithm.getRandomGenerator()",
        "org.apache.commons.math3.random.RandomGeneratorFactory.createRandomGenerator(Random)$RandomGenerator$1#nextInt(int)",
        "org.apache.commons.math3.util.FastMath.max(int,int)",
        "org.apache.commons.math3.random.BitsStreamGenerator#nextInt(int)",
        "org.apache.commons.math3.random.AbstractRandomGenerator#nextInt(int)",
        "org.apache.commons.math3.random.SynchronizedRandomGenerator#nextInt(int)",
        "org.apache.commons.math3.random.RandomAdaptor#nextInt(int)",
        "org.apache.commons.math3.util.FastMath.min(int,int)",
        "org.apache.commons.math3.genetics.AbstractListChromosome#getLength()"
    ],
    "org.apache.commons.math3.distribution.KolmogorovSmirnovDistribution#cdfExact(double)": ["org.apache.commons.math3.distribution.KolmogorovSmirnovDistribution#cdf(double,boolean)"],
    "org.apache.commons.math3.geometry.euclidean.twod.SubLine#SubLine(Vector2D,Vector2D)": [
        "org.apache.commons.math3.geometry.euclidean.twod.SubLine.<staticinit>()",
        "org.apache.commons.math3.geometry.euclidean.twod.SubLine#SubLine(Vector2D,Vector2D,double)"
    ],
    "org.apache.commons.math3.analysis.solvers.UnivariateSolverUtils.forceSide(int,UnivariateFunction,BracketedUnivariateSolver<UnivariateFunction>,double,double,double,AllowedSolution)": [
        "org.apache.commons.math3.analysis.FunctionUtils.multiply(DifferentiableUnivariateFunction[]...)$UnivariateFunction$1$UnivariateFunction$1#derivative()$UnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.polynomials.PolynomialSplineFunction#value(double)",
        "org.apache.commons.math3.analysis.function.Gaussian#value(double)",
        "org.apache.commons.math3.analysis.function.Tanh#value(double)",
        "org.apache.commons.math3.util.FastMath.min(double,double)",
        "org.apache.commons.math3.exception.util.LocalizedFormats.<staticinit>()",
        "org.apache.commons.math3.analysis.function.Inverse#value(double)",
        "org.apache.commons.math3.analysis.function.HarmonicOscillator#value(double)",
        "org.apache.commons.math3.analysis.FunctionUtils.fix1stArgument(BivariateFunction,double)$UnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.function.Asin#value(double)",
        "org.apache.commons.math3.analysis.function.Asinh#value(double)",
        "org.apache.commons.math3.analysis.FunctionUtils.multiply(UnivariateFunction[]...)$UnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.function.Atan#value(double)",
        "org.apache.commons.math3.analysis.FunctionUtils.toDifferentiableUnivariateFunction(UnivariateDifferentiableFunction)$DifferentiableUnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.function.Cbrt#value(double)",
        "org.apache.commons.math3.analysis.polynomials.PolynomialFunctionLagrangeForm#value(double)",
        "org.apache.commons.math3.analysis.function.Exp#value(double)",
        "org.apache.commons.math3.special.BesselJ#value(double)",
        "org.apache.commons.math3.analysis.polynomials.PolynomialFunctionNewtonForm#value(double)",
        "org.apache.commons.math3.analysis.FunctionUtils.add(UnivariateFunction[]...)$UnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.function.Sin#value(double)",
        "org.apache.commons.math3.analysis.function.Cos#value(double)",
        "org.apache.commons.math3.analysis.solvers.BaseAbstractUnivariateSolver#getAbsoluteAccuracy()",
        "org.apache.commons.math3.analysis.interpolation.UnivariatePeriodicInterpolator#interpolate(double[],double[])$UnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.solvers.BaseAbstractUnivariateSolver#getRelativeAccuracy()",
        "org.apache.commons.math3.analysis.function.Log10#value(double)",
        "org.apache.commons.math3.analysis.function.Sqrt#value(double)",
        "org.apache.commons.math3.analysis.function.Log#value(double)",
        "org.apache.commons.math3.analysis.function.Sinc#value(double)",
        "org.apache.commons.math3.ode.events.EventState#evaluateStep(StepInterpolator)$UnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.function.Minus#value(double)",
        "org.apache.commons.math3.analysis.integration.IterativeLegendreGaussIntegrator#stage(int)$UnivariateFunction$1#value(double)",
        "org.apache.commons.math3.optimization.general.NonLinearConjugateGradientOptimizer.LineSearchFunction#value(double)",
        "org.apache.commons.math3.analysis.function.Floor#value(double)",
        "org.apache.commons.math3.analysis.FunctionUtils.multiply(DifferentiableUnivariateFunction[]...)$DifferentiableUnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.FunctionUtils.combine(BivariateFunction,UnivariateFunction,UnivariateFunction)$UnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.FunctionUtils.add(DifferentiableUnivariateFunction[]...)$UnivariateFunction$1$UnivariateFunction$1#derivative()$UnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.function.Sinh#value(double)",
        "org.apache.commons.math3.analysis.FunctionUtils.multiply(UnivariateDifferentiableFunction[]...)$UnivariateDifferentiableFunction$1#value(double)",
        "org.apache.commons.math3.analysis.function.Tan#value(double)",
        "org.apache.commons.math3.distribution.AbstractRealDistribution#inverseCumulativeProbability(double)$UnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.FunctionUtils.add(DifferentiableUnivariateFunction[]...)$DifferentiableUnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.function.Ceil#value(double)",
        "org.apache.commons.math3.analysis.function.Logistic#value(double)",
        "org.apache.commons.math3.analysis.function.Signum#value(double)",
        "org.apache.commons.math3.analysis.function.Constant#value(double)",
        "org.apache.commons.math3.analysis.function.Atanh#value(double)",
        "org.apache.commons.math3.analysis.FunctionUtils.compose(DifferentiableUnivariateFunction[]...)$UnivariateFunction$1$UnivariateFunction$1#derivative()$UnivariateFunction$1#value(double)",
        "org.apache.commons.math3.util.FastMath.max(double,double)",
        "org.apache.commons.math3.analysis.FunctionUtils.add(UnivariateDifferentiableFunction[]...)$UnivariateDifferentiableFunction$1#value(double)",
        "org.apache.commons.math3.analysis.function.Abs#value(double)",
        "org.apache.commons.math3.analysis.differentiation.FiniteDifferencesDifferentiator#differentiate(UnivariateFunction)$UnivariateDifferentiableFunction$1#value(double)",
        "org.apache.commons.math3.analysis.function.Identity#value(double)",
        "org.apache.commons.math3.analysis.function.Expm1#value(double)",
        "org.apache.commons.math3.analysis.function.Logit#value(double)",
        "org.apache.commons.math3.analysis.function.Log1p#value(double)",
        "org.apache.commons.math3.analysis.FunctionUtils.fix2ndArgument(BivariateFunction,double)$UnivariateFunction$1#value(double)",
        "org.apache.commons.math3.util.FastMath.abs(double)",
        "org.apache.commons.math3.analysis.FunctionUtils.toUnivariateDifferential(DifferentiableUnivariateFunction)$UnivariateDifferentiableFunction$1#value(double)",
        "org.apache.commons.math3.analysis.FunctionUtils.toDifferentiableUnivariateFunction(UnivariateDifferentiableFunction)$UnivariateFunction$1$UnivariateFunction$1#derivative()$UnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.polynomials.PolynomialFunction#value(double)",
        "org.apache.commons.math3.analysis.function.Rint#value(double)",
        "org.apache.commons.math3.analysis.FunctionUtils.compose(UnivariateFunction[]...)$UnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.function.Cosh#value(double)",
        "org.apache.commons.math3.optimization.direct.PowellOptimizer.LineSearch#search(double[],double[])$UnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.FunctionUtils.compose(DifferentiableUnivariateFunction[]...)$DifferentiableUnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.function.Acosh#value(double)",
        "org.apache.commons.math3.analysis.function.StepFunction#value(double)",
        "org.apache.commons.math3.analysis.FunctionUtils.compose(UnivariateDifferentiableFunction[]...)$UnivariateDifferentiableFunction$1#value(double)",
        "org.apache.commons.math3.analysis.function.Acos#value(double)",
        "org.apache.commons.math3.analysis.function.Power#value(double)",
        "org.apache.commons.math3.optim.nonlinear.scalar.LineSearch#search(double[],double[])$UnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.function.Sigmoid#value(double)",
        "org.apache.commons.math3.analysis.solvers.AllowedSolution.<staticinit>()",
        "org.apache.commons.math3.analysis.function.Ulp#value(double)"
    ],
    "org.apache.commons.math3.distribution.NakagamiDistribution#getNumericalMean()": [
        "org.apache.commons.math3.util.FastMath.sqrt(double)",
        "org.apache.commons.math3.special.Gamma.gamma(double)"
    ],
    "org.apache.commons.math3.geometry.euclidean.threed.Vector3D#toString()": [
        "org.apache.commons.math3.geometry.euclidean.threed.Vector3DFormat.getInstance()",
        "org.apache.commons.math3.geometry.VectorFormat#format(Vector<S extends Space>)"
    ],
    "org.apache.commons.math3.linear.SparseFieldVector#walkInOptimizedOrder(FieldVectorChangingVisitor<T extends FieldElement>)": ["org.apache.commons.math3.linear.SparseFieldVector#walkInDefaultOrder(FieldVectorChangingVisitor<T extends FieldElement>)"],
    "org.apache.commons.math3.linear.AbstractFieldMatrix#checkColumnIndex(int)": [
        "org.apache.commons.math3.linear.SparseFieldMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.BlockFieldMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.Array2DRowFieldMatrix#getColumnDimension()",
        "org.apache.commons.math3.exception.util.LocalizedFormats.<staticinit>()"
    ],
    "org.apache.commons.math3.stat.correlation.StorelessCovariance#StorelessCovariance(int)": ["org.apache.commons.math3.stat.correlation.StorelessCovariance#StorelessCovariance(int,boolean)"],
    "org.apache.commons.math3.geometry.partitioning.utilities.AVLTree.Node#getPrevious()": ["org.apache.commons.math3.geometry.partitioning.utilities.AVLTree.Node#getLargest()"],
    "org.apache.commons.math3.stat.regression.OLSMultipleLinearRegression#calculateTotalSumOfSquares()": [
        "org.apache.commons.math3.stat.descriptive.moment.Variance#evaluate(double[])",
        "org.apache.commons.math3.stat.descriptive.moment.SecondMoment#SecondMoment()",
        "org.apache.commons.math3.linear.OpenMapRealVector#toArray()",
        "org.apache.commons.math3.linear.RealVector#toArray()",
        "org.apache.commons.math3.stat.descriptive.AbstractStorelessUnivariateStatistic#evaluate(double[])",
        "org.apache.commons.math3.stat.StatUtils.sumSq(double[])",
        "org.apache.commons.math3.linear.RealVector.unmodifiableRealVector(RealVector)$RealVector$1#toArray()",
        "org.apache.commons.math3.stat.regression.AbstractMultipleLinearRegression#getY()",
        "org.apache.commons.math3.stat.descriptive.moment.StandardDeviation#evaluate(double[])",
        "org.apache.commons.math3.stat.regression.AbstractMultipleLinearRegression#isNoIntercept()",
        "org.apache.commons.math3.linear.ArrayRealVector#toArray()"
    ],
    "org.apache.commons.math3.geometry.spherical.twod.SphericalPolygonsSet#buildNew(BSPTree<Sphere2D>)": [
        "org.apache.commons.math3.geometry.spherical.twod.SphericalPolygonsSet#SphericalPolygonsSet(BSPTree<Sphere2D>,double)",
        "org.apache.commons.math3.geometry.partitioning.AbstractRegion#getTolerance()"
    ],
    "org.apache.commons.math3.userguide.ExampleUtils.getScreenShot(Component)": ["org.apache.commons.math3.userguide.genetics.ImageEvolutionExample.Display.ImagePainter#paint(Graphics)"],
    "org.apache.commons.math3.linear.FieldLUDecomposition.Solver#Solver(Field<T extends FieldElement>,T extends FieldElement[][],int[],boolean)": ["org.apache.commons.math3.linear.FieldLUDecomposition.Solver.<init>()"],
    "org.apache.commons.math3.geometry.euclidean.twod.Vector2DFormat#Vector2DFormat()": [
        "org.apache.commons.math3.geometry.VectorFormat#VectorFormat(String,String,String,NumberFormat)",
        "org.apache.commons.math3.util.CompositeFormat.getDefaultNumberFormat()",
        "org.apache.commons.math3.geometry.euclidean.twod.Vector2DFormat.<init>()",
        "org.apache.commons.math3.geometry.VectorFormat.<staticinit>()"
    ],
    "org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D.distance1(FieldVector3D<T extends RealFieldElement>,Vector3D)": ["org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D#distance1(Vector3D)"],
    "org.apache.commons.math3.ode.nonstiff.ClassicalRungeKuttaFieldIntegrator#getC()": [
        "org.apache.commons.math3.ode.AbstractFieldIntegrator#getField()",
        "org.apache.commons.math3.analysis.differentiation.SparseGradient#multiply(double)",
        "org.apache.commons.math3.fraction.BigFractionField#getOne()",
        "org.apache.commons.math3.fraction.FractionField#getOne()",
        "org.apache.commons.math3.dfp.Dfp#multiply(double)",
        "org.apache.commons.math3.analysis.differentiation.SparseGradient#getField()$Field$1#getOne()",
        "org.apache.commons.math3.complex.ComplexField#getOne()",
        "org.apache.commons.math3.util.BigRealField#getOne()",
        "org.apache.commons.math3.util.Decimal64#multiply(double)",
        "org.apache.commons.math3.analysis.differentiation.DerivativeStructure#multiply(double)",
        "org.apache.commons.math3.dfp.DfpField#getOne()",
        "org.apache.commons.math3.analysis.differentiation.DerivativeStructure#getField()$Field$1#getOne()",
        "org.apache.commons.math3.util.MathArrays.buildArray(Field<T>,int)",
        "org.apache.commons.math3.util.Decimal64Field#getOne()"
    ],
    "org.apache.commons.math3.stat.descriptive.moment.StandardDeviation#StandardDeviation(boolean)": [
        "org.apache.commons.math3.stat.descriptive.moment.StandardDeviation.<init>()",
        "org.apache.commons.math3.stat.descriptive.moment.Variance#Variance(boolean)",
        "org.apache.commons.math3.stat.descriptive.AbstractStorelessUnivariateStatistic.<init>()"
    ],
    "org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator#integrate(ExpandableStatefulODE,double)": [
        "org.apache.commons.math3.ode.sampling.NordsieckStepInterpolator#rescale(double)",
        "org.apache.commons.math3.ode.nonstiff.AdaptiveStepsizeIntegrator#filterStep(double,boolean,boolean)",
        "org.apache.commons.math3.linear.BlockRealMatrix#walkInOptimizedOrder(RealMatrixPreservingVisitor)",
        "org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator.Corrector#Corrector(double[],double[],double[])",
        "org.apache.commons.math3.ode.nonstiff.DormandPrince54StepInterpolator#storeTime(double)",
        "org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator#storeTime(double)",
        "org.apache.commons.math3.ode.ExpandableStatefulODE#getTime()",
        "org.apache.commons.math3.ode.nonstiff.RungeKuttaStepInterpolator#shift()",
        "org.apache.commons.math3.ode.ExpandableStatefulODE#getPrimaryMapper()",
        "org.apache.commons.math3.ode.sampling.AbstractStepInterpolator#getInterpolatedState()",
        "org.apache.commons.math3.ode.nonstiff.AdamsIntegrator#updateHighOrderDerivativesPhase1(Array2DRowRealMatrix)",
        "org.apache.commons.math3.ode.ExpandableStatefulODE#getSecondaryMappers()",
        "org.apache.commons.math3.ode.sampling.AbstractStepInterpolator#setInterpolatedTime(double)",
        "org.apache.commons.math3.ode.AbstractIntegrator#initIntegration(double,double[],double)",
        "org.apache.commons.math3.ode.sampling.AbstractStepInterpolator#storeTime(double)",
        "org.apache.commons.math3.ode.sampling.NordsieckStepInterpolator#NordsieckStepInterpolator()",
        "org.apache.commons.math3.ode.MultistepIntegrator#start(double,double[],double)",
        "org.apache.commons.math3.ode.ExpandableStatefulODE#getCompleteState()",
        "org.apache.commons.math3.ode.ExpandableStatefulODE#setTime(double)",
        "org.apache.commons.math3.ode.AbstractIntegrator#setEquations(ExpandableStatefulODE)",
        "org.apache.commons.math3.ode.ExpandableStatefulODE#setCompleteState(double[])",
        "org.apache.commons.math3.ode.AbstractIntegrator#computeDerivatives(double,double[],double[])",
        "org.apache.commons.math3.ode.AbstractIntegrator#acceptStep(AbstractStepInterpolator,double[],double[],double)",
        "org.apache.commons.math3.ode.sampling.NordsieckStepInterpolator#reinitialize(double[],boolean,EquationsMapper,EquationsMapper[])",
        "org.apache.commons.math3.ode.nonstiff.AdaptiveStepsizeIntegrator#resetInternalState()",
        "org.apache.commons.math3.ode.AbstractIntegrator#getExpandable()",
        "org.apache.commons.math3.linear.AbstractRealMatrix#walkInOptimizedOrder(RealMatrixPreservingVisitor)",
        "org.apache.commons.math3.ode.EquationsMapper#insertEquationData(double[],double[])",
        "org.apache.commons.math3.ode.sampling.AbstractStepInterpolator#getInterpolatedSecondaryState(int)",
        "org.apache.commons.math3.ode.sampling.AbstractStepInterpolator#shift()",
        "org.apache.commons.math3.ode.sampling.NordsieckStepInterpolator#reinitialize(double,double,double[],Array2DRowRealMatrix)",
        "org.apache.commons.math3.ode.MultistepIntegrator#computeStepGrowShrinkFactor(double)",
        "org.apache.commons.math3.ode.nonstiff.AdaptiveStepsizeIntegrator#sanityChecks(ExpandableStatefulODE,double)",
        "org.apache.commons.math3.ode.nonstiff.AdamsIntegrator#updateHighOrderDerivativesPhase2(double[],double[],Array2DRowRealMatrix)"
    ],
    "org.apache.commons.math3.optim.nonlinear.scalar.LeastSquaresConverter#value(double[])": [
        "org.apache.commons.math3.linear.Array2DRowRealMatrix#operate(double[])",
        "org.apache.commons.math3.fitting.CurveFitter.TheoreticalValuesFunction#getModelFunction()$MultivariateVectorFunction$1#value(double[])",
        "org.apache.commons.math3.linear.DiagonalMatrix#operate(double[])",
        "org.apache.commons.math3.linear.AbstractRealMatrix#operate(double[])",
        "org.apache.commons.math3.optimization.fitting.CurveFitter.OldTheoreticalValuesFunction#value(double[])",
        "org.apache.commons.math3.exception.DimensionMismatchException#DimensionMismatchException(int,int)",
        "org.apache.commons.math3.fitting.AbstractCurveFitter.TheoreticalValuesFunction#getModelFunction()$MultivariateVectorFunction$1#value(double[])",
        "org.apache.commons.math3.optimization.fitting.CurveFitter.TheoreticalValuesFunction#value(double[])",
        "org.apache.commons.math3.analysis.FunctionUtils.toDifferentiableMultivariateFunction(MultivariateDifferentiableFunction)$MultivariateVectorFunction$1$MultivariateVectorFunction$1#gradient()$MultivariateVectorFunction$1#value(double[])",
        "org.apache.commons.math3.analysis.FunctionUtils.toMultivariateDifferentiableVectorFunction(DifferentiableMultivariateVectorFunction)$MultivariateDifferentiableVectorFunction$1#value(double[])",
        "org.apache.commons.math3.analysis.FunctionUtils.toDifferentiableMultivariateVectorFunction(MultivariateDifferentiableVectorFunction)$DifferentiableMultivariateVectorFunction$1#value(double[])",
        "org.apache.commons.math3.linear.BlockRealMatrix#operate(double[])",
        "org.apache.commons.math3.analysis.differentiation.GradientFunction#value(double[])"
    ],
    "org.apache.commons.math3.special.BesselJ#value(double)": ["org.apache.commons.math3.special.BesselJ.value(double,double)"],
    "org.apache.commons.math3.exception.util.ExceptionContext#readObject(ObjectInputStream)": [
        "org.apache.commons.math3.exception.util.ExceptionContext#deSerializeContext(ObjectInputStream)",
        "org.apache.commons.math3.exception.util.ExceptionContext#deSerializeMessages(ObjectInputStream)"
    ],
    "org.apache.commons.math3.ml.neuralnet.Neuron.SerializationProxy#SerializationProxy(long,double[])": ["org.apache.commons.math3.ml.neuralnet.Neuron.SerializationProxy.<init>()"],
    "org.apache.commons.math3.optimization.direct.MultivariateFunctionMappingAdapter.LowerBoundMapper#unboundedToBounded(double)": ["org.apache.commons.math3.util.FastMath.exp(double)"],
    "org.apache.commons.math3.analysis.solvers.UnivariateSolverUtils.verifySequence(double,double,double)": ["org.apache.commons.math3.analysis.solvers.UnivariateSolverUtils.verifyInterval(double,double)"],
    "org.apache.commons.math3.geometry.euclidean.threed.Line#revert()": [
        "org.apache.commons.math3.geometry.euclidean.threed.Line#Line(Line)",
        "org.apache.commons.math3.geometry.euclidean.threed.Vector3D#negate()"
    ],
    "org.apache.commons.math3.optimization.BaseMultivariateMultiStartOptimizer#sortPairs(GoalType)": ["org.apache.commons.math3.optimization.BaseMultivariateMultiStartOptimizer#sortPairs(GoalType)$Comparator$1.<init>()"],
    "org.apache.commons.math3.random.RandomDataGenerator.nextLong(RandomGenerator,long)": [
        "org.apache.commons.math3.random.RandomGeneratorFactory.createRandomGenerator(Random)$RandomGenerator$1#nextBytes(byte[])",
        "org.apache.commons.math3.random.SynchronizedRandomGenerator#nextBytes(byte[])",
        "org.apache.commons.math3.random.RandomAdaptor#nextBytes(byte[])",
        "org.apache.commons.math3.random.BitsStreamGenerator#nextBytes(byte[])",
        "org.apache.commons.math3.random.AbstractRandomGenerator#nextBytes(byte[])"
    ],
    "org.apache.commons.math3.distribution.LogisticDistribution#LogisticDistribution(RandomGenerator,double,double)": [
        "org.apache.commons.math3.distribution.LogisticDistribution.<init>()",
        "org.apache.commons.math3.distribution.AbstractRealDistribution#AbstractRealDistribution(RandomGenerator)",
        "org.apache.commons.math3.exception.util.LocalizedFormats.<staticinit>()"
    ],
    "org.apache.commons.math3.geometry.euclidean.twod.Line#Line(double,double,double,double,double)": ["org.apache.commons.math3.geometry.euclidean.twod.Line.<init>()"],
    "org.apache.commons.math3.optim.BaseOptimizer#getIterations()": ["org.apache.commons.math3.util.Incrementor#getCount()"],
    "org.apache.commons.math3.ode.nonstiff.HighamHall54Integrator#HighamHall54Integrator(double,double,double,double)": [
        "org.apache.commons.math3.ode.nonstiff.HighamHall54Integrator.<init>()",
        "org.apache.commons.math3.ode.nonstiff.HighamHall54StepInterpolator#HighamHall54StepInterpolator()",
        "org.apache.commons.math3.ode.nonstiff.HighamHall54Integrator.<staticinit>()",
        "org.apache.commons.math3.ode.nonstiff.EmbeddedRungeKuttaIntegrator#EmbeddedRungeKuttaIntegrator(String,boolean,double[],double[][],double[],RungeKuttaStepInterpolator,double,double,double,double)"
    ],
    "org.apache.commons.math3.complex.Quaternion.dotProduct(Quaternion,Quaternion)": [
        "org.apache.commons.math3.complex.Quaternion#getQ3()",
        "org.apache.commons.math3.complex.Quaternion#getQ2()",
        "org.apache.commons.math3.complex.Quaternion#getQ1()",
        "org.apache.commons.math3.complex.Quaternion#getQ0()"
    ],
    "org.apache.commons.math3.optimization.fitting.GaussianFitter.ParameterGuesser#interpolateXAtY(WeightedObservedPoint[],int,int,double)": [
        "org.apache.commons.math3.optimization.fitting.WeightedObservedPoint#getY()",
        "org.apache.commons.math3.optimization.fitting.WeightedObservedPoint#getX()",
        "org.apache.commons.math3.optimization.fitting.GaussianFitter.ParameterGuesser#getInterpolationPointsForY(WeightedObservedPoint[],int,int,double)",
        "org.apache.commons.math3.exception.ZeroException#ZeroException()"
    ],
    "org.apache.commons.math3.userguide.sofm.ChineseRingsClassifier#createRandomIterator(long)$Iterator$1#remove()": ["org.apache.commons.math3.exception.MathUnsupportedOperationException#MathUnsupportedOperationException()"],
    "org.apache.commons.math3.util.FastMath.pow(double,long)": [
        "org.apache.commons.math3.util.FastMath.Split#Split(double)",
        "org.apache.commons.math3.util.FastMath.Split#pow(long)",
        "org.apache.commons.math3.util.FastMath.Split#reciprocal()"
    ],
    "org.apache.commons.math3.ode.nonstiff.HighamHall54FieldStepInterpolator#create(Field<T extends RealFieldElement>,boolean,T extends RealFieldElement[][],FieldODEStateAndDerivative<T extends RealFieldElement>,FieldODEStateAndDerivative<T extends RealFieldElement>,FieldODEStateAndDerivative<T extends RealFieldElement>,FieldODEStateAndDerivative<T extends RealFieldElement>,FieldEquationsMapper<T extends RealFieldElement>)": ["org.apache.commons.math3.ode.nonstiff.HighamHall54FieldStepInterpolator#HighamHall54FieldStepInterpolator(Field<T extends RealFieldElement>,boolean,T extends RealFieldElement[][],FieldODEStateAndDerivative<T extends RealFieldElement>,FieldODEStateAndDerivative<T extends RealFieldElement>,FieldODEStateAndDerivative<T extends RealFieldElement>,FieldODEStateAndDerivative<T extends RealFieldElement>,FieldEquationsMapper<T extends RealFieldElement>)"],
    "org.apache.commons.math3.linear.AbstractRealMatrix#walkInRowOrder(RealMatrixChangingVisitor)": [
        "org.apache.commons.math3.linear.DiagonalMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.Array2DRowRealMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.Array2DRowRealMatrix#setEntry(int,int,double)",
        "org.apache.commons.math3.linear.DefaultRealMatrixChangingVisitor#end()",
        "org.apache.commons.math3.linear.DiagonalMatrix#getEntry(int,int)",
        "org.apache.commons.math3.linear.OpenMapRealMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.BlockRealMatrix#setEntry(int,int,double)",
        "org.apache.commons.math3.linear.OpenMapRealMatrix#setEntry(int,int,double)",
        "org.apache.commons.math3.linear.DefaultRealMatrixChangingVisitor#visit(int,int,double)",
        "org.apache.commons.math3.linear.OpenMapRealMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.DiagonalMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.OpenMapRealMatrix#getEntry(int,int)",
        "org.apache.commons.math3.linear.BlockRealMatrix#getEntry(int,int)",
        "org.apache.commons.math3.linear.AbstractRealMatrix#getSubMatrix(int[],int[])$DefaultRealMatrixChangingVisitor$1#visit(int,int,double)",
        "org.apache.commons.math3.linear.Array2DRowRealMatrix#getEntry(int,int)",
        "org.apache.commons.math3.linear.BlockRealMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.Array2DRowRealMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.BlockRealMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.DiagonalMatrix#setEntry(int,int,double)",
        "org.apache.commons.math3.linear.DefaultRealMatrixChangingVisitor#start(int,int,int,int,int,int)"
    ],
    "org.apache.commons.math3.userguide.sofm.ChineseRingsClassifier#createParallelTasks(int,long)": [
        "org.apache.commons.math3.ml.neuralnet.twod.NeuronSquareMesh2D#getNetwork()",
        "org.apache.commons.math3.ml.neuralnet.twod.NeuronSquareMesh2D#getNumberOfRows()",
        "org.apache.commons.math3.ml.neuralnet.sofm.KohonenTrainingTask#KohonenTrainingTask(Network,Iterator<double[]>,KohonenUpdateAction)",
        "org.apache.commons.math3.ml.neuralnet.sofm.LearningFactorFunctionFactory.exponentialDecay(double,double,long)",
        "org.apache.commons.math3.util.FastMath.sqrt(double)",
        "org.apache.commons.math3.ml.neuralnet.sofm.NeighbourhoodSizeFunctionFactory.exponentialDecay(double,double,long)",
        "org.apache.commons.math3.ml.neuralnet.sofm.KohonenUpdateAction#KohonenUpdateAction(DistanceMeasure,LearningFactorFunction,NeighbourhoodSizeFunction)",
        "org.apache.commons.math3.userguide.sofm.ChineseRingsClassifier#createRandomIterator(long)",
        "org.apache.commons.math3.ml.neuralnet.twod.NeuronSquareMesh2D#getNumberOfColumns()"
    ],
    "org.apache.commons.math3.stat.correlation.StorelessCovariance#StorelessCovariance(int,boolean)": [
        "org.apache.commons.math3.stat.correlation.Covariance#Covariance()",
        "org.apache.commons.math3.stat.correlation.StorelessCovariance.<init>()",
        "org.apache.commons.math3.stat.correlation.StorelessCovariance#initializeMatrix(boolean)"
    ],
    "org.apache.commons.math3.linear.SymmLQ#solve(RealLinearOperator,RealLinearOperator,RealVector,RealVector)": [
        "org.apache.commons.math3.linear.ArrayRealVector#copy()",
        "org.apache.commons.math3.linear.RealVector.unmodifiableRealVector(RealVector)$RealVector$1#copy()",
        "org.apache.commons.math3.util.MathUtils.checkNotNull(Object)",
        "org.apache.commons.math3.linear.SymmLQ#solveInPlace(RealLinearOperator,RealLinearOperator,RealVector,RealVector,boolean,double)",
        "org.apache.commons.math3.linear.OpenMapRealVector#copy()"
    ],
    "org.apache.commons.math3.util.ResizableDoubleArray#ResizableDoubleArray(int,double,double)": [
        "org.apache.commons.math3.util.ResizableDoubleArray#ResizableDoubleArray(int,double,double,ExpansionMode,double[]...)",
        "org.apache.commons.math3.util.ResizableDoubleArray.ExpansionMode.<staticinit>()"
    ],
    "org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distanceInf(Vector3D,Vector3D)": ["org.apache.commons.math3.geometry.euclidean.threed.Vector3D#distanceInf(Vector<Euclidean3D>)"],
    "org.apache.commons.math3.transform.FastFourierTransformer.transformInPlace(double[][],DftNormalization,TransformType)": [
        "org.apache.commons.math3.exception.DimensionMismatchException#DimensionMismatchException(int,int)",
        "org.apache.commons.math3.util.ArithmeticUtils.isPowerOfTwo(long)",
        "org.apache.commons.math3.transform.FastFourierTransformer.normalizeTransformedData(double[][],DftNormalization,TransformType)",
        "org.apache.commons.math3.transform.FastFourierTransformer.<staticinit>()",
        "org.apache.commons.math3.transform.TransformType.<staticinit>()",
        "org.apache.commons.math3.exception.util.LocalizedFormats.<staticinit>()",
        "org.apache.commons.math3.transform.FastFourierTransformer.bitReversalShuffle2(double[],double[])"
    ],
    "org.apache.commons.math3.stat.regression.SimpleRegression#regress()": [
        "org.apache.commons.math3.stat.regression.SimpleRegression#getIntercept()",
        "org.apache.commons.math3.util.Precision.<staticinit>()",
        "org.apache.commons.math3.util.FastMath.abs(double)",
        "org.apache.commons.math3.exception.util.LocalizedFormats.<staticinit>()",
        "org.apache.commons.math3.exception.NoDataException#NoDataException(Localizable)",
        "org.apache.commons.math3.stat.regression.RegressionResults#RegressionResults(double[],double[][],boolean,long,int,double,double,double,boolean,boolean)",
        "org.apache.commons.math3.stat.regression.SimpleRegression#getSlope()",
        "org.apache.commons.math3.stat.regression.SimpleRegression#getMeanSquareError()",
        "org.apache.commons.math3.stat.regression.SimpleRegression#getSumSquaredErrors()"
    ],
    "org.apache.commons.math3.linear.RealVector.unmodifiableRealVector(RealVector)$RealVector$1#copy()": [
        "org.apache.commons.math3.linear.OpenMapRealVector#copy()",
        "org.apache.commons.math3.linear.ArrayRealVector#copy()",
        "org.apache.commons.math3.linear.RealVector.unmodifiableRealVector(RealVector)$RealVector$1#copy()"
    ],
    "org.apache.commons.math3.linear.DiagonalMatrix#preMultiply(RealVector)": [
        "org.apache.commons.math3.linear.OpenMapRealVector#toArray()",
        "org.apache.commons.math3.linear.RealVector#toArray()",
        "org.apache.commons.math3.linear.ArrayRealVector#getDataRef()",
        "org.apache.commons.math3.linear.RealVector.unmodifiableRealVector(RealVector)$RealVector$1#toArray()",
        "org.apache.commons.math3.linear.DiagonalMatrix#preMultiply(double[])",
        "org.apache.commons.math3.linear.MatrixUtils.createRealVector(double[])",
        "org.apache.commons.math3.linear.ArrayRealVector#toArray()"
    ],
    "org.apache.commons.math3.linear.Array2DRowRealMatrix#setSubMatrix(double[][],int,int)": [
        "org.apache.commons.math3.exception.NoDataException#NoDataException(Localizable)",
        "org.apache.commons.math3.exception.DimensionMismatchException#DimensionMismatchException(int,int)",
        "org.apache.commons.math3.util.MathUtils.checkNotNull(Object)",
        "org.apache.commons.math3.linear.AbstractRealMatrix#setSubMatrix(double[][],int,int)",
        "org.apache.commons.math3.exception.util.LocalizedFormats.<staticinit>()"
    ],
    "org.apache.commons.math3.linear.RealVector#walkInDefaultOrder(RealVectorChangingVisitor)": [
        "org.apache.commons.math3.linear.OpenMapRealVector#getDimension()",
        "org.apache.commons.math3.linear.ArrayRealVector#getDimension()",
        "org.apache.commons.math3.linear.OpenMapRealVector#setEntry(int,double)",
        "org.apache.commons.math3.linear.ArrayRealVector#getEntry(int)",
        "org.apache.commons.math3.linear.RealVector.unmodifiableRealVector(RealVector)$RealVector$1#getDimension()",
        "org.apache.commons.math3.linear.OpenMapRealVector#getEntry(int)",
        "org.apache.commons.math3.linear.RealVector.unmodifiableRealVector(RealVector)$RealVector$1#setEntry(int,double)",
        "org.apache.commons.math3.linear.ArrayRealVector#setEntry(int,double)",
        "org.apache.commons.math3.linear.RealVector.unmodifiableRealVector(RealVector)$RealVector$1#getEntry(int)"
    ],
    "org.apache.commons.math3.analysis.differentiation.DerivativeStructure#getPartialDerivative(int[]...)": ["org.apache.commons.math3.analysis.differentiation.DSCompiler#getPartialDerivativeIndex(int[]...)"],
    "org.apache.commons.math3.ode.AbstractIntegrator#integrate(FirstOrderDifferentialEquations,double,double[],double,double[])": [
        "org.apache.commons.math3.ode.MultistepIntegrator#start(double,double[],double)$FirstOrderDifferentialEquations$1#getDimension()",
        "org.apache.commons.math3.ode.nonstiff.GraggBulirschStoerIntegrator#integrate(ExpandableStatefulODE,double)",
        "org.apache.commons.math3.ode.ExpandableStatefulODE#getTime()",
        "org.apache.commons.math3.ode.FirstOrderConverter#getDimension()",
        "org.apache.commons.math3.ode.nonstiff.EmbeddedRungeKuttaIntegrator#integrate(ExpandableStatefulODE,double)",
        "org.apache.commons.math3.ode.nonstiff.AdamsBashforthIntegrator#integrate(ExpandableStatefulODE,double)",
        "org.apache.commons.math3.exception.DimensionMismatchException#DimensionMismatchException(int,int)",
        "org.apache.commons.math3.ode.JacobianMatrices.MainStateJacobianWrapper#getDimension()",
        "org.apache.commons.math3.ode.nonstiff.RungeKuttaIntegrator#integrate(ExpandableStatefulODE,double)",
        "org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator#integrate(ExpandableStatefulODE,double)",
        "org.apache.commons.math3.ode.ExpandableStatefulODE#setTime(double)",
        "org.apache.commons.math3.ode.ExpandableStatefulODE#setPrimaryState(double[])",
        "org.apache.commons.math3.ode.ExpandableStatefulODE#ExpandableStatefulODE(FirstOrderDifferentialEquations)",
        "org.apache.commons.math3.ode.ExpandableStatefulODE#getPrimaryState()"
    ],
    "org.apache.commons.math3.stat.correlation.StorelessCovariance#getElement(int,int)": ["org.apache.commons.math3.stat.correlation.StorelessCovariance#indexOf(int,int)"],
    "org.apache.commons.math3.fraction.FractionField.LazyHolder.<staticinit>()": ["org.apache.commons.math3.fraction.FractionField#FractionField()"],
    "org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet.RotationTransform#RotationTransform(Vector3D,Rotation)": ["org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet.RotationTransform.<init>()"],
    "org.apache.commons.math3.linear.BlockRealMatrix#walkInOptimizedOrder(RealMatrixChangingVisitor)": [
        "org.apache.commons.math3.linear.AbstractRealMatrix#getSubMatrix(int[],int[])$DefaultRealMatrixChangingVisitor$1#visit(int,int,double)",
        "org.apache.commons.math3.linear.DefaultRealMatrixChangingVisitor#visit(int,int,double)",
        "org.apache.commons.math3.linear.DefaultRealMatrixChangingVisitor#end()",
        "org.apache.commons.math3.util.FastMath.min(int,int)",
        "org.apache.commons.math3.linear.BlockRealMatrix.<staticinit>()",
        "org.apache.commons.math3.linear.DefaultRealMatrixChangingVisitor#start(int,int,int,int,int,int)"
    ],
    "org.apache.commons.math3.ode.FirstOrderConverter#FirstOrderConverter(SecondOrderDifferentialEquations)": ["org.apache.commons.math3.ode.FirstOrderConverter.<init>()"],
    "org.apache.commons.math3.optimization.direct.BaseAbstractMultivariateOptimizer.<init>()": ["org.apache.commons.math3.util.Incrementor#Incrementor()"],
    "org.apache.commons.math3.fitting.CurveFitter#fit(int,T extends ParametricUnivariateFunction,double[])": [
        "org.apache.commons.math3.fitting.CurveFitter.TheoreticalValuesFunction#getModelFunction()",
        "org.apache.commons.math3.fitting.CurveFitter.TheoreticalValuesFunction#TheoreticalValuesFunction(ParametricUnivariateFunction)",
        "org.apache.commons.math3.optim.nonlinear.vector.Weight#Weight(double[])",
        "org.apache.commons.math3.optim.MaxEval#MaxEval(int)",
        "org.apache.commons.math3.optim.InitialGuess#InitialGuess(double[])",
        "org.apache.commons.math3.fitting.CurveFitter.TheoreticalValuesFunction#getModelFunctionJacobian()",
        "org.apache.commons.math3.optim.PointVectorValuePair#getPointRef()",
        "org.apache.commons.math3.fitting.WeightedObservedPoint#getWeight()",
        "org.apache.commons.math3.optim.nonlinear.vector.Target#Target(double[])",
        "org.apache.commons.math3.fitting.WeightedObservedPoint#getY()"
    ],
    "org.apache.commons.math3.distribution.WeibullDistribution#inverseCumulativeProbability(double)": [
        "org.apache.commons.math3.util.FastMath.log1p(double)",
        "org.apache.commons.math3.util.FastMath.pow(double,double)"
    ],
    "org.apache.commons.math3.fitting.leastsquares.LeastSquaresFactory.weightMatrix(LeastSquaresProblem,RealMatrix)$LeastSquaresAdapter$1#evaluate(RealVector)": [
        "org.apache.commons.math3.fitting.leastsquares.DenseWeightedEvaluation#DenseWeightedEvaluation(Evaluation,RealMatrix)",
        "org.apache.commons.math3.fitting.leastsquares.LeastSquaresAdapter#evaluate(RealVector)"
    ],
    "org.apache.commons.math3.stat.regression.SimpleRegression#removeData(double[][])": ["org.apache.commons.math3.stat.regression.SimpleRegression#removeData(double,double)"],
    "org.apache.commons.math3.random.RandomDataGenerator#nextBeta(double,double)": [
        "org.apache.commons.math3.distribution.BetaDistribution#BetaDistribution(RandomGenerator,double,double,double)",
        "org.apache.commons.math3.random.RandomDataGenerator#getRandomGenerator()",
        "org.apache.commons.math3.distribution.BetaDistribution#sample()",
        "org.apache.commons.math3.distribution.BetaDistribution.<staticinit>()"
    ],
    "org.apache.commons.math3.random.RandomDataImpl#nextSample(Collection<?>,int)": ["org.apache.commons.math3.random.RandomDataGenerator#nextSample(Collection<?>,int)"],
    "org.apache.commons.math3.linear.BlockFieldMatrix#addToEntry(int,int,T extends FieldElement)": [
        "org.apache.commons.math3.linear.BlockFieldMatrix#blockWidth(int)",
        "org.apache.commons.math3.linear.BlockFieldMatrix.<staticinit>()",
        "org.apache.commons.math3.linear.AbstractFieldMatrix#checkColumnIndex(int)",
        "org.apache.commons.math3.linear.AbstractFieldMatrix#checkRowIndex(int)"
    ],
    "org.apache.commons.math3.analysis.differentiation.FiniteDifferencesDifferentiator#differentiate(UnivariateMatrixFunction)$UnivariateDifferentiableMatrixFunction$1#value(DerivativeStructure)": [
        "org.apache.commons.math3.analysis.differentiation.DerivativeStructure#getValue()",
        "org.apache.commons.math3.analysis.differentiation.FiniteDifferencesDifferentiator#evaluate(DerivativeStructure,double,double[])",
        "org.apache.commons.math3.util.FastMath.max(double,double)",
        "org.apache.commons.math3.analysis.differentiation.FiniteDifferencesDifferentiator#differentiate(UnivariateMatrixFunction)$UnivariateDifferentiableMatrixFunction$1#value(double)",
        "org.apache.commons.math3.analysis.differentiation.DerivativeStructure#getOrder()",
        "org.apache.commons.math3.util.FastMath.min(double,double)"
    ],
    "org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D#subtract(T extends RealFieldElement,FieldVector3D<T extends RealFieldElement>)": ["org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D#FieldVector3D(double,FieldVector3D<T extends RealFieldElement>,double,FieldVector3D<T extends RealFieldElement>)"],
    "org.apache.commons.math3.dfp.Dfp#Dfp(Dfp)": ["org.apache.commons.math3.dfp.Dfp.<init>()"],
    "org.apache.commons.math3.ode.nonstiff.GillFieldStepInterpolator#create(Field<T extends RealFieldElement>,boolean,T extends RealFieldElement[][],FieldODEStateAndDerivative<T extends RealFieldElement>,FieldODEStateAndDerivative<T extends RealFieldElement>,FieldODEStateAndDerivative<T extends RealFieldElement>,FieldODEStateAndDerivative<T extends RealFieldElement>,FieldEquationsMapper<T extends RealFieldElement>)": ["org.apache.commons.math3.ode.nonstiff.GillFieldStepInterpolator#GillFieldStepInterpolator(Field<T extends RealFieldElement>,boolean,T extends RealFieldElement[][],FieldODEStateAndDerivative<T extends RealFieldElement>,FieldODEStateAndDerivative<T extends RealFieldElement>,FieldODEStateAndDerivative<T extends RealFieldElement>,FieldODEStateAndDerivative<T extends RealFieldElement>,FieldEquationsMapper<T extends RealFieldElement>)"],
    "org.apache.commons.math3.analysis.integration.BaseAbstractUnivariateIntegrator#BaseAbstractUnivariateIntegrator(int,int)": [
        "org.apache.commons.math3.analysis.integration.BaseAbstractUnivariateIntegrator#BaseAbstractUnivariateIntegrator(double,double,int,int)",
        "org.apache.commons.math3.analysis.integration.BaseAbstractUnivariateIntegrator.<staticinit>()"
    ],
    "org.apache.commons.math3.linear.BlockFieldMatrix#setColumnMatrix(int,FieldMatrix<T extends FieldElement>)": [
        "org.apache.commons.math3.linear.AbstractFieldMatrix#setColumnMatrix(int,FieldMatrix<T extends FieldElement>)",
        "org.apache.commons.math3.linear.BlockFieldMatrix#setColumnMatrix(int,BlockFieldMatrix<T extends FieldElement>)"
    ],
    "org.apache.commons.math3.fraction.BigFraction#BigFraction(double,double,int)": ["org.apache.commons.math3.fraction.BigFraction#BigFraction(double,double,int,int)"],
    "org.apache.commons.math3.random.RandomDataGenerator#reSeed(long)": [
        "org.apache.commons.math3.random.RandomGeneratorFactory.createRandomGenerator(Random)$RandomGenerator$1#setSeed(long)",
        "org.apache.commons.math3.random.RandomDataGenerator#getRandomGenerator()",
        "org.apache.commons.math3.random.SynchronizedRandomGenerator#setSeed(long)",
        "org.apache.commons.math3.random.MersenneTwister#setSeed(long)",
        "org.apache.commons.math3.random.AbstractWell#setSeed(long)",
        "org.apache.commons.math3.random.RandomAdaptor#setSeed(long)",
        "org.apache.commons.math3.random.ISAACRandom#setSeed(long)"
    ],
    "org.apache.commons.math3.geometry.partitioning.RegionFactory#buildConvex(Hyperplane<S extends Space>[]...)": [
        "org.apache.commons.math3.geometry.partitioning.BSPTree#insertCut(Hyperplane<S extends Space>)",
        "org.apache.commons.math3.geometry.partitioning.SubHyperplane.SplitSubHyperplane#getMinus()",
        "org.apache.commons.math3.geometry.partitioning.Side.<staticinit>()",
        "org.apache.commons.math3.geometry.partitioning.RegionFactory#getComplement(Region<S extends Space>)",
        "org.apache.commons.math3.geometry.euclidean.oned.OrientedPoint#wholeSpace()",
        "org.apache.commons.math3.exception.util.LocalizedFormats.<staticinit>()",
        "org.apache.commons.math3.geometry.spherical.oned.LimitAngle#wholeSpace()",
        "org.apache.commons.math3.geometry.euclidean.threed.Plane#wholeSpace()",
        "org.apache.commons.math3.geometry.partitioning.BSPTree#setAttribute(Object)",
        "org.apache.commons.math3.geometry.partitioning.SubHyperplane.SplitSubHyperplane#getSide()",
        "org.apache.commons.math3.geometry.partitioning.BSPTree#getParent()",
        "org.apache.commons.math3.geometry.partitioning.BSPTree#getPlus()",
        "org.apache.commons.math3.geometry.partitioning.BSPTree#getCut()",
        "org.apache.commons.math3.geometry.euclidean.twod.Line#wholeSpace()",
        "org.apache.commons.math3.geometry.partitioning.BSPTree#getMinus()",
        "org.apache.commons.math3.geometry.spherical.twod.Circle#wholeSpace()",
        "org.apache.commons.math3.geometry.partitioning.AbstractRegion#getTree(boolean)",
        "org.apache.commons.math3.geometry.partitioning.AbstractSubHyperplane#getHyperplane()"
    ],
    "org.apache.commons.math3.geometry.spherical.twod.Circle#getPointAt(double)": [
        "org.apache.commons.math3.geometry.euclidean.threed.Vector3D#Vector3D(double,Vector3D,double,Vector3D)",
        "org.apache.commons.math3.util.FastMath.sin(double)",
        "org.apache.commons.math3.util.FastMath.cos(double)"
    ],
    "org.apache.commons.math3.fraction.FractionFormat.getImproperInstance()": ["org.apache.commons.math3.fraction.FractionFormat.getImproperInstance(Locale)"],
    "org.apache.commons.math3.util.OpenIntToDoubleHashMap.findInsertionIndex(int[],byte[],int,int)": [
        "org.apache.commons.math3.util.OpenIntToDoubleHashMap.<staticinit>()",
        "org.apache.commons.math3.util.OpenIntToDoubleHashMap.changeIndexSign(int)",
        "org.apache.commons.math3.util.OpenIntToDoubleHashMap.probe(int,int)",
        "org.apache.commons.math3.util.OpenIntToDoubleHashMap.hashOf(int)",
        "org.apache.commons.math3.util.OpenIntToDoubleHashMap.perturb(int)"
    ],
    "org.apache.commons.math3.analysis.integration.LegendreGaussIntegrator.<staticinit>()": ["org.apache.commons.math3.util.FastMath.sqrt(double)"],
    "org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D#add(double,FieldVector3D<T extends RealFieldElement>)": ["org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D#FieldVector3D(double,FieldVector3D<T extends RealFieldElement>,double,FieldVector3D<T extends RealFieldElement>)"],
    "org.apache.commons.math3.linear.BlockRealMatrix#subtract(RealMatrix)": [
        "org.apache.commons.math3.linear.Array2DRowRealMatrix#getEntry(int,int)",
        "org.apache.commons.math3.linear.DiagonalMatrix#getEntry(int,int)",
        "org.apache.commons.math3.linear.MatrixUtils.checkSubtractionCompatible(AnyMatrix,AnyMatrix)",
        "org.apache.commons.math3.linear.BlockRealMatrix#subtract(BlockRealMatrix)",
        "org.apache.commons.math3.linear.OpenMapRealMatrix#getEntry(int,int)",
        "org.apache.commons.math3.util.FastMath.min(int,int)",
        "org.apache.commons.math3.linear.BlockRealMatrix.<staticinit>()",
        "org.apache.commons.math3.linear.BlockRealMatrix#BlockRealMatrix(int,int)",
        "org.apache.commons.math3.linear.BlockRealMatrix#getEntry(int,int)"
    ],
    "org.apache.commons.math3.optim.linear.SimplexTableau#getRhsOffset()": ["org.apache.commons.math3.optim.linear.SimplexTableau#getWidth()"],
    "org.apache.commons.math3.geometry.euclidean.threed.Plane#sameOrientationAs(Hyperplane<Euclidean3D>)": ["org.apache.commons.math3.geometry.euclidean.threed.Vector3D#dotProduct(Vector<Euclidean3D>)"],
    "org.apache.commons.math3.stat.StatUtils.sum(double[])": [
        "org.apache.commons.math3.stat.descriptive.moment.StandardDeviation#evaluate(double[])",
        "org.apache.commons.math3.stat.descriptive.moment.Variance#evaluate(double[])",
        "org.apache.commons.math3.stat.descriptive.AbstractUnivariateStatistic#evaluate(double[])",
        "org.apache.commons.math3.stat.StatUtils.<staticinit>()",
        "org.apache.commons.math3.stat.descriptive.AbstractStorelessUnivariateStatistic#evaluate(double[])"
    ],
    "org.apache.commons.math3.primes.PollardRho.primeFactors(int)": [
        "org.apache.commons.math3.primes.SmallPrimes.smallTrialDivision(int,List<Integer>)",
        "org.apache.commons.math3.primes.PollardRho.rhoBrent(int)",
        "org.apache.commons.math3.primes.SmallPrimes.millerRabinPrimeTest(int)"
    ],
    "org.apache.commons.math3.stat.descriptive.moment.SecondMoment.copy(SecondMoment,SecondMoment)": [
        "org.apache.commons.math3.util.MathUtils.checkNotNull(Object)",
        "org.apache.commons.math3.stat.descriptive.moment.FirstMoment.copy(FirstMoment,FirstMoment)"
    ],
    "org.apache.commons.math3.util.ResizableDoubleArray#setExpansionMode(int)": [
        "org.apache.commons.math3.util.ResizableDoubleArray.<staticinit>()",
        "org.apache.commons.math3.util.ResizableDoubleArray#setExpansionMode(ExpansionMode)",
        "org.apache.commons.math3.util.ResizableDoubleArray.ExpansionMode.<staticinit>()",
        "org.apache.commons.math3.exception.util.LocalizedFormats.<staticinit>()"
    ],
    "org.apache.commons.math3.analysis.polynomials.PolynomialFunctionNewtonForm#getCoefficients()": ["org.apache.commons.math3.analysis.polynomials.PolynomialFunctionNewtonForm#computeCoefficients()"],
    "org.apache.commons.math3.analysis.differentiation.SparseGradient#signum()": [
        "org.apache.commons.math3.util.FastMath.signum(double)",
        "org.apache.commons.math3.analysis.differentiation.SparseGradient.createConstant(double)"
    ],
    "org.apache.commons.math3.linear.RealMatrixFormat#format(RealMatrix)": ["org.apache.commons.math3.linear.RealMatrixFormat#format(RealMatrix,StringBuffer,FieldPosition)"],
    "org.apache.commons.math3.fraction.Fraction#getField()": ["org.apache.commons.math3.fraction.FractionField.getInstance()"],
    "org.apache.commons.math3.analysis.function.Logit#value(double)": ["org.apache.commons.math3.analysis.function.Logit.value(double,double,double)"],
    "org.apache.commons.math3.geometry.euclidean.oned.Vector1D#Vector1D(double)": ["org.apache.commons.math3.geometry.euclidean.oned.Vector1D.<init>()"],
    "org.apache.commons.math3.transform.FastFourierTransformer.normalizeTransformedData(double[][],DftNormalization,TransformType)": [
        "org.apache.commons.math3.transform.DftNormalization.<staticinit>()",
        "org.apache.commons.math3.util.FastMath.sqrt(double)",
        "org.apache.commons.math3.transform.TransformType.<staticinit>()",
        "org.apache.commons.math3.exception.MathIllegalStateException#MathIllegalStateException()"
    ],
    "org.apache.commons.math3.geometry.euclidean.oned.Vector1D#negate()": ["org.apache.commons.math3.geometry.euclidean.oned.Vector1D#Vector1D(double)"],
    "org.apache.commons.math3.analysis.function.Log#derivative()": [
        "org.apache.commons.math3.analysis.function.Log10#derivative()",
        "org.apache.commons.math3.analysis.function.Power#derivative()",
        "org.apache.commons.math3.analysis.function.Sin#derivative()",
        "org.apache.commons.math3.analysis.function.Exp#derivative()",
        "org.apache.commons.math3.analysis.function.HarmonicOscillator#derivative()",
        "org.apache.commons.math3.analysis.polynomials.PolynomialFunction#derivative()",
        "org.apache.commons.math3.analysis.function.Logit#derivative()",
        "org.apache.commons.math3.analysis.function.Cbrt#derivative()",
        "org.apache.commons.math3.analysis.FunctionUtils.toDifferentiableUnivariateFunction(UnivariateDifferentiableFunction)",
        "org.apache.commons.math3.analysis.FunctionUtils.toDifferentiableUnivariateFunction(UnivariateDifferentiableFunction)$DifferentiableUnivariateFunction$1#derivative()",
        "org.apache.commons.math3.analysis.polynomials.PolynomialSplineFunction#derivative()",
        "org.apache.commons.math3.analysis.function.Cosh#derivative()",
        "org.apache.commons.math3.analysis.function.Identity#derivative()",
        "org.apache.commons.math3.analysis.function.Inverse#derivative()",
        "org.apache.commons.math3.analysis.function.Acosh#derivative()",
        "org.apache.commons.math3.analysis.function.Acos#derivative()",
        "org.apache.commons.math3.analysis.function.Atan#derivative()",
        "org.apache.commons.math3.analysis.function.Log#derivative()",
        "org.apache.commons.math3.analysis.function.Sqrt#derivative()",
        "org.apache.commons.math3.analysis.function.Logistic#derivative()",
        "org.apache.commons.math3.analysis.function.Expm1#derivative()",
        "org.apache.commons.math3.analysis.function.Asinh#derivative()",
        "org.apache.commons.math3.analysis.function.Gaussian#derivative()",
        "org.apache.commons.math3.analysis.function.Sinc#derivative()",
        "org.apache.commons.math3.analysis.function.Sigmoid#derivative()",
        "org.apache.commons.math3.analysis.function.Constant#derivative()",
        "org.apache.commons.math3.analysis.function.Sinh#derivative()",
        "org.apache.commons.math3.analysis.function.Tanh#derivative()",
        "org.apache.commons.math3.analysis.function.Asin#derivative()",
        "org.apache.commons.math3.analysis.function.Minus#derivative()",
        "org.apache.commons.math3.analysis.FunctionUtils.compose(DifferentiableUnivariateFunction[]...)$DifferentiableUnivariateFunction$1#derivative()",
        "org.apache.commons.math3.analysis.FunctionUtils.add(DifferentiableUnivariateFunction[]...)$DifferentiableUnivariateFunction$1#derivative()",
        "org.apache.commons.math3.analysis.FunctionUtils.multiply(DifferentiableUnivariateFunction[]...)$DifferentiableUnivariateFunction$1#derivative()",
        "org.apache.commons.math3.analysis.function.Log1p#derivative()",
        "org.apache.commons.math3.analysis.function.Tan#derivative()",
        "org.apache.commons.math3.analysis.function.Cos#derivative()",
        "org.apache.commons.math3.analysis.function.Atanh#derivative()"
    ],
    "org.apache.commons.math3.stat.clustering.DBSCANClusterer#cluster(Collection<T extends Clusterable>)": [
        "org.apache.commons.math3.util.MathUtils.checkNotNull(Object)",
        "org.apache.commons.math3.stat.clustering.DBSCANClusterer#getNeighbors(T extends Clusterable,Collection<T extends Clusterable>)",
        "org.apache.commons.math3.stat.clustering.Cluster#Cluster(T extends Clusterable)",
        "org.apache.commons.math3.stat.clustering.DBSCANClusterer#expandCluster(Cluster<T extends Clusterable>,T extends Clusterable,List<T extends Clusterable>,Collection<T extends Clusterable>,Map<Clusterable<T extends Clusterable>, PointStatus>)",
        "org.apache.commons.math3.stat.clustering.DBSCANClusterer.PointStatus.<staticinit>()"
    ],
    "org.apache.commons.math3.analysis.integration.gauss.LegendreRuleFactory.<init>()": ["org.apache.commons.math3.analysis.integration.gauss.BaseRuleFactory.<init>()"],
    "org.apache.commons.math3.ml.neuralnet.MapUtils.computeTopographicError(Iterable<double[]>,Network,DistanceMeasure)": [
        "org.apache.commons.math3.exception.NoDataException#NoDataException()",
        "org.apache.commons.math3.ml.neuralnet.MapUtils.findBestAndSecondBest(double[],Iterable<Neuron>,DistanceMeasure)",
        "org.apache.commons.math3.util.Pair#getFirst()",
        "org.apache.commons.math3.util.Pair#getSecond()",
        "org.apache.commons.math3.ml.neuralnet.Network#getNeighbours(Neuron)"
    ],
    "org.apache.commons.math3.distribution.NakagamiDistribution#NakagamiDistribution(double,double)": [
        "org.apache.commons.math3.distribution.NakagamiDistribution#NakagamiDistribution(double,double,double)",
        "org.apache.commons.math3.distribution.NakagamiDistribution.<staticinit>()"
    ],
    "org.apache.commons.math3.stat.regression.SimpleRegression#addObservations(double[][],double[])": [
        "org.apache.commons.math3.stat.regression.SimpleRegression#addData(double,double)",
        "org.apache.commons.math3.exception.util.LocalizedFormats.<staticinit>()"
    ],
    "org.apache.commons.math3.util.FastMath.incrementExact(long)": ["org.apache.commons.math3.exception.util.LocalizedFormats.<staticinit>()"],
    "org.apache.commons.math3.geometry.euclidean.threed.OutlineExtractor.BoundaryProjector#addContribution(SubHyperplane<Euclidean3D>,boolean)": [
        "org.apache.commons.math3.geometry.partitioning.SubHyperplane.SplitSubHyperplane#getMinus()",
        "org.apache.commons.math3.geometry.euclidean.twod.Line#wholeHyperplane()",
        "org.apache.commons.math3.geometry.partitioning.SubHyperplane.SplitSubHyperplane#getPlus()",
        "org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet#getVertices()",
        "org.apache.commons.math3.geometry.euclidean.twod.Vector2D#Vector2D(double,double)",
        "org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile.FixedCapacityList#add(E)",
        "org.apache.commons.math3.geometry.partitioning.RegionFactory#RegionFactory()",
        "org.apache.commons.math3.util.FastMath.<staticinit>()",
        "org.apache.commons.math3.geometry.partitioning.RegionFactory#union(Region<S extends Space>,Region<S extends Space>)",
        "org.apache.commons.math3.geometry.euclidean.threed.Plane#getNormal()",
        "org.apache.commons.math3.util.FastMath.abs(double)",
        "org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet#PolygonsSet(Collection<SubHyperplane<Euclidean2D>>,double)",
        "org.apache.commons.math3.geometry.euclidean.threed.Plane#toSpace(Point<Euclidean2D>)",
        "org.apache.commons.math3.geometry.partitioning.AbstractSubHyperplane#getHyperplane()",
        "org.apache.commons.math3.geometry.partitioning.AbstractSubHyperplane#getRemainingRegion()",
        "org.apache.commons.math3.geometry.euclidean.threed.Vector3D#dotProduct(Vector<Euclidean3D>)",
        "org.apache.commons.math3.geometry.euclidean.twod.Line#getAngle()"
    ],
    "org.apache.commons.math3.stat.StatUtils.variance(double[],double,int,int)": [
        "org.apache.commons.math3.stat.StatUtils.<staticinit>()",
        "org.apache.commons.math3.stat.descriptive.moment.Variance#evaluate(double[],double,int,int)"
    ],
    "org.apache.commons.math3.linear.RealVector.unmodifiableRealVector(RealVector)$RealVector$1#toArray()": [
        "org.apache.commons.math3.linear.RealVector.unmodifiableRealVector(RealVector)$RealVector$1#toArray()",
        "org.apache.commons.math3.linear.OpenMapRealVector#toArray()",
        "org.apache.commons.math3.linear.RealVector#toArray()",
        "org.apache.commons.math3.linear.ArrayRealVector#toArray()"
    ],
    "org.apache.commons.math3.analysis.function.Max#value(double,double)": ["org.apache.commons.math3.util.FastMath.max(double,double)"],
    "org.apache.commons.math3.linear.ArrayFieldVector#subtract(FieldVector<T extends FieldElement>)": [
        "org.apache.commons.math3.linear.ArrayFieldVector#getEntry(int)",
        "org.apache.commons.math3.linear.SparseFieldVector#getEntry(int)",
        "org.apache.commons.math3.linear.ArrayFieldVector#subtract(ArrayFieldVector<T extends FieldElement>)",
        "org.apache.commons.math3.linear.ArrayFieldVector#ArrayFieldVector(Field<T extends FieldElement>,T extends FieldElement[],boolean)",
        "org.apache.commons.math3.util.MathArrays.buildArray(Field<T>,int)",
        "org.apache.commons.math3.linear.ArrayFieldVector#checkVectorDimensions(FieldVector<T extends FieldElement>)"
    ],
    "org.apache.commons.math3.ml.clustering.MultiKMeansPlusPlusClusterer#MultiKMeansPlusPlusClusterer(KMeansPlusPlusClusterer<T extends Clusterable>,int,ClusterEvaluator<T extends Clusterable>)": [
        "org.apache.commons.math3.ml.clustering.MultiKMeansPlusPlusClusterer.<init>()",
        "org.apache.commons.math3.ml.clustering.Clusterer#Clusterer(DistanceMeasure)",
        "org.apache.commons.math3.ml.clustering.Clusterer#getDistanceMeasure()"
    ],
    "org.apache.commons.math3.fraction.BigFraction#add(BigInteger)": [
        "org.apache.commons.math3.fraction.BigFraction#BigFraction(BigInteger)",
        "org.apache.commons.math3.util.MathUtils.checkNotNull(Object)",
        "org.apache.commons.math3.fraction.BigFraction#BigFraction(BigInteger,BigInteger)"
    ],
    "org.apache.commons.math3.util.ResizableDoubleArray#ResizableDoubleArray()": [
        "org.apache.commons.math3.util.ResizableDoubleArray.<staticinit>()",
        "org.apache.commons.math3.util.ResizableDoubleArray#ResizableDoubleArray(int)"
    ],
    "org.apache.commons.math3.fraction.BigFraction#add(long)": ["org.apache.commons.math3.fraction.BigFraction#add(BigInteger)"],
    "org.apache.commons.math3.fitting.HarmonicCurveFitter.<staticinit>()": ["org.apache.commons.math3.analysis.function.HarmonicOscillator.Parametric.<init>()"],
    "org.apache.commons.math3.util.FastMathLiteralArrays.loadExpFracB()": ["org.apache.commons.math3.util.FastMathLiteralArrays.<staticinit>()"],
    "org.apache.commons.math3.stat.regression.OLSMultipleLinearRegression#newSampleData(double[],double[][])": [
        "org.apache.commons.math3.stat.regression.AbstractMultipleLinearRegression#newYSampleData(double[])",
        "org.apache.commons.math3.stat.regression.OLSMultipleLinearRegression#newXSampleData(double[][])",
        "org.apache.commons.math3.stat.regression.AbstractMultipleLinearRegression#validateSampleData(double[][],double[])"
    ],
    "org.apache.commons.math3.stat.regression.AbstractMultipleLinearRegression#estimateErrorVariance()": [
        "org.apache.commons.math3.stat.regression.AbstractMultipleLinearRegression#calculateErrorVariance()",
        "org.apache.commons.math3.stat.regression.GLSMultipleLinearRegression#calculateErrorVariance()"
    ],
    "org.apache.commons.math3.fitting.SimpleCurveFitter.create(ParametricUnivariateFunction,double[])": ["org.apache.commons.math3.fitting.SimpleCurveFitter#SimpleCurveFitter(ParametricUnivariateFunction,double[],int)"],
    "org.apache.commons.math3.util.BigReal#divide(BigReal)": [
        "org.apache.commons.math3.util.BigReal#BigReal(char[])",
        "org.apache.commons.math3.exception.util.LocalizedFormats.<staticinit>()"
    ],
    "org.apache.commons.math3.analysis.differentiation.DerivativeStructure#log()": [
        "org.apache.commons.math3.analysis.differentiation.DSCompiler#log(double[],int,double[],int)",
        "org.apache.commons.math3.analysis.differentiation.DerivativeStructure#DerivativeStructure(DSCompiler)"
    ],
    "org.apache.commons.math3.analysis.solvers.NewtonSolver#NewtonSolver(double)": [
        "org.apache.commons.math3.analysis.solvers.AbstractDifferentiableUnivariateSolver#AbstractDifferentiableUnivariateSolver(double)",
        "org.apache.commons.math3.analysis.solvers.NewtonSolver.<init>()"
    ],
    "org.apache.commons.math3.linear.JacobiPreconditioner#operate(RealVector)": [
        "org.apache.commons.math3.linear.ArrayRealVector#ArrayRealVector(double[],boolean)",
        "org.apache.commons.math3.linear.RealVector.unmodifiableRealVector(RealVector)$RealVector$1#toArray()",
        "org.apache.commons.math3.util.MathArrays.ebeDivide(double[],double[])",
        "org.apache.commons.math3.linear.OpenMapRealVector#toArray()",
        "org.apache.commons.math3.linear.RealVector#toArray()",
        "org.apache.commons.math3.linear.ArrayRealVector#toArray()"
    ],
    "org.apache.commons.math3.analysis.interpolation.InterpolatingMicrosphere#InterpolatingMicrosphere(InterpolatingMicrosphere)": [
        "org.apache.commons.math3.analysis.interpolation.InterpolatingMicrosphere.FacetData#illumination()",
        "org.apache.commons.math3.analysis.interpolation.InterpolatingMicrosphere.<init>()",
        "org.apache.commons.math3.analysis.interpolation.InterpolatingMicrosphere.FacetData#sample()",
        "org.apache.commons.math3.analysis.interpolation.InterpolatingMicrosphere.FacetData#FacetData(double,double)"
    ],
    "org.apache.commons.math3.analysis.solvers.BaseAbstractUnivariateSolver#BaseAbstractUnivariateSolver(double,double,double)": [
        "org.apache.commons.math3.analysis.solvers.BaseAbstractUnivariateSolver.<init>()",
        "org.apache.commons.math3.util.IntegerSequence.Incrementor.create()"
    ],
    "org.apache.commons.math3.analysis.differentiation.DSCompiler#linearCombination(double,double[],int,double,double[],int,double[],int)": [
        "org.apache.commons.math3.analysis.differentiation.DSCompiler#getSize()",
        "org.apache.commons.math3.util.MathArrays.linearCombination(double,double,double,double)"
    ],
    "org.apache.commons.math3.ode.nonstiff.AdamsBashforthFieldIntegrator#integrate(FieldExpandableODE<T extends RealFieldElement>,FieldODEState<T extends RealFieldElement>,T extends RealFieldElement)": [
        "org.apache.commons.math3.ode.AbstractFieldIntegrator#acceptStep(AbstractFieldStepInterpolator<T extends RealFieldElement>,T extends RealFieldElement)",
        "org.apache.commons.math3.ode.nonstiff.AdamsBashforthFieldIntegrator#errorEstimation(T extends RealFieldElement[],T extends RealFieldElement[],T extends RealFieldElement[],FieldMatrix<T extends RealFieldElement>)",
        "org.apache.commons.math3.ode.FieldEquationsMapper#mapState(FieldODEState<T extends RealFieldElement>)",
        "org.apache.commons.math3.util.BigRealField#getZero()",
        "org.apache.commons.math3.ode.nonstiff.AdamsFieldStepInterpolator#AdamsFieldStepInterpolator(T extends RealFieldElement,FieldODEStateAndDerivative<T extends RealFieldElement>,T extends RealFieldElement[],Array2DRowFieldMatrix<T extends RealFieldElement>,boolean,FieldODEStateAndDerivative<T extends RealFieldElement>,FieldODEStateAndDerivative<T extends RealFieldElement>,FieldEquationsMapper<T extends RealFieldElement>)",
        "org.apache.commons.math3.ode.AbstractFieldIntegrator#getStepStart()",
        "org.apache.commons.math3.ode.AbstractFieldIntegrator#setStepSize(T extends RealFieldElement)",
        "org.apache.commons.math3.dfp.DfpField#getZero()",
        "org.apache.commons.math3.ode.FieldODEState#getTime()",
        "org.apache.commons.math3.ode.nonstiff.AdaptiveStepsizeFieldIntegrator#filterStep(T extends RealFieldElement,boolean,boolean)",
        "org.apache.commons.math3.ode.AbstractFieldIntegrator#computeDerivatives(T extends RealFieldElement,T extends RealFieldElement[])",
        "org.apache.commons.math3.fraction.FractionField#getZero()",
        "org.apache.commons.math3.ode.AbstractFieldIntegrator#isLastStep()",
        "org.apache.commons.math3.complex.ComplexField#getZero()",
        "org.apache.commons.math3.ode.nonstiff.AdaptiveStepsizeFieldIntegrator#sanityChecks(FieldODEState<T extends RealFieldElement>,T extends RealFieldElement)",
        "org.apache.commons.math3.util.MathArrays.buildArray(Field<T>,int)",
        "org.apache.commons.math3.ode.AbstractFieldIntegrator#getField()",
        "org.apache.commons.math3.ode.nonstiff.AdamsFieldIntegrator#updateHighOrderDerivativesPhase1(Array2DRowFieldMatrix<T extends RealFieldElement>)",
        "org.apache.commons.math3.ode.AbstractFieldIntegrator#initIntegration(FieldExpandableODE<T extends RealFieldElement>,T extends RealFieldElement,T extends RealFieldElement[],T extends RealFieldElement)",
        "org.apache.commons.math3.ode.AbstractFieldIntegrator#setStepStart(FieldODEStateAndDerivative<T extends RealFieldElement>)",
        "org.apache.commons.math3.analysis.differentiation.SparseGradient#getField()$Field$1#getZero()",
        "org.apache.commons.math3.util.Decimal64Field#getZero()",
        "org.apache.commons.math3.ode.FieldExpandableODE#getMapper()",
        "org.apache.commons.math3.ode.nonstiff.AdamsFieldStepInterpolator.taylor(FieldODEStateAndDerivative<S extends RealFieldElement>,S extends RealFieldElement,S extends RealFieldElement,S extends RealFieldElement[],Array2DRowFieldMatrix<S extends RealFieldElement>)",
        "org.apache.commons.math3.ode.FieldODEState#getState()",
        "org.apache.commons.math3.analysis.differentiation.SparseGradient#add(double)",
        "org.apache.commons.math3.ode.AbstractFieldIntegrator#getStepSize()",
        "org.apache.commons.math3.ode.AbstractFieldIntegrator#setIsLastStep(boolean)",
        "org.apache.commons.math3.ode.MultistepFieldIntegrator#computeStepGrowShrinkFactor(T extends RealFieldElement)",
        "org.apache.commons.math3.ode.MultistepFieldIntegrator#start(FieldExpandableODE<T extends RealFieldElement>,FieldODEState<T extends RealFieldElement>,T extends RealFieldElement)",
        "org.apache.commons.math3.analysis.differentiation.DerivativeStructure#add(double)",
        "org.apache.commons.math3.ode.MultistepFieldIntegrator#rescale(T extends RealFieldElement)",
        "org.apache.commons.math3.analysis.differentiation.DerivativeStructure#getField()$Field$1#getZero()",
        "org.apache.commons.math3.ode.nonstiff.AdamsFieldIntegrator#updateHighOrderDerivativesPhase2(T extends RealFieldElement[],T extends RealFieldElement[],Array2DRowFieldMatrix<T extends RealFieldElement>)",
        "org.apache.commons.math3.ode.AbstractFieldIntegrator#resetOccurred()",
        "org.apache.commons.math3.fraction.BigFractionField#getZero()",
        "org.apache.commons.math3.util.Decimal64#add(double)",
        "org.apache.commons.math3.dfp.Dfp#add(double)"
    ],
    "org.apache.commons.math3.stat.descriptive.rank.Percentile#Percentile(double,EstimationType,NaNStrategy,KthSelector)": [
        "org.apache.commons.math3.util.MathUtils.checkNotNull(Object)",
        "org.apache.commons.math3.stat.descriptive.rank.Percentile.<init>()",
        "org.apache.commons.math3.stat.descriptive.rank.Percentile#setQuantile(double)",
        "org.apache.commons.math3.stat.descriptive.AbstractUnivariateStatistic.<init>()"
    ],
    "org.apache.commons.math3.util.ArithmeticUtils.factorialDouble(int)": ["org.apache.commons.math3.util.CombinatoricsUtils.factorialDouble(int)"],
    "org.apache.commons.math3.ode.nonstiff.AdaptiveStepsizeFieldIntegrator#setInitialStepSize(T extends RealFieldElement)": [
        "org.apache.commons.math3.util.Decimal64#negate()",
        "org.apache.commons.math3.analysis.differentiation.DerivativeStructure#negate()",
        "org.apache.commons.math3.ode.AbstractFieldIntegrator#getField()",
        "org.apache.commons.math3.fraction.BigFractionField#getOne()",
        "org.apache.commons.math3.fraction.FractionField#getOne()",
        "org.apache.commons.math3.complex.Complex#negate()",
        "org.apache.commons.math3.analysis.differentiation.SparseGradient#getField()$Field$1#getOne()",
        "org.apache.commons.math3.complex.ComplexField#getOne()",
        "org.apache.commons.math3.util.BigRealField#getOne()",
        "org.apache.commons.math3.analysis.differentiation.SparseGradient#negate()",
        "org.apache.commons.math3.fraction.BigFraction#negate()",
        "org.apache.commons.math3.dfp.Dfp#negate()",
        "org.apache.commons.math3.dfp.DfpField#getOne()",
        "org.apache.commons.math3.fraction.Fraction#negate()",
        "org.apache.commons.math3.analysis.differentiation.DerivativeStructure#getField()$Field$1#getOne()",
        "org.apache.commons.math3.util.Decimal64Field#getOne()",
        "org.apache.commons.math3.util.BigReal#negate()"
    ],
    "org.apache.commons.math3.linear.DefaultIterativeLinearSolverEvent#DefaultIterativeLinearSolverEvent(Object,int,RealVector,RealVector,double)": [
        "org.apache.commons.math3.linear.IterativeLinearSolverEvent#IterativeLinearSolverEvent(Object,int)",
        "org.apache.commons.math3.linear.DefaultIterativeLinearSolverEvent.<init>()"
    ],
    "org.apache.commons.math3.linear.RealVector.unmodifiableRealVector(RealVector)$RealVector$1#subtract(RealVector)": [
        "org.apache.commons.math3.linear.OpenMapRealVector#subtract(RealVector)",
        "org.apache.commons.math3.linear.RealVector#subtract(RealVector)",
        "org.apache.commons.math3.linear.ArrayRealVector#subtract(RealVector)",
        "org.apache.commons.math3.linear.RealVector.unmodifiableRealVector(RealVector)$RealVector$1#subtract(RealVector)"
    ],
    "org.apache.commons.math3.util.FastMath.Split#Split(double)": ["org.apache.commons.math3.util.FastMath.Split.<init>()"],
    "org.apache.commons.math3.fitting.leastsquares.LeastSquaresFactory.weightDiagonal(LeastSquaresProblem,RealVector)": [
        "org.apache.commons.math3.linear.RealVector.unmodifiableRealVector(RealVector)$RealVector$1#toArray()",
        "org.apache.commons.math3.fitting.leastsquares.LeastSquaresFactory.weightMatrix(LeastSquaresProblem,RealMatrix)",
        "org.apache.commons.math3.linear.DiagonalMatrix#DiagonalMatrix(double[])",
        "org.apache.commons.math3.linear.OpenMapRealVector#toArray()",
        "org.apache.commons.math3.linear.RealVector#toArray()",
        "org.apache.commons.math3.linear.ArrayRealVector#toArray()"
    ],
    "org.apache.commons.math3.dfp.Dfp#getReal()": ["org.apache.commons.math3.dfp.Dfp#toDouble()"],
    "org.apache.commons.math3.geometry.partitioning.BoundaryProjector#BoundaryProjector(Point<S extends Space>)": ["org.apache.commons.math3.geometry.partitioning.BoundaryProjector.<init>()"],
    "org.apache.commons.math3.ml.neuralnet.FeatureInitializerFactory.function(UnivariateFunction,double,double)": ["org.apache.commons.math3.ml.neuralnet.FeatureInitializerFactory.function(UnivariateFunction,double,double)$FeatureInitializer$1.<init>()"],
    "org.apache.commons.math3.optimization.direct.AbstractSimplex#evaluate(MultivariateFunction,Comparator<PointValuePair>)": [
        "org.apache.commons.math3.optim.nonlinear.scalar.MultivariateFunctionMappingAdapter#value(double[])",
        "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizer#doOptimize()$MultivariateFunction$1#value(double[])",
        "org.apache.commons.math3.optimization.direct.MultivariateFunctionMappingAdapter#value(double[])",
        "org.apache.commons.math3.analysis.FunctionUtils.toMultivariateDifferentiableFunction(DifferentiableMultivariateFunction)$MultivariateDifferentiableFunction$1#value(double[])",
        "org.apache.commons.math3.analysis.FunctionUtils.toDifferentiableMultivariateFunction(MultivariateDifferentiableFunction)$DifferentiableMultivariateFunction$1#value(double[])",
        "org.apache.commons.math3.analysis.interpolation.MicrosphereInterpolatingFunction#value(double[])",
        "org.apache.commons.math3.util.Pair#getValue()",
        "org.apache.commons.math3.analysis.interpolation.MicrosphereProjectionInterpolator#interpolate(double[][],double[])$MultivariateFunction$1#value(double[])",
        "org.apache.commons.math3.optimization.direct.MultivariateFunctionPenaltyAdapter#value(double[])",
        "org.apache.commons.math3.optim.nonlinear.scalar.MultivariateFunctionPenaltyAdapter#value(double[])",
        "org.apache.commons.math3.optim.linear.LinearObjectiveFunction#value(double[])",
        "org.apache.commons.math3.analysis.FunctionUtils.collector(BivariateFunction,UnivariateFunction,double)$MultivariateFunction$1#value(double[])",
        "org.apache.commons.math3.optim.PointVectorValuePair#getValue()",
        "org.apache.commons.math3.optimization.PointVectorValuePair#getValue()",
        "org.apache.commons.math3.optimization.PointValuePair#getPointRef()",
        "org.apache.commons.math3.optim.nonlinear.scalar.LeastSquaresConverter#value(double[])",
        "org.apache.commons.math3.analysis.FunctionUtils.toDifferentiableMultivariateFunction(MultivariateDifferentiableFunction)$MultivariateFunction$1$MultivariateFunction$1#partialDerivative(int)$MultivariateFunction$1#value(double[])",
        "org.apache.commons.math3.optimization.LeastSquaresConverter#value(double[])",
        "org.apache.commons.math3.optimization.PointValuePair#PointValuePair(double[],double,boolean)",
        "org.apache.commons.math3.optimization.direct.SimplexOptimizer#doOptimize()$MultivariateFunction$1#value(double[])"
    ],
    "org.apache.commons.math3.stat.descriptive.DescriptiveStatistics#DescriptiveStatistics(double[])": [
        "org.apache.commons.math3.util.ResizableDoubleArray#ResizableDoubleArray(double[])",
        "org.apache.commons.math3.stat.descriptive.DescriptiveStatistics.<init>()"
    ],
    "org.apache.commons.math3.genetics.Chromosome#compareTo(Chromosome)": ["org.apache.commons.math3.genetics.Chromosome#getFitness()"],
    "org.apache.commons.math3.userguide.ClusterAlgorithmComparison.makeRandom(int)": [
        "org.apache.commons.math3.random.SobolSequenceGenerator#skipTo(int)",
        "org.apache.commons.math3.random.SobolSequenceGenerator#nextVector()",
        "org.apache.commons.math3.geometry.euclidean.twod.Vector2D#Vector2D(double[])",
        "org.apache.commons.math3.random.SobolSequenceGenerator#SobolSequenceGenerator(int)"
    ],
    "org.apache.commons.math3.random.SynchronizedRandomGenerator#nextInt()": [
        "org.apache.commons.math3.random.BitsStreamGenerator#nextInt()",
        "org.apache.commons.math3.random.SynchronizedRandomGenerator#nextInt()",
        "org.apache.commons.math3.random.AbstractRandomGenerator#nextInt()",
        "org.apache.commons.math3.random.RandomGeneratorFactory.createRandomGenerator(Random)$RandomGenerator$1#nextInt()",
        "org.apache.commons.math3.random.RandomAdaptor#nextInt()"
    ],
    "org.apache.commons.math3.analysis.interpolation.BicubicSplineInterpolatingFunction#partialDerivativeY(double,double)": ["org.apache.commons.math3.analysis.interpolation.BicubicSplineInterpolatingFunction#partialDerivative(int,double,double)"],
    "org.apache.commons.math3.optimization.fitting.CurveFitter.OldTheoreticalValuesFunction#jacobian()$MultivariateMatrixFunction$1#value(double[])": [
        "org.apache.commons.math3.analysis.polynomials.PolynomialFunction.Parametric#gradient(double,double[]...)",
        "org.apache.commons.math3.fitting.GaussianCurveFitter$Parametric$1#gradient(double,double[]...)",
        "org.apache.commons.math3.optimization.fitting.GaussianFitter#fit(double[])$Parametric$1#gradient(double,double[]...)",
        "org.apache.commons.math3.analysis.function.Gaussian.Parametric#gradient(double,double[]...)",
        "org.apache.commons.math3.analysis.function.HarmonicOscillator.Parametric#gradient(double,double[]...)",
        "org.apache.commons.math3.optimization.fitting.WeightedObservedPoint#getX()",
        "org.apache.commons.math3.fitting.GaussianFitter#fit(double[])$Parametric$1#gradient(double,double[]...)",
        "org.apache.commons.math3.analysis.function.Logit.Parametric#gradient(double,double[]...)",
        "org.apache.commons.math3.analysis.function.Logistic.Parametric#gradient(double,double[]...)",
        "org.apache.commons.math3.analysis.function.Sigmoid.Parametric#gradient(double,double[]...)"
    ],
    "org.apache.commons.math3.genetics.BinaryChromosome#isSame(Chromosome)": [
        "org.apache.commons.math3.genetics.AbstractListChromosome#getRepresentation()",
        "org.apache.commons.math3.genetics.AbstractListChromosome#getLength()"
    ],
    "org.apache.commons.math3.distribution.ZipfDistribution#getSupportUpperBound()": ["org.apache.commons.math3.distribution.ZipfDistribution#getNumberOfElements()"],
    "org.apache.commons.math3.ml.neuralnet.sofm.KohonenUpdateAction#updateNeighbouringNeuron(Neuron,double[],double)": ["org.apache.commons.math3.ml.neuralnet.sofm.KohonenUpdateAction#attemptNeuronUpdate(Neuron,double[],double)"],
    "org.apache.commons.math3.distribution.LogisticDistribution#LogisticDistribution(double,double)": [
        "org.apache.commons.math3.distribution.LogisticDistribution#LogisticDistribution(RandomGenerator,double,double)",
        "org.apache.commons.math3.random.Well19937c#Well19937c()"
    ],
    "org.apache.commons.math3.linear.RealVector#getMinIndex()": [
        "org.apache.commons.math3.linear.RealVector.Entry#getValue()",
        "org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet.SubIntervalsIterator#hasNext()",
        "org.apache.commons.math3.linear.RealVector.unmodifiableRealVector(RealVector)$Iterator$1$Iterator$1#iterator()$Iterator$1#next()",
        "org.apache.commons.math3.linear.RealVector#iterator()",
        "org.apache.commons.math3.linear.OpenMapRealVector.OpenMapEntry#getIndex()",
        "org.apache.commons.math3.linear.RealVector#iterator()$Iterator$1#hasNext()",
        "org.apache.commons.math3.linear.RealVector.unmodifiableRealVector(RealVector)$RealVector$1#iterator()",
        "org.apache.commons.math3.userguide.sofm.ChineseRingsClassifier#createRandomIterator(long)$Iterator$1#hasNext()",
        "org.apache.commons.math3.util.IntegerSequence.Incrementor#hasNext()",
        "org.apache.commons.math3.linear.RealVector.unmodifiableRealVector(RealVector)$Iterator$1$Iterator$1#sparseIterator()$Iterator$1#hasNext()",
        "org.apache.commons.math3.linear.RealVector.Entry#getIndex()",
        "org.apache.commons.math3.geometry.spherical.oned.ArcsSet.SubArcsIterator#hasNext()",
        "org.apache.commons.math3.linear.RealVector#iterator()$Iterator$1#next()",
        "org.apache.commons.math3.util.Combinations.LexicographicIterator#hasNext()",
        "org.apache.commons.math3.linear.OpenMapRealVector.OpenMapEntry#getValue()",
        "org.apache.commons.math3.linear.RealVector.unmodifiableRealVector(RealVector).UnmodifiableEntry.UnmodifiableEntry#getValue()",
        "org.apache.commons.math3.linear.RealVector.SparseEntryIterator#hasNext()",
        "org.apache.commons.math3.userguide.sofm.ChineseRingsClassifier#createIterable()$Iterator$1$Iterator$1#iterator()$Iterator$1#hasNext()",
        "org.apache.commons.math3.linear.RealVector.unmodifiableRealVector(RealVector)$Iterator$1$Iterator$1#iterator()$Iterator$1#hasNext()",
        "org.apache.commons.math3.util.Combinations.SingletonIterator#hasNext()",
        "org.apache.commons.math3.linear.RealVector.SparseEntryIterator#next()",
        "org.apache.commons.math3.util.MultidimensionalCounter.Iterator#hasNext()",
        "org.apache.commons.math3.linear.RealVector.unmodifiableRealVector(RealVector)$Iterator$1$Iterator$1#sparseIterator()$Iterator$1#next()"
    ],
    "org.apache.commons.math3.fitting.AbstractCurveFitter.TheoreticalValuesFunction#getModelFunctionJacobian()": ["org.apache.commons.math3.fitting.AbstractCurveFitter.TheoreticalValuesFunction#getModelFunctionJacobian()$MultivariateMatrixFunction$1.<init>()"],
    "org.apache.commons.math3.exception.DimensionMismatchException#DimensionMismatchException(int,int)": [
        "org.apache.commons.math3.exception.DimensionMismatchException#DimensionMismatchException(Localizable,int,int)",
        "org.apache.commons.math3.exception.util.LocalizedFormats.<staticinit>()"
    ],
    "org.apache.commons.math3.complex.Complex#sinh()": [
        "org.apache.commons.math3.util.FastMath.cosh(double)",
        "org.apache.commons.math3.util.FastMath.sin(double)",
        "org.apache.commons.math3.complex.Complex.<staticinit>()",
        "org.apache.commons.math3.complex.Complex#createComplex(double,double)",
        "org.apache.commons.math3.util.FastMath.sinh(double)",
        "org.apache.commons.math3.util.FastMath.cos(double)"
    ],
    "org.apache.commons.math3.distribution.EnumeratedRealDistribution#cumulativeProbability(double)": [
        "org.apache.commons.math3.util.Pair#getValue()",
        "org.apache.commons.math3.distribution.EnumeratedDistribution#getPmf()",
        "org.apache.commons.math3.util.Pair#getKey()",
        "org.apache.commons.math3.optim.PointVectorValuePair#getValue()",
        "org.apache.commons.math3.optimization.PointVectorValuePair#getValue()"
    ],
    "org.apache.commons.math3.distribution.MultivariateNormalDistribution#sample()": [
        "org.apache.commons.math3.linear.Array2DRowRealMatrix#operate(double[])",
        "org.apache.commons.math3.random.RandomAdaptor#nextGaussian()",
        "org.apache.commons.math3.random.SynchronizedRandomGenerator#nextGaussian()",
        "org.apache.commons.math3.random.RandomGeneratorFactory.createRandomGenerator(Random)$RandomGenerator$1#nextGaussian()",
        "org.apache.commons.math3.random.BitsStreamGenerator#nextGaussian()",
        "org.apache.commons.math3.random.AbstractRandomGenerator#nextGaussian()",
        "org.apache.commons.math3.linear.BlockRealMatrix#operate(double[])",
        "org.apache.commons.math3.linear.DiagonalMatrix#operate(double[])",
        "org.apache.commons.math3.linear.AbstractRealMatrix#operate(double[])",
        "org.apache.commons.math3.distribution.AbstractMultivariateRealDistribution#getDimension()"
    ],
    "org.apache.commons.math3.analysis.differentiation.DerivativeStructure#getOrder()": ["org.apache.commons.math3.analysis.differentiation.DSCompiler#getOrder()"],
    "org.apache.commons.math3.analysis.differentiation.DerivativeStructure#hashCode()": [
        "org.apache.commons.math3.util.MathUtils.hash(double[])",
        "org.apache.commons.math3.analysis.differentiation.DerivativeStructure#getFreeParameters()",
        "org.apache.commons.math3.analysis.differentiation.DerivativeStructure#getOrder()"
    ],
    "org.apache.commons.math3.geometry.partitioning.BoundaryAttribute#BoundaryAttribute(SubHyperplane<S extends Space>,SubHyperplane<S extends Space>,NodesSet<S extends Space>)": ["org.apache.commons.math3.geometry.partitioning.BoundaryAttribute.<init>()"],
    "org.apache.commons.math3.analysis.differentiation.DerivativeStructure#copySign(double)": ["org.apache.commons.math3.analysis.differentiation.DerivativeStructure#negate()"],
    "org.apache.commons.math3.ode.sampling.AbstractStepInterpolator#evaluateCompleteInterpolatedState()": [
        "org.apache.commons.math3.ode.nonstiff.GillStepInterpolator#computeInterpolatedStateAndDerivatives(double,double)",
        "org.apache.commons.math3.ode.nonstiff.ThreeEighthesStepInterpolator#computeInterpolatedStateAndDerivatives(double,double)",
        "org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator#computeInterpolatedStateAndDerivatives(double,double)",
        "org.apache.commons.math3.ode.nonstiff.EulerStepInterpolator#computeInterpolatedStateAndDerivatives(double,double)",
        "org.apache.commons.math3.ode.nonstiff.GraggBulirschStoerStepInterpolator#computeInterpolatedStateAndDerivatives(double,double)",
        "org.apache.commons.math3.ode.nonstiff.HighamHall54StepInterpolator#computeInterpolatedStateAndDerivatives(double,double)",
        "org.apache.commons.math3.ode.nonstiff.LutherStepInterpolator#computeInterpolatedStateAndDerivatives(double,double)",
        "org.apache.commons.math3.ode.nonstiff.MidpointStepInterpolator#computeInterpolatedStateAndDerivatives(double,double)",
        "org.apache.commons.math3.ode.nonstiff.ClassicalRungeKuttaStepInterpolator#computeInterpolatedStateAndDerivatives(double,double)",
        "org.apache.commons.math3.ode.sampling.NordsieckStepInterpolator#computeInterpolatedStateAndDerivatives(double,double)",
        "org.apache.commons.math3.ode.nonstiff.DormandPrince54StepInterpolator#computeInterpolatedStateAndDerivatives(double,double)"
    ],
    "org.apache.commons.math3.genetics.ElitisticListPopulation#setElitismRate(double)": ["org.apache.commons.math3.exception.util.LocalizedFormats.<staticinit>()"],
    "org.apache.commons.math3.linear.AbstractRealMatrix#subtract(RealMatrix)": [
        "org.apache.commons.math3.linear.DiagonalMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.Array2DRowRealMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.Array2DRowRealMatrix#setEntry(int,int,double)",
        "org.apache.commons.math3.linear.DiagonalMatrix#getEntry(int,int)",
        "org.apache.commons.math3.linear.OpenMapRealMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.OpenMapRealMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.DiagonalMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.BlockRealMatrix#setEntry(int,int,double)",
        "org.apache.commons.math3.linear.OpenMapRealMatrix#setEntry(int,int,double)",
        "org.apache.commons.math3.linear.OpenMapRealMatrix#getEntry(int,int)",
        "org.apache.commons.math3.linear.DiagonalMatrix#createMatrix(int,int)",
        "org.apache.commons.math3.linear.BlockRealMatrix#getEntry(int,int)",
        "org.apache.commons.math3.linear.Array2DRowRealMatrix#getEntry(int,int)",
        "org.apache.commons.math3.linear.BlockRealMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.Array2DRowRealMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.OpenMapRealMatrix#createMatrix(int,int)",
        "org.apache.commons.math3.linear.BlockRealMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.MatrixUtils.checkSubtractionCompatible(AnyMatrix,AnyMatrix)",
        "org.apache.commons.math3.linear.Array2DRowRealMatrix#createMatrix(int,int)",
        "org.apache.commons.math3.linear.BlockRealMatrix#createMatrix(int,int)",
        "org.apache.commons.math3.linear.DiagonalMatrix#setEntry(int,int,double)"
    ],
    "org.apache.commons.math3.ode.nonstiff.AdamsFieldIntegrator#updateHighOrderDerivativesPhase1(Array2DRowFieldMatrix<T extends RealFieldElement>)": ["org.apache.commons.math3.ode.nonstiff.AdamsNordsieckFieldTransformer#updateHighOrderDerivativesPhase1(Array2DRowFieldMatrix<T extends RealFieldElement>)"],
    "org.apache.commons.math3.fitting.leastsquares.GaussNewtonOptimizer.computeNormalMatrix(RealMatrix,RealVector)": [
        "org.apache.commons.math3.linear.DiagonalMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.Array2DRowRealMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.BlockFieldMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.Array2DRowRealMatrix#setEntry(int,int,double)",
        "org.apache.commons.math3.linear.DiagonalMatrix#getEntry(int,int)",
        "org.apache.commons.math3.linear.OpenMapRealVector#setEntry(int,double)",
        "org.apache.commons.math3.util.Pair#Pair(K,V)",
        "org.apache.commons.math3.linear.OpenMapRealMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.DiagonalMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.ArrayRealVector#setEntry(int,double)",
        "org.apache.commons.math3.linear.BlockRealMatrix#getEntry(int,int)",
        "org.apache.commons.math3.linear.BlockFieldMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.BlockRealMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.DiagonalMatrix#setEntry(int,int,double)",
        "org.apache.commons.math3.linear.MatrixUtils.createRealMatrix(int,int)",
        "org.apache.commons.math3.linear.SparseFieldMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.ArrayRealVector#ArrayRealVector(int)",
        "org.apache.commons.math3.linear.OpenMapRealMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.BlockRealMatrix#setEntry(int,int,double)",
        "org.apache.commons.math3.linear.OpenMapRealMatrix#setEntry(int,int,double)",
        "org.apache.commons.math3.linear.OpenMapRealMatrix#getEntry(int,int)",
        "org.apache.commons.math3.linear.ArrayRealVector#getEntry(int)",
        "org.apache.commons.math3.linear.RealVector.unmodifiableRealVector(RealVector)$RealVector$1#setEntry(int,double)",
        "org.apache.commons.math3.linear.Array2DRowFieldMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.SparseFieldMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.Array2DRowRealMatrix#getEntry(int,int)",
        "org.apache.commons.math3.linear.Array2DRowRealMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.Array2DRowFieldMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.BlockRealMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.OpenMapRealVector#getEntry(int)",
        "org.apache.commons.math3.linear.RealVector.unmodifiableRealVector(RealVector)$RealVector$1#getEntry(int)"
    ],
    "org.apache.commons.math3.fitting.AbstractCurveFitter.TheoreticalValuesFunction#getModelFunctionJacobian()$MultivariateMatrixFunction$1#value(double[])": [
        "org.apache.commons.math3.analysis.polynomials.PolynomialFunction.Parametric#gradient(double,double[]...)",
        "org.apache.commons.math3.fitting.GaussianCurveFitter$Parametric$1#gradient(double,double[]...)",
        "org.apache.commons.math3.optimization.fitting.GaussianFitter#fit(double[])$Parametric$1#gradient(double,double[]...)",
        "org.apache.commons.math3.analysis.function.Gaussian.Parametric#gradient(double,double[]...)",
        "org.apache.commons.math3.analysis.function.HarmonicOscillator.Parametric#gradient(double,double[]...)",
        "org.apache.commons.math3.fitting.GaussianFitter#fit(double[])$Parametric$1#gradient(double,double[]...)",
        "org.apache.commons.math3.analysis.function.Logit.Parametric#gradient(double,double[]...)",
        "org.apache.commons.math3.analysis.function.Logistic.Parametric#gradient(double,double[]...)",
        "org.apache.commons.math3.analysis.function.Sigmoid.Parametric#gradient(double,double[]...)"
    ],
    "org.apache.commons.math3.ml.neuralnet.sofm.KohonenTrainingTask#KohonenTrainingTask(Network,Iterator<double[]>,KohonenUpdateAction)": ["org.apache.commons.math3.ml.neuralnet.sofm.KohonenTrainingTask.<init>()"],
    "org.apache.commons.math3.distribution.ParetoDistribution#ParetoDistribution(double,double)": [
        "org.apache.commons.math3.distribution.ParetoDistribution.<staticinit>()",
        "org.apache.commons.math3.distribution.ParetoDistribution#ParetoDistribution(double,double,double)"
    ],
    "org.apache.commons.math3.stat.descriptive.moment.Mean#increment(double)": [
        "org.apache.commons.math3.stat.descriptive.moment.ThirdMoment#increment(double)",
        "org.apache.commons.math3.stat.descriptive.moment.SecondMoment#increment(double)",
        "org.apache.commons.math3.stat.descriptive.moment.FourthMoment#increment(double)",
        "org.apache.commons.math3.stat.descriptive.moment.FirstMoment#increment(double)"
    ],
    "org.apache.commons.math3.optim.nonlinear.scalar.MultivariateFunctionMappingAdapter.LowerUpperBoundMapper#boundedToUnbounded(double)": [
        "org.apache.commons.math3.analysis.FunctionUtils.multiply(DifferentiableUnivariateFunction[]...)$UnivariateFunction$1$UnivariateFunction$1#derivative()$UnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.polynomials.PolynomialSplineFunction#value(double)",
        "org.apache.commons.math3.analysis.function.Gaussian#value(double)",
        "org.apache.commons.math3.analysis.function.Tanh#value(double)",
        "org.apache.commons.math3.analysis.function.Inverse#value(double)",
        "org.apache.commons.math3.analysis.function.HarmonicOscillator#value(double)",
        "org.apache.commons.math3.analysis.FunctionUtils.fix1stArgument(BivariateFunction,double)$UnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.function.Asin#value(double)",
        "org.apache.commons.math3.analysis.function.Asinh#value(double)",
        "org.apache.commons.math3.analysis.FunctionUtils.multiply(UnivariateFunction[]...)$UnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.function.Atan#value(double)",
        "org.apache.commons.math3.analysis.FunctionUtils.toDifferentiableUnivariateFunction(UnivariateDifferentiableFunction)$DifferentiableUnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.function.Cbrt#value(double)",
        "org.apache.commons.math3.analysis.polynomials.PolynomialFunctionLagrangeForm#value(double)",
        "org.apache.commons.math3.analysis.function.Exp#value(double)",
        "org.apache.commons.math3.special.BesselJ#value(double)",
        "org.apache.commons.math3.analysis.polynomials.PolynomialFunctionNewtonForm#value(double)",
        "org.apache.commons.math3.analysis.FunctionUtils.add(UnivariateFunction[]...)$UnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.function.Sin#value(double)",
        "org.apache.commons.math3.analysis.function.Cos#value(double)",
        "org.apache.commons.math3.analysis.interpolation.UnivariatePeriodicInterpolator#interpolate(double[],double[])$UnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.function.Log10#value(double)",
        "org.apache.commons.math3.analysis.function.Sqrt#value(double)",
        "org.apache.commons.math3.analysis.function.Log#value(double)",
        "org.apache.commons.math3.analysis.function.Sinc#value(double)",
        "org.apache.commons.math3.ode.events.EventState#evaluateStep(StepInterpolator)$UnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.function.Minus#value(double)",
        "org.apache.commons.math3.analysis.integration.IterativeLegendreGaussIntegrator#stage(int)$UnivariateFunction$1#value(double)",
        "org.apache.commons.math3.optimization.general.NonLinearConjugateGradientOptimizer.LineSearchFunction#value(double)",
        "org.apache.commons.math3.analysis.function.Floor#value(double)",
        "org.apache.commons.math3.analysis.FunctionUtils.multiply(DifferentiableUnivariateFunction[]...)$DifferentiableUnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.FunctionUtils.combine(BivariateFunction,UnivariateFunction,UnivariateFunction)$UnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.FunctionUtils.add(DifferentiableUnivariateFunction[]...)$UnivariateFunction$1$UnivariateFunction$1#derivative()$UnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.function.Sinh#value(double)",
        "org.apache.commons.math3.analysis.FunctionUtils.multiply(UnivariateDifferentiableFunction[]...)$UnivariateDifferentiableFunction$1#value(double)",
        "org.apache.commons.math3.analysis.function.Tan#value(double)",
        "org.apache.commons.math3.distribution.AbstractRealDistribution#inverseCumulativeProbability(double)$UnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.FunctionUtils.add(DifferentiableUnivariateFunction[]...)$DifferentiableUnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.function.Ceil#value(double)",
        "org.apache.commons.math3.analysis.function.Logistic#value(double)",
        "org.apache.commons.math3.analysis.function.Signum#value(double)",
        "org.apache.commons.math3.analysis.function.Constant#value(double)",
        "org.apache.commons.math3.analysis.function.Atanh#value(double)",
        "org.apache.commons.math3.analysis.FunctionUtils.compose(DifferentiableUnivariateFunction[]...)$UnivariateFunction$1$UnivariateFunction$1#derivative()$UnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.FunctionUtils.add(UnivariateDifferentiableFunction[]...)$UnivariateDifferentiableFunction$1#value(double)",
        "org.apache.commons.math3.analysis.function.Abs#value(double)",
        "org.apache.commons.math3.analysis.differentiation.FiniteDifferencesDifferentiator#differentiate(UnivariateFunction)$UnivariateDifferentiableFunction$1#value(double)",
        "org.apache.commons.math3.analysis.function.Identity#value(double)",
        "org.apache.commons.math3.analysis.function.Expm1#value(double)",
        "org.apache.commons.math3.analysis.function.Logit#value(double)",
        "org.apache.commons.math3.analysis.function.Log1p#value(double)",
        "org.apache.commons.math3.analysis.FunctionUtils.fix2ndArgument(BivariateFunction,double)$UnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.FunctionUtils.toUnivariateDifferential(DifferentiableUnivariateFunction)$UnivariateDifferentiableFunction$1#value(double)",
        "org.apache.commons.math3.analysis.FunctionUtils.toDifferentiableUnivariateFunction(UnivariateDifferentiableFunction)$UnivariateFunction$1$UnivariateFunction$1#derivative()$UnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.polynomials.PolynomialFunction#value(double)",
        "org.apache.commons.math3.analysis.function.Rint#value(double)",
        "org.apache.commons.math3.analysis.FunctionUtils.compose(UnivariateFunction[]...)$UnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.function.Cosh#value(double)",
        "org.apache.commons.math3.optimization.direct.PowellOptimizer.LineSearch#search(double[],double[])$UnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.FunctionUtils.compose(DifferentiableUnivariateFunction[]...)$DifferentiableUnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.function.Acosh#value(double)",
        "org.apache.commons.math3.analysis.function.StepFunction#value(double)",
        "org.apache.commons.math3.analysis.FunctionUtils.compose(UnivariateDifferentiableFunction[]...)$UnivariateDifferentiableFunction$1#value(double)",
        "org.apache.commons.math3.analysis.function.Acos#value(double)",
        "org.apache.commons.math3.analysis.function.Power#value(double)",
        "org.apache.commons.math3.optim.nonlinear.scalar.LineSearch#search(double[],double[])$UnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.function.Sigmoid#value(double)",
        "org.apache.commons.math3.analysis.function.Ulp#value(double)"
    ],
    "org.apache.commons.math3.ode.sampling.FieldStepNormalizer#handleStep(FieldStepInterpolator<T extends RealFieldElement>,boolean)": [
        "org.apache.commons.math3.ode.sampling.StepNormalizerBounds#lastIncluded()",
        "org.apache.commons.math3.ode.sampling.AbstractFieldStepInterpolator#getPreviousState()",
        "org.apache.commons.math3.util.Decimal64#getReal()",
        "org.apache.commons.math3.ode.sampling.AbstractFieldStepInterpolator#getInterpolatedState(T extends RealFieldElement)",
        "org.apache.commons.math3.dfp.Dfp#getReal()",
        "org.apache.commons.math3.ode.sampling.AbstractFieldStepInterpolator#isForward()",
        "org.apache.commons.math3.analysis.differentiation.SparseGradient#getReal()",
        "org.apache.commons.math3.ode.sampling.AbstractFieldStepInterpolator#getCurrentState()",
        "org.apache.commons.math3.ode.FieldODEState#getTime()",
        "org.apache.commons.math3.analysis.differentiation.DerivativeStructure#getReal()",
        "org.apache.commons.math3.ode.sampling.FieldStepNormalizer#isNextInStep(T extends RealFieldElement,FieldStepInterpolator<T extends RealFieldElement>)",
        "org.apache.commons.math3.ode.sampling.FieldStepNormalizer#doNormalizedStep(boolean)",
        "org.apache.commons.math3.util.FastMath.floor(double)",
        "org.apache.commons.math3.util.Precision.equals(float,float,int)",
        "org.apache.commons.math3.ode.sampling.StepNormalizerMode.<staticinit>()"
    ],
    "org.apache.commons.math3.geometry.spherical.twod.EdgesBuilder#addContribution(SubCircle,boolean,BSPTree<Sphere2D>)": [
        "org.apache.commons.math3.geometry.spherical.twod.Edge#Edge(Vertex,Vertex,double,Circle)",
        "org.apache.commons.math3.geometry.spherical.twod.Circle#toSpace(Point<Sphere1D>)",
        "org.apache.commons.math3.geometry.spherical.oned.S1Point#S1Point(double)",
        "org.apache.commons.math3.geometry.spherical.oned.Arc#getSize()",
        "org.apache.commons.math3.geometry.spherical.oned.ArcsSet#asList()",
        "org.apache.commons.math3.geometry.spherical.twod.Circle#getReverse()",
        "org.apache.commons.math3.geometry.spherical.twod.Vertex#Vertex(S2Point)",
        "org.apache.commons.math3.geometry.spherical.oned.Arc#getInf()",
        "org.apache.commons.math3.geometry.partitioning.AbstractSubHyperplane#getRemainingRegion()",
        "org.apache.commons.math3.geometry.partitioning.AbstractSubHyperplane#getHyperplane()",
        "org.apache.commons.math3.geometry.spherical.twod.Vertex#bindWith(Circle)",
        "org.apache.commons.math3.geometry.spherical.oned.Arc#getSup()"
    ],
    "org.apache.commons.math3.optim.linear.SimplexSolver#SimplexSolver()": [
        "org.apache.commons.math3.optim.linear.SimplexSolver#SimplexSolver(double,int,double)",
        "org.apache.commons.math3.optim.linear.SimplexSolver.<staticinit>()"
    ],
    "org.apache.commons.math3.stat.regression.AbstractMultipleLinearRegression#estimateResiduals()": [
        "org.apache.commons.math3.stat.regression.OLSMultipleLinearRegression#calculateBeta()",
        "org.apache.commons.math3.linear.ArrayRealVector#subtract(RealVector)",
        "org.apache.commons.math3.linear.OpenMapRealVector#toArray()",
        "org.apache.commons.math3.linear.RealVector#toArray()",
        "org.apache.commons.math3.stat.regression.GLSMultipleLinearRegression#calculateBeta()",
        "org.apache.commons.math3.linear.AbstractRealMatrix#operate(RealVector)",
        "org.apache.commons.math3.linear.RealVector.unmodifiableRealVector(RealVector)$RealVector$1#toArray()",
        "org.apache.commons.math3.linear.OpenMapRealVector#subtract(RealVector)",
        "org.apache.commons.math3.linear.RealVector#subtract(RealVector)",
        "org.apache.commons.math3.linear.ArrayRealVector#toArray()",
        "org.apache.commons.math3.linear.RealVector.unmodifiableRealVector(RealVector)$RealVector$1#subtract(RealVector)"
    ],
    "org.apache.commons.math3.util.MathArrays.distance1(double[],double[])": [
        "org.apache.commons.math3.util.FastMath.abs(double)",
        "org.apache.commons.math3.util.MathArrays.checkEqualLength(double[],double[])"
    ],
    "org.apache.commons.math3.linear.BlockFieldMatrix#walkInOptimizedOrder(FieldMatrixChangingVisitor<T extends FieldElement>)": [
        "org.apache.commons.math3.linear.AbstractFieldMatrix#getSubMatrix(int[],int[])$DefaultFieldMatrixChangingVisitor$1#visit(int,int,T extends FieldElement)",
        "org.apache.commons.math3.linear.DefaultFieldMatrixChangingVisitor#start(int,int,int,int,int,int)",
        "org.apache.commons.math3.linear.DefaultFieldMatrixChangingVisitor#visit(int,int,T extends FieldElement)",
        "org.apache.commons.math3.linear.BlockFieldMatrix.<staticinit>()",
        "org.apache.commons.math3.util.FastMath.min(int,int)",
        "org.apache.commons.math3.linear.DefaultFieldMatrixChangingVisitor#end()"
    ],
    "org.apache.commons.math3.linear.RRQRDecomposition#performHouseholderReflection(int,double[][])": ["org.apache.commons.math3.linear.QRDecomposition#performHouseholderReflection(int,double[][])"],
    "org.apache.commons.math3.stat.StatUtils.populationVariance(double[],int,int)": [
        "org.apache.commons.math3.stat.descriptive.moment.Variance#Variance(boolean)",
        "org.apache.commons.math3.stat.descriptive.moment.Variance#evaluate(double[],int,int)"
    ],
    "org.apache.commons.math3.optimization.direct.MultiDirectionalSimplex#MultiDirectionalSimplex(double[])": [
        "org.apache.commons.math3.optimization.direct.MultiDirectionalSimplex#MultiDirectionalSimplex(double[],double,double)",
        "org.apache.commons.math3.optimization.direct.MultiDirectionalSimplex.<staticinit>()"
    ],
    "org.apache.commons.math3.linear.RealVector.unmodifiableRealVector(RealVector)$RealVector$1#iterator()": [
        "org.apache.commons.math3.linear.RealVector.unmodifiableRealVector(RealVector)$RealVector$1#iterator()",
        "org.apache.commons.math3.linear.RealVector#iterator()",
        "org.apache.commons.math3.linear.RealVector.unmodifiableRealVector(RealVector)$Iterator$1$Iterator$1#iterator()$Iterator$1.<init>()"
    ],
    "org.apache.commons.math3.ode.events.EventState#reset(double,double[])": [
        "org.apache.commons.math3.util.FastMath.abs(double)",
        "org.apache.commons.math3.ode.events.EventHandler.Action.<staticinit>()",
        "org.apache.commons.math3.ode.events.EventFilter#resetState(double,double[])"
    ],
    "org.apache.commons.math3.optim.linear.SimplexTableau#createTableau(boolean)": [
        "org.apache.commons.math3.linear.Array2DRowRealMatrix#setEntry(int,int,double)",
        "org.apache.commons.math3.linear.RealVector#mapMultiply(double)",
        "org.apache.commons.math3.linear.OpenMapRealVector#toArray()",
        "org.apache.commons.math3.linear.RealVector.unmodifiableRealVector(RealVector)$RealVector$1#mapMultiply(double)",
        "org.apache.commons.math3.optim.linear.Relationship.<staticinit>()",
        "org.apache.commons.math3.optim.linear.SimplexTableau#getSlackVariableOffset()",
        "org.apache.commons.math3.optim.linear.LinearConstraint#getValue()",
        "org.apache.commons.math3.linear.AbstractRealMatrix#getRowVector(int)",
        "org.apache.commons.math3.optim.linear.LinearObjectiveFunction#getCoefficients()",
        "org.apache.commons.math3.linear.RealVector#toArray()",
        "org.apache.commons.math3.optim.linear.SimplexTableau#getArtificialVariableOffset()",
        "org.apache.commons.math3.linear.RealVector.unmodifiableRealVector(RealVector)$RealVector$1#subtract(RealVector)",
        "org.apache.commons.math3.optim.linear.SimplexTableau#copyArray(double[],double[])",
        "org.apache.commons.math3.linear.BlockRealMatrix#getRowVector(int)",
        "org.apache.commons.math3.linear.RealVector.unmodifiableRealVector(RealVector)$RealVector$1#toArray()",
        "org.apache.commons.math3.optim.linear.LinearConstraint#getCoefficients()",
        "org.apache.commons.math3.linear.RealVector#subtract(RealVector)",
        "org.apache.commons.math3.linear.Array2DRowRealMatrix#Array2DRowRealMatrix(int,int)",
        "org.apache.commons.math3.optim.linear.SimplexTableau#getNumObjectiveFunctions()",
        "org.apache.commons.math3.linear.BlockRealMatrix#setRowVector(int,RealVector)",
        "org.apache.commons.math3.optim.linear.LinearConstraint#getRelationship()",
        "org.apache.commons.math3.linear.ArrayRealVector#subtract(RealVector)",
        "org.apache.commons.math3.optim.linear.LinearObjectiveFunction#getConstantTerm()",
        "org.apache.commons.math3.linear.OpenMapRealVector#subtract(RealVector)",
        "org.apache.commons.math3.linear.Array2DRowRealMatrix#getDataRef()",
        "org.apache.commons.math3.optim.linear.SimplexTableau.getInvertedCoefficientSum(RealVector)",
        "org.apache.commons.math3.linear.AbstractRealMatrix#setRowVector(int,RealVector)",
        "org.apache.commons.math3.linear.ArrayRealVector#toArray()"
    ],
    "org.apache.commons.math3.linear.Array2DRowFieldMatrix#walkInRowOrder(FieldMatrixPreservingVisitor<T extends FieldElement>)": [
        "org.apache.commons.math3.linear.DefaultFieldMatrixPreservingVisitor#end()",
        "org.apache.commons.math3.linear.DefaultFieldMatrixPreservingVisitor#visit(int,int,T extends FieldElement)",
        "org.apache.commons.math3.linear.MatrixUtils.FractionMatrixConverter#start(int,int,int,int,int,int)",
        "org.apache.commons.math3.linear.MatrixUtils.BigFractionMatrixConverter#start(int,int,int,int,int,int)",
        "org.apache.commons.math3.linear.Array2DRowFieldMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.AbstractFieldMatrix#transpose()$DefaultFieldMatrixPreservingVisitor$1#visit(int,int,T extends FieldElement)",
        "org.apache.commons.math3.linear.AbstractFieldMatrix#copySubMatrix(int,int,int,int,T extends FieldElement[][])$DefaultFieldMatrixPreservingVisitor$1#start(int,int,int,int,int,int)",
        "org.apache.commons.math3.ode.nonstiff.AdamsMoultonFieldIntegrator.Corrector#start(int,int,int,int,int,int)",
        "org.apache.commons.math3.linear.DefaultFieldMatrixPreservingVisitor#start(int,int,int,int,int,int)",
        "org.apache.commons.math3.linear.AbstractFieldMatrix#copySubMatrix(int,int,int,int,T extends FieldElement[][])$DefaultFieldMatrixPreservingVisitor$1#visit(int,int,T extends FieldElement)",
        "org.apache.commons.math3.linear.Array2DRowFieldMatrix#getColumnDimension()"
    ],
    "org.apache.commons.math3.util.BigRealField#getOne()": ["org.apache.commons.math3.util.BigReal.<staticinit>()"],
    "org.apache.commons.math3.ml.neuralnet.Neuron#Neuron(long,double[])": ["org.apache.commons.math3.ml.neuralnet.Neuron.<init>()"],
    "org.apache.commons.math3.geometry.spherical.twod.S2Point.vector(double,double)": [
        "org.apache.commons.math3.util.FastMath.sin(double)",
        "org.apache.commons.math3.geometry.euclidean.threed.Vector3D#Vector3D(double,double,double)",
        "org.apache.commons.math3.util.FastMath.<staticinit>()",
        "org.apache.commons.math3.util.FastMath.cos(double)"
    ],
    "org.apache.commons.math3.fitting.HarmonicFitter.ParameterGuesser#sortObservations(WeightedObservedPoint[])": ["org.apache.commons.math3.fitting.WeightedObservedPoint#getX()"],
    "org.apache.commons.math3.linear.ArrayFieldVector#ArrayFieldVector(Field<T extends FieldElement>)": ["org.apache.commons.math3.linear.ArrayFieldVector#ArrayFieldVector(Field<T extends FieldElement>,int)"],
    "org.apache.commons.math3.distribution.PoissonDistribution#sample()": [
        "org.apache.commons.math3.util.FastMath.min(long,long)",
        "org.apache.commons.math3.distribution.PoissonDistribution#nextPoisson(double)"
    ],
    "org.apache.commons.math3.stat.descriptive.moment.Variance.copy(Variance,Variance)": [
        "org.apache.commons.math3.stat.descriptive.moment.ThirdMoment#copy()",
        "org.apache.commons.math3.util.MathUtils.checkNotNull(Object)",
        "org.apache.commons.math3.stat.descriptive.AbstractUnivariateStatistic#setData(double[])",
        "org.apache.commons.math3.stat.descriptive.rank.Percentile#setData(double[])",
        "org.apache.commons.math3.stat.descriptive.AbstractUnivariateStatistic#getDataRef()",
        "org.apache.commons.math3.stat.descriptive.moment.FourthMoment#copy()",
        "org.apache.commons.math3.stat.descriptive.moment.SecondMoment#copy()"
    ],
    "org.apache.commons.math3.genetics.TournamentSelection#tournament(ListPopulation)$ListPopulation$1.<init>()": ["org.apache.commons.math3.genetics.ListPopulation#ListPopulation(int)"],
    "org.apache.commons.math3.stat.inference.TTest#homoscedasticT(double,double,double,double,double,double)": ["org.apache.commons.math3.util.FastMath.sqrt(double)"],
    "org.apache.commons.math3.linear.AbstractFieldMatrix.extractField(T extends FieldElement[][])": [
        "org.apache.commons.math3.exception.NoDataException#NoDataException(Localizable)",
        "org.apache.commons.math3.exception.NullArgumentException#NullArgumentException()",
        "org.apache.commons.math3.exception.util.LocalizedFormats.<staticinit>()"
    ],
    "org.apache.commons.math3.analysis.differentiation.SparseGradient.createConstant(double)": ["org.apache.commons.math3.analysis.differentiation.SparseGradient#SparseGradient(double,Map<Integer, Double>)"],
    "org.apache.commons.math3.filter.KalmanFilter#predict()": ["org.apache.commons.math3.filter.KalmanFilter#predict(RealVector)"],
    "org.apache.commons.math3.analysis.integration.gauss.BaseRuleFactory.convertToDouble(Pair<T extends Number[], T extends Number[]>)": [
        "org.apache.commons.math3.util.Pair#getFirst()",
        "org.apache.commons.math3.util.Pair#getSecond()",
        "org.apache.commons.math3.util.Pair#Pair(K,V)"
    ],
    "org.apache.commons.math3.util.MathArrays.verifyValues(double[],double[],int,int)": ["org.apache.commons.math3.util.MathArrays.verifyValues(double[],double[],int,int,boolean)"],
    "org.apache.commons.math3.analysis.interpolation.BicubicSplineInterpolator#interpolate(double[],double[],double[][])": [
        "org.apache.commons.math3.analysis.FunctionUtils.multiply(DifferentiableUnivariateFunction[]...)$UnivariateFunction$1$UnivariateFunction$1#derivative()$UnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.polynomials.PolynomialSplineFunction#value(double)",
        "org.apache.commons.math3.analysis.function.Gaussian#value(double)",
        "org.apache.commons.math3.analysis.function.Tanh#value(double)",
        "org.apache.commons.math3.util.MathArrays.checkOrder(double[])",
        "org.apache.commons.math3.analysis.function.Inverse#value(double)",
        "org.apache.commons.math3.analysis.function.HarmonicOscillator#value(double)",
        "org.apache.commons.math3.analysis.polynomials.PolynomialSplineFunction#derivative()",
        "org.apache.commons.math3.analysis.FunctionUtils.fix1stArgument(BivariateFunction,double)$UnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.function.Asin#value(double)",
        "org.apache.commons.math3.analysis.function.Asinh#value(double)",
        "org.apache.commons.math3.analysis.FunctionUtils.multiply(UnivariateFunction[]...)$UnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.function.Atan#value(double)",
        "org.apache.commons.math3.analysis.FunctionUtils.toDifferentiableUnivariateFunction(UnivariateDifferentiableFunction)$DifferentiableUnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.function.Cbrt#value(double)",
        "org.apache.commons.math3.analysis.polynomials.PolynomialFunctionLagrangeForm#value(double)",
        "org.apache.commons.math3.analysis.function.Exp#value(double)",
        "org.apache.commons.math3.special.BesselJ#value(double)",
        "org.apache.commons.math3.analysis.polynomials.PolynomialFunctionNewtonForm#value(double)",
        "org.apache.commons.math3.analysis.FunctionUtils.add(UnivariateFunction[]...)$UnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.function.Sin#value(double)",
        "org.apache.commons.math3.analysis.function.Cos#value(double)",
        "org.apache.commons.math3.analysis.interpolation.BicubicSplineInterpolator#previousIndex(int)",
        "org.apache.commons.math3.analysis.interpolation.UnivariatePeriodicInterpolator#interpolate(double[],double[])$UnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.function.Log10#value(double)",
        "org.apache.commons.math3.analysis.function.Sqrt#value(double)",
        "org.apache.commons.math3.analysis.function.Log#value(double)",
        "org.apache.commons.math3.analysis.function.Sinc#value(double)",
        "org.apache.commons.math3.ode.events.EventState#evaluateStep(StepInterpolator)$UnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.function.Minus#value(double)",
        "org.apache.commons.math3.analysis.integration.IterativeLegendreGaussIntegrator#stage(int)$UnivariateFunction$1#value(double)",
        "org.apache.commons.math3.optimization.general.NonLinearConjugateGradientOptimizer.LineSearchFunction#value(double)",
        "org.apache.commons.math3.analysis.function.Floor#value(double)",
        "org.apache.commons.math3.analysis.FunctionUtils.multiply(DifferentiableUnivariateFunction[]...)$DifferentiableUnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.FunctionUtils.combine(BivariateFunction,UnivariateFunction,UnivariateFunction)$UnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.FunctionUtils.add(DifferentiableUnivariateFunction[]...)$UnivariateFunction$1$UnivariateFunction$1#derivative()$UnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.function.Sinh#value(double)",
        "org.apache.commons.math3.analysis.FunctionUtils.multiply(UnivariateDifferentiableFunction[]...)$UnivariateDifferentiableFunction$1#value(double)",
        "org.apache.commons.math3.analysis.function.Tan#value(double)",
        "org.apache.commons.math3.distribution.AbstractRealDistribution#inverseCumulativeProbability(double)$UnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.FunctionUtils.add(DifferentiableUnivariateFunction[]...)$DifferentiableUnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.function.Ceil#value(double)",
        "org.apache.commons.math3.analysis.function.Logistic#value(double)",
        "org.apache.commons.math3.analysis.function.Signum#value(double)",
        "org.apache.commons.math3.analysis.function.Constant#value(double)",
        "org.apache.commons.math3.analysis.interpolation.BicubicSplineInterpolator#nextIndex(int,int)",
        "org.apache.commons.math3.analysis.function.Atanh#value(double)",
        "org.apache.commons.math3.analysis.interpolation.SplineInterpolator#interpolate(double[],double[])",
        "org.apache.commons.math3.analysis.FunctionUtils.compose(DifferentiableUnivariateFunction[]...)$UnivariateFunction$1$UnivariateFunction$1#derivative()$UnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.FunctionUtils.add(UnivariateDifferentiableFunction[]...)$UnivariateDifferentiableFunction$1#value(double)",
        "org.apache.commons.math3.analysis.function.Abs#value(double)",
        "org.apache.commons.math3.analysis.differentiation.FiniteDifferencesDifferentiator#differentiate(UnivariateFunction)$UnivariateDifferentiableFunction$1#value(double)",
        "org.apache.commons.math3.analysis.function.Identity#value(double)",
        "org.apache.commons.math3.analysis.function.Expm1#value(double)",
        "org.apache.commons.math3.analysis.function.Logit#value(double)",
        "org.apache.commons.math3.exception.DimensionMismatchException#DimensionMismatchException(int,int)",
        "org.apache.commons.math3.analysis.function.Log1p#value(double)",
        "org.apache.commons.math3.analysis.FunctionUtils.fix2ndArgument(BivariateFunction,double)$UnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.FunctionUtils.toUnivariateDifferential(DifferentiableUnivariateFunction)$UnivariateDifferentiableFunction$1#value(double)",
        "org.apache.commons.math3.analysis.FunctionUtils.toDifferentiableUnivariateFunction(UnivariateDifferentiableFunction)$UnivariateFunction$1$UnivariateFunction$1#derivative()$UnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.interpolation.SplineInterpolator.<init>()",
        "org.apache.commons.math3.exception.NoDataException#NoDataException()",
        "org.apache.commons.math3.analysis.polynomials.PolynomialFunction#value(double)",
        "org.apache.commons.math3.analysis.function.Rint#value(double)",
        "org.apache.commons.math3.analysis.FunctionUtils.compose(UnivariateFunction[]...)$UnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.function.Cosh#value(double)",
        "org.apache.commons.math3.optimization.direct.PowellOptimizer.LineSearch#search(double[],double[])$UnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.FunctionUtils.compose(DifferentiableUnivariateFunction[]...)$DifferentiableUnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.function.Acosh#value(double)",
        "org.apache.commons.math3.analysis.function.StepFunction#value(double)",
        "org.apache.commons.math3.analysis.FunctionUtils.compose(UnivariateDifferentiableFunction[]...)$UnivariateDifferentiableFunction$1#value(double)",
        "org.apache.commons.math3.analysis.function.Acos#value(double)",
        "org.apache.commons.math3.analysis.function.Power#value(double)",
        "org.apache.commons.math3.analysis.interpolation.BicubicSplineInterpolatingFunction#BicubicSplineInterpolatingFunction(double[],double[],double[][],double[][],double[][],double[][],boolean)",
        "org.apache.commons.math3.optim.nonlinear.scalar.LineSearch#search(double[],double[])$UnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.function.Sigmoid#value(double)",
        "org.apache.commons.math3.analysis.function.Ulp#value(double)"
    ],
    "org.apache.commons.math3.analysis.differentiation.SparseGradient#copySign(SparseGradient)": ["org.apache.commons.math3.analysis.differentiation.SparseGradient#negate()"],
    "org.apache.commons.math3.util.BigReal#negate()": ["org.apache.commons.math3.util.BigReal#BigReal(char[])"],
    "org.apache.commons.math3.linear.RealVector#walkInDefaultOrder(RealVectorPreservingVisitor)": [
        "org.apache.commons.math3.linear.OpenMapRealVector#getDimension()",
        "org.apache.commons.math3.linear.ArrayRealVector#getEntry(int)",
        "org.apache.commons.math3.linear.ArrayRealVector#getDimension()",
        "org.apache.commons.math3.linear.RealVector.unmodifiableRealVector(RealVector)$RealVector$1#getDimension()",
        "org.apache.commons.math3.linear.OpenMapRealVector#getEntry(int)",
        "org.apache.commons.math3.linear.RealVector.unmodifiableRealVector(RealVector)$RealVector$1#getEntry(int)"
    ],
    "org.apache.commons.math3.ode.ParameterizedWrapper#getDimension()": [
        "org.apache.commons.math3.ode.JacobianMatrices.MainStateJacobianWrapper#getDimension()",
        "org.apache.commons.math3.ode.MultistepIntegrator#start(double,double[],double)$FirstOrderDifferentialEquations$1#getDimension()",
        "org.apache.commons.math3.ode.FirstOrderConverter#getDimension()"
    ],
    "org.apache.commons.math3.stat.interval.NormalApproximationInterval#createInterval(int,int,double)": [
        "org.apache.commons.math3.stat.interval.IntervalUtils.checkParameters(int,int,double)",
        "org.apache.commons.math3.distribution.NormalDistribution#NormalDistribution()",
        "org.apache.commons.math3.util.FastMath.sqrt(double)",
        "org.apache.commons.math3.stat.interval.ConfidenceInterval#ConfidenceInterval(double,double,double)",
        "org.apache.commons.math3.distribution.NormalDistribution#inverseCumulativeProbability(double)"
    ],
    "org.apache.commons.math3.distribution.EnumeratedDistribution#sample()": [
        "org.apache.commons.math3.random.SynchronizedRandomGenerator#nextDouble()",
        "org.apache.commons.math3.random.RandomGeneratorFactory.createRandomGenerator(Random)$RandomGenerator$1#nextDouble()",
        "org.apache.commons.math3.random.RandomAdaptor#nextDouble()",
        "org.apache.commons.math3.random.BitsStreamGenerator#nextDouble()"
    ],
    "org.apache.commons.math3.optimization.linear.SimplexSolver#getPivotColumn(SimplexTableau)": [
        "org.apache.commons.math3.optimization.linear.SimplexTableau#getWidth()",
        "org.apache.commons.math3.optimization.linear.SimplexTableau#getEntry(int,int)",
        "org.apache.commons.math3.optimization.linear.SimplexTableau#getNumObjectiveFunctions()"
    ],
    "org.apache.commons.math3.analysis.differentiation.SparseGradient.atan2(SparseGradient,SparseGradient)": ["org.apache.commons.math3.analysis.differentiation.SparseGradient#atan2(SparseGradient)"],
    "org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet.SubIntervalsIterator#SubIntervalsIterator()": [
        "org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet#getAngle(BSPTree<Euclidean1D>)",
        "org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet#getFirstIntervalBoundary()",
        "org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet#isIntervalEnd(BSPTree<Euclidean1D>)",
        "org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet.SubIntervalsIterator.<init>()",
        "org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet.SubIntervalsIterator#selectPending()",
        "org.apache.commons.math3.geometry.partitioning.AbstractRegion#getTree(boolean)",
        "org.apache.commons.math3.geometry.partitioning.BSPTree#getAttribute()",
        "org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet#getFirstLeaf(BSPTree<Euclidean1D>)"
    ],
    "org.apache.commons.math3.optim.BaseMultivariateOptimizer#checkParameters()": ["org.apache.commons.math3.exception.DimensionMismatchException#DimensionMismatchException(int,int)"],
    "org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D.distanceSq(FieldVector3D<T extends RealFieldElement>,Vector3D)": ["org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D#distanceSq(Vector3D)"],
    "org.apache.commons.math3.geometry.partitioning.AbstractRegion#AbstractRegion(Collection<SubHyperplane<S extends Space>>,double)$Comparator$1#compare(SubHyperplane<S extends Space>,SubHyperplane<S extends Space>)": [
        "org.apache.commons.math3.geometry.partitioning.AbstractSubHyperplane#getSize()",
        "org.apache.commons.math3.geometry.euclidean.oned.SubOrientedPoint#getSize()",
        "org.apache.commons.math3.geometry.spherical.oned.SubLimitAngle#getSize()"
    ],
    "org.apache.commons.math3.linear.BlockRealMatrix#getRowMatrix(int)": [
        "org.apache.commons.math3.linear.BlockRealMatrix.<staticinit>()",
        "org.apache.commons.math3.linear.MatrixUtils.checkRowIndex(AnyMatrix,int)",
        "org.apache.commons.math3.linear.BlockRealMatrix#BlockRealMatrix(int,int)",
        "org.apache.commons.math3.linear.BlockRealMatrix#blockWidth(int)"
    ],
    "org.apache.commons.math3.geometry.partitioning.AbstractRegion#applyTransform(Transform<S extends Space, T extends Space>)": [
        "org.apache.commons.math3.geometry.partitioning.AbstractRegion#recurseTransform(BSPTree<S extends Space>,Transform<S extends Space, T extends Space>,Map<BSPTree<S extends Space>, BSPTree<S extends Space>>)",
        "org.apache.commons.math3.geometry.partitioning.AbstractRegion#getTree(boolean)",
        "org.apache.commons.math3.geometry.partitioning.BoundaryAttribute#getSplitters()",
        "org.apache.commons.math3.geometry.partitioning.NodesSet#add(BSPTree<S extends Space>)"
    ],
    "org.apache.commons.math3.linear.SparseFieldVector#outerProduct(FieldVector<T extends FieldElement>)": [
        "org.apache.commons.math3.util.OpenIntToFieldHashMap.Iterator#hasNext()",
        "org.apache.commons.math3.linear.SparseFieldVector#getEntry(int)",
        "org.apache.commons.math3.linear.ArrayFieldVector#getDimension()",
        "org.apache.commons.math3.util.OpenIntToFieldHashMap.Iterator#key()",
        "org.apache.commons.math3.util.OpenIntToFieldHashMap.Iterator#value()",
        "org.apache.commons.math3.linear.SparseFieldMatrix#setEntry(int,int,T extends FieldElement)",
        "org.apache.commons.math3.linear.Array2DRowFieldMatrix#setEntry(int,int,T extends FieldElement)",
        "org.apache.commons.math3.linear.BlockFieldMatrix#setEntry(int,int,T extends FieldElement)",
        "org.apache.commons.math3.linear.ArrayFieldVector#getEntry(int)",
        "org.apache.commons.math3.linear.SparseFieldVector#outerProduct(SparseFieldVector<T extends FieldElement>)",
        "org.apache.commons.math3.util.OpenIntToFieldHashMap.Iterator#advance()",
        "org.apache.commons.math3.linear.SparseFieldMatrix#SparseFieldMatrix(Field<T extends FieldElement>,int,int)",
        "org.apache.commons.math3.linear.SparseFieldVector#getDimension()",
        "org.apache.commons.math3.util.OpenIntToFieldHashMap#iterator()"
    ],
    "org.apache.commons.math3.ode.nonstiff.DormandPrince54FieldStepInterpolator#DormandPrince54FieldStepInterpolator(Field<T extends RealFieldElement>,boolean,T extends RealFieldElement[][],FieldODEStateAndDerivative<T extends RealFieldElement>,FieldODEStateAndDerivative<T extends RealFieldElement>,FieldODEStateAndDerivative<T extends RealFieldElement>,FieldODEStateAndDerivative<T extends RealFieldElement>,FieldEquationsMapper<T extends RealFieldElement>)": [
        "org.apache.commons.math3.ode.nonstiff.RungeKuttaFieldStepInterpolator#RungeKuttaFieldStepInterpolator(Field<T extends RealFieldElement>,boolean,T extends RealFieldElement[][],FieldODEStateAndDerivative<T extends RealFieldElement>,FieldODEStateAndDerivative<T extends RealFieldElement>,FieldODEStateAndDerivative<T extends RealFieldElement>,FieldODEStateAndDerivative<T extends RealFieldElement>,FieldEquationsMapper<T extends RealFieldElement>)",
        "org.apache.commons.math3.fraction.BigFractionField#getOne()",
        "org.apache.commons.math3.fraction.FractionField#getOne()",
        "org.apache.commons.math3.analysis.differentiation.SparseGradient#getField()$Field$1#getOne()",
        "org.apache.commons.math3.dfp.DfpField#getOne()",
        "org.apache.commons.math3.analysis.differentiation.DerivativeStructure#getField()$Field$1#getOne()",
        "org.apache.commons.math3.ode.nonstiff.DormandPrince54FieldStepInterpolator.<init>()",
        "org.apache.commons.math3.util.Decimal64Field#getOne()",
        "org.apache.commons.math3.complex.ComplexField#getOne()",
        "org.apache.commons.math3.util.BigRealField#getOne()"
    ],
    "org.apache.commons.math3.analysis.differentiation.DerivativeStructure#remainder(double)": [
        "org.apache.commons.math3.analysis.differentiation.DerivativeStructure#DerivativeStructure(DerivativeStructure)",
        "org.apache.commons.math3.util.FastMath.IEEEremainder(double,double)"
    ],
    "org.apache.commons.math3.optimization.linear.SimplexSolver#doOptimize()": [
        "org.apache.commons.math3.optimization.linear.SimplexSolver#doIteration(SimplexTableau)",
        "org.apache.commons.math3.optimization.linear.AbstractLinearOptimizer#getFunction()",
        "org.apache.commons.math3.optimization.linear.SimplexSolver#solvePhase1(SimplexTableau)",
        "org.apache.commons.math3.optimization.linear.AbstractLinearOptimizer#getGoalType()",
        "org.apache.commons.math3.optimization.linear.SimplexTableau#SimplexTableau(LinearObjectiveFunction,Collection<LinearConstraint>,GoalType,boolean,double,int)",
        "org.apache.commons.math3.optimization.linear.AbstractLinearOptimizer#restrictToNonNegative()",
        "org.apache.commons.math3.optimization.linear.SimplexTableau#getSolution()",
        "org.apache.commons.math3.optimization.linear.AbstractLinearOptimizer#getConstraints()",
        "org.apache.commons.math3.optimization.linear.SimplexTableau#isOptimal()",
        "org.apache.commons.math3.optimization.linear.SimplexTableau#dropPhase1Objective()"
    ],
    "org.apache.commons.math3.analysis.function.Tanh#value(DerivativeStructure)": ["org.apache.commons.math3.analysis.differentiation.DerivativeStructure#tanh()"],
    "org.apache.commons.math3.stat.descriptive.moment.StandardDeviation#evaluate(double[])": [
        "org.apache.commons.math3.util.FastMath.sqrt(double)",
        "org.apache.commons.math3.stat.descriptive.moment.Variance#evaluate(double[])"
    ],
    "org.apache.commons.math3.linear.NonSymmetricMatrixException#NonSymmetricMatrixException(int,int,double)": [
        "org.apache.commons.math3.linear.NonSymmetricMatrixException.<init>()",
        "org.apache.commons.math3.exception.util.LocalizedFormats.<staticinit>()"
    ],
    "org.apache.commons.math3.geometry.euclidean.threed.FieldRotation.applyTo(Rotation,FieldRotation<T extends RealFieldElement>)": [
        "org.apache.commons.math3.geometry.euclidean.threed.Rotation#getQ3()",
        "org.apache.commons.math3.geometry.euclidean.threed.Rotation#getQ2()",
        "org.apache.commons.math3.geometry.euclidean.threed.Rotation#getQ1()",
        "org.apache.commons.math3.geometry.euclidean.threed.Rotation#getQ0()",
        "org.apache.commons.math3.geometry.euclidean.threed.FieldRotation#FieldRotation(T extends RealFieldElement,T extends RealFieldElement,T extends RealFieldElement,T extends RealFieldElement,boolean)"
    ],
    "org.apache.commons.math3.ode.nonstiff.GillFieldStepInterpolator#computeInterpolatedStateAndDerivatives(FieldEquationsMapper<T extends RealFieldElement>,T extends RealFieldElement,T extends RealFieldElement,T extends RealFieldElement,T extends RealFieldElement)": [
        "org.apache.commons.math3.ode.nonstiff.RungeKuttaFieldStepInterpolator#currentStateLinearCombination(T extends RealFieldElement[]...)",
        "org.apache.commons.math3.ode.nonstiff.RungeKuttaFieldStepInterpolator#previousStateLinearCombination(T extends RealFieldElement[]...)",
        "org.apache.commons.math3.ode.nonstiff.RungeKuttaFieldStepInterpolator#derivativeLinearCombination(T extends RealFieldElement[]...)",
        "org.apache.commons.math3.ode.sampling.AbstractFieldStepInterpolator#getGlobalPreviousState()",
        "org.apache.commons.math3.ode.FieldODEStateAndDerivative#FieldODEStateAndDerivative(T extends RealFieldElement,T extends RealFieldElement[],T extends RealFieldElement[])"
    ],
    "org.apache.commons.math3.util.Decimal64#asin()": [
        "org.apache.commons.math3.util.Decimal64#Decimal64(double)",
        "org.apache.commons.math3.util.FastMath.asin(double)"
    ],
    "org.apache.commons.math3.complex.Complex.equals(Complex,Complex)": ["org.apache.commons.math3.complex.Complex.equals(Complex,Complex,int)"],
    "org.apache.commons.math3.analysis.function.Logistic#value(DerivativeStructure)": [
        "org.apache.commons.math3.analysis.differentiation.DerivativeStructure#negate()",
        "org.apache.commons.math3.analysis.differentiation.DerivativeStructure#multiply(double)",
        "org.apache.commons.math3.analysis.differentiation.DerivativeStructure#pow(double)",
        "org.apache.commons.math3.analysis.differentiation.DerivativeStructure#add(double)",
        "org.apache.commons.math3.analysis.differentiation.DerivativeStructure#reciprocal()",
        "org.apache.commons.math3.analysis.differentiation.DerivativeStructure#exp()"
    ],
    "org.apache.commons.math3.util.Incrementor#incrementCount(int)": [
        "org.apache.commons.math3.util.Incrementor#incrementCount()",
        "org.apache.commons.math3.util.Incrementor.wrap(Incrementor)$Incrementor$1#incrementCount()"
    ],
    "org.apache.commons.math3.random.Well19937c#Well19937c(int)": [
        "org.apache.commons.math3.random.Well19937c.<staticinit>()",
        "org.apache.commons.math3.random.AbstractWell#AbstractWell(int,int,int,int,int)",
        "org.apache.commons.math3.random.Well19937c.<init>()"
    ],
    "org.apache.commons.math3.stat.descriptive.moment.SecondMoment#SecondMoment(SecondMoment)": [
        "org.apache.commons.math3.stat.descriptive.moment.SecondMoment.<init>()",
        "org.apache.commons.math3.stat.descriptive.moment.FirstMoment#FirstMoment(FirstMoment)"
    ],
    "org.apache.commons.math3.linear.BlockFieldMatrix#BlockFieldMatrix(int,int,T extends FieldElement[][],boolean)": [
        "org.apache.commons.math3.exception.DimensionMismatchException#DimensionMismatchException(int,int)",
        "org.apache.commons.math3.linear.BlockFieldMatrix#blockHeight(int)",
        "org.apache.commons.math3.linear.BlockFieldMatrix#blockWidth(int)",
        "org.apache.commons.math3.util.MathArrays.buildArray(Field<T>,int,int)",
        "org.apache.commons.math3.linear.AbstractFieldMatrix#getField()",
        "org.apache.commons.math3.linear.AbstractFieldMatrix#AbstractFieldMatrix(Field<T extends FieldElement>,int,int)",
        "org.apache.commons.math3.linear.BlockFieldMatrix.<staticinit>()",
        "org.apache.commons.math3.linear.BlockFieldMatrix.<init>()",
        "org.apache.commons.math3.linear.AbstractFieldMatrix.extractField(T extends FieldElement[][])"
    ],
    "org.apache.commons.math3.exception.MathInternalError#MathInternalError()": [
        "org.apache.commons.math3.exception.MathInternalError.<init>()",
        "org.apache.commons.math3.exception.MathIllegalStateException#MathIllegalStateException()",
        "org.apache.commons.math3.exception.util.LocalizedFormats.<staticinit>()",
        "org.apache.commons.math3.exception.MathInternalError.<staticinit>()",
        "org.apache.commons.math3.exception.MathIllegalStateException#getContext()"
    ],
    "org.apache.commons.math3.linear.ArrayRealVector#getL1Norm()": ["org.apache.commons.math3.util.FastMath.abs(double)"],
    "org.apache.commons.math3.optimization.general.AbstractScalarDifferentiableOptimizer#optimizeInternal(int,DifferentiableMultivariateFunction,GoalType,double[])": [
        "org.apache.commons.math3.optimization.direct.BaseAbstractMultivariateOptimizer#optimizeInternal(int,FUNC extends MultivariateFunction,GoalType,double[])",
        "org.apache.commons.math3.analysis.FunctionUtils.toDifferentiableMultivariateFunction(MultivariateDifferentiableFunction)$DifferentiableMultivariateFunction$1#gradient()"
    ],
    "org.apache.commons.math3.transform.FastFourierTransformer#transform(Complex[],TransformType)": [
        "org.apache.commons.math3.transform.TransformUtils.createRealImaginaryArray(Complex[])",
        "org.apache.commons.math3.transform.TransformUtils.createComplexArray(double[][])",
        "org.apache.commons.math3.transform.FastFourierTransformer.transformInPlace(double[][],DftNormalization,TransformType)"
    ],
    "org.apache.commons.math3.analysis.function.Constant#Constant(double)": ["org.apache.commons.math3.analysis.function.Constant.<init>()"],
    "org.apache.commons.math3.stat.inference.TestUtils.kolmogorovSmirnovTest(double[],double[])": [
        "org.apache.commons.math3.stat.inference.TestUtils.<staticinit>()",
        "org.apache.commons.math3.stat.inference.KolmogorovSmirnovTest#kolmogorovSmirnovTest(double[],double[])"
    ],
    "org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet#isDirect(BSPTree<Euclidean1D>)": [
        "org.apache.commons.math3.geometry.partitioning.BSPTree#getCut()",
        "org.apache.commons.math3.geometry.partitioning.AbstractSubHyperplane#getHyperplane()",
        "org.apache.commons.math3.geometry.euclidean.oned.OrientedPoint#isDirect()"
    ],
    "org.apache.commons.math3.random.RandomDataImpl#RandomDataImpl(RandomGenerator)": [
        "org.apache.commons.math3.random.RandomDataGenerator#RandomDataGenerator(RandomGenerator)",
        "org.apache.commons.math3.random.RandomDataImpl.<init>()"
    ],
    "org.apache.commons.math3.util.FastMath.abs(float)": ["org.apache.commons.math3.util.FastMath.<staticinit>()"],
    "org.apache.commons.math3.stat.descriptive.rank.Percentile.removeAndSlice(double[],int,int,double)": [
        "org.apache.commons.math3.util.MathArrays.verifyValues(double[],int,int)",
        "org.apache.commons.math3.util.Precision.equalsIncludingNaN(double,double)",
        "org.apache.commons.math3.stat.descriptive.rank.Percentile.copyOf(double[],int,int)"
    ],
    "org.apache.commons.math3.geometry.spherical.twod.PropertiesComputer#visitOrder(BSPTree<Sphere2D>)": ["org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor.Order.<staticinit>()"],
    "org.apache.commons.math3.stat.regression.MillerUpdatingRegression#getOrderOfRegressors()": ["org.apache.commons.math3.util.MathArrays.copyOf(int[])"],
    "org.apache.commons.math3.optimization.general.AbstractLeastSquaresOptimizer#guessParametersErrors()": [
        "org.apache.commons.math3.optimization.general.AbstractLeastSquaresOptimizer#computeCovariances(double[],double)",
        "org.apache.commons.math3.optimization.general.AbstractLeastSquaresOptimizer#getChiSquare()",
        "org.apache.commons.math3.util.FastMath.sqrt(double)",
        "org.apache.commons.math3.exception.util.LocalizedFormats.<staticinit>()"
    ],
    "org.apache.commons.math3.distribution.EnumeratedIntegerDistribution#EnumeratedIntegerDistribution(RandomGenerator,int[])": [
        "org.apache.commons.math3.distribution.EnumeratedIntegerDistribution.<init>()",
        "org.apache.commons.math3.distribution.EnumeratedDistribution#EnumeratedDistribution(RandomGenerator,List<Pair<T, Double>>)",
        "org.apache.commons.math3.distribution.EnumeratedIntegerDistribution.createDistribution(int[],double[])",
        "org.apache.commons.math3.distribution.AbstractIntegerDistribution#AbstractIntegerDistribution(RandomGenerator)"
    ],
    "org.apache.commons.math3.fitting.AbstractCurveFitter#fit(Collection<WeightedObservedPoint>)": [
        "org.apache.commons.math3.fitting.leastsquares.DenseWeightedEvaluation#getPoint()",
        "org.apache.commons.math3.linear.OpenMapRealVector#toArray()",
        "org.apache.commons.math3.fitting.leastsquares.LeastSquaresFactory.LocalLeastSquaresProblem.LazyUnweightedEvaluation#getPoint()",
        "org.apache.commons.math3.fitting.leastsquares.OptimumImpl#getPoint()",
        "org.apache.commons.math3.fitting.PolynomialCurveFitter#getProblem(Collection<WeightedObservedPoint>)",
        "org.apache.commons.math3.linear.RealVector.unmodifiableRealVector(RealVector)$RealVector$1#toArray()",
        "org.apache.commons.math3.fitting.SimpleCurveFitter#getProblem(Collection<WeightedObservedPoint>)",
        "org.apache.commons.math3.fitting.AbstractCurveFitter#getOptimizer()",
        "org.apache.commons.math3.fitting.leastsquares.LevenbergMarquardtOptimizer#optimize(LeastSquaresProblem)",
        "org.apache.commons.math3.fitting.leastsquares.GaussNewtonOptimizer#optimize(LeastSquaresProblem)",
        "org.apache.commons.math3.linear.RealVector#toArray()",
        "org.apache.commons.math3.fitting.GaussianCurveFitter#getProblem(Collection<WeightedObservedPoint>)",
        "org.apache.commons.math3.fitting.HarmonicCurveFitter#getProblem(Collection<WeightedObservedPoint>)",
        "org.apache.commons.math3.linear.ArrayRealVector#toArray()",
        "org.apache.commons.math3.fitting.leastsquares.LeastSquaresFactory.LocalLeastSquaresProblem.UnweightedEvaluation#getPoint()"
    ],
    "org.apache.commons.math3.analysis.differentiation.DerivativeStructure#log10()": [
        "org.apache.commons.math3.analysis.differentiation.DSCompiler#log10(double[],int,double[],int)",
        "org.apache.commons.math3.analysis.differentiation.DerivativeStructure#DerivativeStructure(DSCompiler)"
    ],
    "org.apache.commons.math3.util.Precision.equals(double,double)": ["org.apache.commons.math3.util.Precision.equals(double,double,int)"],
    "org.apache.commons.math3.genetics.UniformCrossover#UniformCrossover(double)": [
        "org.apache.commons.math3.genetics.UniformCrossover.<init>()",
        "org.apache.commons.math3.exception.util.LocalizedFormats.<staticinit>()"
    ],
    "org.apache.commons.math3.stat.inference.GTest#gTestDataSetsComparison(long[],long[])": [
        "org.apache.commons.math3.stat.inference.GTest#gDataSetsComparison(long[],long[])",
        "org.apache.commons.math3.distribution.ChiSquaredDistribution#ChiSquaredDistribution(double,double)",
        "org.apache.commons.math3.distribution.ChiSquaredDistribution#cumulativeProbability(double)"
    ],
    "org.apache.commons.math3.util.ArithmeticUtils.gcd(long,long)": [
        "org.apache.commons.math3.util.FastMath.abs(long)",
        "org.apache.commons.math3.exception.util.LocalizedFormats.<staticinit>()"
    ],
    "org.apache.commons.math3.analysis.function.Log1p#value(DerivativeStructure)": ["org.apache.commons.math3.analysis.differentiation.DerivativeStructure#log1p()"],
    "org.apache.commons.math3.util.FastMath.round(float)": ["org.apache.commons.math3.util.FastMath.floor(double)"],
    "org.apache.commons.math3.dfp.Dfp#equals(Object)": [
        "org.apache.commons.math3.dfp.Dfp.compare(Dfp,Dfp)",
        "org.apache.commons.math3.dfp.Dfp#isNaN()",
        "org.apache.commons.math3.dfp.DfpField#getRadixDigits()"
    ],
    "org.apache.commons.math3.distribution.NormalDistribution#inverseCumulativeProbability(double)": [
        "org.apache.commons.math3.distribution.NormalDistribution.<staticinit>()",
        "org.apache.commons.math3.special.Erf.erfInv(double)"
    ],
    "org.apache.commons.math3.random.RandomDataGenerator#getSecRan()": [
        "org.apache.commons.math3.random.RandomGeneratorFactory.createRandomGenerator(Random)$RandomGenerator$1#setSeed(long)",
        "org.apache.commons.math3.random.SynchronizedRandomGenerator#setSeed(long)",
        "org.apache.commons.math3.random.MersenneTwister#setSeed(long)",
        "org.apache.commons.math3.random.AbstractWell#setSeed(long)",
        "org.apache.commons.math3.random.RandomAdaptor#setSeed(long)",
        "org.apache.commons.math3.random.RandomGeneratorFactory.createRandomGenerator(Random)",
        "org.apache.commons.math3.random.ISAACRandom#setSeed(long)"
    ],
    "org.apache.commons.math3.genetics.ListPopulation#addChromosome(Chromosome)": ["org.apache.commons.math3.exception.util.LocalizedFormats.<staticinit>()"],
    "org.apache.commons.math3.filter.KalmanFilter#KalmanFilter(ProcessModel,MeasurementModel)": [
        "org.apache.commons.math3.linear.DiagonalMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.Array2DRowRealMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.BlockFieldMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.BlockRealMatrix#copy()",
        "org.apache.commons.math3.util.MathUtils.checkNotNull(Object)",
        "org.apache.commons.math3.linear.OpenMapRealMatrix#copy()",
        "org.apache.commons.math3.linear.OpenMapRealMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.DiagonalMatrix#getRowDimension()",
        "org.apache.commons.math3.filter.DefaultMeasurementModel#getMeasurementMatrix()",
        "org.apache.commons.math3.linear.Array2DRowRealMatrix#Array2DRowRealMatrix()",
        "org.apache.commons.math3.filter.DefaultProcessModel#getProcessNoise()",
        "org.apache.commons.math3.linear.BlockFieldMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.OpenMapRealVector#getDimension()",
        "org.apache.commons.math3.linear.AbstractRealMatrix#isSquare()",
        "org.apache.commons.math3.exception.DimensionMismatchException#DimensionMismatchException(int,int)",
        "org.apache.commons.math3.linear.BlockRealMatrix#getRowDimension()",
        "org.apache.commons.math3.filter.DefaultMeasurementModel#getMeasurementNoise()",
        "org.apache.commons.math3.linear.NonSquareMatrixException#NonSquareMatrixException(int,int)",
        "org.apache.commons.math3.linear.AbstractFieldMatrix#isSquare()",
        "org.apache.commons.math3.linear.Array2DRowRealMatrix#copy()",
        "org.apache.commons.math3.linear.DiagonalMatrix#copy()",
        "org.apache.commons.math3.linear.MatrixDimensionMismatchException#MatrixDimensionMismatchException(int,int,int,int)",
        "org.apache.commons.math3.filter.DefaultProcessModel#getInitialStateEstimate()",
        "org.apache.commons.math3.linear.RealVector.unmodifiableRealVector(RealVector)$RealVector$1#getDimension()",
        "org.apache.commons.math3.filter.DefaultProcessModel#getControlMatrix()",
        "org.apache.commons.math3.filter.DefaultProcessModel#getStateTransitionMatrix()",
        "org.apache.commons.math3.linear.ArrayRealVector#getDimension()",
        "org.apache.commons.math3.linear.SparseFieldMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.ArrayRealVector#ArrayRealVector(int)",
        "org.apache.commons.math3.linear.BlockRealMatrix#transpose()",
        "org.apache.commons.math3.linear.OpenMapRealMatrix#getRowDimension()",
        "org.apache.commons.math3.filter.DefaultProcessModel#getInitialErrorCovariance()",
        "org.apache.commons.math3.linear.MatrixUtils.checkAdditionCompatible(AnyMatrix,AnyMatrix)",
        "org.apache.commons.math3.linear.Array2DRowFieldMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.SparseFieldMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.Array2DRowRealMatrix#getRowDimension()",
        "org.apache.commons.math3.filter.KalmanFilter.<init>()",
        "org.apache.commons.math3.linear.AbstractRealMatrix#transpose()",
        "org.apache.commons.math3.linear.Array2DRowFieldMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.BlockRealMatrix#getColumnDimension()"
    ],
    "org.apache.commons.math3.ml.neuralnet.oned.NeuronString.SerializationProxy#SerializationProxy(boolean,double[][])": ["org.apache.commons.math3.ml.neuralnet.oned.NeuronString.SerializationProxy.<init>()"],
    "org.apache.commons.math3.linear.OpenMapRealVector.OpenMapEntry#setValue(double)": [
        "org.apache.commons.math3.util.OpenIntToDoubleHashMap#put(int,double)",
        "org.apache.commons.math3.util.OpenIntToDoubleHashMap.Iterator#key()"
    ],
    "org.apache.commons.math3.optim.linear.SimplexSolver#getPivotColumn(SimplexTableau)": [
        "org.apache.commons.math3.optim.linear.SimplexTableau#getNumObjectiveFunctions()",
        "org.apache.commons.math3.optim.linear.SimplexTableau#getWidth()",
        "org.apache.commons.math3.optim.linear.PivotSelectionRule.<staticinit>()",
        "org.apache.commons.math3.optim.linear.SimplexTableau#getEntry(int,int)",
        "org.apache.commons.math3.optim.linear.SimplexSolver#isValidPivotColumn(SimplexTableau,int)"
    ],
    "org.apache.commons.math3.stat.inference.KolmogorovSmirnovTest#bootstrap(double[],double[],int)": ["org.apache.commons.math3.stat.inference.KolmogorovSmirnovTest#bootstrap(double[],double[],int,boolean)"],
    "org.apache.commons.math3.optim.univariate.SearchInterval#SearchInterval(double,double,double)": ["org.apache.commons.math3.optim.univariate.SearchInterval.<init>()"],
    "org.apache.commons.math3.stat.descriptive.SynchronizedDescriptiveStatistics#getWindowSize()": ["org.apache.commons.math3.stat.descriptive.DescriptiveStatistics#getWindowSize()"],
    "org.apache.commons.math3.linear.QRDecomposition#QRDecomposition(RealMatrix)": ["org.apache.commons.math3.linear.QRDecomposition#QRDecomposition(RealMatrix,double)"],
    "org.apache.commons.math3.analysis.polynomials.PolynomialFunctionNewtonForm#PolynomialFunctionNewtonForm(double[],double[])": [
        "org.apache.commons.math3.analysis.polynomials.PolynomialFunctionNewtonForm.verifyInputArray(double[],double[])",
        "org.apache.commons.math3.analysis.polynomials.PolynomialFunctionNewtonForm.<init>()"
    ],
    "org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet#PolygonsSet(Collection<SubHyperplane<Euclidean2D>>)": [
        "org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet#PolygonsSet(Collection<SubHyperplane<Euclidean2D>>,double)",
        "org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.<staticinit>()"
    ],
    "org.apache.commons.math3.geometry.spherical.twod.Sphere2D#readResolve()": ["org.apache.commons.math3.geometry.spherical.twod.Sphere2D.LazyHolder.<staticinit>()"],
    "org.apache.commons.math3.analysis.solvers.IllinoisSolver#IllinoisSolver()": [
        "org.apache.commons.math3.analysis.solvers.BaseSecantSolver.Method.<staticinit>()",
        "org.apache.commons.math3.analysis.solvers.BaseSecantSolver.<staticinit>()",
        "org.apache.commons.math3.analysis.solvers.IllinoisSolver.<init>()",
        "org.apache.commons.math3.analysis.solvers.BaseSecantSolver#BaseSecantSolver(double,Method)"
    ],
    "org.apache.commons.math3.distribution.PascalDistribution#PascalDistribution(RandomGenerator,int,double)": [
        "org.apache.commons.math3.util.FastMath.log1p(double)",
        "org.apache.commons.math3.util.FastMath.log(double)",
        "org.apache.commons.math3.distribution.PascalDistribution.<init>()",
        "org.apache.commons.math3.distribution.AbstractIntegerDistribution#AbstractIntegerDistribution(RandomGenerator)",
        "org.apache.commons.math3.exception.util.LocalizedFormats.<staticinit>()"
    ],
    "org.apache.commons.math3.optimization.SimplePointChecker#SimplePointChecker(double,double,int)": [
        "org.apache.commons.math3.optimization.AbstractConvergenceChecker#AbstractConvergenceChecker(double,double)",
        "org.apache.commons.math3.optimization.SimplePointChecker.<init>()"
    ],
    "org.apache.commons.math3.random.RandomDataGenerator#nextT(double)": [
        "org.apache.commons.math3.distribution.ExponentialDistribution#sample()",
        "org.apache.commons.math3.random.RandomDataGenerator#getRandomGenerator()",
        "org.apache.commons.math3.distribution.AbstractRealDistribution#sample()",
        "org.apache.commons.math3.distribution.TDistribution.<staticinit>()",
        "org.apache.commons.math3.distribution.TDistribution#TDistribution(RandomGenerator,double,double)",
        "org.apache.commons.math3.distribution.EnumeratedRealDistribution#sample()",
        "org.apache.commons.math3.distribution.BetaDistribution#sample()",
        "org.apache.commons.math3.distribution.LogNormalDistribution#sample()",
        "org.apache.commons.math3.distribution.ParetoDistribution#sample()",
        "org.apache.commons.math3.distribution.UniformRealDistribution#sample()",
        "org.apache.commons.math3.distribution.NormalDistribution#sample()",
        "org.apache.commons.math3.distribution.ConstantRealDistribution#sample()",
        "org.apache.commons.math3.distribution.GammaDistribution#sample()"
    ],
    "org.apache.commons.math3.linear.JacobiPreconditioner#JacobiPreconditioner(double[],boolean)": [
        "org.apache.commons.math3.linear.ArrayRealVector#ArrayRealVector(double[],boolean)",
        "org.apache.commons.math3.linear.RealLinearOperator.<init>()",
        "org.apache.commons.math3.linear.JacobiPreconditioner.<init>()"
    ],
    "org.apache.commons.math3.complex.Quaternion#Quaternion(double,double[])": [
        "org.apache.commons.math3.exception.DimensionMismatchException#DimensionMismatchException(int,int)",
        "org.apache.commons.math3.complex.Quaternion.<init>()"
    ],
    "org.apache.commons.math3.genetics.UniformCrossover#crossover(Chromosome,Chromosome)": [
        "org.apache.commons.math3.genetics.UniformCrossover#mate(AbstractListChromosome<T>,AbstractListChromosome<T>)",
        "org.apache.commons.math3.exception.util.LocalizedFormats.<staticinit>()"
    ],
    "org.apache.commons.math3.fraction.FractionField#getZero()": ["org.apache.commons.math3.fraction.Fraction.<staticinit>()"],
    "org.apache.commons.math3.stat.descriptive.SummaryStatistics#getSumOfLogs()": [
        "org.apache.commons.math3.stat.descriptive.moment.FirstMoment#getResult()",
        "org.apache.commons.math3.stat.descriptive.rank.Min#getResult()",
        "org.apache.commons.math3.stat.descriptive.moment.GeometricMean#getResult()",
        "org.apache.commons.math3.stat.descriptive.moment.Variance#getResult()",
        "org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile#getResult()",
        "org.apache.commons.math3.stat.descriptive.summary.Sum#getResult()",
        "org.apache.commons.math3.stat.descriptive.moment.FourthMoment#getResult()",
        "org.apache.commons.math3.stat.descriptive.moment.StandardDeviation#getResult()",
        "org.apache.commons.math3.stat.descriptive.summary.SumOfLogs#getResult()",
        "org.apache.commons.math3.stat.descriptive.summary.Product#getResult()",
        "org.apache.commons.math3.stat.descriptive.summary.SumOfSquares#getResult()",
        "org.apache.commons.math3.stat.descriptive.moment.Skewness#getResult()",
        "org.apache.commons.math3.stat.descriptive.moment.Kurtosis#getResult()",
        "org.apache.commons.math3.stat.descriptive.rank.Max#getResult()",
        "org.apache.commons.math3.stat.descriptive.moment.SecondMoment#getResult()",
        "org.apache.commons.math3.stat.descriptive.moment.ThirdMoment#getResult()",
        "org.apache.commons.math3.stat.descriptive.moment.Mean#getResult()"
    ],
    "org.apache.commons.math3.stat.regression.SimpleRegression#getRSquare()": [
        "org.apache.commons.math3.stat.regression.SimpleRegression#getSumSquaredErrors()",
        "org.apache.commons.math3.stat.regression.SimpleRegression#getTotalSumSquares()"
    ],
    "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.MultiDirectionalSimplex#MultiDirectionalSimplex(int,double)": [
        "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.MultiDirectionalSimplex#MultiDirectionalSimplex(int,double,double,double)",
        "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.MultiDirectionalSimplex.<staticinit>()"
    ],
    "org.apache.commons.math3.geometry.euclidean.twod.SubLine#SubLine(Vector2D,Vector2D,double)": [
        "org.apache.commons.math3.geometry.euclidean.twod.Line#Line(Vector2D,Vector2D,double)",
        "org.apache.commons.math3.geometry.euclidean.twod.SubLine.<init>()",
        "org.apache.commons.math3.geometry.euclidean.twod.SubLine.buildIntervalSet(Vector2D,Vector2D,double)",
        "org.apache.commons.math3.geometry.partitioning.AbstractSubHyperplane#AbstractSubHyperplane(Hyperplane<S extends Space>,Region<T extends Space>)"
    ],
    "org.apache.commons.math3.complex.ComplexField#getZero()": ["org.apache.commons.math3.complex.Complex.<staticinit>()"],
    "org.apache.commons.math3.linear.RealVector#mapToSelf(UnivariateFunction)": [
        "org.apache.commons.math3.analysis.FunctionUtils.multiply(DifferentiableUnivariateFunction[]...)$UnivariateFunction$1$UnivariateFunction$1#derivative()$UnivariateFunction$1#value(double)",
        "org.apache.commons.math3.linear.RealVector#iterator()",
        "org.apache.commons.math3.analysis.polynomials.PolynomialSplineFunction#value(double)",
        "org.apache.commons.math3.linear.RealVector.unmodifiableRealVector(RealVector).UnmodifiableEntry.UnmodifiableEntry#setValue(double)",
        "org.apache.commons.math3.linear.RealVector.unmodifiableRealVector(RealVector)$RealVector$1#iterator()",
        "org.apache.commons.math3.analysis.function.Gaussian#value(double)",
        "org.apache.commons.math3.analysis.function.Tanh#value(double)",
        "org.apache.commons.math3.linear.RealVector.unmodifiableRealVector(RealVector)$Iterator$1$Iterator$1#sparseIterator()$Iterator$1#hasNext()",
        "org.apache.commons.math3.geometry.spherical.oned.ArcsSet.SubArcsIterator#hasNext()",
        "org.apache.commons.math3.analysis.function.Inverse#value(double)",
        "org.apache.commons.math3.util.Combinations.LexicographicIterator#hasNext()",
        "org.apache.commons.math3.linear.OpenMapRealVector.OpenMapEntry#getValue()",
        "org.apache.commons.math3.analysis.function.HarmonicOscillator#value(double)",
        "org.apache.commons.math3.analysis.FunctionUtils.fix1stArgument(BivariateFunction,double)$UnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.function.Asin#value(double)",
        "org.apache.commons.math3.analysis.function.Asinh#value(double)",
        "org.apache.commons.math3.analysis.FunctionUtils.multiply(UnivariateFunction[]...)$UnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.function.Atan#value(double)",
        "org.apache.commons.math3.userguide.sofm.ChineseRingsClassifier#createIterable()$Iterator$1$Iterator$1#iterator()$Iterator$1#hasNext()",
        "org.apache.commons.math3.analysis.FunctionUtils.toDifferentiableUnivariateFunction(UnivariateDifferentiableFunction)$DifferentiableUnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.function.Cbrt#value(double)",
        "org.apache.commons.math3.analysis.polynomials.PolynomialFunctionLagrangeForm#value(double)",
        "org.apache.commons.math3.analysis.function.Exp#value(double)",
        "org.apache.commons.math3.special.BesselJ#value(double)",
        "org.apache.commons.math3.analysis.polynomials.PolynomialFunctionNewtonForm#value(double)",
        "org.apache.commons.math3.analysis.FunctionUtils.add(UnivariateFunction[]...)$UnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.function.Sin#value(double)",
        "org.apache.commons.math3.analysis.function.Cos#value(double)",
        "org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet.SubIntervalsIterator#hasNext()",
        "org.apache.commons.math3.analysis.interpolation.UnivariatePeriodicInterpolator#interpolate(double[],double[])$UnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.function.Log10#value(double)",
        "org.apache.commons.math3.analysis.function.Sqrt#value(double)",
        "org.apache.commons.math3.analysis.function.Log#value(double)",
        "org.apache.commons.math3.analysis.function.Sinc#value(double)",
        "org.apache.commons.math3.ode.events.EventState#evaluateStep(StepInterpolator)$UnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.function.Minus#value(double)",
        "org.apache.commons.math3.analysis.integration.IterativeLegendreGaussIntegrator#stage(int)$UnivariateFunction$1#value(double)",
        "org.apache.commons.math3.optimization.general.NonLinearConjugateGradientOptimizer.LineSearchFunction#value(double)",
        "org.apache.commons.math3.analysis.function.Floor#value(double)",
        "org.apache.commons.math3.analysis.FunctionUtils.multiply(DifferentiableUnivariateFunction[]...)$DifferentiableUnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.FunctionUtils.combine(BivariateFunction,UnivariateFunction,UnivariateFunction)$UnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.FunctionUtils.add(DifferentiableUnivariateFunction[]...)$UnivariateFunction$1$UnivariateFunction$1#derivative()$UnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.function.Sinh#value(double)",
        "org.apache.commons.math3.analysis.FunctionUtils.multiply(UnivariateDifferentiableFunction[]...)$UnivariateDifferentiableFunction$1#value(double)",
        "org.apache.commons.math3.analysis.function.Tan#value(double)",
        "org.apache.commons.math3.distribution.AbstractRealDistribution#inverseCumulativeProbability(double)$UnivariateFunction$1#value(double)",
        "org.apache.commons.math3.linear.RealVector.unmodifiableRealVector(RealVector)$Iterator$1$Iterator$1#iterator()$Iterator$1#hasNext()",
        "org.apache.commons.math3.util.Combinations.SingletonIterator#hasNext()",
        "org.apache.commons.math3.analysis.FunctionUtils.add(DifferentiableUnivariateFunction[]...)$DifferentiableUnivariateFunction$1#value(double)",
        "org.apache.commons.math3.linear.RealVector.SparseEntryIterator#next()",
        "org.apache.commons.math3.analysis.function.Ceil#value(double)",
        "org.apache.commons.math3.analysis.function.Logistic#value(double)",
        "org.apache.commons.math3.linear.RealVector.Entry#getValue()",
        "org.apache.commons.math3.analysis.function.Signum#value(double)",
        "org.apache.commons.math3.analysis.function.Constant#value(double)",
        "org.apache.commons.math3.analysis.function.Atanh#value(double)",
        "org.apache.commons.math3.analysis.FunctionUtils.compose(DifferentiableUnivariateFunction[]...)$UnivariateFunction$1$UnivariateFunction$1#derivative()$UnivariateFunction$1#value(double)",
        "org.apache.commons.math3.linear.RealVector#iterator()$Iterator$1#hasNext()",
        "org.apache.commons.math3.analysis.FunctionUtils.add(UnivariateDifferentiableFunction[]...)$UnivariateDifferentiableFunction$1#value(double)",
        "org.apache.commons.math3.analysis.function.Abs#value(double)",
        "org.apache.commons.math3.analysis.differentiation.FiniteDifferencesDifferentiator#differentiate(UnivariateFunction)$UnivariateDifferentiableFunction$1#value(double)",
        "org.apache.commons.math3.analysis.function.Identity#value(double)",
        "org.apache.commons.math3.analysis.function.Expm1#value(double)",
        "org.apache.commons.math3.analysis.function.Logit#value(double)",
        "org.apache.commons.math3.analysis.function.Log1p#value(double)",
        "org.apache.commons.math3.linear.RealVector.unmodifiableRealVector(RealVector).UnmodifiableEntry.UnmodifiableEntry#getValue()",
        "org.apache.commons.math3.linear.RealVector.SparseEntryIterator#hasNext()",
        "org.apache.commons.math3.analysis.FunctionUtils.fix2ndArgument(BivariateFunction,double)$UnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.FunctionUtils.toUnivariateDifferential(DifferentiableUnivariateFunction)$UnivariateDifferentiableFunction$1#value(double)",
        "org.apache.commons.math3.analysis.FunctionUtils.toDifferentiableUnivariateFunction(UnivariateDifferentiableFunction)$UnivariateFunction$1$UnivariateFunction$1#derivative()$UnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.polynomials.PolynomialFunction#value(double)",
        "org.apache.commons.math3.analysis.function.Rint#value(double)",
        "org.apache.commons.math3.linear.RealVector.Entry#setValue(double)",
        "org.apache.commons.math3.util.MultidimensionalCounter.Iterator#hasNext()",
        "org.apache.commons.math3.linear.RealVector.unmodifiableRealVector(RealVector)$Iterator$1$Iterator$1#sparseIterator()$Iterator$1#next()",
        "org.apache.commons.math3.analysis.FunctionUtils.compose(UnivariateFunction[]...)$UnivariateFunction$1#value(double)",
        "org.apache.commons.math3.linear.RealVector.unmodifiableRealVector(RealVector)$Iterator$1$Iterator$1#iterator()$Iterator$1#next()",
        "org.apache.commons.math3.analysis.function.Cosh#value(double)",
        "org.apache.commons.math3.optimization.direct.PowellOptimizer.LineSearch#search(double[],double[])$UnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.FunctionUtils.compose(DifferentiableUnivariateFunction[]...)$DifferentiableUnivariateFunction$1#value(double)",
        "org.apache.commons.math3.userguide.sofm.ChineseRingsClassifier#createRandomIterator(long)$Iterator$1#hasNext()",
        "org.apache.commons.math3.util.IntegerSequence.Incrementor#hasNext()",
        "org.apache.commons.math3.analysis.function.Acosh#value(double)",
        "org.apache.commons.math3.analysis.function.StepFunction#value(double)",
        "org.apache.commons.math3.analysis.FunctionUtils.compose(UnivariateDifferentiableFunction[]...)$UnivariateDifferentiableFunction$1#value(double)",
        "org.apache.commons.math3.linear.RealVector#iterator()$Iterator$1#next()",
        "org.apache.commons.math3.analysis.function.Acos#value(double)",
        "org.apache.commons.math3.linear.OpenMapRealVector.OpenMapEntry#setValue(double)",
        "org.apache.commons.math3.analysis.function.Power#value(double)",
        "org.apache.commons.math3.optim.nonlinear.scalar.LineSearch#search(double[],double[])$UnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.function.Sigmoid#value(double)",
        "org.apache.commons.math3.analysis.function.Ulp#value(double)"
    ],
    "org.apache.commons.math3.stat.inference.TestUtils.tTest(double,double[],double)": [
        "org.apache.commons.math3.stat.inference.TestUtils.<staticinit>()",
        "org.apache.commons.math3.stat.inference.TTest#tTest(double,double[],double)"
    ],
    "org.apache.commons.math3.analysis.differentiation.DerivativeStructure#linearCombination(double,DerivativeStructure,double,DerivativeStructure,double,DerivativeStructure)": [
        "org.apache.commons.math3.analysis.differentiation.DerivativeStructure#add(DerivativeStructure)",
        "org.apache.commons.math3.analysis.differentiation.DerivativeStructure#getValue()",
        "org.apache.commons.math3.analysis.differentiation.DerivativeStructure#DerivativeStructure(int,int,double[]...)",
        "org.apache.commons.math3.analysis.differentiation.DerivativeStructure#getOrder()",
        "org.apache.commons.math3.analysis.differentiation.DerivativeStructure#multiply(double)",
        "org.apache.commons.math3.util.MathArrays.linearCombination(double,double,double,double,double,double)",
        "org.apache.commons.math3.analysis.differentiation.DerivativeStructure#getAllDerivatives()",
        "org.apache.commons.math3.analysis.differentiation.DerivativeStructure#getFreeParameters()"
    ],
    "org.apache.commons.math3.stat.descriptive.SynchronizedMultivariateSummaryStatistics#getCovariance()": ["org.apache.commons.math3.stat.descriptive.MultivariateSummaryStatistics#getCovariance()"],
    "org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D.getInstance()": ["org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D.LazyHolder.<staticinit>()"],
    "org.apache.commons.math3.linear.SymmLQ#solveInPlace(RealLinearOperator,RealLinearOperator,RealVector,RealVector)": ["org.apache.commons.math3.linear.SymmLQ#solveInPlace(RealLinearOperator,RealLinearOperator,RealVector,RealVector,boolean,double)"],
    "org.apache.commons.math3.geometry.euclidean.oned.Vector1D#getZero()": ["org.apache.commons.math3.geometry.euclidean.oned.Vector1D.<staticinit>()"],
    "org.apache.commons.math3.analysis.function.Atanh#value(DerivativeStructure)": ["org.apache.commons.math3.analysis.differentiation.DerivativeStructure#atanh()"],
    "org.apache.commons.math3.stat.regression.AbstractMultipleLinearRegression#calculateErrorVariance()": [
        "org.apache.commons.math3.linear.DiagonalMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.Array2DRowRealMatrix#getColumnDimension()",
        "org.apache.commons.math3.stat.regression.AbstractMultipleLinearRegression#calculateResiduals()",
        "org.apache.commons.math3.linear.BlockFieldMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.SparseFieldMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.ArrayRealVector#dotProduct(RealVector)",
        "org.apache.commons.math3.linear.OpenMapRealMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.OpenMapRealMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.DiagonalMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.RealVector#dotProduct(RealVector)",
        "org.apache.commons.math3.linear.RealVector.unmodifiableRealVector(RealVector)$RealVector$1#dotProduct(RealVector)",
        "org.apache.commons.math3.linear.Array2DRowFieldMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.BlockFieldMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.SparseFieldMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.BlockRealMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.Array2DRowRealMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.Array2DRowFieldMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.BlockRealMatrix#getColumnDimension()"
    ],
    "org.apache.commons.math3.stat.inference.TTest#checkSampleData(StatisticalSummary)": [
        "org.apache.commons.math3.exception.NullArgumentException#NullArgumentException()",
        "org.apache.commons.math3.stat.descriptive.DescriptiveStatistics#getN()",
        "org.apache.commons.math3.exception.util.LocalizedFormats.<staticinit>()",
        "org.apache.commons.math3.stat.descriptive.AggregateSummaryStatistics#getN()",
        "org.apache.commons.math3.stat.descriptive.SynchronizedSummaryStatistics#getN()",
        "org.apache.commons.math3.stat.descriptive.StatisticalSummaryValues#getN()",
        "org.apache.commons.math3.stat.descriptive.SummaryStatistics#getN()",
        "org.apache.commons.math3.stat.descriptive.SynchronizedDescriptiveStatistics#getN()"
    ],
    "org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet#PolyhedronsSet(BSPTree<Euclidean3D>,double)": [
        "org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet.<init>()",
        "org.apache.commons.math3.geometry.partitioning.AbstractRegion#AbstractRegion(BSPTree<S extends Space>,double)"
    ],
    "org.apache.commons.math3.geometry.euclidean.twod.Line.LineTransform#apply(Point<Euclidean2D>)": [
        "org.apache.commons.math3.geometry.euclidean.twod.Vector2D#getY()",
        "org.apache.commons.math3.geometry.euclidean.twod.Vector2D#getX()",
        "org.apache.commons.math3.geometry.euclidean.twod.Vector2D#Vector2D(double,double)",
        "org.apache.commons.math3.util.MathArrays.linearCombination(double,double,double,double,double,double)"
    ],
    "org.apache.commons.math3.optim.linear.UnboundedSolutionException#UnboundedSolutionException()": [
        "org.apache.commons.math3.optim.linear.UnboundedSolutionException.<init>()",
        "org.apache.commons.math3.exception.util.LocalizedFormats.<staticinit>()"
    ],
    "org.apache.commons.math3.optimization.direct.SimplexOptimizer#doOptimize()$MultivariateFunction$1#value(double[])": ["org.apache.commons.math3.optimization.direct.BaseAbstractMultivariateOptimizer#computeObjectiveValue(double[])"],
    "org.apache.commons.math3.analysis.function.Sigmoid#Sigmoid()": ["org.apache.commons.math3.analysis.function.Sigmoid#Sigmoid(double,double)"],
    "org.apache.commons.math3.analysis.integration.gauss.GaussIntegratorFactory#legendreHighPrecision(int)": [
        "org.apache.commons.math3.analysis.integration.gauss.GaussIntegrator#GaussIntegrator(Pair<double[], double[]>)",
        "org.apache.commons.math3.analysis.integration.gauss.GaussIntegratorFactory.getRule(BaseRuleFactory<? extends Number>,int)"
    ],
    "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.MultiDirectionalSimplex#MultiDirectionalSimplex(int)": ["org.apache.commons.math3.optim.nonlinear.scalar.noderiv.MultiDirectionalSimplex#MultiDirectionalSimplex(int,double)"],
    "org.apache.commons.math3.linear.RealVector.unmodifiableRealVector(RealVector)": ["org.apache.commons.math3.linear.RealVector.unmodifiableRealVector(RealVector)$RealVector$1.<init>()"],
    "org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant()": ["org.apache.commons.math3.util.FastMathLiteralArrays.<staticinit>()"],
    "org.apache.commons.math3.fitting.leastsquares.LeastSquaresFactory#LeastSquaresFactory()": ["org.apache.commons.math3.fitting.leastsquares.LeastSquaresFactory.<init>()"],
    "org.apache.commons.math3.analysis.differentiation.SparseGradient#remainder(double)": [
        "org.apache.commons.math3.analysis.differentiation.SparseGradient#SparseGradient(double,Map<Integer, Double>)",
        "org.apache.commons.math3.util.FastMath.IEEEremainder(double,double)"
    ],
    "org.apache.commons.math3.ode.nonstiff.GraggBulirschStoerIntegrator#setOrderControl(int,double,double)": ["org.apache.commons.math3.ode.nonstiff.GraggBulirschStoerIntegrator#initializeArrays()"],
    "org.apache.commons.math3.geometry.euclidean.oned.Vector1DFormat#Vector1DFormat(NumberFormat)": [
        "org.apache.commons.math3.geometry.euclidean.oned.Vector1DFormat.<init>()",
        "org.apache.commons.math3.geometry.VectorFormat#VectorFormat(String,String,String,NumberFormat)",
        "org.apache.commons.math3.geometry.VectorFormat.<staticinit>()"
    ],
    "org.apache.commons.math3.analysis.differentiation.FiniteDifferencesDifferentiator#differentiate(UnivariateVectorFunction)": ["org.apache.commons.math3.analysis.differentiation.FiniteDifferencesDifferentiator#differentiate(UnivariateVectorFunction)$UnivariateDifferentiableVectorFunction$1.<init>()"],
    "org.apache.commons.math3.analysis.function.HarmonicOscillator.Parametric#gradient(double,double[]...)": [
        "org.apache.commons.math3.util.FastMath.sin(double)",
        "org.apache.commons.math3.analysis.function.HarmonicOscillator.value(double,double)",
        "org.apache.commons.math3.analysis.function.HarmonicOscillator.Parametric#validateParameters(double[])"
    ],
    "org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D.distanceInf(Vector3D,FieldVector3D<T extends RealFieldElement>)": ["org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D#distanceInf(Vector3D)"],
    "org.apache.commons.math3.fraction.Fraction#Fraction(double,double,int,int)": [
        "org.apache.commons.math3.fraction.Fraction.<init>()",
        "org.apache.commons.math3.fraction.FractionConversionException#FractionConversionException(double,int)",
        "org.apache.commons.math3.util.FastMath.abs(long)",
        "org.apache.commons.math3.util.FastMath.abs(double)",
        "org.apache.commons.math3.fraction.FractionConversionException#FractionConversionException(double,long,long)",
        "org.apache.commons.math3.util.FastMath.floor(double)"
    ],
    "org.apache.commons.math3.ode.nonstiff.HighamHall54Integrator#estimateError(double[][],double[],double[],double)": [
        "org.apache.commons.math3.util.FastMath.abs(double)",
        "org.apache.commons.math3.ode.nonstiff.HighamHall54Integrator.<staticinit>()",
        "org.apache.commons.math3.util.FastMath.max(double,double)",
        "org.apache.commons.math3.util.FastMath.sqrt(double)"
    ],
    "org.apache.commons.math3.fraction.BigFraction#subtract(int)": ["org.apache.commons.math3.fraction.BigFraction#subtract(int)"],
    "org.apache.commons.math3.geometry.euclidean.twod.Vector2D#Vector2D(double[])": [
        "org.apache.commons.math3.exception.DimensionMismatchException#DimensionMismatchException(int,int)",
        "org.apache.commons.math3.geometry.euclidean.twod.Vector2D.<init>()"
    ],
    "org.apache.commons.math3.stat.descriptive.AggregateSummaryStatistics#AggregateSummaryStatistics()": [
        "org.apache.commons.math3.stat.descriptive.SummaryStatistics#SummaryStatistics()",
        "org.apache.commons.math3.stat.descriptive.AggregateSummaryStatistics#AggregateSummaryStatistics(SummaryStatistics)"
    ],
    "org.apache.commons.math3.optim.nonlinear.vector.jacobian.GaussNewtonOptimizer#checkParameters()": [
        "org.apache.commons.math3.optim.BaseMultivariateOptimizer#getLowerBound()",
        "org.apache.commons.math3.exception.util.LocalizedFormats.<staticinit>()",
        "org.apache.commons.math3.optim.BaseMultivariateOptimizer#getUpperBound()"
    ],
    "org.apache.commons.math3.ode.JacobianMatrices#setInitialMainStateJacobian(double[][])": [
        "org.apache.commons.math3.ode.JacobianMatrices#checkDimension(int,Object)",
        "org.apache.commons.math3.ode.ExpandableStatefulODE#setSecondaryState(int,double[])"
    ],
    "org.apache.commons.math3.linear.Array2DRowFieldMatrix#setEntry(int,int,T extends FieldElement)": [
        "org.apache.commons.math3.linear.AbstractFieldMatrix#checkColumnIndex(int)",
        "org.apache.commons.math3.linear.AbstractFieldMatrix#checkRowIndex(int)"
    ],
    "org.apache.commons.math3.ml.neuralnet.oned.NeuronString#NeuronString(int,boolean,FeatureInitializer[])": [
        "org.apache.commons.math3.ml.neuralnet.Network#createNeuron(double[])",
        "org.apache.commons.math3.ml.neuralnet.oned.NeuronString#createLinks()",
        "org.apache.commons.math3.ml.neuralnet.FeatureInitializerFactory.randomize(RealDistribution,FeatureInitializer)$FeatureInitializer$1#value()",
        "org.apache.commons.math3.ml.neuralnet.oned.NeuronString.<init>()",
        "org.apache.commons.math3.ml.neuralnet.Network#Network(long,int)",
        "org.apache.commons.math3.ml.neuralnet.FeatureInitializerFactory.function(UnivariateFunction,double,double)$FeatureInitializer$1#value()"
    ],
    "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.PowellOptimizer#checkParameters()": [
        "org.apache.commons.math3.optim.BaseMultivariateOptimizer#getUpperBound()",
        "org.apache.commons.math3.exception.util.LocalizedFormats.<staticinit>()",
        "org.apache.commons.math3.optim.BaseMultivariateOptimizer#getLowerBound()"
    ],
    "org.apache.commons.math3.optim.nonlinear.scalar.LineSearch#LineSearch(MultivariateOptimizer,double,double,double)": [
        "org.apache.commons.math3.optim.univariate.SimpleUnivariateValueChecker#SimpleUnivariateValueChecker(double,double)",
        "org.apache.commons.math3.optim.nonlinear.scalar.LineSearch.<init>()",
        "org.apache.commons.math3.optim.nonlinear.scalar.LineSearch.<staticinit>()",
        "org.apache.commons.math3.optim.univariate.BrentOptimizer#BrentOptimizer(double,double,ConvergenceChecker<UnivariatePointValuePair>)"
    ],
    "org.apache.commons.math3.analysis.differentiation.DerivativeStructure.DataTransferObject#readResolve()": ["org.apache.commons.math3.analysis.differentiation.DerivativeStructure#DerivativeStructure(int,int,double[]...)"],
    "org.apache.commons.math3.ode.nonstiff.GraggBulirschStoerStepInterpolator#GraggBulirschStoerStepInterpolator(GraggBulirschStoerStepInterpolator)": [
        "org.apache.commons.math3.ode.nonstiff.GraggBulirschStoerStepInterpolator#resetTables(int)",
        "org.apache.commons.math3.ode.sampling.AbstractStepInterpolator#AbstractStepInterpolator(AbstractStepInterpolator)",
        "org.apache.commons.math3.ode.nonstiff.GraggBulirschStoerStepInterpolator.<init>()"
    ],
    "org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D.distanceInf(FieldVector3D<T extends RealFieldElement>,FieldVector3D<T extends RealFieldElement>)": ["org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D#distanceInf(FieldVector3D<T extends RealFieldElement>)"],
    "org.apache.commons.math3.geometry.euclidean.threed.Vector3D#isInfinite()": ["org.apache.commons.math3.geometry.euclidean.threed.Vector3D#isNaN()"],
    "org.apache.commons.math3.distribution.UniformIntegerDistribution#sample()": [
        "org.apache.commons.math3.random.AbstractRandomGenerator#nextInt()",
        "org.apache.commons.math3.random.RandomGeneratorFactory.createRandomGenerator(Random)$RandomGenerator$1#nextInt()",
        "org.apache.commons.math3.random.RandomAdaptor#nextInt()",
        "org.apache.commons.math3.random.RandomGeneratorFactory.createRandomGenerator(Random)$RandomGenerator$1#nextInt(int)",
        "org.apache.commons.math3.random.BitsStreamGenerator#nextInt()",
        "org.apache.commons.math3.random.SynchronizedRandomGenerator#nextInt()",
        "org.apache.commons.math3.random.BitsStreamGenerator#nextInt(int)",
        "org.apache.commons.math3.random.AbstractRandomGenerator#nextInt(int)",
        "org.apache.commons.math3.random.SynchronizedRandomGenerator#nextInt(int)",
        "org.apache.commons.math3.random.RandomAdaptor#nextInt(int)"
    ],
    "org.apache.commons.math3.linear.EigenDecomposition#EigenDecomposition(RealMatrix)": [
        "org.apache.commons.math3.linear.DiagonalMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.Array2DRowRealMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.BlockFieldMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.EigenDecomposition#transformToTridiagonal(RealMatrix)",
        "org.apache.commons.math3.linear.OpenMapRealMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.DiagonalMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.EigenDecomposition#findEigenVectors(double[][])",
        "org.apache.commons.math3.linear.DiagonalMatrix#getData()",
        "org.apache.commons.math3.linear.AbstractRealMatrix#getData()",
        "org.apache.commons.math3.linear.BlockFieldMatrix#getRowDimension()",
        "org.apache.commons.math3.util.Precision.<staticinit>()",
        "org.apache.commons.math3.linear.BlockRealMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.EigenDecomposition#findEigenVectorsFromSchur(SchurTransformer)",
        "org.apache.commons.math3.linear.EigenDecomposition.<init>()",
        "org.apache.commons.math3.linear.EigenDecomposition#transformToSchur(RealMatrix)",
        "org.apache.commons.math3.linear.SparseFieldMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.OpenMapRealMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.Array2DRowFieldMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.SparseFieldMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.Array2DRowRealMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.Array2DRowRealMatrix#getData()",
        "org.apache.commons.math3.linear.MatrixUtils.isSymmetric(RealMatrix,double)",
        "org.apache.commons.math3.linear.Array2DRowFieldMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.BlockRealMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.TriDiagonalTransformer#getQ()",
        "org.apache.commons.math3.linear.BlockRealMatrix#getData()"
    ],
    "org.apache.commons.math3.optimization.direct.AbstractSimplex#build(double[])": [
        "org.apache.commons.math3.exception.DimensionMismatchException#DimensionMismatchException(int,int)",
        "org.apache.commons.math3.optimization.PointValuePair#PointValuePair(double[],double)"
    ],
    "org.apache.commons.math3.distribution.KolmogorovSmirnovDistribution#createH(double)": [
        "org.apache.commons.math3.fraction.BigFraction#compareTo(BigFraction)",
        "org.apache.commons.math3.util.FastMath.ceil(double)",
        "org.apache.commons.math3.fraction.BigFraction#subtract(BigFraction)",
        "org.apache.commons.math3.fraction.BigFraction#multiply(BigFraction)",
        "org.apache.commons.math3.fraction.BigFraction.<staticinit>()",
        "org.apache.commons.math3.fraction.BigFraction#add(BigFraction)",
        "org.apache.commons.math3.fraction.BigFraction#BigFraction(double,double,int)",
        "org.apache.commons.math3.linear.Array2DRowFieldMatrix#Array2DRowFieldMatrix(Field<T extends FieldElement>,T extends FieldElement[][])",
        "org.apache.commons.math3.fraction.BigFraction#multiply(int)",
        "org.apache.commons.math3.fraction.BigFraction#pow(int)",
        "org.apache.commons.math3.fraction.BigFraction#divide(int)",
        "org.apache.commons.math3.fraction.BigFractionField.getInstance()",
        "org.apache.commons.math3.fraction.BigFraction#subtract(int)"
    ],
    "org.apache.commons.math3.util.ResizableDoubleArray#copy()": [
        "org.apache.commons.math3.util.ResizableDoubleArray.copy(ResizableDoubleArray,ResizableDoubleArray)",
        "org.apache.commons.math3.util.ResizableDoubleArray#ResizableDoubleArray()"
    ],
    "org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet#computeGeometricalProperties()": [
        "org.apache.commons.math3.geometry.euclidean.threed.Vector3D.<staticinit>()",
        "org.apache.commons.math3.geometry.euclidean.threed.Vector3D#Vector3D(double,Vector3D)",
        "org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet.FacetsContributionVisitor#FacetsContributionVisitor()",
        "org.apache.commons.math3.geometry.partitioning.BSPTree#visit(BSPTreeVisitor<S extends Space>)",
        "org.apache.commons.math3.geometry.partitioning.AbstractRegion#getSize()",
        "org.apache.commons.math3.geometry.partitioning.AbstractRegion#getTree(boolean)",
        "org.apache.commons.math3.geometry.partitioning.AbstractRegion#setBarycenter(Point<S extends Space>)",
        "org.apache.commons.math3.geometry.partitioning.AbstractRegion#setSize(double)",
        "org.apache.commons.math3.geometry.partitioning.AbstractRegion#getBarycenter()"
    ],
    "org.apache.commons.math3.optim.univariate.UnivariateObjectiveFunction#UnivariateObjectiveFunction(UnivariateFunction)": ["org.apache.commons.math3.optim.univariate.UnivariateObjectiveFunction.<init>()"],
    "org.apache.commons.math3.ode.FieldODEState#FieldODEState(T extends RealFieldElement,T extends RealFieldElement[])": ["org.apache.commons.math3.ode.FieldODEState#FieldODEState(T extends RealFieldElement,T extends RealFieldElement[],T extends RealFieldElement[][])"],
    "org.apache.commons.math3.exception.NoBracketingException#NoBracketingException(Localizable,double,double,double,double,Object[]...)": ["org.apache.commons.math3.exception.NoBracketingException.<init>()"],
    "org.apache.commons.math3.userguide.LowDiscrepancyGeneratorComparison.Display#Display()$RandomVectorGenerator$1#nextVector()": [
        "org.apache.commons.math3.random.SynchronizedRandomGenerator#nextDouble()",
        "org.apache.commons.math3.random.RandomGeneratorFactory.createRandomGenerator(Random)$RandomGenerator$1#nextDouble()",
        "org.apache.commons.math3.random.RandomAdaptor#nextDouble()",
        "org.apache.commons.math3.random.BitsStreamGenerator#nextDouble()"
    ],
    "org.apache.commons.math3.ode.nonstiff.MidpointIntegrator#MidpointIntegrator(double)": [
        "org.apache.commons.math3.ode.nonstiff.MidpointIntegrator.<init>()",
        "org.apache.commons.math3.ode.nonstiff.MidpointIntegrator.<staticinit>()",
        "org.apache.commons.math3.ode.nonstiff.MidpointStepInterpolator#MidpointStepInterpolator()",
        "org.apache.commons.math3.ode.nonstiff.RungeKuttaIntegrator#RungeKuttaIntegrator(String,double[],double[][],double[],RungeKuttaStepInterpolator,double)"
    ],
    "org.apache.commons.math3.distribution.LaplaceDistribution#LaplaceDistribution(RandomGenerator,double,double)": [
        "org.apache.commons.math3.distribution.AbstractRealDistribution#AbstractRealDistribution(RandomGenerator)",
        "org.apache.commons.math3.distribution.LaplaceDistribution.<init>()",
        "org.apache.commons.math3.exception.util.LocalizedFormats.<staticinit>()"
    ],
    "org.apache.commons.math3.random.RandomAdaptor#nextInt(int)": [
        "org.apache.commons.math3.random.BitsStreamGenerator#nextInt(int)",
        "org.apache.commons.math3.random.AbstractRandomGenerator#nextInt(int)",
        "org.apache.commons.math3.random.SynchronizedRandomGenerator#nextInt(int)",
        "org.apache.commons.math3.random.RandomAdaptor#nextInt(int)",
        "org.apache.commons.math3.random.RandomGeneratorFactory.createRandomGenerator(Random)$RandomGenerator$1#nextInt(int)"
    ],
    "org.apache.commons.math3.optimization.general.NonLinearConjugateGradientOptimizer#NonLinearConjugateGradientOptimizer(ConjugateGradientFormula,ConvergenceChecker<PointValuePair>)": [
        "org.apache.commons.math3.optimization.general.ConjugateGradientFormula.<staticinit>()",
        "org.apache.commons.math3.optimization.general.NonLinearConjugateGradientOptimizer#NonLinearConjugateGradientOptimizer(ConjugateGradientFormula,ConvergenceChecker<PointValuePair>,UnivariateSolver,Preconditioner)",
        "org.apache.commons.math3.optimization.general.NonLinearConjugateGradientOptimizer.IdentityPreconditioner.<init>()",
        "org.apache.commons.math3.analysis.solvers.BrentSolver#BrentSolver()"
    ],
    "org.apache.commons.math3.complex.Quaternion.add(Quaternion,Quaternion)": [
        "org.apache.commons.math3.complex.Quaternion#getQ3()",
        "org.apache.commons.math3.complex.Quaternion#getQ2()",
        "org.apache.commons.math3.complex.Quaternion#getQ1()",
        "org.apache.commons.math3.complex.Quaternion#getQ0()",
        "org.apache.commons.math3.complex.Quaternion#Quaternion(double,double,double,double)"
    ],
    "org.apache.commons.math3.ode.nonstiff.EulerFieldIntegrator#getA()": [
        "org.apache.commons.math3.util.MathArrays.buildArray(Field<T>,int,int)",
        "org.apache.commons.math3.ode.AbstractFieldIntegrator#getField()"
    ],
    "org.apache.commons.math3.distribution.ParetoDistribution#ParetoDistribution(double,double,double)": [
        "org.apache.commons.math3.random.Well19937c#Well19937c()",
        "org.apache.commons.math3.distribution.ParetoDistribution#ParetoDistribution(RandomGenerator,double,double,double)"
    ],
    "org.apache.commons.math3.geometry.partitioning.utilities.OrderedTuple.sign(long)": ["org.apache.commons.math3.geometry.partitioning.utilities.OrderedTuple.<staticinit>()"],
    "org.apache.commons.math3.distribution.AbstractRealDistribution#AbstractRealDistribution(RandomGenerator)": ["org.apache.commons.math3.distribution.AbstractRealDistribution.<init>()"],
    "org.apache.commons.math3.optimization.direct.MultivariateFunctionPenaltyAdapter#MultivariateFunctionPenaltyAdapter(MultivariateFunction,double[],double[],double,double[])": [
        "org.apache.commons.math3.exception.DimensionMismatchException#DimensionMismatchException(int,int)",
        "org.apache.commons.math3.util.MathUtils.checkNotNull(Object)",
        "org.apache.commons.math3.optimization.direct.MultivariateFunctionPenaltyAdapter.<init>()"
    ],
    "org.apache.commons.math3.linear.RRQRDecomposition#decompose(double[][])": ["org.apache.commons.math3.linear.QRDecomposition#decompose(double[][])"],
    "org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet#PolygonsSet(Collection<SubHyperplane<Euclidean2D>>,double)": [
        "org.apache.commons.math3.geometry.partitioning.AbstractRegion#AbstractRegion(Collection<SubHyperplane<S extends Space>>,double)",
        "org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.<init>()"
    ],
    "org.apache.commons.math3.geometry.euclidean.threed.SphericalCoordinates.DataTransferObject#readResolve()": [
        "org.apache.commons.math3.geometry.euclidean.threed.Vector3D#Vector3D(double,double,double)",
        "org.apache.commons.math3.geometry.euclidean.threed.SphericalCoordinates#SphericalCoordinates(Vector3D)"
    ],
    "org.apache.commons.math3.geometry.partitioning.utilities.AVLTree.Node#getNext()": ["org.apache.commons.math3.geometry.partitioning.utilities.AVLTree.Node#getSmallest()"],
    "org.apache.commons.math3.linear.Array2DRowFieldMatrix#Array2DRowFieldMatrix(Field<T extends FieldElement>)": [
        "org.apache.commons.math3.linear.AbstractFieldMatrix#AbstractFieldMatrix(Field<T extends FieldElement>)",
        "org.apache.commons.math3.linear.Array2DRowFieldMatrix.<init>()"
    ],
    "org.apache.commons.math3.ml.clustering.evaluation.ClusterEvaluator#ClusterEvaluator(DistanceMeasure)": ["org.apache.commons.math3.ml.clustering.evaluation.ClusterEvaluator.<init>()"],
    "org.apache.commons.math3.linear.DefaultFieldMatrixPreservingVisitor#DefaultFieldMatrixPreservingVisitor(T extends FieldElement)": ["org.apache.commons.math3.linear.DefaultFieldMatrixPreservingVisitor.<init>()"],
    "org.apache.commons.math3.linear.ArrayRealVector#ArrayRealVector(int)": [
        "org.apache.commons.math3.linear.RealVector.<init>()",
        "org.apache.commons.math3.linear.ArrayRealVector.<init>()"
    ],
    "org.apache.commons.math3.optim.linear.SimplexTableau#SimplexTableau(LinearObjectiveFunction,Collection<LinearConstraint>,GoalType,boolean,double)": [
        "org.apache.commons.math3.optim.nonlinear.scalar.GoalType.<staticinit>()",
        "org.apache.commons.math3.optim.linear.SimplexTableau#SimplexTableau(LinearObjectiveFunction,Collection<LinearConstraint>,GoalType,boolean,double,int)",
        "org.apache.commons.math3.optim.linear.SimplexSolver.<staticinit>()"
    ],
    "org.apache.commons.math3.stat.correlation.SpearmansCorrelation#computeCorrelationMatrix(double[][])": [
        "org.apache.commons.math3.linear.BlockRealMatrix#BlockRealMatrix(double[][])",
        "org.apache.commons.math3.stat.correlation.SpearmansCorrelation#computeCorrelationMatrix(RealMatrix)"
    ],
    "org.apache.commons.math3.ode.events.FieldEventState#stepAccepted(FieldODEStateAndDerivative<T extends RealFieldElement>)": [
        "org.apache.commons.math3.ode.FieldODEState#getTime()",
        "org.apache.commons.math3.ode.events.Action.<staticinit>()"
    ],
    "org.apache.commons.math3.optim.nonlinear.vector.jacobian.GaussNewtonOptimizer#GaussNewtonOptimizer(ConvergenceChecker<PointVectorValuePair>)": ["org.apache.commons.math3.optim.nonlinear.vector.jacobian.GaussNewtonOptimizer#GaussNewtonOptimizer(boolean,ConvergenceChecker<PointVectorValuePair>)"],
    "org.apache.commons.math3.ode.MultistepFieldIntegrator#rescale(T extends RealFieldElement)": [
        "org.apache.commons.math3.linear.Array2DRowFieldMatrix#getDataRef()",
        "org.apache.commons.math3.ode.AbstractFieldIntegrator#setStepSize(T extends RealFieldElement)",
        "org.apache.commons.math3.ode.AbstractFieldIntegrator#getStepSize()"
    ],
    "org.apache.commons.math3.optimization.direct.CMAESOptimizer.divide(RealMatrix,RealMatrix)": [
        "org.apache.commons.math3.linear.DiagonalMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.Array2DRowRealMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.BlockFieldMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.SparseFieldMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.DiagonalMatrix#getEntry(int,int)",
        "org.apache.commons.math3.linear.OpenMapRealMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.OpenMapRealMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.DiagonalMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.OpenMapRealMatrix#getEntry(int,int)",
        "org.apache.commons.math3.linear.BlockRealMatrix#getEntry(int,int)",
        "org.apache.commons.math3.linear.Array2DRowFieldMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.Array2DRowRealMatrix#Array2DRowRealMatrix(double[][],boolean)",
        "org.apache.commons.math3.linear.BlockFieldMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.SparseFieldMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.BlockRealMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.Array2DRowRealMatrix#getEntry(int,int)",
        "org.apache.commons.math3.linear.Array2DRowRealMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.Array2DRowFieldMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.BlockRealMatrix#getColumnDimension()"
    ],
    "org.apache.commons.math3.linear.OpenMapRealMatrix#subtract(OpenMapRealMatrix)": [
        "org.apache.commons.math3.linear.OpenMapRealMatrix#OpenMapRealMatrix(OpenMapRealMatrix)",
        "org.apache.commons.math3.util.OpenIntToDoubleHashMap.Iterator#value()",
        "org.apache.commons.math3.util.OpenIntToDoubleHashMap#iterator()",
        "org.apache.commons.math3.util.OpenIntToDoubleHashMap.Iterator#advance()",
        "org.apache.commons.math3.linear.OpenMapRealMatrix#setEntry(int,int,double)",
        "org.apache.commons.math3.util.OpenIntToDoubleHashMap.Iterator#key()",
        "org.apache.commons.math3.linear.OpenMapRealMatrix#getEntry(int,int)",
        "org.apache.commons.math3.linear.MatrixUtils.checkAdditionCompatible(AnyMatrix,AnyMatrix)",
        "org.apache.commons.math3.util.OpenIntToDoubleHashMap.Iterator#hasNext()"
    ],
    "org.apache.commons.math3.exception.NotPositiveException#NotPositiveException(Number)": [
        "org.apache.commons.math3.exception.NotPositiveException.<init>()",
        "org.apache.commons.math3.exception.MathIllegalNumberException.<staticinit>()"
    ],
    "org.apache.commons.math3.linear.RealVector.SparseEntryIterator#next()": [
        "org.apache.commons.math3.linear.OpenMapRealVector.OpenMapEntry#getIndex()",
        "org.apache.commons.math3.linear.RealVector.SparseEntryIterator#advance(Entry)",
        "org.apache.commons.math3.linear.RealVector.Entry#setIndex(int)",
        "org.apache.commons.math3.linear.RealVector.Entry#getIndex()"
    ],
    "org.apache.commons.math3.analysis.function.Log#value(DerivativeStructure)": ["org.apache.commons.math3.analysis.differentiation.DerivativeStructure#log()"],
    "org.apache.commons.math3.analysis.solvers.BaseAbstractUnivariateSolver#BaseAbstractUnivariateSolver(double,double)": [
        "org.apache.commons.math3.analysis.solvers.BaseAbstractUnivariateSolver#BaseAbstractUnivariateSolver(double,double,double)",
        "org.apache.commons.math3.analysis.solvers.BaseAbstractUnivariateSolver.<staticinit>()"
    ],
    "org.apache.commons.math3.geometry.partitioning.AbstractSubHyperplane#isEmpty()": ["org.apache.commons.math3.geometry.partitioning.AbstractRegion#isEmpty()"],
    "org.apache.commons.math3.ode.sampling.AbstractStepInterpolator#AbstractStepInterpolator()": [
        "org.apache.commons.math3.ode.sampling.AbstractStepInterpolator.<init>()",
        "org.apache.commons.math3.ode.sampling.AbstractStepInterpolator#allocateInterpolatedArrays(int)"
    ],
    "org.apache.commons.math3.util.BigReal#add(BigReal)": ["org.apache.commons.math3.util.BigReal#BigReal(char[])"],
    "org.apache.commons.math3.ode.nonstiff.AdamsFieldStepInterpolator#AdamsFieldStepInterpolator(T extends RealFieldElement,FieldODEStateAndDerivative<T extends RealFieldElement>,T extends RealFieldElement[],Array2DRowFieldMatrix<T extends RealFieldElement>,boolean,FieldODEStateAndDerivative<T extends RealFieldElement>,FieldODEStateAndDerivative<T extends RealFieldElement>,FieldODEStateAndDerivative<T extends RealFieldElement>,FieldODEStateAndDerivative<T extends RealFieldElement>,FieldEquationsMapper<T extends RealFieldElement>)": [
        "org.apache.commons.math3.ode.sampling.AbstractFieldStepInterpolator#AbstractFieldStepInterpolator(boolean,FieldODEStateAndDerivative<T extends RealFieldElement>,FieldODEStateAndDerivative<T extends RealFieldElement>,FieldODEStateAndDerivative<T extends RealFieldElement>,FieldODEStateAndDerivative<T extends RealFieldElement>,FieldEquationsMapper<T extends RealFieldElement>)",
        "org.apache.commons.math3.linear.Array2DRowFieldMatrix#getData()",
        "org.apache.commons.math3.linear.Array2DRowFieldMatrix#Array2DRowFieldMatrix(T extends FieldElement[][],boolean)",
        "org.apache.commons.math3.ode.nonstiff.AdamsFieldStepInterpolator.<init>()"
    ],
    "org.apache.commons.math3.linear.RealVector.unmodifiableRealVector(RealVector)$RealVector$1#cosine(RealVector)": [
        "org.apache.commons.math3.linear.RealVector#cosine(RealVector)",
        "org.apache.commons.math3.linear.RealVector.unmodifiableRealVector(RealVector)$RealVector$1#cosine(RealVector)"
    ],
    "org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D#getSubSpace()": ["org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D.getInstance()"],
    "org.apache.commons.math3.geometry.euclidean.threed.FieldRotation#FieldRotation(FieldVector3D<T extends RealFieldElement>,T extends RealFieldElement)": [
        "org.apache.commons.math3.geometry.euclidean.threed.RotationConvention.<staticinit>()",
        "org.apache.commons.math3.geometry.euclidean.threed.FieldRotation#FieldRotation(FieldVector3D<T extends RealFieldElement>,T extends RealFieldElement,RotationConvention)"
    ],
    "org.apache.commons.math3.linear.RealVectorFormat#format(RealVector)": ["org.apache.commons.math3.linear.RealVectorFormat#format(RealVector,StringBuffer,FieldPosition)"],
    "org.apache.commons.math3.analysis.polynomials.PolynomialsUtils.createLegendrePolynomial(int)": [
        "org.apache.commons.math3.analysis.polynomials.PolynomialsUtils.<staticinit>()",
        "org.apache.commons.math3.analysis.polynomials.PolynomialsUtils.createLegendrePolynomial(int)$RecurrenceCoefficientsGenerator$1.<init>()",
        "org.apache.commons.math3.analysis.polynomials.PolynomialsUtils.buildPolynomial(int,List<BigFraction>,RecurrenceCoefficientsGenerator)"
    ],
    "org.apache.commons.math3.filter.KalmanFilter#predict(double[])": [
        "org.apache.commons.math3.linear.ArrayRealVector#ArrayRealVector(double[],boolean)",
        "org.apache.commons.math3.filter.KalmanFilter#predict(RealVector)"
    ],
    "org.apache.commons.math3.analysis.integration.MidPointIntegrator#doIntegrate()": [
        "org.apache.commons.math3.analysis.integration.BaseAbstractUnivariateIntegrator#getAbsoluteAccuracy()",
        "org.apache.commons.math3.util.FastMath.abs(double)",
        "org.apache.commons.math3.analysis.integration.BaseAbstractUnivariateIntegrator#getMinimalIterationCount()",
        "org.apache.commons.math3.analysis.integration.BaseAbstractUnivariateIntegrator#getRelativeAccuracy()",
        "org.apache.commons.math3.analysis.integration.MidPointIntegrator#stage(int,double,double,double)",
        "org.apache.commons.math3.analysis.integration.BaseAbstractUnivariateIntegrator#computeObjectiveValue(double)",
        "org.apache.commons.math3.analysis.integration.BaseAbstractUnivariateIntegrator#getMax()",
        "org.apache.commons.math3.analysis.integration.BaseAbstractUnivariateIntegrator#incrementCount()",
        "org.apache.commons.math3.analysis.integration.BaseAbstractUnivariateIntegrator#getIterations()",
        "org.apache.commons.math3.analysis.integration.BaseAbstractUnivariateIntegrator#getMin()"
    ],
    "org.apache.commons.math3.linear.AbstractRealMatrix#setSubMatrix(double[][],int,int)": [
        "org.apache.commons.math3.exception.DimensionMismatchException#DimensionMismatchException(int,int)",
        "org.apache.commons.math3.util.MathUtils.checkNotNull(Object)",
        "org.apache.commons.math3.linear.Array2DRowRealMatrix#setEntry(int,int,double)",
        "org.apache.commons.math3.exception.util.LocalizedFormats.<staticinit>()",
        "org.apache.commons.math3.linear.MatrixUtils.checkColumnIndex(AnyMatrix,int)",
        "org.apache.commons.math3.exception.NoDataException#NoDataException(Localizable)",
        "org.apache.commons.math3.linear.BlockRealMatrix#setEntry(int,int,double)",
        "org.apache.commons.math3.linear.OpenMapRealMatrix#setEntry(int,int,double)",
        "org.apache.commons.math3.linear.MatrixUtils.checkRowIndex(AnyMatrix,int)",
        "org.apache.commons.math3.linear.DiagonalMatrix#setEntry(int,int,double)"
    ],
    "org.apache.commons.math3.linear.MatrixUtils.BigFractionMatrixConverter#getConvertedMatrix()": ["org.apache.commons.math3.linear.Array2DRowRealMatrix#Array2DRowRealMatrix(double[][],boolean)"],
    "org.apache.commons.math3.fraction.BigFraction#divide(long)": ["org.apache.commons.math3.fraction.BigFraction#divide(BigInteger)"],
    "org.apache.commons.math3.random.StableRandomGenerator#StableRandomGenerator(RandomGenerator,double,double)": [
        "org.apache.commons.math3.exception.NullArgumentException#NullArgumentException()",
        "org.apache.commons.math3.random.StableRandomGenerator.<init>()",
        "org.apache.commons.math3.util.FastMath.<staticinit>()",
        "org.apache.commons.math3.util.FastMath.tan(double)",
        "org.apache.commons.math3.exception.util.LocalizedFormats.<staticinit>()"
    ],
    "org.apache.commons.math3.geometry.partitioning.BSPTree#chopOffPlus(Hyperplane<S extends Space>,VanishingCutHandler<S extends Space>)": [
        "org.apache.commons.math3.geometry.partitioning.BSPTree#insertInTree(BSPTree<S extends Space>,boolean)$VanishingCutHandler$1#fixNode(BSPTree<S extends Space>)",
        "org.apache.commons.math3.geometry.partitioning.RegionFactory.VanishingToLeaf#fixNode(BSPTree<S extends Space>)",
        "org.apache.commons.math3.geometry.partitioning.RegionFactory.DifferenceMerger#fixNode(BSPTree<S extends Space>)",
        "org.apache.commons.math3.geometry.partitioning.BSPTree#chopOffPlus(Hyperplane<S extends Space>,VanishingCutHandler<S extends Space>)",
        "org.apache.commons.math3.geometry.partitioning.SubHyperplane.SplitSubHyperplane#getMinus()"
    ],
    "org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D#toArray()": ["org.apache.commons.math3.util.MathArrays.buildArray(Field<T>,int)"],
    "org.apache.commons.math3.optimization.fitting.CurveFitter.OldTheoreticalValuesFunction#jacobian()": ["org.apache.commons.math3.optimization.fitting.CurveFitter.OldTheoreticalValuesFunction#jacobian()$MultivariateMatrixFunction$1.<init>()"],
    "org.apache.commons.math3.userguide.ClusterAlgorithmComparison.makeMoons(int,boolean,double,RandomGenerator)": [
        "org.apache.commons.math3.distribution.NormalDistribution#NormalDistribution(RandomGenerator,double,double,double)",
        "org.apache.commons.math3.userguide.ClusterAlgorithmComparison.generateNoiseVector(NormalDistribution)",
        "org.apache.commons.math3.geometry.euclidean.twod.Vector2D#add(Vector<Euclidean2D>)",
        "org.apache.commons.math3.util.FastMath.sin(double)",
        "org.apache.commons.math3.geometry.euclidean.twod.Vector2D#Vector2D(double,double)",
        "org.apache.commons.math3.random.RandomAdaptor#RandomAdaptor(RandomGenerator)",
        "org.apache.commons.math3.util.FastMath.<staticinit>()",
        "org.apache.commons.math3.util.FastMath.cos(double)"
    ],
    "org.apache.commons.math3.ml.neuralnet.twod.NeuronSquareMesh2D#getLocation(int,int,HorizontalDirection,VerticalDirection)": [
        "org.apache.commons.math3.ml.neuralnet.twod.NeuronSquareMesh2D.VerticalDirection.<staticinit>()",
        "org.apache.commons.math3.ml.neuralnet.twod.NeuronSquareMesh2D.HorizontalDirection.<staticinit>()",
        "org.apache.commons.math3.exception.MathInternalError#MathInternalError()"
    ],
    "org.apache.commons.math3.stat.inference.TestUtils.homoscedasticTTest(StatisticalSummary,StatisticalSummary)": [
        "org.apache.commons.math3.stat.inference.TestUtils.<staticinit>()",
        "org.apache.commons.math3.stat.inference.TTest#homoscedasticTTest(StatisticalSummary,StatisticalSummary)"
    ],
    "org.apache.commons.math3.ode.nonstiff.HighamHall54Integrator#HighamHall54Integrator(double,double,double[],double[])": [
        "org.apache.commons.math3.ode.nonstiff.HighamHall54Integrator.<init>()",
        "org.apache.commons.math3.ode.nonstiff.HighamHall54Integrator.<staticinit>()",
        "org.apache.commons.math3.ode.nonstiff.HighamHall54StepInterpolator#HighamHall54StepInterpolator()",
        "org.apache.commons.math3.ode.nonstiff.EmbeddedRungeKuttaIntegrator#EmbeddedRungeKuttaIntegrator(String,boolean,double[],double[][],double[],RungeKuttaStepInterpolator,double,double,double[],double[])"
    ],
    "org.apache.commons.math3.ode.nonstiff.AdaptiveStepsizeIntegrator#resetInternalState()": ["org.apache.commons.math3.util.FastMath.sqrt(double)"],
    "org.apache.commons.math3.stat.inference.TTest#pairedTTest(double[],double[],double)": [
        "org.apache.commons.math3.stat.inference.TTest#checkSignificanceLevel(double)",
        "org.apache.commons.math3.stat.inference.TTest#pairedTTest(double[],double[])"
    ],
    "org.apache.commons.math3.distribution.MixtureMultivariateNormalDistribution#MixtureMultivariateNormalDistribution(List<Pair<Double, MultivariateNormalDistribution>>)": [
        "org.apache.commons.math3.distribution.MixtureMultivariateRealDistribution#MixtureMultivariateRealDistribution(List<Pair<Double, T extends MultivariateRealDistribution>>)",
        "org.apache.commons.math3.distribution.MixtureMultivariateNormalDistribution.<init>()"
    ],
    "org.apache.commons.math3.util.ResizableDoubleArray#substituteMostRecentElement(double)": ["org.apache.commons.math3.exception.util.LocalizedFormats.<staticinit>()"],
    "org.apache.commons.math3.ode.nonstiff.AdamsIntegrator#AdamsIntegrator(String,int,int,double,double,double,double)": [
        "org.apache.commons.math3.ode.nonstiff.AdamsNordsieckTransformer.getInstance(int)",
        "org.apache.commons.math3.ode.nonstiff.AdamsIntegrator.<init>()",
        "org.apache.commons.math3.ode.MultistepIntegrator#MultistepIntegrator(String,int,int,double,double,double,double)"
    ],
    "org.apache.commons.math3.random.Well1024a#Well1024a(long)": [
        "org.apache.commons.math3.random.Well1024a.<staticinit>()",
        "org.apache.commons.math3.random.Well1024a.<init>()",
        "org.apache.commons.math3.random.AbstractWell#AbstractWell(int,int,int,int,long)"
    ],
    "org.apache.commons.math3.linear.QRDecomposition.Solver#solve(RealVector)": [
        "org.apache.commons.math3.linear.OpenMapRealVector#getDimension()",
        "org.apache.commons.math3.exception.DimensionMismatchException#DimensionMismatchException(int,int)",
        "org.apache.commons.math3.linear.ArrayRealVector#getDimension()",
        "org.apache.commons.math3.linear.OpenMapRealVector#toArray()",
        "org.apache.commons.math3.linear.RealVector#toArray()",
        "org.apache.commons.math3.linear.SingularMatrixException#SingularMatrixException()",
        "org.apache.commons.math3.linear.ArrayRealVector#ArrayRealVector(double[],boolean)",
        "org.apache.commons.math3.linear.RealVector.unmodifiableRealVector(RealVector)$RealVector$1#toArray()",
        "org.apache.commons.math3.linear.RealVector.unmodifiableRealVector(RealVector)$RealVector$1#getDimension()",
        "org.apache.commons.math3.linear.QRDecomposition.Solver#isNonSingular()",
        "org.apache.commons.math3.util.FastMath.min(int,int)",
        "org.apache.commons.math3.linear.ArrayRealVector#toArray()"
    ],
    "org.apache.commons.math3.geometry.partitioning.AbstractRegion#checkPoint(BSPTree<S extends Space>,Vector<S extends Space>)": [
        "org.apache.commons.math3.geometry.partitioning.AbstractRegion#checkPoint(BSPTree<S extends Space>,Point<S extends Space>)",
        "org.apache.commons.math3.geometry.partitioning.Region.Location.<staticinit>()"
    ],
    "org.apache.commons.math3.stat.inference.TestUtils.oneWayAnovaTest(Collection<double[]>,double)": [
        "org.apache.commons.math3.stat.inference.OneWayAnova#anovaTest(Collection<double[]>,double)",
        "org.apache.commons.math3.stat.inference.TestUtils.<staticinit>()"
    ],
    "org.apache.commons.math3.stat.descriptive.SummaryStatistics#getPopulationVariance()": [
        "org.apache.commons.math3.stat.descriptive.moment.Variance#Variance(SecondMoment)",
        "org.apache.commons.math3.stat.descriptive.moment.Variance#setBiasCorrected(boolean)",
        "org.apache.commons.math3.stat.descriptive.moment.Variance#getResult()"
    ],
    "org.apache.commons.math3.userguide.LowDiscrepancyGeneratorComparison.Display#Display()": [
        "org.apache.commons.math3.random.HaltonSequenceGenerator#HaltonSequenceGenerator(int)",
        "org.apache.commons.math3.userguide.LowDiscrepancyGeneratorComparison.Display#Display()$RandomVectorGenerator$1.<init>()",
        "org.apache.commons.math3.random.JDKRandomGenerator#JDKRandomGenerator()",
        "org.apache.commons.math3.userguide.ExampleUtils.ExampleFrame.<init>()",
        "org.apache.commons.math3.util.Pair#Pair(K,V)",
        "org.apache.commons.math3.userguide.LowDiscrepancyGeneratorComparison.Display.<init>()",
        "org.apache.commons.math3.util.Pair#getValue()",
        "org.apache.commons.math3.random.UncorrelatedRandomVectorGenerator#UncorrelatedRandomVectorGenerator(int,NormalizedRandomGenerator)",
        "org.apache.commons.math3.userguide.LowDiscrepancyGeneratorComparison.Plot#Plot(List<Vector2D>)",
        "org.apache.commons.math3.userguide.LowDiscrepancyGeneratorComparison.makeRandom(int,RandomVectorGenerator)",
        "org.apache.commons.math3.optim.PointVectorValuePair#getValue()",
        "org.apache.commons.math3.optimization.PointVectorValuePair#getValue()",
        "org.apache.commons.math3.random.UniformRandomGenerator#UniformRandomGenerator(RandomGenerator)",
        "org.apache.commons.math3.util.Pair#getFirst()",
        "org.apache.commons.math3.userguide.LowDiscrepancyGeneratorComparison.makeCircle(int,RandomVectorGenerator)",
        "org.apache.commons.math3.random.SobolSequenceGenerator#SobolSequenceGenerator(int)"
    ],
    "org.apache.commons.math3.linear.RealVector#iterator()$Iterator$1.<init>()": ["org.apache.commons.math3.linear.RealVector.Entry#Entry()"],
    "org.apache.commons.math3.linear.RealVector.unmodifiableRealVector(RealVector)$RealVector$1#mapMultiply(double)": [
        "org.apache.commons.math3.linear.RealVector.unmodifiableRealVector(RealVector)$RealVector$1#mapMultiply(double)",
        "org.apache.commons.math3.linear.RealVector#mapMultiply(double)"
    ],
    "org.apache.commons.math3.util.ArithmeticUtils.gcdPositive(int,int)": ["org.apache.commons.math3.util.FastMath.min(int,int)"],
    "org.apache.commons.math3.stat.descriptive.rank.Percentile#evaluate(double[],double)": [
        "org.apache.commons.math3.stat.descriptive.AbstractUnivariateStatistic#test(double[],int,int)",
        "org.apache.commons.math3.stat.descriptive.rank.Percentile#evaluate(double[],int,int,double)"
    ],
    "org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator#writeExternal(ObjectOutput)": [
        "org.apache.commons.math3.exception.MathIllegalStateException#getLocalizedMessage()",
        "org.apache.commons.math3.ode.nonstiff.RungeKuttaStepInterpolator#writeExternal(ObjectOutput)",
        "org.apache.commons.math3.ode.sampling.AbstractStepInterpolator#finalizeStep()"
    ],
    "org.apache.commons.math3.analysis.function.Inverse#derivative()": [
        "org.apache.commons.math3.analysis.function.Log10#derivative()",
        "org.apache.commons.math3.analysis.function.Power#derivative()",
        "org.apache.commons.math3.analysis.function.Sin#derivative()",
        "org.apache.commons.math3.analysis.function.Exp#derivative()",
        "org.apache.commons.math3.analysis.function.HarmonicOscillator#derivative()",
        "org.apache.commons.math3.analysis.polynomials.PolynomialFunction#derivative()",
        "org.apache.commons.math3.analysis.FunctionUtils.toDifferentiableUnivariateFunction(UnivariateDifferentiableFunction)",
        "org.apache.commons.math3.analysis.function.Logit#derivative()",
        "org.apache.commons.math3.analysis.function.Cbrt#derivative()",
        "org.apache.commons.math3.analysis.FunctionUtils.toDifferentiableUnivariateFunction(UnivariateDifferentiableFunction)$DifferentiableUnivariateFunction$1#derivative()",
        "org.apache.commons.math3.analysis.polynomials.PolynomialSplineFunction#derivative()",
        "org.apache.commons.math3.analysis.function.Cosh#derivative()",
        "org.apache.commons.math3.analysis.function.Identity#derivative()",
        "org.apache.commons.math3.analysis.function.Inverse#derivative()",
        "org.apache.commons.math3.analysis.function.Acosh#derivative()",
        "org.apache.commons.math3.analysis.function.Acos#derivative()",
        "org.apache.commons.math3.analysis.function.Atan#derivative()",
        "org.apache.commons.math3.analysis.function.Log#derivative()",
        "org.apache.commons.math3.analysis.function.Sqrt#derivative()",
        "org.apache.commons.math3.analysis.function.Logistic#derivative()",
        "org.apache.commons.math3.analysis.function.Expm1#derivative()",
        "org.apache.commons.math3.analysis.function.Asinh#derivative()",
        "org.apache.commons.math3.analysis.function.Gaussian#derivative()",
        "org.apache.commons.math3.analysis.function.Sinc#derivative()",
        "org.apache.commons.math3.analysis.function.Sigmoid#derivative()",
        "org.apache.commons.math3.analysis.function.Constant#derivative()",
        "org.apache.commons.math3.analysis.function.Sinh#derivative()",
        "org.apache.commons.math3.analysis.function.Tanh#derivative()",
        "org.apache.commons.math3.analysis.function.Asin#derivative()",
        "org.apache.commons.math3.analysis.function.Minus#derivative()",
        "org.apache.commons.math3.analysis.FunctionUtils.compose(DifferentiableUnivariateFunction[]...)$DifferentiableUnivariateFunction$1#derivative()",
        "org.apache.commons.math3.analysis.FunctionUtils.add(DifferentiableUnivariateFunction[]...)$DifferentiableUnivariateFunction$1#derivative()",
        "org.apache.commons.math3.analysis.FunctionUtils.multiply(DifferentiableUnivariateFunction[]...)$DifferentiableUnivariateFunction$1#derivative()",
        "org.apache.commons.math3.analysis.function.Log1p#derivative()",
        "org.apache.commons.math3.analysis.function.Tan#derivative()",
        "org.apache.commons.math3.analysis.function.Cos#derivative()",
        "org.apache.commons.math3.analysis.function.Atanh#derivative()"
    ],
    "org.apache.commons.math3.distribution.EnumeratedRealDistribution.createDistribution(double[],double[])": [
        "org.apache.commons.math3.exception.DimensionMismatchException#DimensionMismatchException(int,int)",
        "org.apache.commons.math3.util.Pair#Pair(K,V)"
    ],
    "org.apache.commons.math3.distribution.EnumeratedDistribution#getPmf()": ["org.apache.commons.math3.util.Pair#Pair(K,V)"],
    "org.apache.commons.math3.linear.ArrayFieldVector#ArrayFieldVector(Field<T extends FieldElement>,T extends FieldElement[])": [
        "org.apache.commons.math3.util.MathUtils.checkNotNull(Object)",
        "org.apache.commons.math3.linear.ArrayFieldVector.<init>()"
    ],
    "org.apache.commons.math3.stat.inference.TestUtils.chiSquareTest(double[],long[])": [
        "org.apache.commons.math3.stat.inference.ChiSquareTest#chiSquareTest(double[],long[])",
        "org.apache.commons.math3.stat.inference.TestUtils.<staticinit>()"
    ],
    "org.apache.commons.math3.optimization.general.GaussNewtonOptimizer#GaussNewtonOptimizer(boolean)": [
        "org.apache.commons.math3.optimization.general.GaussNewtonOptimizer#GaussNewtonOptimizer(boolean,ConvergenceChecker<PointVectorValuePair>)",
        "org.apache.commons.math3.optimization.SimpleVectorValueChecker#SimpleVectorValueChecker()"
    ],
    "org.apache.commons.math3.util.Precision.equalsIncludingNaN(double,double)": ["org.apache.commons.math3.util.Precision.equals(double,double,int)"],
    "org.apache.commons.math3.geometry.euclidean.threed.Rotation#getAngles(RotationOrder)": [
        "org.apache.commons.math3.geometry.euclidean.threed.RotationConvention.<staticinit>()",
        "org.apache.commons.math3.geometry.euclidean.threed.Rotation#getAngles(RotationOrder,RotationConvention)"
    ],
    "org.apache.commons.math3.distribution.LogisticDistribution#cumulativeProbability(double)": ["org.apache.commons.math3.util.FastMath.exp(double)"],
    "org.apache.commons.math3.complex.ComplexFormat#parse(String)": [
        "org.apache.commons.math3.complex.ComplexFormat#parse(String,ParsePosition)",
        "org.apache.commons.math3.exception.MathParseException#MathParseException(String,int,Class<?>)"
    ],
    "org.apache.commons.math3.linear.RealVector#combine(double,double,RealVector)": [
        "org.apache.commons.math3.linear.ArrayRealVector#copy()",
        "org.apache.commons.math3.linear.RealVector#combineToSelf(double,double,RealVector)",
        "org.apache.commons.math3.linear.RealVector.unmodifiableRealVector(RealVector)$RealVector$1#copy()",
        "org.apache.commons.math3.linear.ArrayRealVector#combineToSelf(double,double,RealVector)",
        "org.apache.commons.math3.linear.OpenMapRealVector#copy()",
        "org.apache.commons.math3.linear.RealVector.unmodifiableRealVector(RealVector)$RealVector$1#combineToSelf(double,double,RealVector)"
    ],
    "org.apache.commons.math3.fraction.BigFraction.getReducedFraction(int,int)": [
        "org.apache.commons.math3.fraction.BigFraction.<staticinit>()",
        "org.apache.commons.math3.fraction.BigFraction#BigFraction(int,int)"
    ],
    "org.apache.commons.math3.ode.AbstractFieldIntegrator#getEvaluations()": ["org.apache.commons.math3.util.IntegerSequence.Incrementor#getCount()"],
    "org.apache.commons.math3.dfp.Dfp#pow(Dfp)": ["org.apache.commons.math3.dfp.DfpMath.pow(Dfp,Dfp)"],
    "org.apache.commons.math3.analysis.interpolation.MicrosphereInterpolator#MicrosphereInterpolator(int,int)": ["org.apache.commons.math3.analysis.interpolation.MicrosphereInterpolator.<init>()"],
    "org.apache.commons.math3.linear.ArrayRealVector#mapToSelf(UnivariateFunction)": [
        "org.apache.commons.math3.analysis.FunctionUtils.multiply(DifferentiableUnivariateFunction[]...)$UnivariateFunction$1$UnivariateFunction$1#derivative()$UnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.polynomials.PolynomialSplineFunction#value(double)",
        "org.apache.commons.math3.analysis.function.Gaussian#value(double)",
        "org.apache.commons.math3.analysis.function.Tanh#value(double)",
        "org.apache.commons.math3.analysis.function.Inverse#value(double)",
        "org.apache.commons.math3.analysis.function.HarmonicOscillator#value(double)",
        "org.apache.commons.math3.analysis.FunctionUtils.fix1stArgument(BivariateFunction,double)$UnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.function.Asin#value(double)",
        "org.apache.commons.math3.analysis.function.Asinh#value(double)",
        "org.apache.commons.math3.analysis.FunctionUtils.multiply(UnivariateFunction[]...)$UnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.function.Atan#value(double)",
        "org.apache.commons.math3.analysis.FunctionUtils.toDifferentiableUnivariateFunction(UnivariateDifferentiableFunction)$DifferentiableUnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.function.Cbrt#value(double)",
        "org.apache.commons.math3.analysis.polynomials.PolynomialFunctionLagrangeForm#value(double)",
        "org.apache.commons.math3.analysis.function.Exp#value(double)",
        "org.apache.commons.math3.special.BesselJ#value(double)",
        "org.apache.commons.math3.analysis.polynomials.PolynomialFunctionNewtonForm#value(double)",
        "org.apache.commons.math3.analysis.FunctionUtils.add(UnivariateFunction[]...)$UnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.function.Sin#value(double)",
        "org.apache.commons.math3.analysis.function.Cos#value(double)",
        "org.apache.commons.math3.analysis.interpolation.UnivariatePeriodicInterpolator#interpolate(double[],double[])$UnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.function.Log10#value(double)",
        "org.apache.commons.math3.analysis.function.Sqrt#value(double)",
        "org.apache.commons.math3.analysis.function.Log#value(double)",
        "org.apache.commons.math3.analysis.function.Sinc#value(double)",
        "org.apache.commons.math3.ode.events.EventState#evaluateStep(StepInterpolator)$UnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.function.Minus#value(double)",
        "org.apache.commons.math3.analysis.integration.IterativeLegendreGaussIntegrator#stage(int)$UnivariateFunction$1#value(double)",
        "org.apache.commons.math3.optimization.general.NonLinearConjugateGradientOptimizer.LineSearchFunction#value(double)",
        "org.apache.commons.math3.analysis.function.Floor#value(double)",
        "org.apache.commons.math3.analysis.FunctionUtils.multiply(DifferentiableUnivariateFunction[]...)$DifferentiableUnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.FunctionUtils.combine(BivariateFunction,UnivariateFunction,UnivariateFunction)$UnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.FunctionUtils.add(DifferentiableUnivariateFunction[]...)$UnivariateFunction$1$UnivariateFunction$1#derivative()$UnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.function.Sinh#value(double)",
        "org.apache.commons.math3.analysis.FunctionUtils.multiply(UnivariateDifferentiableFunction[]...)$UnivariateDifferentiableFunction$1#value(double)",
        "org.apache.commons.math3.analysis.function.Tan#value(double)",
        "org.apache.commons.math3.distribution.AbstractRealDistribution#inverseCumulativeProbability(double)$UnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.FunctionUtils.add(DifferentiableUnivariateFunction[]...)$DifferentiableUnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.function.Ceil#value(double)",
        "org.apache.commons.math3.analysis.function.Logistic#value(double)",
        "org.apache.commons.math3.analysis.function.Signum#value(double)",
        "org.apache.commons.math3.analysis.function.Constant#value(double)",
        "org.apache.commons.math3.analysis.function.Atanh#value(double)",
        "org.apache.commons.math3.analysis.FunctionUtils.compose(DifferentiableUnivariateFunction[]...)$UnivariateFunction$1$UnivariateFunction$1#derivative()$UnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.FunctionUtils.add(UnivariateDifferentiableFunction[]...)$UnivariateDifferentiableFunction$1#value(double)",
        "org.apache.commons.math3.analysis.function.Abs#value(double)",
        "org.apache.commons.math3.analysis.differentiation.FiniteDifferencesDifferentiator#differentiate(UnivariateFunction)$UnivariateDifferentiableFunction$1#value(double)",
        "org.apache.commons.math3.analysis.function.Identity#value(double)",
        "org.apache.commons.math3.analysis.function.Expm1#value(double)",
        "org.apache.commons.math3.analysis.function.Logit#value(double)",
        "org.apache.commons.math3.analysis.function.Log1p#value(double)",
        "org.apache.commons.math3.analysis.FunctionUtils.fix2ndArgument(BivariateFunction,double)$UnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.FunctionUtils.toUnivariateDifferential(DifferentiableUnivariateFunction)$UnivariateDifferentiableFunction$1#value(double)",
        "org.apache.commons.math3.analysis.FunctionUtils.toDifferentiableUnivariateFunction(UnivariateDifferentiableFunction)$UnivariateFunction$1$UnivariateFunction$1#derivative()$UnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.polynomials.PolynomialFunction#value(double)",
        "org.apache.commons.math3.analysis.function.Rint#value(double)",
        "org.apache.commons.math3.analysis.FunctionUtils.compose(UnivariateFunction[]...)$UnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.function.Cosh#value(double)",
        "org.apache.commons.math3.optimization.direct.PowellOptimizer.LineSearch#search(double[],double[])$UnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.FunctionUtils.compose(DifferentiableUnivariateFunction[]...)$DifferentiableUnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.function.Acosh#value(double)",
        "org.apache.commons.math3.analysis.function.StepFunction#value(double)",
        "org.apache.commons.math3.analysis.FunctionUtils.compose(UnivariateDifferentiableFunction[]...)$UnivariateDifferentiableFunction$1#value(double)",
        "org.apache.commons.math3.analysis.function.Acos#value(double)",
        "org.apache.commons.math3.analysis.function.Power#value(double)",
        "org.apache.commons.math3.optim.nonlinear.scalar.LineSearch#search(double[],double[])$UnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.function.Sigmoid#value(double)",
        "org.apache.commons.math3.analysis.function.Ulp#value(double)"
    ],
    "org.apache.commons.math3.dfp.DfpDec#DfpDec(DfpField,byte,byte)": [
        "org.apache.commons.math3.dfp.Dfp#Dfp(DfpField,byte,byte)",
        "org.apache.commons.math3.dfp.Dfp.<staticinit>()",
        "org.apache.commons.math3.dfp.DfpDec.<init>()"
    ],
    "org.apache.commons.math3.ode.nonstiff.DormandPrince54Integrator#estimateError(double[][],double[],double[],double)": [
        "org.apache.commons.math3.ode.nonstiff.DormandPrince54Integrator.<staticinit>()",
        "org.apache.commons.math3.util.FastMath.abs(double)",
        "org.apache.commons.math3.util.FastMath.max(double,double)",
        "org.apache.commons.math3.util.FastMath.sqrt(double)"
    ],
    "org.apache.commons.math3.geometry.euclidean.twod.Line#translateToPoint(Vector2D)": [
        "org.apache.commons.math3.geometry.euclidean.twod.Vector2D#getY()",
        "org.apache.commons.math3.geometry.euclidean.twod.Vector2D#getX()",
        "org.apache.commons.math3.util.MathArrays.linearCombination(double,double,double,double)"
    ],
    "org.apache.commons.math3.fitting.CurveFitter#addObservedPoint(double,double,double)": ["org.apache.commons.math3.fitting.WeightedObservedPoint#WeightedObservedPoint(double,double,double)"],
    "org.apache.commons.math3.fitting.leastsquares.LevenbergMarquardtOptimizer#withInitialStepBoundFactor(double)": ["org.apache.commons.math3.fitting.leastsquares.LevenbergMarquardtOptimizer#LevenbergMarquardtOptimizer(double,double,double,double,double)"],
    "org.apache.commons.math3.analysis.FunctionUtils.toDifferentiableUnivariateFunction(UnivariateDifferentiableFunction)$DifferentiableUnivariateFunction$1#derivative()": ["org.apache.commons.math3.analysis.FunctionUtils.toDifferentiableUnivariateFunction(UnivariateDifferentiableFunction)$UnivariateFunction$1$UnivariateFunction$1#derivative()$UnivariateFunction$1.<init>()"],
    "org.apache.commons.math3.stat.regression.MillerUpdatingRegression#tolset()": [
        "org.apache.commons.math3.util.FastMath.abs(double)",
        "org.apache.commons.math3.util.FastMath.sqrt(double)"
    ],
    "org.apache.commons.math3.optimization.direct.PowellOptimizer#PowellOptimizer(double,double,ConvergenceChecker<PointValuePair>)": [
        "org.apache.commons.math3.util.FastMath.sqrt(double)",
        "org.apache.commons.math3.optimization.direct.PowellOptimizer#PowellOptimizer(double,double,double,double,ConvergenceChecker<PointValuePair>)"
    ],
    "org.apache.commons.math3.random.SynchronizedRandomGenerator#nextBytes(byte[])": [
        "org.apache.commons.math3.random.RandomGeneratorFactory.createRandomGenerator(Random)$RandomGenerator$1#nextBytes(byte[])",
        "org.apache.commons.math3.random.SynchronizedRandomGenerator#nextBytes(byte[])",
        "org.apache.commons.math3.random.RandomAdaptor#nextBytes(byte[])",
        "org.apache.commons.math3.random.BitsStreamGenerator#nextBytes(byte[])",
        "org.apache.commons.math3.random.AbstractRandomGenerator#nextBytes(byte[])"
    ],
    "org.apache.commons.math3.util.MathArrays.sortInPlace(double[],OrderDirection,double[][]...)": [
        "org.apache.commons.math3.exception.DimensionMismatchException#DimensionMismatchException(int,int)",
        "org.apache.commons.math3.exception.NullArgumentException#NullArgumentException()",
        "org.apache.commons.math3.util.MathArrays.PairDoubleInteger#getKey()",
        "org.apache.commons.math3.util.MathArrays.sortInPlace(double[],OrderDirection,double[][]...)$Comparator$2.<init>()",
        "org.apache.commons.math3.util.MathArrays.PairDoubleInteger#PairDoubleInteger(double,int)",
        "org.apache.commons.math3.util.MathArrays.sortInPlace(double[],OrderDirection,double[][]...)$Comparator$1.<init>()",
        "org.apache.commons.math3.util.MathArrays.PairDoubleInteger#getValue()",
        "org.apache.commons.math3.util.MathArrays.OrderDirection.<staticinit>()"
    ],
    "org.apache.commons.math3.analysis.FunctionUtils.compose(UnivariateFunction[]...)$UnivariateFunction$1#value(double)": [
        "org.apache.commons.math3.analysis.FunctionUtils.multiply(DifferentiableUnivariateFunction[]...)$UnivariateFunction$1$UnivariateFunction$1#derivative()$UnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.polynomials.PolynomialSplineFunction#value(double)",
        "org.apache.commons.math3.analysis.function.Gaussian#value(double)",
        "org.apache.commons.math3.analysis.function.Tanh#value(double)",
        "org.apache.commons.math3.analysis.function.Inverse#value(double)",
        "org.apache.commons.math3.analysis.function.HarmonicOscillator#value(double)",
        "org.apache.commons.math3.analysis.FunctionUtils.fix1stArgument(BivariateFunction,double)$UnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.function.Asin#value(double)",
        "org.apache.commons.math3.analysis.function.Asinh#value(double)",
        "org.apache.commons.math3.analysis.FunctionUtils.multiply(UnivariateFunction[]...)$UnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.function.Atan#value(double)",
        "org.apache.commons.math3.analysis.FunctionUtils.toDifferentiableUnivariateFunction(UnivariateDifferentiableFunction)$DifferentiableUnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.function.Cbrt#value(double)",
        "org.apache.commons.math3.analysis.polynomials.PolynomialFunctionLagrangeForm#value(double)",
        "org.apache.commons.math3.analysis.function.Exp#value(double)",
        "org.apache.commons.math3.special.BesselJ#value(double)",
        "org.apache.commons.math3.analysis.polynomials.PolynomialFunctionNewtonForm#value(double)",
        "org.apache.commons.math3.analysis.FunctionUtils.add(UnivariateFunction[]...)$UnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.function.Sin#value(double)",
        "org.apache.commons.math3.analysis.function.Cos#value(double)",
        "org.apache.commons.math3.analysis.interpolation.UnivariatePeriodicInterpolator#interpolate(double[],double[])$UnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.function.Log10#value(double)",
        "org.apache.commons.math3.analysis.function.Sqrt#value(double)",
        "org.apache.commons.math3.analysis.function.Log#value(double)",
        "org.apache.commons.math3.analysis.function.Sinc#value(double)",
        "org.apache.commons.math3.ode.events.EventState#evaluateStep(StepInterpolator)$UnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.function.Minus#value(double)",
        "org.apache.commons.math3.analysis.integration.IterativeLegendreGaussIntegrator#stage(int)$UnivariateFunction$1#value(double)",
        "org.apache.commons.math3.optimization.general.NonLinearConjugateGradientOptimizer.LineSearchFunction#value(double)",
        "org.apache.commons.math3.analysis.function.Floor#value(double)",
        "org.apache.commons.math3.analysis.FunctionUtils.multiply(DifferentiableUnivariateFunction[]...)$DifferentiableUnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.FunctionUtils.combine(BivariateFunction,UnivariateFunction,UnivariateFunction)$UnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.FunctionUtils.add(DifferentiableUnivariateFunction[]...)$UnivariateFunction$1$UnivariateFunction$1#derivative()$UnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.function.Sinh#value(double)",
        "org.apache.commons.math3.analysis.FunctionUtils.multiply(UnivariateDifferentiableFunction[]...)$UnivariateDifferentiableFunction$1#value(double)",
        "org.apache.commons.math3.analysis.function.Tan#value(double)",
        "org.apache.commons.math3.distribution.AbstractRealDistribution#inverseCumulativeProbability(double)$UnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.FunctionUtils.add(DifferentiableUnivariateFunction[]...)$DifferentiableUnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.function.Ceil#value(double)",
        "org.apache.commons.math3.analysis.function.Logistic#value(double)",
        "org.apache.commons.math3.analysis.function.Signum#value(double)",
        "org.apache.commons.math3.analysis.function.Constant#value(double)",
        "org.apache.commons.math3.analysis.function.Atanh#value(double)",
        "org.apache.commons.math3.analysis.FunctionUtils.compose(DifferentiableUnivariateFunction[]...)$UnivariateFunction$1$UnivariateFunction$1#derivative()$UnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.FunctionUtils.add(UnivariateDifferentiableFunction[]...)$UnivariateDifferentiableFunction$1#value(double)",
        "org.apache.commons.math3.analysis.function.Abs#value(double)",
        "org.apache.commons.math3.analysis.differentiation.FiniteDifferencesDifferentiator#differentiate(UnivariateFunction)$UnivariateDifferentiableFunction$1#value(double)",
        "org.apache.commons.math3.analysis.function.Identity#value(double)",
        "org.apache.commons.math3.analysis.function.Expm1#value(double)",
        "org.apache.commons.math3.analysis.function.Logit#value(double)",
        "org.apache.commons.math3.analysis.function.Log1p#value(double)",
        "org.apache.commons.math3.analysis.FunctionUtils.fix2ndArgument(BivariateFunction,double)$UnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.FunctionUtils.toUnivariateDifferential(DifferentiableUnivariateFunction)$UnivariateDifferentiableFunction$1#value(double)",
        "org.apache.commons.math3.analysis.FunctionUtils.toDifferentiableUnivariateFunction(UnivariateDifferentiableFunction)$UnivariateFunction$1$UnivariateFunction$1#derivative()$UnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.polynomials.PolynomialFunction#value(double)",
        "org.apache.commons.math3.analysis.function.Rint#value(double)",
        "org.apache.commons.math3.analysis.FunctionUtils.compose(UnivariateFunction[]...)$UnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.function.Cosh#value(double)",
        "org.apache.commons.math3.optimization.direct.PowellOptimizer.LineSearch#search(double[],double[])$UnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.FunctionUtils.compose(DifferentiableUnivariateFunction[]...)$DifferentiableUnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.function.Acosh#value(double)",
        "org.apache.commons.math3.analysis.function.StepFunction#value(double)",
        "org.apache.commons.math3.analysis.FunctionUtils.compose(UnivariateDifferentiableFunction[]...)$UnivariateDifferentiableFunction$1#value(double)",
        "org.apache.commons.math3.analysis.function.Acos#value(double)",
        "org.apache.commons.math3.analysis.function.Power#value(double)",
        "org.apache.commons.math3.optim.nonlinear.scalar.LineSearch#search(double[],double[])$UnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.function.Sigmoid#value(double)",
        "org.apache.commons.math3.analysis.function.Ulp#value(double)"
    ],
    "org.apache.commons.math3.analysis.differentiation.DerivativeStructure#acosh()": [
        "org.apache.commons.math3.analysis.differentiation.DerivativeStructure#DerivativeStructure(DSCompiler)",
        "org.apache.commons.math3.analysis.differentiation.DSCompiler#acosh(double[],int,double[],int)"
    ],
    "org.apache.commons.math3.dfp.Dfp#toSplitDouble()": [
        "org.apache.commons.math3.dfp.Dfp#toDouble()",
        "org.apache.commons.math3.dfp.DfpDec#newInstance(double)",
        "org.apache.commons.math3.dfp.Dfp#newInstance(double)",
        "org.apache.commons.math3.dfp.Dfp#subtract(Dfp)"
    ],
    "org.apache.commons.math3.analysis.interpolation.LoessInterpolator.updateBandwidthInterval(double[],double[],int,int[])": ["org.apache.commons.math3.analysis.interpolation.LoessInterpolator.nextNonzero(double[],int)"],
    "org.apache.commons.math3.analysis.interpolation.TricubicInterpolatingFunction#TricubicInterpolatingFunction(double[],double[],double[],double[][][],double[][][],double[][][],double[][][],double[][][],double[][][],double[][][],double[][][])": [
        "org.apache.commons.math3.exception.DimensionMismatchException#DimensionMismatchException(int,int)",
        "org.apache.commons.math3.exception.NoDataException#NoDataException()",
        "org.apache.commons.math3.analysis.interpolation.TricubicInterpolatingFunction.<init>()",
        "org.apache.commons.math3.util.MathArrays.checkOrder(double[])",
        "org.apache.commons.math3.analysis.interpolation.TricubicFunction#TricubicFunction(double[])",
        "org.apache.commons.math3.analysis.interpolation.TricubicInterpolatingFunction#computeCoefficients(double[])"
    ],
    "org.apache.commons.math3.dfp.Dfp.compare(Dfp,Dfp)": ["org.apache.commons.math3.dfp.Dfp.<staticinit>()"],
    "org.apache.commons.math3.distribution.ChiSquaredDistribution#logDensity(double)": ["org.apache.commons.math3.distribution.GammaDistribution#logDensity(double)"],
    "org.apache.commons.math3.distribution.NormalDistribution#getNumericalVariance()": ["org.apache.commons.math3.distribution.NormalDistribution#getStandardDeviation()"],
    "org.apache.commons.math3.optimization.general.LevenbergMarquardtOptimizer#qrDecomposition(RealMatrix)": [
        "org.apache.commons.math3.linear.Array2DRowRealMatrix#getData()",
        "org.apache.commons.math3.util.FastMath.sqrt(double)",
        "org.apache.commons.math3.linear.BlockRealMatrix#scalarMultiply(double)",
        "org.apache.commons.math3.linear.AbstractRealMatrix#scalarMultiply(double)",
        "org.apache.commons.math3.exception.util.LocalizedFormats.<staticinit>()",
        "org.apache.commons.math3.linear.DiagonalMatrix#getData()",
        "org.apache.commons.math3.linear.AbstractRealMatrix#getData()",
        "org.apache.commons.math3.linear.BlockRealMatrix#getData()"
    ],
    "org.apache.commons.math3.fraction.FractionFormat#FractionFormat()": [
        "org.apache.commons.math3.fraction.AbstractFormat#AbstractFormat()",
        "org.apache.commons.math3.fraction.FractionFormat.<init>()"
    ],
    "org.apache.commons.math3.optimization.BaseMultivariateVectorMultiStartOptimizer#sortPairs(double[],double[])$Comparator$1#compare(PointVectorValuePair,PointVectorValuePair)": ["org.apache.commons.math3.optimization.BaseMultivariateVectorMultiStartOptimizer#sortPairs(double[],double[])$Comparator$1#weightedResidual(PointVectorValuePair)"],
    "org.apache.commons.math3.distribution.ZipfDistribution#sample()": [
        "org.apache.commons.math3.distribution.ZipfDistribution.ZipfRejectionInversionSampler#sample(RandomGenerator)",
        "org.apache.commons.math3.distribution.ZipfDistribution.ZipfRejectionInversionSampler#ZipfRejectionInversionSampler(int,double)"
    ],
    "org.apache.commons.math3.ode.nonstiff.RungeKuttaIntegrator#RungeKuttaIntegrator(String,double[],double[][],double[],RungeKuttaStepInterpolator,double)": [
        "org.apache.commons.math3.ode.nonstiff.RungeKuttaIntegrator.<init>()",
        "org.apache.commons.math3.util.FastMath.abs(double)",
        "org.apache.commons.math3.ode.AbstractIntegrator#AbstractIntegrator(String)"
    ],
    "org.apache.commons.math3.ode.nonstiff.DormandPrince54FieldIntegrator#DormandPrince54FieldIntegrator(Field<T extends RealFieldElement>,double,double,double,double)": [
        "org.apache.commons.math3.ode.nonstiff.EmbeddedRungeKuttaFieldIntegrator#fraction(int,int)",
        "org.apache.commons.math3.ode.nonstiff.DormandPrince54FieldIntegrator.<init>()",
        "org.apache.commons.math3.ode.nonstiff.DormandPrince54FieldIntegrator.<staticinit>()",
        "org.apache.commons.math3.ode.nonstiff.EmbeddedRungeKuttaFieldIntegrator#EmbeddedRungeKuttaFieldIntegrator(Field<T extends RealFieldElement>,String,int,double,double,double,double)"
    ],
    "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.PowellOptimizer#PowellOptimizer(double,double,double,double)": ["org.apache.commons.math3.optim.nonlinear.scalar.noderiv.PowellOptimizer#PowellOptimizer(double,double,double,double,ConvergenceChecker<PointValuePair>)"],
    "org.apache.commons.math3.fraction.BigFraction#multiply(BigFraction)": [
        "org.apache.commons.math3.fraction.BigFraction#BigFraction(BigInteger,BigInteger)",
        "org.apache.commons.math3.fraction.BigFraction.<staticinit>()",
        "org.apache.commons.math3.exception.util.LocalizedFormats.<staticinit>()"
    ],
    "org.apache.commons.math3.linear.BlockRealMatrix#addToEntry(int,int,double)": [
        "org.apache.commons.math3.linear.MatrixUtils.checkMatrixIndex(AnyMatrix,int,int)",
        "org.apache.commons.math3.linear.BlockRealMatrix.<staticinit>()",
        "org.apache.commons.math3.linear.BlockRealMatrix#blockWidth(int)"
    ],
    "org.apache.commons.math3.exception.NotFiniteNumberException#NotFiniteNumberException(Localizable,Number,Object[]...)": [
        "org.apache.commons.math3.exception.NotFiniteNumberException.<init>()",
        "org.apache.commons.math3.exception.MathIllegalNumberException#MathIllegalNumberException(Localizable,Number,Object[]...)"
    ],
    "org.apache.commons.math3.fraction.Fraction#Fraction(int,int)": [
        "org.apache.commons.math3.fraction.Fraction.<init>()",
        "org.apache.commons.math3.util.ArithmeticUtils.gcd(int,int)",
        "org.apache.commons.math3.exception.util.LocalizedFormats.<staticinit>()"
    ],
    "org.apache.commons.math3.linear.OpenMapRealVector#getLInfDistance(RealVector)": [
        "org.apache.commons.math3.linear.OpenMapRealVector#getDimension()",
        "org.apache.commons.math3.linear.ArrayRealVector#getDimension()",
        "org.apache.commons.math3.linear.RealVector#checkVectorDimensions(int)",
        "org.apache.commons.math3.linear.ArrayRealVector#checkVectorDimensions(int)",
        "org.apache.commons.math3.linear.RealVector#getLInfDistance(RealVector)",
        "org.apache.commons.math3.linear.RealVector.unmodifiableRealVector(RealVector)$RealVector$1#getDimension()",
        "org.apache.commons.math3.linear.OpenMapRealVector#getLInfDistance(OpenMapRealVector)"
    ],
    "org.apache.commons.math3.analysis.function.Cosh#value(DerivativeStructure)": ["org.apache.commons.math3.analysis.differentiation.DerivativeStructure#cosh()"],
    "org.apache.commons.math3.geometry.euclidean.threed.Vector3D#normalize()": [
        "org.apache.commons.math3.geometry.euclidean.threed.Vector3D#getNorm()",
        "org.apache.commons.math3.geometry.euclidean.threed.Vector3D#scalarMultiply(double)",
        "org.apache.commons.math3.exception.util.LocalizedFormats.<staticinit>()"
    ],
    "org.apache.commons.math3.optim.univariate.BracketFinder#search(UnivariateFunction,GoalType,double,double)": [
        "org.apache.commons.math3.util.IntegerSequence.Incrementor#withStart(int)",
        "org.apache.commons.math3.optim.nonlinear.scalar.GoalType.<staticinit>()",
        "org.apache.commons.math3.util.FastMath.abs(double)",
        "org.apache.commons.math3.optim.univariate.BracketFinder.<staticinit>()",
        "org.apache.commons.math3.optim.univariate.BracketFinder#eval(UnivariateFunction,double)"
    ],
    "org.apache.commons.math3.linear.IterativeLinearSolver#IterativeLinearSolver(int)": [
        "org.apache.commons.math3.util.IterationManager#IterationManager(int)",
        "org.apache.commons.math3.linear.IterativeLinearSolver.<init>()"
    ],
    "org.apache.commons.math3.optim.nonlinear.scalar.MultivariateFunctionMappingAdapter.UpperBoundMapper#UpperBoundMapper(double)": ["org.apache.commons.math3.optim.nonlinear.scalar.MultivariateFunctionMappingAdapter.UpperBoundMapper.<init>()"],
    "org.apache.commons.math3.optimization.fitting.CurveFitter#addObservedPoint(double,double)": ["org.apache.commons.math3.optimization.fitting.CurveFitter#addObservedPoint(double,double,double)"],
    "org.apache.commons.math3.analysis.integration.SimpsonIntegrator#SimpsonIntegrator(int,int)": [
        "org.apache.commons.math3.analysis.integration.BaseAbstractUnivariateIntegrator#BaseAbstractUnivariateIntegrator(int,int)",
        "org.apache.commons.math3.analysis.integration.SimpsonIntegrator.<init>()",
        "org.apache.commons.math3.analysis.integration.SimpsonIntegrator.<staticinit>()"
    ],
    "org.apache.commons.math3.stat.descriptive.summary.SumOfSquares#copy()": [
        "org.apache.commons.math3.stat.descriptive.summary.SumOfSquares#SumOfSquares()",
        "org.apache.commons.math3.stat.descriptive.summary.SumOfSquares.copy(SumOfSquares,SumOfSquares)"
    ],
    "org.apache.commons.math3.userguide.geometry.GeometryExample.Display#Display()$ActionListener$1#actionPerformed(ActionEvent)": [
        "org.apache.commons.math3.userguide.geometry.GeometryExample.createRandomPoints(int)",
        "org.apache.commons.math3.userguide.geometry.GeometryExample.Display#paintConvexHull()"
    ],
    "org.apache.commons.math3.linear.SchurTransformer#getNorm()": [
        "org.apache.commons.math3.util.FastMath.abs(double)",
        "org.apache.commons.math3.util.FastMath.max(int,int)"
    ],
    "org.apache.commons.math3.analysis.integration.gauss.GaussIntegrator#GaussIntegrator(Pair<double[], double[]>)": [
        "org.apache.commons.math3.util.Pair#getFirst()",
        "org.apache.commons.math3.util.Pair#getSecond()",
        "org.apache.commons.math3.analysis.integration.gauss.GaussIntegrator#GaussIntegrator(double[],double[])"
    ],
    "org.apache.commons.math3.util.Decimal64#multiply(Decimal64)": ["org.apache.commons.math3.util.Decimal64#Decimal64(double)"],
    "org.apache.commons.math3.analysis.function.Log#value(double)": ["org.apache.commons.math3.util.FastMath.log(double)"],
    "org.apache.commons.math3.stat.regression.SimpleRegression#addObservation(double[],double)": [
        "org.apache.commons.math3.stat.regression.SimpleRegression#addData(double,double)",
        "org.apache.commons.math3.exception.util.LocalizedFormats.<staticinit>()"
    ],
    "org.apache.commons.math3.analysis.function.Acosh#value(DerivativeStructure)": ["org.apache.commons.math3.analysis.differentiation.DerivativeStructure#acosh()"],
    "org.apache.commons.math3.complex.Quaternion#add(Quaternion)": ["org.apache.commons.math3.complex.Quaternion.add(Quaternion,Quaternion)"],
    "org.apache.commons.math3.linear.Array2DRowRealMatrix#walkInRowOrder(RealMatrixChangingVisitor,int,int,int,int)": [
        "org.apache.commons.math3.linear.Array2DRowRealMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.AbstractRealMatrix#getSubMatrix(int[],int[])$DefaultRealMatrixChangingVisitor$1#visit(int,int,double)",
        "org.apache.commons.math3.linear.DefaultRealMatrixChangingVisitor#end()",
        "org.apache.commons.math3.linear.Array2DRowRealMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.MatrixUtils.checkSubMatrixIndex(AnyMatrix,int,int,int,int)",
        "org.apache.commons.math3.linear.DefaultRealMatrixChangingVisitor#visit(int,int,double)",
        "org.apache.commons.math3.linear.DefaultRealMatrixChangingVisitor#start(int,int,int,int,int,int)"
    ],
    "org.apache.commons.math3.util.MathArrays.shuffle(int[],int,Position)": [
        "org.apache.commons.math3.util.MathArrays.shuffle(int[],int,Position,RandomGenerator)",
        "org.apache.commons.math3.random.Well19937c#Well19937c()",
        "org.apache.commons.math3.util.MathArrays.Position.<staticinit>()"
    ],
    "org.apache.commons.math3.fitting.HarmonicFitter#fit(double[])": [
        "org.apache.commons.math3.fitting.CurveFitter#fit(T extends ParametricUnivariateFunction,double[])",
        "org.apache.commons.math3.analysis.function.HarmonicOscillator.Parametric.<init>()"
    ],
    "org.apache.commons.math3.analysis.differentiation.DerivativeStructure#subtract(DerivativeStructure)": [
        "org.apache.commons.math3.analysis.differentiation.DerivativeStructure#DerivativeStructure(DerivativeStructure)",
        "org.apache.commons.math3.analysis.differentiation.DSCompiler#subtract(double[],int,double[],int,double[],int)",
        "org.apache.commons.math3.analysis.differentiation.DSCompiler#checkCompatibility(DSCompiler)"
    ],
    "org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D#readResolve()": ["org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D.LazyHolder.<staticinit>()"],
    "org.apache.commons.math3.distribution.NormalDistribution#NormalDistribution(RandomGenerator,double,double,double)": [
        "org.apache.commons.math3.distribution.NormalDistribution.<init>()",
        "org.apache.commons.math3.util.FastMath.log(double)",
        "org.apache.commons.math3.util.FastMath.<staticinit>()",
        "org.apache.commons.math3.distribution.AbstractRealDistribution#AbstractRealDistribution(RandomGenerator)",
        "org.apache.commons.math3.exception.util.LocalizedFormats.<staticinit>()"
    ],
    "org.apache.commons.math3.stat.Frequency#Frequency(Comparator<?>)": ["org.apache.commons.math3.stat.Frequency.<init>()"],
    "org.apache.commons.math3.linear.OpenMapRealMatrix#multiply(RealMatrix)": [
        "org.apache.commons.math3.linear.DiagonalMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.Array2DRowRealMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.BlockFieldMatrix#getColumnDimension()",
        "org.apache.commons.math3.util.OpenIntToDoubleHashMap#iterator()",
        "org.apache.commons.math3.linear.MatrixUtils.checkMultiplicationCompatible(AnyMatrix,AnyMatrix)",
        "org.apache.commons.math3.linear.OpenMapRealMatrix#multiply(OpenMapRealMatrix)",
        "org.apache.commons.math3.linear.DiagonalMatrix#getEntry(int,int)",
        "org.apache.commons.math3.linear.OpenMapRealMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.BlockRealMatrix#addToEntry(int,int,double)",
        "org.apache.commons.math3.util.OpenIntToDoubleHashMap.Iterator#advance()",
        "org.apache.commons.math3.linear.OpenMapRealMatrix#getEntry(int,int)",
        "org.apache.commons.math3.linear.BlockRealMatrix#BlockRealMatrix(int,int)",
        "org.apache.commons.math3.linear.BlockRealMatrix#getEntry(int,int)",
        "org.apache.commons.math3.linear.Array2DRowFieldMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.SparseFieldMatrix#getColumnDimension()",
        "org.apache.commons.math3.util.OpenIntToDoubleHashMap.Iterator#value()",
        "org.apache.commons.math3.linear.Array2DRowRealMatrix#getEntry(int,int)",
        "org.apache.commons.math3.util.OpenIntToDoubleHashMap.Iterator#key()",
        "org.apache.commons.math3.linear.BlockRealMatrix#getColumnDimension()",
        "org.apache.commons.math3.util.OpenIntToDoubleHashMap.Iterator#hasNext()"
    ],
    "org.apache.commons.math3.random.ValueServer#computeDistribution()": [
        "org.apache.commons.math3.random.ValueServer#computeDistribution(int)",
        "org.apache.commons.math3.random.EmpiricalDistribution.<staticinit>()"
    ],
    "org.apache.commons.math3.ml.neuralnet.twod.util.LocationFinder#getLocation(Neuron)": ["org.apache.commons.math3.ml.neuralnet.Neuron#getIdentifier()"],
    "org.apache.commons.math3.ml.neuralnet.sofm.util.ExponentialDecayFunction#ExponentialDecayFunction(double,double,long)": [
        "org.apache.commons.math3.util.FastMath.log(double)",
        "org.apache.commons.math3.ml.neuralnet.sofm.util.ExponentialDecayFunction.<init>()"
    ],
    "org.apache.commons.math3.optim.linear.SimplexTableau#getEntry(int,int)": ["org.apache.commons.math3.linear.Array2DRowRealMatrix#getEntry(int,int)"],
    "org.apache.commons.math3.ode.AbstractFieldIntegrator#sanityChecks(FieldODEState<T extends RealFieldElement>,T extends RealFieldElement)": [
        "org.apache.commons.math3.util.FastMath.abs(double)",
        "org.apache.commons.math3.util.FastMath.ulp(double)",
        "org.apache.commons.math3.ode.FieldODEState#getTime()",
        "org.apache.commons.math3.util.FastMath.max(double,double)",
        "org.apache.commons.math3.exception.util.LocalizedFormats.<staticinit>()"
    ],
    "org.apache.commons.math3.analysis.solvers.AbstractPolynomialSolver#AbstractPolynomialSolver(double,double,double)": [
        "org.apache.commons.math3.analysis.solvers.AbstractPolynomialSolver.<init>()",
        "org.apache.commons.math3.analysis.solvers.BaseAbstractUnivariateSolver#BaseAbstractUnivariateSolver(double,double,double)"
    ],
    "org.apache.commons.math3.stat.descriptive.AbstractUnivariateStatistic#evaluate()": [
        "org.apache.commons.math3.stat.descriptive.moment.StandardDeviation#evaluate(double[])",
        "org.apache.commons.math3.stat.descriptive.moment.Variance#evaluate(double[])",
        "org.apache.commons.math3.stat.descriptive.AbstractUnivariateStatistic#evaluate(double[])",
        "org.apache.commons.math3.stat.descriptive.AbstractStorelessUnivariateStatistic#evaluate(double[])"
    ],
    "org.apache.commons.math3.stat.interval.IntervalUtils#IntervalUtils()": ["org.apache.commons.math3.stat.interval.IntervalUtils.<init>()"],
    "org.apache.commons.math3.ode.AbstractParameterizable#AbstractParameterizable(Collection<String>)": ["org.apache.commons.math3.ode.AbstractParameterizable.<init>()"],
    "org.apache.commons.math3.genetics.AbstractListChromosome#AbstractListChromosome(List<T>)": ["org.apache.commons.math3.genetics.AbstractListChromosome#AbstractListChromosome(List<T>,boolean)"],
    "org.apache.commons.math3.random.RandomAdaptor#nextGaussian()": [
        "org.apache.commons.math3.random.RandomAdaptor#nextGaussian()",
        "org.apache.commons.math3.random.SynchronizedRandomGenerator#nextGaussian()",
        "org.apache.commons.math3.random.RandomGeneratorFactory.createRandomGenerator(Random)$RandomGenerator$1#nextGaussian()",
        "org.apache.commons.math3.random.BitsStreamGenerator#nextGaussian()",
        "org.apache.commons.math3.random.AbstractRandomGenerator#nextGaussian()"
    ],
    "org.apache.commons.math3.geometry.partitioning.RegionFactory.DifferenceMerger#merge(BSPTree<S extends Space>,BSPTree<S extends Space>,BSPTree<S extends Space>,boolean,boolean)": [
        "org.apache.commons.math3.geometry.partitioning.RegionFactory#recurseComplement(BSPTree<S extends Space>)",
        "org.apache.commons.math3.geometry.partitioning.BSPTree#insertInTree(BSPTree<S extends Space>,boolean,VanishingCutHandler<S extends Space>)",
        "org.apache.commons.math3.geometry.partitioning.BSPTree#getAttribute()"
    ],
    "org.apache.commons.math3.stat.inference.GTest#gTestIntrinsic(double[],long[])": [
        "org.apache.commons.math3.distribution.ChiSquaredDistribution#ChiSquaredDistribution(double,double)",
        "org.apache.commons.math3.stat.inference.GTest#g(double[],long[])",
        "org.apache.commons.math3.distribution.ChiSquaredDistribution#cumulativeProbability(double)"
    ],
    "org.apache.commons.math3.util.Decimal64Field#getZero()": ["org.apache.commons.math3.util.Decimal64.<staticinit>()"],
    "org.apache.commons.math3.stat.inference.KolmogorovSmirnovTest#approximateP(double,int,int)": [
        "org.apache.commons.math3.stat.inference.KolmogorovSmirnovTest.<staticinit>()",
        "org.apache.commons.math3.stat.inference.KolmogorovSmirnovTest#ksSum(double,double,int)",
        "org.apache.commons.math3.util.FastMath.sqrt(double)"
    ],
    "org.apache.commons.math3.ml.neuralnet.sofm.KohonenUpdateAction#attemptNeuronUpdate(Neuron,double[],double)": [
        "org.apache.commons.math3.ml.neuralnet.sofm.KohonenUpdateAction#computeFeatures(double[],double[],double)",
        "org.apache.commons.math3.ml.neuralnet.Neuron#compareAndSetFeatures(double[],double[])",
        "org.apache.commons.math3.ml.neuralnet.Neuron#getFeatures()"
    ],
    "org.apache.commons.math3.geometry.euclidean.threed.FieldRotation#composeInverse(FieldRotation<T extends RealFieldElement>,RotationConvention)": [
        "org.apache.commons.math3.geometry.euclidean.threed.FieldRotation#composeInternal(FieldRotation<T extends RealFieldElement>)",
        "org.apache.commons.math3.geometry.euclidean.threed.RotationConvention.<staticinit>()",
        "org.apache.commons.math3.geometry.euclidean.threed.FieldRotation#composeInverseInternal(FieldRotation<T extends RealFieldElement>)",
        "org.apache.commons.math3.geometry.euclidean.threed.FieldRotation#revert()"
    ],
    "org.apache.commons.math3.optimization.fitting.CurveFitter#fit(T extends ParametricUnivariateFunction,double[])": ["org.apache.commons.math3.optimization.fitting.CurveFitter#fit(int,T extends ParametricUnivariateFunction,double[])"],
    "org.apache.commons.math3.util.CombinatoricsUtils.binomialCoefficientDouble(int,int)": [
        "org.apache.commons.math3.util.CombinatoricsUtils.binomialCoefficient(int,int)",
        "org.apache.commons.math3.util.CombinatoricsUtils.checkBinomial(int,int)",
        "org.apache.commons.math3.util.CombinatoricsUtils.binomialCoefficientDouble(int,int)",
        "org.apache.commons.math3.util.FastMath.floor(double)"
    ],
    "org.apache.commons.math3.linear.Array2DRowRealMatrix#copyOut()": [
        "org.apache.commons.math3.linear.Array2DRowRealMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.Array2DRowRealMatrix#getColumnDimension()"
    ],
    "org.apache.commons.math3.linear.Array2DRowRealMatrix#copyIn(double[][])": ["org.apache.commons.math3.linear.Array2DRowRealMatrix#setSubMatrix(double[][],int,int)"],
    "org.apache.commons.math3.linear.JacobiPreconditioner#sqrt()$RealLinearOperator$1.<init>()": ["org.apache.commons.math3.linear.RealLinearOperator.<init>()"],
    "org.apache.commons.math3.stat.descriptive.AggregateSummaryStatistics#getSumOfLogs()": ["org.apache.commons.math3.stat.descriptive.SummaryStatistics#getSumOfLogs()"],
    "org.apache.commons.math3.ode.AbstractParameterizable#AbstractParameterizable(String[]...)": ["org.apache.commons.math3.ode.AbstractParameterizable.<init>()"],
    "org.apache.commons.math3.util.BigRealField#getZero()": ["org.apache.commons.math3.util.BigReal.<staticinit>()"],
    "org.apache.commons.math3.distribution.TDistribution#getNumericalMean()": ["org.apache.commons.math3.distribution.TDistribution#getDegreesOfFreedom()"],
    "org.apache.commons.math3.linear.FieldLUDecomposition.Solver#solve(ArrayFieldVector<T extends FieldElement>)": [
        "org.apache.commons.math3.linear.SingularMatrixException#SingularMatrixException()",
        "org.apache.commons.math3.exception.DimensionMismatchException#DimensionMismatchException(int,int)",
        "org.apache.commons.math3.linear.ArrayFieldVector#getEntry(int)",
        "org.apache.commons.math3.linear.ArrayFieldVector#ArrayFieldVector(T extends FieldElement[],boolean)",
        "org.apache.commons.math3.linear.ArrayFieldVector#getDimension()",
        "org.apache.commons.math3.util.MathArrays.buildArray(Field<T>,int)"
    ],
    "org.apache.commons.math3.optimization.PointValuePair#PointValuePair(double[],double)": ["org.apache.commons.math3.optimization.PointValuePair#PointValuePair(double[],double,boolean)"],
    "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.PowellOptimizer#PowellOptimizer(double,double)": ["org.apache.commons.math3.optim.nonlinear.scalar.noderiv.PowellOptimizer#PowellOptimizer(double,double,ConvergenceChecker<PointValuePair>)"],
    "org.apache.commons.math3.ml.clustering.FuzzyKMeansClusterer#FuzzyKMeansClusterer(int,double,int,DistanceMeasure)": [
        "org.apache.commons.math3.ml.clustering.FuzzyKMeansClusterer.<staticinit>()",
        "org.apache.commons.math3.ml.clustering.FuzzyKMeansClusterer#FuzzyKMeansClusterer(int,double,int,DistanceMeasure,double,RandomGenerator)",
        "org.apache.commons.math3.random.JDKRandomGenerator#JDKRandomGenerator()"
    ],
    "org.apache.commons.math3.distribution.ConstantRealDistribution#ConstantRealDistribution(double)": [
        "org.apache.commons.math3.distribution.ConstantRealDistribution.<init>()",
        "org.apache.commons.math3.distribution.AbstractRealDistribution#AbstractRealDistribution(RandomGenerator)"
    ],
    "org.apache.commons.math3.fitting.AbstractCurveFitter.TheoreticalValuesFunction#getModelFunction()": ["org.apache.commons.math3.fitting.AbstractCurveFitter.TheoreticalValuesFunction#getModelFunction()$MultivariateVectorFunction$1.<init>()"],
    "org.apache.commons.math3.analysis.solvers.RiddersSolver#RiddersSolver(double,double)": [
        "org.apache.commons.math3.analysis.solvers.AbstractUnivariateSolver#AbstractUnivariateSolver(double,double)",
        "org.apache.commons.math3.analysis.solvers.RiddersSolver.<init>()"
    ],
    "org.apache.commons.math3.geometry.euclidean.oned.Vector1D#subtract(Vector<Euclidean1D>)": ["org.apache.commons.math3.geometry.euclidean.oned.Vector1D#Vector1D(double)"],
    "org.apache.commons.math3.analysis.differentiation.DerivativeStructure#DerivativeStructure(DSCompiler)": [
        "org.apache.commons.math3.analysis.differentiation.DSCompiler#getSize()",
        "org.apache.commons.math3.analysis.differentiation.DerivativeStructure.<init>()"
    ],
    "org.apache.commons.math3.ode.FieldExpandableODE#init(T extends RealFieldElement,T extends RealFieldElement[],T extends RealFieldElement)": [
        "org.apache.commons.math3.ode.FieldEquationsMapper#extractEquationData(int,T extends RealFieldElement[])",
        "org.apache.commons.math3.ode.FieldEquationsMapper#getNumberOfEquations()"
    ],
    "org.apache.commons.math3.distribution.WeibullDistribution#cumulativeProbability(double)": [
        "org.apache.commons.math3.util.FastMath.exp(double)",
        "org.apache.commons.math3.util.FastMath.pow(double,double)"
    ],
    "org.apache.commons.math3.dfp.BracketingNthOrderBrentSolverDFP#getAbsoluteAccuracy()": ["org.apache.commons.math3.analysis.solvers.FieldBracketingNthOrderBrentSolver#getAbsoluteAccuracy()"],
    "org.apache.commons.math3.stat.descriptive.summary.Product#evaluate(double[],double[],int,int)": [
        "org.apache.commons.math3.util.FastMath.pow(double,double)",
        "org.apache.commons.math3.stat.descriptive.AbstractUnivariateStatistic#test(double[],double[],int,int,boolean)"
    ],
    "org.apache.commons.math3.distribution.BetaDistribution#logDensity(double)": [
        "org.apache.commons.math3.distribution.BetaDistribution#recomputeZ()",
        "org.apache.commons.math3.util.FastMath.log1p(double)",
        "org.apache.commons.math3.util.FastMath.log(double)",
        "org.apache.commons.math3.exception.util.LocalizedFormats.<staticinit>()"
    ],
    "org.apache.commons.math3.optim.linear.SimplexTableau#getOriginalNumDecisionVariables()": [
        "org.apache.commons.math3.linear.OpenMapRealVector#getDimension()",
        "org.apache.commons.math3.optim.linear.LinearObjectiveFunction#getCoefficients()",
        "org.apache.commons.math3.linear.ArrayRealVector#getDimension()",
        "org.apache.commons.math3.linear.RealVector.unmodifiableRealVector(RealVector)$RealVector$1#getDimension()"
    ],
    "org.apache.commons.math3.analysis.differentiation.DSCompiler#subtract(double[],int,double[],int,double[],int)": ["org.apache.commons.math3.analysis.differentiation.DSCompiler#getSize()"],
    "org.apache.commons.math3.geometry.spherical.twod.Sphere2D.getInstance()": ["org.apache.commons.math3.geometry.spherical.twod.Sphere2D.LazyHolder.<staticinit>()"],
    "org.apache.commons.math3.analysis.differentiation.SparseGradient#rootN(int)": [
        "org.apache.commons.math3.analysis.differentiation.SparseGradient#sqrt()",
        "org.apache.commons.math3.util.FastMath.pow(double,int)",
        "org.apache.commons.math3.analysis.differentiation.SparseGradient#SparseGradient(double,double,Map<Integer, Double>)",
        "org.apache.commons.math3.analysis.differentiation.SparseGradient#cbrt()"
    ],
    "org.apache.commons.math3.analysis.polynomials.PolynomialFunction.Parametric#value(double,double[]...)": ["org.apache.commons.math3.analysis.polynomials.PolynomialFunction.evaluate(double[],double)"],
    "org.apache.commons.math3.ode.sampling.NordsieckStepInterpolator#reinitialize(double[],boolean,EquationsMapper,EquationsMapper[])": ["org.apache.commons.math3.ode.sampling.AbstractStepInterpolator#reinitialize(double[],boolean,EquationsMapper,EquationsMapper[])"],
    "org.apache.commons.math3.ml.neuralnet.sofm.KohonenUpdateAction#findAndUpdateBestNeuron(Network,double[],double)": [
        "org.apache.commons.math3.ml.neuralnet.MapUtils.findBest(double[],Iterable<Neuron>,DistanceMeasure)",
        "org.apache.commons.math3.ml.neuralnet.sofm.KohonenUpdateAction#attemptNeuronUpdate(Neuron,double[],double)"
    ],
    "org.apache.commons.math3.optimization.direct.MultivariateFunctionMappingAdapter.LowerBoundMapper#boundedToUnbounded(double)": ["org.apache.commons.math3.util.FastMath.log(double)"],
    "org.apache.commons.math3.distribution.ParetoDistribution#logDensity(double)": ["org.apache.commons.math3.util.FastMath.log(double)"],
    "org.apache.commons.math3.stat.descriptive.moment.StandardDeviation#getN()": ["org.apache.commons.math3.stat.descriptive.moment.Variance#getN()"],
    "org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet#naturalFollowerConnections(List<ConnectableSegment>)": [
        "org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.ConnectableSegment#getNext()",
        "org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.ConnectableSegment#setPrevious(ConnectableSegment)",
        "org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.ConnectableSegment#getPrevious()",
        "org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.ConnectableSegment#getEndNode()",
        "org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.ConnectableSegment#setNext(ConnectableSegment)",
        "org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.ConnectableSegment#getNode()",
        "org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.ConnectableSegment#getStartNode()"
    ],
    "org.apache.commons.math3.ml.clustering.DBSCANClusterer#getNeighbors(T extends Clusterable,Collection<T extends Clusterable>)": ["org.apache.commons.math3.ml.clustering.Clusterer#distance(Clusterable,Clusterable)"],
    "org.apache.commons.math3.analysis.FunctionUtils.multiply(DifferentiableUnivariateFunction[]...)$DifferentiableUnivariateFunction$1#value(double)": [
        "org.apache.commons.math3.analysis.FunctionUtils.multiply(DifferentiableUnivariateFunction[]...)$UnivariateFunction$1$UnivariateFunction$1#derivative()$UnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.polynomials.PolynomialSplineFunction#value(double)",
        "org.apache.commons.math3.analysis.function.Gaussian#value(double)",
        "org.apache.commons.math3.analysis.function.Tanh#value(double)",
        "org.apache.commons.math3.analysis.function.Inverse#value(double)",
        "org.apache.commons.math3.analysis.function.HarmonicOscillator#value(double)",
        "org.apache.commons.math3.analysis.FunctionUtils.fix1stArgument(BivariateFunction,double)$UnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.function.Asin#value(double)",
        "org.apache.commons.math3.analysis.function.Asinh#value(double)",
        "org.apache.commons.math3.analysis.FunctionUtils.multiply(UnivariateFunction[]...)$UnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.function.Atan#value(double)",
        "org.apache.commons.math3.analysis.FunctionUtils.toDifferentiableUnivariateFunction(UnivariateDifferentiableFunction)$DifferentiableUnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.function.Cbrt#value(double)",
        "org.apache.commons.math3.analysis.polynomials.PolynomialFunctionLagrangeForm#value(double)",
        "org.apache.commons.math3.analysis.function.Exp#value(double)",
        "org.apache.commons.math3.special.BesselJ#value(double)",
        "org.apache.commons.math3.analysis.polynomials.PolynomialFunctionNewtonForm#value(double)",
        "org.apache.commons.math3.analysis.FunctionUtils.add(UnivariateFunction[]...)$UnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.function.Sin#value(double)",
        "org.apache.commons.math3.analysis.function.Cos#value(double)",
        "org.apache.commons.math3.analysis.interpolation.UnivariatePeriodicInterpolator#interpolate(double[],double[])$UnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.function.Log10#value(double)",
        "org.apache.commons.math3.analysis.function.Sqrt#value(double)",
        "org.apache.commons.math3.analysis.function.Log#value(double)",
        "org.apache.commons.math3.analysis.function.Sinc#value(double)",
        "org.apache.commons.math3.ode.events.EventState#evaluateStep(StepInterpolator)$UnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.function.Minus#value(double)",
        "org.apache.commons.math3.analysis.integration.IterativeLegendreGaussIntegrator#stage(int)$UnivariateFunction$1#value(double)",
        "org.apache.commons.math3.optimization.general.NonLinearConjugateGradientOptimizer.LineSearchFunction#value(double)",
        "org.apache.commons.math3.analysis.function.Floor#value(double)",
        "org.apache.commons.math3.analysis.FunctionUtils.multiply(DifferentiableUnivariateFunction[]...)$DifferentiableUnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.FunctionUtils.combine(BivariateFunction,UnivariateFunction,UnivariateFunction)$UnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.FunctionUtils.add(DifferentiableUnivariateFunction[]...)$UnivariateFunction$1$UnivariateFunction$1#derivative()$UnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.function.Sinh#value(double)",
        "org.apache.commons.math3.analysis.FunctionUtils.multiply(UnivariateDifferentiableFunction[]...)$UnivariateDifferentiableFunction$1#value(double)",
        "org.apache.commons.math3.analysis.function.Tan#value(double)",
        "org.apache.commons.math3.distribution.AbstractRealDistribution#inverseCumulativeProbability(double)$UnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.FunctionUtils.add(DifferentiableUnivariateFunction[]...)$DifferentiableUnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.function.Ceil#value(double)",
        "org.apache.commons.math3.analysis.function.Logistic#value(double)",
        "org.apache.commons.math3.analysis.function.Signum#value(double)",
        "org.apache.commons.math3.analysis.function.Constant#value(double)",
        "org.apache.commons.math3.analysis.function.Atanh#value(double)",
        "org.apache.commons.math3.analysis.FunctionUtils.compose(DifferentiableUnivariateFunction[]...)$UnivariateFunction$1$UnivariateFunction$1#derivative()$UnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.FunctionUtils.add(UnivariateDifferentiableFunction[]...)$UnivariateDifferentiableFunction$1#value(double)",
        "org.apache.commons.math3.analysis.function.Abs#value(double)",
        "org.apache.commons.math3.analysis.differentiation.FiniteDifferencesDifferentiator#differentiate(UnivariateFunction)$UnivariateDifferentiableFunction$1#value(double)",
        "org.apache.commons.math3.analysis.function.Identity#value(double)",
        "org.apache.commons.math3.analysis.function.Expm1#value(double)",
        "org.apache.commons.math3.analysis.function.Logit#value(double)",
        "org.apache.commons.math3.analysis.function.Log1p#value(double)",
        "org.apache.commons.math3.analysis.FunctionUtils.fix2ndArgument(BivariateFunction,double)$UnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.FunctionUtils.toUnivariateDifferential(DifferentiableUnivariateFunction)$UnivariateDifferentiableFunction$1#value(double)",
        "org.apache.commons.math3.analysis.FunctionUtils.toDifferentiableUnivariateFunction(UnivariateDifferentiableFunction)$UnivariateFunction$1$UnivariateFunction$1#derivative()$UnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.polynomials.PolynomialFunction#value(double)",
        "org.apache.commons.math3.analysis.function.Rint#value(double)",
        "org.apache.commons.math3.analysis.FunctionUtils.compose(UnivariateFunction[]...)$UnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.function.Cosh#value(double)",
        "org.apache.commons.math3.optimization.direct.PowellOptimizer.LineSearch#search(double[],double[])$UnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.FunctionUtils.compose(DifferentiableUnivariateFunction[]...)$DifferentiableUnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.function.Acosh#value(double)",
        "org.apache.commons.math3.analysis.function.StepFunction#value(double)",
        "org.apache.commons.math3.analysis.FunctionUtils.compose(UnivariateDifferentiableFunction[]...)$UnivariateDifferentiableFunction$1#value(double)",
        "org.apache.commons.math3.analysis.function.Acos#value(double)",
        "org.apache.commons.math3.analysis.function.Power#value(double)",
        "org.apache.commons.math3.optim.nonlinear.scalar.LineSearch#search(double[],double[])$UnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.function.Sigmoid#value(double)",
        "org.apache.commons.math3.analysis.function.Ulp#value(double)"
    ],
    "org.apache.commons.math3.userguide.ClusterAlgorithmComparison.Display#Display()": [
        "org.apache.commons.math3.userguide.ClusterAlgorithmComparison.makeMoons(int,boolean,double,RandomGenerator)",
        "org.apache.commons.math3.userguide.ClusterAlgorithmComparison.makeCircles(int,boolean,double,double,RandomGenerator)",
        "org.apache.commons.math3.userguide.ExampleUtils.ExampleFrame.<init>()",
        "org.apache.commons.math3.ml.clustering.KMeansPlusPlusClusterer#KMeansPlusPlusClusterer(int)",
        "org.apache.commons.math3.util.Pair#getSecond()",
        "org.apache.commons.math3.util.Pair#Pair(K,V)",
        "org.apache.commons.math3.userguide.ClusterAlgorithmComparison.normalize(List<Vector2D>,double,double,double,double)",
        "org.apache.commons.math3.ml.clustering.DBSCANClusterer#DBSCANClusterer(double,int)",
        "org.apache.commons.math3.userguide.ClusterAlgorithmComparison.ClusterPlot#ClusterPlot(List<? extends Cluster<DoublePoint>>,long)",
        "org.apache.commons.math3.userguide.ClusterAlgorithmComparison.makeBlobs(int,int,double,double,double,boolean,RandomGenerator)",
        "org.apache.commons.math3.userguide.ClusterAlgorithmComparison.Display.<init>()",
        "org.apache.commons.math3.userguide.ClusterAlgorithmComparison.makeRandom(int)",
        "org.apache.commons.math3.util.Pair#getFirst()",
        "org.apache.commons.math3.random.Well19937c#Well19937c(int)",
        "org.apache.commons.math3.ml.clustering.FuzzyKMeansClusterer#FuzzyKMeansClusterer(int,double)"
    ],
    "org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D#dotProduct(Vector3D)": [
        "org.apache.commons.math3.geometry.euclidean.threed.Vector3D#getZ()",
        "org.apache.commons.math3.geometry.euclidean.threed.Vector3D#getY()",
        "org.apache.commons.math3.geometry.euclidean.threed.Vector3D#getX()"
    ],
    "org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet#PolygonsSet(BSPTree<Euclidean2D>)": [
        "org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.<staticinit>()",
        "org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet#PolygonsSet(BSPTree<Euclidean2D>,double)"
    ],
    "org.apache.commons.math3.util.Precision.round(double,int)": ["org.apache.commons.math3.util.Precision.round(double,int,int)"],
    "org.apache.commons.math3.distribution.EnumeratedIntegerDistribution#EnumeratedIntegerDistribution(RandomGenerator,int[],double[])": [
        "org.apache.commons.math3.distribution.EnumeratedIntegerDistribution.<init>()",
        "org.apache.commons.math3.distribution.EnumeratedDistribution#EnumeratedDistribution(RandomGenerator,List<Pair<T, Double>>)",
        "org.apache.commons.math3.distribution.EnumeratedIntegerDistribution.createDistribution(int[],double[])",
        "org.apache.commons.math3.distribution.AbstractIntegerDistribution#AbstractIntegerDistribution(RandomGenerator)"
    ],
    "org.apache.commons.math3.stat.descriptive.DescriptiveStatistics#getGeometricMean()": [
        "org.apache.commons.math3.stat.descriptive.DescriptiveStatistics#apply(UnivariateStatistic)",
        "org.apache.commons.math3.stat.descriptive.SynchronizedDescriptiveStatistics#apply(UnivariateStatistic)"
    ],
    "org.apache.commons.math3.analysis.differentiation.DerivativeStructure#scalb(int)": [
        "org.apache.commons.math3.util.FastMath.scalb(double,int)",
        "org.apache.commons.math3.analysis.differentiation.DerivativeStructure#DerivativeStructure(DSCompiler)"
    ],
    "org.apache.commons.math3.linear.AbstractRealMatrix#getData()": [
        "org.apache.commons.math3.linear.DiagonalMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.Array2DRowRealMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.Array2DRowRealMatrix#getEntry(int,int)",
        "org.apache.commons.math3.linear.BlockRealMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.Array2DRowRealMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.DiagonalMatrix#getEntry(int,int)",
        "org.apache.commons.math3.linear.OpenMapRealMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.OpenMapRealMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.DiagonalMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.BlockRealMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.OpenMapRealMatrix#getEntry(int,int)",
        "org.apache.commons.math3.linear.BlockRealMatrix#getEntry(int,int)"
    ],
    "org.apache.commons.math3.linear.DiagonalMatrix#createMatrix(int,int)": [
        "org.apache.commons.math3.exception.DimensionMismatchException#DimensionMismatchException(int,int)",
        "org.apache.commons.math3.linear.DiagonalMatrix#DiagonalMatrix(int)"
    ],
    "org.apache.commons.math3.geometry.euclidean.threed.SphereGenerator#ballOnSupport(List<Vector3D>)": [
        "org.apache.commons.math3.geometry.euclidean.threed.Vector3D.<staticinit>()",
        "org.apache.commons.math3.fraction.BigFraction#subtract(BigFraction)",
        "org.apache.commons.math3.fraction.BigFraction#BigFraction(double)",
        "org.apache.commons.math3.fraction.BigFraction#multiply(BigFraction)",
        "org.apache.commons.math3.geometry.euclidean.twod.DiskGenerator.<init>()",
        "org.apache.commons.math3.geometry.euclidean.threed.Plane#toSpace(Vector<Euclidean2D>)",
        "org.apache.commons.math3.geometry.euclidean.threed.Vector3D#Vector3D(double,double,double)",
        "org.apache.commons.math3.geometry.enclosing.EnclosingBall#getCenter()",
        "org.apache.commons.math3.fraction.BigFraction#divide(BigFraction)",
        "org.apache.commons.math3.geometry.euclidean.twod.DiskGenerator#ballOnSupport(List<Vector2D>)",
        "org.apache.commons.math3.fraction.BigFraction#multiply(int)",
        "org.apache.commons.math3.fraction.BigFraction#doubleValue()",
        "org.apache.commons.math3.util.FastMath.sqrt(double)",
        "org.apache.commons.math3.geometry.euclidean.threed.Vector3D#getNorm1()",
        "org.apache.commons.math3.geometry.euclidean.threed.Plane#toSubSpace(Vector<Euclidean3D>)",
        "org.apache.commons.math3.geometry.enclosing.EnclosingBall#getRadius()",
        "org.apache.commons.math3.geometry.euclidean.threed.Vector3D#Vector3D(double,Vector3D,double,Vector3D)",
        "org.apache.commons.math3.geometry.euclidean.threed.Vector3D#distance(Vector<Euclidean3D>)",
        "org.apache.commons.math3.fraction.BigFraction#add(BigFraction)",
        "org.apache.commons.math3.geometry.euclidean.threed.Vector3D#getZ()",
        "org.apache.commons.math3.geometry.euclidean.threed.Vector3D#getY()",
        "org.apache.commons.math3.geometry.euclidean.threed.Plane#Plane(Vector3D,Vector3D,Vector3D,double)",
        "org.apache.commons.math3.geometry.euclidean.threed.SphereGenerator#minor(BigFraction[],BigFraction[],BigFraction[])",
        "org.apache.commons.math3.fraction.BigFraction#negate()",
        "org.apache.commons.math3.geometry.euclidean.threed.Vector3D#getX()"
    ],
    "org.apache.commons.math3.dfp.Dfp#cbrt()": ["org.apache.commons.math3.dfp.Dfp#rootN(int)"],
    "org.apache.commons.math3.stat.descriptive.rank.Max#Max(Max)": [
        "org.apache.commons.math3.stat.descriptive.rank.Max.<init>()",
        "org.apache.commons.math3.stat.descriptive.rank.Max.copy(Max,Max)",
        "org.apache.commons.math3.stat.descriptive.AbstractStorelessUnivariateStatistic.<init>()"
    ],
    "org.apache.commons.math3.ode.nonstiff.AdamsBashforthFieldIntegrator#AdamsBashforthFieldIntegrator(Field<T extends RealFieldElement>,int,double,double,double,double)": [
        "org.apache.commons.math3.ode.nonstiff.AdamsBashforthFieldIntegrator.<staticinit>()",
        "org.apache.commons.math3.ode.nonstiff.AdamsFieldIntegrator#AdamsFieldIntegrator(Field<T extends RealFieldElement>,String,int,int,double,double,double,double)",
        "org.apache.commons.math3.ode.nonstiff.AdamsBashforthFieldIntegrator.<init>()"
    ],
    "org.apache.commons.math3.util.Decimal64#asinh()": [
        "org.apache.commons.math3.util.Decimal64#Decimal64(double)",
        "org.apache.commons.math3.util.FastMath.asinh(double)"
    ],
    "org.apache.commons.math3.fitting.leastsquares.GaussNewtonOptimizer#withDecomposition(Decomposition)": ["org.apache.commons.math3.fitting.leastsquares.GaussNewtonOptimizer#GaussNewtonOptimizer(Decomposition)"],
    "org.apache.commons.math3.distribution.MixtureMultivariateNormalDistribution.createComponents(double[],double[][],double[][][])": [
        "org.apache.commons.math3.distribution.MultivariateNormalDistribution#MultivariateNormalDistribution(double[],double[][])",
        "org.apache.commons.math3.util.Pair#Pair(K,V)"
    ],
    "org.apache.commons.math3.stat.StatUtils.product(double[])": [
        "org.apache.commons.math3.stat.descriptive.moment.StandardDeviation#evaluate(double[])",
        "org.apache.commons.math3.stat.descriptive.moment.Variance#evaluate(double[])",
        "org.apache.commons.math3.stat.StatUtils.<staticinit>()",
        "org.apache.commons.math3.stat.descriptive.AbstractUnivariateStatistic#evaluate(double[])",
        "org.apache.commons.math3.stat.descriptive.AbstractStorelessUnivariateStatistic#evaluate(double[])"
    ],
    "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer.ValuePenaltyPair#ValuePenaltyPair(double,double)": ["org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer.ValuePenaltyPair.<init>()"],
    "org.apache.commons.math3.linear.ArrayFieldVector#add(FieldVector<T extends FieldElement>)": [
        "org.apache.commons.math3.linear.ArrayFieldVector#add(ArrayFieldVector<T extends FieldElement>)",
        "org.apache.commons.math3.linear.ArrayFieldVector#getEntry(int)",
        "org.apache.commons.math3.linear.SparseFieldVector#getEntry(int)",
        "org.apache.commons.math3.linear.ArrayFieldVector#ArrayFieldVector(Field<T extends FieldElement>,T extends FieldElement[],boolean)",
        "org.apache.commons.math3.util.MathArrays.buildArray(Field<T>,int)",
        "org.apache.commons.math3.linear.ArrayFieldVector#checkVectorDimensions(FieldVector<T extends FieldElement>)"
    ],
    "org.apache.commons.math3.fraction.Fraction#Fraction(double)": [
        "org.apache.commons.math3.fraction.Fraction#Fraction(double,double,int)",
        "org.apache.commons.math3.fraction.Fraction.<staticinit>()"
    ],
    "org.apache.commons.math3.random.AbstractRandomGenerator#nextGaussian()": [
        "org.apache.commons.math3.util.FastMath.log(double)",
        "org.apache.commons.math3.util.FastMath.sqrt(double)"
    ],
    "org.apache.commons.math3.distribution.LogNormalDistribution.<staticinit>()": [
        "org.apache.commons.math3.util.FastMath.sqrt(double)",
        "org.apache.commons.math3.util.FastMath.<staticinit>()"
    ],
    "org.apache.commons.math3.stat.inference.GTest#gTestDataSetsComparison(long[],long[],double)": [
        "org.apache.commons.math3.stat.inference.GTest#gTestDataSetsComparison(long[],long[])",
        "org.apache.commons.math3.exception.util.LocalizedFormats.<staticinit>()"
    ],
    "org.apache.commons.math3.distribution.BetaDistribution#sample()": ["org.apache.commons.math3.distribution.BetaDistribution.ChengBetaSampler.sample(RandomGenerator,double,double)"],
    "org.apache.commons.math3.util.FastMath.reducePayneHanek(double,double[])": ["org.apache.commons.math3.util.FastMath.<staticinit>()"],
    "org.apache.commons.math3.optimization.direct.SimplexOptimizer#doOptimize()": [
        "org.apache.commons.math3.optimization.direct.AbstractSimplex#build(double[])",
        "org.apache.commons.math3.optimization.direct.AbstractSimplex#getPoints()",
        "org.apache.commons.math3.optimization.direct.BaseAbstractMultivariateOptimizer#getStartPoint()",
        "org.apache.commons.math3.optimization.direct.AbstractSimplex#evaluate(MultivariateFunction,Comparator<PointValuePair>)",
        "org.apache.commons.math3.optimization.direct.SimplexOptimizer#doOptimize()$Comparator$1.<init>()",
        "org.apache.commons.math3.optimization.direct.SimplexOptimizer#doOptimize()$MultivariateFunction$1.<init>()",
        "org.apache.commons.math3.optimization.direct.AbstractSimplex#getSize()",
        "org.apache.commons.math3.exception.NullArgumentException#NullArgumentException()",
        "org.apache.commons.math3.optimization.direct.MultiDirectionalSimplex#iterate(MultivariateFunction,Comparator<PointValuePair>)",
        "org.apache.commons.math3.optimization.direct.NelderMeadSimplex#iterate(MultivariateFunction,Comparator<PointValuePair>)",
        "org.apache.commons.math3.optimization.GoalType.<staticinit>()",
        "org.apache.commons.math3.optimization.direct.BaseAbstractMultivariateOptimizer#getConvergenceChecker()",
        "org.apache.commons.math3.optimization.direct.BaseAbstractMultivariateOptimizer#getGoalType()",
        "org.apache.commons.math3.optimization.direct.AbstractSimplex#getPoint(int)"
    ],
    "org.apache.commons.math3.optim.nonlinear.vector.JacobianMultivariateVectorOptimizer#computeJacobian(double[])": [
        "org.apache.commons.math3.optimization.fitting.CurveFitter.OldTheoreticalValuesFunction#jacobian()$MultivariateMatrixFunction$1#value(double[])",
        "org.apache.commons.math3.fitting.AbstractCurveFitter.TheoreticalValuesFunction#getModelFunctionJacobian()$MultivariateMatrixFunction$1#value(double[])",
        "org.apache.commons.math3.analysis.differentiation.JacobianFunction#value(double[])",
        "org.apache.commons.math3.fitting.CurveFitter.TheoreticalValuesFunction#getModelFunctionJacobian()$MultivariateMatrixFunction$1#value(double[])",
        "org.apache.commons.math3.analysis.FunctionUtils.toDifferentiableMultivariateVectorFunction(MultivariateDifferentiableVectorFunction)$MultivariateMatrixFunction$1$MultivariateMatrixFunction$1#jacobian()$MultivariateMatrixFunction$1#value(double[])"
    ],
    "org.apache.commons.math3.ode.nonstiff.GillStepInterpolator#computeInterpolatedStateAndDerivatives(double,double)": ["org.apache.commons.math3.ode.nonstiff.GillStepInterpolator.<staticinit>()"],
    "org.apache.commons.math3.optimization.direct.BaseAbstractMultivariateOptimizer#optimizeInternal(int,FUNC extends MultivariateFunction,GoalType,OptimizationData[]...)": [
        "org.apache.commons.math3.optimization.direct.BOBYQAOptimizer#doOptimize()",
        "org.apache.commons.math3.optimization.direct.CMAESOptimizer#doOptimize()",
        "org.apache.commons.math3.optimization.direct.SimplexOptimizer#parseOptimizationData(OptimizationData[]...)",
        "org.apache.commons.math3.optimization.direct.BaseAbstractMultivariateOptimizer#checkParameters()",
        "org.apache.commons.math3.optimization.direct.SimplexOptimizer#doOptimize()",
        "org.apache.commons.math3.optimization.direct.CMAESOptimizer#parseOptimizationData(OptimizationData[]...)",
        "org.apache.commons.math3.optimization.direct.CMAESOptimizer#checkParameters()",
        "org.apache.commons.math3.optimization.general.NonLinearConjugateGradientOptimizer#doOptimize()",
        "org.apache.commons.math3.optimization.direct.PowellOptimizer#doOptimize()",
        "org.apache.commons.math3.util.Incrementor.wrap(Incrementor)$Incrementor$1#setMaximalCount(int)",
        "org.apache.commons.math3.util.Incrementor#setMaximalCount(int)",
        "org.apache.commons.math3.optimization.direct.BaseAbstractMultivariateOptimizer#parseOptimizationData(OptimizationData[]...)",
        "org.apache.commons.math3.util.Incrementor.wrap(Incrementor)$Incrementor$1#resetCount()",
        "org.apache.commons.math3.util.Incrementor#resetCount()"
    ],
    "org.apache.commons.math3.ode.nonstiff.HighamHall54FieldIntegrator#createInterpolator(boolean,T extends RealFieldElement[][],FieldODEStateAndDerivative<T extends RealFieldElement>,FieldODEStateAndDerivative<T extends RealFieldElement>,FieldEquationsMapper<T extends RealFieldElement>)": [
        "org.apache.commons.math3.ode.nonstiff.HighamHall54FieldStepInterpolator#HighamHall54FieldStepInterpolator(Field<T extends RealFieldElement>,boolean,T extends RealFieldElement[][],FieldODEStateAndDerivative<T extends RealFieldElement>,FieldODEStateAndDerivative<T extends RealFieldElement>,FieldODEStateAndDerivative<T extends RealFieldElement>,FieldODEStateAndDerivative<T extends RealFieldElement>,FieldEquationsMapper<T extends RealFieldElement>)",
        "org.apache.commons.math3.ode.AbstractFieldIntegrator#getField()"
    ],
    "org.apache.commons.math3.util.IntegerSequence.Incrementor#increment()": ["org.apache.commons.math3.util.IntegerSequence.Incrementor#increment(int)"],
    "org.apache.commons.math3.ode.nonstiff.DormandPrince853FieldIntegrator#DormandPrince853FieldIntegrator(Field<T extends RealFieldElement>,double,double,double,double)": [
        "org.apache.commons.math3.ode.nonstiff.DormandPrince853FieldIntegrator.<staticinit>()",
        "org.apache.commons.math3.ode.nonstiff.EmbeddedRungeKuttaFieldIntegrator#EmbeddedRungeKuttaFieldIntegrator(Field<T extends RealFieldElement>,String,int,double,double,double,double)",
        "org.apache.commons.math3.ode.nonstiff.DormandPrince853FieldIntegrator.<init>()",
        "org.apache.commons.math3.ode.nonstiff.EmbeddedRungeKuttaFieldIntegrator#fraction(double,double)"
    ],
    "org.apache.commons.math3.linear.AbstractFieldMatrix#checkAdditionCompatible(FieldMatrix<T extends FieldElement>)": [
        "org.apache.commons.math3.linear.DiagonalMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.Array2DRowRealMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.BlockFieldMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.SparseFieldMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.OpenMapRealMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.OpenMapRealMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.DiagonalMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.Array2DRowFieldMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.SparseFieldMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.BlockFieldMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.BlockRealMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.Array2DRowRealMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.Array2DRowFieldMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.BlockRealMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.MatrixDimensionMismatchException#MatrixDimensionMismatchException(int,int,int,int)"
    ],
    "org.apache.commons.math3.analysis.FunctionUtils.toDifferentiableMultivariateFunction(MultivariateDifferentiableFunction)$MultivariateFunction$1$MultivariateFunction$1#partialDerivative(int)$MultivariateFunction$1#value(double[])": [
        "org.apache.commons.math3.analysis.differentiation.DerivativeStructure#DerivativeStructure(int,int,int,double)",
        "org.apache.commons.math3.analysis.FunctionUtils.toMultivariateDifferentiableFunction(DifferentiableMultivariateFunction)$MultivariateDifferentiableFunction$1#value(DerivativeStructure[])",
        "org.apache.commons.math3.analysis.differentiation.DerivativeStructure#DerivativeStructure(int,int,double[]...)",
        "org.apache.commons.math3.analysis.differentiation.DerivativeStructure#getPartialDerivative(int[]...)"
    ],
    "org.apache.commons.math3.linear.SymmLQ.State.daxpbypz(double,RealVector,double,RealVector,RealVector)": [
        "org.apache.commons.math3.linear.OpenMapRealVector#getDimension()",
        "org.apache.commons.math3.linear.ArrayRealVector#getDimension()",
        "org.apache.commons.math3.linear.OpenMapRealVector#setEntry(int,double)",
        "org.apache.commons.math3.linear.ArrayRealVector#getEntry(int)",
        "org.apache.commons.math3.linear.RealVector.unmodifiableRealVector(RealVector)$RealVector$1#getDimension()",
        "org.apache.commons.math3.linear.OpenMapRealVector#getEntry(int)",
        "org.apache.commons.math3.linear.RealVector.unmodifiableRealVector(RealVector)$RealVector$1#setEntry(int,double)",
        "org.apache.commons.math3.linear.ArrayRealVector#setEntry(int,double)",
        "org.apache.commons.math3.linear.RealVector.unmodifiableRealVector(RealVector)$RealVector$1#getEntry(int)"
    ],
    "org.apache.commons.math3.linear.Array2DRowFieldMatrix#add(Array2DRowFieldMatrix<T extends FieldElement>)": [
        "org.apache.commons.math3.util.MathArrays.buildArray(Field<T>,int,int)",
        "org.apache.commons.math3.linear.AbstractFieldMatrix#checkAdditionCompatible(FieldMatrix<T extends FieldElement>)",
        "org.apache.commons.math3.linear.Array2DRowFieldMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.Array2DRowFieldMatrix#Array2DRowFieldMatrix(Field<T extends FieldElement>,T extends FieldElement[][],boolean)",
        "org.apache.commons.math3.linear.AbstractFieldMatrix#getField()",
        "org.apache.commons.math3.linear.Array2DRowFieldMatrix#getColumnDimension()"
    ],
    "org.apache.commons.math3.optimization.linear.SimplexSolver#SimplexSolver(double,int)": [
        "org.apache.commons.math3.optimization.linear.AbstractLinearOptimizer#AbstractLinearOptimizer()",
        "org.apache.commons.math3.optimization.linear.SimplexSolver.<init>()"
    ],
    "org.apache.commons.math3.analysis.solvers.BaseAbstractUnivariateSolver#computeObjectiveValue(double)": ["org.apache.commons.math3.analysis.solvers.BaseAbstractUnivariateSolver#incrementEvaluationCount()"],
    "org.apache.commons.math3.random.UnitSphereRandomVectorGenerator#nextVector()": [
        "org.apache.commons.math3.random.RandomAdaptor#nextGaussian()",
        "org.apache.commons.math3.random.SynchronizedRandomGenerator#nextGaussian()",
        "org.apache.commons.math3.random.RandomGeneratorFactory.createRandomGenerator(Random)$RandomGenerator$1#nextGaussian()",
        "org.apache.commons.math3.random.BitsStreamGenerator#nextGaussian()",
        "org.apache.commons.math3.random.AbstractRandomGenerator#nextGaussian()",
        "org.apache.commons.math3.util.FastMath.sqrt(double)"
    ],
    "org.apache.commons.math3.dfp.Dfp#signum()": [
        "org.apache.commons.math3.dfp.Dfp#isZero()",
        "org.apache.commons.math3.dfp.DfpDec#newInstance(int)",
        "org.apache.commons.math3.dfp.Dfp#isNaN()",
        "org.apache.commons.math3.dfp.Dfp#newInstance(int)"
    ],
    "org.apache.commons.math3.ode.AbstractIntegrator#addEventHandler(EventHandler,double,double,int)": [
        "org.apache.commons.math3.ode.nonstiff.GraggBulirschStoerIntegrator#addEventHandler(EventHandler,double,double,int,UnivariateSolver)",
        "org.apache.commons.math3.analysis.solvers.BracketingNthOrderBrentSolver#BracketingNthOrderBrentSolver(double,int)",
        "org.apache.commons.math3.ode.AbstractIntegrator#addEventHandler(EventHandler,double,double,int,UnivariateSolver)"
    ],
    "org.apache.commons.math3.exception.NoBracketingException#NoBracketingException(double,double,double,double)": ["org.apache.commons.math3.exception.util.LocalizedFormats.<staticinit>()"],
    "org.apache.commons.math3.dfp.DfpField#newDfp(long)": ["org.apache.commons.math3.dfp.Dfp#Dfp(DfpField,long)"],
    "org.apache.commons.math3.optim.linear.SimplexTableau#writeObject(ObjectOutputStream)": ["org.apache.commons.math3.linear.MatrixUtils.serializeRealMatrix(RealMatrix,ObjectOutputStream)"],
    "org.apache.commons.math3.stat.descriptive.SummaryStatistics#setMaxImpl(StorelessUnivariateStatistic)": ["org.apache.commons.math3.stat.descriptive.SummaryStatistics#checkEmpty()"],
    "org.apache.commons.math3.analysis.FunctionUtils.compose(UnivariateFunction[]...)": ["org.apache.commons.math3.analysis.FunctionUtils.compose(UnivariateFunction[]...)$UnivariateFunction$1.<init>()"],
    "org.apache.commons.math3.random.EmpiricalDistribution#EmpiricalDistribution(RandomGenerator)": [
        "org.apache.commons.math3.random.EmpiricalDistribution.<staticinit>()",
        "org.apache.commons.math3.random.EmpiricalDistribution#EmpiricalDistribution(int,RandomGenerator)"
    ],
    "org.apache.commons.math3.complex.ComplexFormat#format(Object,StringBuffer,FieldPosition)": [
        "org.apache.commons.math3.complex.ComplexFormat#format(Complex,StringBuffer,FieldPosition)",
        "org.apache.commons.math3.complex.Complex#Complex(double,double)",
        "org.apache.commons.math3.exception.util.LocalizedFormats.<staticinit>()"
    ],
    "org.apache.commons.math3.random.UnitSphereRandomVectorGenerator#UnitSphereRandomVectorGenerator(int,RandomGenerator)": ["org.apache.commons.math3.random.UnitSphereRandomVectorGenerator.<init>()"],
    "org.apache.commons.math3.util.OpenIntToFieldHashMap#findInsertionIndex(int)": ["org.apache.commons.math3.util.OpenIntToFieldHashMap.findInsertionIndex(int[],byte[],int,int)"],
    "org.apache.commons.math3.analysis.differentiation.FiniteDifferencesDifferentiator#differentiate(UnivariateVectorFunction)$UnivariateDifferentiableVectorFunction$1#value(double)": [
        "org.apache.commons.math3.analysis.differentiation.FiniteDifferencesDifferentiator#differentiate(UnivariateVectorFunction)$UnivariateDifferentiableVectorFunction$1#value(double)",
        "org.apache.commons.math3.analysis.interpolation.HermiteInterpolator#value(double)"
    ],
    "org.apache.commons.math3.linear.LUDecomposition.Solver#Solver(double[][],int[],boolean)": ["org.apache.commons.math3.linear.LUDecomposition.Solver.<init>()"],
    "org.apache.commons.math3.distribution.EnumeratedIntegerDistribution.createDistribution(int[],double[])": [
        "org.apache.commons.math3.exception.DimensionMismatchException#DimensionMismatchException(int,int)",
        "org.apache.commons.math3.util.Pair#Pair(K,V)"
    ],
    "org.apache.commons.math3.optimization.DifferentiableMultivariateMultiStartOptimizer#DifferentiableMultivariateMultiStartOptimizer(DifferentiableMultivariateOptimizer,int,RandomVectorGenerator)": [
        "org.apache.commons.math3.optimization.DifferentiableMultivariateMultiStartOptimizer.<init>()",
        "org.apache.commons.math3.optimization.BaseMultivariateMultiStartOptimizer#BaseMultivariateMultiStartOptimizer(BaseMultivariateOptimizer<FUNC extends MultivariateFunction>,int,RandomVectorGenerator)"
    ],
    "org.apache.commons.math3.analysis.integration.LegendreGaussIntegrator#doIntegrate()": [
        "org.apache.commons.math3.analysis.integration.LegendreGaussIntegrator#stage(int)",
        "org.apache.commons.math3.analysis.integration.BaseAbstractUnivariateIntegrator#getAbsoluteAccuracy()",
        "org.apache.commons.math3.analysis.integration.BaseAbstractUnivariateIntegrator#getMinimalIterationCount()",
        "org.apache.commons.math3.util.FastMath.max(double,double)",
        "org.apache.commons.math3.util.FastMath.abs(double)",
        "org.apache.commons.math3.analysis.integration.BaseAbstractUnivariateIntegrator#getRelativeAccuracy()",
        "org.apache.commons.math3.util.FastMath.min(double,double)",
        "org.apache.commons.math3.util.FastMath.max(int,int)",
        "org.apache.commons.math3.util.FastMath.pow(double,int)",
        "org.apache.commons.math3.analysis.integration.BaseAbstractUnivariateIntegrator#incrementCount()",
        "org.apache.commons.math3.analysis.integration.BaseAbstractUnivariateIntegrator#getIterations()"
    ],
    "org.apache.commons.math3.linear.OpenMapRealVector#OpenMapRealVector()": [
        "org.apache.commons.math3.linear.OpenMapRealVector#OpenMapRealVector(int,double)",
        "org.apache.commons.math3.linear.OpenMapRealVector.<staticinit>()"
    ],
    "org.apache.commons.math3.dfp.Dfp#expm1()": [
        "org.apache.commons.math3.dfp.Dfp#getOne()",
        "org.apache.commons.math3.dfp.DfpMath.exp(Dfp)",
        "org.apache.commons.math3.dfp.Dfp#subtract(Dfp)"
    ],
    "org.apache.commons.math3.stat.descriptive.SynchronizedMultivariateSummaryStatistics#toString()": ["org.apache.commons.math3.stat.descriptive.MultivariateSummaryStatistics#toString()"],
    "org.apache.commons.math3.geometry.euclidean.oned.Vector1D#Vector1D(double,Vector1D,double,Vector1D)": ["org.apache.commons.math3.geometry.euclidean.oned.Vector1D.<init>()"],
    "org.apache.commons.math3.analysis.solvers.PegasusSolver#PegasusSolver()": [
        "org.apache.commons.math3.analysis.solvers.BaseSecantSolver.Method.<staticinit>()",
        "org.apache.commons.math3.analysis.solvers.BaseSecantSolver.<staticinit>()",
        "org.apache.commons.math3.analysis.solvers.PegasusSolver.<init>()",
        "org.apache.commons.math3.analysis.solvers.BaseSecantSolver#BaseSecantSolver(double,Method)"
    ],
    "org.apache.commons.math3.util.FastMathLiteralArrays.loadExpFracA()": ["org.apache.commons.math3.util.FastMathLiteralArrays.<staticinit>()"],
    "org.apache.commons.math3.geometry.spherical.oned.Arc#checkPoint(double)": [
        "org.apache.commons.math3.geometry.spherical.oned.Arc#getSize()",
        "org.apache.commons.math3.util.MathUtils.normalizeAngle(double,double)",
        "org.apache.commons.math3.util.MathUtils.<staticinit>()",
        "org.apache.commons.math3.geometry.partitioning.Region.Location.<staticinit>()"
    ],
    "org.apache.commons.math3.fraction.ProperFractionFormat#ProperFractionFormat()": [
        "org.apache.commons.math3.fraction.ProperFractionFormat#ProperFractionFormat(NumberFormat)",
        "org.apache.commons.math3.fraction.FractionFormat.getDefaultNumberFormat()"
    ],
    "org.apache.commons.math3.linear.DefaultFieldMatrixChangingVisitor#DefaultFieldMatrixChangingVisitor(T extends FieldElement)": ["org.apache.commons.math3.linear.DefaultFieldMatrixChangingVisitor.<init>()"],
    "org.apache.commons.math3.linear.QRDecomposition#getQT()": [
        "org.apache.commons.math3.util.FastMath.min(int,int)",
        "org.apache.commons.math3.linear.MatrixUtils.createRealMatrix(double[][])"
    ],
    "org.apache.commons.math3.analysis.FunctionUtils.multiply(UnivariateDifferentiableFunction[]...)$UnivariateDifferentiableFunction$1#value(double)": [
        "org.apache.commons.math3.analysis.FunctionUtils.multiply(DifferentiableUnivariateFunction[]...)$UnivariateFunction$1$UnivariateFunction$1#derivative()$UnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.polynomials.PolynomialSplineFunction#value(double)",
        "org.apache.commons.math3.analysis.function.Gaussian#value(double)",
        "org.apache.commons.math3.analysis.function.Tanh#value(double)",
        "org.apache.commons.math3.analysis.function.Inverse#value(double)",
        "org.apache.commons.math3.analysis.function.HarmonicOscillator#value(double)",
        "org.apache.commons.math3.analysis.FunctionUtils.fix1stArgument(BivariateFunction,double)$UnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.function.Asin#value(double)",
        "org.apache.commons.math3.analysis.function.Asinh#value(double)",
        "org.apache.commons.math3.analysis.FunctionUtils.multiply(UnivariateFunction[]...)$UnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.function.Atan#value(double)",
        "org.apache.commons.math3.analysis.FunctionUtils.toDifferentiableUnivariateFunction(UnivariateDifferentiableFunction)$DifferentiableUnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.function.Cbrt#value(double)",
        "org.apache.commons.math3.analysis.polynomials.PolynomialFunctionLagrangeForm#value(double)",
        "org.apache.commons.math3.analysis.function.Exp#value(double)",
        "org.apache.commons.math3.special.BesselJ#value(double)",
        "org.apache.commons.math3.analysis.polynomials.PolynomialFunctionNewtonForm#value(double)",
        "org.apache.commons.math3.analysis.FunctionUtils.add(UnivariateFunction[]...)$UnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.function.Sin#value(double)",
        "org.apache.commons.math3.analysis.function.Cos#value(double)",
        "org.apache.commons.math3.analysis.interpolation.UnivariatePeriodicInterpolator#interpolate(double[],double[])$UnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.function.Log10#value(double)",
        "org.apache.commons.math3.analysis.function.Sqrt#value(double)",
        "org.apache.commons.math3.analysis.function.Log#value(double)",
        "org.apache.commons.math3.analysis.function.Sinc#value(double)",
        "org.apache.commons.math3.ode.events.EventState#evaluateStep(StepInterpolator)$UnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.function.Minus#value(double)",
        "org.apache.commons.math3.analysis.integration.IterativeLegendreGaussIntegrator#stage(int)$UnivariateFunction$1#value(double)",
        "org.apache.commons.math3.optimization.general.NonLinearConjugateGradientOptimizer.LineSearchFunction#value(double)",
        "org.apache.commons.math3.analysis.function.Floor#value(double)",
        "org.apache.commons.math3.analysis.FunctionUtils.multiply(DifferentiableUnivariateFunction[]...)$DifferentiableUnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.FunctionUtils.combine(BivariateFunction,UnivariateFunction,UnivariateFunction)$UnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.FunctionUtils.add(DifferentiableUnivariateFunction[]...)$UnivariateFunction$1$UnivariateFunction$1#derivative()$UnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.function.Sinh#value(double)",
        "org.apache.commons.math3.analysis.FunctionUtils.multiply(UnivariateDifferentiableFunction[]...)$UnivariateDifferentiableFunction$1#value(double)",
        "org.apache.commons.math3.analysis.function.Tan#value(double)",
        "org.apache.commons.math3.distribution.AbstractRealDistribution#inverseCumulativeProbability(double)$UnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.FunctionUtils.add(DifferentiableUnivariateFunction[]...)$DifferentiableUnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.function.Ceil#value(double)",
        "org.apache.commons.math3.analysis.function.Logistic#value(double)",
        "org.apache.commons.math3.analysis.function.Signum#value(double)",
        "org.apache.commons.math3.analysis.function.Constant#value(double)",
        "org.apache.commons.math3.analysis.function.Atanh#value(double)",
        "org.apache.commons.math3.analysis.FunctionUtils.compose(DifferentiableUnivariateFunction[]...)$UnivariateFunction$1$UnivariateFunction$1#derivative()$UnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.FunctionUtils.add(UnivariateDifferentiableFunction[]...)$UnivariateDifferentiableFunction$1#value(double)",
        "org.apache.commons.math3.analysis.function.Abs#value(double)",
        "org.apache.commons.math3.analysis.differentiation.FiniteDifferencesDifferentiator#differentiate(UnivariateFunction)$UnivariateDifferentiableFunction$1#value(double)",
        "org.apache.commons.math3.analysis.function.Identity#value(double)",
        "org.apache.commons.math3.analysis.function.Expm1#value(double)",
        "org.apache.commons.math3.analysis.function.Logit#value(double)",
        "org.apache.commons.math3.analysis.function.Log1p#value(double)",
        "org.apache.commons.math3.analysis.FunctionUtils.fix2ndArgument(BivariateFunction,double)$UnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.FunctionUtils.toUnivariateDifferential(DifferentiableUnivariateFunction)$UnivariateDifferentiableFunction$1#value(double)",
        "org.apache.commons.math3.analysis.FunctionUtils.toDifferentiableUnivariateFunction(UnivariateDifferentiableFunction)$UnivariateFunction$1$UnivariateFunction$1#derivative()$UnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.polynomials.PolynomialFunction#value(double)",
        "org.apache.commons.math3.analysis.function.Rint#value(double)",
        "org.apache.commons.math3.analysis.FunctionUtils.compose(UnivariateFunction[]...)$UnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.function.Cosh#value(double)",
        "org.apache.commons.math3.optimization.direct.PowellOptimizer.LineSearch#search(double[],double[])$UnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.FunctionUtils.compose(DifferentiableUnivariateFunction[]...)$DifferentiableUnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.function.Acosh#value(double)",
        "org.apache.commons.math3.analysis.function.StepFunction#value(double)",
        "org.apache.commons.math3.analysis.FunctionUtils.compose(UnivariateDifferentiableFunction[]...)$UnivariateDifferentiableFunction$1#value(double)",
        "org.apache.commons.math3.analysis.function.Acos#value(double)",
        "org.apache.commons.math3.analysis.function.Power#value(double)",
        "org.apache.commons.math3.optim.nonlinear.scalar.LineSearch#search(double[],double[])$UnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.function.Sigmoid#value(double)",
        "org.apache.commons.math3.analysis.function.Ulp#value(double)"
    ],
    "org.apache.commons.math3.util.ArithmeticUtils.stirlingS2(int,int)": ["org.apache.commons.math3.util.CombinatoricsUtils.stirlingS2(int,int)"],
    "org.apache.commons.math3.ode.events.EventState#reinitializeBegin(StepInterpolator)": [
        "org.apache.commons.math3.analysis.solvers.BaseAbstractUnivariateSolver#getAbsoluteAccuracy()",
        "org.apache.commons.math3.ode.sampling.AbstractStepInterpolator#setInterpolatedTime(double)",
        "org.apache.commons.math3.ode.events.EventState#getCompleteState(StepInterpolator)",
        "org.apache.commons.math3.util.FastMath.abs(double)",
        "org.apache.commons.math3.util.FastMath.max(double,double)",
        "org.apache.commons.math3.ode.events.EventFilter#g(double,double[])",
        "org.apache.commons.math3.analysis.solvers.BaseAbstractUnivariateSolver#getRelativeAccuracy()",
        "org.apache.commons.math3.ode.sampling.AbstractStepInterpolator#getPreviousTime()"
    ],
    "org.apache.commons.math3.ode.nonstiff.ClassicalRungeKuttaStepInterpolator#ClassicalRungeKuttaStepInterpolator(ClassicalRungeKuttaStepInterpolator)": [
        "org.apache.commons.math3.ode.nonstiff.ClassicalRungeKuttaStepInterpolator.<init>()",
        "org.apache.commons.math3.ode.nonstiff.RungeKuttaStepInterpolator#RungeKuttaStepInterpolator(RungeKuttaStepInterpolator)"
    ],
    "org.apache.commons.math3.optimization.fitting.PolynomialFitter#fit(double[])": [
        "org.apache.commons.math3.analysis.polynomials.PolynomialFunction.Parametric.<init>()",
        "org.apache.commons.math3.optimization.fitting.CurveFitter#fit(T extends ParametricUnivariateFunction,double[])"
    ],
    "org.apache.commons.math3.ode.nonstiff.AdamsNordsieckTransformer#updateHighOrderDerivativesPhase2(double[],double[],Array2DRowRealMatrix)": ["org.apache.commons.math3.linear.Array2DRowRealMatrix#getDataRef()"],
    "org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D#subtract(FieldVector3D<T extends RealFieldElement>)": ["org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D#FieldVector3D(T extends RealFieldElement,T extends RealFieldElement,T extends RealFieldElement)"],
    "org.apache.commons.math3.optimization.univariate.BracketFinder#BracketFinder()": ["org.apache.commons.math3.optimization.univariate.BracketFinder#BracketFinder(double,int)"],
    "org.apache.commons.math3.distribution.PoissonDistribution#getNumericalVariance()": ["org.apache.commons.math3.distribution.PoissonDistribution#getMean()"],
    "org.apache.commons.math3.optimization.SimpleVectorValueChecker#converged(int,PointVectorValuePair,PointVectorValuePair)": [
        "org.apache.commons.math3.optimization.PointVectorValuePair#getValueRef()",
        "org.apache.commons.math3.optimization.SimpleVectorValueChecker.<staticinit>()",
        "org.apache.commons.math3.optimization.AbstractConvergenceChecker#getRelativeThreshold()",
        "org.apache.commons.math3.util.FastMath.max(double,double)",
        "org.apache.commons.math3.optimization.AbstractConvergenceChecker#getAbsoluteThreshold()",
        "org.apache.commons.math3.util.FastMath.abs(double)"
    ],
    "org.apache.commons.math3.analysis.differentiation.DerivativeStructure#tan()": [
        "org.apache.commons.math3.analysis.differentiation.DSCompiler#tan(double[],int,double[],int)",
        "org.apache.commons.math3.analysis.differentiation.DerivativeStructure#DerivativeStructure(DSCompiler)"
    ],
    "org.apache.commons.math3.geometry.euclidean.twod.Vector2D#Vector2D(double,Vector2D,double,Vector2D,double,Vector2D)": ["org.apache.commons.math3.geometry.euclidean.twod.Vector2D.<init>()"],
    "org.apache.commons.math3.geometry.euclidean.twod.Line#toSpace(Point<Euclidean1D>)": [
        "org.apache.commons.math3.geometry.euclidean.twod.Vector2D#Vector2D(double,double)",
        "org.apache.commons.math3.geometry.euclidean.oned.Vector1D#getX()",
        "org.apache.commons.math3.util.MathArrays.linearCombination(double,double,double,double)"
    ],
    "org.apache.commons.math3.optim.linear.LinearObjectiveFunction#LinearObjectiveFunction(RealVector,double)": ["org.apache.commons.math3.optim.linear.LinearObjectiveFunction.<init>()"],
    "org.apache.commons.math3.ml.neuralnet.FeatureInitializerFactory#FeatureInitializerFactory()": ["org.apache.commons.math3.ml.neuralnet.FeatureInitializerFactory.<init>()"],
    "org.apache.commons.math3.ml.distance.EarthMoversDistance#compute(double[],double[])": [
        "org.apache.commons.math3.util.FastMath.abs(double)",
        "org.apache.commons.math3.util.MathArrays.checkEqualLength(double[],double[])"
    ],
    "org.apache.commons.math3.optimization.direct.NelderMeadSimplex#NelderMeadSimplex(int,double)": [
        "org.apache.commons.math3.optimization.direct.NelderMeadSimplex#NelderMeadSimplex(int,double,double,double,double,double)",
        "org.apache.commons.math3.optimization.direct.NelderMeadSimplex.<staticinit>()"
    ],
    "org.apache.commons.math3.linear.RealVector#mapAdd(double)": [
        "org.apache.commons.math3.linear.ArrayRealVector#copy()",
        "org.apache.commons.math3.linear.ArrayRealVector#mapAddToSelf(double)",
        "org.apache.commons.math3.linear.RealVector.unmodifiableRealVector(RealVector)$RealVector$1#copy()",
        "org.apache.commons.math3.linear.RealVector#mapAddToSelf(double)",
        "org.apache.commons.math3.linear.OpenMapRealVector#mapAddToSelf(double)",
        "org.apache.commons.math3.linear.OpenMapRealVector#copy()",
        "org.apache.commons.math3.linear.RealVector.unmodifiableRealVector(RealVector)$RealVector$1#mapAddToSelf(double)"
    ],
    "org.apache.commons.math3.stat.inference.TestUtils.tTest(double[],double[])": [
        "org.apache.commons.math3.stat.inference.TTest#tTest(double[],double[])",
        "org.apache.commons.math3.stat.inference.TestUtils.<staticinit>()"
    ],
    "org.apache.commons.math3.ml.neuralnet.twod.util.SmoothedDataHistogram#computeImage(NeuronSquareMesh2D,Iterable<double[]>)": [
        "org.apache.commons.math3.ml.neuralnet.twod.NeuronSquareMesh2D#getNetwork()",
        "org.apache.commons.math3.ml.neuralnet.twod.NeuronSquareMesh2D#getNumberOfRows()",
        "org.apache.commons.math3.ml.neuralnet.twod.util.LocationFinder.Location#getRow()",
        "org.apache.commons.math3.ml.neuralnet.MapUtils.sort(double[],Iterable<Neuron>,DistanceMeasure)",
        "org.apache.commons.math3.ml.neuralnet.twod.util.LocationFinder#LocationFinder(NeuronSquareMesh2D)",
        "org.apache.commons.math3.ml.neuralnet.twod.util.LocationFinder.Location#getColumn()",
        "org.apache.commons.math3.ml.neuralnet.twod.util.LocationFinder#getLocation(Neuron)",
        "org.apache.commons.math3.ml.neuralnet.twod.NeuronSquareMesh2D#getNumberOfColumns()"
    ],
    "org.apache.commons.math3.analysis.differentiation.DSCompiler#cos(double[],int,double[],int)": [
        "org.apache.commons.math3.util.FastMath.sin(double)",
        "org.apache.commons.math3.analysis.differentiation.DSCompiler#compose(double[],int,double[],double[],int)",
        "org.apache.commons.math3.util.FastMath.cos(double)"
    ],
    "org.apache.commons.math3.analysis.differentiation.FiniteDifferencesDifferentiator#evaluate(DerivativeStructure,double,double[])": [
        "org.apache.commons.math3.analysis.differentiation.DerivativeStructure#add(DerivativeStructure)",
        "org.apache.commons.math3.analysis.differentiation.DerivativeStructure#getValue()",
        "org.apache.commons.math3.analysis.differentiation.DerivativeStructure#DerivativeStructure(int,int,double[]...)",
        "org.apache.commons.math3.analysis.differentiation.DerivativeStructure#getOrder()",
        "org.apache.commons.math3.analysis.differentiation.DerivativeStructure#multiply(DerivativeStructure)",
        "org.apache.commons.math3.analysis.differentiation.DerivativeStructure#multiply(double)",
        "org.apache.commons.math3.analysis.differentiation.DerivativeStructure#getFreeParameters()",
        "org.apache.commons.math3.analysis.differentiation.DerivativeStructure#getAllDerivatives()"
    ],
    "org.apache.commons.math3.analysis.differentiation.DerivativeStructure#taylor(double[]...)": ["org.apache.commons.math3.analysis.differentiation.DSCompiler#taylor(double[],int,double[]...)"],
    "org.apache.commons.math3.userguide.sofm.ChineseRingsClassifier#createIterable()$Iterable$1#iterator()": ["org.apache.commons.math3.userguide.sofm.ChineseRingsClassifier#createIterable()$Iterator$1$Iterator$1#iterator()$Iterator$1.<init>()"],
    "org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizer#LevenbergMarquardtOptimizer(double,ConvergenceChecker<PointVectorValuePair>,double,double,double,double)": [
        "org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizer.<init>()",
        "org.apache.commons.math3.optim.nonlinear.vector.jacobian.AbstractLeastSquaresOptimizer#AbstractLeastSquaresOptimizer(ConvergenceChecker<PointVectorValuePair>)"
    ],
    "org.apache.commons.math3.analysis.function.Logit#Logit()": ["org.apache.commons.math3.analysis.function.Logit#Logit(double,double)"],
    "org.apache.commons.math3.userguide.genetics.HelloWorldExample.main(String[])": [
        "org.apache.commons.math3.userguide.genetics.HelloWorldExample.<staticinit>()",
        "org.apache.commons.math3.userguide.genetics.HelloWorldExample.RandomCharacterMutation.<init>()",
        "org.apache.commons.math3.userguide.genetics.HelloWorldExample.main(String[])$StoppingCondition$1.<init>()",
        "org.apache.commons.math3.genetics.GeneticAlgorithm#GeneticAlgorithm(CrossoverPolicy,double,MutationPolicy,double,SelectionPolicy)",
        "org.apache.commons.math3.genetics.OnePointCrossover.<init>()",
        "org.apache.commons.math3.genetics.TournamentSelection#TournamentSelection(int)",
        "org.apache.commons.math3.genetics.ListPopulation#getFittestChromosome()",
        "org.apache.commons.math3.userguide.genetics.HelloWorldExample.getInitialPopulation()",
        "org.apache.commons.math3.genetics.GeneticAlgorithm#getGenerationsEvolved()",
        "org.apache.commons.math3.genetics.GeneticAlgorithm#evolve(Population,StoppingCondition)"
    ],
    "org.apache.commons.math3.linear.Array2DRowRealMatrix#preMultiply(double[])": [
        "org.apache.commons.math3.exception.DimensionMismatchException#DimensionMismatchException(int,int)",
        "org.apache.commons.math3.linear.Array2DRowRealMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.Array2DRowRealMatrix#getRowDimension()"
    ],
    "org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet.buildBoundary(List<Vector3D>,List<int[]>,double)": [
        "org.apache.commons.math3.geometry.euclidean.threed.Plane#contains(Vector3D)",
        "org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distance(Vector3D,Vector3D)",
        "org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet.successors(List<Vector3D>,List<int[]>,int[][])",
        "org.apache.commons.math3.geometry.euclidean.threed.Vector3D#getZ()",
        "org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet.findReferences(List<Vector3D>,List<int[]>)",
        "org.apache.commons.math3.geometry.euclidean.threed.Vector3D#getY()",
        "org.apache.commons.math3.geometry.euclidean.threed.SubPlane#SubPlane(Hyperplane<Euclidean3D>,Region<Euclidean2D>)",
        "org.apache.commons.math3.geometry.euclidean.threed.Plane#Plane(Vector3D,Vector3D,Vector3D,double)",
        "org.apache.commons.math3.exception.util.LocalizedFormats.<staticinit>()",
        "org.apache.commons.math3.geometry.euclidean.threed.Vector3D#getX()",
        "org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet#PolygonsSet(double,Vector2D[]...)",
        "org.apache.commons.math3.geometry.euclidean.threed.Plane#toSubSpace(Vector<Euclidean3D>)"
    ],
    "org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D.distance1(FieldVector3D<T extends RealFieldElement>,FieldVector3D<T extends RealFieldElement>)": ["org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D#distance1(FieldVector3D<T extends RealFieldElement>)"],
    "org.apache.commons.math3.complex.RootsOfUnity#RootsOfUnity()": ["org.apache.commons.math3.complex.RootsOfUnity.<init>()"],
    "org.apache.commons.math3.dfp.Dfp#acos()": ["org.apache.commons.math3.dfp.DfpMath.acos(Dfp)"],
    "org.apache.commons.math3.optimization.direct.CMAESOptimizer.sequence(double,double,double)": ["org.apache.commons.math3.linear.Array2DRowRealMatrix#Array2DRowRealMatrix(double[][],boolean)"],
    "org.apache.commons.math3.ml.clustering.MultiKMeansPlusPlusClusterer#cluster(Collection<T extends Clusterable>)": [
        "org.apache.commons.math3.ml.clustering.evaluation.ClusterEvaluator#isBetterScore(double,double)",
        "org.apache.commons.math3.ml.clustering.KMeansPlusPlusClusterer#cluster(Collection<T extends Clusterable>)",
        "org.apache.commons.math3.ml.clustering.evaluation.SumOfClusterVariances#score(List<? extends Cluster<T extends Clusterable>>)"
    ],
    "org.apache.commons.math3.geometry.spherical.oned.ArcsSet#getFirstLeaf(BSPTree<Sphere1D>)": [
        "org.apache.commons.math3.geometry.partitioning.BSPTree#getCut()",
        "org.apache.commons.math3.geometry.spherical.oned.ArcsSet#previousInternalNode(BSPTree<Sphere1D>)",
        "org.apache.commons.math3.geometry.spherical.oned.ArcsSet#leafBefore(BSPTree<Sphere1D>)"
    ],
    "org.apache.commons.math3.linear.ArrayFieldVector#setSubVector(int,FieldVector<T extends FieldElement>)": [
        "org.apache.commons.math3.linear.SparseFieldVector#getDimension()",
        "org.apache.commons.math3.linear.ArrayFieldVector#getEntry(int)",
        "org.apache.commons.math3.linear.ArrayFieldVector#getDimension()",
        "org.apache.commons.math3.linear.SparseFieldVector#getEntry(int)",
        "org.apache.commons.math3.linear.ArrayFieldVector#set(int,ArrayFieldVector<T extends FieldElement>)",
        "org.apache.commons.math3.linear.ArrayFieldVector#checkIndex(int)"
    ],
    "org.apache.commons.math3.optimization.direct.BaseAbstractMultivariateVectorOptimizer#BaseAbstractMultivariateVectorOptimizer()": [
        "org.apache.commons.math3.optimization.SimpleVectorValueChecker#SimpleVectorValueChecker()",
        "org.apache.commons.math3.optimization.direct.BaseAbstractMultivariateVectorOptimizer#BaseAbstractMultivariateVectorOptimizer(ConvergenceChecker<PointVectorValuePair>)"
    ],
    "org.apache.commons.math3.analysis.function.HarmonicOscillator#derivative()": [
        "org.apache.commons.math3.analysis.function.Log10#derivative()",
        "org.apache.commons.math3.analysis.function.Power#derivative()",
        "org.apache.commons.math3.analysis.function.Sin#derivative()",
        "org.apache.commons.math3.analysis.function.Exp#derivative()",
        "org.apache.commons.math3.analysis.function.HarmonicOscillator#derivative()",
        "org.apache.commons.math3.analysis.polynomials.PolynomialFunction#derivative()",
        "org.apache.commons.math3.analysis.FunctionUtils.toDifferentiableUnivariateFunction(UnivariateDifferentiableFunction)",
        "org.apache.commons.math3.analysis.function.Logit#derivative()",
        "org.apache.commons.math3.analysis.function.Cbrt#derivative()",
        "org.apache.commons.math3.analysis.FunctionUtils.toDifferentiableUnivariateFunction(UnivariateDifferentiableFunction)$DifferentiableUnivariateFunction$1#derivative()",
        "org.apache.commons.math3.analysis.polynomials.PolynomialSplineFunction#derivative()",
        "org.apache.commons.math3.analysis.function.Cosh#derivative()",
        "org.apache.commons.math3.analysis.function.Identity#derivative()",
        "org.apache.commons.math3.analysis.function.Inverse#derivative()",
        "org.apache.commons.math3.analysis.function.Acosh#derivative()",
        "org.apache.commons.math3.analysis.function.Acos#derivative()",
        "org.apache.commons.math3.analysis.function.Atan#derivative()",
        "org.apache.commons.math3.analysis.function.Log#derivative()",
        "org.apache.commons.math3.analysis.function.Sqrt#derivative()",
        "org.apache.commons.math3.analysis.function.Logistic#derivative()",
        "org.apache.commons.math3.analysis.function.Expm1#derivative()",
        "org.apache.commons.math3.analysis.function.Asinh#derivative()",
        "org.apache.commons.math3.analysis.function.Gaussian#derivative()",
        "org.apache.commons.math3.analysis.function.Sinc#derivative()",
        "org.apache.commons.math3.analysis.function.Sigmoid#derivative()",
        "org.apache.commons.math3.analysis.function.Constant#derivative()",
        "org.apache.commons.math3.analysis.function.Sinh#derivative()",
        "org.apache.commons.math3.analysis.function.Tanh#derivative()",
        "org.apache.commons.math3.analysis.function.Asin#derivative()",
        "org.apache.commons.math3.analysis.function.Minus#derivative()",
        "org.apache.commons.math3.analysis.FunctionUtils.compose(DifferentiableUnivariateFunction[]...)$DifferentiableUnivariateFunction$1#derivative()",
        "org.apache.commons.math3.analysis.FunctionUtils.add(DifferentiableUnivariateFunction[]...)$DifferentiableUnivariateFunction$1#derivative()",
        "org.apache.commons.math3.analysis.FunctionUtils.multiply(DifferentiableUnivariateFunction[]...)$DifferentiableUnivariateFunction$1#derivative()",
        "org.apache.commons.math3.analysis.function.Log1p#derivative()",
        "org.apache.commons.math3.analysis.function.Tan#derivative()",
        "org.apache.commons.math3.analysis.function.Cos#derivative()",
        "org.apache.commons.math3.analysis.function.Atanh#derivative()"
    ],
    "org.apache.commons.math3.optimization.BaseMultivariateVectorMultiStartOptimizer#optimize(int,FUNC extends MultivariateVectorFunction,double[],double[],double[])": [
        "org.apache.commons.math3.random.HaltonSequenceGenerator#nextVector()",
        "org.apache.commons.math3.random.SobolSequenceGenerator#nextVector()",
        "org.apache.commons.math3.optimization.univariate.UnivariateMultiStartOptimizer#getEvaluations()",
        "org.apache.commons.math3.optimization.BaseMultivariateVectorMultiStartOptimizer#sortPairs(double[],double[])",
        "org.apache.commons.math3.optimization.BaseMultivariateMultiStartOptimizer#getEvaluations()",
        "org.apache.commons.math3.userguide.LowDiscrepancyGeneratorComparison.Display#Display()$RandomVectorGenerator$1#nextVector()",
        "org.apache.commons.math3.optimization.direct.BaseAbstractMultivariateVectorOptimizer#getEvaluations()",
        "org.apache.commons.math3.random.UnitSphereRandomVectorGenerator#nextVector()",
        "org.apache.commons.math3.optimization.univariate.BaseAbstractUnivariateOptimizer#getEvaluations()",
        "org.apache.commons.math3.optimization.direct.BaseAbstractMultivariateVectorOptimizer#optimize(int,FUNC extends MultivariateVectorFunction,double[],double[],double[])",
        "org.apache.commons.math3.optimization.BaseMultivariateVectorMultiStartOptimizer#optimize(int,FUNC extends MultivariateVectorFunction,double[],double[],double[])",
        "org.apache.commons.math3.random.CorrelatedRandomVectorGenerator#nextVector()",
        "org.apache.commons.math3.random.UncorrelatedRandomVectorGenerator#nextVector()",
        "org.apache.commons.math3.optimization.direct.BaseAbstractMultivariateOptimizer#getEvaluations()",
        "org.apache.commons.math3.optimization.BaseMultivariateVectorMultiStartOptimizer#getEvaluations()"
    ],
    "org.apache.commons.math3.stat.inference.KolmogorovSmirnovTest#KolmogorovSmirnovTest()": [
        "org.apache.commons.math3.random.Well19937c#Well19937c()",
        "org.apache.commons.math3.stat.inference.KolmogorovSmirnovTest.<init>()"
    ],
    "org.apache.commons.math3.stat.descriptive.SummaryStatistics#setSumImpl(StorelessUnivariateStatistic)": ["org.apache.commons.math3.stat.descriptive.SummaryStatistics#checkEmpty()"],
    "org.apache.commons.math3.distribution.TDistribution#getNumericalVariance()": ["org.apache.commons.math3.distribution.TDistribution#getDegreesOfFreedom()"],
    "org.apache.commons.math3.stat.descriptive.moment.Skewness#Skewness(Skewness)": [
        "org.apache.commons.math3.stat.descriptive.moment.Skewness.copy(Skewness,Skewness)",
        "org.apache.commons.math3.stat.descriptive.AbstractStorelessUnivariateStatistic.<init>()",
        "org.apache.commons.math3.stat.descriptive.moment.Skewness.<init>()"
    ],
    "org.apache.commons.math3.ode.nonstiff.AdamsFieldIntegrator#AdamsFieldIntegrator(Field<T extends RealFieldElement>,String,int,int,double,double,double,double)": [
        "org.apache.commons.math3.ode.nonstiff.AdamsFieldIntegrator.<init>()",
        "org.apache.commons.math3.ode.nonstiff.AdamsNordsieckFieldTransformer.getInstance(Field<T extends RealFieldElement>,int)",
        "org.apache.commons.math3.ode.MultistepFieldIntegrator#MultistepFieldIntegrator(Field<T extends RealFieldElement>,String,int,int,double,double,double,double)"
    ],
    "org.apache.commons.math3.distribution.AbstractIntegerDistribution#AbstractIntegerDistribution()": ["org.apache.commons.math3.distribution.AbstractIntegerDistribution.<init>()"],
    "org.apache.commons.math3.analysis.FunctionUtils.toDifferentiableMultivariateFunction(MultivariateDifferentiableFunction)$MultivariateVectorFunction$1$MultivariateVectorFunction$1#gradient()$MultivariateVectorFunction$1#value(double[])": [
        "org.apache.commons.math3.analysis.differentiation.DerivativeStructure#DerivativeStructure(int,int,int,double)",
        "org.apache.commons.math3.analysis.differentiation.DerivativeStructure#getPartialDerivative(int[]...)",
        "org.apache.commons.math3.analysis.FunctionUtils.toMultivariateDifferentiableFunction(DifferentiableMultivariateFunction)$MultivariateDifferentiableFunction$1#value(DerivativeStructure[])"
    ],
    "org.apache.commons.math3.optimization.fitting.GaussianFitter.ParameterGuesser#sortObservations(WeightedObservedPoint[])$Comparator$1#compare(WeightedObservedPoint,WeightedObservedPoint)": [
        "org.apache.commons.math3.optimization.fitting.WeightedObservedPoint#getWeight()",
        "org.apache.commons.math3.optimization.fitting.WeightedObservedPoint#getY()",
        "org.apache.commons.math3.optimization.fitting.WeightedObservedPoint#getX()"
    ],
    "org.apache.commons.math3.random.ValueServer#getNext()": [
        "org.apache.commons.math3.random.ValueServer#getNextUniform()",
        "org.apache.commons.math3.random.ValueServer#getNextExponential()",
        "org.apache.commons.math3.exception.util.LocalizedFormats.<staticinit>()",
        "org.apache.commons.math3.random.ValueServer#getNextDigest()",
        "org.apache.commons.math3.random.ValueServer#getNextGaussian()",
        "org.apache.commons.math3.random.ValueServer#getNextReplay()",
        "org.apache.commons.math3.random.ValueServer.<staticinit>()"
    ],
    "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer.FitnessFunction#repair(double[])": [
        "org.apache.commons.math3.optim.BaseMultivariateOptimizer#getUpperBound()",
        "org.apache.commons.math3.optim.BaseMultivariateOptimizer#getLowerBound()"
    ],
    "org.apache.commons.math3.analysis.solvers.BaseAbstractUnivariateSolver#incrementEvaluationCount()": [
        "org.apache.commons.math3.util.IntegerSequence.Incrementor#increment()",
        "org.apache.commons.math3.exception.TooManyEvaluationsException#TooManyEvaluationsException(Number)",
        "org.apache.commons.math3.exception.MaxCountExceededException#getMax()"
    ],
    "org.apache.commons.math3.random.SobolSequenceGenerator#SobolSequenceGenerator(int)": [
        "org.apache.commons.math3.exception.MathInternalError#MathInternalError()",
        "org.apache.commons.math3.random.SobolSequenceGenerator#initFromStream(InputStream)",
        "org.apache.commons.math3.random.SobolSequenceGenerator.<init>()",
        "org.apache.commons.math3.random.SobolSequenceGenerator.<staticinit>()"
    ],
    "org.apache.commons.math3.util.IntegerSequence.Range#Range(int,int,int)": ["org.apache.commons.math3.util.IntegerSequence.Range.<init>()"],
    "org.apache.commons.math3.analysis.interpolation.UnivariatePeriodicInterpolator#interpolate(double[],double[])$UnivariateFunction$1#value(double)": [
        "org.apache.commons.math3.analysis.FunctionUtils.multiply(DifferentiableUnivariateFunction[]...)$UnivariateFunction$1$UnivariateFunction$1#derivative()$UnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.polynomials.PolynomialSplineFunction#value(double)",
        "org.apache.commons.math3.analysis.function.Gaussian#value(double)",
        "org.apache.commons.math3.analysis.function.Tanh#value(double)",
        "org.apache.commons.math3.analysis.function.Inverse#value(double)",
        "org.apache.commons.math3.analysis.function.HarmonicOscillator#value(double)",
        "org.apache.commons.math3.util.MathUtils.reduce(double,double,double)",
        "org.apache.commons.math3.analysis.FunctionUtils.fix1stArgument(BivariateFunction,double)$UnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.function.Asin#value(double)",
        "org.apache.commons.math3.analysis.function.Asinh#value(double)",
        "org.apache.commons.math3.analysis.FunctionUtils.multiply(UnivariateFunction[]...)$UnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.function.Atan#value(double)",
        "org.apache.commons.math3.analysis.FunctionUtils.toDifferentiableUnivariateFunction(UnivariateDifferentiableFunction)$DifferentiableUnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.function.Cbrt#value(double)",
        "org.apache.commons.math3.analysis.polynomials.PolynomialFunctionLagrangeForm#value(double)",
        "org.apache.commons.math3.analysis.function.Exp#value(double)",
        "org.apache.commons.math3.special.BesselJ#value(double)",
        "org.apache.commons.math3.analysis.polynomials.PolynomialFunctionNewtonForm#value(double)",
        "org.apache.commons.math3.analysis.FunctionUtils.add(UnivariateFunction[]...)$UnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.function.Sin#value(double)",
        "org.apache.commons.math3.analysis.function.Cos#value(double)",
        "org.apache.commons.math3.analysis.interpolation.UnivariatePeriodicInterpolator#interpolate(double[],double[])$UnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.function.Log10#value(double)",
        "org.apache.commons.math3.analysis.function.Sqrt#value(double)",
        "org.apache.commons.math3.analysis.function.Log#value(double)",
        "org.apache.commons.math3.analysis.function.Sinc#value(double)",
        "org.apache.commons.math3.ode.events.EventState#evaluateStep(StepInterpolator)$UnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.function.Minus#value(double)",
        "org.apache.commons.math3.analysis.integration.IterativeLegendreGaussIntegrator#stage(int)$UnivariateFunction$1#value(double)",
        "org.apache.commons.math3.optimization.general.NonLinearConjugateGradientOptimizer.LineSearchFunction#value(double)",
        "org.apache.commons.math3.analysis.function.Floor#value(double)",
        "org.apache.commons.math3.analysis.FunctionUtils.multiply(DifferentiableUnivariateFunction[]...)$DifferentiableUnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.FunctionUtils.combine(BivariateFunction,UnivariateFunction,UnivariateFunction)$UnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.FunctionUtils.add(DifferentiableUnivariateFunction[]...)$UnivariateFunction$1$UnivariateFunction$1#derivative()$UnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.function.Sinh#value(double)",
        "org.apache.commons.math3.analysis.FunctionUtils.multiply(UnivariateDifferentiableFunction[]...)$UnivariateDifferentiableFunction$1#value(double)",
        "org.apache.commons.math3.analysis.function.Tan#value(double)",
        "org.apache.commons.math3.distribution.AbstractRealDistribution#inverseCumulativeProbability(double)$UnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.FunctionUtils.add(DifferentiableUnivariateFunction[]...)$DifferentiableUnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.function.Ceil#value(double)",
        "org.apache.commons.math3.analysis.function.Logistic#value(double)",
        "org.apache.commons.math3.analysis.function.Signum#value(double)",
        "org.apache.commons.math3.analysis.function.Constant#value(double)",
        "org.apache.commons.math3.analysis.function.Atanh#value(double)",
        "org.apache.commons.math3.analysis.FunctionUtils.compose(DifferentiableUnivariateFunction[]...)$UnivariateFunction$1$UnivariateFunction$1#derivative()$UnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.FunctionUtils.add(UnivariateDifferentiableFunction[]...)$UnivariateDifferentiableFunction$1#value(double)",
        "org.apache.commons.math3.analysis.function.Abs#value(double)",
        "org.apache.commons.math3.analysis.differentiation.FiniteDifferencesDifferentiator#differentiate(UnivariateFunction)$UnivariateDifferentiableFunction$1#value(double)",
        "org.apache.commons.math3.analysis.function.Identity#value(double)",
        "org.apache.commons.math3.analysis.function.Expm1#value(double)",
        "org.apache.commons.math3.analysis.function.Logit#value(double)",
        "org.apache.commons.math3.analysis.function.Log1p#value(double)",
        "org.apache.commons.math3.analysis.FunctionUtils.fix2ndArgument(BivariateFunction,double)$UnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.FunctionUtils.toUnivariateDifferential(DifferentiableUnivariateFunction)$UnivariateDifferentiableFunction$1#value(double)",
        "org.apache.commons.math3.analysis.FunctionUtils.toDifferentiableUnivariateFunction(UnivariateDifferentiableFunction)$UnivariateFunction$1$UnivariateFunction$1#derivative()$UnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.polynomials.PolynomialFunction#value(double)",
        "org.apache.commons.math3.analysis.function.Rint#value(double)",
        "org.apache.commons.math3.analysis.FunctionUtils.compose(UnivariateFunction[]...)$UnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.function.Cosh#value(double)",
        "org.apache.commons.math3.optimization.direct.PowellOptimizer.LineSearch#search(double[],double[])$UnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.FunctionUtils.compose(DifferentiableUnivariateFunction[]...)$DifferentiableUnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.function.Acosh#value(double)",
        "org.apache.commons.math3.analysis.function.StepFunction#value(double)",
        "org.apache.commons.math3.analysis.FunctionUtils.compose(UnivariateDifferentiableFunction[]...)$UnivariateDifferentiableFunction$1#value(double)",
        "org.apache.commons.math3.analysis.function.Acos#value(double)",
        "org.apache.commons.math3.analysis.function.Power#value(double)",
        "org.apache.commons.math3.optim.nonlinear.scalar.LineSearch#search(double[],double[])$UnivariateFunction$1#value(double)",
        "org.apache.commons.math3.analysis.function.Sigmoid#value(double)",
        "org.apache.commons.math3.analysis.function.Ulp#value(double)"
    ],
    "org.apache.commons.math3.optimization.direct.BOBYQAOptimizer.PathIsExploredException#PathIsExploredException()": [
        "org.apache.commons.math3.optimization.direct.BOBYQAOptimizer.PathIsExploredException.<init>()",
        "org.apache.commons.math3.optimization.direct.BOBYQAOptimizer.PathIsExploredException.<staticinit>()",
        "org.apache.commons.math3.optimization.direct.BOBYQAOptimizer.caller(int)"
    ],
    "org.apache.commons.math3.random.MersenneTwister#MersenneTwister()": [
        "org.apache.commons.math3.random.MersenneTwister.<staticinit>()",
        "org.apache.commons.math3.random.BitsStreamGenerator#BitsStreamGenerator()",
        "org.apache.commons.math3.random.MersenneTwister#setSeed(int[])",
        "org.apache.commons.math3.random.MersenneTwister.<init>()"
    ],
    "org.apache.commons.math3.ode.events.FilterType$FilterType$1.<init>()": ["org.apache.commons.math3.ode.events.FilterType.<init>()"],
    "org.apache.commons.math3.linear.BlockRealMatrix#BlockRealMatrix(int,int)": [
        "org.apache.commons.math3.linear.AbstractRealMatrix#AbstractRealMatrix(int,int)",
        "org.apache.commons.math3.linear.BlockRealMatrix.<init>()",
        "org.apache.commons.math3.linear.BlockRealMatrix.createBlocksLayout(int,int)",
        "org.apache.commons.math3.linear.BlockRealMatrix.<staticinit>()"
    ],
    "org.apache.commons.math3.stat.inference.TTest#tTest(double,double,double,double,double,double)": [
        "org.apache.commons.math3.distribution.TDistribution#TDistribution(double,double)",
        "org.apache.commons.math3.util.FastMath.abs(double)",
        "org.apache.commons.math3.distribution.TDistribution#cumulativeProbability(double)",
        "org.apache.commons.math3.stat.inference.TTest#df(double,double,double,double)",
        "org.apache.commons.math3.stat.inference.TTest#t(double,double,double,double,double,double)"
    ],
    "org.apache.commons.math3.dfp.Dfp#multiplyFast(int)": [
        "org.apache.commons.math3.dfp.DfpDec#newInstance(Dfp)",
        "org.apache.commons.math3.dfp.Dfp.<staticinit>()",
        "org.apache.commons.math3.dfp.Dfp#shiftRight()",
        "org.apache.commons.math3.dfp.Dfp#dotrap(int,String,Dfp,Dfp)",
        "org.apache.commons.math3.dfp.Dfp#newInstance(Dfp)",
        "org.apache.commons.math3.dfp.DfpField.<staticinit>()",
        "org.apache.commons.math3.dfp.DfpDec#round(int)",
        "org.apache.commons.math3.dfp.Dfp#round(int)",
        "org.apache.commons.math3.dfp.DfpField#setIEEEFlagsBits(int)",
        "org.apache.commons.math3.dfp.Dfp#isNaN()",
        "org.apache.commons.math3.dfp.Dfp#getZero()"
    ],
    "org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet#iterator()": ["org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet.SubIntervalsIterator#SubIntervalsIterator()"],
    "org.apache.commons.math3.linear.MatrixUtils#MatrixUtils()": ["org.apache.commons.math3.linear.MatrixUtils.<init>()"],
    "org.apache.commons.math3.linear.MatrixUtils.FractionMatrixConverter#getConvertedMatrix()": ["org.apache.commons.math3.linear.Array2DRowRealMatrix#Array2DRowRealMatrix(double[][],boolean)"],
    "org.apache.commons.math3.analysis.function.HarmonicOscillator#value(DerivativeStructure)": [
        "org.apache.commons.math3.util.FastMath.sin(double)",
        "org.apache.commons.math3.analysis.differentiation.DerivativeStructure#getValue()",
        "org.apache.commons.math3.util.FastMath.cos(double)",
        "org.apache.commons.math3.analysis.differentiation.DerivativeStructure#compose(double[]...)",
        "org.apache.commons.math3.analysis.differentiation.DerivativeStructure#getOrder()"
    ],
    "org.apache.commons.math3.stat.correlation.PearsonsCorrelation#PearsonsCorrelation(double[][])": [
        "org.apache.commons.math3.stat.correlation.PearsonsCorrelation#PearsonsCorrelation(RealMatrix)",
        "org.apache.commons.math3.linear.BlockRealMatrix#BlockRealMatrix(double[][])"
    ],
    "org.apache.commons.math3.linear.SparseFieldVector#checkIndices(int,int)": [
        "org.apache.commons.math3.linear.SparseFieldVector#getDimension()",
        "org.apache.commons.math3.exception.util.LocalizedFormats.<staticinit>()"
    ],
    "org.apache.commons.math3.dfp.Dfp#newInstance(Dfp)": [
        "org.apache.commons.math3.dfp.DfpDec#newInstance(Dfp)",
        "org.apache.commons.math3.dfp.Dfp.<staticinit>()",
        "org.apache.commons.math3.dfp.Dfp#dotrap(int,String,Dfp,Dfp)",
        "org.apache.commons.math3.dfp.Dfp#newInstance(Dfp)",
        "org.apache.commons.math3.dfp.DfpField.<staticinit>()",
        "org.apache.commons.math3.dfp.DfpField#setIEEEFlagsBits(int)",
        "org.apache.commons.math3.dfp.DfpField#getRadixDigits()",
        "org.apache.commons.math3.dfp.Dfp#Dfp(Dfp)",
        "org.apache.commons.math3.dfp.Dfp#getZero()"
    ],
    "org.apache.commons.math3.stat.descriptive.SummaryStatistics#SummaryStatistics(SummaryStatistics)": [
        "org.apache.commons.math3.stat.descriptive.SummaryStatistics.copy(SummaryStatistics,SummaryStatistics)",
        "org.apache.commons.math3.stat.descriptive.SummaryStatistics.<init>()"
    ],
    "org.apache.commons.math3.linear.BlockFieldMatrix#setColumnMatrix(int,BlockFieldMatrix<T extends FieldElement>)": [
        "org.apache.commons.math3.linear.BlockFieldMatrix#blockHeight(int)",
        "org.apache.commons.math3.linear.BlockFieldMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.BlockFieldMatrix#blockWidth(int)",
        "org.apache.commons.math3.linear.BlockFieldMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.MatrixDimensionMismatchException#MatrixDimensionMismatchException(int,int,int,int)",
        "org.apache.commons.math3.linear.BlockFieldMatrix.<staticinit>()",
        "org.apache.commons.math3.linear.AbstractFieldMatrix#checkColumnIndex(int)"
    ],
    "org.apache.commons.math3.random.EmpiricalDistribution#inverseCumulativeProbability(double)": [
        "org.apache.commons.math3.distribution.BetaDistribution#cumulativeProbability(double)",
        "org.apache.commons.math3.distribution.ConstantRealDistribution#cumulativeProbability(double)",
        "org.apache.commons.math3.distribution.ExponentialDistribution#inverseCumulativeProbability(double)",
        "org.apache.commons.math3.distribution.LaplaceDistribution#inverseCumulativeProbability(double)",
        "org.apache.commons.math3.random.EmpiricalDistribution#getKernel(SummaryStatistics)",
        "org.apache.commons.math3.distribution.UniformRealDistribution#inverseCumulativeProbability(double)",
        "org.apache.commons.math3.distribution.LaplaceDistribution#cumulativeProbability(double)",
        "org.apache.commons.math3.random.EmpiricalDistribution#inverseCumulativeProbability(double)",
        "org.apache.commons.math3.distribution.EnumeratedRealDistribution#cumulativeProbability(double)",
        "org.apache.commons.math3.distribution.TriangularDistribution#cumulativeProbability(double)",
        "org.apache.commons.math3.distribution.WeibullDistribution#cumulativeProbability(double)",
        "org.apache.commons.math3.distribution.LogisticDistribution#inverseCumulativeProbability(double)",
        "org.apache.commons.math3.distribution.LevyDistribution#inverseCumulativeProbability(double)",
        "org.apache.commons.math3.distribution.LogNormalDistribution#cumulativeProbability(double)",
        "org.apache.commons.math3.random.EmpiricalDistribution#getSupportLowerBound()",
        "org.apache.commons.math3.distribution.FDistribution#cumulativeProbability(double)",
        "org.apache.commons.math3.distribution.NormalDistribution#inverseCumulativeProbability(double)",
        "org.apache.commons.math3.distribution.EnumeratedRealDistribution#inverseCumulativeProbability(double)",
        "org.apache.commons.math3.random.EmpiricalDistribution#kB(int)",
        "org.apache.commons.math3.distribution.AbstractRealDistribution#inverseCumulativeProbability(double)",
        "org.apache.commons.math3.distribution.NormalDistribution#cumulativeProbability(double)",
        "org.apache.commons.math3.distribution.ChiSquaredDistribution#cumulativeProbability(double)",
        "org.apache.commons.math3.random.EmpiricalDistribution#getUpperBounds()",
        "org.apache.commons.math3.distribution.UniformRealDistribution#cumulativeProbability(double)",
        "org.apache.commons.math3.distribution.CauchyDistribution#inverseCumulativeProbability(double)",
        "org.apache.commons.math3.random.EmpiricalDistribution#cumBinP(int)",
        "org.apache.commons.math3.distribution.ParetoDistribution#cumulativeProbability(double)",
        "org.apache.commons.math3.random.EmpiricalDistribution#pB(int)",
        "org.apache.commons.math3.distribution.GumbelDistribution#cumulativeProbability(double)",
        "org.apache.commons.math3.distribution.LevyDistribution#cumulativeProbability(double)",
        "org.apache.commons.math3.distribution.GumbelDistribution#inverseCumulativeProbability(double)",
        "org.apache.commons.math3.random.EmpiricalDistribution#cumulativeProbability(double)",
        "org.apache.commons.math3.random.EmpiricalDistribution#pBminus(int)",
        "org.apache.commons.math3.distribution.TDistribution#cumulativeProbability(double)",
        "org.apache.commons.math3.distribution.LogisticDistribution#cumulativeProbability(double)",
        "org.apache.commons.math3.distribution.ConstantRealDistribution#inverseCumulativeProbability(double)",
        "org.apache.commons.math3.distribution.GammaDistribution#cumulativeProbability(double)",
        "org.apache.commons.math3.distribution.TriangularDistribution#inverseCumulativeProbability(double)",
        "org.apache.commons.math3.distribution.WeibullDistribution#inverseCumulativeProbability(double)",
        "org.apache.commons.math3.distribution.ExponentialDistribution#cumulativeProbability(double)",
        "org.apache.commons.math3.random.EmpiricalDistribution#getSupportUpperBound()",
        "org.apache.commons.math3.distribution.CauchyDistribution#cumulativeProbability(double)",
        "org.apache.commons.math3.distribution.NakagamiDistribution#cumulativeProbability(double)"
    ],
    "org.apache.commons.math3.stat.descriptive.moment.FourthMoment#clear()": ["org.apache.commons.math3.stat.descriptive.moment.ThirdMoment#clear()"],
    "org.apache.commons.math3.ode.nonstiff.EulerStepInterpolator#EulerStepInterpolator(EulerStepInterpolator)": [
        "org.apache.commons.math3.ode.nonstiff.EulerStepInterpolator.<init>()",
        "org.apache.commons.math3.ode.nonstiff.RungeKuttaStepInterpolator#RungeKuttaStepInterpolator(RungeKuttaStepInterpolator)"
    ],
    "org.apache.commons.math3.analysis.differentiation.DerivativeStructure#negate()": ["org.apache.commons.math3.analysis.differentiation.DerivativeStructure#DerivativeStructure(DSCompiler)"],
    "org.apache.commons.math3.distribution.GammaDistribution#density(double)": [
        "org.apache.commons.math3.util.FastMath.pow(double,int)",
        "org.apache.commons.math3.util.FastMath.log1p(double)",
        "org.apache.commons.math3.special.Gamma.<staticinit>()",
        "org.apache.commons.math3.util.FastMath.log(double)",
        "org.apache.commons.math3.util.FastMath.exp(double)"
    ],
    "org.apache.commons.math3.distribution.ParetoDistribution#ParetoDistribution()": ["org.apache.commons.math3.distribution.ParetoDistribution#ParetoDistribution(double,double)"],
    "org.apache.commons.math3.dfp.Dfp#add(Dfp)": [
        "org.apache.commons.math3.dfp.Dfp#complement(int)",
        "org.apache.commons.math3.dfp.Dfp.<staticinit>()",
        "org.apache.commons.math3.dfp.Dfp#dotrap(int,String,Dfp,Dfp)",
        "org.apache.commons.math3.dfp.Dfp#newInstance(Dfp)",
        "org.apache.commons.math3.dfp.Dfp#round(int)",
        "org.apache.commons.math3.dfp.DfpField#getRadixDigits()",
        "org.apache.commons.math3.dfp.Dfp.compare(Dfp,Dfp)",
        "org.apache.commons.math3.dfp.Dfp#isNaN()",
        "org.apache.commons.math3.dfp.Dfp#shiftLeft()",
        "org.apache.commons.math3.dfp.DfpDec#newInstance(Dfp)",
        "org.apache.commons.math3.dfp.Dfp#shiftRight()",
        "org.apache.commons.math3.dfp.DfpField.<staticinit>()",
        "org.apache.commons.math3.dfp.DfpDec#round(int)",
        "org.apache.commons.math3.dfp.Dfp#align(int)",
        "org.apache.commons.math3.dfp.DfpField#setIEEEFlagsBits(int)",
        "org.apache.commons.math3.dfp.Dfp#getZero()"
    ],
    "org.apache.commons.math3.util.FastMath#FastMath()": ["org.apache.commons.math3.util.FastMath.<init>()"],
    "org.apache.commons.math3.ode.nonstiff.ThreeEighthesFieldIntegrator#getC()": [
        "org.apache.commons.math3.ode.AbstractFieldIntegrator#getField()",
        "org.apache.commons.math3.ode.nonstiff.RungeKuttaFieldIntegrator#fraction(int,int)",
        "org.apache.commons.math3.fraction.BigFractionField#getOne()",
        "org.apache.commons.math3.fraction.FractionField#getOne()",
        "org.apache.commons.math3.analysis.differentiation.SparseGradient#getField()$Field$1#getOne()",
        "org.apache.commons.math3.dfp.DfpField#getOne()",
        "org.apache.commons.math3.analysis.differentiation.DerivativeStructure#getField()$Field$1#getOne()",
        "org.apache.commons.math3.util.MathArrays.buildArray(Field<T>,int)",
        "org.apache.commons.math3.util.Decimal64Field#getOne()",
        "org.apache.commons.math3.complex.ComplexField#getOne()",
        "org.apache.commons.math3.util.BigRealField#getOne()"
    ],
    "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.NelderMeadSimplex#NelderMeadSimplex(int,double,double,double,double)": ["org.apache.commons.math3.optim.nonlinear.scalar.noderiv.NelderMeadSimplex#NelderMeadSimplex(int,double,double,double,double,double)"],
    "org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.Vertex#setIncoming(Edge)": [
        "org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.Vertex#bindWith(Line)",
        "org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.Edge#getLine()"
    ],
    "org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D#FieldVector3D(T extends RealFieldElement,FieldVector3D<T extends RealFieldElement>,T extends RealFieldElement,FieldVector3D<T extends RealFieldElement>,T extends RealFieldElement,FieldVector3D<T extends RealFieldElement>,T extends RealFieldElement,FieldVector3D<T extends RealFieldElement>)": [
        "org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D#getZ()",
        "org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D#getY()",
        "org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D.<init>()",
        "org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D#getX()"
    ],
    "org.apache.commons.math3.fraction.FractionFormat.getProperInstance(Locale)": [
        "org.apache.commons.math3.fraction.AbstractFormat.getDefaultNumberFormat(Locale)",
        "org.apache.commons.math3.fraction.ProperFractionFormat#ProperFractionFormat(NumberFormat)"
    ],
    "org.apache.commons.math3.analysis.solvers.UnivariateSolverUtils.verifyInterval(double,double)": ["org.apache.commons.math3.exception.util.LocalizedFormats.<staticinit>()"],
    "org.apache.commons.math3.util.ResizableDoubleArray#expand()": [
        "org.apache.commons.math3.util.FastMath.ceil(double)",
        "org.apache.commons.math3.util.FastMath.round(double)",
        "org.apache.commons.math3.util.ResizableDoubleArray.ExpansionMode.<staticinit>()"
    ],
    "org.apache.commons.math3.analysis.integration.RombergIntegrator#doIntegrate()": [
        "org.apache.commons.math3.analysis.integration.BaseAbstractUnivariateIntegrator#getAbsoluteAccuracy()",
        "org.apache.commons.math3.util.FastMath.abs(double)",
        "org.apache.commons.math3.analysis.integration.BaseAbstractUnivariateIntegrator#getMinimalIterationCount()",
        "org.apache.commons.math3.analysis.integration.BaseAbstractUnivariateIntegrator#getMaximalIterationCount()",
        "org.apache.commons.math3.analysis.integration.TrapezoidIntegrator#TrapezoidIntegrator()",
        "org.apache.commons.math3.analysis.integration.BaseAbstractUnivariateIntegrator#getRelativeAccuracy()",
        "org.apache.commons.math3.analysis.integration.BaseAbstractUnivariateIntegrator#incrementCount()",
        "org.apache.commons.math3.analysis.integration.TrapezoidIntegrator#stage(BaseAbstractUnivariateIntegrator,int)",
        "org.apache.commons.math3.analysis.integration.BaseAbstractUnivariateIntegrator#getIterations()"
    ],
    "org.apache.commons.math3.geometry.euclidean.threed.Line#wholeLine()": [
        "org.apache.commons.math3.geometry.euclidean.threed.SubLine#SubLine(Line,IntervalsSet)",
        "org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet#IntervalsSet(double)"
    ],
    "org.apache.commons.math3.geometry.euclidean.threed.Plane#getOffset(Point<Euclidean3D>)": ["org.apache.commons.math3.geometry.euclidean.threed.Vector3D#dotProduct(Vector<Euclidean3D>)"],
    "org.apache.commons.math3.dfp.Dfp#copySign(double)": ["org.apache.commons.math3.dfp.Dfp#negate()"],
    "org.apache.commons.math3.linear.RealVector#mapDivide(double)": [
        "org.apache.commons.math3.linear.ArrayRealVector#copy()",
        "org.apache.commons.math3.linear.RealVector.unmodifiableRealVector(RealVector)$RealVector$1#mapDivideToSelf(double)",
        "org.apache.commons.math3.linear.RealVector.unmodifiableRealVector(RealVector)$RealVector$1#copy()",
        "org.apache.commons.math3.linear.ArrayRealVector#mapDivideToSelf(double)",
        "org.apache.commons.math3.linear.RealVector#mapDivideToSelf(double)",
        "org.apache.commons.math3.linear.OpenMapRealVector#copy()"
    ],
    "org.apache.commons.math3.optimization.general.AbstractLeastSquaresOptimizer#AbstractLeastSquaresOptimizer()": [
        "org.apache.commons.math3.optimization.direct.BaseAbstractMultivariateVectorOptimizer#BaseAbstractMultivariateVectorOptimizer()",
        "org.apache.commons.math3.optimization.general.AbstractLeastSquaresOptimizer.<init>()"
    ],
    "org.apache.commons.math3.fitting.leastsquares.LeastSquaresFactory.create(MultivariateJacobianFunction,RealVector,RealVector,RealMatrix,ConvergenceChecker<Evaluation>,int,int,boolean,ParameterValidator)": [
        "org.apache.commons.math3.fitting.leastsquares.LeastSquaresFactory.LocalLeastSquaresProblem#LocalLeastSquaresProblem(MultivariateJacobianFunction,RealVector,RealVector,ConvergenceChecker<Evaluation>,int,int,boolean,ParameterValidator)",
        "org.apache.commons.math3.fitting.leastsquares.LeastSquaresFactory.weightMatrix(LeastSquaresProblem,RealMatrix)"
    ],
    "org.apache.commons.math3.random.UniformRandomGenerator#nextNormalizedDouble()": [
        "org.apache.commons.math3.random.SynchronizedRandomGenerator#nextDouble()",
        "org.apache.commons.math3.random.RandomGeneratorFactory.createRandomGenerator(Random)$RandomGenerator$1#nextDouble()",
        "org.apache.commons.math3.random.UniformRandomGenerator.<staticinit>()",
        "org.apache.commons.math3.random.RandomAdaptor#nextDouble()",
        "org.apache.commons.math3.random.BitsStreamGenerator#nextDouble()"
    ],
    "org.apache.commons.math3.analysis.differentiation.SparseGradient#asin()": [
        "org.apache.commons.math3.analysis.differentiation.SparseGradient#SparseGradient(double,double,Map<Integer, Double>)",
        "org.apache.commons.math3.util.FastMath.sqrt(double)",
        "org.apache.commons.math3.util.FastMath.asin(double)"
    ],
    "org.apache.commons.math3.linear.SingularValueDecomposition#getVT()": [
        "org.apache.commons.math3.linear.BlockRealMatrix#transpose()",
        "org.apache.commons.math3.linear.SingularValueDecomposition#getV()",
        "org.apache.commons.math3.linear.AbstractRealMatrix#transpose()"
    ],
    "org.apache.commons.math3.analysis.FunctionUtils.add(UnivariateDifferentiableFunction[]...)": ["org.apache.commons.math3.analysis.FunctionUtils.add(UnivariateDifferentiableFunction[]...)$UnivariateDifferentiableFunction$1.<init>()"],
    "org.apache.commons.math3.linear.AbstractFieldMatrix.buildArray(Field<T extends FieldElement>,int,int)": ["org.apache.commons.math3.util.MathArrays.buildArray(Field<T>,int,int)"],
    "org.apache.commons.math3.geometry.euclidean.threed.Vector3D#dotProduct(Vector<Euclidean3D>)": ["org.apache.commons.math3.util.MathArrays.linearCombination(double,double,double,double,double,double)"],
    "org.apache.commons.math3.linear.AbstractRealMatrix#walkInOptimizedOrder(RealMatrixPreservingVisitor,int,int,int,int)": [
        "org.apache.commons.math3.linear.BlockRealMatrix#walkInRowOrder(RealMatrixPreservingVisitor,int,int,int,int)",
        "org.apache.commons.math3.linear.AbstractRealMatrix#walkInRowOrder(RealMatrixPreservingVisitor,int,int,int,int)",
        "org.apache.commons.math3.linear.Array2DRowRealMatrix#walkInRowOrder(RealMatrixPreservingVisitor,int,int,int,int)"
    ],
    "org.apache.commons.math3.random.RandomDataGenerator#getRandomGenerator()": ["org.apache.commons.math3.random.RandomDataGenerator#initRan()"],
    "org.apache.commons.math3.geometry.euclidean.twod.Vector2D#distance(Vector<Euclidean2D>)": ["org.apache.commons.math3.geometry.euclidean.twod.Vector2D#distance(Point<Euclidean2D>)"],
    "org.apache.commons.math3.distribution.LevyDistribution#density(double)": [
        "org.apache.commons.math3.util.FastMath.<staticinit>()",
        "org.apache.commons.math3.util.FastMath.exp(double)",
        "org.apache.commons.math3.util.FastMath.sqrt(double)"
    ],
    "org.apache.commons.math3.analysis.function.Sinh#derivative()": ["org.apache.commons.math3.analysis.function.Cosh.<init>()"],
    "org.apache.commons.math3.linear.DiagonalMatrix#operate(double[])": [
        "org.apache.commons.math3.linear.DiagonalMatrix#multiply(DiagonalMatrix)",
        "org.apache.commons.math3.linear.DiagonalMatrix#getDataRef()",
        "org.apache.commons.math3.linear.DiagonalMatrix#DiagonalMatrix(double[],boolean)"
    ],
    "org.apache.commons.math3.linear.RRQRDecomposition#getP()": [
        "org.apache.commons.math3.linear.MatrixUtils.createRealMatrix(int,int)",
        "org.apache.commons.math3.linear.BlockRealMatrix#setEntry(int,int,double)",
        "org.apache.commons.math3.linear.OpenMapRealMatrix#setEntry(int,int,double)",
        "org.apache.commons.math3.linear.Array2DRowRealMatrix#setEntry(int,int,double)",
        "org.apache.commons.math3.linear.DiagonalMatrix#setEntry(int,int,double)"
    ],
    "org.apache.commons.math3.analysis.polynomials.PolynomialFunction.evaluate(double[],double)": [
        "org.apache.commons.math3.exception.NoDataException#NoDataException(Localizable)",
        "org.apache.commons.math3.util.MathUtils.checkNotNull(Object)",
        "org.apache.commons.math3.exception.util.LocalizedFormats.<staticinit>()"
    ],
    "org.apache.commons.math3.ode.nonstiff.EulerFieldIntegrator#createInterpolator(boolean,T extends RealFieldElement[][],FieldODEStateAndDerivative<T extends RealFieldElement>,FieldODEStateAndDerivative<T extends RealFieldElement>,FieldEquationsMapper<T extends RealFieldElement>)": [
        "org.apache.commons.math3.ode.AbstractFieldIntegrator#getField()",
        "org.apache.commons.math3.ode.nonstiff.EulerFieldStepInterpolator#EulerFieldStepInterpolator(Field<T extends RealFieldElement>,boolean,T extends RealFieldElement[][],FieldODEStateAndDerivative<T extends RealFieldElement>,FieldODEStateAndDerivative<T extends RealFieldElement>,FieldODEStateAndDerivative<T extends RealFieldElement>,FieldODEStateAndDerivative<T extends RealFieldElement>,FieldEquationsMapper<T extends RealFieldElement>)"
    ],
    "org.apache.commons.math3.transform.FastCosineTransformer#fct(double[])": [
        "org.apache.commons.math3.transform.DftNormalization.<staticinit>()",
        "org.apache.commons.math3.complex.Complex#getReal()",
        "org.apache.commons.math3.transform.FastFourierTransformer#transform(double[],TransformType)",
        "org.apache.commons.math3.util.ArithmeticUtils.isPowerOfTwo(long)",
        "org.apache.commons.math3.complex.Complex#getImaginary()",
        "org.apache.commons.math3.transform.TransformType.<staticinit>()",
        "org.apache.commons.math3.exception.util.LocalizedFormats.<staticinit>()",
        "org.apache.commons.math3.util.FastMath.sin(double)",
        "org.apache.commons.math3.util.FastMath.<staticinit>()",
        "org.apache.commons.math3.transform.FastFourierTransformer#FastFourierTransformer(DftNormalization)",
        "org.apache.commons.math3.util.FastMath.cos(double)"
    ],
    "org.apache.commons.math3.ode.nonstiff.DormandPrince54StepInterpolator#doCopy()": ["org.apache.commons.math3.ode.nonstiff.DormandPrince54StepInterpolator#DormandPrince54StepInterpolator(DormandPrince54StepInterpolator)"],
    "org.apache.commons.math3.linear.BlockRealMatrix#copyBlockPart(double[],int,int,int,int,int,double[],int,int,int)": ["org.apache.commons.math3.linear.BlockRealMatrix.<staticinit>()"],
    "org.apache.commons.math3.ode.JacobianMatrices#setInitialParameterJacobian(String,double[])": [
        "org.apache.commons.math3.ode.JacobianMatrices#checkDimension(int,Object)",
        "org.apache.commons.math3.ode.ParameterConfiguration#getParameterName()",
        "org.apache.commons.math3.ode.ExpandableStatefulODE#setSecondaryState(int,double[])",
        "org.apache.commons.math3.ode.UnknownParameterException#UnknownParameterException(String)"
    ],
    "org.apache.commons.math3.stat.regression.SimpleRegression#getSlopeStdErr()": [
        "org.apache.commons.math3.util.FastMath.sqrt(double)",
        "org.apache.commons.math3.stat.regression.SimpleRegression#getMeanSquareError()"
    ],
    "org.apache.commons.math3.stat.descriptive.MultivariateSummaryStatistics#setMaxImpl(StorelessUnivariateStatistic[])": ["org.apache.commons.math3.stat.descriptive.MultivariateSummaryStatistics#setImpl(StorelessUnivariateStatistic[],StorelessUnivariateStatistic[])"],
    "org.apache.commons.math3.optim.nonlinear.scalar.gradient.NonLinearConjugateGradientOptimizer#NonLinearConjugateGradientOptimizer(Formula,ConvergenceChecker<PointValuePair>,double,double,double,Preconditioner)": [
        "org.apache.commons.math3.optim.nonlinear.scalar.LineSearch#LineSearch(MultivariateOptimizer,double,double,double)",
        "org.apache.commons.math3.optim.nonlinear.scalar.gradient.NonLinearConjugateGradientOptimizer.<init>()",
        "org.apache.commons.math3.optim.nonlinear.scalar.GradientMultivariateOptimizer#GradientMultivariateOptimizer(ConvergenceChecker<PointValuePair>)",
        "org.apache.commons.math3.optim.nonlinear.scalar.gradient.NonLinearConjugateGradientOptimizer.Formula.<staticinit>()"
    ],
    "org.apache.commons.math3.geometry.euclidean.oned.SubOrientedPoint#buildNew(Hyperplane<Euclidean1D>,Region<Euclidean1D>)": ["org.apache.commons.math3.geometry.euclidean.oned.SubOrientedPoint#SubOrientedPoint(Hyperplane<Euclidean1D>,Region<Euclidean1D>)"],
    "org.apache.commons.math3.distribution.NormalDistribution#cumulativeProbability(double,double)": ["org.apache.commons.math3.distribution.NormalDistribution#probability(double,double)"],
    "org.apache.commons.math3.stat.StatUtils.variance(double[])": [
        "org.apache.commons.math3.stat.StatUtils.<staticinit>()",
        "org.apache.commons.math3.stat.descriptive.moment.Variance#evaluate(double[])"
    ],
    "org.apache.commons.math3.complex.Complex#sqrt()": [
        "org.apache.commons.math3.util.FastMath.copySign(double,double)",
        "org.apache.commons.math3.util.FastMath.abs(double)",
        "org.apache.commons.math3.complex.Complex.<staticinit>()",
        "org.apache.commons.math3.complex.Complex#abs()",
        "org.apache.commons.math3.complex.Complex#createComplex(double,double)",
        "org.apache.commons.math3.util.FastMath.sqrt(double)"
    ],
    "org.apache.commons.math3.distribution.UniformRealDistribution#UniformRealDistribution(RandomGenerator,double,double)": [
        "org.apache.commons.math3.distribution.AbstractRealDistribution#AbstractRealDistribution(RandomGenerator)",
        "org.apache.commons.math3.distribution.UniformRealDistribution.<init>()",
        "org.apache.commons.math3.exception.util.LocalizedFormats.<staticinit>()"
    ],
    "org.apache.commons.math3.random.Well19937a#Well19937a()": [
        "org.apache.commons.math3.random.AbstractWell#AbstractWell(int,int,int,int)",
        "org.apache.commons.math3.random.Well19937a.<staticinit>()",
        "org.apache.commons.math3.random.Well19937a.<init>()"
    ],
    "org.apache.commons.math3.analysis.function.Gaussian#value(DerivativeStructure)": [
        "org.apache.commons.math3.util.Precision.<staticinit>()",
        "org.apache.commons.math3.analysis.differentiation.DerivativeStructure#getValue()",
        "org.apache.commons.math3.util.FastMath.exp(double)",
        "org.apache.commons.math3.analysis.differentiation.DerivativeStructure#compose(double[]...)",
        "org.apache.commons.math3.analysis.differentiation.DerivativeStructure#getOrder()"
    ],
    "org.apache.commons.math3.ode.nonstiff.MidpointFieldStepInterpolator#computeInterpolatedStateAndDerivatives(FieldEquationsMapper<T extends RealFieldElement>,T extends RealFieldElement,T extends RealFieldElement,T extends RealFieldElement,T extends RealFieldElement)": [
        "org.apache.commons.math3.ode.nonstiff.RungeKuttaFieldStepInterpolator#currentStateLinearCombination(T extends RealFieldElement[]...)",
        "org.apache.commons.math3.ode.nonstiff.RungeKuttaFieldStepInterpolator#previousStateLinearCombination(T extends RealFieldElement[]...)",
        "org.apache.commons.math3.ode.nonstiff.RungeKuttaFieldStepInterpolator#derivativeLinearCombination(T extends RealFieldElement[]...)",
        "org.apache.commons.math3.ode.sampling.AbstractFieldStepInterpolator#getGlobalPreviousState()",
        "org.apache.commons.math3.ode.FieldODEStateAndDerivative#FieldODEStateAndDerivative(T extends RealFieldElement,T extends RealFieldElement[],T extends RealFieldElement[])"
    ],
    "org.apache.commons.math3.userguide.sofm.ChineseRingsClassifier.printU(String,ChineseRingsClassifier)": [
        "org.apache.commons.math3.userguide.sofm.ChineseRingsClassifier#computeQuantizationError()",
        "org.apache.commons.math3.userguide.sofm.ChineseRingsClassifier#computeTopographicError()",
        "org.apache.commons.math3.userguide.sofm.ChineseRingsClassifier#computeU()"
    ],
    "org.apache.commons.math3.stat.descriptive.MultivariateSummaryStatistics#MultivariateSummaryStatistics(int,boolean)": [
        "org.apache.commons.math3.stat.descriptive.summary.Sum#Sum()",
        "org.apache.commons.math3.stat.descriptive.MultivariateSummaryStatistics.<init>()",
        "org.apache.commons.math3.stat.descriptive.rank.Max#Max()",
        "org.apache.commons.math3.stat.descriptive.summary.SumOfSquares#SumOfSquares()",
        "org.apache.commons.math3.stat.descriptive.moment.VectorialCovariance#VectorialCovariance(int,boolean)",
        "org.apache.commons.math3.stat.descriptive.summary.SumOfLogs#SumOfLogs()",
        "org.apache.commons.math3.stat.descriptive.moment.Mean#Mean()",
        "org.apache.commons.math3.stat.descriptive.rank.Min#Min()",
        "org.apache.commons.math3.stat.descriptive.moment.GeometricMean#GeometricMean()"
    ],
    "org.apache.commons.math3.analysis.differentiation.SparseGradient#pow(SparseGradient)": [
        "org.apache.commons.math3.analysis.differentiation.SparseGradient#exp()",
        "org.apache.commons.math3.analysis.differentiation.SparseGradient#log()",
        "org.apache.commons.math3.analysis.differentiation.SparseGradient#multiply(SparseGradient)"
    ],
    "org.apache.commons.math3.dfp.BracketingNthOrderBrentSolverDFP#solve(int,UnivariateDfpFunction,Dfp,Dfp,Dfp,AllowedSolution)": [
        "org.apache.commons.math3.util.MathUtils.checkNotNull(Object)",
        "org.apache.commons.math3.dfp.BracketingNthOrderBrentSolverDFP#solve(int,UnivariateDfpFunction,Dfp,Dfp,Dfp,AllowedSolution)$RealFieldUnivariateFunction$1.<init>()",
        "org.apache.commons.math3.analysis.solvers.FieldBracketingNthOrderBrentSolver#solve(int,RealFieldUnivariateFunction<T extends RealFieldElement>,T extends RealFieldElement,T extends RealFieldElement,T extends RealFieldElement,AllowedSolution)"
    ],
    "org.apache.commons.math3.ode.FieldEquationsMapper#mapStateAndDerivative(T extends RealFieldElement,T extends RealFieldElement[],T extends RealFieldElement[])": [
        "org.apache.commons.math3.exception.DimensionMismatchException#DimensionMismatchException(int,int)",
        "org.apache.commons.math3.util.MathArrays.buildArray(Field<T>,int,int)",
        "org.apache.commons.math3.ode.FieldEquationsMapper#extractEquationData(int,T extends RealFieldElement[])",
        "org.apache.commons.math3.ode.FieldEquationsMapper#getTotalDimension()",
        "org.apache.commons.math3.ode.FieldEquationsMapper#getNumberOfEquations()",
        "org.apache.commons.math3.ode.FieldODEStateAndDerivative#FieldODEStateAndDerivative(T extends RealFieldElement,T extends RealFieldElement[],T extends RealFieldElement[])",
        "org.apache.commons.math3.ode.FieldODEStateAndDerivative#FieldODEStateAndDerivative(T extends RealFieldElement,T extends RealFieldElement[],T extends RealFieldElement[],T extends RealFieldElement[][],T extends RealFieldElement[][])"
    ],
    "org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D#FieldVector3D(double,FieldVector3D<T extends RealFieldElement>,double,FieldVector3D<T extends RealFieldElement>,double,FieldVector3D<T extends RealFieldElement>,double,FieldVector3D<T extends RealFieldElement>)": [
        "org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D#getZ()",
        "org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D#getY()",
        "org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D#getX()",
        "org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D.<init>()"
    ],
    "org.apache.commons.math3.stat.regression.SimpleRegression#getInterceptStdErr()": [
        "org.apache.commons.math3.stat.regression.SimpleRegression#getMeanSquareError()",
        "org.apache.commons.math3.util.FastMath.sqrt(double)"
    ],
    "org.apache.commons.math3.optimization.SimpleValueChecker#SimpleValueChecker(double,double)": [
        "org.apache.commons.math3.optimization.SimpleValueChecker.<staticinit>()",
        "org.apache.commons.math3.optimization.SimpleValueChecker.<init>()",
        "org.apache.commons.math3.optimization.AbstractConvergenceChecker#AbstractConvergenceChecker(double,double)"
    ],
    "org.apache.commons.math3.geometry.spherical.oned.ArcsSet#isAfterParent(BSPTree<Sphere1D>)": [
        "org.apache.commons.math3.geometry.partitioning.BSPTree#getParent()",
        "org.apache.commons.math3.geometry.spherical.oned.ArcsSet#childAfter(BSPTree<Sphere1D>)"
    ],
    "org.apache.commons.math3.util.Incrementor#Incrementor()": ["org.apache.commons.math3.util.Incrementor#Incrementor(int)"],
    "org.apache.commons.math3.linear.PreconditionedIterativeLinearSolver.checkParameters(RealLinearOperator,RealLinearOperator,RealVector,RealVector)": [
        "org.apache.commons.math3.linear.JacobiPreconditioner#getRowDimension()",
        "org.apache.commons.math3.linear.DiagonalMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.Array2DRowRealMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.OpenMapRealMatrix#getColumnDimension()",
        "org.apache.commons.math3.linear.JacobiPreconditioner#getColumnDimension()",
        "org.apache.commons.math3.linear.OpenMapRealMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.DiagonalMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.JacobiPreconditioner#sqrt()$RealLinearOperator$1#getColumnDimension()",
        "org.apache.commons.math3.linear.NonSquareOperatorException#NonSquareOperatorException(int,int)",
        "org.apache.commons.math3.exception.DimensionMismatchException#DimensionMismatchException(int,int)",
        "org.apache.commons.math3.linear.BlockRealMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.IterativeLinearSolver.checkParameters(RealLinearOperator,RealVector,RealVector)",
        "org.apache.commons.math3.linear.JacobiPreconditioner#sqrt()$RealLinearOperator$1#getRowDimension()",
        "org.apache.commons.math3.linear.Array2DRowRealMatrix#getRowDimension()",
        "org.apache.commons.math3.linear.BlockRealMatrix#getColumnDimension()"
    ],
    "org.apache.commons.math3.random.UniformRandomGenerator#UniformRandomGenerator(RandomGenerator)": ["org.apache.commons.math3.random.UniformRandomGenerator.<init>()"],
    "org.apache.commons.math3.analysis.integration.MidPointIntegrator#MidPointIntegrator(double,double,int,int)": [
        "org.apache.commons.math3.analysis.integration.MidPointIntegrator.<staticinit>()",
        "org.apache.commons.math3.analysis.integration.BaseAbstractUnivariateIntegrator#BaseAbstractUnivariateIntegrator(double,double,int,int)",
        "org.apache.commons.math3.analysis.integration.MidPointIntegrator.<init>()"
    ]
}