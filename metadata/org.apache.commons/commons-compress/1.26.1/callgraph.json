{
    "org.apache.commons.compress.archivers.sevenz.Folder#getUnpackSize()": ["org.apache.commons.compress.archivers.sevenz.Folder#findBindPairForOutStream(int)"],
    "org.apache.commons.compress.harmony.unpack200.NewAttributeBands.UnionCase#addToAttribute(int,NewAttribute)": [
        "org.apache.commons.compress.harmony.unpack200.NewAttributeBands.UnionCase#addToAttribute(int,NewAttribute)",
        "org.apache.commons.compress.harmony.unpack200.NewAttributeBands.Call#addToAttribute(int,NewAttribute)",
        "org.apache.commons.compress.harmony.unpack200.NewAttributeBands.Integral#addToAttribute(int,NewAttribute)",
        "org.apache.commons.compress.harmony.unpack200.NewAttributeBands.Union#addToAttribute(int,NewAttribute)",
        "org.apache.commons.compress.harmony.unpack200.NewAttributeBands.Callable#addToAttribute(int,NewAttribute)",
        "org.apache.commons.compress.harmony.unpack200.NewAttributeBands.Reference#addToAttribute(int,NewAttribute)",
        "org.apache.commons.compress.harmony.unpack200.NewAttributeBands.Replication#addToAttribute(int,NewAttribute)"
    ],
    "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile#writeSingleCodec(SevenZMethodConfiguration,OutputStream)": [
        "org.apache.commons.compress.archivers.sevenz.AES256SHA256Decoder#getOptionsAsProperties(Object)",
        "org.apache.commons.compress.archivers.sevenz.SevenZMethod#getId()",
        "org.apache.commons.compress.compressors.deflate.DeflateCompressorOutputStream#write(int)",
        "org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorOutputStream#write(int)",
        "org.apache.commons.compress.compressors.lzma.LZMACompressorOutputStream#write(int)",
        "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream#write(int)",
        "org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream#write(int)",
        "org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorOutputStream#write(int)",
        "org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream#write(byte[])",
        "org.apache.commons.compress.archivers.sevenz.SevenZMethodConfiguration#getMethod()",
        "org.apache.commons.compress.archivers.sevenz.AbstractCoder#getOptionsAsProperties(Object)",
        "org.apache.commons.compress.archivers.sevenz.LZMA2Decoder#getOptionsAsProperties(Object)",
        "org.apache.commons.compress.archivers.ArchiveOutputStream#write(int)",
        "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.OutputStreamWrapper#write(byte[])",
        "org.apache.commons.compress.archivers.sevenz.AES256SHA256Decoder.AES256SHA256DecoderOutputStream#write(int)",
        "org.apache.commons.compress.archivers.sevenz.LZMADecoder#getOptionsAsProperties(Object)",
        "org.apache.commons.compress.compressors.snappy.SnappyCompressorOutputStream#write(int)",
        "org.apache.commons.compress.archivers.sevenz.Coders.DeflateDecoder.DeflateDecoderOutputStream#write(int)",
        "org.apache.commons.compress.compressors.lz4.BlockLZ4CompressorOutputStream#write(int)",
        "org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream#write(byte[])",
        "org.apache.commons.compress.archivers.sevenz.Coders.DeflateDecoder.DeflateDecoderOutputStream#write(byte[])",
        "org.apache.commons.compress.archivers.sevenz.SevenZMethodConfiguration#getOptions()",
        "org.apache.commons.compress.compressors.xz.XZCompressorOutputStream#write(int)",
        "org.apache.commons.compress.utils.FixedLengthBlockOutputStream#write(int)",
        "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.OutputStreamWrapper#write(int)",
        "org.apache.commons.compress.archivers.sevenz.Coders.findByMethod(SevenZMethod)",
        "org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream#write(int)",
        "org.apache.commons.compress.archivers.sevenz.DeltaDecoder#getOptionsAsProperties(Object)",
        "org.apache.commons.compress.archivers.zip.ZipSplitOutputStream#write(int)",
        "org.apache.commons.compress.compressors.zstandard.ZstdCompressorOutputStream#write(int)",
        "org.apache.commons.compress.archivers.zip.RandomAccessOutputStream#write(int)",
        "org.apache.commons.compress.archivers.zip.ZipSplitOutputStream#write(byte[])"
    ],
    "org.apache.commons.compress.compressors.snappy.SnappyCompressorOutputStream#writeLiteralBlockFourSizeBytes(LiteralBlock,int)": [
        "org.apache.commons.compress.compressors.snappy.SnappyCompressorOutputStream#writeLiteralBlockWithSize(int,int,int,LiteralBlock)",
        "org.apache.commons.compress.compressors.snappy.SnappyCompressorOutputStream.<staticinit>()"
    ],
    "org.apache.commons.compress.harmony.pack200.CpBands#writeCpSignature(OutputStream)": [
        "org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream#write(byte[])",
        "org.apache.commons.compress.archivers.sevenz.Coders.DeflateDecoder.DeflateDecoderOutputStream#write(byte[])",
        "org.apache.commons.compress.harmony.pack200.Codec.<staticinit>()",
        "org.apache.commons.compress.harmony.pack200.BandSet#encodeBandInt(String,int[],BHSDCodec)",
        "org.apache.commons.compress.harmony.pack200.CPSignature#getClasses()",
        "org.apache.commons.compress.harmony.pack200.PackingUtils.log(String)",
        "org.apache.commons.compress.harmony.pack200.CPSignature#getIndexInCpUtf8()",
        "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.OutputStreamWrapper#write(byte[])",
        "org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream#write(byte[])",
        "org.apache.commons.compress.archivers.zip.ZipSplitOutputStream#write(byte[])"
    ],
    "org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream#getBytes(String)": ["org.apache.commons.compress.compressors.gzip.GzipUtils.<staticinit>()"],
    "org.apache.commons.compress.harmony.unpack200.BandSet#parseCPDescriptorReferences(String,InputStream,BHSDCodec,int)": [
        "org.apache.commons.compress.harmony.unpack200.BandSet#decodeBandInt(String,InputStream,BHSDCodec,int)",
        "org.apache.commons.compress.harmony.unpack200.Segment#getCpBands()",
        "org.apache.commons.compress.harmony.unpack200.CpBands#cpNameAndTypeValue(int)"
    ],
    "org.apache.commons.compress.harmony.unpack200.ClassBands#getCallCount(int[][],long[][],int)": [
        "org.apache.commons.compress.harmony.unpack200.AttributeLayout#numBackwardsCallables()",
        "org.apache.commons.compress.harmony.unpack200.AttributeLayoutMap#getAttributeLayout(int,int)"
    ],
    "org.apache.commons.compress.archivers.zip.ZipArchiveEntry#getParseableExtraFieldsNoCopy()": ["org.apache.commons.compress.archivers.zip.ExtraFieldUtils.<staticinit>()"],
    "org.apache.commons.compress.archivers.zip.X000A_NTFS#setCreateJavaTime(Date)": [
        "org.apache.commons.compress.archivers.zip.X000A_NTFS#setCreateTime(ZipEightByteInteger)",
        "org.apache.commons.compress.archivers.zip.X000A_NTFS.dateToZip(Date)"
    ],
    "org.apache.commons.compress.archivers.dump.DumpArchiveInputStream#read(byte[],int,int)": [
        "org.apache.commons.compress.archivers.dump.TapeInputStream#readRecord()",
        "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.parse(byte[])",
        "org.apache.commons.compress.archivers.dump.DumpArchiveUtil.verify(byte[])",
        "org.apache.commons.compress.archivers.dump.DumpArchiveEntry#isSparseRecord(int)",
        "org.apache.commons.compress.archivers.dump.InvalidFormatException#InvalidFormatException()",
        "org.apache.commons.compress.archivers.dump.TapeInputStream#read(byte[],int,int)"
    ],
    "org.apache.commons.compress.harmony.unpack200.bytecode.forms.IMethodRefForm#IMethodRefForm(int,String,int[])": [
        "org.apache.commons.compress.harmony.unpack200.bytecode.forms.ReferenceForm#ReferenceForm(int,String,int[])",
        "org.apache.commons.compress.harmony.unpack200.bytecode.forms.IMethodRefForm.<init>()"
    ],
    "org.apache.commons.compress.archivers.zip.SeekableChannelRandomAccessOutputStream#write(byte[],int,int)": ["org.apache.commons.compress.archivers.zip.ZipIoUtil.writeFully(SeekableByteChannel,ByteBuffer)"],
    "org.apache.commons.compress.compressors.xz.XZUtils.getCompressedFileName(String)": [
        "org.apache.commons.compress.compressors.FileNameUtil#getCompressedFileName(String)",
        "org.apache.commons.compress.compressors.xz.XZUtils.<staticinit>()"
    ],
    "org.apache.commons.compress.harmony.pack200.IcBands#addInnerClass(String,String,String,int)": [
        "org.apache.commons.compress.harmony.pack200.IcBands#getOuter(String)",
        "org.apache.commons.compress.harmony.pack200.IcBands#namesArePredictable(String,String,String)",
        "org.apache.commons.compress.harmony.pack200.IcBands#addToMap(String,IcTuple)",
        "org.apache.commons.compress.harmony.pack200.IcBands.IcTuple#IcTuple(CPClass,int,CPClass,CPUTF8)",
        "org.apache.commons.compress.harmony.pack200.CpBands#getCPUtf8(String)",
        "org.apache.commons.compress.harmony.pack200.CpBands#getCPClass(String)"
    ],
    "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream#setEncoding(Charset)": [
        "org.apache.commons.compress.archivers.zip.ZipEncodingHelper.getZipEncoding(Charset)",
        "org.apache.commons.compress.archivers.zip.ZipEncodingHelper.isUTF8(Charset)"
    ],
    "org.apache.commons.compress.archivers.sevenz.Folder#getOrderedCoders()": ["org.apache.commons.compress.archivers.sevenz.Folder#findBindPairForOutStream(int)"],
    "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream#writeCentralDirectoryInChunks()": [
        "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream#writeCounted(byte[])",
        "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream#createCentralFileHeader(ZipArchiveEntry)"
    ],
    "org.apache.commons.compress.archivers.sevenz.Coders.BCJDecoder#BCJDecoder(FilterOptions)": [
        "org.apache.commons.compress.archivers.sevenz.AbstractCoder.<init>()",
        "org.apache.commons.compress.archivers.sevenz.Coders.BCJDecoder.<init>()"
    ],
    "org.apache.commons.compress.archivers.Lister.<staticinit>()": ["org.apache.commons.compress.archivers.ArchiveStreamFactory.<staticinit>()"],
    "org.apache.commons.compress.harmony.unpack200.bytecode.ByteCode#extractOperands(OperandManager,Segment,int)": [
        "org.apache.commons.compress.harmony.unpack200.bytecode.forms.ShortForm#setByteCodeOperands(ByteCode,OperandManager,int)",
        "org.apache.commons.compress.harmony.unpack200.bytecode.forms.LocalForm#setByteCodeOperands(ByteCode,OperandManager,int)",
        "org.apache.commons.compress.harmony.unpack200.bytecode.forms.MultiANewArrayForm#setByteCodeOperands(ByteCode,OperandManager,int)",
        "org.apache.commons.compress.harmony.unpack200.bytecode.forms.ReferenceForm#setByteCodeOperands(ByteCode,OperandManager,int)",
        "org.apache.commons.compress.harmony.unpack200.bytecode.forms.ByteForm#setByteCodeOperands(ByteCode,OperandManager,int)",
        "org.apache.commons.compress.harmony.unpack200.bytecode.forms.TableSwitchForm#setByteCodeOperands(ByteCode,OperandManager,int)",
        "org.apache.commons.compress.harmony.unpack200.bytecode.forms.WideForm#setByteCodeOperands(ByteCode,OperandManager,int)",
        "org.apache.commons.compress.harmony.unpack200.bytecode.forms.LabelForm#setByteCodeOperands(ByteCode,OperandManager,int)",
        "org.apache.commons.compress.harmony.unpack200.bytecode.forms.NewClassRefForm#setByteCodeOperands(ByteCode,OperandManager,int)",
        "org.apache.commons.compress.harmony.unpack200.bytecode.forms.LookupSwitchForm#setByteCodeOperands(ByteCode,OperandManager,int)",
        "org.apache.commons.compress.harmony.unpack200.bytecode.forms.IMethodRefForm#setByteCodeOperands(ByteCode,OperandManager,int)",
        "org.apache.commons.compress.harmony.unpack200.bytecode.forms.IincForm#setByteCodeOperands(ByteCode,OperandManager,int)",
        "org.apache.commons.compress.harmony.unpack200.bytecode.ByteCode#getByteCodeForm()",
        "org.apache.commons.compress.harmony.unpack200.bytecode.forms.NoArgumentForm#setByteCodeOperands(ByteCode,OperandManager,int)"
    ],
    "org.apache.commons.compress.archivers.tar.TarFile#close()": [
        "org.apache.commons.compress.utils.SeekableInMemoryByteChannel#close()",
        "org.apache.commons.compress.utils.MultiReadOnlySeekableByteChannel#close()"
    ],
    "org.apache.commons.compress.archivers.cpio.CpioArchiveEntry#getRemoteDeviceMaj()": ["org.apache.commons.compress.archivers.cpio.CpioArchiveEntry#checkNewFormat()"],
    "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream#createArchiveEntry(File,String)": ["org.apache.commons.compress.archivers.tar.TarArchiveEntry#TarArchiveEntry(File,String)"],
    "org.apache.commons.compress.archivers.zip.JarMarker#getLocalFileDataLength()": ["org.apache.commons.compress.archivers.zip.JarMarker.<staticinit>()"],
    "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream#BZip2CompressorInputStream(InputStream,boolean)": [
        "org.apache.commons.compress.compressors.CompressorInputStream.<init>()",
        "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream#initBlock()",
        "org.apache.commons.compress.utils.BitInputStream#BitInputStream(InputStream,ByteOrder)",
        "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream#init(boolean)",
        "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.<init>()"
    ],
    "org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStream#readSize()": ["org.apache.commons.compress.utils.ByteUtils.fromLittleEndian(ByteSupplier,int)"],
    "org.apache.commons.compress.harmony.pack200.PopulationCodec#encode(int,int)": ["org.apache.commons.compress.harmony.pack200.Pack200Exception#Pack200Exception(String)"],
    "org.apache.commons.compress.harmony.unpack200.SegmentHeader#parseArchiveSpecialCounts(InputStream)": [
        "org.apache.commons.compress.harmony.unpack200.SegmentOptions#hasSpecialFormats()",
        "org.apache.commons.compress.harmony.pack200.Codec.<staticinit>()",
        "org.apache.commons.compress.harmony.unpack200.SegmentHeader#setAttributeDefinitionCount(long)",
        "org.apache.commons.compress.harmony.unpack200.SegmentHeader#getOptions()",
        "org.apache.commons.compress.harmony.unpack200.SegmentHeader#decodeScalar(String,InputStream,BHSDCodec)"
    ],
    "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.<staticinit>()": ["org.apache.commons.compress.archivers.zip.ZipEncodingHelper.getZipEncoding(Charset)"],
    "org.apache.commons.compress.harmony.unpack200.bytecode.forms.InitMethodReferenceForm#getOffset(OperandManager)": ["org.apache.commons.compress.harmony.unpack200.bytecode.OperandManager#nextInitRef()"],
    "org.apache.commons.compress.utils.FixedLengthBlockOutputStream#write(ByteBuffer)": [
        "org.apache.commons.compress.utils.FixedLengthBlockOutputStream#isOpen()",
        "org.apache.commons.compress.utils.FixedLengthBlockOutputStream.BufferAtATimeOutputChannel#write(ByteBuffer)",
        "org.apache.commons.compress.utils.FixedLengthBlockOutputStream#write(ByteBuffer)",
        "org.apache.commons.compress.utils.FixedLengthBlockOutputStream#writeBlock()"
    ],
    "org.apache.commons.compress.archivers.ar.ArArchiveInputStream#asLong(byte[],int,int)": [
        "org.apache.commons.compress.utils.ArchiveUtils.toAsciiString(byte[],int,int)",
        "org.apache.commons.compress.utils.ParsingUtils.parseLongValue(String)"
    ],
    "org.apache.commons.compress.archivers.zip.X000A_NTFS#setModifyJavaTime(Date)": [
        "org.apache.commons.compress.archivers.zip.X000A_NTFS.dateToZip(Date)",
        "org.apache.commons.compress.archivers.zip.X000A_NTFS#setModifyTime(ZipEightByteInteger)"
    ],
    "org.apache.commons.compress.harmony.pack200.CpBands#finaliseBands()": [
        "org.apache.commons.compress.harmony.pack200.SegmentHeader#setCp_Double_count(int)",
        "org.apache.commons.compress.harmony.pack200.SegmentHeader#setCp_Utf8_count(int)",
        "org.apache.commons.compress.harmony.pack200.CpBands#addCPUtf8(String)",
        "org.apache.commons.compress.harmony.pack200.SegmentHeader#setCp_Method_count(int)",
        "org.apache.commons.compress.harmony.pack200.SegmentHeader#setCp_Descr_count(int)",
        "org.apache.commons.compress.harmony.pack200.CpBands#removeSignaturesFromCpUTF8()",
        "org.apache.commons.compress.harmony.pack200.SegmentHeader#setCp_Imethod_count(int)",
        "org.apache.commons.compress.harmony.pack200.SegmentHeader#setCp_Int_count(int)",
        "org.apache.commons.compress.harmony.pack200.CpBands#addIndices()",
        "org.apache.commons.compress.harmony.pack200.SegmentHeader#setCp_Field_count(int)",
        "org.apache.commons.compress.harmony.pack200.SegmentHeader#setCp_Class_count(int)",
        "org.apache.commons.compress.harmony.pack200.SegmentHeader#setCp_Float_count(int)",
        "org.apache.commons.compress.harmony.pack200.SegmentHeader#setCp_String_count(int)",
        "org.apache.commons.compress.harmony.pack200.SegmentHeader#setCp_Long_count(int)",
        "org.apache.commons.compress.harmony.pack200.SegmentHeader#setCp_Signature_count(int)"
    ],
    "org.apache.commons.compress.harmony.unpack200.BandSet#parseCPIntReferences(String,InputStream,BHSDCodec,int)": [
        "org.apache.commons.compress.harmony.unpack200.CpBands#getCpInt()",
        "org.apache.commons.compress.harmony.unpack200.CpBands#cpIntegerValue(int)",
        "org.apache.commons.compress.harmony.unpack200.Segment#getCpBands()",
        "org.apache.commons.compress.harmony.pack200.Pack200Exception#Pack200Exception(String)",
        "org.apache.commons.compress.harmony.unpack200.BandSet#decodeBandInt(String,InputStream,BHSDCodec,int)"
    ],
    "org.apache.commons.compress.harmony.unpack200.MetadataBandGroup#MetadataBandGroup(String,CpBands)": ["org.apache.commons.compress.harmony.unpack200.MetadataBandGroup.<init>()"],
    "org.apache.commons.compress.harmony.unpack200.bytecode.ClassFileEntry#getNestedClassFileEntries()": ["org.apache.commons.compress.harmony.unpack200.bytecode.ClassFileEntry.<staticinit>()"],
    "org.apache.commons.compress.archivers.zip.X000A_NTFS#getAccessFileTime()": ["org.apache.commons.compress.archivers.zip.X000A_NTFS.zipToFileTime(ZipEightByteInteger)"],
    "org.apache.commons.compress.harmony.unpack200.Archive#setQuiet(boolean)": ["org.apache.commons.compress.harmony.unpack200.Segment.<staticinit>()"],
    "org.apache.commons.compress.archivers.zip.ZipIoUtil#ZipIoUtil()": ["org.apache.commons.compress.archivers.zip.ZipIoUtil.<init>()"],
    "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile#setContentMethods(Iterable<? extends SevenZMethodConfiguration>)": [
        "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.reverse(Iterable<T>)",
        "org.apache.commons.compress.archivers.sevenz.SevenZMethod.<staticinit>()"
    ],
    "org.apache.commons.compress.archivers.zip.NioZipEncoding#newDecoder()": ["org.apache.commons.compress.archivers.zip.NioZipEncoding.<staticinit>()"],
    "org.apache.commons.compress.harmony.unpack200.Pack200UnpackerAdapter.newBoundedInputStream(URL)": ["org.apache.commons.compress.harmony.unpack200.Pack200UnpackerAdapter.newBoundedInputStream(URL)"],
    "org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream#writeHeader(GzipParameters)": [
        "org.apache.commons.compress.compressors.gzip.GzipParameters#getFileName()",
        "org.apache.commons.compress.compressors.deflate.DeflateCompressorOutputStream#write(int)",
        "org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream#getBytes(String)",
        "org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorOutputStream#write(int)",
        "org.apache.commons.compress.compressors.lzma.LZMACompressorOutputStream#write(int)",
        "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream#write(int)",
        "org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream#write(int)",
        "org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorOutputStream#write(int)",
        "org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream#write(byte[])",
        "org.apache.commons.compress.archivers.ArchiveOutputStream#write(int)",
        "org.apache.commons.compress.compressors.gzip.GzipParameters#getModificationTime()",
        "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.OutputStreamWrapper#write(byte[])",
        "org.apache.commons.compress.archivers.sevenz.AES256SHA256Decoder.AES256SHA256DecoderOutputStream#write(int)",
        "org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream.<staticinit>()",
        "org.apache.commons.compress.compressors.snappy.SnappyCompressorOutputStream#write(int)",
        "org.apache.commons.compress.archivers.sevenz.Coders.DeflateDecoder.DeflateDecoderOutputStream#write(int)",
        "org.apache.commons.compress.compressors.lz4.BlockLZ4CompressorOutputStream#write(int)",
        "org.apache.commons.compress.compressors.gzip.GzipParameters#getComment()",
        "org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream#write(byte[])",
        "org.apache.commons.compress.archivers.sevenz.Coders.DeflateDecoder.DeflateDecoderOutputStream#write(byte[])",
        "org.apache.commons.compress.compressors.xz.XZCompressorOutputStream#write(int)",
        "org.apache.commons.compress.utils.FixedLengthBlockOutputStream#write(int)",
        "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.OutputStreamWrapper#write(int)",
        "org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream#write(int)",
        "org.apache.commons.compress.compressors.gzip.GzipParameters#getOperatingSystem()",
        "org.apache.commons.compress.archivers.zip.ZipSplitOutputStream#write(int)",
        "org.apache.commons.compress.compressors.zstandard.ZstdCompressorOutputStream#write(int)",
        "org.apache.commons.compress.archivers.zip.RandomAccessOutputStream#write(int)",
        "org.apache.commons.compress.compressors.gzip.GzipParameters#getCompressionLevel()",
        "org.apache.commons.compress.archivers.zip.ZipSplitOutputStream#write(byte[])"
    ],
    "org.apache.commons.compress.MemoryLimitException#MemoryLimitException(long,int,Exception)": [
        "org.apache.commons.compress.MemoryLimitException.<init>()",
        "org.apache.commons.compress.MemoryLimitException.buildMessage(long,int)"
    ],
    "org.apache.commons.compress.compressors.lz4.BlockLZ4CompressorOutputStream.Pair.lengths(int,int)": ["org.apache.commons.compress.compressors.lz4.BlockLZ4CompressorInputStream.<staticinit>()"],
    "org.apache.commons.compress.harmony.unpack200.bytecode.NewAttribute.BCLength#BCLength(int)": [
        "org.apache.commons.compress.harmony.unpack200.bytecode.NewAttribute.BCLength.<init>()",
        "org.apache.commons.compress.harmony.unpack200.bytecode.NewAttribute.AbstractBcValue.<init>()"
    ],
    "org.apache.commons.compress.archivers.zip.ZipArchiveEntry#setCentralDirectoryExtra(byte[])": [
        "org.apache.commons.compress.archivers.zip.ZipArchiveEntry#parseExtraFields(byte[],boolean,ExtraFieldParsingBehavior)",
        "org.apache.commons.compress.archivers.zip.ZipArchiveEntry#mergeExtraFields(ZipExtraField[],boolean)",
        "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.ExtraFieldParsingMode.<staticinit>()"
    ],
    "org.apache.commons.compress.archivers.arj.ArjArchiveInputStream#ArjArchiveInputStream(InputStream)": [
        "org.apache.commons.compress.archivers.arj.ArjArchiveInputStream.<staticinit>()",
        "org.apache.commons.compress.archivers.arj.ArjArchiveInputStream#ArjArchiveInputStream(InputStream,String)"
    ],
    "org.apache.commons.compress.compressors.CompressorStreamFactory.putAll(Set<String>,CompressorStreamProvider,TreeMap<String, CompressorStreamProvider>)": ["org.apache.commons.compress.compressors.CompressorStreamFactory.toKey(String)"],
    "org.apache.commons.compress.harmony.pack200.Archive#splitIntoSegments(List<PackingFile>)": [
        "org.apache.commons.compress.harmony.pack200.Archive.SegmentUnit#SegmentUnit(List<Pack200ClassReader>,List<PackingFile>)",
        "org.apache.commons.compress.harmony.pack200.PackingOptions#getSegmentLimit()",
        "org.apache.commons.compress.harmony.pack200.Archive#estimateSize(PackingFile)",
        "org.apache.commons.compress.harmony.pack200.Archive#addJarEntry(PackingFile,List<Pack200ClassReader>,List<PackingFile>)"
    ],
    "org.apache.commons.compress.compressors.deflate64.HuffmanDecoder.HuffmanCodes#HuffmanCodes(HuffmanState,int[],int[])": [
        "org.apache.commons.compress.compressors.deflate64.HuffmanDecoder.DecoderState.<init>()",
        "org.apache.commons.compress.compressors.deflate64.HuffmanDecoder.buildTree(int[])",
        "org.apache.commons.compress.compressors.deflate64.HuffmanDecoder.HuffmanCodes.<init>()"
    ],
    "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream#TarArchiveOutputStream(OutputStream,int,String)": [
        "org.apache.commons.compress.utils.FixedLengthBlockOutputStream#FixedLengthBlockOutputStream(OutputStream,int)",
        "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.<staticinit>()",
        "org.apache.commons.compress.archivers.ArchiveOutputStream.<init>()",
        "org.apache.commons.compress.archivers.zip.ZipEncodingHelper.getZipEncoding(String)",
        "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.<init>()"
    ],
    "org.apache.commons.compress.archivers.jar.JarArchiveOutputStream#putArchiveEntry(ZipArchiveEntry)": [
        "org.apache.commons.compress.archivers.zip.ZipArchiveEntry#addAsFirstExtraField(ZipExtraField)",
        "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream#putArchiveEntry(ZipArchiveEntry)",
        "org.apache.commons.compress.archivers.zip.JarMarker.getInstance()"
    ],
    "org.apache.commons.compress.compressors.snappy.SnappyCompressorOutputStream#SnappyCompressorOutputStream(OutputStream,long)": [
        "org.apache.commons.compress.compressors.snappy.SnappyCompressorOutputStream#SnappyCompressorOutputStream(OutputStream,long,int)",
        "org.apache.commons.compress.compressors.snappy.SnappyCompressorInputStream.<staticinit>()"
    ],
    "org.apache.commons.compress.archivers.ArchiveStreamFactory.putAll(Set<String>,ArchiveStreamProvider,TreeMap<String, ArchiveStreamProvider>)": ["org.apache.commons.compress.archivers.ArchiveStreamFactory.toKey(String)"],
    "org.apache.commons.compress.harmony.unpack200.NewAttributeBands.Callable#Callable(List<LayoutElement>)": ["org.apache.commons.compress.harmony.unpack200.NewAttributeBands.Callable.<init>()"],
    "org.apache.commons.compress.harmony.pack200.Segment.SegmentMethodVisitor#visitTableSwitchInsn(int,int,Label,Label[]...)": ["org.apache.commons.compress.harmony.pack200.BcBands#visitTableSwitchInsn(int,int,Label,Label[]...)"],
    "org.apache.commons.compress.harmony.unpack200.bytecode.CodeAttribute#toString()": ["org.apache.commons.compress.harmony.unpack200.bytecode.CodeAttribute#getLength()"],
    "org.apache.commons.compress.archivers.zip.X000A_NTFS#setCreateFileTime(FileTime)": [
        "org.apache.commons.compress.archivers.zip.X000A_NTFS#setCreateTime(ZipEightByteInteger)",
        "org.apache.commons.compress.archivers.zip.X000A_NTFS.fileTimeToZip(FileTime)"
    ],
    "org.apache.commons.compress.compressors.snappy.SnappyCompressorOutputStream#finish()": ["org.apache.commons.compress.compressors.lz77support.LZ77Compressor#finish()"],
    "org.apache.commons.compress.harmony.pack200.CpBands#getCPSignature(String)": [
        "org.apache.commons.compress.harmony.pack200.CPSignature#CPSignature(String,CPUTF8,List<CPClass>)",
        "org.apache.commons.compress.harmony.pack200.CpBands#removeCpUtf8(String)",
        "org.apache.commons.compress.harmony.pack200.CPClass#CPClass(CPUTF8)",
        "org.apache.commons.compress.harmony.pack200.CpBands#getCPUtf8(String)"
    ],
    "org.apache.commons.compress.archivers.sevenz.SevenZFile#buildDecoderStack(Folder,long,int,SevenZArchiveEntry)$FilterInputStream$1#read(byte[],int,int)": [
        "org.apache.commons.compress.compressors.zstandard.ZstdCompressorInputStream#read(byte[],int,int)",
        "org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorInputStream#read(byte[],int,int)",
        "org.apache.commons.compress.archivers.sevenz.BoundedSeekableByteChannelInputStream#read(byte[],int,int)",
        "org.apache.commons.compress.compressors.deflate64.Deflate64CompressorInputStream#read(byte[],int,int)",
        "org.apache.commons.compress.compressors.brotli.BrotliCompressorInputStream#read(byte[],int,int)",
        "org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream#read(byte[],int,int)",
        "org.apache.commons.compress.archivers.sevenz.AES256SHA256Decoder.AES256SHA256DecoderInputStream#read(byte[],int,int)",
        "org.apache.commons.compress.compressors.lzma.LZMACompressorInputStream#read(byte[],int,int)",
        "org.apache.commons.compress.compressors.lz4.BlockLZ4CompressorInputStream#read(byte[],int,int)",
        "org.apache.commons.compress.compressors.snappy.SnappyCompressorInputStream#read(byte[],int,int)",
        "org.apache.commons.compress.compressors.xz.XZCompressorInputStream#read(byte[],int,int)",
        "org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream#read(byte[],int,int)",
        "org.apache.commons.compress.utils.BoundedArchiveInputStream#read(byte[],int,int)",
        "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream#read(byte[],int,int)",
        "org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStream#read(byte[],int,int)",
        "org.apache.commons.compress.compressors.lzw.LZWInputStream#read(byte[],int,int)",
        "org.apache.commons.compress.archivers.sevenz.SevenZFile#buildDecoderStack(Folder,long,int,SevenZArchiveEntry)$FilterInputStream$1#count(int)",
        "org.apache.commons.compress.compressors.deflate.DeflateCompressorInputStream#read(byte[],int,int)"
    ],
    "org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream#skip(long)": [
        "org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream#read(byte[],int,int)",
        "org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream#ensureOpen()"
    ],
    "org.apache.commons.compress.PasswordRequiredException#PasswordRequiredException(String)": ["org.apache.commons.compress.PasswordRequiredException.<init>()"],
    "org.apache.commons.compress.harmony.unpack200.bytecode.forms.IincForm#setByteCodeOperands(ByteCode,OperandManager,int)": [
        "org.apache.commons.compress.harmony.unpack200.bytecode.ByteCode#setOperandBytes(int[])",
        "org.apache.commons.compress.harmony.unpack200.bytecode.OperandManager#nextLocal()",
        "org.apache.commons.compress.harmony.unpack200.bytecode.OperandManager#nextByte()"
    ],
    "org.apache.commons.compress.archivers.sevenz.Coders.addEncoder(OutputStream,SevenZMethod,Object)": [
        "org.apache.commons.compress.archivers.sevenz.LZMA2Decoder#encode(OutputStream,Object)",
        "org.apache.commons.compress.archivers.sevenz.LZMADecoder#encode(OutputStream,Object)",
        "org.apache.commons.compress.archivers.sevenz.Coders.findByMethod(SevenZMethod)",
        "org.apache.commons.compress.archivers.sevenz.Coders.DeflateDecoder#encode(OutputStream,Object)",
        "org.apache.commons.compress.archivers.sevenz.Coders.BCJDecoder#encode(OutputStream,Object)",
        "org.apache.commons.compress.archivers.sevenz.AES256SHA256Decoder#encode(OutputStream,Object)",
        "org.apache.commons.compress.archivers.sevenz.Coders.CopyDecoder#encode(OutputStream,Object)",
        "org.apache.commons.compress.archivers.sevenz.DeltaDecoder#encode(OutputStream,Object)",
        "org.apache.commons.compress.archivers.sevenz.Coders.BZIP2Decoder#encode(OutputStream,Object)",
        "org.apache.commons.compress.archivers.sevenz.AbstractCoder#encode(OutputStream,Object)"
    ],
    "org.apache.commons.compress.archivers.tar.TarArchiveInputStream#getLongNameData()": ["org.apache.commons.compress.archivers.tar.TarArchiveInputStream#getNextEntry()"],
    "org.apache.commons.compress.archivers.zip.ZipFile#positionAtCentralDirectory64()": [
        "org.apache.commons.compress.utils.IOUtils.readFully(ReadableByteChannel,ByteBuffer)",
        "org.apache.commons.compress.archivers.zip.ZipFile.<staticinit>()",
        "org.apache.commons.compress.archivers.zip.ZipEightByteInteger.getLongValue(byte[])",
        "org.apache.commons.compress.archivers.zip.ZipLong.getValue(byte[])",
        "org.apache.commons.compress.utils.SeekableInMemoryByteChannel#position(long)",
        "org.apache.commons.compress.archivers.zip.ZipFile#skipBytes(int)",
        "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.<staticinit>()",
        "org.apache.commons.compress.utils.MultiReadOnlySeekableByteChannel#position(long,long)",
        "org.apache.commons.compress.utils.MultiReadOnlySeekableByteChannel#position(long)",
        "org.apache.commons.compress.archivers.zip.ZipConstants.<staticinit>()"
    ],
    "org.apache.commons.compress.harmony.unpack200.CpBands#parseCpDouble(InputStream)": [
        "org.apache.commons.compress.harmony.pack200.Codec.<staticinit>()",
        "org.apache.commons.compress.harmony.unpack200.BandSet#parseFlags(String,InputStream,int,BHSDCodec,BHSDCodec)",
        "org.apache.commons.compress.harmony.unpack200.SegmentHeader#getCpDoubleCount()"
    ],
    "org.apache.commons.compress.archivers.zip.StreamCompressor.ScatterGatherBackingStoreCompressor#ScatterGatherBackingStoreCompressor(Deflater,ScatterGatherBackingStore)": [
        "org.apache.commons.compress.archivers.zip.StreamCompressor.ScatterGatherBackingStoreCompressor.<init>()",
        "org.apache.commons.compress.archivers.zip.StreamCompressor#StreamCompressor(Deflater)"
    ],
    "org.apache.commons.compress.harmony.pack200.CPLong#CPLong(long)": [
        "org.apache.commons.compress.harmony.pack200.CPConstant.<init>()",
        "org.apache.commons.compress.harmony.pack200.CPLong.<init>()"
    ],
    "org.apache.commons.compress.archivers.dump.DumpArchiveInputStream#getBytesRead()": ["org.apache.commons.compress.archivers.dump.TapeInputStream#getBytesRead()"],
    "org.apache.commons.compress.java.util.jar.Pack200#Pack200()": ["org.apache.commons.compress.java.util.jar.Pack200.<init>()"],
    "org.apache.commons.compress.compressors.lz77support.AbstractLZ77CompressorInputStream#readBackReference(byte[],int,int)": [
        "org.apache.commons.compress.compressors.lz77support.AbstractLZ77CompressorInputStream#tryToCopy(int)",
        "org.apache.commons.compress.compressors.lz77support.AbstractLZ77CompressorInputStream#available()",
        "org.apache.commons.compress.compressors.lz77support.AbstractLZ77CompressorInputStream#readFromBuffer(byte[],int,int)"
    ],
    "org.apache.commons.compress.archivers.ArchiveStreamProvider#createArchiveInputStream(String,InputStream,String)": ["org.apache.commons.compress.archivers.ArchiveStreamFactory.<staticinit>()"],
    "org.apache.commons.compress.archivers.zip.ZipLong.putLong(long,byte[],int)": ["org.apache.commons.compress.utils.ByteUtils.toLittleEndian(byte[],long,int,int)"],
    "org.apache.commons.compress.archivers.arj.ArjArchiveEntry#ArjArchiveEntry(LocalFileHeader)": ["org.apache.commons.compress.archivers.arj.ArjArchiveEntry.<init>()"],
    "org.apache.commons.compress.archivers.tar.TarUtils.parseSparse(byte[],int)": [
        "org.apache.commons.compress.archivers.tar.TarArchiveStructSparse#TarArchiveStructSparse(long,long)",
        "org.apache.commons.compress.archivers.tar.TarUtils.parseOctalOrBinary(byte[],int,int)",
        "org.apache.commons.compress.archivers.tar.TarConstants.<staticinit>()"
    ],
    "org.apache.commons.compress.harmony.unpack200.bytecode.NewAttribute#getNestedClassFileEntries()": ["org.apache.commons.compress.harmony.unpack200.bytecode.Attribute#getAttributeName()"],
    "org.apache.commons.compress.archivers.zip.X000A_NTFS#setCreateTime(ZipEightByteInteger)": ["org.apache.commons.compress.archivers.zip.ZipEightByteInteger.<staticinit>()"],
    "org.apache.commons.compress.archivers.dump.TapeInputStream#peek()": [
        "org.apache.commons.compress.archivers.dump.TapeInputStream#readBlock(boolean)",
        "org.apache.commons.compress.archivers.dump.TapeInputStream.<staticinit>()"
    ],
    "org.apache.commons.compress.archivers.tar.TarFile#applyPaxHeadersToCurrentEntry(Map<String, String>,List<TarArchiveStructSparse>)": [
        "org.apache.commons.compress.archivers.tar.TarArchiveEntry#setSparseHeaders(List<TarArchiveStructSparse>)",
        "org.apache.commons.compress.archivers.tar.TarArchiveEntry#updateEntryFromPaxHeaders(Map<String, String>)"
    ],
    "org.apache.commons.compress.archivers.cpio.CpioArchiveEntry#isRegularFile()": [
        "org.apache.commons.compress.archivers.cpio.CpioUtil.fileType(long)",
        "org.apache.commons.compress.archivers.cpio.CpioConstants.<staticinit>()"
    ],
    "org.apache.commons.compress.harmony.unpack200.IcTuple#hashCode()": ["org.apache.commons.compress.harmony.unpack200.IcTuple#generateHashCode()"],
    "org.apache.commons.compress.harmony.pack200.SegmentHeader#writeArchiveSpecialCounts(OutputStream)": [
        "org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream#write(byte[])",
        "org.apache.commons.compress.archivers.sevenz.Coders.DeflateDecoder.DeflateDecoderOutputStream#write(byte[])",
        "org.apache.commons.compress.harmony.pack200.Codec.<staticinit>()",
        "org.apache.commons.compress.harmony.pack200.BandSet#encodeScalar(int,BHSDCodec)",
        "org.apache.commons.compress.harmony.pack200.IntList#size()",
        "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.OutputStreamWrapper#write(byte[])",
        "org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream#write(byte[])",
        "org.apache.commons.compress.archivers.zip.ZipSplitOutputStream#write(byte[])"
    ],
    "org.apache.commons.compress.archivers.arj.ArjArchiveInputStream#read8(DataInputStream)": ["org.apache.commons.compress.archivers.ArchiveInputStream#count(int)"],
    "org.apache.commons.compress.harmony.unpack200.bytecode.SourceFileAttribute#SourceFileAttribute(CPUTF8)": [
        "org.apache.commons.compress.harmony.unpack200.bytecode.Attribute#Attribute(CPUTF8)",
        "org.apache.commons.compress.harmony.unpack200.bytecode.SourceFileAttribute.<init>()",
        "org.apache.commons.compress.harmony.unpack200.bytecode.SourceFileAttribute.<staticinit>()"
    ],
    "org.apache.commons.compress.archivers.zip.InflaterInputStreamWithStatistics#InflaterInputStreamWithStatistics(InputStream)": ["org.apache.commons.compress.archivers.zip.InflaterInputStreamWithStatistics.<init>()"],
    "org.apache.commons.compress.compressors.z.ZCompressorInputStream.matches(byte[],int)": ["org.apache.commons.compress.compressors.z.ZCompressorInputStream.<staticinit>()"],
    "org.apache.commons.compress.archivers.zip.AsiExtraField#parseFromLocalFileData(byte[],int,int)": [
        "org.apache.commons.compress.archivers.zip.ZipShort.getValue(byte[],int)",
        "org.apache.commons.compress.archivers.zip.UnixStat.<staticinit>()",
        "org.apache.commons.compress.archivers.zip.ZipLong.getValue(byte[],int)",
        "org.apache.commons.compress.archivers.zip.AsiExtraField.<staticinit>()",
        "org.apache.commons.compress.archivers.zip.AsiExtraField#setDirectory(boolean)",
        "org.apache.commons.compress.archivers.zip.ZipConstants.<staticinit>()",
        "org.apache.commons.compress.archivers.zip.AsiExtraField#setMode(int)"
    ],
    "org.apache.commons.compress.harmony.unpack200.CpBands#parseCpString(InputStream)": [
        "org.apache.commons.compress.harmony.unpack200.BandSet#decodeBandInt(String,InputStream,BHSDCodec,int)",
        "org.apache.commons.compress.harmony.pack200.Codec.<staticinit>()",
        "org.apache.commons.compress.harmony.unpack200.SegmentHeader#getCpStringCount()"
    ],
    "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream#supportsDataDescriptorFor(ZipArchiveEntry)": [
        "org.apache.commons.compress.archivers.zip.ZipArchiveEntry#getGeneralPurposeBit()",
        "org.apache.commons.compress.archivers.zip.ZipArchiveEntry#getMethod()",
        "org.apache.commons.compress.archivers.zip.ZipMethod#getCode()",
        "org.apache.commons.compress.archivers.zip.ZipMethod.<staticinit>()",
        "org.apache.commons.compress.archivers.zip.GeneralPurposeBit#usesDataDescriptor()"
    ],
    "org.apache.commons.compress.archivers.ar.ArArchiveEntry#getLastModifiedDate()": ["org.apache.commons.compress.archivers.ar.ArArchiveEntry#getLastModified()"],
    "org.apache.commons.compress.utils.FixedLengthBlockOutputStream#FixedLengthBlockOutputStream(WritableByteChannel,int)": ["org.apache.commons.compress.utils.FixedLengthBlockOutputStream.<init>()"],
    "org.apache.commons.compress.archivers.zip.ExtraFieldUtils.<staticinit>()": [
        "org.apache.commons.compress.archivers.zip.X0014_X509Certificates.<staticinit>()",
        "org.apache.commons.compress.archivers.zip.X0016_CertificateIdForCentralDirectory.<staticinit>()",
        "org.apache.commons.compress.archivers.zip.ResourceAlignmentExtraField.<staticinit>()",
        "org.apache.commons.compress.archivers.zip.UnicodeCommentExtraField.<staticinit>()",
        "org.apache.commons.compress.archivers.zip.X0019_EncryptionRecipientCertificateList.<staticinit>()",
        "org.apache.commons.compress.archivers.zip.X0015_CertificateIdForFile.<staticinit>()",
        "org.apache.commons.compress.archivers.zip.X000A_NTFS.<staticinit>()",
        "org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp.<staticinit>()",
        "org.apache.commons.compress.archivers.zip.UnicodePathExtraField.<staticinit>()",
        "org.apache.commons.compress.archivers.zip.AsiExtraField.<staticinit>()",
        "org.apache.commons.compress.archivers.zip.JarMarker.<staticinit>()",
        "org.apache.commons.compress.archivers.zip.X0017_StrongEncryptionHeader.<staticinit>()",
        "org.apache.commons.compress.archivers.zip.X7875_NewUnix.<staticinit>()",
        "org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField.<staticinit>()"
    ],
    "org.apache.commons.compress.archivers.dump.UnrecognizedFormatException#UnrecognizedFormatException()": [
        "org.apache.commons.compress.archivers.dump.DumpArchiveException#DumpArchiveException(String)",
        "org.apache.commons.compress.archivers.dump.UnrecognizedFormatException.<init>()"
    ],
    "org.apache.commons.compress.harmony.unpack200.CpBands#parseCpSignature(InputStream)": [
        "org.apache.commons.compress.harmony.pack200.Codec.<staticinit>()",
        "org.apache.commons.compress.harmony.unpack200.BandSet#getReferences(int[],String[])",
        "org.apache.commons.compress.harmony.unpack200.BandSet#decodeBandInt(String,InputStream,BHSDCodec,int)",
        "org.apache.commons.compress.harmony.unpack200.BandSet#parseReferences(String,InputStream,BHSDCodec,int,String[])",
        "org.apache.commons.compress.harmony.unpack200.SegmentHeader#getCpSignatureCount()"
    ],
    "org.apache.commons.compress.harmony.unpack200.BandSet#unpack(InputStream)": [
        "org.apache.commons.compress.harmony.unpack200.NewAttributeBands#read(InputStream)",
        "org.apache.commons.compress.harmony.unpack200.ClassBands#unpack()",
        "org.apache.commons.compress.harmony.unpack200.BcBands#read(InputStream)",
        "org.apache.commons.compress.harmony.unpack200.AttrDefinitionBands#unpack()",
        "org.apache.commons.compress.harmony.unpack200.ClassBands#read(InputStream)",
        "org.apache.commons.compress.harmony.unpack200.FileBands#read(InputStream)",
        "org.apache.commons.compress.harmony.unpack200.FileBands#unpack()",
        "org.apache.commons.compress.harmony.unpack200.NewAttributeBands#unpack()",
        "org.apache.commons.compress.harmony.unpack200.CpBands#read(InputStream)",
        "org.apache.commons.compress.harmony.unpack200.AttrDefinitionBands#read(InputStream)",
        "org.apache.commons.compress.harmony.unpack200.CpBands#unpack()",
        "org.apache.commons.compress.harmony.unpack200.BcBands#unpack()",
        "org.apache.commons.compress.harmony.unpack200.IcBands#read(InputStream)",
        "org.apache.commons.compress.harmony.unpack200.IcBands#unpack()"
    ],
    "org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream#writeNewEntry(CpioArchiveEntry)": [
        "org.apache.commons.compress.archivers.cpio.CpioArchiveEntry#getUID()",
        "org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream#writeCString(byte[])",
        "org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream#encode(String)",
        "org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream#writeAsciiLong(long,int,int)",
        "org.apache.commons.compress.archivers.cpio.CpioArchiveEntry#getDeviceMin()",
        "org.apache.commons.compress.archivers.cpio.CpioArchiveEntry#getRemoteDeviceMaj()",
        "org.apache.commons.compress.archivers.cpio.CpioArchiveEntry#getHeaderPadCount(long)",
        "org.apache.commons.compress.archivers.cpio.CpioArchiveEntry#getRemoteDeviceMin()",
        "org.apache.commons.compress.archivers.cpio.CpioArchiveEntry#getName()",
        "org.apache.commons.compress.archivers.cpio.CpioArchiveEntry#getNumberOfLinks()",
        "org.apache.commons.compress.archivers.cpio.CpioArchiveEntry#getMode()",
        "org.apache.commons.compress.archivers.cpio.CpioArchiveEntry#getSize()",
        "org.apache.commons.compress.archivers.cpio.CpioArchiveEntry#getTime()",
        "org.apache.commons.compress.archivers.cpio.CpioArchiveEntry#getDeviceMaj()",
        "org.apache.commons.compress.archivers.cpio.CpioConstants.<staticinit>()",
        "org.apache.commons.compress.archivers.cpio.CpioArchiveEntry#getChksum()",
        "org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream#pad(int)",
        "org.apache.commons.compress.archivers.cpio.CpioArchiveEntry#getGID()",
        "org.apache.commons.compress.archivers.cpio.CpioArchiveEntry#getInode()"
    ],
    "org.apache.commons.compress.harmony.pack200.NewAttributeBands.Union#Union(String,List<UnionCase>,List<LayoutElement>)": [
        "org.apache.commons.compress.harmony.pack200.NewAttributeBands.Integral#Integral(String)",
        "org.apache.commons.compress.harmony.pack200.NewAttributeBands.Union.<init>()",
        "org.apache.commons.compress.harmony.pack200.NewAttributeBands.LayoutElement.<init>()"
    ],
    "org.apache.commons.compress.harmony.unpack200.CpBands#cpClassValue(String)": [
        "org.apache.commons.compress.harmony.unpack200.CpBands#cpClassValue(int)",
        "org.apache.commons.compress.harmony.unpack200.CpBands#cpUTF8Value(String,boolean)",
        "org.apache.commons.compress.harmony.unpack200.bytecode.CPClass#CPClass(CPUTF8,int)"
    ],
    "org.apache.commons.compress.archivers.zip.ZipUtil.canHandleEntryData(ZipArchiveEntry)": [
        "org.apache.commons.compress.archivers.zip.ZipUtil.supportsEncryptionOf(ZipArchiveEntry)",
        "org.apache.commons.compress.archivers.zip.ZipUtil.supportsMethodOf(ZipArchiveEntry)"
    ],
    "org.apache.commons.compress.harmony.unpack200.bytecode.Attribute#getNestedClassFileEntries()": ["org.apache.commons.compress.harmony.unpack200.bytecode.Attribute#getAttributeName()"],
    "org.apache.commons.compress.compressors.snappy.SnappyCompressorInputStream#readLiteralLength(int)": [
        "org.apache.commons.compress.utils.ByteUtils.fromLittleEndian(ByteSupplier,int)",
        "org.apache.commons.compress.compressors.lz77support.AbstractLZ77CompressorInputStream#readOneByte()"
    ],
    "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream#ZipArchiveOutputStream(File,long)": ["org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream#ZipArchiveOutputStream(File,long)"],
    "org.apache.commons.compress.harmony.unpack200.BandSet#parseCPFloatReferences(String,InputStream,BHSDCodec,int)": [
        "org.apache.commons.compress.harmony.unpack200.BandSet#decodeBandInt(String,InputStream,BHSDCodec,int)",
        "org.apache.commons.compress.harmony.unpack200.CpBands#cpFloatValue(int)",
        "org.apache.commons.compress.harmony.unpack200.Segment#getCpBands()"
    ],
    "org.apache.commons.compress.harmony.pack200.CPFloat#CPFloat(float)": [
        "org.apache.commons.compress.harmony.pack200.CPConstant.<init>()",
        "org.apache.commons.compress.harmony.pack200.CPFloat.<init>()"
    ],
    "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.Data#Data(int)": [
        "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.Data.<init>()",
        "org.apache.commons.compress.compressors.bzip2.BZip2Constants.<staticinit>()"
    ],
    "org.apache.commons.compress.archivers.zip.ZipFile.Entry.<init>()": ["org.apache.commons.compress.archivers.zip.ZipArchiveEntry#ZipArchiveEntry()"],
    "org.apache.commons.compress.archivers.tar.TarArchiveEntry#parseTarHeaderUnwrapped(Map<String, String>,byte[],ZipEncoding,boolean,boolean)": [
        "org.apache.commons.compress.archivers.tar.TarUtils.parseName(byte[],int,int,ZipEncoding)",
        "org.apache.commons.compress.utils.TimeUtils.unixTimeToFileTime(long)",
        "org.apache.commons.compress.archivers.tar.TarUtils.readSparseStructs(byte[],int,int)",
        "org.apache.commons.compress.archivers.tar.TarUtils.parseOctalOrBinary(byte[],int,int)",
        "org.apache.commons.compress.archivers.tar.TarConstants.<staticinit>()",
        "org.apache.commons.compress.archivers.tar.TarArchiveEntry#isDirectory()",
        "org.apache.commons.compress.archivers.tar.TarArchiveEntry.fileTimeFromOptionalSeconds(long)",
        "org.apache.commons.compress.archivers.tar.TarUtils.verifyCheckSum(byte[])",
        "org.apache.commons.compress.archivers.tar.TarArchiveEntry#parseOctalOrBinary(byte[],int,int,boolean)",
        "org.apache.commons.compress.archivers.tar.TarArchiveEntry#evaluateType(Map<String, String>,byte[])",
        "org.apache.commons.compress.archivers.tar.TarUtils.parseName(byte[],int,int)",
        "org.apache.commons.compress.archivers.tar.TarUtils.parseBoolean(byte[],int)",
        "org.apache.commons.compress.archivers.tar.TarUtils.parseOctal(byte[],int,int)"
    ],
    "org.apache.commons.compress.archivers.sevenz.LZMADecoder#getOptionsAsProperties(Object)": [
        "org.apache.commons.compress.archivers.sevenz.LZMADecoder#getOptions(Object)",
        "org.apache.commons.compress.utils.ByteUtils.toLittleEndian(byte[],long,int,int)"
    ],
    "org.apache.commons.compress.archivers.Lister#Lister(boolean,String[]...)": ["org.apache.commons.compress.archivers.Lister.<init>()"],
    "org.apache.commons.compress.harmony.unpack200.SegmentUtils.countMatches(long[],IMatcher)": ["org.apache.commons.compress.harmony.unpack200.AttributeLayout#matches(long)"],
    "org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream#writeBinaryLong(long,int,boolean)": [
        "org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream#write(byte[])",
        "org.apache.commons.compress.archivers.sevenz.Coders.DeflateDecoder.DeflateDecoderOutputStream#write(byte[])",
        "org.apache.commons.compress.archivers.ArchiveOutputStream#count(int)",
        "org.apache.commons.compress.archivers.cpio.CpioUtil.long2byteArray(long,int,boolean)",
        "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.OutputStreamWrapper#write(byte[])",
        "org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream#write(byte[])",
        "org.apache.commons.compress.archivers.zip.ZipSplitOutputStream#write(byte[])"
    ],
    "org.apache.commons.compress.harmony.pack200.NewAttributeBands#readInteger(int,InputStream)": [
        "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream#read()",
        "org.apache.commons.compress.archivers.sevenz.AES256SHA256Decoder.AES256SHA256DecoderInputStream#read()",
        "org.apache.commons.compress.compressors.xz.XZCompressorInputStream#read()",
        "org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorInputStream#read()",
        "org.apache.commons.compress.compressors.lz77support.AbstractLZ77CompressorInputStream#read()",
        "org.apache.commons.compress.compressors.deflate.DeflateCompressorInputStream#read()",
        "org.apache.commons.compress.archivers.zip.ExplodingInputStream#read()",
        "org.apache.commons.compress.compressors.lzma.LZMACompressorInputStream#read()",
        "org.apache.commons.compress.compressors.zstandard.ZstdCompressorInputStream#read()",
        "org.apache.commons.compress.archivers.sevenz.BoundedSeekableByteChannelInputStream#read()",
        "org.apache.commons.compress.utils.BoundedArchiveInputStream#read()",
        "org.apache.commons.compress.compressors.brotli.BrotliCompressorInputStream#read()",
        "org.apache.commons.compress.archivers.tar.TarArchiveSparseZeroInputStream#read()",
        "org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream#read()",
        "org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStream#read()",
        "org.apache.commons.compress.compressors.deflate64.Deflate64CompressorInputStream#read()",
        "org.apache.commons.compress.compressors.lzw.LZWInputStream#read()",
        "org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream#read()"
    ],
    "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream#getCount()": ["org.apache.commons.compress.archivers.tar.TarArchiveOutputStream#getBytesWritten()"],
    "org.apache.commons.compress.archivers.tar.TarFile#throwExceptionIfPositionIsNotInArchive()": [
        "org.apache.commons.compress.utils.MultiReadOnlySeekableByteChannel#size()",
        "org.apache.commons.compress.utils.SeekableInMemoryByteChannel#position()",
        "org.apache.commons.compress.utils.MultiReadOnlySeekableByteChannel#position()",
        "org.apache.commons.compress.utils.SeekableInMemoryByteChannel#size()"
    ],
    "org.apache.commons.compress.archivers.dump.DumpArchiveEntry#getHeaderHoles()": ["org.apache.commons.compress.archivers.dump.DumpArchiveEntry.TapeSegmentHeader#getHoles()"],
    "org.apache.commons.compress.compressors.deflate64.HuffmanDecoder#switchToUncompressedState()": [
        "org.apache.commons.compress.compressors.deflate64.HuffmanDecoder.UncompressedState#UncompressedState(long)",
        "org.apache.commons.compress.compressors.deflate64.HuffmanDecoder#readBits(int)",
        "org.apache.commons.compress.utils.BitInputStream#alignWithByteBoundary()"
    ],
    "org.apache.commons.compress.compressors.CompressorStreamFactory.getBzip2()": ["org.apache.commons.compress.compressors.CompressorStreamFactory.<staticinit>()"],
    "org.apache.commons.compress.archivers.dump.DumpArchiveEntry#getHeaderType()": ["org.apache.commons.compress.archivers.dump.DumpArchiveEntry.TapeSegmentHeader#getType()"],
    "org.apache.commons.compress.archivers.arj.ArjArchiveInputStream.matches(byte[],int)": ["org.apache.commons.compress.archivers.arj.ArjArchiveInputStream.<staticinit>()"],
    "org.apache.commons.compress.archivers.zip.ZipArchiveEntry#setTime(long)": [
        "org.apache.commons.compress.archivers.zip.ZipUtil.isDosTime(long)",
        "org.apache.commons.compress.archivers.zip.ZipArchiveEntry#setLastModifiedTime(FileTime)",
        "org.apache.commons.compress.archivers.zip.ZipArchiveEntry#setExtraTimeFields()"
    ],
    "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream#writePaxHeaders(TarArchiveEntry,String,Map<String, String>)": [
        "org.apache.commons.compress.archivers.tar.TarArchiveEntry#setSize(long)",
        "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream#transferModTime(TarArchiveEntry,TarArchiveEntry)",
        "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream#encodeExtendedPaxHeadersContents(Map<String, String>)",
        "org.apache.commons.compress.archivers.tar.TarArchiveEntry#TarArchiveEntry(String,byte)",
        "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream#putArchiveEntry(TarArchiveEntry)",
        "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream#closeArchiveEntry()",
        "org.apache.commons.compress.archivers.tar.TarConstants.<staticinit>()",
        "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream#stripTo7Bits(String)"
    ],
    "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream#handleSizesAndCrc(long,long,Zip64Mode)": [
        "org.apache.commons.compress.archivers.zip.ZipArchiveEntry#getMethod()",
        "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.<staticinit>()",
        "org.apache.commons.compress.archivers.zip.ZipArchiveEntry#setSize(long)",
        "org.apache.commons.compress.archivers.zip.ZipArchiveEntry#getName()",
        "org.apache.commons.compress.archivers.zip.ZipArchiveEntry#getSize()",
        "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream#checkIfNeedsZip64(Zip64Mode)"
    ],
    "org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream#write(int)": ["org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream#write(byte[],int,int)"],
    "org.apache.commons.compress.harmony.pack200.NewAttributeBands.Replication#pack(OutputStream)": [
        "org.apache.commons.compress.harmony.pack200.NewAttributeBands.Union#pack(OutputStream)",
        "org.apache.commons.compress.harmony.pack200.NewAttributeBands.Callable#pack(OutputStream)",
        "org.apache.commons.compress.harmony.pack200.NewAttributeBands.Call#pack(OutputStream)",
        "org.apache.commons.compress.harmony.pack200.NewAttributeBands.UnionCase#pack(OutputStream)",
        "org.apache.commons.compress.harmony.pack200.NewAttributeBands.Reference#pack(OutputStream)",
        "org.apache.commons.compress.harmony.pack200.NewAttributeBands.Integral#pack(OutputStream)",
        "org.apache.commons.compress.harmony.pack200.NewAttributeBands.Replication#pack(OutputStream)"
    ],
    "org.apache.commons.compress.compressors.z.ZCompressorInputStream#reAlignReading()": [
        "org.apache.commons.compress.compressors.z.ZCompressorInputStream#readNextCode()",
        "org.apache.commons.compress.utils.BitInputStream#clearBitCache()"
    ],
    "org.apache.commons.compress.harmony.unpack200.Archive#Archive(InputStream,JarOutputStream)": [
        "org.apache.commons.compress.harmony.unpack200.Pack200UnpackerAdapter.readPath(FileInputStream)",
        "org.apache.commons.compress.harmony.unpack200.Pack200UnpackerAdapter.newBoundedInputStream(InputStream)",
        "org.apache.commons.compress.harmony.unpack200.Archive.<init>()"
    ],
    "org.apache.commons.compress.harmony.unpack200.bytecode.forms.FieldRefForm#FieldRefForm(int,String,int[])": [
        "org.apache.commons.compress.harmony.unpack200.bytecode.forms.FieldRefForm.<init>()",
        "org.apache.commons.compress.harmony.unpack200.bytecode.forms.ReferenceForm#ReferenceForm(int,String,int[])"
    ],
    "org.apache.commons.compress.harmony.unpack200.bytecode.CPMethod#CPMethod(CPUTF8,CPUTF8,long,List<Attribute>)": [
        "org.apache.commons.compress.harmony.unpack200.bytecode.CPMember#CPMember(CPUTF8,CPUTF8,long,List<Attribute>)",
        "org.apache.commons.compress.harmony.unpack200.bytecode.CPMethod.<init>()"
    ],
    "org.apache.commons.compress.archivers.tar.TarUtils.<staticinit>()": [
        "org.apache.commons.compress.archivers.zip.ZipEncodingHelper.getZipEncoding(String)",
        "org.apache.commons.compress.archivers.tar.TarUtils$ZipEncoding$1.<init>()"
    ],
    "org.apache.commons.compress.harmony.unpack200.AttributeLayoutMap#checkMap()": [
        "org.apache.commons.compress.harmony.unpack200.AttributeLayout#getLayout()",
        "org.apache.commons.compress.harmony.unpack200.AttributeLayout.<staticinit>()",
        "org.apache.commons.compress.harmony.unpack200.AttributeLayout#getName()",
        "org.apache.commons.compress.harmony.pack200.Pack200Exception#Pack200Exception(String)",
        "org.apache.commons.compress.harmony.unpack200.AttributeLayout#getContext()"
    ],
    "org.apache.commons.compress.archivers.zip.ZipFile#ZipFile(Path,String,boolean)": ["org.apache.commons.compress.archivers.zip.ZipFile#ZipFile(Path,String,boolean,boolean)"],
    "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream#read()": [
        "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream#read0()",
        "org.apache.commons.compress.compressors.CompressorInputStream#count(int)"
    ],
    "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile#writeFileAntiItems(DataOutput)": [
        "org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry#isAntiItem()",
        "org.apache.commons.compress.archivers.sevenz.NID.<staticinit>()",
        "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile#writeUint64(DataOutput,long)",
        "org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry#hasStream()",
        "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile#writeBits(DataOutput,BitSet,int)"
    ],
    "org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream#Pack200CompressorInputStream(InputStream,File,Pack200Strategy,Map<String, String>)": [
        "org.apache.commons.compress.compressors.CompressorInputStream.<init>()",
        "org.apache.commons.compress.harmony.unpack200.Pack200UnpackerAdapter#unpack(File,JarOutputStream)",
        "org.apache.commons.compress.java.util.jar.Pack200.newUnpacker()",
        "org.apache.commons.compress.compressors.pack200.Pack200Strategy$Pack200Strategy$1#newStreamBridge()",
        "org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream.<init>()"
    ],
    "org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp#X5455_ExtendedTimestamp()": ["org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp.<init>()"],
    "org.apache.commons.compress.archivers.dump.TapeInputStream#readRecord()": [
        "org.apache.commons.compress.archivers.dump.ShortFileException#ShortFileException()",
        "org.apache.commons.compress.archivers.dump.TapeInputStream.<staticinit>()",
        "org.apache.commons.compress.archivers.dump.TapeInputStream#read(byte[],int,int)"
    ],
    "org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream#deflate()": [
        "org.apache.commons.compress.archivers.sevenz.Coders.DeflateDecoder.DeflateDecoderOutputStream#write(byte[],int,int)",
        "org.apache.commons.compress.utils.FixedLengthBlockOutputStream#write(byte[],int,int)",
        "org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorOutputStream#write(byte[],int,int)",
        "org.apache.commons.compress.archivers.ar.ArArchiveOutputStream#write(byte[],int,int)",
        "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream#write(byte[],int,int)",
        "org.apache.commons.compress.compressors.lzma.LZMACompressorOutputStream#write(byte[],int,int)",
        "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.OutputStreamWrapper#write(byte[],int,int)",
        "org.apache.commons.compress.compressors.zstandard.ZstdCompressorOutputStream#write(byte[],int,int)",
        "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream#write(byte[],int,int)",
        "org.apache.commons.compress.archivers.zip.FileRandomAccessOutputStream#write(byte[],int,int)",
        "org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream#write(byte[],int,int)",
        "org.apache.commons.compress.archivers.sevenz.AES256SHA256Decoder.AES256SHA256DecoderOutputStream#write(byte[],int,int)",
        "org.apache.commons.compress.archivers.zip.ZipSplitOutputStream#write(byte[],int,int)",
        "org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorOutputStream#write(byte[],int,int)",
        "org.apache.commons.compress.compressors.xz.XZCompressorOutputStream#write(byte[],int,int)",
        "org.apache.commons.compress.compressors.deflate.DeflateCompressorOutputStream#write(byte[],int,int)",
        "org.apache.commons.compress.archivers.zip.SeekableChannelRandomAccessOutputStream#write(byte[],int,int)",
        "org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream#write(byte[],int,int)",
        "org.apache.commons.compress.compressors.lz4.BlockLZ4CompressorOutputStream#write(byte[],int,int)",
        "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream#write(byte[],int,int)",
        "org.apache.commons.compress.compressors.snappy.SnappyCompressorOutputStream#write(byte[],int,int)",
        "org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream#write(byte[],int,int)"
    ],
    "org.apache.commons.compress.harmony.unpack200.bytecode.ByteCode#setOperandByte(int,int)": [
        "org.apache.commons.compress.harmony.unpack200.bytecode.forms.ByteCodeForm#operandLength()",
        "org.apache.commons.compress.harmony.unpack200.bytecode.forms.ByteCodeForm#firstOperandIndex()",
        "org.apache.commons.compress.harmony.unpack200.bytecode.ByteCode#getByteCodeForm()"
    ],
    "org.apache.commons.compress.harmony.unpack200.bytecode.NewAttribute.BCOffset#BCOffset(int)": [
        "org.apache.commons.compress.harmony.unpack200.bytecode.NewAttribute.AbstractBcValue.<init>()",
        "org.apache.commons.compress.harmony.unpack200.bytecode.NewAttribute.BCOffset.<init>()"
    ],
    "org.apache.commons.compress.compressors.CompressorStreamProvider#createCompressorInputStream(String,InputStream,boolean)": ["org.apache.commons.compress.compressors.CompressorStreamFactory.<staticinit>()"],
    "org.apache.commons.compress.archivers.Lister#Lister()": ["org.apache.commons.compress.archivers.Lister#Lister(boolean,String[]...)"],
    "org.apache.commons.compress.harmony.pack200.BHSDCodec#BHSDCodec(int,int)": ["org.apache.commons.compress.harmony.pack200.BHSDCodec#BHSDCodec(int,int,int,int)"],
    "org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorOutputStream.Parameters#Parameters(BlockSize,boolean,boolean,boolean)": [
        "org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorOutputStream.Parameters#Parameters(BlockSize,boolean,boolean,boolean,Parameters)",
        "org.apache.commons.compress.compressors.lz4.BlockLZ4CompressorOutputStream.createParameterBuilder()",
        "org.apache.commons.compress.compressors.lz77support.Parameters.Builder#build()"
    ],
    "org.apache.commons.compress.harmony.pack200.PackingUtils.copyThroughJar(JarInputStream,OutputStream)": ["org.apache.commons.compress.harmony.pack200.PackingUtils.log(String)"],
    "org.apache.commons.compress.harmony.unpack200.bytecode.forms.DoubleForm#getPoolID()": ["org.apache.commons.compress.harmony.unpack200.SegmentConstantPool.<staticinit>()"],
    "org.apache.commons.compress.harmony.unpack200.FileBands#FileBands(Segment)": [
        "org.apache.commons.compress.harmony.unpack200.BandSet#BandSet(Segment)",
        "org.apache.commons.compress.harmony.unpack200.CpBands#getCpUTF8()",
        "org.apache.commons.compress.harmony.unpack200.FileBands.<init>()",
        "org.apache.commons.compress.harmony.unpack200.Segment#getCpBands()"
    ],
    "org.apache.commons.compress.compressors.brotli.BrotliCompressorInputStream#read()": ["org.apache.commons.compress.compressors.CompressorInputStream#count(int)"],
    "org.apache.commons.compress.archivers.zip.ZipSplitOutputStream#writeToSegment(Path,long,byte[],int,int)": ["org.apache.commons.compress.archivers.zip.ZipIoUtil.writeFullyAt(FileChannel,ByteBuffer,long)"],
    "org.apache.commons.compress.harmony.unpack200.bytecode.forms.LocalForm#LocalForm(int,String,int[])": [
        "org.apache.commons.compress.harmony.unpack200.bytecode.forms.ByteCodeForm#ByteCodeForm(int,String,int[])",
        "org.apache.commons.compress.harmony.unpack200.bytecode.forms.LocalForm.<init>()"
    ],
    "org.apache.commons.compress.harmony.unpack200.bytecode.Attribute#doWrite(DataOutputStream)": [
        "org.apache.commons.compress.harmony.unpack200.bytecode.ConstantValueAttribute#writeBody(DataOutputStream)",
        "org.apache.commons.compress.harmony.unpack200.bytecode.RuntimeVisibleorInvisibleParameterAnnotationsAttribute#writeBody(DataOutputStream)",
        "org.apache.commons.compress.harmony.unpack200.bytecode.RuntimeVisibleorInvisibleAnnotationsAttribute#getLength()",
        "org.apache.commons.compress.harmony.unpack200.bytecode.LineNumberTableAttribute#getLength()",
        "org.apache.commons.compress.harmony.unpack200.bytecode.SourceFileAttribute#writeBody(DataOutputStream)",
        "org.apache.commons.compress.harmony.unpack200.bytecode.AnnotationDefaultAttribute#getLength()",
        "org.apache.commons.compress.harmony.unpack200.bytecode.AnnotationDefaultAttribute#writeBody(DataOutputStream)",
        "org.apache.commons.compress.harmony.unpack200.bytecode.InnerClassesAttribute#writeBody(DataOutputStream)",
        "org.apache.commons.compress.harmony.unpack200.bytecode.LocalVariableTypeTableAttribute#getLength()",
        "org.apache.commons.compress.harmony.unpack200.bytecode.DeprecatedAttribute#getLength()",
        "org.apache.commons.compress.harmony.unpack200.bytecode.LineNumberTableAttribute#writeBody(DataOutputStream)",
        "org.apache.commons.compress.harmony.unpack200.bytecode.SourceFileAttribute#getLength()",
        "org.apache.commons.compress.harmony.unpack200.bytecode.SignatureAttribute#getLength()",
        "org.apache.commons.compress.harmony.unpack200.bytecode.LocalVariableTableAttribute#writeBody(DataOutputStream)",
        "org.apache.commons.compress.harmony.unpack200.bytecode.CodeAttribute#getLength()",
        "org.apache.commons.compress.harmony.unpack200.bytecode.ConstantValueAttribute#getLength()",
        "org.apache.commons.compress.harmony.unpack200.bytecode.LocalVariableTypeTableAttribute#writeBody(DataOutputStream)",
        "org.apache.commons.compress.harmony.unpack200.bytecode.EnclosingMethodAttribute#writeBody(DataOutputStream)",
        "org.apache.commons.compress.harmony.unpack200.bytecode.DeprecatedAttribute#writeBody(DataOutputStream)",
        "org.apache.commons.compress.harmony.unpack200.bytecode.SignatureAttribute#writeBody(DataOutputStream)",
        "org.apache.commons.compress.harmony.unpack200.bytecode.InnerClassesAttribute#getLength()",
        "org.apache.commons.compress.harmony.unpack200.bytecode.RuntimeVisibleorInvisibleParameterAnnotationsAttribute#getLength()",
        "org.apache.commons.compress.harmony.unpack200.bytecode.NewAttribute#writeBody(DataOutputStream)",
        "org.apache.commons.compress.harmony.unpack200.bytecode.RuntimeVisibleorInvisibleAnnotationsAttribute#writeBody(DataOutputStream)",
        "org.apache.commons.compress.harmony.unpack200.bytecode.LocalVariableTableAttribute#getLength()",
        "org.apache.commons.compress.harmony.unpack200.bytecode.NewAttribute#getLength()",
        "org.apache.commons.compress.harmony.unpack200.bytecode.CodeAttribute#writeBody(DataOutputStream)",
        "org.apache.commons.compress.harmony.unpack200.bytecode.ExceptionsAttribute#getLength()",
        "org.apache.commons.compress.harmony.unpack200.bytecode.EnclosingMethodAttribute#getLength()",
        "org.apache.commons.compress.harmony.unpack200.bytecode.ExceptionsAttribute#writeBody(DataOutputStream)"
    ],
    "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream#getNextEntry()": ["org.apache.commons.compress.archivers.zip.ZipArchiveInputStream#getNextZipEntry()"],
    "org.apache.commons.compress.harmony.unpack200.SegmentHeader#parseClassCounts(InputStream)": [
        "org.apache.commons.compress.harmony.unpack200.SegmentHeader#decodeScalar(String,InputStream,BHSDCodec)",
        "org.apache.commons.compress.harmony.pack200.Codec.<staticinit>()"
    ],
    "org.apache.commons.compress.compressors.CompressorStreamFactory.getSnappyFramed()": ["org.apache.commons.compress.compressors.CompressorStreamFactory.<staticinit>()"],
    "org.apache.commons.compress.harmony.pack200.MetadataBandGroup#MetadataBandGroup(String,int,CpBands,SegmentHeader,int)": [
        "org.apache.commons.compress.harmony.pack200.BandSet#BandSet(int,SegmentHeader)",
        "org.apache.commons.compress.harmony.pack200.MetadataBandGroup.<init>()"
    ],
    "org.apache.commons.compress.harmony.unpack200.bytecode.forms.DoubleForm#DoubleForm(int,String,int[])": [
        "org.apache.commons.compress.harmony.unpack200.bytecode.forms.DoubleForm.<init>()",
        "org.apache.commons.compress.harmony.unpack200.bytecode.forms.ReferenceForm#ReferenceForm(int,String,int[])"
    ],
    "org.apache.commons.compress.archivers.sevenz.AES256SHA256Decoder#decode(String,InputStream,long,Coder,byte[],int)": ["org.apache.commons.compress.archivers.sevenz.AES256SHA256Decoder.AES256SHA256DecoderInputStream#AES256SHA256DecoderInputStream(InputStream,Coder,String,byte[])"],
    "org.apache.commons.compress.parallel.FileBasedScatterGatherBackingStore#close()": ["org.apache.commons.compress.parallel.FileBasedScatterGatherBackingStore#closeForWriting()"],
    "org.apache.commons.compress.harmony.unpack200.bytecode.forms.ClassRefForm#ClassRefForm(int,String,int[],boolean)": ["org.apache.commons.compress.harmony.unpack200.bytecode.forms.ClassRefForm#ClassRefForm(int,String,int[])"],
    "org.apache.commons.compress.archivers.dump.TapeInputStream#skip(long)": [
        "org.apache.commons.compress.archivers.dump.TapeInputStream#readBlock(boolean)",
        "org.apache.commons.compress.utils.ExactMath.add(int,long)",
        "org.apache.commons.compress.archivers.dump.TapeInputStream.<staticinit>()"
    ],
    "org.apache.commons.compress.archivers.sevenz.SevenZFile#SevenZFile(File,byte[])": [
        "org.apache.commons.compress.archivers.sevenz.SevenZFileOptions.<staticinit>()",
        "org.apache.commons.compress.archivers.sevenz.SevenZFile.newByteChannel(File)",
        "org.apache.commons.compress.archivers.sevenz.SevenZFile#SevenZFile(SeekableByteChannel,String,byte[],boolean,SevenZFileOptions)"
    ],
    "org.apache.commons.compress.archivers.zip.ZipFile#ZipFile(SeekableByteChannel)": [
        "org.apache.commons.compress.archivers.zip.ZipFile.<staticinit>()",
        "org.apache.commons.compress.archivers.zip.ZipFile#ZipFile(SeekableByteChannel,String,String,boolean)"
    ],
    "org.apache.commons.compress.utils.FixedLengthBlockOutputStream#maybeFlush()": ["org.apache.commons.compress.utils.FixedLengthBlockOutputStream#writeBlock()"],
    "org.apache.commons.compress.utils.ArchiveUtils#ArchiveUtils()": ["org.apache.commons.compress.utils.ArchiveUtils.<init>()"],
    "org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry#setLastModifiedDate(Date)": ["org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry#setLastModifiedTime(FileTime)"],
    "org.apache.commons.compress.archivers.ar.ArArchiveInputStream.isGNUStringTable(String)": ["org.apache.commons.compress.archivers.ar.ArArchiveInputStream.<staticinit>()"],
    "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream#writeCounted(byte[])": ["org.apache.commons.compress.archivers.zip.StreamCompressor#writeCounted(byte[])"],
    "org.apache.commons.compress.compressors.gzip.GzipUtils.getCompressedFilename(String)": [
        "org.apache.commons.compress.compressors.FileNameUtil#getCompressedFileName(String)",
        "org.apache.commons.compress.compressors.gzip.GzipUtils.<staticinit>()"
    ],
    "org.apache.commons.compress.compressors.CompressorStreamFactory.<staticinit>()": [
        "org.apache.commons.compress.compressors.CompressorStreamFactory#CompressorStreamFactory()",
        "org.apache.commons.compress.compressors.CompressorStreamFactory.youNeed(String,String)"
    ],
    "org.apache.commons.compress.harmony.unpack200.bytecode.forms.IMethodRefForm#getOffset(OperandManager)": ["org.apache.commons.compress.harmony.unpack200.bytecode.OperandManager#nextIMethodRef()"],
    "org.apache.commons.compress.harmony.unpack200.bytecode.NewAttribute.BCIndex#BCIndex(int)": [
        "org.apache.commons.compress.harmony.unpack200.bytecode.NewAttribute.BCIndex.<init>()",
        "org.apache.commons.compress.harmony.unpack200.bytecode.NewAttribute.AbstractBcValue.<init>()"
    ],
    "org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry#setContentMethods(SevenZMethodConfiguration[]...)": [
        "org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry#setContentMethods(Iterable<? extends SevenZMethodConfiguration>)",
        "org.apache.commons.compress.archivers.sevenz.SevenZMethod.<staticinit>()"
    ],
    "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream#writeOut(byte[],int,int)": [
        "org.apache.commons.compress.archivers.zip.StreamCompressor.ScatterGatherBackingStoreCompressor#writeOut(byte[],int,int)",
        "org.apache.commons.compress.archivers.zip.StreamCompressor.SeekableByteChannelCompressor#writeOut(byte[],int,int)",
        "org.apache.commons.compress.archivers.zip.StreamCompressor.OutputStreamCompressor#writeOut(byte[],int,int)",
        "org.apache.commons.compress.archivers.zip.StreamCompressor.DataOutputCompressor#writeOut(byte[],int,int)"
    ],
    "org.apache.commons.compress.harmony.pack200.NewAttributeBands.Call#Call(int)": [
        "org.apache.commons.compress.harmony.pack200.NewAttributeBands.LayoutElement.<init>()",
        "org.apache.commons.compress.harmony.pack200.NewAttributeBands.Call.<init>()"
    ],
    "org.apache.commons.compress.utils.ArchiveUtils.isEqual(byte[],byte[],boolean)": ["org.apache.commons.compress.utils.ArchiveUtils.isEqual(byte[],int,int,byte[],int,int,boolean)"],
    "org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorOutputStream.Parameters#Parameters(BlockSize,boolean,boolean,boolean,Parameters)": ["org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorOutputStream.Parameters.<init>()"],
    "org.apache.commons.compress.archivers.zip.ZipLong.<staticinit>()": [
        "org.apache.commons.compress.archivers.zip.ZipLong#ZipLong(long)",
        "org.apache.commons.compress.archivers.zip.ZipConstants.<staticinit>()"
    ],
    "org.apache.commons.compress.utils.CountingInputStream#read(byte[])": ["org.apache.commons.compress.utils.CountingInputStream#read(byte[],int,int)"],
    "org.apache.commons.compress.compressors.bzip2.BZip2Utils#BZip2Utils()": ["org.apache.commons.compress.compressors.bzip2.BZip2Utils.<init>()"],
    "org.apache.commons.compress.archivers.sevenz.AES256SHA256Decoder#AES256SHA256Decoder()": [
        "org.apache.commons.compress.archivers.sevenz.AES256SHA256Decoder.<init>()",
        "org.apache.commons.compress.archivers.sevenz.AbstractCoder#AbstractCoder(Class<?>[]...)"
    ],
    "org.apache.commons.compress.harmony.pack200.ClassBands#addMethod(int,String,String,String,String[])": [
        "org.apache.commons.compress.harmony.pack200.Segment#getCurrentClassReader()",
        "org.apache.commons.compress.harmony.pack200.CpBands#getCPNameAndType(String,String)",
        "org.apache.commons.compress.harmony.pack200.CpBands#getCPSignature(String)",
        "org.apache.commons.compress.harmony.pack200.CpBands#addCPUtf8(String)",
        "org.apache.commons.compress.harmony.pack200.CpBands#getCPClass(String)",
        "org.apache.commons.compress.harmony.pack200.IntList#add(int)",
        "org.apache.commons.compress.harmony.pack200.Pack200ClassReader#hasSyntheticAttributes()",
        "org.apache.commons.compress.harmony.pack200.ClassBands.countArgs(String)"
    ],
    "org.apache.commons.compress.archivers.arj.ArjArchiveInputStream#readMainHeader()": [
        "org.apache.commons.compress.archivers.arj.ArjArchiveInputStream#readString(DataInputStream)",
        "org.apache.commons.compress.archivers.arj.ArjArchiveInputStream#readRange(InputStream,int)",
        "org.apache.commons.compress.archivers.arj.ArjArchiveInputStream#read32(DataInputStream)",
        "org.apache.commons.compress.archivers.arj.MainHeader.<init>()",
        "org.apache.commons.compress.archivers.arj.ArjArchiveInputStream#read16(DataInputStream)",
        "org.apache.commons.compress.archivers.ArchiveInputStream#pushedBackBytes(long)",
        "org.apache.commons.compress.archivers.arj.ArjArchiveInputStream#readHeader()"
    ],
    "org.apache.commons.compress.archivers.ArchiveStreamFactory#getArchiveOutputStreamProviders()": ["org.apache.commons.compress.archivers.ArchiveStreamFactory.findAvailableArchiveOutputStreamProviders()"],
    "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile#getCurrentOutputStream()": ["org.apache.commons.compress.archivers.sevenz.SevenZOutputFile#setupFileOutputStream()"],
    "org.apache.commons.compress.utils.ByteUtils.InputStreamByteSupplier#InputStreamByteSupplier(InputStream)": ["org.apache.commons.compress.utils.ByteUtils.InputStreamByteSupplier.<init>()"],
    "org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream#Pack200CompressorInputStream(InputStream,Pack200Strategy)": ["org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream#Pack200CompressorInputStream(InputStream,File,Pack200Strategy,Map<String, String>)"],
    "org.apache.commons.compress.harmony.unpack200.SegmentConstantPool#getClassSpecificPoolEntry(int,long,String)": [
        "org.apache.commons.compress.harmony.unpack200.CpBands#getCpMethodClass()",
        "org.apache.commons.compress.harmony.unpack200.SegmentConstantPool#getConstantPoolEntry(int,long)",
        "org.apache.commons.compress.harmony.unpack200.SegmentConstantPool#matchSpecificPoolEntryIndex(String[],String,int)",
        "org.apache.commons.compress.harmony.unpack200.SegmentConstantPool.<staticinit>()",
        "org.apache.commons.compress.harmony.unpack200.CpBands#getCpIMethodClass()",
        "org.apache.commons.compress.harmony.unpack200.CpBands#getCpFieldClass()"
    ],
    "org.apache.commons.compress.archivers.zip.ZipShort.getValue(byte[],int)": ["org.apache.commons.compress.utils.ByteUtils.fromLittleEndian(byte[],int,int)"],
    "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream#handleZip64Extra(ZipArchiveEntry,long,boolean)": [
        "org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField#setDiskStartNumber(ZipLong)",
        "org.apache.commons.compress.archivers.zip.ZipEightByteInteger#ZipEightByteInteger(long)",
        "org.apache.commons.compress.archivers.zip.Zip64Mode.<staticinit>()",
        "org.apache.commons.compress.archivers.zip.ZipArchiveEntry#getDiskNumberStart()",
        "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream#getZip64Extra(ZipArchiveEntry)",
        "org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField#setRelativeHeaderOffset(ZipEightByteInteger)",
        "org.apache.commons.compress.archivers.zip.ZipConstants.<staticinit>()",
        "org.apache.commons.compress.archivers.zip.ZipArchiveEntry#setExtra()",
        "org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField#setCompressedSize(ZipEightByteInteger)",
        "org.apache.commons.compress.archivers.zip.ZipArchiveEntry#getSize()",
        "org.apache.commons.compress.archivers.zip.ZipLong#ZipLong(long)",
        "org.apache.commons.compress.archivers.zip.ZipEightByteInteger#ZipEightByteInteger(BigInteger)",
        "org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField#setSize(ZipEightByteInteger)"
    ],
    "org.apache.commons.compress.compressors.zstandard.ZstdUtils#ZstdUtils()": ["org.apache.commons.compress.compressors.zstandard.ZstdUtils.<init>()"],
    "org.apache.commons.compress.harmony.unpack200.bytecode.LocalVariableTableAttribute#LocalVariableTableAttribute(int,int[],int[],CPUTF8[],CPUTF8[],int[])": [
        "org.apache.commons.compress.harmony.unpack200.bytecode.BCIRenumberedAttribute#BCIRenumberedAttribute(CPUTF8)",
        "org.apache.commons.compress.harmony.unpack200.bytecode.LocalVariableTableAttribute.<init>()",
        "org.apache.commons.compress.harmony.unpack200.bytecode.LocalVariableTableAttribute.<staticinit>()"
    ],
    "org.apache.commons.compress.utils.ByteUtils.OutputStreamByteConsumer#OutputStreamByteConsumer(OutputStream)": ["org.apache.commons.compress.utils.ByteUtils.OutputStreamByteConsumer.<init>()"],
    "org.apache.commons.compress.compressors.deflate64.HuffmanDecoder.DecodingMemory#DecodingMemory(int)": ["org.apache.commons.compress.compressors.deflate64.HuffmanDecoder.DecodingMemory.<init>()"],
    "org.apache.commons.compress.harmony.unpack200.SegmentHeader#read(InputStream)": [
        "org.apache.commons.compress.compressors.deflate.DeflateCompressorInputStream#available()",
        "org.apache.commons.compress.utils.IOUtils.readRange(InputStream,int)",
        "org.apache.commons.compress.harmony.pack200.Codec.<staticinit>()",
        "org.apache.commons.compress.harmony.unpack200.SegmentHeader#decodeScalar(String,InputStream,BHSDCodec,int)",
        "org.apache.commons.compress.harmony.unpack200.SegmentHeader#setBandHeadersData(byte[])",
        "org.apache.commons.compress.harmony.unpack200.SegmentHeader#parseClassCounts(InputStream)",
        "org.apache.commons.compress.harmony.unpack200.SegmentHeader#parseArchiveSpecialCounts(InputStream)",
        "org.apache.commons.compress.compressors.deflate64.Deflate64CompressorInputStream#available()",
        "org.apache.commons.compress.compressors.zstandard.ZstdCompressorInputStream#available()",
        "org.apache.commons.compress.harmony.unpack200.SegmentHeader.<staticinit>()",
        "org.apache.commons.compress.harmony.unpack200.SegmentHeader#getBandHeadersSize()",
        "org.apache.commons.compress.harmony.unpack200.SegmentHeader#parseArchiveFileCounts(InputStream)",
        "org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream#available()",
        "org.apache.commons.compress.compressors.brotli.BrotliCompressorInputStream#available()",
        "org.apache.commons.compress.compressors.xz.XZCompressorInputStream#available()",
        "org.apache.commons.compress.harmony.unpack200.SegmentHeader#setArchiveMinorVersion(int)",
        "org.apache.commons.compress.harmony.unpack200.SegmentHeader#decodeScalar(String,InputStream,BHSDCodec)",
        "org.apache.commons.compress.harmony.unpack200.SegmentHeader#parseCpCounts(InputStream)",
        "org.apache.commons.compress.compressors.lz77support.AbstractLZ77CompressorInputStream#available()",
        "org.apache.commons.compress.harmony.unpack200.SegmentOptions#SegmentOptions(int)",
        "org.apache.commons.compress.compressors.lzma.LZMACompressorInputStream#available()",
        "org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStream#available()",
        "org.apache.commons.compress.harmony.unpack200.SegmentHeader#setArchiveMajorVersion(int)"
    ],
    "org.apache.commons.compress.compressors.xz.XZCompressorInputStream#close()": [
        "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream#close()",
        "org.apache.commons.compress.archivers.sevenz.BoundedSeekableByteChannelInputStream#close()",
        "org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStream#close()",
        "org.apache.commons.compress.compressors.brotli.BrotliCompressorInputStream#close()",
        "org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream#close()",
        "org.apache.commons.compress.compressors.deflate64.Deflate64CompressorInputStream#close()",
        "org.apache.commons.compress.compressors.deflate.DeflateCompressorInputStream#close()",
        "org.apache.commons.compress.archivers.sevenz.AES256SHA256Decoder.AES256SHA256DecoderInputStream#close()",
        "org.apache.commons.compress.compressors.xz.XZCompressorInputStream#close()",
        "org.apache.commons.compress.archivers.zip.ExplodingInputStream#close()",
        "org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream#close()",
        "org.apache.commons.compress.compressors.lzw.LZWInputStream#close()",
        "org.apache.commons.compress.compressors.lzma.LZMACompressorInputStream#close()",
        "org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorInputStream#close()",
        "org.apache.commons.compress.compressors.zstandard.ZstdCompressorInputStream#close()",
        "org.apache.commons.compress.compressors.lz77support.AbstractLZ77CompressorInputStream#close()"
    ],
    "org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream#CpioArchiveOutputStream(OutputStream,String)": [
        "org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream#CpioArchiveOutputStream(OutputStream,short,int,String)",
        "org.apache.commons.compress.archivers.cpio.CpioConstants.<staticinit>()"
    ],
    "org.apache.commons.compress.archivers.zip.ScatterZipOutputStream.ZipEntryWriter#ZipEntryWriter(ScatterZipOutputStream)": [
        "org.apache.commons.compress.parallel.FileBasedScatterGatherBackingStore#closeForWriting()",
        "org.apache.commons.compress.archivers.zip.ScatterZipOutputStream.ZipEntryWriter.<init>()",
        "org.apache.commons.compress.parallel.FileBasedScatterGatherBackingStore#getInputStream()"
    ],
    "org.apache.commons.compress.harmony.unpack200.NewAttributeBands.UnionCase#UnionCase(List<Integer>)": [
        "org.apache.commons.compress.harmony.unpack200.NewAttributeBands.LayoutElement.<init>()",
        "org.apache.commons.compress.harmony.unpack200.NewAttributeBands.UnionCase.<init>()"
    ],
    "org.apache.commons.compress.compressors.CompressorStreamFactory#getCompressorInputStreamProviders()": ["org.apache.commons.compress.compressors.CompressorStreamFactory.findAvailableCompressorInputStreamProviders()"],
    "org.apache.commons.compress.archivers.zip.ResourceAlignmentExtraField#ResourceAlignmentExtraField(int)": ["org.apache.commons.compress.archivers.zip.ResourceAlignmentExtraField#ResourceAlignmentExtraField(int,boolean)"],
    "org.apache.commons.compress.utils.Iterators#Iterators()": ["org.apache.commons.compress.utils.Iterators.<init>()"],
    "org.apache.commons.compress.harmony.pack200.NewAttribute#addContext(int)": ["org.apache.commons.compress.harmony.pack200.AttributeDefinitionBands.<staticinit>()"],
    "org.apache.commons.compress.archivers.tar.TarUtils.formatLongOctalOrBinaryBytes(long,byte[],int,int)": [
        "org.apache.commons.compress.archivers.tar.TarUtils.formatLongOctalBytes(long,byte[],int,int)",
        "org.apache.commons.compress.archivers.tar.TarUtils.formatLongBinary(long,byte[],int,int,boolean)",
        "org.apache.commons.compress.archivers.tar.TarConstants.<staticinit>()",
        "org.apache.commons.compress.archivers.tar.TarUtils.formatBigIntegerBinary(long,byte[],int,int,boolean)"
    ],
    "org.apache.commons.compress.archivers.dump.DumpArchiveEntry#isFifo()": ["org.apache.commons.compress.archivers.dump.DumpArchiveEntry.TYPE.<staticinit>()"],
    "org.apache.commons.compress.harmony.unpack200.bytecode.CPDouble#toString()": ["org.apache.commons.compress.harmony.unpack200.bytecode.CPConstant#getValue()"],
    "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile#writeFileMTimes(DataOutput)": [
        "org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry#getLastModifiedTime()",
        "org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry#getHasLastModifiedDate()",
        "org.apache.commons.compress.archivers.sevenz.NID.<staticinit>()",
        "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile#writeUint64(DataOutput,long)",
        "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile#writeBits(DataOutput,BitSet,int)"
    ],
    "org.apache.commons.compress.archivers.zip.BinaryTree#read(BitStream)": [
        "org.apache.commons.compress.archivers.zip.BitStream#nextBit()",
        "org.apache.commons.compress.archivers.zip.BinaryTree.<staticinit>()"
    ],
    "org.apache.commons.compress.archivers.zip.X000A_NTFS#parseFromCentralDirectoryData(byte[],int,int)": [
        "org.apache.commons.compress.archivers.zip.X000A_NTFS#reset()",
        "org.apache.commons.compress.archivers.zip.X000A_NTFS#parseFromLocalFileData(byte[],int,int)"
    ],
    "org.apache.commons.compress.harmony.pack200.ClassBands#renumberOffsetBci(List<Integer>,List<Integer>,IntList,Map<Label, Integer>)": ["org.apache.commons.compress.harmony.pack200.IntList#get(int)"],
    "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream#canReadEntryData(ArchiveEntry)": [
        "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream#supportsCompressedSizeFor(ZipArchiveEntry)",
        "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream#supportsDataDescriptorFor(ZipArchiveEntry)",
        "org.apache.commons.compress.archivers.zip.ZipUtil.canHandleEntryData(ZipArchiveEntry)"
    ],
    "org.apache.commons.compress.harmony.unpack200.bytecode.SourceFileAttribute.setAttributeName(CPUTF8)": ["org.apache.commons.compress.harmony.unpack200.bytecode.SourceFileAttribute.<staticinit>()"],
    "org.apache.commons.compress.archivers.cpio.CpioArchiveEntry#isNetwork()": [
        "org.apache.commons.compress.archivers.cpio.CpioUtil.fileType(long)",
        "org.apache.commons.compress.archivers.cpio.CpioConstants.<staticinit>()"
    ],
    "org.apache.commons.compress.harmony.unpack200.bytecode.CPLong#writeBody(DataOutputStream)": ["org.apache.commons.compress.harmony.unpack200.bytecode.CPConstantNumber#getNumber()"],
    "org.apache.commons.compress.archivers.zip.UnsupportedZipFeatureException.Feature.<staticinit>()": ["org.apache.commons.compress.archivers.zip.UnsupportedZipFeatureException.Feature#Feature(String)"],
    "org.apache.commons.compress.archivers.zip.X7875_NewUnix#getLocalFileDataLength()": [
        "org.apache.commons.compress.archivers.zip.X7875_NewUnix.trimLeadingZeroesForceMinLength(byte[])",
        "org.apache.commons.compress.archivers.zip.ZipShort#ZipShort(int)"
    ],
    "org.apache.commons.compress.harmony.pack200.PackingOptions#isKeepDeflateHint()": ["org.apache.commons.compress.harmony.pack200.PackingOptions.<staticinit>()"],
    "org.apache.commons.compress.harmony.pack200.BcBands#visitMultiANewArrayInsn(String,int)": [
        "org.apache.commons.compress.harmony.pack200.BcBands#updateRenumbering()",
        "org.apache.commons.compress.harmony.pack200.BcBands.<staticinit>()",
        "org.apache.commons.compress.harmony.pack200.IntList#add(int)",
        "org.apache.commons.compress.harmony.pack200.CpBands#getCPClass(String)"
    ],
    "org.apache.commons.compress.archivers.ArchiveStreamProvider#createArchiveOutputStream(String,OutputStream,String)": ["org.apache.commons.compress.archivers.ArchiveStreamFactory.<staticinit>()"],
    "org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorInputStream#FramedLZ4CompressorInputStream(InputStream,boolean)": [
        "org.apache.commons.compress.compressors.CompressorInputStream.<init>()",
        "org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorInputStream#init(boolean)",
        "org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorInputStream.<init>()"
    ],
    "org.apache.commons.compress.archivers.cpio.CpioArchiveEntry#isCharacterDevice()": [
        "org.apache.commons.compress.archivers.cpio.CpioUtil.fileType(long)",
        "org.apache.commons.compress.archivers.cpio.CpioConstants.<staticinit>()"
    ],
    "org.apache.commons.compress.archivers.zip.ZipArchiveEntry#addNTFSTimestamp(FileTime,FileTime,FileTime)": [
        "org.apache.commons.compress.archivers.zip.X000A_NTFS#setAccessFileTime(FileTime)",
        "org.apache.commons.compress.archivers.zip.X000A_NTFS.<init>()",
        "org.apache.commons.compress.archivers.zip.ZipArchiveEntry#internalAddExtraField(ZipExtraField)",
        "org.apache.commons.compress.archivers.zip.X000A_NTFS#setModifyFileTime(FileTime)",
        "org.apache.commons.compress.archivers.zip.X000A_NTFS#setCreateFileTime(FileTime)"
    ],
    "org.apache.commons.compress.harmony.unpack200.NewAttributeBands#readNumber(StringReader)": ["org.apache.commons.compress.utils.ParsingUtils.parseIntValue(String)"],
    "org.apache.commons.compress.compressors.lz4.BlockLZ4CompressorOutputStream.Pair#writeTo(OutputStream)": [
        "org.apache.commons.compress.utils.ByteUtils.toLittleEndian(OutputStream,long,int)",
        "org.apache.commons.compress.compressors.deflate.DeflateCompressorOutputStream#write(int)",
        "org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorOutputStream#write(int)",
        "org.apache.commons.compress.compressors.lz4.BlockLZ4CompressorOutputStream.<staticinit>()",
        "org.apache.commons.compress.compressors.lzma.LZMACompressorOutputStream#write(int)",
        "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream#write(int)",
        "org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream#write(int)",
        "org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorOutputStream#write(int)",
        "org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream#write(byte[])",
        "org.apache.commons.compress.compressors.lz4.BlockLZ4CompressorInputStream.<staticinit>()",
        "org.apache.commons.compress.compressors.lz4.BlockLZ4CompressorOutputStream.Pair#hasBackReference()",
        "org.apache.commons.compress.archivers.ArchiveOutputStream#write(int)",
        "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.OutputStreamWrapper#write(byte[])",
        "org.apache.commons.compress.archivers.sevenz.AES256SHA256Decoder.AES256SHA256DecoderOutputStream#write(int)",
        "org.apache.commons.compress.compressors.snappy.SnappyCompressorOutputStream#write(int)",
        "org.apache.commons.compress.archivers.sevenz.Coders.DeflateDecoder.DeflateDecoderOutputStream#write(int)",
        "org.apache.commons.compress.compressors.lz4.BlockLZ4CompressorOutputStream#write(int)",
        "org.apache.commons.compress.compressors.lz4.BlockLZ4CompressorOutputStream.Pair.writeLength(int,OutputStream)",
        "org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream#write(byte[])",
        "org.apache.commons.compress.archivers.sevenz.Coders.DeflateDecoder.DeflateDecoderOutputStream#write(byte[])",
        "org.apache.commons.compress.compressors.xz.XZCompressorOutputStream#write(int)",
        "org.apache.commons.compress.utils.FixedLengthBlockOutputStream#write(int)",
        "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.OutputStreamWrapper#write(int)",
        "org.apache.commons.compress.compressors.lz4.BlockLZ4CompressorOutputStream.Pair#literalLength()",
        "org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream#write(int)",
        "org.apache.commons.compress.archivers.zip.ZipSplitOutputStream#write(int)",
        "org.apache.commons.compress.compressors.lz4.BlockLZ4CompressorOutputStream.Pair.lengths(int,int)",
        "org.apache.commons.compress.compressors.zstandard.ZstdCompressorOutputStream#write(int)",
        "org.apache.commons.compress.archivers.zip.RandomAccessOutputStream#write(int)",
        "org.apache.commons.compress.archivers.zip.ZipSplitOutputStream#write(byte[])"
    ],
    "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile#writePackInfo(DataOutput)": [
        "org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry#getCompressedSize()",
        "org.apache.commons.compress.archivers.sevenz.NID.<staticinit>()",
        "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile#writeUint64(DataOutput,long)",
        "org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry#hasStream()",
        "org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry#getCompressedCrcValue()"
    ],
    "org.apache.commons.compress.harmony.unpack200.NewAttributeBands#readBody(StringReader)": ["org.apache.commons.compress.harmony.unpack200.NewAttributeBands#readNextLayoutElement(StringReader)"],
    "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile#writeUnpackInfo(DataOutput)": [
        "org.apache.commons.compress.archivers.sevenz.NID.<staticinit>()",
        "org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry#getSize()",
        "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile#writeUint64(DataOutput,long)",
        "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile#writeFolder(DataOutput,SevenZArchiveEntry)",
        "org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry#hasStream()",
        "org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry#getCrcValue()"
    ],
    "org.apache.commons.compress.compressors.lzma.LZMAUtils.getCompressedFilename(String)": [
        "org.apache.commons.compress.compressors.FileNameUtil#getCompressedFileName(String)",
        "org.apache.commons.compress.compressors.lzma.LZMAUtils.<staticinit>()"
    ],
    "org.apache.commons.compress.harmony.pack200.Codec#check(int,InputStream)": ["org.apache.commons.compress.harmony.pack200.Pack200Exception#Pack200Exception(String)"],
    "org.apache.commons.compress.archivers.zip.UnshrinkingInputStream#addEntry(int,byte)": [
        "org.apache.commons.compress.archivers.zip.UnshrinkingInputStream.<staticinit>()",
        "org.apache.commons.compress.compressors.lzw.LZWInputStream#addEntry(int,byte,int)",
        "org.apache.commons.compress.compressors.lzw.LZWInputStream#getTableSize()",
        "org.apache.commons.compress.compressors.lzw.LZWInputStream#setTableSize(int)"
    ],
    "org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry#SevenZArchiveEntry()": ["org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.<init>()"],
    "org.apache.commons.compress.harmony.pack200.NewAttributeBands.Integral#Integral(String,Integral)": [
        "org.apache.commons.compress.harmony.pack200.NewAttributeBands.Integral.<init>()",
        "org.apache.commons.compress.harmony.pack200.NewAttributeBands#getCodec(String)",
        "org.apache.commons.compress.harmony.pack200.NewAttributeBands.LayoutElement.<init>()"
    ],
    "org.apache.commons.compress.harmony.unpack200.ClassBands#parseCodeAttrBands(InputStream,int)": [
        "org.apache.commons.compress.harmony.unpack200.BandSet#decodeBandInt(String,InputStream,BHSDCodec,int[])",
        "org.apache.commons.compress.harmony.unpack200.AttributeLayoutMap#getAttributeLayout(String,int)",
        "org.apache.commons.compress.harmony.pack200.Codec.<staticinit>()",
        "org.apache.commons.compress.harmony.unpack200.SegmentUtils.countMatches(long[],IMatcher)",
        "org.apache.commons.compress.harmony.unpack200.bytecode.LocalVariableTypeTableAttribute#LocalVariableTypeTableAttribute(int,int[],int[],CPUTF8[],CPUTF8[],int[])",
        "org.apache.commons.compress.harmony.unpack200.bytecode.LocalVariableTableAttribute#LocalVariableTableAttribute(int,int[],int[],CPUTF8[],CPUTF8[],int[])",
        "org.apache.commons.compress.harmony.unpack200.Segment#getSegmentHeader()",
        "org.apache.commons.compress.harmony.unpack200.AttributeLayout#matches(long)",
        "org.apache.commons.compress.harmony.unpack200.bytecode.LineNumberTableAttribute#LineNumberTableAttribute(int,int[],int[])",
        "org.apache.commons.compress.harmony.unpack200.AttributeLayout#numBackwardsCallables()",
        "org.apache.commons.compress.harmony.unpack200.BandSet#parseCPSignatureReferences(String,InputStream,BHSDCodec,int[])",
        "org.apache.commons.compress.harmony.unpack200.SegmentHeader#getOptions()",
        "org.apache.commons.compress.harmony.unpack200.NewAttributeBands#parseAttributes(InputStream,int)",
        "org.apache.commons.compress.harmony.unpack200.AttributeLayoutMap#getAttributeBands(AttributeLayout)",
        "org.apache.commons.compress.harmony.unpack200.SegmentUtils.countBit16(long[])",
        "org.apache.commons.compress.harmony.unpack200.AttributeLayout#isDefaultLayout()",
        "org.apache.commons.compress.harmony.unpack200.BandSet#decodeBandInt(String,InputStream,BHSDCodec,int)",
        "org.apache.commons.compress.harmony.unpack200.BandSet#parseCPUTF8References(String,InputStream,BHSDCodec,int[])",
        "org.apache.commons.compress.harmony.unpack200.BandSet#parseFlags(String,InputStream,int,BHSDCodec,boolean)",
        "org.apache.commons.compress.harmony.unpack200.AttributeLayout.<staticinit>()",
        "org.apache.commons.compress.harmony.unpack200.SegmentOptions#hasCodeFlagsHi()",
        "org.apache.commons.compress.harmony.unpack200.AttributeLayoutMap#getAttributeLayout(int,int)",
        "org.apache.commons.compress.harmony.unpack200.NewAttributeBands#setBackwardsCalls(int[])"
    ],
    "org.apache.commons.compress.utils.BitInputStream#readBits(int)": [
        "org.apache.commons.compress.utils.BitInputStream#processBitsGreater57(int)",
        "org.apache.commons.compress.utils.BitInputStream#ensureCache(int)",
        "org.apache.commons.compress.utils.BitInputStream.<staticinit>()",
        "org.apache.commons.compress.utils.BitInputStream#readCachedBits(int)"
    ],
    "org.apache.commons.compress.harmony.pack200.NewAttributeBands.Integral#pack(OutputStream)": [
        "org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream#write(byte[])",
        "org.apache.commons.compress.archivers.sevenz.Coders.DeflateDecoder.DeflateDecoderOutputStream#write(byte[])",
        "org.apache.commons.compress.harmony.pack200.BandSet#encodeBandInt(String,int[],BHSDCodec)",
        "org.apache.commons.compress.harmony.pack200.PackingUtils.log(String)",
        "org.apache.commons.compress.harmony.pack200.BandSet#integerListToArray(List<Integer>)",
        "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.OutputStreamWrapper#write(byte[])",
        "org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream#write(byte[])",
        "org.apache.commons.compress.archivers.zip.ZipSplitOutputStream#write(byte[])"
    ],
    "org.apache.commons.compress.compressors.lz77support.LZ77Compressor#nextHash(int,byte)": ["org.apache.commons.compress.compressors.lz77support.LZ77Compressor.<staticinit>()"],
    "org.apache.commons.compress.archivers.sevenz.SevenZFile#checkEntryIsInitialized(Map<Integer, SevenZArchiveEntry>,int)": ["org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry#SevenZArchiveEntry()"],
    "org.apache.commons.compress.archivers.sevenz.AbstractCoder#AbstractCoder(Class<?>[]...)": ["org.apache.commons.compress.archivers.sevenz.AbstractCoder.<init>()"],
    "org.apache.commons.compress.harmony.unpack200.bytecode.forms.VariableInstructionForm#VariableInstructionForm(int,String)": [
        "org.apache.commons.compress.harmony.unpack200.bytecode.forms.ByteCodeForm#ByteCodeForm(int,String)",
        "org.apache.commons.compress.harmony.unpack200.bytecode.forms.VariableInstructionForm.<init>()"
    ],
    "org.apache.commons.compress.harmony.pack200.MetadataBandGroup#pack(OutputStream)": [
        "org.apache.commons.compress.harmony.pack200.MetadataBandGroup#tagListToArray(List<String>)",
        "org.apache.commons.compress.harmony.pack200.BandSet#encodeBandInt(String,int[],BHSDCodec)",
        "org.apache.commons.compress.harmony.pack200.Codec.<staticinit>()",
        "org.apache.commons.compress.harmony.pack200.IntList#size()",
        "org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream#write(byte[])",
        "org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream#write(byte[])",
        "org.apache.commons.compress.archivers.sevenz.Coders.DeflateDecoder.DeflateDecoderOutputStream#write(byte[])",
        "org.apache.commons.compress.harmony.pack200.BandSet#cpEntryListToArray(List<? extends ConstantPoolEntry>)",
        "org.apache.commons.compress.harmony.pack200.MetadataBandGroup#hasContent()",
        "org.apache.commons.compress.harmony.pack200.PackingUtils.log(String)",
        "org.apache.commons.compress.harmony.pack200.IntList#toArray()",
        "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.OutputStreamWrapper#write(byte[])",
        "org.apache.commons.compress.archivers.zip.ZipSplitOutputStream#write(byte[])",
        "org.apache.commons.compress.harmony.pack200.MetadataBandGroup.<staticinit>()"
    ],
    "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream#ZipArchiveOutputStream(Path,OpenOption[]...)": [
        "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.<init>()",
        "org.apache.commons.compress.archivers.zip.StreamCompressor.create(OutputStream,Deflater)",
        "org.apache.commons.compress.archivers.ArchiveOutputStream.<init>()",
        "org.apache.commons.compress.archivers.zip.FileRandomAccessOutputStream#FileRandomAccessOutputStream(Path)",
        "org.apache.commons.compress.archivers.zip.FileRandomAccessOutputStream#FileRandomAccessOutputStream(Path,OpenOption[]...)"
    ],
    "org.apache.commons.compress.harmony.pack200.Segment.SegmentAnnotationVisitor#SegmentAnnotationVisitor(int,int,String,boolean)": [
        "org.apache.commons.compress.harmony.pack200.Segment.<staticinit>()",
        "org.apache.commons.compress.harmony.pack200.Segment.SegmentAnnotationVisitor.<init>()"
    ],
    "org.apache.commons.compress.harmony.unpack200.CpBands#cpIMethodValue(int)": [
        "org.apache.commons.compress.harmony.unpack200.bytecode.CPInterfaceMethodRef#CPInterfaceMethodRef(CPClass,CPNameAndType,int)",
        "org.apache.commons.compress.harmony.unpack200.CpBands#cpClassValue(int)",
        "org.apache.commons.compress.harmony.unpack200.CpBands#cpNameAndTypeValue(int)"
    ],
    "org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream#putArchiveEntry(CpioArchiveEntry)": [
        "org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream#writeHeader(CpioArchiveEntry)",
        "org.apache.commons.compress.archivers.cpio.CpioArchiveEntry#getTime()",
        "org.apache.commons.compress.archivers.cpio.CpioArchiveEntry#getFormat()",
        "org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream#closeArchiveEntry()",
        "org.apache.commons.compress.archivers.cpio.CpioArchiveEntry#setTime(long)",
        "org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream#ensureOpen()",
        "org.apache.commons.compress.archivers.cpio.CpioArchiveEntry#getName()"
    ],
    "org.apache.commons.compress.archivers.zip.ZipEightByteInteger.getBytes(BigInteger)": [
        "org.apache.commons.compress.archivers.zip.ZipEightByteInteger.<staticinit>()",
        "org.apache.commons.compress.archivers.zip.ZipConstants.<staticinit>()"
    ],
    "org.apache.commons.compress.compressors.CompressorStreamFactory.getZ()": ["org.apache.commons.compress.compressors.CompressorStreamFactory.<staticinit>()"],
    "org.apache.commons.compress.harmony.unpack200.Segment#buildClassFile(int)": [
        "org.apache.commons.compress.harmony.unpack200.AttributeLayoutMap#getAttributeLayout(String,int)",
        "org.apache.commons.compress.harmony.unpack200.CpBands#cpClassValue(String)",
        "org.apache.commons.compress.harmony.unpack200.ClassBands#getClassSuperInts()",
        "org.apache.commons.compress.harmony.unpack200.ClassBands#getClassFieldCount()",
        "org.apache.commons.compress.harmony.unpack200.SegmentHeader#getDefaultClassMinorVersion()",
        "org.apache.commons.compress.harmony.unpack200.ClassBands#getClassThisInts()",
        "org.apache.commons.compress.harmony.unpack200.ClassBands#getFieldFlags()",
        "org.apache.commons.compress.harmony.unpack200.bytecode.ClassFile.<init>()",
        "org.apache.commons.compress.harmony.unpack200.CpBands#cpUTF8Value(String)",
        "org.apache.commons.compress.harmony.unpack200.ClassBands#getClassInterfacesInts()",
        "org.apache.commons.compress.harmony.unpack200.AttributeLayout#matches(long)",
        "org.apache.commons.compress.harmony.unpack200.CpBands#getCpClass()",
        "org.apache.commons.compress.harmony.unpack200.CpBands#getCpDescriptorTypeInts()",
        "org.apache.commons.compress.harmony.unpack200.IcTuple#outerClassString()",
        "org.apache.commons.compress.harmony.unpack200.IcTuple#thisClassIndex()",
        "org.apache.commons.compress.harmony.unpack200.AttributeLayout.<staticinit>()",
        "org.apache.commons.compress.harmony.unpack200.bytecode.ClassConstantPool#indexOf(ClassFileEntry)",
        "org.apache.commons.compress.harmony.unpack200.IcTuple#thisClassString()",
        "org.apache.commons.compress.harmony.unpack200.IcTuple#isAnonymous()",
        "org.apache.commons.compress.harmony.unpack200.bytecode.CPMethod#CPMethod(CPUTF8,CPUTF8,long,List<Attribute>)",
        "org.apache.commons.compress.harmony.unpack200.IcTuple#simpleClassName()",
        "org.apache.commons.compress.harmony.unpack200.bytecode.InnerClassesAttribute#addInnerClassesEntry(CPClass,CPClass,CPUTF8,int)",
        "org.apache.commons.compress.harmony.unpack200.SegmentHeader#getDefaultClassMajorVersion()",
        "org.apache.commons.compress.harmony.unpack200.bytecode.ClassConstantPool#addNestedEntries()",
        "org.apache.commons.compress.harmony.unpack200.CpBands#cpClassValue(int)",
        "org.apache.commons.compress.harmony.unpack200.bytecode.CPField#CPField(CPUTF8,CPUTF8,long,List<Attribute>)",
        "org.apache.commons.compress.harmony.unpack200.bytecode.SourceFileAttribute#isSourceFileAttribute()",
        "org.apache.commons.compress.harmony.unpack200.IcTuple#outerClassIndex()",
        "org.apache.commons.compress.harmony.unpack200.bytecode.Attribute#isSourceFileAttribute()",
        "org.apache.commons.compress.harmony.unpack200.ClassBands#getMethodFlags()",
        "org.apache.commons.compress.harmony.unpack200.CpBands#getCpDescriptorNameInts()",
        "org.apache.commons.compress.harmony.unpack200.ClassBands#getClassFlags()",
        "org.apache.commons.compress.harmony.unpack200.Segment#computeIcStored(IcTuple[],IcTuple[])",
        "org.apache.commons.compress.harmony.unpack200.IcBands#getRelevantIcTuples(String,ClassConstantPool)",
        "org.apache.commons.compress.harmony.unpack200.ClassBands#getClassVersionMinor()",
        "org.apache.commons.compress.harmony.unpack200.Segment#getIcBands()",
        "org.apache.commons.compress.harmony.unpack200.bytecode.InnerClassesAttribute#InnerClassesAttribute(String)",
        "org.apache.commons.compress.harmony.unpack200.ClassBands#getRawClassFlags()",
        "org.apache.commons.compress.harmony.unpack200.ClassBands#getClassAttributes()",
        "org.apache.commons.compress.harmony.unpack200.AttrDefinitionBands#getAttributeDefinitionMap()",
        "org.apache.commons.compress.harmony.unpack200.ClassBands#getMethodDescrInts()",
        "org.apache.commons.compress.harmony.unpack200.ClassBands#getIcLocal()",
        "org.apache.commons.compress.harmony.unpack200.ClassBands#getClassMethodCount()",
        "org.apache.commons.compress.harmony.unpack200.bytecode.ClassConstantPool#addWithNestedEntries(ClassFileEntry)",
        "org.apache.commons.compress.harmony.unpack200.ClassBands#getMethodAttributes()",
        "org.apache.commons.compress.harmony.unpack200.IcTuple#isMember()",
        "org.apache.commons.compress.harmony.unpack200.CpBands#cpUTF8Value(String,boolean)",
        "org.apache.commons.compress.harmony.unpack200.IcTuple#simpleClassNameIndex()",
        "org.apache.commons.compress.harmony.unpack200.ClassBands#getClassVersionMajor()",
        "org.apache.commons.compress.harmony.unpack200.ClassBands#getFieldDescrInts()",
        "org.apache.commons.compress.harmony.unpack200.Segment#getClassBands()",
        "org.apache.commons.compress.harmony.unpack200.CpBands#cpUTF8Value(int)",
        "org.apache.commons.compress.harmony.unpack200.CpBands#cpSignatureValue(int)",
        "org.apache.commons.compress.harmony.unpack200.bytecode.ClassConstantPool#add(ClassFileEntry)",
        "org.apache.commons.compress.harmony.unpack200.ClassBands#getFieldAttributes()",
        "org.apache.commons.compress.harmony.unpack200.bytecode.SourceFileAttribute#SourceFileAttribute(CPUTF8)",
        "org.apache.commons.compress.harmony.unpack200.bytecode.ClassConstantPool#resolve(Segment)"
    ],
    "org.apache.commons.compress.archivers.sevenz.SevenZFile#readHeader(ByteBuffer,Archive)": [
        "org.apache.commons.compress.archivers.sevenz.SevenZFile#readArchiveProperties(ByteBuffer)",
        "org.apache.commons.compress.archivers.sevenz.SevenZFile#readFilesInfo(ByteBuffer,Archive)",
        "org.apache.commons.compress.archivers.sevenz.SevenZFile.ArchiveStatistics#assertValidity(int)",
        "org.apache.commons.compress.archivers.sevenz.SevenZFile#sanityCheckAndCollectStatistics(ByteBuffer)",
        "org.apache.commons.compress.archivers.sevenz.SevenZFile.getUnsignedByte(ByteBuffer)",
        "org.apache.commons.compress.archivers.sevenz.NID.<staticinit>()",
        "org.apache.commons.compress.archivers.sevenz.SevenZFile#readStreamsInfo(ByteBuffer,Archive)"
    ],
    "org.apache.commons.compress.archivers.ArchiveStreamFactory.detect(InputStream)": [
        "org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream#reset()",
        "org.apache.commons.compress.compressors.brotli.BrotliCompressorInputStream#mark(int)",
        "org.apache.commons.compress.compressors.brotli.BrotliCompressorInputStream#reset()",
        "org.apache.commons.compress.archivers.ArchiveException#ArchiveException(String,Exception)",
        "org.apache.commons.compress.compressors.brotli.BrotliCompressorInputStream#markSupported()",
        "org.apache.commons.compress.compressors.zstandard.ZstdCompressorInputStream#mark(int)",
        "org.apache.commons.compress.compressors.zstandard.ZstdCompressorInputStream#markSupported()",
        "org.apache.commons.compress.archivers.tar.TarArchiveInputStream#getNextEntry()",
        "org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream#markSupported()",
        "org.apache.commons.compress.archivers.ArchiveStreamFactory.<staticinit>()",
        "org.apache.commons.compress.archivers.sevenz.SevenZFile.matches(byte[],int)",
        "org.apache.commons.compress.archivers.tar.TarArchiveEntry#getSize()",
        "org.apache.commons.compress.archivers.dump.DumpArchiveInputStream.matches(byte[],int)",
        "org.apache.commons.compress.archivers.jar.JarArchiveInputStream.matches(byte[],int)",
        "org.apache.commons.compress.archivers.tar.TarArchiveInputStream#TarArchiveInputStream(InputStream)",
        "org.apache.commons.compress.archivers.tar.TarArchiveEntry#isDirectory()",
        "org.apache.commons.compress.archivers.arj.ArjArchiveInputStream.matches(byte[],int)",
        "org.apache.commons.compress.archivers.ArchiveException#ArchiveException(String)",
        "org.apache.commons.compress.compressors.zstandard.ZstdCompressorInputStream#reset()",
        "org.apache.commons.compress.archivers.tar.TarArchiveEntry#isCheckSumOK()",
        "org.apache.commons.compress.utils.IOUtils.readFully(InputStream,byte[])",
        "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.matches(byte[],int)",
        "org.apache.commons.compress.archivers.tar.TarArchiveInputStream.matches(byte[],int)",
        "org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream#mark(int)",
        "org.apache.commons.compress.archivers.ar.ArArchiveInputStream.matches(byte[],int)",
        "org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream.matches(byte[],int)"
    ],
    "org.apache.commons.compress.archivers.zip.PKWareExtraHeader.HashAlgorithm.getAlgorithmByCode(int)": ["org.apache.commons.compress.archivers.zip.PKWareExtraHeader.HashAlgorithm.<staticinit>()"],
    "org.apache.commons.compress.archivers.dump.DumpArchiveEntry#getIno()": ["org.apache.commons.compress.archivers.dump.DumpArchiveEntry.TapeSegmentHeader#getIno()"],
    "org.apache.commons.compress.archivers.zip.AsiExtraField#isLink()": ["org.apache.commons.compress.archivers.zip.AsiExtraField#getLinkedFile()"],
    "org.apache.commons.compress.changes.ChangeSetPerformer#perform(ArchiveEntryIterator<E extends ArchiveEntry>,O extends ArchiveOutputStream)": [
        "org.apache.commons.compress.utils.ServiceLoaderIterator#next()",
        "org.apache.commons.compress.changes.Change#getTargetFileName()",
        "org.apache.commons.compress.changes.ChangeSetPerformer.ZipFileIterator#hasNext()",
        "org.apache.commons.compress.changes.ChangeSetPerformer.ArchiveInputStreamIterator#hasNext()",
        "org.apache.commons.compress.changes.Change#getType()",
        "org.apache.commons.compress.changes.ChangeSetPerformer#isDeletedLater(Set<Change<E extends ArchiveEntry>>,E extends ArchiveEntry)",
        "org.apache.commons.compress.changes.ChangeSetResults#addedFromStream(String)",
        "org.apache.commons.compress.changes.Change#getEntry()",
        "org.apache.commons.compress.changes.ChangeSetResults#deleted(String)",
        "org.apache.commons.compress.changes.ChangeSetResults#addedFromChangeSet(String)",
        "org.apache.commons.compress.changes.ChangeSetPerformer.ZipFileIterator#getInputStream()",
        "org.apache.commons.compress.changes.Change.ChangeType.<staticinit>()",
        "org.apache.commons.compress.utils.ServiceLoaderIterator#remove()",
        "org.apache.commons.compress.changes.Change#getInputStream()",
        "org.apache.commons.compress.changes.ChangeSetResults.<init>()",
        "org.apache.commons.compress.changes.Change#isReplaceMode()",
        "org.apache.commons.compress.changes.ChangeSetPerformer.ArchiveInputStreamIterator#getInputStream()",
        "org.apache.commons.compress.changes.ChangeSetResults#hasBeenAdded(String)",
        "org.apache.commons.compress.utils.ServiceLoaderIterator#hasNext()",
        "org.apache.commons.compress.changes.ChangeSetPerformer#copyStream(InputStream,O extends ArchiveOutputStream,E extends ArchiveEntry)",
        "org.apache.commons.compress.changes.ChangeSetPerformer.ArchiveInputStreamIterator#next()"
    ],
    "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream#write(int)": ["org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream#write0(int)"],
    "org.apache.commons.compress.archivers.zip.ZipArchiveEntry#getExtraFields()": ["org.apache.commons.compress.archivers.zip.ZipArchiveEntry#getParseableExtraFields()"],
    "org.apache.commons.compress.harmony.pack200.ClassBands.<init>()": ["org.apache.commons.compress.harmony.pack200.IntList#IntList()"],
    "org.apache.commons.compress.harmony.pack200.Segment.SegmentAnnotationVisitor#SegmentAnnotationVisitor(int)": [
        "org.apache.commons.compress.harmony.pack200.Segment.<staticinit>()",
        "org.apache.commons.compress.harmony.pack200.Segment.SegmentAnnotationVisitor.<init>()"
    ],
    "org.apache.commons.compress.utils.CountingOutputStream#write(int)": [
        "org.apache.commons.compress.archivers.sevenz.AES256SHA256Decoder.AES256SHA256DecoderOutputStream#write(int)",
        "org.apache.commons.compress.compressors.snappy.SnappyCompressorOutputStream#write(int)",
        "org.apache.commons.compress.archivers.sevenz.Coders.DeflateDecoder.DeflateDecoderOutputStream#write(int)",
        "org.apache.commons.compress.compressors.lz4.BlockLZ4CompressorOutputStream#write(int)",
        "org.apache.commons.compress.compressors.deflate.DeflateCompressorOutputStream#write(int)",
        "org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorOutputStream#write(int)",
        "org.apache.commons.compress.compressors.lzma.LZMACompressorOutputStream#write(int)",
        "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream#write(int)",
        "org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream#write(int)",
        "org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorOutputStream#write(int)",
        "org.apache.commons.compress.compressors.xz.XZCompressorOutputStream#write(int)",
        "org.apache.commons.compress.utils.FixedLengthBlockOutputStream#write(int)",
        "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.OutputStreamWrapper#write(int)",
        "org.apache.commons.compress.utils.CountingOutputStream#count(long)",
        "org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream#write(int)",
        "org.apache.commons.compress.archivers.ArchiveOutputStream#write(int)",
        "org.apache.commons.compress.archivers.zip.ZipSplitOutputStream#write(int)",
        "org.apache.commons.compress.compressors.zstandard.ZstdCompressorOutputStream#write(int)",
        "org.apache.commons.compress.archivers.zip.RandomAccessOutputStream#write(int)"
    ],
    "org.apache.commons.compress.archivers.zip.AsiExtraField#isDirectory()": ["org.apache.commons.compress.archivers.zip.AsiExtraField#isLink()"],
    "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream#ZipArchiveInputStream(InputStream,String,boolean,boolean)": ["org.apache.commons.compress.archivers.zip.ZipArchiveInputStream#ZipArchiveInputStream(InputStream,String,boolean,boolean,boolean)"],
    "org.apache.commons.compress.archivers.cpio.CpioArchiveEntry#isBlockDevice()": [
        "org.apache.commons.compress.archivers.cpio.CpioUtil.fileType(long)",
        "org.apache.commons.compress.archivers.cpio.CpioConstants.<staticinit>()"
    ],
    "org.apache.commons.compress.harmony.pack200.CpBands#getCPClass(String)": [
        "org.apache.commons.compress.harmony.pack200.Segment#getClassBands()",
        "org.apache.commons.compress.harmony.pack200.CPClass#isInnerClass()",
        "org.apache.commons.compress.harmony.pack200.CpBands#getCPUtf8(String)",
        "org.apache.commons.compress.harmony.pack200.CPClass#CPClass(CPUTF8)",
        "org.apache.commons.compress.harmony.pack200.ClassBands#currentClassReferencesInnerClass(CPClass)"
    ],
    "org.apache.commons.compress.archivers.zip.X000A_NTFS#readTimeAttr(byte[],int,int)": [
        "org.apache.commons.compress.archivers.zip.X000A_NTFS.<staticinit>()",
        "org.apache.commons.compress.archivers.zip.ZipEightByteInteger#ZipEightByteInteger(byte[],int)",
        "org.apache.commons.compress.archivers.zip.ZipShort#equals(Object)",
        "org.apache.commons.compress.archivers.zip.ZipShort#ZipShort(byte[],int)"
    ],
    "org.apache.commons.compress.harmony.unpack200.AttributeLayoutMap#add(AttributeLayout)": [
        "org.apache.commons.compress.harmony.unpack200.AttributeLayoutMap#getLayout(int)",
        "org.apache.commons.compress.harmony.unpack200.AttributeLayout#getContext()",
        "org.apache.commons.compress.harmony.unpack200.AttributeLayout#getIndex()"
    ],
    "org.apache.commons.compress.archivers.zip.X7875_NewUnix#getLocalFileDataData()": ["org.apache.commons.compress.archivers.zip.X7875_NewUnix.trimLeadingZeroesForceMinLength(byte[])"],
    "org.apache.commons.compress.changes.ChangeSetPerformer#perform(ZipFile,O extends ArchiveOutputStream)": [
        "org.apache.commons.compress.changes.ChangeSetPerformer#perform(ArchiveEntryIterator<E extends ArchiveEntry>,O extends ArchiveOutputStream)",
        "org.apache.commons.compress.changes.ChangeSetPerformer.ZipFileIterator#ZipFileIterator(ZipFile)"
    ],
    "org.apache.commons.compress.harmony.unpack200.NewAttributeBands#setBackwardsCalls(int[])": [
        "org.apache.commons.compress.harmony.unpack200.NewAttributeBands.Callable#addCount(int)",
        "org.apache.commons.compress.harmony.unpack200.NewAttributeBands.Callable#isBackwardsCallable()",
        "org.apache.commons.compress.harmony.unpack200.NewAttributeBands#parseLayout()"
    ],
    "org.apache.commons.compress.harmony.unpack200.ClassBands#parseClassAttrBands(InputStream)": [
        "org.apache.commons.compress.harmony.unpack200.AttributeLayoutMap#getAttributeLayout(String,int)",
        "org.apache.commons.compress.harmony.unpack200.SegmentHeader#getDefaultClassMajorVersion()",
        "org.apache.commons.compress.harmony.unpack200.CpBands#cpClassValue(int)",
        "org.apache.commons.compress.harmony.unpack200.ClassBands#parseClassMetadataBands(InputStream,int[])",
        "org.apache.commons.compress.harmony.unpack200.ClassBands#getCallCount(int[][],long[][],int)",
        "org.apache.commons.compress.harmony.unpack200.AttributeLayout#numBackwardsCallables()",
        "org.apache.commons.compress.harmony.unpack200.SegmentUtils.countBit16(long[])",
        "org.apache.commons.compress.harmony.unpack200.AttributeLayoutMap#getAttributeBands(AttributeLayout)",
        "org.apache.commons.compress.harmony.unpack200.BandSet#decodeBandInt(String,InputStream,BHSDCodec,int)",
        "org.apache.commons.compress.harmony.unpack200.CpBands#getConstantPool()",
        "org.apache.commons.compress.harmony.unpack200.SegmentHeader#getDefaultClassMinorVersion()",
        "org.apache.commons.compress.harmony.unpack200.BandSet#parseFlags(String,InputStream,int,BHSDCodec,boolean)",
        "org.apache.commons.compress.harmony.unpack200.AttributeLayoutMap#getAttributeLayout(int,int)",
        "org.apache.commons.compress.harmony.unpack200.bytecode.DeprecatedAttribute#DeprecatedAttribute()",
        "org.apache.commons.compress.harmony.unpack200.NewAttributeBands#setBackwardsCalls(int[])",
        "org.apache.commons.compress.harmony.unpack200.Segment#getIcBands()",
        "org.apache.commons.compress.harmony.unpack200.BandSet#decodeBandInt(String,InputStream,BHSDCodec,int[])",
        "org.apache.commons.compress.harmony.pack200.Codec.<staticinit>()",
        "org.apache.commons.compress.harmony.unpack200.CpBands#getCpUTF8()",
        "org.apache.commons.compress.harmony.unpack200.SegmentUtils.countMatches(long[],IMatcher)",
        "org.apache.commons.compress.harmony.unpack200.bytecode.EnclosingMethodAttribute#EnclosingMethodAttribute(CPClass,CPNameAndType)",
        "org.apache.commons.compress.harmony.unpack200.AttributeLayout#matches(long)",
        "org.apache.commons.compress.harmony.unpack200.IcTuple#getF()",
        "org.apache.commons.compress.harmony.unpack200.bytecode.SignatureAttribute#SignatureAttribute(CPUTF8)",
        "org.apache.commons.compress.harmony.unpack200.IcTuple#getC()",
        "org.apache.commons.compress.harmony.unpack200.CpBands#getCpClass()",
        "org.apache.commons.compress.harmony.unpack200.SegmentOptions#hasClassFlagsHi()",
        "org.apache.commons.compress.harmony.unpack200.CpBands#cpUTF8Value(String,boolean)",
        "org.apache.commons.compress.harmony.unpack200.IcTuple#IcTuple(String,int,String,String,int,int,int,int)",
        "org.apache.commons.compress.harmony.unpack200.AttributeLayout#getValue(long,SegmentConstantPool)",
        "org.apache.commons.compress.harmony.unpack200.IcTuple#getN()",
        "org.apache.commons.compress.harmony.unpack200.NewAttributeBands#parseAttributes(InputStream,int)",
        "org.apache.commons.compress.harmony.unpack200.AttributeLayout#isDefaultLayout()",
        "org.apache.commons.compress.harmony.unpack200.AttributeLayout.<staticinit>()",
        "org.apache.commons.compress.harmony.unpack200.bytecode.SourceFileAttribute#SourceFileAttribute(CPUTF8)",
        "org.apache.commons.compress.harmony.unpack200.CpBands#cpNameAndTypeValue(int)",
        "org.apache.commons.compress.harmony.unpack200.IcTuple#getC2()",
        "org.apache.commons.compress.harmony.unpack200.IcBands#getIcTuples()"
    ],
    "org.apache.commons.compress.compressors.brotli.BrotliUtils#BrotliUtils()": ["org.apache.commons.compress.compressors.brotli.BrotliUtils.<init>()"],
    "org.apache.commons.compress.utils.MultiReadOnlySeekableByteChannel.forFiles(File[]...)": ["org.apache.commons.compress.utils.MultiReadOnlySeekableByteChannel.<staticinit>()"],
    "org.apache.commons.compress.parallel.FileBasedScatterGatherBackingStore#FileBasedScatterGatherBackingStore(Path)": ["org.apache.commons.compress.parallel.FileBasedScatterGatherBackingStore.<init>()"],
    "org.apache.commons.compress.harmony.unpack200.bytecode.CPMethod#hashCode()": ["org.apache.commons.compress.harmony.unpack200.bytecode.CPMethod#generateHashCode()"],
    "org.apache.commons.compress.archivers.zip.NioZipEncoding#canEncode(String)": ["org.apache.commons.compress.archivers.zip.NioZipEncoding#newEncoder()"],
    "org.apache.commons.compress.harmony.unpack200.bytecode.SignatureAttribute#SignatureAttribute(CPUTF8)": [
        "org.apache.commons.compress.harmony.unpack200.bytecode.Attribute#Attribute(CPUTF8)",
        "org.apache.commons.compress.harmony.unpack200.bytecode.SignatureAttribute.<init>()",
        "org.apache.commons.compress.harmony.unpack200.bytecode.SignatureAttribute.<staticinit>()"
    ],
    "org.apache.commons.compress.harmony.pack200.NewAttributeBands.UnionCase#UnionCase(List<Integer>,List<LayoutElement>)": [
        "org.apache.commons.compress.harmony.pack200.NewAttributeBands.LayoutElement.<init>()",
        "org.apache.commons.compress.harmony.pack200.NewAttributeBands.UnionCase.<init>()"
    ],
    "org.apache.commons.compress.archivers.tar.TarArchiveEntry#isGlobalPaxHeader()": ["org.apache.commons.compress.archivers.tar.TarConstants.<staticinit>()"],
    "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.<init>()": ["org.apache.commons.compress.compressors.bzip2.CRC#CRC()"],
    "org.apache.commons.compress.harmony.unpack200.bytecode.CPConstant#CPConstant(byte,Object,int)": [
        "org.apache.commons.compress.harmony.unpack200.bytecode.ConstantPoolEntry#ConstantPoolEntry(byte,int)",
        "org.apache.commons.compress.harmony.unpack200.bytecode.CPConstant.<init>()"
    ],
    "org.apache.commons.compress.archivers.ar.ArArchiveInputStream.isBSDLongName(String)": ["org.apache.commons.compress.archivers.ar.ArArchiveInputStream.<staticinit>()"],
    "org.apache.commons.compress.archivers.zip.ZipArchiveEntry#getAllExtraFields()": [
        "org.apache.commons.compress.archivers.zip.ZipArchiveEntry#getAllExtraFieldsNoCopy()",
        "org.apache.commons.compress.archivers.zip.ZipArchiveEntry#copyOf(ZipExtraField[],int)"
    ],
    "org.apache.commons.compress.archivers.zip.ZipEightByteInteger.getBytes(long)": ["org.apache.commons.compress.archivers.zip.ZipEightByteInteger.getBytes(BigInteger)"],
    "org.apache.commons.compress.utils.CRC32VerifyingInputStream#CRC32VerifyingInputStream(InputStream,long,int)": ["org.apache.commons.compress.utils.CRC32VerifyingInputStream#CRC32VerifyingInputStream(InputStream,long,long)"],
    "org.apache.commons.compress.harmony.unpack200.bytecode.CPClass#hashCode()": ["org.apache.commons.compress.harmony.unpack200.bytecode.CPClass#generateHashCode()"],
    "org.apache.commons.compress.compressors.lzma.LZMACompressorInputStream#read(byte[],int,int)": [
        "org.apache.commons.compress.compressors.zstandard.ZstdCompressorInputStream#read(byte[],int,int)",
        "org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorInputStream#read(byte[],int,int)",
        "org.apache.commons.compress.archivers.sevenz.BoundedSeekableByteChannelInputStream#read(byte[],int,int)",
        "org.apache.commons.compress.compressors.deflate64.Deflate64CompressorInputStream#read(byte[],int,int)",
        "org.apache.commons.compress.compressors.CompressorInputStream#count(int)",
        "org.apache.commons.compress.compressors.brotli.BrotliCompressorInputStream#read(byte[],int,int)",
        "org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream#read(byte[],int,int)",
        "org.apache.commons.compress.archivers.sevenz.AES256SHA256Decoder.AES256SHA256DecoderInputStream#read(byte[],int,int)",
        "org.apache.commons.compress.compressors.lzma.LZMACompressorInputStream#read(byte[],int,int)",
        "org.apache.commons.compress.compressors.lz4.BlockLZ4CompressorInputStream#read(byte[],int,int)",
        "org.apache.commons.compress.compressors.snappy.SnappyCompressorInputStream#read(byte[],int,int)",
        "org.apache.commons.compress.compressors.xz.XZCompressorInputStream#read(byte[],int,int)",
        "org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream#read(byte[],int,int)",
        "org.apache.commons.compress.utils.BoundedArchiveInputStream#read(byte[],int,int)",
        "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream#read(byte[],int,int)",
        "org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStream#read(byte[],int,int)",
        "org.apache.commons.compress.compressors.lzw.LZWInputStream#read(byte[],int,int)",
        "org.apache.commons.compress.compressors.deflate.DeflateCompressorInputStream#read(byte[],int,int)"
    ],
    "org.apache.commons.compress.compressors.deflate64.HuffmanDecoder.populateDynamicTables(BitInputStream,int[],int[])": [
        "org.apache.commons.compress.compressors.deflate64.HuffmanDecoder.nextSymbol(BitInputStream,BinaryTreeNode)",
        "org.apache.commons.compress.compressors.deflate64.HuffmanDecoder.readBits(BitInputStream,int)",
        "org.apache.commons.compress.compressors.deflate64.HuffmanDecoder.buildTree(int[])",
        "org.apache.commons.compress.compressors.deflate64.HuffmanDecoder.<staticinit>()"
    ],
    "org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream#CpioArchiveOutputStream(OutputStream,short)": [
        "org.apache.commons.compress.archivers.cpio.CpioUtil.<staticinit>()",
        "org.apache.commons.compress.archivers.cpio.CpioConstants.<staticinit>()",
        "org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream#CpioArchiveOutputStream(OutputStream,short,int,String)"
    ],
    "org.apache.commons.compress.archivers.zip.ZipLong#ZipLong(byte[])": ["org.apache.commons.compress.archivers.zip.ZipLong#ZipLong(byte[],int)"],
    "org.apache.commons.compress.archivers.cpio.CpioArchiveEntry#setRemoteDeviceMin(long)": ["org.apache.commons.compress.archivers.cpio.CpioArchiveEntry#checkNewFormat()"],
    "org.apache.commons.compress.archivers.zip.UnicodeCommentExtraField#UnicodeCommentExtraField()": [
        "org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField#AbstractUnicodeExtraField()",
        "org.apache.commons.compress.archivers.zip.UnicodeCommentExtraField.<init>()"
    ],
    "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.ExtraFieldParsingMode$ExtraFieldParsingMode$1.<init>()": ["org.apache.commons.compress.archivers.zip.ZipArchiveEntry.ExtraFieldParsingMode#ExtraFieldParsingMode(UnparseableExtraField)"],
    "org.apache.commons.compress.archivers.zip.ZipFile#ZipFile(SeekableByteChannel,String,String,boolean)": ["org.apache.commons.compress.archivers.zip.ZipFile#ZipFile(SeekableByteChannel,String,String,boolean,boolean,boolean)"],
    "org.apache.commons.compress.archivers.cpio.CpioArchiveEntry#setChksum(long)": ["org.apache.commons.compress.archivers.cpio.CpioArchiveEntry#checkNewFormat()"],
    "org.apache.commons.compress.archivers.ar.ArArchiveEntry#ArArchiveEntry(Path,String,LinkOption[]...)": [
        "org.apache.commons.compress.archivers.ar.ArArchiveEntry#ArArchiveEntry(String,long,int,int,int,long)",
        "org.apache.commons.compress.archivers.ar.ArArchiveEntry.<staticinit>()"
    ],
    "org.apache.commons.compress.archivers.sevenz.LZMADecoder#encode(OutputStream,Object)": [
        "org.apache.commons.compress.archivers.sevenz.LZMADecoder#getOptions(Object)",
        "org.apache.commons.compress.utils.FlushShieldFilterOutputStream#FlushShieldFilterOutputStream(OutputStream)"
    ],
    "org.apache.commons.compress.harmony.unpack200.NewAttributeBands#resolveCallsForElement(int,Callable,LayoutElement)": [
        "org.apache.commons.compress.harmony.unpack200.NewAttributeBands#resolveCallsForElement(int,Callable,LayoutElement)",
        "org.apache.commons.compress.harmony.unpack200.NewAttributeBands.Call#setCallable(Callable)"
    ],
    "org.apache.commons.compress.harmony.unpack200.AttributeLayoutMap#AttributeLayoutMap()": [
        "org.apache.commons.compress.harmony.unpack200.AttributeLayoutMap.getDefaultAttributeLayouts()",
        "org.apache.commons.compress.harmony.unpack200.AttributeLayoutMap.<init>()",
        "org.apache.commons.compress.harmony.unpack200.AttributeLayoutMap#add(AttributeLayout)"
    ],
    "org.apache.commons.compress.archivers.sevenz.SevenZFile#read(byte[])": ["org.apache.commons.compress.archivers.sevenz.SevenZFile#read(byte[],int,int)"],
    "org.apache.commons.compress.harmony.unpack200.bytecode.LocalVariableTypeTableAttribute#resolve(ClassConstantPool)": [
        "org.apache.commons.compress.harmony.unpack200.bytecode.EnclosingMethodAttribute#resolve(ClassConstantPool)",
        "org.apache.commons.compress.harmony.unpack200.bytecode.ClassFileEntry#resolve(ClassConstantPool)",
        "org.apache.commons.compress.harmony.unpack200.bytecode.CPString#resolve(ClassConstantPool)",
        "org.apache.commons.compress.harmony.unpack200.bytecode.SourceFileAttribute#resolve(ClassConstantPool)",
        "org.apache.commons.compress.harmony.unpack200.bytecode.CPFieldRef#resolve(ClassConstantPool)",
        "org.apache.commons.compress.harmony.unpack200.bytecode.LocalVariableTableAttribute#resolve(ClassConstantPool)",
        "org.apache.commons.compress.harmony.unpack200.bytecode.LineNumberTableAttribute#resolve(ClassConstantPool)",
        "org.apache.commons.compress.harmony.unpack200.bytecode.RuntimeVisibleorInvisibleParameterAnnotationsAttribute#resolve(ClassConstantPool)",
        "org.apache.commons.compress.harmony.unpack200.bytecode.NewAttribute#resolve(ClassConstantPool)",
        "org.apache.commons.compress.harmony.unpack200.bytecode.LocalVariableTypeTableAttribute#resolve(ClassConstantPool)",
        "org.apache.commons.compress.harmony.unpack200.bytecode.CPRef#resolve(ClassConstantPool)",
        "org.apache.commons.compress.harmony.unpack200.bytecode.ConstantValueAttribute#resolve(ClassConstantPool)",
        "org.apache.commons.compress.harmony.unpack200.bytecode.ByteCode#resolve(ClassConstantPool)",
        "org.apache.commons.compress.harmony.unpack200.bytecode.RuntimeVisibleorInvisibleAnnotationsAttribute#resolve(ClassConstantPool)",
        "org.apache.commons.compress.harmony.unpack200.bytecode.InnerClassesAttribute#resolve(ClassConstantPool)",
        "org.apache.commons.compress.harmony.unpack200.bytecode.Attribute#resolve(ClassConstantPool)",
        "org.apache.commons.compress.harmony.unpack200.bytecode.CPMember#resolve(ClassConstantPool)",
        "org.apache.commons.compress.harmony.unpack200.bytecode.ExceptionsAttribute#resolve(ClassConstantPool)",
        "org.apache.commons.compress.harmony.unpack200.bytecode.CodeAttribute#resolve(ClassConstantPool)",
        "org.apache.commons.compress.harmony.unpack200.bytecode.AnnotationDefaultAttribute#resolve(ClassConstantPool)",
        "org.apache.commons.compress.harmony.unpack200.bytecode.ClassConstantPool#indexOf(ClassFileEntry)",
        "org.apache.commons.compress.harmony.unpack200.bytecode.CPClass#resolve(ClassConstantPool)",
        "org.apache.commons.compress.harmony.unpack200.bytecode.SignatureAttribute#resolve(ClassConstantPool)",
        "org.apache.commons.compress.harmony.unpack200.bytecode.CPNameAndType#resolve(ClassConstantPool)"
    ],
    "org.apache.commons.compress.harmony.pack200.NewAttributeBands#getAttributeName()": ["org.apache.commons.compress.harmony.pack200.CPUTF8#getUnderlyingString()"],
    "org.apache.commons.compress.archivers.zip.ZipEncodingHelper.isUTF8(String)": ["org.apache.commons.compress.archivers.zip.ZipEncodingHelper.isUTF8Alias(String)"],
    "org.apache.commons.compress.harmony.pack200.CPMethodOrField#CPMethodOrField(CPClass,CPNameAndType)": [
        "org.apache.commons.compress.harmony.pack200.CPMethodOrField.<init>()",
        "org.apache.commons.compress.harmony.pack200.ConstantPoolEntry.<init>()"
    ],
    "org.apache.commons.compress.archivers.zip.ZipFile#getInputStream(ZipArchiveEntry)$InflaterInputStreamWithStatistics$1.<init>()": ["org.apache.commons.compress.archivers.zip.InflaterInputStreamWithStatistics#InflaterInputStreamWithStatistics(InputStream,Inflater)"],
    "org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream#write(byte[],int,int)": ["org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream#deflate()"],
    "org.apache.commons.compress.utils.BitInputStream#alignWithByteBoundary()": ["org.apache.commons.compress.utils.BitInputStream#readCachedBits(int)"],
    "org.apache.commons.compress.harmony.unpack200.bytecode.forms.ClassRefForm#getOffset(OperandManager)": ["org.apache.commons.compress.harmony.unpack200.bytecode.OperandManager#nextClassRef()"],
    "org.apache.commons.compress.harmony.unpack200.bytecode.LineNumberTableAttribute#getNestedClassFileEntries()": ["org.apache.commons.compress.harmony.unpack200.bytecode.Attribute#getAttributeName()"],
    "org.apache.commons.compress.compressors.zstandard.ZstdCompressorOutputStream#ZstdCompressorOutputStream(OutputStream)": [
        "org.apache.commons.compress.compressors.zstandard.ZstdCompressorOutputStream.<init>()",
        "org.apache.commons.compress.compressors.CompressorOutputStream.<init>()"
    ],
    "org.apache.commons.compress.archivers.zip.X000A_NTFS.<staticinit>()": ["org.apache.commons.compress.archivers.zip.ZipShort#ZipShort(int)"],
    "org.apache.commons.compress.harmony.pack200.Archive#doZeroEffortPack()": [
        "org.apache.commons.compress.harmony.pack200.PackingUtils.copyThroughJar(JarFile,OutputStream)",
        "org.apache.commons.compress.harmony.pack200.PackingUtils.log(String)",
        "org.apache.commons.compress.harmony.pack200.PackingUtils.copyThroughJar(JarInputStream,OutputStream)"
    ],
    "org.apache.commons.compress.harmony.unpack200.BandSet#decodeBandInt(String,InputStream,BHSDCodec,int)": [
        "org.apache.commons.compress.harmony.pack200.PopulationCodec#decodeInts(int,InputStream)",
        "org.apache.commons.compress.harmony.pack200.BHSDCodec#isDelta()",
        "org.apache.commons.compress.harmony.unpack200.SegmentHeader#getBandHeadersInputStream()",
        "org.apache.commons.compress.harmony.pack200.Pack200Exception#Pack200Exception(String)",
        "org.apache.commons.compress.harmony.pack200.BHSDCodec#decodeInts(int,InputStream,int)",
        "org.apache.commons.compress.harmony.pack200.RunCodec#decodeInts(int,InputStream)",
        "org.apache.commons.compress.harmony.pack200.BHSDCodec#getL()",
        "org.apache.commons.compress.harmony.pack200.PopulationCodec#getUnfavouredCodec()",
        "org.apache.commons.compress.harmony.pack200.BHSDCodec#decodeInts(int,InputStream)",
        "org.apache.commons.compress.harmony.pack200.BHSDCodec#smallest()",
        "org.apache.commons.compress.harmony.pack200.BHSDCodec#cardinality()",
        "org.apache.commons.compress.utils.ExactMath.add(int,long)",
        "org.apache.commons.compress.harmony.pack200.BHSDCodec#getB()",
        "org.apache.commons.compress.harmony.pack200.BHSDCodec#largest()",
        "org.apache.commons.compress.harmony.pack200.PopulationCodec#getFavouredCodec()",
        "org.apache.commons.compress.harmony.pack200.Codec#decodeInts(int,InputStream)",
        "org.apache.commons.compress.harmony.pack200.CodecEncoding.getCodec(int,InputStream,Codec)",
        "org.apache.commons.compress.harmony.pack200.BHSDCodec#isSigned()",
        "org.apache.commons.compress.harmony.pack200.PopulationCodec#getFavoured()"
    ],
    "org.apache.commons.compress.changes.ChangeSet#addDeletion(Change<E extends ArchiveEntry>)": [
        "org.apache.commons.compress.utils.ServiceLoaderIterator#next()",
        "org.apache.commons.compress.changes.Change#getEntry()",
        "org.apache.commons.compress.changes.Change#getTargetFileName()",
        "org.apache.commons.compress.changes.Change.ChangeType.<staticinit>()",
        "org.apache.commons.compress.utils.ServiceLoaderIterator#remove()",
        "org.apache.commons.compress.utils.ServiceLoaderIterator#hasNext()",
        "org.apache.commons.compress.changes.Change#getType()"
    ],
    "org.apache.commons.compress.harmony.pack200.BcBands#visitLdcInsn(Object)": [
        "org.apache.commons.compress.harmony.pack200.BcBands#updateRenumbering()",
        "org.apache.commons.compress.harmony.pack200.CpBands#getConstant(Object)",
        "org.apache.commons.compress.harmony.pack200.Segment#lastConstantHadWideIndex()",
        "org.apache.commons.compress.harmony.pack200.IntList#add(int)"
    ],
    "org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField#parseFromLocalFileData(byte[],int,int)": [
        "org.apache.commons.compress.archivers.zip.ZipLong#ZipLong(byte[],int)",
        "org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField.<staticinit>()",
        "org.apache.commons.compress.archivers.zip.ZipEightByteInteger#ZipEightByteInteger(byte[],int)",
        "org.apache.commons.compress.archivers.zip.ZipConstants.<staticinit>()"
    ],
    "org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream#Pack200CompressorOutputStream(OutputStream)": [
        "org.apache.commons.compress.compressors.pack200.Pack200Strategy.<staticinit>()",
        "org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream#Pack200CompressorOutputStream(OutputStream,Pack200Strategy)"
    ],
    "org.apache.commons.compress.compressors.deflate64.HuffmanDecoder#readBits(int)": ["org.apache.commons.compress.compressors.deflate64.HuffmanDecoder.readBits(BitInputStream,int)"],
    "org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream#pad(int)": [
        "org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream#write(byte[])",
        "org.apache.commons.compress.archivers.sevenz.Coders.DeflateDecoder.DeflateDecoderOutputStream#write(byte[])",
        "org.apache.commons.compress.archivers.ArchiveOutputStream#count(int)",
        "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.OutputStreamWrapper#write(byte[])",
        "org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream#write(byte[])",
        "org.apache.commons.compress.archivers.zip.ZipSplitOutputStream#write(byte[])"
    ],
    "org.apache.commons.compress.archivers.sevenz.LZMA2Decoder#getOptionsAsProperties(Object)": ["org.apache.commons.compress.archivers.sevenz.LZMA2Decoder#getDictSize(Object)"],
    "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream#flush()": [
        "org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream#flush()",
        "org.apache.commons.compress.archivers.sevenz.AES256SHA256Decoder.AES256SHA256DecoderOutputStream#flush()",
        "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream#flush()",
        "org.apache.commons.compress.compressors.deflate.DeflateCompressorOutputStream#flush()",
        "org.apache.commons.compress.compressors.zstandard.ZstdCompressorOutputStream#flush()",
        "org.apache.commons.compress.compressors.lzma.LZMACompressorOutputStream#flush()",
        "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream#flush()",
        "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.OutputStreamWrapper#flush()",
        "org.apache.commons.compress.compressors.xz.XZCompressorOutputStream#flush()",
        "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream#flush()"
    ],
    "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream#getName(ZipArchiveEntry)": [
        "org.apache.commons.compress.archivers.zip.NioZipEncoding#encode(String)",
        "org.apache.commons.compress.archivers.tar.TarUtils$ZipEncoding$1#encode(String)",
        "org.apache.commons.compress.archivers.zip.ZipArchiveEntry#getName()",
        "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream#getEntryEncoding(ZipArchiveEntry)"
    ],
    "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream#finish()": [
        "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream#writeEOFRecord()",
        "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream#padAsNeeded()"
    ],
    "org.apache.commons.compress.archivers.zip.X0017_StrongEncryptionHeader#parseFileFormat(byte[],int,int)": [
        "org.apache.commons.compress.archivers.zip.PKWareExtraHeader#assertMinimalLength(int,int)",
        "org.apache.commons.compress.archivers.zip.ZipShort.getValue(byte[],int)",
        "org.apache.commons.compress.archivers.zip.X0017_StrongEncryptionHeader#assertDynamicLengthFits(String,int,int,int)",
        "org.apache.commons.compress.archivers.zip.PKWareExtraHeader.EncryptionAlgorithm.getAlgorithmByCode(int)",
        "org.apache.commons.compress.archivers.zip.PKWareExtraHeader.HashAlgorithm.getAlgorithmByCode(int)",
        "org.apache.commons.compress.archivers.zip.ZipLong.getValue(byte[],int)"
    ],
    "org.apache.commons.compress.utils.FlushShieldFilterOutputStream#FlushShieldFilterOutputStream(OutputStream)": ["org.apache.commons.compress.utils.FlushShieldFilterOutputStream.<init>()"],
    "org.apache.commons.compress.archivers.sevenz.SevenZFile#sanityCheckUnpackInfo(ByteBuffer,ArchiveStatistics)": [
        "org.apache.commons.compress.archivers.sevenz.SevenZFile#sanityCheckFolder(ByteBuffer,ArchiveStatistics)",
        "org.apache.commons.compress.archivers.sevenz.SevenZFile.getUnsignedByte(ByteBuffer)",
        "org.apache.commons.compress.archivers.sevenz.SevenZFile#readAllOrBits(ByteBuffer,int)",
        "org.apache.commons.compress.archivers.sevenz.NID.<staticinit>()",
        "org.apache.commons.compress.archivers.sevenz.SevenZFile.skipBytesFully(ByteBuffer,long)",
        "org.apache.commons.compress.archivers.sevenz.SevenZFile.readUint64(ByteBuffer)",
        "org.apache.commons.compress.archivers.sevenz.SevenZFile.assertFitsIntoNonNegativeInt(String,long)"
    ],
    "org.apache.commons.compress.archivers.ar.ArArchiveEntry#getSize()": ["org.apache.commons.compress.archivers.ar.ArArchiveEntry#getLength()"],
    "org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorOutputStream.Parameters.<staticinit>()": [
        "org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorOutputStream.BlockSize.<staticinit>()",
        "org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorOutputStream.Parameters#Parameters(BlockSize,boolean,boolean,boolean)"
    ],
    "org.apache.commons.compress.changes.ChangeSetPerformer.ArchiveInputStreamIterator#ArchiveInputStreamIterator(ArchiveInputStream<E extends ArchiveEntry>)": ["org.apache.commons.compress.changes.ChangeSetPerformer.ArchiveInputStreamIterator.<init>()"],
    "org.apache.commons.compress.archivers.zip.StreamCompressor.SeekableByteChannelCompressor#writeOut(byte[],int,int)": [
        "org.apache.commons.compress.utils.SeekableInMemoryByteChannel#write(ByteBuffer)",
        "org.apache.commons.compress.utils.MultiReadOnlySeekableByteChannel#write(ByteBuffer)"
    ],
    "org.apache.commons.compress.compressors.bzip2.Rand.rNums(int)": ["org.apache.commons.compress.compressors.bzip2.Rand.<staticinit>()"],
    "org.apache.commons.compress.utils.ByteUtils.OutputStreamByteConsumer#accept(int)": [
        "org.apache.commons.compress.archivers.sevenz.AES256SHA256Decoder.AES256SHA256DecoderOutputStream#write(int)",
        "org.apache.commons.compress.compressors.snappy.SnappyCompressorOutputStream#write(int)",
        "org.apache.commons.compress.archivers.sevenz.Coders.DeflateDecoder.DeflateDecoderOutputStream#write(int)",
        "org.apache.commons.compress.compressors.lz4.BlockLZ4CompressorOutputStream#write(int)",
        "org.apache.commons.compress.compressors.deflate.DeflateCompressorOutputStream#write(int)",
        "org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorOutputStream#write(int)",
        "org.apache.commons.compress.compressors.lzma.LZMACompressorOutputStream#write(int)",
        "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream#write(int)",
        "org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream#write(int)",
        "org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorOutputStream#write(int)",
        "org.apache.commons.compress.compressors.xz.XZCompressorOutputStream#write(int)",
        "org.apache.commons.compress.utils.FixedLengthBlockOutputStream#write(int)",
        "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.OutputStreamWrapper#write(int)",
        "org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream#write(int)",
        "org.apache.commons.compress.archivers.ArchiveOutputStream#write(int)",
        "org.apache.commons.compress.archivers.zip.ZipSplitOutputStream#write(int)",
        "org.apache.commons.compress.compressors.zstandard.ZstdCompressorOutputStream#write(int)",
        "org.apache.commons.compress.archivers.zip.RandomAccessOutputStream#write(int)"
    ],
    "org.apache.commons.compress.harmony.pack200.BHSDCodec#BHSDCodec(int,int,int)": ["org.apache.commons.compress.harmony.pack200.BHSDCodec#BHSDCodec(int,int,int,int)"],
    "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.OutputStreamWrapper#write(byte[],int,int)": [
        "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.OutputStreamWrapper.<staticinit>()",
        "org.apache.commons.compress.utils.SeekableInMemoryByteChannel#write(ByteBuffer)",
        "org.apache.commons.compress.utils.MultiReadOnlySeekableByteChannel#write(ByteBuffer)"
    ],
    "org.apache.commons.compress.harmony.pack200.CPMethodOrField#getClassIndex()": ["org.apache.commons.compress.harmony.pack200.ConstantPoolEntry#getIndex()"],
    "org.apache.commons.compress.harmony.unpack200.bytecode.ByteCode#toString()": [
        "org.apache.commons.compress.harmony.unpack200.bytecode.forms.ByteCodeForm#getName()",
        "org.apache.commons.compress.harmony.unpack200.bytecode.ByteCode#getByteCodeForm()"
    ],
    "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile#writeFileWindowsAttributes(DataOutput)": [
        "org.apache.commons.compress.archivers.sevenz.NID.<staticinit>()",
        "org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry#getHasWindowsAttributes()",
        "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile#writeUint64(DataOutput,long)",
        "org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry#getWindowsAttributes()",
        "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile#writeBits(DataOutput,BitSet,int)"
    ],
    "org.apache.commons.compress.harmony.pack200.BcBands#visitVarInsn(int,int)": [
        "org.apache.commons.compress.harmony.pack200.BcBands.<staticinit>()",
        "org.apache.commons.compress.harmony.pack200.BcBands#updateRenumbering()",
        "org.apache.commons.compress.harmony.pack200.IntList#add(int)"
    ],
    "org.apache.commons.compress.archivers.ArchiveStreamFactory#createArchiveOutputStream(String,OutputStream)": [
        "org.apache.commons.compress.archivers.ArchiveStreamFactory#createArchiveOutputStream(String,OutputStream,String)",
        "org.apache.commons.compress.archivers.ArchiveStreamFactory.<staticinit>()"
    ],
    "org.apache.commons.compress.harmony.unpack200.bytecode.InnerClassesAttribute#hashCode()": [
        "org.apache.commons.compress.harmony.unpack200.bytecode.Attribute#getAttributeName()",
        "org.apache.commons.compress.harmony.unpack200.bytecode.Attribute#hashCode()",
        "org.apache.commons.compress.harmony.unpack200.bytecode.CPUTF8#hashCode()"
    ],
    "org.apache.commons.compress.archivers.zip.StreamCompressor#writeDeflated(byte[],int,int)": [
        "org.apache.commons.compress.archivers.zip.StreamCompressor#deflateUntilInputIsNeeded()",
        "org.apache.commons.compress.archivers.zip.StreamCompressor.<staticinit>()"
    ],
    "org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream#Pack200CompressorOutputStream(OutputStream,Pack200Strategy,Map<String, String>)": [
        "org.apache.commons.compress.compressors.CompressorOutputStream.<init>()",
        "org.apache.commons.compress.compressors.pack200.Pack200Strategy$Pack200Strategy$1#newStreamBridge()",
        "org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream.<init>()"
    ],
    "org.apache.commons.compress.harmony.unpack200.ClassBands#parseFieldAttrBands(InputStream)": [
        "org.apache.commons.compress.harmony.unpack200.BandSet#decodeBandInt(String,InputStream,BHSDCodec,int[])",
        "org.apache.commons.compress.harmony.pack200.Codec.<staticinit>()",
        "org.apache.commons.compress.harmony.unpack200.AttributeLayoutMap#getAttributeLayout(String,int)",
        "org.apache.commons.compress.harmony.unpack200.AttributeLayout#getIndex()",
        "org.apache.commons.compress.harmony.unpack200.AttributeLayout#getValue(long,String,SegmentConstantPool)",
        "org.apache.commons.compress.harmony.unpack200.SegmentOptions#hasFieldFlagsHi()",
        "org.apache.commons.compress.harmony.unpack200.bytecode.SignatureAttribute#SignatureAttribute(CPUTF8)",
        "org.apache.commons.compress.harmony.unpack200.AttributeLayout#matches(long)",
        "org.apache.commons.compress.harmony.unpack200.SegmentUtils.countMatches(long[][],IMatcher)",
        "org.apache.commons.compress.harmony.unpack200.ClassBands#getCallCount(int[][],long[][],int)",
        "org.apache.commons.compress.harmony.unpack200.AttributeLayout#numBackwardsCallables()",
        "org.apache.commons.compress.harmony.unpack200.BandSet#parseFlags(String,InputStream,int[],BHSDCodec,boolean)",
        "org.apache.commons.compress.harmony.unpack200.ClassBands#parseFieldMetadataBands(InputStream,int[])",
        "org.apache.commons.compress.harmony.unpack200.NewAttributeBands#parseAttributes(InputStream,int)",
        "org.apache.commons.compress.harmony.unpack200.bytecode.ConstantValueAttribute#ConstantValueAttribute(ClassFileEntry)",
        "org.apache.commons.compress.harmony.unpack200.SegmentUtils.countBit16(long[][])",
        "org.apache.commons.compress.harmony.unpack200.AttributeLayoutMap#getAttributeBands(AttributeLayout)",
        "org.apache.commons.compress.harmony.unpack200.AttributeLayout#isDefaultLayout()",
        "org.apache.commons.compress.harmony.unpack200.BandSet#decodeBandInt(String,InputStream,BHSDCodec,int)",
        "org.apache.commons.compress.harmony.unpack200.CpBands#getConstantPool()",
        "org.apache.commons.compress.harmony.unpack200.AttributeLayout.<staticinit>()",
        "org.apache.commons.compress.harmony.unpack200.AttributeLayoutMap#getAttributeLayout(int,int)",
        "org.apache.commons.compress.harmony.unpack200.bytecode.DeprecatedAttribute#DeprecatedAttribute()",
        "org.apache.commons.compress.harmony.unpack200.NewAttributeBands#setBackwardsCalls(int[])"
    ],
    "org.apache.commons.compress.compressors.CompressorInputStream#getUncompressedCount()": ["org.apache.commons.compress.compressors.CompressorInputStream#getBytesRead()"],
    "org.apache.commons.compress.harmony.pack200.Segment.SegmentMethodVisitor#visitLookupSwitchInsn(Label,int[],Label[])": ["org.apache.commons.compress.harmony.pack200.BcBands#visitLookupSwitchInsn(Label,int[],Label[])"],
    "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.hbCreateDecodeTables(int[],int[],int[],char[],int,int,int)": [
        "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.checkBounds(int,int,String)",
        "org.apache.commons.compress.compressors.bzip2.BZip2Constants.<staticinit>()"
    ],
    "org.apache.commons.compress.compressors.pack200.AbstractStreamBridge#getInputStream()": [
        "org.apache.commons.compress.compressors.pack200.InMemoryCachingStreamBridge#createInputStream()",
        "org.apache.commons.compress.compressors.pack200.TempFileCachingStreamBridge#createInputStream()"
    ],
    "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream#checkIfNeedsZip64(Zip64Mode)": [
        "org.apache.commons.compress.archivers.zip.Zip64RequiredException.getEntryTooBigMessage(ZipArchiveEntry)",
        "org.apache.commons.compress.archivers.zip.Zip64RequiredException#Zip64RequiredException(String)",
        "org.apache.commons.compress.archivers.zip.Zip64Mode.<staticinit>()",
        "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream#isZip64Required(ZipArchiveEntry,Zip64Mode)"
    ],
    "org.apache.commons.compress.archivers.sevenz.AES256Options.newSecretKeySpec(byte[])": ["org.apache.commons.compress.archivers.sevenz.AES256Options.<staticinit>()"],
    "org.apache.commons.compress.utils.TimeUtils.toNtfsTime(long)": ["org.apache.commons.compress.utils.TimeUtils.<staticinit>()"],
    "org.apache.commons.compress.utils.ServiceLoaderIterator#next()": ["org.apache.commons.compress.utils.ServiceLoaderIterator#hasNext()"],
    "org.apache.commons.compress.harmony.unpack200.bytecode.forms.FloatRefForm#getPoolID()": ["org.apache.commons.compress.harmony.unpack200.SegmentConstantPool.<staticinit>()"],
    "org.apache.commons.compress.harmony.pack200.IntList#add(int)": ["org.apache.commons.compress.harmony.pack200.IntList#growAtEnd(int)"],
    "org.apache.commons.compress.harmony.unpack200.bytecode.OperandManager#globalConstantPool()": ["org.apache.commons.compress.harmony.unpack200.Segment#getConstantPool()"],
    "org.apache.commons.compress.harmony.pack200.Segment.SegmentMethodVisitor#visitAnnotationDefault()": [
        "org.apache.commons.compress.harmony.pack200.MetadataBandGroup.<staticinit>()",
        "org.apache.commons.compress.harmony.pack200.Segment.SegmentAnnotationVisitor#SegmentAnnotationVisitor(int)"
    ],
    "org.apache.commons.compress.harmony.unpack200.Pack200UnpackerAdapter#unpack(InputStream,JarOutputStream)": [
        "org.apache.commons.compress.harmony.unpack200.Archive#unpack()",
        "org.apache.commons.compress.harmony.pack200.Pack200Adapter#completed(double)",
        "org.apache.commons.compress.harmony.unpack200.Archive#Archive(InputStream,JarOutputStream)"
    ],
    "org.apache.commons.compress.archivers.cpio.CpioArchiveEntry#isPipe()": [
        "org.apache.commons.compress.archivers.cpio.CpioUtil.fileType(long)",
        "org.apache.commons.compress.archivers.cpio.CpioConstants.<staticinit>()"
    ],
    "org.apache.commons.compress.harmony.unpack200.bytecode.CPLong#toString()": ["org.apache.commons.compress.harmony.unpack200.bytecode.CPConstant#getValue()"],
    "org.apache.commons.compress.compressors.lzma.LZMAUtils.isLZMACompressionAvailable()": [
        "org.apache.commons.compress.compressors.lzma.LZMAUtils.CachedAvailability.<staticinit>()",
        "org.apache.commons.compress.compressors.lzma.LZMAUtils.<staticinit>()",
        "org.apache.commons.compress.compressors.lzma.LZMAUtils.internalIsLZMACompressionAvailable()"
    ],
    "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream#addPaxHeadersForBigNumbers(Map<String, String>,TarArchiveEntry)": [
        "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream#failForBigNumber(String,long,long)",
        "org.apache.commons.compress.archivers.tar.TarArchiveEntry#getDevMajor()",
        "org.apache.commons.compress.archivers.tar.TarArchiveEntry#getLastAccessTime()",
        "org.apache.commons.compress.archivers.tar.TarArchiveEntry#getLongUserId()",
        "org.apache.commons.compress.archivers.tar.TarConstants.<staticinit>()",
        "org.apache.commons.compress.archivers.tar.TarArchiveEntry#getStatusChangeTime()",
        "org.apache.commons.compress.archivers.tar.TarArchiveEntry#getMode()",
        "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream#addFileTimePaxHeader(Map<String, String>,String,FileTime)",
        "org.apache.commons.compress.archivers.tar.TarArchiveEntry#getCreationTime()",
        "org.apache.commons.compress.archivers.tar.TarArchiveEntry#getDevMinor()",
        "org.apache.commons.compress.archivers.tar.TarArchiveEntry#getLongGroupId()",
        "org.apache.commons.compress.archivers.tar.TarArchiveEntry#getLastModifiedTime()",
        "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream#addFileTimePaxHeaderForBigNumber(Map<String, String>,String,FileTime,long)",
        "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream#addPaxHeaderForBigNumber(Map<String, String>,String,long,long)",
        "org.apache.commons.compress.archivers.tar.TarArchiveEntry#getSize()"
    ],
    "org.apache.commons.compress.archivers.tar.TarFile#TarFile(SeekableByteChannel,int,int,String,boolean)": [
        "org.apache.commons.compress.archivers.tar.TarFile.<init>()",
        "org.apache.commons.compress.archivers.tar.TarFile#getNextTarEntry()",
        "org.apache.commons.compress.archivers.tar.TarArchiveEntry.<staticinit>()",
        "org.apache.commons.compress.archivers.zip.ZipEncodingHelper.getZipEncoding(String)"
    ],
    "org.apache.commons.compress.archivers.zip.ZipFile#ZipFile(Path,String,boolean,boolean)": [
        "org.apache.commons.compress.archivers.zip.ZipFile.newReadByteChannel(Path)",
        "org.apache.commons.compress.archivers.zip.ZipFile#ZipFile(SeekableByteChannel,String,String,boolean,boolean,boolean)"
    ],
    "org.apache.commons.compress.archivers.sevenz.CLI.Mode$Mode$1#takeAction(SevenZFile,SevenZArchiveEntry)": [
        "org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry#getCompressedSize()",
        "org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry#getName()",
        "org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry#isDirectory()",
        "org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry#getSize()",
        "org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry#getLastModifiedDate()",
        "org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry#getHasLastModifiedDate()",
        "org.apache.commons.compress.archivers.sevenz.CLI.Mode$Mode$1#getContentMethods(SevenZArchiveEntry)"
    ],
    "org.apache.commons.compress.archivers.tar.TarArchiveInputStream#readGlobalPaxHeaders()": [
        "org.apache.commons.compress.archivers.tar.TarUtils.parsePaxHeaders(InputStream,List<TarArchiveStructSparse>,Map<String, String>,long)",
        "org.apache.commons.compress.archivers.tar.TarArchiveInputStream#getNextEntry()"
    ],
    "org.apache.commons.compress.archivers.zip.SeekableChannelRandomAccessOutputStream#close()": [
        "org.apache.commons.compress.utils.SeekableInMemoryByteChannel#close()",
        "org.apache.commons.compress.utils.MultiReadOnlySeekableByteChannel#close()"
    ],
    "org.apache.commons.compress.compressors.zstandard.ZstdCompressorOutputStream#ZstdCompressorOutputStream(OutputStream,int,boolean,boolean)": [
        "org.apache.commons.compress.compressors.zstandard.ZstdCompressorOutputStream.<init>()",
        "org.apache.commons.compress.compressors.CompressorOutputStream.<init>()"
    ],
    "org.apache.commons.compress.utils.IOUtils#IOUtils()": ["org.apache.commons.compress.utils.IOUtils.<init>()"],
    "org.apache.commons.compress.archivers.sevenz.LZMA2Decoder#getOptionsFromCoder(Coder,InputStream)": ["org.apache.commons.compress.archivers.sevenz.LZMA2Decoder#getDictionarySize(Coder)"],
    "org.apache.commons.compress.archivers.zip.ZipArchiveEntry#addInfoZipExtendedTimestamp(FileTime,FileTime,FileTime)": [
        "org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp#setCreateFileTime(FileTime)",
        "org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp#setModifyFileTime(FileTime)",
        "org.apache.commons.compress.archivers.zip.ZipArchiveEntry#internalAddExtraField(ZipExtraField)",
        "org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp#X5455_ExtendedTimestamp()",
        "org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp#setAccessFileTime(FileTime)"
    ],
    "org.apache.commons.compress.archivers.tar.TarArchiveEntry#isFile()": [
        "org.apache.commons.compress.archivers.tar.TarConstants.<staticinit>()",
        "org.apache.commons.compress.archivers.tar.TarArchiveEntry#getName()"
    ],
    "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream#read(byte[],int,int)": [
        "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream#read0()",
        "org.apache.commons.compress.compressors.CompressorInputStream#count(int)"
    ],
    "org.apache.commons.compress.compressors.bzip2.BZip2Utils.isCompressedFilename(String)": [
        "org.apache.commons.compress.compressors.bzip2.BZip2Utils.<staticinit>()",
        "org.apache.commons.compress.compressors.FileNameUtil#isCompressedFileName(String)"
    ],
    "org.apache.commons.compress.compressors.lz77support.LZ77Compressor#compress(byte[],int,int)": [
        "org.apache.commons.compress.compressors.lz77support.LZ77Compressor#doCompress(byte[],int,int)",
        "org.apache.commons.compress.compressors.lz77support.Parameters#getWindowSize()"
    ],
    "org.apache.commons.compress.archivers.tar.TarArchiveEntry#TarArchiveEntry(File,String)": [
        "org.apache.commons.compress.archivers.tar.TarArchiveEntry.normalizeFileName(String,boolean)",
        "org.apache.commons.compress.archivers.tar.TarArchiveEntry.<init>()",
        "org.apache.commons.compress.utils.IOUtils.<staticinit>()"
    ],
    "org.apache.commons.compress.harmony.pack200.Segment.SegmentAnnotationVisitor#visitAnnotation(String,String)$AnnotationVisitor$1#visit(String,Object)": ["org.apache.commons.compress.harmony.pack200.Segment#addValueAndTag(Object,List<String>,List<Object>)"],
    "org.apache.commons.compress.harmony.unpack200.NewAttributeBands.Replication#addToAttribute(int,NewAttribute)": [
        "org.apache.commons.compress.harmony.unpack200.NewAttributeBands.UnionCase#addToAttribute(int,NewAttribute)",
        "org.apache.commons.compress.harmony.unpack200.NewAttributeBands.Call#addToAttribute(int,NewAttribute)",
        "org.apache.commons.compress.harmony.unpack200.NewAttributeBands.Integral#addToAttribute(int,NewAttribute)",
        "org.apache.commons.compress.harmony.unpack200.NewAttributeBands.Union#addToAttribute(int,NewAttribute)",
        "org.apache.commons.compress.harmony.unpack200.NewAttributeBands.Callable#addToAttribute(int,NewAttribute)",
        "org.apache.commons.compress.harmony.unpack200.NewAttributeBands.Reference#addToAttribute(int,NewAttribute)",
        "org.apache.commons.compress.harmony.unpack200.NewAttributeBands.Integral#getValue(int)",
        "org.apache.commons.compress.harmony.unpack200.NewAttributeBands.Replication#addToAttribute(int,NewAttribute)"
    ],
    "org.apache.commons.compress.archivers.sevenz.SevenZFile#SevenZFile(SeekableByteChannel,String,byte[])": [
        "org.apache.commons.compress.archivers.sevenz.SevenZFileOptions.<staticinit>()",
        "org.apache.commons.compress.archivers.sevenz.SevenZFile#SevenZFile(SeekableByteChannel,String,byte[],boolean,SevenZFileOptions)"
    ],
    "org.apache.commons.compress.archivers.zip.NioZipEncoding.encodeSurrogate(CharBuffer,char)": ["org.apache.commons.compress.archivers.zip.NioZipEncoding.<staticinit>()"],
    "org.apache.commons.compress.harmony.unpack200.bytecode.CPString#generateHashCode()": ["org.apache.commons.compress.harmony.unpack200.bytecode.CPUTF8#hashCode()"],
    "org.apache.commons.compress.harmony.unpack200.SegmentOptions#hasFileOptions()": ["org.apache.commons.compress.harmony.unpack200.SegmentOptions.<staticinit>()"],
    "org.apache.commons.compress.archivers.cpio.CpioArchiveEntry#getRemoteDevice()": ["org.apache.commons.compress.archivers.cpio.CpioArchiveEntry#checkOldFormat()"],
    "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream#setUseZip64(Zip64Mode)": ["org.apache.commons.compress.archivers.zip.Zip64Mode.<staticinit>()"],
    "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile#writeSubStreamsInfo(DataOutput)": ["org.apache.commons.compress.archivers.sevenz.NID.<staticinit>()"],
    "org.apache.commons.compress.harmony.pack200.AttributeDefinitionBands.AttributeDefinition#AttributeDefinition(int,int,CPUTF8,CPUTF8)": ["org.apache.commons.compress.harmony.pack200.AttributeDefinitionBands.AttributeDefinition.<init>()"],
    "org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream#close()": [
        "org.apache.commons.compress.archivers.zip.FileRandomAccessOutputStream#close()",
        "org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream#finish()",
        "org.apache.commons.compress.compressors.snappy.SnappyCompressorOutputStream#close()",
        "org.apache.commons.compress.compressors.deflate.DeflateCompressorOutputStream#close()",
        "org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream#close()",
        "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream#close()",
        "org.apache.commons.compress.compressors.lzma.LZMACompressorOutputStream#close()",
        "org.apache.commons.compress.utils.FixedLengthBlockOutputStream#close()",
        "org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorOutputStream#close()",
        "org.apache.commons.compress.compressors.xz.XZCompressorOutputStream#close()",
        "org.apache.commons.compress.archivers.zip.ZipSplitOutputStream#close()",
        "org.apache.commons.compress.archivers.zip.SeekableChannelRandomAccessOutputStream#close()",
        "org.apache.commons.compress.archivers.sevenz.Coders.DeflateDecoder.DeflateDecoderOutputStream#close()",
        "org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorOutputStream#close()",
        "org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream#close()",
        "org.apache.commons.compress.compressors.lz4.BlockLZ4CompressorOutputStream#close()",
        "org.apache.commons.compress.archivers.ar.ArArchiveOutputStream#close()",
        "org.apache.commons.compress.compressors.zstandard.ZstdCompressorOutputStream#close()",
        "org.apache.commons.compress.archivers.sevenz.AES256SHA256Decoder.AES256SHA256DecoderOutputStream#close()",
        "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream#close()",
        "org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream#close()",
        "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream#close()",
        "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.OutputStreamWrapper#close()"
    ],
    "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream#getCompressedCount()": ["org.apache.commons.compress.utils.BitInputStream#getBytesRead()"],
    "org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream#skipRemainderOfLastBlock()": [
        "org.apache.commons.compress.archivers.ArchiveInputStream#getBytesRead()",
        "org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream#skip(long)",
        "org.apache.commons.compress.archivers.dump.DumpArchiveInputStream#getBytesRead()"
    ],
    "org.apache.commons.compress.compressors.lzw.LZWInputStream#read(byte[],int,int)": [
        "org.apache.commons.compress.compressors.z.ZCompressorInputStream#decompressNextSymbol()",
        "org.apache.commons.compress.compressors.CompressorInputStream#count(int)",
        "org.apache.commons.compress.compressors.lzw.LZWInputStream#readFromStack(byte[],int,int)",
        "org.apache.commons.compress.archivers.zip.UnshrinkingInputStream#decompressNextSymbol()"
    ],
    "org.apache.commons.compress.harmony.pack200.Segment.SegmentMethodVisitor#visitParameterAnnotation(int,String,boolean)": [
        "org.apache.commons.compress.harmony.pack200.Segment.SegmentAnnotationVisitor#SegmentAnnotationVisitor(int,int,String,boolean)",
        "org.apache.commons.compress.harmony.pack200.MetadataBandGroup.<staticinit>()"
    ],
    "org.apache.commons.compress.compressors.snappy.SnappyCompressorInputStream#readSize()": ["org.apache.commons.compress.compressors.lz77support.AbstractLZ77CompressorInputStream#readOneByte()"],
    "org.apache.commons.compress.archivers.zip.StreamCompressor.SeekableByteChannelCompressor#SeekableByteChannelCompressor(Deflater,SeekableByteChannel)": [
        "org.apache.commons.compress.archivers.zip.StreamCompressor.SeekableByteChannelCompressor.<init>()",
        "org.apache.commons.compress.archivers.zip.StreamCompressor#StreamCompressor(Deflater)"
    ],
    "org.apache.commons.compress.archivers.zip.ZipShort.<staticinit>()": ["org.apache.commons.compress.archivers.zip.ZipShort#ZipShort(int)"],
    "org.apache.commons.compress.harmony.unpack200.bytecode.ByteCode#nestedMustStartClassPool()": [
        "org.apache.commons.compress.harmony.unpack200.bytecode.forms.NarrowClassRefForm#nestedMustStartClassPool()",
        "org.apache.commons.compress.harmony.unpack200.bytecode.forms.ByteCodeForm#nestedMustStartClassPool()",
        "org.apache.commons.compress.harmony.unpack200.bytecode.forms.SingleByteReferenceForm#nestedMustStartClassPool()"
    ],
    "org.apache.commons.compress.compressors.xz.XZUtils.isCompressedFilename(String)": [
        "org.apache.commons.compress.compressors.FileNameUtil#isCompressedFileName(String)",
        "org.apache.commons.compress.compressors.xz.XZUtils.<staticinit>()"
    ],
    "org.apache.commons.compress.archivers.zip.ZipArchiveEntry#removeExtraField(ZipShort)": [
        "org.apache.commons.compress.archivers.zip.ZipArchiveEntry#getExtraField(ZipShort)",
        "org.apache.commons.compress.archivers.zip.ZipArchiveEntry#internalRemoveExtraField(ZipShort)",
        "org.apache.commons.compress.archivers.zip.ZipArchiveEntry#setExtra()"
    ],
    "org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream#GzipCompressorInputStream(InputStream)": ["org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream#GzipCompressorInputStream(InputStream,boolean)"],
    "org.apache.commons.compress.compressors.CompressorStreamFactory.getSingleton()": ["org.apache.commons.compress.compressors.CompressorStreamFactory.<staticinit>()"],
    "org.apache.commons.compress.compressors.snappy.SnappyCompressorOutputStream#write(byte[],int,int)": ["org.apache.commons.compress.compressors.lz77support.LZ77Compressor#compress(byte[],int,int)"],
    "org.apache.commons.compress.harmony.unpack200.bytecode.forms.FieldRefForm#getPoolID()": ["org.apache.commons.compress.harmony.unpack200.SegmentConstantPool.<staticinit>()"],
    "org.apache.commons.compress.compressors.lz4.BlockLZ4CompressorOutputStream#clearUnusedBlocks()": ["org.apache.commons.compress.compressors.lz4.BlockLZ4CompressorInputStream.<staticinit>()"],
    "org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream#flush()": [
        "org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream#flush()",
        "org.apache.commons.compress.archivers.sevenz.AES256SHA256Decoder.AES256SHA256DecoderOutputStream#flush()",
        "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream#flush()",
        "org.apache.commons.compress.compressors.deflate.DeflateCompressorOutputStream#flush()",
        "org.apache.commons.compress.compressors.zstandard.ZstdCompressorOutputStream#flush()",
        "org.apache.commons.compress.compressors.lzma.LZMACompressorOutputStream#flush()",
        "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream#flush()",
        "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.OutputStreamWrapper#flush()",
        "org.apache.commons.compress.compressors.xz.XZCompressorOutputStream#flush()",
        "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream#flush()"
    ],
    "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream#transferModTime(TarArchiveEntry,TarArchiveEntry)": [
        "org.apache.commons.compress.utils.TimeUtils.unixTimeToFileTime(long)",
        "org.apache.commons.compress.archivers.tar.TarArchiveEntry#getLastModifiedTime()",
        "org.apache.commons.compress.archivers.tar.TarConstants.<staticinit>()",
        "org.apache.commons.compress.archivers.tar.TarArchiveEntry#setLastModifiedTime(FileTime)",
        "org.apache.commons.compress.utils.TimeUtils.toUnixTime(FileTime)"
    ],
    "org.apache.commons.compress.archivers.zip.X000A_NTFS#getCreateTime()": ["org.apache.commons.compress.archivers.zip.ZipEightByteInteger.<staticinit>()"],
    "org.apache.commons.compress.harmony.pack200.CPMethodOrField#getDescIndex()": ["org.apache.commons.compress.harmony.pack200.ConstantPoolEntry#getIndex()"],
    "org.apache.commons.compress.harmony.pack200.SegmentHeader#writeCpCounts(OutputStream)": [
        "org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream#write(byte[])",
        "org.apache.commons.compress.archivers.sevenz.Coders.DeflateDecoder.DeflateDecoderOutputStream#write(byte[])",
        "org.apache.commons.compress.harmony.pack200.Codec.<staticinit>()",
        "org.apache.commons.compress.harmony.pack200.BandSet#encodeScalar(int,BHSDCodec)",
        "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.OutputStreamWrapper#write(byte[])",
        "org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream#write(byte[])",
        "org.apache.commons.compress.archivers.zip.ZipSplitOutputStream#write(byte[])"
    ],
    "org.apache.commons.compress.harmony.unpack200.bytecode.CPString#CPString(CPUTF8,int)": [
        "org.apache.commons.compress.harmony.unpack200.bytecode.ConstantPoolEntry.<staticinit>()",
        "org.apache.commons.compress.harmony.unpack200.bytecode.CPString.<init>()",
        "org.apache.commons.compress.harmony.unpack200.bytecode.CPConstant#CPConstant(byte,Object,int)"
    ],
    "org.apache.commons.compress.archivers.zip.ZipArchiveEntry#isDirectory()": [
        "org.apache.commons.compress.archivers.zip.ZipArchiveEntry#getName()",
        "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.isDirectoryEntryName(String)"
    ],
    "org.apache.commons.compress.archivers.zip.ExtraFieldUtils.parse(byte[])": [
        "org.apache.commons.compress.archivers.zip.ExtraFieldUtils.parse(byte[],boolean,UnparseableExtraField)",
        "org.apache.commons.compress.archivers.zip.ExtraFieldUtils.UnparseableExtraField.<staticinit>()"
    ],
    "org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorOutputStream.<init>()": ["org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorOutputStream.<staticinit>()"],
    "org.apache.commons.compress.compressors.xz.XZUtils#XZUtils()": ["org.apache.commons.compress.compressors.xz.XZUtils.<init>()"],
    "org.apache.commons.compress.archivers.zip.ZipFile.StoredStatisticsStream#StoredStatisticsStream(InputStream)": ["org.apache.commons.compress.archivers.zip.ZipFile.StoredStatisticsStream.<init>()"],
    "org.apache.commons.compress.archivers.dump.DumpArchiveEntry#setName(String)": ["org.apache.commons.compress.archivers.dump.DumpArchiveEntry#isDirectory()"],
    "org.apache.commons.compress.archivers.dump.DumpArchiveEntry#isBlkDev()": ["org.apache.commons.compress.archivers.dump.DumpArchiveEntry.TYPE.<staticinit>()"],
    "org.apache.commons.compress.compressors.CompressorStreamFactory.getZstandard()": ["org.apache.commons.compress.compressors.CompressorStreamFactory.<staticinit>()"],
    "org.apache.commons.compress.utils.BitInputStream#processBitsGreater57(int)": ["org.apache.commons.compress.utils.BitInputStream.<staticinit>()"],
    "org.apache.commons.compress.archivers.zip.X7875_NewUnix#getGID()": ["org.apache.commons.compress.archivers.zip.ZipUtil.bigToLong(BigInteger)"],
    "org.apache.commons.compress.archivers.ArchiveEntry#resolveIn(Path)": [
        "org.apache.commons.compress.archivers.zip.ZipArchiveEntry#getName()",
        "org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry#getName()",
        "org.apache.commons.compress.archivers.arj.ArjArchiveEntry#getName()",
        "org.apache.commons.compress.archivers.dump.DumpArchiveEntry#getName()",
        "org.apache.commons.compress.archivers.ar.ArArchiveEntry#getName()",
        "org.apache.commons.compress.archivers.cpio.CpioArchiveEntry#getName()",
        "org.apache.commons.compress.archivers.tar.TarArchiveEntry#getName()"
    ],
    "org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream#closeArchiveEntry()": [
        "org.apache.commons.compress.archivers.cpio.CpioArchiveEntry#getSize()",
        "org.apache.commons.compress.archivers.cpio.CpioArchiveEntry#getDataPadCount()",
        "org.apache.commons.compress.archivers.cpio.CpioArchiveEntry#getFormat()",
        "org.apache.commons.compress.archivers.cpio.CpioConstants.<staticinit>()",
        "org.apache.commons.compress.archivers.cpio.CpioArchiveEntry#getChksum()",
        "org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream#ensureOpen()",
        "org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream#pad(int)"
    ],
    "org.apache.commons.compress.harmony.pack200.ClassBands#writeFieldAttributeBands(OutputStream)": [
        "org.apache.commons.compress.harmony.pack200.BandSet#encodeBandInt(String,int[],BHSDCodec)",
        "org.apache.commons.compress.harmony.pack200.MetadataBandGroup#pack(OutputStream)",
        "org.apache.commons.compress.harmony.pack200.Codec.<staticinit>()",
        "org.apache.commons.compress.harmony.pack200.NewAttributeBands#pack(OutputStream)",
        "org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream#write(byte[])",
        "org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream#write(byte[])",
        "org.apache.commons.compress.archivers.sevenz.Coders.DeflateDecoder.DeflateDecoderOutputStream#write(byte[])",
        "org.apache.commons.compress.harmony.pack200.BandSet#cpEntryListToArray(List<? extends ConstantPoolEntry>)",
        "org.apache.commons.compress.harmony.pack200.SegmentHeader#have_field_flags_hi()",
        "org.apache.commons.compress.harmony.pack200.PackingUtils.log(String)",
        "org.apache.commons.compress.harmony.pack200.BandSet#encodeFlags(String,long[][],BHSDCodec,BHSDCodec,boolean)",
        "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.OutputStreamWrapper#write(byte[])",
        "org.apache.commons.compress.archivers.zip.ZipSplitOutputStream#write(byte[])"
    ],
    "org.apache.commons.compress.archivers.dump.DumpArchiveConstants.SEGMENT_TYPE#SEGMENT_TYPE(int)": ["org.apache.commons.compress.archivers.dump.DumpArchiveConstants.SEGMENT_TYPE.<init>()"],
    "org.apache.commons.compress.harmony.unpack200.bytecode.CPDouble#CPDouble(Double,int)": [
        "org.apache.commons.compress.harmony.unpack200.bytecode.ConstantPoolEntry.<staticinit>()",
        "org.apache.commons.compress.harmony.unpack200.bytecode.CPDouble.<init>()",
        "org.apache.commons.compress.harmony.unpack200.bytecode.CPConstantNumber#CPConstantNumber(byte,Object,int)"
    ],
    "org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream#readOldBinaryEntry(boolean)": [
        "org.apache.commons.compress.archivers.cpio.CpioArchiveEntry#setMode(long)",
        "org.apache.commons.compress.archivers.cpio.CpioArchiveEntry#setRemoteDevice(long)",
        "org.apache.commons.compress.utils.ArchiveUtils.sanitize(String)",
        "org.apache.commons.compress.archivers.dump.DumpArchiveInputStream#getBytesRead()",
        "org.apache.commons.compress.archivers.cpio.CpioArchiveEntry#getHeaderPadCount(long)",
        "org.apache.commons.compress.archivers.cpio.CpioArchiveEntry#setTime(long)",
        "org.apache.commons.compress.archivers.cpio.CpioArchiveEntry#setSize(long)",
        "org.apache.commons.compress.archivers.cpio.CpioArchiveEntry#setGID(long)",
        "org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream#skip(int)",
        "org.apache.commons.compress.archivers.cpio.CpioArchiveEntry#getSize()",
        "org.apache.commons.compress.archivers.cpio.CpioArchiveEntry#setName(String)",
        "org.apache.commons.compress.archivers.cpio.CpioArchiveEntry#setNumberOfLinks(long)",
        "org.apache.commons.compress.archivers.cpio.CpioArchiveEntry#setInode(long)",
        "org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream#readCString(int)",
        "org.apache.commons.compress.archivers.cpio.CpioArchiveEntry#setUID(long)",
        "org.apache.commons.compress.archivers.cpio.CpioConstants.<staticinit>()",
        "org.apache.commons.compress.archivers.cpio.CpioArchiveEntry#CpioArchiveEntry(short)",
        "org.apache.commons.compress.archivers.cpio.CpioArchiveEntry#setDevice(long)",
        "org.apache.commons.compress.archivers.cpio.CpioUtil.fileType(long)",
        "org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream#readBinaryLong(int,boolean)",
        "org.apache.commons.compress.archivers.ArchiveInputStream#getBytesRead()"
    ],
    "org.apache.commons.compress.archivers.zip.UnrecognizedExtraField#setCentralDirectoryData(byte[])": ["org.apache.commons.compress.archivers.zip.ZipUtil.copy(byte[])"],
    "org.apache.commons.compress.archivers.sevenz.SevenZFile#skipEntriesWhenNeeded(int,boolean,int)": [
        "org.apache.commons.compress.archivers.sevenz.SevenZFile#reopenFolderInputStream(int,SevenZArchiveEntry)",
        "org.apache.commons.compress.utils.CRC32VerifyingInputStream#CRC32VerifyingInputStream(InputStream,long,long)",
        "org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry#getCrcValue()",
        "org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry#getSize()",
        "org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry#setContentMethods(Iterable<? extends SevenZMethodConfiguration>)",
        "org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry#getHasCrc()",
        "org.apache.commons.compress.utils.BoundedInputStream#BoundedInputStream(InputStream,long)",
        "org.apache.commons.compress.archivers.sevenz.SevenZFile#hasCurrentEntryBeenRead()",
        "org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry#getContentMethods()"
    ],
    "org.apache.commons.compress.archivers.cpio.CpioArchiveEntry#setRemoteDeviceMaj(long)": ["org.apache.commons.compress.archivers.cpio.CpioArchiveEntry#checkNewFormat()"],
    "org.apache.commons.compress.harmony.pack200.Codec.<staticinit>()": [
        "org.apache.commons.compress.harmony.pack200.BHSDCodec#BHSDCodec(int,int,int,int)",
        "org.apache.commons.compress.harmony.pack200.BHSDCodec#BHSDCodec(int,int,int)",
        "org.apache.commons.compress.harmony.pack200.BHSDCodec#BHSDCodec(int,int)"
    ],
    "org.apache.commons.compress.archivers.zip.ZipArchiveEntry#setTime(FileTime)": ["org.apache.commons.compress.archivers.zip.ZipArchiveEntry#setTime(FileTime)"],
    "org.apache.commons.compress.archivers.sevenz.StartHeader#StartHeader(long,long,long)": ["org.apache.commons.compress.archivers.sevenz.StartHeader.<init>()"],
    "org.apache.commons.compress.harmony.unpack200.CpBands#parseCpIMethod(InputStream)": [
        "org.apache.commons.compress.harmony.unpack200.BandSet#decodeBandInt(String,InputStream,BHSDCodec,int)",
        "org.apache.commons.compress.harmony.pack200.Codec.<staticinit>()",
        "org.apache.commons.compress.harmony.unpack200.SegmentHeader#getCpIMethodCount()"
    ],
    "org.apache.commons.compress.harmony.unpack200.SegmentConstantPool#getInitMethodPoolEntry(int,long,String)": [
        "org.apache.commons.compress.harmony.unpack200.CpBands#getCpMethodDescriptor()",
        "org.apache.commons.compress.harmony.unpack200.CpBands#getCpMethodClass()",
        "org.apache.commons.compress.harmony.unpack200.SegmentConstantPool#matchSpecificPoolEntryIndex(String[],String[],String,String,int)",
        "org.apache.commons.compress.harmony.unpack200.SegmentConstantPool#getConstantPoolEntry(int,long)",
        "org.apache.commons.compress.harmony.unpack200.SegmentConstantPool.<staticinit>()"
    ],
    "org.apache.commons.compress.archivers.ar.ArArchiveOutputStream#write(byte[],int,int)": [
        "org.apache.commons.compress.archivers.sevenz.Coders.DeflateDecoder.DeflateDecoderOutputStream#write(byte[],int,int)",
        "org.apache.commons.compress.utils.FixedLengthBlockOutputStream#write(byte[],int,int)",
        "org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorOutputStream#write(byte[],int,int)",
        "org.apache.commons.compress.archivers.ar.ArArchiveOutputStream#write(byte[],int,int)",
        "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream#write(byte[],int,int)",
        "org.apache.commons.compress.compressors.lzma.LZMACompressorOutputStream#write(byte[],int,int)",
        "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.OutputStreamWrapper#write(byte[],int,int)",
        "org.apache.commons.compress.compressors.zstandard.ZstdCompressorOutputStream#write(byte[],int,int)",
        "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream#write(byte[],int,int)",
        "org.apache.commons.compress.archivers.zip.FileRandomAccessOutputStream#write(byte[],int,int)",
        "org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream#write(byte[],int,int)",
        "org.apache.commons.compress.archivers.sevenz.AES256SHA256Decoder.AES256SHA256DecoderOutputStream#write(byte[],int,int)",
        "org.apache.commons.compress.archivers.zip.ZipSplitOutputStream#write(byte[],int,int)",
        "org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorOutputStream#write(byte[],int,int)",
        "org.apache.commons.compress.compressors.xz.XZCompressorOutputStream#write(byte[],int,int)",
        "org.apache.commons.compress.compressors.deflate.DeflateCompressorOutputStream#write(byte[],int,int)",
        "org.apache.commons.compress.archivers.ArchiveOutputStream#count(int)",
        "org.apache.commons.compress.archivers.zip.SeekableChannelRandomAccessOutputStream#write(byte[],int,int)",
        "org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream#write(byte[],int,int)",
        "org.apache.commons.compress.compressors.lz4.BlockLZ4CompressorOutputStream#write(byte[],int,int)",
        "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream#write(byte[],int,int)",
        "org.apache.commons.compress.compressors.snappy.SnappyCompressorOutputStream#write(byte[],int,int)",
        "org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream#write(byte[],int,int)"
    ],
    "org.apache.commons.compress.compressors.CompressorStreamProvider#createCompressorOutputStream(String,OutputStream)": ["org.apache.commons.compress.compressors.CompressorStreamFactory.<staticinit>()"],
    "org.apache.commons.compress.compressors.brotli.BrotliCompressorInputStream#BrotliCompressorInputStream(InputStream)": [
        "org.apache.commons.compress.compressors.CompressorInputStream.<init>()",
        "org.apache.commons.compress.compressors.brotli.BrotliCompressorInputStream.<init>()"
    ],
    "org.apache.commons.compress.compressors.lz4.BlockLZ4CompressorOutputStream.Pair.writeLength(int,OutputStream)": [
        "org.apache.commons.compress.archivers.sevenz.AES256SHA256Decoder.AES256SHA256DecoderOutputStream#write(int)",
        "org.apache.commons.compress.compressors.snappy.SnappyCompressorOutputStream#write(int)",
        "org.apache.commons.compress.archivers.sevenz.Coders.DeflateDecoder.DeflateDecoderOutputStream#write(int)",
        "org.apache.commons.compress.compressors.lz4.BlockLZ4CompressorOutputStream#write(int)",
        "org.apache.commons.compress.compressors.deflate.DeflateCompressorOutputStream#write(int)",
        "org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorOutputStream#write(int)",
        "org.apache.commons.compress.compressors.lzma.LZMACompressorOutputStream#write(int)",
        "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream#write(int)",
        "org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream#write(int)",
        "org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorOutputStream#write(int)",
        "org.apache.commons.compress.compressors.xz.XZCompressorOutputStream#write(int)",
        "org.apache.commons.compress.utils.FixedLengthBlockOutputStream#write(int)",
        "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.OutputStreamWrapper#write(int)",
        "org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream#write(int)",
        "org.apache.commons.compress.archivers.ArchiveOutputStream#write(int)",
        "org.apache.commons.compress.archivers.zip.ZipSplitOutputStream#write(int)",
        "org.apache.commons.compress.compressors.zstandard.ZstdCompressorOutputStream#write(int)",
        "org.apache.commons.compress.archivers.zip.RandomAccessOutputStream#write(int)"
    ],
    "org.apache.commons.compress.archivers.zip.ZipFile#canReadEntryData(ZipArchiveEntry)": ["org.apache.commons.compress.archivers.zip.ZipUtil.canHandleEntryData(ZipArchiveEntry)"],
    "org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp#getLocalFileDataData()": [
        "org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp.<staticinit>()",
        "org.apache.commons.compress.archivers.zip.ZipLong#getBytes()",
        "org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp#getLocalFileDataLength()",
        "org.apache.commons.compress.archivers.zip.ZipShort#getValue()"
    ],
    "org.apache.commons.compress.harmony.unpack200.Segment#readSegment(InputStream)": [
        "org.apache.commons.compress.harmony.unpack200.FileBands#processFileBits()",
        "org.apache.commons.compress.harmony.unpack200.AttrDefinitionBands#AttrDefinitionBands(Segment)",
        "org.apache.commons.compress.harmony.unpack200.Segment.<staticinit>()",
        "org.apache.commons.compress.harmony.unpack200.ClassBands#ClassBands(Segment)",
        "org.apache.commons.compress.harmony.unpack200.CpBands#CpBands(Segment)",
        "org.apache.commons.compress.harmony.unpack200.BcBands#read(InputStream)",
        "org.apache.commons.compress.harmony.unpack200.ClassBands#read(InputStream)",
        "org.apache.commons.compress.harmony.unpack200.FileBands#read(InputStream)",
        "org.apache.commons.compress.harmony.unpack200.Segment#log(int,String)",
        "org.apache.commons.compress.harmony.unpack200.BcBands#BcBands(Segment)",
        "org.apache.commons.compress.harmony.unpack200.CpBands#read(InputStream)",
        "org.apache.commons.compress.harmony.unpack200.AttrDefinitionBands#read(InputStream)",
        "org.apache.commons.compress.harmony.unpack200.IcBands#IcBands(Segment)",
        "org.apache.commons.compress.harmony.unpack200.FileBands#FileBands(Segment)",
        "org.apache.commons.compress.harmony.unpack200.IcBands#read(InputStream)"
    ],
    "org.apache.commons.compress.harmony.unpack200.CpBands#cpUTF8Value(String,boolean)": [
        "org.apache.commons.compress.harmony.unpack200.CpBands#cpSignatureValue(int)",
        "org.apache.commons.compress.harmony.unpack200.bytecode.CPUTF8#CPUTF8(String,int)",
        "org.apache.commons.compress.harmony.unpack200.CpBands#cpUTF8Value(int)"
    ],
    "org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorOutputStream#write(byte[],int,int)": ["org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorOutputStream#flushBuffer()"],
    "org.apache.commons.compress.archivers.zip.X000A_NTFS#getModifyFileTime()": ["org.apache.commons.compress.archivers.zip.X000A_NTFS.zipToFileTime(ZipEightByteInteger)"],
    "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream#writeLocalFileHeader(ZipArchiveEntry,boolean)": [
        "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream#writeCounted(byte[])",
        "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.UnicodeExtraFieldPolicy.<staticinit>()",
        "org.apache.commons.compress.archivers.tar.TarUtils$ZipEncoding$1#canEncode(String)",
        "org.apache.commons.compress.archivers.zip.ZipArchiveEntry#getName()",
        "org.apache.commons.compress.archivers.zip.ZipArchiveEntry#setDiskNumberStart(long)",
        "org.apache.commons.compress.archivers.zip.NioZipEncoding#canEncode(String)",
        "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.<staticinit>()",
        "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream#usesDataDescriptor(int,boolean)",
        "org.apache.commons.compress.archivers.zip.ZipArchiveEntry#getMethod()",
        "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.EntryMetaData#EntryMetaData(long,boolean)",
        "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream#addUnicodeExtraFields(ZipArchiveEntry,boolean,ByteBuffer)",
        "org.apache.commons.compress.archivers.zip.ZipSplitOutputStream#getCurrentSplitSegmentBytesWritten()",
        "org.apache.commons.compress.archivers.zip.ZipSplitOutputStream#getCurrentSplitSegmentIndex()",
        "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream#getName(ZipArchiveEntry)",
        "org.apache.commons.compress.archivers.zip.StreamCompressor#getTotalBytesWritten()",
        "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream#createLocalFileHeader(ZipArchiveEntry,ByteBuffer,boolean,boolean,long)"
    ],
    "org.apache.commons.compress.utils.MultiReadOnlySeekableByteChannel.forSeekableByteChannels(SeekableByteChannel[]...)": ["org.apache.commons.compress.utils.MultiReadOnlySeekableByteChannel#MultiReadOnlySeekableByteChannel(List<SeekableByteChannel>)"],
    "org.apache.commons.compress.compressors.xz.XZUtils.getUncompressedFileName(String)": [
        "org.apache.commons.compress.compressors.FileNameUtil#getUncompressedFileName(String)",
        "org.apache.commons.compress.compressors.xz.XZUtils.<staticinit>()"
    ],
    "org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField#getCentralDirectoryLength()": [
        "org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField#assembleData()",
        "org.apache.commons.compress.archivers.zip.ZipShort#ZipShort(int)"
    ],
    "org.apache.commons.compress.harmony.pack200.CPClass#CPClass(CPUTF8)": [
        "org.apache.commons.compress.harmony.pack200.CPConstant.<init>()",
        "org.apache.commons.compress.harmony.pack200.CPUTF8#getUnderlyingString()",
        "org.apache.commons.compress.harmony.pack200.CPClass.<init>()"
    ],
    "org.apache.commons.compress.harmony.unpack200.bytecode.forms.ThisFieldRefForm#context(OperandManager)": ["org.apache.commons.compress.harmony.unpack200.bytecode.OperandManager#getCurrentClass()"],
    "org.apache.commons.compress.compressors.lzw.LZWInputStream#close()": ["org.apache.commons.compress.utils.BitInputStream#close()"],
    "org.apache.commons.compress.utils.Lists.newArrayList(Iterator<? extends E>)": [
        "org.apache.commons.compress.utils.Iterators.addAll(Collection<T>,Iterator<? extends T>)",
        "org.apache.commons.compress.utils.Lists.newArrayList()"
    ],
    "org.apache.commons.compress.harmony.pack200.CPNameAndType#compareTo(Object)": [
        "org.apache.commons.compress.harmony.pack200.CPUTF8#compareTo(Object)",
        "org.apache.commons.compress.harmony.pack200.CPSignature#compareTo(Object)"
    ],
    "org.apache.commons.compress.compressors.lz4.BlockLZ4CompressorOutputStream#rewriteLastPairs()": [
        "org.apache.commons.compress.utils.ServiceLoaderIterator#next()",
        "org.apache.commons.compress.compressors.lz4.BlockLZ4CompressorOutputStream.Pair.<init>()",
        "org.apache.commons.compress.compressors.lz4.BlockLZ4CompressorOutputStream.Pair#backReferenceLength()",
        "org.apache.commons.compress.compressors.lz4.BlockLZ4CompressorOutputStream.Pair#hasBackReference()",
        "org.apache.commons.compress.compressors.lz4.BlockLZ4CompressorOutputStream#expand(int,int)",
        "org.apache.commons.compress.compressors.lz4.BlockLZ4CompressorOutputStream.Pair#hasBeenWritten()",
        "org.apache.commons.compress.compressors.lz4.BlockLZ4CompressorOutputStream.Pair#splitWithNewBackReferenceLengthOf(int)",
        "org.apache.commons.compress.compressors.lz4.BlockLZ4CompressorOutputStream.<staticinit>()",
        "org.apache.commons.compress.compressors.lz4.BlockLZ4CompressorOutputStream.Pair#prependTo(Pair)",
        "org.apache.commons.compress.compressors.lz4.BlockLZ4CompressorOutputStream.Pair#prependLiteral(byte[])",
        "org.apache.commons.compress.utils.ServiceLoaderIterator#hasNext()",
        "org.apache.commons.compress.compressors.lz4.BlockLZ4CompressorOutputStream.Pair#length()"
    ],
    "org.apache.commons.compress.harmony.pack200.Archive.PackingFile#PackingFile(byte[],JarEntry)": ["org.apache.commons.compress.harmony.pack200.Archive.PackingFile.<init>()"],
    "org.apache.commons.compress.archivers.sevenz.AES256SHA256Decoder#getOptionsAsProperties(Object)": [
        "org.apache.commons.compress.archivers.sevenz.AES256Options#getIv()",
        "org.apache.commons.compress.archivers.sevenz.AES256Options#getSalt()",
        "org.apache.commons.compress.archivers.sevenz.AES256Options#getNumCyclesPower()"
    ],
    "org.apache.commons.compress.archivers.zip.ResourceAlignmentExtraField#parseFromCentralDirectoryData(byte[],int,int)": [
        "org.apache.commons.compress.archivers.zip.ResourceAlignmentExtraField.<staticinit>()",
        "org.apache.commons.compress.archivers.zip.ZipShort.getValue(byte[],int)"
    ],
    "org.apache.commons.compress.compressors.pack200.Pack200Utils#Pack200Utils()": ["org.apache.commons.compress.compressors.pack200.Pack200Utils.<init>()"],
    "org.apache.commons.compress.compressors.pack200.AbstractStreamBridge#AbstractStreamBridge(OutputStream)": ["org.apache.commons.compress.compressors.pack200.AbstractStreamBridge.<init>()"],
    "org.apache.commons.compress.harmony.unpack200.bytecode.ByteCode#ByteCode(int,ClassFileEntry[])": [
        "org.apache.commons.compress.harmony.unpack200.bytecode.forms.ByteCodeForm#getRewriteCopy()",
        "org.apache.commons.compress.harmony.unpack200.bytecode.ByteCode.<init>()",
        "org.apache.commons.compress.harmony.unpack200.bytecode.forms.ByteCodeForm.get(int)",
        "org.apache.commons.compress.harmony.unpack200.bytecode.ClassFileEntry.<init>()"
    ],
    "org.apache.commons.compress.archivers.zip.JarMarker#getHeaderId()": ["org.apache.commons.compress.archivers.zip.JarMarker.<staticinit>()"],
    "org.apache.commons.compress.java.util.jar.Pack200.newUnpacker()": [
        "org.apache.commons.compress.java.util.jar.Pack200.<staticinit>()",
        "org.apache.commons.compress.java.util.jar.Pack200.newInstance(String,String)"
    ],
    "org.apache.commons.compress.archivers.zip.X000A_NTFS#getLocalFileDataLength()": ["org.apache.commons.compress.archivers.zip.ZipShort#ZipShort(int)"],
    "org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry#hashCode()": ["org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry#getName()"],
    "org.apache.commons.compress.harmony.unpack200.bytecode.forms.StringRefForm#getPoolID()": ["org.apache.commons.compress.harmony.unpack200.SegmentConstantPool.<staticinit>()"],
    "org.apache.commons.compress.archivers.ar.ArArchiveInputStream#asInt(byte[],int,int,int,boolean)": [
        "org.apache.commons.compress.utils.ArchiveUtils.toAsciiString(byte[],int,int)",
        "org.apache.commons.compress.utils.ParsingUtils.parseIntValue(String,int)"
    ],
    "org.apache.commons.compress.harmony.unpack200.NewAttributeBands.Reference#readBands(InputStream,int)": [
        "org.apache.commons.compress.harmony.unpack200.BandSet#parseCPLongReferences(String,InputStream,BHSDCodec,int)",
        "org.apache.commons.compress.harmony.pack200.Codec.<staticinit>()",
        "org.apache.commons.compress.harmony.unpack200.BandSet#parseCPFieldRefReferences(String,InputStream,BHSDCodec,int)",
        "org.apache.commons.compress.harmony.unpack200.BandSet#parseCPStringReferences(String,InputStream,BHSDCodec,int)",
        "org.apache.commons.compress.harmony.unpack200.BandSet#parseCPUTF8References(String,InputStream,BHSDCodec,int)",
        "org.apache.commons.compress.harmony.unpack200.BandSet#parseCPSignatureReferences(String,InputStream,BHSDCodec,int)",
        "org.apache.commons.compress.harmony.unpack200.BandSet#parseCPDescriptorReferences(String,InputStream,BHSDCodec,int)",
        "org.apache.commons.compress.harmony.unpack200.BandSet#parseCPMethodRefReferences(String,InputStream,BHSDCodec,int)",
        "org.apache.commons.compress.harmony.unpack200.BandSet#parseCPDoubleReferences(String,InputStream,BHSDCodec,int)",
        "org.apache.commons.compress.harmony.unpack200.BandSet#parseCPInterfaceMethodRefReferences(String,InputStream,BHSDCodec,int)",
        "org.apache.commons.compress.harmony.unpack200.AttributeLayout#getName()",
        "org.apache.commons.compress.harmony.unpack200.BandSet#parseCPIntReferences(String,InputStream,BHSDCodec,int)",
        "org.apache.commons.compress.harmony.unpack200.BandSet#parseCPFloatReferences(String,InputStream,BHSDCodec,int)",
        "org.apache.commons.compress.harmony.unpack200.BandSet#parseCPClassReferences(String,InputStream,BHSDCodec,int)"
    ],
    "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream#ZipArchiveInputStream(InputStream)": ["org.apache.commons.compress.archivers.zip.ZipArchiveInputStream#ZipArchiveInputStream(InputStream,String)"],
    "org.apache.commons.compress.archivers.zip.ZipFile#setSizesAndOffsetFromZip64Extra(ZipArchiveEntry)": [
        "org.apache.commons.compress.archivers.zip.ZipEightByteInteger#getLongValue()",
        "org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField#getDiskStartNumber()",
        "org.apache.commons.compress.archivers.zip.ZipEightByteInteger#ZipEightByteInteger(long)",
        "org.apache.commons.compress.archivers.zip.ZipArchiveEntry#setDiskNumberStart(long)",
        "org.apache.commons.compress.archivers.zip.ZipArchiveEntry#getDiskNumberStart()",
        "org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField#getCompressedSize()",
        "org.apache.commons.compress.archivers.zip.ZipArchiveEntry#getLocalHeaderOffset()",
        "org.apache.commons.compress.archivers.zip.ZipConstants.<staticinit>()",
        "org.apache.commons.compress.archivers.zip.ZipArchiveEntry#setSize(long)",
        "org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField#setCompressedSize(ZipEightByteInteger)",
        "org.apache.commons.compress.archivers.zip.ZipArchiveEntry#getSize()",
        "org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField#getRelativeHeaderOffset()",
        "org.apache.commons.compress.archivers.zip.ZipArchiveEntry#setLocalHeaderOffset(long)",
        "org.apache.commons.compress.archivers.zip.ZipArchiveEntry#getExtraField(ZipShort)",
        "org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField.<staticinit>()",
        "org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField#getSize()",
        "org.apache.commons.compress.archivers.zip.ZipLong#getValue()",
        "org.apache.commons.compress.archivers.zip.ZipEightByteInteger#ZipEightByteInteger(BigInteger)",
        "org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField#reparseCentralDirectoryData(boolean,boolean,boolean,boolean)",
        "org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField#setSize(ZipEightByteInteger)"
    ],
    "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream#closeCopiedEntry(boolean)": [
        "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream#getEffectiveZip64Mode(ZipArchiveEntry)",
        "org.apache.commons.compress.archivers.zip.Zip64Mode.<staticinit>()",
        "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream#checkIfNeedsZip64(Zip64Mode)",
        "org.apache.commons.compress.archivers.zip.ZipArchiveEntry#getSize()",
        "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream#closeEntry(boolean,boolean)",
        "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream#preClose()"
    ],
    "org.apache.commons.compress.changes.ChangeSetPerformer.ZipFileIterator#getInputStream()": ["org.apache.commons.compress.archivers.zip.ZipFile#getInputStream(ZipArchiveEntry)"],
    "org.apache.commons.compress.archivers.Lister#listStream(Path,String[])": [
        "org.apache.commons.compress.archivers.Lister#println(ArchiveEntry)",
        "org.apache.commons.compress.archivers.Lister#println(String)",
        "org.apache.commons.compress.archivers.Lister.createArchiveInputStream(String[],InputStream)"
    ],
    "org.apache.commons.compress.archivers.zip.ZipSplitOutputStream#ZipSplitOutputStream(Path,long)": [
        "org.apache.commons.compress.archivers.zip.ZipSplitOutputStream.<staticinit>()",
        "org.apache.commons.compress.archivers.zip.ZipSplitOutputStream#writeZipSplitSignature()",
        "org.apache.commons.compress.archivers.zip.ZipSplitOutputStream.<init>()",
        "org.apache.commons.compress.archivers.zip.FileRandomAccessOutputStream#FileRandomAccessOutputStream(Path)",
        "org.apache.commons.compress.archivers.zip.RandomAccessOutputStream.<init>()",
        "org.apache.commons.compress.archivers.zip.FileRandomAccessOutputStream#channel()"
    ],
    "org.apache.commons.compress.utils.CountingInputStream#read()": [
        "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream#read()",
        "org.apache.commons.compress.archivers.sevenz.AES256SHA256Decoder.AES256SHA256DecoderInputStream#read()",
        "org.apache.commons.compress.compressors.xz.XZCompressorInputStream#read()",
        "org.apache.commons.compress.utils.CountingInputStream#count(long)",
        "org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorInputStream#read()",
        "org.apache.commons.compress.compressors.lz77support.AbstractLZ77CompressorInputStream#read()",
        "org.apache.commons.compress.compressors.deflate.DeflateCompressorInputStream#read()",
        "org.apache.commons.compress.archivers.zip.ExplodingInputStream#read()",
        "org.apache.commons.compress.compressors.lzma.LZMACompressorInputStream#read()",
        "org.apache.commons.compress.compressors.zstandard.ZstdCompressorInputStream#read()",
        "org.apache.commons.compress.archivers.sevenz.BoundedSeekableByteChannelInputStream#read()",
        "org.apache.commons.compress.utils.BoundedArchiveInputStream#read()",
        "org.apache.commons.compress.compressors.brotli.BrotliCompressorInputStream#read()",
        "org.apache.commons.compress.archivers.tar.TarArchiveSparseZeroInputStream#read()",
        "org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream#read()",
        "org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStream#read()",
        "org.apache.commons.compress.compressors.deflate64.Deflate64CompressorInputStream#read()",
        "org.apache.commons.compress.compressors.lzw.LZWInputStream#read()",
        "org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream#read()"
    ],
    "org.apache.commons.compress.compressors.deflate.DeflateCompressorInputStream#DeflateCompressorInputStream(InputStream)": [
        "org.apache.commons.compress.compressors.deflate.DeflateParameters.<init>()",
        "org.apache.commons.compress.compressors.deflate.DeflateCompressorInputStream#DeflateCompressorInputStream(InputStream,DeflateParameters)"
    ],
    "org.apache.commons.compress.harmony.unpack200.bytecode.CPNameAndType#generateHashCode()": ["org.apache.commons.compress.harmony.unpack200.bytecode.CPUTF8#hashCode()"],
    "org.apache.commons.compress.harmony.pack200.RunCodec#encode(int,int)": ["org.apache.commons.compress.harmony.pack200.Pack200Exception#Pack200Exception(String)"],
    "org.apache.commons.compress.harmony.unpack200.bytecode.ByteCode#getNestedPosition(int)": ["org.apache.commons.compress.harmony.unpack200.bytecode.ByteCode#getNestedPositions()"],
    "org.apache.commons.compress.archivers.zip.ZipEightByteInteger#ZipEightByteInteger(long)": ["org.apache.commons.compress.archivers.zip.ZipEightByteInteger#ZipEightByteInteger(BigInteger)"],
    "org.apache.commons.compress.harmony.unpack200.CpBands#cpUTF8Value(String)": ["org.apache.commons.compress.harmony.unpack200.CpBands#cpUTF8Value(String,boolean)"],
    "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile#writeFileATimes(DataOutput)": [
        "org.apache.commons.compress.archivers.sevenz.NID.<staticinit>()",
        "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile#writeUint64(DataOutput,long)",
        "org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry#getAccessTime()",
        "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile#writeBits(DataOutput,BitSet,int)",
        "org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry#getHasAccessDate()"
    ],
    "org.apache.commons.compress.harmony.unpack200.MetadataBandGroup.setRvpaAttributeName(CPUTF8)": ["org.apache.commons.compress.harmony.unpack200.MetadataBandGroup.<staticinit>()"],
    "org.apache.commons.compress.archivers.zip.X7875_NewUnix#getCentralDirectoryData()": ["org.apache.commons.compress.utils.ByteUtils.<staticinit>()"],
    "org.apache.commons.compress.compressors.lz77support.LZ77Compressor#doCompress(byte[],int,int)": [
        "org.apache.commons.compress.compressors.lz77support.LZ77Compressor#slide()",
        "org.apache.commons.compress.compressors.lz77support.LZ77Compressor#compress()",
        "org.apache.commons.compress.compressors.lz77support.LZ77Compressor#initialize()",
        "org.apache.commons.compress.compressors.lz77support.Parameters#getMinBackReferenceLength()"
    ],
    "org.apache.commons.compress.archivers.sevenz.SevenZFile#read()": [
        "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream#read()",
        "org.apache.commons.compress.archivers.sevenz.AES256SHA256Decoder.AES256SHA256DecoderInputStream#read()",
        "org.apache.commons.compress.compressors.xz.XZCompressorInputStream#read()",
        "org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorInputStream#read()",
        "org.apache.commons.compress.compressors.lz77support.AbstractLZ77CompressorInputStream#read()",
        "org.apache.commons.compress.compressors.deflate.DeflateCompressorInputStream#read()",
        "org.apache.commons.compress.archivers.zip.ExplodingInputStream#read()",
        "org.apache.commons.compress.compressors.lzma.LZMACompressorInputStream#read()",
        "org.apache.commons.compress.compressors.zstandard.ZstdCompressorInputStream#read()",
        "org.apache.commons.compress.archivers.sevenz.SevenZFile#getCurrentStream()",
        "org.apache.commons.compress.archivers.sevenz.BoundedSeekableByteChannelInputStream#read()",
        "org.apache.commons.compress.utils.BoundedArchiveInputStream#read()",
        "org.apache.commons.compress.compressors.brotli.BrotliCompressorInputStream#read()",
        "org.apache.commons.compress.archivers.tar.TarArchiveSparseZeroInputStream#read()",
        "org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream#read()",
        "org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStream#read()",
        "org.apache.commons.compress.compressors.deflate64.Deflate64CompressorInputStream#read()",
        "org.apache.commons.compress.compressors.lzw.LZWInputStream#read()",
        "org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream#read()"
    ],
    "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream#read(byte[],int,int)": [
        "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream#supportsDataDescriptorFor(ZipArchiveEntry)",
        "org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorInputStream#read(byte[],int,int)",
        "org.apache.commons.compress.archivers.sevenz.BoundedSeekableByteChannelInputStream#read(byte[],int,int)",
        "org.apache.commons.compress.archivers.sevenz.AES256SHA256Decoder.AES256SHA256DecoderInputStream#read(byte[],int,int)",
        "org.apache.commons.compress.archivers.zip.ZipArchiveEntry#getMethod()",
        "org.apache.commons.compress.utils.BoundedArchiveInputStream#read(byte[],int,int)",
        "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream#read(byte[],int,int)",
        "org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStream#read(byte[],int,int)",
        "org.apache.commons.compress.archivers.zip.UnsupportedZipFeatureException#UnsupportedZipFeatureException(ZipMethod,ZipArchiveEntry)",
        "org.apache.commons.compress.archivers.zip.UnsupportedZipFeatureException.Feature.<staticinit>()",
        "org.apache.commons.compress.archivers.zip.UnsupportedZipFeatureException#UnsupportedZipFeatureException(Feature,ZipArchiveEntry)",
        "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream#supportsCompressedSizeFor(ZipArchiveEntry)",
        "org.apache.commons.compress.compressors.zstandard.ZstdCompressorInputStream#read(byte[],int,int)",
        "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream#readDeflated(byte[],int,int)",
        "org.apache.commons.compress.compressors.deflate64.Deflate64CompressorInputStream#read(byte[],int,int)",
        "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.<staticinit>()",
        "org.apache.commons.compress.compressors.brotli.BrotliCompressorInputStream#read(byte[],int,int)",
        "org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream#read(byte[],int,int)",
        "org.apache.commons.compress.compressors.lzma.LZMACompressorInputStream#read(byte[],int,int)",
        "org.apache.commons.compress.compressors.lz4.BlockLZ4CompressorInputStream#read(byte[],int,int)",
        "org.apache.commons.compress.compressors.snappy.SnappyCompressorInputStream#read(byte[],int,int)",
        "org.apache.commons.compress.compressors.xz.XZCompressorInputStream#read(byte[],int,int)",
        "org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream#read(byte[],int,int)",
        "org.apache.commons.compress.compressors.lzw.LZWInputStream#read(byte[],int,int)",
        "org.apache.commons.compress.archivers.zip.ZipMethod#getCode()",
        "org.apache.commons.compress.archivers.zip.ZipMethod.getMethodByCode(int)",
        "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream#readStored(byte[],int,int)",
        "org.apache.commons.compress.archivers.zip.ZipMethod.<staticinit>()",
        "org.apache.commons.compress.archivers.zip.ZipUtil.checkRequestedFeatures(ZipArchiveEntry)",
        "org.apache.commons.compress.compressors.deflate.DeflateCompressorInputStream#read(byte[],int,int)"
    ],
    "org.apache.commons.compress.archivers.tar.TarArchiveEntry.fileTimeFromOptionalSeconds(long)": ["org.apache.commons.compress.utils.TimeUtils.unixTimeToFileTime(long)"],
    "org.apache.commons.compress.archivers.zip.ZipArchiveEntry#setExtraTimeFields()": [
        "org.apache.commons.compress.archivers.zip.ZipArchiveEntry#setExtra()",
        "org.apache.commons.compress.archivers.zip.X000A_NTFS.<staticinit>()",
        "org.apache.commons.compress.archivers.zip.ZipArchiveEntry#addInfoZipExtendedTimestamp(FileTime,FileTime,FileTime)",
        "org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp.<staticinit>()",
        "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.canConvertToInfoZipExtendedTimestamp(FileTime,FileTime,FileTime)",
        "org.apache.commons.compress.archivers.zip.ZipArchiveEntry#addNTFSTimestamp(FileTime,FileTime,FileTime)",
        "org.apache.commons.compress.archivers.zip.ZipArchiveEntry#getExtraField(ZipShort)",
        "org.apache.commons.compress.archivers.zip.ZipArchiveEntry#requiresExtraTimeFields()",
        "org.apache.commons.compress.archivers.zip.ZipArchiveEntry#internalRemoveExtraField(ZipShort)"
    ],
    "org.apache.commons.compress.harmony.unpack200.AttributeLayout#getCodec()": ["org.apache.commons.compress.harmony.pack200.Codec.<staticinit>()"],
    "org.apache.commons.compress.archivers.dump.UnsupportedCompressionAlgorithmException#UnsupportedCompressionAlgorithmException(String)": [
        "org.apache.commons.compress.archivers.dump.DumpArchiveException#DumpArchiveException(String)",
        "org.apache.commons.compress.archivers.dump.UnsupportedCompressionAlgorithmException.<init>()"
    ],
    "org.apache.commons.compress.archivers.zip.ZipUtil.fromDosTime(ZipLong)": [
        "org.apache.commons.compress.archivers.zip.ZipLong#getValue()",
        "org.apache.commons.compress.archivers.zip.ZipUtil.dosToJavaDate(long)"
    ],
    "org.apache.commons.compress.harmony.unpack200.bytecode.CodeAttribute#resolve(ClassConstantPool)": [
        "org.apache.commons.compress.harmony.unpack200.bytecode.EnclosingMethodAttribute#resolve(ClassConstantPool)",
        "org.apache.commons.compress.harmony.unpack200.bytecode.SourceFileAttribute#resolve(ClassConstantPool)",
        "org.apache.commons.compress.harmony.unpack200.bytecode.LocalVariableTableAttribute#resolve(ClassConstantPool)",
        "org.apache.commons.compress.harmony.unpack200.bytecode.LineNumberTableAttribute#resolve(ClassConstantPool)",
        "org.apache.commons.compress.harmony.unpack200.bytecode.RuntimeVisibleorInvisibleParameterAnnotationsAttribute#resolve(ClassConstantPool)",
        "org.apache.commons.compress.harmony.unpack200.bytecode.NewAttribute#resolve(ClassConstantPool)",
        "org.apache.commons.compress.harmony.unpack200.bytecode.LocalVariableTypeTableAttribute#resolve(ClassConstantPool)",
        "org.apache.commons.compress.harmony.unpack200.bytecode.ConstantValueAttribute#resolve(ClassConstantPool)",
        "org.apache.commons.compress.harmony.unpack200.bytecode.ByteCode#resolve(ClassConstantPool)",
        "org.apache.commons.compress.harmony.unpack200.bytecode.RuntimeVisibleorInvisibleAnnotationsAttribute#resolve(ClassConstantPool)",
        "org.apache.commons.compress.harmony.unpack200.bytecode.InnerClassesAttribute#resolve(ClassConstantPool)",
        "org.apache.commons.compress.harmony.unpack200.bytecode.Attribute#resolve(ClassConstantPool)",
        "org.apache.commons.compress.harmony.unpack200.bytecode.ExceptionsAttribute#resolve(ClassConstantPool)",
        "org.apache.commons.compress.harmony.unpack200.bytecode.CodeAttribute#resolve(ClassConstantPool)",
        "org.apache.commons.compress.harmony.unpack200.bytecode.AnnotationDefaultAttribute#resolve(ClassConstantPool)",
        "org.apache.commons.compress.harmony.unpack200.bytecode.SignatureAttribute#resolve(ClassConstantPool)"
    ],
    "org.apache.commons.compress.harmony.unpack200.bytecode.SourceFileAttribute#hashCode()": [
        "org.apache.commons.compress.harmony.unpack200.bytecode.CPUTF8#hashCode()",
        "org.apache.commons.compress.harmony.unpack200.bytecode.Attribute#hashCode()"
    ],
    "org.apache.commons.compress.compressors.lz77support.AbstractLZ77CompressorInputStream#readLiteral(byte[],int,int)": [
        "org.apache.commons.compress.compressors.lz77support.AbstractLZ77CompressorInputStream#tryToReadLiteral(int)",
        "org.apache.commons.compress.compressors.lz77support.AbstractLZ77CompressorInputStream#available()",
        "org.apache.commons.compress.compressors.lz77support.AbstractLZ77CompressorInputStream#readFromBuffer(byte[],int,int)"
    ],
    "org.apache.commons.compress.compressors.lzw.LZWInputStream#initializeTables(int,int)": [
        "org.apache.commons.compress.compressors.lzw.LZWInputStream#initializeTables(int)",
        "org.apache.commons.compress.MemoryLimitException#MemoryLimitException(long,int)"
    ],
    "org.apache.commons.compress.harmony.pack200.NewAttribute.PassAttribute#PassAttribute(String,int)": [
        "org.apache.commons.compress.harmony.pack200.NewAttribute#NewAttribute(String,String,int)",
        "org.apache.commons.compress.harmony.pack200.NewAttribute.PassAttribute.<init>()"
    ],
    "org.apache.commons.compress.harmony.pack200.NewAttributeBands#resolveCalls()": [
        "org.apache.commons.compress.harmony.pack200.NewAttributeBands#resolveCallsForElement(int,Callable,LayoutElement)",
        "org.apache.commons.compress.harmony.pack200.NewAttributeBands.Callable#setBackwardsCallableIndex(int)"
    ],
    "org.apache.commons.compress.archivers.zip.StreamCompressor.<init>()": ["org.apache.commons.compress.archivers.zip.StreamCompressor.<staticinit>()"],
    "org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField#reparseCentralDirectoryData(boolean,boolean,boolean,boolean)": [
        "org.apache.commons.compress.archivers.zip.ZipEightByteInteger#ZipEightByteInteger(byte[],int)",
        "org.apache.commons.compress.archivers.zip.ZipLong#ZipLong(byte[],int)",
        "org.apache.commons.compress.archivers.zip.ZipConstants.<staticinit>()"
    ],
    "org.apache.commons.compress.archivers.zip.ZipUtil.checkRequestedFeatures(ZipArchiveEntry)": [
        "org.apache.commons.compress.archivers.zip.ZipArchiveEntry#getMethod()",
        "org.apache.commons.compress.archivers.zip.ZipUtil.supportsMethodOf(ZipArchiveEntry)",
        "org.apache.commons.compress.archivers.zip.ZipUtil.supportsEncryptionOf(ZipArchiveEntry)",
        "org.apache.commons.compress.archivers.zip.UnsupportedZipFeatureException#UnsupportedZipFeatureException(ZipMethod,ZipArchiveEntry)",
        "org.apache.commons.compress.archivers.zip.UnsupportedZipFeatureException.Feature.<staticinit>()",
        "org.apache.commons.compress.archivers.zip.ZipMethod.getMethodByCode(int)",
        "org.apache.commons.compress.archivers.zip.UnsupportedZipFeatureException#UnsupportedZipFeatureException(Feature,ZipArchiveEntry)"
    ],
    "org.apache.commons.compress.harmony.pack200.RunCodec#encode(int)": ["org.apache.commons.compress.harmony.pack200.Pack200Exception#Pack200Exception(String)"],
    "org.apache.commons.compress.archivers.tar.TarArchiveEntry#processPaxHeader(String,String)": ["org.apache.commons.compress.archivers.tar.TarArchiveEntry#processPaxHeader(String,String,Map<String, String>)"],
    "org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp#parseFromLocalFileData(byte[],int,int)": [
        "org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp#setFlags(byte)",
        "org.apache.commons.compress.archivers.zip.ZipLong#ZipLong(byte[],int)",
        "org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp#reset()"
    ],
    "org.apache.commons.compress.archivers.sevenz.AES256SHA256Decoder.AES256SHA256DecoderInputStream#read()": ["org.apache.commons.compress.archivers.sevenz.AES256SHA256Decoder.AES256SHA256DecoderInputStream#init()"],
    "org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp#getCreateFileTime()": ["org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp.unixTimeToFileTime(ZipLong)"],
    "org.apache.commons.compress.archivers.zip.ZipArchiveEntry#getExtraFields(ExtraFieldParsingBehavior)": [
        "org.apache.commons.compress.archivers.zip.JarMarker#getCentralDirectoryData()",
        "org.apache.commons.compress.archivers.zip.ResourceAlignmentExtraField#parseFromCentralDirectoryData(byte[],int,int)",
        "org.apache.commons.compress.archivers.zip.PKWareExtraHeader#getCentralDirectoryData()",
        "org.apache.commons.compress.archivers.zip.ExtraFieldUtils.<staticinit>()",
        "org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField#parseFromCentralDirectoryData(byte[],int,int)",
        "org.apache.commons.compress.archivers.zip.UnrecognizedExtraField#parseFromCentralDirectoryData(byte[],int,int)",
        "org.apache.commons.compress.archivers.zip.JarMarker#getHeaderId()",
        "org.apache.commons.compress.archivers.zip.PKWareExtraHeader#getHeaderId()",
        "org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField#getCentralDirectoryData()",
        "org.apache.commons.compress.archivers.zip.UnrecognizedExtraField#getCentralDirectoryData()",
        "org.apache.commons.compress.archivers.zip.ResourceAlignmentExtraField#getCentralDirectoryData()",
        "org.apache.commons.compress.archivers.zip.UnparseableExtraFieldData#getCentralDirectoryData()",
        "org.apache.commons.compress.archivers.zip.X000A_NTFS#parseFromCentralDirectoryData(byte[],int,int)",
        "org.apache.commons.compress.archivers.zip.X000A_NTFS#getHeaderId()",
        "org.apache.commons.compress.archivers.zip.UnparseableExtraFieldData#getHeaderId()",
        "org.apache.commons.compress.archivers.zip.AsiExtraField#getHeaderId()",
        "org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp#getCentralDirectoryData()",
        "org.apache.commons.compress.archivers.zip.ZipArchiveEntry#getExtraFields(boolean)",
        "org.apache.commons.compress.archivers.zip.X7875_NewUnix#parseFromCentralDirectoryData(byte[],int,int)",
        "org.apache.commons.compress.archivers.zip.X0017_StrongEncryptionHeader#parseFromCentralDirectoryData(byte[],int,int)",
        "org.apache.commons.compress.archivers.zip.UnicodeCommentExtraField#getHeaderId()",
        "org.apache.commons.compress.archivers.zip.X0015_CertificateIdForFile#parseFromCentralDirectoryData(byte[],int,int)",
        "org.apache.commons.compress.archivers.zip.X7875_NewUnix#getHeaderId()",
        "org.apache.commons.compress.archivers.zip.AsiExtraField#getCentralDirectoryData()",
        "org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField#getCentralDirectoryData()",
        "org.apache.commons.compress.archivers.zip.ZipArchiveEntry#getCentralDirectoryExtra()",
        "org.apache.commons.compress.archivers.zip.X7875_NewUnix#getCentralDirectoryData()",
        "org.apache.commons.compress.archivers.zip.ZipArchiveEntry#findMatching(ZipShort,List<ZipExtraField>)",
        "org.apache.commons.compress.archivers.zip.UnparseableExtraFieldData#parseFromCentralDirectoryData(byte[],int,int)",
        "org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField#getHeaderId()",
        "org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp#getHeaderId()",
        "org.apache.commons.compress.archivers.zip.PKWareExtraHeader#parseFromCentralDirectoryData(byte[],int,int)",
        "org.apache.commons.compress.archivers.zip.ZipArchiveEntry#findUnparseable(List<ZipExtraField>)",
        "org.apache.commons.compress.archivers.zip.ResourceAlignmentExtraField#getHeaderId()",
        "org.apache.commons.compress.archivers.zip.X000A_NTFS#getCentralDirectoryData()",
        "org.apache.commons.compress.archivers.zip.AsiExtraField#parseFromCentralDirectoryData(byte[],int,int)",
        "org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField#parseFromCentralDirectoryData(byte[],int,int)",
        "org.apache.commons.compress.archivers.zip.ZipArchiveEntry#parseExtraFields(byte[],boolean,ExtraFieldParsingBehavior)",
        "org.apache.commons.compress.archivers.zip.X0016_CertificateIdForCentralDirectory#parseFromCentralDirectoryData(byte[],int,int)",
        "org.apache.commons.compress.archivers.zip.UnicodePathExtraField#getHeaderId()",
        "org.apache.commons.compress.archivers.zip.JarMarker#parseFromCentralDirectoryData(byte[],int,int)",
        "org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp#parseFromCentralDirectoryData(byte[],int,int)",
        "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.ExtraFieldParsingMode.<staticinit>()",
        "org.apache.commons.compress.archivers.zip.UnrecognizedExtraField#getHeaderId()"
    ],
    "org.apache.commons.compress.archivers.zip.UnparseableExtraFieldData#getCentralDirectoryLength()": [
        "org.apache.commons.compress.archivers.zip.UnparseableExtraFieldData#getLocalFileDataLength()",
        "org.apache.commons.compress.archivers.zip.ZipShort#ZipShort(int)"
    ],
    "org.apache.commons.compress.archivers.dump.DumpArchiveInputStream#getNextEntry()": [
        "org.apache.commons.compress.archivers.dump.DumpArchiveEntry#isDirectory()",
        "org.apache.commons.compress.archivers.dump.DumpArchiveInputStream#readDirectoryEntry(DumpArchiveEntry)",
        "org.apache.commons.compress.archivers.dump.TapeInputStream#readRecord()",
        "org.apache.commons.compress.archivers.dump.DumpArchiveEntry#getHeaderHoles()",
        "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.parse(byte[])",
        "org.apache.commons.compress.archivers.dump.TapeInputStream#getBytesRead()",
        "org.apache.commons.compress.archivers.dump.DumpArchiveUtil.verify(byte[])",
        "org.apache.commons.compress.archivers.dump.DumpArchiveEntry#getIno()",
        "org.apache.commons.compress.archivers.dump.DumpArchiveInputStream#getPath(DumpArchiveEntry)",
        "org.apache.commons.compress.archivers.dump.DumpArchiveEntry#setName(String)",
        "org.apache.commons.compress.archivers.dump.DumpArchiveEntry#getHeaderType()",
        "org.apache.commons.compress.archivers.dump.InvalidFormatException#InvalidFormatException()",
        "org.apache.commons.compress.archivers.dump.DumpArchiveEntry#getHeaderCount()",
        "org.apache.commons.compress.archivers.dump.DumpArchiveEntry#setOffset(long)",
        "org.apache.commons.compress.archivers.dump.DumpArchiveEntry#getEntrySize()",
        "org.apache.commons.compress.archivers.dump.DumpArchiveEntry#setSimpleName(String)",
        "org.apache.commons.compress.archivers.dump.DumpArchiveEntry#isSparseRecord(int)",
        "org.apache.commons.compress.archivers.dump.TapeInputStream#skip(long)",
        "org.apache.commons.compress.archivers.dump.DumpArchiveConstants.<staticinit>()",
        "org.apache.commons.compress.archivers.dump.DumpArchiveConstants.SEGMENT_TYPE.<staticinit>()"
    ],
    "org.apache.commons.compress.harmony.pack200.CpBands#writeCpDescr(OutputStream)": [
        "org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream#write(byte[])",
        "org.apache.commons.compress.archivers.sevenz.Coders.DeflateDecoder.DeflateDecoderOutputStream#write(byte[])",
        "org.apache.commons.compress.harmony.pack200.Codec.<staticinit>()",
        "org.apache.commons.compress.harmony.pack200.BandSet#encodeBandInt(String,int[],BHSDCodec)",
        "org.apache.commons.compress.harmony.pack200.PackingUtils.log(String)",
        "org.apache.commons.compress.harmony.pack200.CPNameAndType#getTypeIndex()",
        "org.apache.commons.compress.harmony.pack200.CPNameAndType#getNameIndex()",
        "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.OutputStreamWrapper#write(byte[])",
        "org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream#write(byte[])",
        "org.apache.commons.compress.archivers.zip.ZipSplitOutputStream#write(byte[])"
    ],
    "org.apache.commons.compress.compressors.lz4.BlockLZ4CompressorInputStream#BlockLZ4CompressorInputStream(InputStream)": [
        "org.apache.commons.compress.compressors.lz4.BlockLZ4CompressorInputStream.<init>()",
        "org.apache.commons.compress.compressors.lz77support.AbstractLZ77CompressorInputStream#AbstractLZ77CompressorInputStream(InputStream,int)",
        "org.apache.commons.compress.compressors.lz4.BlockLZ4CompressorInputStream.<staticinit>()"
    ],
    "org.apache.commons.compress.harmony.unpack200.bytecode.forms.IntRefForm#IntRefForm(int,String,int[],boolean)": ["org.apache.commons.compress.harmony.unpack200.bytecode.forms.IntRefForm#IntRefForm(int,String,int[])"],
    "org.apache.commons.compress.archivers.zip.StreamCompressor#deflate(InputStream,int)": [
        "org.apache.commons.compress.compressors.zstandard.ZstdCompressorInputStream#read(byte[],int,int)",
        "org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorInputStream#read(byte[],int,int)",
        "org.apache.commons.compress.archivers.zip.StreamCompressor#reset()",
        "org.apache.commons.compress.archivers.sevenz.BoundedSeekableByteChannelInputStream#read(byte[],int,int)",
        "org.apache.commons.compress.compressors.deflate64.Deflate64CompressorInputStream#read(byte[],int,int)",
        "org.apache.commons.compress.compressors.brotli.BrotliCompressorInputStream#read(byte[],int,int)",
        "org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream#read(byte[],int,int)",
        "org.apache.commons.compress.archivers.sevenz.AES256SHA256Decoder.AES256SHA256DecoderInputStream#read(byte[],int,int)",
        "org.apache.commons.compress.compressors.lzma.LZMACompressorInputStream#read(byte[],int,int)",
        "org.apache.commons.compress.compressors.lz4.BlockLZ4CompressorInputStream#read(byte[],int,int)",
        "org.apache.commons.compress.compressors.snappy.SnappyCompressorInputStream#read(byte[],int,int)",
        "org.apache.commons.compress.compressors.xz.XZCompressorInputStream#read(byte[],int,int)",
        "org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream#read(byte[],int,int)",
        "org.apache.commons.compress.archivers.zip.StreamCompressor#write(byte[],int,int,int)",
        "org.apache.commons.compress.utils.BoundedArchiveInputStream#read(byte[],int,int)",
        "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream#read(byte[],int,int)",
        "org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStream#read(byte[],int,int)",
        "org.apache.commons.compress.archivers.zip.StreamCompressor#flushDeflater()",
        "org.apache.commons.compress.compressors.lzw.LZWInputStream#read(byte[],int,int)",
        "org.apache.commons.compress.compressors.deflate.DeflateCompressorInputStream#read(byte[],int,int)"
    ],
    "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile#writeFileEmptyFiles(DataOutput)": [
        "org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry#isDirectory()",
        "org.apache.commons.compress.archivers.sevenz.NID.<staticinit>()",
        "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile#writeUint64(DataOutput,long)",
        "org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry#hasStream()",
        "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile#writeBits(DataOutput,BitSet,int)"
    ],
    "org.apache.commons.compress.compressors.deflate64.Deflate64CompressorInputStream#available()": ["org.apache.commons.compress.compressors.deflate64.HuffmanDecoder#available()"],
    "org.apache.commons.compress.harmony.unpack200.bytecode.CPFieldRef#CPFieldRef(CPClass,CPNameAndType,int)": [
        "org.apache.commons.compress.harmony.unpack200.bytecode.ConstantPoolEntry.<staticinit>()",
        "org.apache.commons.compress.harmony.unpack200.bytecode.ConstantPoolEntry#ConstantPoolEntry(byte,int)",
        "org.apache.commons.compress.harmony.unpack200.bytecode.CPFieldRef.<init>()"
    ],
    "org.apache.commons.compress.archivers.jar.JarArchiveEntry#JarArchiveEntry(JarEntry)": [
        "org.apache.commons.compress.archivers.zip.ZipArchiveEntry#ZipArchiveEntry(ZipEntry)",
        "org.apache.commons.compress.archivers.jar.JarArchiveEntry.<init>()"
    ],
    "org.apache.commons.compress.harmony.unpack200.Segment#unpackWrite(JarOutputStream)": ["org.apache.commons.compress.harmony.unpack200.Segment#writeJar(JarOutputStream)"],
    "org.apache.commons.compress.archivers.zip.ZipFile#getEntriesInPhysicalOrder()": [
        "org.apache.commons.compress.archivers.zip.ZipFile#sortByOffset(ZipArchiveEntry[])",
        "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.<staticinit>()"
    ],
    "org.apache.commons.compress.archivers.zip.ZipArchiveEntry#clone()": [
        "org.apache.commons.compress.archivers.zip.ZipArchiveEntry#getAllExtraFieldsNoCopy()",
        "org.apache.commons.compress.archivers.zip.ZipArchiveEntry#getInternalAttributes()",
        "org.apache.commons.compress.archivers.zip.ZipArchiveEntry#setInternalAttributes(int)",
        "org.apache.commons.compress.archivers.zip.ZipArchiveEntry#setExternalAttributes(long)",
        "org.apache.commons.compress.archivers.zip.ZipArchiveEntry#setExtraFields(ZipExtraField[])",
        "org.apache.commons.compress.archivers.zip.ZipArchiveEntry#getExternalAttributes()"
    ],
    "org.apache.commons.compress.archivers.zip.ZipArchiveEntry#getExtraFields(boolean)": [
        "org.apache.commons.compress.archivers.zip.ZipArchiveEntry#getAllExtraFields()",
        "org.apache.commons.compress.archivers.zip.ZipArchiveEntry#getParseableExtraFields()"
    ],
    "org.apache.commons.compress.archivers.dump.DumpArchiveUtil.getIno(byte[])": ["org.apache.commons.compress.archivers.dump.DumpArchiveUtil.convert32(byte[],int)"],
    "org.apache.commons.compress.harmony.unpack200.bytecode.DeprecatedAttribute#DeprecatedAttribute()": [
        "org.apache.commons.compress.harmony.unpack200.bytecode.Attribute#Attribute(CPUTF8)",
        "org.apache.commons.compress.harmony.unpack200.bytecode.DeprecatedAttribute.<init>()",
        "org.apache.commons.compress.harmony.unpack200.bytecode.DeprecatedAttribute.<staticinit>()"
    ],
    "org.apache.commons.compress.archivers.sevenz.DeltaDecoder#encode(OutputStream,Object)": ["org.apache.commons.compress.archivers.sevenz.AbstractCoder.toInt(Object,int)"],
    "org.apache.commons.compress.harmony.pack200.Segment.SegmentMethodVisitor#visitIincInsn(int,int)": ["org.apache.commons.compress.harmony.pack200.BcBands#visitIincInsn(int,int)"],
    "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream#readFully(byte[])": ["org.apache.commons.compress.archivers.zip.ZipArchiveInputStream#readFully(byte[],int)"],
    "org.apache.commons.compress.harmony.pack200.BcBands#BcBands(CpBands,Segment,int)": [
        "org.apache.commons.compress.harmony.pack200.BcBands.<init>()",
        "org.apache.commons.compress.harmony.pack200.BandSet#BandSet(int,SegmentHeader)",
        "org.apache.commons.compress.harmony.pack200.Segment#getSegmentHeader()"
    ],
    "org.apache.commons.compress.utils.SeekableInMemoryByteChannel#SeekableInMemoryByteChannel(byte[])": ["org.apache.commons.compress.utils.SeekableInMemoryByteChannel.<init>()"],
    "org.apache.commons.compress.archivers.zip.X000A_NTFS#getLocalFileDataData()": [
        "org.apache.commons.compress.archivers.zip.ZipShort#getBytes()",
        "org.apache.commons.compress.archivers.zip.X000A_NTFS.<staticinit>()",
        "org.apache.commons.compress.archivers.zip.ZipEightByteInteger#getBytes()",
        "org.apache.commons.compress.archivers.zip.X000A_NTFS#getLocalFileDataLength()",
        "org.apache.commons.compress.archivers.zip.ZipShort#getValue()"
    ],
    "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.<init>()": [
        "org.apache.commons.compress.archivers.sevenz.SevenZMethod.<staticinit>()",
        "org.apache.commons.compress.archivers.sevenz.SevenZMethodConfiguration#SevenZMethodConfiguration(SevenZMethod)"
    ],
    "org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream#readFully(byte[],int,int)": [
        "org.apache.commons.compress.utils.IOUtils.readFully(InputStream,byte[],int,int)",
        "org.apache.commons.compress.archivers.ArchiveInputStream#count(int)"
    ],
    "org.apache.commons.compress.harmony.unpack200.bytecode.LocalVariableTableAttribute#resolve(ClassConstantPool)": [
        "org.apache.commons.compress.harmony.unpack200.bytecode.EnclosingMethodAttribute#resolve(ClassConstantPool)",
        "org.apache.commons.compress.harmony.unpack200.bytecode.ClassFileEntry#resolve(ClassConstantPool)",
        "org.apache.commons.compress.harmony.unpack200.bytecode.CPString#resolve(ClassConstantPool)",
        "org.apache.commons.compress.harmony.unpack200.bytecode.SourceFileAttribute#resolve(ClassConstantPool)",
        "org.apache.commons.compress.harmony.unpack200.bytecode.CPFieldRef#resolve(ClassConstantPool)",
        "org.apache.commons.compress.harmony.unpack200.bytecode.LocalVariableTableAttribute#resolve(ClassConstantPool)",
        "org.apache.commons.compress.harmony.unpack200.bytecode.LineNumberTableAttribute#resolve(ClassConstantPool)",
        "org.apache.commons.compress.harmony.unpack200.bytecode.RuntimeVisibleorInvisibleParameterAnnotationsAttribute#resolve(ClassConstantPool)",
        "org.apache.commons.compress.harmony.unpack200.bytecode.NewAttribute#resolve(ClassConstantPool)",
        "org.apache.commons.compress.harmony.unpack200.bytecode.LocalVariableTypeTableAttribute#resolve(ClassConstantPool)",
        "org.apache.commons.compress.harmony.unpack200.bytecode.CPRef#resolve(ClassConstantPool)",
        "org.apache.commons.compress.harmony.unpack200.bytecode.ConstantValueAttribute#resolve(ClassConstantPool)",
        "org.apache.commons.compress.harmony.unpack200.bytecode.ByteCode#resolve(ClassConstantPool)",
        "org.apache.commons.compress.harmony.unpack200.bytecode.RuntimeVisibleorInvisibleAnnotationsAttribute#resolve(ClassConstantPool)",
        "org.apache.commons.compress.harmony.unpack200.bytecode.InnerClassesAttribute#resolve(ClassConstantPool)",
        "org.apache.commons.compress.harmony.unpack200.bytecode.Attribute#resolve(ClassConstantPool)",
        "org.apache.commons.compress.harmony.unpack200.bytecode.CPMember#resolve(ClassConstantPool)",
        "org.apache.commons.compress.harmony.unpack200.bytecode.ExceptionsAttribute#resolve(ClassConstantPool)",
        "org.apache.commons.compress.harmony.unpack200.bytecode.CodeAttribute#resolve(ClassConstantPool)",
        "org.apache.commons.compress.harmony.unpack200.bytecode.AnnotationDefaultAttribute#resolve(ClassConstantPool)",
        "org.apache.commons.compress.harmony.unpack200.bytecode.ClassConstantPool#indexOf(ClassFileEntry)",
        "org.apache.commons.compress.harmony.unpack200.bytecode.CPClass#resolve(ClassConstantPool)",
        "org.apache.commons.compress.harmony.unpack200.bytecode.SignatureAttribute#resolve(ClassConstantPool)",
        "org.apache.commons.compress.harmony.unpack200.bytecode.CPNameAndType#resolve(ClassConstantPool)"
    ],
    "org.apache.commons.compress.harmony.pack200.CpBands#writeCpUtf8(OutputStream)": [
        "org.apache.commons.compress.harmony.pack200.CPUTF8#getUnderlyingString()",
        "org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream#write(byte[])",
        "org.apache.commons.compress.archivers.sevenz.Coders.DeflateDecoder.DeflateDecoderOutputStream#write(byte[])",
        "org.apache.commons.compress.harmony.pack200.BandSet#encodeBandInt(String,int[],BHSDCodec)",
        "org.apache.commons.compress.harmony.pack200.Codec.<staticinit>()",
        "org.apache.commons.compress.harmony.pack200.CpBands#addCharacters(List<Character>,char[])",
        "org.apache.commons.compress.harmony.pack200.PackingUtils.log(String)",
        "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.OutputStreamWrapper#write(byte[])",
        "org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream#write(byte[])",
        "org.apache.commons.compress.archivers.zip.ZipSplitOutputStream#write(byte[])"
    ],
    "org.apache.commons.compress.compressors.lzma.LZMAUtils.getUncompressedFilename(String)": [
        "org.apache.commons.compress.compressors.FileNameUtil#getUncompressedFileName(String)",
        "org.apache.commons.compress.compressors.lzma.LZMAUtils.<staticinit>()"
    ],
    "org.apache.commons.compress.archivers.zip.InflaterInputStreamWithStatistics#InflaterInputStreamWithStatistics(InputStream,Inflater)": ["org.apache.commons.compress.archivers.zip.InflaterInputStreamWithStatistics.<init>()"],
    "org.apache.commons.compress.archivers.zip.X000A_NTFS#setAccessFileTime(FileTime)": [
        "org.apache.commons.compress.archivers.zip.X000A_NTFS.fileTimeToZip(FileTime)",
        "org.apache.commons.compress.archivers.zip.X000A_NTFS#setAccessTime(ZipEightByteInteger)"
    ],
    "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream#setupBlock()": [
        "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.<staticinit>()",
        "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.Data#initTT(int)",
        "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream#setupNoRandPartA()",
        "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream#setupRandPartA()",
        "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.checkBounds(int,int,String)"
    ],
    "org.apache.commons.compress.archivers.tar.TarArchiveEntry#writeEntryHeaderField(long,byte[],int,int,boolean)": [
        "org.apache.commons.compress.archivers.tar.TarUtils.formatLongOctalBytes(long,byte[],int,int)",
        "org.apache.commons.compress.archivers.tar.TarUtils.formatLongOctalOrBinaryBytes(long,byte[],int,int)"
    ],
    "org.apache.commons.compress.harmony.pack200.RunCodec#decode(InputStream,long)": [
        "org.apache.commons.compress.harmony.pack200.PopulationCodec#decode(InputStream,long)",
        "org.apache.commons.compress.harmony.pack200.BHSDCodec#decode(InputStream,long)",
        "org.apache.commons.compress.harmony.pack200.RunCodec#normalise(int,Codec)",
        "org.apache.commons.compress.harmony.pack200.RunCodec#decode(InputStream,long)"
    ],
    "org.apache.commons.compress.compressors.lz4.BlockLZ4CompressorInputStream#read(byte[],int,int)": [
        "org.apache.commons.compress.compressors.lz4.BlockLZ4CompressorInputStream#read(byte[],int,int)",
        "org.apache.commons.compress.compressors.lz77support.AbstractLZ77CompressorInputStream#hasMoreDataInBlock()",
        "org.apache.commons.compress.compressors.lz4.BlockLZ4CompressorInputStream#readSizes()",
        "org.apache.commons.compress.compressors.lz77support.AbstractLZ77CompressorInputStream#readBackReference(byte[],int,int)",
        "org.apache.commons.compress.compressors.lz77support.AbstractLZ77CompressorInputStream#readLiteral(byte[],int,int)",
        "org.apache.commons.compress.compressors.lz4.BlockLZ4CompressorInputStream.State.<staticinit>()",
        "org.apache.commons.compress.compressors.lz4.BlockLZ4CompressorInputStream#initializeBackReference()"
    ],
    "org.apache.commons.compress.archivers.zip.CircularBuffer#get()": ["org.apache.commons.compress.archivers.zip.CircularBuffer#available()"],
    "org.apache.commons.compress.compressors.bzip2.BZip2Utils.getUncompressedFileName(String)": [
        "org.apache.commons.compress.compressors.bzip2.BZip2Utils.<staticinit>()",
        "org.apache.commons.compress.compressors.FileNameUtil#getUncompressedFileName(String)"
    ],
    "org.apache.commons.compress.archivers.tar.TarArchiveInputStream.matches(byte[],int)": [
        "org.apache.commons.compress.archivers.tar.TarConstants.<staticinit>()",
        "org.apache.commons.compress.utils.ArchiveUtils.matchAsciiBuffer(String,byte[],int,int)"
    ],
    "org.apache.commons.compress.harmony.pack200.CpBands#getCPField(String,String,String)": [
        "org.apache.commons.compress.harmony.pack200.CpBands#getCPClass(String)",
        "org.apache.commons.compress.harmony.pack200.CpBands#getCPField(CPClass,String,String)"
    ],
    "org.apache.commons.compress.harmony.pack200.NewAttributeBands.Call#addAttributeToBand(NewAttribute,InputStream)": [
        "org.apache.commons.compress.harmony.pack200.NewAttributeBands.Callable#addBackwardsCall()",
        "org.apache.commons.compress.harmony.pack200.NewAttributeBands.Callable#addAttributeToBand(NewAttribute,InputStream)"
    ],
    "org.apache.commons.compress.harmony.pack200.BcBands#visitEnd()": [
        "org.apache.commons.compress.harmony.pack200.Segment#getClassBands()",
        "org.apache.commons.compress.harmony.pack200.IntList#get(int)",
        "org.apache.commons.compress.harmony.pack200.IntList#clear()",
        "org.apache.commons.compress.harmony.pack200.BcBands.<staticinit>()",
        "org.apache.commons.compress.harmony.pack200.ClassBands#doBciRenumbering(IntList,Map<Label, Integer>)",
        "org.apache.commons.compress.harmony.pack200.IntList#add(int)",
        "org.apache.commons.compress.harmony.pack200.IntList#size()",
        "org.apache.commons.compress.harmony.pack200.IntList#remove(int)",
        "org.apache.commons.compress.harmony.pack200.IntList#add(int,int)"
    ],
    "org.apache.commons.compress.harmony.pack200.PopulationCodec#decodeInts(int,InputStream)": [
        "org.apache.commons.compress.harmony.pack200.PopulationCodec#decodeInts(int,InputStream)",
        "org.apache.commons.compress.harmony.pack200.Codec.<staticinit>()",
        "org.apache.commons.compress.harmony.pack200.Pack200Exception#Pack200Exception(String)",
        "org.apache.commons.compress.harmony.pack200.RunCodec#decodeInts(int,InputStream)",
        "org.apache.commons.compress.harmony.pack200.BHSDCodec#BHSDCodec(int,int,int)",
        "org.apache.commons.compress.harmony.pack200.PopulationCodec#decode(InputStream,long)",
        "org.apache.commons.compress.harmony.pack200.BHSDCodec#encodes(long)",
        "org.apache.commons.compress.harmony.pack200.BHSDCodec#decode(InputStream,long)",
        "org.apache.commons.compress.harmony.pack200.BHSDCodec#decodeInts(int,InputStream)",
        "org.apache.commons.compress.harmony.pack200.Codec#decodeInts(int,InputStream)",
        "org.apache.commons.compress.harmony.pack200.Codec#check(int,InputStream)",
        "org.apache.commons.compress.harmony.pack200.RunCodec#decode(InputStream,long)"
    ],
    "org.apache.commons.compress.archivers.zip.AsiExtraField#AsiExtraField()": ["org.apache.commons.compress.archivers.zip.AsiExtraField.<init>()"],
    "org.apache.commons.compress.harmony.unpack200.bytecode.forms.WideForm#setByteCodeOperandsFormat2(int,ByteCode,OperandManager,int)": [
        "org.apache.commons.compress.harmony.unpack200.bytecode.OperandManager#nextLocal()",
        "org.apache.commons.compress.harmony.unpack200.bytecode.ByteCode#getOpcode()",
        "org.apache.commons.compress.harmony.unpack200.bytecode.ByteCode#setRewrite(int[])",
        "org.apache.commons.compress.harmony.unpack200.bytecode.forms.VariableInstructionForm#setRewrite2Bytes(int,int,int[])",
        "org.apache.commons.compress.harmony.unpack200.bytecode.OperandManager#nextShort()"
    ],
    "org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField#getLocalFileDataLength()": ["org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField#getCentralDirectoryLength()"],
    "org.apache.commons.compress.compressors.deflate64.HuffmanDecoder.DecodingMemory#add(byte[],int,int)": ["org.apache.commons.compress.compressors.deflate64.HuffmanDecoder.DecodingMemory#add(byte)"],
    "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream#writeCentralFileHeader(ZipArchiveEntry)": [
        "org.apache.commons.compress.archivers.zip.Zip64Mode.<staticinit>()",
        "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream#writeCounted(byte[])",
        "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream#createCentralFileHeader(ZipArchiveEntry)"
    ],
    "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream#write(byte[],int,int)": ["org.apache.commons.compress.utils.FixedLengthBlockOutputStream#write(byte[],int,int)"],
    "org.apache.commons.compress.compressors.deflate64.HuffmanDecoder#available()": [
        "org.apache.commons.compress.compressors.deflate64.HuffmanDecoder.UncompressedState#available()",
        "org.apache.commons.compress.compressors.deflate64.HuffmanDecoder.HuffmanCodes#available()",
        "org.apache.commons.compress.compressors.deflate64.HuffmanDecoder.InitialState#available()"
    ],
    "org.apache.commons.compress.archivers.sevenz.AbstractCoder#getOptionsAsProperties(Object)": ["org.apache.commons.compress.utils.ByteUtils.<staticinit>()"],
    "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream#failForBigNumbers(TarArchiveEntry)": [
        "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream#failForBigNumber(String,long,long)",
        "org.apache.commons.compress.utils.TimeUtils.toUnixTime(FileTime)",
        "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream#failForBigNumberWithPosixMessage(String,long,long)",
        "org.apache.commons.compress.archivers.tar.TarArchiveEntry#getDevMajor()",
        "org.apache.commons.compress.archivers.tar.TarArchiveEntry#getLongGroupId()",
        "org.apache.commons.compress.archivers.tar.TarArchiveEntry#getDevMinor()",
        "org.apache.commons.compress.archivers.tar.TarArchiveEntry#getLastModifiedTime()",
        "org.apache.commons.compress.archivers.tar.TarArchiveEntry#getLongUserId()",
        "org.apache.commons.compress.archivers.tar.TarArchiveEntry#getSize()",
        "org.apache.commons.compress.archivers.tar.TarConstants.<staticinit>()",
        "org.apache.commons.compress.archivers.tar.TarArchiveEntry#getMode()"
    ],
    "org.apache.commons.compress.archivers.sevenz.SevenZFile#readPackInfo(ByteBuffer,Archive)": [
        "org.apache.commons.compress.archivers.sevenz.SevenZFile#readAllOrBits(ByteBuffer,int)",
        "org.apache.commons.compress.archivers.sevenz.NID.<staticinit>()",
        "org.apache.commons.compress.archivers.sevenz.SevenZFile.getInt(ByteBuffer)",
        "org.apache.commons.compress.archivers.sevenz.SevenZFile.readUint64(ByteBuffer)",
        "org.apache.commons.compress.archivers.sevenz.SevenZFile.getUnsignedByte(ByteBuffer)"
    ],
    "org.apache.commons.compress.harmony.pack200.Archive.PackingFile#PackingFile(String,byte[],long)": ["org.apache.commons.compress.harmony.pack200.Archive.PackingFile.<init>()"],
    "org.apache.commons.compress.compressors.deflate64.HuffmanDecoder#decode(byte[])": ["org.apache.commons.compress.compressors.deflate64.HuffmanDecoder#decode(byte[],int,int)"],
    "org.apache.commons.compress.archivers.tar.TarArchiveInputStream#readSparse(byte[],int,int)": [
        "org.apache.commons.compress.compressors.zstandard.ZstdCompressorInputStream#read(byte[],int,int)",
        "org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorInputStream#read(byte[],int,int)",
        "org.apache.commons.compress.archivers.sevenz.BoundedSeekableByteChannelInputStream#read(byte[],int,int)",
        "org.apache.commons.compress.compressors.deflate64.Deflate64CompressorInputStream#read(byte[],int,int)",
        "org.apache.commons.compress.compressors.brotli.BrotliCompressorInputStream#read(byte[],int,int)",
        "org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream#read(byte[],int,int)",
        "org.apache.commons.compress.archivers.sevenz.AES256SHA256Decoder.AES256SHA256DecoderInputStream#read(byte[],int,int)",
        "org.apache.commons.compress.compressors.lzma.LZMACompressorInputStream#read(byte[],int,int)",
        "org.apache.commons.compress.compressors.lz4.BlockLZ4CompressorInputStream#read(byte[],int,int)",
        "org.apache.commons.compress.compressors.snappy.SnappyCompressorInputStream#read(byte[],int,int)",
        "org.apache.commons.compress.compressors.xz.XZCompressorInputStream#read(byte[],int,int)",
        "org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream#read(byte[],int,int)",
        "org.apache.commons.compress.utils.BoundedArchiveInputStream#read(byte[],int,int)",
        "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream#read(byte[],int,int)",
        "org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStream#read(byte[],int,int)",
        "org.apache.commons.compress.compressors.lzw.LZWInputStream#read(byte[],int,int)",
        "org.apache.commons.compress.archivers.tar.TarArchiveInputStream#readSparse(byte[],int,int)",
        "org.apache.commons.compress.compressors.deflate.DeflateCompressorInputStream#read(byte[],int,int)"
    ],
    "org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream#Pack200CompressorOutputStream(OutputStream,Map<String, String>)": [
        "org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream#Pack200CompressorOutputStream(OutputStream,Pack200Strategy,Map<String, String>)",
        "org.apache.commons.compress.compressors.pack200.Pack200Strategy.<staticinit>()"
    ],
    "org.apache.commons.compress.archivers.tar.TarFile#TarFile(File,String)": ["org.apache.commons.compress.archivers.tar.TarFile#TarFile(File,String)"],
    "org.apache.commons.compress.archivers.zip.PKWareExtraHeader#parseFromLocalFileData(byte[],int,int)": ["org.apache.commons.compress.archivers.zip.PKWareExtraHeader#setLocalFileDataData(byte[])"],
    "org.apache.commons.compress.archivers.ar.ArArchiveOutputStream.<init>()": ["org.apache.commons.compress.archivers.ar.ArArchiveOutputStream.<staticinit>()"],
    "org.apache.commons.compress.harmony.unpack200.ClassBands#ClassBands(Segment)": [
        "org.apache.commons.compress.harmony.unpack200.AttrDefinitionBands#getAttributeDefinitionMap()",
        "org.apache.commons.compress.harmony.unpack200.ClassBands.<init>()",
        "org.apache.commons.compress.harmony.unpack200.BandSet#BandSet(Segment)",
        "org.apache.commons.compress.harmony.unpack200.SegmentHeader#getOptions()",
        "org.apache.commons.compress.harmony.unpack200.Segment#getCpBands()",
        "org.apache.commons.compress.harmony.unpack200.SegmentHeader#getClassCount()",
        "org.apache.commons.compress.harmony.unpack200.Segment#getAttrDefinitionBands()"
    ],
    "org.apache.commons.compress.archivers.zip.ZipUtil.supportsMethodOf(ZipArchiveEntry)": [
        "org.apache.commons.compress.archivers.zip.ZipMethod#getCode()",
        "org.apache.commons.compress.archivers.zip.ZipArchiveEntry#getMethod()",
        "org.apache.commons.compress.archivers.zip.ZipMethod.<staticinit>()"
    ],
    "org.apache.commons.compress.archivers.sevenz.SevenZFile.get(ByteBuffer,byte[])": ["org.apache.commons.compress.archivers.sevenz.SevenZFile.checkEndOfFile(ByteBuffer,int)"],
    "org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream#Pack200CompressorInputStream(File,Map<String, String>)": [
        "org.apache.commons.compress.compressors.pack200.Pack200Strategy.<staticinit>()",
        "org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream#Pack200CompressorInputStream(File,Pack200Strategy,Map<String, String>)"
    ],
    "org.apache.commons.compress.harmony.unpack200.bytecode.forms.NewInitMethodRefForm#context(OperandManager)": ["org.apache.commons.compress.harmony.unpack200.bytecode.OperandManager#getNewClass()"],
    "org.apache.commons.compress.compressors.lz4.XXHash32#XXHash32(int)": ["org.apache.commons.compress.compressors.lz4.XXHash32.<init>()"],
    "org.apache.commons.compress.harmony.pack200.BHSDCodec#BHSDCodec(int,int,int,int)": [
        "org.apache.commons.compress.harmony.pack200.BHSDCodec#calculateSmallest()",
        "org.apache.commons.compress.harmony.pack200.BHSDCodec#calculateLargest()",
        "org.apache.commons.compress.harmony.pack200.BHSDCodec.<init>()",
        "org.apache.commons.compress.harmony.pack200.Codec.<init>()"
    ],
    "org.apache.commons.compress.archivers.sevenz.SevenZFile#buildDecoderStack(Folder,long,int,SevenZArchiveEntry)$FilterInputStream$1#read()": [
        "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream#read()",
        "org.apache.commons.compress.archivers.sevenz.AES256SHA256Decoder.AES256SHA256DecoderInputStream#read()",
        "org.apache.commons.compress.compressors.xz.XZCompressorInputStream#read()",
        "org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorInputStream#read()",
        "org.apache.commons.compress.compressors.lz77support.AbstractLZ77CompressorInputStream#read()",
        "org.apache.commons.compress.compressors.deflate.DeflateCompressorInputStream#read()",
        "org.apache.commons.compress.archivers.zip.ExplodingInputStream#read()",
        "org.apache.commons.compress.compressors.lzma.LZMACompressorInputStream#read()",
        "org.apache.commons.compress.compressors.zstandard.ZstdCompressorInputStream#read()",
        "org.apache.commons.compress.archivers.sevenz.BoundedSeekableByteChannelInputStream#read()",
        "org.apache.commons.compress.utils.BoundedArchiveInputStream#read()",
        "org.apache.commons.compress.compressors.brotli.BrotliCompressorInputStream#read()",
        "org.apache.commons.compress.archivers.tar.TarArchiveSparseZeroInputStream#read()",
        "org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream#read()",
        "org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStream#read()",
        "org.apache.commons.compress.compressors.deflate64.Deflate64CompressorInputStream#read()",
        "org.apache.commons.compress.compressors.lzw.LZWInputStream#read()",
        "org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream#read()",
        "org.apache.commons.compress.archivers.sevenz.SevenZFile#buildDecoderStack(Folder,long,int,SevenZArchiveEntry)$FilterInputStream$1#count(int)"
    ],
    "org.apache.commons.compress.harmony.pack200.CpBands#writeCpMethodOrField(Set<CPMethodOrField>,OutputStream,String)": [
        "org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream#write(byte[])",
        "org.apache.commons.compress.archivers.sevenz.Coders.DeflateDecoder.DeflateDecoderOutputStream#write(byte[])",
        "org.apache.commons.compress.harmony.pack200.Codec.<staticinit>()",
        "org.apache.commons.compress.harmony.pack200.BandSet#encodeBandInt(String,int[],BHSDCodec)",
        "org.apache.commons.compress.harmony.pack200.CPMethodOrField#getDescIndex()",
        "org.apache.commons.compress.harmony.pack200.PackingUtils.log(String)",
        "org.apache.commons.compress.harmony.pack200.CPMethodOrField#getClassIndex()",
        "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.OutputStreamWrapper#write(byte[])",
        "org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream#write(byte[])",
        "org.apache.commons.compress.archivers.zip.ZipSplitOutputStream#write(byte[])"
    ],
    "org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream#getNextCPIOEntry()": [
        "org.apache.commons.compress.archivers.cpio.CpioUtil.byteArray2long(byte[],boolean)",
        "org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream#readFully(byte[],int,int)",
        "org.apache.commons.compress.archivers.dump.DumpArchiveInputStream#getBytesRead()",
        "org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream#readOldAsciiEntry()",
        "org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream#ensureOpen()",
        "org.apache.commons.compress.archivers.cpio.CpioArchiveEntry#getName()",
        "org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream#closeEntry()",
        "org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream#skipRemainderOfLastBlock()",
        "org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream#readNewEntry(boolean)",
        "org.apache.commons.compress.utils.ArchiveUtils.toAsciiString(byte[])",
        "org.apache.commons.compress.archivers.cpio.CpioConstants.<staticinit>()",
        "org.apache.commons.compress.archivers.ArchiveInputStream#getBytesRead()",
        "org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream#readOldBinaryEntry(boolean)"
    ],
    "org.apache.commons.compress.archivers.zip.X0015_CertificateIdForFile#X0015_CertificateIdForFile()": [
        "org.apache.commons.compress.archivers.zip.X0015_CertificateIdForFile.<staticinit>()",
        "org.apache.commons.compress.archivers.zip.X0015_CertificateIdForFile.<init>()",
        "org.apache.commons.compress.archivers.zip.PKWareExtraHeader#PKWareExtraHeader(ZipShort)"
    ],
    "org.apache.commons.compress.archivers.tar.TarArchiveEntry#isPaxHeader()": ["org.apache.commons.compress.archivers.tar.TarConstants.<staticinit>()"],
    "org.apache.commons.compress.harmony.unpack200.bytecode.SourceFileAttribute#equals(Object)": ["org.apache.commons.compress.harmony.unpack200.bytecode.Attribute#equals(Object)"],
    "org.apache.commons.compress.archivers.zip.JarMarker#parseFromCentralDirectoryData(byte[],int,int)": ["org.apache.commons.compress.archivers.zip.JarMarker#parseFromLocalFileData(byte[],int,int)"],
    "org.apache.commons.compress.harmony.unpack200.bytecode.forms.SuperMethodRefForm#SuperMethodRefForm(int,String,int[])": [
        "org.apache.commons.compress.harmony.unpack200.bytecode.forms.ClassSpecificReferenceForm#ClassSpecificReferenceForm(int,String,int[])",
        "org.apache.commons.compress.harmony.unpack200.bytecode.forms.SuperMethodRefForm.<init>()"
    ],
    "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream#TarArchiveOutputStream(OutputStream,int,int)": ["org.apache.commons.compress.archivers.tar.TarArchiveOutputStream#TarArchiveOutputStream(OutputStream,int,int,String)"],
    "org.apache.commons.compress.harmony.unpack200.bytecode.NewAttribute#addBCOffset(int,int)": ["org.apache.commons.compress.harmony.unpack200.bytecode.NewAttribute.BCOffset#BCOffset(int)"],
    "org.apache.commons.compress.archivers.zip.X0017_StrongEncryptionHeader#parseCentralDirectoryFormat(byte[],int,int)": [
        "org.apache.commons.compress.archivers.zip.PKWareExtraHeader#assertMinimalLength(int,int)",
        "org.apache.commons.compress.archivers.zip.ZipShort.getValue(byte[],int)",
        "org.apache.commons.compress.archivers.zip.PKWareExtraHeader.HashAlgorithm.getAlgorithmByCode(int)",
        "org.apache.commons.compress.archivers.zip.PKWareExtraHeader.EncryptionAlgorithm.getAlgorithmByCode(int)",
        "org.apache.commons.compress.archivers.zip.ZipLong.getValue(byte[],int)"
    ],
    "org.apache.commons.compress.archivers.sevenz.CLI.main(String[])": [
        "org.apache.commons.compress.archivers.sevenz.CLI.Mode#getMessage()",
        "org.apache.commons.compress.archivers.sevenz.SevenZFile.builder()",
        "org.apache.commons.compress.archivers.sevenz.CLI.grabMode(String[])",
        "org.apache.commons.compress.archivers.sevenz.SevenZFile#getNextEntry()",
        "org.apache.commons.compress.archivers.sevenz.CLI.Mode$Mode$1#takeAction(SevenZFile,SevenZArchiveEntry)",
        "org.apache.commons.compress.archivers.sevenz.CLI.usage()"
    ],
    "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.UnicodeExtraFieldPolicy.<staticinit>()": ["org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.UnicodeExtraFieldPolicy#UnicodeExtraFieldPolicy(String)"],
    "org.apache.commons.compress.archivers.tar.TarArchiveEntry#equals(Object)": ["org.apache.commons.compress.archivers.tar.TarArchiveEntry#equals(TarArchiveEntry)"],
    "org.apache.commons.compress.harmony.unpack200.SegmentConstantPool#getValue(int,long)": [
        "org.apache.commons.compress.harmony.unpack200.CpBands#cpIntegerValue(int)",
        "org.apache.commons.compress.harmony.unpack200.CpBands#cpDoubleValue(int)",
        "org.apache.commons.compress.harmony.unpack200.CpBands#cpStringValue(int)",
        "org.apache.commons.compress.harmony.pack200.Pack200Exception#Pack200Exception(String)",
        "org.apache.commons.compress.harmony.unpack200.CpBands#cpUTF8Value(int)",
        "org.apache.commons.compress.harmony.unpack200.CpBands#cpLongValue(int)",
        "org.apache.commons.compress.harmony.unpack200.CpBands#cpClassValue(int)",
        "org.apache.commons.compress.harmony.unpack200.CpBands#cpFloatValue(int)",
        "org.apache.commons.compress.harmony.unpack200.CpBands#cpSignatureValue(int)",
        "org.apache.commons.compress.harmony.unpack200.SegmentConstantPool.<staticinit>()",
        "org.apache.commons.compress.harmony.unpack200.CpBands#cpNameAndTypeValue(int)"
    ],
    "org.apache.commons.compress.compressors.zstandard.ZstdUtils.setCacheZstdAvailablity(boolean)": [
        "org.apache.commons.compress.compressors.zstandard.ZstdUtils.CachedAvailability.<staticinit>()",
        "org.apache.commons.compress.compressors.zstandard.ZstdUtils.<staticinit>()",
        "org.apache.commons.compress.compressors.zstandard.ZstdUtils.internalIsZstdCompressionAvailable()"
    ],
    "org.apache.commons.compress.archivers.zip.ExtraFieldUtils.mergeLocalFileDataData(ZipExtraField[])": [
        "org.apache.commons.compress.archivers.zip.ZipShort#getBytes()",
        "org.apache.commons.compress.archivers.zip.JarMarker#getLocalFileDataData()",
        "org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField#getLocalFileDataData()",
        "org.apache.commons.compress.archivers.zip.ExtraFieldUtils.<staticinit>()",
        "org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField#getLocalFileDataLength()",
        "org.apache.commons.compress.archivers.zip.AsiExtraField#getLocalFileDataLength()",
        "org.apache.commons.compress.archivers.zip.X000A_NTFS#getLocalFileDataLength()",
        "org.apache.commons.compress.archivers.zip.JarMarker#getHeaderId()",
        "org.apache.commons.compress.archivers.zip.PKWareExtraHeader#getHeaderId()",
        "org.apache.commons.compress.archivers.zip.ResourceAlignmentExtraField#getLocalFileDataData()",
        "org.apache.commons.compress.archivers.zip.UnparseableExtraFieldData#getLocalFileDataLength()",
        "org.apache.commons.compress.archivers.zip.UnrecognizedExtraField#getLocalFileDataData()",
        "org.apache.commons.compress.archivers.zip.X000A_NTFS#getHeaderId()",
        "org.apache.commons.compress.archivers.zip.UnparseableExtraFieldData#getHeaderId()",
        "org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField#getLocalFileDataLength()",
        "org.apache.commons.compress.archivers.zip.AsiExtraField#getHeaderId()",
        "org.apache.commons.compress.archivers.zip.X7875_NewUnix#getLocalFileDataData()",
        "org.apache.commons.compress.archivers.zip.AsiExtraField#getLocalFileDataData()",
        "org.apache.commons.compress.archivers.zip.UnicodeCommentExtraField#getHeaderId()",
        "org.apache.commons.compress.archivers.zip.X7875_NewUnix#getLocalFileDataLength()",
        "org.apache.commons.compress.archivers.zip.PKWareExtraHeader#getLocalFileDataData()",
        "org.apache.commons.compress.archivers.zip.UnrecognizedExtraField#getLocalFileDataLength()",
        "org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField#getLocalFileDataData()",
        "org.apache.commons.compress.archivers.zip.X000A_NTFS#getLocalFileDataData()",
        "org.apache.commons.compress.archivers.zip.X7875_NewUnix#getHeaderId()",
        "org.apache.commons.compress.archivers.zip.UnparseableExtraFieldData#getLocalFileDataData()",
        "org.apache.commons.compress.archivers.zip.JarMarker#getLocalFileDataLength()",
        "org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField#getHeaderId()",
        "org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp#getHeaderId()",
        "org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp#getLocalFileDataData()",
        "org.apache.commons.compress.archivers.zip.ZipShort#getValue()",
        "org.apache.commons.compress.archivers.zip.ResourceAlignmentExtraField#getHeaderId()",
        "org.apache.commons.compress.archivers.zip.ResourceAlignmentExtraField#getLocalFileDataLength()",
        "org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp#getLocalFileDataLength()",
        "org.apache.commons.compress.archivers.zip.PKWareExtraHeader#getLocalFileDataLength()",
        "org.apache.commons.compress.archivers.zip.UnicodePathExtraField#getHeaderId()",
        "org.apache.commons.compress.archivers.zip.UnrecognizedExtraField#getHeaderId()"
    ],
    "org.apache.commons.compress.archivers.zip.CircularBuffer#CircularBuffer(int)": ["org.apache.commons.compress.archivers.zip.CircularBuffer.<init>()"],
    "org.apache.commons.compress.harmony.unpack200.bytecode.forms.NarrowClassRefForm#NarrowClassRefForm(int,String,int[],boolean)": [
        "org.apache.commons.compress.harmony.unpack200.bytecode.forms.ClassRefForm#ClassRefForm(int,String,int[],boolean)",
        "org.apache.commons.compress.harmony.unpack200.bytecode.forms.NarrowClassRefForm.<init>()"
    ],
    "org.apache.commons.compress.compressors.lzw.LZWInputStream#addRepeatOfPreviousCode()": [
        "org.apache.commons.compress.archivers.zip.UnshrinkingInputStream#addEntry(int,byte)",
        "org.apache.commons.compress.compressors.z.ZCompressorInputStream#addEntry(int,byte)"
    ],
    "org.apache.commons.compress.archivers.sevenz.Archive#toString()": [
        "org.apache.commons.compress.archivers.sevenz.Archive.lengthOf(long[])",
        "org.apache.commons.compress.archivers.sevenz.Archive.lengthOf(Object[])"
    ],
    "org.apache.commons.compress.compressors.lz4.BlockLZ4CompressorOutputStream.Pair#splitWithNewBackReferenceLengthOf(int)": ["org.apache.commons.compress.compressors.lz4.BlockLZ4CompressorOutputStream.Pair.<init>()"],
    "org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorInputStream#FramedLZ4CompressorInputStream(InputStream)": ["org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorInputStream#FramedLZ4CompressorInputStream(InputStream,boolean)"],
    "org.apache.commons.compress.harmony.pack200.CpBands#getCPIMethod(String,String,String)": [
        "org.apache.commons.compress.harmony.pack200.CpBands#getCPIMethod(CPClass,String,String)",
        "org.apache.commons.compress.harmony.pack200.CpBands#getCPClass(String)"
    ],
    "org.apache.commons.compress.harmony.unpack200.SegmentHeader#parseArchiveFileCounts(InputStream)": [
        "org.apache.commons.compress.compressors.deflate.DeflateCompressorInputStream#available()",
        "org.apache.commons.compress.harmony.pack200.Codec.<staticinit>()",
        "org.apache.commons.compress.harmony.unpack200.SegmentHeader#setArchiveModtime(long)",
        "org.apache.commons.compress.harmony.unpack200.SegmentOptions#hasArchiveFileCounts()",
        "org.apache.commons.compress.compressors.deflate64.Deflate64CompressorInputStream#available()",
        "org.apache.commons.compress.compressors.zstandard.ZstdCompressorInputStream#available()",
        "org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream#available()",
        "org.apache.commons.compress.compressors.brotli.BrotliCompressorInputStream#available()",
        "org.apache.commons.compress.compressors.xz.XZCompressorInputStream#available()",
        "org.apache.commons.compress.harmony.unpack200.SegmentHeader#setArchiveSize(long)",
        "org.apache.commons.compress.harmony.unpack200.SegmentHeader#decodeScalar(String,InputStream,BHSDCodec)",
        "org.apache.commons.compress.harmony.unpack200.SegmentHeader#setSegmentsRemaining(long)",
        "org.apache.commons.compress.compressors.lz77support.AbstractLZ77CompressorInputStream#available()",
        "org.apache.commons.compress.compressors.lzma.LZMACompressorInputStream#available()",
        "org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStream#available()"
    ],
    "org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream#write(byte[])": ["org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream#write(byte[],int,int)"],
    "org.apache.commons.compress.archivers.zip.BinaryTree.decode(InputStream,int)": [
        "org.apache.commons.compress.utils.IOUtils.readRange(InputStream,int)",
        "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream#read()",
        "org.apache.commons.compress.archivers.sevenz.AES256SHA256Decoder.AES256SHA256DecoderInputStream#read()",
        "org.apache.commons.compress.compressors.xz.XZCompressorInputStream#read()",
        "org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorInputStream#read()",
        "org.apache.commons.compress.compressors.lz77support.AbstractLZ77CompressorInputStream#read()",
        "org.apache.commons.compress.archivers.zip.BinaryTree#BinaryTree(int)",
        "org.apache.commons.compress.compressors.deflate.DeflateCompressorInputStream#read()",
        "org.apache.commons.compress.archivers.zip.BinaryTree#addLeaf(int,int,int,int)",
        "org.apache.commons.compress.archivers.zip.ExplodingInputStream#read()",
        "org.apache.commons.compress.compressors.lzma.LZMACompressorInputStream#read()",
        "org.apache.commons.compress.compressors.zstandard.ZstdCompressorInputStream#read()",
        "org.apache.commons.compress.archivers.sevenz.BoundedSeekableByteChannelInputStream#read()",
        "org.apache.commons.compress.utils.BoundedArchiveInputStream#read()",
        "org.apache.commons.compress.compressors.brotli.BrotliCompressorInputStream#read()",
        "org.apache.commons.compress.archivers.tar.TarArchiveSparseZeroInputStream#read()",
        "org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream#read()",
        "org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStream#read()",
        "org.apache.commons.compress.compressors.deflate64.Deflate64CompressorInputStream#read()",
        "org.apache.commons.compress.compressors.lzw.LZWInputStream#read()",
        "org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream#read()"
    ],
    "org.apache.commons.compress.harmony.unpack200.bytecode.ExceptionsAttribute#equals(Object)": ["org.apache.commons.compress.harmony.unpack200.bytecode.Attribute#equals(Object)"],
    "org.apache.commons.compress.compressors.FileNameUtil#getCompressedFilename(String)": ["org.apache.commons.compress.compressors.FileNameUtil#getCompressedFileName(String)"],
    "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile#writeFilesInfo(DataOutput)": [
        "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile#writeFileAntiItems(DataOutput)",
        "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile#writeFileATimes(DataOutput)",
        "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile#writeUint64(DataOutput,long)",
        "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile#writeFileNames(DataOutput)",
        "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile#writeFileEmptyFiles(DataOutput)",
        "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile#writeFileEmptyStreams(DataOutput)",
        "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile#writeFileMTimes(DataOutput)",
        "org.apache.commons.compress.archivers.sevenz.NID.<staticinit>()",
        "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile#writeFileCTimes(DataOutput)",
        "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile#writeFileWindowsAttributes(DataOutput)"
    ],
    "org.apache.commons.compress.harmony.unpack200.bytecode.ConstantValueAttribute.setAttributeName(CPUTF8)": ["org.apache.commons.compress.harmony.unpack200.bytecode.ConstantValueAttribute.<staticinit>()"],
    "org.apache.commons.compress.harmony.pack200.PackingOptions#setModificationTime(String)": ["org.apache.commons.compress.harmony.pack200.PackingOptions.<staticinit>()"],
    "org.apache.commons.compress.archivers.zip.PKWareExtraHeader#setLocalFileDataData(byte[])": ["org.apache.commons.compress.archivers.zip.ZipUtil.copy(byte[])"],
    "org.apache.commons.compress.harmony.unpack200.bytecode.CPInterfaceMethodRef#generateHashCode()": [
        "org.apache.commons.compress.harmony.unpack200.bytecode.CPNameAndType#hashCode()",
        "org.apache.commons.compress.harmony.unpack200.bytecode.CPClass#hashCode()"
    ],
    "org.apache.commons.compress.compressors.lz77support.LZ77Compressor#slide()": [
        "org.apache.commons.compress.compressors.lz77support.LZ77Compressor#flushLiteralBlock()",
        "org.apache.commons.compress.compressors.lz77support.Parameters#getWindowSize()",
        "org.apache.commons.compress.compressors.lz77support.LZ77Compressor.<staticinit>()"
    ],
    "org.apache.commons.compress.harmony.unpack200.ClassBands#getMethodFlags()": [
        "org.apache.commons.compress.harmony.unpack200.AttributeLayout.<staticinit>()",
        "org.apache.commons.compress.harmony.unpack200.AttributeLayout#isDefaultLayout()",
        "org.apache.commons.compress.harmony.unpack200.AttributeLayoutMap#getAttributeLayout(int,int)"
    ],
    "org.apache.commons.compress.archivers.tar.TarArchiveEntry#parseOctalOrBinary(byte[],int,int,boolean)": [
        "org.apache.commons.compress.archivers.tar.TarUtils.parseOctalOrBinary(byte[],int,int)",
        "org.apache.commons.compress.archivers.tar.TarArchiveEntry.<staticinit>()"
    ],
    "org.apache.commons.compress.harmony.pack200.ClassBands#renumberDoubleOffsetBci(List<Integer>,List<Integer>,List<Object>,IntList,Map<Label, Integer>)": ["org.apache.commons.compress.harmony.pack200.IntList#get(int)"],
    "org.apache.commons.compress.archivers.zip.AsiExtraField#setDirectory(boolean)": ["org.apache.commons.compress.archivers.zip.AsiExtraField#getMode(int)"],
    "org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorOutputStream#FramedLZ4CompressorOutputStream(OutputStream)": [
        "org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorOutputStream#FramedLZ4CompressorOutputStream(OutputStream,Parameters)",
        "org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorOutputStream.Parameters.<staticinit>()"
    ],
    "org.apache.commons.compress.harmony.pack200.Pack200PackerAdapter#pack(JarInputStream,OutputStream)": [
        "org.apache.commons.compress.harmony.pack200.PackingOptions.<init>()",
        "org.apache.commons.compress.harmony.pack200.Archive#pack()",
        "org.apache.commons.compress.harmony.pack200.Pack200Adapter#completed(double)"
    ],
    "org.apache.commons.compress.harmony.pack200.CPSignature#CPSignature(String,CPUTF8,List<CPClass>)": [
        "org.apache.commons.compress.harmony.pack200.ConstantPoolEntry.<init>()",
        "org.apache.commons.compress.harmony.pack200.CPSignature.<init>()",
        "org.apache.commons.compress.harmony.pack200.CPUTF8#toString()"
    ],
    "org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorInputStream#readSignature(boolean)": [
        "org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorInputStream.matches(byte[],int)",
        "org.apache.commons.compress.compressors.CompressorInputStream#count(int)",
        "org.apache.commons.compress.utils.IOUtils.readFully(InputStream,byte[])",
        "org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorInputStream#skipSkippableFrame(byte[])"
    ],
    "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream#getEntryEncoding(ZipArchiveEntry)": [
        "org.apache.commons.compress.archivers.zip.NioZipEncoding#canEncode(String)",
        "org.apache.commons.compress.archivers.tar.TarUtils$ZipEncoding$1#canEncode(String)",
        "org.apache.commons.compress.archivers.zip.ZipArchiveEntry#getName()",
        "org.apache.commons.compress.archivers.zip.ZipEncodingHelper.<staticinit>()"
    ],
    "org.apache.commons.compress.archivers.sevenz.SevenZFile#readUnpackInfo(ByteBuffer,Archive)": [
        "org.apache.commons.compress.archivers.sevenz.SevenZFile#readFolder(ByteBuffer)",
        "org.apache.commons.compress.archivers.sevenz.SevenZFile.getUnsignedByte(ByteBuffer)",
        "org.apache.commons.compress.archivers.sevenz.SevenZFile#readAllOrBits(ByteBuffer,int)",
        "org.apache.commons.compress.archivers.sevenz.NID.<staticinit>()",
        "org.apache.commons.compress.archivers.sevenz.SevenZFile.getInt(ByteBuffer)",
        "org.apache.commons.compress.archivers.sevenz.SevenZFile.readUint64(ByteBuffer)",
        "org.apache.commons.compress.archivers.sevenz.SevenZFile.assertFitsIntoNonNegativeInt(String,long)"
    ],
    "org.apache.commons.compress.compressors.snappy.SnappyCompressorOutputStream#writeLiteralBlockThreeSizeBytes(LiteralBlock,int)": [
        "org.apache.commons.compress.compressors.snappy.SnappyCompressorOutputStream.<staticinit>()",
        "org.apache.commons.compress.compressors.snappy.SnappyCompressorOutputStream#writeLiteralBlockWithSize(int,int,int,LiteralBlock)"
    ],
    "org.apache.commons.compress.harmony.pack200.BcBands#updateRenumbering()": [
        "org.apache.commons.compress.harmony.pack200.IntList#size()",
        "org.apache.commons.compress.harmony.pack200.IntList#isEmpty()",
        "org.apache.commons.compress.harmony.pack200.IntList#add(int)"
    ],
    "org.apache.commons.compress.harmony.unpack200.Segment#unpackProcess()": [
        "org.apache.commons.compress.harmony.unpack200.Segment#readSegment(InputStream)",
        "org.apache.commons.compress.harmony.unpack200.Segment#parseSegment()"
    ],
    "org.apache.commons.compress.utils.ChecksumCalculatingInputStream#ChecksumCalculatingInputStream(Checksum,InputStream)": ["org.apache.commons.compress.utils.ChecksumCalculatingInputStream.<init>()"],
    "org.apache.commons.compress.harmony.unpack200.bytecode.RuntimeVisibleorInvisibleAnnotationsAttribute#getNestedClassFileEntries()": [
        "org.apache.commons.compress.harmony.unpack200.bytecode.AnnotationsAttribute.Annotation#getClassFileEntries()",
        "org.apache.commons.compress.harmony.unpack200.bytecode.ClassFileEntry.<staticinit>()"
    ],
    "org.apache.commons.compress.archivers.zip.ScatterZipOutputStream#zipEntryWriter()": ["org.apache.commons.compress.archivers.zip.ScatterZipOutputStream.ZipEntryWriter#ZipEntryWriter(ScatterZipOutputStream)"],
    "org.apache.commons.compress.compressors.gzip.GzipUtils.getUncompressedFilename(String)": [
        "org.apache.commons.compress.compressors.FileNameUtil#getUncompressedFileName(String)",
        "org.apache.commons.compress.compressors.gzip.GzipUtils.<staticinit>()"
    ],
    "org.apache.commons.compress.compressors.xz.XZUtils.matches(byte[],int)": ["org.apache.commons.compress.compressors.xz.XZUtils.<staticinit>()"],
    "org.apache.commons.compress.harmony.unpack200.bytecode.forms.ByteCodeForm#ByteCodeForm(int,String,int[])": [
        "org.apache.commons.compress.harmony.unpack200.bytecode.forms.ByteCodeForm#calculateOperandPosition()",
        "org.apache.commons.compress.harmony.unpack200.bytecode.forms.ByteCodeForm.<init>()"
    ],
    "org.apache.commons.compress.harmony.unpack200.bytecode.forms.TableSwitchForm#TableSwitchForm(int,String)": [
        "org.apache.commons.compress.harmony.unpack200.bytecode.forms.SwitchForm#SwitchForm(int,String)",
        "org.apache.commons.compress.harmony.unpack200.bytecode.forms.TableSwitchForm.<init>()"
    ],
    "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream#writeEOFRecord()": ["org.apache.commons.compress.archivers.tar.TarArchiveOutputStream#writeRecord(byte[])"],
    "org.apache.commons.compress.archivers.zip.ZipArchiveEntry#addExtraField(ZipExtraField)": [
        "org.apache.commons.compress.archivers.zip.ZipArchiveEntry#internalAddExtraField(ZipExtraField)",
        "org.apache.commons.compress.archivers.zip.ZipArchiveEntry#setExtra()"
    ],
    "org.apache.commons.compress.archivers.sevenz.LZMADecoder#LZMADecoder()": [
        "org.apache.commons.compress.archivers.sevenz.AbstractCoder#AbstractCoder(Class<?>[]...)",
        "org.apache.commons.compress.archivers.sevenz.LZMADecoder.<init>()"
    ],
    "org.apache.commons.compress.harmony.unpack200.bytecode.CPDouble#writeBody(DataOutputStream)": ["org.apache.commons.compress.harmony.unpack200.bytecode.CPConstantNumber#getNumber()"],
    "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream#write0(int)": ["org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream#writeRun()"],
    "org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp.fileTimeToZipLong(FileTime)": [
        "org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp.unixTimeToZipLong(long)",
        "org.apache.commons.compress.utils.TimeUtils.toUnixTime(FileTime)"
    ],
    "org.apache.commons.compress.utils.MultiReadOnlySeekableByteChannel.forPaths(Path[]...)": ["org.apache.commons.compress.utils.MultiReadOnlySeekableByteChannel#MultiReadOnlySeekableByteChannel(List<SeekableByteChannel>)"],
    "org.apache.commons.compress.archivers.zip.ParallelScatterZipCreator#addArchiveEntry(ZipArchiveEntryRequestSupplier)": [
        "org.apache.commons.compress.archivers.zip.ParallelScatterZipCreator#createCallable(ZipArchiveEntryRequestSupplier)",
        "org.apache.commons.compress.archivers.zip.ParallelScatterZipCreator#submitStreamAwareCallable(Callable<? extends ScatterZipOutputStream>)"
    ],
    "org.apache.commons.compress.archivers.zip.ZipArchiveEntry#parseExtraFields(byte[],boolean,ExtraFieldParsingBehavior)$ExtraFieldParsingBehavior$1#onUnparseableExtraField(byte[],int,int,boolean,int)": [
        "org.apache.commons.compress.archivers.zip.ZipArchiveEntry#parseExtraFields(byte[],boolean,ExtraFieldParsingBehavior)$ExtraFieldParsingBehavior$1#onUnparseableExtraField(byte[],int,int,boolean,int)",
        "org.apache.commons.compress.archivers.zip.ExtraFieldUtils.parse(byte[],boolean,UnparseableExtraField)$ExtraFieldParsingBehavior$1#onUnparseableExtraField(byte[],int,int,boolean,int)",
        "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.ExtraFieldParsingMode#onUnparseableExtraField(byte[],int,int,boolean,int)",
        "org.apache.commons.compress.archivers.zip.ExtraFieldUtils.UnparseableExtraField#onUnparseableExtraField(byte[],int,int,boolean,int)"
    ],
    "org.apache.commons.compress.archivers.zip.X000A_NTFS#setAccessTime(ZipEightByteInteger)": ["org.apache.commons.compress.archivers.zip.ZipEightByteInteger.<staticinit>()"],
    "org.apache.commons.compress.harmony.unpack200.bytecode.CPInterfaceMethodRef#invokeInterfaceCount()": ["org.apache.commons.compress.harmony.unpack200.bytecode.CPNameAndType#invokeInterfaceCount()"],
    "org.apache.commons.compress.compressors.lz77support.LZ77Compressor#insertStringsInMatch(int)": [
        "org.apache.commons.compress.compressors.lz77support.LZ77Compressor#insertString(int)",
        "org.apache.commons.compress.compressors.lz77support.LZ77Compressor.<staticinit>()"
    ],
    "org.apache.commons.compress.harmony.unpack200.bytecode.forms.ReferenceForm#ReferenceForm(int,String,int[])": [
        "org.apache.commons.compress.harmony.unpack200.bytecode.forms.ReferenceForm.<init>()",
        "org.apache.commons.compress.harmony.unpack200.bytecode.forms.ByteCodeForm#ByteCodeForm(int,String,int[])"
    ],
    "org.apache.commons.compress.harmony.pack200.CodecEncoding.getSpecifierForDefaultCodec(BHSDCodec)": ["org.apache.commons.compress.harmony.pack200.CodecEncoding.getSpecifier(Codec,Codec)"],
    "org.apache.commons.compress.compressors.deflate64.HuffmanDecoder.DecodingMemory#recordToBuffer(int,int,byte[])": [
        "org.apache.commons.compress.compressors.deflate64.HuffmanDecoder.DecodingMemory#incCounter(int)",
        "org.apache.commons.compress.compressors.deflate64.HuffmanDecoder.DecodingMemory#add(byte)"
    ],
    "org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorInputStream#readOnce(byte[],int,int)": [
        "org.apache.commons.compress.compressors.zstandard.ZstdCompressorInputStream#read(byte[],int,int)",
        "org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorInputStream#read(byte[],int,int)",
        "org.apache.commons.compress.archivers.sevenz.BoundedSeekableByteChannelInputStream#read(byte[],int,int)",
        "org.apache.commons.compress.compressors.deflate64.Deflate64CompressorInputStream#read(byte[],int,int)",
        "org.apache.commons.compress.compressors.CompressorInputStream#count(int)",
        "org.apache.commons.compress.compressors.brotli.BrotliCompressorInputStream#read(byte[],int,int)",
        "org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream#read(byte[],int,int)",
        "org.apache.commons.compress.archivers.sevenz.AES256SHA256Decoder.AES256SHA256DecoderInputStream#read(byte[],int,int)",
        "org.apache.commons.compress.compressors.lzma.LZMACompressorInputStream#read(byte[],int,int)",
        "org.apache.commons.compress.compressors.lz4.BlockLZ4CompressorInputStream#read(byte[],int,int)",
        "org.apache.commons.compress.compressors.snappy.SnappyCompressorInputStream#read(byte[],int,int)",
        "org.apache.commons.compress.compressors.xz.XZCompressorInputStream#read(byte[],int,int)",
        "org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream#read(byte[],int,int)",
        "org.apache.commons.compress.utils.BoundedArchiveInputStream#read(byte[],int,int)",
        "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream#read(byte[],int,int)",
        "org.apache.commons.compress.compressors.CompressorInputStream#getBytesRead()",
        "org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStream#read(byte[],int,int)",
        "org.apache.commons.compress.compressors.lzw.LZWInputStream#read(byte[],int,int)",
        "org.apache.commons.compress.compressors.CompressorInputStream#count(long)",
        "org.apache.commons.compress.compressors.deflate.DeflateCompressorInputStream#read(byte[],int,int)"
    ],
    "org.apache.commons.compress.harmony.unpack200.bytecode.forms.ClassRefForm#getPoolID()": ["org.apache.commons.compress.harmony.unpack200.SegmentConstantPool.<staticinit>()"],
    "org.apache.commons.compress.harmony.pack200.CpBands#CpBands(Segment,int)": [
        "org.apache.commons.compress.harmony.pack200.BandSet#BandSet(int,SegmentHeader)",
        "org.apache.commons.compress.harmony.pack200.CpBands.<init>()",
        "org.apache.commons.compress.harmony.pack200.Segment#getSegmentHeader()"
    ],
    "org.apache.commons.compress.utils.CRC32VerifyingInputStream#CRC32VerifyingInputStream(InputStream,long,long)": [
        "org.apache.commons.compress.utils.ChecksumVerifyingInputStream#ChecksumVerifyingInputStream(Checksum,InputStream,long,long)",
        "org.apache.commons.compress.utils.CRC32VerifyingInputStream.<init>()"
    ],
    "org.apache.commons.compress.harmony.unpack200.Archive.<init>()": ["org.apache.commons.compress.harmony.unpack200.Segment.<staticinit>()"],
    "org.apache.commons.compress.archivers.zip.X000A_NTFS#reset()": ["org.apache.commons.compress.archivers.zip.ZipEightByteInteger.<staticinit>()"],
    "org.apache.commons.compress.harmony.pack200.IcBands#addToMap(String,IcTuple)": ["org.apache.commons.compress.harmony.pack200.IcBands.IcTuple#equals(Object)"],
    "org.apache.commons.compress.archivers.zip.ResourceAlignmentExtraField#parseFromLocalFileData(byte[],int,int)": [
        "org.apache.commons.compress.archivers.zip.ResourceAlignmentExtraField.<staticinit>()",
        "org.apache.commons.compress.archivers.zip.ResourceAlignmentExtraField#parseFromCentralDirectoryData(byte[],int,int)"
    ],
    "org.apache.commons.compress.harmony.unpack200.Segment#unpack(InputStream,JarOutputStream)": [
        "org.apache.commons.compress.harmony.unpack200.Segment#unpackRead(InputStream)",
        "org.apache.commons.compress.harmony.unpack200.Segment#unpackWrite(JarOutputStream)",
        "org.apache.commons.compress.harmony.unpack200.Segment#unpackProcess()"
    ],
    "org.apache.commons.compress.compressors.CompressorException#CompressorException(String)": ["org.apache.commons.compress.compressors.CompressorException.<init>()"],
    "org.apache.commons.compress.archivers.tar.TarArchiveEntry#setUserId(int)": ["org.apache.commons.compress.archivers.tar.TarArchiveEntry#setUserId(long)"],
    "org.apache.commons.compress.harmony.unpack200.bytecode.forms.ShortForm#ShortForm(int,String,int[])": [
        "org.apache.commons.compress.harmony.unpack200.bytecode.forms.ShortForm.<init>()",
        "org.apache.commons.compress.harmony.unpack200.bytecode.forms.ByteCodeForm#ByteCodeForm(int,String,int[])"
    ],
    "org.apache.commons.compress.harmony.unpack200.bytecode.forms.SuperFieldRefForm#SuperFieldRefForm(int,String,int[])": [
        "org.apache.commons.compress.harmony.unpack200.bytecode.forms.ClassSpecificReferenceForm#ClassSpecificReferenceForm(int,String,int[])",
        "org.apache.commons.compress.harmony.unpack200.bytecode.forms.SuperFieldRefForm.<init>()"
    ],
    "org.apache.commons.compress.archivers.sevenz.SevenZFile#readBits(ByteBuffer,int)": ["org.apache.commons.compress.archivers.sevenz.SevenZFile.getUnsignedByte(ByteBuffer)"],
    "org.apache.commons.compress.compressors.lzma.LZMAUtils#LZMAUtils()": ["org.apache.commons.compress.compressors.lzma.LZMAUtils.<init>()"],
    "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile#writeFileNames(DataOutput)": [
        "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile#writeUint64(DataOutput,long)",
        "org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry#getName()",
        "org.apache.commons.compress.archivers.sevenz.NID.<staticinit>()"
    ],
    "org.apache.commons.compress.archivers.zip.FileRandomAccessOutputStream#FileRandomAccessOutputStream(FileChannel)": [
        "org.apache.commons.compress.archivers.zip.FileRandomAccessOutputStream.<init>()",
        "org.apache.commons.compress.archivers.zip.RandomAccessOutputStream.<init>()"
    ],
    "org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream#CpioArchiveOutputStream(OutputStream)": [
        "org.apache.commons.compress.archivers.cpio.CpioConstants.<staticinit>()",
        "org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream#CpioArchiveOutputStream(OutputStream,short)"
    ],
    "org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorOutputStream.Parameters#Parameters(BlockSize,Parameters)": ["org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorOutputStream.Parameters#Parameters(BlockSize,boolean,boolean,boolean,Parameters)"],
    "org.apache.commons.compress.archivers.tar.TarUtils.parsePAX1XSparseHeaders(InputStream,int)": [
        "org.apache.commons.compress.archivers.tar.TarArchiveStructSparse#TarArchiveStructSparse(long,long)",
        "org.apache.commons.compress.archivers.tar.TarUtils.readLineOfNumberForPax1X(InputStream)"
    ],
    "org.apache.commons.compress.harmony.unpack200.bytecode.LocalVariableTableAttribute#getNestedClassFileEntries()": [
        "org.apache.commons.compress.harmony.unpack200.bytecode.Attribute#getAttributeName()",
        "org.apache.commons.compress.harmony.unpack200.bytecode.ClassFileEntry.<staticinit>()"
    ],
    "org.apache.commons.compress.archivers.zip.ZipFile#getDataOffset(ZipArchiveEntry)": [
        "org.apache.commons.compress.archivers.zip.ZipFile#setDataOffset(ZipArchiveEntry)",
        "org.apache.commons.compress.archivers.EntryStreamOffsets.<staticinit>()",
        "org.apache.commons.compress.archivers.zip.ZipArchiveEntry#getDataOffset()"
    ],
    "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.ExtraFieldParsingMode.fillAndMakeUnrecognizedOnError(ZipExtraField,byte[],int,int,boolean)": [
        "org.apache.commons.compress.archivers.zip.UnrecognizedExtraField.<init>()",
        "org.apache.commons.compress.archivers.zip.X7875_NewUnix#getHeaderId()",
        "org.apache.commons.compress.archivers.zip.JarMarker#getHeaderId()",
        "org.apache.commons.compress.archivers.zip.PKWareExtraHeader#getHeaderId()",
        "org.apache.commons.compress.archivers.zip.UnrecognizedExtraField#setHeaderId(ZipShort)",
        "org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField#getHeaderId()",
        "org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp#getHeaderId()",
        "org.apache.commons.compress.archivers.zip.UnrecognizedExtraField#setLocalFileDataData(byte[])",
        "org.apache.commons.compress.archivers.zip.X000A_NTFS#getHeaderId()",
        "org.apache.commons.compress.archivers.zip.UnparseableExtraFieldData#getHeaderId()",
        "org.apache.commons.compress.archivers.zip.ResourceAlignmentExtraField#getHeaderId()",
        "org.apache.commons.compress.archivers.zip.ExtraFieldUtils.fillExtraField(ZipExtraField,byte[],int,int,boolean)",
        "org.apache.commons.compress.archivers.zip.AsiExtraField#getHeaderId()",
        "org.apache.commons.compress.archivers.zip.UnicodePathExtraField#getHeaderId()",
        "org.apache.commons.compress.archivers.zip.UnicodeCommentExtraField#getHeaderId()",
        "org.apache.commons.compress.archivers.zip.UnrecognizedExtraField#getHeaderId()",
        "org.apache.commons.compress.archivers.zip.UnrecognizedExtraField#setCentralDirectoryData(byte[])"
    ],
    "org.apache.commons.compress.archivers.zip.ScatterZipOutputStream.fileBased(File,int)": ["org.apache.commons.compress.archivers.zip.ScatterZipOutputStream.pathBased(Path,int)"],
    "org.apache.commons.compress.archivers.zip.ZipSplitReadOnlySeekableByteChannel.forPaths(Path[]...)": ["org.apache.commons.compress.archivers.zip.ZipSplitReadOnlySeekableByteChannel.forPaths(List<Path>,OpenOption[])"],
    "org.apache.commons.compress.archivers.zip.NioZipEncoding#decode(byte[])": ["org.apache.commons.compress.archivers.zip.NioZipEncoding#newDecoder()"],
    "org.apache.commons.compress.archivers.zip.ScatterZipOutputStream.CompressedEntry#transferToArchiveEntry()": [
        "org.apache.commons.compress.archivers.zip.ZipArchiveEntryRequest#getZipArchiveEntry()",
        "org.apache.commons.compress.archivers.zip.ZipArchiveEntryRequest#getMethod()",
        "org.apache.commons.compress.archivers.zip.ZipArchiveEntry#setSize(long)",
        "org.apache.commons.compress.archivers.zip.ZipArchiveEntry#setMethod(int)"
    ],
    "org.apache.commons.compress.archivers.zip.ResourceAlignmentExtraField#getHeaderId()": ["org.apache.commons.compress.archivers.zip.ResourceAlignmentExtraField.<staticinit>()"],
    "org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStream#FramedSnappyCompressorInputStream(InputStream)": [
        "org.apache.commons.compress.compressors.snappy.FramedSnappyDialect.<staticinit>()",
        "org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStream#FramedSnappyCompressorInputStream(InputStream,FramedSnappyDialect)"
    ],
    "org.apache.commons.compress.archivers.sevenz.SevenZFile#sanityCheckFolder(ByteBuffer,ArchiveStatistics)": [
        "org.apache.commons.compress.archivers.sevenz.SevenZFile.skipBytesFully(ByteBuffer,long)",
        "org.apache.commons.compress.archivers.sevenz.SevenZFile.readUint64(ByteBuffer)",
        "org.apache.commons.compress.archivers.sevenz.SevenZFile.assertFitsIntoNonNegativeInt(String,long)",
        "org.apache.commons.compress.archivers.sevenz.SevenZFile.get(ByteBuffer,byte[])",
        "org.apache.commons.compress.archivers.sevenz.SevenZFile.getUnsignedByte(ByteBuffer)"
    ],
    "org.apache.commons.compress.archivers.zip.UnicodePathExtraField#getHeaderId()": ["org.apache.commons.compress.archivers.zip.UnicodePathExtraField.<staticinit>()"],
    "org.apache.commons.compress.harmony.unpack200.BandSet#parseReferences(String,InputStream,BHSDCodec,int[],String[])": [
        "org.apache.commons.compress.harmony.pack200.Pack200Exception#Pack200Exception(String)",
        "org.apache.commons.compress.harmony.unpack200.BandSet#decodeBandInt(String,InputStream,BHSDCodec,int)"
    ],
    "org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream#close()": [
        "org.apache.commons.compress.archivers.zip.FileRandomAccessOutputStream#close()",
        "org.apache.commons.compress.compressors.snappy.SnappyCompressorOutputStream#close()",
        "org.apache.commons.compress.compressors.deflate.DeflateCompressorOutputStream#close()",
        "org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream#close()",
        "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream#close()",
        "org.apache.commons.compress.compressors.lzma.LZMACompressorOutputStream#close()",
        "org.apache.commons.compress.utils.FixedLengthBlockOutputStream#close()",
        "org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorOutputStream#close()",
        "org.apache.commons.compress.compressors.xz.XZCompressorOutputStream#close()",
        "org.apache.commons.compress.archivers.zip.ZipSplitOutputStream#close()",
        "org.apache.commons.compress.archivers.zip.SeekableChannelRandomAccessOutputStream#close()",
        "org.apache.commons.compress.archivers.sevenz.Coders.DeflateDecoder.DeflateDecoderOutputStream#close()",
        "org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorOutputStream#close()",
        "org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream#close()",
        "org.apache.commons.compress.compressors.pack200.AbstractStreamBridge#stop()",
        "org.apache.commons.compress.compressors.lz4.BlockLZ4CompressorOutputStream#close()",
        "org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream#finish()",
        "org.apache.commons.compress.archivers.ar.ArArchiveOutputStream#close()",
        "org.apache.commons.compress.compressors.zstandard.ZstdCompressorOutputStream#close()",
        "org.apache.commons.compress.archivers.sevenz.AES256SHA256Decoder.AES256SHA256DecoderOutputStream#close()",
        "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream#close()",
        "org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream#close()",
        "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream#close()",
        "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.OutputStreamWrapper#close()"
    ],
    "org.apache.commons.compress.archivers.tar.TarArchiveEntry#setModTime(long)": ["org.apache.commons.compress.archivers.tar.TarArchiveEntry#setLastModifiedTime(FileTime)"],
    "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream#writePreamble(byte[],int,int)": ["org.apache.commons.compress.archivers.zip.StreamCompressor#writeCounted(byte[],int,int)"],
    "org.apache.commons.compress.archivers.zip.ZipUtil.isDosTime(long)": [
        "org.apache.commons.compress.archivers.zip.ZipUtil.javaToDosTime(long)",
        "org.apache.commons.compress.archivers.zip.ZipUtil.<staticinit>()"
    ],
    "org.apache.commons.compress.utils.MultiReadOnlySeekableByteChannel#size()": [
        "org.apache.commons.compress.utils.MultiReadOnlySeekableByteChannel#size()",
        "org.apache.commons.compress.utils.SeekableInMemoryByteChannel#size()",
        "org.apache.commons.compress.utils.MultiReadOnlySeekableByteChannel#isOpen()"
    ],
    "org.apache.commons.compress.harmony.pack200.Codec#decodeInts(int,InputStream,int)": [
        "org.apache.commons.compress.harmony.pack200.PopulationCodec#decode(InputStream,long)",
        "org.apache.commons.compress.harmony.pack200.BHSDCodec#decode(InputStream,long)",
        "org.apache.commons.compress.harmony.pack200.Codec#check(int,InputStream)",
        "org.apache.commons.compress.harmony.pack200.RunCodec#decode(InputStream,long)"
    ],
    "org.apache.commons.compress.archivers.zip.ScatterZipOutputStream.fileBased(File)": ["org.apache.commons.compress.archivers.zip.ScatterZipOutputStream.pathBased(Path,int)"],
    "org.apache.commons.compress.harmony.unpack200.CpBands#parseCpLong(InputStream)": [
        "org.apache.commons.compress.harmony.unpack200.SegmentHeader#getCpLongCount()",
        "org.apache.commons.compress.harmony.pack200.Codec.<staticinit>()",
        "org.apache.commons.compress.harmony.unpack200.BandSet#parseFlags(String,InputStream,int,BHSDCodec,BHSDCodec)"
    ],
    "org.apache.commons.compress.harmony.unpack200.bytecode.CPRef#toString()": [
        "org.apache.commons.compress.harmony.unpack200.bytecode.ConstantPoolEntry.<staticinit>()",
        "org.apache.commons.compress.harmony.unpack200.bytecode.ConstantPoolEntry#getTag()"
    ],
    "org.apache.commons.compress.compressors.CompressorStreamFactory.getLZ4Framed()": ["org.apache.commons.compress.compressors.CompressorStreamFactory.<staticinit>()"],
    "org.apache.commons.compress.harmony.unpack200.bytecode.ConstantValueAttribute#resolve(ClassConstantPool)": [
        "org.apache.commons.compress.harmony.unpack200.bytecode.EnclosingMethodAttribute#resolve(ClassConstantPool)",
        "org.apache.commons.compress.harmony.unpack200.bytecode.ClassFileEntry#resolve(ClassConstantPool)",
        "org.apache.commons.compress.harmony.unpack200.bytecode.CPString#resolve(ClassConstantPool)",
        "org.apache.commons.compress.harmony.unpack200.bytecode.SourceFileAttribute#resolve(ClassConstantPool)",
        "org.apache.commons.compress.harmony.unpack200.bytecode.CPFieldRef#resolve(ClassConstantPool)",
        "org.apache.commons.compress.harmony.unpack200.bytecode.LocalVariableTableAttribute#resolve(ClassConstantPool)",
        "org.apache.commons.compress.harmony.unpack200.bytecode.LineNumberTableAttribute#resolve(ClassConstantPool)",
        "org.apache.commons.compress.harmony.unpack200.bytecode.RuntimeVisibleorInvisibleParameterAnnotationsAttribute#resolve(ClassConstantPool)",
        "org.apache.commons.compress.harmony.unpack200.bytecode.NewAttribute#resolve(ClassConstantPool)",
        "org.apache.commons.compress.harmony.unpack200.bytecode.LocalVariableTypeTableAttribute#resolve(ClassConstantPool)",
        "org.apache.commons.compress.harmony.unpack200.bytecode.CPRef#resolve(ClassConstantPool)",
        "org.apache.commons.compress.harmony.unpack200.bytecode.ConstantValueAttribute#resolve(ClassConstantPool)",
        "org.apache.commons.compress.harmony.unpack200.bytecode.ByteCode#resolve(ClassConstantPool)",
        "org.apache.commons.compress.harmony.unpack200.bytecode.RuntimeVisibleorInvisibleAnnotationsAttribute#resolve(ClassConstantPool)",
        "org.apache.commons.compress.harmony.unpack200.bytecode.InnerClassesAttribute#resolve(ClassConstantPool)",
        "org.apache.commons.compress.harmony.unpack200.bytecode.Attribute#resolve(ClassConstantPool)",
        "org.apache.commons.compress.harmony.unpack200.bytecode.CPMember#resolve(ClassConstantPool)",
        "org.apache.commons.compress.harmony.unpack200.bytecode.ExceptionsAttribute#resolve(ClassConstantPool)",
        "org.apache.commons.compress.harmony.unpack200.bytecode.CodeAttribute#resolve(ClassConstantPool)",
        "org.apache.commons.compress.harmony.unpack200.bytecode.AnnotationDefaultAttribute#resolve(ClassConstantPool)",
        "org.apache.commons.compress.harmony.unpack200.bytecode.ClassConstantPool#indexOf(ClassFileEntry)",
        "org.apache.commons.compress.harmony.unpack200.bytecode.CPClass#resolve(ClassConstantPool)",
        "org.apache.commons.compress.harmony.unpack200.bytecode.SignatureAttribute#resolve(ClassConstantPool)",
        "org.apache.commons.compress.harmony.unpack200.bytecode.CPNameAndType#resolve(ClassConstantPool)"
    ],
    "org.apache.commons.compress.harmony.unpack200.BandSet#parseFlags(String,InputStream,int[],BHSDCodec,BHSDCodec)": ["org.apache.commons.compress.harmony.unpack200.BandSet#decodeBandInt(String,InputStream,BHSDCodec,int)"],
    "org.apache.commons.compress.compressors.lz77support.LZ77Compressor.LiteralBlock#getType()": ["org.apache.commons.compress.compressors.lz77support.LZ77Compressor.Block.BlockType.<staticinit>()"],
    "org.apache.commons.compress.harmony.unpack200.bytecode.RuntimeVisibleorInvisibleAnnotationsAttribute#toString()": ["org.apache.commons.compress.harmony.unpack200.bytecode.CPUTF8#underlyingString()"],
    "org.apache.commons.compress.harmony.unpack200.bytecode.SignatureAttribute.setAttributeName(CPUTF8)": ["org.apache.commons.compress.harmony.unpack200.bytecode.SignatureAttribute.<staticinit>()"],
    "org.apache.commons.compress.archivers.sevenz.BoundedSeekableByteChannelInputStream#read()": ["org.apache.commons.compress.archivers.sevenz.BoundedSeekableByteChannelInputStream#read(int)"],
    "org.apache.commons.compress.compressors.lz77support.Parameters#Parameters(int,int,int,int,int,int,int,boolean,int)": ["org.apache.commons.compress.compressors.lz77support.Parameters.<init>()"],
    "org.apache.commons.compress.compressors.z.ZCompressorInputStream#decompressNextSymbol()": [
        "org.apache.commons.compress.compressors.z.ZCompressorInputStream#readNextCode()",
        "org.apache.commons.compress.compressors.lzw.LZWInputStream#getCodeSize()",
        "org.apache.commons.compress.compressors.lzw.LZWInputStream#getClearCode()",
        "org.apache.commons.compress.compressors.lzw.LZWInputStream#resetPreviousCode()",
        "org.apache.commons.compress.compressors.z.ZCompressorInputStream#reAlignReading()",
        "org.apache.commons.compress.compressors.lzw.LZWInputStream#resetCodeSize()",
        "org.apache.commons.compress.compressors.lzw.LZWInputStream#addRepeatOfPreviousCode()",
        "org.apache.commons.compress.compressors.lzw.LZWInputStream#expandCodeToOutputStack(int,boolean)",
        "org.apache.commons.compress.compressors.z.ZCompressorInputStream#clearEntries()",
        "org.apache.commons.compress.compressors.lzw.LZWInputStream#getTableSize()"
    ],
    "org.apache.commons.compress.harmony.pack200.NewAttribute#NewAttribute(ClassReader,String,String,byte[],char[],int,Label[])": ["org.apache.commons.compress.harmony.pack200.NewAttribute.<init>()"],
    "org.apache.commons.compress.archivers.zip.AsiExtraField#getLocalFileDataData()": [
        "org.apache.commons.compress.archivers.zip.AsiExtraField#getMode()",
        "org.apache.commons.compress.archivers.zip.AsiExtraField#getLocalFileDataLength()",
        "org.apache.commons.compress.archivers.zip.AsiExtraField#getUserId()",
        "org.apache.commons.compress.archivers.zip.AsiExtraField#getGroupId()",
        "org.apache.commons.compress.archivers.zip.ZipLong.getBytes(long)",
        "org.apache.commons.compress.archivers.zip.AsiExtraField#getLinkedFile()",
        "org.apache.commons.compress.archivers.zip.ZipShort.getBytes(int)",
        "org.apache.commons.compress.archivers.zip.ZipShort#getValue()",
        "org.apache.commons.compress.archivers.zip.ZipConstants.<staticinit>()"
    ],
    "org.apache.commons.compress.harmony.pack200.ClassBands.TempParamAnnotation.<init>()": ["org.apache.commons.compress.harmony.pack200.IntList#IntList()"],
    "org.apache.commons.compress.harmony.unpack200.CpBands#parseCpFloat(InputStream)": [
        "org.apache.commons.compress.harmony.unpack200.BandSet#decodeBandInt(String,InputStream,BHSDCodec,int)",
        "org.apache.commons.compress.harmony.pack200.Codec.<staticinit>()",
        "org.apache.commons.compress.harmony.unpack200.SegmentHeader#getCpFloatCount()"
    ],
    "org.apache.commons.compress.archivers.sevenz.SevenZFile#sanityCheckArchiveProperties(ByteBuffer)": [
        "org.apache.commons.compress.archivers.sevenz.NID.<staticinit>()",
        "org.apache.commons.compress.archivers.sevenz.SevenZFile.skipBytesFully(ByteBuffer,long)",
        "org.apache.commons.compress.archivers.sevenz.SevenZFile.readUint64(ByteBuffer)",
        "org.apache.commons.compress.archivers.sevenz.SevenZFile.assertFitsIntoNonNegativeInt(String,long)",
        "org.apache.commons.compress.archivers.sevenz.SevenZFile.getUnsignedByte(ByteBuffer)"
    ],
    "org.apache.commons.compress.harmony.pack200.SegmentHeader#SegmentHeader()": [
        "org.apache.commons.compress.harmony.pack200.SegmentHeader.<init>()",
        "org.apache.commons.compress.harmony.pack200.BandSet#BandSet(int,SegmentHeader)"
    ],
    "org.apache.commons.compress.harmony.pack200.MetadataBandGroup#removeLatest()": [
        "org.apache.commons.compress.harmony.pack200.IntList#size()",
        "org.apache.commons.compress.harmony.pack200.IntList#remove(int)",
        "org.apache.commons.compress.harmony.pack200.MetadataBandGroup#removeOnePair()"
    ],
    "org.apache.commons.compress.harmony.unpack200.bytecode.forms.FieldRefForm#getOffset(OperandManager)": ["org.apache.commons.compress.harmony.unpack200.bytecode.OperandManager#nextFieldRef()"],
    "org.apache.commons.compress.compressors.deflate.DeflateCompressorInputStream#read()": [
        "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream#read()",
        "org.apache.commons.compress.archivers.sevenz.AES256SHA256Decoder.AES256SHA256DecoderInputStream#read()",
        "org.apache.commons.compress.compressors.xz.XZCompressorInputStream#read()",
        "org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorInputStream#read()",
        "org.apache.commons.compress.compressors.lz77support.AbstractLZ77CompressorInputStream#read()",
        "org.apache.commons.compress.compressors.CompressorInputStream#count(int)",
        "org.apache.commons.compress.compressors.deflate.DeflateCompressorInputStream#read()",
        "org.apache.commons.compress.archivers.zip.ExplodingInputStream#read()",
        "org.apache.commons.compress.compressors.lzma.LZMACompressorInputStream#read()",
        "org.apache.commons.compress.compressors.zstandard.ZstdCompressorInputStream#read()",
        "org.apache.commons.compress.archivers.sevenz.BoundedSeekableByteChannelInputStream#read()",
        "org.apache.commons.compress.utils.BoundedArchiveInputStream#read()",
        "org.apache.commons.compress.compressors.brotli.BrotliCompressorInputStream#read()",
        "org.apache.commons.compress.archivers.tar.TarArchiveSparseZeroInputStream#read()",
        "org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream#read()",
        "org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStream#read()",
        "org.apache.commons.compress.compressors.deflate64.Deflate64CompressorInputStream#read()",
        "org.apache.commons.compress.compressors.lzw.LZWInputStream#read()",
        "org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream#read()"
    ],
    "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile#SevenZOutputFile(SeekableByteChannel,char[])": [
        "org.apache.commons.compress.archivers.sevenz.SevenZFile.<staticinit>()",
        "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.<init>()",
        "org.apache.commons.compress.utils.SeekableInMemoryByteChannel#position(long)",
        "org.apache.commons.compress.archivers.sevenz.AES256Options#AES256Options(char[])",
        "org.apache.commons.compress.utils.MultiReadOnlySeekableByteChannel#position(long)"
    ],
    "org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorOutputStream#writeTrailer()": [
        "org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream#write(byte[])",
        "org.apache.commons.compress.archivers.sevenz.Coders.DeflateDecoder.DeflateDecoderOutputStream#write(byte[])",
        "org.apache.commons.compress.utils.ByteUtils.toLittleEndian(OutputStream,long,int)",
        "org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorOutputStream.<staticinit>()",
        "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.OutputStreamWrapper#write(byte[])",
        "org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream#write(byte[])",
        "org.apache.commons.compress.archivers.zip.ZipSplitOutputStream#write(byte[])"
    ],
    "org.apache.commons.compress.archivers.tar.TarArchiveEntry#isDirectory()": [
        "org.apache.commons.compress.archivers.tar.TarArchiveEntry#isPaxHeader()",
        "org.apache.commons.compress.archivers.tar.TarArchiveEntry#isGlobalPaxHeader()",
        "org.apache.commons.compress.archivers.tar.TarArchiveEntry#getName()",
        "org.apache.commons.compress.archivers.tar.TarConstants.<staticinit>()"
    ],
    "org.apache.commons.compress.compressors.brotli.BrotliUtils.<staticinit>()": [
        "org.apache.commons.compress.compressors.brotli.BrotliUtils.CachedAvailability.<staticinit>()",
        "org.apache.commons.compress.compressors.brotli.BrotliUtils.setCacheBrotliAvailablity(boolean)",
        "org.apache.commons.compress.utils.OsgiUtils.isRunningInOsgiEnvironment()"
    ],
    "org.apache.commons.compress.archivers.cpio.CpioArchiveEntry#CpioArchiveEntry(File,String)": [
        "org.apache.commons.compress.archivers.cpio.CpioArchiveEntry#CpioArchiveEntry(short,File,String)",
        "org.apache.commons.compress.archivers.cpio.CpioConstants.<staticinit>()"
    ],
    "org.apache.commons.compress.archivers.tar.TarArchiveEntry#TarArchiveEntry(byte[],ZipEncoding,boolean)": [
        "org.apache.commons.compress.archivers.tar.TarArchiveEntry#TarArchiveEntry(Map<String, String>,byte[],ZipEncoding,boolean)",
        "org.apache.commons.compress.archivers.tar.TarArchiveEntry.<staticinit>()"
    ],
    "org.apache.commons.compress.archivers.sevenz.Coders.DeflateDecoder#DeflateDecoder()": [
        "org.apache.commons.compress.archivers.sevenz.Coders.DeflateDecoder.<init>()",
        "org.apache.commons.compress.archivers.sevenz.AbstractCoder#AbstractCoder(Class<?>[]...)"
    ],
    "org.apache.commons.compress.archivers.dump.TapeInputStream.<staticinit>()": ["org.apache.commons.compress.archivers.dump.DumpArchiveConstants.<staticinit>()"],
    "org.apache.commons.compress.harmony.pack200.NewAttributeBands#readNextUnionCase(StringReader)": [
        "org.apache.commons.compress.harmony.pack200.NewAttributeBands.UnionCase#UnionCase(List<Integer>,List<LayoutElement>)",
        "org.apache.commons.compress.harmony.pack200.NewAttributeBands.UnionCase#UnionCase(List<Integer>)",
        "org.apache.commons.compress.harmony.pack200.NewAttributeBands#readBody(StringReader)",
        "org.apache.commons.compress.harmony.pack200.NewAttributeBands#getStreamUpToMatchingBracket(StringReader)",
        "org.apache.commons.compress.harmony.pack200.NewAttributeBands#readNumber(StringReader)"
    ],
    "org.apache.commons.compress.harmony.pack200.NewAttributeBands#renumberBci(IntList,Map<Label, Integer>)": [
        "org.apache.commons.compress.harmony.pack200.NewAttributeBands.UnionCase#renumberBci(IntList,Map<Label, Integer>)",
        "org.apache.commons.compress.harmony.pack200.NewAttributeBands.Replication#renumberBci(IntList,Map<Label, Integer>)",
        "org.apache.commons.compress.harmony.pack200.NewAttributeBands.Call#renumberBci(IntList,Map<Label, Integer>)",
        "org.apache.commons.compress.harmony.pack200.NewAttributeBands.Callable#renumberBci(IntList,Map<Label, Integer>)",
        "org.apache.commons.compress.harmony.pack200.NewAttributeBands.Integral#renumberBci(IntList,Map<Label, Integer>)",
        "org.apache.commons.compress.harmony.pack200.NewAttributeBands.Union#renumberBci(IntList,Map<Label, Integer>)",
        "org.apache.commons.compress.harmony.pack200.NewAttributeBands.Reference#renumberBci(IntList,Map<Label, Integer>)"
    ],
    "org.apache.commons.compress.archivers.zip.X0017_StrongEncryptionHeader.<staticinit>()": ["org.apache.commons.compress.archivers.zip.ZipShort#ZipShort(int)"],
    "org.apache.commons.compress.compressors.CompressorStreamFactory#createCompressorInputStream(InputStream)": [
        "org.apache.commons.compress.compressors.CompressorStreamFactory#createCompressorInputStream(String,InputStream)",
        "org.apache.commons.compress.compressors.CompressorStreamFactory.detect(InputStream)"
    ],
    "org.apache.commons.compress.archivers.sevenz.SevenZFile.getInt(ByteBuffer)": ["org.apache.commons.compress.archivers.sevenz.SevenZFile.checkEndOfFile(ByteBuffer,int)"],
    "org.apache.commons.compress.archivers.cpio.CpioArchiveEntry#setMode(long)": ["org.apache.commons.compress.archivers.cpio.CpioConstants.<staticinit>()"],
    "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream#setupNoRandPartC()": [
        "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream#setupNoRandPartA()",
        "org.apache.commons.compress.compressors.bzip2.CRC#update(int)",
        "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.<staticinit>()"
    ],
    "org.apache.commons.compress.harmony.unpack200.bytecode.RuntimeVisibleorInvisibleAnnotationsAttribute#getLength()": ["org.apache.commons.compress.harmony.unpack200.bytecode.AnnotationsAttribute.Annotation#getLength()"],
    "org.apache.commons.compress.archivers.zip.ZipEncodingHelper.<staticinit>()": ["org.apache.commons.compress.archivers.zip.ZipEncodingHelper.getZipEncoding(Charset)"],
    "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile#writeHeader(DataOutput)": [
        "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile#writeStreamsInfo(DataOutput)",
        "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile#writeFilesInfo(DataOutput)",
        "org.apache.commons.compress.archivers.sevenz.NID.<staticinit>()"
    ],
    "org.apache.commons.compress.archivers.ar.ArArchiveInputStream#getExtendedName(int)": ["org.apache.commons.compress.utils.ArchiveUtils.toAsciiString(byte[],int,int)"],
    "org.apache.commons.compress.harmony.unpack200.bytecode.SignatureAttribute#getNestedClassFileEntries()": ["org.apache.commons.compress.harmony.unpack200.bytecode.Attribute#getAttributeName()"],
    "org.apache.commons.compress.harmony.pack200.CPSignature#getIndexInCpUtf8()": ["org.apache.commons.compress.harmony.pack200.ConstantPoolEntry#getIndex()"],
    "org.apache.commons.compress.harmony.unpack200.bytecode.forms.ClassSpecificReferenceForm#ClassSpecificReferenceForm(int,String,int[])": [
        "org.apache.commons.compress.harmony.unpack200.bytecode.forms.ReferenceForm#ReferenceForm(int,String,int[])",
        "org.apache.commons.compress.harmony.unpack200.bytecode.forms.ClassSpecificReferenceForm.<init>()"
    ],
    "org.apache.commons.compress.harmony.pack200.BcBands#visitTableSwitchInsn(int,int,Label,Label[]...)": [
        "org.apache.commons.compress.harmony.pack200.BcBands#updateRenumbering()",
        "org.apache.commons.compress.harmony.pack200.BcBands.<staticinit>()",
        "org.apache.commons.compress.harmony.pack200.IntList#add(int)"
    ],
    "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream#writeOut(byte[])": [
        "org.apache.commons.compress.archivers.zip.StreamCompressor.ScatterGatherBackingStoreCompressor#writeOut(byte[],int,int)",
        "org.apache.commons.compress.archivers.zip.StreamCompressor.SeekableByteChannelCompressor#writeOut(byte[],int,int)",
        "org.apache.commons.compress.archivers.zip.StreamCompressor.OutputStreamCompressor#writeOut(byte[],int,int)",
        "org.apache.commons.compress.archivers.zip.StreamCompressor.DataOutputCompressor#writeOut(byte[],int,int)"
    ],
    "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream#setupRandPartC()": [
        "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream#setupRandPartA()",
        "org.apache.commons.compress.compressors.bzip2.CRC#update(int)",
        "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.<staticinit>()"
    ],
    "org.apache.commons.compress.harmony.pack200.NewAttribute#readUTF8(int)": ["org.apache.commons.compress.harmony.pack200.Pack200ClassReader#readUTF8(int,char[])"],
    "org.apache.commons.compress.compressors.lz4.BlockLZ4CompressorOutputStream#clearUnusedBlocksAndPairs()": [
        "org.apache.commons.compress.compressors.lz4.BlockLZ4CompressorOutputStream#clearUnusedBlocks()",
        "org.apache.commons.compress.compressors.lz4.BlockLZ4CompressorOutputStream#clearUnusedPairs()"
    ],
    "org.apache.commons.compress.archivers.tar.TarUtils#TarUtils()": ["org.apache.commons.compress.archivers.tar.TarUtils.<init>()"],
    "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile#write(int)": [
        "org.apache.commons.compress.archivers.sevenz.AES256SHA256Decoder.AES256SHA256DecoderOutputStream#write(int)",
        "org.apache.commons.compress.compressors.snappy.SnappyCompressorOutputStream#write(int)",
        "org.apache.commons.compress.archivers.sevenz.Coders.DeflateDecoder.DeflateDecoderOutputStream#write(int)",
        "org.apache.commons.compress.compressors.lz4.BlockLZ4CompressorOutputStream#write(int)",
        "org.apache.commons.compress.compressors.deflate.DeflateCompressorOutputStream#write(int)",
        "org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorOutputStream#write(int)",
        "org.apache.commons.compress.compressors.lzma.LZMACompressorOutputStream#write(int)",
        "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream#write(int)",
        "org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream#write(int)",
        "org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorOutputStream#write(int)",
        "org.apache.commons.compress.compressors.xz.XZCompressorOutputStream#write(int)",
        "org.apache.commons.compress.utils.FixedLengthBlockOutputStream#write(int)",
        "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.OutputStreamWrapper#write(int)",
        "org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream#write(int)",
        "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile#getCurrentOutputStream()",
        "org.apache.commons.compress.archivers.ArchiveOutputStream#write(int)",
        "org.apache.commons.compress.archivers.zip.ZipSplitOutputStream#write(int)",
        "org.apache.commons.compress.compressors.zstandard.ZstdCompressorOutputStream#write(int)",
        "org.apache.commons.compress.archivers.zip.RandomAccessOutputStream#write(int)"
    ],
    "org.apache.commons.compress.harmony.unpack200.bytecode.ByteCode#setOperand2Bytes(int,int)": [
        "org.apache.commons.compress.harmony.unpack200.bytecode.forms.ByteCodeForm#firstOperandIndex()",
        "org.apache.commons.compress.harmony.unpack200.bytecode.ByteCode#getByteCodeForm()",
        "org.apache.commons.compress.harmony.unpack200.bytecode.forms.ByteCodeForm#getRewrite()"
    ],
    "org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream#encode(String)": [
        "org.apache.commons.compress.archivers.zip.NioZipEncoding#encode(String)",
        "org.apache.commons.compress.archivers.tar.TarUtils$ZipEncoding$1#encode(String)"
    ],
    "org.apache.commons.compress.harmony.unpack200.bytecode.forms.NewClassRefForm#NewClassRefForm(int,String,int[])": [
        "org.apache.commons.compress.harmony.unpack200.bytecode.forms.ClassRefForm#ClassRefForm(int,String,int[])",
        "org.apache.commons.compress.harmony.unpack200.bytecode.forms.NewClassRefForm.<init>()"
    ],
    "org.apache.commons.compress.archivers.zip.ZipFile.Entry#hashCode()": [
        "org.apache.commons.compress.archivers.zip.ZipArchiveEntry#getLocalHeaderOffset()",
        "org.apache.commons.compress.archivers.zip.ZipArchiveEntry#hashCode()"
    ],
    "org.apache.commons.compress.harmony.pack200.CpBands#writeCpDouble(OutputStream)": [
        "org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream#write(byte[])",
        "org.apache.commons.compress.archivers.sevenz.Coders.DeflateDecoder.DeflateDecoderOutputStream#write(byte[])",
        "org.apache.commons.compress.harmony.pack200.BandSet#encodeBandInt(String,int[],BHSDCodec)",
        "org.apache.commons.compress.harmony.pack200.Codec.<staticinit>()",
        "org.apache.commons.compress.harmony.pack200.CPDouble#getDouble()",
        "org.apache.commons.compress.harmony.pack200.PackingUtils.log(String)",
        "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.OutputStreamWrapper#write(byte[])",
        "org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream#write(byte[])",
        "org.apache.commons.compress.archivers.zip.ZipSplitOutputStream#write(byte[])"
    ],
    "org.apache.commons.compress.compressors.zstandard.ZstdUtils.getCachedZstdAvailability()": ["org.apache.commons.compress.compressors.zstandard.ZstdUtils.<staticinit>()"],
    "org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry#equals(Object)": ["org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry#equalSevenZMethods(Iterable<? extends SevenZMethodConfiguration>,Iterable<? extends SevenZMethodConfiguration>)"],
    "org.apache.commons.compress.archivers.sevenz.SevenZFile#SevenZFile(SeekableByteChannel,String,char[],SevenZFileOptions)": [
        "org.apache.commons.compress.archivers.sevenz.SevenZFile#SevenZFile(SeekableByteChannel,String,byte[],boolean,SevenZFileOptions)",
        "org.apache.commons.compress.archivers.sevenz.AES256SHA256Decoder.utf16Decode(char[])"
    ],
    "org.apache.commons.compress.compressors.bzip2.BlockSort#mainSimpleSort(Data,int,int,int,int)": ["org.apache.commons.compress.compressors.bzip2.BlockSort.<staticinit>()"],
    "org.apache.commons.compress.compressors.deflate64.Deflate64CompressorInputStream#read(byte[],int,int)": [
        "org.apache.commons.compress.compressors.CompressorInputStream#count(int)",
        "org.apache.commons.compress.compressors.deflate64.HuffmanDecoder#getBytesRead()",
        "org.apache.commons.compress.compressors.deflate64.HuffmanDecoder#decode(byte[],int,int)",
        "org.apache.commons.compress.compressors.deflate64.Deflate64CompressorInputStream#closeDecoder()"
    ],
    "org.apache.commons.compress.archivers.zip.ZipFile.builder()": ["org.apache.commons.compress.archivers.zip.ZipFile.Builder#Builder()"],
    "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream#bsPutInt(int)": ["org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream#bsW(int,int)"],
    "org.apache.commons.compress.archivers.tar.TarFile#getRecord()": [
        "org.apache.commons.compress.archivers.tar.TarFile#setAtEOF(boolean)",
        "org.apache.commons.compress.archivers.tar.TarFile#tryToConsumeSecondEOFRecord()",
        "org.apache.commons.compress.archivers.tar.TarFile#consumeRemainderOfLastBlock()",
        "org.apache.commons.compress.archivers.tar.TarFile#isAtEOF()",
        "org.apache.commons.compress.archivers.tar.TarFile#isEOFRecord(ByteBuffer)",
        "org.apache.commons.compress.archivers.tar.TarFile#readRecord()"
    ],
    "org.apache.commons.compress.archivers.sevenz.SevenZMethodConfiguration#SevenZMethodConfiguration(SevenZMethod,Object)": [
        "org.apache.commons.compress.archivers.sevenz.AbstractCoder#isOptionInstance(Object)",
        "org.apache.commons.compress.archivers.sevenz.Coders.findByMethod(SevenZMethod)",
        "org.apache.commons.compress.archivers.sevenz.SevenZMethodConfiguration.<init>()"
    ],
    "org.apache.commons.compress.archivers.ar.ArArchiveOutputStream#writeEntryHeader(ArArchiveEntry)": [
        "org.apache.commons.compress.archivers.ar.ArArchiveEntry#getGroupId()",
        "org.apache.commons.compress.archivers.ar.ArArchiveOutputStream#fill(long,long,char)",
        "org.apache.commons.compress.archivers.ar.ArArchiveInputStream.<staticinit>()",
        "org.apache.commons.compress.archivers.ar.ArArchiveOutputStream#write(String)",
        "org.apache.commons.compress.archivers.ar.ArArchiveEntry#getLastModified()",
        "org.apache.commons.compress.archivers.ar.ArArchiveEntry.<staticinit>()",
        "org.apache.commons.compress.archivers.ar.ArArchiveEntry#getName()",
        "org.apache.commons.compress.archivers.ar.ArArchiveOutputStream.<staticinit>()",
        "org.apache.commons.compress.archivers.ar.ArArchiveEntry#getUserId()",
        "org.apache.commons.compress.archivers.ar.ArArchiveEntry#getLength()",
        "org.apache.commons.compress.archivers.ar.ArArchiveEntry#getMode()"
    ],
    "org.apache.commons.compress.harmony.pack200.Segment.SegmentMethodVisitor#visitMaxs(int,int)": ["org.apache.commons.compress.harmony.pack200.ClassBands#addMaxStack(int,int)"],
    "org.apache.commons.compress.archivers.zip.ZipSplitReadOnlySeekableByteChannel.forPaths(List<Path>,OpenOption[])": ["org.apache.commons.compress.archivers.zip.ZipSplitReadOnlySeekableByteChannel#ZipSplitReadOnlySeekableByteChannel(List<SeekableByteChannel>)"],
    "org.apache.commons.compress.archivers.sevenz.LZMADecoder#numberOptionOrDefault(Object)": ["org.apache.commons.compress.archivers.sevenz.AbstractCoder.toInt(Object,int)"],
    "org.apache.commons.compress.harmony.pack200.CpBands#getCPIMethod(CPClass,String,String)": [
        "org.apache.commons.compress.harmony.pack200.CpBands#getCPNameAndType(String,String)",
        "org.apache.commons.compress.harmony.pack200.CPMethodOrField#CPMethodOrField(CPClass,CPNameAndType)",
        "org.apache.commons.compress.harmony.pack200.CPClass#toString()"
    ],
    "org.apache.commons.compress.harmony.pack200.Segment.SegmentMethodVisitor#visitIntInsn(int,int)": ["org.apache.commons.compress.harmony.pack200.BcBands#visitIntInsn(int,int)"],
    "org.apache.commons.compress.harmony.unpack200.bytecode.forms.SuperFieldRefForm#getOffset(OperandManager)": ["org.apache.commons.compress.harmony.unpack200.bytecode.OperandManager#nextSuperFieldRef()"],
    "org.apache.commons.compress.harmony.pack200.Segment.SegmentMethodVisitor#visitJumpInsn(int,Label)": ["org.apache.commons.compress.harmony.pack200.BcBands#visitJumpInsn(int,Label)"],
    "org.apache.commons.compress.harmony.unpack200.bytecode.InnerClassesAttribute#doWrite(DataOutputStream)": ["org.apache.commons.compress.harmony.unpack200.bytecode.Attribute#doWrite(DataOutputStream)"],
    "org.apache.commons.compress.archivers.sevenz.LZMA2Decoder#decode(String,InputStream,long,Coder,byte[],int)": [
        "org.apache.commons.compress.MemoryLimitException#MemoryLimitException(long,int)",
        "org.apache.commons.compress.archivers.sevenz.LZMA2Decoder#getDictionarySize(Coder)"
    ],
    "org.apache.commons.compress.compressors.lz77support.Parameters.Builder#Builder(int)": [
        "org.apache.commons.compress.compressors.lz77support.Parameters.Builder.<init>()",
        "org.apache.commons.compress.compressors.lz77support.Parameters.isPowerOfTwo(int)",
        "org.apache.commons.compress.compressors.lz77support.Parameters.<staticinit>()"
    ],
    "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream#addFileTimePaxHeader(Map<String, String>,String,FileTime)": ["org.apache.commons.compress.archivers.tar.TarArchiveOutputStream#addInstantPaxHeader(Map<String, String>,String,long,int)"],
    "org.apache.commons.compress.archivers.zip.ZipLong.getValue(byte[],int)": ["org.apache.commons.compress.utils.ByteUtils.fromLittleEndian(byte[],int,int)"],
    "org.apache.commons.compress.harmony.unpack200.NewAttributeBands.Call#setCallable(Callable)": ["org.apache.commons.compress.harmony.unpack200.NewAttributeBands.Callable#setBackwardsCallable()"],
    "org.apache.commons.compress.changes.ChangeSetPerformer#ChangeSetPerformer(ChangeSet<E extends ArchiveEntry>)": [
        "org.apache.commons.compress.changes.ChangeSet#getChanges()",
        "org.apache.commons.compress.changes.ChangeSetPerformer.<init>()"
    ],
    "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream#isFirstByteOfEocdSig(int)": ["org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.<staticinit>()"],
    "org.apache.commons.compress.archivers.zip.JarMarker#getCentralDirectoryData()": ["org.apache.commons.compress.utils.ByteUtils.<staticinit>()"],
    "org.apache.commons.compress.harmony.unpack200.bytecode.CPNameAndType#invokeInterfaceCount()": [
        "org.apache.commons.compress.harmony.unpack200.bytecode.CPUTF8#underlyingString()",
        "org.apache.commons.compress.harmony.unpack200.SegmentUtils.countInvokeInterfaceArgs(String)"
    ],
    "org.apache.commons.compress.archivers.tar.TarArchiveInputStream#skip(long)": [
        "org.apache.commons.compress.compressors.deflate.DeflateCompressorInputStream#available()",
        "org.apache.commons.compress.archivers.tar.TarArchiveInputStream#isDirectory()",
        "org.apache.commons.compress.compressors.deflate64.Deflate64CompressorInputStream#available()",
        "org.apache.commons.compress.compressors.zstandard.ZstdCompressorInputStream#available()",
        "org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream#available()",
        "org.apache.commons.compress.compressors.brotli.BrotliCompressorInputStream#available()",
        "org.apache.commons.compress.compressors.xz.XZCompressorInputStream#available()",
        "org.apache.commons.compress.utils.IOUtils.skip(InputStream,long)",
        "org.apache.commons.compress.archivers.tar.TarArchiveEntry#isSparse()",
        "org.apache.commons.compress.compressors.lz77support.AbstractLZ77CompressorInputStream#available()",
        "org.apache.commons.compress.archivers.ArchiveInputStream#count(long)",
        "org.apache.commons.compress.archivers.tar.TarArchiveInputStream#skipSparse(long)",
        "org.apache.commons.compress.archivers.tar.TarArchiveInputStream#getActuallySkipped(long,long,long)",
        "org.apache.commons.compress.archivers.tar.TarArchiveEntry#getRealSize()",
        "org.apache.commons.compress.compressors.lzma.LZMACompressorInputStream#available()",
        "org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStream#available()"
    ],
    "org.apache.commons.compress.harmony.unpack200.bytecode.CPMember#equals(Object)": ["org.apache.commons.compress.harmony.unpack200.bytecode.CPUTF8#equals(Object)"],
    "org.apache.commons.compress.changes.ChangeSetPerformer.ArchiveInputStreamIterator#hasNext()": [
        "org.apache.commons.compress.archivers.ar.ArArchiveInputStream#getNextEntry()",
        "org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream#getNextEntry()",
        "org.apache.commons.compress.archivers.dump.DumpArchiveInputStream#getNextEntry()",
        "org.apache.commons.compress.archivers.jar.JarArchiveInputStream#getNextEntry()",
        "org.apache.commons.compress.archivers.arj.ArjArchiveInputStream#getNextEntry()",
        "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream#getNextEntry()",
        "org.apache.commons.compress.archivers.tar.TarArchiveInputStream#getNextEntry()"
    ],
    "org.apache.commons.compress.utils.SkipShieldingInputStream#skip(long)": ["org.apache.commons.compress.utils.SkipShieldingInputStream.<staticinit>()"],
    "org.apache.commons.compress.archivers.tar.TarFile.BoundedTarEntryInputStream#readSparse(long,ByteBuffer,int)": [
        "org.apache.commons.compress.archivers.tar.TarArchiveEntry#getDataOffset()",
        "org.apache.commons.compress.archivers.tar.TarFile.BoundedTarEntryInputStream#readArchive(long,ByteBuffer)",
        "org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream#read(byte[])",
        "org.apache.commons.compress.compressors.brotli.BrotliCompressorInputStream#read(byte[])",
        "org.apache.commons.compress.compressors.zstandard.ZstdCompressorInputStream#read(byte[])",
        "org.apache.commons.compress.archivers.tar.TarFile.BoundedTarEntryInputStream#readSparse(long,ByteBuffer,int)",
        "org.apache.commons.compress.archivers.tar.TarArchiveEntry#getName()"
    ],
    "org.apache.commons.compress.harmony.pack200.CpBands#removeSignaturesFromCpUTF8()": [
        "org.apache.commons.compress.harmony.pack200.CPUTF8#getUnderlyingString()",
        "org.apache.commons.compress.harmony.pack200.CpBands#removeCpUtf8(String)",
        "org.apache.commons.compress.harmony.pack200.CPSignature#getSignatureForm()",
        "org.apache.commons.compress.harmony.pack200.CPSignature#getUnderlyingString()"
    ],
    "org.apache.commons.compress.changes.ChangeSet#delete(String)": [
        "org.apache.commons.compress.changes.ChangeSet#addDeletion(Change<E extends ArchiveEntry>)",
        "org.apache.commons.compress.changes.Change.ChangeType.<staticinit>()",
        "org.apache.commons.compress.changes.Change#Change(String,ChangeType)"
    ],
    "org.apache.commons.compress.compressors.lz4.BlockLZ4CompressorOutputStream#BlockLZ4CompressorOutputStream(OutputStream,Parameters)": [
        "org.apache.commons.compress.compressors.lz77support.LZ77Compressor.LiteralBlock#getType()",
        "org.apache.commons.compress.compressors.lz77support.LZ77Compressor.Block.BlockType.<staticinit>()",
        "org.apache.commons.compress.compressors.lz4.BlockLZ4CompressorOutputStream.<init>()",
        "org.apache.commons.compress.compressors.lz77support.LZ77Compressor#LZ77Compressor(Parameters,Callback)",
        "org.apache.commons.compress.compressors.lz77support.LZ77Compressor.BackReference#getType()",
        "org.apache.commons.compress.compressors.lz77support.LZ77Compressor.EOD#getType()",
        "org.apache.commons.compress.compressors.lz4.BlockLZ4CompressorOutputStream#addBackReference(BackReference)",
        "org.apache.commons.compress.compressors.CompressorOutputStream.<init>()",
        "org.apache.commons.compress.compressors.lz4.BlockLZ4CompressorOutputStream#writeFinalLiteralBlock()",
        "org.apache.commons.compress.compressors.lz4.BlockLZ4CompressorOutputStream#addLiteralBlock(LiteralBlock)"
    ],
    "org.apache.commons.compress.archivers.zip.DefaultBackingStoreSupplier#get()": [
        "org.apache.commons.compress.archivers.zip.DefaultBackingStoreSupplier.<staticinit>()",
        "org.apache.commons.compress.parallel.FileBasedScatterGatherBackingStore#FileBasedScatterGatherBackingStore(Path)"
    ],
    "org.apache.commons.compress.harmony.unpack200.ClassBands#parseMetadata(InputStream,String[],int[],int[],String)": [
        "org.apache.commons.compress.harmony.unpack200.BandSet#decodeBandInt(String,InputStream,BHSDCodec,int[])",
        "org.apache.commons.compress.harmony.unpack200.BandSet#parseCPLongReferences(String,InputStream,BHSDCodec,int)",
        "org.apache.commons.compress.harmony.pack200.Codec.<staticinit>()",
        "org.apache.commons.compress.harmony.unpack200.CpBands#getCpUTF8()",
        "org.apache.commons.compress.harmony.unpack200.BandSet#parseCPUTF8References(String,InputStream,BHSDCodec,int)",
        "org.apache.commons.compress.harmony.unpack200.CpBands#getCpSignature()",
        "org.apache.commons.compress.harmony.unpack200.BandSet#parseCPSignatureReferences(String,InputStream,BHSDCodec,int)",
        "org.apache.commons.compress.harmony.unpack200.BandSet#parseCPSignatureReferences(String,InputStream,BHSDCodec,int[])",
        "org.apache.commons.compress.harmony.unpack200.BandSet#parseCPDoubleReferences(String,InputStream,BHSDCodec,int)",
        "org.apache.commons.compress.harmony.unpack200.BandSet#parseCPIntReferences(String,InputStream,BHSDCodec,int)",
        "org.apache.commons.compress.harmony.unpack200.MetadataBandGroup#MetadataBandGroup(String,CpBands)",
        "org.apache.commons.compress.harmony.unpack200.BandSet#decodeBandInt(String,InputStream,BHSDCodec,int)",
        "org.apache.commons.compress.harmony.unpack200.BandSet#parseReferences(String,InputStream,BHSDCodec,int,String[])",
        "org.apache.commons.compress.harmony.unpack200.BandSet#parseCPFloatReferences(String,InputStream,BHSDCodec,int)"
    ],
    "org.apache.commons.compress.archivers.dump.DumpArchiveUtil.convert64(byte[],int)": ["org.apache.commons.compress.utils.ByteUtils.fromLittleEndian(byte[],int,int)"],
    "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream#close()": [
        "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream#close()",
        "org.apache.commons.compress.archivers.sevenz.BoundedSeekableByteChannelInputStream#close()",
        "org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStream#close()",
        "org.apache.commons.compress.compressors.brotli.BrotliCompressorInputStream#close()",
        "org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream#close()",
        "org.apache.commons.compress.compressors.deflate64.Deflate64CompressorInputStream#close()",
        "org.apache.commons.compress.compressors.deflate.DeflateCompressorInputStream#close()",
        "org.apache.commons.compress.archivers.sevenz.AES256SHA256Decoder.AES256SHA256DecoderInputStream#close()",
        "org.apache.commons.compress.compressors.xz.XZCompressorInputStream#close()",
        "org.apache.commons.compress.archivers.zip.ExplodingInputStream#close()",
        "org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream#close()",
        "org.apache.commons.compress.compressors.lzw.LZWInputStream#close()",
        "org.apache.commons.compress.compressors.lzma.LZMACompressorInputStream#close()",
        "org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorInputStream#close()",
        "org.apache.commons.compress.compressors.zstandard.ZstdCompressorInputStream#close()",
        "org.apache.commons.compress.compressors.lz77support.AbstractLZ77CompressorInputStream#close()"
    ],
    "org.apache.commons.compress.archivers.cpio.CpioArchiveEntry#getMode()": ["org.apache.commons.compress.archivers.cpio.CpioConstants.<staticinit>()"],
    "org.apache.commons.compress.compressors.snappy.SnappyCompressorOutputStream#writeLiteralBlockWithSize(int,int,int,LiteralBlock)": [
        "org.apache.commons.compress.archivers.sevenz.Coders.DeflateDecoder.DeflateDecoderOutputStream#write(byte[],int,int)",
        "org.apache.commons.compress.compressors.lz77support.LZ77Compressor.LiteralBlock#getOffset()",
        "org.apache.commons.compress.utils.FixedLengthBlockOutputStream#write(byte[],int,int)",
        "org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorOutputStream#write(byte[],int,int)",
        "org.apache.commons.compress.compressors.deflate.DeflateCompressorOutputStream#write(int)",
        "org.apache.commons.compress.compressors.lz77support.LZ77Compressor.LiteralBlock#getData()",
        "org.apache.commons.compress.compressors.snappy.SnappyCompressorOutputStream#writeLittleEndian(int,int)",
        "org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorOutputStream#write(int)",
        "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream#write(byte[],int,int)",
        "org.apache.commons.compress.archivers.zip.FileRandomAccessOutputStream#write(byte[],int,int)",
        "org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream#write(byte[],int,int)",
        "org.apache.commons.compress.compressors.lzma.LZMACompressorOutputStream#write(int)",
        "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream#write(int)",
        "org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream#write(int)",
        "org.apache.commons.compress.archivers.zip.ZipSplitOutputStream#write(byte[],int,int)",
        "org.apache.commons.compress.compressors.xz.XZCompressorOutputStream#write(byte[],int,int)",
        "org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorOutputStream#write(int)",
        "org.apache.commons.compress.compressors.deflate.DeflateCompressorOutputStream#write(byte[],int,int)",
        "org.apache.commons.compress.archivers.zip.SeekableChannelRandomAccessOutputStream#write(byte[],int,int)",
        "org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream#write(byte[],int,int)",
        "org.apache.commons.compress.archivers.ArchiveOutputStream#write(int)",
        "org.apache.commons.compress.archivers.sevenz.AES256SHA256Decoder.AES256SHA256DecoderOutputStream#write(int)",
        "org.apache.commons.compress.compressors.snappy.SnappyCompressorOutputStream#write(int)",
        "org.apache.commons.compress.archivers.sevenz.Coders.DeflateDecoder.DeflateDecoderOutputStream#write(int)",
        "org.apache.commons.compress.compressors.lz4.BlockLZ4CompressorOutputStream#write(int)",
        "org.apache.commons.compress.archivers.ar.ArArchiveOutputStream#write(byte[],int,int)",
        "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream#write(byte[],int,int)",
        "org.apache.commons.compress.compressors.lzma.LZMACompressorOutputStream#write(byte[],int,int)",
        "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.OutputStreamWrapper#write(byte[],int,int)",
        "org.apache.commons.compress.compressors.zstandard.ZstdCompressorOutputStream#write(byte[],int,int)",
        "org.apache.commons.compress.archivers.sevenz.AES256SHA256Decoder.AES256SHA256DecoderOutputStream#write(byte[],int,int)",
        "org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorOutputStream#write(byte[],int,int)",
        "org.apache.commons.compress.compressors.xz.XZCompressorOutputStream#write(int)",
        "org.apache.commons.compress.utils.FixedLengthBlockOutputStream#write(int)",
        "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.OutputStreamWrapper#write(int)",
        "org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream#write(int)",
        "org.apache.commons.compress.compressors.lz4.BlockLZ4CompressorOutputStream#write(byte[],int,int)",
        "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream#write(byte[],int,int)",
        "org.apache.commons.compress.compressors.snappy.SnappyCompressorOutputStream#write(byte[],int,int)",
        "org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream#write(byte[],int,int)",
        "org.apache.commons.compress.archivers.zip.ZipSplitOutputStream#write(int)",
        "org.apache.commons.compress.compressors.zstandard.ZstdCompressorOutputStream#write(int)",
        "org.apache.commons.compress.archivers.zip.RandomAccessOutputStream#write(int)"
    ],
    "org.apache.commons.compress.archivers.dump.DumpArchiveInputStream#readBITS()": [
        "org.apache.commons.compress.archivers.dump.DumpArchiveEntry#getHeaderCount()",
        "org.apache.commons.compress.archivers.dump.TapeInputStream#skip(long)",
        "org.apache.commons.compress.archivers.dump.TapeInputStream#readRecord()",
        "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.parse(byte[])",
        "org.apache.commons.compress.archivers.dump.DumpArchiveUtil.verify(byte[])",
        "org.apache.commons.compress.archivers.dump.DumpArchiveConstants.<staticinit>()",
        "org.apache.commons.compress.archivers.dump.DumpArchiveEntry#getHeaderType()",
        "org.apache.commons.compress.archivers.dump.DumpArchiveConstants.SEGMENT_TYPE.<staticinit>()",
        "org.apache.commons.compress.archivers.dump.InvalidFormatException#InvalidFormatException()"
    ],
    "org.apache.commons.compress.archivers.zip.ZipEncodingHelper.isUTF8(Charset)": ["org.apache.commons.compress.archivers.zip.ZipEncodingHelper.isUTF8Alias(String)"],
    "org.apache.commons.compress.archivers.zip.X000A_NTFS#getAccessTime()": ["org.apache.commons.compress.archivers.zip.ZipEightByteInteger.<staticinit>()"],
    "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream#setDefaults(ZipArchiveEntry)": [
        "org.apache.commons.compress.archivers.zip.ZipArchiveEntry#getMethod()",
        "org.apache.commons.compress.archivers.zip.ZipArchiveEntry#setTime(FileTime)",
        "org.apache.commons.compress.archivers.zip.ZipArchiveEntry#getTime()",
        "org.apache.commons.compress.archivers.zip.ZipArchiveEntry#setMethod(int)"
    ],
    "org.apache.commons.compress.harmony.pack200.Archive#addJarEntry(PackingFile,List<Pack200ClassReader>,List<PackingFile>)": [
        "org.apache.commons.compress.harmony.pack200.Archive.PackingFile#getName()",
        "org.apache.commons.compress.harmony.pack200.PackingOptions#isPassFile(String)",
        "org.apache.commons.compress.harmony.pack200.PackingOptions#getSegmentLimit()",
        "org.apache.commons.compress.harmony.pack200.Archive.<staticinit>()",
        "org.apache.commons.compress.harmony.pack200.Pack200ClassReader#setFileName(String)",
        "org.apache.commons.compress.harmony.pack200.Pack200ClassReader#Pack200ClassReader(byte[])",
        "org.apache.commons.compress.harmony.pack200.Archive#estimateSize(PackingFile)"
    ],
    "org.apache.commons.compress.compressors.zstandard.ZstdUtils.matches(byte[],int)": ["org.apache.commons.compress.compressors.zstandard.ZstdUtils.<staticinit>()"],
    "org.apache.commons.compress.harmony.pack200.BandSet#encodeScalar(int[],BHSDCodec)": ["org.apache.commons.compress.harmony.pack200.Codec#encode(int[])"],
    "org.apache.commons.compress.archivers.ar.ArArchiveOutputStream#ArArchiveOutputStream(OutputStream)": [
        "org.apache.commons.compress.archivers.ArchiveOutputStream.<init>()",
        "org.apache.commons.compress.archivers.ar.ArArchiveOutputStream.<init>()"
    ],
    "org.apache.commons.compress.utils.MultiReadOnlySeekableByteChannel#position(long)": [
        "org.apache.commons.compress.utils.MultiReadOnlySeekableByteChannel#size()",
        "org.apache.commons.compress.utils.SeekableInMemoryByteChannel#position(long)",
        "org.apache.commons.compress.utils.MultiReadOnlySeekableByteChannel#isOpen()",
        "org.apache.commons.compress.utils.MultiReadOnlySeekableByteChannel#position(long)",
        "org.apache.commons.compress.utils.SeekableInMemoryByteChannel#size()"
    ],
    "org.apache.commons.compress.archivers.zip.X0017_StrongEncryptionHeader#parseFromCentralDirectoryData(byte[],int,int)": [
        "org.apache.commons.compress.archivers.zip.PKWareExtraHeader#parseFromCentralDirectoryData(byte[],int,int)",
        "org.apache.commons.compress.archivers.zip.X0017_StrongEncryptionHeader#parseCentralDirectoryFormat(byte[],int,int)"
    ],
    "org.apache.commons.compress.archivers.tar.TarArchiveInputStream#readRecord()": [
        "org.apache.commons.compress.archivers.tar.TarArchiveInputStream#getRecordSize()",
        "org.apache.commons.compress.archivers.ArchiveInputStream#count(int)",
        "org.apache.commons.compress.utils.IOUtils.readFully(InputStream,byte[])"
    ],
    "org.apache.commons.compress.compressors.bzip2.BlockSort#BlockSort(Data)": ["org.apache.commons.compress.compressors.bzip2.BlockSort.<init>()"],
    "org.apache.commons.compress.archivers.tar.TarArchiveEntry#isSymbolicLink()": ["org.apache.commons.compress.archivers.tar.TarConstants.<staticinit>()"],
    "org.apache.commons.compress.harmony.pack200.FileBands#pack(OutputStream)": [
        "org.apache.commons.compress.harmony.pack200.BandSet#encodeBandInt(String,int[],BHSDCodec)",
        "org.apache.commons.compress.harmony.pack200.Codec.<staticinit>()",
        "org.apache.commons.compress.harmony.pack200.FileBands#flatten(byte[][])",
        "org.apache.commons.compress.harmony.pack200.BandSet#encodeFlags(String,long[],BHSDCodec,BHSDCodec,boolean)",
        "org.apache.commons.compress.harmony.pack200.SegmentHeader#have_file_options()",
        "org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream#write(byte[])",
        "org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream#write(byte[])",
        "org.apache.commons.compress.archivers.sevenz.Coders.DeflateDecoder.DeflateDecoderOutputStream#write(byte[])",
        "org.apache.commons.compress.harmony.pack200.PackingUtils.log(String)",
        "org.apache.commons.compress.harmony.pack200.SegmentHeader#have_file_size_hi()",
        "org.apache.commons.compress.harmony.pack200.SegmentHeader#have_file_modtime()",
        "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.OutputStreamWrapper#write(byte[])",
        "org.apache.commons.compress.archivers.zip.ZipSplitOutputStream#write(byte[])"
    ],
    "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream#sendMTFValues0(int,int)": ["org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.<staticinit>()"],
    "org.apache.commons.compress.archivers.zip.GeneralPurposeBit#encode(byte[],int)": [
        "org.apache.commons.compress.archivers.zip.ZipShort.putShort(int,byte[],int)",
        "org.apache.commons.compress.archivers.zip.GeneralPurposeBit.<staticinit>()"
    ],
    "org.apache.commons.compress.harmony.unpack200.Segment#getConstantPool()": ["org.apache.commons.compress.harmony.unpack200.CpBands#getConstantPool()"],
    "org.apache.commons.compress.harmony.unpack200.bytecode.forms.IntRefForm#getOffset(OperandManager)": ["org.apache.commons.compress.harmony.unpack200.bytecode.OperandManager#nextIntRef()"],
    "org.apache.commons.compress.compressors.snappy.SnappyCompressorInputStream#read(byte[],int,int)": [
        "org.apache.commons.compress.compressors.snappy.SnappyCompressorInputStream#read(byte[],int,int)",
        "org.apache.commons.compress.compressors.lz77support.AbstractLZ77CompressorInputStream#readBackReference(byte[],int,int)",
        "org.apache.commons.compress.compressors.lz77support.AbstractLZ77CompressorInputStream#readLiteral(byte[],int,int)",
        "org.apache.commons.compress.compressors.snappy.SnappyCompressorInputStream#fill()",
        "org.apache.commons.compress.compressors.snappy.SnappyCompressorInputStream.State.<staticinit>()",
        "org.apache.commons.compress.compressors.lz77support.AbstractLZ77CompressorInputStream#hasMoreDataInBlock()"
    ],
    "org.apache.commons.compress.utils.ByteUtils.fromLittleEndian(byte[],int,int)": ["org.apache.commons.compress.utils.ByteUtils.checkReadLength(int)"],
    "org.apache.commons.compress.archivers.zip.ZipArchiveEntry#updateTimeFieldsFromExtraFields()": [
        "org.apache.commons.compress.archivers.zip.ZipArchiveEntry#updateTimeFromExtendedTimestampField()",
        "org.apache.commons.compress.archivers.zip.ZipArchiveEntry#updateTimeFromNtfsField()"
    ],
    "org.apache.commons.compress.archivers.zip.ZipSplitReadOnlySeekableByteChannel#assertSplitSignature(List<SeekableByteChannel>)": [
        "org.apache.commons.compress.utils.SeekableInMemoryByteChannel#position(long)",
        "org.apache.commons.compress.archivers.zip.ZipLong#equals(Object)",
        "org.apache.commons.compress.utils.SeekableInMemoryByteChannel#read(ByteBuffer)",
        "org.apache.commons.compress.utils.MultiReadOnlySeekableByteChannel#position(long)",
        "org.apache.commons.compress.archivers.zip.ZipLong#ZipLong(int)",
        "org.apache.commons.compress.utils.MultiReadOnlySeekableByteChannel#read(ByteBuffer)",
        "org.apache.commons.compress.archivers.zip.ZipLong.<staticinit>()"
    ],
    "org.apache.commons.compress.harmony.unpack200.bytecode.ExceptionsAttribute.setAttributeName(CPUTF8)": ["org.apache.commons.compress.harmony.unpack200.bytecode.ExceptionsAttribute.<staticinit>()"],
    "org.apache.commons.compress.compressors.bzip2.BlockSort#mainQSort3(Data,int,int,int,int)": [
        "org.apache.commons.compress.compressors.bzip2.BlockSort.<staticinit>()",
        "org.apache.commons.compress.compressors.bzip2.BlockSort.vswap(int[],int,int,int)",
        "org.apache.commons.compress.compressors.bzip2.BlockSort.med3(int,int,int)",
        "org.apache.commons.compress.compressors.bzip2.BlockSort#mainSimpleSort(Data,int,int,int,int)"
    ],
    "org.apache.commons.compress.harmony.unpack200.bytecode.ByteCode#getOpcode()": [
        "org.apache.commons.compress.harmony.unpack200.bytecode.ByteCode#getByteCodeForm()",
        "org.apache.commons.compress.harmony.unpack200.bytecode.forms.ByteCodeForm#getOpcode()"
    ],
    "org.apache.commons.compress.harmony.unpack200.bytecode.forms.VariableInstructionForm#setRewrite4Bytes(int,int[])": ["org.apache.commons.compress.harmony.unpack200.bytecode.forms.VariableInstructionForm#setRewrite4Bytes(int,int,int[])"],
    "org.apache.commons.compress.archivers.zip.UnshrinkingInputStream#decompressNextSymbol()": [
        "org.apache.commons.compress.archivers.zip.UnshrinkingInputStream.<staticinit>()",
        "org.apache.commons.compress.compressors.z.ZCompressorInputStream#readNextCode()",
        "org.apache.commons.compress.compressors.lzw.LZWInputStream#getClearCode()",
        "org.apache.commons.compress.compressors.lzw.LZWInputStream#getCodeSize()",
        "org.apache.commons.compress.compressors.lzw.LZWInputStream#readNextCode()",
        "org.apache.commons.compress.compressors.lzw.LZWInputStream#incrementCodeSize()",
        "org.apache.commons.compress.compressors.lzw.LZWInputStream#setTableSize(int)",
        "org.apache.commons.compress.archivers.zip.UnshrinkingInputStream#partialClear()",
        "org.apache.commons.compress.compressors.lzw.LZWInputStream#addRepeatOfPreviousCode()",
        "org.apache.commons.compress.compressors.lzw.LZWInputStream#expandCodeToOutputStack(int,boolean)"
    ],
    "org.apache.commons.compress.harmony.pack200.PackingUtils.<staticinit>()": ["org.apache.commons.compress.harmony.pack200.PackingUtils.PackingLogger#PackingLogger(String,String)"],
    "org.apache.commons.compress.archivers.ar.ArArchiveInputStream#asInt(byte[],int,int,int)": ["org.apache.commons.compress.archivers.ar.ArArchiveInputStream#asInt(byte[],int,int,int,boolean)"],
    "org.apache.commons.compress.compressors.lz4.BlockLZ4CompressorInputStream.<init>()": ["org.apache.commons.compress.compressors.lz4.BlockLZ4CompressorInputStream.State.<staticinit>()"],
    "org.apache.commons.compress.harmony.unpack200.AttrDefinitionBands#setupDefaultAttributeNames()": [
        "org.apache.commons.compress.harmony.unpack200.bytecode.InnerClassesAttribute.setAttributeName(CPUTF8)",
        "org.apache.commons.compress.harmony.unpack200.MetadataBandGroup.setRiaAttributeName(CPUTF8)",
        "org.apache.commons.compress.harmony.unpack200.CpBands#cpUTF8Value(String)",
        "org.apache.commons.compress.harmony.unpack200.bytecode.LocalVariableTableAttribute.setAttributeName(CPUTF8)",
        "org.apache.commons.compress.harmony.unpack200.MetadataBandGroup.setRvpaAttributeName(CPUTF8)",
        "org.apache.commons.compress.harmony.unpack200.bytecode.DeprecatedAttribute.setAttributeName(CPUTF8)",
        "org.apache.commons.compress.harmony.unpack200.bytecode.AnnotationDefaultAttribute.setAttributeName(CPUTF8)",
        "org.apache.commons.compress.harmony.unpack200.bytecode.ExceptionsAttribute.setAttributeName(CPUTF8)",
        "org.apache.commons.compress.harmony.unpack200.bytecode.ConstantValueAttribute.setAttributeName(CPUTF8)",
        "org.apache.commons.compress.harmony.unpack200.bytecode.SignatureAttribute.setAttributeName(CPUTF8)",
        "org.apache.commons.compress.harmony.unpack200.MetadataBandGroup.setRipaAttributeName(CPUTF8)",
        "org.apache.commons.compress.harmony.unpack200.bytecode.EnclosingMethodAttribute.setAttributeName(CPUTF8)",
        "org.apache.commons.compress.harmony.unpack200.bytecode.SourceFileAttribute.setAttributeName(CPUTF8)",
        "org.apache.commons.compress.harmony.unpack200.MetadataBandGroup.setRvaAttributeName(CPUTF8)",
        "org.apache.commons.compress.harmony.unpack200.bytecode.LineNumberTableAttribute.setAttributeName(CPUTF8)",
        "org.apache.commons.compress.harmony.unpack200.bytecode.CodeAttribute.setAttributeName(CPUTF8)",
        "org.apache.commons.compress.harmony.unpack200.Segment#getCpBands()",
        "org.apache.commons.compress.harmony.unpack200.bytecode.LocalVariableTypeTableAttribute.setAttributeName(CPUTF8)"
    ],
    "org.apache.commons.compress.harmony.pack200.BcBands.<init>()": ["org.apache.commons.compress.harmony.pack200.IntList#IntList()"],
    "org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream#skip(int)": ["org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream#readFully(byte[],int,int)"],
    "org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField#Zip64ExtendedInformationExtraField()": ["org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField.<init>()"],
    "org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp#setFlags(byte)": ["org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp.<staticinit>()"],
    "org.apache.commons.compress.harmony.unpack200.Pack200UnpackerAdapter.newBoundedInputStream(String,String[]...)": ["org.apache.commons.compress.harmony.unpack200.Pack200UnpackerAdapter.newBoundedInputStream(URL)"],
    "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream#writeDataDescriptor(ZipArchiveEntry)": [
        "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream#writeCounted(byte[])",
        "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream#usesDataDescriptor(int,boolean)",
        "org.apache.commons.compress.archivers.zip.ZipArchiveEntry#getMethod()",
        "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream#hasZip64Extra(ZipArchiveEntry)",
        "org.apache.commons.compress.archivers.zip.ZipArchiveEntry#getSize()",
        "org.apache.commons.compress.archivers.zip.ZipEightByteInteger.getBytes(BigInteger)",
        "org.apache.commons.compress.archivers.zip.ZipLong.getBytes(long)",
        "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.<staticinit>()",
        "org.apache.commons.compress.archivers.zip.ZipEightByteInteger.getBytes(long)"
    ],
    "org.apache.commons.compress.harmony.unpack200.BcBands#unpack()": [
        "org.apache.commons.compress.harmony.unpack200.ClassBands#getCodeMaxStack()",
        "org.apache.commons.compress.harmony.unpack200.SegmentOptions#hasAllCodeFlags()",
        "org.apache.commons.compress.harmony.unpack200.AttributeLayoutMap#getAttributeLayout(String,int)",
        "org.apache.commons.compress.harmony.unpack200.bytecode.OperandManager#setSuperClass(String)",
        "org.apache.commons.compress.harmony.unpack200.bytecode.BCIRenumberedAttribute#renumber(List<Integer>)",
        "org.apache.commons.compress.harmony.unpack200.ClassBands#getCodeHandlerCatchPO()",
        "org.apache.commons.compress.harmony.unpack200.SegmentUtils.countInvokeInterfaceArgs(String)",
        "org.apache.commons.compress.harmony.unpack200.ClassBands#getOrderedCodeAttributes()",
        "org.apache.commons.compress.harmony.unpack200.bytecode.NewAttribute#getLayoutIndex()",
        "org.apache.commons.compress.harmony.unpack200.Segment#getSegmentHeader()",
        "org.apache.commons.compress.harmony.unpack200.CpBands#cpClassValue(int)",
        "org.apache.commons.compress.harmony.unpack200.bytecode.CodeAttribute#CodeAttribute(int,int,byte[],Segment,OperandManager,List<ExceptionTableEntry>)",
        "org.apache.commons.compress.harmony.unpack200.SegmentHeader#getOptions()",
        "org.apache.commons.compress.harmony.unpack200.bytecode.LocalVariableTypeTableAttribute#renumber(List<Integer>)",
        "org.apache.commons.compress.harmony.unpack200.ClassBands#getMethodDescr()",
        "org.apache.commons.compress.harmony.unpack200.ClassBands#getCodeHandlerStartP()",
        "org.apache.commons.compress.harmony.unpack200.Segment#getAttrDefinitionBands()",
        "org.apache.commons.compress.harmony.unpack200.ClassBands#getCodeMaxNALocals()",
        "org.apache.commons.compress.harmony.unpack200.ClassBands#getClassSuperInts()",
        "org.apache.commons.compress.harmony.unpack200.bytecode.OperandManager#OperandManager(int[],int[],int[],int[],int[],int[],int[],int[],int[],int[],int[],int[],int[],int[],int[],int[],int[],int[],int[],int[],int[])",
        "org.apache.commons.compress.harmony.unpack200.ClassBands#getCodeHandlerCount()",
        "org.apache.commons.compress.harmony.unpack200.ClassBands#getClassThisInts()",
        "org.apache.commons.compress.harmony.unpack200.ClassBands#getMethodFlags()",
        "org.apache.commons.compress.harmony.unpack200.SegmentHeader#getClassCount()",
        "org.apache.commons.compress.harmony.unpack200.bytecode.NewAttribute#renumber(List<Integer>)",
        "org.apache.commons.compress.harmony.unpack200.ClassBands#getCodeHasAttributes()",
        "org.apache.commons.compress.harmony.unpack200.bytecode.CodeAttribute#addAttribute(Attribute)",
        "org.apache.commons.compress.harmony.unpack200.AttrDefinitionBands#getAttributeDefinitionMap()",
        "org.apache.commons.compress.harmony.unpack200.bytecode.Attribute#hasBCIRenumbering()",
        "org.apache.commons.compress.harmony.unpack200.bytecode.BCIRenumberedAttribute#hasBCIRenumbering()",
        "org.apache.commons.compress.harmony.unpack200.bytecode.CodeAttribute#renumber(List<Integer>)",
        "org.apache.commons.compress.harmony.unpack200.bytecode.OperandManager#setSegment(Segment)",
        "org.apache.commons.compress.harmony.unpack200.AttributeLayout#matches(long)",
        "org.apache.commons.compress.harmony.unpack200.ClassBands#getMethodAttributes()",
        "org.apache.commons.compress.harmony.unpack200.CpBands#getCpClass()",
        "org.apache.commons.compress.harmony.unpack200.bytecode.LocalVariableTableAttribute#renumber(List<Integer>)",
        "org.apache.commons.compress.harmony.unpack200.ClassBands#getCodeHandlerClassRCN()",
        "org.apache.commons.compress.harmony.unpack200.bytecode.ExceptionTableEntry#ExceptionTableEntry(int,int,int,CPClass)",
        "org.apache.commons.compress.harmony.unpack200.bytecode.OperandManager#setCurrentClass(String)",
        "org.apache.commons.compress.harmony.unpack200.Segment#getClassBands()",
        "org.apache.commons.compress.harmony.unpack200.AttributeLayout.<staticinit>()",
        "org.apache.commons.compress.harmony.unpack200.Segment#getCpBands()",
        "org.apache.commons.compress.harmony.unpack200.ClassBands#getCodeHandlerEndPO()"
    ],
    "org.apache.commons.compress.archivers.cpio.CpioArchiveEntry#CpioArchiveEntry(short)": [
        "org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.<init>()",
        "org.apache.commons.compress.archivers.cpio.CpioConstants.<staticinit>()"
    ],
    "org.apache.commons.compress.archivers.sevenz.SevenZFile#SevenZFile(File,SevenZFileOptions)": ["org.apache.commons.compress.archivers.sevenz.SevenZFile#SevenZFile(File,char[],SevenZFileOptions)"],
    "org.apache.commons.compress.archivers.sevenz.SevenZFile#readFully(ByteBuffer)": ["org.apache.commons.compress.utils.IOUtils.readFully(ReadableByteChannel,ByteBuffer)"],
    "org.apache.commons.compress.compressors.deflate.DeflateParameters#setCompressionLevel(int)": ["org.apache.commons.compress.compressors.deflate.DeflateParameters.<staticinit>()"],
    "org.apache.commons.compress.archivers.tar.TarArchiveEntry.parseInstantFromDecimalSeconds(String)": ["org.apache.commons.compress.archivers.tar.TarArchiveEntry.<staticinit>()"],
    "org.apache.commons.compress.archivers.zip.X7875_NewUnix#reset()": ["org.apache.commons.compress.archivers.zip.X7875_NewUnix.<staticinit>()"],
    "org.apache.commons.compress.harmony.unpack200.bytecode.forms.FloatRefForm#FloatRefForm(int,String,int[],boolean)": ["org.apache.commons.compress.harmony.unpack200.bytecode.forms.FloatRefForm#FloatRefForm(int,String,int[])"],
    "org.apache.commons.compress.harmony.pack200.NewAttributeBands#parseLayout()": [
        "org.apache.commons.compress.harmony.pack200.CPUTF8#getUnderlyingString()",
        "org.apache.commons.compress.harmony.pack200.NewAttributeBands#readNextAttributeElement(StringReader)",
        "org.apache.commons.compress.harmony.pack200.NewAttributeBands#resolveCalls()"
    ],
    "org.apache.commons.compress.harmony.unpack200.ClassBands#parseFieldMetadataBands(InputStream,int[])": [
        "org.apache.commons.compress.harmony.unpack200.AttributeLayout#matches(long)",
        "org.apache.commons.compress.harmony.unpack200.AttributeLayoutMap#getAttributeLayout(String,int)",
        "org.apache.commons.compress.harmony.unpack200.AttributeLayout.<staticinit>()",
        "org.apache.commons.compress.harmony.unpack200.SegmentUtils.countMatches(long[][],IMatcher)",
        "org.apache.commons.compress.harmony.unpack200.ClassBands#parseMetadata(InputStream,String[],int[],int[],String)",
        "org.apache.commons.compress.harmony.unpack200.MetadataBandGroup#getAttributes()"
    ],
    "org.apache.commons.compress.utils.SeekableInMemoryByteChannel#position(long)": ["org.apache.commons.compress.utils.SeekableInMemoryByteChannel#ensureOpen()"],
    "org.apache.commons.compress.harmony.unpack200.bytecode.forms.IMethodRefForm#getPoolID()": ["org.apache.commons.compress.harmony.unpack200.SegmentConstantPool.<staticinit>()"],
    "org.apache.commons.compress.compressors.deflate64.HuffmanDecoder.HuffmanCodes#state()": ["org.apache.commons.compress.compressors.deflate64.HuffmanState.<staticinit>()"],
    "org.apache.commons.compress.archivers.zip.AsiExtraField#parseFromCentralDirectoryData(byte[],int,int)": ["org.apache.commons.compress.archivers.zip.AsiExtraField#parseFromLocalFileData(byte[],int,int)"],
    "org.apache.commons.compress.compressors.lz77support.LZ77Compressor#longestMatch(int)": [
        "org.apache.commons.compress.compressors.lz77support.Parameters#getMaxCandidates()",
        "org.apache.commons.compress.compressors.lz77support.Parameters#getMaxOffset()",
        "org.apache.commons.compress.compressors.lz77support.Parameters#getNiceBackReferenceLength()",
        "org.apache.commons.compress.compressors.lz77support.Parameters#getMinBackReferenceLength()",
        "org.apache.commons.compress.compressors.lz77support.Parameters#getMaxBackReferenceLength()"
    ],
    "org.apache.commons.compress.archivers.zip.StreamCompressor#flushDeflater()": ["org.apache.commons.compress.archivers.zip.StreamCompressor#deflate()"],
    "org.apache.commons.compress.harmony.pack200.PackingUtils.log(String)": ["org.apache.commons.compress.harmony.pack200.PackingUtils.<staticinit>()"],
    "org.apache.commons.compress.archivers.sevenz.SevenZFile.Builder#setPassword(char[])": ["org.apache.commons.compress.archivers.sevenz.AES256SHA256Decoder.utf16Decode(char[])"],
    "org.apache.commons.compress.harmony.unpack200.bytecode.forms.SuperFieldRefForm#context(OperandManager)": ["org.apache.commons.compress.harmony.unpack200.bytecode.OperandManager#getSuperClass()"],
    "org.apache.commons.compress.harmony.unpack200.bytecode.CPMember#CPMember(CPUTF8,CPUTF8,long,List<Attribute>)": [
        "org.apache.commons.compress.harmony.unpack200.bytecode.ClassFileEntry.<init>()",
        "org.apache.commons.compress.harmony.unpack200.bytecode.CPMember.<init>()"
    ],
    "org.apache.commons.compress.utils.MultiReadOnlySeekableByteChannel#read(ByteBuffer)": [
        "org.apache.commons.compress.utils.MultiReadOnlySeekableByteChannel#size()",
        "org.apache.commons.compress.utils.MultiReadOnlySeekableByteChannel#isOpen()",
        "org.apache.commons.compress.utils.SeekableInMemoryByteChannel#position()",
        "org.apache.commons.compress.utils.MultiReadOnlySeekableByteChannel#position()",
        "org.apache.commons.compress.utils.SeekableInMemoryByteChannel#read(ByteBuffer)",
        "org.apache.commons.compress.utils.MultiReadOnlySeekableByteChannel#read(ByteBuffer)",
        "org.apache.commons.compress.utils.SeekableInMemoryByteChannel#size()"
    ],
    "org.apache.commons.compress.archivers.tar.TarFile#readOldGNUSparse()": [
        "org.apache.commons.compress.archivers.tar.TarArchiveSparseEntry#TarArchiveSparseEntry(byte[])",
        "org.apache.commons.compress.archivers.tar.TarArchiveEntry#isExtended()",
        "org.apache.commons.compress.archivers.tar.TarArchiveEntry#getDataOffset()",
        "org.apache.commons.compress.archivers.tar.TarArchiveSparseEntry#getSparseHeaders()",
        "org.apache.commons.compress.archivers.tar.TarFile#buildSparseInputStreams()",
        "org.apache.commons.compress.archivers.tar.TarArchiveEntry#getSparseHeaders()",
        "org.apache.commons.compress.archivers.tar.TarArchiveEntry#setDataOffset(long)",
        "org.apache.commons.compress.archivers.tar.TarArchiveSparseEntry#isExtended()",
        "org.apache.commons.compress.archivers.tar.TarFile#getRecord()"
    ],
    "org.apache.commons.compress.harmony.unpack200.bytecode.forms.SuperMethodRefForm#context(OperandManager)": ["org.apache.commons.compress.harmony.unpack200.bytecode.OperandManager#getSuperClass()"],
    "org.apache.commons.compress.archivers.sevenz.SevenZFile#SevenZFile(File,char[])": [
        "org.apache.commons.compress.archivers.sevenz.SevenZFileOptions.<staticinit>()",
        "org.apache.commons.compress.archivers.sevenz.SevenZFile#SevenZFile(File,char[],SevenZFileOptions)"
    ],
    "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream#realSkip(long)": [
        "org.apache.commons.compress.compressors.zstandard.ZstdCompressorInputStream#read(byte[],int,int)",
        "org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorInputStream#read(byte[],int,int)",
        "org.apache.commons.compress.archivers.sevenz.BoundedSeekableByteChannelInputStream#read(byte[],int,int)",
        "org.apache.commons.compress.compressors.deflate64.Deflate64CompressorInputStream#read(byte[],int,int)",
        "org.apache.commons.compress.compressors.brotli.BrotliCompressorInputStream#read(byte[],int,int)",
        "org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream#read(byte[],int,int)",
        "org.apache.commons.compress.archivers.sevenz.AES256SHA256Decoder.AES256SHA256DecoderInputStream#read(byte[],int,int)",
        "org.apache.commons.compress.compressors.lzma.LZMACompressorInputStream#read(byte[],int,int)",
        "org.apache.commons.compress.compressors.lz4.BlockLZ4CompressorInputStream#read(byte[],int,int)",
        "org.apache.commons.compress.archivers.ArchiveInputStream#count(int)",
        "org.apache.commons.compress.compressors.snappy.SnappyCompressorInputStream#read(byte[],int,int)",
        "org.apache.commons.compress.compressors.xz.XZCompressorInputStream#read(byte[],int,int)",
        "org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream#read(byte[],int,int)",
        "org.apache.commons.compress.utils.BoundedArchiveInputStream#read(byte[],int,int)",
        "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream#read(byte[],int,int)",
        "org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStream#read(byte[],int,int)",
        "org.apache.commons.compress.compressors.lzw.LZWInputStream#read(byte[],int,int)",
        "org.apache.commons.compress.compressors.deflate.DeflateCompressorInputStream#read(byte[],int,int)"
    ],
    "org.apache.commons.compress.archivers.zip.ZipShort#getBytes()": ["org.apache.commons.compress.utils.ByteUtils.toLittleEndian(byte[],long,int,int)"],
    "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream#initBlock()": ["org.apache.commons.compress.compressors.bzip2.CRC#reset()"],
    "org.apache.commons.compress.compressors.snappy.SnappyCompressorInputStream.<init>()": ["org.apache.commons.compress.compressors.snappy.SnappyCompressorInputStream.State.<staticinit>()"],
    "org.apache.commons.compress.compressors.lzma.LZMAUtils.<staticinit>()": [
        "org.apache.commons.compress.compressors.FileNameUtil#FileNameUtil(Map<String, String>,String)",
        "org.apache.commons.compress.utils.OsgiUtils.isRunningInOsgiEnvironment()",
        "org.apache.commons.compress.compressors.lzma.LZMAUtils.setCacheLZMAAvailablity(boolean)",
        "org.apache.commons.compress.compressors.lzma.LZMAUtils.CachedAvailability.<staticinit>()"
    ],
    "org.apache.commons.compress.harmony.unpack200.CpBands#cpClassValue(int)": [
        "org.apache.commons.compress.harmony.unpack200.bytecode.CPClass#CPClass(CPUTF8,int)",
        "org.apache.commons.compress.harmony.unpack200.CpBands#cpUTF8Value(int)"
    ],
    "org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream#Pack200CompressorInputStream(InputStream,Map<String, String>)": [
        "org.apache.commons.compress.compressors.pack200.Pack200Strategy.<staticinit>()",
        "org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream#Pack200CompressorInputStream(InputStream,Pack200Strategy,Map<String, String>)"
    ],
    "org.apache.commons.compress.utils.TimeUtils#TimeUtils()": ["org.apache.commons.compress.utils.TimeUtils.<init>()"],
    "org.apache.commons.compress.compressors.lz77support.LZ77Compressor.<staticinit>()": ["org.apache.commons.compress.compressors.lz77support.LZ77Compressor.EOD.<init>()"],
    "org.apache.commons.compress.archivers.zip.ZipSplitReadOnlySeekableByteChannel.buildFromLastSplitSegment(File)": ["org.apache.commons.compress.archivers.zip.ZipSplitReadOnlySeekableByteChannel.buildFromLastSplitSegment(File)"],
    "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream#getZip64Extra(ZipArchiveEntry)": [
        "org.apache.commons.compress.archivers.zip.ZipArchiveEntry#getExtraField(ZipShort)",
        "org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField#Zip64ExtendedInformationExtraField()",
        "org.apache.commons.compress.archivers.zip.ZipArchiveEntry#addAsFirstExtraField(ZipExtraField)",
        "org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField.<staticinit>()"
    ],
    "org.apache.commons.compress.archivers.zip.BitStream#BitStream(InputStream)": [
        "org.apache.commons.compress.utils.BitInputStream#BitInputStream(InputStream,ByteOrder)",
        "org.apache.commons.compress.archivers.zip.BitStream.<init>()"
    ],
    "org.apache.commons.compress.compressors.brotli.BrotliUtils.getCachedBrotliAvailability()": ["org.apache.commons.compress.compressors.brotli.BrotliUtils.<staticinit>()"],
    "org.apache.commons.compress.harmony.archive.internal.nls.Messages.<staticinit>()": ["org.apache.commons.compress.harmony.archive.internal.nls.Messages.setLocale(Locale,String)"],
    "org.apache.commons.compress.harmony.unpack200.bytecode.NewAttribute#addBCIndex(int,int)": ["org.apache.commons.compress.harmony.unpack200.bytecode.NewAttribute.BCIndex#BCIndex(int)"],
    "org.apache.commons.compress.harmony.unpack200.SegmentConstantPool#SegmentConstantPool(CpBands)": ["org.apache.commons.compress.harmony.unpack200.SegmentConstantPool.<init>()"],
    "org.apache.commons.compress.archivers.tar.TarUtils.verifyCheckSum(byte[])": [
        "org.apache.commons.compress.archivers.tar.TarConstants.<staticinit>()",
        "org.apache.commons.compress.archivers.tar.TarUtils.parseOctal(byte[],int,int)"
    ],
    "org.apache.commons.compress.archivers.jar.JarArchiveEntry#JarArchiveEntry(ZipEntry)": [
        "org.apache.commons.compress.archivers.zip.ZipArchiveEntry#ZipArchiveEntry(ZipEntry)",
        "org.apache.commons.compress.archivers.jar.JarArchiveEntry.<init>()"
    ],
    "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.bsGetBit(BitInputStream)": ["org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.bsR(BitInputStream,int)"],
    "org.apache.commons.compress.archivers.zip.X7875_NewUnix#setGID(long)": ["org.apache.commons.compress.archivers.zip.ZipUtil.longToBig(long)"],
    "org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry#equalSevenZMethods(Iterable<? extends SevenZMethodConfiguration>,Iterable<? extends SevenZMethodConfiguration>)": [
        "org.apache.commons.compress.utils.ServiceLoaderIterator#next()",
        "org.apache.commons.compress.utils.ServiceLoaderIterator#hasNext()",
        "org.apache.commons.compress.archivers.sevenz.SevenZMethodConfiguration#equals(Object)"
    ],
    "org.apache.commons.compress.harmony.unpack200.bytecode.AnnotationDefaultAttribute#resolve(ClassConstantPool)": [
        "org.apache.commons.compress.harmony.unpack200.bytecode.Attribute#resolve(ClassConstantPool)",
        "org.apache.commons.compress.harmony.unpack200.bytecode.AnnotationsAttribute.ElementValue#resolve(ClassConstantPool)"
    ],
    "org.apache.commons.compress.archivers.sevenz.CLI.Mode#Mode(String)": ["org.apache.commons.compress.archivers.sevenz.CLI.Mode.<init>()"],
    "org.apache.commons.compress.compressors.lz77support.AbstractLZ77CompressorInputStream#tryToReadLiteral(int)": [
        "org.apache.commons.compress.utils.IOUtils.readFully(InputStream,byte[],int,int)",
        "org.apache.commons.compress.compressors.CompressorInputStream#count(int)"
    ],
    "org.apache.commons.compress.compressors.CompressorStreamFactory#CompressorStreamFactory()": ["org.apache.commons.compress.compressors.CompressorStreamFactory.<init>()"],
    "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream#padAsNeeded()": ["org.apache.commons.compress.archivers.tar.TarArchiveOutputStream#writeEOFRecord()"],
    "org.apache.commons.compress.archivers.zip.UnsupportedZipFeatureException#UnsupportedZipFeatureException(Feature,ZipArchiveEntry)": [
        "org.apache.commons.compress.archivers.zip.ZipArchiveEntry#getName()",
        "org.apache.commons.compress.archivers.zip.UnsupportedZipFeatureException.<init>()"
    ],
    "org.apache.commons.compress.compressors.deflate.DeflateCompressorInputStream#available()": [
        "org.apache.commons.compress.compressors.deflate.DeflateCompressorInputStream#available()",
        "org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream#available()",
        "org.apache.commons.compress.compressors.brotli.BrotliCompressorInputStream#available()",
        "org.apache.commons.compress.compressors.xz.XZCompressorInputStream#available()",
        "org.apache.commons.compress.compressors.lz77support.AbstractLZ77CompressorInputStream#available()",
        "org.apache.commons.compress.compressors.deflate64.Deflate64CompressorInputStream#available()",
        "org.apache.commons.compress.compressors.zstandard.ZstdCompressorInputStream#available()",
        "org.apache.commons.compress.compressors.lzma.LZMACompressorInputStream#available()",
        "org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStream#available()"
    ],
    "org.apache.commons.compress.harmony.unpack200.bytecode.forms.ThisInitMethodRefForm#context(OperandManager)": ["org.apache.commons.compress.harmony.unpack200.bytecode.OperandManager#getCurrentClass()"],
    "org.apache.commons.compress.harmony.unpack200.Pack200UnpackerAdapter.newBoundedInputStream(FileInputStream)": [
        "org.apache.commons.compress.harmony.unpack200.Pack200UnpackerAdapter.readPath(FileInputStream)",
        "org.apache.commons.compress.harmony.unpack200.Pack200UnpackerAdapter.newBoundedInputStream(URL)"
    ],
    "org.apache.commons.compress.harmony.unpack200.SegmentConstantPoolArrayCache#arrayIsCached(String[])": ["org.apache.commons.compress.harmony.unpack200.SegmentConstantPoolArrayCache.CachedArray#lastKnownSize()"],
    "org.apache.commons.compress.archivers.dump.TapeInputStream.<init>()": ["org.apache.commons.compress.archivers.dump.DumpArchiveConstants.<staticinit>()"],
    "org.apache.commons.compress.archivers.tar.TarArchiveEntry#TarArchiveEntry(String,byte)": ["org.apache.commons.compress.archivers.tar.TarArchiveEntry#TarArchiveEntry(String,byte,boolean)"],
    "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream#readStoredEntry()": [
        "org.apache.commons.compress.compressors.zstandard.ZstdCompressorInputStream#read(byte[],int,int)",
        "org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorInputStream#read(byte[],int,int)",
        "org.apache.commons.compress.archivers.sevenz.BoundedSeekableByteChannelInputStream#read(byte[],int,int)",
        "org.apache.commons.compress.compressors.deflate64.Deflate64CompressorInputStream#read(byte[],int,int)",
        "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.<staticinit>()",
        "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.<staticinit>()",
        "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream#cacheBytesRead(ByteArrayOutputStream,int,int,int)",
        "org.apache.commons.compress.compressors.brotli.BrotliCompressorInputStream#read(byte[],int,int)",
        "org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream#read(byte[],int,int)",
        "org.apache.commons.compress.archivers.sevenz.AES256SHA256Decoder.AES256SHA256DecoderInputStream#read(byte[],int,int)",
        "org.apache.commons.compress.compressors.lzma.LZMACompressorInputStream#read(byte[],int,int)",
        "org.apache.commons.compress.archivers.zip.ZipConstants.<staticinit>()",
        "org.apache.commons.compress.compressors.lz4.BlockLZ4CompressorInputStream#read(byte[],int,int)",
        "org.apache.commons.compress.compressors.snappy.SnappyCompressorInputStream#read(byte[],int,int)",
        "org.apache.commons.compress.compressors.xz.XZCompressorInputStream#read(byte[],int,int)",
        "org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream#read(byte[],int,int)",
        "org.apache.commons.compress.utils.BoundedArchiveInputStream#read(byte[],int,int)",
        "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream#bufferContainsSignature(ByteArrayOutputStream,int,int,int)",
        "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream#read(byte[],int,int)",
        "org.apache.commons.compress.archivers.zip.ZipArchiveEntry#getSize()",
        "org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStream#read(byte[],int,int)",
        "org.apache.commons.compress.compressors.lzw.LZWInputStream#read(byte[],int,int)",
        "org.apache.commons.compress.compressors.deflate.DeflateCompressorInputStream#read(byte[],int,int)"
    ],
    "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile#setContentCompression(SevenZMethod)": [
        "org.apache.commons.compress.archivers.sevenz.SevenZMethod.<staticinit>()",
        "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile#setContentMethods(Iterable<? extends SevenZMethodConfiguration>)",
        "org.apache.commons.compress.archivers.sevenz.SevenZMethodConfiguration#SevenZMethodConfiguration(SevenZMethod)"
    ],
    "org.apache.commons.compress.harmony.pack200.BcBands#finaliseBands()": [
        "org.apache.commons.compress.harmony.pack200.BcBands#getIndexInClass(List<CPMethodOrField>)",
        "org.apache.commons.compress.harmony.pack200.BcBands#getIndexInClassForConstructor(List<CPMethodOrField>)"
    ],
    "org.apache.commons.compress.compressors.lz77support.Parameters.Builder#withMinBackReferenceLength(int)": ["org.apache.commons.compress.compressors.lz77support.Parameters.<staticinit>()"],
    "org.apache.commons.compress.harmony.pack200.RunCodec#decode(InputStream)": ["org.apache.commons.compress.harmony.pack200.RunCodec#decode(InputStream,long)"],
    "org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorOutputStream#close()": [
        "org.apache.commons.compress.archivers.zip.FileRandomAccessOutputStream#close()",
        "org.apache.commons.compress.compressors.snappy.SnappyCompressorOutputStream#close()",
        "org.apache.commons.compress.compressors.deflate.DeflateCompressorOutputStream#close()",
        "org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream#close()",
        "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream#close()",
        "org.apache.commons.compress.compressors.lzma.LZMACompressorOutputStream#close()",
        "org.apache.commons.compress.utils.FixedLengthBlockOutputStream#close()",
        "org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorOutputStream#close()",
        "org.apache.commons.compress.compressors.xz.XZCompressorOutputStream#close()",
        "org.apache.commons.compress.archivers.zip.ZipSplitOutputStream#close()",
        "org.apache.commons.compress.archivers.zip.SeekableChannelRandomAccessOutputStream#close()",
        "org.apache.commons.compress.archivers.sevenz.Coders.DeflateDecoder.DeflateDecoderOutputStream#close()",
        "org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorOutputStream#close()",
        "org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream#close()",
        "org.apache.commons.compress.compressors.lz4.BlockLZ4CompressorOutputStream#close()",
        "org.apache.commons.compress.archivers.ar.ArArchiveOutputStream#close()",
        "org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorOutputStream#finish()",
        "org.apache.commons.compress.compressors.zstandard.ZstdCompressorOutputStream#close()",
        "org.apache.commons.compress.archivers.sevenz.AES256SHA256Decoder.AES256SHA256DecoderOutputStream#close()",
        "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream#close()",
        "org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream#close()",
        "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream#close()",
        "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.OutputStreamWrapper#close()"
    ],
    "org.apache.commons.compress.archivers.dump.DumpArchiveEntry#setMode(int)": ["org.apache.commons.compress.archivers.dump.DumpArchiveEntry.PERMISSION.find(int)"],
    "org.apache.commons.compress.archivers.zip.ZipArchiveEntry#setName(String)": [
        "org.apache.commons.compress.archivers.zip.ZipArchiveEntry#getPlatform()",
        "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.<staticinit>()"
    ],
    "org.apache.commons.compress.archivers.zip.StreamCompressor.create(OutputStream)": ["org.apache.commons.compress.archivers.zip.StreamCompressor.create(OutputStream,Deflater)"],
    "org.apache.commons.compress.harmony.unpack200.bytecode.forms.StringRefForm#getOffset(OperandManager)": ["org.apache.commons.compress.harmony.unpack200.bytecode.OperandManager#nextStringRef()"],
    "org.apache.commons.compress.compressors.lz77support.LZ77Compressor#flushBackReference(int)": ["org.apache.commons.compress.compressors.lz77support.LZ77Compressor.BackReference#BackReference(int,int)"],
    "org.apache.commons.compress.harmony.unpack200.SegmentConstantPool#matchSpecificPoolEntryIndex(String[],String,int)": [
        "org.apache.commons.compress.harmony.unpack200.SegmentConstantPool.<staticinit>()",
        "org.apache.commons.compress.harmony.unpack200.SegmentConstantPool#matchSpecificPoolEntryIndex(String[],String[],String,String,int)"
    ],
    "org.apache.commons.compress.archivers.dump.DumpArchiveInputStream#getNextDumpEntry()": ["org.apache.commons.compress.archivers.dump.DumpArchiveInputStream#getNextEntry()"],
    "org.apache.commons.compress.archivers.sevenz.SevenZFile.getLong(ByteBuffer)": ["org.apache.commons.compress.archivers.sevenz.SevenZFile.checkEndOfFile(ByteBuffer,int)"],
    "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.<init>()": ["org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.<staticinit>()"],
    "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream#init()": [
        "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream#bsPutUByte(int)",
        "org.apache.commons.compress.compressors.bzip2.BlockSort#BlockSort(Data)",
        "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream#initBlock()",
        "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.Data#Data(int)"
    ],
    "org.apache.commons.compress.archivers.tar.TarArchiveEntry#getOrderedSparseHeaders()": [
        "org.apache.commons.compress.archivers.tar.TarArchiveStructSparse#getOffset()",
        "org.apache.commons.compress.archivers.tar.TarArchiveEntry#getName()",
        "org.apache.commons.compress.archivers.tar.TarArchiveEntry#getRealSize()",
        "org.apache.commons.compress.archivers.tar.TarArchiveStructSparse#getNumbytes()"
    ],
    "org.apache.commons.compress.harmony.unpack200.SegmentConstantPoolArrayCache.CachedArray#CachedArray(String[])": [
        "org.apache.commons.compress.harmony.unpack200.SegmentConstantPoolArrayCache.CachedArray.<init>()",
        "org.apache.commons.compress.harmony.unpack200.SegmentConstantPoolArrayCache.CachedArray#cacheIndexes()"
    ],
    "org.apache.commons.compress.compressors.CompressorException#CompressorException(String,Throwable)": ["org.apache.commons.compress.compressors.CompressorException.<init>()"],
    "org.apache.commons.compress.harmony.unpack200.bytecode.AnnotationsAttribute.ElementValue#writeBody(DataOutputStream)": [
        "org.apache.commons.compress.harmony.unpack200.bytecode.AnnotationsAttribute.Annotation#writeBody(DataOutputStream)",
        "org.apache.commons.compress.harmony.unpack200.bytecode.CPNameAndType#writeBody(DataOutputStream)",
        "org.apache.commons.compress.harmony.unpack200.bytecode.AnnotationsAttribute.ElementValue#writeBody(DataOutputStream)"
    ],
    "org.apache.commons.compress.utils.SeekableInMemoryByteChannel#write(ByteBuffer)": [
        "org.apache.commons.compress.utils.SeekableInMemoryByteChannel#resize(int)",
        "org.apache.commons.compress.utils.SeekableInMemoryByteChannel#ensureOpen()"
    ],
    "org.apache.commons.compress.archivers.sevenz.SevenZFile#SevenZFile(SeekableByteChannel,byte[])": [
        "org.apache.commons.compress.archivers.sevenz.SevenZFile#SevenZFile(SeekableByteChannel,String,byte[])",
        "org.apache.commons.compress.archivers.sevenz.SevenZFile.<staticinit>()"
    ],
    "org.apache.commons.compress.harmony.pack200.PackingOptions#getUnknownAttributePrototypes()": [
        "org.apache.commons.compress.harmony.pack200.PackingOptions.<staticinit>()",
        "org.apache.commons.compress.harmony.pack200.AttributeDefinitionBands.<staticinit>()",
        "org.apache.commons.compress.harmony.pack200.PackingOptions#addOrUpdateAttributeActions(List<Attribute>,Map<String, String>,int)"
    ],
    "org.apache.commons.compress.harmony.unpack200.bytecode.ClassConstantPool#resolve(Segment)": [
        "org.apache.commons.compress.harmony.unpack200.bytecode.CPString#resolve(ClassConstantPool)",
        "org.apache.commons.compress.harmony.unpack200.bytecode.LineNumberTableAttribute#resolve(ClassConstantPool)",
        "org.apache.commons.compress.harmony.unpack200.bytecode.RuntimeVisibleorInvisibleParameterAnnotationsAttribute#resolve(ClassConstantPool)",
        "org.apache.commons.compress.harmony.unpack200.bytecode.NewAttribute#resolve(ClassConstantPool)",
        "org.apache.commons.compress.harmony.unpack200.bytecode.LocalVariableTypeTableAttribute#resolve(ClassConstantPool)",
        "org.apache.commons.compress.harmony.unpack200.bytecode.ConstantValueAttribute#resolve(ClassConstantPool)",
        "org.apache.commons.compress.harmony.unpack200.bytecode.ByteCode#resolve(ClassConstantPool)",
        "org.apache.commons.compress.harmony.unpack200.bytecode.ClassConstantPool#sortClassPool()",
        "org.apache.commons.compress.harmony.unpack200.bytecode.RuntimeVisibleorInvisibleAnnotationsAttribute#resolve(ClassConstantPool)",
        "org.apache.commons.compress.harmony.unpack200.bytecode.InnerClassesAttribute#resolve(ClassConstantPool)",
        "org.apache.commons.compress.harmony.unpack200.bytecode.ClassConstantPool#initialSort()",
        "org.apache.commons.compress.harmony.unpack200.bytecode.CPMember#resolve(ClassConstantPool)",
        "org.apache.commons.compress.harmony.unpack200.bytecode.AnnotationDefaultAttribute#resolve(ClassConstantPool)",
        "org.apache.commons.compress.harmony.unpack200.bytecode.EnclosingMethodAttribute#resolve(ClassConstantPool)",
        "org.apache.commons.compress.harmony.unpack200.bytecode.ClassFileEntry#resolve(ClassConstantPool)",
        "org.apache.commons.compress.harmony.unpack200.bytecode.SourceFileAttribute#resolve(ClassConstantPool)",
        "org.apache.commons.compress.harmony.unpack200.bytecode.CPFieldRef#resolve(ClassConstantPool)",
        "org.apache.commons.compress.harmony.unpack200.bytecode.LocalVariableTableAttribute#resolve(ClassConstantPool)",
        "org.apache.commons.compress.harmony.unpack200.bytecode.CPRef#resolve(ClassConstantPool)",
        "org.apache.commons.compress.harmony.unpack200.bytecode.Attribute#resolve(ClassConstantPool)",
        "org.apache.commons.compress.harmony.unpack200.bytecode.ExceptionsAttribute#resolve(ClassConstantPool)",
        "org.apache.commons.compress.harmony.unpack200.bytecode.CodeAttribute#resolve(ClassConstantPool)",
        "org.apache.commons.compress.harmony.unpack200.bytecode.CPClass#resolve(ClassConstantPool)",
        "org.apache.commons.compress.harmony.unpack200.bytecode.SignatureAttribute#resolve(ClassConstantPool)",
        "org.apache.commons.compress.harmony.unpack200.bytecode.CPNameAndType#resolve(ClassConstantPool)"
    ],
    "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream#BZip2CompressorInputStream(InputStream)": ["org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream#BZip2CompressorInputStream(InputStream,boolean)"],
    "org.apache.commons.compress.harmony.unpack200.FileBands#processFileBits()": [
        "org.apache.commons.compress.harmony.unpack200.SegmentHeader#getNumberOfFiles()",
        "org.apache.commons.compress.utils.IOUtils.readRange(InputStream,int)"
    ],
    "org.apache.commons.compress.compressors.lz77support.LZ77Compressor.BackReference#BackReference(int,int)": [
        "org.apache.commons.compress.compressors.lz77support.LZ77Compressor.Block.<init>()",
        "org.apache.commons.compress.compressors.lz77support.LZ77Compressor.BackReference.<init>()"
    ],
    "org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp#setCreateJavaTime(Date)": [
        "org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp#setCreateTime(ZipLong)",
        "org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp.dateToZipLong(Date)"
    ],
    "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream#writeCentralDirectoryEnd()": [
        "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream#writeCounted(byte[])",
        "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream#validateIfZip64IsNeededInEOCD()",
        "org.apache.commons.compress.archivers.tar.TarUtils$ZipEncoding$1#encode(String)",
        "org.apache.commons.compress.archivers.zip.StreamCompressor#writeCounted(byte[],int,int)",
        "org.apache.commons.compress.archivers.zip.Zip64Mode.<staticinit>()",
        "org.apache.commons.compress.archivers.zip.ZipSplitOutputStream#prepareToWriteUnsplittableContent(long)",
        "org.apache.commons.compress.archivers.zip.ZipLong.getBytes(long)",
        "org.apache.commons.compress.archivers.zip.NioZipEncoding#encode(String)",
        "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.<staticinit>()",
        "org.apache.commons.compress.archivers.zip.ZipSplitOutputStream#getCurrentSplitSegmentIndex()",
        "org.apache.commons.compress.archivers.zip.ZipShort.getBytes(int)",
        "org.apache.commons.compress.archivers.zip.ZipConstants.<staticinit>()"
    ],
    "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream#writeZip64CentralDirectory()": [
        "org.apache.commons.compress.archivers.zip.Zip64Mode.<staticinit>()",
        "org.apache.commons.compress.archivers.zip.ZipSplitOutputStream#prepareToWriteUnsplittableContent(long)",
        "org.apache.commons.compress.archivers.zip.ZipEightByteInteger.getBytes(BigInteger)",
        "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.<staticinit>()",
        "org.apache.commons.compress.archivers.zip.ZipShort.getBytes(int)",
        "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream#shouldUseZip64EOCD()",
        "org.apache.commons.compress.archivers.zip.ZipEightByteInteger.getBytes(long)",
        "org.apache.commons.compress.archivers.zip.ZipConstants.<staticinit>()",
        "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream#writeOut(byte[])",
        "org.apache.commons.compress.archivers.zip.ZipLong.getBytes(long)",
        "org.apache.commons.compress.archivers.zip.ZipSplitOutputStream#getCurrentSplitSegmentBytesWritten()",
        "org.apache.commons.compress.archivers.zip.ZipSplitOutputStream#getCurrentSplitSegmentIndex()",
        "org.apache.commons.compress.archivers.zip.StreamCompressor#getTotalBytesWritten()"
    ],
    "org.apache.commons.compress.harmony.unpack200.bytecode.RuntimeVisibleorInvisibleParameterAnnotationsAttribute#resolve(ClassConstantPool)": [
        "org.apache.commons.compress.harmony.unpack200.bytecode.Attribute#resolve(ClassConstantPool)",
        "org.apache.commons.compress.harmony.unpack200.bytecode.RuntimeVisibleorInvisibleParameterAnnotationsAttribute.ParameterAnnotation#resolve(ClassConstantPool)"
    ],
    "org.apache.commons.compress.compressors.xz.XZCompressorInputStream#XZCompressorInputStream(InputStream)": ["org.apache.commons.compress.compressors.xz.XZCompressorInputStream#XZCompressorInputStream(InputStream,boolean)"],
    "org.apache.commons.compress.harmony.unpack200.Pack200UnpackerAdapter#unpack(File,JarOutputStream)": [
        "org.apache.commons.compress.harmony.pack200.Pack200Adapter.<staticinit>()",
        "org.apache.commons.compress.harmony.unpack200.Pack200UnpackerAdapter#unpack(InputStream,JarOutputStream)"
    ],
    "org.apache.commons.compress.archivers.ArchiveOutputStream#createArchiveEntry(Path,String,LinkOption[]...)": [
        "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream#createArchiveEntry(File,String)",
        "org.apache.commons.compress.archivers.ar.ArArchiveOutputStream#createArchiveEntry(File,String)",
        "org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream#createArchiveEntry(File,String)",
        "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream#createArchiveEntry(File,String)"
    ],
    "org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream#readOldAsciiEntry()": [
        "org.apache.commons.compress.archivers.cpio.CpioArchiveEntry#setMode(long)",
        "org.apache.commons.compress.archivers.cpio.CpioArchiveEntry#setRemoteDevice(long)",
        "org.apache.commons.compress.utils.ArchiveUtils.sanitize(String)",
        "org.apache.commons.compress.archivers.dump.DumpArchiveInputStream#getBytesRead()",
        "org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream#readAsciiLong(int,int)",
        "org.apache.commons.compress.archivers.cpio.CpioArchiveEntry#setTime(long)",
        "org.apache.commons.compress.archivers.cpio.CpioArchiveEntry#setSize(long)",
        "org.apache.commons.compress.archivers.cpio.CpioArchiveEntry#setGID(long)",
        "org.apache.commons.compress.archivers.cpio.CpioArchiveEntry#setNumberOfLinks(long)",
        "org.apache.commons.compress.archivers.cpio.CpioArchiveEntry#setName(String)",
        "org.apache.commons.compress.archivers.cpio.CpioArchiveEntry#getSize()",
        "org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream#readCString(int)",
        "org.apache.commons.compress.archivers.cpio.CpioArchiveEntry#setInode(long)",
        "org.apache.commons.compress.archivers.cpio.CpioArchiveEntry#setUID(long)",
        "org.apache.commons.compress.archivers.cpio.CpioConstants.<staticinit>()",
        "org.apache.commons.compress.archivers.cpio.CpioArchiveEntry#setDevice(long)",
        "org.apache.commons.compress.archivers.cpio.CpioArchiveEntry#CpioArchiveEntry(short)",
        "org.apache.commons.compress.archivers.cpio.CpioUtil.fileType(long)",
        "org.apache.commons.compress.archivers.ArchiveInputStream#getBytesRead()"
    ],
    "org.apache.commons.compress.archivers.zip.ZipUtil.longToBig(long)": ["org.apache.commons.compress.archivers.zip.ZipUtil.adjustToLong(int)"],
    "org.apache.commons.compress.compressors.lz4.BlockLZ4CompressorOutputStream#addLiteralBlock(LiteralBlock)": [
        "org.apache.commons.compress.compressors.lz4.BlockLZ4CompressorOutputStream#clearUnusedBlocksAndPairs()",
        "org.apache.commons.compress.compressors.lz4.BlockLZ4CompressorOutputStream#recordLiteral(byte[])",
        "org.apache.commons.compress.compressors.lz77support.LZ77Compressor.LiteralBlock#getLength()",
        "org.apache.commons.compress.compressors.lz4.BlockLZ4CompressorOutputStream.Pair#addLiteral(LiteralBlock)",
        "org.apache.commons.compress.compressors.lz4.BlockLZ4CompressorOutputStream#writeBlocksAndReturnUnfinishedPair(int)"
    ],
    "org.apache.commons.compress.archivers.zip.ZipFile#copyRawEntries(ZipArchiveOutputStream,ZipArchiveEntryPredicate)": [
        "org.apache.commons.compress.archivers.zip.ZipFile#getRawInputStream(ZipArchiveEntry)",
        "org.apache.commons.compress.archivers.zip.ZipFile#getEntriesInPhysicalOrder()",
        "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream#addRawArchiveEntry(ZipArchiveEntry,InputStream)"
    ],
    "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream#generateMTFValues()": ["org.apache.commons.compress.compressors.bzip2.BZip2Constants.<staticinit>()"],
    "org.apache.commons.compress.archivers.tar.TarArchiveInputStream.<init>()": ["org.apache.commons.compress.archivers.tar.TarArchiveInputStream.<staticinit>()"],
    "org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp#getModifyJavaTime()": ["org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp.zipLongToDate(ZipLong)"],
    "org.apache.commons.compress.harmony.unpack200.bytecode.CPInterfaceMethodRef#CPInterfaceMethodRef(CPClass,CPNameAndType,int)": [
        "org.apache.commons.compress.harmony.unpack200.bytecode.ConstantPoolEntry.<staticinit>()",
        "org.apache.commons.compress.harmony.unpack200.bytecode.CPInterfaceMethodRef.<init>()",
        "org.apache.commons.compress.harmony.unpack200.bytecode.CPRef#CPRef(byte,CPClass,CPNameAndType,int)"
    ],
    "org.apache.commons.compress.parallel.FileBasedScatterGatherBackingStore#closeForWriting()": [
        "org.apache.commons.compress.archivers.zip.FileRandomAccessOutputStream#close()",
        "org.apache.commons.compress.compressors.snappy.SnappyCompressorOutputStream#close()",
        "org.apache.commons.compress.compressors.deflate.DeflateCompressorOutputStream#close()",
        "org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream#close()",
        "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream#close()",
        "org.apache.commons.compress.compressors.lzma.LZMACompressorOutputStream#close()",
        "org.apache.commons.compress.utils.FixedLengthBlockOutputStream#close()",
        "org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorOutputStream#close()",
        "org.apache.commons.compress.compressors.xz.XZCompressorOutputStream#close()",
        "org.apache.commons.compress.archivers.zip.ZipSplitOutputStream#close()",
        "org.apache.commons.compress.archivers.zip.SeekableChannelRandomAccessOutputStream#close()",
        "org.apache.commons.compress.archivers.sevenz.Coders.DeflateDecoder.DeflateDecoderOutputStream#close()",
        "org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorOutputStream#close()",
        "org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream#close()",
        "org.apache.commons.compress.compressors.lz4.BlockLZ4CompressorOutputStream#close()",
        "org.apache.commons.compress.archivers.ar.ArArchiveOutputStream#close()",
        "org.apache.commons.compress.compressors.zstandard.ZstdCompressorOutputStream#close()",
        "org.apache.commons.compress.archivers.sevenz.AES256SHA256Decoder.AES256SHA256DecoderOutputStream#close()",
        "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream#close()",
        "org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream#close()",
        "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream#close()",
        "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.OutputStreamWrapper#close()"
    ],
    "org.apache.commons.compress.archivers.zip.ZipArchiveEntry#getSize()": ["org.apache.commons.compress.archivers.ArchiveEntry.<staticinit>()"],
    "org.apache.commons.compress.archivers.sevenz.LZMA2Decoder#LZMA2Decoder()": [
        "org.apache.commons.compress.archivers.sevenz.LZMA2Decoder.<init>()",
        "org.apache.commons.compress.archivers.sevenz.AbstractCoder#AbstractCoder(Class<?>[]...)"
    ],
    "org.apache.commons.compress.archivers.zip.ZipLong#getBytes()": ["org.apache.commons.compress.archivers.zip.ZipLong.getBytes(long)"],
    "org.apache.commons.compress.archivers.sevenz.SevenZFile#hasCurrentEntryBeenRead()": [
        "org.apache.commons.compress.utils.ChecksumVerifyingInputStream#getBytesRemaining()",
        "org.apache.commons.compress.utils.BoundedInputStream#getBytesRemaining()",
        "org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry#getSize()"
    ],
    "org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream.<init>()": ["org.apache.commons.compress.compressors.gzip.GzipParameters.<init>()"],
    "org.apache.commons.compress.compressors.deflate64.HuffmanDecoder.HuffmanCodes#read(byte[],int,int)": ["org.apache.commons.compress.compressors.deflate64.HuffmanDecoder.HuffmanCodes#decodeNext(byte[],int,int)"],
    "org.apache.commons.compress.archivers.tar.TarArchiveEntry#setModTime(FileTime)": ["org.apache.commons.compress.archivers.tar.TarArchiveEntry#setLastModifiedTime(FileTime)"],
    "org.apache.commons.compress.archivers.cpio.CpioArchiveEntry#CpioArchiveEntry(String)": [
        "org.apache.commons.compress.archivers.cpio.CpioArchiveEntry#CpioArchiveEntry(short,String)",
        "org.apache.commons.compress.archivers.cpio.CpioConstants.<staticinit>()"
    ],
    "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream#sendMTFValues3(int,int)": ["org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.hbAssignCodes(int[],byte[],int,int,int)"],
    "org.apache.commons.compress.harmony.unpack200.BandSet#parseCPSignatureReferences(String,InputStream,BHSDCodec,int)": [
        "org.apache.commons.compress.harmony.unpack200.BandSet#decodeBandInt(String,InputStream,BHSDCodec,int)",
        "org.apache.commons.compress.harmony.unpack200.Segment#getCpBands()",
        "org.apache.commons.compress.harmony.unpack200.CpBands#cpSignatureValue(int)"
    ],
    "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.CurrentEntry.<init>()": ["org.apache.commons.compress.archivers.zip.ZipArchiveEntry#ZipArchiveEntry()"],
    "org.apache.commons.compress.archivers.zip.ParallelScatterZipCreator.<init>()": ["org.apache.commons.compress.archivers.zip.ParallelScatterZipCreator$ThreadLocal$1.<init>()"],
    "org.apache.commons.compress.harmony.pack200.PackingUtils.PackingLogger#PackingLogger(String,String)": ["org.apache.commons.compress.harmony.pack200.PackingUtils.PackingLogger.<init>()"],
    "org.apache.commons.compress.harmony.pack200.NewAttributeBands#pack(OutputStream)": [
        "org.apache.commons.compress.harmony.pack200.NewAttributeBands.Union#pack(OutputStream)",
        "org.apache.commons.compress.harmony.pack200.NewAttributeBands.Callable#pack(OutputStream)",
        "org.apache.commons.compress.harmony.pack200.NewAttributeBands.Call#pack(OutputStream)",
        "org.apache.commons.compress.harmony.pack200.NewAttributeBands.UnionCase#pack(OutputStream)",
        "org.apache.commons.compress.harmony.pack200.NewAttributeBands.Reference#pack(OutputStream)",
        "org.apache.commons.compress.harmony.pack200.NewAttributeBands.Integral#pack(OutputStream)",
        "org.apache.commons.compress.harmony.pack200.NewAttributeBands.Replication#pack(OutputStream)"
    ],
    "org.apache.commons.compress.harmony.pack200.PackingOptions#getUnknownClassAttributeAction(String)": ["org.apache.commons.compress.harmony.pack200.PackingOptions#getOrDefault(Map<String, String>,String,String)"],
    "org.apache.commons.compress.archivers.ArchiveException#ArchiveException(String)": ["org.apache.commons.compress.archivers.ArchiveException.<init>()"],
    "org.apache.commons.compress.harmony.unpack200.bytecode.AnnotationsAttribute.ElementValue#getClassFileEntries()": [
        "org.apache.commons.compress.harmony.unpack200.bytecode.AnnotationsAttribute.Annotation#getClassFileEntries()",
        "org.apache.commons.compress.harmony.unpack200.bytecode.AnnotationsAttribute.ElementValue#getClassFileEntries()"
    ],
    "org.apache.commons.compress.harmony.unpack200.AttrDefinitionBands#read(InputStream)": [
        "org.apache.commons.compress.harmony.unpack200.AttributeLayoutMap#checkMap()",
        "org.apache.commons.compress.harmony.pack200.Codec.<staticinit>()",
        "org.apache.commons.compress.harmony.unpack200.AttributeLayoutMap#AttributeLayoutMap()",
        "org.apache.commons.compress.harmony.unpack200.Segment#getSegmentHeader()",
        "org.apache.commons.compress.harmony.unpack200.NewAttributeBands#NewAttributeBands(Segment,AttributeLayout)",
        "org.apache.commons.compress.harmony.unpack200.AttrDefinitionBands#setupDefaultAttributeNames()",
        "org.apache.commons.compress.harmony.unpack200.SegmentHeader#getOptions()",
        "org.apache.commons.compress.harmony.unpack200.SegmentOptions#hasClassFlagsHi()",
        "org.apache.commons.compress.harmony.unpack200.BandSet#decodeBandInt(String,InputStream,BHSDCodec,int)",
        "org.apache.commons.compress.harmony.unpack200.BandSet#parseReferences(String,InputStream,BHSDCodec,int,String[])",
        "org.apache.commons.compress.harmony.unpack200.SegmentHeader#getAttributeDefinitionCount()",
        "org.apache.commons.compress.harmony.unpack200.AttributeLayout#AttributeLayout(String,int,String,int,boolean)",
        "org.apache.commons.compress.harmony.unpack200.AttributeLayoutMap#add(AttributeLayout,NewAttributeBands)"
    ],
    "org.apache.commons.compress.archivers.zip.ResourceAlignmentExtraField#getLocalFileDataLength()": [
        "org.apache.commons.compress.archivers.zip.ResourceAlignmentExtraField.<staticinit>()",
        "org.apache.commons.compress.archivers.zip.ZipShort#ZipShort(int)"
    ],
    "org.apache.commons.compress.harmony.unpack200.SegmentConstantPool#getConstantPoolEntry(int,long)": [
        "org.apache.commons.compress.harmony.unpack200.CpBands#cpDoubleValue(int)",
        "org.apache.commons.compress.harmony.unpack200.CpBands#cpIntegerValue(int)",
        "org.apache.commons.compress.harmony.unpack200.CpBands#cpStringValue(int)",
        "org.apache.commons.compress.harmony.pack200.Pack200Exception#Pack200Exception(String)",
        "org.apache.commons.compress.harmony.unpack200.CpBands#cpIMethodValue(int)",
        "org.apache.commons.compress.harmony.unpack200.CpBands#cpUTF8Value(int)",
        "org.apache.commons.compress.harmony.unpack200.CpBands#cpLongValue(int)",
        "org.apache.commons.compress.harmony.unpack200.CpBands#cpClassValue(int)",
        "org.apache.commons.compress.harmony.unpack200.CpBands#cpFloatValue(int)",
        "org.apache.commons.compress.harmony.unpack200.CpBands#cpFieldValue(int)",
        "org.apache.commons.compress.harmony.unpack200.SegmentConstantPool.<staticinit>()",
        "org.apache.commons.compress.harmony.unpack200.CpBands#cpMethodValue(int)"
    ],
    "org.apache.commons.compress.compressors.snappy.SnappyCompressorOutputStream#writeLiteralBlockTwoSizeBytes(LiteralBlock,int)": [
        "org.apache.commons.compress.compressors.snappy.SnappyCompressorOutputStream.<staticinit>()",
        "org.apache.commons.compress.compressors.snappy.SnappyCompressorOutputStream#writeLiteralBlockWithSize(int,int,int,LiteralBlock)"
    ],
    "org.apache.commons.compress.harmony.pack200.CodecEncoding.getSpecifier(Codec,Codec)": [
        "org.apache.commons.compress.harmony.pack200.Codec.<staticinit>()",
        "org.apache.commons.compress.harmony.pack200.BHSDCodec#getS()",
        "org.apache.commons.compress.harmony.pack200.PopulationCodec#getTokenCodec()",
        "org.apache.commons.compress.harmony.pack200.BHSDCodec#isDelta()",
        "org.apache.commons.compress.harmony.pack200.PopulationCodec#getUnfavouredCodec()",
        "org.apache.commons.compress.harmony.pack200.BHSDCodec#getH()",
        "org.apache.commons.compress.harmony.pack200.CodecEncoding.<staticinit>()",
        "org.apache.commons.compress.harmony.pack200.BHSDCodec#getB()",
        "org.apache.commons.compress.harmony.pack200.CodecEncoding.getSpecifier(Codec,Codec)",
        "org.apache.commons.compress.harmony.pack200.PopulationCodec#getFavouredCodec()",
        "org.apache.commons.compress.harmony.pack200.RunCodec#getACodec()",
        "org.apache.commons.compress.harmony.pack200.RunCodec#getBCodec()",
        "org.apache.commons.compress.harmony.pack200.RunCodec#getK()",
        "org.apache.commons.compress.harmony.pack200.PopulationCodec#getFavoured()"
    ],
    "org.apache.commons.compress.archivers.sevenz.SevenZFile#toString()": ["org.apache.commons.compress.archivers.sevenz.Archive#toString()"],
    "org.apache.commons.compress.utils.FixedLengthBlockOutputStream.BufferAtATimeOutputChannel#BufferAtATimeOutputChannel(OutputStream)": ["org.apache.commons.compress.utils.FixedLengthBlockOutputStream.BufferAtATimeOutputChannel.<init>()"],
    "org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry#setContentMethods(Iterable<? extends SevenZMethodConfiguration>)": ["org.apache.commons.compress.archivers.sevenz.SevenZMethod.<staticinit>()"],
    "org.apache.commons.compress.harmony.unpack200.bytecode.forms.NewInitMethodRefForm#setNestedEntries(ByteCode,OperandManager,int)": [
        "org.apache.commons.compress.harmony.unpack200.bytecode.OperandManager#globalConstantPool()",
        "org.apache.commons.compress.harmony.unpack200.bytecode.ByteCode#setNestedPositions(int[][])",
        "org.apache.commons.compress.harmony.unpack200.SegmentConstantPool.<staticinit>()",
        "org.apache.commons.compress.harmony.unpack200.SegmentConstantPool#getInitMethodPoolEntry(int,long,String)",
        "org.apache.commons.compress.harmony.unpack200.bytecode.forms.NewInitMethodRefForm#context(OperandManager)",
        "org.apache.commons.compress.harmony.unpack200.bytecode.ByteCode#setNested(ClassFileEntry[])"
    ],
    "org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp#parseFromCentralDirectoryData(byte[],int,int)": [
        "org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp#parseFromLocalFileData(byte[],int,int)",
        "org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp#reset()"
    ],
    "org.apache.commons.compress.harmony.unpack200.bytecode.RuntimeVisibleorInvisibleParameterAnnotationsAttribute.ParameterAnnotation#getClassFileEntries()": ["org.apache.commons.compress.harmony.unpack200.bytecode.AnnotationsAttribute.Annotation#getClassFileEntries()"],
    "org.apache.commons.compress.harmony.pack200.Segment.SegmentAnnotationVisitor#visitEnd()": [
        "org.apache.commons.compress.harmony.pack200.ClassBands#addAnnotation(int,String,boolean,List<String>,List<String>,List<Object>,List<Integer>,List<String>,List<String>,List<Integer>)",
        "org.apache.commons.compress.harmony.pack200.ClassBands#addAnnotationDefault(List<String>,List<String>,List<Object>,List<Integer>,List<String>,List<String>,List<Integer>)",
        "org.apache.commons.compress.harmony.pack200.ClassBands#addParameterAnnotation(int,String,boolean,List<String>,List<String>,List<Object>,List<Integer>,List<String>,List<String>,List<Integer>)"
    ],
    "org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorInputStream#verifyChecksum(XXHash32,String)": [
        "org.apache.commons.compress.utils.IOUtils.readFully(InputStream,byte[])",
        "org.apache.commons.compress.utils.ByteUtils.fromLittleEndian(byte[])",
        "org.apache.commons.compress.compressors.CompressorInputStream#count(int)"
    ],
    "org.apache.commons.compress.archivers.zip.ZipArchiveEntry#ZipArchiveEntry()": ["org.apache.commons.compress.archivers.zip.ZipArchiveEntry#ZipArchiveEntry(String)"],
    "org.apache.commons.compress.compressors.z.ZCompressorInputStream#addEntry(int,byte)": [
        "org.apache.commons.compress.compressors.z.ZCompressorInputStream#reAlignReading()",
        "org.apache.commons.compress.compressors.lzw.LZWInputStream#getCodeSize()",
        "org.apache.commons.compress.compressors.lzw.LZWInputStream#addEntry(int,byte,int)",
        "org.apache.commons.compress.compressors.lzw.LZWInputStream#getTableSize()",
        "org.apache.commons.compress.compressors.lzw.LZWInputStream#incrementCodeSize()"
    ],
    "org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream#Pack200CompressorInputStream(File,Pack200Strategy)": ["org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream#Pack200CompressorInputStream(InputStream,File,Pack200Strategy,Map<String, String>)"],
    "org.apache.commons.compress.harmony.unpack200.bytecode.NewAttribute#resolve(ClassConstantPool)": [
        "org.apache.commons.compress.harmony.unpack200.bytecode.EnclosingMethodAttribute#resolve(ClassConstantPool)",
        "org.apache.commons.compress.harmony.unpack200.bytecode.ClassFileEntry#resolve(ClassConstantPool)",
        "org.apache.commons.compress.harmony.unpack200.bytecode.CPString#resolve(ClassConstantPool)",
        "org.apache.commons.compress.harmony.unpack200.bytecode.SourceFileAttribute#resolve(ClassConstantPool)",
        "org.apache.commons.compress.harmony.unpack200.bytecode.CPFieldRef#resolve(ClassConstantPool)",
        "org.apache.commons.compress.harmony.unpack200.bytecode.LocalVariableTableAttribute#resolve(ClassConstantPool)",
        "org.apache.commons.compress.harmony.unpack200.bytecode.LineNumberTableAttribute#resolve(ClassConstantPool)",
        "org.apache.commons.compress.harmony.unpack200.bytecode.RuntimeVisibleorInvisibleParameterAnnotationsAttribute#resolve(ClassConstantPool)",
        "org.apache.commons.compress.harmony.unpack200.bytecode.NewAttribute#resolve(ClassConstantPool)",
        "org.apache.commons.compress.harmony.unpack200.bytecode.LocalVariableTypeTableAttribute#resolve(ClassConstantPool)",
        "org.apache.commons.compress.harmony.unpack200.bytecode.CPRef#resolve(ClassConstantPool)",
        "org.apache.commons.compress.harmony.unpack200.bytecode.ConstantValueAttribute#resolve(ClassConstantPool)",
        "org.apache.commons.compress.harmony.unpack200.bytecode.ByteCode#resolve(ClassConstantPool)",
        "org.apache.commons.compress.harmony.unpack200.bytecode.RuntimeVisibleorInvisibleAnnotationsAttribute#resolve(ClassConstantPool)",
        "org.apache.commons.compress.harmony.unpack200.bytecode.InnerClassesAttribute#resolve(ClassConstantPool)",
        "org.apache.commons.compress.harmony.unpack200.bytecode.CPMember#resolve(ClassConstantPool)",
        "org.apache.commons.compress.harmony.unpack200.bytecode.Attribute#resolve(ClassConstantPool)",
        "org.apache.commons.compress.harmony.unpack200.bytecode.ExceptionsAttribute#resolve(ClassConstantPool)",
        "org.apache.commons.compress.harmony.unpack200.bytecode.CodeAttribute#resolve(ClassConstantPool)",
        "org.apache.commons.compress.harmony.unpack200.bytecode.AnnotationDefaultAttribute#resolve(ClassConstantPool)",
        "org.apache.commons.compress.harmony.unpack200.bytecode.CPClass#resolve(ClassConstantPool)",
        "org.apache.commons.compress.harmony.unpack200.bytecode.SignatureAttribute#resolve(ClassConstantPool)",
        "org.apache.commons.compress.harmony.unpack200.bytecode.CPNameAndType#resolve(ClassConstantPool)"
    ],
    "org.apache.commons.compress.harmony.unpack200.NewAttributeBands#readNextAttributeElement(StringReader)": [
        "org.apache.commons.compress.harmony.unpack200.NewAttributeBands#readNextLayoutElement(StringReader)",
        "org.apache.commons.compress.harmony.unpack200.NewAttributeBands#readBody(StringReader)",
        "org.apache.commons.compress.harmony.unpack200.NewAttributeBands#getStreamUpToMatchingBracket(StringReader)",
        "org.apache.commons.compress.harmony.unpack200.NewAttributeBands.Callable#Callable(List<LayoutElement>)"
    ],
    "org.apache.commons.compress.harmony.unpack200.bytecode.forms.ThisFieldRefForm#getPoolID()": ["org.apache.commons.compress.harmony.unpack200.SegmentConstantPool.<staticinit>()"],
    "org.apache.commons.compress.archivers.sevenz.Coders.DeflateDecoder#encode(OutputStream,Object)": [
        "org.apache.commons.compress.archivers.sevenz.Coders.DeflateDecoder.DeflateDecoderOutputStream#DeflateDecoderOutputStream(DeflaterOutputStream,Deflater)",
        "org.apache.commons.compress.archivers.sevenz.AbstractCoder.toInt(Object,int)"
    ],
    "org.apache.commons.compress.harmony.pack200.Archive.SegmentUnit#SegmentUnit(List<Pack200ClassReader>,List<PackingFile>)": ["org.apache.commons.compress.harmony.pack200.Archive.SegmentUnit.<init>()"],
    "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream#canWriteEntryData(ArchiveEntry)": [
        "org.apache.commons.compress.archivers.zip.ZipArchiveEntry#getMethod()",
        "org.apache.commons.compress.archivers.zip.ZipUtil.canHandleEntryData(ZipArchiveEntry)",
        "org.apache.commons.compress.archivers.zip.ZipMethod#getCode()",
        "org.apache.commons.compress.archivers.zip.ZipMethod.<staticinit>()"
    ],
    "org.apache.commons.compress.harmony.unpack200.bytecode.CPMethod#generateHashCode()": ["org.apache.commons.compress.harmony.unpack200.bytecode.CPUTF8#hashCode()"],
    "org.apache.commons.compress.java.util.jar.Pack200.newPacker()": [
        "org.apache.commons.compress.java.util.jar.Pack200.<staticinit>()",
        "org.apache.commons.compress.java.util.jar.Pack200.newInstance(String,String)"
    ],
    "org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorOutputStream#flushBuffer()": [
        "org.apache.commons.compress.compressors.deflate.DeflateCompressorOutputStream#write(int)",
        "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream#write(byte[],int,int)",
        "org.apache.commons.compress.archivers.zip.FileRandomAccessOutputStream#write(byte[],int,int)",
        "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream#write(int)",
        "org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream#write(int)",
        "org.apache.commons.compress.compressors.xz.XZCompressorOutputStream#write(byte[],int,int)",
        "org.apache.commons.compress.compressors.deflate.DeflateCompressorOutputStream#write(byte[],int,int)",
        "org.apache.commons.compress.archivers.zip.SeekableChannelRandomAccessOutputStream#write(byte[],int,int)",
        "org.apache.commons.compress.compressors.snappy.SnappyCompressorOutputStream#SnappyCompressorOutputStream(OutputStream,long,Parameters)",
        "org.apache.commons.compress.archivers.sevenz.AES256SHA256Decoder.AES256SHA256DecoderOutputStream#write(int)",
        "org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorOutputStream#writeLittleEndian(int,long)",
        "org.apache.commons.compress.compressors.lzma.LZMACompressorOutputStream#write(byte[],int,int)",
        "org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream#write(byte[])",
        "org.apache.commons.compress.archivers.sevenz.Coders.DeflateDecoder.DeflateDecoderOutputStream#write(byte[])",
        "org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStream.<staticinit>()",
        "org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream#write(int)",
        "org.apache.commons.compress.compressors.lz4.BlockLZ4CompressorOutputStream#write(byte[],int,int)",
        "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream#write(byte[],int,int)",
        "org.apache.commons.compress.compressors.snappy.SnappyCompressorOutputStream#write(byte[],int,int)",
        "org.apache.commons.compress.archivers.zip.ZipSplitOutputStream#write(int)",
        "org.apache.commons.compress.compressors.zstandard.ZstdCompressorOutputStream#write(int)",
        "org.apache.commons.compress.archivers.zip.ZipSplitOutputStream#write(byte[])",
        "org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorOutputStream#writeCrc()",
        "org.apache.commons.compress.archivers.sevenz.Coders.DeflateDecoder.DeflateDecoderOutputStream#write(byte[],int,int)",
        "org.apache.commons.compress.utils.FixedLengthBlockOutputStream#write(byte[],int,int)",
        "org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorOutputStream#write(byte[],int,int)",
        "org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorOutputStream#write(int)",
        "org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream#write(byte[],int,int)",
        "org.apache.commons.compress.compressors.lzma.LZMACompressorOutputStream#write(int)",
        "org.apache.commons.compress.archivers.zip.ZipSplitOutputStream#write(byte[],int,int)",
        "org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorOutputStream#write(int)",
        "org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream#write(byte[])",
        "org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream#write(byte[],int,int)",
        "org.apache.commons.compress.archivers.ArchiveOutputStream#write(int)",
        "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.OutputStreamWrapper#write(byte[])",
        "org.apache.commons.compress.compressors.snappy.SnappyCompressorOutputStream#write(int)",
        "org.apache.commons.compress.archivers.sevenz.Coders.DeflateDecoder.DeflateDecoderOutputStream#write(int)",
        "org.apache.commons.compress.compressors.lz4.BlockLZ4CompressorOutputStream#write(int)",
        "org.apache.commons.compress.archivers.ar.ArArchiveOutputStream#write(byte[],int,int)",
        "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream#write(byte[],int,int)",
        "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.OutputStreamWrapper#write(byte[],int,int)",
        "org.apache.commons.compress.compressors.zstandard.ZstdCompressorOutputStream#write(byte[],int,int)",
        "org.apache.commons.compress.archivers.sevenz.AES256SHA256Decoder.AES256SHA256DecoderOutputStream#write(byte[],int,int)",
        "org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorOutputStream#write(byte[],int,int)",
        "org.apache.commons.compress.compressors.xz.XZCompressorOutputStream#write(int)",
        "org.apache.commons.compress.utils.FixedLengthBlockOutputStream#write(int)",
        "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.OutputStreamWrapper#write(int)",
        "org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream#write(byte[],int,int)",
        "org.apache.commons.compress.archivers.zip.RandomAccessOutputStream#write(int)"
    ],
    "org.apache.commons.compress.harmony.unpack200.Archive#setVerbose(boolean)": ["org.apache.commons.compress.harmony.unpack200.Segment.<staticinit>()"],
    "org.apache.commons.compress.archivers.zip.ZipSplitOutputStream#close()": ["org.apache.commons.compress.archivers.zip.ZipSplitOutputStream#finish()"],
    "org.apache.commons.compress.archivers.zip.ZipArchiveEntry#ZipArchiveEntry(Function<ZipShort, ZipExtraField>,File,String)": [
        "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.toEntryName(File,String)",
        "org.apache.commons.compress.archivers.zip.ZipArchiveEntry#setTime(FileTime)",
        "org.apache.commons.compress.archivers.zip.ZipArchiveEntry#setSize(long)",
        "org.apache.commons.compress.archivers.zip.ZipArchiveEntry#ZipArchiveEntry(Function<ZipShort, ZipExtraField>,String)"
    ],
    "org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream#readNewEntry(boolean)": [
        "org.apache.commons.compress.archivers.cpio.CpioArchiveEntry#setMode(long)",
        "org.apache.commons.compress.utils.ArchiveUtils.sanitize(String)",
        "org.apache.commons.compress.archivers.cpio.CpioArchiveEntry#getHeaderPadCount(long)",
        "org.apache.commons.compress.archivers.dump.DumpArchiveInputStream#getBytesRead()",
        "org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream#readAsciiLong(int,int)",
        "org.apache.commons.compress.archivers.cpio.CpioArchiveEntry#setTime(long)",
        "org.apache.commons.compress.archivers.cpio.CpioArchiveEntry#setDeviceMaj(long)",
        "org.apache.commons.compress.archivers.cpio.CpioArchiveEntry#setSize(long)",
        "org.apache.commons.compress.archivers.cpio.CpioArchiveEntry#setGID(long)",
        "org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream#skip(int)",
        "org.apache.commons.compress.archivers.cpio.CpioArchiveEntry#setNumberOfLinks(long)",
        "org.apache.commons.compress.archivers.cpio.CpioArchiveEntry#setName(String)",
        "org.apache.commons.compress.archivers.cpio.CpioArchiveEntry#getSize()",
        "org.apache.commons.compress.archivers.cpio.CpioArchiveEntry#setInode(long)",
        "org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream#readCString(int)",
        "org.apache.commons.compress.archivers.cpio.CpioArchiveEntry#setDeviceMin(long)",
        "org.apache.commons.compress.archivers.cpio.CpioArchiveEntry#setUID(long)",
        "org.apache.commons.compress.archivers.cpio.CpioConstants.<staticinit>()",
        "org.apache.commons.compress.archivers.cpio.CpioArchiveEntry#CpioArchiveEntry(short)",
        "org.apache.commons.compress.archivers.cpio.CpioUtil.fileType(long)",
        "org.apache.commons.compress.archivers.cpio.CpioArchiveEntry#setRemoteDeviceMin(long)",
        "org.apache.commons.compress.archivers.ArchiveInputStream#getBytesRead()",
        "org.apache.commons.compress.archivers.cpio.CpioArchiveEntry#setChksum(long)",
        "org.apache.commons.compress.archivers.cpio.CpioArchiveEntry#setRemoteDeviceMaj(long)"
    ],
    "org.apache.commons.compress.compressors.zstandard.ZstdUtils.<staticinit>()": [
        "org.apache.commons.compress.compressors.zstandard.ZstdUtils.CachedAvailability.<staticinit>()",
        "org.apache.commons.compress.utils.OsgiUtils.isRunningInOsgiEnvironment()",
        "org.apache.commons.compress.compressors.zstandard.ZstdUtils.setCacheZstdAvailablity(boolean)"
    ],
    "org.apache.commons.compress.harmony.unpack200.bytecode.forms.ByteForm#setByteCodeOperands(ByteCode,OperandManager,int)": [
        "org.apache.commons.compress.harmony.unpack200.bytecode.OperandManager#nextByte()",
        "org.apache.commons.compress.harmony.unpack200.bytecode.ByteCode#setOperandByte(int,int)"
    ],
    "org.apache.commons.compress.archivers.sevenz.LZMADecoder#getOptions(Object)": ["org.apache.commons.compress.archivers.sevenz.LZMADecoder#numberOptionOrDefault(Object)"],
    "org.apache.commons.compress.compressors.lz4.BlockLZ4CompressorInputStream#readSizes()": [
        "org.apache.commons.compress.compressors.lz4.BlockLZ4CompressorInputStream.State.<staticinit>()",
        "org.apache.commons.compress.compressors.lz77support.AbstractLZ77CompressorInputStream#startLiteral(long)",
        "org.apache.commons.compress.compressors.lz4.BlockLZ4CompressorInputStream#readSizeBytes()",
        "org.apache.commons.compress.compressors.lz4.BlockLZ4CompressorInputStream.<staticinit>()",
        "org.apache.commons.compress.compressors.lz77support.AbstractLZ77CompressorInputStream#readOneByte()"
    ],
    "org.apache.commons.compress.archivers.cpio.CpioArchiveEntry#getHeaderPadCount(Charset)": [
        "org.apache.commons.compress.archivers.cpio.CpioArchiveEntry#getHeaderPadCount(Charset)",
        "org.apache.commons.compress.archivers.cpio.CpioArchiveEntry#getHeaderPadCount(long)"
    ],
    "org.apache.commons.compress.harmony.unpack200.ClassBands#getClassFlags()": [
        "org.apache.commons.compress.harmony.unpack200.AttributeLayout.<staticinit>()",
        "org.apache.commons.compress.harmony.unpack200.AttributeLayout#isDefaultLayout()",
        "org.apache.commons.compress.harmony.unpack200.AttributeLayoutMap#getAttributeLayout(int,int)"
    ],
    "org.apache.commons.compress.archivers.zip.X000A_NTFS#getModifyTime()": ["org.apache.commons.compress.archivers.zip.ZipEightByteInteger.<staticinit>()"],
    "org.apache.commons.compress.utils.ByteUtils.fromLittleEndian(InputStream,int)": [
        "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream#read()",
        "org.apache.commons.compress.archivers.sevenz.AES256SHA256Decoder.AES256SHA256DecoderInputStream#read()",
        "org.apache.commons.compress.compressors.xz.XZCompressorInputStream#read()",
        "org.apache.commons.compress.utils.ByteUtils.checkReadLength(int)",
        "org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorInputStream#read()",
        "org.apache.commons.compress.compressors.lz77support.AbstractLZ77CompressorInputStream#read()",
        "org.apache.commons.compress.compressors.deflate.DeflateCompressorInputStream#read()",
        "org.apache.commons.compress.archivers.zip.ExplodingInputStream#read()",
        "org.apache.commons.compress.compressors.lzma.LZMACompressorInputStream#read()",
        "org.apache.commons.compress.compressors.zstandard.ZstdCompressorInputStream#read()",
        "org.apache.commons.compress.archivers.sevenz.BoundedSeekableByteChannelInputStream#read()",
        "org.apache.commons.compress.utils.BoundedArchiveInputStream#read()",
        "org.apache.commons.compress.compressors.brotli.BrotliCompressorInputStream#read()",
        "org.apache.commons.compress.archivers.tar.TarArchiveSparseZeroInputStream#read()",
        "org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream#read()",
        "org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStream#read()",
        "org.apache.commons.compress.compressors.deflate64.Deflate64CompressorInputStream#read()",
        "org.apache.commons.compress.compressors.lzw.LZWInputStream#read()",
        "org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream#read()"
    ],
    "org.apache.commons.compress.archivers.zip.ParallelScatterZipCreator#createDeferred(ScatterGatherBackingStoreSupplier)": [
        "org.apache.commons.compress.archivers.zip.ScatterZipOutputStream#ScatterZipOutputStream(ScatterGatherBackingStore,StreamCompressor)",
        "org.apache.commons.compress.archivers.zip.DefaultBackingStoreSupplier#get()",
        "org.apache.commons.compress.archivers.zip.StreamCompressor.create(int,ScatterGatherBackingStore)"
    ],
    "org.apache.commons.compress.harmony.pack200.BandSet#encodeFlags(String,long[],BHSDCodec,BHSDCodec,boolean)": ["org.apache.commons.compress.harmony.pack200.BandSet#encodeBandInt(String,int[],BHSDCodec)"],
    "org.apache.commons.compress.compressors.gzip.GzipUtils.getUncompressedFileName(String)": [
        "org.apache.commons.compress.compressors.FileNameUtil#getUncompressedFileName(String)",
        "org.apache.commons.compress.compressors.gzip.GzipUtils.<staticinit>()"
    ],
    "org.apache.commons.compress.compressors.xz.XZUtils.isXZCompressionAvailable()": [
        "org.apache.commons.compress.compressors.xz.XZUtils.internalIsXZCompressionAvailable()",
        "org.apache.commons.compress.compressors.xz.XZUtils.CachedAvailability.<staticinit>()",
        "org.apache.commons.compress.compressors.xz.XZUtils.<staticinit>()"
    ],
    "org.apache.commons.compress.archivers.sevenz.SevenZFile#getStatisticsForCurrentEntry()": ["org.apache.commons.compress.archivers.sevenz.SevenZFile#getStatisticsForCurrentEntry()$InputStreamStatistics$1.<init>()"],
    "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.parse(byte[])": [
        "org.apache.commons.compress.archivers.dump.DumpArchiveEntry#DumpArchiveEntry()",
        "org.apache.commons.compress.archivers.dump.DumpArchiveEntry#setType(TYPE)",
        "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.TYPE.find(int)",
        "org.apache.commons.compress.archivers.dump.DumpArchiveEntry#setLastModifiedDate(Date)",
        "org.apache.commons.compress.archivers.dump.DumpArchiveEntry#setMode(int)",
        "org.apache.commons.compress.archivers.dump.DumpArchiveUtil.convert32(byte[],int)",
        "org.apache.commons.compress.archivers.dump.DumpArchiveUtil.convert64(byte[],int)",
        "org.apache.commons.compress.archivers.dump.DumpArchiveEntry#setAccessTime(Date)",
        "org.apache.commons.compress.archivers.dump.DumpArchiveConstants.SEGMENT_TYPE.find(int)",
        "org.apache.commons.compress.archivers.dump.DumpArchiveEntry#setSize(long)",
        "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.TapeSegmentHeader#getVolume()",
        "org.apache.commons.compress.archivers.dump.DumpArchiveUtil.convert16(byte[],int)",
        "org.apache.commons.compress.archivers.dump.DumpArchiveEntry#setGroupId(int)",
        "org.apache.commons.compress.archivers.dump.DumpArchiveEntry#setUserId(int)"
    ],
    "org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField#getHeaderId()": ["org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField.<staticinit>()"],
    "org.apache.commons.compress.harmony.unpack200.bytecode.ByteCode#applyByteCodeTargetFixup(CodeAttribute)": [
        "org.apache.commons.compress.harmony.unpack200.bytecode.forms.SwitchForm#fixUpByteCodeTargets(ByteCode,CodeAttribute)",
        "org.apache.commons.compress.harmony.unpack200.bytecode.forms.LabelForm#fixUpByteCodeTargets(ByteCode,CodeAttribute)",
        "org.apache.commons.compress.harmony.unpack200.bytecode.forms.ByteCodeForm#fixUpByteCodeTargets(ByteCode,CodeAttribute)",
        "org.apache.commons.compress.harmony.unpack200.bytecode.ByteCode#getByteCodeForm()"
    ],
    "org.apache.commons.compress.harmony.pack200.ClassBands#currentClassReferencesInnerClass(CPClass)": [
        "org.apache.commons.compress.harmony.pack200.ClassBands#isInnerClassOf(String,CPClass)",
        "org.apache.commons.compress.harmony.pack200.CPClass#toString()"
    ],
    "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream#preClose()": [
        "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream#write(byte[],int,int)",
        "org.apache.commons.compress.utils.ByteUtils.<staticinit>()"
    ],
    "org.apache.commons.compress.compressors.pack200.AbstractStreamBridge#stop()": [
        "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream#close()",
        "org.apache.commons.compress.archivers.sevenz.BoundedSeekableByteChannelInputStream#close()",
        "org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStream#close()",
        "org.apache.commons.compress.compressors.brotli.BrotliCompressorInputStream#close()",
        "org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream#close()",
        "org.apache.commons.compress.compressors.deflate64.Deflate64CompressorInputStream#close()",
        "org.apache.commons.compress.compressors.deflate.DeflateCompressorInputStream#close()",
        "org.apache.commons.compress.archivers.sevenz.AES256SHA256Decoder.AES256SHA256DecoderInputStream#close()",
        "org.apache.commons.compress.compressors.xz.XZCompressorInputStream#close()",
        "org.apache.commons.compress.archivers.zip.ExplodingInputStream#close()",
        "org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream#close()",
        "org.apache.commons.compress.compressors.lzw.LZWInputStream#close()",
        "org.apache.commons.compress.compressors.lzma.LZMACompressorInputStream#close()",
        "org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorInputStream#close()",
        "org.apache.commons.compress.compressors.zstandard.ZstdCompressorInputStream#close()",
        "org.apache.commons.compress.compressors.lz77support.AbstractLZ77CompressorInputStream#close()"
    ],
    "org.apache.commons.compress.compressors.lz77support.LZ77Compressor#prefill(byte[])": [
        "org.apache.commons.compress.compressors.lz77support.LZ77Compressor#insertString(int)",
        "org.apache.commons.compress.compressors.lz77support.LZ77Compressor.<staticinit>()",
        "org.apache.commons.compress.compressors.lz77support.LZ77Compressor#initialize()",
        "org.apache.commons.compress.compressors.lz77support.Parameters#getWindowSize()"
    ],
    "org.apache.commons.compress.harmony.unpack200.BandSet#parseCPInterfaceMethodRefReferences(String,InputStream,BHSDCodec,int)": [
        "org.apache.commons.compress.harmony.unpack200.BandSet#decodeBandInt(String,InputStream,BHSDCodec,int)",
        "org.apache.commons.compress.harmony.unpack200.Segment#getCpBands()",
        "org.apache.commons.compress.harmony.unpack200.CpBands#cpIMethodValue(int)"
    ],
    "org.apache.commons.compress.compressors.CompressorStreamFactory#CompressorStreamFactory(boolean)": ["org.apache.commons.compress.compressors.CompressorStreamFactory#CompressorStreamFactory(boolean,int)"],
    "org.apache.commons.compress.archivers.zip.ZipArchiveEntry#ZipArchiveEntry(Function<ZipShort, ZipExtraField>,Path,String,LinkOption[]...)": [
        "org.apache.commons.compress.archivers.zip.ZipArchiveEntry#setAttributes(Path,LinkOption[]...)",
        "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.toEntryName(Path,String,LinkOption[]...)",
        "org.apache.commons.compress.archivers.zip.ZipArchiveEntry#ZipArchiveEntry(Function<ZipShort, ZipExtraField>,String)"
    ],
    "org.apache.commons.compress.archivers.zip.ZipFile#close()": [
        "org.apache.commons.compress.utils.SeekableInMemoryByteChannel#close()",
        "org.apache.commons.compress.utils.MultiReadOnlySeekableByteChannel#close()"
    ],
    "org.apache.commons.compress.archivers.zip.PKWareExtraHeader#getLocalFileDataLength()": ["org.apache.commons.compress.archivers.zip.ZipShort#ZipShort(int)"],
    "org.apache.commons.compress.compressors.bzip2.BlockSort#blockSort(Data,int)": [
        "org.apache.commons.compress.compressors.bzip2.BlockSort#mainSort(Data,int)",
        "org.apache.commons.compress.compressors.bzip2.BlockSort#fallbackSort(Data,int)",
        "org.apache.commons.compress.compressors.bzip2.BlockSort.<staticinit>()"
    ],
    "org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream#readBinaryLong(int,boolean)": [
        "org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream#readRange(int)",
        "org.apache.commons.compress.archivers.cpio.CpioUtil.byteArray2long(byte[],boolean)"
    ],
    "org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream#mark(int)": [
        "org.apache.commons.compress.compressors.zstandard.ZstdCompressorInputStream#mark(int)",
        "org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream#getInputStream()",
        "org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream#mark(int)",
        "org.apache.commons.compress.compressors.brotli.BrotliCompressorInputStream#mark(int)"
    ],
    "org.apache.commons.compress.harmony.unpack200.bytecode.SignatureAttribute#resolve(ClassConstantPool)": [
        "org.apache.commons.compress.harmony.unpack200.bytecode.EnclosingMethodAttribute#resolve(ClassConstantPool)",
        "org.apache.commons.compress.harmony.unpack200.bytecode.ClassFileEntry#resolve(ClassConstantPool)",
        "org.apache.commons.compress.harmony.unpack200.bytecode.CPString#resolve(ClassConstantPool)",
        "org.apache.commons.compress.harmony.unpack200.bytecode.SourceFileAttribute#resolve(ClassConstantPool)",
        "org.apache.commons.compress.harmony.unpack200.bytecode.CPFieldRef#resolve(ClassConstantPool)",
        "org.apache.commons.compress.harmony.unpack200.bytecode.LocalVariableTableAttribute#resolve(ClassConstantPool)",
        "org.apache.commons.compress.harmony.unpack200.bytecode.LineNumberTableAttribute#resolve(ClassConstantPool)",
        "org.apache.commons.compress.harmony.unpack200.bytecode.RuntimeVisibleorInvisibleParameterAnnotationsAttribute#resolve(ClassConstantPool)",
        "org.apache.commons.compress.harmony.unpack200.bytecode.NewAttribute#resolve(ClassConstantPool)",
        "org.apache.commons.compress.harmony.unpack200.bytecode.LocalVariableTypeTableAttribute#resolve(ClassConstantPool)",
        "org.apache.commons.compress.harmony.unpack200.bytecode.CPRef#resolve(ClassConstantPool)",
        "org.apache.commons.compress.harmony.unpack200.bytecode.ConstantValueAttribute#resolve(ClassConstantPool)",
        "org.apache.commons.compress.harmony.unpack200.bytecode.ByteCode#resolve(ClassConstantPool)",
        "org.apache.commons.compress.harmony.unpack200.bytecode.RuntimeVisibleorInvisibleAnnotationsAttribute#resolve(ClassConstantPool)",
        "org.apache.commons.compress.harmony.unpack200.bytecode.InnerClassesAttribute#resolve(ClassConstantPool)",
        "org.apache.commons.compress.harmony.unpack200.bytecode.CPMember#resolve(ClassConstantPool)",
        "org.apache.commons.compress.harmony.unpack200.bytecode.Attribute#resolve(ClassConstantPool)",
        "org.apache.commons.compress.harmony.unpack200.bytecode.ExceptionsAttribute#resolve(ClassConstantPool)",
        "org.apache.commons.compress.harmony.unpack200.bytecode.CodeAttribute#resolve(ClassConstantPool)",
        "org.apache.commons.compress.harmony.unpack200.bytecode.AnnotationDefaultAttribute#resolve(ClassConstantPool)",
        "org.apache.commons.compress.harmony.unpack200.bytecode.ClassConstantPool#indexOf(ClassFileEntry)",
        "org.apache.commons.compress.harmony.unpack200.bytecode.CPClass#resolve(ClassConstantPool)",
        "org.apache.commons.compress.harmony.unpack200.bytecode.SignatureAttribute#resolve(ClassConstantPool)",
        "org.apache.commons.compress.harmony.unpack200.bytecode.CPNameAndType#resolve(ClassConstantPool)"
    ],
    "org.apache.commons.compress.harmony.unpack200.bytecode.BCIRenumberedAttribute#renumber(List<Integer>)": [
        "org.apache.commons.compress.harmony.unpack200.bytecode.LineNumberTableAttribute#getStartPCs()",
        "org.apache.commons.compress.harmony.unpack200.bytecode.LocalVariableTableAttribute#getStartPCs()",
        "org.apache.commons.compress.harmony.unpack200.bytecode.NewAttribute#getStartPCs()",
        "org.apache.commons.compress.harmony.unpack200.bytecode.CodeAttribute#getStartPCs()",
        "org.apache.commons.compress.harmony.unpack200.bytecode.LocalVariableTypeTableAttribute#getStartPCs()"
    ],
    "org.apache.commons.compress.archivers.zip.PKWareExtraHeader#getCentralDirectoryData()": [
        "org.apache.commons.compress.archivers.zip.ZipUtil.copy(byte[])",
        "org.apache.commons.compress.archivers.zip.PKWareExtraHeader#getLocalFileDataData()"
    ],
    "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream#sendMTFValues5(int,int)": [
        "org.apache.commons.compress.archivers.sevenz.AES256SHA256Decoder.AES256SHA256DecoderOutputStream#write(int)",
        "org.apache.commons.compress.compressors.snappy.SnappyCompressorOutputStream#write(int)",
        "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream#bsW(int,int)",
        "org.apache.commons.compress.archivers.sevenz.Coders.DeflateDecoder.DeflateDecoderOutputStream#write(int)",
        "org.apache.commons.compress.compressors.lz4.BlockLZ4CompressorOutputStream#write(int)",
        "org.apache.commons.compress.compressors.deflate.DeflateCompressorOutputStream#write(int)",
        "org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorOutputStream#write(int)",
        "org.apache.commons.compress.compressors.lzma.LZMACompressorOutputStream#write(int)",
        "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream#write(int)",
        "org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream#write(int)",
        "org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorOutputStream#write(int)",
        "org.apache.commons.compress.compressors.xz.XZCompressorOutputStream#write(int)",
        "org.apache.commons.compress.utils.FixedLengthBlockOutputStream#write(int)",
        "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.OutputStreamWrapper#write(int)",
        "org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream#write(int)",
        "org.apache.commons.compress.archivers.ArchiveOutputStream#write(int)",
        "org.apache.commons.compress.archivers.zip.ZipSplitOutputStream#write(int)",
        "org.apache.commons.compress.compressors.zstandard.ZstdCompressorOutputStream#write(int)",
        "org.apache.commons.compress.archivers.zip.RandomAccessOutputStream#write(int)"
    ],
    "org.apache.commons.compress.archivers.sevenz.SevenZFile#SevenZFile(File)": [
        "org.apache.commons.compress.archivers.sevenz.SevenZFileOptions.<staticinit>()",
        "org.apache.commons.compress.archivers.sevenz.SevenZFile#SevenZFile(File,SevenZFileOptions)"
    ],
    "org.apache.commons.compress.archivers.zip.ZipSplitReadOnlySeekableByteChannel#ZipSplitReadOnlySeekableByteChannel(List<SeekableByteChannel>)": [
        "org.apache.commons.compress.utils.MultiReadOnlySeekableByteChannel#MultiReadOnlySeekableByteChannel(List<SeekableByteChannel>)",
        "org.apache.commons.compress.archivers.zip.ZipSplitReadOnlySeekableByteChannel.<init>()",
        "org.apache.commons.compress.archivers.zip.ZipSplitReadOnlySeekableByteChannel#assertSplitSignature(List<SeekableByteChannel>)"
    ],
    "org.apache.commons.compress.archivers.tar.TarFile#TarFile(File,boolean)": [
        "org.apache.commons.compress.archivers.tar.TarFile#TarFile(File,boolean)",
        "org.apache.commons.compress.archivers.tar.TarArchiveEntry.<staticinit>()"
    ],
    "org.apache.commons.compress.harmony.pack200.PackingUtils.getPackingFileListFromJar(JarInputStream,boolean)": [
        "org.apache.commons.compress.harmony.pack200.PackingUtils.reorderPackingFiles(List<PackingFile>)",
        "org.apache.commons.compress.harmony.pack200.PackingUtils.readJarEntry(JarEntry,InputStream)",
        "org.apache.commons.compress.harmony.pack200.Archive.PackingFile#PackingFile(byte[],JarEntry)",
        "org.apache.commons.compress.harmony.pack200.Archive.PackingFile#PackingFile(String,byte[],long)"
    ],
    "org.apache.commons.compress.archivers.zip.StreamCompressor.OutputStreamCompressor#writeOut(byte[],int,int)": [
        "org.apache.commons.compress.archivers.sevenz.Coders.DeflateDecoder.DeflateDecoderOutputStream#write(byte[],int,int)",
        "org.apache.commons.compress.utils.FixedLengthBlockOutputStream#write(byte[],int,int)",
        "org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorOutputStream#write(byte[],int,int)",
        "org.apache.commons.compress.archivers.ar.ArArchiveOutputStream#write(byte[],int,int)",
        "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream#write(byte[],int,int)",
        "org.apache.commons.compress.compressors.lzma.LZMACompressorOutputStream#write(byte[],int,int)",
        "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.OutputStreamWrapper#write(byte[],int,int)",
        "org.apache.commons.compress.compressors.zstandard.ZstdCompressorOutputStream#write(byte[],int,int)",
        "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream#write(byte[],int,int)",
        "org.apache.commons.compress.archivers.zip.FileRandomAccessOutputStream#write(byte[],int,int)",
        "org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream#write(byte[],int,int)",
        "org.apache.commons.compress.archivers.sevenz.AES256SHA256Decoder.AES256SHA256DecoderOutputStream#write(byte[],int,int)",
        "org.apache.commons.compress.archivers.zip.ZipSplitOutputStream#write(byte[],int,int)",
        "org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorOutputStream#write(byte[],int,int)",
        "org.apache.commons.compress.compressors.xz.XZCompressorOutputStream#write(byte[],int,int)",
        "org.apache.commons.compress.compressors.deflate.DeflateCompressorOutputStream#write(byte[],int,int)",
        "org.apache.commons.compress.archivers.zip.SeekableChannelRandomAccessOutputStream#write(byte[],int,int)",
        "org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream#write(byte[],int,int)",
        "org.apache.commons.compress.compressors.lz4.BlockLZ4CompressorOutputStream#write(byte[],int,int)",
        "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream#write(byte[],int,int)",
        "org.apache.commons.compress.compressors.snappy.SnappyCompressorOutputStream#write(byte[],int,int)",
        "org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream#write(byte[],int,int)"
    ],
    "org.apache.commons.compress.archivers.zip.ZipSplitReadOnlySeekableByteChannel.ZipSplitSegmentComparator#compare(Path,Path)": ["org.apache.commons.compress.utils.FileNameUtils.getExtension(Path)"],
    "org.apache.commons.compress.archivers.zip.StreamCompressor#StreamCompressor(Deflater)": ["org.apache.commons.compress.archivers.zip.StreamCompressor.<init>()"],
    "org.apache.commons.compress.harmony.pack200.Segment.SegmentAnnotationVisitor#visitArray(String)": ["org.apache.commons.compress.harmony.pack200.Segment.ArrayVisitor#ArrayVisitor(List<Integer>,List<String>,List<String>,List<Object>)"],
    "org.apache.commons.compress.archivers.dump.DumpArchiveEntry#isFile()": ["org.apache.commons.compress.archivers.dump.DumpArchiveEntry.TYPE.<staticinit>()"],
    "org.apache.commons.compress.harmony.pack200.PackingOptions#addOrUpdateAttributeActions(List<Attribute>,Map<String, String>,int)": [
        "org.apache.commons.compress.harmony.pack200.PackingOptions.<staticinit>()",
        "org.apache.commons.compress.harmony.pack200.NewAttribute#NewAttribute(String,String,int)",
        "org.apache.commons.compress.harmony.pack200.NewAttribute.ErrorAttribute#ErrorAttribute(String,int)",
        "org.apache.commons.compress.harmony.pack200.NewAttribute#addContext(int)",
        "org.apache.commons.compress.harmony.pack200.NewAttribute.PassAttribute#PassAttribute(String,int)",
        "org.apache.commons.compress.harmony.pack200.NewAttribute.StripAttribute#StripAttribute(String,int)"
    ],
    "org.apache.commons.compress.archivers.zip.UnparseableExtraFieldData#getLocalFileDataLength()": ["org.apache.commons.compress.archivers.zip.ZipShort#ZipShort(int)"],
    "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.ExtraFieldParsingMode#fill(ZipExtraField,byte[],int,int,boolean)": ["org.apache.commons.compress.archivers.zip.ExtraFieldUtils.fillExtraField(ZipExtraField,byte[],int,int,boolean)"],
    "org.apache.commons.compress.harmony.pack200.CpBands#getCPField(CPClass,String,String)": [
        "org.apache.commons.compress.harmony.pack200.CpBands#getCPNameAndType(String,String)",
        "org.apache.commons.compress.harmony.pack200.CPClass#toString()",
        "org.apache.commons.compress.harmony.pack200.CPMethodOrField#CPMethodOrField(CPClass,CPNameAndType)"
    ],
    "org.apache.commons.compress.harmony.unpack200.bytecode.forms.TableSwitchForm#setByteCodeOperands(ByteCode,OperandManager,int)": [
        "org.apache.commons.compress.harmony.unpack200.bytecode.OperandManager#nextCaseValues()",
        "org.apache.commons.compress.harmony.unpack200.bytecode.ByteCode#setByteCodeTargets(int[])",
        "org.apache.commons.compress.harmony.unpack200.bytecode.forms.VariableInstructionForm#setRewrite4Bytes(int,int,int[])",
        "org.apache.commons.compress.harmony.unpack200.bytecode.OperandManager#nextCaseCount()",
        "org.apache.commons.compress.harmony.unpack200.bytecode.ByteCode#getOpcode()",
        "org.apache.commons.compress.harmony.unpack200.bytecode.OperandManager#nextLabel()",
        "org.apache.commons.compress.harmony.unpack200.bytecode.ByteCode#setRewrite(int[])"
    ],
    "org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream#Pack200CompressorInputStream(InputStream)": [
        "org.apache.commons.compress.compressors.pack200.Pack200Strategy.<staticinit>()",
        "org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream#Pack200CompressorInputStream(InputStream,Pack200Strategy)"
    ],
    "org.apache.commons.compress.harmony.unpack200.bytecode.forms.DoubleForm#getOffset(OperandManager)": ["org.apache.commons.compress.harmony.unpack200.bytecode.OperandManager#nextDoubleRef()"],
    "org.apache.commons.compress.harmony.unpack200.bytecode.forms.LabelForm#setByteCodeOperands(ByteCode,OperandManager,int)": [
        "org.apache.commons.compress.harmony.unpack200.bytecode.ByteCode#setByteCodeTargets(int[])",
        "org.apache.commons.compress.harmony.unpack200.bytecode.OperandManager#nextLabel()"
    ],
    "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream#read0()": [
        "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream#setupRandPartB()",
        "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream#setupNoRandPartC()",
        "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream#setupRandPartC()",
        "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.<staticinit>()",
        "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream#setupBlock()",
        "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream#setupNoRandPartB()"
    ],
    "org.apache.commons.compress.archivers.zip.StreamCompressor#deflate()": ["org.apache.commons.compress.archivers.zip.StreamCompressor#writeCounted(byte[],int,int)"],
    "org.apache.commons.compress.harmony.pack200.NewAttributeBands.Callable#Callable(List<LayoutElement>)": ["org.apache.commons.compress.harmony.pack200.NewAttributeBands.Callable.<init>()"],
    "org.apache.commons.compress.archivers.zip.ZipArchiveEntry#getLastModifiedDate()": ["org.apache.commons.compress.archivers.zip.ZipArchiveEntry#getTime()"],
    "org.apache.commons.compress.archivers.ar.ArArchiveInputStream#asInt(byte[],int,int)": ["org.apache.commons.compress.archivers.ar.ArArchiveInputStream#asInt(byte[],int,int,int,boolean)"],
    "org.apache.commons.compress.archivers.ar.ArArchiveEntry#ArArchiveEntry(String,long,int,int,int,long)": ["org.apache.commons.compress.archivers.ar.ArArchiveEntry.<init>()"],
    "org.apache.commons.compress.harmony.unpack200.AttrDefinitionBands#AttrDefinitionBands(Segment)": [
        "org.apache.commons.compress.harmony.unpack200.BandSet#BandSet(Segment)",
        "org.apache.commons.compress.harmony.unpack200.CpBands#getCpUTF8()",
        "org.apache.commons.compress.harmony.unpack200.Segment#getCpBands()",
        "org.apache.commons.compress.harmony.unpack200.AttrDefinitionBands.<init>()"
    ],
    "org.apache.commons.compress.archivers.zip.InflaterInputStreamWithStatistics#InflaterInputStreamWithStatistics(InputStream,Inflater,int)": ["org.apache.commons.compress.archivers.zip.InflaterInputStreamWithStatistics.<init>()"],
    "org.apache.commons.compress.compressors.CompressorStreamFactory.getSnappyRaw()": ["org.apache.commons.compress.compressors.CompressorStreamFactory.<staticinit>()"],
    "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.Data.<init>()": ["org.apache.commons.compress.compressors.bzip2.BZip2Constants.<staticinit>()"],
    "org.apache.commons.compress.archivers.zip.ZipFile#ZipFile(String)": [
        "org.apache.commons.compress.archivers.zip.ZipFile.<staticinit>()",
        "org.apache.commons.compress.archivers.zip.ZipFile#ZipFile(File,String)"
    ],
    "org.apache.commons.compress.archivers.zip.ZipFile#ZipFile(File,String)": ["org.apache.commons.compress.archivers.zip.ZipFile#ZipFile(File,String,boolean)"],
    "org.apache.commons.compress.archivers.zip.ZipFile#ZipFile(SeekableByteChannel,String,Charset,boolean,boolean,boolean)": [
        "org.apache.commons.compress.archivers.zip.ZipEncodingHelper.getZipEncoding(Charset)",
        "org.apache.commons.compress.archivers.zip.ZipFile#fillNameMap()",
        "org.apache.commons.compress.archivers.zip.ZipFile.Builder.<staticinit>()",
        "org.apache.commons.compress.archivers.zip.ZipFile#resolveLocalFileHeaderData(Map<ZipArchiveEntry, NameAndComment>)",
        "org.apache.commons.compress.archivers.zip.ZipFile.<init>()",
        "org.apache.commons.compress.archivers.zip.ZipFile#populateFromCentralDirectory()"
    ],
    "org.apache.commons.compress.harmony.unpack200.bytecode.CPUTF8#hashCode()": ["org.apache.commons.compress.harmony.unpack200.bytecode.CPUTF8#generateHashCode()"],
    "org.apache.commons.compress.harmony.unpack200.MetadataBandGroup.setRipaAttributeName(CPUTF8)": ["org.apache.commons.compress.harmony.unpack200.MetadataBandGroup.<staticinit>()"],
    "org.apache.commons.compress.harmony.unpack200.bytecode.ExceptionsAttribute#getNestedClassFileEntries()": ["org.apache.commons.compress.harmony.unpack200.bytecode.Attribute#getAttributeName()"],
    "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream#putArchiveEntry(TarArchiveEntry)": [
        "org.apache.commons.compress.archivers.tar.TarArchiveEntry#setSize(long)",
        "org.apache.commons.compress.archivers.tar.TarUtils$ZipEncoding$1#canEncode(String)",
        "org.apache.commons.compress.archivers.tar.TarArchiveEntry#getExtraPaxHeaders()",
        "org.apache.commons.compress.archivers.tar.TarArchiveEntry#isSymbolicLink()",
        "org.apache.commons.compress.archivers.tar.TarArchiveEntry#writeEntryHeader(byte[],ZipEncoding,boolean)",
        "org.apache.commons.compress.archivers.zip.NioZipEncoding#canEncode(String)",
        "org.apache.commons.compress.archivers.tar.TarArchiveEntry#getLinkName()",
        "org.apache.commons.compress.archivers.tar.TarArchiveEntry#isGlobalPaxHeader()",
        "org.apache.commons.compress.archivers.tar.TarArchiveEntry#getName()",
        "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.<staticinit>()",
        "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream#addPaxHeadersForBigNumbers(Map<String, String>,TarArchiveEntry)",
        "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream#writeRecord(byte[])",
        "org.apache.commons.compress.archivers.tar.TarConstants.<staticinit>()",
        "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream#handleLongName(TarArchiveEntry,String,Map<String, String>,String,byte,String)",
        "org.apache.commons.compress.archivers.tar.TarArchiveEntry#isDirectory()",
        "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream#writePaxHeaders(TarArchiveEntry,String,Map<String, String>)",
        "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream#encodeExtendedPaxHeadersContents(Map<String, String>)",
        "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream#failForBigNumbers(TarArchiveEntry)",
        "org.apache.commons.compress.archivers.tar.TarArchiveEntry#getSize()",
        "org.apache.commons.compress.archivers.tar.TarArchiveEntry#isLink()",
        "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream#closeArchiveEntry()"
    ],
    "org.apache.commons.compress.archivers.tar.TarArchiveEntry#getLastModifiedDate()": ["org.apache.commons.compress.archivers.tar.TarArchiveEntry#getModTime()"],
    "org.apache.commons.compress.harmony.pack200.BcBands#visitIntInsn(int,int)": [
        "org.apache.commons.compress.harmony.pack200.BcBands#updateRenumbering()",
        "org.apache.commons.compress.harmony.pack200.IntList#add(int)"
    ],
    "org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp#setAccessFileTime(FileTime)": [
        "org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp#setAccessTime(ZipLong)",
        "org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp.fileTimeToZipLong(FileTime)"
    ],
    "org.apache.commons.compress.archivers.zip.ZipSplitReadOnlySeekableByteChannel.forFiles(File,Iterable<File>)": ["org.apache.commons.compress.archivers.zip.ZipSplitReadOnlySeekableByteChannel.forPaths(Path,Iterable<Path>)"],
    "org.apache.commons.compress.harmony.pack200.Segment#visitInnerClass(String,String,String,int)": ["org.apache.commons.compress.harmony.pack200.IcBands#addInnerClass(String,String,String,int)"],
    "org.apache.commons.compress.archivers.Lister#listZipUsingZipFile(Path)": [
        "org.apache.commons.compress.archivers.zip.ZipFile.builder()",
        "org.apache.commons.compress.archivers.zip.ZipFile#getEntries()",
        "org.apache.commons.compress.archivers.Lister#println(ArchiveEntry)",
        "org.apache.commons.compress.archivers.Lister#println(String)"
    ],
    "org.apache.commons.compress.compressors.bzip2.BZip2Utils.getCompressedFilename(String)": [
        "org.apache.commons.compress.compressors.FileNameUtil#getCompressedFileName(String)",
        "org.apache.commons.compress.compressors.bzip2.BZip2Utils.<staticinit>()"
    ],
    "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile#createArchiveEntry(File,String)": [
        "org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry#SevenZArchiveEntry()",
        "org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry#setLastModifiedDate(Date)",
        "org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry#setName(String)",
        "org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry#setDirectory(boolean)"
    ],
    "org.apache.commons.compress.harmony.pack200.Pack200PackerAdapter#pack(JarFile,OutputStream)": [
        "org.apache.commons.compress.harmony.pack200.Archive#pack()",
        "org.apache.commons.compress.harmony.pack200.Pack200Adapter#completed(double)"
    ],
    "org.apache.commons.compress.archivers.tar.TarFile#TarFile(Path,String)": [
        "org.apache.commons.compress.archivers.tar.TarFile#TarFile(SeekableByteChannel,int,int,String,boolean)",
        "org.apache.commons.compress.archivers.tar.TarConstants.<staticinit>()"
    ],
    "org.apache.commons.compress.harmony.unpack200.bytecode.forms.ByteForm#ByteForm(int,String,int[])": [
        "org.apache.commons.compress.harmony.unpack200.bytecode.forms.ByteForm.<init>()",
        "org.apache.commons.compress.harmony.unpack200.bytecode.forms.ByteCodeForm#ByteCodeForm(int,String,int[])"
    ],
    "org.apache.commons.compress.archivers.tar.TarArchiveEntry#isInvalidPrefix(byte[])": ["org.apache.commons.compress.archivers.tar.TarConstants.<staticinit>()"],
    "org.apache.commons.compress.compressors.lzma.LZMAUtils.isCompressedFilename(String)": [
        "org.apache.commons.compress.compressors.FileNameUtil#isCompressedFileName(String)",
        "org.apache.commons.compress.compressors.lzma.LZMAUtils.<staticinit>()"
    ],
    "org.apache.commons.compress.archivers.sevenz.SevenZFile#SevenZFile(SeekableByteChannel,String,char[])": [
        "org.apache.commons.compress.archivers.sevenz.SevenZFileOptions.<staticinit>()",
        "org.apache.commons.compress.archivers.sevenz.SevenZFile#SevenZFile(SeekableByteChannel,String,char[],SevenZFileOptions)"
    ],
    "org.apache.commons.compress.utils.Sets#Sets()": ["org.apache.commons.compress.utils.Sets.<init>()"],
    "org.apache.commons.compress.archivers.dump.DumpArchiveEntry#isChrDev()": ["org.apache.commons.compress.archivers.dump.DumpArchiveEntry.TYPE.<staticinit>()"],
    "org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream#read()": ["org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream#read(byte[],int,int)"],
    "org.apache.commons.compress.harmony.pack200.Segment.SegmentMethodVisitor#SegmentMethodVisitor()": [
        "org.apache.commons.compress.harmony.pack200.Segment.<staticinit>()",
        "org.apache.commons.compress.harmony.pack200.Segment.SegmentMethodVisitor.<init>()"
    ],
    "org.apache.commons.compress.compressors.zstandard.ZstdCompressorOutputStream#ZstdCompressorOutputStream(OutputStream,int)": [
        "org.apache.commons.compress.compressors.zstandard.ZstdCompressorOutputStream.<init>()",
        "org.apache.commons.compress.compressors.CompressorOutputStream.<init>()"
    ],
    "org.apache.commons.compress.archivers.zip.BitStream#nextBit()": ["org.apache.commons.compress.utils.BitInputStream#readBits(int)"],
    "org.apache.commons.compress.harmony.pack200.SegmentHeader#addMajorVersion(int)": ["org.apache.commons.compress.harmony.pack200.SegmentHeader.Counter#add(int)"],
    "org.apache.commons.compress.archivers.zip.ZipFile#startsWithLocalFileHeader()": [
        "org.apache.commons.compress.utils.IOUtils.readFully(ReadableByteChannel,ByteBuffer)",
        "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.<staticinit>()",
        "org.apache.commons.compress.utils.SeekableInMemoryByteChannel#position(long)",
        "org.apache.commons.compress.utils.MultiReadOnlySeekableByteChannel#position(long)"
    ],
    "org.apache.commons.compress.compressors.CompressorStreamFactory.getDeflate64()": ["org.apache.commons.compress.compressors.CompressorStreamFactory.<staticinit>()"],
    "org.apache.commons.compress.harmony.unpack200.bytecode.InnerClassesAttribute#InnerClassesAttribute(String)": [
        "org.apache.commons.compress.harmony.unpack200.bytecode.InnerClassesAttribute.<init>()",
        "org.apache.commons.compress.harmony.unpack200.bytecode.InnerClassesAttribute.<staticinit>()",
        "org.apache.commons.compress.harmony.unpack200.bytecode.Attribute#getAttributeName()",
        "org.apache.commons.compress.harmony.unpack200.bytecode.Attribute#Attribute(CPUTF8)"
    ],
    "org.apache.commons.compress.harmony.pack200.NewAttributeBands#NewAttributeBands(int,CpBands,SegmentHeader,AttributeDefinition)": [
        "org.apache.commons.compress.harmony.pack200.NewAttributeBands#parseLayout()",
        "org.apache.commons.compress.harmony.pack200.BandSet#BandSet(int,SegmentHeader)",
        "org.apache.commons.compress.harmony.pack200.NewAttributeBands.<init>()"
    ],
    "org.apache.commons.compress.archivers.sevenz.SevenZFile.builder()": ["org.apache.commons.compress.archivers.sevenz.SevenZFile.Builder.<init>()"],
    "org.apache.commons.compress.harmony.pack200.Segment.ArrayVisitor#visit(String,Object)": ["org.apache.commons.compress.harmony.pack200.Segment#addValueAndTag(Object,List<String>,List<Object>)"],
    "org.apache.commons.compress.harmony.pack200.AttributeDefinitionBands#pack(OutputStream)": [
        "org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream#write(byte[])",
        "org.apache.commons.compress.archivers.sevenz.Coders.DeflateDecoder.DeflateDecoderOutputStream#write(byte[])",
        "org.apache.commons.compress.harmony.pack200.Codec.<staticinit>()",
        "org.apache.commons.compress.harmony.pack200.BandSet#encodeBandInt(String,int[],BHSDCodec)",
        "org.apache.commons.compress.harmony.pack200.PackingUtils.log(String)",
        "org.apache.commons.compress.harmony.pack200.ConstantPoolEntry#getIndex()",
        "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.OutputStreamWrapper#write(byte[])",
        "org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream#write(byte[])",
        "org.apache.commons.compress.archivers.zip.ZipSplitOutputStream#write(byte[])"
    ],
    "org.apache.commons.compress.harmony.unpack200.bytecode.InnerClassesAttribute.setAttributeName(CPUTF8)": ["org.apache.commons.compress.harmony.unpack200.bytecode.InnerClassesAttribute.<staticinit>()"],
    "org.apache.commons.compress.harmony.pack200.Codec#encode(int[])": [
        "org.apache.commons.compress.harmony.pack200.RunCodec#encode(int,int)",
        "org.apache.commons.compress.harmony.pack200.BHSDCodec#encode(int,int)",
        "org.apache.commons.compress.harmony.pack200.PopulationCodec#encode(int,int)"
    ],
    "org.apache.commons.compress.harmony.pack200.CPString#CPString(CPUTF8)": [
        "org.apache.commons.compress.harmony.pack200.CPConstant.<init>()",
        "org.apache.commons.compress.harmony.pack200.CPString.<init>()",
        "org.apache.commons.compress.harmony.pack200.CPUTF8#getUnderlyingString()"
    ],
    "org.apache.commons.compress.compressors.lz77support.LZ77Compressor.EOD#getType()": ["org.apache.commons.compress.compressors.lz77support.LZ77Compressor.Block.BlockType.<staticinit>()"],
    "org.apache.commons.compress.compressors.deflate64.HuffmanDecoder.buildTree(int[])": [
        "org.apache.commons.compress.compressors.deflate64.HuffmanDecoder.BinaryTreeNode#right()",
        "org.apache.commons.compress.compressors.deflate64.HuffmanDecoder.BinaryTreeNode#BinaryTreeNode(int)",
        "org.apache.commons.compress.compressors.deflate64.HuffmanDecoder.BinaryTreeNode#left()",
        "org.apache.commons.compress.compressors.deflate64.HuffmanDecoder.BinaryTreeNode#leaf(int)",
        "org.apache.commons.compress.compressors.deflate64.HuffmanDecoder.getCodes(int[])"
    ],
    "org.apache.commons.compress.harmony.unpack200.NewAttributeBands#NewAttributeBands(Segment,AttributeLayout)": [
        "org.apache.commons.compress.harmony.unpack200.BandSet#BandSet(Segment)",
        "org.apache.commons.compress.harmony.unpack200.AttributeLayout#setBackwardsCallCount(int)",
        "org.apache.commons.compress.harmony.unpack200.NewAttributeBands.<init>()",
        "org.apache.commons.compress.harmony.unpack200.NewAttributeBands#parseLayout()"
    ],
    "org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream#CpioArchiveOutputStream(OutputStream,short,int)": [
        "org.apache.commons.compress.archivers.cpio.CpioUtil.<staticinit>()",
        "org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream#CpioArchiveOutputStream(OutputStream,short,int,String)"
    ],
    "org.apache.commons.compress.harmony.unpack200.bytecode.forms.MethodRefForm#MethodRefForm(int,String,int[])": [
        "org.apache.commons.compress.harmony.unpack200.bytecode.forms.ReferenceForm#ReferenceForm(int,String,int[])",
        "org.apache.commons.compress.harmony.unpack200.bytecode.forms.MethodRefForm.<init>()"
    ],
    "org.apache.commons.compress.harmony.pack200.IcBands#IcBands(SegmentHeader,CpBands,int)": [
        "org.apache.commons.compress.harmony.pack200.IcBands.<init>()",
        "org.apache.commons.compress.harmony.pack200.BandSet#BandSet(int,SegmentHeader)"
    ],
    "org.apache.commons.compress.archivers.zip.ZipMethod#ZipMethod(int)": ["org.apache.commons.compress.archivers.zip.ZipMethod.<init>()"],
    "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream#hasZip64Extra(ZipArchiveEntry)": [
        "org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField.<staticinit>()",
        "org.apache.commons.compress.archivers.zip.ZipArchiveEntry#getExtraField(ZipShort)"
    ],
    "org.apache.commons.compress.archivers.zip.AsiExtraField.<staticinit>()": [
        "org.apache.commons.compress.archivers.zip.ZipShort#ZipShort(int)",
        "org.apache.commons.compress.archivers.zip.ZipConstants.<staticinit>()"
    ],
    "org.apache.commons.compress.archivers.dump.DumpArchiveSummary#DumpArchiveSummary(byte[],ZipEncoding)": [
        "org.apache.commons.compress.archivers.dump.DumpArchiveUtil.decode(ZipEncoding,byte[],int,int)",
        "org.apache.commons.compress.archivers.dump.DumpArchiveSummary.<init>()",
        "org.apache.commons.compress.archivers.dump.DumpArchiveConstants.<staticinit>()",
        "org.apache.commons.compress.archivers.dump.DumpArchiveUtil.convert32(byte[],int)"
    ],
    "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream#readOneByte()": [
        "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream#read()",
        "org.apache.commons.compress.archivers.sevenz.AES256SHA256Decoder.AES256SHA256DecoderInputStream#read()",
        "org.apache.commons.compress.compressors.xz.XZCompressorInputStream#read()",
        "org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorInputStream#read()",
        "org.apache.commons.compress.compressors.lz77support.AbstractLZ77CompressorInputStream#read()",
        "org.apache.commons.compress.compressors.deflate.DeflateCompressorInputStream#read()",
        "org.apache.commons.compress.archivers.zip.ExplodingInputStream#read()",
        "org.apache.commons.compress.compressors.lzma.LZMACompressorInputStream#read()",
        "org.apache.commons.compress.compressors.zstandard.ZstdCompressorInputStream#read()",
        "org.apache.commons.compress.archivers.ArchiveInputStream#count(int)",
        "org.apache.commons.compress.archivers.sevenz.BoundedSeekableByteChannelInputStream#read()",
        "org.apache.commons.compress.utils.BoundedArchiveInputStream#read()",
        "org.apache.commons.compress.compressors.brotli.BrotliCompressorInputStream#read()",
        "org.apache.commons.compress.archivers.tar.TarArchiveSparseZeroInputStream#read()",
        "org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream#read()",
        "org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStream#read()",
        "org.apache.commons.compress.compressors.deflate64.Deflate64CompressorInputStream#read()",
        "org.apache.commons.compress.compressors.lzw.LZWInputStream#read()",
        "org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream#read()"
    ],
    "org.apache.commons.compress.archivers.arj.ArjArchiveInputStream#canReadEntryData(ArchiveEntry)": [
        "org.apache.commons.compress.archivers.arj.LocalFileHeader.Methods.<staticinit>()",
        "org.apache.commons.compress.archivers.arj.ArjArchiveEntry#getMethod()"
    ],
    "org.apache.commons.compress.harmony.unpack200.bytecode.forms.IMethodRefForm#setByteCodeOperands(ByteCode,OperandManager,int)": [
        "org.apache.commons.compress.harmony.unpack200.bytecode.ByteCode#getNestedClassFileEntries()",
        "org.apache.commons.compress.harmony.unpack200.bytecode.forms.ReferenceForm#setByteCodeOperands(ByteCode,OperandManager,int)",
        "org.apache.commons.compress.harmony.unpack200.bytecode.ByteCode#getRewrite()",
        "org.apache.commons.compress.harmony.unpack200.bytecode.CPInterfaceMethodRef#invokeInterfaceCount()"
    ],
    "org.apache.commons.compress.harmony.pack200.BcBands#pack(OutputStream)": [
        "org.apache.commons.compress.harmony.pack200.BandSet#encodeBandInt(String,int[],BHSDCodec)",
        "org.apache.commons.compress.harmony.pack200.Codec.<staticinit>()",
        "org.apache.commons.compress.harmony.pack200.IntList#size()",
        "org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream#write(byte[])",
        "org.apache.commons.compress.harmony.pack200.BandSet#cpEntryOrNullListToArray(List<? extends ConstantPoolEntry>)",
        "org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream#write(byte[])",
        "org.apache.commons.compress.archivers.sevenz.Coders.DeflateDecoder.DeflateDecoderOutputStream#write(byte[])",
        "org.apache.commons.compress.harmony.pack200.BandSet#cpEntryListToArray(List<? extends ConstantPoolEntry>)",
        "org.apache.commons.compress.harmony.pack200.PackingUtils.log(String)",
        "org.apache.commons.compress.harmony.pack200.IntList#toArray()",
        "org.apache.commons.compress.harmony.pack200.BandSet#integerListToArray(List<Integer>)",
        "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.OutputStreamWrapper#write(byte[])",
        "org.apache.commons.compress.archivers.zip.ZipSplitOutputStream#write(byte[])"
    ],
    "org.apache.commons.compress.harmony.pack200.Segment.SegmentMethodVisitor#visitLineNumber(int,Label)": ["org.apache.commons.compress.harmony.pack200.ClassBands#addLineNumber(int,Label)"],
    "org.apache.commons.compress.archivers.ar.ArArchiveInputStream#getNextArEntry()": [
        "org.apache.commons.compress.utils.IOUtils.readRange(InputStream,int)",
        "org.apache.commons.compress.archivers.ar.ArArchiveInputStream.isGNUStringTable(String)",
        "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream#read()",
        "org.apache.commons.compress.archivers.sevenz.AES256SHA256Decoder.AES256SHA256DecoderInputStream#read()",
        "org.apache.commons.compress.compressors.xz.XZCompressorInputStream#read()",
        "org.apache.commons.compress.archivers.ar.ArArchiveInputStream#trackReadBytes(long)",
        "org.apache.commons.compress.archivers.ar.ArArchiveInputStream#getExtendedName(int)",
        "org.apache.commons.compress.archivers.ar.ArArchiveInputStream#readGNUStringTable(byte[],int,int)",
        "org.apache.commons.compress.archivers.ar.ArArchiveInputStream#asInt(byte[],int,int,int)",
        "org.apache.commons.compress.archivers.ar.ArArchiveInputStream#asInt(byte[],int,int,boolean)",
        "org.apache.commons.compress.archivers.ar.ArArchiveEntry.<staticinit>()",
        "org.apache.commons.compress.archivers.zip.ExplodingInputStream#read()",
        "org.apache.commons.compress.archivers.ar.ArArchiveInputStream#isGNULongName(String)",
        "org.apache.commons.compress.compressors.lzma.LZMACompressorInputStream#read()",
        "org.apache.commons.compress.compressors.zstandard.ZstdCompressorInputStream#read()",
        "org.apache.commons.compress.utils.ArchiveUtils.toAsciiString(byte[],int,int)",
        "org.apache.commons.compress.utils.ArchiveUtils.toAsciiBytes(String)",
        "org.apache.commons.compress.archivers.sevenz.BoundedSeekableByteChannelInputStream#read()",
        "org.apache.commons.compress.utils.ArchiveUtils.toAsciiString(byte[])",
        "org.apache.commons.compress.utils.ParsingUtils.parseIntValue(String)",
        "org.apache.commons.compress.archivers.ar.ArArchiveInputStream.<staticinit>()",
        "org.apache.commons.compress.compressors.brotli.BrotliCompressorInputStream#read()",
        "org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream#read()",
        "org.apache.commons.compress.compressors.deflate64.Deflate64CompressorInputStream#read()",
        "org.apache.commons.compress.compressors.lzw.LZWInputStream#read()",
        "org.apache.commons.compress.archivers.ar.ArArchiveInputStream#getBSDLongName(String)",
        "org.apache.commons.compress.archivers.ar.ArArchiveEntry#ArArchiveEntry(String,long,int,int,int,long)",
        "org.apache.commons.compress.archivers.dump.DumpArchiveInputStream#getBytesRead()",
        "org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorInputStream#read()",
        "org.apache.commons.compress.compressors.lz77support.AbstractLZ77CompressorInputStream#read()",
        "org.apache.commons.compress.compressors.deflate.DeflateCompressorInputStream#read()",
        "org.apache.commons.compress.archivers.ar.ArArchiveInputStream#asLong(byte[],int,int)",
        "org.apache.commons.compress.archivers.ar.ArArchiveInputStream.isBSDLongName(String)",
        "org.apache.commons.compress.utils.IOUtils.readFully(InputStream,byte[])",
        "org.apache.commons.compress.utils.BoundedArchiveInputStream#read()",
        "org.apache.commons.compress.archivers.tar.TarArchiveSparseZeroInputStream#read()",
        "org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStream#read()",
        "org.apache.commons.compress.archivers.ArchiveInputStream#getBytesRead()",
        "org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream#read()",
        "org.apache.commons.compress.archivers.ar.ArArchiveInputStream#getNextArEntry()",
        "org.apache.commons.compress.archivers.ar.ArArchiveEntry#getLength()"
    ],
    "org.apache.commons.compress.archivers.zip.ZipFile#createBoundedInputStream(long,long)": [
        "org.apache.commons.compress.archivers.zip.ZipFile.BoundedFileChannelInputStream#BoundedFileChannelInputStream(long,long,FileChannel)",
        "org.apache.commons.compress.utils.BoundedSeekableByteChannelInputStream#BoundedSeekableByteChannelInputStream(long,long,SeekableByteChannel)"
    ],
    "org.apache.commons.compress.harmony.pack200.BandSet#BandSet(int,SegmentHeader)": ["org.apache.commons.compress.harmony.pack200.BandSet.<init>()"],
    "org.apache.commons.compress.harmony.unpack200.bytecode.RuntimeVisibleorInvisibleParameterAnnotationsAttribute.ParameterAnnotation#getLength()": ["org.apache.commons.compress.harmony.unpack200.bytecode.AnnotationsAttribute.Annotation#getLength()"],
    "org.apache.commons.compress.compressors.zstandard.ZstdCompressorInputStream#ZstdCompressorInputStream(InputStream,BufferPool)": [
        "org.apache.commons.compress.compressors.CompressorInputStream.<init>()",
        "org.apache.commons.compress.compressors.zstandard.ZstdCompressorInputStream.<init>()"
    ],
    "org.apache.commons.compress.harmony.unpack200.CpBands#cpFieldValue(int)": [
        "org.apache.commons.compress.harmony.unpack200.CpBands#cpClassValue(int)",
        "org.apache.commons.compress.harmony.unpack200.CpBands#cpNameAndTypeValue(int)",
        "org.apache.commons.compress.harmony.unpack200.bytecode.CPFieldRef#CPFieldRef(CPClass,CPNameAndType,int)"
    ],
    "org.apache.commons.compress.compressors.CompressorStreamFactory#createCompressorOutputStream(String,OutputStream)": [
        "org.apache.commons.compress.compressors.CompressorStreamFactory.<staticinit>()",
        "org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream#GzipCompressorOutputStream(OutputStream)",
        "org.apache.commons.compress.compressors.lz4.BlockLZ4CompressorOutputStream#BlockLZ4CompressorOutputStream(OutputStream)",
        "org.apache.commons.compress.compressors.CompressorStreamFactory#createCompressorOutputStream(String,OutputStream)",
        "org.apache.commons.compress.compressors.deflate.DeflateCompressorOutputStream#DeflateCompressorOutputStream(OutputStream)",
        "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream#BZip2CompressorOutputStream(OutputStream)",
        "org.apache.commons.compress.compressors.CompressorStreamFactory.toKey(String)",
        "org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorOutputStream#FramedSnappyCompressorOutputStream(OutputStream)",
        "org.apache.commons.compress.compressors.zstandard.ZstdCompressorOutputStream#ZstdCompressorOutputStream(OutputStream)",
        "org.apache.commons.compress.compressors.CompressorStreamFactory#getCompressorOutputStreamProviders()",
        "org.apache.commons.compress.compressors.lzma.LZMACompressorOutputStream#LZMACompressorOutputStream(OutputStream)",
        "org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream#Pack200CompressorOutputStream(OutputStream)",
        "org.apache.commons.compress.compressors.CompressorException#CompressorException(String,Throwable)",
        "org.apache.commons.compress.compressors.xz.XZCompressorOutputStream#XZCompressorOutputStream(OutputStream)",
        "org.apache.commons.compress.compressors.CompressorException#CompressorException(String)",
        "org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorOutputStream#FramedLZ4CompressorOutputStream(OutputStream)"
    ],
    "org.apache.commons.compress.harmony.pack200.PackingOptions#setUnknownAttributeAction(String)": ["org.apache.commons.compress.harmony.pack200.PackingOptions.<staticinit>()"],
    "org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorOutputStream.mask(long)": ["org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStream.<staticinit>()"],
    "org.apache.commons.compress.archivers.sevenz.SevenZFile.readUint64(ByteBuffer)": ["org.apache.commons.compress.archivers.sevenz.SevenZFile.getUnsignedByte(ByteBuffer)"],
    "org.apache.commons.compress.archivers.sevenz.Coder#Coder(byte[],long,long,byte[])": ["org.apache.commons.compress.archivers.sevenz.Coder.<init>()"],
    "org.apache.commons.compress.archivers.zip.ZipLong#ZipLong(byte[],int)": [
        "org.apache.commons.compress.archivers.zip.ZipLong.getValue(byte[],int)",
        "org.apache.commons.compress.archivers.zip.ZipLong.<init>()"
    ],
    "org.apache.commons.compress.archivers.cpio.CpioArchiveEntry#setDeviceMin(long)": ["org.apache.commons.compress.archivers.cpio.CpioArchiveEntry#checkNewFormat()"],
    "org.apache.commons.compress.archivers.ar.ArArchiveOutputStream#createArchiveEntry(File,String)": ["org.apache.commons.compress.archivers.ar.ArArchiveEntry#ArArchiveEntry(File,String)"],
    "org.apache.commons.compress.archivers.zip.X7875_NewUnix#setUID(long)": ["org.apache.commons.compress.archivers.zip.ZipUtil.longToBig(long)"],
    "org.apache.commons.compress.archivers.ar.ArArchiveInputStream#read(byte[],int,int)": [
        "org.apache.commons.compress.compressors.zstandard.ZstdCompressorInputStream#read(byte[],int,int)",
        "org.apache.commons.compress.archivers.ar.ArArchiveInputStream#trackReadBytes(long)",
        "org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorInputStream#read(byte[],int,int)",
        "org.apache.commons.compress.archivers.sevenz.BoundedSeekableByteChannelInputStream#read(byte[],int,int)",
        "org.apache.commons.compress.compressors.deflate64.Deflate64CompressorInputStream#read(byte[],int,int)",
        "org.apache.commons.compress.compressors.brotli.BrotliCompressorInputStream#read(byte[],int,int)",
        "org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream#read(byte[],int,int)",
        "org.apache.commons.compress.archivers.sevenz.AES256SHA256Decoder.AES256SHA256DecoderInputStream#read(byte[],int,int)",
        "org.apache.commons.compress.compressors.lzma.LZMACompressorInputStream#read(byte[],int,int)",
        "org.apache.commons.compress.compressors.lz4.BlockLZ4CompressorInputStream#read(byte[],int,int)",
        "org.apache.commons.compress.compressors.snappy.SnappyCompressorInputStream#read(byte[],int,int)",
        "org.apache.commons.compress.compressors.xz.XZCompressorInputStream#read(byte[],int,int)",
        "org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream#read(byte[],int,int)",
        "org.apache.commons.compress.utils.BoundedArchiveInputStream#read(byte[],int,int)",
        "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream#read(byte[],int,int)",
        "org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStream#read(byte[],int,int)",
        "org.apache.commons.compress.compressors.lzw.LZWInputStream#read(byte[],int,int)",
        "org.apache.commons.compress.archivers.ar.ArArchiveEntry#getLength()",
        "org.apache.commons.compress.compressors.deflate.DeflateCompressorInputStream#read(byte[],int,int)"
    ],
    "org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp#getCentralDirectoryData()": [
        "org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp#getLocalFileDataData()",
        "org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp#getCentralDirectoryLength()",
        "org.apache.commons.compress.archivers.zip.ZipShort#getValue()"
    ],
    "org.apache.commons.compress.compressors.lzw.LZWInputStream#expandCodeToOutputStack(int,boolean)": [
        "org.apache.commons.compress.archivers.zip.UnshrinkingInputStream#addEntry(int,byte)",
        "org.apache.commons.compress.compressors.z.ZCompressorInputStream#addEntry(int,byte)"
    ],
    "org.apache.commons.compress.compressors.zstandard.ZstdCompressorOutputStream#ZstdCompressorOutputStream(OutputStream,int,boolean)": [
        "org.apache.commons.compress.compressors.zstandard.ZstdCompressorOutputStream.<init>()",
        "org.apache.commons.compress.compressors.CompressorOutputStream.<init>()"
    ],
    "org.apache.commons.compress.compressors.bzip2.BlockSort#fallbackQSort3(int[],int[],int,int)": [
        "org.apache.commons.compress.compressors.bzip2.BlockSort#fpop(int)",
        "org.apache.commons.compress.compressors.bzip2.BlockSort#fvswap(int[],int,int,int)",
        "org.apache.commons.compress.compressors.bzip2.BlockSort.<staticinit>()",
        "org.apache.commons.compress.compressors.bzip2.BlockSort#fallbackSimpleSort(int[],int[],int,int)",
        "org.apache.commons.compress.compressors.bzip2.BlockSort#fpush(int,int,int)",
        "org.apache.commons.compress.compressors.bzip2.BlockSort#fswap(int[],int,int)"
    ],
    "org.apache.commons.compress.harmony.unpack200.bytecode.NewAttribute#renumber(List<Integer>)": [
        "org.apache.commons.compress.harmony.unpack200.bytecode.NewAttribute.AbstractBcValue#setActualValue(int)",
        "org.apache.commons.compress.harmony.unpack200.bytecode.NewAttribute.BCOffset#setIndex(int)"
    ],
    "org.apache.commons.compress.archivers.tar.TarArchiveInputStream#TarArchiveInputStream(InputStream,int)": [
        "org.apache.commons.compress.archivers.tar.TarConstants.<staticinit>()",
        "org.apache.commons.compress.archivers.tar.TarArchiveInputStream#TarArchiveInputStream(InputStream,int,int)"
    ],
    "org.apache.commons.compress.harmony.unpack200.SegmentConstantPoolArrayCache#indexesForArrayKey(String[],String)": [
        "org.apache.commons.compress.harmony.unpack200.SegmentConstantPoolArrayCache#cacheArray(String[])",
        "org.apache.commons.compress.harmony.unpack200.SegmentConstantPoolArrayCache#arrayIsCached(String[])"
    ],
    "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream#getCompressedCount()": [
        "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream#getCompressedCount()",
        "org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorInputStream#getCompressedCount()",
        "org.apache.commons.compress.archivers.zip.InflaterInputStreamWithStatistics#getCompressedCount()",
        "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.<staticinit>()",
        "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.CurrentEntry#checkInputStream()",
        "org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStream#getCompressedCount()",
        "org.apache.commons.compress.archivers.zip.ZipFile.StoredStatisticsStream#getCompressedCount()",
        "org.apache.commons.compress.compressors.deflate64.Deflate64CompressorInputStream#getCompressedCount()",
        "org.apache.commons.compress.compressors.zstandard.ZstdCompressorInputStream#getCompressedCount()",
        "org.apache.commons.compress.compressors.xz.XZCompressorInputStream#getCompressedCount()",
        "org.apache.commons.compress.archivers.zip.ExplodingInputStream#getCompressedCount()",
        "org.apache.commons.compress.compressors.lzw.LZWInputStream#getCompressedCount()",
        "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream#getCompressedCount()",
        "org.apache.commons.compress.archivers.zip.ZipArchiveEntry#getMethod()",
        "org.apache.commons.compress.compressors.lzma.LZMACompressorInputStream#getCompressedCount()",
        "org.apache.commons.compress.compressors.brotli.BrotliCompressorInputStream#getCompressedCount()",
        "org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream#getCompressedCount()",
        "org.apache.commons.compress.compressors.deflate.DeflateCompressorInputStream#getCompressedCount()",
        "org.apache.commons.compress.archivers.sevenz.SevenZFile#getStatisticsForCurrentEntry()$InputStreamStatistics$1#getCompressedCount()",
        "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream#getBytesInflated()",
        "org.apache.commons.compress.archivers.zip.ZipMethod#getCode()",
        "org.apache.commons.compress.compressors.lz77support.AbstractLZ77CompressorInputStream#getCompressedCount()",
        "org.apache.commons.compress.archivers.zip.ZipMethod.<staticinit>()"
    ],
    "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile#write(Path,OpenOption[]...)": ["org.apache.commons.compress.archivers.sevenz.SevenZOutputFile#write(InputStream)"],
    "org.apache.commons.compress.harmony.pack200.FileBands#finaliseBands()": [
        "org.apache.commons.compress.harmony.pack200.ConstantPoolEntry#getIndex()",
        "org.apache.commons.compress.harmony.pack200.Archive.PackingFile#getName()",
        "org.apache.commons.compress.harmony.pack200.PackingOptions#isPassFile(String)",
        "org.apache.commons.compress.harmony.pack200.CpBands#getCPUtf8(String)"
    ],
    "org.apache.commons.compress.archivers.zip.ZipFile#getRawInputStream(ZipArchiveEntry)": [
        "org.apache.commons.compress.archivers.zip.ZipFile#getDataOffset(ZipArchiveEntry)",
        "org.apache.commons.compress.archivers.EntryStreamOffsets.<staticinit>()",
        "org.apache.commons.compress.archivers.zip.ZipFile#createBoundedInputStream(long,long)"
    ],
    "org.apache.commons.compress.harmony.unpack200.bytecode.RuntimeVisibleorInvisibleParameterAnnotationsAttribute.ParameterAnnotation#ParameterAnnotation(Annotation[])": ["org.apache.commons.compress.harmony.unpack200.bytecode.RuntimeVisibleorInvisibleParameterAnnotationsAttribute.ParameterAnnotation.<init>()"],
    "org.apache.commons.compress.compressors.snappy.SnappyCompressorInputStream#SnappyCompressorInputStream(InputStream,int)": [
        "org.apache.commons.compress.compressors.snappy.SnappyCompressorInputStream.<init>()",
        "org.apache.commons.compress.compressors.lz77support.AbstractLZ77CompressorInputStream#AbstractLZ77CompressorInputStream(InputStream,int)",
        "org.apache.commons.compress.compressors.snappy.SnappyCompressorInputStream#readSize()"
    ],
    "org.apache.commons.compress.harmony.unpack200.bytecode.CPConstantNumber#CPConstantNumber(byte,Object,int)": [
        "org.apache.commons.compress.harmony.unpack200.bytecode.CPConstantNumber.<init>()",
        "org.apache.commons.compress.harmony.unpack200.bytecode.CPConstant#CPConstant(byte,Object,int)"
    ],
    "org.apache.commons.compress.parallel.FileBasedScatterGatherBackingStore#writeOut(byte[],int,int)": [
        "org.apache.commons.compress.archivers.sevenz.Coders.DeflateDecoder.DeflateDecoderOutputStream#write(byte[],int,int)",
        "org.apache.commons.compress.utils.FixedLengthBlockOutputStream#write(byte[],int,int)",
        "org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorOutputStream#write(byte[],int,int)",
        "org.apache.commons.compress.archivers.ar.ArArchiveOutputStream#write(byte[],int,int)",
        "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream#write(byte[],int,int)",
        "org.apache.commons.compress.compressors.lzma.LZMACompressorOutputStream#write(byte[],int,int)",
        "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.OutputStreamWrapper#write(byte[],int,int)",
        "org.apache.commons.compress.compressors.zstandard.ZstdCompressorOutputStream#write(byte[],int,int)",
        "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream#write(byte[],int,int)",
        "org.apache.commons.compress.archivers.zip.FileRandomAccessOutputStream#write(byte[],int,int)",
        "org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream#write(byte[],int,int)",
        "org.apache.commons.compress.archivers.sevenz.AES256SHA256Decoder.AES256SHA256DecoderOutputStream#write(byte[],int,int)",
        "org.apache.commons.compress.archivers.zip.ZipSplitOutputStream#write(byte[],int,int)",
        "org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorOutputStream#write(byte[],int,int)",
        "org.apache.commons.compress.compressors.xz.XZCompressorOutputStream#write(byte[],int,int)",
        "org.apache.commons.compress.compressors.deflate.DeflateCompressorOutputStream#write(byte[],int,int)",
        "org.apache.commons.compress.archivers.zip.SeekableChannelRandomAccessOutputStream#write(byte[],int,int)",
        "org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream#write(byte[],int,int)",
        "org.apache.commons.compress.compressors.lz4.BlockLZ4CompressorOutputStream#write(byte[],int,int)",
        "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream#write(byte[],int,int)",
        "org.apache.commons.compress.compressors.snappy.SnappyCompressorOutputStream#write(byte[],int,int)",
        "org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream#write(byte[],int,int)"
    ],
    "org.apache.commons.compress.archivers.cpio.CpioArchiveEntry#getRemoteDeviceMin()": ["org.apache.commons.compress.archivers.cpio.CpioArchiveEntry#checkNewFormat()"],
    "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream#readNextByte(BitInputStream)": ["org.apache.commons.compress.utils.BitInputStream#readBits(int)"],
    "org.apache.commons.compress.MemoryLimitException#MemoryLimitException(long,int)": [
        "org.apache.commons.compress.MemoryLimitException.<init>()",
        "org.apache.commons.compress.MemoryLimitException.buildMessage(long,int)"
    ],
    "org.apache.commons.compress.archivers.sevenz.SevenZFile#sanityCheckPackInfo(ByteBuffer,ArchiveStatistics)": [
        "org.apache.commons.compress.archivers.sevenz.SevenZFile.<staticinit>()",
        "org.apache.commons.compress.utils.MultiReadOnlySeekableByteChannel#size()",
        "org.apache.commons.compress.archivers.sevenz.SevenZFile.getUnsignedByte(ByteBuffer)",
        "org.apache.commons.compress.archivers.sevenz.SevenZFile#readAllOrBits(ByteBuffer,int)",
        "org.apache.commons.compress.archivers.sevenz.NID.<staticinit>()",
        "org.apache.commons.compress.archivers.sevenz.SevenZFile.skipBytesFully(ByteBuffer,long)",
        "org.apache.commons.compress.archivers.sevenz.SevenZFile.readUint64(ByteBuffer)",
        "org.apache.commons.compress.archivers.sevenz.SevenZFile.assertFitsIntoNonNegativeInt(String,long)",
        "org.apache.commons.compress.utils.SeekableInMemoryByteChannel#size()"
    ],
    "org.apache.commons.compress.archivers.zip.ZipArchiveEntry#findMatching(ZipShort,List<ZipExtraField>)": [
        "org.apache.commons.compress.archivers.zip.X7875_NewUnix#getHeaderId()",
        "org.apache.commons.compress.archivers.zip.JarMarker#getHeaderId()",
        "org.apache.commons.compress.archivers.zip.PKWareExtraHeader#getHeaderId()",
        "org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField#getHeaderId()",
        "org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp#getHeaderId()",
        "org.apache.commons.compress.archivers.zip.X000A_NTFS#getHeaderId()",
        "org.apache.commons.compress.archivers.zip.UnparseableExtraFieldData#getHeaderId()",
        "org.apache.commons.compress.archivers.zip.ResourceAlignmentExtraField#getHeaderId()",
        "org.apache.commons.compress.archivers.zip.ZipShort#equals(Object)",
        "org.apache.commons.compress.archivers.zip.AsiExtraField#getHeaderId()",
        "org.apache.commons.compress.archivers.zip.UnicodePathExtraField#getHeaderId()",
        "org.apache.commons.compress.archivers.zip.UnicodeCommentExtraField#getHeaderId()",
        "org.apache.commons.compress.archivers.zip.UnrecognizedExtraField#getHeaderId()"
    ],
    "org.apache.commons.compress.compressors.CompressorStreamFactory.detect(InputStream)": [
        "org.apache.commons.compress.compressors.CompressorStreamFactory.<staticinit>()",
        "org.apache.commons.compress.compressors.CompressorStreamFactory.detect(InputStream,Set<String>)"
    ],
    "org.apache.commons.compress.archivers.zip.ZipEightByteInteger.getLongValue(byte[],int)": ["org.apache.commons.compress.archivers.zip.ZipEightByteInteger.getValue(byte[],int)"],
    "org.apache.commons.compress.harmony.pack200.Segment.SegmentMethodVisitor#visitTryCatchBlock(Label,Label,Label,String)": ["org.apache.commons.compress.harmony.pack200.ClassBands#addHandler(Label,Label,Label,String)"],
    "org.apache.commons.compress.archivers.arj.ArjArchiveEntry#ArjArchiveEntry()": [
        "org.apache.commons.compress.archivers.arj.LocalFileHeader.<init>()",
        "org.apache.commons.compress.archivers.arj.ArjArchiveEntry.<init>()"
    ],
    "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.PERMISSION#PERMISSION(int)": ["org.apache.commons.compress.archivers.dump.DumpArchiveEntry.PERMISSION.<init>()"],
    "org.apache.commons.compress.archivers.Lister.createArchiveInputStream(String[],InputStream)": [
        "org.apache.commons.compress.archivers.ArchiveStreamFactory#createArchiveInputStream(InputStream)",
        "org.apache.commons.compress.archivers.ArchiveStreamFactory#createArchiveInputStream(String,InputStream)",
        "org.apache.commons.compress.archivers.Lister.<staticinit>()"
    ],
    "org.apache.commons.compress.archivers.zip.StreamCompressor#writeCounted(byte[])": ["org.apache.commons.compress.archivers.zip.StreamCompressor#writeCounted(byte[],int,int)"],
    "org.apache.commons.compress.archivers.sevenz.AES256Options#AES256Options(char[])": [
        "org.apache.commons.compress.archivers.sevenz.AES256Options.<staticinit>()",
        "org.apache.commons.compress.archivers.sevenz.AES256Options.randomBytes(int)",
        "org.apache.commons.compress.archivers.sevenz.AES256Options#AES256Options(char[],byte[],byte[],int)"
    ],
    "org.apache.commons.compress.harmony.unpack200.bytecode.ExceptionTableEntry#resolve(ClassConstantPool)": [
        "org.apache.commons.compress.harmony.unpack200.bytecode.ClassConstantPool#indexOf(ClassFileEntry)",
        "org.apache.commons.compress.harmony.unpack200.bytecode.CPClass#resolve(ClassConstantPool)"
    ],
    "org.apache.commons.compress.harmony.unpack200.bytecode.NewAttribute#addBCLength(int,int)": ["org.apache.commons.compress.harmony.unpack200.bytecode.NewAttribute.BCLength#BCLength(int)"],
    "org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField#AbstractUnicodeExtraField()": ["org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField.<init>()"],
    "org.apache.commons.compress.harmony.pack200.CpBands#writeCpInt(OutputStream)": [
        "org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream#write(byte[])",
        "org.apache.commons.compress.archivers.sevenz.Coders.DeflateDecoder.DeflateDecoderOutputStream#write(byte[])",
        "org.apache.commons.compress.harmony.pack200.Codec.<staticinit>()",
        "org.apache.commons.compress.harmony.pack200.BandSet#encodeBandInt(String,int[],BHSDCodec)",
        "org.apache.commons.compress.harmony.pack200.PackingUtils.log(String)",
        "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.OutputStreamWrapper#write(byte[])",
        "org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream#write(byte[])",
        "org.apache.commons.compress.archivers.zip.ZipSplitOutputStream#write(byte[])",
        "org.apache.commons.compress.harmony.pack200.CPInt#getInt()"
    ],
    "org.apache.commons.compress.compressors.deflate.DeflateCompressorInputStream.matches(byte[],int)": ["org.apache.commons.compress.compressors.deflate.DeflateCompressorInputStream.<staticinit>()"],
    "org.apache.commons.compress.archivers.ArchiveException#ArchiveException(String,Exception)": ["org.apache.commons.compress.archivers.ArchiveException.<init>()"],
    "org.apache.commons.compress.harmony.pack200.BHSDCodec#decode(InputStream)": [
        "org.apache.commons.compress.harmony.pack200.Pack200Exception#Pack200Exception(String)",
        "org.apache.commons.compress.harmony.pack200.BHSDCodec#decode(InputStream,long)"
    ],
    "org.apache.commons.compress.archivers.zip.UnparseableExtraFieldData#getCentralDirectoryData()": [
        "org.apache.commons.compress.archivers.zip.ZipUtil.copy(byte[])",
        "org.apache.commons.compress.archivers.zip.UnparseableExtraFieldData#getLocalFileDataData()"
    ],
    "org.apache.commons.compress.archivers.sevenz.SevenZFile#readArchiveProperties(ByteBuffer)": [
        "org.apache.commons.compress.archivers.sevenz.NID.<staticinit>()",
        "org.apache.commons.compress.archivers.sevenz.SevenZFile.readUint64(ByteBuffer)",
        "org.apache.commons.compress.archivers.sevenz.SevenZFile.get(ByteBuffer,byte[])",
        "org.apache.commons.compress.archivers.sevenz.SevenZFile.getUnsignedByte(ByteBuffer)"
    ],
    "org.apache.commons.compress.archivers.tar.TarArchiveSparseEntry#TarArchiveSparseEntry(byte[])": [
        "org.apache.commons.compress.archivers.tar.TarArchiveSparseEntry.<init>()",
        "org.apache.commons.compress.archivers.tar.TarUtils.parseBoolean(byte[],int)",
        "org.apache.commons.compress.archivers.tar.TarUtils.readSparseStructs(byte[],int,int)",
        "org.apache.commons.compress.archivers.tar.TarConstants.<staticinit>()"
    ],
    "org.apache.commons.compress.harmony.unpack200.bytecode.forms.StringRefForm#setNestedEntries(ByteCode,OperandManager,int)": [
        "org.apache.commons.compress.harmony.unpack200.bytecode.OperandManager#globalConstantPool()",
        "org.apache.commons.compress.harmony.unpack200.bytecode.ByteCode#setNestedPositions(int[][])",
        "org.apache.commons.compress.harmony.unpack200.bytecode.forms.StringRefForm#getPoolID()",
        "org.apache.commons.compress.harmony.unpack200.SegmentConstantPool#getValue(int,long)",
        "org.apache.commons.compress.harmony.unpack200.bytecode.ByteCode#setNested(ClassFileEntry[])"
    ],
    "org.apache.commons.compress.harmony.unpack200.NewAttributeBands.Call#Call(int)": [
        "org.apache.commons.compress.harmony.unpack200.NewAttributeBands.LayoutElement.<init>()",
        "org.apache.commons.compress.harmony.unpack200.NewAttributeBands.Call.<init>()"
    ],
    "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile#write(InputStream)": [
        "org.apache.commons.compress.compressors.zstandard.ZstdCompressorInputStream#read(byte[])",
        "org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream#read(byte[])",
        "org.apache.commons.compress.compressors.brotli.BrotliCompressorInputStream#read(byte[])",
        "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile#write(byte[],int,int)"
    ],
    "org.apache.commons.compress.archivers.tar.TarArchiveEntry#setName(String)": ["org.apache.commons.compress.archivers.tar.TarArchiveEntry.normalizeFileName(String,boolean)"],
    "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream#stripTo7Bits(String)": ["org.apache.commons.compress.archivers.tar.TarArchiveOutputStream#shouldBeReplaced(char)"],
    "org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStream.matches(byte[],int)": ["org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStream.<staticinit>()"],
    "org.apache.commons.compress.harmony.unpack200.bytecode.ConstantValueAttribute#hashCode()": [
        "org.apache.commons.compress.harmony.unpack200.bytecode.CPMethod#hashCode()",
        "org.apache.commons.compress.harmony.unpack200.bytecode.CPInterfaceMethodRef#hashCode()",
        "org.apache.commons.compress.harmony.unpack200.bytecode.CPFieldRef#hashCode()",
        "org.apache.commons.compress.harmony.unpack200.bytecode.Attribute#hashCode()",
        "org.apache.commons.compress.harmony.unpack200.bytecode.CPConstant#hashCode()",
        "org.apache.commons.compress.harmony.unpack200.bytecode.InnerClassesAttribute#hashCode()",
        "org.apache.commons.compress.harmony.unpack200.bytecode.CPClass#hashCode()",
        "org.apache.commons.compress.harmony.unpack200.bytecode.ExceptionsAttribute#hashCode()",
        "org.apache.commons.compress.harmony.unpack200.bytecode.CPUTF8#hashCode()",
        "org.apache.commons.compress.harmony.unpack200.bytecode.CPNameAndType#hashCode()",
        "org.apache.commons.compress.harmony.unpack200.bytecode.CPString#hashCode()",
        "org.apache.commons.compress.harmony.unpack200.bytecode.CPMember#hashCode()",
        "org.apache.commons.compress.harmony.unpack200.bytecode.SourceFileAttribute#hashCode()",
        "org.apache.commons.compress.harmony.unpack200.bytecode.ByteCode#hashCode()",
        "org.apache.commons.compress.harmony.unpack200.bytecode.CPMethodRef#hashCode()",
        "org.apache.commons.compress.harmony.unpack200.bytecode.ConstantValueAttribute#hashCode()"
    ],
    "org.apache.commons.compress.archivers.arj.ArjArchiveEntry#hashCode()": ["org.apache.commons.compress.archivers.arj.ArjArchiveEntry#getName()"],
    "org.apache.commons.compress.harmony.pack200.IcBands.IcTuple#isAnonymous()": ["org.apache.commons.compress.harmony.pack200.CPClass#toString()"],
    "org.apache.commons.compress.archivers.sevenz.SevenZFile#readFolder(ByteBuffer)": [
        "org.apache.commons.compress.archivers.sevenz.Coder#Coder(byte[],long,long,byte[])",
        "org.apache.commons.compress.archivers.sevenz.SevenZFile.get(ByteBuffer,byte[])",
        "org.apache.commons.compress.archivers.sevenz.BindPair#BindPair(long,long)",
        "org.apache.commons.compress.archivers.sevenz.SevenZFile.getUnsignedByte(ByteBuffer)",
        "org.apache.commons.compress.archivers.sevenz.Folder#findBindPairForInStream(int)",
        "org.apache.commons.compress.archivers.sevenz.Folder.<init>()",
        "org.apache.commons.compress.archivers.sevenz.SevenZFile.readUint64(ByteBuffer)"
    ],
    "org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream#CpioArchiveInputStream(InputStream,String)": [
        "org.apache.commons.compress.archivers.cpio.CpioConstants.<staticinit>()",
        "org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream#CpioArchiveInputStream(InputStream,int,String)"
    ],
    "org.apache.commons.compress.harmony.unpack200.bytecode.SourceFileAttribute#resolve(ClassConstantPool)": [
        "org.apache.commons.compress.harmony.unpack200.bytecode.ClassConstantPool#indexOf(ClassFileEntry)",
        "org.apache.commons.compress.harmony.unpack200.bytecode.Attribute#resolve(ClassConstantPool)"
    ],
    "org.apache.commons.compress.harmony.unpack200.bytecode.CodeAttribute#renumber(List<Integer>)": ["org.apache.commons.compress.harmony.unpack200.bytecode.ExceptionTableEntry#renumber(List<Integer>)"],
    "org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField#addSizes(byte[])": [
        "org.apache.commons.compress.archivers.zip.ZipEightByteInteger#getBytes()",
        "org.apache.commons.compress.archivers.zip.ZipConstants.<staticinit>()"
    ],
    "org.apache.commons.compress.harmony.pack200.PopulationCodec#PopulationCodec(Codec,Codec,Codec)": [
        "org.apache.commons.compress.harmony.pack200.PopulationCodec.<init>()",
        "org.apache.commons.compress.harmony.pack200.Codec.<init>()"
    ],
    "org.apache.commons.compress.harmony.unpack200.NewAttributeBands.Integral#Integral(String)": [
        "org.apache.commons.compress.harmony.unpack200.NewAttributeBands.LayoutElement.<init>()",
        "org.apache.commons.compress.harmony.unpack200.NewAttributeBands.Integral.<init>()"
    ],
    "org.apache.commons.compress.archivers.tar.TarArchiveInputStream#tryToConsumeSecondEOFRecord()": [
        "org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream#reset()",
        "org.apache.commons.compress.archivers.tar.TarArchiveInputStream#readRecord()",
        "org.apache.commons.compress.compressors.brotli.BrotliCompressorInputStream#mark(int)",
        "org.apache.commons.compress.compressors.brotli.BrotliCompressorInputStream#reset()",
        "org.apache.commons.compress.archivers.tar.TarArchiveInputStream#getRecordSize()",
        "org.apache.commons.compress.archivers.tar.TarArchiveInputStream#isEOFRecord(byte[])",
        "org.apache.commons.compress.compressors.brotli.BrotliCompressorInputStream#markSupported()",
        "org.apache.commons.compress.archivers.ArchiveInputStream#pushedBackBytes(long)",
        "org.apache.commons.compress.compressors.zstandard.ZstdCompressorInputStream#reset()",
        "org.apache.commons.compress.compressors.zstandard.ZstdCompressorInputStream#mark(int)",
        "org.apache.commons.compress.compressors.zstandard.ZstdCompressorInputStream#markSupported()",
        "org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream#markSupported()",
        "org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream#mark(int)"
    ],
    "org.apache.commons.compress.archivers.tar.TarFile#consumeRemainderOfLastBlock()": [
        "org.apache.commons.compress.utils.SeekableInMemoryByteChannel#position()",
        "org.apache.commons.compress.archivers.tar.TarFile#repositionForwardBy(long)",
        "org.apache.commons.compress.utils.MultiReadOnlySeekableByteChannel#position()"
    ],
    "org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp#reset()": ["org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp#setFlags(byte)"],
    "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream#processZip64Extra(ZipLong,ZipLong)": [
        "org.apache.commons.compress.archivers.zip.ZipEightByteInteger#getLongValue()",
        "org.apache.commons.compress.archivers.zip.ZipArchiveEntry#setSize(long)",
        "org.apache.commons.compress.archivers.zip.ZipLong#equals(Object)",
        "org.apache.commons.compress.archivers.zip.ZipArchiveEntry#getExtraField(ZipShort)",
        "org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField#getCompressedSize()",
        "org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField.<staticinit>()",
        "org.apache.commons.compress.archivers.zip.ZipLong#getValue()",
        "org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField#getSize()",
        "org.apache.commons.compress.archivers.zip.ZipLong.<staticinit>()"
    ],
    "org.apache.commons.compress.archivers.zip.X000A_NTFS#getCentralDirectoryData()": ["org.apache.commons.compress.archivers.zip.X000A_NTFS#getLocalFileDataData()"],
    "org.apache.commons.compress.harmony.unpack200.bytecode.RuntimeVisibleorInvisibleParameterAnnotationsAttribute#toString()": ["org.apache.commons.compress.harmony.unpack200.bytecode.CPUTF8#underlyingString()"],
    "org.apache.commons.compress.archivers.sevenz.SevenZFile#readEncodedHeader(ByteBuffer,Archive,byte[])": [
        "org.apache.commons.compress.archivers.sevenz.Folder#getUnpackSize()",
        "org.apache.commons.compress.utils.IOUtils.readRange(InputStream,int)",
        "org.apache.commons.compress.archivers.sevenz.SevenZFile.<staticinit>()",
        "org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStream#close()",
        "org.apache.commons.compress.archivers.sevenz.Folder#getUnpackSizeForCoder(Coder)",
        "org.apache.commons.compress.compressors.deflate64.Deflate64CompressorInputStream#close()",
        "org.apache.commons.compress.archivers.sevenz.Coders.addDecoder(String,InputStream,long,Coder,byte[],int)",
        "org.apache.commons.compress.archivers.sevenz.SevenZFile.ArchiveStatistics#assertValidity(int)",
        "org.apache.commons.compress.utils.CRC32VerifyingInputStream#CRC32VerifyingInputStream(InputStream,long,long)",
        "org.apache.commons.compress.archivers.sevenz.SevenZFile.ArchiveStatistics.<init>()",
        "org.apache.commons.compress.archivers.sevenz.Folder#getOrderedCoders()",
        "org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream#close()",
        "org.apache.commons.compress.utils.MultiReadOnlySeekableByteChannel#position(long)",
        "org.apache.commons.compress.archivers.sevenz.SevenZFile#readStreamsInfo(ByteBuffer,Archive)",
        "org.apache.commons.compress.compressors.lzma.LZMACompressorInputStream#close()",
        "org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorInputStream#close()",
        "org.apache.commons.compress.archivers.sevenz.SevenZFile#sanityCheckStreamsInfo(ByteBuffer,ArchiveStatistics)",
        "org.apache.commons.compress.compressors.zstandard.ZstdCompressorInputStream#close()",
        "org.apache.commons.compress.archivers.sevenz.SevenZFile.assertFitsIntoNonNegativeInt(String,long)",
        "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream#close()",
        "org.apache.commons.compress.archivers.sevenz.BoundedSeekableByteChannelInputStream#close()",
        "org.apache.commons.compress.compressors.brotli.BrotliCompressorInputStream#close()",
        "org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream#close()",
        "org.apache.commons.compress.compressors.deflate.DeflateCompressorInputStream#close()",
        "org.apache.commons.compress.archivers.sevenz.AES256SHA256Decoder.AES256SHA256DecoderInputStream#close()",
        "org.apache.commons.compress.archivers.sevenz.BoundedSeekableByteChannelInputStream#BoundedSeekableByteChannelInputStream(SeekableByteChannel,long)",
        "org.apache.commons.compress.compressors.xz.XZCompressorInputStream#close()",
        "org.apache.commons.compress.utils.SeekableInMemoryByteChannel#position(long)",
        "org.apache.commons.compress.archivers.zip.ExplodingInputStream#close()",
        "org.apache.commons.compress.compressors.lzw.LZWInputStream#close()",
        "org.apache.commons.compress.compressors.lz77support.AbstractLZ77CompressorInputStream#close()"
    ],
    "org.apache.commons.compress.archivers.tar.TarUtils.parsePaxHeaders(InputStream,List<TarArchiveStructSparse>,Map<String, String>,long)": [
        "org.apache.commons.compress.utils.IOUtils.readRange(InputStream,int)",
        "org.apache.commons.compress.archivers.tar.TarGnuSparseKeys.<staticinit>()",
        "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream#read()",
        "org.apache.commons.compress.archivers.sevenz.AES256SHA256Decoder.AES256SHA256DecoderInputStream#read()",
        "org.apache.commons.compress.compressors.xz.XZCompressorInputStream#read()",
        "org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorInputStream#read()",
        "org.apache.commons.compress.compressors.lz77support.AbstractLZ77CompressorInputStream#read()",
        "org.apache.commons.compress.compressors.deflate.DeflateCompressorInputStream#read()",
        "org.apache.commons.compress.archivers.zip.ExplodingInputStream#read()",
        "org.apache.commons.compress.compressors.lzma.LZMACompressorInputStream#read()",
        "org.apache.commons.compress.compressors.zstandard.ZstdCompressorInputStream#read()",
        "org.apache.commons.compress.archivers.sevenz.BoundedSeekableByteChannelInputStream#read()",
        "org.apache.commons.compress.utils.ParsingUtils.parseLongValue(String)",
        "org.apache.commons.compress.archivers.tar.TarArchiveStructSparse#TarArchiveStructSparse(long,long)",
        "org.apache.commons.compress.utils.BoundedArchiveInputStream#read()",
        "org.apache.commons.compress.compressors.brotli.BrotliCompressorInputStream#read()",
        "org.apache.commons.compress.archivers.tar.TarArchiveSparseZeroInputStream#read()",
        "org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream#read()",
        "org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStream#read()",
        "org.apache.commons.compress.compressors.deflate64.Deflate64CompressorInputStream#read()",
        "org.apache.commons.compress.compressors.lzw.LZWInputStream#read()",
        "org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream#read()"
    ],
    "org.apache.commons.compress.harmony.pack200.IntList#IntList(int)": ["org.apache.commons.compress.harmony.pack200.IntList.<init>()"],
    "org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorInputStream#skipSkippableFrame(byte[])": [
        "org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorInputStream.isSkippableFrameSignature(byte[])",
        "org.apache.commons.compress.compressors.CompressorInputStream#count(int)",
        "org.apache.commons.compress.utils.IOUtils.readFully(InputStream,byte[])",
        "org.apache.commons.compress.utils.ByteUtils.fromLittleEndian(ByteSupplier,int)",
        "org.apache.commons.compress.compressors.CompressorInputStream#count(long)"
    ],
    "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.TYPE.find(int)": ["org.apache.commons.compress.archivers.dump.DumpArchiveEntry.TYPE.<staticinit>()"],
    "org.apache.commons.compress.harmony.pack200.ClassBands#writeCodeBands(OutputStream)": [
        "org.apache.commons.compress.harmony.pack200.BandSet#encodeBandInt(String,int[],BHSDCodec)",
        "org.apache.commons.compress.harmony.pack200.Codec.<staticinit>()",
        "org.apache.commons.compress.harmony.pack200.IntList#size()",
        "org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream#write(byte[])",
        "org.apache.commons.compress.harmony.pack200.BandSet#cpEntryOrNullListToArray(List<? extends ConstantPoolEntry>)",
        "org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream#write(byte[])",
        "org.apache.commons.compress.archivers.sevenz.Coders.DeflateDecoder.DeflateDecoderOutputStream#write(byte[])",
        "org.apache.commons.compress.harmony.pack200.ClassBands#writeCodeAttributeBands(OutputStream)",
        "org.apache.commons.compress.harmony.pack200.PackingUtils.log(String)",
        "org.apache.commons.compress.harmony.pack200.IntList#toArray()",
        "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.OutputStreamWrapper#write(byte[])",
        "org.apache.commons.compress.archivers.zip.ZipSplitOutputStream#write(byte[])",
        "org.apache.commons.compress.harmony.pack200.BandSet#integerListToArray(List<Integer>)"
    ],
    "org.apache.commons.compress.archivers.sevenz.SevenZFile#readHeaders(byte[])": [
        "org.apache.commons.compress.archivers.sevenz.SevenZFile#tryToLocateEndHeader(byte[])",
        "org.apache.commons.compress.archivers.sevenz.SevenZFile.<staticinit>()",
        "org.apache.commons.compress.archivers.sevenz.SevenZFile#initializeArchive(StartHeader,byte[],boolean)",
        "org.apache.commons.compress.archivers.sevenz.SevenZFile#readStartHeader(long)",
        "org.apache.commons.compress.utils.SeekableInMemoryByteChannel#position(long)",
        "org.apache.commons.compress.utils.SeekableInMemoryByteChannel#position()",
        "org.apache.commons.compress.utils.MultiReadOnlySeekableByteChannel#position()",
        "org.apache.commons.compress.archivers.sevenz.SevenZFile#readFully(ByteBuffer)",
        "org.apache.commons.compress.utils.MultiReadOnlySeekableByteChannel#position(long)"
    ],
    "org.apache.commons.compress.harmony.unpack200.bytecode.ClassFile#write(DataOutputStream)": [
        "org.apache.commons.compress.harmony.unpack200.bytecode.ClassFileEntry#write(DataOutputStream)",
        "org.apache.commons.compress.harmony.unpack200.bytecode.ClassFile.<staticinit>()",
        "org.apache.commons.compress.harmony.unpack200.bytecode.ClassConstantPool#size()",
        "org.apache.commons.compress.harmony.unpack200.bytecode.ConstantPoolEntry#doWrite(DataOutputStream)",
        "org.apache.commons.compress.harmony.unpack200.bytecode.ConstantPoolEntry.<staticinit>()",
        "org.apache.commons.compress.harmony.unpack200.bytecode.ConstantPoolEntry#getTag()",
        "org.apache.commons.compress.harmony.unpack200.bytecode.ClassConstantPool#get(int)"
    ],
    "org.apache.commons.compress.utils.ParsingUtils#ParsingUtils()": ["org.apache.commons.compress.utils.ParsingUtils.<init>()"],
    "org.apache.commons.compress.archivers.zip.UnrecognizedExtraField#getCentralDirectoryData()": [
        "org.apache.commons.compress.archivers.zip.ZipUtil.copy(byte[])",
        "org.apache.commons.compress.archivers.zip.UnrecognizedExtraField#getLocalFileDataData()"
    ],
    "org.apache.commons.compress.harmony.pack200.BcBands#visitInsn(int)": [
        "org.apache.commons.compress.harmony.pack200.BcBands#updateRenumbering()",
        "org.apache.commons.compress.harmony.pack200.IntList#add(int)"
    ],
    "org.apache.commons.compress.harmony.unpack200.Pack200UnpackerAdapter.<init>()": ["org.apache.commons.compress.harmony.pack200.Pack200Adapter.<init>()"],
    "org.apache.commons.compress.archivers.zip.ExplodingInputStream#fillBuffer()": [
        "org.apache.commons.compress.archivers.zip.ExplodingInputStream#init()",
        "org.apache.commons.compress.utils.ExactMath.add(int,long)",
        "org.apache.commons.compress.archivers.zip.BitStream#nextBits(int)",
        "org.apache.commons.compress.archivers.zip.CircularBuffer#put(int)",
        "org.apache.commons.compress.archivers.zip.BitStream#nextByte()",
        "org.apache.commons.compress.archivers.zip.BitStream#nextBit()",
        "org.apache.commons.compress.archivers.zip.CircularBuffer#copy(int,int)",
        "org.apache.commons.compress.archivers.zip.BinaryTree#read(BitStream)"
    ],
    "org.apache.commons.compress.harmony.unpack200.bytecode.forms.SingleByteReferenceForm#setNestedEntries(ByteCode,OperandManager,int)": [
        "org.apache.commons.compress.harmony.unpack200.bytecode.ByteCode#setNestedPositions(int[][])",
        "org.apache.commons.compress.harmony.unpack200.bytecode.forms.ReferenceForm#setNestedEntries(ByteCode,OperandManager,int)"
    ],
    "org.apache.commons.compress.harmony.pack200.Segment.SegmentMethodVisitor#visitInsn(int)": ["org.apache.commons.compress.harmony.pack200.BcBands#visitInsn(int)"],
    "org.apache.commons.compress.archivers.zip.ParallelScatterZipCreator#ParallelScatterZipCreator(ExecutorService)": [
        "org.apache.commons.compress.archivers.zip.DefaultBackingStoreSupplier#DefaultBackingStoreSupplier(Path)",
        "org.apache.commons.compress.archivers.zip.ParallelScatterZipCreator#ParallelScatterZipCreator(ExecutorService,ScatterGatherBackingStoreSupplier)"
    ],
    "org.apache.commons.compress.harmony.pack200.Segment.<init>()": [
        "org.apache.commons.compress.harmony.pack200.Segment.SegmentMethodVisitor#SegmentMethodVisitor()",
        "org.apache.commons.compress.harmony.pack200.Segment.SegmentFieldVisitor#SegmentFieldVisitor()"
    ],
    "org.apache.commons.compress.archivers.zip.ZipArchiveEntry#ZipArchiveEntry(Function<ZipShort, ZipExtraField>,ZipEntry)": [
        "org.apache.commons.compress.archivers.zip.ZipArchiveEntry#setExtra()",
        "org.apache.commons.compress.archivers.zip.ZipArchiveEntry#getMethod()",
        "org.apache.commons.compress.archivers.zip.ZipArchiveEntry#getName()",
        "org.apache.commons.compress.archivers.zip.ZipArchiveEntry#getSize()",
        "org.apache.commons.compress.archivers.zip.ZipArchiveEntry#parseExtraFields(byte[],boolean,ExtraFieldParsingBehavior)",
        "org.apache.commons.compress.archivers.zip.ZipArchiveEntry#setExtraFields(ZipExtraField[])",
        "org.apache.commons.compress.archivers.zip.ZipArchiveEntry#setMethod(int)",
        "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.ExtraFieldParsingMode.<staticinit>()",
        "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.<init>()",
        "org.apache.commons.compress.archivers.zip.ZipArchiveEntry#setName(String)"
    ],
    "org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorOutputStream#FramedLZ4CompressorOutputStream(OutputStream,Parameters)": [
        "org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream#write(byte[])",
        "org.apache.commons.compress.archivers.sevenz.Coders.DeflateDecoder.DeflateDecoderOutputStream#write(byte[])",
        "org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorOutputStream.<init>()",
        "org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorOutputStream.BlockSize#getSize()",
        "org.apache.commons.compress.compressors.CompressorOutputStream.<init>()",
        "org.apache.commons.compress.compressors.lz4.BlockLZ4CompressorInputStream.<staticinit>()",
        "org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorInputStream.<staticinit>()",
        "org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorOutputStream#writeFrameDescriptor()",
        "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.OutputStreamWrapper#write(byte[])",
        "org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream#write(byte[])",
        "org.apache.commons.compress.archivers.zip.ZipSplitOutputStream#write(byte[])"
    ],
    "org.apache.commons.compress.utils.BitInputStream#BitInputStream(InputStream,ByteOrder)": ["org.apache.commons.compress.utils.BitInputStream.<init>()"],
    "org.apache.commons.compress.harmony.pack200.Archive#Archive(JarFile,OutputStream,PackingOptions)": [
        "org.apache.commons.compress.harmony.pack200.PackingOptions.<init>()",
        "org.apache.commons.compress.harmony.pack200.PackingUtils.config(PackingOptions)",
        "org.apache.commons.compress.harmony.pack200.Archive.<init>()",
        "org.apache.commons.compress.harmony.pack200.PackingOptions#isGzip()"
    ],
    "org.apache.commons.compress.harmony.archive.internal.nls.Messages.getString(String,Object)": ["org.apache.commons.compress.harmony.archive.internal.nls.Messages.getString(String,Object[])"],
    "org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField#getCentralDirectoryLength()": [
        "org.apache.commons.compress.archivers.zip.ZipShort#ZipShort(int)",
        "org.apache.commons.compress.archivers.zip.ZipConstants.<staticinit>()"
    ],
    "org.apache.commons.compress.harmony.pack200.ClassBands#renumberBci(List<Integer>,IntList,Map<Label, Integer>)": ["org.apache.commons.compress.harmony.pack200.IntList#get(int)"],
    "org.apache.commons.compress.harmony.unpack200.bytecode.forms.ClassSpecificReferenceForm#setNestedEntries(ByteCode,OperandManager,int)": [
        "org.apache.commons.compress.harmony.unpack200.SegmentConstantPool#getClassSpecificPoolEntry(int,long,String)",
        "org.apache.commons.compress.harmony.unpack200.bytecode.forms.ThisInitMethodRefForm#context(OperandManager)",
        "org.apache.commons.compress.harmony.unpack200.bytecode.forms.ThisFieldRefForm#getPoolID()",
        "org.apache.commons.compress.harmony.unpack200.bytecode.forms.ThisMethodRefForm#context(OperandManager)",
        "org.apache.commons.compress.harmony.unpack200.bytecode.forms.SuperMethodRefForm#getPoolID()",
        "org.apache.commons.compress.harmony.unpack200.bytecode.ByteCode#setNested(ClassFileEntry[])",
        "org.apache.commons.compress.harmony.unpack200.bytecode.forms.SuperInitMethodRefForm#context(OperandManager)",
        "org.apache.commons.compress.harmony.unpack200.bytecode.OperandManager#globalConstantPool()",
        "org.apache.commons.compress.harmony.unpack200.bytecode.forms.ThisMethodRefForm#getPoolID()",
        "org.apache.commons.compress.harmony.unpack200.bytecode.forms.NewInitMethodRefForm#context(OperandManager)",
        "org.apache.commons.compress.harmony.unpack200.bytecode.ByteCode#setNestedPositions(int[][])",
        "org.apache.commons.compress.harmony.unpack200.bytecode.forms.ThisFieldRefForm#context(OperandManager)",
        "org.apache.commons.compress.harmony.unpack200.bytecode.forms.SuperFieldRefForm#getPoolID()",
        "org.apache.commons.compress.harmony.unpack200.bytecode.forms.SuperFieldRefForm#context(OperandManager)",
        "org.apache.commons.compress.harmony.unpack200.bytecode.forms.InitMethodReferenceForm#getPoolID()",
        "org.apache.commons.compress.harmony.unpack200.bytecode.forms.SuperMethodRefForm#context(OperandManager)"
    ],
    "org.apache.commons.compress.compressors.lz77support.LZ77Compressor#LZ77Compressor(Parameters,Callback)": [
        "org.apache.commons.compress.compressors.lz77support.LZ77Compressor.<init>()",
        "org.apache.commons.compress.compressors.lz77support.LZ77Compressor.<staticinit>()",
        "org.apache.commons.compress.compressors.lz77support.Parameters#getWindowSize()"
    ],
    "org.apache.commons.compress.harmony.unpack200.Pack200UnpackerAdapter.unwrap(InputStream)": ["org.apache.commons.compress.harmony.unpack200.Pack200UnpackerAdapter.unwrap(FilterInputStream)"],
    "org.apache.commons.compress.harmony.unpack200.bytecode.forms.MultiANewArrayForm#MultiANewArrayForm(int,String,int[])": [
        "org.apache.commons.compress.harmony.unpack200.bytecode.forms.MultiANewArrayForm.<init>()",
        "org.apache.commons.compress.harmony.unpack200.bytecode.forms.ClassRefForm#ClassRefForm(int,String,int[])"
    ],
    "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.BoundCountInputStream#read()": [
        "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.BoundCountInputStream#readCount(int)",
        "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.BoundCountInputStream#atMaxLength()"
    ],
    "org.apache.commons.compress.archivers.cpio.CpioArchiveEntry#getHeaderPadCount(long)": ["org.apache.commons.compress.utils.ExactMath.add(int,long)"],
    "org.apache.commons.compress.harmony.unpack200.BandSet#parseCPSignatureReferences(String,InputStream,BHSDCodec,int[])": [
        "org.apache.commons.compress.harmony.unpack200.BandSet#decodeBandInt(String,InputStream,BHSDCodec,int)",
        "org.apache.commons.compress.harmony.unpack200.Segment#getCpBands()",
        "org.apache.commons.compress.harmony.unpack200.CpBands#cpSignatureValue(int)"
    ],
    "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream#handleLongName(TarArchiveEntry,String,Map<String, String>,String,byte,String)": [
        "org.apache.commons.compress.archivers.tar.TarArchiveEntry#setSize(long)",
        "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream#transferModTime(TarArchiveEntry,TarArchiveEntry)",
        "org.apache.commons.compress.archivers.tar.TarUtils$ZipEncoding$1#encode(String)",
        "org.apache.commons.compress.archivers.tar.TarArchiveEntry#TarArchiveEntry(String,byte)",
        "org.apache.commons.compress.archivers.zip.NioZipEncoding#encode(String)",
        "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream#write(byte[],int,int)",
        "org.apache.commons.compress.archivers.ArchiveOutputStream#write(int)",
        "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream#putArchiveEntry(TarArchiveEntry)",
        "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.<staticinit>()",
        "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream#closeArchiveEntry()",
        "org.apache.commons.compress.archivers.tar.TarConstants.<staticinit>()"
    ],
    "org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry#getContentMethods()": ["org.apache.commons.compress.archivers.sevenz.SevenZMethod.<staticinit>()"],
    "org.apache.commons.compress.archivers.dump.TapeInputStream#read(byte[],int,int)": [
        "org.apache.commons.compress.archivers.dump.TapeInputStream#readBlock(boolean)",
        "org.apache.commons.compress.archivers.dump.TapeInputStream.<staticinit>()"
    ],
    "org.apache.commons.compress.archivers.tar.TarArchiveInputStream#TarArchiveInputStream(InputStream,int,int,String,boolean)": [
        "org.apache.commons.compress.archivers.tar.TarArchiveInputStream.<init>()",
        "org.apache.commons.compress.archivers.ArchiveInputStream#ArchiveInputStream(InputStream,String)",
        "org.apache.commons.compress.archivers.zip.ZipEncodingHelper.getZipEncoding(String)",
        "org.apache.commons.compress.archivers.tar.TarArchiveEntry.<staticinit>()"
    ],
    "org.apache.commons.compress.harmony.unpack200.SegmentOptions#shouldDeflate()": ["org.apache.commons.compress.harmony.unpack200.SegmentOptions.<staticinit>()"],
    "org.apache.commons.compress.harmony.pack200.ClassBands#addCode()": ["org.apache.commons.compress.harmony.pack200.IntList#add(int)"],
    "org.apache.commons.compress.compressors.lz77support.LZ77Compressor#initialize()": [
        "org.apache.commons.compress.compressors.lz77support.LZ77Compressor.<staticinit>()",
        "org.apache.commons.compress.compressors.lz77support.LZ77Compressor#nextHash(int,byte)"
    ],
    "org.apache.commons.compress.harmony.pack200.CpBands#getConstant(Object)": [
        "org.apache.commons.compress.harmony.pack200.CPString#CPString(CPUTF8)",
        "org.apache.commons.compress.harmony.pack200.CPInt#CPInt(int)",
        "org.apache.commons.compress.harmony.pack200.CPDouble#CPDouble(double)",
        "org.apache.commons.compress.harmony.pack200.CPLong#CPLong(long)",
        "org.apache.commons.compress.harmony.pack200.CpBands#getCPClass(String)",
        "org.apache.commons.compress.harmony.pack200.CPFloat#CPFloat(float)",
        "org.apache.commons.compress.harmony.pack200.CpBands#getCPUtf8(String)"
    ],
    "org.apache.commons.compress.archivers.sevenz.DeltaDecoder#getOptionsFromCoder(Coder,InputStream)": ["org.apache.commons.compress.archivers.sevenz.DeltaDecoder#getOptionsFromCoder(Coder)"],
    "org.apache.commons.compress.archivers.tar.TarArchiveInputStream#getRecord()": [
        "org.apache.commons.compress.archivers.tar.TarArchiveInputStream#consumeRemainderOfLastBlock()",
        "org.apache.commons.compress.archivers.tar.TarArchiveInputStream#isEOFRecord(byte[])",
        "org.apache.commons.compress.archivers.tar.TarArchiveInputStream#readRecord()",
        "org.apache.commons.compress.archivers.tar.TarArchiveInputStream#setAtEOF(boolean)",
        "org.apache.commons.compress.archivers.tar.TarArchiveInputStream#isAtEOF()",
        "org.apache.commons.compress.archivers.tar.TarArchiveInputStream#tryToConsumeSecondEOFRecord()"
    ],
    "org.apache.commons.compress.archivers.sevenz.SevenZFileOptions.Builder#build()": ["org.apache.commons.compress.archivers.sevenz.SevenZFileOptions#SevenZFileOptions(int,boolean,boolean)"],
    "org.apache.commons.compress.archivers.tar.TarArchiveEntry#isGNULongNameEntry()": ["org.apache.commons.compress.archivers.tar.TarConstants.<staticinit>()"],
    "org.apache.commons.compress.harmony.unpack200.bytecode.forms.InitMethodReferenceForm#getPoolID()": ["org.apache.commons.compress.harmony.unpack200.SegmentConstantPool.<staticinit>()"],
    "org.apache.commons.compress.archivers.zip.ZipSplitOutputStream#write(byte[])": ["org.apache.commons.compress.archivers.zip.ZipSplitOutputStream#write(byte[],int,int)"],
    "org.apache.commons.compress.archivers.tar.TarArchiveInputStream#TarArchiveInputStream(InputStream,String)": [
        "org.apache.commons.compress.archivers.tar.TarArchiveInputStream#TarArchiveInputStream(InputStream,int,int,String)",
        "org.apache.commons.compress.archivers.tar.TarConstants.<staticinit>()"
    ],
    "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream#versionNeededToExtract(int,boolean,boolean)": [
        "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream#versionNeededToExtractMethod(int)",
        "org.apache.commons.compress.archivers.zip.ZipConstants.<staticinit>()"
    ],
    "org.apache.commons.compress.harmony.unpack200.SegmentConstantPool#matchSpecificPoolEntryIndex(String[],String[],String,String,int)": [
        "org.apache.commons.compress.harmony.unpack200.SegmentConstantPoolArrayCache#indexesForArrayKey(String[],String)",
        "org.apache.commons.compress.harmony.unpack200.SegmentConstantPool.regexMatches(String,String)"
    ],
    "org.apache.commons.compress.compressors.brotli.BrotliUtils.setCacheBrotliAvailablity(boolean)": [
        "org.apache.commons.compress.compressors.brotli.BrotliUtils.CachedAvailability.<staticinit>()",
        "org.apache.commons.compress.compressors.brotli.BrotliUtils.<staticinit>()",
        "org.apache.commons.compress.compressors.brotli.BrotliUtils.internalIsBrotliCompressionAvailable()"
    ],
    "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream#destroy()": [
        "org.apache.commons.compress.archivers.zip.FileRandomAccessOutputStream#close()",
        "org.apache.commons.compress.compressors.snappy.SnappyCompressorOutputStream#close()",
        "org.apache.commons.compress.compressors.deflate.DeflateCompressorOutputStream#close()",
        "org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream#close()",
        "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream#close()",
        "org.apache.commons.compress.compressors.lzma.LZMACompressorOutputStream#close()",
        "org.apache.commons.compress.utils.FixedLengthBlockOutputStream#close()",
        "org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorOutputStream#close()",
        "org.apache.commons.compress.compressors.xz.XZCompressorOutputStream#close()",
        "org.apache.commons.compress.archivers.zip.ZipSplitOutputStream#close()",
        "org.apache.commons.compress.archivers.zip.SeekableChannelRandomAccessOutputStream#close()",
        "org.apache.commons.compress.archivers.sevenz.Coders.DeflateDecoder.DeflateDecoderOutputStream#close()",
        "org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorOutputStream#close()",
        "org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream#close()",
        "org.apache.commons.compress.compressors.lz4.BlockLZ4CompressorOutputStream#close()",
        "org.apache.commons.compress.archivers.ar.ArArchiveOutputStream#close()",
        "org.apache.commons.compress.compressors.zstandard.ZstdCompressorOutputStream#close()",
        "org.apache.commons.compress.archivers.sevenz.AES256SHA256Decoder.AES256SHA256DecoderOutputStream#close()",
        "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream#close()",
        "org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream#close()",
        "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream#close()",
        "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.OutputStreamWrapper#close()"
    ],
    "org.apache.commons.compress.archivers.tar.TarArchiveEntry#setNames(String,String)": [
        "org.apache.commons.compress.archivers.tar.TarArchiveEntry#setUserName(String)",
        "org.apache.commons.compress.archivers.tar.TarArchiveEntry#setGroupName(String)"
    ],
    "org.apache.commons.compress.archivers.zip.ZipFile#fillNameMap()": ["org.apache.commons.compress.archivers.zip.ZipArchiveEntry#getName()"],
    "org.apache.commons.compress.archivers.sevenz.Coders.DeflateDecoder.DeflateDecoderInputStream#DeflateDecoderInputStream(InflaterInputStream,Inflater)": ["org.apache.commons.compress.archivers.sevenz.Coders.DeflateDecoder.DeflateDecoderInputStream.<init>()"],
    "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream#shouldUseZip64EOCD()": [
        "org.apache.commons.compress.archivers.zip.ZipSplitOutputStream#getCurrentSplitSegmentIndex()",
        "org.apache.commons.compress.archivers.zip.ZipConstants.<staticinit>()"
    ],
    "org.apache.commons.compress.harmony.pack200.CPConstant.<init>()": ["org.apache.commons.compress.harmony.pack200.ConstantPoolEntry.<init>()"],
    "org.apache.commons.compress.compressors.lzma.LZMACompressorInputStream#LZMACompressorInputStream(InputStream,int)": [
        "org.apache.commons.compress.compressors.CompressorInputStream.<init>()",
        "org.apache.commons.compress.MemoryLimitException#MemoryLimitException(long,int,Exception)",
        "org.apache.commons.compress.compressors.lzma.LZMACompressorInputStream.<init>()"
    ],
    "org.apache.commons.compress.archivers.sevenz.SevenZFile#sanityCheckAndCollectStatistics(ByteBuffer)": [
        "org.apache.commons.compress.archivers.sevenz.SevenZFile#sanityCheckFilesInfo(ByteBuffer,ArchiveStatistics)",
        "org.apache.commons.compress.archivers.sevenz.SevenZFile.ArchiveStatistics.<init>()",
        "org.apache.commons.compress.archivers.sevenz.NID.<staticinit>()",
        "org.apache.commons.compress.archivers.sevenz.SevenZFile#sanityCheckStreamsInfo(ByteBuffer,ArchiveStatistics)",
        "org.apache.commons.compress.archivers.sevenz.SevenZFile#sanityCheckArchiveProperties(ByteBuffer)",
        "org.apache.commons.compress.archivers.sevenz.SevenZFile.getUnsignedByte(ByteBuffer)"
    ],
    "org.apache.commons.compress.archivers.arj.ArjArchiveInputStream#readHeader()": [
        "org.apache.commons.compress.archivers.arj.ArjArchiveInputStream#read8(DataInputStream)",
        "org.apache.commons.compress.archivers.arj.ArjArchiveInputStream.<staticinit>()",
        "org.apache.commons.compress.archivers.arj.ArjArchiveInputStream#readRange(InputStream,int)",
        "org.apache.commons.compress.archivers.arj.ArjArchiveInputStream#read16(DataInputStream)",
        "org.apache.commons.compress.archivers.arj.ArjArchiveInputStream#read32(DataInputStream)"
    ],
    "org.apache.commons.compress.harmony.unpack200.bytecode.CPClass#generateHashCode()": ["org.apache.commons.compress.harmony.unpack200.bytecode.CPUTF8#hashCode()"],
    "org.apache.commons.compress.harmony.unpack200.IcTuple#innerBreakAtDollar(String)": ["org.apache.commons.compress.harmony.unpack200.IcTuple.<staticinit>()"],
    "org.apache.commons.compress.compressors.CompressorStreamFactory.getPack200()": ["org.apache.commons.compress.compressors.CompressorStreamFactory.<staticinit>()"],
    "org.apache.commons.compress.archivers.cpio.CpioArchiveEntry#checkOldFormat()": ["org.apache.commons.compress.archivers.cpio.CpioConstants.<staticinit>()"],
    "org.apache.commons.compress.harmony.unpack200.SegmentOptions#hasCPNumberCounts()": ["org.apache.commons.compress.harmony.unpack200.SegmentOptions.<staticinit>()"],
    "org.apache.commons.compress.harmony.unpack200.bytecode.forms.MethodRefForm#getPoolID()": ["org.apache.commons.compress.harmony.unpack200.SegmentConstantPool.<staticinit>()"],
    "org.apache.commons.compress.archivers.dump.DumpArchiveInputStream#readDirectoryEntry(DumpArchiveEntry)": [
        "org.apache.commons.compress.archivers.dump.DumpArchiveUtil.decode(ZipEncoding,byte[],int,int)",
        "org.apache.commons.compress.utils.IOUtils.readRange(ReadableByteChannel,int)",
        "org.apache.commons.compress.archivers.dump.TapeInputStream#readRecord()",
        "org.apache.commons.compress.archivers.dump.DumpArchiveException#DumpArchiveException(String)",
        "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.parse(byte[])",
        "org.apache.commons.compress.archivers.dump.DumpArchiveUtil.verify(byte[])",
        "org.apache.commons.compress.archivers.dump.DumpArchiveEntry#getIno()",
        "org.apache.commons.compress.archivers.dump.DumpArchiveInputStream#getPath(DumpArchiveEntry)",
        "org.apache.commons.compress.archivers.dump.DumpArchiveUtil.convert32(byte[],int)",
        "org.apache.commons.compress.archivers.dump.DumpArchiveEntry#setName(String)",
        "org.apache.commons.compress.archivers.dump.DumpArchiveEntry#getHeaderType()",
        "org.apache.commons.compress.archivers.dump.TapeInputStream#read(byte[],int,int)",
        "org.apache.commons.compress.archivers.dump.InvalidFormatException#InvalidFormatException()",
        "org.apache.commons.compress.archivers.dump.DumpArchiveEntry#getHeaderCount()",
        "org.apache.commons.compress.archivers.dump.DumpArchiveEntry#getEntrySize()",
        "org.apache.commons.compress.archivers.dump.DumpArchiveEntry#setSimpleName(String)",
        "org.apache.commons.compress.archivers.dump.TapeInputStream#peek()",
        "org.apache.commons.compress.archivers.dump.DumpArchiveUtil.convert16(byte[],int)",
        "org.apache.commons.compress.archivers.dump.Dirent#Dirent(int,int,int,String)",
        "org.apache.commons.compress.archivers.dump.DumpArchiveInputStream.<staticinit>()",
        "org.apache.commons.compress.archivers.dump.DumpArchiveConstants.<staticinit>()",
        "org.apache.commons.compress.archivers.dump.DumpArchiveConstants.SEGMENT_TYPE.<staticinit>()"
    ],
    "org.apache.commons.compress.harmony.pack200.ClassBands#writeClassAttributeBands(OutputStream)": [
        "org.apache.commons.compress.harmony.pack200.Codec.<staticinit>()",
        "org.apache.commons.compress.harmony.pack200.BandSet#encodeBandInt(String,int[],BHSDCodec)",
        "org.apache.commons.compress.harmony.pack200.MetadataBandGroup#pack(OutputStream)",
        "org.apache.commons.compress.harmony.pack200.BandSet#encodeFlags(String,long[],BHSDCodec,BHSDCodec,boolean)",
        "org.apache.commons.compress.harmony.pack200.IntList#size()",
        "org.apache.commons.compress.harmony.pack200.ClassBands#getInts(CPClass[])",
        "org.apache.commons.compress.harmony.pack200.NewAttributeBands#pack(OutputStream)",
        "org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream#write(byte[])",
        "org.apache.commons.compress.harmony.pack200.BandSet#cpEntryOrNullListToArray(List<? extends ConstantPoolEntry>)",
        "org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream#write(byte[])",
        "org.apache.commons.compress.archivers.sevenz.Coders.DeflateDecoder.DeflateDecoderOutputStream#write(byte[])",
        "org.apache.commons.compress.harmony.pack200.BandSet#cpEntryListToArray(List<? extends ConstantPoolEntry>)",
        "org.apache.commons.compress.harmony.pack200.PackingUtils.log(String)",
        "org.apache.commons.compress.harmony.pack200.IntList#toArray()",
        "org.apache.commons.compress.harmony.pack200.SegmentHeader#have_class_flags_hi()",
        "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.OutputStreamWrapper#write(byte[])",
        "org.apache.commons.compress.archivers.zip.ZipSplitOutputStream#write(byte[])"
    ],
    "org.apache.commons.compress.archivers.ArchiveStreamFactory.findAvailableArchiveOutputStreamProviders()": [
        "org.apache.commons.compress.archivers.ArchiveStreamFactory.archiveStreamProviderIterable()",
        "org.apache.commons.compress.archivers.ArchiveStreamFactory#getOutputStreamArchiveNames()",
        "org.apache.commons.compress.archivers.ArchiveStreamFactory.putAll(Set<String>,ArchiveStreamProvider,TreeMap<String, ArchiveStreamProvider>)",
        "org.apache.commons.compress.archivers.ArchiveStreamFactory.<staticinit>()"
    ],
    "org.apache.commons.compress.archivers.zip.ScatterZipOutputStream.CompressedEntry#CompressedEntry(ZipArchiveEntryRequest,long,long,long)": ["org.apache.commons.compress.archivers.zip.ScatterZipOutputStream.CompressedEntry.<init>()"],
    "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream#writeRun()": [
        "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream#endBlock()",
        "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream#writeRun()",
        "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream#initBlock()",
        "org.apache.commons.compress.compressors.bzip2.CRC#update(int,int)"
    ],
    "org.apache.commons.compress.compressors.deflate.DeflateCompressorInputStream#close()": [
        "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream#close()",
        "org.apache.commons.compress.archivers.sevenz.BoundedSeekableByteChannelInputStream#close()",
        "org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStream#close()",
        "org.apache.commons.compress.compressors.brotli.BrotliCompressorInputStream#close()",
        "org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream#close()",
        "org.apache.commons.compress.compressors.deflate64.Deflate64CompressorInputStream#close()",
        "org.apache.commons.compress.compressors.deflate.DeflateCompressorInputStream#close()",
        "org.apache.commons.compress.archivers.sevenz.AES256SHA256Decoder.AES256SHA256DecoderInputStream#close()",
        "org.apache.commons.compress.compressors.xz.XZCompressorInputStream#close()",
        "org.apache.commons.compress.archivers.zip.ExplodingInputStream#close()",
        "org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream#close()",
        "org.apache.commons.compress.compressors.lzw.LZWInputStream#close()",
        "org.apache.commons.compress.compressors.lzma.LZMACompressorInputStream#close()",
        "org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorInputStream#close()",
        "org.apache.commons.compress.compressors.zstandard.ZstdCompressorInputStream#close()",
        "org.apache.commons.compress.compressors.lz77support.AbstractLZ77CompressorInputStream#close()"
    ],
    "org.apache.commons.compress.harmony.unpack200.bytecode.forms.ThisMethodRefForm#ThisMethodRefForm(int,String,int[])": [
        "org.apache.commons.compress.harmony.unpack200.bytecode.forms.ClassSpecificReferenceForm#ClassSpecificReferenceForm(int,String,int[])",
        "org.apache.commons.compress.harmony.unpack200.bytecode.forms.ThisMethodRefForm.<init>()"
    ],
    "org.apache.commons.compress.archivers.ArchiveStreamFactory#createArchiveInputStream(String,InputStream)": [
        "org.apache.commons.compress.archivers.ArchiveStreamFactory.<staticinit>()",
        "org.apache.commons.compress.archivers.ArchiveStreamFactory#createArchiveInputStream(String,InputStream,String)"
    ],
    "org.apache.commons.compress.archivers.tar.TarArchiveEntry#hashCode()": ["org.apache.commons.compress.archivers.tar.TarArchiveEntry#getName()"],
    "org.apache.commons.compress.changes.ChangeSet#addAddition(Change<E extends ArchiveEntry>)": [
        "org.apache.commons.compress.changes.Change#getEntry()",
        "org.apache.commons.compress.utils.ServiceLoaderIterator#next()",
        "org.apache.commons.compress.changes.Change.ChangeType.<staticinit>()",
        "org.apache.commons.compress.utils.ServiceLoaderIterator#remove()",
        "org.apache.commons.compress.changes.Change#getInputStream()",
        "org.apache.commons.compress.changes.Change#isReplaceMode()",
        "org.apache.commons.compress.changes.Change#getType()",
        "org.apache.commons.compress.utils.ServiceLoaderIterator#hasNext()"
    ],
    "org.apache.commons.compress.archivers.zip.AsiExtraField#getCentralDirectoryLength()": ["org.apache.commons.compress.archivers.zip.AsiExtraField#getLocalFileDataLength()"],
    "org.apache.commons.compress.archivers.zip.PKWareExtraHeader.EncryptionAlgorithm#EncryptionAlgorithm(int)": ["org.apache.commons.compress.archivers.zip.PKWareExtraHeader.EncryptionAlgorithm.<init>()"],
    "org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream#read()": [
        "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream#read()",
        "org.apache.commons.compress.archivers.sevenz.AES256SHA256Decoder.AES256SHA256DecoderInputStream#read()",
        "org.apache.commons.compress.compressors.xz.XZCompressorInputStream#read()",
        "org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorInputStream#read()",
        "org.apache.commons.compress.compressors.lz77support.AbstractLZ77CompressorInputStream#read()",
        "org.apache.commons.compress.compressors.deflate.DeflateCompressorInputStream#read()",
        "org.apache.commons.compress.archivers.zip.ExplodingInputStream#read()",
        "org.apache.commons.compress.compressors.lzma.LZMACompressorInputStream#read()",
        "org.apache.commons.compress.compressors.zstandard.ZstdCompressorInputStream#read()",
        "org.apache.commons.compress.archivers.sevenz.BoundedSeekableByteChannelInputStream#read()",
        "org.apache.commons.compress.utils.BoundedArchiveInputStream#read()",
        "org.apache.commons.compress.compressors.brotli.BrotliCompressorInputStream#read()",
        "org.apache.commons.compress.archivers.tar.TarArchiveSparseZeroInputStream#read()",
        "org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream#read()",
        "org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStream#read()",
        "org.apache.commons.compress.compressors.deflate64.Deflate64CompressorInputStream#read()",
        "org.apache.commons.compress.compressors.lzw.LZWInputStream#read()",
        "org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream#getInputStream()",
        "org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream#read()"
    ],
    "org.apache.commons.compress.compressors.deflate.DeflateCompressorInputStream#DeflateCompressorInputStream(InputStream,DeflateParameters)": [
        "org.apache.commons.compress.compressors.CompressorInputStream.<init>()",
        "org.apache.commons.compress.compressors.deflate.DeflateParameters#withZlibHeader()",
        "org.apache.commons.compress.compressors.deflate.DeflateCompressorInputStream.<init>()"
    ],
    "org.apache.commons.compress.compressors.bzip2.CRC#update(int,int)": ["org.apache.commons.compress.compressors.bzip2.CRC.<staticinit>()"],
    "org.apache.commons.compress.harmony.pack200.CPString#getIndexInCpUtf8()": ["org.apache.commons.compress.harmony.pack200.ConstantPoolEntry#getIndex()"],
    "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile#writeStreamsInfo(DataOutput)": [
        "org.apache.commons.compress.archivers.sevenz.NID.<staticinit>()",
        "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile#writePackInfo(DataOutput)",
        "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile#writeUnpackInfo(DataOutput)",
        "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile#writeSubStreamsInfo(DataOutput)"
    ],
    "org.apache.commons.compress.harmony.pack200.CpBands#addCPUtf8(String)": ["org.apache.commons.compress.harmony.pack200.CpBands#getCPUtf8(String)"],
    "org.apache.commons.compress.compressors.lz4.BlockLZ4CompressorOutputStream.Pair#setBackReference(BackReference)": [
        "org.apache.commons.compress.compressors.lz77support.LZ77Compressor.BackReference#getLength()",
        "org.apache.commons.compress.compressors.lz4.BlockLZ4CompressorOutputStream.Pair#hasBackReference()",
        "org.apache.commons.compress.compressors.lz77support.LZ77Compressor.BackReference#getOffset()"
    ],
    "org.apache.commons.compress.archivers.dump.DumpArchiveException#DumpArchiveException(String)": ["org.apache.commons.compress.archivers.dump.DumpArchiveException.<init>()"],
    "org.apache.commons.compress.compressors.lz77support.LZ77Compressor#finish()": [
        "org.apache.commons.compress.compressors.lz77support.LZ77Compressor.<staticinit>()",
        "org.apache.commons.compress.compressors.lz77support.LZ77Compressor#flushLiteralBlock()"
    ],
    "org.apache.commons.compress.harmony.unpack200.bytecode.CodeAttribute#CodeAttribute(int,int,byte[],Segment,OperandManager,List<ExceptionTableEntry>)": [
        "org.apache.commons.compress.harmony.unpack200.bytecode.ByteCode#extractOperands(OperandManager,Segment,int)",
        "org.apache.commons.compress.harmony.unpack200.bytecode.CodeAttribute.<init>()",
        "org.apache.commons.compress.harmony.unpack200.bytecode.ByteCode#setByteCodeIndex(int)",
        "org.apache.commons.compress.harmony.unpack200.bytecode.ByteCode#getLength()",
        "org.apache.commons.compress.harmony.unpack200.bytecode.ByteCode#getOpcode()",
        "org.apache.commons.compress.harmony.unpack200.bytecode.ByteCode#hasMultipleByteCodes()",
        "org.apache.commons.compress.harmony.unpack200.bytecode.ByteCode.getByteCode(int)",
        "org.apache.commons.compress.harmony.unpack200.bytecode.ByteCode#applyByteCodeTargetFixup(CodeAttribute)",
        "org.apache.commons.compress.harmony.unpack200.bytecode.BCIRenumberedAttribute#BCIRenumberedAttribute(CPUTF8)",
        "org.apache.commons.compress.harmony.unpack200.bytecode.CodeAttribute.<staticinit>()"
    ],
    "org.apache.commons.compress.harmony.unpack200.CpBands.<init>()": ["org.apache.commons.compress.harmony.unpack200.SegmentConstantPool#SegmentConstantPool(CpBands)"],
    "org.apache.commons.compress.compressors.zstandard.ZstdCompressorInputStream#ZstdCompressorInputStream(InputStream)": [
        "org.apache.commons.compress.compressors.CompressorInputStream.<init>()",
        "org.apache.commons.compress.compressors.zstandard.ZstdCompressorInputStream.<init>()"
    ],
    "org.apache.commons.compress.harmony.unpack200.bytecode.DeprecatedAttribute.setAttributeName(CPUTF8)": ["org.apache.commons.compress.harmony.unpack200.bytecode.DeprecatedAttribute.<staticinit>()"],
    "org.apache.commons.compress.harmony.pack200.BandSet#encodeWithPopulationCodec(String,int[],BHSDCodec,BandData,BandAnalysisResults)": [
        "org.apache.commons.compress.harmony.pack200.Codec.<staticinit>()",
        "org.apache.commons.compress.harmony.pack200.BHSDCodec#getS()",
        "org.apache.commons.compress.harmony.pack200.Codec#encode(int[])",
        "org.apache.commons.compress.harmony.pack200.BHSDCodec#isDelta()",
        "org.apache.commons.compress.harmony.pack200.BHSDCodec#getL()",
        "org.apache.commons.compress.harmony.pack200.IntList#add(int)",
        "org.apache.commons.compress.harmony.pack200.PopulationCodec#PopulationCodec(Codec,Codec,Codec)",
        "org.apache.commons.compress.harmony.pack200.PopulationCodec#PopulationCodec(Codec,int,Codec)",
        "org.apache.commons.compress.harmony.pack200.BHSDCodec#getH()",
        "org.apache.commons.compress.harmony.pack200.BHSDCodec#BHSDCodec(int,int)",
        "org.apache.commons.compress.harmony.pack200.BHSDCodec#getB()",
        "org.apache.commons.compress.harmony.pack200.BHSDCodec#largest()",
        "org.apache.commons.compress.harmony.pack200.CodecEncoding.getSpecifier(Codec,Codec)",
        "org.apache.commons.compress.harmony.pack200.BandSet#analyseBand(String,int[],BHSDCodec)",
        "org.apache.commons.compress.harmony.pack200.IntList#IntList()",
        "org.apache.commons.compress.harmony.pack200.IntList#IntList(int)",
        "org.apache.commons.compress.harmony.pack200.IntList#toArray()",
        "org.apache.commons.compress.harmony.pack200.BHSDCodec#isSigned()",
        "org.apache.commons.compress.harmony.pack200.BandSet#integerListToArray(List<Integer>)"
    ],
    "org.apache.commons.compress.archivers.sevenz.Coders.Deflate64Decoder#decode(String,InputStream,long,Coder,byte[],int)": ["org.apache.commons.compress.compressors.deflate64.Deflate64CompressorInputStream#Deflate64CompressorInputStream(InputStream)"],
    "org.apache.commons.compress.harmony.unpack200.bytecode.CPFieldRef#hashCode()": ["org.apache.commons.compress.harmony.unpack200.bytecode.CPFieldRef#generateHashCode()"],
    "org.apache.commons.compress.archivers.dump.DumpArchiveUtil.convert32(byte[],int)": ["org.apache.commons.compress.utils.ByteUtils.fromLittleEndian(byte[],int,int)"],
    "org.apache.commons.compress.compressors.xz.XZCompressorInputStream#skip(long)": ["org.apache.commons.compress.MemoryLimitException#MemoryLimitException(long,int,Exception)"],
    "org.apache.commons.compress.compressors.zstandard.ZstdCompressorInputStream#read()": ["org.apache.commons.compress.compressors.CompressorInputStream#count(int)"],
    "org.apache.commons.compress.archivers.zip.ZipEightByteInteger#equals(Object)": ["org.apache.commons.compress.archivers.zip.ZipEightByteInteger#getValue()"],
    "org.apache.commons.compress.archivers.zip.UnrecognizedExtraField#getLocalFileDataData()": ["org.apache.commons.compress.archivers.zip.ZipUtil.copy(byte[])"],
    "org.apache.commons.compress.archivers.dump.DumpArchiveInputStream#DumpArchiveInputStream(InputStream,String)": [
        "org.apache.commons.compress.archivers.dump.DumpArchiveInputStream.<init>()",
        "org.apache.commons.compress.archivers.ArchiveInputStream#ArchiveInputStream(InputStream,String)",
        "org.apache.commons.compress.archivers.dump.DumpArchiveSummary#isCompressed()",
        "org.apache.commons.compress.archivers.dump.DumpArchiveEntry#getOriginalName()",
        "org.apache.commons.compress.archivers.dump.UnrecognizedFormatException#UnrecognizedFormatException()",
        "org.apache.commons.compress.archivers.dump.TapeInputStream#readRecord()",
        "org.apache.commons.compress.archivers.ArchiveException#ArchiveException(String,Exception)",
        "org.apache.commons.compress.archivers.dump.DumpArchiveUtil.verify(byte[])",
        "org.apache.commons.compress.archivers.dump.TapeInputStream#TapeInputStream(InputStream)",
        "org.apache.commons.compress.archivers.zip.ZipEncodingHelper.getZipEncoding(String)",
        "org.apache.commons.compress.archivers.dump.TapeInputStream#resetBlockSize(int,boolean)",
        "org.apache.commons.compress.archivers.dump.DumpArchiveInputStream#readBITS()",
        "org.apache.commons.compress.archivers.dump.DumpArchiveInputStream#readCLRI()",
        "org.apache.commons.compress.archivers.dump.DumpArchiveSummary#getNTRec()",
        "org.apache.commons.compress.archivers.dump.DumpArchiveSummary#DumpArchiveSummary(byte[],ZipEncoding)",
        "org.apache.commons.compress.archivers.dump.Dirent#Dirent(int,int,int,String)",
        "org.apache.commons.compress.archivers.dump.DumpArchiveInputStream.<staticinit>()",
        "org.apache.commons.compress.archivers.dump.DumpArchiveConstants.<staticinit>()"
    ],
    "org.apache.commons.compress.harmony.unpack200.BandSet#parseCPUTF8References(String,InputStream,BHSDCodec,int[])": [
        "org.apache.commons.compress.harmony.unpack200.Segment#getCpBands()",
        "org.apache.commons.compress.harmony.unpack200.BandSet#decodeBandInt(String,InputStream,BHSDCodec,int)",
        "org.apache.commons.compress.harmony.unpack200.CpBands#cpUTF8Value(int)"
    ],
    "org.apache.commons.compress.archivers.dump.DumpArchiveConstants.COMPRESSION_TYPE.find(int)": ["org.apache.commons.compress.archivers.dump.DumpArchiveConstants.COMPRESSION_TYPE.<staticinit>()"],
    "org.apache.commons.compress.compressors.lz77support.LZ77Compressor#insertString(int)": [
        "org.apache.commons.compress.compressors.lz77support.LZ77Compressor#nextHash(int,byte)",
        "org.apache.commons.compress.compressors.lz77support.LZ77Compressor.<staticinit>()"
    ],
    "org.apache.commons.compress.archivers.tar.TarUtils.formatCheckSumOctalBytes(long,byte[],int,int)": ["org.apache.commons.compress.archivers.tar.TarUtils.formatUnsignedOctalString(long,byte[],int,int)"],
    "org.apache.commons.compress.harmony.pack200.BHSDCodec#decode(InputStream,long)": [
        "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream#read()",
        "org.apache.commons.compress.archivers.sevenz.AES256SHA256Decoder.AES256SHA256DecoderInputStream#read()",
        "org.apache.commons.compress.compressors.xz.XZCompressorInputStream#read()",
        "org.apache.commons.compress.harmony.pack200.BHSDCodec#isDelta()",
        "org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorInputStream#read()",
        "org.apache.commons.compress.compressors.lz77support.AbstractLZ77CompressorInputStream#read()",
        "org.apache.commons.compress.compressors.deflate.DeflateCompressorInputStream#read()",
        "org.apache.commons.compress.archivers.zip.ExplodingInputStream#read()",
        "org.apache.commons.compress.compressors.lzma.LZMACompressorInputStream#read()",
        "org.apache.commons.compress.compressors.zstandard.ZstdCompressorInputStream#read()",
        "org.apache.commons.compress.archivers.sevenz.BoundedSeekableByteChannelInputStream#read()",
        "org.apache.commons.compress.utils.BoundedArchiveInputStream#read()",
        "org.apache.commons.compress.compressors.brotli.BrotliCompressorInputStream#read()",
        "org.apache.commons.compress.archivers.tar.TarArchiveSparseZeroInputStream#read()",
        "org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream#read()",
        "org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStream#read()",
        "org.apache.commons.compress.compressors.deflate64.Deflate64CompressorInputStream#read()",
        "org.apache.commons.compress.compressors.lzw.LZWInputStream#read()",
        "org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream#read()",
        "org.apache.commons.compress.harmony.pack200.BHSDCodec#isSigned()"
    ],
    "org.apache.commons.compress.archivers.sevenz.SevenZFile#buildDecodingStream(int,boolean)": [
        "org.apache.commons.compress.archivers.sevenz.SevenZFile#reopenFolderInputStream(int,SevenZArchiveEntry)",
        "org.apache.commons.compress.utils.CRC32VerifyingInputStream#CRC32VerifyingInputStream(InputStream,long,long)",
        "org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry#getCrcValue()",
        "org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry#getSize()",
        "org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry#getHasCrc()",
        "org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry#setContentMethods(Iterable<? extends SevenZMethodConfiguration>)",
        "org.apache.commons.compress.utils.BoundedInputStream#BoundedInputStream(InputStream,long)",
        "org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry#getContentMethods()",
        "org.apache.commons.compress.archivers.sevenz.SevenZFile#skipEntriesWhenNeeded(int,boolean,int)"
    ],
    "org.apache.commons.compress.archivers.zip.GeneralPurposeBit#encode()": ["org.apache.commons.compress.archivers.zip.GeneralPurposeBit#encode(byte[],int)"],
    "org.apache.commons.compress.harmony.unpack200.bytecode.forms.SingleByteReferenceForm#SingleByteReferenceForm(int,String,int[])": [
        "org.apache.commons.compress.harmony.unpack200.bytecode.forms.SingleByteReferenceForm.<init>()",
        "org.apache.commons.compress.harmony.unpack200.bytecode.forms.ReferenceForm#ReferenceForm(int,String,int[])"
    ],
    "org.apache.commons.compress.harmony.unpack200.NewAttributeBands.Union#readBands(InputStream,int)": [
        "org.apache.commons.compress.harmony.unpack200.NewAttributeBands.Union#readBands(InputStream,int)",
        "org.apache.commons.compress.harmony.unpack200.NewAttributeBands.Reference#readBands(InputStream,int)",
        "org.apache.commons.compress.harmony.unpack200.NewAttributeBands.Callable#readBands(InputStream,int)",
        "org.apache.commons.compress.harmony.unpack200.NewAttributeBands.UnionCase#readBands(InputStream,int)",
        "org.apache.commons.compress.harmony.unpack200.NewAttributeBands.Integral#readBands(InputStream,int)",
        "org.apache.commons.compress.harmony.unpack200.NewAttributeBands.Call#readBands(InputStream,int)",
        "org.apache.commons.compress.harmony.unpack200.NewAttributeBands.UnionCase#hasTag(int)",
        "org.apache.commons.compress.harmony.unpack200.NewAttributeBands.Replication#readBands(InputStream,int)"
    ],
    "org.apache.commons.compress.harmony.unpack200.bytecode.ClassFile.<init>()": ["org.apache.commons.compress.harmony.unpack200.bytecode.ClassConstantPool.<init>()"],
    "org.apache.commons.compress.archivers.zip.ZipSplitOutputStream#prepareToWriteUnsplittableContent(long)": ["org.apache.commons.compress.archivers.zip.ZipSplitOutputStream#openNewSplitSegment()"],
    "org.apache.commons.compress.archivers.zip.ResourceAlignmentExtraField#ResourceAlignmentExtraField()": ["org.apache.commons.compress.archivers.zip.ResourceAlignmentExtraField.<init>()"],
    "org.apache.commons.compress.harmony.pack200.CpBands#writeCpClass(OutputStream)": [
        "org.apache.commons.compress.harmony.pack200.CPClass#getIndexInCpUtf8()",
        "org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream#write(byte[])",
        "org.apache.commons.compress.archivers.sevenz.Coders.DeflateDecoder.DeflateDecoderOutputStream#write(byte[])",
        "org.apache.commons.compress.harmony.pack200.BandSet#encodeBandInt(String,int[],BHSDCodec)",
        "org.apache.commons.compress.harmony.pack200.Codec.<staticinit>()",
        "org.apache.commons.compress.harmony.pack200.PackingUtils.log(String)",
        "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.OutputStreamWrapper#write(byte[])",
        "org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream#write(byte[])",
        "org.apache.commons.compress.archivers.zip.ZipSplitOutputStream#write(byte[])"
    ],
    "org.apache.commons.compress.utils.FixedLengthBlockOutputStream#isOpen()": [
        "org.apache.commons.compress.utils.FixedLengthBlockOutputStream#isOpen()",
        "org.apache.commons.compress.utils.FixedLengthBlockOutputStream.BufferAtATimeOutputChannel#isOpen()"
    ],
    "org.apache.commons.compress.archivers.cpio.CpioArchiveEntry#CpioArchiveEntry(short,Path,String,LinkOption[]...)": [
        "org.apache.commons.compress.archivers.cpio.CpioArchiveEntry#setMode(long)",
        "org.apache.commons.compress.archivers.cpio.CpioArchiveEntry#setTime(FileTime)",
        "org.apache.commons.compress.archivers.cpio.CpioArchiveEntry#CpioArchiveEntry(short,String,long)",
        "org.apache.commons.compress.archivers.cpio.CpioConstants.<staticinit>()"
    ],
    "org.apache.commons.compress.harmony.pack200.SegmentHeader#pack(OutputStream)": [
        "org.apache.commons.compress.harmony.pack200.SegmentHeader#writeArchiveFileCounts(OutputStream)",
        "org.apache.commons.compress.harmony.pack200.Codec.<staticinit>()",
        "org.apache.commons.compress.harmony.pack200.SegmentHeader.<staticinit>()",
        "org.apache.commons.compress.harmony.pack200.SegmentHeader#writeCpCounts(OutputStream)",
        "org.apache.commons.compress.harmony.pack200.IntList#size()",
        "org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream#write(byte[])",
        "org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream#write(byte[])",
        "org.apache.commons.compress.archivers.sevenz.Coders.DeflateDecoder.DeflateDecoderOutputStream#write(byte[])",
        "org.apache.commons.compress.harmony.pack200.BandSet#encodeScalar(int,BHSDCodec)",
        "org.apache.commons.compress.harmony.pack200.SegmentHeader#writeClassCounts(OutputStream)",
        "org.apache.commons.compress.harmony.pack200.SegmentHeader#writeArchiveSpecialCounts(OutputStream)",
        "org.apache.commons.compress.harmony.pack200.BandSet#encodeScalar(int[],BHSDCodec)",
        "org.apache.commons.compress.harmony.pack200.SegmentHeader#calculateArchiveOptions()",
        "org.apache.commons.compress.harmony.pack200.IntList#toArray()",
        "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.OutputStreamWrapper#write(byte[])",
        "org.apache.commons.compress.archivers.zip.ZipSplitOutputStream#write(byte[])"
    ],
    "org.apache.commons.compress.archivers.tar.TarArchiveInputStream#TarArchiveInputStream(InputStream)": [
        "org.apache.commons.compress.archivers.tar.TarConstants.<staticinit>()",
        "org.apache.commons.compress.archivers.tar.TarArchiveInputStream#TarArchiveInputStream(InputStream,int,int)"
    ],
    "org.apache.commons.compress.changes.ChangeSetPerformer#isDeletedLater(Set<Change<E extends ArchiveEntry>>,E extends ArchiveEntry)": [
        "org.apache.commons.compress.changes.Change#getType()",
        "org.apache.commons.compress.changes.Change.ChangeType.<staticinit>()",
        "org.apache.commons.compress.changes.Change#getTargetFileName()"
    ],
    "org.apache.commons.compress.archivers.tar.TarArchiveEntry#isFIFO()": ["org.apache.commons.compress.archivers.tar.TarConstants.<staticinit>()"],
    "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream#usesDataDescriptor(int,boolean)": ["org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.<staticinit>()"],
    "org.apache.commons.compress.harmony.unpack200.CpBands#read(InputStream)": [
        "org.apache.commons.compress.harmony.unpack200.CpBands#parseCpFloat(InputStream)",
        "org.apache.commons.compress.harmony.unpack200.CpBands#parseCpDouble(InputStream)",
        "org.apache.commons.compress.harmony.unpack200.CpBands#parseCpField(InputStream)",
        "org.apache.commons.compress.harmony.unpack200.CpBands#parseCpMethod(InputStream)",
        "org.apache.commons.compress.harmony.unpack200.CpBands#parseCpSignature(InputStream)",
        "org.apache.commons.compress.harmony.unpack200.CpBands#parseCpIMethod(InputStream)",
        "org.apache.commons.compress.harmony.unpack200.CpBands#parseCpInt(InputStream)",
        "org.apache.commons.compress.harmony.unpack200.CpBands#parseCpClass(InputStream)",
        "org.apache.commons.compress.harmony.unpack200.CpBands#parseCpLong(InputStream)",
        "org.apache.commons.compress.harmony.unpack200.CpBands#parseCpUtf8(InputStream)",
        "org.apache.commons.compress.harmony.unpack200.CpBands#parseCpString(InputStream)",
        "org.apache.commons.compress.harmony.unpack200.CpBands#parseCpDescriptor(InputStream)"
    ],
    "org.apache.commons.compress.harmony.pack200.MetadataBandGroup#newEntryInAnnoN()": ["org.apache.commons.compress.harmony.pack200.IntList#add(int)"],
    "org.apache.commons.compress.harmony.unpack200.bytecode.LineNumberTableAttribute.setAttributeName(CPUTF8)": ["org.apache.commons.compress.harmony.unpack200.bytecode.LineNumberTableAttribute.<staticinit>()"],
    "org.apache.commons.compress.archivers.sevenz.Coders$HashMap$1.<init>()": [
        "org.apache.commons.compress.archivers.sevenz.DeltaDecoder#DeltaDecoder()",
        "org.apache.commons.compress.archivers.sevenz.Coders.DeflateDecoder#DeflateDecoder()",
        "org.apache.commons.compress.archivers.sevenz.SevenZMethod.<staticinit>()",
        "org.apache.commons.compress.archivers.sevenz.LZMA2Decoder#LZMA2Decoder()",
        "org.apache.commons.compress.archivers.sevenz.Coders.CopyDecoder.<init>()",
        "org.apache.commons.compress.archivers.sevenz.Coders.Deflate64Decoder#Deflate64Decoder()",
        "org.apache.commons.compress.archivers.sevenz.LZMADecoder#LZMADecoder()",
        "org.apache.commons.compress.archivers.sevenz.Coders.BCJDecoder#BCJDecoder(FilterOptions)",
        "org.apache.commons.compress.archivers.sevenz.Coders.BZIP2Decoder#BZIP2Decoder()",
        "org.apache.commons.compress.archivers.sevenz.AES256SHA256Decoder#AES256SHA256Decoder()"
    ],
    "org.apache.commons.compress.archivers.tar.TarArchiveInputStream#applyPaxHeadersToCurrentEntry(Map<String, String>,List<TarArchiveStructSparse>)": [
        "org.apache.commons.compress.archivers.tar.TarArchiveEntry#setSparseHeaders(List<TarArchiveStructSparse>)",
        "org.apache.commons.compress.archivers.tar.TarArchiveEntry#updateEntryFromPaxHeaders(Map<String, String>)"
    ],
    "org.apache.commons.compress.harmony.unpack200.MetadataBandGroup#getAttribute(int,CPUTF8[],int[],Iterator<CPUTF8>)": [
        "org.apache.commons.compress.harmony.unpack200.MetadataBandGroup.<staticinit>()",
        "org.apache.commons.compress.harmony.unpack200.bytecode.RuntimeVisibleorInvisibleAnnotationsAttribute#RuntimeVisibleorInvisibleAnnotationsAttribute(CPUTF8,Annotation[])",
        "org.apache.commons.compress.harmony.unpack200.MetadataBandGroup#getAnnotation(CPUTF8,int,Iterator<CPUTF8>)"
    ],
    "org.apache.commons.compress.archivers.zip.ZipArchiveEntry#removeUnparseableExtraFieldData()": ["org.apache.commons.compress.archivers.zip.ZipArchiveEntry#setExtra()"],
    "org.apache.commons.compress.archivers.zip.ZipMethod.<staticinit>()": ["org.apache.commons.compress.archivers.zip.ZipMethod#getCode()"],
    "org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStream#available()": ["org.apache.commons.compress.compressors.lz77support.AbstractLZ77CompressorInputStream#available()"],
    "org.apache.commons.compress.archivers.ar.ArArchiveInputStream#getNextEntry()": ["org.apache.commons.compress.archivers.ar.ArArchiveInputStream#getNextArEntry()"],
    "org.apache.commons.compress.harmony.unpack200.BandSet#parseCPFieldRefReferences(String,InputStream,BHSDCodec,int)": [
        "org.apache.commons.compress.harmony.unpack200.BandSet#decodeBandInt(String,InputStream,BHSDCodec,int)",
        "org.apache.commons.compress.harmony.unpack200.Segment#getCpBands()",
        "org.apache.commons.compress.harmony.unpack200.CpBands#cpFieldValue(int)"
    ],
    "org.apache.commons.compress.harmony.unpack200.AttributeLayoutMap.getDefaultAttributeLayouts()": [
        "org.apache.commons.compress.harmony.unpack200.AttributeLayout.<staticinit>()",
        "org.apache.commons.compress.harmony.unpack200.AttributeLayout#AttributeLayout(String,int,String,int)"
    ],
    "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.chooseBlockSize(long)": ["org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.<staticinit>()"],
    "org.apache.commons.compress.archivers.zip.ZipUtil.getUnicodeStringIfOriginalMatches(AbstractUnicodeExtraField,byte[])": [
        "org.apache.commons.compress.archivers.zip.NioZipEncoding#decode(byte[])",
        "org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField#getNameCRC32()",
        "org.apache.commons.compress.archivers.zip.ZipEncodingHelper.<staticinit>()",
        "org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField#getUnicodeName()",
        "org.apache.commons.compress.archivers.tar.TarUtils$ZipEncoding$1#decode(byte[])"
    ],
    "org.apache.commons.compress.archivers.zip.ZipEightByteInteger.getValue(byte[])": ["org.apache.commons.compress.archivers.zip.ZipEightByteInteger.getValue(byte[],int)"],
    "org.apache.commons.compress.archivers.zip.ZipSplitOutputStream#writeZipSplitSignature()": ["org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.<staticinit>()"],
    "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream#findEocdRecord()": [
        "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream#readOneByte()",
        "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream#isFirstByteOfEocdSig(int)",
        "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.<staticinit>()"
    ],
    "org.apache.commons.compress.compressors.pack200.Pack200Utils.normalize(File,Map<String, String>)": ["org.apache.commons.compress.compressors.pack200.Pack200Utils.normalize(File,File,Map<String, String>)"],
    "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.<init>()": [
        "org.apache.commons.compress.archivers.zip.ZipEncodingHelper.getZipEncoding(Charset)",
        "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.<staticinit>()",
        "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.UnicodeExtraFieldPolicy.<staticinit>()",
        "org.apache.commons.compress.archivers.zip.Zip64Mode.<staticinit>()"
    ],
    "org.apache.commons.compress.harmony.unpack200.bytecode.CPLong#CPLong(Long,int)": [
        "org.apache.commons.compress.harmony.unpack200.bytecode.ConstantPoolEntry.<staticinit>()",
        "org.apache.commons.compress.harmony.unpack200.bytecode.CPConstantNumber#CPConstantNumber(byte,Object,int)",
        "org.apache.commons.compress.harmony.unpack200.bytecode.CPLong.<init>()"
    ],
    "org.apache.commons.compress.archivers.zip.ZipLong.getValue(byte[])": ["org.apache.commons.compress.archivers.zip.ZipLong.getValue(byte[],int)"],
    "org.apache.commons.compress.harmony.pack200.Segment.SegmentMethodVisitor#visitEnd()": [
        "org.apache.commons.compress.harmony.pack200.BcBands#visitEnd()",
        "org.apache.commons.compress.harmony.pack200.ClassBands#endOfMethod()"
    ],
    "org.apache.commons.compress.harmony.pack200.NewAttributeBands.UnionCase#UnionCase(List<Integer>)": [
        "org.apache.commons.compress.harmony.pack200.NewAttributeBands.LayoutElement.<init>()",
        "org.apache.commons.compress.harmony.pack200.NewAttributeBands.UnionCase.<init>()"
    ],
    "org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry#getAccessDate()": ["org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry#getAccessTime()"],
    "org.apache.commons.compress.archivers.tar.TarFile#buildSparseInputStreams()": [
        "org.apache.commons.compress.utils.BoundedSeekableByteChannelInputStream#BoundedSeekableByteChannelInputStream(long,long,SeekableByteChannel)",
        "org.apache.commons.compress.archivers.tar.TarArchiveEntry#getDataOffset()",
        "org.apache.commons.compress.archivers.tar.TarArchiveSparseZeroInputStream.<init>()",
        "org.apache.commons.compress.archivers.tar.TarArchiveEntry#getOrderedSparseHeaders()",
        "org.apache.commons.compress.archivers.tar.TarArchiveStructSparse#getOffset()",
        "org.apache.commons.compress.archivers.tar.TarArchiveEntry#getName()",
        "org.apache.commons.compress.utils.BoundedInputStream#BoundedInputStream(InputStream,long)",
        "org.apache.commons.compress.archivers.tar.TarArchiveStructSparse#getNumbytes()"
    ],
    "org.apache.commons.compress.archivers.zip.ZipArchiveEntry#setLastModifiedTime(FileTime)": [
        "org.apache.commons.compress.archivers.zip.ZipArchiveEntry#setExtraTimeFields()",
        "org.apache.commons.compress.archivers.zip.ZipArchiveEntry#internalSetLastModifiedTime(FileTime)"
    ],
    "org.apache.commons.compress.compressors.zstandard.ZstdCompressorInputStream#read(byte[])": ["org.apache.commons.compress.compressors.zstandard.ZstdCompressorInputStream#read(byte[],int,int)"],
    "org.apache.commons.compress.archivers.zip.X000A_NTFS.zipToDate(ZipEightByteInteger)": [
        "org.apache.commons.compress.archivers.zip.ZipEightByteInteger#getLongValue()",
        "org.apache.commons.compress.archivers.zip.ZipEightByteInteger.<staticinit>()",
        "org.apache.commons.compress.archivers.zip.ZipEightByteInteger#equals(Object)"
    ],
    "org.apache.commons.compress.archivers.zip.ExtraFieldUtils.parse(byte[],boolean)": [
        "org.apache.commons.compress.archivers.zip.ExtraFieldUtils.parse(byte[],boolean,UnparseableExtraField)",
        "org.apache.commons.compress.archivers.zip.ExtraFieldUtils.UnparseableExtraField.<staticinit>()"
    ],
    "org.apache.commons.compress.harmony.unpack200.NewAttributeBands.Reference#addToAttribute(int,NewAttribute)": ["org.apache.commons.compress.harmony.unpack200.bytecode.NewAttribute#addToBody(int,Object)"],
    "org.apache.commons.compress.archivers.tar.TarArchiveEntry#getRealSize()": [
        "org.apache.commons.compress.archivers.tar.TarArchiveEntry#getSize()",
        "org.apache.commons.compress.archivers.tar.TarArchiveEntry#isSparse()"
    ],
    "org.apache.commons.compress.archivers.ArchiveOutputStream#write(int)": ["org.apache.commons.compress.archivers.ArchiveOutputStream.<staticinit>()"],
    "org.apache.commons.compress.archivers.tar.TarArchiveEntry#TarArchiveEntry(Path)": ["org.apache.commons.compress.archivers.tar.TarArchiveEntry#TarArchiveEntry(File,String)"],
    "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.OutputStreamWrapper#write(byte[])": ["org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.OutputStreamWrapper#write(byte[],int,int)"],
    "org.apache.commons.compress.archivers.tar.TarFile.<init>()": ["org.apache.commons.compress.archivers.tar.TarFile.<staticinit>()"],
    "org.apache.commons.compress.harmony.unpack200.bytecode.NewAttribute#toString()": ["org.apache.commons.compress.harmony.unpack200.bytecode.CPUTF8#underlyingString()"],
    "org.apache.commons.compress.archivers.sevenz.SevenZFile#getNextEntry()": [
        "org.apache.commons.compress.archivers.sevenz.SevenZFile#buildDecodingStream(int,boolean)",
        "org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry#setName(String)",
        "org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry#getName()",
        "org.apache.commons.compress.archivers.sevenz.SevenZFile#getDefaultName()"
    ],
    "org.apache.commons.compress.harmony.unpack200.NewAttributeBands.Integral#addToAttribute(int,NewAttribute)": [
        "org.apache.commons.compress.harmony.unpack200.bytecode.NewAttribute#addInteger(int,long)",
        "org.apache.commons.compress.harmony.unpack200.bytecode.NewAttribute#addBCIndex(int,int)",
        "org.apache.commons.compress.harmony.unpack200.bytecode.NewAttribute#addBCLength(int,int)",
        "org.apache.commons.compress.harmony.unpack200.NewAttributeBands.LayoutElement#getLength(char)",
        "org.apache.commons.compress.harmony.unpack200.bytecode.NewAttribute#addBCOffset(int,int)"
    ],
    "org.apache.commons.compress.archivers.zip.ExplodingInputStream.<init>()": ["org.apache.commons.compress.archivers.zip.CircularBuffer#CircularBuffer(int)"],
    "org.apache.commons.compress.harmony.pack200.Archive#pack()": [
        "org.apache.commons.compress.harmony.pack200.PackingOptions#getEffort()",
        "org.apache.commons.compress.harmony.pack200.Archive#doNormalPack()",
        "org.apache.commons.compress.harmony.pack200.Archive#doZeroEffortPack()"
    ],
    "org.apache.commons.compress.archivers.zip.ExtraFieldUtils.parse(byte[],boolean,UnparseableExtraField)$ExtraFieldParsingBehavior$1#onUnparseableExtraField(byte[],int,int,boolean,int)": ["org.apache.commons.compress.archivers.zip.ExtraFieldUtils.UnparseableExtraField#onUnparseableExtraField(byte[],int,int,boolean,int)"],
    "org.apache.commons.compress.archivers.dump.DumpArchiveConstants#DumpArchiveConstants()": ["org.apache.commons.compress.archivers.dump.DumpArchiveConstants.<init>()"],
    "org.apache.commons.compress.harmony.pack200.CpBands#getCPMethod(CPClass,String,String)": [
        "org.apache.commons.compress.harmony.pack200.CpBands#getCPNameAndType(String,String)",
        "org.apache.commons.compress.harmony.pack200.CPMethodOrField#CPMethodOrField(CPClass,CPNameAndType)",
        "org.apache.commons.compress.harmony.pack200.CPClass#toString()"
    ],
    "org.apache.commons.compress.harmony.archive.internal.nls.Messages.getString(String,Object,Object)": ["org.apache.commons.compress.harmony.archive.internal.nls.Messages.getString(String,Object[])"],
    "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream#flush()": [
        "org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream#flush()",
        "org.apache.commons.compress.archivers.sevenz.AES256SHA256Decoder.AES256SHA256DecoderOutputStream#flush()",
        "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream#flush()",
        "org.apache.commons.compress.compressors.deflate.DeflateCompressorOutputStream#flush()",
        "org.apache.commons.compress.compressors.zstandard.ZstdCompressorOutputStream#flush()",
        "org.apache.commons.compress.compressors.lzma.LZMACompressorOutputStream#flush()",
        "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream#flush()",
        "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.OutputStreamWrapper#flush()",
        "org.apache.commons.compress.compressors.xz.XZCompressorOutputStream#flush()",
        "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream#flush()"
    ],
    "org.apache.commons.compress.archivers.sevenz.SevenZFile#SevenZFile(SeekableByteChannel,char[],SevenZFileOptions)": [
        "org.apache.commons.compress.archivers.sevenz.SevenZFile.<staticinit>()",
        "org.apache.commons.compress.archivers.sevenz.SevenZFile#SevenZFile(SeekableByteChannel,String,char[],SevenZFileOptions)"
    ],
    "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile#SevenZOutputFile(File)": ["org.apache.commons.compress.archivers.sevenz.SevenZOutputFile#SevenZOutputFile(File,char[])"],
    "org.apache.commons.compress.archivers.sevenz.Coders.findByMethod(SevenZMethod)": ["org.apache.commons.compress.archivers.sevenz.Coders.<staticinit>()"],
    "org.apache.commons.compress.harmony.unpack200.CpBands#cpUTF8Value(int)": [
        "org.apache.commons.compress.harmony.unpack200.bytecode.CPUTF8#setGlobalIndex(int)",
        "org.apache.commons.compress.harmony.unpack200.bytecode.CPUTF8#CPUTF8(String,int)",
        "org.apache.commons.compress.harmony.unpack200.bytecode.ConstantPoolEntry#getGlobalIndex()"
    ],
    "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.Data.<init>()": ["org.apache.commons.compress.compressors.bzip2.BZip2Constants.<staticinit>()"],
    "org.apache.commons.compress.archivers.zip.ZipArchiveEntryRequest#ZipArchiveEntryRequest(ZipArchiveEntry,InputStreamSupplier)": [
        "org.apache.commons.compress.archivers.zip.ZipArchiveEntryRequest.<init>()",
        "org.apache.commons.compress.archivers.zip.ZipArchiveEntry#getMethod()"
    ],
    "org.apache.commons.compress.harmony.pack200.IcBands.IcTuple#toString()": ["org.apache.commons.compress.harmony.pack200.CPClass#toString()"],
    "org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp#setCreateTime(ZipLong)": ["org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp.<staticinit>()"],
    "org.apache.commons.compress.compressors.snappy.SnappyCompressorOutputStream#writeLiteralBlock(LiteralBlock)": [
        "org.apache.commons.compress.compressors.snappy.SnappyCompressorOutputStream#writeLiteralBlockFourSizeBytes(LiteralBlock,int)",
        "org.apache.commons.compress.compressors.snappy.SnappyCompressorOutputStream#writeLiteralBlockTwoSizeBytes(LiteralBlock,int)",
        "org.apache.commons.compress.compressors.snappy.SnappyCompressorOutputStream#writeLiteralBlockThreeSizeBytes(LiteralBlock,int)",
        "org.apache.commons.compress.compressors.snappy.SnappyCompressorOutputStream#writeLiteralBlockOneSizeByte(LiteralBlock,int)",
        "org.apache.commons.compress.compressors.lz77support.LZ77Compressor.LiteralBlock#getLength()",
        "org.apache.commons.compress.compressors.snappy.SnappyCompressorOutputStream#writeLiteralBlockNoSizeBytes(LiteralBlock,int)",
        "org.apache.commons.compress.compressors.snappy.SnappyCompressorOutputStream.<staticinit>()"
    ],
    "org.apache.commons.compress.compressors.bzip2.BlockSort#fvswap(int[],int,int,int)": ["org.apache.commons.compress.compressors.bzip2.BlockSort#fswap(int[],int,int)"],
    "org.apache.commons.compress.harmony.pack200.CpBands#getCPMethod(String,String,String)": [
        "org.apache.commons.compress.harmony.pack200.CpBands#getCPClass(String)",
        "org.apache.commons.compress.harmony.pack200.CpBands#getCPMethod(CPClass,String,String)"
    ],
    "org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStream#readStreamIdentifier()": [
        "org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStream.matches(byte[],int)",
        "org.apache.commons.compress.utils.IOUtils.readFully(InputStream,byte[])",
        "org.apache.commons.compress.compressors.CompressorInputStream#count(int)"
    ],
    "org.apache.commons.compress.harmony.unpack200.Segment#writeJar(JarOutputStream)": [
        "org.apache.commons.compress.harmony.unpack200.FileBands#getFileName()",
        "org.apache.commons.compress.harmony.unpack200.FileBands#getFileModtime()",
        "org.apache.commons.compress.harmony.unpack200.SegmentHeader#getNumberOfFiles()",
        "org.apache.commons.compress.harmony.unpack200.FileBands#getFileBits()",
        "org.apache.commons.compress.harmony.unpack200.SegmentHeader#getArchiveModtime()",
        "org.apache.commons.compress.harmony.unpack200.FileBands#getFileSize()"
    ],
    "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream#rewriteSizesAndCrc(boolean)": [
        "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream#versionNeededToExtract(int,boolean,boolean)",
        "org.apache.commons.compress.archivers.zip.ZipEightByteInteger.getBytes(BigInteger)",
        "org.apache.commons.compress.archivers.zip.ZipArchiveEntry#getDiskNumberStart()",
        "org.apache.commons.compress.archivers.zip.ZipShort.getBytes(int)",
        "org.apache.commons.compress.archivers.zip.ZipSplitOutputStream#calculateDiskPosition(long,long)",
        "org.apache.commons.compress.archivers.zip.ZipLong.<staticinit>()",
        "org.apache.commons.compress.archivers.zip.ZipEightByteInteger.getBytes(long)",
        "org.apache.commons.compress.archivers.zip.ZipConstants.<staticinit>()",
        "org.apache.commons.compress.archivers.zip.ZipArchiveEntry#getMethod()",
        "org.apache.commons.compress.archivers.zip.ZipArchiveEntry#setExtra()",
        "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream#hasZip64Extra(ZipArchiveEntry)",
        "org.apache.commons.compress.archivers.zip.ZipArchiveEntry#getSize()",
        "org.apache.commons.compress.archivers.zip.ZipLong.getBytes(long)",
        "org.apache.commons.compress.archivers.zip.ZipArchiveEntry#removeExtraField(ZipShort)",
        "org.apache.commons.compress.archivers.zip.ZipLong#getBytes()",
        "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream#getName(ZipArchiveEntry)",
        "org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField.<staticinit>()",
        "org.apache.commons.compress.archivers.zip.RandomAccessOutputStream#writeFully(byte[],long)"
    ],
    "org.apache.commons.compress.utils.SkipShieldingInputStream#SkipShieldingInputStream(InputStream)": ["org.apache.commons.compress.utils.SkipShieldingInputStream.<init>()"],
    "org.apache.commons.compress.harmony.unpack200.ClassBands#parseCodeBands(InputStream)": [
        "org.apache.commons.compress.harmony.unpack200.BandSet#decodeBandInt(String,InputStream,BHSDCodec,int[])",
        "org.apache.commons.compress.harmony.unpack200.SegmentOptions#hasAllCodeFlags()",
        "org.apache.commons.compress.harmony.unpack200.AttributeLayoutMap#getAttributeLayout(String,int)",
        "org.apache.commons.compress.harmony.pack200.Codec.<staticinit>()",
        "org.apache.commons.compress.harmony.unpack200.BandSet#decodeBandInt(String,InputStream,BHSDCodec,int)",
        "org.apache.commons.compress.harmony.unpack200.ClassBands#parseCodeAttrBands(InputStream,int)",
        "org.apache.commons.compress.harmony.unpack200.Segment#getSegmentHeader()",
        "org.apache.commons.compress.harmony.unpack200.AttributeLayout.<staticinit>()",
        "org.apache.commons.compress.harmony.unpack200.SegmentUtils.countMatches(long[][],IMatcher)",
        "org.apache.commons.compress.harmony.unpack200.SegmentHeader#getOptions()"
    ],
    "org.apache.commons.compress.archivers.dump.TapeInputStream#resetBlockSize(int,boolean)": [
        "org.apache.commons.compress.archivers.dump.TapeInputStream.<staticinit>()",
        "org.apache.commons.compress.archivers.dump.TapeInputStream#readFully(byte[],int,int)"
    ],
    "org.apache.commons.compress.archivers.tar.TarArchiveEntry#processPaxHeader(String,String,Map<String, String>)": [
        "org.apache.commons.compress.archivers.tar.TarArchiveEntry#setSize(long)",
        "org.apache.commons.compress.archivers.tar.TarArchiveEntry.parseInstantFromDecimalSeconds(String)",
        "org.apache.commons.compress.archivers.tar.TarGnuSparseKeys.<staticinit>()",
        "org.apache.commons.compress.archivers.tar.TarArchiveEntry#fillGNUSparse1xData(Map<String, String>)",
        "org.apache.commons.compress.archivers.tar.TarArchiveEntry#setUserId(long)",
        "org.apache.commons.compress.archivers.tar.TarArchiveEntry#setLinkName(String)",
        "org.apache.commons.compress.archivers.tar.TarArchiveEntry#setUserName(String)",
        "org.apache.commons.compress.archivers.tar.TarArchiveEntry#setStatusChangeTime(FileTime)",
        "org.apache.commons.compress.archivers.tar.TarArchiveEntry#setDevMajor(int)",
        "org.apache.commons.compress.archivers.tar.TarArchiveEntry#setLastModifiedTime(FileTime)",
        "org.apache.commons.compress.utils.ParsingUtils.parseLongValue(String)",
        "org.apache.commons.compress.archivers.tar.TarArchiveEntry#setGroupId(long)",
        "org.apache.commons.compress.archivers.tar.TarArchiveEntry#setGroupName(String)",
        "org.apache.commons.compress.archivers.tar.TarArchiveEntry#fillStarSparseData(Map<String, String>)",
        "org.apache.commons.compress.utils.ParsingUtils.parseIntValue(String)",
        "org.apache.commons.compress.archivers.tar.TarArchiveEntry#fillGNUSparse0xData(Map<String, String>)",
        "org.apache.commons.compress.archivers.tar.TarArchiveEntry#setLastAccessTime(FileTime)",
        "org.apache.commons.compress.archivers.tar.TarArchiveEntry#setDevMinor(int)",
        "org.apache.commons.compress.archivers.tar.TarArchiveEntry#setCreationTime(FileTime)",
        "org.apache.commons.compress.archivers.tar.TarArchiveEntry#setName(String)"
    ],
    "org.apache.commons.compress.harmony.unpack200.bytecode.ClassConstantPool#initialSort()": [
        "org.apache.commons.compress.harmony.unpack200.bytecode.CPUTF8#underlyingString()",
        "org.apache.commons.compress.harmony.unpack200.bytecode.CPClass#getName()",
        "org.apache.commons.compress.harmony.unpack200.bytecode.ConstantPoolEntry#getGlobalIndex()"
    ],
    "org.apache.commons.compress.harmony.unpack200.Archive#available(InputStream)": [
        "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream#read()",
        "org.apache.commons.compress.archivers.sevenz.AES256SHA256Decoder.AES256SHA256DecoderInputStream#read()",
        "org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream#reset()",
        "org.apache.commons.compress.compressors.xz.XZCompressorInputStream#read()",
        "org.apache.commons.compress.compressors.brotli.BrotliCompressorInputStream#mark(int)",
        "org.apache.commons.compress.compressors.brotli.BrotliCompressorInputStream#reset()",
        "org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorInputStream#read()",
        "org.apache.commons.compress.compressors.lz77support.AbstractLZ77CompressorInputStream#read()",
        "org.apache.commons.compress.compressors.deflate.DeflateCompressorInputStream#read()",
        "org.apache.commons.compress.archivers.zip.ExplodingInputStream#read()",
        "org.apache.commons.compress.compressors.lzma.LZMACompressorInputStream#read()",
        "org.apache.commons.compress.compressors.zstandard.ZstdCompressorInputStream#read()",
        "org.apache.commons.compress.compressors.zstandard.ZstdCompressorInputStream#reset()",
        "org.apache.commons.compress.compressors.zstandard.ZstdCompressorInputStream#mark(int)",
        "org.apache.commons.compress.archivers.sevenz.BoundedSeekableByteChannelInputStream#read()",
        "org.apache.commons.compress.utils.BoundedArchiveInputStream#read()",
        "org.apache.commons.compress.compressors.brotli.BrotliCompressorInputStream#read()",
        "org.apache.commons.compress.archivers.tar.TarArchiveSparseZeroInputStream#read()",
        "org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream#read()",
        "org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStream#read()",
        "org.apache.commons.compress.compressors.deflate64.Deflate64CompressorInputStream#read()",
        "org.apache.commons.compress.compressors.lzw.LZWInputStream#read()",
        "org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream#mark(int)",
        "org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream#read()"
    ],
    "org.apache.commons.compress.archivers.zip.Zip64RequiredException.getEntryTooBigMessage(ZipArchiveEntry)": ["org.apache.commons.compress.archivers.zip.ZipArchiveEntry#getName()"],
    "org.apache.commons.compress.archivers.zip.UnsupportedZipFeatureException.Feature#Feature(String)": ["org.apache.commons.compress.archivers.zip.UnsupportedZipFeatureException.Feature.<init>()"],
    "org.apache.commons.compress.harmony.unpack200.CpBands#cpFloatValue(int)": ["org.apache.commons.compress.harmony.unpack200.bytecode.CPFloat#CPFloat(Float,int)"],
    "org.apache.commons.compress.archivers.zip.ZipArchiveEntry#isUnixSymlink()": [
        "org.apache.commons.compress.archivers.zip.UnixStat.<staticinit>()",
        "org.apache.commons.compress.archivers.zip.ZipArchiveEntry#getUnixMode()"
    ],
    "org.apache.commons.compress.utils.CountingOutputStream#CountingOutputStream(OutputStream)": ["org.apache.commons.compress.utils.CountingOutputStream.<init>()"],
    "org.apache.commons.compress.archivers.tar.TarArchiveInputStream#available()": [
        "org.apache.commons.compress.archivers.tar.TarArchiveInputStream#isDirectory()",
        "org.apache.commons.compress.archivers.tar.TarArchiveEntry#getRealSize()"
    ],
    "org.apache.commons.compress.archivers.zip.ZipEightByteInteger#ZipEightByteInteger(byte[],int)": [
        "org.apache.commons.compress.archivers.zip.ZipEightByteInteger.<init>()",
        "org.apache.commons.compress.archivers.zip.ZipEightByteInteger.getValue(byte[],int)"
    ],
    "org.apache.commons.compress.harmony.unpack200.NewAttributeBands.Integral#readBands(InputStream,int)": [
        "org.apache.commons.compress.harmony.unpack200.BandSet#decodeBandInt(String,InputStream,BHSDCodec,int)",
        "org.apache.commons.compress.harmony.unpack200.AttributeLayout#getName()",
        "org.apache.commons.compress.harmony.unpack200.NewAttributeBands#getCodec(String)"
    ],
    "org.apache.commons.compress.archivers.zip.UnicodeCommentExtraField#getHeaderId()": ["org.apache.commons.compress.archivers.zip.UnicodeCommentExtraField.<staticinit>()"],
    "org.apache.commons.compress.harmony.pack200.ClassBands#finaliseBands()": [
        "org.apache.commons.compress.harmony.pack200.IcBands#getInnerClassesForOuter(String)",
        "org.apache.commons.compress.harmony.pack200.NewAttributeBands#isUsedAtLeastOnce()",
        "org.apache.commons.compress.harmony.pack200.SegmentHeader#have_all_code_flags()",
        "org.apache.commons.compress.harmony.pack200.IntList#add(int)",
        "org.apache.commons.compress.harmony.pack200.IntList#size()",
        "org.apache.commons.compress.harmony.pack200.IcBands#getIcTuple(CPClass)",
        "org.apache.commons.compress.harmony.pack200.NewAttributeBands#getFlagIndex()",
        "org.apache.commons.compress.harmony.pack200.CPClass#toString()",
        "org.apache.commons.compress.harmony.pack200.MetadataBandGroup#numBackwardsCalls()",
        "org.apache.commons.compress.harmony.pack200.IntList#get(int)",
        "org.apache.commons.compress.harmony.pack200.Segment#getSegmentHeader()",
        "org.apache.commons.compress.harmony.pack200.MetadataBandGroup#hasContent()",
        "org.apache.commons.compress.harmony.pack200.IntList#remove(int)",
        "org.apache.commons.compress.harmony.pack200.SegmentHeader#getDefaultMajorVersion()",
        "org.apache.commons.compress.harmony.pack200.IntList#IntList()",
        "org.apache.commons.compress.harmony.pack200.NewAttributeBands#numBackwardsCalls()",
        "org.apache.commons.compress.harmony.pack200.IntList#toArray()",
        "org.apache.commons.compress.harmony.pack200.Segment#getIcBands()",
        "org.apache.commons.compress.harmony.pack200.IcBands.IcTuple#isAnonymous()"
    ],
    "org.apache.commons.compress.harmony.pack200.Segment.SegmentMethodVisitor#visitVarInsn(int,int)": ["org.apache.commons.compress.harmony.pack200.BcBands#visitVarInsn(int,int)"],
    "org.apache.commons.compress.archivers.tar.TarArchiveEntry#TarArchiveEntry(Map<String, String>,byte[],ZipEncoding,boolean,long)": [
        "org.apache.commons.compress.archivers.tar.TarArchiveEntry#TarArchiveEntry(Map<String, String>,byte[],ZipEncoding,boolean)",
        "org.apache.commons.compress.archivers.tar.TarArchiveEntry.<staticinit>()",
        "org.apache.commons.compress.archivers.tar.TarArchiveEntry#setDataOffset(long)"
    ],
    "org.apache.commons.compress.changes.ChangeSet#deleteDir(String)": [
        "org.apache.commons.compress.changes.ChangeSet#addDeletion(Change<E extends ArchiveEntry>)",
        "org.apache.commons.compress.changes.Change.ChangeType.<staticinit>()",
        "org.apache.commons.compress.changes.Change#Change(String,ChangeType)"
    ],
    "org.apache.commons.compress.compressors.snappy.FramedSnappyDialect#FramedSnappyDialect(boolean,boolean)": ["org.apache.commons.compress.compressors.snappy.FramedSnappyDialect.<init>()"],
    "org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorInputStream#readFrameDescriptor()": [
        "org.apache.commons.compress.compressors.CompressorInputStream#count(int)",
        "org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorInputStream.<staticinit>()",
        "org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorInputStream#readOneByte()",
        "org.apache.commons.compress.utils.IOUtils.readFully(InputStream,byte[])",
        "org.apache.commons.compress.compressors.lz4.BlockLZ4CompressorInputStream.<staticinit>()"
    ],
    "org.apache.commons.compress.compressors.lz4.XXHash32#XXHash32()": ["org.apache.commons.compress.compressors.lz4.XXHash32.<init>()"],
    "org.apache.commons.compress.harmony.pack200.Segment#visitAttribute(Attribute)": [
        "org.apache.commons.compress.harmony.pack200.Segment#passCurrentClass()",
        "org.apache.commons.compress.harmony.pack200.PackingOptions#getUnknownAttributeAction()",
        "org.apache.commons.compress.harmony.pack200.PackingOptions.<staticinit>()",
        "org.apache.commons.compress.harmony.pack200.NewAttribute#isUnknown()",
        "org.apache.commons.compress.harmony.pack200.AttributeDefinitionBands.<staticinit>()",
        "org.apache.commons.compress.harmony.pack200.NewAttribute#isUnknown(int)",
        "org.apache.commons.compress.harmony.pack200.PackingOptions#getUnknownClassAttributeAction(String)",
        "org.apache.commons.compress.harmony.pack200.ClassBands#addClassAttribute(NewAttribute)"
    ],
    "org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp#setModifyTime(ZipLong)": ["org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp.<staticinit>()"],
    "org.apache.commons.compress.archivers.tar.TarArchiveEntry#TarArchiveEntry(byte[],ZipEncoding,boolean,long)": [
        "org.apache.commons.compress.archivers.tar.TarArchiveEntry#TarArchiveEntry(byte[],ZipEncoding,boolean)",
        "org.apache.commons.compress.archivers.tar.TarArchiveEntry.<staticinit>()",
        "org.apache.commons.compress.archivers.tar.TarArchiveEntry#setDataOffset(long)"
    ],
    "org.apache.commons.compress.compressors.pack200.AbstractStreamBridge#AbstractStreamBridge()": ["org.apache.commons.compress.compressors.pack200.AbstractStreamBridge#AbstractStreamBridge(OutputStream)"],
    "org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorOutputStream#close()": [
        "org.apache.commons.compress.archivers.zip.FileRandomAccessOutputStream#close()",
        "org.apache.commons.compress.compressors.snappy.SnappyCompressorOutputStream#close()",
        "org.apache.commons.compress.compressors.deflate.DeflateCompressorOutputStream#close()",
        "org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream#close()",
        "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream#close()",
        "org.apache.commons.compress.compressors.lzma.LZMACompressorOutputStream#close()",
        "org.apache.commons.compress.utils.FixedLengthBlockOutputStream#close()",
        "org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorOutputStream#close()",
        "org.apache.commons.compress.compressors.xz.XZCompressorOutputStream#close()",
        "org.apache.commons.compress.archivers.zip.ZipSplitOutputStream#close()",
        "org.apache.commons.compress.archivers.zip.SeekableChannelRandomAccessOutputStream#close()",
        "org.apache.commons.compress.archivers.sevenz.Coders.DeflateDecoder.DeflateDecoderOutputStream#close()",
        "org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorOutputStream#close()",
        "org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream#close()",
        "org.apache.commons.compress.compressors.lz4.BlockLZ4CompressorOutputStream#close()",
        "org.apache.commons.compress.archivers.ar.ArArchiveOutputStream#close()",
        "org.apache.commons.compress.compressors.zstandard.ZstdCompressorOutputStream#close()",
        "org.apache.commons.compress.archivers.sevenz.AES256SHA256Decoder.AES256SHA256DecoderOutputStream#close()",
        "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream#close()",
        "org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream#close()",
        "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream#close()",
        "org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorOutputStream#finish()",
        "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.OutputStreamWrapper#close()"
    ],
    "org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream#close()": [
        "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream#close()",
        "org.apache.commons.compress.archivers.sevenz.BoundedSeekableByteChannelInputStream#close()",
        "org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStream#close()",
        "org.apache.commons.compress.compressors.brotli.BrotliCompressorInputStream#close()",
        "org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream#close()",
        "org.apache.commons.compress.compressors.deflate64.Deflate64CompressorInputStream#close()",
        "org.apache.commons.compress.compressors.deflate.DeflateCompressorInputStream#close()",
        "org.apache.commons.compress.archivers.sevenz.AES256SHA256Decoder.AES256SHA256DecoderInputStream#close()",
        "org.apache.commons.compress.compressors.xz.XZCompressorInputStream#close()",
        "org.apache.commons.compress.archivers.zip.ExplodingInputStream#close()",
        "org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream#close()",
        "org.apache.commons.compress.compressors.lzw.LZWInputStream#close()",
        "org.apache.commons.compress.compressors.lzma.LZMACompressorInputStream#close()",
        "org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorInputStream#close()",
        "org.apache.commons.compress.compressors.zstandard.ZstdCompressorInputStream#close()",
        "org.apache.commons.compress.compressors.lz77support.AbstractLZ77CompressorInputStream#close()"
    ],
    "org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorOutputStream#FramedSnappyCompressorOutputStream(OutputStream,Parameters)": [
        "org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream#write(byte[])",
        "org.apache.commons.compress.archivers.sevenz.Coders.DeflateDecoder.DeflateDecoderOutputStream#write(byte[])",
        "org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStream.<staticinit>()",
        "org.apache.commons.compress.compressors.CompressorOutputStream.<init>()",
        "org.apache.commons.compress.utils.ByteUtils.OutputStreamByteConsumer#OutputStreamByteConsumer(OutputStream)",
        "org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorOutputStream.<init>()",
        "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.OutputStreamWrapper#write(byte[])",
        "org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream#write(byte[])",
        "org.apache.commons.compress.archivers.zip.ZipSplitOutputStream#write(byte[])"
    ],
    "org.apache.commons.compress.archivers.zip.NioZipEncoding#newEncoder()": ["org.apache.commons.compress.archivers.zip.NioZipEncoding.<staticinit>()"],
    "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream#createCentralFileHeader(ZipArchiveEntry,ByteBuffer,EntryMetaData,boolean)": [
        "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream#versionNeededToExtract(int,boolean,boolean)",
        "org.apache.commons.compress.archivers.tar.TarUtils$ZipEncoding$1#canEncode(String)",
        "org.apache.commons.compress.archivers.zip.ZipUtil.toDosTime(long,byte[],int)",
        "org.apache.commons.compress.archivers.zip.ZipArchiveEntry#getDiskNumberStart()",
        "org.apache.commons.compress.archivers.zip.NioZipEncoding#encode(String)",
        "org.apache.commons.compress.archivers.zip.ZipLong.<staticinit>()",
        "org.apache.commons.compress.archivers.zip.ZipArchiveEntry#getExternalAttributes()",
        "org.apache.commons.compress.archivers.zip.ZipArchiveEntry#getMethod()",
        "org.apache.commons.compress.archivers.zip.ZipArchiveEntry#getTime()",
        "org.apache.commons.compress.archivers.zip.ZipArchiveEntry#getSize()",
        "org.apache.commons.compress.archivers.zip.ZipShort.putShort(int,byte[],int)",
        "org.apache.commons.compress.archivers.zip.ZipArchiveEntry#getInternalAttributes()",
        "org.apache.commons.compress.archivers.tar.TarUtils$ZipEncoding$1#encode(String)",
        "org.apache.commons.compress.archivers.zip.Zip64Mode.<staticinit>()",
        "org.apache.commons.compress.archivers.zip.ZipArchiveEntry#getName()",
        "org.apache.commons.compress.archivers.zip.ZipLong#putLong(byte[],int)",
        "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream#getEntryEncoding(ZipArchiveEntry)",
        "org.apache.commons.compress.archivers.zip.ZipArchiveEntry#getCentralDirectoryExtra()",
        "org.apache.commons.compress.archivers.zip.NioZipEncoding#canEncode(String)",
        "org.apache.commons.compress.archivers.zip.GeneralPurposeBit#encode(byte[],int)",
        "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.<staticinit>()",
        "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream#getGeneralPurposeBits(boolean,boolean)",
        "org.apache.commons.compress.archivers.zip.ZipLong.putLong(long,byte[],int)",
        "org.apache.commons.compress.archivers.zip.ZipConstants.<staticinit>()",
        "org.apache.commons.compress.archivers.zip.ZipArchiveEntry#getPlatform()",
        "org.apache.commons.compress.archivers.zip.ZipSplitOutputStream#getCurrentSplitSegmentIndex()"
    ],
    "org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream#read(byte[],int,int)": [
        "org.apache.commons.compress.compressors.zstandard.ZstdCompressorInputStream#read(byte[],int,int)",
        "org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorInputStream#read(byte[],int,int)",
        "org.apache.commons.compress.archivers.sevenz.BoundedSeekableByteChannelInputStream#read(byte[],int,int)",
        "org.apache.commons.compress.compressors.deflate64.Deflate64CompressorInputStream#read(byte[],int,int)",
        "org.apache.commons.compress.compressors.brotli.BrotliCompressorInputStream#read(byte[],int,int)",
        "org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream#read(byte[],int,int)",
        "org.apache.commons.compress.archivers.sevenz.AES256SHA256Decoder.AES256SHA256DecoderInputStream#read(byte[],int,int)",
        "org.apache.commons.compress.compressors.lzma.LZMACompressorInputStream#read(byte[],int,int)",
        "org.apache.commons.compress.compressors.lz4.BlockLZ4CompressorInputStream#read(byte[],int,int)",
        "org.apache.commons.compress.compressors.snappy.SnappyCompressorInputStream#read(byte[],int,int)",
        "org.apache.commons.compress.compressors.xz.XZCompressorInputStream#read(byte[],int,int)",
        "org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream#read(byte[],int,int)",
        "org.apache.commons.compress.utils.BoundedArchiveInputStream#read(byte[],int,int)",
        "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream#read(byte[],int,int)",
        "org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStream#read(byte[],int,int)",
        "org.apache.commons.compress.compressors.lzw.LZWInputStream#read(byte[],int,int)",
        "org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream#getInputStream()",
        "org.apache.commons.compress.compressors.deflate.DeflateCompressorInputStream#read(byte[],int,int)"
    ],
    "org.apache.commons.compress.archivers.cpio.CpioArchiveEntry#checkNewFormat()": ["org.apache.commons.compress.archivers.cpio.CpioConstants.<staticinit>()"],
    "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.bsGetInt(BitInputStream)": ["org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.bsR(BitInputStream,int)"],
    "org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream#writeTrailer()": [
        "org.apache.commons.compress.archivers.sevenz.AES256SHA256Decoder.AES256SHA256DecoderOutputStream#write(int)",
        "org.apache.commons.compress.compressors.snappy.SnappyCompressorOutputStream#write(int)",
        "org.apache.commons.compress.compressors.lz4.BlockLZ4CompressorOutputStream#write(int)",
        "org.apache.commons.compress.compressors.deflate.DeflateCompressorOutputStream#write(int)",
        "org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorOutputStream#write(int)",
        "org.apache.commons.compress.compressors.lzma.LZMACompressorOutputStream#write(int)",
        "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream#write(int)",
        "org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorOutputStream#write(int)",
        "org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream#write(byte[])",
        "org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream#write(byte[])",
        "org.apache.commons.compress.archivers.sevenz.Coders.DeflateDecoder.DeflateDecoderOutputStream#write(byte[])",
        "org.apache.commons.compress.compressors.xz.XZCompressorOutputStream#write(int)",
        "org.apache.commons.compress.utils.FixedLengthBlockOutputStream#write(int)",
        "org.apache.commons.compress.archivers.ArchiveOutputStream#write(int)",
        "org.apache.commons.compress.archivers.zip.ZipSplitOutputStream#write(int)",
        "org.apache.commons.compress.compressors.zstandard.ZstdCompressorOutputStream#write(int)",
        "org.apache.commons.compress.archivers.zip.RandomAccessOutputStream#write(int)",
        "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.OutputStreamWrapper#write(byte[])"
    ],
    "org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream#CpioArchiveOutputStream(OutputStream,short,int,String)": [
        "org.apache.commons.compress.archivers.ArchiveOutputStream.<init>()",
        "org.apache.commons.compress.archivers.zip.ZipEncodingHelper.getZipEncoding(String)",
        "org.apache.commons.compress.archivers.cpio.CpioConstants.<staticinit>()",
        "org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream.<init>()"
    ],
    "org.apache.commons.compress.compressors.deflate64.HuffmanDecoder.HuffmanCodes.<init>()": ["org.apache.commons.compress.utils.ByteUtils.<staticinit>()"],
    "org.apache.commons.compress.harmony.unpack200.IcTuple#thisClassString()": ["org.apache.commons.compress.harmony.unpack200.IcTuple#predicted()"],
    "org.apache.commons.compress.compressors.deflate.DeflateCompressorOutputStream#DeflateCompressorOutputStream(OutputStream,DeflateParameters)": [
        "org.apache.commons.compress.compressors.deflate.DeflateParameters#getCompressionLevel()",
        "org.apache.commons.compress.compressors.deflate.DeflateCompressorOutputStream.<init>()",
        "org.apache.commons.compress.compressors.CompressorOutputStream.<init>()",
        "org.apache.commons.compress.compressors.deflate.DeflateParameters#withZlibHeader()"
    ],
    "org.apache.commons.compress.compressors.xz.XZCompressorInputStream#read()": [
        "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream#read()",
        "org.apache.commons.compress.archivers.sevenz.AES256SHA256Decoder.AES256SHA256DecoderInputStream#read()",
        "org.apache.commons.compress.compressors.xz.XZCompressorInputStream#read()",
        "org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorInputStream#read()",
        "org.apache.commons.compress.compressors.lz77support.AbstractLZ77CompressorInputStream#read()",
        "org.apache.commons.compress.compressors.CompressorInputStream#count(int)",
        "org.apache.commons.compress.compressors.deflate.DeflateCompressorInputStream#read()",
        "org.apache.commons.compress.archivers.zip.ExplodingInputStream#read()",
        "org.apache.commons.compress.compressors.lzma.LZMACompressorInputStream#read()",
        "org.apache.commons.compress.compressors.zstandard.ZstdCompressorInputStream#read()",
        "org.apache.commons.compress.archivers.sevenz.BoundedSeekableByteChannelInputStream#read()",
        "org.apache.commons.compress.utils.BoundedArchiveInputStream#read()",
        "org.apache.commons.compress.compressors.brotli.BrotliCompressorInputStream#read()",
        "org.apache.commons.compress.archivers.tar.TarArchiveSparseZeroInputStream#read()",
        "org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream#read()",
        "org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStream#read()",
        "org.apache.commons.compress.compressors.deflate64.Deflate64CompressorInputStream#read()",
        "org.apache.commons.compress.compressors.lzw.LZWInputStream#read()",
        "org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream#read()",
        "org.apache.commons.compress.MemoryLimitException#MemoryLimitException(long,int,Exception)"
    ],
    "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream#getBytesWritten()": ["org.apache.commons.compress.archivers.zip.StreamCompressor#getTotalBytesWritten()"],
    "org.apache.commons.compress.harmony.pack200.CPDouble#CPDouble(double)": [
        "org.apache.commons.compress.harmony.pack200.CPConstant.<init>()",
        "org.apache.commons.compress.harmony.pack200.CPDouble.<init>()"
    ],
    "org.apache.commons.compress.harmony.unpack200.SegmentOptions#hasSpecialFormats()": ["org.apache.commons.compress.harmony.unpack200.SegmentOptions.<staticinit>()"],
    "org.apache.commons.compress.java.util.jar.Pack200.newInstance(String,String)": ["org.apache.commons.compress.harmony.archive.internal.nls.Messages.getString(String,Object[])"],
    "org.apache.commons.compress.archivers.tar.TarArchiveInputStream#close()": [
        "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream#close()",
        "org.apache.commons.compress.archivers.sevenz.BoundedSeekableByteChannelInputStream#close()",
        "org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStream#close()",
        "org.apache.commons.compress.compressors.brotli.BrotliCompressorInputStream#close()",
        "org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream#close()",
        "org.apache.commons.compress.compressors.deflate64.Deflate64CompressorInputStream#close()",
        "org.apache.commons.compress.compressors.deflate.DeflateCompressorInputStream#close()",
        "org.apache.commons.compress.archivers.sevenz.AES256SHA256Decoder.AES256SHA256DecoderInputStream#close()",
        "org.apache.commons.compress.compressors.xz.XZCompressorInputStream#close()",
        "org.apache.commons.compress.archivers.zip.ExplodingInputStream#close()",
        "org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream#close()",
        "org.apache.commons.compress.compressors.lzw.LZWInputStream#close()",
        "org.apache.commons.compress.compressors.lzma.LZMACompressorInputStream#close()",
        "org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorInputStream#close()",
        "org.apache.commons.compress.compressors.zstandard.ZstdCompressorInputStream#close()",
        "org.apache.commons.compress.compressors.lz77support.AbstractLZ77CompressorInputStream#close()"
    ],
    "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream#shouldAddZip64Extra(ZipArchiveEntry,Zip64Mode)": [
        "org.apache.commons.compress.archivers.zip.Zip64Mode.<staticinit>()",
        "org.apache.commons.compress.archivers.zip.ZipArchiveEntry#getSize()",
        "org.apache.commons.compress.archivers.zip.ZipConstants.<staticinit>()",
        "org.apache.commons.compress.archivers.ArchiveEntry.<staticinit>()"
    ],
    "org.apache.commons.compress.harmony.pack200.NewAttributeBands.Callable#addAttributeToBand(NewAttribute,InputStream)": [
        "org.apache.commons.compress.harmony.pack200.NewAttributeBands.Union#addAttributeToBand(NewAttribute,InputStream)",
        "org.apache.commons.compress.harmony.pack200.NewAttributeBands.Replication#addAttributeToBand(NewAttribute,InputStream)",
        "org.apache.commons.compress.harmony.pack200.NewAttributeBands.Reference#addAttributeToBand(NewAttribute,InputStream)",
        "org.apache.commons.compress.harmony.pack200.NewAttributeBands.Callable#addAttributeToBand(NewAttribute,InputStream)",
        "org.apache.commons.compress.harmony.pack200.NewAttributeBands.Call#addAttributeToBand(NewAttribute,InputStream)",
        "org.apache.commons.compress.harmony.pack200.NewAttributeBands.Integral#addAttributeToBand(NewAttribute,InputStream)",
        "org.apache.commons.compress.harmony.pack200.NewAttributeBands.UnionCase#addAttributeToBand(NewAttribute,InputStream)"
    ],
    "org.apache.commons.compress.archivers.zip.ZipArchiveEntry#setName(String,byte[])": ["org.apache.commons.compress.archivers.zip.ZipArchiveEntry#setName(String)"],
    "org.apache.commons.compress.harmony.unpack200.NewAttributeBands.Replication#readBands(InputStream,int)": [
        "org.apache.commons.compress.harmony.unpack200.NewAttributeBands.Union#readBands(InputStream,int)",
        "org.apache.commons.compress.harmony.unpack200.NewAttributeBands.Reference#readBands(InputStream,int)",
        "org.apache.commons.compress.harmony.unpack200.NewAttributeBands.Callable#readBands(InputStream,int)",
        "org.apache.commons.compress.harmony.unpack200.NewAttributeBands.UnionCase#readBands(InputStream,int)",
        "org.apache.commons.compress.harmony.unpack200.NewAttributeBands.Integral#getValue(int)",
        "org.apache.commons.compress.harmony.unpack200.NewAttributeBands.Integral#readBands(InputStream,int)",
        "org.apache.commons.compress.harmony.unpack200.NewAttributeBands.Call#readBands(InputStream,int)",
        "org.apache.commons.compress.harmony.unpack200.NewAttributeBands.Replication#readBands(InputStream,int)"
    ],
    "org.apache.commons.compress.archivers.jar.JarArchiveEntry#JarArchiveEntry(String)": [
        "org.apache.commons.compress.archivers.jar.JarArchiveEntry.<init>()",
        "org.apache.commons.compress.archivers.zip.ZipArchiveEntry#ZipArchiveEntry(String)"
    ],
    "org.apache.commons.compress.archivers.zip.GeneralPurposeBit#useStrongEncryption(boolean)": ["org.apache.commons.compress.archivers.zip.GeneralPurposeBit#useEncryption(boolean)"],
    "org.apache.commons.compress.archivers.zip.ZipArchiveEntry#updateTimeFromNtfsField()": [
        "org.apache.commons.compress.archivers.zip.ZipArchiveEntry#getExtraField(ZipShort)",
        "org.apache.commons.compress.archivers.zip.X000A_NTFS.<staticinit>()",
        "org.apache.commons.compress.archivers.zip.ZipArchiveEntry#internalSetLastModifiedTime(FileTime)",
        "org.apache.commons.compress.archivers.zip.X000A_NTFS#getCreateFileTime()",
        "org.apache.commons.compress.archivers.zip.X000A_NTFS#getAccessFileTime()",
        "org.apache.commons.compress.archivers.zip.X000A_NTFS#getModifyFileTime()"
    ],
    "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile#close()": [
        "org.apache.commons.compress.utils.SeekableInMemoryByteChannel#close()",
        "org.apache.commons.compress.utils.MultiReadOnlySeekableByteChannel#close()",
        "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile#finish()"
    ],
    "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream#addFileTimePaxHeaderForBigNumber(Map<String, String>,String,FileTime,long)": [
        "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream#addPaxHeaderForBigNumber(Map<String, String>,String,long,long)",
        "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream#addInstantPaxHeader(Map<String, String>,String,long,int)"
    ],
    "org.apache.commons.compress.archivers.tar.TarArchiveInputStream#skipRecordPadding()": [
        "org.apache.commons.compress.compressors.deflate.DeflateCompressorInputStream#available()",
        "org.apache.commons.compress.archivers.tar.TarArchiveInputStream#isDirectory()",
        "org.apache.commons.compress.archivers.tar.TarArchiveInputStream#getRecordSize()",
        "org.apache.commons.compress.compressors.deflate64.Deflate64CompressorInputStream#available()",
        "org.apache.commons.compress.compressors.zstandard.ZstdCompressorInputStream#available()",
        "org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream#available()",
        "org.apache.commons.compress.compressors.brotli.BrotliCompressorInputStream#available()",
        "org.apache.commons.compress.compressors.xz.XZCompressorInputStream#available()",
        "org.apache.commons.compress.utils.IOUtils.skip(InputStream,long)",
        "org.apache.commons.compress.compressors.lz77support.AbstractLZ77CompressorInputStream#available()",
        "org.apache.commons.compress.archivers.tar.TarArchiveInputStream#getActuallySkipped(long,long,long)",
        "org.apache.commons.compress.archivers.ArchiveInputStream#count(long)",
        "org.apache.commons.compress.compressors.lzma.LZMACompressorInputStream#available()",
        "org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStream#available()"
    ],
    "org.apache.commons.compress.harmony.unpack200.CpBands#parseCpDescriptor(InputStream)": [
        "org.apache.commons.compress.harmony.pack200.Codec.<staticinit>()",
        "org.apache.commons.compress.harmony.unpack200.BandSet#decodeBandInt(String,InputStream,BHSDCodec,int)",
        "org.apache.commons.compress.harmony.unpack200.BandSet#getReferences(int[],String[])",
        "org.apache.commons.compress.harmony.unpack200.SegmentHeader#getCpDescriptorCount()"
    ],
    "org.apache.commons.compress.harmony.pack200.CpBands#getCPNameAndType(String,String)": [
        "org.apache.commons.compress.harmony.pack200.CpBands#getCPSignature(String)",
        "org.apache.commons.compress.harmony.pack200.CpBands#getCPUtf8(String)",
        "org.apache.commons.compress.harmony.pack200.CPNameAndType#CPNameAndType(CPUTF8,CPSignature)"
    ],
    "org.apache.commons.compress.archivers.sevenz.SevenZFile#getDefaultName()": ["org.apache.commons.compress.archivers.sevenz.SevenZFile.<staticinit>()"],
    "org.apache.commons.compress.archivers.sevenz.SevenZFile#readAllOrBits(ByteBuffer,int)": [
        "org.apache.commons.compress.archivers.sevenz.SevenZFile#readBits(ByteBuffer,int)",
        "org.apache.commons.compress.archivers.sevenz.SevenZFile.getUnsignedByte(ByteBuffer)"
    ],
    "org.apache.commons.compress.harmony.unpack200.FileBands#read(InputStream)": [
        "org.apache.commons.compress.harmony.pack200.Codec.<staticinit>()",
        "org.apache.commons.compress.harmony.unpack200.SegmentOptions#hasFileOptions()",
        "org.apache.commons.compress.harmony.unpack200.BandSet#decodeBandInt(String,InputStream,BHSDCodec,int)",
        "org.apache.commons.compress.harmony.unpack200.SegmentHeader#getNumberOfFiles()",
        "org.apache.commons.compress.harmony.unpack200.BandSet#parseReferences(String,InputStream,BHSDCodec,int,String[])",
        "org.apache.commons.compress.harmony.unpack200.SegmentOptions#hasFileModtime()",
        "org.apache.commons.compress.harmony.unpack200.BandSet#parseFlags(String,InputStream,int,BHSDCodec,boolean)",
        "org.apache.commons.compress.harmony.unpack200.SegmentHeader#getOptions()",
        "org.apache.commons.compress.harmony.unpack200.SegmentOptions#hasFileSizeHi()"
    ],
    "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream#recvDecodingTables()": [
        "org.apache.commons.compress.compressors.bzip2.BZip2Constants.<staticinit>()",
        "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.bsGetBit(BitInputStream)",
        "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.bsR(BitInputStream,int)",
        "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream#makeMaps()",
        "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.checkBounds(int,int,String)",
        "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream#createHuffmanDecodingTables(int,int)"
    ],
    "org.apache.commons.compress.harmony.unpack200.IcTuple#IcTuple(String,int,String,String,int,int,int,int)": [
        "org.apache.commons.compress.harmony.unpack200.IcTuple#initializeClassStrings()",
        "org.apache.commons.compress.harmony.unpack200.IcTuple.<init>()"
    ],
    "org.apache.commons.compress.archivers.zip.ExplodingInputStream#ExplodingInputStream(int,int,InputStream)": ["org.apache.commons.compress.archivers.zip.ExplodingInputStream.<init>()"],
    "org.apache.commons.compress.archivers.zip.ZipFile#getEntries(String)": ["org.apache.commons.compress.archivers.zip.ZipArchiveEntry.<staticinit>()"],
    "org.apache.commons.compress.harmony.unpack200.SegmentOptions#hasCodeFlagsHi()": ["org.apache.commons.compress.harmony.unpack200.SegmentOptions.<staticinit>()"],
    "org.apache.commons.compress.archivers.dump.TapeInputStream#readFully(byte[],int,int)": [
        "org.apache.commons.compress.archivers.dump.ShortFileException#ShortFileException()",
        "org.apache.commons.compress.utils.IOUtils.readFully(InputStream,byte[],int,int)"
    ],
    "org.apache.commons.compress.archivers.zip.AsiExtraField#setMode(int)": ["org.apache.commons.compress.archivers.zip.AsiExtraField#getMode(int)"],
    "org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField#AbstractUnicodeExtraField(String,byte[])": ["org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField#AbstractUnicodeExtraField(String,byte[],int,int)"],
    "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream#validateIfZip64IsNeededInEOCD()": [
        "org.apache.commons.compress.archivers.zip.Zip64RequiredException#Zip64RequiredException(String)",
        "org.apache.commons.compress.archivers.zip.ZipSplitOutputStream#getCurrentSplitSegmentIndex()",
        "org.apache.commons.compress.archivers.zip.Zip64Mode.<staticinit>()",
        "org.apache.commons.compress.archivers.zip.Zip64RequiredException.<staticinit>()",
        "org.apache.commons.compress.archivers.zip.ZipConstants.<staticinit>()"
    ],
    "org.apache.commons.compress.harmony.unpack200.bytecode.forms.LabelForm#fixUpByteCodeTargets(ByteCode,CodeAttribute)": [
        "org.apache.commons.compress.harmony.unpack200.bytecode.ByteCode#getByteCodeTargets()",
        "org.apache.commons.compress.harmony.unpack200.bytecode.ByteCode#setNestedPositions(int[][])",
        "org.apache.commons.compress.harmony.unpack200.bytecode.ByteCode#getByteCodeIndex()",
        "org.apache.commons.compress.harmony.unpack200.bytecode.ByteCode#setOperandSigned2Bytes(int,int)"
    ],
    "org.apache.commons.compress.archivers.zip.X000A_NTFS#parseFromLocalFileData(byte[],int,int)": [
        "org.apache.commons.compress.archivers.zip.X000A_NTFS.<staticinit>()",
        "org.apache.commons.compress.archivers.zip.ZipShort#equals(Object)",
        "org.apache.commons.compress.archivers.zip.ZipShort#getValue()",
        "org.apache.commons.compress.archivers.zip.ZipShort#ZipShort(byte[],int)",
        "org.apache.commons.compress.archivers.zip.X000A_NTFS#readTimeAttr(byte[],int,int)"
    ],
    "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream#fill()": [
        "org.apache.commons.compress.compressors.zstandard.ZstdCompressorInputStream#read(byte[])",
        "org.apache.commons.compress.archivers.ArchiveInputStream#count(int)",
        "org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream#read(byte[])",
        "org.apache.commons.compress.compressors.brotli.BrotliCompressorInputStream#read(byte[])",
        "org.apache.commons.compress.archivers.sevenz.BoundedSeekableByteChannelInputStream#read(int)"
    ],
    "org.apache.commons.compress.harmony.pack200.Segment#lastConstantHadWideIndex()": ["org.apache.commons.compress.harmony.pack200.Pack200ClassReader#lastConstantHadWideIndex()"],
    "org.apache.commons.compress.utils.ArchiveUtils.sanitize(String)": ["org.apache.commons.compress.utils.ArchiveUtils.<staticinit>()"],
    "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.<init>()": [
        "org.apache.commons.compress.compressors.bzip2.CRC#CRC()",
        "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.<staticinit>()"
    ],
    "org.apache.commons.compress.archivers.zip.ResourceAlignmentExtraField#getLocalFileDataData()": [
        "org.apache.commons.compress.archivers.zip.ResourceAlignmentExtraField.<staticinit>()",
        "org.apache.commons.compress.archivers.zip.ZipShort.putShort(int,byte[],int)"
    ],
    "org.apache.commons.compress.harmony.pack200.NewAttributeBands.Callable#renumberBci(IntList,Map<Label, Integer>)": [
        "org.apache.commons.compress.harmony.pack200.NewAttributeBands.UnionCase#renumberBci(IntList,Map<Label, Integer>)",
        "org.apache.commons.compress.harmony.pack200.NewAttributeBands.Replication#renumberBci(IntList,Map<Label, Integer>)",
        "org.apache.commons.compress.harmony.pack200.NewAttributeBands.Call#renumberBci(IntList,Map<Label, Integer>)",
        "org.apache.commons.compress.harmony.pack200.NewAttributeBands.Callable#renumberBci(IntList,Map<Label, Integer>)",
        "org.apache.commons.compress.harmony.pack200.NewAttributeBands.Integral#renumberBci(IntList,Map<Label, Integer>)",
        "org.apache.commons.compress.harmony.pack200.NewAttributeBands.Union#renumberBci(IntList,Map<Label, Integer>)",
        "org.apache.commons.compress.harmony.pack200.NewAttributeBands.Reference#renumberBci(IntList,Map<Label, Integer>)"
    ],
    "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream#ZipArchiveInputStream(InputStream,String,boolean)": ["org.apache.commons.compress.archivers.zip.ZipArchiveInputStream#ZipArchiveInputStream(InputStream,String,boolean,boolean)"],
    "org.apache.commons.compress.archivers.zip.JarMarker#JarMarker()": ["org.apache.commons.compress.archivers.zip.JarMarker.<init>()"],
    "org.apache.commons.compress.archivers.arj.ArjArchiveEntry#isHostOsUnix()": [
        "org.apache.commons.compress.archivers.arj.ArjArchiveEntry#getHostOs()",
        "org.apache.commons.compress.archivers.arj.ArjArchiveEntry.HostOs.<staticinit>()"
    ],
    "org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream#closeEntry()": ["org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream#skip(long)"],
    "org.apache.commons.compress.archivers.zip.ZipArchiveEntry#getParseableExtraFields()": [
        "org.apache.commons.compress.archivers.zip.ZipArchiveEntry#getParseableExtraFieldsNoCopy()",
        "org.apache.commons.compress.archivers.zip.ZipArchiveEntry#copyOf(ZipExtraField[],int)"
    ],
    "org.apache.commons.compress.archivers.ar.ArArchiveInputStream#isGNULongName(String)": ["org.apache.commons.compress.archivers.ar.ArArchiveInputStream.<staticinit>()"],
    "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream#moveToFrontCodeAndSend()": [
        "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream#generateMTFValues()",
        "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream#sendMTFValues()",
        "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream#bsW(int,int)"
    ],
    "org.apache.commons.compress.archivers.dump.DumpArchiveEntry#isSparseRecord(int)": ["org.apache.commons.compress.archivers.dump.DumpArchiveEntry.TapeSegmentHeader#getCdata(int)"],
    "org.apache.commons.compress.harmony.unpack200.NewAttributeBands#parseLayout()": [
        "org.apache.commons.compress.harmony.unpack200.NewAttributeBands#resolveCalls()",
        "org.apache.commons.compress.harmony.unpack200.AttributeLayout#getLayout()",
        "org.apache.commons.compress.harmony.unpack200.NewAttributeBands#readNextAttributeElement(StringReader)"
    ],
    "org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField#parseFromLocalFileData(byte[],int,int)": ["org.apache.commons.compress.archivers.zip.ZipLong.getValue(byte[],int)"],
    "org.apache.commons.compress.harmony.pack200.SegmentHeader#getDefaultMajorVersion()": ["org.apache.commons.compress.harmony.pack200.SegmentHeader.Counter#getMostCommon()"],
    "org.apache.commons.compress.harmony.unpack200.bytecode.ExceptionsAttribute#ExceptionsAttribute(CPClass[])": [
        "org.apache.commons.compress.harmony.unpack200.bytecode.Attribute#Attribute(CPUTF8)",
        "org.apache.commons.compress.harmony.unpack200.bytecode.ExceptionsAttribute.<init>()",
        "org.apache.commons.compress.harmony.unpack200.bytecode.ExceptionsAttribute.<staticinit>()"
    ],
    "org.apache.commons.compress.harmony.unpack200.NewAttributeBands.Call#readBands(InputStream,int)": ["org.apache.commons.compress.harmony.unpack200.NewAttributeBands.Callable#addCount(int)"],
    "org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField#getLocalFileDataData()": ["org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField#getCentralDirectoryData()"],
    "org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream#finish()": [
        "org.apache.commons.compress.archivers.cpio.CpioArchiveEntry#setNumberOfLinks(long)",
        "org.apache.commons.compress.archivers.cpio.CpioArchiveEntry#setName(String)",
        "org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream#writeHeader(CpioArchiveEntry)",
        "org.apache.commons.compress.archivers.ArchiveOutputStream#getBytesWritten()",
        "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream#getBytesWritten()",
        "org.apache.commons.compress.archivers.cpio.CpioConstants.<staticinit>()",
        "org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream#closeArchiveEntry()",
        "org.apache.commons.compress.archivers.cpio.CpioArchiveEntry#CpioArchiveEntry(short)",
        "org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream#ensureOpen()",
        "org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream#pad(int)",
        "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream#getBytesWritten()"
    ],
    "org.apache.commons.compress.archivers.tar.TarArchiveEntry#isXstar(Map<String, String>,byte[])": [
        "org.apache.commons.compress.archivers.tar.TarArchiveEntry#isInvalidPrefix(byte[])",
        "org.apache.commons.compress.archivers.tar.TarConstants.<staticinit>()",
        "org.apache.commons.compress.utils.ArchiveUtils.matchAsciiBuffer(String,byte[],int,int)",
        "org.apache.commons.compress.archivers.tar.TarArchiveEntry#isInvalidXtarTime(byte[],int,int)"
    ],
    "org.apache.commons.compress.archivers.arj.ArjArchiveInputStream#readLocalFileHeader()": [
        "org.apache.commons.compress.archivers.arj.ArjArchiveInputStream#readString(DataInputStream)",
        "org.apache.commons.compress.archivers.arj.ArjArchiveInputStream#readRange(InputStream,int)",
        "org.apache.commons.compress.archivers.arj.ArjArchiveInputStream#readExtraData(int,DataInputStream,LocalFileHeader)",
        "org.apache.commons.compress.archivers.arj.ArjArchiveInputStream#read32(DataInputStream)",
        "org.apache.commons.compress.archivers.arj.LocalFileHeader.<init>()",
        "org.apache.commons.compress.archivers.arj.ArjArchiveInputStream#read16(DataInputStream)",
        "org.apache.commons.compress.archivers.ArchiveInputStream#pushedBackBytes(long)",
        "org.apache.commons.compress.archivers.arj.ArjArchiveInputStream#readHeader()"
    ],
    "org.apache.commons.compress.compressors.lzw.LZWInputStream.<init>()": ["org.apache.commons.compress.compressors.lzw.LZWInputStream.<staticinit>()"],
    "org.apache.commons.compress.archivers.zip.ZipLong#putLong(byte[],int)": ["org.apache.commons.compress.archivers.zip.ZipLong.putLong(long,byte[],int)"],
    "org.apache.commons.compress.harmony.pack200.CodecEncoding.getCanonicalCodec(int)": ["org.apache.commons.compress.harmony.pack200.CodecEncoding.<staticinit>()"],
    "org.apache.commons.compress.compressors.bzip2.BZip2Utils.getCompressedFileName(String)": [
        "org.apache.commons.compress.compressors.bzip2.BZip2Utils.<staticinit>()",
        "org.apache.commons.compress.compressors.FileNameUtil#getCompressedFileName(String)"
    ],
    "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile#write(byte[],int,int)": [
        "org.apache.commons.compress.archivers.sevenz.Coders.DeflateDecoder.DeflateDecoderOutputStream#write(byte[],int,int)",
        "org.apache.commons.compress.utils.FixedLengthBlockOutputStream#write(byte[],int,int)",
        "org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorOutputStream#write(byte[],int,int)",
        "org.apache.commons.compress.archivers.ar.ArArchiveOutputStream#write(byte[],int,int)",
        "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream#write(byte[],int,int)",
        "org.apache.commons.compress.compressors.lzma.LZMACompressorOutputStream#write(byte[],int,int)",
        "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.OutputStreamWrapper#write(byte[],int,int)",
        "org.apache.commons.compress.compressors.zstandard.ZstdCompressorOutputStream#write(byte[],int,int)",
        "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream#write(byte[],int,int)",
        "org.apache.commons.compress.archivers.zip.FileRandomAccessOutputStream#write(byte[],int,int)",
        "org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream#write(byte[],int,int)",
        "org.apache.commons.compress.archivers.sevenz.AES256SHA256Decoder.AES256SHA256DecoderOutputStream#write(byte[],int,int)",
        "org.apache.commons.compress.archivers.zip.ZipSplitOutputStream#write(byte[],int,int)",
        "org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorOutputStream#write(byte[],int,int)",
        "org.apache.commons.compress.compressors.xz.XZCompressorOutputStream#write(byte[],int,int)",
        "org.apache.commons.compress.compressors.deflate.DeflateCompressorOutputStream#write(byte[],int,int)",
        "org.apache.commons.compress.archivers.zip.SeekableChannelRandomAccessOutputStream#write(byte[],int,int)",
        "org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream#write(byte[],int,int)",
        "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile#getCurrentOutputStream()",
        "org.apache.commons.compress.compressors.lz4.BlockLZ4CompressorOutputStream#write(byte[],int,int)",
        "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream#write(byte[],int,int)",
        "org.apache.commons.compress.compressors.snappy.SnappyCompressorOutputStream#write(byte[],int,int)",
        "org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream#write(byte[],int,int)"
    ],
    "org.apache.commons.compress.archivers.ArchiveStreamFactory#ArchiveStreamFactory()": ["org.apache.commons.compress.archivers.ArchiveStreamFactory#ArchiveStreamFactory(String)"],
    "org.apache.commons.compress.harmony.pack200.BcBands#visitJumpInsn(int,Label)": [
        "org.apache.commons.compress.harmony.pack200.BcBands#updateRenumbering()",
        "org.apache.commons.compress.harmony.pack200.IntList#add(int)"
    ],
    "org.apache.commons.compress.utils.OsgiUtils.isBundleReference(Class<?>)": ["org.apache.commons.compress.utils.OsgiUtils.isBundleReference(Class<?>)"],
    "org.apache.commons.compress.compressors.CompressorStreamFactory#createCompressorInputStream(InputStream,Set<String>)": [
        "org.apache.commons.compress.compressors.CompressorStreamFactory#createCompressorInputStream(String,InputStream)",
        "org.apache.commons.compress.compressors.CompressorStreamFactory.detect(InputStream,Set<String>)"
    ],
    "org.apache.commons.compress.harmony.unpack200.bytecode.RuntimeVisibleorInvisibleParameterAnnotationsAttribute#getLength()": ["org.apache.commons.compress.harmony.unpack200.bytecode.RuntimeVisibleorInvisibleParameterAnnotationsAttribute.ParameterAnnotation#getLength()"],
    "org.apache.commons.compress.archivers.tar.TarUtils.formatNameBytes(String,byte[],int,int)": [
        "org.apache.commons.compress.archivers.tar.TarUtils.formatNameBytes(String,byte[],int,int,ZipEncoding)",
        "org.apache.commons.compress.archivers.tar.TarUtils.<staticinit>()"
    ],
    "org.apache.commons.compress.harmony.unpack200.CpBands#cpDoubleValue(int)": ["org.apache.commons.compress.harmony.unpack200.bytecode.CPDouble#CPDouble(Double,int)"],
    "org.apache.commons.compress.archivers.zip.PKWareExtraHeader#parseFromCentralDirectoryData(byte[],int,int)": [
        "org.apache.commons.compress.archivers.zip.PKWareExtraHeader#setLocalFileDataData(byte[])",
        "org.apache.commons.compress.archivers.zip.PKWareExtraHeader#setCentralDirectoryData(byte[])"
    ],
    "org.apache.commons.compress.harmony.pack200.Segment.SegmentMethodVisitor#visitMethodInsn(int,String,String,String)": ["org.apache.commons.compress.harmony.pack200.BcBands#visitMethodInsn(int,String,String,String)"],
    "org.apache.commons.compress.harmony.unpack200.ClassBands#parseMethodAttrBands(InputStream)": [
        "org.apache.commons.compress.harmony.unpack200.AttributeLayoutMap#getAttributeLayout(String,int)",
        "org.apache.commons.compress.harmony.unpack200.SegmentOptions#hasMethodFlagsHi()",
        "org.apache.commons.compress.harmony.unpack200.CpBands#cpClassValue(int)",
        "org.apache.commons.compress.harmony.unpack200.ClassBands#getCallCount(int[][],long[][],int)",
        "org.apache.commons.compress.harmony.unpack200.AttributeLayout#numBackwardsCallables()",
        "org.apache.commons.compress.harmony.unpack200.SegmentUtils.countBit16(long[][])",
        "org.apache.commons.compress.harmony.unpack200.AttributeLayoutMap#getAttributeBands(AttributeLayout)",
        "org.apache.commons.compress.harmony.unpack200.BandSet#decodeBandInt(String,InputStream,BHSDCodec,int)",
        "org.apache.commons.compress.harmony.unpack200.CpBands#getConstantPool()",
        "org.apache.commons.compress.harmony.unpack200.ClassBands#parseMethodMetadataBands(InputStream,int[])",
        "org.apache.commons.compress.harmony.unpack200.bytecode.ExceptionsAttribute#ExceptionsAttribute(CPClass[])",
        "org.apache.commons.compress.harmony.unpack200.AttributeLayoutMap#getAttributeLayout(int,int)",
        "org.apache.commons.compress.harmony.unpack200.bytecode.DeprecatedAttribute#DeprecatedAttribute()",
        "org.apache.commons.compress.harmony.unpack200.NewAttributeBands#setBackwardsCalls(int[])",
        "org.apache.commons.compress.harmony.unpack200.BandSet#decodeBandInt(String,InputStream,BHSDCodec,int[])",
        "org.apache.commons.compress.harmony.pack200.Codec.<staticinit>()",
        "org.apache.commons.compress.harmony.unpack200.AttributeLayout#getIndex()",
        "org.apache.commons.compress.harmony.unpack200.AttributeLayout#getValue(long,String,SegmentConstantPool)",
        "org.apache.commons.compress.harmony.unpack200.AttributeLayout#matches(long)",
        "org.apache.commons.compress.harmony.unpack200.bytecode.SignatureAttribute#SignatureAttribute(CPUTF8)",
        "org.apache.commons.compress.harmony.unpack200.SegmentUtils.countMatches(long[][],IMatcher)",
        "org.apache.commons.compress.harmony.unpack200.BandSet#parseFlags(String,InputStream,int[],BHSDCodec,boolean)",
        "org.apache.commons.compress.harmony.unpack200.NewAttributeBands#parseAttributes(InputStream,int)",
        "org.apache.commons.compress.harmony.unpack200.AttributeLayout#isDefaultLayout()",
        "org.apache.commons.compress.harmony.unpack200.AttributeLayout.<staticinit>()"
    ],
    "org.apache.commons.compress.harmony.pack200.FileBands#FileBands(CpBands,SegmentHeader,PackingOptions,SegmentUnit,int)": [
        "org.apache.commons.compress.harmony.pack200.BandSet#BandSet(int,SegmentHeader)",
        "org.apache.commons.compress.harmony.pack200.Archive.PackingFile#getName()",
        "org.apache.commons.compress.harmony.pack200.Archive.PackingFile#getModtime()",
        "org.apache.commons.compress.harmony.pack200.Archive.SegmentUnit#getFileList()",
        "org.apache.commons.compress.harmony.pack200.Archive.SegmentUnit#getClassList()",
        "org.apache.commons.compress.harmony.pack200.Archive.PackingFile#isDefalteHint()",
        "org.apache.commons.compress.harmony.pack200.PackingOptions#getModificationTime()",
        "org.apache.commons.compress.harmony.pack200.SegmentHeader#getArchive_modtime()",
        "org.apache.commons.compress.utils.ExactMath.add(int,long)",
        "org.apache.commons.compress.harmony.pack200.Archive.PackingFile#getContents()",
        "org.apache.commons.compress.harmony.pack200.PackingOptions#isPassFile(String)",
        "org.apache.commons.compress.harmony.pack200.PackingOptions.<staticinit>()",
        "org.apache.commons.compress.harmony.pack200.CpBands#getCPUtf8(String)",
        "org.apache.commons.compress.harmony.pack200.FileBands.<init>()",
        "org.apache.commons.compress.harmony.pack200.PackingOptions#isKeepDeflateHint()"
    ],
    "org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStream#readOnce(byte[],int,int)": [
        "org.apache.commons.compress.compressors.snappy.SnappyCompressorInputStream#read(byte[],int,int)",
        "org.apache.commons.compress.compressors.CompressorInputStream#count(int)",
        "org.apache.commons.compress.compressors.CompressorInputStream#getBytesRead()",
        "org.apache.commons.compress.compressors.CompressorInputStream#count(long)",
        "org.apache.commons.compress.compressors.lz77support.AbstractLZ77CompressorInputStream#close()"
    ],
    "org.apache.commons.compress.harmony.unpack200.bytecode.InnerClassesAttribute#toString()": ["org.apache.commons.compress.harmony.unpack200.bytecode.Attribute#getAttributeName()"],
    "org.apache.commons.compress.compressors.snappy.SnappyCompressorInputStream#fill()": [
        "org.apache.commons.compress.compressors.lz77support.AbstractLZ77CompressorInputStream#startLiteral(long)",
        "org.apache.commons.compress.compressors.lz77support.AbstractLZ77CompressorInputStream#startBackReference(int,long)",
        "org.apache.commons.compress.compressors.snappy.SnappyCompressorInputStream.State.<staticinit>()",
        "org.apache.commons.compress.compressors.snappy.SnappyCompressorInputStream#readLiteralLength(int)",
        "org.apache.commons.compress.utils.ByteUtils.fromLittleEndian(ByteSupplier,int)",
        "org.apache.commons.compress.compressors.lz77support.AbstractLZ77CompressorInputStream#readOneByte()",
        "org.apache.commons.compress.compressors.snappy.SnappyCompressorInputStream.<staticinit>()"
    ],
    "org.apache.commons.compress.harmony.unpack200.Pack200UnpackerAdapter.newBoundedInputStream(InputStream)": [
        "org.apache.commons.compress.harmony.unpack200.Pack200UnpackerAdapter.newBoundedInputStream(InputStream)",
        "org.apache.commons.compress.harmony.unpack200.Pack200UnpackerAdapter.newBoundedInputStream(FileInputStream)",
        "org.apache.commons.compress.harmony.unpack200.Pack200UnpackerAdapter.unwrap(FilterInputStream)"
    ],
    "org.apache.commons.compress.archivers.sevenz.LZMADecoder#getDictionarySize(Coder)": ["org.apache.commons.compress.utils.ByteUtils.fromLittleEndian(byte[],int,int)"],
    "org.apache.commons.compress.harmony.unpack200.bytecode.forms.ThisFieldRefForm#ThisFieldRefForm(int,String,int[])": [
        "org.apache.commons.compress.harmony.unpack200.bytecode.forms.ThisFieldRefForm.<init>()",
        "org.apache.commons.compress.harmony.unpack200.bytecode.forms.ClassSpecificReferenceForm#ClassSpecificReferenceForm(int,String,int[])"
    ],
    "org.apache.commons.compress.harmony.pack200.Segment.SegmentMethodVisitor#visitFieldInsn(int,String,String,String)": ["org.apache.commons.compress.harmony.pack200.BcBands#visitFieldInsn(int,String,String,String)"],
    "org.apache.commons.compress.archivers.ArchiveStreamFactory#getArchiveInputStreamProviders()": ["org.apache.commons.compress.archivers.ArchiveStreamFactory.findAvailableArchiveInputStreamProviders()"],
    "org.apache.commons.compress.archivers.tar.TarFile#TarFile(byte[],String)": [
        "org.apache.commons.compress.archivers.tar.TarFile#TarFile(SeekableByteChannel,int,int,String,boolean)",
        "org.apache.commons.compress.archivers.tar.TarConstants.<staticinit>()",
        "org.apache.commons.compress.utils.SeekableInMemoryByteChannel#SeekableInMemoryByteChannel(byte[])"
    ],
    "org.apache.commons.compress.archivers.zip.ResourceAlignmentExtraField#getCentralDirectoryLength()": [
        "org.apache.commons.compress.archivers.zip.ResourceAlignmentExtraField.<staticinit>()",
        "org.apache.commons.compress.archivers.zip.ZipShort#ZipShort(int)"
    ],
    "org.apache.commons.compress.archivers.sevenz.SevenZFile#SevenZFile(SeekableByteChannel,String,SevenZFileOptions)": ["org.apache.commons.compress.archivers.sevenz.SevenZFile#SevenZFile(SeekableByteChannel,String,byte[],boolean,SevenZFileOptions)"],
    "org.apache.commons.compress.compressors.xz.XZUtils.getUncompressedFilename(String)": [
        "org.apache.commons.compress.compressors.FileNameUtil#getUncompressedFileName(String)",
        "org.apache.commons.compress.compressors.xz.XZUtils.<staticinit>()"
    ],
    "org.apache.commons.compress.harmony.pack200.NewAttributeBands#getCodec(String)": ["org.apache.commons.compress.harmony.pack200.Codec.<staticinit>()"],
    "org.apache.commons.compress.harmony.unpack200.bytecode.forms.LongForm#getPoolID()": ["org.apache.commons.compress.harmony.unpack200.SegmentConstantPool.<staticinit>()"],
    "org.apache.commons.compress.archivers.tar.TarUtils.parsePaxHeaders(InputStream,List<TarArchiveStructSparse>,Map<String, String>)": ["org.apache.commons.compress.archivers.tar.TarUtils.parsePaxHeaders(InputStream,List<TarArchiveStructSparse>,Map<String, String>,long)"],
    "org.apache.commons.compress.harmony.pack200.PackingUtils.readJarEntry(JarEntry,InputStream)": [
        "org.apache.commons.compress.compressors.zstandard.ZstdCompressorInputStream#read(byte[])",
        "org.apache.commons.compress.compressors.brotli.BrotliCompressorInputStream#read(byte[])",
        "org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream#read(byte[])"
    ],
    "org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField#getLocalFileDataData()": [
        "org.apache.commons.compress.utils.ByteUtils.<staticinit>()",
        "org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField.<staticinit>()",
        "org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField#addSizes(byte[])",
        "org.apache.commons.compress.archivers.zip.ZipConstants.<staticinit>()"
    ],
    "org.apache.commons.compress.archivers.sevenz.SevenZFileOptions.builder()": ["org.apache.commons.compress.archivers.sevenz.SevenZFileOptions.Builder.<init>()"],
    "org.apache.commons.compress.archivers.arj.ArjArchiveEntry#getName()": ["org.apache.commons.compress.archivers.arj.LocalFileHeader.Flags.<staticinit>()"],
    "org.apache.commons.compress.harmony.unpack200.bytecode.CPFloat#toString()": ["org.apache.commons.compress.harmony.unpack200.bytecode.CPConstant#getValue()"],
    "org.apache.commons.compress.archivers.zip.ZipUtil.toDosTime(Date)": [
        "org.apache.commons.compress.archivers.zip.ZipUtil.toDosTime(long)",
        "org.apache.commons.compress.archivers.zip.ZipLong#ZipLong(byte[])"
    ],
    "org.apache.commons.compress.harmony.unpack200.bytecode.forms.SuperInitMethodRefForm#context(OperandManager)": ["org.apache.commons.compress.harmony.unpack200.bytecode.OperandManager#getSuperClass()"],
    "org.apache.commons.compress.archivers.zip.ExtraFieldUtils.UnparseableExtraField.<staticinit>()": ["org.apache.commons.compress.archivers.zip.ExtraFieldUtils.UnparseableExtraField#UnparseableExtraField(int)"],
    "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.ExtraFieldParsingMode#onUnparseableExtraField(byte[],int,int,boolean,int)": ["org.apache.commons.compress.archivers.zip.ExtraFieldUtils.UnparseableExtraField#onUnparseableExtraField(byte[],int,int,boolean,int)"],
    "org.apache.commons.compress.harmony.unpack200.bytecode.forms.MultiANewArrayForm#setByteCodeOperands(ByteCode,OperandManager,int)": [
        "org.apache.commons.compress.harmony.unpack200.bytecode.forms.ReferenceForm#setByteCodeOperands(ByteCode,OperandManager,int)",
        "org.apache.commons.compress.harmony.unpack200.bytecode.OperandManager#nextByte()",
        "org.apache.commons.compress.harmony.unpack200.bytecode.ByteCode#setOperandByte(int,int)"
    ],
    "org.apache.commons.compress.harmony.pack200.NewAttributeBands.UnionCase#addAttributeToBand(NewAttribute,InputStream)": [
        "org.apache.commons.compress.harmony.pack200.NewAttributeBands.Union#addAttributeToBand(NewAttribute,InputStream)",
        "org.apache.commons.compress.harmony.pack200.NewAttributeBands.Replication#addAttributeToBand(NewAttribute,InputStream)",
        "org.apache.commons.compress.harmony.pack200.NewAttributeBands.Reference#addAttributeToBand(NewAttribute,InputStream)",
        "org.apache.commons.compress.harmony.pack200.NewAttributeBands.Callable#addAttributeToBand(NewAttribute,InputStream)",
        "org.apache.commons.compress.harmony.pack200.NewAttributeBands.Call#addAttributeToBand(NewAttribute,InputStream)",
        "org.apache.commons.compress.harmony.pack200.NewAttributeBands.Integral#addAttributeToBand(NewAttribute,InputStream)",
        "org.apache.commons.compress.harmony.pack200.NewAttributeBands.UnionCase#addAttributeToBand(NewAttribute,InputStream)"
    ],
    "org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream#init(boolean)": [
        "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream#read()",
        "org.apache.commons.compress.archivers.sevenz.AES256SHA256Decoder.AES256SHA256DecoderInputStream#read()",
        "org.apache.commons.compress.compressors.xz.XZCompressorInputStream#read()",
        "org.apache.commons.compress.compressors.gzip.GzipParameters#setFileName(String)",
        "org.apache.commons.compress.archivers.zip.ExplodingInputStream#read()",
        "org.apache.commons.compress.utils.ByteUtils.fromLittleEndian(DataInput,int)",
        "org.apache.commons.compress.compressors.lzma.LZMACompressorInputStream#read()",
        "org.apache.commons.compress.compressors.zstandard.ZstdCompressorInputStream#read()",
        "org.apache.commons.compress.compressors.gzip.GzipParameters#setComment(String)",
        "org.apache.commons.compress.archivers.sevenz.BoundedSeekableByteChannelInputStream#read()",
        "org.apache.commons.compress.compressors.gzip.GzipParameters#setModificationTime(long)",
        "org.apache.commons.compress.compressors.brotli.BrotliCompressorInputStream#read()",
        "org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream#read()",
        "org.apache.commons.compress.compressors.gzip.GzipParameters#setCompressionLevel(int)",
        "org.apache.commons.compress.compressors.deflate64.Deflate64CompressorInputStream#read()",
        "org.apache.commons.compress.compressors.lzw.LZWInputStream#read()",
        "org.apache.commons.compress.compressors.gzip.GzipParameters#setOperatingSystem(int)",
        "org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorInputStream#read()",
        "org.apache.commons.compress.compressors.lz77support.AbstractLZ77CompressorInputStream#read()",
        "org.apache.commons.compress.compressors.deflate.DeflateCompressorInputStream#read()",
        "org.apache.commons.compress.compressors.gzip.GzipUtils.<staticinit>()",
        "org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream.readToNull(DataInput)",
        "org.apache.commons.compress.utils.BoundedArchiveInputStream#read()",
        "org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream.<staticinit>()",
        "org.apache.commons.compress.archivers.tar.TarArchiveSparseZeroInputStream#read()",
        "org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStream#read()",
        "org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream#read()"
    ],
    "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.ExtraFieldParsingMode$ExtraFieldParsingMode$1#fill(ZipExtraField,byte[],int,int,boolean)": ["org.apache.commons.compress.archivers.zip.ZipArchiveEntry.ExtraFieldParsingMode.fillAndMakeUnrecognizedOnError(ZipExtraField,byte[],int,int,boolean)"],
    "org.apache.commons.compress.harmony.pack200.Segment#visitAnnotation(String,boolean)": [
        "org.apache.commons.compress.harmony.pack200.Segment.SegmentAnnotationVisitor#SegmentAnnotationVisitor(int,String,boolean)",
        "org.apache.commons.compress.harmony.pack200.MetadataBandGroup.<staticinit>()"
    ],
    "org.apache.commons.compress.archivers.tar.TarArchiveEntry#equals(TarArchiveEntry)": ["org.apache.commons.compress.archivers.tar.TarArchiveEntry#getName()"],
    "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream#setupRandPartB()": [
        "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.<staticinit>()",
        "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream#setupRandPartC()",
        "org.apache.commons.compress.compressors.bzip2.Rand.rNums(int)",
        "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream#setupRandPartA()",
        "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.checkBounds(int,int,String)"
    ],
    "org.apache.commons.compress.harmony.unpack200.bytecode.forms.ByteCodeForm.<staticinit>()": [
        "org.apache.commons.compress.harmony.unpack200.bytecode.forms.StringRefForm#StringRefForm(int,String,int[])",
        "org.apache.commons.compress.harmony.unpack200.bytecode.forms.ByteCodeForm#getName()",
        "org.apache.commons.compress.harmony.unpack200.bytecode.forms.IntRefForm#IntRefForm(int,String,int[],boolean)",
        "org.apache.commons.compress.harmony.unpack200.bytecode.forms.StringRefForm#StringRefForm(int,String,int[],boolean)",
        "org.apache.commons.compress.harmony.unpack200.bytecode.forms.NarrowClassRefForm#NarrowClassRefForm(int,String,int[],boolean)",
        "org.apache.commons.compress.harmony.unpack200.bytecode.forms.LookupSwitchForm#LookupSwitchForm(int,String)",
        "org.apache.commons.compress.harmony.unpack200.bytecode.forms.WideForm#WideForm(int,String)",
        "org.apache.commons.compress.harmony.unpack200.bytecode.forms.ByteForm#ByteForm(int,String,int[])",
        "org.apache.commons.compress.harmony.unpack200.bytecode.forms.LongForm#LongForm(int,String,int[])",
        "org.apache.commons.compress.harmony.unpack200.bytecode.forms.FloatRefForm#FloatRefForm(int,String,int[])",
        "org.apache.commons.compress.harmony.unpack200.bytecode.forms.IMethodRefForm#IMethodRefForm(int,String,int[])",
        "org.apache.commons.compress.harmony.unpack200.bytecode.forms.LabelForm#LabelForm(int,String,int[])",
        "org.apache.commons.compress.harmony.unpack200.bytecode.forms.ClassRefForm#ClassRefForm(int,String,int[])",
        "org.apache.commons.compress.harmony.unpack200.bytecode.forms.NoArgumentForm#NoArgumentForm(int,String)",
        "org.apache.commons.compress.harmony.unpack200.bytecode.forms.LocalForm#LocalForm(int,String,int[])",
        "org.apache.commons.compress.harmony.unpack200.bytecode.forms.SuperInitMethodRefForm#SuperInitMethodRefForm(int,String,int[])",
        "org.apache.commons.compress.harmony.unpack200.bytecode.forms.MultiANewArrayForm#MultiANewArrayForm(int,String,int[])",
        "org.apache.commons.compress.harmony.unpack200.bytecode.forms.NarrowClassRefForm#NarrowClassRefForm(int,String,int[])",
        "org.apache.commons.compress.harmony.unpack200.bytecode.forms.NewClassRefForm#NewClassRefForm(int,String,int[])",
        "org.apache.commons.compress.harmony.unpack200.bytecode.forms.FloatRefForm#FloatRefForm(int,String,int[],boolean)",
        "org.apache.commons.compress.harmony.unpack200.bytecode.forms.ShortForm#ShortForm(int,String,int[])",
        "org.apache.commons.compress.harmony.unpack200.bytecode.forms.SuperFieldRefForm#SuperFieldRefForm(int,String,int[])",
        "org.apache.commons.compress.harmony.unpack200.bytecode.forms.ThisInitMethodRefForm#ThisInitMethodRefForm(int,String,int[])",
        "org.apache.commons.compress.harmony.unpack200.bytecode.forms.ThisMethodRefForm#ThisMethodRefForm(int,String,int[])",
        "org.apache.commons.compress.harmony.unpack200.bytecode.forms.DoubleForm#DoubleForm(int,String,int[])",
        "org.apache.commons.compress.harmony.unpack200.bytecode.forms.MethodRefForm#MethodRefForm(int,String,int[])",
        "org.apache.commons.compress.harmony.unpack200.bytecode.forms.IincForm#IincForm(int,String,int[])",
        "org.apache.commons.compress.harmony.unpack200.bytecode.forms.NewInitMethodRefForm#NewInitMethodRefForm(int,String,int[])",
        "org.apache.commons.compress.harmony.unpack200.bytecode.forms.TableSwitchForm#TableSwitchForm(int,String)",
        "org.apache.commons.compress.harmony.unpack200.bytecode.forms.IntRefForm#IntRefForm(int,String,int[])",
        "org.apache.commons.compress.harmony.unpack200.bytecode.forms.LabelForm#LabelForm(int,String,int[],boolean)",
        "org.apache.commons.compress.harmony.unpack200.bytecode.forms.SuperMethodRefForm#SuperMethodRefForm(int,String,int[])",
        "org.apache.commons.compress.harmony.unpack200.bytecode.forms.FieldRefForm#FieldRefForm(int,String,int[])",
        "org.apache.commons.compress.harmony.unpack200.bytecode.forms.ThisFieldRefForm#ThisFieldRefForm(int,String,int[])"
    ],
    "org.apache.commons.compress.harmony.unpack200.bytecode.CPMember#resolve(ClassConstantPool)": [
        "org.apache.commons.compress.harmony.unpack200.bytecode.EnclosingMethodAttribute#resolve(ClassConstantPool)",
        "org.apache.commons.compress.harmony.unpack200.bytecode.ClassFileEntry#resolve(ClassConstantPool)",
        "org.apache.commons.compress.harmony.unpack200.bytecode.SourceFileAttribute#resolve(ClassConstantPool)",
        "org.apache.commons.compress.harmony.unpack200.bytecode.LocalVariableTableAttribute#resolve(ClassConstantPool)",
        "org.apache.commons.compress.harmony.unpack200.bytecode.LineNumberTableAttribute#resolve(ClassConstantPool)",
        "org.apache.commons.compress.harmony.unpack200.bytecode.RuntimeVisibleorInvisibleParameterAnnotationsAttribute#resolve(ClassConstantPool)",
        "org.apache.commons.compress.harmony.unpack200.bytecode.NewAttribute#resolve(ClassConstantPool)",
        "org.apache.commons.compress.harmony.unpack200.bytecode.LocalVariableTypeTableAttribute#resolve(ClassConstantPool)",
        "org.apache.commons.compress.harmony.unpack200.bytecode.ConstantValueAttribute#resolve(ClassConstantPool)",
        "org.apache.commons.compress.harmony.unpack200.bytecode.RuntimeVisibleorInvisibleAnnotationsAttribute#resolve(ClassConstantPool)",
        "org.apache.commons.compress.harmony.unpack200.bytecode.InnerClassesAttribute#resolve(ClassConstantPool)",
        "org.apache.commons.compress.harmony.unpack200.bytecode.Attribute#resolve(ClassConstantPool)",
        "org.apache.commons.compress.harmony.unpack200.bytecode.ExceptionsAttribute#resolve(ClassConstantPool)",
        "org.apache.commons.compress.harmony.unpack200.bytecode.CodeAttribute#resolve(ClassConstantPool)",
        "org.apache.commons.compress.harmony.unpack200.bytecode.AnnotationDefaultAttribute#resolve(ClassConstantPool)",
        "org.apache.commons.compress.harmony.unpack200.bytecode.ClassConstantPool#indexOf(ClassFileEntry)",
        "org.apache.commons.compress.harmony.unpack200.bytecode.SignatureAttribute#resolve(ClassConstantPool)"
    ],
    "org.apache.commons.compress.archivers.sevenz.SevenZFile#SevenZFile(SeekableByteChannel,SevenZFileOptions)": [
        "org.apache.commons.compress.archivers.sevenz.SevenZFile.<staticinit>()",
        "org.apache.commons.compress.archivers.sevenz.SevenZFile#SevenZFile(SeekableByteChannel,String,char[],SevenZFileOptions)"
    ],
    "org.apache.commons.compress.archivers.arj.ArjArchiveInputStream#getNextEntry()": [
        "org.apache.commons.compress.archivers.arj.ArjArchiveInputStream#readLocalFileHeader()",
        "org.apache.commons.compress.archivers.arj.LocalFileHeader.Methods.<staticinit>()",
        "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream#close()",
        "org.apache.commons.compress.archivers.sevenz.BoundedSeekableByteChannelInputStream#close()",
        "org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStream#close()",
        "org.apache.commons.compress.compressors.brotli.BrotliCompressorInputStream#close()",
        "org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream#close()",
        "org.apache.commons.compress.compressors.deflate64.Deflate64CompressorInputStream#close()",
        "org.apache.commons.compress.compressors.deflate.DeflateCompressorInputStream#close()",
        "org.apache.commons.compress.archivers.arj.ArjArchiveEntry#ArjArchiveEntry(LocalFileHeader)",
        "org.apache.commons.compress.archivers.sevenz.AES256SHA256Decoder.AES256SHA256DecoderInputStream#close()",
        "org.apache.commons.compress.compressors.xz.XZCompressorInputStream#close()",
        "org.apache.commons.compress.utils.CRC32VerifyingInputStream#CRC32VerifyingInputStream(InputStream,long,long)",
        "org.apache.commons.compress.archivers.zip.ExplodingInputStream#close()",
        "org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream#close()",
        "org.apache.commons.compress.compressors.lzw.LZWInputStream#close()",
        "org.apache.commons.compress.compressors.lzma.LZMACompressorInputStream#close()",
        "org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorInputStream#close()",
        "org.apache.commons.compress.utils.BoundedInputStream#BoundedInputStream(InputStream,long)",
        "org.apache.commons.compress.compressors.zstandard.ZstdCompressorInputStream#close()",
        "org.apache.commons.compress.compressors.lz77support.AbstractLZ77CompressorInputStream#close()"
    ],
    "org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField#getLocalFileDataLength()": [
        "org.apache.commons.compress.archivers.zip.ZipConstants.<staticinit>()",
        "org.apache.commons.compress.archivers.zip.ZipShort#ZipShort(int)"
    ],
    "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream#close()": ["org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream#finish()"],
    "org.apache.commons.compress.compressors.deflate64.HuffmanDecoder.UncompressedState#state()": ["org.apache.commons.compress.compressors.deflate64.HuffmanState.<staticinit>()"],
    "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile#closeArchiveEntry()": [
        "org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry#setHasStream(boolean)",
        "org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry#setCompressedCrcValue(long)",
        "org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry#setCompressedSize(long)",
        "org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry#setHasCrc(boolean)",
        "org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry#setSize(long)",
        "org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry#setCrcValue(long)"
    ],
    "org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorInputStream#close()": [
        "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream#close()",
        "org.apache.commons.compress.archivers.sevenz.BoundedSeekableByteChannelInputStream#close()",
        "org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStream#close()",
        "org.apache.commons.compress.compressors.brotli.BrotliCompressorInputStream#close()",
        "org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream#close()",
        "org.apache.commons.compress.compressors.deflate64.Deflate64CompressorInputStream#close()",
        "org.apache.commons.compress.compressors.deflate.DeflateCompressorInputStream#close()",
        "org.apache.commons.compress.archivers.sevenz.AES256SHA256Decoder.AES256SHA256DecoderInputStream#close()",
        "org.apache.commons.compress.compressors.xz.XZCompressorInputStream#close()",
        "org.apache.commons.compress.archivers.zip.ExplodingInputStream#close()",
        "org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream#close()",
        "org.apache.commons.compress.compressors.lzw.LZWInputStream#close()",
        "org.apache.commons.compress.compressors.lzma.LZMACompressorInputStream#close()",
        "org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorInputStream#close()",
        "org.apache.commons.compress.compressors.zstandard.ZstdCompressorInputStream#close()",
        "org.apache.commons.compress.compressors.lz77support.AbstractLZ77CompressorInputStream#close()"
    ],
    "org.apache.commons.compress.archivers.sevenz.SevenZFile#SevenZFile(SeekableByteChannel)": [
        "org.apache.commons.compress.archivers.sevenz.SevenZFileOptions.<staticinit>()",
        "org.apache.commons.compress.archivers.sevenz.SevenZFile#SevenZFile(SeekableByteChannel,SevenZFileOptions)"
    ],
    "org.apache.commons.compress.harmony.unpack200.Segment#parseSegment()": [
        "org.apache.commons.compress.harmony.unpack200.ClassBands#unpack()",
        "org.apache.commons.compress.harmony.unpack200.bytecode.ClassFile#write(DataOutputStream)",
        "org.apache.commons.compress.harmony.unpack200.AttrDefinitionBands#unpack()",
        "org.apache.commons.compress.harmony.unpack200.Segment#buildClassFile(int)",
        "org.apache.commons.compress.harmony.unpack200.FileBands#unpack()",
        "org.apache.commons.compress.harmony.unpack200.SegmentHeader#getOptions()",
        "org.apache.commons.compress.harmony.unpack200.CpBands#getCpClass()",
        "org.apache.commons.compress.harmony.unpack200.FileBands#getFileOptions()",
        "org.apache.commons.compress.harmony.unpack200.FileBands#getFileName()",
        "org.apache.commons.compress.harmony.unpack200.SegmentOptions#shouldDeflate()",
        "org.apache.commons.compress.harmony.unpack200.SegmentHeader#unpack()",
        "org.apache.commons.compress.harmony.unpack200.CpBands#unpack()",
        "org.apache.commons.compress.harmony.unpack200.SegmentHeader#getNumberOfFiles()",
        "org.apache.commons.compress.harmony.unpack200.BcBands#unpack()",
        "org.apache.commons.compress.harmony.unpack200.ClassBands#getClassThisInts()",
        "org.apache.commons.compress.harmony.unpack200.IcBands#unpack()"
    ],
    "org.apache.commons.compress.archivers.dump.ShortFileException#ShortFileException()": [
        "org.apache.commons.compress.archivers.dump.DumpArchiveException#DumpArchiveException(String)",
        "org.apache.commons.compress.archivers.dump.ShortFileException.<init>()"
    ],
    "org.apache.commons.compress.harmony.unpack200.bytecode.CPFieldRef#resolve(ClassConstantPool)": [
        "org.apache.commons.compress.harmony.unpack200.bytecode.ClassConstantPool#indexOf(ClassFileEntry)",
        "org.apache.commons.compress.harmony.unpack200.bytecode.ClassFileEntry#resolve(ClassConstantPool)"
    ],
    "org.apache.commons.compress.compressors.deflate64.HuffmanDecoder.UncompressedState#available()": ["org.apache.commons.compress.utils.BitInputStream#bitsAvailable()"],
    "org.apache.commons.compress.compressors.bzip2.CRC#update(int)": ["org.apache.commons.compress.compressors.bzip2.CRC.<staticinit>()"],
    "org.apache.commons.compress.archivers.tar.TarFile#isDirectory()": ["org.apache.commons.compress.archivers.tar.TarArchiveEntry#isDirectory()"],
    "org.apache.commons.compress.archivers.zip.ZipArchiveEntry#setLastAccessTime(FileTime)": ["org.apache.commons.compress.archivers.zip.ZipArchiveEntry#setExtraTimeFields()"],
    "org.apache.commons.compress.harmony.unpack200.bytecode.AnnotationDefaultAttribute#getNestedClassFileEntries()": [
        "org.apache.commons.compress.harmony.unpack200.bytecode.AnnotationDefaultAttribute.<staticinit>()",
        "org.apache.commons.compress.harmony.unpack200.bytecode.AnnotationsAttribute.ElementValue#getClassFileEntries()"
    ],
    "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream#finish()": [
        "org.apache.commons.compress.archivers.zip.FileRandomAccessOutputStream#close()",
        "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream#writeCentralDirectoryEnd()",
        "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream#writeZip64CentralDirectory()",
        "org.apache.commons.compress.compressors.deflate.DeflateCompressorOutputStream#close()",
        "org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream#close()",
        "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream#close()",
        "org.apache.commons.compress.compressors.lzma.LZMACompressorOutputStream#close()",
        "org.apache.commons.compress.archivers.zip.NioZipEncoding#encode(String)",
        "org.apache.commons.compress.archivers.zip.ZipSplitOutputStream#close()",
        "org.apache.commons.compress.archivers.zip.SeekableChannelRandomAccessOutputStream#close()",
        "org.apache.commons.compress.archivers.sevenz.Coders.DeflateDecoder.DeflateDecoderOutputStream#close()",
        "org.apache.commons.compress.compressors.lz4.BlockLZ4CompressorOutputStream#close()",
        "org.apache.commons.compress.archivers.ar.ArArchiveOutputStream#close()",
        "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream#close()",
        "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream#writeCentralDirectoryInChunks()",
        "org.apache.commons.compress.archivers.zip.StreamCompressor#getTotalBytesWritten()",
        "org.apache.commons.compress.archivers.zip.StreamCompressor#close()",
        "org.apache.commons.compress.compressors.snappy.SnappyCompressorOutputStream#close()",
        "org.apache.commons.compress.archivers.tar.TarUtils$ZipEncoding$1#encode(String)",
        "org.apache.commons.compress.archivers.zip.Zip64Mode.<staticinit>()",
        "org.apache.commons.compress.utils.FixedLengthBlockOutputStream#close()",
        "org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorOutputStream#close()",
        "org.apache.commons.compress.compressors.xz.XZCompressorOutputStream#close()",
        "org.apache.commons.compress.archivers.zip.ZipConstants.<staticinit>()",
        "org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorOutputStream#close()",
        "org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream#close()",
        "org.apache.commons.compress.compressors.zstandard.ZstdCompressorOutputStream#close()",
        "org.apache.commons.compress.archivers.sevenz.AES256SHA256Decoder.AES256SHA256DecoderOutputStream#close()",
        "org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream#close()",
        "org.apache.commons.compress.archivers.zip.ZipSplitOutputStream#getCurrentSplitSegmentBytesWritten()",
        "org.apache.commons.compress.archivers.zip.ZipSplitOutputStream#getCurrentSplitSegmentIndex()",
        "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream#close()",
        "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.OutputStreamWrapper#close()"
    ],
    "org.apache.commons.compress.archivers.zip.ZipArchiveEntry#hashCode()": ["org.apache.commons.compress.archivers.zip.ZipArchiveEntry#getName()"],
    "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream#sendMTFValues4()": [
        "org.apache.commons.compress.archivers.sevenz.AES256SHA256Decoder.AES256SHA256DecoderOutputStream#write(int)",
        "org.apache.commons.compress.compressors.snappy.SnappyCompressorOutputStream#write(int)",
        "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream#bsW(int,int)",
        "org.apache.commons.compress.archivers.sevenz.Coders.DeflateDecoder.DeflateDecoderOutputStream#write(int)",
        "org.apache.commons.compress.compressors.lz4.BlockLZ4CompressorOutputStream#write(int)",
        "org.apache.commons.compress.compressors.deflate.DeflateCompressorOutputStream#write(int)",
        "org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorOutputStream#write(int)",
        "org.apache.commons.compress.compressors.lzma.LZMACompressorOutputStream#write(int)",
        "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream#write(int)",
        "org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream#write(int)",
        "org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorOutputStream#write(int)",
        "org.apache.commons.compress.compressors.xz.XZCompressorOutputStream#write(int)",
        "org.apache.commons.compress.utils.FixedLengthBlockOutputStream#write(int)",
        "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.OutputStreamWrapper#write(int)",
        "org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream#write(int)",
        "org.apache.commons.compress.archivers.ArchiveOutputStream#write(int)",
        "org.apache.commons.compress.archivers.zip.ZipSplitOutputStream#write(int)",
        "org.apache.commons.compress.compressors.zstandard.ZstdCompressorOutputStream#write(int)",
        "org.apache.commons.compress.archivers.zip.RandomAccessOutputStream#write(int)"
    ],
    "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream#isApkSigningBlock(byte[])": [
        "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream#readFully(byte[],int)",
        "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream#readFully(byte[])",
        "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.<staticinit>()",
        "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream#realSkip(long)",
        "org.apache.commons.compress.archivers.zip.ZipEightByteInteger.getValue(byte[])",
        "org.apache.commons.compress.archivers.zip.ZipConstants.<staticinit>()"
    ],
    "org.apache.commons.compress.archivers.dump.DumpArchiveInputStream#getPath(DumpArchiveEntry)": [
        "org.apache.commons.compress.archivers.dump.DumpArchiveException#DumpArchiveException(String)",
        "org.apache.commons.compress.archivers.dump.Dirent#getName()",
        "org.apache.commons.compress.archivers.dump.Dirent#getIno()",
        "org.apache.commons.compress.archivers.dump.DumpArchiveEntry#getIno()",
        "org.apache.commons.compress.archivers.dump.Dirent#getParentIno()"
    ],
    "org.apache.commons.compress.archivers.tar.TarArchiveEntry#getDirectoryEntries()": [
        "org.apache.commons.compress.archivers.tar.TarArchiveEntry#TarArchiveEntry(Path)",
        "org.apache.commons.compress.archivers.tar.TarArchiveEntry.<staticinit>()",
        "org.apache.commons.compress.archivers.tar.TarArchiveEntry#isDirectory()"
    ],
    "org.apache.commons.compress.archivers.zip.ExplodingInputStream#init()": [
        "org.apache.commons.compress.archivers.zip.BitStream#BitStream(InputStream)",
        "org.apache.commons.compress.archivers.zip.BinaryTree.decode(InputStream,int)"
    ],
    "org.apache.commons.compress.harmony.unpack200.bytecode.NewAttribute#NewAttribute(CPUTF8,int)": [
        "org.apache.commons.compress.harmony.unpack200.bytecode.NewAttribute.<init>()",
        "org.apache.commons.compress.harmony.unpack200.bytecode.BCIRenumberedAttribute#BCIRenumberedAttribute(CPUTF8)"
    ],
    "org.apache.commons.compress.archivers.zip.StreamCompressor#writeCounted(byte[],int,int)": [
        "org.apache.commons.compress.archivers.zip.StreamCompressor.ScatterGatherBackingStoreCompressor#writeOut(byte[],int,int)",
        "org.apache.commons.compress.archivers.zip.StreamCompressor.SeekableByteChannelCompressor#writeOut(byte[],int,int)",
        "org.apache.commons.compress.archivers.zip.StreamCompressor.OutputStreamCompressor#writeOut(byte[],int,int)",
        "org.apache.commons.compress.archivers.zip.StreamCompressor.DataOutputCompressor#writeOut(byte[],int,int)"
    ],
    "org.apache.commons.compress.harmony.unpack200.bytecode.ExceptionsAttribute#resolve(ClassConstantPool)": [
        "org.apache.commons.compress.harmony.unpack200.bytecode.Attribute#resolve(ClassConstantPool)",
        "org.apache.commons.compress.harmony.unpack200.bytecode.ClassConstantPool#indexOf(ClassFileEntry)",
        "org.apache.commons.compress.harmony.unpack200.bytecode.CPClass#resolve(ClassConstantPool)"
    ],
    "org.apache.commons.compress.utils.SeekableInMemoryByteChannel#SeekableInMemoryByteChannel(int)": ["org.apache.commons.compress.utils.SeekableInMemoryByteChannel#SeekableInMemoryByteChannel(byte[])"],
    "org.apache.commons.compress.harmony.unpack200.CpBands#cpSignatureValue(int)": ["org.apache.commons.compress.harmony.unpack200.bytecode.CPUTF8#CPUTF8(String,int)"],
    "org.apache.commons.compress.harmony.unpack200.NewAttributeBands#getOneAttribute(int,List<AttributeLayoutElement>)": [
        "org.apache.commons.compress.harmony.unpack200.NewAttributeBands.UnionCase#addToAttribute(int,NewAttribute)",
        "org.apache.commons.compress.harmony.unpack200.NewAttributeBands.Call#addToAttribute(int,NewAttribute)",
        "org.apache.commons.compress.harmony.unpack200.AttributeLayout#getName()",
        "org.apache.commons.compress.harmony.unpack200.AttributeLayout#getIndex()",
        "org.apache.commons.compress.harmony.unpack200.bytecode.NewAttribute#NewAttribute(CPUTF8,int)",
        "org.apache.commons.compress.harmony.unpack200.CpBands#cpUTF8Value(String)",
        "org.apache.commons.compress.harmony.unpack200.NewAttributeBands.Integral#addToAttribute(int,NewAttribute)",
        "org.apache.commons.compress.harmony.unpack200.NewAttributeBands.Union#addToAttribute(int,NewAttribute)",
        "org.apache.commons.compress.harmony.unpack200.NewAttributeBands.Callable#addToAttribute(int,NewAttribute)",
        "org.apache.commons.compress.harmony.unpack200.NewAttributeBands.Reference#addToAttribute(int,NewAttribute)",
        "org.apache.commons.compress.harmony.unpack200.Segment#getCpBands()",
        "org.apache.commons.compress.harmony.unpack200.NewAttributeBands.Replication#addToAttribute(int,NewAttribute)"
    ],
    "org.apache.commons.compress.archivers.zip.ZipFile#ZipFile(File)": [
        "org.apache.commons.compress.archivers.zip.ZipFile#ZipFile(File,String)",
        "org.apache.commons.compress.archivers.zip.ZipFile.<staticinit>()"
    ],
    "org.apache.commons.compress.archivers.zip.ZipEightByteInteger.getValue(byte[],int)": [
        "org.apache.commons.compress.archivers.zip.ZipEightByteInteger.<staticinit>()",
        "org.apache.commons.compress.archivers.zip.ZipConstants.<staticinit>()"
    ],
    "org.apache.commons.compress.archivers.zip.FileRandomAccessOutputStream#FileRandomAccessOutputStream(Path,OpenOption[]...)": ["org.apache.commons.compress.archivers.zip.FileRandomAccessOutputStream#FileRandomAccessOutputStream(FileChannel)"],
    "org.apache.commons.compress.archivers.zip.ParallelScatterZipCreator#writeTo(ZipArchiveOutputStream)": [
        "org.apache.commons.compress.archivers.zip.ScatterZipOutputStream#close()",
        "org.apache.commons.compress.archivers.zip.ParallelScatterZipCreator#closeAll()",
        "org.apache.commons.compress.archivers.zip.ScatterZipOutputStream.ZipEntryWriter#writeNextZipEntry(ZipArchiveOutputStream)",
        "org.apache.commons.compress.archivers.zip.ScatterZipOutputStream#zipEntryWriter()"
    ],
    "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.ExtraFieldParsingMode#ExtraFieldParsingMode(UnparseableExtraField)": ["org.apache.commons.compress.archivers.zip.ZipArchiveEntry.ExtraFieldParsingMode.<init>()"],
    "org.apache.commons.compress.archivers.zip.UnicodeCommentExtraField#UnicodeCommentExtraField(String,byte[],int,int)": [
        "org.apache.commons.compress.archivers.zip.UnicodeCommentExtraField.<init>()",
        "org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField#AbstractUnicodeExtraField(String,byte[],int,int)"
    ],
    "org.apache.commons.compress.archivers.tar.TarArchiveEntry#writeEntryHeader(byte[])": [
        "org.apache.commons.compress.archivers.tar.TarArchiveEntry#writeEntryHeader(byte[],ZipEncoding,boolean)",
        "org.apache.commons.compress.archivers.tar.TarUtils.<staticinit>()"
    ],
    "org.apache.commons.compress.harmony.unpack200.bytecode.forms.ShortForm#setByteCodeOperands(ByteCode,OperandManager,int)": [
        "org.apache.commons.compress.harmony.unpack200.bytecode.ByteCode#setOperand2Bytes(int,int)",
        "org.apache.commons.compress.harmony.unpack200.bytecode.OperandManager#nextShort()"
    ],
    "org.apache.commons.compress.archivers.zip.ZipFile#resolveLocalFileHeaderData(Map<ZipArchiveEntry, NameAndComment>)": [
        "org.apache.commons.compress.archivers.zip.ZipFile#setDataOffset(ZipArchiveEntry)",
        "org.apache.commons.compress.archivers.zip.ZipFile#skipBytes(int)",
        "org.apache.commons.compress.archivers.zip.ZipUtil.setNameAndCommentFromExtraFields(ZipArchiveEntry,byte[],byte[])",
        "org.apache.commons.compress.utils.IOUtils.readRange(ReadableByteChannel,int)",
        "org.apache.commons.compress.archivers.zip.ZipArchiveEntry#getName()",
        "org.apache.commons.compress.archivers.zip.ZipArchiveEntry#setExtra(byte[])"
    ],
    "org.apache.commons.compress.archivers.zip.ZipArchiveEntry#setExtra(byte[])": [
        "org.apache.commons.compress.archivers.zip.ZipArchiveEntry#parseExtraFields(byte[],boolean,ExtraFieldParsingBehavior)",
        "org.apache.commons.compress.archivers.zip.ZipArchiveEntry#mergeExtraFields(ZipExtraField[],boolean)",
        "org.apache.commons.compress.archivers.zip.ZipArchiveEntry#getName()",
        "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.ExtraFieldParsingMode.<staticinit>()"
    ],
    "org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStream#close()": ["org.apache.commons.compress.compressors.lz77support.AbstractLZ77CompressorInputStream#close()"],
    "org.apache.commons.compress.archivers.sevenz.BindPair#BindPair(long,long)": ["org.apache.commons.compress.archivers.sevenz.BindPair.<init>()"],
    "org.apache.commons.compress.archivers.dump.DumpArchiveInputStream#close()": ["org.apache.commons.compress.archivers.dump.TapeInputStream#close()"],
    "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.<staticinit>()": [
        "org.apache.commons.compress.archivers.zip.ZipLong#getBytes()",
        "org.apache.commons.compress.archivers.zip.ZipLong.<staticinit>()",
        "org.apache.commons.compress.archivers.zip.ZipConstants.<staticinit>()"
    ],
    "org.apache.commons.compress.utils.OsgiUtils.isRunningInOsgiEnvironment()": ["org.apache.commons.compress.utils.OsgiUtils.<staticinit>()"],
    "org.apache.commons.compress.harmony.unpack200.bytecode.InnerClassesAttribute#writeBody(DataOutputStream)": ["org.apache.commons.compress.harmony.unpack200.bytecode.InnerClassesAttribute.InnerClassesEntry#write(DataOutputStream)"],
    "org.apache.commons.compress.archivers.zip.ZipArchiveEntry#internalAddExtraField(ZipExtraField)": [
        "org.apache.commons.compress.archivers.zip.X7875_NewUnix#getHeaderId()",
        "org.apache.commons.compress.archivers.zip.JarMarker#getHeaderId()",
        "org.apache.commons.compress.archivers.zip.PKWareExtraHeader#getHeaderId()",
        "org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField#getHeaderId()",
        "org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp#getHeaderId()",
        "org.apache.commons.compress.archivers.zip.ZipArchiveEntry#internalRemoveExtraField(ZipShort)",
        "org.apache.commons.compress.archivers.zip.ZipArchiveEntry#copyOf(ZipExtraField[],int)",
        "org.apache.commons.compress.archivers.zip.X000A_NTFS#getHeaderId()",
        "org.apache.commons.compress.archivers.zip.UnparseableExtraFieldData#getHeaderId()",
        "org.apache.commons.compress.archivers.zip.ResourceAlignmentExtraField#getHeaderId()",
        "org.apache.commons.compress.archivers.zip.AsiExtraField#getHeaderId()",
        "org.apache.commons.compress.archivers.zip.UnicodePathExtraField#getHeaderId()",
        "org.apache.commons.compress.archivers.zip.ZipArchiveEntry#getExtraField(ZipShort)",
        "org.apache.commons.compress.archivers.zip.UnicodeCommentExtraField#getHeaderId()",
        "org.apache.commons.compress.archivers.zip.UnrecognizedExtraField#getHeaderId()"
    ],
    "org.apache.commons.compress.archivers.zip.SeekableChannelRandomAccessOutputStream#writeFully(byte[],int,int,long)": [
        "org.apache.commons.compress.utils.SeekableInMemoryByteChannel#position(long)",
        "org.apache.commons.compress.utils.MultiReadOnlySeekableByteChannel#position(long)",
        "org.apache.commons.compress.utils.SeekableInMemoryByteChannel#position()",
        "org.apache.commons.compress.archivers.zip.ZipIoUtil.writeFully(SeekableByteChannel,ByteBuffer)",
        "org.apache.commons.compress.utils.MultiReadOnlySeekableByteChannel#position()"
    ],
    "org.apache.commons.compress.compressors.deflate64.HuffmanDecoder#readDynamicTables()": [
        "org.apache.commons.compress.compressors.deflate64.HuffmanDecoder#readBits(int)",
        "org.apache.commons.compress.compressors.deflate64.HuffmanDecoder.populateDynamicTables(BitInputStream,int[],int[])"
    ],
    "org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp.unixTimeToZipLong(long)": [
        "org.apache.commons.compress.utils.TimeUtils.isUnixTime(long)",
        "org.apache.commons.compress.archivers.zip.ZipLong#ZipLong(long)"
    ],
    "org.apache.commons.compress.harmony.unpack200.bytecode.ByteCode#setOperandBytes(int[])": [
        "org.apache.commons.compress.harmony.unpack200.bytecode.forms.ByteCodeForm#operandLength()",
        "org.apache.commons.compress.harmony.unpack200.bytecode.forms.ByteCodeForm#firstOperandIndex()",
        "org.apache.commons.compress.harmony.unpack200.bytecode.ByteCode#getByteCodeForm()"
    ],
    "org.apache.commons.compress.compressors.lzma.LZMACompressorInputStream#read()": [
        "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream#read()",
        "org.apache.commons.compress.archivers.sevenz.AES256SHA256Decoder.AES256SHA256DecoderInputStream#read()",
        "org.apache.commons.compress.compressors.xz.XZCompressorInputStream#read()",
        "org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorInputStream#read()",
        "org.apache.commons.compress.compressors.lz77support.AbstractLZ77CompressorInputStream#read()",
        "org.apache.commons.compress.compressors.CompressorInputStream#count(int)",
        "org.apache.commons.compress.compressors.deflate.DeflateCompressorInputStream#read()",
        "org.apache.commons.compress.archivers.zip.ExplodingInputStream#read()",
        "org.apache.commons.compress.compressors.lzma.LZMACompressorInputStream#read()",
        "org.apache.commons.compress.compressors.zstandard.ZstdCompressorInputStream#read()",
        "org.apache.commons.compress.archivers.sevenz.BoundedSeekableByteChannelInputStream#read()",
        "org.apache.commons.compress.utils.BoundedArchiveInputStream#read()",
        "org.apache.commons.compress.compressors.brotli.BrotliCompressorInputStream#read()",
        "org.apache.commons.compress.archivers.tar.TarArchiveSparseZeroInputStream#read()",
        "org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream#read()",
        "org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStream#read()",
        "org.apache.commons.compress.compressors.deflate64.Deflate64CompressorInputStream#read()",
        "org.apache.commons.compress.compressors.lzw.LZWInputStream#read()",
        "org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream#read()"
    ],
    "org.apache.commons.compress.archivers.zip.ZipFile.tryToLocateSignature(SeekableByteChannel,long,long,byte[])": [
        "org.apache.commons.compress.utils.IOUtils.readFully(ReadableByteChannel,ByteBuffer)",
        "org.apache.commons.compress.archivers.zip.ZipFile.<staticinit>()",
        "org.apache.commons.compress.utils.MultiReadOnlySeekableByteChannel#size()",
        "org.apache.commons.compress.utils.SeekableInMemoryByteChannel#position(long)",
        "org.apache.commons.compress.utils.MultiReadOnlySeekableByteChannel#position(long)",
        "org.apache.commons.compress.utils.SeekableInMemoryByteChannel#size()",
        "org.apache.commons.compress.archivers.zip.ZipConstants.<staticinit>()"
    ],
    "org.apache.commons.compress.compressors.lz77support.LZ77Compressor.EOD.<init>()": ["org.apache.commons.compress.compressors.lz77support.LZ77Compressor.Block.<init>()"],
    "org.apache.commons.compress.archivers.sevenz.LZMADecoder#getOptionsFromCoder(Coder,InputStream)": ["org.apache.commons.compress.archivers.sevenz.LZMADecoder#getDictionarySize(Coder)"],
    "org.apache.commons.compress.archivers.zip.ZipFile.BoundedFileChannelInputStream#BoundedFileChannelInputStream(long,long,FileChannel)": [
        "org.apache.commons.compress.utils.BoundedArchiveInputStream#BoundedArchiveInputStream(long,long)",
        "org.apache.commons.compress.archivers.zip.ZipFile.BoundedFileChannelInputStream.<init>()"
    ],
    "org.apache.commons.compress.harmony.pack200.ClassBands#writeCodeAttributeBands(OutputStream)": [
        "org.apache.commons.compress.harmony.pack200.BandSet#encodeBandInt(String,int[],BHSDCodec)",
        "org.apache.commons.compress.harmony.pack200.Codec.<staticinit>()",
        "org.apache.commons.compress.harmony.pack200.SegmentHeader#have_code_flags_hi()",
        "org.apache.commons.compress.harmony.pack200.BandSet#encodeFlags(String,long[],BHSDCodec,BHSDCodec,boolean)",
        "org.apache.commons.compress.harmony.pack200.IntList#size()",
        "org.apache.commons.compress.harmony.pack200.NewAttributeBands#pack(OutputStream)",
        "org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream#write(byte[])",
        "org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream#write(byte[])",
        "org.apache.commons.compress.archivers.sevenz.Coders.DeflateDecoder.DeflateDecoderOutputStream#write(byte[])",
        "org.apache.commons.compress.harmony.pack200.BandSet#longListToArray(List<Long>)",
        "org.apache.commons.compress.harmony.pack200.BandSet#cpEntryListToArray(List<? extends ConstantPoolEntry>)",
        "org.apache.commons.compress.harmony.pack200.PackingUtils.log(String)",
        "org.apache.commons.compress.harmony.pack200.IntList#toArray()",
        "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.OutputStreamWrapper#write(byte[])",
        "org.apache.commons.compress.archivers.zip.ZipSplitOutputStream#write(byte[])",
        "org.apache.commons.compress.harmony.pack200.BandSet#integerListToArray(List<Integer>)"
    ],
    "org.apache.commons.compress.harmony.unpack200.SegmentOptions#hasFileModtime()": ["org.apache.commons.compress.harmony.unpack200.SegmentOptions.<staticinit>()"],
    "org.apache.commons.compress.compressors.snappy.SnappyCompressorOutputStream#SnappyCompressorOutputStream(OutputStream,long,Parameters)": [
        "org.apache.commons.compress.compressors.lz77support.LZ77Compressor.LiteralBlock#getType()",
        "org.apache.commons.compress.compressors.lz77support.LZ77Compressor.Block.BlockType.<staticinit>()",
        "org.apache.commons.compress.compressors.snappy.SnappyCompressorOutputStream#writeLiteralBlock(LiteralBlock)",
        "org.apache.commons.compress.compressors.lz77support.LZ77Compressor#LZ77Compressor(Parameters,Callback)",
        "org.apache.commons.compress.compressors.lz77support.LZ77Compressor.BackReference#getType()",
        "org.apache.commons.compress.compressors.snappy.SnappyCompressorOutputStream#writeBackReference(BackReference)",
        "org.apache.commons.compress.compressors.snappy.SnappyCompressorOutputStream#writeUncompressedSize(long)",
        "org.apache.commons.compress.compressors.lz77support.LZ77Compressor.EOD#getType()",
        "org.apache.commons.compress.compressors.CompressorOutputStream.<init>()",
        "org.apache.commons.compress.utils.ByteUtils.OutputStreamByteConsumer#OutputStreamByteConsumer(OutputStream)",
        "org.apache.commons.compress.compressors.snappy.SnappyCompressorOutputStream.<init>()"
    ],
    "org.apache.commons.compress.archivers.cpio.CpioArchiveEntry#isSymbolicLink()": [
        "org.apache.commons.compress.archivers.cpio.CpioUtil.fileType(long)",
        "org.apache.commons.compress.archivers.cpio.CpioConstants.<staticinit>()"
    ],
    "org.apache.commons.compress.harmony.unpack200.bytecode.ByteCode#getName()": [
        "org.apache.commons.compress.harmony.unpack200.bytecode.forms.ByteCodeForm#getName()",
        "org.apache.commons.compress.harmony.unpack200.bytecode.ByteCode#getByteCodeForm()"
    ],
    "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream#close()": ["org.apache.commons.compress.utils.BitInputStream#close()"],
    "org.apache.commons.compress.compressors.CompressorStreamFactory.getDeflate()": ["org.apache.commons.compress.compressors.CompressorStreamFactory.<staticinit>()"],
    "org.apache.commons.compress.archivers.arj.ArjArchiveEntry#isDirectory()": ["org.apache.commons.compress.archivers.arj.LocalFileHeader.FileTypes.<staticinit>()"],
    "org.apache.commons.compress.utils.MultiReadOnlySeekableByteChannel#position(long,long)": [
        "org.apache.commons.compress.utils.MultiReadOnlySeekableByteChannel#position(long)",
        "org.apache.commons.compress.utils.MultiReadOnlySeekableByteChannel#isOpen()"
    ],
    "org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorOutputStream#writeFrameDescriptor()": [
        "org.apache.commons.compress.archivers.sevenz.AES256SHA256Decoder.AES256SHA256DecoderOutputStream#write(int)",
        "org.apache.commons.compress.compressors.snappy.SnappyCompressorOutputStream#write(int)",
        "org.apache.commons.compress.archivers.sevenz.Coders.DeflateDecoder.DeflateDecoderOutputStream#write(int)",
        "org.apache.commons.compress.compressors.lz4.BlockLZ4CompressorOutputStream#write(int)",
        "org.apache.commons.compress.compressors.deflate.DeflateCompressorOutputStream#write(int)",
        "org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorOutputStream#write(int)",
        "org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorInputStream.<staticinit>()",
        "org.apache.commons.compress.compressors.lzma.LZMACompressorOutputStream#write(int)",
        "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream#write(int)",
        "org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream#write(int)",
        "org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorOutputStream#write(int)",
        "org.apache.commons.compress.compressors.xz.XZCompressorOutputStream#write(int)",
        "org.apache.commons.compress.utils.FixedLengthBlockOutputStream#write(int)",
        "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.OutputStreamWrapper#write(int)",
        "org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream#write(int)",
        "org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorOutputStream.BlockSize#getIndex()",
        "org.apache.commons.compress.archivers.ArchiveOutputStream#write(int)",
        "org.apache.commons.compress.archivers.zip.ZipSplitOutputStream#write(int)",
        "org.apache.commons.compress.compressors.zstandard.ZstdCompressorOutputStream#write(int)",
        "org.apache.commons.compress.archivers.zip.RandomAccessOutputStream#write(int)"
    ],
    "org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream#createArchiveEntry(File,String)": ["org.apache.commons.compress.archivers.cpio.CpioArchiveEntry#CpioArchiveEntry(File,String)"],
    "org.apache.commons.compress.archivers.sevenz.AES256SHA256Decoder.AES256SHA256DecoderOutputStream#AES256SHA256DecoderOutputStream(AES256Options,OutputStream)": [
        "org.apache.commons.compress.archivers.sevenz.AES256Options#getCipher()",
        "org.apache.commons.compress.archivers.sevenz.AES256SHA256Decoder.AES256SHA256DecoderOutputStream.<init>()"
    ],
    "org.apache.commons.compress.compressors.lz77support.LZ77Compressor.LiteralBlock#LiteralBlock(byte[],int,int)": [
        "org.apache.commons.compress.compressors.lz77support.LZ77Compressor.Block.<init>()",
        "org.apache.commons.compress.compressors.lz77support.LZ77Compressor.LiteralBlock.<init>()"
    ],
    "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream#deflate()": ["org.apache.commons.compress.archivers.zip.StreamCompressor#deflate()"],
    "org.apache.commons.compress.archivers.zip.X000A_NTFS#getModifyJavaTime()": ["org.apache.commons.compress.archivers.zip.X000A_NTFS.zipToDate(ZipEightByteInteger)"],
    "org.apache.commons.compress.archivers.zip.StreamCompressor#write(byte[],int,int,int)": [
        "org.apache.commons.compress.archivers.zip.StreamCompressor#writeDeflated(byte[],int,int)",
        "org.apache.commons.compress.archivers.zip.StreamCompressor#writeCounted(byte[],int,int)"
    ],
    "org.apache.commons.compress.archivers.Lister.main(String[]...)": [
        "org.apache.commons.compress.archivers.Lister.usage()",
        "org.apache.commons.compress.archivers.Lister#go()",
        "org.apache.commons.compress.archivers.Lister#Lister(boolean,String[]...)"
    ],
    "org.apache.commons.compress.archivers.zip.BitStream#nextBits(int)": ["org.apache.commons.compress.utils.BitInputStream#readBits(int)"],
    "org.apache.commons.compress.archivers.sevenz.CLI.grabMode(String[])": ["org.apache.commons.compress.archivers.sevenz.CLI.Mode.<staticinit>()"],
    "org.apache.commons.compress.archivers.zip.AsiExtraField#getMode(int)": [
        "org.apache.commons.compress.archivers.zip.AsiExtraField#isLink()",
        "org.apache.commons.compress.archivers.zip.UnixStat.<staticinit>()",
        "org.apache.commons.compress.archivers.zip.AsiExtraField#isDirectory()"
    ],
    "org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStream#FramedSnappyCompressorInputStream(InputStream,FramedSnappyDialect)": [
        "org.apache.commons.compress.compressors.snappy.SnappyCompressorInputStream.<staticinit>()",
        "org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStream#FramedSnappyCompressorInputStream(InputStream,int,FramedSnappyDialect)"
    ],
    "org.apache.commons.compress.compressors.snappy.SnappyCompressorOutputStream#writeLiteralBlockNoSizeBytes(LiteralBlock,int)": ["org.apache.commons.compress.compressors.snappy.SnappyCompressorOutputStream#writeLiteralBlockWithSize(int,int,int,LiteralBlock)"],
    "org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream#CpioArchiveInputStream(InputStream,int,String)": [
        "org.apache.commons.compress.archivers.ArchiveInputStream#ArchiveInputStream(InputStream,String)",
        "org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream.<init>()",
        "org.apache.commons.compress.archivers.zip.ZipEncodingHelper.getZipEncoding(String)",
        "org.apache.commons.compress.archivers.cpio.CpioConstants.<staticinit>()"
    ],
    "org.apache.commons.compress.harmony.unpack200.bytecode.InnerClassesAttribute#addInnerClassesEntry(CPClass,CPClass,CPUTF8,int)": [
        "org.apache.commons.compress.harmony.unpack200.bytecode.InnerClassesAttribute#addInnerClassesEntry(InnerClassesEntry)",
        "org.apache.commons.compress.harmony.unpack200.bytecode.InnerClassesAttribute.InnerClassesEntry#InnerClassesEntry(CPClass,CPClass,CPUTF8,int)"
    ],
    "org.apache.commons.compress.archivers.zip.X000A_NTFS#setAccessJavaTime(Date)": [
        "org.apache.commons.compress.archivers.zip.X000A_NTFS.dateToZip(Date)",
        "org.apache.commons.compress.archivers.zip.X000A_NTFS#setAccessTime(ZipEightByteInteger)"
    ],
    "org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream#writeAsciiLong(long,int,int)": [
        "org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream#write(byte[])",
        "org.apache.commons.compress.archivers.sevenz.Coders.DeflateDecoder.DeflateDecoderOutputStream#write(byte[])",
        "org.apache.commons.compress.archivers.ArchiveOutputStream#count(int)",
        "org.apache.commons.compress.utils.ArchiveUtils.toAsciiBytes(String)",
        "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.OutputStreamWrapper#write(byte[])",
        "org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream#write(byte[])",
        "org.apache.commons.compress.archivers.zip.ZipSplitOutputStream#write(byte[])"
    ],
    "org.apache.commons.compress.archivers.jar.JarArchiveOutputStream#JarArchiveOutputStream(OutputStream)": [
        "org.apache.commons.compress.archivers.jar.JarArchiveOutputStream.<init>()",
        "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream#ZipArchiveOutputStream(OutputStream)"
    ],
    "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream#setupNoRandPartB()": [
        "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream#setupNoRandPartA()",
        "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream#setupNoRandPartC()",
        "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.checkBounds(int,int,String)"
    ],
    "org.apache.commons.compress.archivers.tar.TarUtils.formatLongOctalBytes(long,byte[],int,int)": ["org.apache.commons.compress.archivers.tar.TarUtils.formatUnsignedOctalString(long,byte[],int,int)"],
    "org.apache.commons.compress.archivers.zip.BinaryTree#BinaryTree(int)": [
        "org.apache.commons.compress.archivers.zip.BinaryTree.<init>()",
        "org.apache.commons.compress.archivers.zip.BinaryTree.<staticinit>()"
    ],
    "org.apache.commons.compress.compressors.lz4.BlockLZ4CompressorOutputStream.Pair#canBeWritten(int)": [
        "org.apache.commons.compress.compressors.lz4.BlockLZ4CompressorOutputStream.<staticinit>()",
        "org.apache.commons.compress.compressors.lz4.BlockLZ4CompressorOutputStream.Pair#hasBackReference()"
    ],
    "org.apache.commons.compress.harmony.unpack200.bytecode.forms.ThisMethodRefForm#getPoolID()": ["org.apache.commons.compress.harmony.unpack200.SegmentConstantPool.<staticinit>()"],
    "org.apache.commons.compress.archivers.sevenz.SevenZFile#sanityCheckSubStreamsInfo(ByteBuffer,ArchiveStatistics)": [
        "org.apache.commons.compress.archivers.sevenz.SevenZFile#readAllOrBits(ByteBuffer,int)",
        "org.apache.commons.compress.archivers.sevenz.NID.<staticinit>()",
        "org.apache.commons.compress.archivers.sevenz.SevenZFile.skipBytesFully(ByteBuffer,long)",
        "org.apache.commons.compress.archivers.sevenz.SevenZFile.readUint64(ByteBuffer)",
        "org.apache.commons.compress.archivers.sevenz.SevenZFile.assertFitsIntoNonNegativeInt(String,long)",
        "org.apache.commons.compress.archivers.sevenz.SevenZFile.getUnsignedByte(ByteBuffer)"
    ],
    "org.apache.commons.compress.harmony.unpack200.bytecode.AnnotationDefaultAttribute#getLength()": ["org.apache.commons.compress.harmony.unpack200.bytecode.AnnotationsAttribute.ElementValue#getLength()"],
    "org.apache.commons.compress.harmony.unpack200.bytecode.CPFloat#CPFloat(Float,int)": [
        "org.apache.commons.compress.harmony.unpack200.bytecode.ConstantPoolEntry.<staticinit>()",
        "org.apache.commons.compress.harmony.unpack200.bytecode.CPConstantNumber#CPConstantNumber(byte,Object,int)",
        "org.apache.commons.compress.harmony.unpack200.bytecode.CPFloat.<init>()"
    ],
    "org.apache.commons.compress.harmony.unpack200.bytecode.ByteCode#hasMultipleByteCodes()": [
        "org.apache.commons.compress.harmony.unpack200.bytecode.ByteCode#getByteCodeForm()",
        "org.apache.commons.compress.harmony.unpack200.bytecode.forms.ByteCodeForm#hasMultipleByteCodes()"
    ],
    "org.apache.commons.compress.archivers.tar.TarUtils.readSparseStructs(byte[],int,int)": [
        "org.apache.commons.compress.archivers.tar.TarUtils.parseSparse(byte[],int)",
        "org.apache.commons.compress.archivers.tar.TarArchiveStructSparse#getOffset()",
        "org.apache.commons.compress.archivers.tar.TarConstants.<staticinit>()",
        "org.apache.commons.compress.archivers.tar.TarArchiveStructSparse#getNumbytes()"
    ],
    "org.apache.commons.compress.archivers.sevenz.Coders.BZIP2Decoder#decode(String,InputStream,long,Coder,byte[],int)": ["org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream#BZip2CompressorInputStream(InputStream)"],
    "org.apache.commons.compress.utils.IOUtils.read(File,byte[])": ["org.apache.commons.compress.utils.IOUtils.readFully(InputStream,byte[],int,int)"],
    "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream#skip(long)": ["org.apache.commons.compress.archivers.zip.ZipArchiveInputStream#read(byte[],int,int)"],
    "org.apache.commons.compress.archivers.cpio.CpioArchiveEntry#CpioArchiveEntry(Path,String,LinkOption[]...)": [
        "org.apache.commons.compress.archivers.cpio.CpioArchiveEntry#CpioArchiveEntry(short,Path,String,LinkOption[]...)",
        "org.apache.commons.compress.archivers.cpio.CpioConstants.<staticinit>()"
    ],
    "org.apache.commons.compress.compressors.snappy.SnappyCompressorOutputStream#writeBackReferenceWithLittleEndianOffset(int,int,int,int)": [
        "org.apache.commons.compress.archivers.sevenz.AES256SHA256Decoder.AES256SHA256DecoderOutputStream#write(int)",
        "org.apache.commons.compress.compressors.snappy.SnappyCompressorOutputStream#write(int)",
        "org.apache.commons.compress.archivers.sevenz.Coders.DeflateDecoder.DeflateDecoderOutputStream#write(int)",
        "org.apache.commons.compress.compressors.lz4.BlockLZ4CompressorOutputStream#write(int)",
        "org.apache.commons.compress.compressors.deflate.DeflateCompressorOutputStream#write(int)",
        "org.apache.commons.compress.compressors.snappy.SnappyCompressorOutputStream#writeLittleEndian(int,int)",
        "org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorOutputStream#write(int)",
        "org.apache.commons.compress.compressors.lzma.LZMACompressorOutputStream#write(int)",
        "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream#write(int)",
        "org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream#write(int)",
        "org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorOutputStream#write(int)",
        "org.apache.commons.compress.compressors.xz.XZCompressorOutputStream#write(int)",
        "org.apache.commons.compress.utils.FixedLengthBlockOutputStream#write(int)",
        "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.OutputStreamWrapper#write(int)",
        "org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream#write(int)",
        "org.apache.commons.compress.archivers.ArchiveOutputStream#write(int)",
        "org.apache.commons.compress.archivers.zip.ZipSplitOutputStream#write(int)",
        "org.apache.commons.compress.compressors.zstandard.ZstdCompressorOutputStream#write(int)",
        "org.apache.commons.compress.archivers.zip.RandomAccessOutputStream#write(int)"
    ],
    "org.apache.commons.compress.harmony.pack200.ClassBands.TempParamAnnotation#addParameterAnnotation(int,String,List<String>,List<String>,List<Object>,List<Integer>,List<String>,List<String>,List<Integer>)": ["org.apache.commons.compress.harmony.pack200.IntList#add(int)"],
    "org.apache.commons.compress.compressors.snappy.SnappyCompressorOutputStream.createParameterBuilder(int)": [
        "org.apache.commons.compress.compressors.lz77support.Parameters.Builder#withMinBackReferenceLength(int)",
        "org.apache.commons.compress.compressors.lz77support.Parameters.Builder#withMaxLiteralLength(int)",
        "org.apache.commons.compress.compressors.lz77support.Parameters.builder(int)",
        "org.apache.commons.compress.compressors.snappy.SnappyCompressorOutputStream.<staticinit>()",
        "org.apache.commons.compress.compressors.lz77support.Parameters.Builder#withMaxOffset(int)",
        "org.apache.commons.compress.compressors.lz77support.Parameters.Builder#withMaxBackReferenceLength(int)"
    ],
    "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream#createArchiveEntry(Path,String,LinkOption[]...)": ["org.apache.commons.compress.archivers.tar.TarArchiveEntry#TarArchiveEntry(Path,String,LinkOption[]...)"],
    "org.apache.commons.compress.archivers.sevenz.SevenZFile#SevenZFile(SeekableByteChannel,char[])": [
        "org.apache.commons.compress.archivers.sevenz.SevenZFileOptions.<staticinit>()",
        "org.apache.commons.compress.archivers.sevenz.SevenZFile#SevenZFile(SeekableByteChannel,char[],SevenZFileOptions)"
    ],
    "org.apache.commons.compress.harmony.unpack200.bytecode.InnerClassesAttribute#resolve(ClassConstantPool)": [
        "org.apache.commons.compress.harmony.unpack200.bytecode.Attribute#resolve(ClassConstantPool)",
        "org.apache.commons.compress.harmony.unpack200.bytecode.InnerClassesAttribute.InnerClassesEntry#resolve(ClassConstantPool)"
    ],
    "org.apache.commons.compress.harmony.unpack200.bytecode.CPString#toString()": ["org.apache.commons.compress.harmony.unpack200.bytecode.CPConstant#getValue()"],
    "org.apache.commons.compress.archivers.zip.ExtraFieldUtils.UnparseableExtraField#UnparseableExtraField(int)": ["org.apache.commons.compress.archivers.zip.ExtraFieldUtils.UnparseableExtraField.<init>()"],
    "org.apache.commons.compress.archivers.tar.TarFile#TarFile(SeekableByteChannel)": [
        "org.apache.commons.compress.archivers.tar.TarFile#TarFile(SeekableByteChannel,int,int,String,boolean)",
        "org.apache.commons.compress.archivers.tar.TarConstants.<staticinit>()"
    ],
    "org.apache.commons.compress.archivers.tar.TarArchiveInputStream#getNextEntry()": ["org.apache.commons.compress.archivers.tar.TarArchiveInputStream#getNextTarEntry()"],
    "org.apache.commons.compress.archivers.tar.TarUtils.formatOctalBytes(long,byte[],int,int)": ["org.apache.commons.compress.archivers.tar.TarUtils.formatUnsignedOctalString(long,byte[],int,int)"],
    "org.apache.commons.compress.compressors.lzma.LZMAUtils.getUncompressedFileName(String)": [
        "org.apache.commons.compress.compressors.FileNameUtil#getUncompressedFileName(String)",
        "org.apache.commons.compress.compressors.lzma.LZMAUtils.<staticinit>()"
    ],
    "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream#createLocalFileHeader(ZipArchiveEntry,ByteBuffer,boolean,boolean,long)": [
        "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream#versionNeededToExtract(int,boolean,boolean)",
        "org.apache.commons.compress.archivers.zip.ZipArchiveEntry#getAlignment()",
        "org.apache.commons.compress.archivers.zip.ZipUtil.toDosTime(long,byte[],int)",
        "org.apache.commons.compress.archivers.zip.ZipArchiveEntry#getLocalFileDataExtra()",
        "org.apache.commons.compress.archivers.zip.ResourceAlignmentExtraField.<staticinit>()",
        "org.apache.commons.compress.archivers.zip.ResourceAlignmentExtraField#getAlignment()",
        "org.apache.commons.compress.archivers.zip.ZipLong.<staticinit>()",
        "org.apache.commons.compress.archivers.zip.ZipArchiveEntry#getMethod()",
        "org.apache.commons.compress.archivers.zip.ZipArchiveEntry#getTime()",
        "org.apache.commons.compress.archivers.zip.ZipArchiveEntry#getSize()",
        "org.apache.commons.compress.archivers.zip.ZipShort.putShort(int,byte[],int)",
        "org.apache.commons.compress.archivers.zip.ZipArchiveEntry#getExtraField(ZipShort)",
        "org.apache.commons.compress.archivers.zip.ResourceAlignmentExtraField#allowMethodChange()",
        "org.apache.commons.compress.archivers.zip.ZipLong#putLong(byte[],int)",
        "org.apache.commons.compress.archivers.zip.GeneralPurposeBit#encode(byte[],int)",
        "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.<staticinit>()",
        "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream#getGeneralPurposeBits(boolean,boolean)",
        "org.apache.commons.compress.archivers.zip.ResourceAlignmentExtraField#ResourceAlignmentExtraField(int,boolean,int)",
        "org.apache.commons.compress.archivers.zip.ZipExtraField.<staticinit>()",
        "org.apache.commons.compress.archivers.zip.ZipLong.putLong(long,byte[],int)",
        "org.apache.commons.compress.archivers.zip.ZipConstants.<staticinit>()",
        "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream#usesDataDescriptor(int,boolean)",
        "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream#hasZip64Extra(ZipArchiveEntry)",
        "org.apache.commons.compress.archivers.zip.ZipArchiveEntry#addExtraField(ZipExtraField)",
        "org.apache.commons.compress.archivers.zip.ZipArchiveEntry#removeExtraField(ZipShort)"
    ],
    "org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorOutputStream.Parameters#Parameters(BlockSize)": ["org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorOutputStream.Parameters#Parameters(BlockSize,boolean,boolean,boolean)"],
    "org.apache.commons.compress.compressors.zstandard.ZstdCompressorInputStream#read(byte[],int,int)": ["org.apache.commons.compress.compressors.CompressorInputStream#count(int)"],
    "org.apache.commons.compress.archivers.dump.DumpArchiveUtil.decode(ZipEncoding,byte[],int,int)": [
        "org.apache.commons.compress.archivers.zip.NioZipEncoding#decode(byte[])",
        "org.apache.commons.compress.archivers.tar.TarUtils$ZipEncoding$1#decode(byte[])"
    ],
    "org.apache.commons.compress.harmony.unpack200.CpBands#parseCpField(InputStream)": [
        "org.apache.commons.compress.harmony.unpack200.BandSet#decodeBandInt(String,InputStream,BHSDCodec,int)",
        "org.apache.commons.compress.harmony.pack200.Codec.<staticinit>()",
        "org.apache.commons.compress.harmony.unpack200.SegmentHeader#getCpFieldCount()"
    ],
    "org.apache.commons.compress.harmony.unpack200.BandSet#parseCPStringReferences(String,InputStream,BHSDCodec,int)": [
        "org.apache.commons.compress.harmony.unpack200.Segment#getCpBands()",
        "org.apache.commons.compress.harmony.unpack200.BandSet#decodeBandInt(String,InputStream,BHSDCodec,int)",
        "org.apache.commons.compress.harmony.unpack200.CpBands#cpStringValue(int)"
    ],
    "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream#blockSort()": ["org.apache.commons.compress.compressors.bzip2.BlockSort#blockSort(Data,int)"],
    "org.apache.commons.compress.archivers.zip.ScatterZipOutputStream#addArchiveEntry(ZipArchiveEntryRequest)": [
        "org.apache.commons.compress.archivers.zip.StreamCompressor#getBytesRead()",
        "org.apache.commons.compress.archivers.zip.ZipArchiveEntryRequest#getMethod()",
        "org.apache.commons.compress.archivers.zip.ZipArchiveEntryRequest#getPayloadStream()",
        "org.apache.commons.compress.archivers.zip.StreamCompressor#deflate(InputStream,int)",
        "org.apache.commons.compress.archivers.zip.ScatterZipOutputStream.CompressedEntry#CompressedEntry(ZipArchiveEntryRequest,long,long,long)",
        "org.apache.commons.compress.archivers.zip.StreamCompressor#getCrc32()",
        "org.apache.commons.compress.archivers.zip.StreamCompressor#getBytesWrittenForLastEntry()"
    ],
    "org.apache.commons.compress.archivers.ar.ArArchiveInputStream#close()": [
        "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream#close()",
        "org.apache.commons.compress.archivers.sevenz.BoundedSeekableByteChannelInputStream#close()",
        "org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStream#close()",
        "org.apache.commons.compress.compressors.brotli.BrotliCompressorInputStream#close()",
        "org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream#close()",
        "org.apache.commons.compress.compressors.deflate64.Deflate64CompressorInputStream#close()",
        "org.apache.commons.compress.compressors.deflate.DeflateCompressorInputStream#close()",
        "org.apache.commons.compress.archivers.sevenz.AES256SHA256Decoder.AES256SHA256DecoderInputStream#close()",
        "org.apache.commons.compress.compressors.xz.XZCompressorInputStream#close()",
        "org.apache.commons.compress.archivers.zip.ExplodingInputStream#close()",
        "org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream#close()",
        "org.apache.commons.compress.compressors.lzw.LZWInputStream#close()",
        "org.apache.commons.compress.compressors.lzma.LZMACompressorInputStream#close()",
        "org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorInputStream#close()",
        "org.apache.commons.compress.compressors.zstandard.ZstdCompressorInputStream#close()",
        "org.apache.commons.compress.compressors.lz77support.AbstractLZ77CompressorInputStream#close()"
    ],
    "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.<init>()": [
        "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.<staticinit>()",
        "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.<staticinit>()",
        "org.apache.commons.compress.archivers.zip.ZipConstants.<staticinit>()"
    ],
    "org.apache.commons.compress.harmony.unpack200.bytecode.forms.ReferenceForm#setByteCodeOperands(ByteCode,OperandManager,int)": [
        "org.apache.commons.compress.harmony.unpack200.bytecode.forms.ThisFieldRefForm#getOffset(OperandManager)",
        "org.apache.commons.compress.harmony.unpack200.bytecode.forms.ClassSpecificReferenceForm#setNestedEntries(ByteCode,OperandManager,int)",
        "org.apache.commons.compress.harmony.unpack200.bytecode.forms.InitMethodReferenceForm#setNestedEntries(ByteCode,OperandManager,int)",
        "org.apache.commons.compress.harmony.unpack200.bytecode.forms.IMethodRefForm#getOffset(OperandManager)",
        "org.apache.commons.compress.harmony.unpack200.bytecode.forms.FloatRefForm#getOffset(OperandManager)",
        "org.apache.commons.compress.harmony.unpack200.bytecode.forms.ClassRefForm#setNestedEntries(ByteCode,OperandManager,int)",
        "org.apache.commons.compress.harmony.unpack200.bytecode.forms.LongForm#getOffset(OperandManager)",
        "org.apache.commons.compress.harmony.unpack200.bytecode.forms.FieldRefForm#getOffset(OperandManager)",
        "org.apache.commons.compress.harmony.unpack200.bytecode.forms.IntRefForm#getOffset(OperandManager)",
        "org.apache.commons.compress.harmony.unpack200.bytecode.forms.InitMethodReferenceForm#getOffset(OperandManager)",
        "org.apache.commons.compress.harmony.unpack200.bytecode.forms.SingleByteReferenceForm#setNestedEntries(ByteCode,OperandManager,int)",
        "org.apache.commons.compress.harmony.unpack200.bytecode.forms.SuperFieldRefForm#getOffset(OperandManager)",
        "org.apache.commons.compress.harmony.unpack200.bytecode.forms.ClassRefForm#getOffset(OperandManager)",
        "org.apache.commons.compress.harmony.unpack200.bytecode.forms.StringRefForm#getOffset(OperandManager)",
        "org.apache.commons.compress.harmony.unpack200.bytecode.forms.SuperMethodRefForm#getOffset(OperandManager)",
        "org.apache.commons.compress.harmony.unpack200.bytecode.forms.MethodRefForm#getOffset(OperandManager)",
        "org.apache.commons.compress.harmony.unpack200.bytecode.forms.ReferenceForm#setNestedEntries(ByteCode,OperandManager,int)",
        "org.apache.commons.compress.harmony.unpack200.bytecode.forms.StringRefForm#setNestedEntries(ByteCode,OperandManager,int)",
        "org.apache.commons.compress.harmony.unpack200.bytecode.forms.DoubleForm#getOffset(OperandManager)",
        "org.apache.commons.compress.harmony.unpack200.bytecode.forms.NewInitMethodRefForm#setNestedEntries(ByteCode,OperandManager,int)",
        "org.apache.commons.compress.harmony.unpack200.bytecode.forms.NarrowClassRefForm#setNestedEntries(ByteCode,OperandManager,int)",
        "org.apache.commons.compress.harmony.unpack200.bytecode.forms.ThisMethodRefForm#getOffset(OperandManager)"
    ],
    "org.apache.commons.compress.archivers.sevenz.SevenZFile#buildDecoderStack(Folder,long,int,SevenZArchiveEntry)$FilterInputStream$1#read(byte[])": ["org.apache.commons.compress.archivers.sevenz.SevenZFile#buildDecoderStack(Folder,long,int,SevenZArchiveEntry)$FilterInputStream$1#read(byte[],int,int)"],
    "org.apache.commons.compress.utils.FixedLengthBlockOutputStream#write(int)": [
        "org.apache.commons.compress.utils.FixedLengthBlockOutputStream#isOpen()",
        "org.apache.commons.compress.utils.FixedLengthBlockOutputStream#maybeFlush()"
    ],
    "org.apache.commons.compress.harmony.unpack200.bytecode.ConstantPoolEntry#doWrite(DataOutputStream)": [
        "org.apache.commons.compress.harmony.unpack200.bytecode.CPFieldRef#writeBody(DataOutputStream)",
        "org.apache.commons.compress.harmony.unpack200.bytecode.CPRef#writeBody(DataOutputStream)",
        "org.apache.commons.compress.harmony.unpack200.bytecode.CPString#writeBody(DataOutputStream)",
        "org.apache.commons.compress.harmony.unpack200.bytecode.CPFloat#writeBody(DataOutputStream)",
        "org.apache.commons.compress.harmony.unpack200.bytecode.CPClass#writeBody(DataOutputStream)",
        "org.apache.commons.compress.harmony.unpack200.bytecode.CPLong#writeBody(DataOutputStream)",
        "org.apache.commons.compress.harmony.unpack200.bytecode.CPInteger#writeBody(DataOutputStream)",
        "org.apache.commons.compress.harmony.unpack200.bytecode.CPDouble#writeBody(DataOutputStream)",
        "org.apache.commons.compress.harmony.unpack200.bytecode.CPUTF8#writeBody(DataOutputStream)",
        "org.apache.commons.compress.harmony.unpack200.bytecode.CPNameAndType#writeBody(DataOutputStream)"
    ],
    "org.apache.commons.compress.archivers.sevenz.SevenZFile#read(byte[],int,int)": [
        "org.apache.commons.compress.compressors.zstandard.ZstdCompressorInputStream#read(byte[],int,int)",
        "org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorInputStream#read(byte[],int,int)",
        "org.apache.commons.compress.archivers.sevenz.BoundedSeekableByteChannelInputStream#read(byte[],int,int)",
        "org.apache.commons.compress.compressors.deflate64.Deflate64CompressorInputStream#read(byte[],int,int)",
        "org.apache.commons.compress.compressors.brotli.BrotliCompressorInputStream#read(byte[],int,int)",
        "org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream#read(byte[],int,int)",
        "org.apache.commons.compress.archivers.sevenz.AES256SHA256Decoder.AES256SHA256DecoderInputStream#read(byte[],int,int)",
        "org.apache.commons.compress.compressors.lzma.LZMACompressorInputStream#read(byte[],int,int)",
        "org.apache.commons.compress.compressors.lz4.BlockLZ4CompressorInputStream#read(byte[],int,int)",
        "org.apache.commons.compress.compressors.snappy.SnappyCompressorInputStream#read(byte[],int,int)",
        "org.apache.commons.compress.compressors.xz.XZCompressorInputStream#read(byte[],int,int)",
        "org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream#read(byte[],int,int)",
        "org.apache.commons.compress.archivers.sevenz.SevenZFile#getCurrentStream()",
        "org.apache.commons.compress.utils.BoundedArchiveInputStream#read(byte[],int,int)",
        "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream#read(byte[],int,int)",
        "org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStream#read(byte[],int,int)",
        "org.apache.commons.compress.compressors.lzw.LZWInputStream#read(byte[],int,int)",
        "org.apache.commons.compress.compressors.deflate.DeflateCompressorInputStream#read(byte[],int,int)"
    ],
    "org.apache.commons.compress.harmony.unpack200.bytecode.EnclosingMethodAttribute.setAttributeName(CPUTF8)": ["org.apache.commons.compress.harmony.unpack200.bytecode.EnclosingMethodAttribute.<staticinit>()"],
    "org.apache.commons.compress.harmony.unpack200.NewAttributeBands#readNextUnionCase(StringReader)": [
        "org.apache.commons.compress.harmony.unpack200.NewAttributeBands.UnionCase#UnionCase(List<Integer>)",
        "org.apache.commons.compress.harmony.unpack200.NewAttributeBands#readNumber(StringReader)",
        "org.apache.commons.compress.harmony.unpack200.NewAttributeBands#getStreamUpToMatchingBracket(StringReader)",
        "org.apache.commons.compress.harmony.unpack200.NewAttributeBands#readBody(StringReader)",
        "org.apache.commons.compress.harmony.unpack200.NewAttributeBands.UnionCase#UnionCase(List<Integer>,List<LayoutElement>)"
    ],
    "org.apache.commons.compress.archivers.tar.TarFile#TarFile(byte[],boolean)": [
        "org.apache.commons.compress.utils.SeekableInMemoryByteChannel#SeekableInMemoryByteChannel(byte[])",
        "org.apache.commons.compress.archivers.tar.TarFile#TarFile(SeekableByteChannel,int,int,String,boolean)",
        "org.apache.commons.compress.archivers.tar.TarConstants.<staticinit>()",
        "org.apache.commons.compress.archivers.tar.TarArchiveEntry.<staticinit>()"
    ],
    "org.apache.commons.compress.archivers.tar.TarArchiveEntry#updateEntryFromPaxHeaders(Map<String, String>)": ["org.apache.commons.compress.archivers.tar.TarArchiveEntry#processPaxHeader(String,String,Map<String, String>)"],
    "org.apache.commons.compress.archivers.zip.StreamCompressor#deflateUntilInputIsNeeded()": ["org.apache.commons.compress.archivers.zip.StreamCompressor#deflate()"],
    "org.apache.commons.compress.harmony.pack200.NewAttributeBands#addAttribute(NewAttribute)": [
        "org.apache.commons.compress.harmony.pack200.NewAttributeBands.Union#addAttributeToBand(NewAttribute,InputStream)",
        "org.apache.commons.compress.harmony.pack200.NewAttributeBands.Replication#addAttributeToBand(NewAttribute,InputStream)",
        "org.apache.commons.compress.harmony.pack200.NewAttribute#getBytes()",
        "org.apache.commons.compress.harmony.pack200.NewAttributeBands.Reference#addAttributeToBand(NewAttribute,InputStream)",
        "org.apache.commons.compress.harmony.pack200.NewAttributeBands.Callable#addAttributeToBand(NewAttribute,InputStream)",
        "org.apache.commons.compress.harmony.pack200.NewAttributeBands.Call#addAttributeToBand(NewAttribute,InputStream)",
        "org.apache.commons.compress.harmony.pack200.NewAttributeBands.Integral#addAttributeToBand(NewAttribute,InputStream)",
        "org.apache.commons.compress.harmony.pack200.NewAttributeBands.UnionCase#addAttributeToBand(NewAttribute,InputStream)"
    ],
    "org.apache.commons.compress.archivers.Lister#println(ArchiveEntry)": [
        "org.apache.commons.compress.archivers.zip.ZipArchiveEntry#getName()",
        "org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry#getName()",
        "org.apache.commons.compress.archivers.arj.ArjArchiveEntry#getName()",
        "org.apache.commons.compress.archivers.dump.DumpArchiveEntry#getName()",
        "org.apache.commons.compress.archivers.ar.ArArchiveEntry#getName()",
        "org.apache.commons.compress.archivers.cpio.CpioArchiveEntry#getName()",
        "org.apache.commons.compress.archivers.tar.TarArchiveEntry#getName()",
        "org.apache.commons.compress.archivers.Lister#println(String)"
    ],
    "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.toEntryName(File,String)": ["org.apache.commons.compress.archivers.zip.ZipArchiveEntry.toDirectoryEntryName(String)"],
    "org.apache.commons.compress.archivers.zip.JarMarker#getLocalFileDataData()": ["org.apache.commons.compress.utils.ByteUtils.<staticinit>()"],
    "org.apache.commons.compress.compressors.bzip2.CRC#CRC()": [
        "org.apache.commons.compress.compressors.bzip2.CRC#reset()",
        "org.apache.commons.compress.compressors.bzip2.CRC.<init>()"
    ],
    "org.apache.commons.compress.harmony.unpack200.BandSet#parseCPUTF8References(String,InputStream,BHSDCodec,int)": [
        "org.apache.commons.compress.harmony.unpack200.Segment#getCpBands()",
        "org.apache.commons.compress.harmony.unpack200.BandSet#decodeBandInt(String,InputStream,BHSDCodec,int)",
        "org.apache.commons.compress.harmony.unpack200.CpBands#cpUTF8Value(int)"
    ],
    "org.apache.commons.compress.harmony.archive.internal.nls.Messages.getString(String,int)": ["org.apache.commons.compress.harmony.archive.internal.nls.Messages.getString(String,Object[])"],
    "org.apache.commons.compress.archivers.dump.DumpArchiveUtil.calculateChecksum(byte[])": [
        "org.apache.commons.compress.archivers.dump.DumpArchiveConstants.<staticinit>()",
        "org.apache.commons.compress.archivers.dump.DumpArchiveUtil.convert32(byte[],int)"
    ],
    "org.apache.commons.compress.compressors.CompressorStreamFactory#CompressorStreamFactory(boolean,int)": ["org.apache.commons.compress.compressors.CompressorStreamFactory.<init>()"],
    "org.apache.commons.compress.compressors.xz.XZCompressorInputStream#available()": [
        "org.apache.commons.compress.compressors.deflate.DeflateCompressorInputStream#available()",
        "org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream#available()",
        "org.apache.commons.compress.compressors.brotli.BrotliCompressorInputStream#available()",
        "org.apache.commons.compress.compressors.xz.XZCompressorInputStream#available()",
        "org.apache.commons.compress.compressors.lz77support.AbstractLZ77CompressorInputStream#available()",
        "org.apache.commons.compress.compressors.deflate64.Deflate64CompressorInputStream#available()",
        "org.apache.commons.compress.compressors.zstandard.ZstdCompressorInputStream#available()",
        "org.apache.commons.compress.compressors.lzma.LZMACompressorInputStream#available()",
        "org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStream#available()"
    ],
    "org.apache.commons.compress.harmony.unpack200.bytecode.OperandManager#OperandManager(int[],int[],int[],int[],int[],int[],int[],int[],int[],int[],int[],int[],int[],int[],int[],int[],int[],int[],int[],int[],int[])": ["org.apache.commons.compress.harmony.unpack200.bytecode.OperandManager.<init>()"],
    "org.apache.commons.compress.archivers.sevenz.Coders.DeflateDecoder#decode(String,InputStream,long,Coder,byte[],int)": [
        "org.apache.commons.compress.archivers.sevenz.Coders.DeflateDecoder.<staticinit>()",
        "org.apache.commons.compress.archivers.sevenz.Coders.DeflateDecoder.DeflateDecoderInputStream#DeflateDecoderInputStream(InflaterInputStream,Inflater)"
    ],
    "org.apache.commons.compress.archivers.zip.ZipSplitOutputStream#getSplitSegmentFileName(Integer)": ["org.apache.commons.compress.utils.FileNameUtils.getBaseName(Path)"],
    "org.apache.commons.compress.archivers.zip.X7875_NewUnix#X7875_NewUnix()": [
        "org.apache.commons.compress.archivers.zip.X7875_NewUnix.<init>()",
        "org.apache.commons.compress.archivers.zip.X7875_NewUnix#reset()"
    ],
    "org.apache.commons.compress.harmony.unpack200.bytecode.CPRef#equals(Object)": [
        "org.apache.commons.compress.harmony.pack200.BHSDCodec#hashCode()",
        "org.apache.commons.compress.harmony.unpack200.bytecode.CPMethod#hashCode()",
        "org.apache.commons.compress.harmony.unpack200.bytecode.CPInterfaceMethodRef#hashCode()",
        "org.apache.commons.compress.harmony.unpack200.bytecode.CPFieldRef#hashCode()",
        "org.apache.commons.compress.harmony.unpack200.bytecode.CPConstant#hashCode()",
        "org.apache.commons.compress.harmony.unpack200.bytecode.InnerClassesAttribute#hashCode()",
        "org.apache.commons.compress.harmony.unpack200.bytecode.Attribute#hashCode()",
        "org.apache.commons.compress.harmony.unpack200.bytecode.CPClass#hashCode()",
        "org.apache.commons.compress.harmony.unpack200.bytecode.CPClass#equals(Object)",
        "org.apache.commons.compress.harmony.unpack200.bytecode.ExceptionsAttribute#hashCode()",
        "org.apache.commons.compress.harmony.unpack200.bytecode.CPUTF8#hashCode()",
        "org.apache.commons.compress.harmony.unpack200.bytecode.ConstantPoolEntry#hashCode()",
        "org.apache.commons.compress.harmony.unpack200.bytecode.CPNameAndType#equals(Object)",
        "org.apache.commons.compress.harmony.unpack200.bytecode.CPNameAndType#hashCode()",
        "org.apache.commons.compress.harmony.unpack200.bytecode.CPString#hashCode()",
        "org.apache.commons.compress.harmony.unpack200.bytecode.CPMember#hashCode()",
        "org.apache.commons.compress.harmony.unpack200.bytecode.SourceFileAttribute#hashCode()",
        "org.apache.commons.compress.harmony.unpack200.bytecode.ByteCode#hashCode()",
        "org.apache.commons.compress.harmony.unpack200.bytecode.CPMethodRef#hashCode()",
        "org.apache.commons.compress.harmony.unpack200.bytecode.ConstantValueAttribute#hashCode()"
    ],
    "org.apache.commons.compress.archivers.zip.StreamCompressor.create(DataOutput,Deflater)": ["org.apache.commons.compress.archivers.zip.StreamCompressor.DataOutputCompressor#DataOutputCompressor(Deflater,DataOutput)"],
    "org.apache.commons.compress.archivers.dump.DumpArchiveInputStream.matches(byte[],int)": [
        "org.apache.commons.compress.archivers.dump.DumpArchiveConstants.<staticinit>()",
        "org.apache.commons.compress.archivers.dump.DumpArchiveUtil.verify(byte[])",
        "org.apache.commons.compress.archivers.dump.DumpArchiveUtil.convert32(byte[],int)"
    ],
    "org.apache.commons.compress.harmony.pack200.BHSDCodec#encode(int,int)": [
        "org.apache.commons.compress.harmony.pack200.BHSDCodec#encodes(long)",
        "org.apache.commons.compress.harmony.pack200.Pack200Exception#Pack200Exception(String)",
        "org.apache.commons.compress.harmony.pack200.BHSDCodec#isDelta()",
        "org.apache.commons.compress.harmony.pack200.BHSDCodec#isSigned()"
    ],
    "org.apache.commons.compress.harmony.pack200.SegmentHeader#writeArchiveFileCounts(OutputStream)": [
        "org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream#write(byte[])",
        "org.apache.commons.compress.archivers.sevenz.Coders.DeflateDecoder.DeflateDecoderOutputStream#write(byte[])",
        "org.apache.commons.compress.harmony.pack200.Codec.<staticinit>()",
        "org.apache.commons.compress.harmony.pack200.BandSet#encodeScalar(int,BHSDCodec)",
        "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.OutputStreamWrapper#write(byte[])",
        "org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream#write(byte[])",
        "org.apache.commons.compress.archivers.zip.ZipSplitOutputStream#write(byte[])"
    ],
    "org.apache.commons.compress.compressors.snappy.SnappyCompressorOutputStream#writeBackReferenceWithFourOffsetBytes(int,int)": [
        "org.apache.commons.compress.compressors.snappy.SnappyCompressorOutputStream#writeBackReferenceWithLittleEndianOffset(int,int,int,int)",
        "org.apache.commons.compress.compressors.snappy.SnappyCompressorOutputStream.<staticinit>()"
    ],
    "org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField#Zip64ExtendedInformationExtraField(ZipEightByteInteger,ZipEightByteInteger,ZipEightByteInteger,ZipLong)": ["org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField.<init>()"],
    "org.apache.commons.compress.harmony.unpack200.BcBands#read(InputStream)": [
        "org.apache.commons.compress.harmony.unpack200.AttributeLayoutMap#getAttributeLayout(String,int)",
        "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream#read()",
        "org.apache.commons.compress.archivers.sevenz.AES256SHA256Decoder.AES256SHA256DecoderInputStream#read()",
        "org.apache.commons.compress.compressors.xz.XZCompressorInputStream#read()",
        "org.apache.commons.compress.harmony.unpack200.bytecode.ByteCode.getByteCode(int)",
        "org.apache.commons.compress.harmony.unpack200.Segment#getAttrDefinitionBands()",
        "org.apache.commons.compress.harmony.unpack200.Segment#log(int,String)",
        "org.apache.commons.compress.archivers.zip.ExplodingInputStream#read()",
        "org.apache.commons.compress.compressors.lzma.LZMACompressorInputStream#read()",
        "org.apache.commons.compress.compressors.zstandard.ZstdCompressorInputStream#read()",
        "org.apache.commons.compress.harmony.unpack200.BcBands#startsWithIf(int)",
        "org.apache.commons.compress.harmony.unpack200.BandSet#decodeBandInt(String,InputStream,BHSDCodec,int)",
        "org.apache.commons.compress.harmony.unpack200.BcBands#endsWithLoad(int)",
        "org.apache.commons.compress.archivers.sevenz.BoundedSeekableByteChannelInputStream#read()",
        "org.apache.commons.compress.harmony.unpack200.ClassBands#getMethodFlags()",
        "org.apache.commons.compress.compressors.brotli.BrotliCompressorInputStream#read()",
        "org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream#read()",
        "org.apache.commons.compress.compressors.deflate64.Deflate64CompressorInputStream#read()",
        "org.apache.commons.compress.compressors.lzw.LZWInputStream#read()",
        "org.apache.commons.compress.harmony.unpack200.SegmentHeader#getClassCount()",
        "org.apache.commons.compress.harmony.unpack200.BandSet#decodeBandInt(String,InputStream,BHSDCodec,int[])",
        "org.apache.commons.compress.harmony.pack200.Codec.<staticinit>()",
        "org.apache.commons.compress.harmony.unpack200.AttrDefinitionBands#getAttributeDefinitionMap()",
        "org.apache.commons.compress.harmony.unpack200.Segment.<staticinit>()",
        "org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorInputStream#read()",
        "org.apache.commons.compress.compressors.lz77support.AbstractLZ77CompressorInputStream#read()",
        "org.apache.commons.compress.harmony.unpack200.AttributeLayout#matches(long)",
        "org.apache.commons.compress.compressors.deflate.DeflateCompressorInputStream#read()",
        "org.apache.commons.compress.harmony.unpack200.BcBands#endsWithStore(int)",
        "org.apache.commons.compress.harmony.unpack200.Segment#getClassBands()",
        "org.apache.commons.compress.utils.BoundedArchiveInputStream#read()",
        "org.apache.commons.compress.harmony.unpack200.AttributeLayout.<staticinit>()",
        "org.apache.commons.compress.archivers.tar.TarArchiveSparseZeroInputStream#read()",
        "org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStream#read()",
        "org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream#read()"
    ],
    "org.apache.commons.compress.archivers.tar.TarArchiveEntry#writeEntryHeader(byte[],ZipEncoding,boolean)": [
        "org.apache.commons.compress.archivers.tar.TarArchiveEntry#writeEntryHeaderOptionalTimeField(FileTime,int,byte[],int)",
        "org.apache.commons.compress.archivers.tar.TarUtils.formatNameBytes(String,byte[],int,int,ZipEncoding)",
        "org.apache.commons.compress.archivers.tar.TarArchiveEntry#fill(byte,int,byte[],int)",
        "org.apache.commons.compress.utils.TimeUtils.toUnixTime(FileTime)",
        "org.apache.commons.compress.archivers.tar.TarUtils.computeCheckSum(byte[])",
        "org.apache.commons.compress.archivers.tar.TarUtils.formatCheckSumOctalBytes(long,byte[],int,int)",
        "org.apache.commons.compress.archivers.tar.TarArchiveEntry#fill(int,int,byte[],int)",
        "org.apache.commons.compress.archivers.tar.TarArchiveEntry#writeEntryHeaderField(long,byte[],int,int,boolean)",
        "org.apache.commons.compress.archivers.tar.TarConstants.<staticinit>()",
        "org.apache.commons.compress.archivers.tar.TarUtils.formatNameBytes(String,byte[],int,int)"
    ],
    "org.apache.commons.compress.archivers.cpio.CpioArchiveEntry#getLastModifiedDate()": ["org.apache.commons.compress.archivers.cpio.CpioArchiveEntry#getTime()"],
    "org.apache.commons.compress.compressors.CompressorStreamFactory.findAvailableCompressorInputStreamProviders()": [
        "org.apache.commons.compress.compressors.CompressorStreamFactory.putAll(Set<String>,CompressorStreamProvider,TreeMap<String, CompressorStreamProvider>)",
        "org.apache.commons.compress.compressors.CompressorStreamFactory.<staticinit>()",
        "org.apache.commons.compress.compressors.CompressorStreamFactory#getInputStreamCompressorNames()",
        "org.apache.commons.compress.compressors.CompressorStreamFactory.archiveStreamProviderIterable()"
    ],
    "org.apache.commons.compress.archivers.zip.X0016_CertificateIdForCentralDirectory#X0016_CertificateIdForCentralDirectory()": [
        "org.apache.commons.compress.archivers.zip.X0016_CertificateIdForCentralDirectory.<staticinit>()",
        "org.apache.commons.compress.archivers.zip.X0016_CertificateIdForCentralDirectory.<init>()",
        "org.apache.commons.compress.archivers.zip.PKWareExtraHeader#PKWareExtraHeader(ZipShort)"
    ],
    "org.apache.commons.compress.archivers.zip.ZipSplitOutputStream#ZipSplitOutputStream(File,long)": ["org.apache.commons.compress.archivers.zip.ZipSplitOutputStream#ZipSplitOutputStream(Path,long)"],
    "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream#isZip64Required(ZipArchiveEntry,Zip64Mode)": [
        "org.apache.commons.compress.archivers.zip.Zip64Mode.<staticinit>()",
        "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream#isTooLargeForZip32(ZipArchiveEntry)"
    ],
    "org.apache.commons.compress.archivers.zip.ZipSplitOutputStream#write(int)": ["org.apache.commons.compress.archivers.zip.ZipSplitOutputStream#write(byte[])"],
    "org.apache.commons.compress.archivers.zip.ZipShort#ZipShort(byte[])": ["org.apache.commons.compress.archivers.zip.ZipShort#ZipShort(byte[],int)"],
    "org.apache.commons.compress.harmony.pack200.SegmentHeader#calculateArchiveOptions()": ["org.apache.commons.compress.harmony.pack200.IntList#size()"],
    "org.apache.commons.compress.harmony.pack200.CodecEncoding.getCodec(int,InputStream,Codec)": [
        "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream#read()",
        "org.apache.commons.compress.archivers.sevenz.AES256SHA256Decoder.AES256SHA256DecoderInputStream#read()",
        "org.apache.commons.compress.compressors.xz.XZCompressorInputStream#read()",
        "org.apache.commons.compress.harmony.pack200.PopulationCodec#PopulationCodec(Codec,int,Codec)",
        "org.apache.commons.compress.harmony.pack200.CodecEncoding.<staticinit>()",
        "org.apache.commons.compress.archivers.zip.ExplodingInputStream#read()",
        "org.apache.commons.compress.compressors.lzma.LZMACompressorInputStream#read()",
        "org.apache.commons.compress.compressors.zstandard.ZstdCompressorInputStream#read()",
        "org.apache.commons.compress.archivers.sevenz.BoundedSeekableByteChannelInputStream#read()",
        "org.apache.commons.compress.compressors.brotli.BrotliCompressorInputStream#read()",
        "org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream#read()",
        "org.apache.commons.compress.compressors.deflate64.Deflate64CompressorInputStream#read()",
        "org.apache.commons.compress.compressors.lzw.LZWInputStream#read()",
        "org.apache.commons.compress.harmony.pack200.Pack200Exception#Pack200Exception(String)",
        "org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorInputStream#read()",
        "org.apache.commons.compress.compressors.lz77support.AbstractLZ77CompressorInputStream#read()",
        "org.apache.commons.compress.harmony.pack200.PopulationCodec#PopulationCodec(Codec,Codec,Codec)",
        "org.apache.commons.compress.compressors.deflate.DeflateCompressorInputStream#read()",
        "org.apache.commons.compress.harmony.pack200.RunCodec#RunCodec(int,Codec,Codec)",
        "org.apache.commons.compress.harmony.pack200.BHSDCodec#BHSDCodec(int,int,int,int)",
        "org.apache.commons.compress.utils.BoundedArchiveInputStream#read()",
        "org.apache.commons.compress.archivers.tar.TarArchiveSparseZeroInputStream#read()",
        "org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStream#read()",
        "org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream#read()",
        "org.apache.commons.compress.harmony.pack200.CodecEncoding.getCodec(int,InputStream,Codec)"
    ],
    "org.apache.commons.compress.archivers.tar.TarArchiveEntry.<init>()": [
        "org.apache.commons.compress.archivers.EntryStreamOffsets.<staticinit>()",
        "org.apache.commons.compress.archivers.tar.TarConstants.<staticinit>()"
    ],
    "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream#bsW(int,int)": [
        "org.apache.commons.compress.archivers.sevenz.AES256SHA256Decoder.AES256SHA256DecoderOutputStream#write(int)",
        "org.apache.commons.compress.compressors.snappy.SnappyCompressorOutputStream#write(int)",
        "org.apache.commons.compress.archivers.sevenz.Coders.DeflateDecoder.DeflateDecoderOutputStream#write(int)",
        "org.apache.commons.compress.compressors.lz4.BlockLZ4CompressorOutputStream#write(int)",
        "org.apache.commons.compress.compressors.deflate.DeflateCompressorOutputStream#write(int)",
        "org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorOutputStream#write(int)",
        "org.apache.commons.compress.compressors.lzma.LZMACompressorOutputStream#write(int)",
        "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream#write(int)",
        "org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream#write(int)",
        "org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorOutputStream#write(int)",
        "org.apache.commons.compress.compressors.xz.XZCompressorOutputStream#write(int)",
        "org.apache.commons.compress.utils.FixedLengthBlockOutputStream#write(int)",
        "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.OutputStreamWrapper#write(int)",
        "org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream#write(int)",
        "org.apache.commons.compress.archivers.ArchiveOutputStream#write(int)",
        "org.apache.commons.compress.archivers.zip.ZipSplitOutputStream#write(int)",
        "org.apache.commons.compress.compressors.zstandard.ZstdCompressorOutputStream#write(int)",
        "org.apache.commons.compress.archivers.zip.RandomAccessOutputStream#write(int)"
    ],
    "org.apache.commons.compress.harmony.pack200.BHSDCodec#decodeInts(int,InputStream,int)": [
        "org.apache.commons.compress.harmony.pack200.BHSDCodec#isDelta()",
        "org.apache.commons.compress.utils.ExactMath.add(int,long)",
        "org.apache.commons.compress.harmony.pack200.Codec#decodeInts(int,InputStream,int)"
    ],
    "org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorInputStream#readOneByte()": ["org.apache.commons.compress.compressors.CompressorInputStream#count(int)"],
    "org.apache.commons.compress.harmony.pack200.CpBands#pack(OutputStream)": [
        "org.apache.commons.compress.harmony.pack200.CpBands#writeCpFloat(OutputStream)",
        "org.apache.commons.compress.harmony.pack200.CpBands#writeCpUtf8(OutputStream)",
        "org.apache.commons.compress.harmony.pack200.CpBands#writeCpDescr(OutputStream)",
        "org.apache.commons.compress.harmony.pack200.CpBands#writeCpSignature(OutputStream)",
        "org.apache.commons.compress.harmony.pack200.CpBands#writeCpDouble(OutputStream)",
        "org.apache.commons.compress.harmony.pack200.PackingUtils.log(String)",
        "org.apache.commons.compress.harmony.pack200.CpBands#writeCpMethodOrField(Set<CPMethodOrField>,OutputStream,String)",
        "org.apache.commons.compress.harmony.pack200.CpBands#writeCpClass(OutputStream)",
        "org.apache.commons.compress.harmony.pack200.CpBands#writeCpInt(OutputStream)",
        "org.apache.commons.compress.harmony.pack200.CpBands#writeCpLong(OutputStream)",
        "org.apache.commons.compress.harmony.pack200.CpBands#writeCpString(OutputStream)"
    ],
    "org.apache.commons.compress.harmony.unpack200.Pack200UnpackerAdapter.unwrap(FilterInputStream)": ["org.apache.commons.compress.harmony.unpack200.Pack200UnpackerAdapter.readField(Object,String)"],
    "org.apache.commons.compress.archivers.zip.ZipArchiveEntry#equals(Object)": [
        "org.apache.commons.compress.archivers.zip.ZipArchiveEntry#getInternalAttributes()",
        "org.apache.commons.compress.archivers.zip.ZipArchiveEntry#getMethod()",
        "org.apache.commons.compress.archivers.zip.ZipArchiveEntry#getName()",
        "org.apache.commons.compress.archivers.zip.GeneralPurposeBit#equals(Object)",
        "org.apache.commons.compress.archivers.zip.ZipArchiveEntry#getLocalFileDataExtra()",
        "org.apache.commons.compress.archivers.zip.ZipArchiveEntry#getSize()",
        "org.apache.commons.compress.archivers.zip.ZipArchiveEntry#getCentralDirectoryExtra()",
        "org.apache.commons.compress.archivers.zip.ZipArchiveEntry#getExternalAttributes()",
        "org.apache.commons.compress.archivers.zip.ZipArchiveEntry#getPlatform()"
    ],
    "org.apache.commons.compress.archivers.tar.TarArchiveEntry#readOsSpecificProperties(Path,LinkOption[]...)": [
        "org.apache.commons.compress.archivers.tar.TarArchiveEntry#setLastAccessTime(FileTime)",
        "org.apache.commons.compress.archivers.tar.TarArchiveEntry#setStatusChangeTime(FileTime)",
        "org.apache.commons.compress.archivers.tar.TarArchiveEntry#setCreationTime(FileTime)",
        "org.apache.commons.compress.archivers.tar.TarArchiveEntry#setLastModifiedTime(FileTime)"
    ],
    "org.apache.commons.compress.utils.CountingOutputStream#write(byte[],int,int)": [
        "org.apache.commons.compress.archivers.sevenz.Coders.DeflateDecoder.DeflateDecoderOutputStream#write(byte[],int,int)",
        "org.apache.commons.compress.utils.FixedLengthBlockOutputStream#write(byte[],int,int)",
        "org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorOutputStream#write(byte[],int,int)",
        "org.apache.commons.compress.archivers.ar.ArArchiveOutputStream#write(byte[],int,int)",
        "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream#write(byte[],int,int)",
        "org.apache.commons.compress.compressors.lzma.LZMACompressorOutputStream#write(byte[],int,int)",
        "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.OutputStreamWrapper#write(byte[],int,int)",
        "org.apache.commons.compress.compressors.zstandard.ZstdCompressorOutputStream#write(byte[],int,int)",
        "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream#write(byte[],int,int)",
        "org.apache.commons.compress.archivers.zip.FileRandomAccessOutputStream#write(byte[],int,int)",
        "org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream#write(byte[],int,int)",
        "org.apache.commons.compress.archivers.sevenz.AES256SHA256Decoder.AES256SHA256DecoderOutputStream#write(byte[],int,int)",
        "org.apache.commons.compress.archivers.zip.ZipSplitOutputStream#write(byte[],int,int)",
        "org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorOutputStream#write(byte[],int,int)",
        "org.apache.commons.compress.compressors.xz.XZCompressorOutputStream#write(byte[],int,int)",
        "org.apache.commons.compress.compressors.deflate.DeflateCompressorOutputStream#write(byte[],int,int)",
        "org.apache.commons.compress.archivers.zip.SeekableChannelRandomAccessOutputStream#write(byte[],int,int)",
        "org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream#write(byte[],int,int)",
        "org.apache.commons.compress.utils.CountingOutputStream#count(long)",
        "org.apache.commons.compress.compressors.lz4.BlockLZ4CompressorOutputStream#write(byte[],int,int)",
        "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream#write(byte[],int,int)",
        "org.apache.commons.compress.compressors.snappy.SnappyCompressorOutputStream#write(byte[],int,int)",
        "org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream#write(byte[],int,int)"
    ],
    "org.apache.commons.compress.compressors.lz4.BlockLZ4CompressorInputStream#readSizeBytes()": ["org.apache.commons.compress.compressors.lz77support.AbstractLZ77CompressorInputStream#readOneByte()"],
    "org.apache.commons.compress.compressors.CompressorStreamFactory.getBrotli()": ["org.apache.commons.compress.compressors.CompressorStreamFactory.<staticinit>()"],
    "org.apache.commons.compress.archivers.zip.ParallelScatterZipCreator#closeAll()": ["org.apache.commons.compress.archivers.zip.ScatterZipOutputStream#close()"],
    "org.apache.commons.compress.compressors.lz4.BlockLZ4CompressorOutputStream.Pair#addLiteral(LiteralBlock)": [
        "org.apache.commons.compress.compressors.lz77support.LZ77Compressor.LiteralBlock#getOffset()",
        "org.apache.commons.compress.compressors.lz77support.LZ77Compressor.LiteralBlock#getData()",
        "org.apache.commons.compress.compressors.lz77support.LZ77Compressor.LiteralBlock#getLength()"
    ],
    "org.apache.commons.compress.archivers.zip.ZipFile.Builder#Builder()": [
        "org.apache.commons.compress.archivers.zip.ZipFile.Builder.<init>()",
        "org.apache.commons.compress.archivers.zip.ZipFile.Builder.<staticinit>()"
    ],
    "org.apache.commons.compress.harmony.unpack200.bytecode.RuntimeVisibleorInvisibleAnnotationsAttribute#RuntimeVisibleorInvisibleAnnotationsAttribute(CPUTF8,Annotation[])": [
        "org.apache.commons.compress.harmony.unpack200.bytecode.AnnotationsAttribute#AnnotationsAttribute(CPUTF8)",
        "org.apache.commons.compress.harmony.unpack200.bytecode.RuntimeVisibleorInvisibleAnnotationsAttribute.<init>()"
    ],
    "org.apache.commons.compress.archivers.tar.TarArchiveInputStream#skipSparse(long)": [
        "org.apache.commons.compress.compressors.zstandard.ZstdCompressorInputStream#skip(long)",
        "org.apache.commons.compress.compressors.deflate.DeflateCompressorInputStream#skip(long)",
        "org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream#skip(long)",
        "org.apache.commons.compress.archivers.tar.TarArchiveSparseZeroInputStream#skip(long)",
        "org.apache.commons.compress.compressors.lzma.LZMACompressorInputStream#skip(long)",
        "org.apache.commons.compress.compressors.brotli.BrotliCompressorInputStream#skip(long)",
        "org.apache.commons.compress.compressors.xz.XZCompressorInputStream#skip(long)"
    ],
    "org.apache.commons.compress.archivers.tar.TarArchiveInputStream#getNextTarEntry()": [
        "org.apache.commons.compress.archivers.tar.TarArchiveInputStream#getLongNameData()",
        "org.apache.commons.compress.archivers.tar.TarArchiveEntry#isOldGNUSparse()",
        "org.apache.commons.compress.archivers.tar.TarArchiveEntry#TarArchiveEntry(Map<String, String>,byte[],ZipEncoding,boolean)",
        "org.apache.commons.compress.archivers.tar.TarArchiveEntry#setLinkName(String)",
        "org.apache.commons.compress.archivers.tar.TarArchiveEntry#isGlobalPaxHeader()",
        "org.apache.commons.compress.archivers.tar.TarArchiveInputStream#readGlobalPaxHeaders()",
        "org.apache.commons.compress.archivers.tar.TarArchiveEntry#isDirectory()",
        "org.apache.commons.compress.archivers.zip.NioZipEncoding#decode(byte[])",
        "org.apache.commons.compress.archivers.tar.TarArchiveInputStream#readOldGNUSparse()",
        "org.apache.commons.compress.archivers.tar.TarArchiveInputStream#getRecord()",
        "org.apache.commons.compress.utils.IOUtils.skip(InputStream,long)",
        "org.apache.commons.compress.archivers.tar.TarArchiveInputStream#paxHeaders()",
        "org.apache.commons.compress.archivers.tar.TarArchiveEntry#isPaxHeader()",
        "org.apache.commons.compress.archivers.tar.TarArchiveEntry#isGNULongNameEntry()",
        "org.apache.commons.compress.archivers.tar.TarArchiveEntry#isGNULongLinkEntry()",
        "org.apache.commons.compress.archivers.tar.TarArchiveEntry#setName(String)",
        "org.apache.commons.compress.archivers.tar.TarArchiveInputStream#skipRecordPadding()",
        "org.apache.commons.compress.archivers.tar.TarArchiveInputStream#applyPaxHeadersToCurrentEntry(Map<String, String>,List<TarArchiveStructSparse>)",
        "org.apache.commons.compress.archivers.tar.TarArchiveEntry#getSize()",
        "org.apache.commons.compress.archivers.tar.TarUtils$ZipEncoding$1#decode(byte[])",
        "org.apache.commons.compress.archivers.tar.TarArchiveInputStream#isAtEOF()"
    ],
    "org.apache.commons.compress.archivers.zip.ExtraFieldUtils.createExtraFieldNoDefault(ZipShort)": ["org.apache.commons.compress.archivers.zip.ExtraFieldUtils.<staticinit>()"],
    "org.apache.commons.compress.utils.FixedLengthBlockOutputStream#writeBlock()": [
        "org.apache.commons.compress.utils.FixedLengthBlockOutputStream#write(ByteBuffer)",
        "org.apache.commons.compress.utils.FixedLengthBlockOutputStream.BufferAtATimeOutputChannel#write(ByteBuffer)"
    ],
    "org.apache.commons.compress.compressors.lzma.LZMACompressorInputStream#close()": [
        "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream#close()",
        "org.apache.commons.compress.archivers.sevenz.BoundedSeekableByteChannelInputStream#close()",
        "org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStream#close()",
        "org.apache.commons.compress.compressors.brotli.BrotliCompressorInputStream#close()",
        "org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream#close()",
        "org.apache.commons.compress.compressors.deflate64.Deflate64CompressorInputStream#close()",
        "org.apache.commons.compress.compressors.deflate.DeflateCompressorInputStream#close()",
        "org.apache.commons.compress.archivers.sevenz.AES256SHA256Decoder.AES256SHA256DecoderInputStream#close()",
        "org.apache.commons.compress.compressors.xz.XZCompressorInputStream#close()",
        "org.apache.commons.compress.archivers.zip.ExplodingInputStream#close()",
        "org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream#close()",
        "org.apache.commons.compress.compressors.lzw.LZWInputStream#close()",
        "org.apache.commons.compress.compressors.lzma.LZMACompressorInputStream#close()",
        "org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorInputStream#close()",
        "org.apache.commons.compress.compressors.zstandard.ZstdCompressorInputStream#close()",
        "org.apache.commons.compress.compressors.lz77support.AbstractLZ77CompressorInputStream#close()"
    ],
    "org.apache.commons.compress.harmony.pack200.Segment#visitMethod(int,String,String,String,String[])": ["org.apache.commons.compress.harmony.pack200.ClassBands#addMethod(int,String,String,String,String[])"],
    "org.apache.commons.compress.harmony.unpack200.bytecode.CPNameAndType#CPNameAndType(CPUTF8,CPUTF8,int)": [
        "org.apache.commons.compress.harmony.unpack200.bytecode.ConstantPoolEntry#ConstantPoolEntry(byte,int)",
        "org.apache.commons.compress.harmony.unpack200.bytecode.ConstantPoolEntry.<staticinit>()",
        "org.apache.commons.compress.harmony.unpack200.bytecode.CPNameAndType.<init>()"
    ],
    "org.apache.commons.compress.harmony.unpack200.CpBands#cpLongValue(int)": ["org.apache.commons.compress.harmony.unpack200.bytecode.CPLong#CPLong(Long,int)"],
    "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.BoundCountInputStream#BoundCountInputStream(InputStream,long)": ["org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.BoundCountInputStream.<init>()"],
    "org.apache.commons.compress.archivers.sevenz.SevenZFile.Builder.<init>()": [
        "org.apache.commons.compress.archivers.sevenz.SevenZFile.<staticinit>()",
        "org.apache.commons.compress.archivers.sevenz.SevenZFile.Builder.<staticinit>()"
    ],
    "org.apache.commons.compress.harmony.unpack200.MetadataBandGroup#getAttributes()": [
        "org.apache.commons.compress.harmony.unpack200.MetadataBandGroup#getParameterAttribute(int,Iterator<CPUTF8>)",
        "org.apache.commons.compress.harmony.unpack200.bytecode.AnnotationsAttribute.ElementValue#ElementValue(int,Object)",
        "org.apache.commons.compress.harmony.unpack200.MetadataBandGroup#getAttribute(int,CPUTF8[],int[],Iterator<CPUTF8>)",
        "org.apache.commons.compress.harmony.unpack200.MetadataBandGroup#getNextValue(int)",
        "org.apache.commons.compress.harmony.unpack200.bytecode.AnnotationDefaultAttribute#AnnotationDefaultAttribute(ElementValue)"
    ],
    "org.apache.commons.compress.archivers.zip.X0015_CertificateIdForFile.<staticinit>()": ["org.apache.commons.compress.archivers.zip.ZipShort#ZipShort(int)"],
    "org.apache.commons.compress.archivers.ArchiveInputStream#read()": ["org.apache.commons.compress.archivers.ArchiveInputStream.<staticinit>()"],
    "org.apache.commons.compress.archivers.sevenz.SevenZFile#readSubStreamsInfo(ByteBuffer,Archive)": [
        "org.apache.commons.compress.archivers.sevenz.Folder#getUnpackSize()",
        "org.apache.commons.compress.archivers.sevenz.SubStreamsInfo#SubStreamsInfo(int)",
        "org.apache.commons.compress.archivers.sevenz.SevenZFile.getUnsignedByte(ByteBuffer)",
        "org.apache.commons.compress.archivers.sevenz.SevenZFile#readAllOrBits(ByteBuffer,int)",
        "org.apache.commons.compress.archivers.sevenz.NID.<staticinit>()",
        "org.apache.commons.compress.archivers.sevenz.SevenZFile.getInt(ByteBuffer)",
        "org.apache.commons.compress.archivers.sevenz.SevenZFile.readUint64(ByteBuffer)"
    ],
    "org.apache.commons.compress.archivers.sevenz.SevenZFile#readFilesInfo(ByteBuffer,Archive)": [
        "org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry#setHasStream(boolean)",
        "org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry#setHasWindowsAttributes(boolean)",
        "org.apache.commons.compress.archivers.sevenz.SevenZFile.readUint64(ByteBuffer)",
        "org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry#setAntiItem(boolean)",
        "org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry#setHasCrc(boolean)",
        "org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry#setHasLastModifiedDate(boolean)",
        "org.apache.commons.compress.archivers.sevenz.SevenZFile.getUnsignedByte(ByteBuffer)",
        "org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry#setWindowsAttributes(int)",
        "org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry#getSize()",
        "org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry#getHasWindowsAttributes()",
        "org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry#setSize(long)",
        "org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry#getHasCreationDate()",
        "org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry#hasStream()",
        "org.apache.commons.compress.archivers.sevenz.SevenZFile.get(ByteBuffer,byte[])",
        "org.apache.commons.compress.archivers.sevenz.SevenZFile#calculateStreamMap(Archive)",
        "org.apache.commons.compress.archivers.sevenz.SevenZFile#readBits(ByteBuffer,int)",
        "org.apache.commons.compress.archivers.sevenz.SevenZFile#readAllOrBits(ByteBuffer,int)",
        "org.apache.commons.compress.archivers.sevenz.NID.<staticinit>()",
        "org.apache.commons.compress.archivers.sevenz.SevenZFile.skipBytesFully(ByteBuffer,long)",
        "org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry#setLastModifiedDate(long)",
        "org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry#setAccessDate(long)",
        "org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry#setDirectory(boolean)",
        "org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry#setCreationDate(long)",
        "org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry#setHasCreationDate(boolean)",
        "org.apache.commons.compress.archivers.sevenz.SevenZFile.getLong(ByteBuffer)",
        "org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry#setCrcValue(long)",
        "org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry#setHasAccessDate(boolean)",
        "org.apache.commons.compress.archivers.sevenz.SevenZFile#checkEntryIsInitialized(Map<Integer, SevenZArchiveEntry>,int)",
        "org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry#getHasLastModifiedDate()",
        "org.apache.commons.compress.archivers.sevenz.SevenZFile.getInt(ByteBuffer)",
        "org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry#getHasAccessDate()"
    ],
    "org.apache.commons.compress.utils.ArchiveUtils.isEqualWithNull(byte[],int,int,byte[],int,int)": ["org.apache.commons.compress.utils.ArchiveUtils.isEqual(byte[],int,int,byte[],int,int,boolean)"],
    "org.apache.commons.compress.archivers.zip.ParallelScatterZipCreator#ParallelScatterZipCreator()": ["org.apache.commons.compress.archivers.zip.ParallelScatterZipCreator#ParallelScatterZipCreator(ExecutorService)"],
    "org.apache.commons.compress.archivers.tar.TarArchiveEntry#addPaxHeader(String,String)": ["org.apache.commons.compress.archivers.tar.TarArchiveEntry#processPaxHeader(String,String)"],
    "org.apache.commons.compress.harmony.pack200.NewAttribute#readConst(int)": ["org.apache.commons.compress.harmony.pack200.Pack200ClassReader#readConst(int,char[])"],
    "org.apache.commons.compress.harmony.unpack200.bytecode.CPClass#toString()": ["org.apache.commons.compress.harmony.unpack200.bytecode.CPClass#getName()"],
    "org.apache.commons.compress.harmony.unpack200.IcBands#read(InputStream)": [
        "org.apache.commons.compress.harmony.unpack200.IcTuple#IcTuple(String,int,String,String,int,int,int,int)",
        "org.apache.commons.compress.harmony.pack200.Codec.<staticinit>()",
        "org.apache.commons.compress.harmony.unpack200.SegmentUtils.countBit16(int[])",
        "org.apache.commons.compress.harmony.unpack200.BandSet#decodeBandInt(String,InputStream,BHSDCodec,int)",
        "org.apache.commons.compress.harmony.unpack200.BandSet#getReferences(int[],String[])",
        "org.apache.commons.compress.harmony.unpack200.SegmentHeader#getInnerClassCount()"
    ],
    "org.apache.commons.compress.compressors.lzma.LZMACompressorOutputStream#LZMACompressorOutputStream(OutputStream)": [
        "org.apache.commons.compress.compressors.CompressorOutputStream.<init>()",
        "org.apache.commons.compress.compressors.lzma.LZMACompressorOutputStream.<init>()"
    ],
    "org.apache.commons.compress.harmony.unpack200.bytecode.CPUTF8#CPUTF8(String)": ["org.apache.commons.compress.harmony.unpack200.bytecode.CPUTF8#CPUTF8(String,int)"],
    "org.apache.commons.compress.harmony.unpack200.bytecode.ByteCode#ByteCode(int)": [
        "org.apache.commons.compress.harmony.unpack200.bytecode.ByteCode#ByteCode(int,ClassFileEntry[])",
        "org.apache.commons.compress.harmony.unpack200.bytecode.ClassFileEntry.<staticinit>()"
    ],
    "org.apache.commons.compress.archivers.zip.ParallelScatterZipCreator#createCallable(ZipArchiveEntryRequestSupplier)": ["org.apache.commons.compress.archivers.zip.ScatterZipOutputStream#addArchiveEntry(ZipArchiveEntryRequest)"],
    "org.apache.commons.compress.harmony.pack200.BandSet.BandData#BandData(int[])": ["org.apache.commons.compress.harmony.pack200.BandSet.BandData.<init>()"],
    "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream#BZip2CompressorOutputStream(OutputStream,int)": [
        "org.apache.commons.compress.compressors.bzip2.BZip2Constants.<staticinit>()",
        "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.<init>()",
        "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.<staticinit>()",
        "org.apache.commons.compress.compressors.CompressorOutputStream.<init>()",
        "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream#init()"
    ],
    "org.apache.commons.compress.harmony.pack200.CpBands#writeCpLong(OutputStream)": [
        "org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream#write(byte[])",
        "org.apache.commons.compress.archivers.sevenz.Coders.DeflateDecoder.DeflateDecoderOutputStream#write(byte[])",
        "org.apache.commons.compress.harmony.pack200.BandSet#encodeBandInt(String,int[],BHSDCodec)",
        "org.apache.commons.compress.harmony.pack200.Codec.<staticinit>()",
        "org.apache.commons.compress.harmony.pack200.CPLong#getLong()",
        "org.apache.commons.compress.harmony.pack200.PackingUtils.log(String)",
        "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.OutputStreamWrapper#write(byte[])",
        "org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream#write(byte[])",
        "org.apache.commons.compress.archivers.zip.ZipSplitOutputStream#write(byte[])"
    ],
    "org.apache.commons.compress.compressors.pack200.InMemoryCachingStreamBridge#InMemoryCachingStreamBridge()": [
        "org.apache.commons.compress.compressors.pack200.InMemoryCachingStreamBridge.<init>()",
        "org.apache.commons.compress.compressors.pack200.AbstractStreamBridge#AbstractStreamBridge(OutputStream)"
    ],
    "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile#getContentMethods(SevenZArchiveEntry)": [
        "org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry#getContentMethods()",
        "org.apache.commons.compress.archivers.sevenz.SevenZMethod.<staticinit>()",
        "org.apache.commons.compress.archivers.sevenz.SevenZMethodConfiguration#SevenZMethodConfiguration(SevenZMethod,Object)"
    ],
    "org.apache.commons.compress.harmony.unpack200.bytecode.ByteCode#resolve(ClassConstantPool)": [
        "org.apache.commons.compress.harmony.unpack200.bytecode.ClassFileEntry#resolve(ClassConstantPool)",
        "org.apache.commons.compress.harmony.unpack200.bytecode.ByteCode#setOperandByte(int,int)",
        "org.apache.commons.compress.harmony.unpack200.bytecode.ClassConstantPool#indexOf(ClassFileEntry)",
        "org.apache.commons.compress.harmony.unpack200.bytecode.ByteCode#getNestedPosition(int)",
        "org.apache.commons.compress.harmony.unpack200.bytecode.ByteCode#setOperand2Bytes(int,int)"
    ],
    "org.apache.commons.compress.harmony.unpack200.Archive#unpack()": [
        "org.apache.commons.compress.harmony.unpack200.Archive#available(InputStream)",
        "org.apache.commons.compress.harmony.unpack200.Segment.<staticinit>()",
        "org.apache.commons.compress.harmony.unpack200.Segment#setLogLevel(int)",
        "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.BoundCountInputStream#read()",
        "org.apache.commons.compress.harmony.unpack200.Segment#setLogStream(OutputStream)",
        "org.apache.commons.compress.harmony.unpack200.Archive.<staticinit>()",
        "org.apache.commons.compress.harmony.unpack200.Segment#setPreRead(boolean)",
        "org.apache.commons.compress.harmony.unpack200.Segment#overrideDeflateHint(boolean)",
        "org.apache.commons.compress.harmony.unpack200.Segment.<init>()",
        "org.apache.commons.compress.harmony.unpack200.Segment#log(int,String)",
        "org.apache.commons.compress.harmony.unpack200.Segment#unpack(InputStream,JarOutputStream)"
    ],
    "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile#fillDates(Path,SevenZArchiveEntry,LinkOption[]...)": [
        "org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry#setAccessTime(FileTime)",
        "org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry#setLastModifiedTime(FileTime)",
        "org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry#setCreationTime(FileTime)"
    ],
    "org.apache.commons.compress.changes.ChangeSet#add(E extends ArchiveEntry,InputStream)": ["org.apache.commons.compress.changes.ChangeSet#add(E extends ArchiveEntry,InputStream,boolean)"],
    "org.apache.commons.compress.archivers.zip.ParallelScatterZipCreator#submit(Callable<? extends Object>)": ["org.apache.commons.compress.archivers.zip.ParallelScatterZipCreator#submitStreamAwareCallable(Callable<? extends ScatterZipOutputStream>)"],
    "org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorOutputStream#finish()": ["org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorOutputStream#flushBuffer()"],
    "org.apache.commons.compress.archivers.tar.TarArchiveEntry#isBlockDevice()": ["org.apache.commons.compress.archivers.tar.TarConstants.<staticinit>()"],
    "org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorInputStream.matches(byte[],int)": ["org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorInputStream.<staticinit>()"],
    "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.OutputStreamWrapper.<init>()": ["org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.OutputStreamWrapper.<staticinit>()"],
    "org.apache.commons.compress.harmony.unpack200.ClassBands#getFieldFlags()": [
        "org.apache.commons.compress.harmony.unpack200.AttributeLayout.<staticinit>()",
        "org.apache.commons.compress.harmony.unpack200.AttributeLayout#isDefaultLayout()",
        "org.apache.commons.compress.harmony.unpack200.AttributeLayoutMap#getAttributeLayout(int,int)"
    ],
    "org.apache.commons.compress.harmony.unpack200.AttributeLayout#toString()": ["org.apache.commons.compress.harmony.unpack200.AttributeLayout.<staticinit>()"],
    "org.apache.commons.compress.archivers.cpio.CpioArchiveEntry#getHeaderPadCount()": ["org.apache.commons.compress.archivers.cpio.CpioArchiveEntry#getHeaderPadCount(Charset)"],
    "org.apache.commons.compress.harmony.unpack200.bytecode.RuntimeVisibleorInvisibleParameterAnnotationsAttribute#getNestedClassFileEntries()": [
        "org.apache.commons.compress.harmony.unpack200.bytecode.RuntimeVisibleorInvisibleParameterAnnotationsAttribute.ParameterAnnotation#getClassFileEntries()",
        "org.apache.commons.compress.harmony.unpack200.bytecode.ClassFileEntry.<staticinit>()"
    ],
    "org.apache.commons.compress.utils.FixedLengthBlockOutputStream.BufferAtATimeOutputChannel#write(ByteBuffer)": [
        "org.apache.commons.compress.archivers.sevenz.Coders.DeflateDecoder.DeflateDecoderOutputStream#write(byte[],int,int)",
        "org.apache.commons.compress.utils.FixedLengthBlockOutputStream#write(byte[],int,int)",
        "org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorOutputStream#write(byte[],int,int)",
        "org.apache.commons.compress.archivers.ar.ArArchiveOutputStream#write(byte[],int,int)",
        "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream#write(byte[],int,int)",
        "org.apache.commons.compress.compressors.lzma.LZMACompressorOutputStream#write(byte[],int,int)",
        "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.OutputStreamWrapper#write(byte[],int,int)",
        "org.apache.commons.compress.compressors.zstandard.ZstdCompressorOutputStream#write(byte[],int,int)",
        "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream#write(byte[],int,int)",
        "org.apache.commons.compress.archivers.zip.FileRandomAccessOutputStream#write(byte[],int,int)",
        "org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream#write(byte[],int,int)",
        "org.apache.commons.compress.archivers.sevenz.AES256SHA256Decoder.AES256SHA256DecoderOutputStream#write(byte[],int,int)",
        "org.apache.commons.compress.utils.FixedLengthBlockOutputStream.BufferAtATimeOutputChannel#close()",
        "org.apache.commons.compress.archivers.zip.ZipSplitOutputStream#write(byte[],int,int)",
        "org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorOutputStream#write(byte[],int,int)",
        "org.apache.commons.compress.compressors.xz.XZCompressorOutputStream#write(byte[],int,int)",
        "org.apache.commons.compress.compressors.deflate.DeflateCompressorOutputStream#write(byte[],int,int)",
        "org.apache.commons.compress.archivers.zip.SeekableChannelRandomAccessOutputStream#write(byte[],int,int)",
        "org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream#write(byte[],int,int)",
        "org.apache.commons.compress.utils.FixedLengthBlockOutputStream.BufferAtATimeOutputChannel#isOpen()",
        "org.apache.commons.compress.compressors.lz4.BlockLZ4CompressorOutputStream#write(byte[],int,int)",
        "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream#write(byte[],int,int)",
        "org.apache.commons.compress.compressors.snappy.SnappyCompressorOutputStream#write(byte[],int,int)",
        "org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream#write(byte[],int,int)"
    ],
    "org.apache.commons.compress.harmony.pack200.Segment.SegmentAnnotationVisitor#visitAnnotation(String,String)": ["org.apache.commons.compress.harmony.pack200.Segment.SegmentAnnotationVisitor#visitAnnotation(String,String)$AnnotationVisitor$1.<init>()"],
    "org.apache.commons.compress.archivers.tar.TarArchiveEntry#TarArchiveEntry(String,boolean)": [
        "org.apache.commons.compress.archivers.tar.TarArchiveEntry#TarArchiveEntry(boolean)",
        "org.apache.commons.compress.archivers.tar.TarArchiveEntry.normalizeFileName(String,boolean)",
        "org.apache.commons.compress.archivers.tar.TarConstants.<staticinit>()",
        "org.apache.commons.compress.archivers.tar.TarArchiveEntry.<staticinit>()"
    ],
    "org.apache.commons.compress.harmony.pack200.MetadataBandGroup.<init>()": ["org.apache.commons.compress.harmony.pack200.IntList#IntList()"],
    "org.apache.commons.compress.harmony.unpack200.SegmentConstantPool#getClassPoolEntry(String)": [
        "org.apache.commons.compress.harmony.unpack200.SegmentConstantPool#getConstantPoolEntry(int,long)",
        "org.apache.commons.compress.harmony.unpack200.SegmentConstantPool#matchSpecificPoolEntryIndex(String[],String,int)",
        "org.apache.commons.compress.harmony.unpack200.CpBands#getCpClass()",
        "org.apache.commons.compress.harmony.unpack200.SegmentConstantPool.<staticinit>()"
    ],
    "org.apache.commons.compress.harmony.unpack200.IcTuple#toString()": [
        "org.apache.commons.compress.harmony.unpack200.IcTuple#simpleClassName()",
        "org.apache.commons.compress.harmony.unpack200.IcTuple#outerClassString()"
    ],
    "org.apache.commons.compress.archivers.zip.ZipUtil.setNameAndCommentFromExtraFields(ZipArchiveEntry,byte[],byte[])": [
        "org.apache.commons.compress.archivers.zip.UnicodeCommentExtraField.<staticinit>()",
        "org.apache.commons.compress.archivers.zip.ZipArchiveEntry#setNameSource(NameSource)",
        "org.apache.commons.compress.archivers.zip.UnicodePathExtraField.<staticinit>()",
        "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.CommentSource.<staticinit>()",
        "org.apache.commons.compress.archivers.zip.ZipArchiveEntry#getExtraField(ZipShort)",
        "org.apache.commons.compress.archivers.zip.ZipUtil.getUnicodeStringIfOriginalMatches(AbstractUnicodeExtraField,byte[])",
        "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.NameSource.<staticinit>()",
        "org.apache.commons.compress.archivers.zip.ZipArchiveEntry#setCommentSource(CommentSource)",
        "org.apache.commons.compress.archivers.zip.ZipArchiveEntry#setName(String)"
    ],
    "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream#ZipArchiveOutputStream(OutputStream)": [
        "org.apache.commons.compress.archivers.ArchiveOutputStream.<init>()",
        "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.<init>()",
        "org.apache.commons.compress.archivers.zip.StreamCompressor.create(OutputStream,Deflater)"
    ],
    "org.apache.commons.compress.harmony.pack200.Segment.SegmentMethodVisitor#visitTypeInsn(int,String)": ["org.apache.commons.compress.harmony.pack200.BcBands#visitTypeInsn(int,String)"],
    "org.apache.commons.compress.harmony.pack200.SegmentHeader#writeClassCounts(OutputStream)": [
        "org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream#write(byte[])",
        "org.apache.commons.compress.archivers.sevenz.Coders.DeflateDecoder.DeflateDecoderOutputStream#write(byte[])",
        "org.apache.commons.compress.harmony.pack200.Codec.<staticinit>()",
        "org.apache.commons.compress.harmony.pack200.BandSet#encodeScalar(int,BHSDCodec)",
        "org.apache.commons.compress.harmony.pack200.SegmentHeader.Counter#getMostCommon()",
        "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.OutputStreamWrapper#write(byte[])",
        "org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream#write(byte[])",
        "org.apache.commons.compress.archivers.zip.ZipSplitOutputStream#write(byte[])"
    ],
    "org.apache.commons.compress.utils.ArchiveUtils.matchAsciiBuffer(String,byte[],int,int)": ["org.apache.commons.compress.utils.ArchiveUtils.isEqual(byte[],int,int,byte[],int,int,boolean)"],
    "org.apache.commons.compress.archivers.zip.ZipShort#ZipShort(byte[],int)": [
        "org.apache.commons.compress.archivers.zip.ZipShort.getValue(byte[],int)",
        "org.apache.commons.compress.archivers.zip.ZipShort.<init>()"
    ],
    "org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField#parseFromCentralDirectoryData(byte[],int,int)": [
        "org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField#parseFromLocalFileData(byte[],int,int)",
        "org.apache.commons.compress.archivers.zip.ZipLong#ZipLong(byte[],int)",
        "org.apache.commons.compress.archivers.zip.ZipEightByteInteger#ZipEightByteInteger(byte[],int)",
        "org.apache.commons.compress.archivers.zip.ZipConstants.<staticinit>()"
    ],
    "org.apache.commons.compress.compressors.lz4.BlockLZ4CompressorOutputStream#write(byte[],int,int)": ["org.apache.commons.compress.compressors.lz77support.LZ77Compressor#compress(byte[],int,int)"],
    "org.apache.commons.compress.utils.SeekableInMemoryByteChannel#SeekableInMemoryByteChannel()": [
        "org.apache.commons.compress.utils.SeekableInMemoryByteChannel#SeekableInMemoryByteChannel(byte[])",
        "org.apache.commons.compress.utils.ByteUtils.<staticinit>()"
    ],
    "org.apache.commons.compress.harmony.pack200.Pack200ClassReader#Pack200ClassReader(byte[])": ["org.apache.commons.compress.harmony.pack200.Pack200ClassReader.<init>()"],
    "org.apache.commons.compress.utils.SeekableInMemoryByteChannel#read(ByteBuffer)": ["org.apache.commons.compress.utils.SeekableInMemoryByteChannel#ensureOpen()"],
    "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream#createArchiveEntry(File,String)": ["org.apache.commons.compress.archivers.zip.ZipArchiveEntry#ZipArchiveEntry(File,String)"],
    "org.apache.commons.compress.archivers.arj.ArjArchiveInputStream#read(byte[],int,int)": [
        "org.apache.commons.compress.archivers.arj.LocalFileHeader.Methods.<staticinit>()",
        "org.apache.commons.compress.compressors.zstandard.ZstdCompressorInputStream#read(byte[],int,int)",
        "org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorInputStream#read(byte[],int,int)",
        "org.apache.commons.compress.archivers.sevenz.BoundedSeekableByteChannelInputStream#read(byte[],int,int)",
        "org.apache.commons.compress.compressors.deflate64.Deflate64CompressorInputStream#read(byte[],int,int)",
        "org.apache.commons.compress.compressors.brotli.BrotliCompressorInputStream#read(byte[],int,int)",
        "org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream#read(byte[],int,int)",
        "org.apache.commons.compress.archivers.sevenz.AES256SHA256Decoder.AES256SHA256DecoderInputStream#read(byte[],int,int)",
        "org.apache.commons.compress.compressors.lzma.LZMACompressorInputStream#read(byte[],int,int)",
        "org.apache.commons.compress.compressors.lz4.BlockLZ4CompressorInputStream#read(byte[],int,int)",
        "org.apache.commons.compress.compressors.snappy.SnappyCompressorInputStream#read(byte[],int,int)",
        "org.apache.commons.compress.compressors.xz.XZCompressorInputStream#read(byte[],int,int)",
        "org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream#read(byte[],int,int)",
        "org.apache.commons.compress.utils.BoundedArchiveInputStream#read(byte[],int,int)",
        "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream#read(byte[],int,int)",
        "org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStream#read(byte[],int,int)",
        "org.apache.commons.compress.compressors.lzw.LZWInputStream#read(byte[],int,int)",
        "org.apache.commons.compress.compressors.deflate.DeflateCompressorInputStream#read(byte[],int,int)"
    ],
    "org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp.zipLongToDate(ZipLong)": ["org.apache.commons.compress.archivers.zip.ZipLong#getIntValue()"],
    "org.apache.commons.compress.harmony.pack200.PackingOptions#getUnknownCodeAttributeAction(String)": ["org.apache.commons.compress.harmony.pack200.PackingOptions#getOrDefault(Map<String, String>,String,String)"],
    "org.apache.commons.compress.harmony.unpack200.NewAttributeBands.Callable#addNextToAttribute(NewAttribute)": [
        "org.apache.commons.compress.harmony.unpack200.NewAttributeBands.UnionCase#addToAttribute(int,NewAttribute)",
        "org.apache.commons.compress.harmony.unpack200.NewAttributeBands.Call#addToAttribute(int,NewAttribute)",
        "org.apache.commons.compress.harmony.unpack200.NewAttributeBands.Integral#addToAttribute(int,NewAttribute)",
        "org.apache.commons.compress.harmony.unpack200.NewAttributeBands.Union#addToAttribute(int,NewAttribute)",
        "org.apache.commons.compress.harmony.unpack200.NewAttributeBands.Callable#addToAttribute(int,NewAttribute)",
        "org.apache.commons.compress.harmony.unpack200.NewAttributeBands.Reference#addToAttribute(int,NewAttribute)",
        "org.apache.commons.compress.harmony.unpack200.NewAttributeBands.Replication#addToAttribute(int,NewAttribute)"
    ],
    "org.apache.commons.compress.archivers.zip.StreamCompressor.ScatterGatherBackingStoreCompressor#writeOut(byte[],int,int)": ["org.apache.commons.compress.parallel.FileBasedScatterGatherBackingStore#writeOut(byte[],int,int)"],
    "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream#ZipArchiveInputStream(InputStream,String,boolean,boolean,boolean)": [
        "org.apache.commons.compress.archivers.zip.ZipEncodingHelper.getZipEncoding(String)",
        "org.apache.commons.compress.archivers.ArchiveInputStream#ArchiveInputStream(InputStream,String)",
        "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.<init>()"
    ],
    "org.apache.commons.compress.utils.MultiReadOnlySeekableByteChannel#close()": [
        "org.apache.commons.compress.utils.SeekableInMemoryByteChannel#close()",
        "org.apache.commons.compress.utils.MultiReadOnlySeekableByteChannel#close()"
    ],
    "org.apache.commons.compress.archivers.zip.NioZipEncoding#encode(String)": [
        "org.apache.commons.compress.archivers.zip.ZipEncodingHelper.growBufferBy(ByteBuffer,int)",
        "org.apache.commons.compress.archivers.zip.NioZipEncoding.encodeSurrogate(CharBuffer,char)",
        "org.apache.commons.compress.archivers.zip.NioZipEncoding.encodeFully(CharsetEncoder,CharBuffer,ByteBuffer)",
        "org.apache.commons.compress.archivers.zip.NioZipEncoding#newEncoder()",
        "org.apache.commons.compress.archivers.zip.NioZipEncoding.estimateIncrementalEncodingSize(CharsetEncoder,int)",
        "org.apache.commons.compress.archivers.zip.NioZipEncoding.estimateInitialBufferSize(CharsetEncoder,int)"
    ],
    "org.apache.commons.compress.utils.CountingOutputStream#write(byte[])": ["org.apache.commons.compress.utils.CountingOutputStream#write(byte[],int,int)"],
    "org.apache.commons.compress.compressors.lzma.LZMACompressorInputStream#LZMACompressorInputStream(InputStream)": [
        "org.apache.commons.compress.compressors.CompressorInputStream.<init>()",
        "org.apache.commons.compress.compressors.lzma.LZMACompressorInputStream.<init>()"
    ],
    "org.apache.commons.compress.archivers.ar.ArArchiveInputStream#ArArchiveInputStream(InputStream)": [
        "org.apache.commons.compress.archivers.ArchiveInputStream#ArchiveInputStream(InputStream,Charset)",
        "org.apache.commons.compress.archivers.ar.ArArchiveInputStream.<init>()"
    ],
    "org.apache.commons.compress.archivers.zip.ZipArchiveEntry#setExtra()": [
        "org.apache.commons.compress.archivers.zip.ZipArchiveEntry#getAllExtraFieldsNoCopy()",
        "org.apache.commons.compress.archivers.zip.ExtraFieldUtils.mergeLocalFileDataData(ZipExtraField[])",
        "org.apache.commons.compress.archivers.zip.ZipArchiveEntry#updateTimeFieldsFromExtraFields()"
    ],
    "org.apache.commons.compress.utils.TimeUtils.isUnixTime(FileTime)": [
        "org.apache.commons.compress.utils.TimeUtils.isUnixTime(long)",
        "org.apache.commons.compress.utils.TimeUtils.toUnixTime(FileTime)"
    ],
    "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile#finish()": [
        "org.apache.commons.compress.archivers.sevenz.SevenZFile.<staticinit>()",
        "org.apache.commons.compress.utils.SeekableInMemoryByteChannel#position(long)",
        "org.apache.commons.compress.utils.SeekableInMemoryByteChannel#position()",
        "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile#writeHeader(DataOutput)",
        "org.apache.commons.compress.utils.MultiReadOnlySeekableByteChannel#position()",
        "org.apache.commons.compress.utils.MultiReadOnlySeekableByteChannel#write(ByteBuffer)",
        "org.apache.commons.compress.utils.MultiReadOnlySeekableByteChannel#position(long)",
        "org.apache.commons.compress.utils.SeekableInMemoryByteChannel#write(ByteBuffer)"
    ],
    "org.apache.commons.compress.utils.ParsingUtils.parseIntValue(String)": ["org.apache.commons.compress.utils.ParsingUtils.parseIntValue(String,int)"],
    "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream#ZipArchiveOutputStream(SeekableByteChannel)": [
        "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.<init>()",
        "org.apache.commons.compress.archivers.zip.StreamCompressor.create(OutputStream,Deflater)",
        "org.apache.commons.compress.archivers.zip.SeekableChannelRandomAccessOutputStream#SeekableChannelRandomAccessOutputStream(SeekableByteChannel)",
        "org.apache.commons.compress.archivers.ArchiveOutputStream.<init>()"
    ],
    "org.apache.commons.compress.archivers.zip.AsiExtraField#getHeaderId()": ["org.apache.commons.compress.archivers.zip.AsiExtraField.<staticinit>()"],
    "org.apache.commons.compress.archivers.zip.AsiExtraField#setLinkedFile(String)": ["org.apache.commons.compress.archivers.zip.AsiExtraField#getMode(int)"],
    "org.apache.commons.compress.harmony.unpack200.bytecode.ByteCode#hashCode()": ["org.apache.commons.compress.harmony.unpack200.bytecode.ClassFileEntry#objectHashCode()"],
    "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream#initBlock()": [
        "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.bsGetInt(BitInputStream)",
        "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream#getAndMoveToFrontDecode()",
        "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.bsR(BitInputStream,int)",
        "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.bsGetUByte(BitInputStream)",
        "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream#complete()",
        "org.apache.commons.compress.compressors.bzip2.CRC#reset()",
        "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.<staticinit>()",
        "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.Data#Data(int)"
    ],
    "org.apache.commons.compress.archivers.sevenz.SevenZFile.Builder#setPassword(String)": ["org.apache.commons.compress.archivers.sevenz.AES256SHA256Decoder.utf16Decode(char[])"],
    "org.apache.commons.compress.archivers.tar.TarArchiveInputStream#TarArchiveInputStream(InputStream,boolean)": [
        "org.apache.commons.compress.archivers.tar.TarConstants.<staticinit>()",
        "org.apache.commons.compress.archivers.tar.TarArchiveEntry.<staticinit>()",
        "org.apache.commons.compress.archivers.tar.TarArchiveInputStream#TarArchiveInputStream(InputStream,int,int,String,boolean)"
    ],
    "org.apache.commons.compress.archivers.sevenz.Coders.<staticinit>()": ["org.apache.commons.compress.archivers.sevenz.Coders$HashMap$1.<init>()"],
    "org.apache.commons.compress.utils.OsgiUtils.<staticinit>()": ["org.apache.commons.compress.utils.OsgiUtils.isBundleReference(Class<?>)"],
    "org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStream#FramedSnappyCompressorInputStream(InputStream,int,FramedSnappyDialect)": [
        "org.apache.commons.compress.compressors.CompressorInputStream.<init>()",
        "org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStream.<init>()",
        "org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStream#readStreamIdentifier()",
        "org.apache.commons.compress.compressors.snappy.FramedSnappyDialect#hasStreamIdentifier()"
    ],
    "org.apache.commons.compress.harmony.unpack200.bytecode.LocalVariableTableAttribute#renumber(List<Integer>)": [
        "org.apache.commons.compress.harmony.pack200.Pack200Exception#Pack200Exception(String)",
        "org.apache.commons.compress.harmony.unpack200.bytecode.BCIRenumberedAttribute#renumber(List<Integer>)"
    ],
    "org.apache.commons.compress.archivers.StreamingNotSupportedException#StreamingNotSupportedException(String)": [
        "org.apache.commons.compress.archivers.StreamingNotSupportedException.<init>()",
        "org.apache.commons.compress.archivers.ArchiveException#ArchiveException(String)"
    ],
    "org.apache.commons.compress.archivers.tar.TarUtils.readLineOfNumberForPax1X(InputStream)": [
        "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream#read()",
        "org.apache.commons.compress.archivers.sevenz.AES256SHA256Decoder.AES256SHA256DecoderInputStream#read()",
        "org.apache.commons.compress.compressors.xz.XZCompressorInputStream#read()",
        "org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorInputStream#read()",
        "org.apache.commons.compress.compressors.lz77support.AbstractLZ77CompressorInputStream#read()",
        "org.apache.commons.compress.compressors.deflate.DeflateCompressorInputStream#read()",
        "org.apache.commons.compress.archivers.zip.ExplodingInputStream#read()",
        "org.apache.commons.compress.compressors.lzma.LZMACompressorInputStream#read()",
        "org.apache.commons.compress.compressors.zstandard.ZstdCompressorInputStream#read()",
        "org.apache.commons.compress.archivers.sevenz.BoundedSeekableByteChannelInputStream#read()",
        "org.apache.commons.compress.utils.BoundedArchiveInputStream#read()",
        "org.apache.commons.compress.compressors.brotli.BrotliCompressorInputStream#read()",
        "org.apache.commons.compress.archivers.tar.TarArchiveSparseZeroInputStream#read()",
        "org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream#read()",
        "org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStream#read()",
        "org.apache.commons.compress.compressors.deflate64.Deflate64CompressorInputStream#read()",
        "org.apache.commons.compress.compressors.lzw.LZWInputStream#read()",
        "org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream#read()"
    ],
    "org.apache.commons.compress.archivers.zip.Zip64RequiredException#Zip64RequiredException(String)": ["org.apache.commons.compress.archivers.zip.Zip64RequiredException.<init>()"],
    "org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField#assembleData()": ["org.apache.commons.compress.archivers.zip.ZipLong.getBytes(long)"],
    "org.apache.commons.compress.compressors.xz.XZCompressorOutputStream#XZCompressorOutputStream(OutputStream,int)": [
        "org.apache.commons.compress.compressors.CompressorOutputStream.<init>()",
        "org.apache.commons.compress.compressors.xz.XZCompressorOutputStream.<init>()"
    ],
    "org.apache.commons.compress.archivers.dump.DumpArchiveException#DumpArchiveException(String,Throwable)": ["org.apache.commons.compress.archivers.dump.DumpArchiveException.<init>()"],
    "org.apache.commons.compress.archivers.dump.Dirent#Dirent(int,int,int,String)": ["org.apache.commons.compress.archivers.dump.Dirent.<init>()"],
    "org.apache.commons.compress.harmony.pack200.BandSet#analyseBand(String,int[],BHSDCodec)": [
        "org.apache.commons.compress.harmony.pack200.Codec.<staticinit>()",
        "org.apache.commons.compress.harmony.pack200.Codec#encode(int[])",
        "org.apache.commons.compress.harmony.pack200.BandSet.BandData#BandData(int[])",
        "org.apache.commons.compress.harmony.pack200.CodecEncoding.getCanonicalCodec(int)",
        "org.apache.commons.compress.harmony.pack200.BandSet.BandData#mainlySmallDeltas()",
        "org.apache.commons.compress.harmony.pack200.BandSet#tryCodecs(String,int[],BHSDCodec,BandData,BandAnalysisResults,byte[],BHSDCodec[])",
        "org.apache.commons.compress.harmony.pack200.BandSet.BandData#mainlyPositiveDeltas()",
        "org.apache.commons.compress.harmony.pack200.CanonicalCodecFamilies.<staticinit>()",
        "org.apache.commons.compress.harmony.pack200.BandSet#encodeWithPopulationCodec(String,int[],BHSDCodec,BandData,BandAnalysisResults)",
        "org.apache.commons.compress.harmony.pack200.BHSDCodec#smallest()",
        "org.apache.commons.compress.harmony.pack200.BHSDCodec#largest()",
        "org.apache.commons.compress.harmony.pack200.BandSet.BandData#wellCorrelated()",
        "org.apache.commons.compress.harmony.pack200.BandSet.BandData#numDistinctValues()",
        "org.apache.commons.compress.harmony.pack200.BandSet.BandAnalysisResults.<init>()",
        "org.apache.commons.compress.harmony.pack200.BandSet.BandData#anyNegatives()",
        "org.apache.commons.compress.harmony.pack200.BandSet#timeToStop(BandAnalysisResults)"
    ],
    "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream#skipRemainderOfArchive(boolean)": [
        "org.apache.commons.compress.archivers.zip.ZipFile.<staticinit>()",
        "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream#readFully(byte[])",
        "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream#realSkip(long)",
        "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.<staticinit>()",
        "org.apache.commons.compress.archivers.zip.ZipShort.getValue(byte[])",
        "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream#findEocdRecord()",
        "org.apache.commons.compress.archivers.zip.ZipConstants.<staticinit>()"
    ],
    "org.apache.commons.compress.archivers.tar.TarUtils.parseOctal(byte[],int,int)": ["org.apache.commons.compress.archivers.tar.TarUtils.exceptionMessage(byte[],int,int,int,byte)"],
    "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream#endCompression()": [
        "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream#bsPutInt(int)",
        "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream#bsPutUByte(int)",
        "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream#bsFinishedWithStream()"
    ],
    "org.apache.commons.compress.compressors.deflate64.HuffmanDecoder.HuffmanCodes#decodeNext(byte[],int,int)": [
        "org.apache.commons.compress.utils.ExactMath.add(int,long)",
        "org.apache.commons.compress.compressors.deflate64.HuffmanDecoder.DecodingMemory#add(byte)",
        "org.apache.commons.compress.compressors.deflate64.HuffmanDecoder.<staticinit>()",
        "org.apache.commons.compress.compressors.deflate64.HuffmanDecoder.nextSymbol(BitInputStream,BinaryTreeNode)",
        "org.apache.commons.compress.compressors.deflate64.HuffmanDecoder#readBits(int)",
        "org.apache.commons.compress.compressors.deflate64.HuffmanDecoder.DecodingMemory#recordToBuffer(int,int,byte[])",
        "org.apache.commons.compress.compressors.deflate64.HuffmanDecoder.HuffmanCodes#copyFromRunBuffer(byte[],int,int)"
    ],
    "org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream#CpioArchiveInputStream(InputStream)": [
        "org.apache.commons.compress.archivers.cpio.CpioUtil.<staticinit>()",
        "org.apache.commons.compress.archivers.cpio.CpioConstants.<staticinit>()",
        "org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream#CpioArchiveInputStream(InputStream,int,String)"
    ],
    "org.apache.commons.compress.archivers.zip.ZipFile#ZipFile(SeekableByteChannel,String,String,boolean,boolean,boolean)": ["org.apache.commons.compress.archivers.zip.ZipFile#ZipFile(SeekableByteChannel,String,Charset,boolean,boolean,boolean)"],
    "org.apache.commons.compress.archivers.zip.ZipUtil.javaToDosTime(long)": [
        "org.apache.commons.compress.archivers.zip.ZipUtil.javaEpochToLocalDateTime(long)",
        "org.apache.commons.compress.archivers.zip.ZipUtil.<staticinit>()"
    ],
    "org.apache.commons.compress.changes.ChangeSetPerformer.ZipFileIterator#ZipFileIterator(ZipFile)": [
        "org.apache.commons.compress.archivers.zip.ZipFile#getEntriesInPhysicalOrder()",
        "org.apache.commons.compress.changes.ChangeSetPerformer.ZipFileIterator.<init>()"
    ],
    "org.apache.commons.compress.harmony.unpack200.SegmentOptions#hasMethodFlagsHi()": ["org.apache.commons.compress.harmony.unpack200.SegmentOptions.<staticinit>()"],
    "org.apache.commons.compress.compressors.snappy.SnappyCompressorOutputStream#writeUncompressedSize(long)": [
        "org.apache.commons.compress.archivers.sevenz.AES256SHA256Decoder.AES256SHA256DecoderOutputStream#write(int)",
        "org.apache.commons.compress.compressors.snappy.SnappyCompressorOutputStream#write(int)",
        "org.apache.commons.compress.archivers.sevenz.Coders.DeflateDecoder.DeflateDecoderOutputStream#write(int)",
        "org.apache.commons.compress.compressors.lz4.BlockLZ4CompressorOutputStream#write(int)",
        "org.apache.commons.compress.compressors.deflate.DeflateCompressorOutputStream#write(int)",
        "org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorOutputStream#write(int)",
        "org.apache.commons.compress.compressors.lzma.LZMACompressorOutputStream#write(int)",
        "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream#write(int)",
        "org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream#write(int)",
        "org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorOutputStream#write(int)",
        "org.apache.commons.compress.compressors.xz.XZCompressorOutputStream#write(int)",
        "org.apache.commons.compress.utils.FixedLengthBlockOutputStream#write(int)",
        "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.OutputStreamWrapper#write(int)",
        "org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream#write(int)",
        "org.apache.commons.compress.archivers.ArchiveOutputStream#write(int)",
        "org.apache.commons.compress.archivers.zip.ZipSplitOutputStream#write(int)",
        "org.apache.commons.compress.compressors.zstandard.ZstdCompressorOutputStream#write(int)",
        "org.apache.commons.compress.archivers.zip.RandomAccessOutputStream#write(int)"
    ],
    "org.apache.commons.compress.harmony.unpack200.bytecode.forms.WideForm#setByteCodeOperandsFormat1(int,ByteCode,OperandManager,int)": [
        "org.apache.commons.compress.harmony.unpack200.bytecode.OperandManager#nextLocal()",
        "org.apache.commons.compress.harmony.unpack200.bytecode.ByteCode#getOpcode()",
        "org.apache.commons.compress.harmony.unpack200.bytecode.ByteCode#setRewrite(int[])",
        "org.apache.commons.compress.harmony.unpack200.bytecode.forms.VariableInstructionForm#setRewrite2Bytes(int,int,int[])"
    ],
    "org.apache.commons.compress.harmony.pack200.NewAttributeBands.Reference#pack(OutputStream)": [
        "org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream#write(byte[])",
        "org.apache.commons.compress.archivers.sevenz.Coders.DeflateDecoder.DeflateDecoderOutputStream#write(byte[])",
        "org.apache.commons.compress.harmony.pack200.Codec.<staticinit>()",
        "org.apache.commons.compress.harmony.pack200.BandSet#encodeBandInt(String,int[],BHSDCodec)",
        "org.apache.commons.compress.harmony.pack200.BandSet#cpEntryListToArray(List<? extends ConstantPoolEntry>)",
        "org.apache.commons.compress.harmony.pack200.PackingUtils.log(String)",
        "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.OutputStreamWrapper#write(byte[])",
        "org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream#write(byte[])",
        "org.apache.commons.compress.archivers.zip.ZipSplitOutputStream#write(byte[])",
        "org.apache.commons.compress.harmony.pack200.BandSet#cpEntryOrNullListToArray(List<? extends ConstantPoolEntry>)"
    ],
    "org.apache.commons.compress.archivers.zip.UnshrinkingInputStream#partialClear()": [
        "org.apache.commons.compress.compressors.lzw.LZWInputStream#getPrefix(int)",
        "org.apache.commons.compress.archivers.zip.UnshrinkingInputStream.<staticinit>()",
        "org.apache.commons.compress.compressors.lzw.LZWInputStream#getClearCode()",
        "org.apache.commons.compress.compressors.lzw.LZWInputStream.<staticinit>()",
        "org.apache.commons.compress.compressors.lzw.LZWInputStream#setPrefix(int,int)"
    ],
    "org.apache.commons.compress.compressors.lz4.BlockLZ4CompressorOutputStream.createParameterBuilder()": [
        "org.apache.commons.compress.compressors.lz77support.Parameters.Builder#withMaxLiteralLength(int)",
        "org.apache.commons.compress.compressors.lz77support.Parameters.builder(int)",
        "org.apache.commons.compress.compressors.lz4.BlockLZ4CompressorInputStream.<staticinit>()",
        "org.apache.commons.compress.compressors.lz77support.Parameters.Builder#withMaxOffset(int)",
        "org.apache.commons.compress.compressors.lz77support.Parameters.Builder#withMinBackReferenceLength(int)",
        "org.apache.commons.compress.compressors.lz4.BlockLZ4CompressorOutputStream.<staticinit>()",
        "org.apache.commons.compress.compressors.lz77support.Parameters.Builder#withMaxBackReferenceLength(int)"
    ],
    "org.apache.commons.compress.harmony.unpack200.ClassBands#parseClassMetadataBands(InputStream,int[])": [
        "org.apache.commons.compress.harmony.unpack200.AttributeLayout#matches(long)",
        "org.apache.commons.compress.harmony.unpack200.AttributeLayoutMap#getAttributeLayout(String,int)",
        "org.apache.commons.compress.harmony.unpack200.AttributeLayout.<staticinit>()",
        "org.apache.commons.compress.harmony.unpack200.SegmentUtils.countMatches(long[],IMatcher)",
        "org.apache.commons.compress.harmony.unpack200.ClassBands#parseMetadata(InputStream,String[],int[],int[],String)",
        "org.apache.commons.compress.harmony.unpack200.MetadataBandGroup#getAttributes()"
    ],
    "org.apache.commons.compress.harmony.unpack200.bytecode.forms.LongForm#getOffset(OperandManager)": ["org.apache.commons.compress.harmony.unpack200.bytecode.OperandManager#nextLongRef()"],
    "org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp#setAccessTime(ZipLong)": ["org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp.<staticinit>()"],
    "org.apache.commons.compress.archivers.cpio.CpioArchiveEntry#getDevice()": ["org.apache.commons.compress.archivers.cpio.CpioArchiveEntry#checkOldFormat()"],
    "org.apache.commons.compress.compressors.lz4.BlockLZ4CompressorOutputStream#writeWritablePairs(int)": [
        "org.apache.commons.compress.compressors.lz4.BlockLZ4CompressorOutputStream.Pair#canBeWritten(int)",
        "org.apache.commons.compress.utils.ServiceLoaderIterator#next()",
        "org.apache.commons.compress.compressors.lz4.BlockLZ4CompressorOutputStream.Pair#writeTo(OutputStream)",
        "org.apache.commons.compress.compressors.lz4.BlockLZ4CompressorOutputStream.Pair#hasBeenWritten()",
        "org.apache.commons.compress.utils.ServiceLoaderIterator#hasNext()",
        "org.apache.commons.compress.compressors.lz4.BlockLZ4CompressorOutputStream.Pair#length()"
    ],
    "org.apache.commons.compress.archivers.zip.UnicodePathExtraField#UnicodePathExtraField(String,byte[],int,int)": [
        "org.apache.commons.compress.archivers.zip.UnicodePathExtraField.<init>()",
        "org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField#AbstractUnicodeExtraField(String,byte[],int,int)"
    ],
    "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.EntryMetaData#EntryMetaData(long,boolean)": ["org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.EntryMetaData.<init>()"],
    "org.apache.commons.compress.harmony.unpack200.bytecode.RuntimeVisibleorInvisibleParameterAnnotationsAttribute#RuntimeVisibleorInvisibleParameterAnnotationsAttribute(CPUTF8,ParameterAnnotation[])": [
        "org.apache.commons.compress.harmony.unpack200.bytecode.AnnotationsAttribute#AnnotationsAttribute(CPUTF8)",
        "org.apache.commons.compress.harmony.unpack200.bytecode.RuntimeVisibleorInvisibleParameterAnnotationsAttribute.<init>()"
    ],
    "org.apache.commons.compress.compressors.lzma.LZMAUtils.setCacheLZMAAvailablity(boolean)": [
        "org.apache.commons.compress.compressors.lzma.LZMAUtils.CachedAvailability.<staticinit>()",
        "org.apache.commons.compress.compressors.lzma.LZMAUtils.<staticinit>()",
        "org.apache.commons.compress.compressors.lzma.LZMAUtils.internalIsLZMACompressionAvailable()"
    ],
    "org.apache.commons.compress.archivers.zip.GeneralPurposeBit#GeneralPurposeBit()": ["org.apache.commons.compress.archivers.zip.GeneralPurposeBit.<init>()"],
    "org.apache.commons.compress.archivers.ar.ArArchiveEntry#ArArchiveEntry(String,long)": [
        "org.apache.commons.compress.archivers.ar.ArArchiveEntry#ArArchiveEntry(String,long,int,int,int,long)",
        "org.apache.commons.compress.archivers.ar.ArArchiveEntry.<staticinit>()"
    ],
    "org.apache.commons.compress.harmony.pack200.PackingUtils.getPackingFileListFromJar(JarFile,boolean)": [
        "org.apache.commons.compress.harmony.pack200.PackingUtils.readJarEntry(JarEntry,InputStream)",
        "org.apache.commons.compress.harmony.pack200.Archive.PackingFile#PackingFile(byte[],JarEntry)",
        "org.apache.commons.compress.harmony.pack200.PackingUtils.reorderPackingFiles(List<PackingFile>)"
    ],
    "org.apache.commons.compress.archivers.tar.TarArchiveEntry#isGNUSparse()": [
        "org.apache.commons.compress.archivers.tar.TarArchiveEntry#isOldGNUSparse()",
        "org.apache.commons.compress.archivers.tar.TarArchiveEntry#isPaxGNUSparse()"
    ],
    "org.apache.commons.compress.compressors.lzw.LZWInputStream#LZWInputStream(InputStream,ByteOrder)": [
        "org.apache.commons.compress.compressors.CompressorInputStream.<init>()",
        "org.apache.commons.compress.utils.BitInputStream#BitInputStream(InputStream,ByteOrder)",
        "org.apache.commons.compress.compressors.lzw.LZWInputStream.<init>()"
    ],
    "org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorInputStream.isSkippableFrameSignature(byte[])": ["org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorInputStream.<staticinit>()"],
    "org.apache.commons.compress.archivers.zip.UnsupportedZipFeatureException#UnsupportedZipFeatureException(ZipMethod,ZipArchiveEntry)": [
        "org.apache.commons.compress.archivers.zip.ZipArchiveEntry#getMethod()",
        "org.apache.commons.compress.archivers.zip.UnsupportedZipFeatureException.Feature.<staticinit>()",
        "org.apache.commons.compress.archivers.zip.ZipArchiveEntry#getName()",
        "org.apache.commons.compress.archivers.zip.UnsupportedZipFeatureException.<init>()"
    ],
    "org.apache.commons.compress.compressors.pack200.Pack200Strategy$Pack200Strategy$1.<init>()": ["org.apache.commons.compress.compressors.pack200.Pack200Strategy.<init>()"],
    "org.apache.commons.compress.compressors.lz77support.LZ77Compressor#compress()": [
        "org.apache.commons.compress.compressors.lz77support.Parameters#getLazyMatchingThreshold()",
        "org.apache.commons.compress.compressors.lz77support.Parameters#getMinBackReferenceLength()",
        "org.apache.commons.compress.compressors.lz77support.LZ77Compressor#insertStringsInMatch(int)",
        "org.apache.commons.compress.compressors.lz77support.LZ77Compressor#flushLiteralBlock()",
        "org.apache.commons.compress.compressors.lz77support.LZ77Compressor.<staticinit>()",
        "org.apache.commons.compress.compressors.lz77support.LZ77Compressor#longestMatchForNextPosition(int)",
        "org.apache.commons.compress.compressors.lz77support.LZ77Compressor#flushBackReference(int)",
        "org.apache.commons.compress.compressors.lz77support.LZ77Compressor#longestMatch(int)",
        "org.apache.commons.compress.compressors.lz77support.LZ77Compressor#insertString(int)",
        "org.apache.commons.compress.compressors.lz77support.Parameters#getMaxOffset()",
        "org.apache.commons.compress.compressors.lz77support.LZ77Compressor#catchUpMissedInserts()",
        "org.apache.commons.compress.compressors.lz77support.Parameters#getMaxLiteralLength()",
        "org.apache.commons.compress.compressors.lz77support.Parameters#getLazyMatching()"
    ],
    "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream#createArchiveEntry(Path,String,LinkOption[]...)": ["org.apache.commons.compress.archivers.zip.ZipArchiveEntry#ZipArchiveEntry(Function<ZipShort, ZipExtraField>,String)"],
    "org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry#getLastModifiedDate()": ["org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry#getLastModifiedTime()"],
    "org.apache.commons.compress.compressors.xz.XZCompressorInputStream#XZCompressorInputStream(InputStream,boolean)": ["org.apache.commons.compress.compressors.xz.XZCompressorInputStream#XZCompressorInputStream(InputStream,boolean,int)"],
    "org.apache.commons.compress.harmony.unpack200.IcTuple#nestedExplicitFlagSet()": ["org.apache.commons.compress.harmony.unpack200.IcTuple.<staticinit>()"],
    "org.apache.commons.compress.archivers.zip.ScatterZipOutputStream.ZipEntryWriter#writeNextZipEntry(ZipArchiveOutputStream)": [
        "org.apache.commons.compress.utils.ServiceLoaderIterator#next()",
        "org.apache.commons.compress.archivers.zip.ScatterZipOutputStream.CompressedEntry#transferToArchiveEntry()",
        "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream#addRawArchiveEntry(ZipArchiveEntry,InputStream)",
        "org.apache.commons.compress.utils.BoundedInputStream#BoundedInputStream(InputStream,long)"
    ],
    "org.apache.commons.compress.archivers.Lister#list(Path,String[]...)": [
        "org.apache.commons.compress.archivers.Lister#listZipUsingZipFile(Path)",
        "org.apache.commons.compress.archivers.Lister.detectFormat(Path)",
        "org.apache.commons.compress.archivers.Lister#listStream(Path,String[])",
        "org.apache.commons.compress.archivers.ArchiveStreamFactory.<staticinit>()",
        "org.apache.commons.compress.archivers.Lister#list7z(Path)",
        "org.apache.commons.compress.archivers.Lister#listZipUsingTarFile(Path)",
        "org.apache.commons.compress.archivers.Lister#println(String)"
    ],
    "org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream#createArchiveEntry(Path,String,LinkOption[]...)": ["org.apache.commons.compress.archivers.cpio.CpioArchiveEntry#CpioArchiveEntry(Path,String,LinkOption[]...)"],
    "org.apache.commons.compress.archivers.tar.TarFile#TarFile(File)": ["org.apache.commons.compress.archivers.tar.TarFile#TarFile(Path)"],
    "org.apache.commons.compress.compressors.CompressorStreamFactory.getLZ4Block()": ["org.apache.commons.compress.compressors.CompressorStreamFactory.<staticinit>()"],
    "org.apache.commons.compress.archivers.zip.UnrecognizedExtraField#getLocalFileDataLength()": ["org.apache.commons.compress.archivers.zip.ZipShort#ZipShort(int)"],
    "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream#closeArchiveEntry()": [
        "org.apache.commons.compress.archivers.zip.StreamCompressor#getBytesRead()",
        "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream#handleSizesAndCrc(long,long,Zip64Mode)",
        "org.apache.commons.compress.archivers.zip.Zip64Mode.<staticinit>()",
        "org.apache.commons.compress.archivers.zip.StreamCompressor#reset()",
        "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream#flushDeflater()",
        "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream#closeEntry(boolean,boolean)",
        "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream#getEffectiveZip64Mode(ZipArchiveEntry)",
        "org.apache.commons.compress.archivers.zip.StreamCompressor#getCrc32()",
        "org.apache.commons.compress.archivers.zip.StreamCompressor#getTotalBytesWritten()",
        "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream#preClose()"
    ],
    "org.apache.commons.compress.harmony.pack200.RunCodec#decodeInts(int,InputStream)": [
        "org.apache.commons.compress.harmony.pack200.PopulationCodec#decodeInts(int,InputStream)",
        "org.apache.commons.compress.harmony.pack200.BHSDCodec#decodeInts(int,InputStream)",
        "org.apache.commons.compress.harmony.pack200.Codec#decodeInts(int,InputStream)",
        "org.apache.commons.compress.harmony.pack200.RunCodec#decodeInts(int,InputStream)",
        "org.apache.commons.compress.harmony.pack200.RunCodec#normalise(int[],Codec)",
        "org.apache.commons.compress.harmony.pack200.Codec#check(int,InputStream)"
    ],
    "org.apache.commons.compress.archivers.tar.TarArchiveEntry#fillGNUSparse1xData(Map<String, String>)": [
        "org.apache.commons.compress.archivers.tar.TarGnuSparseKeys.<staticinit>()",
        "org.apache.commons.compress.utils.ParsingUtils.parseIntValue(String)"
    ],
    "org.apache.commons.compress.archivers.zip.AsiExtraField#getCentralDirectoryData()": ["org.apache.commons.compress.archivers.zip.AsiExtraField#getLocalFileDataData()"],
    "org.apache.commons.compress.compressors.lz4.BlockLZ4CompressorOutputStream#recordBackReference(BackReference)": [
        "org.apache.commons.compress.compressors.lz77support.LZ77Compressor.BackReference#getLength()",
        "org.apache.commons.compress.compressors.lz4.BlockLZ4CompressorOutputStream#expand(int,int)",
        "org.apache.commons.compress.compressors.lz77support.LZ77Compressor.BackReference#getOffset()"
    ],
    "org.apache.commons.compress.archivers.sevenz.SevenZFile#calculateStreamMap(Archive)": [
        "org.apache.commons.compress.archivers.sevenz.StreamMap#StreamMap(int[],long[],int[],int[])",
        "org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry#hasStream()"
    ],
    "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream#TarArchiveOutputStream(OutputStream,int,int,String)": [
        "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.<staticinit>()",
        "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream#TarArchiveOutputStream(OutputStream,int,String)"
    ],
    "org.apache.commons.compress.archivers.dump.DumpArchiveEntry#isSocket()": ["org.apache.commons.compress.archivers.dump.DumpArchiveEntry.TYPE.<staticinit>()"],
    "org.apache.commons.compress.harmony.pack200.CPNameAndType#getName()": ["org.apache.commons.compress.harmony.pack200.CPUTF8#getUnderlyingString()"],
    "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.<staticinit>()": [
        "org.apache.commons.compress.archivers.zip.ZipLong.getBytes(long)",
        "org.apache.commons.compress.archivers.zip.GeneralPurposeBit.<staticinit>()",
        "org.apache.commons.compress.archivers.zip.ZipLong#getBytes()",
        "org.apache.commons.compress.archivers.zip.ZipLong.<staticinit>()"
    ],
    "org.apache.commons.compress.harmony.unpack200.bytecode.CPInteger#writeBody(DataOutputStream)": ["org.apache.commons.compress.harmony.unpack200.bytecode.CPConstantNumber#getNumber()"],
    "org.apache.commons.compress.archivers.jar.JarArchiveOutputStream#JarArchiveOutputStream(OutputStream,String)": [
        "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream#setEncoding(String)",
        "org.apache.commons.compress.archivers.jar.JarArchiveOutputStream.<init>()",
        "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream#ZipArchiveOutputStream(OutputStream)"
    ],
    "org.apache.commons.compress.archivers.zip.ScatterZipOutputStream#writeTo(ZipArchiveOutputStream)": [
        "org.apache.commons.compress.archivers.zip.ScatterZipOutputStream.CompressedEntry#transferToArchiveEntry()",
        "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream#addRawArchiveEntry(ZipArchiveEntry,InputStream)",
        "org.apache.commons.compress.parallel.FileBasedScatterGatherBackingStore#closeForWriting()",
        "org.apache.commons.compress.utils.BoundedInputStream#BoundedInputStream(InputStream,long)",
        "org.apache.commons.compress.parallel.FileBasedScatterGatherBackingStore#getInputStream()"
    ],
    "org.apache.commons.compress.archivers.zip.X000A_NTFS#getCreateFileTime()": ["org.apache.commons.compress.archivers.zip.X000A_NTFS.zipToFileTime(ZipEightByteInteger)"],
    "org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream#readCString(int)": [
        "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream#read()",
        "org.apache.commons.compress.archivers.sevenz.AES256SHA256Decoder.AES256SHA256DecoderInputStream#read()",
        "org.apache.commons.compress.compressors.xz.XZCompressorInputStream#read()",
        "org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorInputStream#read()",
        "org.apache.commons.compress.compressors.lz77support.AbstractLZ77CompressorInputStream#read()",
        "org.apache.commons.compress.compressors.deflate.DeflateCompressorInputStream#read()",
        "org.apache.commons.compress.archivers.zip.ExplodingInputStream#read()",
        "org.apache.commons.compress.compressors.lzma.LZMACompressorInputStream#read()",
        "org.apache.commons.compress.compressors.zstandard.ZstdCompressorInputStream#read()",
        "org.apache.commons.compress.archivers.zip.NioZipEncoding#decode(byte[])",
        "org.apache.commons.compress.archivers.sevenz.BoundedSeekableByteChannelInputStream#read()",
        "org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream#readRange(int)",
        "org.apache.commons.compress.utils.BoundedArchiveInputStream#read()",
        "org.apache.commons.compress.compressors.brotli.BrotliCompressorInputStream#read()",
        "org.apache.commons.compress.archivers.tar.TarArchiveSparseZeroInputStream#read()",
        "org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream#read()",
        "org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStream#read()",
        "org.apache.commons.compress.compressors.deflate64.Deflate64CompressorInputStream#read()",
        "org.apache.commons.compress.compressors.lzw.LZWInputStream#read()",
        "org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream#read()",
        "org.apache.commons.compress.archivers.tar.TarUtils$ZipEncoding$1#decode(byte[])"
    ],
    "org.apache.commons.compress.harmony.pack200.NewAttributeBands.Call#setCallable(Callable)": ["org.apache.commons.compress.harmony.pack200.NewAttributeBands.Callable#setBackwardsCallable()"],
    "org.apache.commons.compress.harmony.unpack200.bytecode.InnerClassesAttribute#equals(Object)": [
        "org.apache.commons.compress.harmony.unpack200.bytecode.Attribute#getAttributeName()",
        "org.apache.commons.compress.harmony.unpack200.bytecode.CPUTF8#equals(Object)",
        "org.apache.commons.compress.harmony.unpack200.bytecode.Attribute#equals(Object)"
    ],
    "org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream#read(byte[],int,int)": [
        "org.apache.commons.compress.archivers.cpio.CpioArchiveEntry#getSize()",
        "org.apache.commons.compress.archivers.cpio.CpioArchiveEntry#getDataPadCount()",
        "org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream#readFully(byte[],int,int)",
        "org.apache.commons.compress.archivers.cpio.CpioConstants.<staticinit>()",
        "org.apache.commons.compress.archivers.cpio.CpioArchiveEntry#getFormat()",
        "org.apache.commons.compress.archivers.dump.DumpArchiveInputStream#getBytesRead()",
        "org.apache.commons.compress.archivers.cpio.CpioArchiveEntry#getChksum()",
        "org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream#ensureOpen()",
        "org.apache.commons.compress.archivers.ArchiveInputStream#getBytesRead()",
        "org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream#skip(int)"
    ],
    "org.apache.commons.compress.archivers.dump.DumpArchiveEntry#getSize()": [
        "org.apache.commons.compress.archivers.dump.DumpArchiveEntry#isDirectory()",
        "org.apache.commons.compress.archivers.ArchiveEntry.<staticinit>()"
    ],
    "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream#readStored(byte[],int,int)": [
        "org.apache.commons.compress.archivers.ArchiveInputStream#count(int)",
        "org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream#read(byte[])",
        "org.apache.commons.compress.archivers.zip.ZipArchiveEntry#getSize()",
        "org.apache.commons.compress.compressors.brotli.BrotliCompressorInputStream#read(byte[])",
        "org.apache.commons.compress.archivers.sevenz.BoundedSeekableByteChannelInputStream#read(int)",
        "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream#readStoredEntry()",
        "org.apache.commons.compress.compressors.zstandard.ZstdCompressorInputStream#read(byte[])"
    ],
    "org.apache.commons.compress.archivers.dump.DumpArchiveEntry#DumpArchiveEntry()": ["org.apache.commons.compress.archivers.dump.DumpArchiveEntry.<init>()"],
    "org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream#Pack200CompressorInputStream(File)": [
        "org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream#Pack200CompressorInputStream(File,Pack200Strategy)",
        "org.apache.commons.compress.compressors.pack200.Pack200Strategy.<staticinit>()"
    ],
    "org.apache.commons.compress.harmony.unpack200.bytecode.ClassFileEntry#write(DataOutputStream)": [
        "org.apache.commons.compress.harmony.unpack200.bytecode.InnerClassesAttribute#doWrite(DataOutputStream)",
        "org.apache.commons.compress.harmony.unpack200.bytecode.Attribute#doWrite(DataOutputStream)",
        "org.apache.commons.compress.harmony.unpack200.bytecode.ByteCode#doWrite(DataOutputStream)",
        "org.apache.commons.compress.harmony.unpack200.bytecode.ConstantPoolEntry#doWrite(DataOutputStream)",
        "org.apache.commons.compress.harmony.unpack200.bytecode.CPMember#doWrite(DataOutputStream)"
    ],
    "org.apache.commons.compress.harmony.pack200.NewAttributeBands.UnionCase#pack(OutputStream)": [
        "org.apache.commons.compress.harmony.pack200.NewAttributeBands.Union#pack(OutputStream)",
        "org.apache.commons.compress.harmony.pack200.NewAttributeBands.Callable#pack(OutputStream)",
        "org.apache.commons.compress.harmony.pack200.NewAttributeBands.Call#pack(OutputStream)",
        "org.apache.commons.compress.harmony.pack200.NewAttributeBands.UnionCase#pack(OutputStream)",
        "org.apache.commons.compress.harmony.pack200.NewAttributeBands.Reference#pack(OutputStream)",
        "org.apache.commons.compress.harmony.pack200.NewAttributeBands.Integral#pack(OutputStream)",
        "org.apache.commons.compress.harmony.pack200.NewAttributeBands.Replication#pack(OutputStream)"
    ],
    "org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField#getCentralDirectoryData()": ["org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField#assembleData()"],
    "org.apache.commons.compress.compressors.snappy.SnappyCompressorOutputStream#writeLiteralBlockOneSizeByte(LiteralBlock,int)": [
        "org.apache.commons.compress.compressors.snappy.SnappyCompressorOutputStream#writeLiteralBlockWithSize(int,int,int,LiteralBlock)",
        "org.apache.commons.compress.compressors.snappy.SnappyCompressorOutputStream.<staticinit>()"
    ],
    "org.apache.commons.compress.harmony.pack200.BcBands#visitIincInsn(int,int)": [
        "org.apache.commons.compress.harmony.pack200.BcBands.<staticinit>()",
        "org.apache.commons.compress.harmony.pack200.BcBands#updateRenumbering()",
        "org.apache.commons.compress.harmony.pack200.IntList#add(int)"
    ],
    "org.apache.commons.compress.compressors.deflate64.HuffmanDecoder.readBits(BitInputStream,int)": ["org.apache.commons.compress.utils.BitInputStream#readBits(int)"],
    "org.apache.commons.compress.compressors.xz.XZUtils.getCompressedFilename(String)": [
        "org.apache.commons.compress.compressors.FileNameUtil#getCompressedFileName(String)",
        "org.apache.commons.compress.compressors.xz.XZUtils.<staticinit>()"
    ],
    "org.apache.commons.compress.archivers.tar.TarUtils.parsePAX01SparseHeaders(String)": ["org.apache.commons.compress.archivers.tar.TarUtils.parseFromPAX01SparseHeaders(String)"],
    "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile#writeFileCTimes(DataOutput)": [
        "org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry#getHasCreationDate()",
        "org.apache.commons.compress.archivers.sevenz.NID.<staticinit>()",
        "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile#writeUint64(DataOutput,long)",
        "org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry#getCreationTime()",
        "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile#writeBits(DataOutput,BitSet,int)"
    ],
    "org.apache.commons.compress.compressors.deflate64.Deflate64CompressorInputStream#close()": [
        "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream#close()",
        "org.apache.commons.compress.archivers.sevenz.BoundedSeekableByteChannelInputStream#close()",
        "org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStream#close()",
        "org.apache.commons.compress.compressors.brotli.BrotliCompressorInputStream#close()",
        "org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream#close()",
        "org.apache.commons.compress.compressors.deflate64.Deflate64CompressorInputStream#close()",
        "org.apache.commons.compress.compressors.deflate.DeflateCompressorInputStream#close()",
        "org.apache.commons.compress.archivers.sevenz.AES256SHA256Decoder.AES256SHA256DecoderInputStream#close()",
        "org.apache.commons.compress.compressors.xz.XZCompressorInputStream#close()",
        "org.apache.commons.compress.compressors.deflate64.Deflate64CompressorInputStream#closeDecoder()",
        "org.apache.commons.compress.archivers.zip.ExplodingInputStream#close()",
        "org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream#close()",
        "org.apache.commons.compress.compressors.lzw.LZWInputStream#close()",
        "org.apache.commons.compress.compressors.lzma.LZMACompressorInputStream#close()",
        "org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorInputStream#close()",
        "org.apache.commons.compress.compressors.zstandard.ZstdCompressorInputStream#close()",
        "org.apache.commons.compress.compressors.lz77support.AbstractLZ77CompressorInputStream#close()"
    ],
    "org.apache.commons.compress.harmony.pack200.ClassBands#ClassBands(Segment,int,int,boolean)": [
        "org.apache.commons.compress.harmony.pack200.ClassBands.<staticinit>()",
        "org.apache.commons.compress.harmony.pack200.BandSet#BandSet(int,SegmentHeader)",
        "org.apache.commons.compress.harmony.pack200.Segment#getCpBands()",
        "org.apache.commons.compress.harmony.pack200.Segment#getSegmentHeader()",
        "org.apache.commons.compress.harmony.pack200.Segment#getAttrBands()",
        "org.apache.commons.compress.harmony.pack200.ClassBands#createNewAttributeBands()",
        "org.apache.commons.compress.harmony.pack200.MetadataBandGroup#MetadataBandGroup(String,int,CpBands,SegmentHeader,int)",
        "org.apache.commons.compress.harmony.pack200.MetadataBandGroup.<staticinit>()",
        "org.apache.commons.compress.harmony.pack200.ClassBands.<init>()"
    ],
    "org.apache.commons.compress.utils.ChecksumVerifyingInputStream#read()": ["org.apache.commons.compress.utils.ChecksumVerifyingInputStream#verify()"],
    "org.apache.commons.compress.harmony.pack200.NewAttributeBands.Replication#Replication(String,String)": [
        "org.apache.commons.compress.harmony.pack200.NewAttributeBands.Integral#Integral(String)",
        "org.apache.commons.compress.harmony.pack200.NewAttributeBands#readNextLayoutElement(StringReader)",
        "org.apache.commons.compress.harmony.pack200.NewAttributeBands.Replication.<init>()",
        "org.apache.commons.compress.harmony.pack200.NewAttributeBands.LayoutElement.<init>()"
    ],
    "org.apache.commons.compress.harmony.pack200.NewAttributeBands#resolveCallsForElement(int,Callable,LayoutElement)": [
        "org.apache.commons.compress.harmony.pack200.NewAttributeBands#resolveCallsForElement(int,Callable,LayoutElement)",
        "org.apache.commons.compress.harmony.pack200.NewAttributeBands.Call#setCallable(Callable)"
    ],
    "org.apache.commons.compress.harmony.unpack200.SegmentUtils.countArgs(String)": ["org.apache.commons.compress.harmony.unpack200.SegmentUtils.countArgs(String,int)"],
    "org.apache.commons.compress.changes.ChangeSet#add(E extends ArchiveEntry,InputStream,boolean)": [
        "org.apache.commons.compress.changes.Change#Change(E extends ArchiveEntry,InputStream,boolean)",
        "org.apache.commons.compress.changes.ChangeSet#addAddition(Change<E extends ArchiveEntry>)"
    ],
    "org.apache.commons.compress.archivers.zip.ZipArchiveEntry#parseExtraFields(byte[],boolean,ExtraFieldParsingBehavior)$ExtraFieldParsingBehavior$1#fill(ZipExtraField,byte[],int,int,boolean)": [
        "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.ExtraFieldParsingMode$ExtraFieldParsingMode$1#fill(ZipExtraField,byte[],int,int,boolean)",
        "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.ExtraFieldParsingMode#fill(ZipExtraField,byte[],int,int,boolean)",
        "org.apache.commons.compress.archivers.zip.ZipArchiveEntry#parseExtraFields(byte[],boolean,ExtraFieldParsingBehavior)$ExtraFieldParsingBehavior$1#fill(ZipExtraField,byte[],int,int,boolean)",
        "org.apache.commons.compress.archivers.zip.ExtraFieldUtils.parse(byte[],boolean,UnparseableExtraField)$ExtraFieldParsingBehavior$1#fill(ZipExtraField,byte[],int,int,boolean)"
    ],
    "org.apache.commons.compress.harmony.pack200.NewAttributeBands.Integral#addAttributeToBand(NewAttribute,InputStream)": [
        "org.apache.commons.compress.harmony.pack200.NewAttributeBands#readInteger(int,InputStream)",
        "org.apache.commons.compress.harmony.pack200.NewAttribute#getLabel(int)",
        "org.apache.commons.compress.harmony.pack200.NewAttributeBands.LayoutElement#getLength(char)"
    ],
    "org.apache.commons.compress.harmony.pack200.CPSignature#compareTo(Object)": ["org.apache.commons.compress.harmony.pack200.CPClass#compareTo(CPClass)"],
    "org.apache.commons.compress.harmony.pack200.ClassBands#pack(OutputStream)": [
        "org.apache.commons.compress.harmony.pack200.BandSet#encodeBandInt(String,int[],BHSDCodec)",
        "org.apache.commons.compress.harmony.pack200.Codec.<staticinit>()",
        "org.apache.commons.compress.harmony.pack200.ClassBands#writeCodeBands(OutputStream)",
        "org.apache.commons.compress.harmony.pack200.ClassBands#writeClassAttributeBands(OutputStream)",
        "org.apache.commons.compress.harmony.pack200.ClassBands#getInts(CPClass[])",
        "org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream#write(byte[])",
        "org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream#write(byte[])",
        "org.apache.commons.compress.archivers.sevenz.Coders.DeflateDecoder.DeflateDecoderOutputStream#write(byte[])",
        "org.apache.commons.compress.harmony.pack200.ClassBands#sum(int[])",
        "org.apache.commons.compress.harmony.pack200.PackingUtils.log(String)",
        "org.apache.commons.compress.harmony.pack200.ClassBands#writeFieldAttributeBands(OutputStream)",
        "org.apache.commons.compress.harmony.pack200.ConstantPoolEntry#getIndex()",
        "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.OutputStreamWrapper#write(byte[])",
        "org.apache.commons.compress.archivers.zip.ZipSplitOutputStream#write(byte[])",
        "org.apache.commons.compress.harmony.pack200.ClassBands#writeMethodAttributeBands(OutputStream)"
    ],
    "org.apache.commons.compress.harmony.unpack200.IcBands#getRelevantIcTuples(String,ClassConstantPool)": [
        "org.apache.commons.compress.harmony.unpack200.IcTuple#outerIsAnonymous()",
        "org.apache.commons.compress.harmony.unpack200.bytecode.ClassConstantPool#entries()",
        "org.apache.commons.compress.harmony.unpack200.IcTuple#outerClassString()",
        "org.apache.commons.compress.harmony.unpack200.IcTuple#getTupleIndex()",
        "org.apache.commons.compress.harmony.unpack200.IcTuple.<staticinit>()"
    ],
    "org.apache.commons.compress.archivers.tar.TarFile#readRecord()": [
        "org.apache.commons.compress.utils.MultiReadOnlySeekableByteChannel#read(ByteBuffer)",
        "org.apache.commons.compress.utils.SeekableInMemoryByteChannel#read(ByteBuffer)"
    ],
    "org.apache.commons.compress.compressors.CompressorStreamFactory#createCompressorInputStream(String,InputStream,boolean)": [
        "org.apache.commons.compress.compressors.CompressorStreamFactory.<staticinit>()",
        "org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorInputStream#FramedLZ4CompressorInputStream(InputStream,boolean)",
        "org.apache.commons.compress.compressors.snappy.SnappyCompressorInputStream#SnappyCompressorInputStream(InputStream)",
        "org.apache.commons.compress.compressors.xz.XZUtils.isXZCompressionAvailable()",
        "org.apache.commons.compress.compressors.lz4.BlockLZ4CompressorInputStream#BlockLZ4CompressorInputStream(InputStream)",
        "org.apache.commons.compress.compressors.xz.XZCompressorInputStream#XZCompressorInputStream(InputStream,boolean,int)",
        "org.apache.commons.compress.compressors.z.ZCompressorInputStream#ZCompressorInputStream(InputStream,int)",
        "org.apache.commons.compress.compressors.brotli.BrotliCompressorInputStream#BrotliCompressorInputStream(InputStream)",
        "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream#BZip2CompressorInputStream(InputStream,boolean)",
        "org.apache.commons.compress.compressors.zstandard.ZstdCompressorInputStream#ZstdCompressorInputStream(InputStream)",
        "org.apache.commons.compress.compressors.lzma.LZMAUtils.isLZMACompressionAvailable()",
        "org.apache.commons.compress.compressors.CompressorStreamFactory.toKey(String)",
        "org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream#GzipCompressorInputStream(InputStream,boolean)",
        "org.apache.commons.compress.compressors.deflate64.Deflate64CompressorInputStream#Deflate64CompressorInputStream(InputStream)",
        "org.apache.commons.compress.compressors.lzma.LZMACompressorInputStream#LZMACompressorInputStream(InputStream,int)",
        "org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStream#FramedSnappyCompressorInputStream(InputStream)",
        "org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream#Pack200CompressorInputStream(InputStream)",
        "org.apache.commons.compress.compressors.brotli.BrotliUtils.isBrotliCompressionAvailable()",
        "org.apache.commons.compress.compressors.CompressorException#CompressorException(String,Throwable)",
        "org.apache.commons.compress.compressors.CompressorStreamFactory#getCompressorInputStreamProviders()",
        "org.apache.commons.compress.compressors.deflate.DeflateCompressorInputStream#DeflateCompressorInputStream(InputStream)",
        "org.apache.commons.compress.compressors.zstandard.ZstdUtils.isZstdCompressionAvailable()",
        "org.apache.commons.compress.compressors.CompressorException#CompressorException(String)",
        "org.apache.commons.compress.compressors.CompressorStreamFactory#createCompressorInputStream(String,InputStream,boolean)"
    ],
    "org.apache.commons.compress.harmony.unpack200.bytecode.EnclosingMethodAttribute#resolve(ClassConstantPool)": [
        "org.apache.commons.compress.harmony.unpack200.bytecode.Attribute#resolve(ClassConstantPool)",
        "org.apache.commons.compress.harmony.unpack200.bytecode.ClassConstantPool#indexOf(ClassFileEntry)",
        "org.apache.commons.compress.harmony.unpack200.bytecode.CPClass#resolve(ClassConstantPool)",
        "org.apache.commons.compress.harmony.unpack200.bytecode.CPNameAndType#resolve(ClassConstantPool)"
    ],
    "org.apache.commons.compress.archivers.zip.X7875_NewUnix#getHeaderId()": ["org.apache.commons.compress.archivers.zip.X7875_NewUnix.<staticinit>()"],
    "org.apache.commons.compress.harmony.unpack200.bytecode.forms.NarrowClassRefForm#NarrowClassRefForm(int,String,int[])": [
        "org.apache.commons.compress.harmony.unpack200.bytecode.forms.NarrowClassRefForm.<init>()",
        "org.apache.commons.compress.harmony.unpack200.bytecode.forms.ClassRefForm#ClassRefForm(int,String,int[])"
    ],
    "org.apache.commons.compress.archivers.zip.ZipMethod#ZipMethod()": [
        "org.apache.commons.compress.archivers.zip.ZipMethod.<staticinit>()",
        "org.apache.commons.compress.archivers.zip.ZipMethod#ZipMethod(int)"
    ],
    "org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream#writeCString(byte[])": [
        "org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream#write(byte[])",
        "org.apache.commons.compress.archivers.sevenz.Coders.DeflateDecoder.DeflateDecoderOutputStream#write(byte[])",
        "org.apache.commons.compress.archivers.ArchiveOutputStream#count(int)",
        "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.OutputStreamWrapper#write(byte[])",
        "org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream#write(byte[])",
        "org.apache.commons.compress.archivers.zip.ZipSplitOutputStream#write(byte[])"
    ],
    "org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStream#readOneByte()": ["org.apache.commons.compress.compressors.CompressorInputStream#count(int)"],
    "org.apache.commons.compress.compressors.pack200.Pack200Utils.normalize(File,File)": ["org.apache.commons.compress.compressors.pack200.Pack200Utils.normalize(File,File,Map<String, String>)"],
    "org.apache.commons.compress.harmony.pack200.Segment.ArrayVisitor#ArrayVisitor(List<Integer>,List<String>,List<String>,List<Object>)": [
        "org.apache.commons.compress.harmony.pack200.Segment.ArrayVisitor.<init>()",
        "org.apache.commons.compress.harmony.pack200.Segment.<staticinit>()"
    ],
    "org.apache.commons.compress.archivers.tar.TarArchiveInputStream#isEOFRecord(byte[])": [
        "org.apache.commons.compress.utils.ArchiveUtils.isArrayZero(byte[],int)",
        "org.apache.commons.compress.archivers.tar.TarArchiveInputStream#getRecordSize()"
    ],
    "org.apache.commons.compress.harmony.pack200.CPNameAndType#getNameIndex()": ["org.apache.commons.compress.harmony.pack200.ConstantPoolEntry#getIndex()"],
    "org.apache.commons.compress.harmony.unpack200.IcTuple#equals(Object)": ["org.apache.commons.compress.harmony.unpack200.IcTuple#nullSafeEquals(String,String)"],
    "org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp#getHeaderId()": ["org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp.<staticinit>()"],
    "org.apache.commons.compress.archivers.zip.ZipSplitReadOnlySeekableByteChannel.forFiles(File[]...)": ["org.apache.commons.compress.archivers.zip.ZipSplitReadOnlySeekableByteChannel.<staticinit>()"],
    "org.apache.commons.compress.harmony.pack200.NewAttributeBands#readNextAttributeElement(StringReader)": [
        "org.apache.commons.compress.harmony.pack200.NewAttributeBands.Callable#Callable(List<LayoutElement>)",
        "org.apache.commons.compress.harmony.pack200.NewAttributeBands#getStreamUpToMatchingBracket(StringReader)",
        "org.apache.commons.compress.harmony.pack200.NewAttributeBands#readBody(StringReader)",
        "org.apache.commons.compress.harmony.pack200.NewAttributeBands#readNextLayoutElement(StringReader)"
    ],
    "org.apache.commons.compress.archivers.zip.ZipFile#ZipFile(SeekableByteChannel,String)": ["org.apache.commons.compress.archivers.zip.ZipFile#ZipFile(SeekableByteChannel,String,String,boolean)"],
    "org.apache.commons.compress.archivers.sevenz.LZMA2Decoder#encode(OutputStream,Object)": ["org.apache.commons.compress.archivers.sevenz.LZMA2Decoder#getOptions(Object)"],
    "org.apache.commons.compress.harmony.unpack200.CpBands#cpStringValue(int)": [
        "org.apache.commons.compress.harmony.unpack200.bytecode.CPString#CPString(CPUTF8,int)",
        "org.apache.commons.compress.harmony.unpack200.CpBands#cpUTF8Value(int)"
    ],
    "org.apache.commons.compress.harmony.unpack200.bytecode.CPNameAndType#hashCode()": ["org.apache.commons.compress.harmony.unpack200.bytecode.CPNameAndType#generateHashCode()"],
    "org.apache.commons.compress.compressors.gzip.GzipUtils#GzipUtils()": ["org.apache.commons.compress.compressors.gzip.GzipUtils.<init>()"],
    "org.apache.commons.compress.archivers.zip.ZipArchiveEntry#addAsFirstExtraField(ZipExtraField)": [
        "org.apache.commons.compress.archivers.zip.X7875_NewUnix#getHeaderId()",
        "org.apache.commons.compress.archivers.zip.JarMarker#getHeaderId()",
        "org.apache.commons.compress.archivers.zip.PKWareExtraHeader#getHeaderId()",
        "org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField#getHeaderId()",
        "org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp#getHeaderId()",
        "org.apache.commons.compress.archivers.zip.ZipArchiveEntry#internalRemoveExtraField(ZipShort)",
        "org.apache.commons.compress.archivers.zip.X000A_NTFS#getHeaderId()",
        "org.apache.commons.compress.archivers.zip.UnparseableExtraFieldData#getHeaderId()",
        "org.apache.commons.compress.archivers.zip.ZipArchiveEntry#setExtra()",
        "org.apache.commons.compress.archivers.zip.ResourceAlignmentExtraField#getHeaderId()",
        "org.apache.commons.compress.archivers.zip.AsiExtraField#getHeaderId()",
        "org.apache.commons.compress.archivers.zip.ZipArchiveEntry#getExtraField(ZipShort)",
        "org.apache.commons.compress.archivers.zip.UnicodePathExtraField#getHeaderId()",
        "org.apache.commons.compress.archivers.zip.UnicodeCommentExtraField#getHeaderId()",
        "org.apache.commons.compress.archivers.zip.UnrecognizedExtraField#getHeaderId()"
    ],
    "org.apache.commons.compress.compressors.lzw.LZWInputStream#resetCodeSize()": [
        "org.apache.commons.compress.compressors.lzw.LZWInputStream#setCodeSize(int)",
        "org.apache.commons.compress.compressors.lzw.LZWInputStream.<staticinit>()"
    ],
    "org.apache.commons.compress.changes.Change#Change(String,ChangeType)": ["org.apache.commons.compress.changes.Change.<init>()"],
    "org.apache.commons.compress.harmony.archive.internal.nls.Messages.getString(String,Object[])": [
        "org.apache.commons.compress.harmony.archive.internal.nls.Messages.format(String,Object[])",
        "org.apache.commons.compress.harmony.archive.internal.nls.Messages.<staticinit>()"
    ],
    "org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry#setAccessDate(Date)": ["org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry#setAccessTime(FileTime)"],
    "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream#sendMTFValues()": [
        "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.<staticinit>()",
        "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream#sendMTFValues5(int,int)",
        "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream#sendMTFValues1(int,int)",
        "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream#sendMTFValues3(int,int)",
        "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream#sendMTFValues0(int,int)",
        "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream#sendMTFValues6(int,int)",
        "org.apache.commons.compress.compressors.bzip2.BZip2Constants.<staticinit>()",
        "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream#sendMTFValues4()",
        "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream#sendMTFValues7()",
        "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream#sendMTFValues2(int,int)"
    ],
    "org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream#writeHeader(CpioArchiveEntry)": [
        "org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream#writeBinaryLong(long,int,boolean)",
        "org.apache.commons.compress.archivers.cpio.CpioArchiveEntry#getFormat()",
        "org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream#writeNewEntry(CpioArchiveEntry)",
        "org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream#write(byte[])",
        "org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream#write(byte[])",
        "org.apache.commons.compress.archivers.sevenz.Coders.DeflateDecoder.DeflateDecoderOutputStream#write(byte[])",
        "org.apache.commons.compress.archivers.ArchiveOutputStream#count(int)",
        "org.apache.commons.compress.utils.ArchiveUtils.toAsciiBytes(String)",
        "org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream#writeOldBinaryEntry(CpioArchiveEntry,boolean)",
        "org.apache.commons.compress.archivers.cpio.CpioConstants.<staticinit>()",
        "org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream#writeOldAsciiEntry(CpioArchiveEntry)",
        "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.OutputStreamWrapper#write(byte[])",
        "org.apache.commons.compress.archivers.zip.ZipSplitOutputStream#write(byte[])"
    ],
    "org.apache.commons.compress.harmony.unpack200.NewAttributeBands.Callable#readBands(InputStream,int)": [
        "org.apache.commons.compress.harmony.unpack200.NewAttributeBands.Union#readBands(InputStream,int)",
        "org.apache.commons.compress.harmony.unpack200.NewAttributeBands.Reference#readBands(InputStream,int)",
        "org.apache.commons.compress.harmony.unpack200.NewAttributeBands.Callable#readBands(InputStream,int)",
        "org.apache.commons.compress.harmony.unpack200.NewAttributeBands.UnionCase#readBands(InputStream,int)",
        "org.apache.commons.compress.harmony.unpack200.NewAttributeBands.Integral#readBands(InputStream,int)",
        "org.apache.commons.compress.harmony.unpack200.NewAttributeBands.Call#readBands(InputStream,int)",
        "org.apache.commons.compress.harmony.unpack200.NewAttributeBands.Replication#readBands(InputStream,int)"
    ],
    "org.apache.commons.compress.compressors.deflate64.HuffmanDecoder.BinaryTreeNode#BinaryTreeNode(int)": ["org.apache.commons.compress.compressors.deflate64.HuffmanDecoder.BinaryTreeNode.<init>()"],
    "org.apache.commons.compress.harmony.unpack200.bytecode.forms.ClassRefForm#setNestedEntries(ByteCode,OperandManager,int)": [
        "org.apache.commons.compress.harmony.unpack200.bytecode.OperandManager#globalConstantPool()",
        "org.apache.commons.compress.harmony.unpack200.bytecode.OperandManager#getCurrentClass()",
        "org.apache.commons.compress.harmony.unpack200.bytecode.ByteCode#setNestedPositions(int[][])",
        "org.apache.commons.compress.harmony.unpack200.bytecode.forms.ReferenceForm#setNestedEntries(ByteCode,OperandManager,int)",
        "org.apache.commons.compress.harmony.unpack200.bytecode.ByteCode#setNested(ClassFileEntry[])",
        "org.apache.commons.compress.harmony.unpack200.SegmentConstantPool#getClassPoolEntry(String)"
    ],
    "org.apache.commons.compress.archivers.dump.DumpArchiveEntry#isDirectory()": ["org.apache.commons.compress.archivers.dump.DumpArchiveEntry.TYPE.<staticinit>()"],
    "org.apache.commons.compress.harmony.pack200.IcBands.IcTuple#IcTuple(CPClass,int,CPClass,CPUTF8)": ["org.apache.commons.compress.harmony.pack200.IcBands.IcTuple.<init>()"],
    "org.apache.commons.compress.archivers.dump.DumpArchiveConstants.COMPRESSION_TYPE#COMPRESSION_TYPE(int)": ["org.apache.commons.compress.archivers.dump.DumpArchiveConstants.COMPRESSION_TYPE.<init>()"],
    "org.apache.commons.compress.harmony.unpack200.bytecode.CPInterfaceMethodRef#hashCode()": ["org.apache.commons.compress.harmony.unpack200.bytecode.CPInterfaceMethodRef#generateHashCode()"],
    "org.apache.commons.compress.harmony.pack200.NewAttributeBands.Union#renumberBci(IntList,Map<Label, Integer>)": [
        "org.apache.commons.compress.harmony.pack200.NewAttributeBands.UnionCase#renumberBci(IntList,Map<Label, Integer>)",
        "org.apache.commons.compress.harmony.pack200.NewAttributeBands.Replication#renumberBci(IntList,Map<Label, Integer>)",
        "org.apache.commons.compress.harmony.pack200.NewAttributeBands.Call#renumberBci(IntList,Map<Label, Integer>)",
        "org.apache.commons.compress.harmony.pack200.NewAttributeBands.Callable#renumberBci(IntList,Map<Label, Integer>)",
        "org.apache.commons.compress.harmony.pack200.NewAttributeBands.Integral#renumberBci(IntList,Map<Label, Integer>)",
        "org.apache.commons.compress.harmony.pack200.NewAttributeBands.Union#renumberBci(IntList,Map<Label, Integer>)",
        "org.apache.commons.compress.harmony.pack200.NewAttributeBands.Reference#renumberBci(IntList,Map<Label, Integer>)"
    ],
    "org.apache.commons.compress.archivers.ArchiveStreamFactory#ArchiveStreamFactory(String)": ["org.apache.commons.compress.archivers.ArchiveStreamFactory.<init>()"],
    "org.apache.commons.compress.compressors.lz4.BlockLZ4CompressorOutputStream#prefill(byte[],int,int)": [
        "org.apache.commons.compress.compressors.lz77support.LZ77Compressor#prefill(byte[])",
        "org.apache.commons.compress.compressors.lz4.BlockLZ4CompressorOutputStream#recordLiteral(byte[])"
    ],
    "org.apache.commons.compress.compressors.deflate64.Deflate64CompressorInputStream#Deflate64CompressorInputStream(InputStream)": [
        "org.apache.commons.compress.compressors.deflate64.Deflate64CompressorInputStream#Deflate64CompressorInputStream(HuffmanDecoder)",
        "org.apache.commons.compress.compressors.deflate64.HuffmanDecoder#HuffmanDecoder(InputStream)"
    ],
    "org.apache.commons.compress.harmony.unpack200.Pack200UnpackerAdapter.newBoundedInputStream(File)": ["org.apache.commons.compress.harmony.unpack200.Pack200UnpackerAdapter.newBoundedInputStream(URL)"],
    "org.apache.commons.compress.archivers.sevenz.SevenZFile#sanityCheckFilesInfo(ByteBuffer,ArchiveStatistics)": [
        "org.apache.commons.compress.archivers.sevenz.SevenZFile.getChar(ByteBuffer)",
        "org.apache.commons.compress.archivers.sevenz.SevenZFile.getUnsignedByte(ByteBuffer)",
        "org.apache.commons.compress.archivers.sevenz.SevenZFile#readBits(ByteBuffer,int)",
        "org.apache.commons.compress.archivers.sevenz.SevenZFile#readAllOrBits(ByteBuffer,int)",
        "org.apache.commons.compress.archivers.sevenz.NID.<staticinit>()",
        "org.apache.commons.compress.archivers.sevenz.SevenZFile.skipBytesFully(ByteBuffer,long)",
        "org.apache.commons.compress.archivers.sevenz.SevenZFile.readUint64(ByteBuffer)",
        "org.apache.commons.compress.archivers.sevenz.SevenZFile.assertFitsIntoNonNegativeInt(String,long)"
    ],
    "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream#pushback(byte[],int,int)": ["org.apache.commons.compress.archivers.ArchiveInputStream#pushedBackBytes(long)"],
    "org.apache.commons.compress.harmony.unpack200.bytecode.CPInteger#toString()": ["org.apache.commons.compress.harmony.unpack200.bytecode.CPConstant#getValue()"],
    "org.apache.commons.compress.compressors.xz.XZUtils.getCachedXZAvailability()": ["org.apache.commons.compress.compressors.xz.XZUtils.<staticinit>()"],
    "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream#readRange(int)": [
        "org.apache.commons.compress.utils.IOUtils.readRange(InputStream,int)",
        "org.apache.commons.compress.archivers.ArchiveInputStream#count(int)"
    ],
    "org.apache.commons.compress.harmony.unpack200.bytecode.forms.LabelForm#LabelForm(int,String,int[])": [
        "org.apache.commons.compress.harmony.unpack200.bytecode.forms.LabelForm.<init>()",
        "org.apache.commons.compress.harmony.unpack200.bytecode.forms.ByteCodeForm#ByteCodeForm(int,String,int[])"
    ],
    "org.apache.commons.compress.archivers.dump.DumpArchiveUtil.convert16(byte[],int)": ["org.apache.commons.compress.utils.ByteUtils.fromLittleEndian(byte[],int,int)"],
    "org.apache.commons.compress.harmony.unpack200.bytecode.forms.ClassRefForm#ClassRefForm(int,String,int[])": [
        "org.apache.commons.compress.harmony.unpack200.bytecode.forms.ClassRefForm.<init>()",
        "org.apache.commons.compress.harmony.unpack200.bytecode.forms.ReferenceForm#ReferenceForm(int,String,int[])"
    ],
    "org.apache.commons.compress.archivers.ArchiveStreamFactory.<staticinit>()": ["org.apache.commons.compress.archivers.ArchiveStreamFactory#ArchiveStreamFactory()"],
    "org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp.dateToZipLong(Date)": ["org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp.unixTimeToZipLong(long)"],
    "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream#closeEntry()": [
        "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream#pushback(byte[],int,int)",
        "org.apache.commons.compress.archivers.zip.ZipArchiveEntry#getMethod()",
        "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream#currentEntryHasOutstandingBytes()",
        "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.<staticinit>()",
        "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream#getBytesInflated()",
        "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream#skip(long)",
        "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream#readDataDescriptor()",
        "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream#drainCurrentEntryData()"
    ],
    "org.apache.commons.compress.utils.BoundedArchiveInputStream#BoundedArchiveInputStream(long,long)": ["org.apache.commons.compress.utils.BoundedArchiveInputStream.<init>()"],
    "org.apache.commons.compress.archivers.dump.DumpArchiveInputStream.<init>()": ["org.apache.commons.compress.archivers.dump.DumpArchiveConstants.<staticinit>()"],
    "org.apache.commons.compress.changes.ChangeSetPerformer#perform(I extends ArchiveInputStream,O extends ArchiveOutputStream)": ["org.apache.commons.compress.changes.ChangeSetPerformer#perform(ArchiveEntryIterator<E extends ArchiveEntry>,O extends ArchiveOutputStream)"],
    "org.apache.commons.compress.archivers.sevenz.AES256Options#AES256Options(char[],byte[],byte[],int)": [
        "org.apache.commons.compress.archivers.sevenz.AES256Options.<init>()",
        "org.apache.commons.compress.archivers.sevenz.AES256SHA256Decoder.sha256Password(char[],int,byte[])",
        "org.apache.commons.compress.archivers.sevenz.AES256Options.<staticinit>()",
        "org.apache.commons.compress.archivers.sevenz.AES256Options.newSecretKeySpec(byte[])"
    ],
    "org.apache.commons.compress.utils.CountingInputStream#CountingInputStream(InputStream)": ["org.apache.commons.compress.utils.CountingInputStream.<init>()"],
    "org.apache.commons.compress.archivers.ArchiveStreamFactory.findAvailableArchiveInputStreamProviders()": [
        "org.apache.commons.compress.archivers.ArchiveStreamFactory.putAll(Set<String>,ArchiveStreamProvider,TreeMap<String, ArchiveStreamProvider>)",
        "org.apache.commons.compress.archivers.ArchiveStreamFactory.archiveStreamProviderIterable()",
        "org.apache.commons.compress.archivers.ArchiveStreamFactory.<staticinit>()",
        "org.apache.commons.compress.archivers.ArchiveStreamFactory#getInputStreamArchiveNames()"
    ],
    "org.apache.commons.compress.harmony.pack200.Pack200Exception#Pack200Exception(String)": ["org.apache.commons.compress.harmony.pack200.Pack200Exception.<init>()"],
    "org.apache.commons.compress.archivers.zip.PKWareExtraHeader.EncryptionAlgorithm.<staticinit>()": ["org.apache.commons.compress.archivers.zip.PKWareExtraHeader.EncryptionAlgorithm#getCode()"],
    "org.apache.commons.compress.harmony.unpack200.SegmentOptions#hasFieldFlagsHi()": ["org.apache.commons.compress.harmony.unpack200.SegmentOptions.<staticinit>()"],
    "org.apache.commons.compress.archivers.zip.X000A_NTFS.dateToZip(Date)": ["org.apache.commons.compress.archivers.zip.ZipEightByteInteger#ZipEightByteInteger(BigInteger)"],
    "org.apache.commons.compress.archivers.zip.ZipSplitOutputStream#writeFully(byte[],int,int,long)": [
        "org.apache.commons.compress.archivers.zip.ZipIoUtil.writeFullyAt(FileChannel,ByteBuffer,long)",
        "org.apache.commons.compress.archivers.zip.ZipSplitOutputStream#writeToSegment(Path,long,byte[],int,int)"
    ],
    "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream#createCentralFileHeader(ZipArchiveEntry)": [
        "org.apache.commons.compress.archivers.zip.Zip64RequiredException#Zip64RequiredException(String)",
        "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream#createCentralFileHeader(ZipArchiveEntry,ByteBuffer,EntryMetaData,boolean)",
        "org.apache.commons.compress.archivers.zip.Zip64Mode.<staticinit>()",
        "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream#handleZip64Extra(ZipArchiveEntry,long,boolean)",
        "org.apache.commons.compress.archivers.zip.Zip64RequiredException.<staticinit>()",
        "org.apache.commons.compress.archivers.zip.ZipArchiveEntry#getSize()",
        "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream#hasZip64Extra(ZipArchiveEntry)",
        "org.apache.commons.compress.archivers.zip.ZipArchiveEntry#getDiskNumberStart()",
        "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream#getName(ZipArchiveEntry)",
        "org.apache.commons.compress.archivers.zip.ZipConstants.<staticinit>()"
    ],
    "org.apache.commons.compress.utils.ArchiveUtils.toString(ArchiveEntry)": [
        "org.apache.commons.compress.archivers.ar.ArArchiveEntry#getSize()",
        "org.apache.commons.compress.archivers.dump.DumpArchiveEntry#isDirectory()",
        "org.apache.commons.compress.archivers.zip.ZipArchiveEntry#getName()",
        "org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry#getName()",
        "org.apache.commons.compress.archivers.arj.ArjArchiveEntry#getName()",
        "org.apache.commons.compress.archivers.dump.DumpArchiveEntry#getName()",
        "org.apache.commons.compress.archivers.ar.ArArchiveEntry#isDirectory()",
        "org.apache.commons.compress.archivers.arj.ArjArchiveEntry#isDirectory()",
        "org.apache.commons.compress.archivers.zip.ZipArchiveEntry#isDirectory()",
        "org.apache.commons.compress.archivers.cpio.CpioArchiveEntry#getName()",
        "org.apache.commons.compress.archivers.tar.TarArchiveEntry#getName()",
        "org.apache.commons.compress.archivers.cpio.CpioArchiveEntry#isDirectory()",
        "org.apache.commons.compress.archivers.tar.TarArchiveEntry#isDirectory()",
        "org.apache.commons.compress.archivers.cpio.CpioArchiveEntry#getSize()",
        "org.apache.commons.compress.archivers.arj.ArjArchiveEntry#getSize()",
        "org.apache.commons.compress.archivers.zip.ZipArchiveEntry#getSize()",
        "org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry#isDirectory()",
        "org.apache.commons.compress.archivers.ar.ArArchiveEntry#getName()",
        "org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry#getSize()",
        "org.apache.commons.compress.archivers.dump.DumpArchiveEntry#getSize()",
        "org.apache.commons.compress.archivers.tar.TarArchiveEntry#getSize()"
    ],
    "org.apache.commons.compress.harmony.unpack200.BcBands#BcBands(Segment)": [
        "org.apache.commons.compress.harmony.unpack200.BcBands.<init>()",
        "org.apache.commons.compress.harmony.unpack200.BandSet#BandSet(Segment)"
    ],
    "org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream#Pack200CompressorOutputStream(OutputStream,Pack200Strategy)": ["org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream#Pack200CompressorOutputStream(OutputStream,Pack200Strategy,Map<String, String>)"],
    "org.apache.commons.compress.archivers.zip.ZipFile.openZipChannel(Path,long,OpenOption[])": [
        "org.apache.commons.compress.utils.IOUtils.readFully(ReadableByteChannel,ByteBuffer)",
        "org.apache.commons.compress.archivers.zip.ZipSplitReadOnlySeekableByteChannel.forPaths(List<Path>,OpenOption[])",
        "org.apache.commons.compress.archivers.zip.ZipConstants.<staticinit>()",
        "org.apache.commons.compress.archivers.zip.ZipFile.positionAtEndOfCentralDirectoryRecord(SeekableByteChannel)"
    ],
    "org.apache.commons.compress.utils.ByteUtils.InputStreamByteSupplier#getAsByte()": [
        "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream#read()",
        "org.apache.commons.compress.archivers.sevenz.AES256SHA256Decoder.AES256SHA256DecoderInputStream#read()",
        "org.apache.commons.compress.compressors.xz.XZCompressorInputStream#read()",
        "org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorInputStream#read()",
        "org.apache.commons.compress.compressors.lz77support.AbstractLZ77CompressorInputStream#read()",
        "org.apache.commons.compress.compressors.deflate.DeflateCompressorInputStream#read()",
        "org.apache.commons.compress.archivers.zip.ExplodingInputStream#read()",
        "org.apache.commons.compress.compressors.lzma.LZMACompressorInputStream#read()",
        "org.apache.commons.compress.compressors.zstandard.ZstdCompressorInputStream#read()",
        "org.apache.commons.compress.archivers.sevenz.BoundedSeekableByteChannelInputStream#read()",
        "org.apache.commons.compress.utils.BoundedArchiveInputStream#read()",
        "org.apache.commons.compress.compressors.brotli.BrotliCompressorInputStream#read()",
        "org.apache.commons.compress.archivers.tar.TarArchiveSparseZeroInputStream#read()",
        "org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream#read()",
        "org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStream#read()",
        "org.apache.commons.compress.compressors.deflate64.Deflate64CompressorInputStream#read()",
        "org.apache.commons.compress.compressors.lzw.LZWInputStream#read()",
        "org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream#read()"
    ],
    "org.apache.commons.compress.harmony.unpack200.bytecode.ExceptionsAttribute#hashCode()": [
        "org.apache.commons.compress.harmony.unpack200.bytecode.ExceptionsAttribute.hashCode(Object[])",
        "org.apache.commons.compress.harmony.unpack200.bytecode.Attribute#hashCode()"
    ],
    "org.apache.commons.compress.compressors.lzw.LZWInputStream#initializeTables(int)": ["org.apache.commons.compress.compressors.lzw.LZWInputStream#getCodeSize()"],
    "org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorInputStream#init(boolean)": [
        "org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorInputStream#readSignature(boolean)",
        "org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorInputStream#readFrameDescriptor()",
        "org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorInputStream#nextBlock()"
    ],
    "org.apache.commons.compress.archivers.zip.ZipLong#equals(Object)": ["org.apache.commons.compress.archivers.zip.ZipLong#getValue()"],
    "org.apache.commons.compress.harmony.unpack200.bytecode.RuntimeVisibleorInvisibleAnnotationsAttribute#writeBody(DataOutputStream)": [
        "org.apache.commons.compress.harmony.unpack200.bytecode.RuntimeVisibleorInvisibleAnnotationsAttribute#getLength()",
        "org.apache.commons.compress.harmony.unpack200.bytecode.AnnotationsAttribute.Annotation#writeBody(DataOutputStream)"
    ],
    "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream#closeEntry(boolean,boolean)": [
        "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream#writeDataDescriptor(ZipArchiveEntry)",
        "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream#rewriteSizesAndCrc(boolean)"
    ],
    "org.apache.commons.compress.archivers.zip.ExtraFieldUtils.UnparseableExtraField#onUnparseableExtraField(byte[],int,int,boolean,int)": [
        "org.apache.commons.compress.archivers.zip.ExtraFieldUtils.UnparseableExtraField.<staticinit>()",
        "org.apache.commons.compress.archivers.zip.UnparseableExtraFieldData#parseFromLocalFileData(byte[],int,int)",
        "org.apache.commons.compress.archivers.zip.UnparseableExtraFieldData#parseFromCentralDirectoryData(byte[],int,int)",
        "org.apache.commons.compress.archivers.zip.ExtraFieldUtils.<staticinit>()",
        "org.apache.commons.compress.archivers.zip.UnparseableExtraFieldData.<init>()"
    ],
    "org.apache.commons.compress.archivers.zip.ExtraFieldUtils.fillExtraField(ZipExtraField,byte[],int,int,boolean)": [
        "org.apache.commons.compress.archivers.zip.UnparseableExtraFieldData#parseFromLocalFileData(byte[],int,int)",
        "org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp#parseFromLocalFileData(byte[],int,int)",
        "org.apache.commons.compress.archivers.zip.ResourceAlignmentExtraField#parseFromCentralDirectoryData(byte[],int,int)",
        "org.apache.commons.compress.archivers.zip.X000A_NTFS#parseFromLocalFileData(byte[],int,int)",
        "org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField#parseFromCentralDirectoryData(byte[],int,int)",
        "org.apache.commons.compress.archivers.zip.UnrecognizedExtraField#parseFromCentralDirectoryData(byte[],int,int)",
        "org.apache.commons.compress.archivers.zip.JarMarker#getHeaderId()",
        "org.apache.commons.compress.archivers.zip.PKWareExtraHeader#getHeaderId()",
        "org.apache.commons.compress.archivers.zip.JarMarker#parseFromLocalFileData(byte[],int,int)",
        "org.apache.commons.compress.archivers.zip.X000A_NTFS#parseFromCentralDirectoryData(byte[],int,int)",
        "org.apache.commons.compress.archivers.zip.X000A_NTFS#getHeaderId()",
        "org.apache.commons.compress.archivers.zip.UnparseableExtraFieldData#getHeaderId()",
        "org.apache.commons.compress.archivers.zip.AsiExtraField#getHeaderId()",
        "org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField#parseFromLocalFileData(byte[],int,int)",
        "org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField#parseFromLocalFileData(byte[],int,int)",
        "org.apache.commons.compress.archivers.zip.ResourceAlignmentExtraField#parseFromLocalFileData(byte[],int,int)",
        "org.apache.commons.compress.archivers.zip.X7875_NewUnix#parseFromCentralDirectoryData(byte[],int,int)",
        "org.apache.commons.compress.archivers.zip.X0017_StrongEncryptionHeader#parseFromCentralDirectoryData(byte[],int,int)",
        "org.apache.commons.compress.archivers.zip.UnicodeCommentExtraField#getHeaderId()",
        "org.apache.commons.compress.archivers.zip.PKWareExtraHeader#parseFromLocalFileData(byte[],int,int)",
        "org.apache.commons.compress.archivers.zip.UnrecognizedExtraField#parseFromLocalFileData(byte[],int,int)",
        "org.apache.commons.compress.archivers.zip.X0015_CertificateIdForFile#parseFromCentralDirectoryData(byte[],int,int)",
        "org.apache.commons.compress.archivers.zip.X7875_NewUnix#getHeaderId()",
        "org.apache.commons.compress.archivers.zip.UnparseableExtraFieldData#parseFromCentralDirectoryData(byte[],int,int)",
        "org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField#getHeaderId()",
        "org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp#getHeaderId()",
        "org.apache.commons.compress.archivers.zip.X7875_NewUnix#parseFromLocalFileData(byte[],int,int)",
        "org.apache.commons.compress.archivers.zip.ZipShort#getValue()",
        "org.apache.commons.compress.archivers.zip.X0017_StrongEncryptionHeader#parseFromLocalFileData(byte[],int,int)",
        "org.apache.commons.compress.archivers.zip.PKWareExtraHeader#parseFromCentralDirectoryData(byte[],int,int)",
        "org.apache.commons.compress.archivers.zip.ResourceAlignmentExtraField#getHeaderId()",
        "org.apache.commons.compress.archivers.zip.AsiExtraField#parseFromCentralDirectoryData(byte[],int,int)",
        "org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField#parseFromCentralDirectoryData(byte[],int,int)",
        "org.apache.commons.compress.archivers.zip.X0016_CertificateIdForCentralDirectory#parseFromCentralDirectoryData(byte[],int,int)",
        "org.apache.commons.compress.archivers.zip.UnicodePathExtraField#getHeaderId()",
        "org.apache.commons.compress.archivers.zip.JarMarker#parseFromCentralDirectoryData(byte[],int,int)",
        "org.apache.commons.compress.archivers.zip.AsiExtraField#parseFromLocalFileData(byte[],int,int)",
        "org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp#parseFromCentralDirectoryData(byte[],int,int)",
        "org.apache.commons.compress.archivers.zip.UnrecognizedExtraField#getHeaderId()"
    ],
    "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.matches(byte[],int)": [
        "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.<staticinit>()",
        "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.checksig(byte[],byte[])",
        "org.apache.commons.compress.archivers.zip.ZipLong#getBytes()",
        "org.apache.commons.compress.archivers.zip.ZipLong.<staticinit>()"
    ],
    "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.bsGetUByte(BitInputStream)": ["org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.bsR(BitInputStream,int)"],
    "org.apache.commons.compress.harmony.unpack200.bytecode.forms.LookupSwitchForm#setByteCodeOperands(ByteCode,OperandManager,int)": [
        "org.apache.commons.compress.harmony.unpack200.bytecode.OperandManager#nextCaseValues()",
        "org.apache.commons.compress.harmony.unpack200.bytecode.ByteCode#setByteCodeTargets(int[])",
        "org.apache.commons.compress.harmony.unpack200.bytecode.forms.VariableInstructionForm#setRewrite4Bytes(int,int,int[])",
        "org.apache.commons.compress.harmony.unpack200.bytecode.OperandManager#nextCaseCount()",
        "org.apache.commons.compress.harmony.unpack200.bytecode.ByteCode#getOpcode()",
        "org.apache.commons.compress.harmony.unpack200.bytecode.ByteCode#setRewrite(int[])",
        "org.apache.commons.compress.harmony.unpack200.bytecode.OperandManager#nextLabel()"
    ],
    "org.apache.commons.compress.archivers.zip.X7875_NewUnix.<staticinit>()": ["org.apache.commons.compress.archivers.zip.ZipShort#ZipShort(int)"],
    "org.apache.commons.compress.harmony.pack200.Segment.SegmentMethodVisitor#visitLocalVariable(String,String,String,Label,Label,int)": ["org.apache.commons.compress.harmony.pack200.ClassBands#addLocalVariable(String,String,String,Label,Label,int)"],
    "org.apache.commons.compress.harmony.pack200.IntList#add(int,int)": [
        "org.apache.commons.compress.harmony.pack200.IntList#growAtEnd(int)",
        "org.apache.commons.compress.harmony.pack200.IntList#growForInsert(int,int)",
        "org.apache.commons.compress.harmony.pack200.IntList#growAtFront(int)"
    ],
    "org.apache.commons.compress.archivers.zip.ZipArchiveEntry#ZipArchiveEntry(Path,String,LinkOption[]...)": ["org.apache.commons.compress.archivers.zip.ZipArchiveEntry#ZipArchiveEntry(Function<ZipShort, ZipExtraField>,Path,String,LinkOption[]...)"],
    "org.apache.commons.compress.harmony.pack200.ClassBands#writeMethodAttributeBands(OutputStream)": [
        "org.apache.commons.compress.harmony.pack200.BandSet#encodeBandInt(String,int[],BHSDCodec)",
        "org.apache.commons.compress.harmony.pack200.MetadataBandGroup#pack(OutputStream)",
        "org.apache.commons.compress.harmony.pack200.Codec.<staticinit>()",
        "org.apache.commons.compress.harmony.pack200.IntList#size()",
        "org.apache.commons.compress.harmony.pack200.NewAttributeBands#pack(OutputStream)",
        "org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream#write(byte[])",
        "org.apache.commons.compress.harmony.pack200.SegmentHeader#have_method_flags_hi()",
        "org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream#write(byte[])",
        "org.apache.commons.compress.archivers.sevenz.Coders.DeflateDecoder.DeflateDecoderOutputStream#write(byte[])",
        "org.apache.commons.compress.harmony.pack200.BandSet#cpEntryListToArray(List<? extends ConstantPoolEntry>)",
        "org.apache.commons.compress.harmony.pack200.PackingUtils.log(String)",
        "org.apache.commons.compress.harmony.pack200.BandSet#encodeFlags(String,long[][],BHSDCodec,BHSDCodec,boolean)",
        "org.apache.commons.compress.harmony.pack200.IntList#toArray()",
        "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.OutputStreamWrapper#write(byte[])",
        "org.apache.commons.compress.archivers.zip.ZipSplitOutputStream#write(byte[])"
    ],
    "org.apache.commons.compress.archivers.tar.TarUtils.formatNameBytes(String,byte[],int,int,ZipEncoding)": [
        "org.apache.commons.compress.archivers.zip.NioZipEncoding#encode(String)",
        "org.apache.commons.compress.archivers.tar.TarUtils$ZipEncoding$1#encode(String)"
    ],
    "org.apache.commons.compress.compressors.bzip2.BlockSort#fallbackSort(Data,int)": ["org.apache.commons.compress.compressors.bzip2.BlockSort#fallbackSort(int[],byte[],int)"],
    "org.apache.commons.compress.archivers.ar.ArArchiveInputStream#asInt(byte[],int,int,boolean)": ["org.apache.commons.compress.archivers.ar.ArArchiveInputStream#asInt(byte[],int,int,int,boolean)"],
    "org.apache.commons.compress.archivers.zip.UnparseableExtraFieldData.<staticinit>()": ["org.apache.commons.compress.archivers.zip.ZipShort#ZipShort(int)"],
    "org.apache.commons.compress.compressors.lzma.LZMAUtils.getCachedLZMAAvailability()": ["org.apache.commons.compress.compressors.lzma.LZMAUtils.<staticinit>()"],
    "org.apache.commons.compress.harmony.pack200.BHSDCodec#calculateSmallest()": [
        "org.apache.commons.compress.harmony.pack200.BHSDCodec#cardinality()",
        "org.apache.commons.compress.harmony.pack200.BHSDCodec#isSigned()"
    ],
    "org.apache.commons.compress.utils.FixedLengthBlockOutputStream#FixedLengthBlockOutputStream(OutputStream,int)": [
        "org.apache.commons.compress.utils.FixedLengthBlockOutputStream.<init>()",
        "org.apache.commons.compress.utils.FixedLengthBlockOutputStream.BufferAtATimeOutputChannel#BufferAtATimeOutputChannel(OutputStream)"
    ],
    "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream#finish()": [
        "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream#endCompression()",
        "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream#endBlock()",
        "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream#writeRun()"
    ],
    "org.apache.commons.compress.archivers.zip.ZipFile#finalize()": ["org.apache.commons.compress.archivers.zip.ZipFile#close()"],
    "org.apache.commons.compress.compressors.xz.XZUtils.setCacheXZAvailablity(boolean)": [
        "org.apache.commons.compress.compressors.xz.XZUtils.internalIsXZCompressionAvailable()",
        "org.apache.commons.compress.compressors.xz.XZUtils.CachedAvailability.<staticinit>()",
        "org.apache.commons.compress.compressors.xz.XZUtils.<staticinit>()"
    ],
    "org.apache.commons.compress.archivers.zip.JarMarker.<staticinit>()": [
        "org.apache.commons.compress.archivers.zip.JarMarker#JarMarker()",
        "org.apache.commons.compress.archivers.zip.ZipShort#ZipShort(int)"
    ],
    "org.apache.commons.compress.harmony.unpack200.BandSet#parseFlags(String,InputStream,int,BHSDCodec,boolean)": ["org.apache.commons.compress.harmony.unpack200.BandSet#parseFlags(String,InputStream,int[],BHSDCodec,BHSDCodec)"],
    "org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream#close()": [
        "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream#close()",
        "org.apache.commons.compress.archivers.sevenz.BoundedSeekableByteChannelInputStream#close()",
        "org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStream#close()",
        "org.apache.commons.compress.compressors.brotli.BrotliCompressorInputStream#close()",
        "org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream#close()",
        "org.apache.commons.compress.compressors.deflate64.Deflate64CompressorInputStream#close()",
        "org.apache.commons.compress.compressors.deflate.DeflateCompressorInputStream#close()",
        "org.apache.commons.compress.compressors.pack200.AbstractStreamBridge#stop()",
        "org.apache.commons.compress.archivers.sevenz.AES256SHA256Decoder.AES256SHA256DecoderInputStream#close()",
        "org.apache.commons.compress.compressors.xz.XZCompressorInputStream#close()",
        "org.apache.commons.compress.archivers.zip.ExplodingInputStream#close()",
        "org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream#close()",
        "org.apache.commons.compress.compressors.lzw.LZWInputStream#close()",
        "org.apache.commons.compress.compressors.lzma.LZMACompressorInputStream#close()",
        "org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorInputStream#close()",
        "org.apache.commons.compress.compressors.zstandard.ZstdCompressorInputStream#close()",
        "org.apache.commons.compress.compressors.lz77support.AbstractLZ77CompressorInputStream#close()"
    ],
    "org.apache.commons.compress.archivers.sevenz.StreamMap#StreamMap(int[],long[],int[],int[])": ["org.apache.commons.compress.archivers.sevenz.StreamMap.<init>()"],
    "org.apache.commons.compress.archivers.ar.ArArchiveInputStream#getBSDLongName(String)": [
        "org.apache.commons.compress.utils.IOUtils.readRange(InputStream,int)",
        "org.apache.commons.compress.archivers.ar.ArArchiveInputStream.<staticinit>()",
        "org.apache.commons.compress.archivers.ar.ArArchiveInputStream#trackReadBytes(long)",
        "org.apache.commons.compress.utils.ArchiveUtils.toAsciiString(byte[])",
        "org.apache.commons.compress.utils.ParsingUtils.parseIntValue(String)"
    ],
    "org.apache.commons.compress.compressors.pack200.Pack200Strategy$Pack200Strategy$1#newStreamBridge()": ["org.apache.commons.compress.compressors.pack200.InMemoryCachingStreamBridge#InMemoryCachingStreamBridge()"],
    "org.apache.commons.compress.harmony.pack200.Segment.SegmentFieldVisitor#SegmentFieldVisitor()": [
        "org.apache.commons.compress.harmony.pack200.Segment.<staticinit>()",
        "org.apache.commons.compress.harmony.pack200.Segment.SegmentFieldVisitor.<init>()"
    ],
    "org.apache.commons.compress.harmony.unpack200.BandSet#decodeBandInt(String,InputStream,BHSDCodec,int[])": ["org.apache.commons.compress.harmony.unpack200.BandSet#decodeBandInt(String,InputStream,BHSDCodec,int)"],
    "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.BoundCountInputStream#read(byte[],int,int)": [
        "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.BoundCountInputStream#atMaxLength()",
        "org.apache.commons.compress.archivers.dump.DumpArchiveInputStream#getCount()",
        "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.BoundCountInputStream#readCount(int)",
        "org.apache.commons.compress.archivers.ArchiveInputStream#getCount()"
    ],
    "org.apache.commons.compress.harmony.pack200.PopulationCodec#encode(int[],int[],int[])": ["org.apache.commons.compress.harmony.pack200.Codec#encode(int[])"],
    "org.apache.commons.compress.archivers.tar.TarUtils.parseName(byte[],int,int,ZipEncoding)": [
        "org.apache.commons.compress.archivers.zip.NioZipEncoding#decode(byte[])",
        "org.apache.commons.compress.archivers.tar.TarUtils$ZipEncoding$1#decode(byte[])"
    ],
    "org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream#read(byte[])": [
        "org.apache.commons.compress.compressors.zstandard.ZstdCompressorInputStream#read(byte[])",
        "org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream#read(byte[])",
        "org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream#getInputStream()",
        "org.apache.commons.compress.compressors.brotli.BrotliCompressorInputStream#read(byte[])"
    ],
    "org.apache.commons.compress.archivers.zip.ZipFile#ZipFile(File,String,boolean)": ["org.apache.commons.compress.archivers.zip.ZipFile#ZipFile(File,String,boolean,boolean)"],
    "org.apache.commons.compress.compressors.pack200.Pack200Utils.normalize(File,File,Map<String, String>)": [
        "org.apache.commons.compress.harmony.pack200.Pack200PackerAdapter#pack(JarFile,OutputStream)",
        "org.apache.commons.compress.harmony.unpack200.Pack200UnpackerAdapter#unpack(File,JarOutputStream)",
        "org.apache.commons.compress.java.util.jar.Pack200.newPacker()",
        "org.apache.commons.compress.java.util.jar.Pack200.Packer.<staticinit>()",
        "org.apache.commons.compress.java.util.jar.Pack200.newUnpacker()"
    ],
    "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream#getGeneralPurposeBits(boolean,boolean)": [
        "org.apache.commons.compress.archivers.zip.GeneralPurposeBit#useUTF8ForNames(boolean)",
        "org.apache.commons.compress.archivers.zip.GeneralPurposeBit#GeneralPurposeBit()",
        "org.apache.commons.compress.archivers.zip.GeneralPurposeBit#useDataDescriptor(boolean)"
    ],
    "org.apache.commons.compress.harmony.pack200.RunCodec#RunCodec(int,Codec,Codec)": [
        "org.apache.commons.compress.harmony.pack200.Pack200Exception#Pack200Exception(String)",
        "org.apache.commons.compress.harmony.pack200.Codec.<init>()",
        "org.apache.commons.compress.harmony.pack200.RunCodec.<init>()"
    ],
    "org.apache.commons.compress.archivers.tar.TarArchiveEntry#isDescendent(TarArchiveEntry)": ["org.apache.commons.compress.archivers.tar.TarArchiveEntry#getName()"],
    "org.apache.commons.compress.archivers.tar.TarArchiveEntry#parseTarHeader(byte[],ZipEncoding,boolean,boolean)": ["org.apache.commons.compress.archivers.tar.TarArchiveEntry#parseTarHeader(Map<String, String>,byte[],ZipEncoding,boolean,boolean)"],
    "org.apache.commons.compress.harmony.pack200.PackingOptions#getUnknownFieldAttributeAction(String)": ["org.apache.commons.compress.harmony.pack200.PackingOptions#getOrDefault(Map<String, String>,String,String)"],
    "org.apache.commons.compress.utils.IOUtils.copyRange(InputStream,long,OutputStream,int)": [
        "org.apache.commons.compress.archivers.sevenz.Coders.DeflateDecoder.DeflateDecoderOutputStream#write(byte[],int,int)",
        "org.apache.commons.compress.utils.FixedLengthBlockOutputStream#write(byte[],int,int)",
        "org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorOutputStream#write(byte[],int,int)",
        "org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorInputStream#read(byte[],int,int)",
        "org.apache.commons.compress.archivers.sevenz.BoundedSeekableByteChannelInputStream#read(byte[],int,int)",
        "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream#write(byte[],int,int)",
        "org.apache.commons.compress.archivers.zip.FileRandomAccessOutputStream#write(byte[],int,int)",
        "org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream#write(byte[],int,int)",
        "org.apache.commons.compress.archivers.sevenz.AES256SHA256Decoder.AES256SHA256DecoderInputStream#read(byte[],int,int)",
        "org.apache.commons.compress.archivers.zip.ZipSplitOutputStream#write(byte[],int,int)",
        "org.apache.commons.compress.compressors.xz.XZCompressorOutputStream#write(byte[],int,int)",
        "org.apache.commons.compress.compressors.deflate.DeflateCompressorOutputStream#write(byte[],int,int)",
        "org.apache.commons.compress.utils.BoundedArchiveInputStream#read(byte[],int,int)",
        "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream#read(byte[],int,int)",
        "org.apache.commons.compress.archivers.zip.SeekableChannelRandomAccessOutputStream#write(byte[],int,int)",
        "org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream#write(byte[],int,int)",
        "org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStream#read(byte[],int,int)",
        "org.apache.commons.compress.compressors.zstandard.ZstdCompressorInputStream#read(byte[],int,int)",
        "org.apache.commons.compress.archivers.ar.ArArchiveOutputStream#write(byte[],int,int)",
        "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream#write(byte[],int,int)",
        "org.apache.commons.compress.compressors.lzma.LZMACompressorOutputStream#write(byte[],int,int)",
        "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.OutputStreamWrapper#write(byte[],int,int)",
        "org.apache.commons.compress.compressors.deflate64.Deflate64CompressorInputStream#read(byte[],int,int)",
        "org.apache.commons.compress.compressors.zstandard.ZstdCompressorOutputStream#write(byte[],int,int)",
        "org.apache.commons.compress.compressors.brotli.BrotliCompressorInputStream#read(byte[],int,int)",
        "org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream#read(byte[],int,int)",
        "org.apache.commons.compress.archivers.sevenz.AES256SHA256Decoder.AES256SHA256DecoderOutputStream#write(byte[],int,int)",
        "org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorOutputStream#write(byte[],int,int)",
        "org.apache.commons.compress.compressors.lzma.LZMACompressorInputStream#read(byte[],int,int)",
        "org.apache.commons.compress.compressors.lz4.BlockLZ4CompressorInputStream#read(byte[],int,int)",
        "org.apache.commons.compress.compressors.snappy.SnappyCompressorInputStream#read(byte[],int,int)",
        "org.apache.commons.compress.compressors.xz.XZCompressorInputStream#read(byte[],int,int)",
        "org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream#read(byte[],int,int)",
        "org.apache.commons.compress.compressors.lzw.LZWInputStream#read(byte[],int,int)",
        "org.apache.commons.compress.compressors.lz4.BlockLZ4CompressorOutputStream#write(byte[],int,int)",
        "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream#write(byte[],int,int)",
        "org.apache.commons.compress.compressors.snappy.SnappyCompressorOutputStream#write(byte[],int,int)",
        "org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream#write(byte[],int,int)",
        "org.apache.commons.compress.compressors.deflate.DeflateCompressorInputStream#read(byte[],int,int)"
    ],
    "org.apache.commons.compress.harmony.unpack200.bytecode.CPNameAndType#equals(Object)": ["org.apache.commons.compress.harmony.unpack200.bytecode.CPUTF8#equals(Object)"],
    "org.apache.commons.compress.harmony.unpack200.SegmentHeader#setArchiveMinorVersion(int)": ["org.apache.commons.compress.harmony.pack200.Pack200Exception#Pack200Exception(String)"],
    "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream#sendMTFValues6(int,int)": [
        "org.apache.commons.compress.archivers.sevenz.AES256SHA256Decoder.AES256SHA256DecoderOutputStream#write(int)",
        "org.apache.commons.compress.compressors.snappy.SnappyCompressorOutputStream#write(int)",
        "org.apache.commons.compress.archivers.sevenz.Coders.DeflateDecoder.DeflateDecoderOutputStream#write(int)",
        "org.apache.commons.compress.compressors.lz4.BlockLZ4CompressorOutputStream#write(int)",
        "org.apache.commons.compress.compressors.deflate.DeflateCompressorOutputStream#write(int)",
        "org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorOutputStream#write(int)",
        "org.apache.commons.compress.compressors.lzma.LZMACompressorOutputStream#write(int)",
        "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream#write(int)",
        "org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream#write(int)",
        "org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorOutputStream#write(int)",
        "org.apache.commons.compress.compressors.xz.XZCompressorOutputStream#write(int)",
        "org.apache.commons.compress.utils.FixedLengthBlockOutputStream#write(int)",
        "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.OutputStreamWrapper#write(int)",
        "org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream#write(int)",
        "org.apache.commons.compress.archivers.ArchiveOutputStream#write(int)",
        "org.apache.commons.compress.archivers.zip.ZipSplitOutputStream#write(int)",
        "org.apache.commons.compress.compressors.zstandard.ZstdCompressorOutputStream#write(int)",
        "org.apache.commons.compress.archivers.zip.RandomAccessOutputStream#write(int)"
    ],
    "org.apache.commons.compress.archivers.tar.TarFile#tryToConsumeSecondEOFRecord()": [
        "org.apache.commons.compress.archivers.tar.TarFile#isEOFRecord(ByteBuffer)",
        "org.apache.commons.compress.utils.SeekableInMemoryByteChannel#position(long)",
        "org.apache.commons.compress.utils.SeekableInMemoryByteChannel#position()",
        "org.apache.commons.compress.utils.MultiReadOnlySeekableByteChannel#position(long)",
        "org.apache.commons.compress.utils.MultiReadOnlySeekableByteChannel#position()",
        "org.apache.commons.compress.archivers.tar.TarFile#readRecord()"
    ],
    "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile#writeFileEmptyStreams(DataOutput)": [
        "org.apache.commons.compress.archivers.sevenz.NID.<staticinit>()",
        "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile#writeUint64(DataOutput,long)",
        "org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry#hasStream()",
        "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile#writeBits(DataOutput,BitSet,int)"
    ],
    "org.apache.commons.compress.archivers.tar.TarArchiveEntry#isGNULongLinkEntry()": ["org.apache.commons.compress.archivers.tar.TarConstants.<staticinit>()"],
    "org.apache.commons.compress.archivers.sevenz.AES256SHA256Decoder.AES256SHA256DecoderInputStream#init()": [
        "org.apache.commons.compress.archivers.sevenz.AES256Options.<staticinit>()",
        "org.apache.commons.compress.PasswordRequiredException#PasswordRequiredException(String)",
        "org.apache.commons.compress.archivers.sevenz.AES256SHA256Decoder.sha256Password(byte[],int,byte[])",
        "org.apache.commons.compress.archivers.sevenz.AES256Options.newSecretKeySpec(byte[])"
    ],
    "org.apache.commons.compress.archivers.zip.ZipUtil.toDosTime(long)": ["org.apache.commons.compress.archivers.zip.ZipUtil.toDosTime(long,byte[],int)"],
    "org.apache.commons.compress.archivers.tar.TarArchiveEntry#TarArchiveEntry(String)": ["org.apache.commons.compress.archivers.tar.TarArchiveEntry#TarArchiveEntry(String,boolean)"],
    "org.apache.commons.compress.compressors.deflate64.HuffmanDecoder.UncompressedState#UncompressedState(long)": [
        "org.apache.commons.compress.compressors.deflate64.HuffmanDecoder.DecoderState.<init>()",
        "org.apache.commons.compress.compressors.deflate64.HuffmanDecoder.UncompressedState.<init>()"
    ],
    "org.apache.commons.compress.archivers.zip.StreamCompressor.create(OutputStream,Deflater)": ["org.apache.commons.compress.archivers.zip.StreamCompressor.OutputStreamCompressor#OutputStreamCompressor(Deflater,OutputStream)"],
    "org.apache.commons.compress.archivers.jar.JarArchiveInputStream#JarArchiveInputStream(InputStream)": [
        "org.apache.commons.compress.archivers.jar.JarArchiveInputStream.<init>()",
        "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream#ZipArchiveInputStream(InputStream)"
    ],
    "org.apache.commons.compress.archivers.ar.ArArchiveOutputStream#createArchiveEntry(Path,String,LinkOption[]...)": ["org.apache.commons.compress.archivers.ar.ArArchiveEntry#ArArchiveEntry(Path,String,LinkOption[]...)"],
    "org.apache.commons.compress.archivers.tar.TarFile#getInputStream(TarArchiveEntry)": ["org.apache.commons.compress.archivers.tar.TarFile.BoundedTarEntryInputStream#BoundedTarEntryInputStream(TarArchiveEntry,SeekableByteChannel)"],
    "org.apache.commons.compress.archivers.zip.StreamCompressor.create(int,ScatterGatherBackingStore)": ["org.apache.commons.compress.archivers.zip.StreamCompressor.ScatterGatherBackingStoreCompressor#ScatterGatherBackingStoreCompressor(Deflater,ScatterGatherBackingStore)"],
    "org.apache.commons.compress.harmony.pack200.ClassBands#addClass(int,int,String,String,String,String[])": [
        "org.apache.commons.compress.harmony.pack200.Segment#getCurrentClassReader()",
        "org.apache.commons.compress.harmony.pack200.Pack200ClassReader#hasSyntheticAttributes()",
        "org.apache.commons.compress.harmony.pack200.CpBands#getCPSignature(String)",
        "org.apache.commons.compress.harmony.pack200.CpBands#addCPUtf8(String)",
        "org.apache.commons.compress.harmony.pack200.CpBands#getCPClass(String)"
    ],
    "org.apache.commons.compress.harmony.pack200.PackingUtils.config(PackingOptions)": [
        "org.apache.commons.compress.harmony.pack200.PackingOptions#isVerbose()",
        "org.apache.commons.compress.harmony.pack200.PackingUtils.PackingLogger#setVerbose(boolean)",
        "org.apache.commons.compress.harmony.pack200.PackingOptions#getLogFile()",
        "org.apache.commons.compress.harmony.pack200.PackingUtils.<staticinit>()"
    ],
    "org.apache.commons.compress.archivers.arj.ArjArchiveInputStream#read16(DataInputStream)": ["org.apache.commons.compress.archivers.ArchiveInputStream#count(int)"],
    "org.apache.commons.compress.archivers.dump.TapeInputStream#TapeInputStream(InputStream)": ["org.apache.commons.compress.archivers.dump.TapeInputStream.<init>()"],
    "org.apache.commons.compress.harmony.pack200.NewAttributeBands.Integral#renumberBci(IntList,Map<Label, Integer>)": [
        "org.apache.commons.compress.harmony.pack200.IntList#get(int)",
        "org.apache.commons.compress.harmony.pack200.NewAttributeBands.Integral#renumberOffsetBci(List,IntList,Map<Label, Integer>)"
    ],
    "org.apache.commons.compress.archivers.tar.TarArchiveInputStream#buildSparseInputStreams()": [
        "org.apache.commons.compress.archivers.tar.TarArchiveEntry#getOrderedSparseHeaders()",
        "org.apache.commons.compress.archivers.tar.TarArchiveSparseZeroInputStream.<init>()",
        "org.apache.commons.compress.archivers.tar.TarArchiveStructSparse#getOffset()",
        "org.apache.commons.compress.utils.BoundedInputStream#BoundedInputStream(InputStream,long)",
        "org.apache.commons.compress.archivers.tar.TarArchiveStructSparse#getNumbytes()"
    ],
    "org.apache.commons.compress.archivers.arj.ArjArchiveInputStream#readString(DataInputStream)": ["org.apache.commons.compress.archivers.ArchiveInputStream#getCharset()"],
    "org.apache.commons.compress.harmony.unpack200.bytecode.forms.FloatRefForm#FloatRefForm(int,String,int[])": [
        "org.apache.commons.compress.harmony.unpack200.bytecode.forms.FloatRefForm.<init>()",
        "org.apache.commons.compress.harmony.unpack200.bytecode.forms.SingleByteReferenceForm#SingleByteReferenceForm(int,String,int[])"
    ],
    "org.apache.commons.compress.archivers.zip.ZipArchiveEntry#getMergedFields()": ["org.apache.commons.compress.archivers.zip.ZipArchiveEntry#copyOf(ZipExtraField[],int)"],
    "org.apache.commons.compress.harmony.archive.internal.nls.Messages.getString(String)": ["org.apache.commons.compress.harmony.archive.internal.nls.Messages.<staticinit>()"],
    "org.apache.commons.compress.archivers.zip.BitStream#nextByte()": ["org.apache.commons.compress.utils.BitInputStream#readBits(int)"],
    "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream#drainCurrentEntryData()": [
        "org.apache.commons.compress.compressors.zstandard.ZstdCompressorInputStream#read(byte[],int,int)",
        "org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorInputStream#read(byte[],int,int)",
        "org.apache.commons.compress.archivers.zip.ZipArchiveEntry#getName()",
        "org.apache.commons.compress.utils.ArchiveUtils.sanitize(String)",
        "org.apache.commons.compress.archivers.sevenz.BoundedSeekableByteChannelInputStream#read(byte[],int,int)",
        "org.apache.commons.compress.compressors.deflate64.Deflate64CompressorInputStream#read(byte[],int,int)",
        "org.apache.commons.compress.compressors.brotli.BrotliCompressorInputStream#read(byte[],int,int)",
        "org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream#read(byte[],int,int)",
        "org.apache.commons.compress.archivers.sevenz.AES256SHA256Decoder.AES256SHA256DecoderInputStream#read(byte[],int,int)",
        "org.apache.commons.compress.compressors.lzma.LZMACompressorInputStream#read(byte[],int,int)",
        "org.apache.commons.compress.compressors.lz4.BlockLZ4CompressorInputStream#read(byte[],int,int)",
        "org.apache.commons.compress.compressors.snappy.SnappyCompressorInputStream#read(byte[],int,int)",
        "org.apache.commons.compress.compressors.xz.XZCompressorInputStream#read(byte[],int,int)",
        "org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream#read(byte[],int,int)",
        "org.apache.commons.compress.utils.BoundedArchiveInputStream#read(byte[],int,int)",
        "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream#read(byte[],int,int)",
        "org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStream#read(byte[],int,int)",
        "org.apache.commons.compress.compressors.lzw.LZWInputStream#read(byte[],int,int)",
        "org.apache.commons.compress.archivers.ArchiveInputStream#count(long)",
        "org.apache.commons.compress.compressors.deflate.DeflateCompressorInputStream#read(byte[],int,int)"
    ],
    "org.apache.commons.compress.harmony.pack200.Pack200PackerAdapter#firePropertyChange(String,Object,Object)": [
        "org.apache.commons.compress.harmony.unpack200.bytecode.ByteCode#equals(Object)",
        "org.apache.commons.compress.harmony.unpack200.bytecode.Attribute#equals(Object)",
        "org.apache.commons.compress.harmony.unpack200.bytecode.CPMember#equals(Object)",
        "org.apache.commons.compress.harmony.pack200.PackingOptions#addPassFile(String)",
        "org.apache.commons.compress.harmony.pack200.PackingOptions#setUnknownAttributeAction(String)",
        "org.apache.commons.compress.harmony.unpack200.bytecode.AnnotationDefaultAttribute#equals(Object)",
        "org.apache.commons.compress.harmony.unpack200.bytecode.ConstantValueAttribute#equals(Object)",
        "org.apache.commons.compress.harmony.unpack200.bytecode.ExceptionsAttribute#equals(Object)",
        "org.apache.commons.compress.harmony.pack200.Pack200Adapter#firePropertyChange(String,Object,Object)",
        "org.apache.commons.compress.harmony.pack200.PackingOptions#setModificationTime(String)",
        "org.apache.commons.compress.harmony.pack200.BHSDCodec#equals(Object)",
        "org.apache.commons.compress.utils.ParsingUtils.parseIntValue(String)",
        "org.apache.commons.compress.harmony.pack200.PackingOptions#setEffort(int)",
        "org.apache.commons.compress.harmony.unpack200.bytecode.CPRef#equals(Object)",
        "org.apache.commons.compress.java.util.jar.Pack200.Packer.<staticinit>()",
        "org.apache.commons.compress.harmony.unpack200.bytecode.CPUTF8#equals(Object)",
        "org.apache.commons.compress.harmony.pack200.PackingOptions#setDeflateHint(String)",
        "org.apache.commons.compress.harmony.pack200.PackingOptions#setKeepFileOrder(boolean)",
        "org.apache.commons.compress.harmony.unpack200.bytecode.ConstantPoolEntry#equals(Object)",
        "org.apache.commons.compress.harmony.pack200.PackingOptions#addClassAttributeAction(String,String)",
        "org.apache.commons.compress.harmony.pack200.PackingOptions#setSegmentLimit(long)",
        "org.apache.commons.compress.harmony.pack200.PackingOptions#removePassFile(String)",
        "org.apache.commons.compress.harmony.pack200.PackingOptions#addCodeAttributeAction(String,String)",
        "org.apache.commons.compress.harmony.unpack200.bytecode.CPClass#equals(Object)",
        "org.apache.commons.compress.harmony.unpack200.bytecode.CPConstant#equals(Object)",
        "org.apache.commons.compress.harmony.unpack200.bytecode.CPNameAndType#equals(Object)",
        "org.apache.commons.compress.utils.ParsingUtils.parseLongValue(String)",
        "org.apache.commons.compress.harmony.unpack200.bytecode.InnerClassesAttribute#equals(Object)",
        "org.apache.commons.compress.harmony.pack200.PackingOptions#addFieldAttributeAction(String,String)",
        "org.apache.commons.compress.harmony.unpack200.bytecode.CPFieldRef#equals(Object)",
        "org.apache.commons.compress.harmony.unpack200.bytecode.SourceFileAttribute#equals(Object)",
        "org.apache.commons.compress.harmony.unpack200.bytecode.LineNumberTableAttribute#equals(Object)",
        "org.apache.commons.compress.harmony.pack200.PackingOptions#addMethodAttributeAction(String,String)"
    ],
    "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.CurrentEntry#CurrentEntry(ZipArchiveEntry)": ["org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.CurrentEntry.<init>()"],
    "org.apache.commons.compress.archivers.arj.ArjArchiveEntry#getUnixMode()": [
        "org.apache.commons.compress.archivers.arj.ArjArchiveEntry#getMode()",
        "org.apache.commons.compress.archivers.arj.ArjArchiveEntry#isHostOsUnix()"
    ],
    "org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream#close()": [
        "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream#close()",
        "org.apache.commons.compress.archivers.sevenz.BoundedSeekableByteChannelInputStream#close()",
        "org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStream#close()",
        "org.apache.commons.compress.compressors.brotli.BrotliCompressorInputStream#close()",
        "org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream#close()",
        "org.apache.commons.compress.compressors.deflate64.Deflate64CompressorInputStream#close()",
        "org.apache.commons.compress.compressors.deflate.DeflateCompressorInputStream#close()",
        "org.apache.commons.compress.archivers.sevenz.AES256SHA256Decoder.AES256SHA256DecoderInputStream#close()",
        "org.apache.commons.compress.compressors.xz.XZCompressorInputStream#close()",
        "org.apache.commons.compress.archivers.zip.ExplodingInputStream#close()",
        "org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream#close()",
        "org.apache.commons.compress.compressors.lzw.LZWInputStream#close()",
        "org.apache.commons.compress.compressors.lzma.LZMACompressorInputStream#close()",
        "org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorInputStream#close()",
        "org.apache.commons.compress.compressors.zstandard.ZstdCompressorInputStream#close()",
        "org.apache.commons.compress.compressors.lz77support.AbstractLZ77CompressorInputStream#close()"
    ],
    "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream#setUseLanguageEncodingFlag(boolean)": ["org.apache.commons.compress.archivers.zip.ZipEncodingHelper.isUTF8(Charset)"],
    "org.apache.commons.compress.compressors.lz4.BlockLZ4CompressorInputStream#initializeBackReference()": [
        "org.apache.commons.compress.compressors.lz4.BlockLZ4CompressorInputStream.State.<staticinit>()",
        "org.apache.commons.compress.compressors.lz77support.AbstractLZ77CompressorInputStream#startBackReference(int,long)",
        "org.apache.commons.compress.compressors.lz4.BlockLZ4CompressorInputStream#readSizeBytes()",
        "org.apache.commons.compress.utils.ByteUtils.fromLittleEndian(ByteSupplier,int)",
        "org.apache.commons.compress.compressors.lz4.BlockLZ4CompressorInputStream.<staticinit>()"
    ],
    "org.apache.commons.compress.harmony.unpack200.SegmentOptions#hasClassFlagsHi()": ["org.apache.commons.compress.harmony.unpack200.SegmentOptions.<staticinit>()"],
    "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream#init(boolean)": [
        "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream#readNextByte(BitInputStream)",
        "org.apache.commons.compress.utils.BitInputStream#clearBitCache()"
    ],
    "org.apache.commons.compress.compressors.CompressorStreamFactory.getLzma()": ["org.apache.commons.compress.compressors.CompressorStreamFactory.<staticinit>()"],
    "org.apache.commons.compress.archivers.ArchiveInputStream#count(int)": ["org.apache.commons.compress.archivers.ArchiveInputStream#count(long)"],
    "org.apache.commons.compress.archivers.zip.ZipEightByteInteger.getLongValue(byte[])": ["org.apache.commons.compress.archivers.zip.ZipEightByteInteger.getLongValue(byte[],int)"],
    "org.apache.commons.compress.harmony.unpack200.NewAttributeBands#parseAttributes(InputStream,int)": [
        "org.apache.commons.compress.harmony.unpack200.NewAttributeBands.Union#readBands(InputStream,int)",
        "org.apache.commons.compress.harmony.unpack200.NewAttributeBands.Reference#readBands(InputStream,int)",
        "org.apache.commons.compress.harmony.unpack200.NewAttributeBands.Callable#readBands(InputStream,int)",
        "org.apache.commons.compress.harmony.unpack200.NewAttributeBands.UnionCase#readBands(InputStream,int)",
        "org.apache.commons.compress.harmony.unpack200.NewAttributeBands#getOneAttribute(int,List<AttributeLayoutElement>)",
        "org.apache.commons.compress.harmony.unpack200.NewAttributeBands.Integral#readBands(InputStream,int)",
        "org.apache.commons.compress.harmony.unpack200.NewAttributeBands.Call#readBands(InputStream,int)",
        "org.apache.commons.compress.harmony.unpack200.NewAttributeBands.Replication#readBands(InputStream,int)"
    ],
    "org.apache.commons.compress.harmony.unpack200.bytecode.AnnotationDefaultAttribute.setAttributeName(CPUTF8)": ["org.apache.commons.compress.harmony.unpack200.bytecode.AnnotationDefaultAttribute.<staticinit>()"],
    "org.apache.commons.compress.archivers.tar.TarFile#repositionForwardBy(long)": [
        "org.apache.commons.compress.utils.SeekableInMemoryByteChannel#position()",
        "org.apache.commons.compress.archivers.tar.TarFile#repositionForwardTo(long)",
        "org.apache.commons.compress.utils.MultiReadOnlySeekableByteChannel#position()"
    ],
    "org.apache.commons.compress.utils.MultiReadOnlySeekableByteChannel#MultiReadOnlySeekableByteChannel(List<SeekableByteChannel>)": ["org.apache.commons.compress.utils.MultiReadOnlySeekableByteChannel.<init>()"],
    "org.apache.commons.compress.utils.ParsingUtils.parseLongValue(String)": ["org.apache.commons.compress.utils.ParsingUtils.parseLongValue(String,int)"],
    "org.apache.commons.compress.utils.IOUtils.readFully(InputStream,byte[])": ["org.apache.commons.compress.utils.IOUtils.readFully(InputStream,byte[],int,int)"],
    "org.apache.commons.compress.harmony.pack200.CPInt#CPInt(int)": [
        "org.apache.commons.compress.harmony.pack200.CPConstant.<init>()",
        "org.apache.commons.compress.harmony.pack200.CPInt.<init>()"
    ],
    "org.apache.commons.compress.harmony.pack200.Segment.SegmentMethodVisitor#visitCode()": ["org.apache.commons.compress.harmony.pack200.ClassBands#addCode()"],
    "org.apache.commons.compress.compressors.lz77support.Parameters.builder(int)": ["org.apache.commons.compress.compressors.lz77support.Parameters.Builder#Builder(int)"],
    "org.apache.commons.compress.archivers.tar.TarFile#getLongNameData()": [
        "org.apache.commons.compress.compressors.zstandard.ZstdCompressorInputStream#read(byte[])",
        "org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream#read(byte[])",
        "org.apache.commons.compress.archivers.tar.TarFile#getNextTarEntry()",
        "org.apache.commons.compress.compressors.brotli.BrotliCompressorInputStream#read(byte[])",
        "org.apache.commons.compress.archivers.tar.TarFile#getInputStream(TarArchiveEntry)"
    ],
    "org.apache.commons.compress.archivers.zip.ZipArchiveEntry#parseExtraFields(byte[],boolean,ExtraFieldParsingBehavior)": [
        "org.apache.commons.compress.archivers.zip.ExtraFieldUtils.parse(byte[],boolean,ExtraFieldParsingBehavior)",
        "org.apache.commons.compress.archivers.zip.ZipArchiveEntry#parseExtraFields(byte[],boolean,ExtraFieldParsingBehavior)$ExtraFieldParsingBehavior$1.<init>()"
    ],
    "org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStream.unmask(long)": ["org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStream.<staticinit>()"],
    "org.apache.commons.compress.harmony.pack200.CpBands#addCPClass(String)": ["org.apache.commons.compress.harmony.pack200.CpBands#getCPClass(String)"],
    "org.apache.commons.compress.archivers.tar.TarFile#isEOFRecord(ByteBuffer)": ["org.apache.commons.compress.utils.ArchiveUtils.isArrayZero(byte[],int)"],
    "org.apache.commons.compress.harmony.unpack200.bytecode.CPMethodRef#hashCode()": ["org.apache.commons.compress.harmony.unpack200.bytecode.CPMethodRef#generateHashCode()"],
    "org.apache.commons.compress.archivers.ar.ArArchiveInputStream.<init>()": ["org.apache.commons.compress.archivers.ar.ArArchiveInputStream.<staticinit>()"],
    "org.apache.commons.compress.archivers.zip.ZipSplitOutputStream#openNewSplitSegment()": [
        "org.apache.commons.compress.archivers.zip.FileRandomAccessOutputStream#close()",
        "org.apache.commons.compress.archivers.zip.ZipSplitOutputStream#createNewSplitSegmentFile(Integer)",
        "org.apache.commons.compress.archivers.zip.FileRandomAccessOutputStream#FileRandomAccessOutputStream(Path)",
        "org.apache.commons.compress.archivers.zip.FileRandomAccessOutputStream#channel()"
    ],
    "org.apache.commons.compress.archivers.sevenz.AES256SHA256Decoder.sha256Password(char[],int,byte[])": [
        "org.apache.commons.compress.archivers.sevenz.AES256SHA256Decoder.sha256Password(byte[],int,byte[])",
        "org.apache.commons.compress.archivers.sevenz.AES256SHA256Decoder.utf16Decode(char[])"
    ],
    "org.apache.commons.compress.archivers.tar.TarArchiveEntry#TarArchiveEntry(Map<String, String>,byte[],ZipEncoding,boolean)": [
        "org.apache.commons.compress.archivers.tar.TarArchiveEntry#TarArchiveEntry(boolean)",
        "org.apache.commons.compress.archivers.tar.TarArchiveEntry.<staticinit>()",
        "org.apache.commons.compress.archivers.tar.TarArchiveEntry#parseTarHeader(Map<String, String>,byte[],ZipEncoding,boolean,boolean)"
    ],
    "org.apache.commons.compress.harmony.pack200.BandSet#tryCodecs(String,int[],BHSDCodec,BandData,BandAnalysisResults,byte[],BHSDCodec[])": [
        "org.apache.commons.compress.harmony.pack200.Codec#encode(int[])",
        "org.apache.commons.compress.harmony.pack200.BHSDCodec#largest()",
        "org.apache.commons.compress.harmony.pack200.BHSDCodec#isDelta()",
        "org.apache.commons.compress.harmony.pack200.CodecEncoding.getSpecifier(Codec,Codec)",
        "org.apache.commons.compress.harmony.pack200.BHSDCodec#equals(Object)",
        "org.apache.commons.compress.harmony.pack200.BandSet#timeToStop(BandAnalysisResults)",
        "org.apache.commons.compress.harmony.pack200.BHSDCodec#smallest()"
    ],
    "org.apache.commons.compress.compressors.z.ZCompressorInputStream#ZCompressorInputStream(InputStream,int)": [
        "org.apache.commons.compress.compressors.lzw.LZWInputStream.<staticinit>()",
        "org.apache.commons.compress.utils.BitInputStream#readBits(int)",
        "org.apache.commons.compress.compressors.lzw.LZWInputStream#LZWInputStream(InputStream,ByteOrder)",
        "org.apache.commons.compress.compressors.lzw.LZWInputStream#setClearCode(int)",
        "org.apache.commons.compress.compressors.z.ZCompressorInputStream#clearEntries()",
        "org.apache.commons.compress.compressors.lzw.LZWInputStream#initializeTables(int,int)",
        "org.apache.commons.compress.compressors.z.ZCompressorInputStream.<staticinit>()",
        "org.apache.commons.compress.compressors.z.ZCompressorInputStream.<init>()"
    ],
    "org.apache.commons.compress.archivers.tar.TarUtils.parseFromPAX01SparseHeaders(String)": [
        "org.apache.commons.compress.utils.ParsingUtils.parseLongValue(String)",
        "org.apache.commons.compress.archivers.tar.TarArchiveStructSparse#TarArchiveStructSparse(long,long)"
    ],
    "org.apache.commons.compress.harmony.unpack200.Segment#unpackRead(InputStream)": [
        "org.apache.commons.compress.harmony.unpack200.SegmentHeader#getArchiveSizeOffset()",
        "org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream#read(byte[])",
        "org.apache.commons.compress.compressors.brotli.BrotliCompressorInputStream#read(byte[])",
        "org.apache.commons.compress.harmony.unpack200.SegmentHeader#SegmentHeader(Segment)",
        "org.apache.commons.compress.compressors.zstandard.ZstdCompressorInputStream#read(byte[])",
        "org.apache.commons.compress.harmony.unpack200.SegmentHeader#getArchiveSize()",
        "org.apache.commons.compress.harmony.unpack200.Pack200UnpackerAdapter.newBoundedInputStream(InputStream)",
        "org.apache.commons.compress.harmony.unpack200.Segment#readSegment(InputStream)",
        "org.apache.commons.compress.harmony.unpack200.SegmentHeader#read(InputStream)"
    ],
    "org.apache.commons.compress.archivers.ArchiveStreamFactory#createArchiveInputStream(InputStream)": [
        "org.apache.commons.compress.archivers.ArchiveStreamFactory#createArchiveInputStream(String,InputStream)",
        "org.apache.commons.compress.archivers.ArchiveStreamFactory.detect(InputStream)"
    ],
    "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.toEntryName(Path,String,LinkOption[]...)": ["org.apache.commons.compress.archivers.zip.ZipArchiveEntry.toDirectoryEntryName(String)"],
    "org.apache.commons.compress.archivers.dump.DumpArchiveInputStream#DumpArchiveInputStream(InputStream)": ["org.apache.commons.compress.archivers.dump.DumpArchiveInputStream#DumpArchiveInputStream(InputStream,String)"],
    "org.apache.commons.compress.harmony.unpack200.bytecode.RuntimeVisibleorInvisibleAnnotationsAttribute#resolve(ClassConstantPool)": [
        "org.apache.commons.compress.harmony.unpack200.bytecode.Attribute#resolve(ClassConstantPool)",
        "org.apache.commons.compress.harmony.unpack200.bytecode.AnnotationsAttribute.Annotation#resolve(ClassConstantPool)"
    ],
    "org.apache.commons.compress.harmony.pack200.ClassBands#removeCurrentClass()": [
        "org.apache.commons.compress.harmony.pack200.IntList#size()",
        "org.apache.commons.compress.harmony.pack200.IntList#remove(int)",
        "org.apache.commons.compress.harmony.pack200.MetadataBandGroup#removeLatest()"
    ],
    "org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStream#readNextBlock()": [
        "org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStream#readOneByte()",
        "org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStream#readStreamIdentifier()",
        "org.apache.commons.compress.compressors.snappy.SnappyCompressorInputStream#SnappyCompressorInputStream(InputStream,int)",
        "org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStream#readSize()",
        "org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStream#skipBlock()",
        "org.apache.commons.compress.compressors.CompressorInputStream#pushedBackBytes(long)",
        "org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStream#readCrc()",
        "org.apache.commons.compress.compressors.snappy.FramedSnappyDialect#usesChecksumWithCompressedChunks()",
        "org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStream#readNextBlock()",
        "org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStream.<staticinit>()",
        "org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStream#verifyLastChecksumAndReset()",
        "org.apache.commons.compress.compressors.CompressorInputStream#getBytesRead()",
        "org.apache.commons.compress.compressors.CompressorInputStream#count(long)",
        "org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStream.unmask(long)",
        "org.apache.commons.compress.utils.BoundedInputStream#BoundedInputStream(InputStream,long)"
    ],
    "org.apache.commons.compress.compressors.z.ZCompressorInputStream#readNextCode()": ["org.apache.commons.compress.compressors.lzw.LZWInputStream#readNextCode()"],
    "org.apache.commons.compress.archivers.zip.ZipArchiveEntry#getUnparseableOnly()": ["org.apache.commons.compress.archivers.zip.ExtraFieldUtils.<staticinit>()"],
    "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream#addUnicodeExtraFields(ZipArchiveEntry,boolean,ByteBuffer)": [
        "org.apache.commons.compress.archivers.zip.UnicodeCommentExtraField#UnicodeCommentExtraField(String,byte[],int,int)",
        "org.apache.commons.compress.archivers.zip.UnicodePathExtraField#UnicodePathExtraField(String,byte[],int,int)",
        "org.apache.commons.compress.archivers.tar.TarUtils$ZipEncoding$1#encode(String)",
        "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.UnicodeExtraFieldPolicy.<staticinit>()",
        "org.apache.commons.compress.archivers.tar.TarUtils$ZipEncoding$1#canEncode(String)",
        "org.apache.commons.compress.archivers.zip.ZipArchiveEntry#getName()",
        "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream#getEntryEncoding(ZipArchiveEntry)",
        "org.apache.commons.compress.archivers.zip.NioZipEncoding#canEncode(String)",
        "org.apache.commons.compress.archivers.zip.NioZipEncoding#encode(String)",
        "org.apache.commons.compress.archivers.zip.ZipArchiveEntry#addExtraField(ZipExtraField)"
    ],
    "org.apache.commons.compress.harmony.pack200.MetadataBandGroup#removeOnePair()": [
        "org.apache.commons.compress.harmony.pack200.IntList#size()",
        "org.apache.commons.compress.harmony.pack200.IntList#remove(int)",
        "org.apache.commons.compress.harmony.pack200.MetadataBandGroup#removeOnePair()"
    ],
    "org.apache.commons.compress.archivers.zip.PKWareExtraHeader#PKWareExtraHeader(ZipShort)": ["org.apache.commons.compress.archivers.zip.PKWareExtraHeader.<init>()"],
    "org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream#markSupported()": [
        "org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream#markSupported()",
        "org.apache.commons.compress.compressors.brotli.BrotliCompressorInputStream#markSupported()",
        "org.apache.commons.compress.compressors.zstandard.ZstdCompressorInputStream#markSupported()",
        "org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream#getInputStream()"
    ],
    "org.apache.commons.compress.archivers.zip.ZipFile#sanityCheckLFHOffset(ZipArchiveEntry)": [
        "org.apache.commons.compress.archivers.zip.ZipArchiveEntry#getName()",
        "org.apache.commons.compress.archivers.zip.ZipArchiveEntry#getDiskNumberStart()",
        "org.apache.commons.compress.archivers.zip.ZipArchiveEntry#getLocalHeaderOffset()"
    ],
    "org.apache.commons.compress.compressors.snappy.SnappyCompressorOutputStream#writeBackReferenceWithOneOffsetByte(int,int)": [
        "org.apache.commons.compress.archivers.sevenz.AES256SHA256Decoder.AES256SHA256DecoderOutputStream#write(int)",
        "org.apache.commons.compress.compressors.snappy.SnappyCompressorOutputStream#write(int)",
        "org.apache.commons.compress.archivers.sevenz.Coders.DeflateDecoder.DeflateDecoderOutputStream#write(int)",
        "org.apache.commons.compress.compressors.lz4.BlockLZ4CompressorOutputStream#write(int)",
        "org.apache.commons.compress.compressors.deflate.DeflateCompressorOutputStream#write(int)",
        "org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorOutputStream#write(int)",
        "org.apache.commons.compress.compressors.lzma.LZMACompressorOutputStream#write(int)",
        "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream#write(int)",
        "org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream#write(int)",
        "org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorOutputStream#write(int)",
        "org.apache.commons.compress.compressors.xz.XZCompressorOutputStream#write(int)",
        "org.apache.commons.compress.utils.FixedLengthBlockOutputStream#write(int)",
        "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.OutputStreamWrapper#write(int)",
        "org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream#write(int)",
        "org.apache.commons.compress.archivers.ArchiveOutputStream#write(int)",
        "org.apache.commons.compress.archivers.zip.ZipSplitOutputStream#write(int)",
        "org.apache.commons.compress.compressors.zstandard.ZstdCompressorOutputStream#write(int)",
        "org.apache.commons.compress.archivers.zip.RandomAccessOutputStream#write(int)",
        "org.apache.commons.compress.compressors.snappy.SnappyCompressorOutputStream.<staticinit>()"
    ],
    "org.apache.commons.compress.archivers.sevenz.SevenZFile#SevenZFile(SeekableByteChannel,String,byte[],boolean,SevenZFileOptions)": [
        "org.apache.commons.compress.archivers.sevenz.SevenZFileOptions#getUseDefaultNameForUnnamedEntries()",
        "org.apache.commons.compress.archivers.sevenz.SevenZFile#SevenZFile(SeekableByteChannel,String,byte[],boolean,int,boolean,boolean)",
        "org.apache.commons.compress.archivers.sevenz.SevenZFileOptions#getTryToRecoverBrokenArchives()",
        "org.apache.commons.compress.archivers.sevenz.SevenZFileOptions#getMaxMemoryLimitInKb()"
    ],
    "org.apache.commons.compress.archivers.dump.InvalidFormatException#InvalidFormatException(long)": [
        "org.apache.commons.compress.archivers.dump.DumpArchiveException#DumpArchiveException(String)",
        "org.apache.commons.compress.archivers.dump.InvalidFormatException.<init>()"
    ],
    "org.apache.commons.compress.harmony.unpack200.bytecode.forms.SuperInitMethodRefForm#SuperInitMethodRefForm(int,String,int[])": [
        "org.apache.commons.compress.harmony.unpack200.bytecode.forms.SuperInitMethodRefForm.<init>()",
        "org.apache.commons.compress.harmony.unpack200.bytecode.forms.InitMethodReferenceForm#InitMethodReferenceForm(int,String,int[])"
    ],
    "org.apache.commons.compress.archivers.zip.ZipArchiveEntry#ZipArchiveEntry(Function<ZipShort, ZipExtraField>,String)": [
        "org.apache.commons.compress.archivers.zip.ZipArchiveEntry#setName(String)",
        "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.<init>()"
    ],
    "org.apache.commons.compress.harmony.unpack200.AttributeLayoutMap#add(AttributeLayout,NewAttributeBands)": ["org.apache.commons.compress.harmony.unpack200.AttributeLayoutMap#add(AttributeLayout)"],
    "org.apache.commons.compress.archivers.dump.TapeInputStream#readBlock(boolean)": [
        "org.apache.commons.compress.archivers.dump.TapeInputStream#readRange(int)",
        "org.apache.commons.compress.archivers.dump.DumpArchiveConstants.COMPRESSION_TYPE.<staticinit>()",
        "org.apache.commons.compress.archivers.dump.ShortFileException#ShortFileException()",
        "org.apache.commons.compress.archivers.dump.DumpArchiveConstants.COMPRESSION_TYPE.find(int)",
        "org.apache.commons.compress.archivers.dump.UnsupportedCompressionAlgorithmException#UnsupportedCompressionAlgorithmException(String)",
        "org.apache.commons.compress.archivers.dump.UnsupportedCompressionAlgorithmException#UnsupportedCompressionAlgorithmException()",
        "org.apache.commons.compress.archivers.dump.DumpArchiveException#DumpArchiveException(String,Throwable)",
        "org.apache.commons.compress.archivers.dump.TapeInputStream#readFully(byte[],int,int)",
        "org.apache.commons.compress.archivers.dump.DumpArchiveUtil.convert32(byte[],int)"
    ],
    "org.apache.commons.compress.archivers.zip.ZipEncodingHelper.getZipEncoding(Charset)": [
        "org.apache.commons.compress.archivers.zip.NioZipEncoding#NioZipEncoding(Charset,boolean)",
        "org.apache.commons.compress.archivers.zip.ZipEncodingHelper.isUTF8(Charset)"
    ],
    "org.apache.commons.compress.harmony.unpack200.SegmentHeader#decodeScalar(String,InputStream,BHSDCodec,int)": [
        "org.apache.commons.compress.harmony.unpack200.Segment.<staticinit>()",
        "org.apache.commons.compress.harmony.pack200.BHSDCodec#decodeInts(int,InputStream)",
        "org.apache.commons.compress.harmony.unpack200.Segment#log(int,String)"
    ],
    "org.apache.commons.compress.harmony.pack200.NewAttributeBands#readBody(StringReader)": ["org.apache.commons.compress.harmony.pack200.NewAttributeBands#readNextLayoutElement(StringReader)"],
    "org.apache.commons.compress.archivers.sevenz.SevenZMethodConfiguration#SevenZMethodConfiguration(SevenZMethod)": ["org.apache.commons.compress.archivers.sevenz.SevenZMethodConfiguration#SevenZMethodConfiguration(SevenZMethod,Object)"],
    "org.apache.commons.compress.harmony.unpack200.AttributeLayout#getValue(long,String,SegmentConstantPool)": ["org.apache.commons.compress.harmony.unpack200.AttributeLayout.getValue(String,long,SegmentConstantPool)"],
    "org.apache.commons.compress.harmony.pack200.PopulationCodec#decode(InputStream,long)": ["org.apache.commons.compress.harmony.pack200.Pack200Exception#Pack200Exception(String)"],
    "org.apache.commons.compress.harmony.unpack200.bytecode.forms.ThisInitMethodRefForm#ThisInitMethodRefForm(int,String,int[])": [
        "org.apache.commons.compress.harmony.unpack200.bytecode.forms.InitMethodReferenceForm#InitMethodReferenceForm(int,String,int[])",
        "org.apache.commons.compress.harmony.unpack200.bytecode.forms.ThisInitMethodRefForm.<init>()"
    ],
    "org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp#getCentralDirectoryLength()": ["org.apache.commons.compress.archivers.zip.ZipShort#ZipShort(int)"],
    "org.apache.commons.compress.harmony.unpack200.NewAttributeBands.Callable#addToAttribute(int,NewAttribute)": [
        "org.apache.commons.compress.harmony.unpack200.NewAttributeBands.UnionCase#addToAttribute(int,NewAttribute)",
        "org.apache.commons.compress.harmony.unpack200.NewAttributeBands.Call#addToAttribute(int,NewAttribute)",
        "org.apache.commons.compress.harmony.unpack200.NewAttributeBands.Integral#addToAttribute(int,NewAttribute)",
        "org.apache.commons.compress.harmony.unpack200.NewAttributeBands.Union#addToAttribute(int,NewAttribute)",
        "org.apache.commons.compress.harmony.unpack200.NewAttributeBands.Callable#addToAttribute(int,NewAttribute)",
        "org.apache.commons.compress.harmony.unpack200.NewAttributeBands.Reference#addToAttribute(int,NewAttribute)",
        "org.apache.commons.compress.harmony.unpack200.NewAttributeBands.Replication#addToAttribute(int,NewAttribute)"
    ],
    "org.apache.commons.compress.harmony.pack200.Archive#estimateSize(PackingFile)": ["org.apache.commons.compress.harmony.pack200.Archive.PackingFile#getName()"],
    "org.apache.commons.compress.harmony.unpack200.BandSet#parseCPMethodRefReferences(String,InputStream,BHSDCodec,int)": [
        "org.apache.commons.compress.harmony.unpack200.Segment#getCpBands()",
        "org.apache.commons.compress.harmony.unpack200.BandSet#decodeBandInt(String,InputStream,BHSDCodec,int)",
        "org.apache.commons.compress.harmony.unpack200.CpBands#cpMethodValue(int)"
    ],
    "org.apache.commons.compress.harmony.unpack200.BandSet#parseFlags(String,InputStream,int[],BHSDCodec,boolean)": ["org.apache.commons.compress.harmony.unpack200.BandSet#parseFlags(String,InputStream,int[],BHSDCodec,BHSDCodec)"],
    "org.apache.commons.compress.archivers.arj.ArjArchiveInputStream#ArjArchiveInputStream(InputStream,String)": [
        "org.apache.commons.compress.archivers.ArchiveException#ArchiveException(String,Exception)",
        "org.apache.commons.compress.archivers.ArchiveInputStream#ArchiveInputStream(InputStream,String)",
        "org.apache.commons.compress.archivers.arj.ArjArchiveInputStream#readMainHeader()",
        "org.apache.commons.compress.archivers.arj.ArjArchiveInputStream.<init>()",
        "org.apache.commons.compress.archivers.ArchiveException#ArchiveException(String)",
        "org.apache.commons.compress.archivers.arj.MainHeader.Flags.<staticinit>()"
    ],
    "org.apache.commons.compress.harmony.pack200.AttributeDefinitionBands#addAttributeDefinitions(Map<String, String>,int[],int)": [
        "org.apache.commons.compress.harmony.pack200.CpBands#getCPUtf8(String)",
        "org.apache.commons.compress.harmony.pack200.AttributeDefinitionBands.<staticinit>()",
        "org.apache.commons.compress.harmony.pack200.AttributeDefinitionBands.AttributeDefinition#AttributeDefinition(int,int,CPUTF8,CPUTF8)"
    ],
    "org.apache.commons.compress.archivers.cpio.CpioArchiveEntry#getDeviceMaj()": ["org.apache.commons.compress.archivers.cpio.CpioArchiveEntry#checkNewFormat()"],
    "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream#failForBigNumberWithPosixMessage(String,long,long)": ["org.apache.commons.compress.archivers.tar.TarArchiveOutputStream#failForBigNumber(String,long,long,String)"],
    "org.apache.commons.compress.archivers.sevenz.Coders.DeflateDecoder.DeflateDecoderOutputStream#DeflateDecoderOutputStream(DeflaterOutputStream,Deflater)": ["org.apache.commons.compress.archivers.sevenz.Coders.DeflateDecoder.DeflateDecoderOutputStream.<init>()"],
    "org.apache.commons.compress.harmony.unpack200.bytecode.forms.LabelForm#LabelForm(int,String,int[],boolean)": ["org.apache.commons.compress.harmony.unpack200.bytecode.forms.LabelForm#LabelForm(int,String,int[])"],
    "org.apache.commons.compress.harmony.pack200.NewAttribute#isUnknown(int)": ["org.apache.commons.compress.harmony.pack200.AttributeDefinitionBands.<staticinit>()"],
    "org.apache.commons.compress.compressors.lzma.LZMAUtils.getCompressedFileName(String)": [
        "org.apache.commons.compress.compressors.FileNameUtil#getCompressedFileName(String)",
        "org.apache.commons.compress.compressors.lzma.LZMAUtils.<staticinit>()"
    ],
    "org.apache.commons.compress.harmony.pack200.NewAttribute.StripAttribute#StripAttribute(String,int)": [
        "org.apache.commons.compress.harmony.pack200.NewAttribute.StripAttribute.<init>()",
        "org.apache.commons.compress.harmony.pack200.NewAttribute#NewAttribute(String,String,int)"
    ],
    "org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorOutputStream#finish()": [
        "org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorOutputStream#writeTrailer()",
        "org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorOutputStream#flushBlock()"
    ],
    "org.apache.commons.compress.harmony.unpack200.CpBands#cpNameAndTypeValue(int)": [
        "org.apache.commons.compress.harmony.unpack200.bytecode.CPNameAndType#CPNameAndType(CPUTF8,CPUTF8,int)",
        "org.apache.commons.compress.harmony.unpack200.CpBands#cpSignatureValue(int)",
        "org.apache.commons.compress.harmony.unpack200.CpBands#cpUTF8Value(int)"
    ],
    "org.apache.commons.compress.harmony.unpack200.bytecode.CPClass#resolve(ClassConstantPool)": [
        "org.apache.commons.compress.harmony.unpack200.bytecode.ClassConstantPool#indexOf(ClassFileEntry)",
        "org.apache.commons.compress.harmony.unpack200.bytecode.ClassFileEntry#resolve(ClassConstantPool)"
    ],
    "org.apache.commons.compress.harmony.unpack200.bytecode.forms.ByteCodeForm#ByteCodeForm(int,String)": ["org.apache.commons.compress.harmony.unpack200.bytecode.forms.ByteCodeForm#ByteCodeForm(int,String,int[])"],
    "org.apache.commons.compress.compressors.bzip2.BlockSort#fallbackSort(int[],byte[],int)": [
        "org.apache.commons.compress.compressors.bzip2.BlockSort#fallbackQSort3(int[],int[],int,int)",
        "org.apache.commons.compress.compressors.bzip2.BlockSort#getEclass()"
    ],
    "org.apache.commons.compress.utils.BitInputStream#readCachedBits(int)": ["org.apache.commons.compress.utils.BitInputStream.<staticinit>()"],
    "org.apache.commons.compress.archivers.ArchiveInputStream#ArchiveInputStream(InputStream,String)": ["org.apache.commons.compress.archivers.ArchiveInputStream#ArchiveInputStream(InputStream,Charset)"],
    "org.apache.commons.compress.harmony.pack200.Segment#passCurrentClass()": ["org.apache.commons.compress.harmony.pack200.Segment.PassException.<init>()"],
    "org.apache.commons.compress.archivers.zip.ExtraFieldUtils.parse(byte[],boolean,UnparseableExtraField)$ExtraFieldParsingBehavior$1#createExtraField(ZipShort)": ["org.apache.commons.compress.archivers.zip.ExtraFieldUtils.createExtraField(ZipShort)"],
    "org.apache.commons.compress.archivers.zip.ZipFile.newReadByteChannel(Path)": ["org.apache.commons.compress.archivers.zip.ZipFile.<staticinit>()"],
    "org.apache.commons.compress.compressors.snappy.SnappyCompressorOutputStream#writeLittleEndian(int,int)": ["org.apache.commons.compress.utils.ByteUtils.toLittleEndian(ByteConsumer,long,int)"],
    "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile#setupFileOutputStream()": [
        "org.apache.commons.compress.archivers.sevenz.SevenZMethodConfiguration#getMethod()",
        "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.OutputStreamWrapper.<init>()",
        "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile#getContentMethods(SevenZArchiveEntry)",
        "org.apache.commons.compress.archivers.sevenz.SevenZMethodConfiguration#getOptions()",
        "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile#setupFileOutputStream()$CountingOutputStream$2.<init>()",
        "org.apache.commons.compress.archivers.sevenz.Coders.addEncoder(OutputStream,SevenZMethod,Object)"
    ],
    "org.apache.commons.compress.archivers.zip.FileRandomAccessOutputStream#write(byte[],int,int)": ["org.apache.commons.compress.archivers.zip.ZipIoUtil.writeFully(SeekableByteChannel,ByteBuffer)"],
    "org.apache.commons.compress.compressors.lz77support.AbstractLZ77CompressorInputStream#readOneByte()": ["org.apache.commons.compress.compressors.CompressorInputStream#count(int)"],
    "org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp#getAccessJavaTime()": ["org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp.zipLongToDate(ZipLong)"],
    "org.apache.commons.compress.harmony.pack200.BandSet#cpEntryOrNullListToArray(List<? extends ConstantPoolEntry>)": ["org.apache.commons.compress.harmony.pack200.ConstantPoolEntry#getIndex()"],
    "org.apache.commons.compress.archivers.ArchiveOutputStream#count(int)": ["org.apache.commons.compress.archivers.ArchiveOutputStream#count(long)"],
    "org.apache.commons.compress.harmony.pack200.BcBands#visitMethodInsn(int,String,String,String)": [
        "org.apache.commons.compress.harmony.pack200.IntList#get(int)",
        "org.apache.commons.compress.harmony.pack200.CpBands#getCPMethod(String,String,String)",
        "org.apache.commons.compress.harmony.pack200.BcBands.<staticinit>()",
        "org.apache.commons.compress.harmony.pack200.IntList#add(int)",
        "org.apache.commons.compress.harmony.pack200.IntList#remove(int)",
        "org.apache.commons.compress.harmony.pack200.IntList#size()",
        "org.apache.commons.compress.harmony.pack200.BcBands#updateRenumbering()",
        "org.apache.commons.compress.harmony.pack200.CpBands#getCPIMethod(String,String,String)"
    ],
    "org.apache.commons.compress.harmony.unpack200.bytecode.CPFloat#writeBody(DataOutputStream)": ["org.apache.commons.compress.harmony.unpack200.bytecode.CPConstantNumber#getNumber()"],
    "org.apache.commons.compress.harmony.unpack200.NewAttributeBands.Reference#Reference(String)": [
        "org.apache.commons.compress.harmony.unpack200.NewAttributeBands.LayoutElement.<init>()",
        "org.apache.commons.compress.harmony.unpack200.NewAttributeBands.Reference.<init>()",
        "org.apache.commons.compress.harmony.unpack200.NewAttributeBands.LayoutElement#getLength(char)"
    ],
    "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream#isTooLargeForZip32(ZipArchiveEntry)": [
        "org.apache.commons.compress.archivers.zip.ZipArchiveEntry#getSize()",
        "org.apache.commons.compress.archivers.zip.ZipConstants.<staticinit>()"
    ],
    "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream#flushDeflater()": [
        "org.apache.commons.compress.archivers.zip.ZipArchiveEntry#getMethod()",
        "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.<staticinit>()",
        "org.apache.commons.compress.archivers.zip.StreamCompressor#flushDeflater()"
    ],
    "org.apache.commons.compress.archivers.sevenz.Archive.<init>()": [
        "org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.<staticinit>()",
        "org.apache.commons.compress.archivers.sevenz.Folder.<staticinit>()"
    ],
    "org.apache.commons.compress.harmony.pack200.NewAttributeBands.Reference#addAttributeToBand(NewAttribute,InputStream)": [
        "org.apache.commons.compress.harmony.pack200.NewAttribute#readClass(int)",
        "org.apache.commons.compress.harmony.pack200.CpBands#getCPSignature(String)",
        "org.apache.commons.compress.harmony.pack200.NewAttributeBands#readInteger(int,InputStream)",
        "org.apache.commons.compress.harmony.pack200.NewAttribute#readConst(int)",
        "org.apache.commons.compress.harmony.pack200.CpBands#getConstant(Object)",
        "org.apache.commons.compress.harmony.pack200.CpBands#getCPClass(String)",
        "org.apache.commons.compress.harmony.pack200.NewAttribute#readUTF8(int)",
        "org.apache.commons.compress.harmony.pack200.CpBands#getCPUtf8(String)"
    ],
    "org.apache.commons.compress.harmony.unpack200.AttributeLayout#AttributeLayout(String,int,String,int,boolean)": [
        "org.apache.commons.compress.harmony.pack200.Pack200Exception#Pack200Exception(String)",
        "org.apache.commons.compress.harmony.unpack200.AttributeLayout.<staticinit>()",
        "org.apache.commons.compress.harmony.unpack200.AttributeLayout.<init>()"
    ],
    "org.apache.commons.compress.archivers.sevenz.CLI.Mode$Mode$1#getContentMethods(SevenZArchiveEntry)": [
        "org.apache.commons.compress.archivers.sevenz.SevenZMethodConfiguration#getMethod()",
        "org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry#getContentMethods()",
        "org.apache.commons.compress.archivers.sevenz.SevenZMethodConfiguration#getOptions()"
    ],
    "org.apache.commons.compress.compressors.snappy.SnappyCompressorOutputStream#SnappyCompressorOutputStream(OutputStream,long,int)": [
        "org.apache.commons.compress.compressors.snappy.SnappyCompressorOutputStream.createParameterBuilder(int)",
        "org.apache.commons.compress.compressors.snappy.SnappyCompressorOutputStream#SnappyCompressorOutputStream(OutputStream,long,Parameters)",
        "org.apache.commons.compress.compressors.lz77support.Parameters.Builder#build()"
    ],
    "org.apache.commons.compress.archivers.zip.ZipArchiveEntry#ZipArchiveEntry(ZipArchiveEntry)": [
        "org.apache.commons.compress.archivers.zip.ZipArchiveEntry#getAllExtraFieldsNoCopy()",
        "org.apache.commons.compress.archivers.zip.ZipArchiveEntry#getInternalAttributes()",
        "org.apache.commons.compress.archivers.zip.ZipArchiveEntry#setInternalAttributes(int)",
        "org.apache.commons.compress.archivers.zip.ZipArchiveEntry#setPlatform(int)",
        "org.apache.commons.compress.archivers.zip.ZipArchiveEntry#setExternalAttributes(long)",
        "org.apache.commons.compress.archivers.zip.ZipArchiveEntry#setGeneralPurposeBit(GeneralPurposeBit)",
        "org.apache.commons.compress.archivers.zip.ZipArchiveEntry#ZipArchiveEntry(ZipEntry)",
        "org.apache.commons.compress.archivers.zip.GeneralPurposeBit#clone()",
        "org.apache.commons.compress.archivers.zip.ZipArchiveEntry#getGeneralPurposeBit()",
        "org.apache.commons.compress.archivers.zip.ZipArchiveEntry#setExtraFields(ZipExtraField[])",
        "org.apache.commons.compress.archivers.zip.ZipArchiveEntry#getExternalAttributes()",
        "org.apache.commons.compress.archivers.zip.ZipArchiveEntry#getPlatform()"
    ],
    "org.apache.commons.compress.compressors.snappy.SnappyCompressorInputStream#SnappyCompressorInputStream(InputStream)": [
        "org.apache.commons.compress.compressors.snappy.SnappyCompressorInputStream#SnappyCompressorInputStream(InputStream,int)",
        "org.apache.commons.compress.compressors.snappy.SnappyCompressorInputStream.<staticinit>()"
    ],
    "org.apache.commons.compress.compressors.lz77support.LZ77Compressor.BackReference#getType()": ["org.apache.commons.compress.compressors.lz77support.LZ77Compressor.Block.BlockType.<staticinit>()"],
    "org.apache.commons.compress.archivers.zip.PKWareExtraHeader.HashAlgorithm#HashAlgorithm(int)": ["org.apache.commons.compress.archivers.zip.PKWareExtraHeader.HashAlgorithm.<init>()"],
    "org.apache.commons.compress.harmony.unpack200.bytecode.AnnotationDefaultAttribute#AnnotationDefaultAttribute(ElementValue)": [
        "org.apache.commons.compress.harmony.unpack200.bytecode.AnnotationDefaultAttribute.<init>()",
        "org.apache.commons.compress.harmony.unpack200.bytecode.AnnotationDefaultAttribute.<staticinit>()",
        "org.apache.commons.compress.harmony.unpack200.bytecode.AnnotationsAttribute#AnnotationsAttribute(CPUTF8)"
    ],
    "org.apache.commons.compress.harmony.unpack200.bytecode.SourceFileAttribute#getNestedClassFileEntries()": ["org.apache.commons.compress.harmony.unpack200.bytecode.Attribute#getAttributeName()"],
    "org.apache.commons.compress.archivers.arj.ArjArchiveEntry#equals(Object)": ["org.apache.commons.compress.archivers.arj.LocalFileHeader#equals(Object)"],
    "org.apache.commons.compress.archivers.zip.NioZipEncoding#NioZipEncoding(Charset,boolean)": ["org.apache.commons.compress.archivers.zip.NioZipEncoding.<init>()"],
    "org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream#available()": [
        "org.apache.commons.compress.compressors.deflate.DeflateCompressorInputStream#available()",
        "org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream#available()",
        "org.apache.commons.compress.compressors.brotli.BrotliCompressorInputStream#available()",
        "org.apache.commons.compress.compressors.xz.XZCompressorInputStream#available()",
        "org.apache.commons.compress.compressors.lz77support.AbstractLZ77CompressorInputStream#available()",
        "org.apache.commons.compress.compressors.deflate64.Deflate64CompressorInputStream#available()",
        "org.apache.commons.compress.compressors.zstandard.ZstdCompressorInputStream#available()",
        "org.apache.commons.compress.compressors.lzma.LZMACompressorInputStream#available()",
        "org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream#getInputStream()",
        "org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStream#available()"
    ],
    "org.apache.commons.compress.archivers.tar.TarFile.BoundedTarEntryInputStream#BoundedTarEntryInputStream(TarArchiveEntry,SeekableByteChannel)": [
        "org.apache.commons.compress.archivers.tar.TarArchiveEntry#getDataOffset()",
        "org.apache.commons.compress.utils.MultiReadOnlySeekableByteChannel#size()",
        "org.apache.commons.compress.archivers.tar.TarFile.BoundedTarEntryInputStream.<init>()",
        "org.apache.commons.compress.archivers.tar.TarArchiveEntry#getRealSize()",
        "org.apache.commons.compress.archivers.tar.TarArchiveEntry#getSize()",
        "org.apache.commons.compress.utils.SeekableInMemoryByteChannel#size()",
        "org.apache.commons.compress.utils.BoundedArchiveInputStream#BoundedArchiveInputStream(long,long)"
    ],
    "org.apache.commons.compress.harmony.pack200.Segment.SegmentMethodVisitor#visitLdcInsn(Object)": ["org.apache.commons.compress.harmony.pack200.BcBands#visitLdcInsn(Object)"],
    "org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream#available()": ["org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream#ensureOpen()"],
    "org.apache.commons.compress.archivers.tar.TarArchiveEntry#TarArchiveEntry(Path,String,LinkOption[]...)": [
        "org.apache.commons.compress.archivers.tar.TarArchiveEntry.normalizeFileName(String,boolean)",
        "org.apache.commons.compress.utils.IOUtils.<staticinit>()",
        "org.apache.commons.compress.archivers.tar.TarArchiveEntry#readFileMode(Path,String,LinkOption[]...)",
        "org.apache.commons.compress.archivers.tar.TarArchiveEntry.<init>()"
    ],
    "org.apache.commons.compress.harmony.pack200.ClassBands#addLineNumber(int,Label)": [
        "org.apache.commons.compress.harmony.pack200.IntList#size()",
        "org.apache.commons.compress.harmony.pack200.IntList#add(int)",
        "org.apache.commons.compress.harmony.pack200.IntList#increment(int)"
    ],
    "org.apache.commons.compress.archivers.zip.X7875_NewUnix#getUID()": ["org.apache.commons.compress.archivers.zip.ZipUtil.bigToLong(BigInteger)"],
    "org.apache.commons.compress.archivers.zip.ZipEightByteInteger.<staticinit>()": ["org.apache.commons.compress.archivers.zip.ZipEightByteInteger#ZipEightByteInteger(long)"],
    "org.apache.commons.compress.archivers.sevenz.DeltaDecoder#getOptionsAsProperties(Object)": ["org.apache.commons.compress.archivers.sevenz.AbstractCoder.toInt(Object,int)"],
    "org.apache.commons.compress.archivers.cpio.CpioUtil.fileType(long)": ["org.apache.commons.compress.archivers.cpio.CpioConstants.<staticinit>()"],
    "org.apache.commons.compress.archivers.tar.TarArchiveEntry#evaluateType(Map<String, String>,byte[])": [
        "org.apache.commons.compress.archivers.tar.TarArchiveEntry#isXstar(Map<String, String>,byte[])",
        "org.apache.commons.compress.archivers.tar.TarConstants.<staticinit>()",
        "org.apache.commons.compress.utils.ArchiveUtils.matchAsciiBuffer(String,byte[],int,int)"
    ],
    "org.apache.commons.compress.archivers.zip.ZipArchiveEntry#mergeExtraFields(ZipExtraField[],boolean)": [
        "org.apache.commons.compress.archivers.zip.ResourceAlignmentExtraField#parseFromCentralDirectoryData(byte[],int,int)",
        "org.apache.commons.compress.archivers.zip.JarMarker#getLocalFileDataData()",
        "org.apache.commons.compress.archivers.zip.PKWareExtraHeader#getCentralDirectoryData()",
        "org.apache.commons.compress.archivers.zip.X000A_NTFS#parseFromLocalFileData(byte[],int,int)",
        "org.apache.commons.compress.archivers.zip.JarMarker#getHeaderId()",
        "org.apache.commons.compress.archivers.zip.PKWareExtraHeader#getHeaderId()",
        "org.apache.commons.compress.archivers.zip.UnrecognizedExtraField#getCentralDirectoryData()",
        "org.apache.commons.compress.archivers.zip.ResourceAlignmentExtraField#getLocalFileDataData()",
        "org.apache.commons.compress.archivers.zip.JarMarker#parseFromLocalFileData(byte[],int,int)",
        "org.apache.commons.compress.archivers.zip.ZipArchiveEntry#internalRemoveExtraField(ZipShort)",
        "org.apache.commons.compress.archivers.zip.ZipArchiveEntry#internalAddExtraField(ZipExtraField)",
        "org.apache.commons.compress.archivers.zip.ResourceAlignmentExtraField#getCentralDirectoryData()",
        "org.apache.commons.compress.archivers.zip.X000A_NTFS#getHeaderId()",
        "org.apache.commons.compress.archivers.zip.UnrecognizedExtraField#getLocalFileDataData()",
        "org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField#parseFromLocalFileData(byte[],int,int)",
        "org.apache.commons.compress.archivers.zip.X7875_NewUnix#getLocalFileDataData()",
        "org.apache.commons.compress.archivers.zip.ResourceAlignmentExtraField#parseFromLocalFileData(byte[],int,int)",
        "org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp#getCentralDirectoryData()",
        "org.apache.commons.compress.archivers.zip.UnicodeCommentExtraField#getHeaderId()",
        "org.apache.commons.compress.archivers.zip.PKWareExtraHeader#getLocalFileDataData()",
        "org.apache.commons.compress.archivers.zip.PKWareExtraHeader#parseFromLocalFileData(byte[],int,int)",
        "org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField#getLocalFileDataData()",
        "org.apache.commons.compress.archivers.zip.UnrecognizedExtraField#parseFromLocalFileData(byte[],int,int)",
        "org.apache.commons.compress.archivers.zip.AsiExtraField#getCentralDirectoryData()",
        "org.apache.commons.compress.archivers.zip.X7875_NewUnix#getCentralDirectoryData()",
        "org.apache.commons.compress.archivers.zip.ZipArchiveEntry#setExtraFields(ZipExtraField[])",
        "org.apache.commons.compress.archivers.zip.PKWareExtraHeader#parseFromCentralDirectoryData(byte[],int,int)",
        "org.apache.commons.compress.archivers.zip.ResourceAlignmentExtraField#getHeaderId()",
        "org.apache.commons.compress.archivers.zip.AsiExtraField#parseFromCentralDirectoryData(byte[],int,int)",
        "org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField#parseFromCentralDirectoryData(byte[],int,int)",
        "org.apache.commons.compress.archivers.zip.X0016_CertificateIdForCentralDirectory#parseFromCentralDirectoryData(byte[],int,int)",
        "org.apache.commons.compress.archivers.zip.UnicodePathExtraField#getHeaderId()",
        "org.apache.commons.compress.archivers.zip.JarMarker#parseFromCentralDirectoryData(byte[],int,int)",
        "org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp#parseFromCentralDirectoryData(byte[],int,int)",
        "org.apache.commons.compress.archivers.zip.UnrecognizedExtraField#getHeaderId()",
        "org.apache.commons.compress.archivers.zip.JarMarker#getCentralDirectoryData()",
        "org.apache.commons.compress.archivers.zip.UnrecognizedExtraField.<init>()",
        "org.apache.commons.compress.archivers.zip.UnparseableExtraFieldData#parseFromLocalFileData(byte[],int,int)",
        "org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp#parseFromLocalFileData(byte[],int,int)",
        "org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField#parseFromCentralDirectoryData(byte[],int,int)",
        "org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField#getLocalFileDataData()",
        "org.apache.commons.compress.archivers.zip.UnrecognizedExtraField#parseFromCentralDirectoryData(byte[],int,int)",
        "org.apache.commons.compress.archivers.zip.UnrecognizedExtraField#setHeaderId(ZipShort)",
        "org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField#getCentralDirectoryData()",
        "org.apache.commons.compress.archivers.zip.UnrecognizedExtraField#setLocalFileDataData(byte[])",
        "org.apache.commons.compress.archivers.zip.X000A_NTFS#parseFromCentralDirectoryData(byte[],int,int)",
        "org.apache.commons.compress.archivers.zip.UnparseableExtraFieldData#getCentralDirectoryData()",
        "org.apache.commons.compress.archivers.zip.ZipArchiveEntry#setExtra()",
        "org.apache.commons.compress.archivers.zip.UnparseableExtraFieldData#getHeaderId()",
        "org.apache.commons.compress.archivers.zip.AsiExtraField#getHeaderId()",
        "org.apache.commons.compress.archivers.zip.ZipArchiveEntry#getExtraField(ZipShort)",
        "org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField#parseFromLocalFileData(byte[],int,int)",
        "org.apache.commons.compress.archivers.zip.AsiExtraField#getLocalFileDataData()",
        "org.apache.commons.compress.archivers.zip.X7875_NewUnix#parseFromCentralDirectoryData(byte[],int,int)",
        "org.apache.commons.compress.archivers.zip.X0017_StrongEncryptionHeader#parseFromCentralDirectoryData(byte[],int,int)",
        "org.apache.commons.compress.archivers.zip.UnrecognizedExtraField#setCentralDirectoryData(byte[])",
        "org.apache.commons.compress.archivers.zip.X0015_CertificateIdForFile#parseFromCentralDirectoryData(byte[],int,int)",
        "org.apache.commons.compress.archivers.zip.X7875_NewUnix#getHeaderId()",
        "org.apache.commons.compress.archivers.zip.X000A_NTFS#getLocalFileDataData()",
        "org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField#getCentralDirectoryData()",
        "org.apache.commons.compress.archivers.zip.UnparseableExtraFieldData#getLocalFileDataData()",
        "org.apache.commons.compress.archivers.zip.UnparseableExtraFieldData#parseFromCentralDirectoryData(byte[],int,int)",
        "org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField#getHeaderId()",
        "org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp#getHeaderId()",
        "org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp#getLocalFileDataData()",
        "org.apache.commons.compress.archivers.zip.X7875_NewUnix#parseFromLocalFileData(byte[],int,int)",
        "org.apache.commons.compress.archivers.zip.X0017_StrongEncryptionHeader#parseFromLocalFileData(byte[],int,int)",
        "org.apache.commons.compress.archivers.zip.X000A_NTFS#getCentralDirectoryData()",
        "org.apache.commons.compress.archivers.zip.AsiExtraField#parseFromLocalFileData(byte[],int,int)"
    ],
    "org.apache.commons.compress.harmony.unpack200.bytecode.AnnotationsAttribute.ElementValue#resolve(ClassConstantPool)": [
        "org.apache.commons.compress.harmony.unpack200.bytecode.CPString#resolve(ClassConstantPool)",
        "org.apache.commons.compress.harmony.unpack200.bytecode.LineNumberTableAttribute#resolve(ClassConstantPool)",
        "org.apache.commons.compress.harmony.unpack200.bytecode.RuntimeVisibleorInvisibleParameterAnnotationsAttribute#resolve(ClassConstantPool)",
        "org.apache.commons.compress.harmony.unpack200.bytecode.NewAttribute#resolve(ClassConstantPool)",
        "org.apache.commons.compress.harmony.unpack200.bytecode.LocalVariableTypeTableAttribute#resolve(ClassConstantPool)",
        "org.apache.commons.compress.harmony.unpack200.bytecode.ConstantValueAttribute#resolve(ClassConstantPool)",
        "org.apache.commons.compress.harmony.unpack200.bytecode.ByteCode#resolve(ClassConstantPool)",
        "org.apache.commons.compress.harmony.unpack200.bytecode.RuntimeVisibleorInvisibleAnnotationsAttribute#resolve(ClassConstantPool)",
        "org.apache.commons.compress.harmony.unpack200.bytecode.InnerClassesAttribute#resolve(ClassConstantPool)",
        "org.apache.commons.compress.harmony.unpack200.bytecode.AnnotationsAttribute.Annotation#resolve(ClassConstantPool)",
        "org.apache.commons.compress.harmony.unpack200.bytecode.CPMember#resolve(ClassConstantPool)",
        "org.apache.commons.compress.harmony.unpack200.bytecode.AnnotationDefaultAttribute#resolve(ClassConstantPool)",
        "org.apache.commons.compress.harmony.unpack200.bytecode.EnclosingMethodAttribute#resolve(ClassConstantPool)",
        "org.apache.commons.compress.harmony.unpack200.bytecode.ClassFileEntry#resolve(ClassConstantPool)",
        "org.apache.commons.compress.harmony.unpack200.bytecode.SourceFileAttribute#resolve(ClassConstantPool)",
        "org.apache.commons.compress.harmony.unpack200.bytecode.CPFieldRef#resolve(ClassConstantPool)",
        "org.apache.commons.compress.harmony.unpack200.bytecode.LocalVariableTableAttribute#resolve(ClassConstantPool)",
        "org.apache.commons.compress.harmony.unpack200.bytecode.CPRef#resolve(ClassConstantPool)",
        "org.apache.commons.compress.harmony.unpack200.bytecode.Attribute#resolve(ClassConstantPool)",
        "org.apache.commons.compress.harmony.unpack200.bytecode.ExceptionsAttribute#resolve(ClassConstantPool)",
        "org.apache.commons.compress.harmony.unpack200.bytecode.CodeAttribute#resolve(ClassConstantPool)",
        "org.apache.commons.compress.harmony.unpack200.bytecode.AnnotationsAttribute.ElementValue#resolve(ClassConstantPool)",
        "org.apache.commons.compress.harmony.unpack200.bytecode.ClassConstantPool#indexOf(ClassFileEntry)",
        "org.apache.commons.compress.harmony.unpack200.bytecode.CPClass#resolve(ClassConstantPool)",
        "org.apache.commons.compress.harmony.unpack200.bytecode.CPNameAndType#resolve(ClassConstantPool)",
        "org.apache.commons.compress.harmony.unpack200.bytecode.SignatureAttribute#resolve(ClassConstantPool)"
    ],
    "org.apache.commons.compress.harmony.pack200.BHSDCodec#calculateLargest()": [
        "org.apache.commons.compress.harmony.pack200.BHSDCodec#largest()",
        "org.apache.commons.compress.harmony.pack200.BHSDCodec#cardinality()",
        "org.apache.commons.compress.harmony.pack200.BHSDCodec#BHSDCodec(int,int)"
    ],
    "org.apache.commons.compress.archivers.arj.ArjArchiveEntry#getLastModifiedDate()": [
        "org.apache.commons.compress.archivers.arj.ArjArchiveEntry#isHostOsUnix()",
        "org.apache.commons.compress.archivers.zip.ZipUtil.dosToJavaTime(long)"
    ],
    "org.apache.commons.compress.harmony.unpack200.bytecode.forms.ThisMethodRefForm#context(OperandManager)": ["org.apache.commons.compress.harmony.unpack200.bytecode.OperandManager#getCurrentClass()"],
    "org.apache.commons.compress.archivers.zip.AsiExtraField#getLocalFileDataLength()": [
        "org.apache.commons.compress.archivers.zip.ZipShort#ZipShort(int)",
        "org.apache.commons.compress.archivers.zip.AsiExtraField#getLinkedFile()",
        "org.apache.commons.compress.archivers.zip.ZipConstants.<staticinit>()"
    ],
    "org.apache.commons.compress.archivers.zip.X0016_CertificateIdForCentralDirectory.<staticinit>()": ["org.apache.commons.compress.archivers.zip.ZipShort#ZipShort(int)"],
    "org.apache.commons.compress.harmony.pack200.ClassBands#getInts(CPClass[])": ["org.apache.commons.compress.harmony.pack200.ConstantPoolEntry#getIndex()"],
    "org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField#Zip64ExtendedInformationExtraField(ZipEightByteInteger,ZipEightByteInteger)": ["org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField#Zip64ExtendedInformationExtraField(ZipEightByteInteger,ZipEightByteInteger,ZipEightByteInteger,ZipLong)"],
    "org.apache.commons.compress.archivers.cpio.CpioArchiveEntry#isDirectory()": [
        "org.apache.commons.compress.archivers.cpio.CpioUtil.fileType(long)",
        "org.apache.commons.compress.archivers.cpio.CpioConstants.<staticinit>()"
    ],
    "org.apache.commons.compress.archivers.sevenz.AES256SHA256Decoder.AES256SHA256DecoderInputStream#read(byte[],int,int)": ["org.apache.commons.compress.archivers.sevenz.AES256SHA256Decoder.AES256SHA256DecoderInputStream#init()"],
    "org.apache.commons.compress.utils.CloseShieldFilterInputStream#CloseShieldFilterInputStream(InputStream)": ["org.apache.commons.compress.utils.CloseShieldFilterInputStream.<init>()"],
    "org.apache.commons.compress.harmony.pack200.ClassBands#addField(int,String,String,String,Object)": [
        "org.apache.commons.compress.harmony.pack200.CpBands#getCPNameAndType(String,String)",
        "org.apache.commons.compress.harmony.pack200.Segment#getCurrentClassReader()",
        "org.apache.commons.compress.harmony.pack200.Pack200ClassReader#hasSyntheticAttributes()",
        "org.apache.commons.compress.harmony.pack200.CpBands#addCPUtf8(String)",
        "org.apache.commons.compress.harmony.pack200.CpBands#getCPSignature(String)",
        "org.apache.commons.compress.harmony.pack200.CpBands#getConstant(Object)"
    ],
    "org.apache.commons.compress.utils.ChecksumVerifyingInputStream#read(byte[],int,int)": ["org.apache.commons.compress.utils.ChecksumVerifyingInputStream#verify()"],
    "org.apache.commons.compress.harmony.unpack200.BandSet#parseReferences(String,InputStream,BHSDCodec,int,String[])": ["org.apache.commons.compress.harmony.unpack200.BandSet#parseReferences(String,InputStream,BHSDCodec,int[],String[])"],
    "org.apache.commons.compress.harmony.unpack200.bytecode.CPUTF8#CPUTF8(String,int)": [
        "org.apache.commons.compress.harmony.unpack200.bytecode.ConstantPoolEntry#ConstantPoolEntry(byte,int)",
        "org.apache.commons.compress.harmony.unpack200.bytecode.CPUTF8.<init>()",
        "org.apache.commons.compress.harmony.unpack200.bytecode.ConstantPoolEntry.<staticinit>()"
    ],
    "org.apache.commons.compress.harmony.pack200.Segment#visitField(int,String,String,String,Object)": ["org.apache.commons.compress.harmony.pack200.ClassBands#addField(int,String,String,String,Object)"],
    "org.apache.commons.compress.archivers.cpio.CpioArchiveEntry#setTime(FileTime)": ["org.apache.commons.compress.utils.TimeUtils.toUnixTime(FileTime)"],
    "org.apache.commons.compress.archivers.tar.TarFile#paxHeaders()": [
        "org.apache.commons.compress.archivers.tar.TarGnuSparseKeys.<staticinit>()",
        "org.apache.commons.compress.archivers.tar.TarFile#getInputStream(TarArchiveEntry)",
        "org.apache.commons.compress.archivers.tar.TarUtils.parseFromPAX01SparseHeaders(String)",
        "org.apache.commons.compress.archivers.tar.TarUtils.parsePAX1XSparseHeaders(InputStream,int)",
        "org.apache.commons.compress.archivers.tar.TarArchiveEntry#isPaxGNU1XSparse()",
        "org.apache.commons.compress.archivers.tar.TarArchiveEntry#getDataOffset()",
        "org.apache.commons.compress.archivers.tar.TarFile#buildSparseInputStreams()",
        "org.apache.commons.compress.archivers.tar.TarArchiveEntry#setSparseHeaders(List<TarArchiveStructSparse>)",
        "org.apache.commons.compress.archivers.tar.TarFile#applyPaxHeadersToCurrentEntry(Map<String, String>,List<TarArchiveStructSparse>)",
        "org.apache.commons.compress.archivers.tar.TarArchiveEntry#setDataOffset(long)",
        "org.apache.commons.compress.archivers.tar.TarUtils.parsePaxHeaders(InputStream,List<TarArchiveStructSparse>,Map<String, String>,long)",
        "org.apache.commons.compress.archivers.tar.TarFile#getNextTarEntry()",
        "org.apache.commons.compress.archivers.tar.TarArchiveEntry#getSize()"
    ],
    "org.apache.commons.compress.archivers.sevenz.SevenZFile.Builder#get()": [
        "org.apache.commons.compress.archivers.sevenz.SevenZFile#SevenZFile(SeekableByteChannel,String,byte[],boolean,int,boolean,boolean)",
        "org.apache.commons.compress.utils.SeekableInMemoryByteChannel#SeekableInMemoryByteChannel(byte[])"
    ],
    "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.ExtraFieldParsingMode#createExtraField(ZipShort)": ["org.apache.commons.compress.archivers.zip.ExtraFieldUtils.createExtraField(ZipShort)"],
    "org.apache.commons.compress.harmony.unpack200.bytecode.CPMember#doWrite(DataOutputStream)": [
        "org.apache.commons.compress.harmony.unpack200.bytecode.InnerClassesAttribute#doWrite(DataOutputStream)",
        "org.apache.commons.compress.harmony.unpack200.bytecode.Attribute#doWrite(DataOutputStream)"
    ],
    "org.apache.commons.compress.archivers.tar.TarFile#TarFile(Path)": [
        "org.apache.commons.compress.archivers.tar.TarFile#TarFile(SeekableByteChannel,int,int,String,boolean)",
        "org.apache.commons.compress.archivers.tar.TarConstants.<staticinit>()"
    ],
    "org.apache.commons.compress.harmony.unpack200.bytecode.LocalVariableTypeTableAttribute.setAttributeName(CPUTF8)": ["org.apache.commons.compress.harmony.unpack200.bytecode.LocalVariableTypeTableAttribute.<staticinit>()"],
    "org.apache.commons.compress.harmony.pack200.ClassBands#addClassAttribute(NewAttribute)": [
        "org.apache.commons.compress.harmony.pack200.NewAttributeBands#addAttribute(NewAttribute)",
        "org.apache.commons.compress.harmony.pack200.NewAttributeBands#getFlagIndex()",
        "org.apache.commons.compress.harmony.pack200.NewAttributeBands#getAttributeName()"
    ],
    "org.apache.commons.compress.harmony.pack200.Segment.SegmentMethodVisitor#visitAnnotation(String,boolean)": [
        "org.apache.commons.compress.harmony.pack200.Segment.SegmentAnnotationVisitor#SegmentAnnotationVisitor(int,String,boolean)",
        "org.apache.commons.compress.harmony.pack200.MetadataBandGroup.<staticinit>()"
    ],
    "org.apache.commons.compress.archivers.arj.ArjArchiveInputStream#readExtraData(int,DataInputStream,LocalFileHeader)": [
        "org.apache.commons.compress.archivers.ArchiveInputStream#pushedBackBytes(long)",
        "org.apache.commons.compress.archivers.arj.ArjArchiveInputStream#read32(DataInputStream)"
    ],
    "org.apache.commons.compress.harmony.pack200.IcBands.IcTuple#compareTo(IcTuple)": ["org.apache.commons.compress.harmony.pack200.CPClass#compareTo(CPClass)"],
    "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream#getAndMoveToFrontDecode()": [
        "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream#getAndMoveToFrontDecode0()",
        "org.apache.commons.compress.compressors.bzip2.BZip2Constants.<staticinit>()",
        "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.bsR(BitInputStream,int)",
        "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream#recvDecodingTables()",
        "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.checkBounds(int,int,String)"
    ],
    "org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField#getCentralDirectoryData()": [
        "org.apache.commons.compress.archivers.zip.ZipLong#getBytes()",
        "org.apache.commons.compress.archivers.zip.ZipShort#getValue()",
        "org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField#addSizes(byte[])",
        "org.apache.commons.compress.archivers.zip.ZipEightByteInteger#getBytes()",
        "org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField#getCentralDirectoryLength()",
        "org.apache.commons.compress.archivers.zip.ZipConstants.<staticinit>()"
    ],
    "org.apache.commons.compress.harmony.pack200.Pack200Adapter#completed(double)": [
        "org.apache.commons.compress.harmony.pack200.Pack200Adapter#firePropertyChange(String,Object,Object)",
        "org.apache.commons.compress.harmony.pack200.Pack200PackerAdapter#firePropertyChange(String,Object,Object)"
    ],
    "org.apache.commons.compress.compressors.deflate64.HuffmanDecoder.DecodingMemory#add(byte)": ["org.apache.commons.compress.compressors.deflate64.HuffmanDecoder.DecodingMemory#incCounter(int)"],
    "org.apache.commons.compress.compressors.lzma.LZMAUtils.isCompressedFileName(String)": [
        "org.apache.commons.compress.compressors.FileNameUtil#isCompressedFileName(String)",
        "org.apache.commons.compress.compressors.lzma.LZMAUtils.<staticinit>()"
    ],
    "org.apache.commons.compress.archivers.zip.ZipSplitReadOnlySeekableByteChannel.buildFromLastSplitSegment(Path)": [
        "org.apache.commons.compress.utils.FileNameUtils.getBaseName(Path)",
        "org.apache.commons.compress.archivers.ArchiveStreamFactory.<staticinit>()",
        "org.apache.commons.compress.archivers.zip.ZipSplitReadOnlySeekableByteChannel.forPaths(Path,Iterable<Path>)",
        "org.apache.commons.compress.archivers.zip.ZipSplitReadOnlySeekableByteChannel.ZipSplitSegmentComparator.<init>()",
        "org.apache.commons.compress.utils.FileNameUtils.getExtension(Path)"
    ],
    "org.apache.commons.compress.harmony.pack200.SegmentHeader.<init>()": [
        "org.apache.commons.compress.harmony.pack200.SegmentHeader.Counter.<init>()",
        "org.apache.commons.compress.harmony.pack200.IntList#IntList()"
    ],
    "org.apache.commons.compress.archivers.zip.JarMarker.getInstance()": ["org.apache.commons.compress.archivers.zip.JarMarker.<staticinit>()"],
    "org.apache.commons.compress.archivers.zip.X7875_NewUnix#parseFromLocalFileData(byte[],int,int)": ["org.apache.commons.compress.archivers.zip.X7875_NewUnix#reset()"],
    "org.apache.commons.compress.archivers.tar.TarArchiveEntry#TarArchiveEntry(boolean)": [
        "org.apache.commons.compress.archivers.tar.TarArchiveEntry.<staticinit>()",
        "org.apache.commons.compress.archivers.tar.TarArchiveEntry.<init>()",
        "org.apache.commons.compress.utils.IOUtils.<staticinit>()"
    ],
    "org.apache.commons.compress.harmony.unpack200.bytecode.Attribute#resolve(ClassConstantPool)": [
        "org.apache.commons.compress.harmony.unpack200.bytecode.ClassConstantPool#indexOf(ClassFileEntry)",
        "org.apache.commons.compress.harmony.unpack200.bytecode.ClassFileEntry#resolve(ClassConstantPool)"
    ],
    "org.apache.commons.compress.harmony.pack200.ClassBands#addHandler(Label,Label,Label,String)": [
        "org.apache.commons.compress.harmony.pack200.IntList#remove(int)",
        "org.apache.commons.compress.harmony.pack200.IntList#size()",
        "org.apache.commons.compress.harmony.pack200.CpBands#getCPClass(String)",
        "org.apache.commons.compress.harmony.pack200.IntList#add(int)"
    ],
    "org.apache.commons.compress.compressors.lz77support.LZ77Compressor#compress(byte[])": ["org.apache.commons.compress.compressors.lz77support.LZ77Compressor#compress(byte[],int,int)"],
    "org.apache.commons.compress.compressors.z.ZCompressorInputStream#clearEntries()": ["org.apache.commons.compress.compressors.lzw.LZWInputStream#setTableSize(int)"],
    "org.apache.commons.compress.archivers.tar.TarArchiveEntry#parseTarHeader(Map<String, String>,byte[],ZipEncoding,boolean,boolean)": ["org.apache.commons.compress.archivers.tar.TarArchiveEntry#parseTarHeaderUnwrapped(Map<String, String>,byte[],ZipEncoding,boolean,boolean)"],
    "org.apache.commons.compress.compressors.lz77support.LZ77Compressor.<init>()": ["org.apache.commons.compress.compressors.lz77support.LZ77Compressor.<staticinit>()"],
    "org.apache.commons.compress.archivers.zip.ZipSplitReadOnlySeekableByteChannel.forOrderedSeekableByteChannels(SeekableByteChannel[]...)": ["org.apache.commons.compress.archivers.zip.ZipSplitReadOnlySeekableByteChannel#ZipSplitReadOnlySeekableByteChannel(List<SeekableByteChannel>)"],
    "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream#createHuffmanDecodingTables(int,int)": ["org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.hbCreateDecodeTables(int[],int[],int[],char[],int,int,int)"],
    "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream#getNextZipEntry()": [
        "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream#BZip2CompressorInputStream(InputStream)",
        "org.apache.commons.compress.archivers.zip.ZipEncodingHelper.<staticinit>()",
        "org.apache.commons.compress.archivers.zip.ZipArchiveEntry#setExtra(byte[])",
        "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.NameSource.<staticinit>()",
        "org.apache.commons.compress.archivers.zip.ZipUtil.canHandleEntryData(ZipArchiveEntry)",
        "org.apache.commons.compress.archivers.zip.ZipLong.<staticinit>()",
        "org.apache.commons.compress.compressors.deflate64.Deflate64CompressorInputStream#Deflate64CompressorInputStream(InputStream)",
        "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream#readRange(int)",
        "org.apache.commons.compress.archivers.zip.ZipLong#ZipLong(byte[],int)",
        "org.apache.commons.compress.archivers.ArchiveEntry.<staticinit>()",
        "org.apache.commons.compress.archivers.zip.ZipArchiveEntry#setDataOffset(long)",
        "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream#closeEntry()",
        "org.apache.commons.compress.archivers.zip.GeneralPurposeBit#getSlidingDictionarySize()",
        "org.apache.commons.compress.archivers.zip.ZipShort.getValue(byte[],int)",
        "org.apache.commons.compress.archivers.zip.UnshrinkingInputStream#UnshrinkingInputStream(InputStream)",
        "org.apache.commons.compress.archivers.zip.ZipArchiveEntry#getGeneralPurposeBit()",
        "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.CurrentEntry.<init>()",
        "org.apache.commons.compress.archivers.zip.GeneralPurposeBit#usesUTF8ForNames()",
        "org.apache.commons.compress.archivers.zip.ZipArchiveEntry#setTime(long)",
        "org.apache.commons.compress.archivers.zip.ZipConstants.<staticinit>()",
        "org.apache.commons.compress.archivers.zip.NioZipEncoding#decode(byte[])",
        "org.apache.commons.compress.archivers.zip.ZipFile.<staticinit>()",
        "org.apache.commons.compress.archivers.zip.ZipUtil.dosToJavaTime(long)",
        "org.apache.commons.compress.archivers.zip.ZipUtil.setNameAndCommentFromExtraFields(ZipArchiveEntry,byte[],byte[])",
        "org.apache.commons.compress.archivers.zip.ZipLong#equals(Object)",
        "org.apache.commons.compress.archivers.zip.ZipLong.getValue(byte[],int)",
        "org.apache.commons.compress.archivers.zip.ZipLong#ZipLong(byte[])",
        "org.apache.commons.compress.archivers.zip.ZipArchiveEntry#setLocalHeaderOffset(long)",
        "org.apache.commons.compress.archivers.zip.ZipLong#getValue()",
        "org.apache.commons.compress.archivers.ArchiveInputStream#getBytesRead()",
        "org.apache.commons.compress.archivers.zip.ZipMethod.<staticinit>()",
        "org.apache.commons.compress.archivers.zip.ZipArchiveEntry#setMethod(int)",
        "org.apache.commons.compress.archivers.zip.ZipArchiveEntry#setNameSource(NameSource)",
        "org.apache.commons.compress.archivers.zip.ZipArchiveEntry#setName(String,byte[])",
        "org.apache.commons.compress.archivers.zip.ZipArchiveEntry#getMethod()",
        "org.apache.commons.compress.archivers.zip.ZipArchiveEntry#setStreamContiguous(boolean)",
        "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream#readFully(byte[])",
        "org.apache.commons.compress.archivers.zip.ZipArchiveEntry#setPlatform(int)",
        "org.apache.commons.compress.archivers.zip.ZipArchiveEntry#getName()",
        "org.apache.commons.compress.archivers.zip.ZipArchiveEntry#setGeneralPurposeBit(GeneralPurposeBit)",
        "org.apache.commons.compress.archivers.dump.DumpArchiveInputStream#getBytesRead()",
        "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.BoundCountInputStream#BoundCountInputStream(InputStream,long)",
        "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream#isApkSigningBlock(byte[])",
        "org.apache.commons.compress.archivers.zip.GeneralPurposeBit.parse(byte[],int)",
        "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream#processZip64Extra(ZipLong,ZipLong)",
        "org.apache.commons.compress.archivers.zip.ExplodingInputStream#ExplodingInputStream(int,int,InputStream)",
        "org.apache.commons.compress.archivers.zip.GeneralPurposeBit#getNumberOfShannonFanoTrees()",
        "org.apache.commons.compress.archivers.zip.GeneralPurposeBit#usesDataDescriptor()",
        "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream#skipRemainderOfArchive(boolean)",
        "org.apache.commons.compress.archivers.zip.ZipMethod.getMethodByCode(int)",
        "org.apache.commons.compress.archivers.tar.TarUtils$ZipEncoding$1#decode(byte[])",
        "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream#readFirstLocalFileHeader()"
    ],
    "org.apache.commons.compress.archivers.zip.ZipArchiveEntry#setAttributes(Path,LinkOption[]...)": [
        "org.apache.commons.compress.archivers.zip.ZipArchiveEntry#setSize(long)",
        "org.apache.commons.compress.archivers.zip.ZipArchiveEntry#setExtraTimeFields()"
    ],
    "org.apache.commons.compress.harmony.unpack200.bytecode.AnnotationDefaultAttribute#writeBody(DataOutputStream)": ["org.apache.commons.compress.harmony.unpack200.bytecode.AnnotationsAttribute.ElementValue#writeBody(DataOutputStream)"],
    "org.apache.commons.compress.compressors.deflate64.HuffmanDecoder#close()": ["org.apache.commons.compress.compressors.deflate64.HuffmanDecoder.InitialState.<init>()"],
    "org.apache.commons.compress.harmony.pack200.AttributeDefinitionBands#addSyntheticDefinitions()": [
        "org.apache.commons.compress.harmony.pack200.Segment#getClassBands()",
        "org.apache.commons.compress.harmony.pack200.ClassBands#isAnySyntheticFields()",
        "org.apache.commons.compress.harmony.pack200.AttributeDefinitionBands.<staticinit>()",
        "org.apache.commons.compress.harmony.pack200.ClassBands#isAnySyntheticClasses()",
        "org.apache.commons.compress.harmony.pack200.ClassBands#isAnySyntheticMethods()",
        "org.apache.commons.compress.harmony.pack200.CpBands#getCPUtf8(String)",
        "org.apache.commons.compress.harmony.pack200.AttributeDefinitionBands.AttributeDefinition#AttributeDefinition(int,int,CPUTF8,CPUTF8)"
    ],
    "org.apache.commons.compress.harmony.pack200.NewAttributeBands.UnionCase#renumberBci(IntList,Map<Label, Integer>)": [
        "org.apache.commons.compress.harmony.pack200.NewAttributeBands.UnionCase#renumberBci(IntList,Map<Label, Integer>)",
        "org.apache.commons.compress.harmony.pack200.NewAttributeBands.Replication#renumberBci(IntList,Map<Label, Integer>)",
        "org.apache.commons.compress.harmony.pack200.NewAttributeBands.Call#renumberBci(IntList,Map<Label, Integer>)",
        "org.apache.commons.compress.harmony.pack200.NewAttributeBands.Callable#renumberBci(IntList,Map<Label, Integer>)",
        "org.apache.commons.compress.harmony.pack200.NewAttributeBands.Integral#renumberBci(IntList,Map<Label, Integer>)",
        "org.apache.commons.compress.harmony.pack200.NewAttributeBands.Union#renumberBci(IntList,Map<Label, Integer>)",
        "org.apache.commons.compress.harmony.pack200.NewAttributeBands.Reference#renumberBci(IntList,Map<Label, Integer>)"
    ],
    "org.apache.commons.compress.harmony.unpack200.bytecode.forms.ReferenceForm#setNestedEntries(ByteCode,OperandManager,int)": [
        "org.apache.commons.compress.harmony.unpack200.bytecode.forms.LongForm#getPoolID()",
        "org.apache.commons.compress.harmony.unpack200.bytecode.forms.MethodRefForm#getPoolID()",
        "org.apache.commons.compress.harmony.unpack200.bytecode.forms.FloatRefForm#getPoolID()",
        "org.apache.commons.compress.harmony.unpack200.bytecode.forms.ThisFieldRefForm#getPoolID()",
        "org.apache.commons.compress.harmony.unpack200.bytecode.ByteCode#setNested(ClassFileEntry[])",
        "org.apache.commons.compress.harmony.unpack200.bytecode.forms.SuperMethodRefForm#getPoolID()",
        "org.apache.commons.compress.harmony.unpack200.bytecode.OperandManager#globalConstantPool()",
        "org.apache.commons.compress.harmony.unpack200.bytecode.forms.ThisMethodRefForm#getPoolID()",
        "org.apache.commons.compress.harmony.unpack200.bytecode.forms.StringRefForm#getPoolID()",
        "org.apache.commons.compress.harmony.unpack200.SegmentConstantPool#getConstantPoolEntry(int,long)",
        "org.apache.commons.compress.harmony.unpack200.bytecode.forms.IMethodRefForm#getPoolID()",
        "org.apache.commons.compress.harmony.unpack200.bytecode.forms.ClassRefForm#getPoolID()",
        "org.apache.commons.compress.harmony.unpack200.bytecode.ByteCode#setNestedPositions(int[][])",
        "org.apache.commons.compress.harmony.unpack200.bytecode.forms.IntRefForm#getPoolID()",
        "org.apache.commons.compress.harmony.unpack200.bytecode.forms.DoubleForm#getPoolID()",
        "org.apache.commons.compress.harmony.unpack200.bytecode.forms.SuperFieldRefForm#getPoolID()",
        "org.apache.commons.compress.harmony.unpack200.bytecode.forms.InitMethodReferenceForm#getPoolID()",
        "org.apache.commons.compress.harmony.unpack200.bytecode.forms.FieldRefForm#getPoolID()"
    ],
    "org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream#GzipCompressorOutputStream(OutputStream,GzipParameters)": [
        "org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream.<init>()",
        "org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream#writeHeader(GzipParameters)",
        "org.apache.commons.compress.compressors.gzip.GzipParameters#getDeflateStrategy()",
        "org.apache.commons.compress.compressors.CompressorOutputStream.<init>()",
        "org.apache.commons.compress.compressors.gzip.GzipParameters#getBufferSize()",
        "org.apache.commons.compress.compressors.gzip.GzipParameters#getCompressionLevel()"
    ],
    "org.apache.commons.compress.archivers.zip.X0017_StrongEncryptionHeader#X0017_StrongEncryptionHeader()": [
        "org.apache.commons.compress.archivers.zip.X0017_StrongEncryptionHeader.<staticinit>()",
        "org.apache.commons.compress.archivers.zip.X0017_StrongEncryptionHeader.<init>()",
        "org.apache.commons.compress.archivers.zip.PKWareExtraHeader#PKWareExtraHeader(ZipShort)"
    ],
    "org.apache.commons.compress.harmony.pack200.BcBands#visitTypeInsn(int,String)": [
        "org.apache.commons.compress.harmony.pack200.BcBands#updateRenumbering()",
        "org.apache.commons.compress.harmony.pack200.IntList#add(int)",
        "org.apache.commons.compress.harmony.pack200.CpBands#getCPClass(String)"
    ],
    "org.apache.commons.compress.compressors.brotli.BrotliUtils.isBrotliCompressionAvailable()": [
        "org.apache.commons.compress.compressors.brotli.BrotliUtils.CachedAvailability.<staticinit>()",
        "org.apache.commons.compress.compressors.brotli.BrotliUtils.<staticinit>()",
        "org.apache.commons.compress.compressors.brotli.BrotliUtils.internalIsBrotliCompressionAvailable()"
    ],
    "org.apache.commons.compress.archivers.zip.UnrecognizedExtraField#getCentralDirectoryLength()": [
        "org.apache.commons.compress.archivers.zip.UnrecognizedExtraField#getLocalFileDataLength()",
        "org.apache.commons.compress.archivers.zip.ZipShort#ZipShort(int)"
    ],
    "org.apache.commons.compress.archivers.zip.ScatterStatistics#ScatterStatistics(long,long)": ["org.apache.commons.compress.archivers.zip.ScatterStatistics.<init>()"],
    "org.apache.commons.compress.archivers.Lister#listZipUsingTarFile(Path)": [
        "org.apache.commons.compress.archivers.tar.TarFile#getEntries()",
        "org.apache.commons.compress.archivers.Lister#println(String)",
        "org.apache.commons.compress.archivers.tar.TarFile#TarFile(Path)"
    ],
    "org.apache.commons.compress.harmony.pack200.NewAttributeBands.Union#pack(OutputStream)": [
        "org.apache.commons.compress.harmony.pack200.NewAttributeBands.Union#pack(OutputStream)",
        "org.apache.commons.compress.harmony.pack200.NewAttributeBands.Callable#pack(OutputStream)",
        "org.apache.commons.compress.harmony.pack200.NewAttributeBands.Call#pack(OutputStream)",
        "org.apache.commons.compress.harmony.pack200.NewAttributeBands.UnionCase#pack(OutputStream)",
        "org.apache.commons.compress.harmony.pack200.NewAttributeBands.Reference#pack(OutputStream)",
        "org.apache.commons.compress.harmony.pack200.NewAttributeBands.Integral#pack(OutputStream)",
        "org.apache.commons.compress.harmony.pack200.NewAttributeBands.Replication#pack(OutputStream)"
    ],
    "org.apache.commons.compress.archivers.zip.ZipFile#getContentBeforeFirstLocalFileHeader()": ["org.apache.commons.compress.archivers.zip.ZipFile#createBoundedInputStream(long,long)"],
    "org.apache.commons.compress.compressors.CompressorStreamFactory#getOutputStreamCompressorNames()": ["org.apache.commons.compress.compressors.CompressorStreamFactory.<staticinit>()"],
    "org.apache.commons.compress.archivers.zip.ZipEightByteInteger#getBytes()": ["org.apache.commons.compress.archivers.zip.ZipEightByteInteger.getBytes(BigInteger)"],
    "org.apache.commons.compress.harmony.unpack200.bytecode.CPRef#CPRef(byte,CPClass,CPNameAndType,int)": [
        "org.apache.commons.compress.harmony.unpack200.bytecode.ConstantPoolEntry#ConstantPoolEntry(byte,int)",
        "org.apache.commons.compress.harmony.unpack200.bytecode.CPRef.<init>()"
    ],
    "org.apache.commons.compress.archivers.zip.UnicodeCommentExtraField.<staticinit>()": ["org.apache.commons.compress.archivers.zip.ZipShort#ZipShort(int)"],
    "org.apache.commons.compress.harmony.unpack200.bytecode.NewAttribute#writeBody(DataOutputStream)": ["org.apache.commons.compress.harmony.unpack200.bytecode.ClassConstantPool#indexOf(ClassFileEntry)"],
    "org.apache.commons.compress.utils.Iterators.addAll(Collection<T>,Iterator<? extends T>)": ["org.apache.commons.compress.utils.ServiceLoaderIterator#hasNext()"],
    "org.apache.commons.compress.harmony.unpack200.bytecode.Attribute#getLengthIncludingHeader()": [
        "org.apache.commons.compress.harmony.unpack200.bytecode.RuntimeVisibleorInvisibleAnnotationsAttribute#getLength()",
        "org.apache.commons.compress.harmony.unpack200.bytecode.LineNumberTableAttribute#getLength()",
        "org.apache.commons.compress.harmony.unpack200.bytecode.AnnotationDefaultAttribute#getLength()",
        "org.apache.commons.compress.harmony.unpack200.bytecode.LocalVariableTypeTableAttribute#getLength()",
        "org.apache.commons.compress.harmony.unpack200.bytecode.DeprecatedAttribute#getLength()",
        "org.apache.commons.compress.harmony.unpack200.bytecode.InnerClassesAttribute#getLength()",
        "org.apache.commons.compress.harmony.unpack200.bytecode.RuntimeVisibleorInvisibleParameterAnnotationsAttribute#getLength()",
        "org.apache.commons.compress.harmony.unpack200.bytecode.SourceFileAttribute#getLength()",
        "org.apache.commons.compress.harmony.unpack200.bytecode.SignatureAttribute#getLength()",
        "org.apache.commons.compress.harmony.unpack200.bytecode.LocalVariableTableAttribute#getLength()",
        "org.apache.commons.compress.harmony.unpack200.bytecode.NewAttribute#getLength()",
        "org.apache.commons.compress.harmony.unpack200.bytecode.CodeAttribute#getLength()",
        "org.apache.commons.compress.harmony.unpack200.bytecode.ConstantValueAttribute#getLength()",
        "org.apache.commons.compress.harmony.unpack200.bytecode.ExceptionsAttribute#getLength()",
        "org.apache.commons.compress.harmony.unpack200.bytecode.EnclosingMethodAttribute#getLength()"
    ],
    "org.apache.commons.compress.harmony.unpack200.bytecode.AnnotationsAttribute.ElementValue#getLength()": [
        "org.apache.commons.compress.harmony.unpack200.bytecode.AnnotationsAttribute.ElementValue#getLength()",
        "org.apache.commons.compress.harmony.unpack200.bytecode.AnnotationsAttribute.Annotation#getLength()"
    ],
    "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream#write(byte[],int,int)": ["org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream#write0(int)"],
    "org.apache.commons.compress.compressors.deflate64.HuffmanDecoder.BinaryTreeNode#right()": ["org.apache.commons.compress.compressors.deflate64.HuffmanDecoder.BinaryTreeNode#BinaryTreeNode(int)"],
    "org.apache.commons.compress.archivers.zip.UnsupportedZipFeatureException#UnsupportedZipFeatureException(Feature)": ["org.apache.commons.compress.archivers.zip.UnsupportedZipFeatureException.<init>()"],
    "org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorOutputStream#writeCrc()": [
        "org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorOutputStream.mask(long)",
        "org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorOutputStream#writeLittleEndian(int,long)"
    ],
    "org.apache.commons.compress.archivers.zip.ZipFile#setDataOffset(ZipArchiveEntry)": [
        "org.apache.commons.compress.utils.IOUtils.readFully(ReadableByteChannel,ByteBuffer)",
        "org.apache.commons.compress.archivers.zip.ZipArchiveEntry#getName()",
        "org.apache.commons.compress.archivers.zip.ZipArchiveEntry#getDiskNumberStart()",
        "org.apache.commons.compress.utils.MultiReadOnlySeekableByteChannel#position(long,long)",
        "org.apache.commons.compress.archivers.zip.ZipArchiveEntry#getDataOffset()",
        "org.apache.commons.compress.archivers.zip.ZipArchiveEntry#getLocalHeaderOffset()",
        "org.apache.commons.compress.archivers.zip.ZipConstants.<staticinit>()",
        "org.apache.commons.compress.archivers.zip.ZipFile.<staticinit>()",
        "org.apache.commons.compress.utils.SeekableInMemoryByteChannel#position(long)",
        "org.apache.commons.compress.utils.SeekableInMemoryByteChannel#position()",
        "org.apache.commons.compress.utils.MultiReadOnlySeekableByteChannel#position()",
        "org.apache.commons.compress.archivers.zip.ZipArchiveEntry#setDataOffset(long)",
        "org.apache.commons.compress.utils.MultiReadOnlySeekableByteChannel#position(long)",
        "org.apache.commons.compress.archivers.zip.ZipShort.getValue(byte[])"
    ],
    "org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField#parseFromCentralDirectoryData(byte[],int,int)": ["org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField#parseFromLocalFileData(byte[],int,int)"],
    "org.apache.commons.compress.archivers.zip.ParallelScatterZipCreator#ParallelScatterZipCreator(ExecutorService,ScatterGatherBackingStoreSupplier,int)": ["org.apache.commons.compress.archivers.zip.ParallelScatterZipCreator.<init>()"],
    "org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorInputStream#read(byte[],int,int)": [
        "org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorInputStream#readOnce(byte[],int,int)",
        "org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorInputStream#appendToBlockDependencyBuffer(byte[],int,int)",
        "org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorInputStream#nextBlock()"
    ],
    "org.apache.commons.compress.compressors.lz77support.LZ77Compressor#flushLiteralBlock()": ["org.apache.commons.compress.compressors.lz77support.LZ77Compressor.LiteralBlock#LiteralBlock(byte[],int,int)"],
    "org.apache.commons.compress.compressors.lz77support.AbstractLZ77CompressorInputStream#readFromBuffer(byte[],int,int)": [
        "org.apache.commons.compress.compressors.lz77support.AbstractLZ77CompressorInputStream#slideBuffer()",
        "org.apache.commons.compress.compressors.lz77support.AbstractLZ77CompressorInputStream#available()"
    ],
    "org.apache.commons.compress.harmony.unpack200.bytecode.LineNumberTableAttribute#LineNumberTableAttribute(int,int[],int[])": [
        "org.apache.commons.compress.harmony.unpack200.bytecode.LineNumberTableAttribute.<staticinit>()",
        "org.apache.commons.compress.harmony.unpack200.bytecode.BCIRenumberedAttribute#BCIRenumberedAttribute(CPUTF8)",
        "org.apache.commons.compress.harmony.unpack200.bytecode.LineNumberTableAttribute.<init>()"
    ],
    "org.apache.commons.compress.archivers.zip.ZipShort.getBytes(int)": ["org.apache.commons.compress.archivers.zip.ZipShort.putShort(int,byte[],int)"],
    "org.apache.commons.compress.archivers.tar.TarUtils.parseOctalOrBinary(byte[],int,int)": [
        "org.apache.commons.compress.archivers.tar.TarUtils.parseBinaryLong(byte[],int,int,boolean)",
        "org.apache.commons.compress.archivers.tar.TarUtils.parseBinaryBigInteger(byte[],int,int,boolean)",
        "org.apache.commons.compress.archivers.tar.TarUtils.parseOctal(byte[],int,int)"
    ],
    "org.apache.commons.compress.archivers.zip.ZipEncodingHelper.getZipEncoding(String)": [
        "org.apache.commons.compress.archivers.zip.ZipEncodingHelper.toSafeCharset(String)",
        "org.apache.commons.compress.archivers.zip.NioZipEncoding#NioZipEncoding(Charset,boolean)",
        "org.apache.commons.compress.archivers.zip.ZipEncodingHelper.isUTF8(Charset)"
    ],
    "org.apache.commons.compress.archivers.zip.ZipSplitOutputStream#write(byte[],int,int)": [
        "org.apache.commons.compress.archivers.zip.FileRandomAccessOutputStream#write(byte[],int,int)",
        "org.apache.commons.compress.archivers.zip.ZipSplitOutputStream#openNewSplitSegment()",
        "org.apache.commons.compress.archivers.zip.ZipSplitOutputStream#write(byte[],int,int)"
    ],
    "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.Data#Data(int)": [
        "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.Data.<init>()",
        "org.apache.commons.compress.compressors.bzip2.BZip2Constants.<staticinit>()"
    ],
    "org.apache.commons.compress.archivers.zip.ExplodingInputStream#read()": [
        "org.apache.commons.compress.archivers.zip.CircularBuffer#get()",
        "org.apache.commons.compress.archivers.zip.CircularBuffer#available()",
        "org.apache.commons.compress.archivers.zip.ExplodingInputStream#fillBuffer()"
    ],
    "org.apache.commons.compress.compressors.lz4.BlockLZ4CompressorOutputStream#close()": [
        "org.apache.commons.compress.archivers.zip.FileRandomAccessOutputStream#close()",
        "org.apache.commons.compress.compressors.snappy.SnappyCompressorOutputStream#close()",
        "org.apache.commons.compress.compressors.deflate.DeflateCompressorOutputStream#close()",
        "org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream#close()",
        "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream#close()",
        "org.apache.commons.compress.compressors.lzma.LZMACompressorOutputStream#close()",
        "org.apache.commons.compress.utils.FixedLengthBlockOutputStream#close()",
        "org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorOutputStream#close()",
        "org.apache.commons.compress.compressors.xz.XZCompressorOutputStream#close()",
        "org.apache.commons.compress.archivers.zip.ZipSplitOutputStream#close()",
        "org.apache.commons.compress.archivers.zip.SeekableChannelRandomAccessOutputStream#close()",
        "org.apache.commons.compress.archivers.sevenz.Coders.DeflateDecoder.DeflateDecoderOutputStream#close()",
        "org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorOutputStream#close()",
        "org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream#close()",
        "org.apache.commons.compress.compressors.lz4.BlockLZ4CompressorOutputStream#close()",
        "org.apache.commons.compress.archivers.ar.ArArchiveOutputStream#close()",
        "org.apache.commons.compress.compressors.zstandard.ZstdCompressorOutputStream#close()",
        "org.apache.commons.compress.archivers.sevenz.AES256SHA256Decoder.AES256SHA256DecoderOutputStream#close()",
        "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream#close()",
        "org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream#close()",
        "org.apache.commons.compress.compressors.lz4.BlockLZ4CompressorOutputStream#finish()",
        "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream#close()",
        "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.OutputStreamWrapper#close()"
    ],
    "org.apache.commons.compress.archivers.arj.ArjArchiveInputStream#readRange(InputStream,int)": [
        "org.apache.commons.compress.utils.IOUtils.readRange(InputStream,int)",
        "org.apache.commons.compress.archivers.ArchiveInputStream#count(int)"
    ],
    "org.apache.commons.compress.utils.BoundedArchiveInputStream#read(byte[],int,int)": [
        "org.apache.commons.compress.utils.BoundedSeekableByteChannelInputStream#read(long,ByteBuffer)",
        "org.apache.commons.compress.archivers.tar.TarFile.BoundedTarEntryInputStream#read(long,ByteBuffer)",
        "org.apache.commons.compress.archivers.zip.ZipFile.BoundedFileChannelInputStream#read(long,ByteBuffer)"
    ],
    "org.apache.commons.compress.harmony.unpack200.bytecode.forms.SuperMethodRefForm#getOffset(OperandManager)": ["org.apache.commons.compress.harmony.unpack200.bytecode.OperandManager#nextSuperMethodRef()"],
    "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream#TarArchiveOutputStream(OutputStream,int)": ["org.apache.commons.compress.archivers.tar.TarArchiveOutputStream#TarArchiveOutputStream(OutputStream,int,String)"],
    "org.apache.commons.compress.archivers.tar.TarArchiveEntry#fillStarSparseData(Map<String, String>)": ["org.apache.commons.compress.utils.ParsingUtils.parseLongValue(String)"],
    "org.apache.commons.compress.archivers.zip.ZipArchiveEntry#ZipArchiveEntry(File,String)": ["org.apache.commons.compress.archivers.zip.ZipArchiveEntry#ZipArchiveEntry(Function<ZipShort, ZipExtraField>,File,String)"],
    "org.apache.commons.compress.archivers.sevenz.SevenZFile.matches(byte[],int)": ["org.apache.commons.compress.archivers.sevenz.SevenZFile.<staticinit>()"],
    "org.apache.commons.compress.compressors.lz77support.Parameters.<staticinit>()": ["org.apache.commons.compress.compressors.lz77support.LZ77Compressor.<staticinit>()"],
    "org.apache.commons.compress.harmony.unpack200.bytecode.AnnotationsAttribute.ElementValue#ElementValue(int,Object)": ["org.apache.commons.compress.harmony.unpack200.bytecode.AnnotationsAttribute.ElementValue.<init>()"],
    "org.apache.commons.compress.harmony.unpack200.bytecode.BCIRenumberedAttribute#BCIRenumberedAttribute(CPUTF8)": [
        "org.apache.commons.compress.harmony.unpack200.bytecode.Attribute#Attribute(CPUTF8)",
        "org.apache.commons.compress.harmony.unpack200.bytecode.BCIRenumberedAttribute.<init>()"
    ],
    "org.apache.commons.compress.utils.FixedLengthBlockOutputStream#close()": [
        "org.apache.commons.compress.utils.FixedLengthBlockOutputStream#flushBlock()",
        "org.apache.commons.compress.utils.FixedLengthBlockOutputStream#close()",
        "org.apache.commons.compress.utils.FixedLengthBlockOutputStream.BufferAtATimeOutputChannel#close()"
    ],
    "org.apache.commons.compress.harmony.unpack200.SegmentConstantPool.regexMatches(String,String)": ["org.apache.commons.compress.harmony.unpack200.SegmentConstantPool.<staticinit>()"],
    "org.apache.commons.compress.archivers.zip.BinaryTree#addLeaf(int,int,int,int)": [
        "org.apache.commons.compress.archivers.zip.BinaryTree#addLeaf(int,int,int,int)",
        "org.apache.commons.compress.archivers.zip.BinaryTree.<staticinit>()"
    ],
    "org.apache.commons.compress.compressors.CompressorStreamFactory.findAvailableCompressorOutputStreamProviders()": [
        "org.apache.commons.compress.compressors.CompressorStreamFactory.putAll(Set<String>,CompressorStreamProvider,TreeMap<String, CompressorStreamProvider>)",
        "org.apache.commons.compress.compressors.CompressorStreamFactory.<staticinit>()",
        "org.apache.commons.compress.compressors.CompressorStreamFactory#getOutputStreamCompressorNames()",
        "org.apache.commons.compress.compressors.CompressorStreamFactory.archiveStreamProviderIterable()"
    ],
    "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile#SevenZOutputFile(SeekableByteChannel)": ["org.apache.commons.compress.archivers.sevenz.SevenZOutputFile#SevenZOutputFile(SeekableByteChannel,char[])"],
    "org.apache.commons.compress.archivers.zip.ScatterZipOutputStream#close()": [
        "org.apache.commons.compress.archivers.zip.StreamCompressor#close()",
        "org.apache.commons.compress.archivers.zip.ScatterZipOutputStream.ZipEntryWriter#close()"
    ],
    "org.apache.commons.compress.harmony.unpack200.SegmentOptions#SegmentOptions(int)": [
        "org.apache.commons.compress.harmony.pack200.Pack200Exception#Pack200Exception(String)",
        "org.apache.commons.compress.harmony.unpack200.SegmentOptions.<staticinit>()",
        "org.apache.commons.compress.harmony.unpack200.SegmentOptions.<init>()"
    ],
    "org.apache.commons.compress.compressors.bzip2.BZip2Utils.isCompressedFileName(String)": [
        "org.apache.commons.compress.compressors.bzip2.BZip2Utils.<staticinit>()",
        "org.apache.commons.compress.compressors.FileNameUtil#isCompressedFileName(String)"
    ],
    "org.apache.commons.compress.archivers.zip.ZipMethod.getMethodByCode(int)": ["org.apache.commons.compress.archivers.zip.ZipMethod.<staticinit>()"],
    "org.apache.commons.compress.compressors.zstandard.ZstdUtils.isZstdCompressionAvailable()": [
        "org.apache.commons.compress.compressors.zstandard.ZstdUtils.CachedAvailability.<staticinit>()",
        "org.apache.commons.compress.compressors.zstandard.ZstdUtils.<staticinit>()",
        "org.apache.commons.compress.compressors.zstandard.ZstdUtils.internalIsZstdCompressionAvailable()"
    ],
    "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.ExtraFieldParsingMode.<staticinit>()": ["org.apache.commons.compress.archivers.zip.ExtraFieldUtils.UnparseableExtraField.<staticinit>()"],
    "org.apache.commons.compress.compressors.deflate64.HuffmanDecoder.DecodingMemory#DecodingMemory()": ["org.apache.commons.compress.compressors.deflate64.HuffmanDecoder.DecodingMemory#DecodingMemory(int)"],
    "org.apache.commons.compress.compressors.lz4.BlockLZ4CompressorOutputStream#writeBlocksAndReturnUnfinishedPair(int)": [
        "org.apache.commons.compress.compressors.lz4.BlockLZ4CompressorOutputStream.Pair.<init>()",
        "org.apache.commons.compress.compressors.lz4.BlockLZ4CompressorOutputStream.Pair#hasBackReference()",
        "org.apache.commons.compress.compressors.lz4.BlockLZ4CompressorOutputStream#writeWritablePairs(int)"
    ],
    "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream#setupNoRandPartA()": [
        "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream#initBlock()",
        "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.<staticinit>()",
        "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream#endBlock()",
        "org.apache.commons.compress.compressors.bzip2.CRC#update(int)",
        "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream#setupBlock()",
        "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.checkBounds(int,int,String)"
    ],
    "org.apache.commons.compress.harmony.unpack200.NewAttributeBands.Union#Union(String,List<UnionCase>,List<LayoutElement>)": [
        "org.apache.commons.compress.harmony.unpack200.NewAttributeBands.LayoutElement.<init>()",
        "org.apache.commons.compress.harmony.unpack200.NewAttributeBands.Union.<init>()",
        "org.apache.commons.compress.harmony.unpack200.NewAttributeBands.Integral#Integral(String)"
    ],
    "org.apache.commons.compress.archivers.sevenz.SevenZFile#SevenZFile(SeekableByteChannel,String,byte[],boolean,int,boolean,boolean)": [
        "org.apache.commons.compress.archivers.sevenz.SevenZFile.<init>()",
        "org.apache.commons.compress.utils.SeekableInMemoryByteChannel#close()",
        "org.apache.commons.compress.utils.MultiReadOnlySeekableByteChannel#close()",
        "org.apache.commons.compress.archivers.sevenz.SevenZFile#readHeaders(byte[])"
    ],
    "org.apache.commons.compress.harmony.pack200.Pack200PackerAdapter.<init>()": [
        "org.apache.commons.compress.harmony.pack200.PackingOptions.<init>()",
        "org.apache.commons.compress.harmony.pack200.Pack200Adapter.<init>()"
    ],
    "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream#bsPutUByte(int)": ["org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream#bsW(int,int)"],
    "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream#bufferContainsSignature(ByteArrayOutputStream,int,int,int)": [
        "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream#pushback(byte[],int,int)",
        "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream#readDataDescriptor()",
        "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.<staticinit>()"
    ],
    "org.apache.commons.compress.harmony.unpack200.CpBands#parseCpMethod(InputStream)": [
        "org.apache.commons.compress.harmony.unpack200.BandSet#decodeBandInt(String,InputStream,BHSDCodec,int)",
        "org.apache.commons.compress.harmony.unpack200.SegmentHeader#getCpMethodCount()",
        "org.apache.commons.compress.harmony.pack200.Codec.<staticinit>()"
    ],
    "org.apache.commons.compress.harmony.unpack200.IcBands#IcBands(Segment)": [
        "org.apache.commons.compress.harmony.unpack200.IcBands.<init>()",
        "org.apache.commons.compress.harmony.unpack200.BandSet#BandSet(Segment)",
        "org.apache.commons.compress.harmony.unpack200.CpBands#getCpUTF8()",
        "org.apache.commons.compress.harmony.unpack200.Segment#getCpBands()",
        "org.apache.commons.compress.harmony.unpack200.CpBands#getCpClass()"
    ],
    "org.apache.commons.compress.archivers.ar.ArArchiveOutputStream#close()": [
        "org.apache.commons.compress.archivers.zip.FileRandomAccessOutputStream#close()",
        "org.apache.commons.compress.compressors.snappy.SnappyCompressorOutputStream#close()",
        "org.apache.commons.compress.compressors.deflate.DeflateCompressorOutputStream#close()",
        "org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream#close()",
        "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream#close()",
        "org.apache.commons.compress.compressors.lzma.LZMACompressorOutputStream#close()",
        "org.apache.commons.compress.utils.FixedLengthBlockOutputStream#close()",
        "org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorOutputStream#close()",
        "org.apache.commons.compress.compressors.xz.XZCompressorOutputStream#close()",
        "org.apache.commons.compress.archivers.zip.ZipSplitOutputStream#close()",
        "org.apache.commons.compress.archivers.zip.SeekableChannelRandomAccessOutputStream#close()",
        "org.apache.commons.compress.archivers.sevenz.Coders.DeflateDecoder.DeflateDecoderOutputStream#close()",
        "org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorOutputStream#close()",
        "org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream#close()",
        "org.apache.commons.compress.compressors.lz4.BlockLZ4CompressorOutputStream#close()",
        "org.apache.commons.compress.archivers.ar.ArArchiveOutputStream#finish()",
        "org.apache.commons.compress.archivers.ar.ArArchiveOutputStream#close()",
        "org.apache.commons.compress.compressors.zstandard.ZstdCompressorOutputStream#close()",
        "org.apache.commons.compress.archivers.sevenz.AES256SHA256Decoder.AES256SHA256DecoderOutputStream#close()",
        "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream#close()",
        "org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream#close()",
        "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream#close()",
        "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.OutputStreamWrapper#close()"
    ],
    "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream#setupRandPartA()": [
        "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream#initBlock()",
        "org.apache.commons.compress.compressors.bzip2.Rand.rNums(int)",
        "org.apache.commons.compress.compressors.bzip2.CRC#update(int)",
        "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.checkBounds(int,int,String)",
        "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream#endBlock()",
        "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.<staticinit>()",
        "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream#setupBlock()"
    ],
    "org.apache.commons.compress.archivers.dump.DumpArchiveEntry#DumpArchiveEntry(String,String,int,TYPE)": [
        "org.apache.commons.compress.archivers.dump.DumpArchiveEntry#setType(TYPE)",
        "org.apache.commons.compress.archivers.dump.DumpArchiveEntry#setName(String)",
        "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.<init>()"
    ],
    "org.apache.commons.compress.compressors.deflate64.HuffmanDecoder.BinaryTreeNode#left()": ["org.apache.commons.compress.compressors.deflate64.HuffmanDecoder.BinaryTreeNode#BinaryTreeNode(int)"],
    "org.apache.commons.compress.archivers.zip.ScatterZipOutputStream.ZipEntryWriter#close()": [
        "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream#close()",
        "org.apache.commons.compress.archivers.sevenz.BoundedSeekableByteChannelInputStream#close()",
        "org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStream#close()",
        "org.apache.commons.compress.compressors.brotli.BrotliCompressorInputStream#close()",
        "org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream#close()",
        "org.apache.commons.compress.compressors.deflate64.Deflate64CompressorInputStream#close()",
        "org.apache.commons.compress.compressors.deflate.DeflateCompressorInputStream#close()",
        "org.apache.commons.compress.archivers.sevenz.AES256SHA256Decoder.AES256SHA256DecoderInputStream#close()",
        "org.apache.commons.compress.compressors.xz.XZCompressorInputStream#close()",
        "org.apache.commons.compress.archivers.zip.ExplodingInputStream#close()",
        "org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream#close()",
        "org.apache.commons.compress.compressors.lzw.LZWInputStream#close()",
        "org.apache.commons.compress.compressors.lzma.LZMACompressorInputStream#close()",
        "org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorInputStream#close()",
        "org.apache.commons.compress.compressors.zstandard.ZstdCompressorInputStream#close()",
        "org.apache.commons.compress.compressors.lz77support.AbstractLZ77CompressorInputStream#close()"
    ],
    "org.apache.commons.compress.archivers.zip.ExtraFieldUtils.parse(byte[],boolean,ExtraFieldParsingBehavior)": [
        "org.apache.commons.compress.archivers.zip.ZipArchiveEntry#parseExtraFields(byte[],boolean,ExtraFieldParsingBehavior)$ExtraFieldParsingBehavior$1#onUnparseableExtraField(byte[],int,int,boolean,int)",
        "org.apache.commons.compress.archivers.zip.ExtraFieldUtils.parse(byte[],boolean,UnparseableExtraField)$ExtraFieldParsingBehavior$1#createExtraField(ZipShort)",
        "org.apache.commons.compress.archivers.zip.ExtraFieldUtils.<staticinit>()",
        "org.apache.commons.compress.archivers.zip.ExtraFieldUtils.parse(byte[],boolean,UnparseableExtraField)$ExtraFieldParsingBehavior$1#fill(ZipExtraField,byte[],int,int,boolean)",
        "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.ExtraFieldParsingMode#onUnparseableExtraField(byte[],int,int,boolean,int)",
        "org.apache.commons.compress.archivers.zip.ZipShort#getValue()",
        "org.apache.commons.compress.archivers.zip.ExtraFieldUtils.parse(byte[],boolean,UnparseableExtraField)$ExtraFieldParsingBehavior$1#onUnparseableExtraField(byte[],int,int,boolean,int)",
        "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.ExtraFieldParsingMode$ExtraFieldParsingMode$1#fill(ZipExtraField,byte[],int,int,boolean)",
        "org.apache.commons.compress.archivers.zip.ZipArchiveEntry#parseExtraFields(byte[],boolean,ExtraFieldParsingBehavior)$ExtraFieldParsingBehavior$1#createExtraField(ZipShort)",
        "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.ExtraFieldParsingMode#fill(ZipExtraField,byte[],int,int,boolean)",
        "org.apache.commons.compress.archivers.zip.ExtraFieldUtils.UnparseableExtraField#onUnparseableExtraField(byte[],int,int,boolean,int)",
        "org.apache.commons.compress.archivers.zip.ZipShort#ZipShort(byte[],int)",
        "org.apache.commons.compress.archivers.zip.ZipArchiveEntry#parseExtraFields(byte[],boolean,ExtraFieldParsingBehavior)$ExtraFieldParsingBehavior$1#fill(ZipExtraField,byte[],int,int,boolean)",
        "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.ExtraFieldParsingMode#createExtraField(ZipShort)"
    ],
    "org.apache.commons.compress.harmony.pack200.ClassBands#addFieldAttribute(NewAttribute)": [
        "org.apache.commons.compress.harmony.pack200.NewAttributeBands#addAttribute(NewAttribute)",
        "org.apache.commons.compress.harmony.pack200.NewAttributeBands#getFlagIndex()",
        "org.apache.commons.compress.harmony.pack200.NewAttributeBands#getAttributeName()"
    ],
    "org.apache.commons.compress.harmony.unpack200.bytecode.forms.NoArgumentForm#NoArgumentForm(int,String)": [
        "org.apache.commons.compress.harmony.unpack200.bytecode.forms.ByteCodeForm#ByteCodeForm(int,String)",
        "org.apache.commons.compress.harmony.unpack200.bytecode.forms.NoArgumentForm.<init>()"
    ],
    "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream#endBlock()": [
        "org.apache.commons.compress.compressors.bzip2.CRC#getValue()",
        "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream#blockSort()",
        "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream#bsPutInt(int)",
        "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream#moveToFrontCodeAndSend()",
        "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream#bsPutUByte(int)",
        "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream#bsW(int,int)"
    ],
    "org.apache.commons.compress.harmony.pack200.PackingOptions#setDeflateHint(String)": ["org.apache.commons.compress.harmony.pack200.PackingOptions.<staticinit>()"],
    "org.apache.commons.compress.compressors.lz77support.AbstractLZ77CompressorInputStream#AbstractLZ77CompressorInputStream(InputStream,int)": [
        "org.apache.commons.compress.compressors.CompressorInputStream.<init>()",
        "org.apache.commons.compress.compressors.lz77support.AbstractLZ77CompressorInputStream.<init>()"
    ],
    "org.apache.commons.compress.harmony.unpack200.bytecode.forms.ThisMethodRefForm#getOffset(OperandManager)": ["org.apache.commons.compress.harmony.unpack200.bytecode.OperandManager#nextThisMethodRef()"],
    "org.apache.commons.compress.archivers.jar.JarArchiveInputStream.matches(byte[],int)": ["org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.matches(byte[],int)"],
    "org.apache.commons.compress.archivers.tar.TarFile#TarFile(byte[])": [
        "org.apache.commons.compress.utils.SeekableInMemoryByteChannel#SeekableInMemoryByteChannel(byte[])",
        "org.apache.commons.compress.archivers.tar.TarFile#TarFile(SeekableByteChannel)"
    ],
    "org.apache.commons.compress.harmony.unpack200.bytecode.forms.SwitchForm#fixUpByteCodeTargets(ByteCode,CodeAttribute)": [
        "org.apache.commons.compress.harmony.unpack200.bytecode.ByteCode#getRewrite()",
        "org.apache.commons.compress.harmony.unpack200.bytecode.ByteCode#getByteCodeTargets()",
        "org.apache.commons.compress.harmony.unpack200.bytecode.forms.VariableInstructionForm#setRewrite4Bytes(int,int[])",
        "org.apache.commons.compress.harmony.unpack200.bytecode.ByteCode#getByteCodeIndex()"
    ],
    "org.apache.commons.compress.archivers.zip.UnrecognizedExtraField#parseFromLocalFileData(byte[],int,int)": ["org.apache.commons.compress.archivers.zip.UnrecognizedExtraField#setLocalFileDataData(byte[])"],
    "org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorOutputStream#writeLittleEndian(int,long)": ["org.apache.commons.compress.utils.ByteUtils.toLittleEndian(ByteConsumer,long,int)"],
    "org.apache.commons.compress.harmony.unpack200.bytecode.EnclosingMethodAttribute#EnclosingMethodAttribute(CPClass,CPNameAndType)": [
        "org.apache.commons.compress.harmony.unpack200.bytecode.EnclosingMethodAttribute.<staticinit>()",
        "org.apache.commons.compress.harmony.unpack200.bytecode.Attribute#Attribute(CPUTF8)",
        "org.apache.commons.compress.harmony.unpack200.bytecode.EnclosingMethodAttribute.<init>()"
    ],
    "org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorInputStream#read()": ["org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorInputStream#read(byte[],int,int)"],
    "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream#writePreamble(byte[])": ["org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream#writePreamble(byte[],int,int)"],
    "org.apache.commons.compress.archivers.zip.X000A_NTFS#setModifyTime(ZipEightByteInteger)": ["org.apache.commons.compress.archivers.zip.ZipEightByteInteger.<staticinit>()"],
    "org.apache.commons.compress.harmony.pack200.BcBands#visitLookupSwitchInsn(Label,int[],Label[])": [
        "org.apache.commons.compress.harmony.pack200.BcBands.<staticinit>()",
        "org.apache.commons.compress.harmony.pack200.BcBands#updateRenumbering()",
        "org.apache.commons.compress.harmony.pack200.IntList#add(int)"
    ],
    "org.apache.commons.compress.archivers.zip.ScatterZipOutputStream#ScatterZipOutputStream(ScatterGatherBackingStore,StreamCompressor)": ["org.apache.commons.compress.archivers.zip.ScatterZipOutputStream.<init>()"],
    "org.apache.commons.compress.compressors.bzip2.BlockSort#mainSort(Data,int)": [
        "org.apache.commons.compress.compressors.bzip2.BlockSort.<staticinit>()",
        "org.apache.commons.compress.compressors.bzip2.BZip2Constants.<staticinit>()",
        "org.apache.commons.compress.compressors.bzip2.BlockSort#mainQSort3(Data,int,int,int,int)"
    ],
    "org.apache.commons.compress.archivers.zip.ParallelScatterZipCreator#getStatisticsMessage()": ["org.apache.commons.compress.archivers.zip.ScatterStatistics#ScatterStatistics(long,long)"],
    "org.apache.commons.compress.archivers.zip.ZipArchiveEntry#setExtraFields(ZipExtraField[])": [
        "org.apache.commons.compress.archivers.zip.ExtraFieldUtils.<staticinit>()",
        "org.apache.commons.compress.archivers.zip.ZipArchiveEntry#setExtra()"
    ],
    "org.apache.commons.compress.harmony.unpack200.MetadataBandGroup#getParameterAttribute(int,Iterator<CPUTF8>)": [
        "org.apache.commons.compress.harmony.unpack200.MetadataBandGroup.<staticinit>()",
        "org.apache.commons.compress.harmony.unpack200.bytecode.RuntimeVisibleorInvisibleParameterAnnotationsAttribute#RuntimeVisibleorInvisibleParameterAnnotationsAttribute(CPUTF8,ParameterAnnotation[])",
        "org.apache.commons.compress.harmony.unpack200.bytecode.RuntimeVisibleorInvisibleParameterAnnotationsAttribute.ParameterAnnotation#ParameterAnnotation(Annotation[])",
        "org.apache.commons.compress.harmony.unpack200.MetadataBandGroup#getAnnotation(CPUTF8,int,Iterator<CPUTF8>)"
    ],
    "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream#sendMTFValues7()": [
        "org.apache.commons.compress.archivers.sevenz.AES256SHA256Decoder.AES256SHA256DecoderOutputStream#write(int)",
        "org.apache.commons.compress.compressors.snappy.SnappyCompressorOutputStream#write(int)",
        "org.apache.commons.compress.archivers.sevenz.Coders.DeflateDecoder.DeflateDecoderOutputStream#write(int)",
        "org.apache.commons.compress.compressors.lz4.BlockLZ4CompressorOutputStream#write(int)",
        "org.apache.commons.compress.compressors.deflate.DeflateCompressorOutputStream#write(int)",
        "org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorOutputStream#write(int)",
        "org.apache.commons.compress.compressors.bzip2.BZip2Constants.<staticinit>()",
        "org.apache.commons.compress.compressors.lzma.LZMACompressorOutputStream#write(int)",
        "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream#write(int)",
        "org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream#write(int)",
        "org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorOutputStream#write(int)",
        "org.apache.commons.compress.compressors.xz.XZCompressorOutputStream#write(int)",
        "org.apache.commons.compress.utils.FixedLengthBlockOutputStream#write(int)",
        "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.OutputStreamWrapper#write(int)",
        "org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream#write(int)",
        "org.apache.commons.compress.archivers.ArchiveOutputStream#write(int)",
        "org.apache.commons.compress.archivers.zip.ZipSplitOutputStream#write(int)",
        "org.apache.commons.compress.compressors.zstandard.ZstdCompressorOutputStream#write(int)",
        "org.apache.commons.compress.archivers.zip.RandomAccessOutputStream#write(int)"
    ],
    "org.apache.commons.compress.utils.FixedLengthBlockOutputStream.BufferAtATimeOutputChannel#close()": [
        "org.apache.commons.compress.archivers.zip.FileRandomAccessOutputStream#close()",
        "org.apache.commons.compress.compressors.snappy.SnappyCompressorOutputStream#close()",
        "org.apache.commons.compress.compressors.deflate.DeflateCompressorOutputStream#close()",
        "org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream#close()",
        "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream#close()",
        "org.apache.commons.compress.compressors.lzma.LZMACompressorOutputStream#close()",
        "org.apache.commons.compress.utils.FixedLengthBlockOutputStream#close()",
        "org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorOutputStream#close()",
        "org.apache.commons.compress.compressors.xz.XZCompressorOutputStream#close()",
        "org.apache.commons.compress.archivers.zip.ZipSplitOutputStream#close()",
        "org.apache.commons.compress.archivers.zip.SeekableChannelRandomAccessOutputStream#close()",
        "org.apache.commons.compress.archivers.sevenz.Coders.DeflateDecoder.DeflateDecoderOutputStream#close()",
        "org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorOutputStream#close()",
        "org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream#close()",
        "org.apache.commons.compress.compressors.lz4.BlockLZ4CompressorOutputStream#close()",
        "org.apache.commons.compress.archivers.ar.ArArchiveOutputStream#close()",
        "org.apache.commons.compress.compressors.zstandard.ZstdCompressorOutputStream#close()",
        "org.apache.commons.compress.archivers.sevenz.AES256SHA256Decoder.AES256SHA256DecoderOutputStream#close()",
        "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream#close()",
        "org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream#close()",
        "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream#close()",
        "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.OutputStreamWrapper#close()"
    ],
    "org.apache.commons.compress.harmony.unpack200.bytecode.ConstantValueAttribute#getNestedClassFileEntries()": ["org.apache.commons.compress.harmony.unpack200.bytecode.Attribute#getAttributeName()"],
    "org.apache.commons.compress.compressors.gzip.GzipUtils.getCompressedFileName(String)": [
        "org.apache.commons.compress.compressors.FileNameUtil#getCompressedFileName(String)",
        "org.apache.commons.compress.compressors.gzip.GzipUtils.<staticinit>()"
    ],
    "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream#writeLocalFileHeader(ZipArchiveEntry)": ["org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream#writeLocalFileHeader(ZipArchiveEntry,boolean)"],
    "org.apache.commons.compress.archivers.zip.StreamCompressor.DataOutputCompressor#DataOutputCompressor(Deflater,DataOutput)": [
        "org.apache.commons.compress.archivers.zip.StreamCompressor#StreamCompressor(Deflater)",
        "org.apache.commons.compress.archivers.zip.StreamCompressor.DataOutputCompressor.<init>()"
    ],
    "org.apache.commons.compress.archivers.zip.ZipFile#getInputStream(ZipArchiveEntry)": [
        "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream#BZip2CompressorInputStream(InputStream)",
        "org.apache.commons.compress.archivers.zip.UnshrinkingInputStream#UnshrinkingInputStream(InputStream)",
        "org.apache.commons.compress.archivers.zip.ZipFile#getRawInputStream(ZipArchiveEntry)",
        "org.apache.commons.compress.archivers.zip.ZipArchiveEntry#getGeneralPurposeBit()",
        "org.apache.commons.compress.archivers.zip.ZipFile#getInputStream(ZipArchiveEntry)$InflaterInputStreamWithStatistics$1.<init>()",
        "org.apache.commons.compress.archivers.zip.ZipFile.StoredStatisticsStream#StoredStatisticsStream(InputStream)",
        "org.apache.commons.compress.compressors.deflate64.Deflate64CompressorInputStream#Deflate64CompressorInputStream(InputStream)",
        "org.apache.commons.compress.archivers.zip.ZipFile.<staticinit>()",
        "org.apache.commons.compress.archivers.zip.ZipArchiveEntry#getMethod()",
        "org.apache.commons.compress.archivers.zip.ExplodingInputStream#ExplodingInputStream(int,int,InputStream)",
        "org.apache.commons.compress.archivers.zip.GeneralPurposeBit#getNumberOfShannonFanoTrees()",
        "org.apache.commons.compress.archivers.zip.UnsupportedZipFeatureException#UnsupportedZipFeatureException(ZipMethod,ZipArchiveEntry)",
        "org.apache.commons.compress.archivers.zip.ZipMethod.getMethodByCode(int)",
        "org.apache.commons.compress.archivers.zip.ZipMethod.<staticinit>()",
        "org.apache.commons.compress.archivers.zip.GeneralPurposeBit#getSlidingDictionarySize()",
        "org.apache.commons.compress.archivers.zip.ZipUtil.checkRequestedFeatures(ZipArchiveEntry)"
    ],
    "org.apache.commons.compress.harmony.pack200.Segment.SegmentMethodVisitor#visitLabel(Label)": ["org.apache.commons.compress.harmony.pack200.BcBands#visitLabel(Label)"],
    "org.apache.commons.compress.archivers.tar.TarFile.BoundedTarEntryInputStream#readArchive(long,ByteBuffer)": [
        "org.apache.commons.compress.utils.SeekableInMemoryByteChannel#read(ByteBuffer)",
        "org.apache.commons.compress.utils.SeekableInMemoryByteChannel#position(long)",
        "org.apache.commons.compress.utils.MultiReadOnlySeekableByteChannel#position(long)",
        "org.apache.commons.compress.utils.MultiReadOnlySeekableByteChannel#read(ByteBuffer)"
    ],
    "org.apache.commons.compress.parallel.FileBasedScatterGatherBackingStore#FileBasedScatterGatherBackingStore(File)": ["org.apache.commons.compress.parallel.FileBasedScatterGatherBackingStore#FileBasedScatterGatherBackingStore(File)"],
    "org.apache.commons.compress.archivers.zip.StreamCompressor.create(ScatterGatherBackingStore)": ["org.apache.commons.compress.archivers.zip.StreamCompressor.create(int,ScatterGatherBackingStore)"],
    "org.apache.commons.compress.harmony.pack200.ClassBands#addParameterAnnotation(int,String,boolean,List<String>,List<String>,List<Object>,List<Integer>,List<String>,List<String>,List<Integer>)": [
        "org.apache.commons.compress.harmony.pack200.ClassBands.TempParamAnnotation#addParameterAnnotation(int,String,List<String>,List<String>,List<Object>,List<Integer>,List<String>,List<String>,List<Integer>)",
        "org.apache.commons.compress.harmony.pack200.ClassBands.TempParamAnnotation#TempParamAnnotation(int)"
    ],
    "org.apache.commons.compress.archivers.tar.TarArchiveEntry#parseTarHeader(byte[],ZipEncoding)": ["org.apache.commons.compress.archivers.tar.TarArchiveEntry#parseTarHeader(byte[],ZipEncoding,boolean,boolean)"],
    "org.apache.commons.compress.archivers.tar.TarFile#readGlobalPaxHeaders()": [
        "org.apache.commons.compress.archivers.tar.TarUtils.parsePaxHeaders(InputStream,List<TarArchiveStructSparse>,Map<String, String>,long)",
        "org.apache.commons.compress.archivers.tar.TarArchiveEntry#getSize()",
        "org.apache.commons.compress.archivers.tar.TarFile#getNextTarEntry()",
        "org.apache.commons.compress.archivers.tar.TarFile#getInputStream(TarArchiveEntry)"
    ],
    "org.apache.commons.compress.archivers.tar.TarArchiveInputStream#TarArchiveInputStream(InputStream,int,String)": [
        "org.apache.commons.compress.archivers.tar.TarArchiveInputStream#TarArchiveInputStream(InputStream,int,int,String)",
        "org.apache.commons.compress.archivers.tar.TarConstants.<staticinit>()"
    ],
    "org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStream#read()": ["org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStream#read(byte[],int,int)"],
    "org.apache.commons.compress.harmony.pack200.PackingUtils.reorderPackingFiles(List<PackingFile>)": [
        "org.apache.commons.compress.utils.ServiceLoaderIterator#next()",
        "org.apache.commons.compress.harmony.pack200.Archive.PackingFile#getName()",
        "org.apache.commons.compress.utils.ServiceLoaderIterator#hasNext()",
        "org.apache.commons.compress.harmony.pack200.Archive.PackingFile#isDirectory()",
        "org.apache.commons.compress.utils.ServiceLoaderIterator#remove()"
    ],
    "org.apache.commons.compress.harmony.pack200.MetadataBandGroup#addAnnotation(String,List<String>,List<String>,List<Object>,List<Integer>,List<String>,List<String>,List<Integer>)": [
        "org.apache.commons.compress.harmony.pack200.MetadataBandGroup#nextString(Iterator<Object>)",
        "org.apache.commons.compress.harmony.pack200.CpBands#getCPSignature(String)",
        "org.apache.commons.compress.harmony.pack200.CpBands#getCPUtf8(String)",
        "org.apache.commons.compress.harmony.pack200.CpBands#getConstant(Object)",
        "org.apache.commons.compress.harmony.pack200.IntList#add(int)"
    ],
    "org.apache.commons.compress.archivers.zip.ZipFile#positionAtCentralDirectory32()": [
        "org.apache.commons.compress.utils.IOUtils.readFully(ReadableByteChannel,ByteBuffer)",
        "org.apache.commons.compress.archivers.zip.ZipLong.getValue(byte[])",
        "org.apache.commons.compress.archivers.zip.ZipFile.<staticinit>()",
        "org.apache.commons.compress.utils.SeekableInMemoryByteChannel#position(long)",
        "org.apache.commons.compress.utils.SeekableInMemoryByteChannel#position()",
        "org.apache.commons.compress.utils.MultiReadOnlySeekableByteChannel#position()",
        "org.apache.commons.compress.archivers.zip.ZipFile#skipBytes(int)",
        "org.apache.commons.compress.utils.MultiReadOnlySeekableByteChannel#position(long,long)",
        "org.apache.commons.compress.utils.MultiReadOnlySeekableByteChannel#position(long)",
        "org.apache.commons.compress.archivers.zip.ZipShort.getValue(byte[])"
    ],
    "org.apache.commons.compress.archivers.zip.ZipFile#ZipFile(SeekableByteChannel,String,String,boolean,boolean)": ["org.apache.commons.compress.archivers.zip.ZipFile#ZipFile(SeekableByteChannel,String,String,boolean,boolean,boolean)"],
    "org.apache.commons.compress.harmony.unpack200.AttributeLayout#AttributeLayout(String,int,String,int)": ["org.apache.commons.compress.harmony.unpack200.AttributeLayout#AttributeLayout(String,int,String,int,boolean)"],
    "org.apache.commons.compress.utils.Lists#Lists()": ["org.apache.commons.compress.utils.Lists.<init>()"],
    "org.apache.commons.compress.utils.ByteUtils.toLittleEndian(ByteConsumer,long,int)": ["org.apache.commons.compress.utils.ByteUtils.OutputStreamByteConsumer#accept(int)"],
    "org.apache.commons.compress.archivers.dump.DumpArchiveEntry#toString()": ["org.apache.commons.compress.archivers.dump.DumpArchiveEntry#getName()"],
    "org.apache.commons.compress.utils.ByteUtils.toLittleEndian(OutputStream,long,int)": [
        "org.apache.commons.compress.archivers.sevenz.AES256SHA256Decoder.AES256SHA256DecoderOutputStream#write(int)",
        "org.apache.commons.compress.compressors.snappy.SnappyCompressorOutputStream#write(int)",
        "org.apache.commons.compress.archivers.sevenz.Coders.DeflateDecoder.DeflateDecoderOutputStream#write(int)",
        "org.apache.commons.compress.compressors.lz4.BlockLZ4CompressorOutputStream#write(int)",
        "org.apache.commons.compress.compressors.deflate.DeflateCompressorOutputStream#write(int)",
        "org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorOutputStream#write(int)",
        "org.apache.commons.compress.compressors.lzma.LZMACompressorOutputStream#write(int)",
        "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream#write(int)",
        "org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream#write(int)",
        "org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorOutputStream#write(int)",
        "org.apache.commons.compress.compressors.xz.XZCompressorOutputStream#write(int)",
        "org.apache.commons.compress.utils.FixedLengthBlockOutputStream#write(int)",
        "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.OutputStreamWrapper#write(int)",
        "org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream#write(int)",
        "org.apache.commons.compress.archivers.ArchiveOutputStream#write(int)",
        "org.apache.commons.compress.archivers.zip.ZipSplitOutputStream#write(int)",
        "org.apache.commons.compress.compressors.zstandard.ZstdCompressorOutputStream#write(int)",
        "org.apache.commons.compress.archivers.zip.RandomAccessOutputStream#write(int)"
    ],
    "org.apache.commons.compress.archivers.sevenz.DeltaDecoder#DeltaDecoder()": [
        "org.apache.commons.compress.archivers.sevenz.DeltaDecoder.<init>()",
        "org.apache.commons.compress.archivers.sevenz.AbstractCoder#AbstractCoder(Class<?>[]...)"
    ],
    "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream#readFromInflater(byte[],int,int)": ["org.apache.commons.compress.archivers.zip.ZipArchiveInputStream#fill()"],
    "org.apache.commons.compress.compressors.xz.XZCompressorInputStream#XZCompressorInputStream(InputStream,boolean,int)": [
        "org.apache.commons.compress.compressors.CompressorInputStream.<init>()",
        "org.apache.commons.compress.compressors.xz.XZCompressorInputStream.<init>()"
    ],
    "org.apache.commons.compress.harmony.unpack200.BandSet#parseFlags(String,InputStream,int,BHSDCodec,BHSDCodec)": ["org.apache.commons.compress.harmony.unpack200.BandSet#parseFlags(String,InputStream,int[],BHSDCodec,BHSDCodec)"],
    "org.apache.commons.compress.harmony.pack200.IcBands#pack(OutputStream)": [
        "org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream#write(byte[])",
        "org.apache.commons.compress.archivers.sevenz.Coders.DeflateDecoder.DeflateDecoderOutputStream#write(byte[])",
        "org.apache.commons.compress.harmony.pack200.BandSet#encodeBandInt(String,int[],BHSDCodec)",
        "org.apache.commons.compress.harmony.pack200.Codec.<staticinit>()",
        "org.apache.commons.compress.harmony.pack200.PackingUtils.log(String)",
        "org.apache.commons.compress.harmony.pack200.ConstantPoolEntry#getIndex()",
        "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.OutputStreamWrapper#write(byte[])",
        "org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream#write(byte[])",
        "org.apache.commons.compress.archivers.zip.ZipSplitOutputStream#write(byte[])"
    ],
    "org.apache.commons.compress.harmony.unpack200.NewAttributeBands#resolveCalls()": [
        "org.apache.commons.compress.harmony.unpack200.NewAttributeBands#resolveCallsForElement(int,Callable,LayoutElement)",
        "org.apache.commons.compress.harmony.unpack200.NewAttributeBands.Callable#setFirstCallable(boolean)"
    ],
    "org.apache.commons.compress.harmony.unpack200.ClassBands#parseFieldBands(InputStream)": [
        "org.apache.commons.compress.harmony.unpack200.BandSet#decodeBandInt(String,InputStream,BHSDCodec,int[])",
        "org.apache.commons.compress.harmony.pack200.Codec.<staticinit>()",
        "org.apache.commons.compress.harmony.unpack200.BandSet#getReferences(int[][],String[])",
        "org.apache.commons.compress.harmony.unpack200.ClassBands#parseFieldAttrBands(InputStream)",
        "org.apache.commons.compress.harmony.unpack200.CpBands#getCpDescriptor()"
    ],
    "org.apache.commons.compress.harmony.unpack200.bytecode.CPField#CPField(CPUTF8,CPUTF8,long,List<Attribute>)": [
        "org.apache.commons.compress.harmony.unpack200.bytecode.CPMember#CPMember(CPUTF8,CPUTF8,long,List<Attribute>)",
        "org.apache.commons.compress.harmony.unpack200.bytecode.CPField.<init>()"
    ],
    "org.apache.commons.compress.archivers.dump.TapeInputStream#available()": [
        "org.apache.commons.compress.compressors.deflate.DeflateCompressorInputStream#available()",
        "org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream#available()",
        "org.apache.commons.compress.compressors.brotli.BrotliCompressorInputStream#available()",
        "org.apache.commons.compress.compressors.xz.XZCompressorInputStream#available()",
        "org.apache.commons.compress.compressors.lz77support.AbstractLZ77CompressorInputStream#available()",
        "org.apache.commons.compress.compressors.deflate64.Deflate64CompressorInputStream#available()",
        "org.apache.commons.compress.compressors.zstandard.ZstdCompressorInputStream#available()",
        "org.apache.commons.compress.compressors.lzma.LZMACompressorInputStream#available()",
        "org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStream#available()"
    ],
    "org.apache.commons.compress.harmony.unpack200.bytecode.AnnotationsAttribute.Annotation#resolve(ClassConstantPool)": [
        "org.apache.commons.compress.harmony.unpack200.bytecode.CPString#resolve(ClassConstantPool)",
        "org.apache.commons.compress.harmony.unpack200.bytecode.LineNumberTableAttribute#resolve(ClassConstantPool)",
        "org.apache.commons.compress.harmony.unpack200.bytecode.RuntimeVisibleorInvisibleParameterAnnotationsAttribute#resolve(ClassConstantPool)",
        "org.apache.commons.compress.harmony.unpack200.bytecode.NewAttribute#resolve(ClassConstantPool)",
        "org.apache.commons.compress.harmony.unpack200.bytecode.LocalVariableTypeTableAttribute#resolve(ClassConstantPool)",
        "org.apache.commons.compress.harmony.unpack200.bytecode.ConstantValueAttribute#resolve(ClassConstantPool)",
        "org.apache.commons.compress.harmony.unpack200.bytecode.ByteCode#resolve(ClassConstantPool)",
        "org.apache.commons.compress.harmony.unpack200.bytecode.RuntimeVisibleorInvisibleAnnotationsAttribute#resolve(ClassConstantPool)",
        "org.apache.commons.compress.harmony.unpack200.bytecode.InnerClassesAttribute#resolve(ClassConstantPool)",
        "org.apache.commons.compress.harmony.unpack200.bytecode.CPMember#resolve(ClassConstantPool)",
        "org.apache.commons.compress.harmony.unpack200.bytecode.AnnotationDefaultAttribute#resolve(ClassConstantPool)",
        "org.apache.commons.compress.harmony.unpack200.bytecode.EnclosingMethodAttribute#resolve(ClassConstantPool)",
        "org.apache.commons.compress.harmony.unpack200.bytecode.ClassFileEntry#resolve(ClassConstantPool)",
        "org.apache.commons.compress.harmony.unpack200.bytecode.SourceFileAttribute#resolve(ClassConstantPool)",
        "org.apache.commons.compress.harmony.unpack200.bytecode.CPFieldRef#resolve(ClassConstantPool)",
        "org.apache.commons.compress.harmony.unpack200.bytecode.LocalVariableTableAttribute#resolve(ClassConstantPool)",
        "org.apache.commons.compress.harmony.unpack200.bytecode.CPRef#resolve(ClassConstantPool)",
        "org.apache.commons.compress.harmony.unpack200.bytecode.Attribute#resolve(ClassConstantPool)",
        "org.apache.commons.compress.harmony.unpack200.bytecode.ExceptionsAttribute#resolve(ClassConstantPool)",
        "org.apache.commons.compress.harmony.unpack200.bytecode.CodeAttribute#resolve(ClassConstantPool)",
        "org.apache.commons.compress.harmony.unpack200.bytecode.AnnotationsAttribute.ElementValue#resolve(ClassConstantPool)",
        "org.apache.commons.compress.harmony.unpack200.bytecode.ClassConstantPool#indexOf(ClassFileEntry)",
        "org.apache.commons.compress.harmony.unpack200.bytecode.CPClass#resolve(ClassConstantPool)",
        "org.apache.commons.compress.harmony.unpack200.bytecode.SignatureAttribute#resolve(ClassConstantPool)",
        "org.apache.commons.compress.harmony.unpack200.bytecode.CPNameAndType#resolve(ClassConstantPool)"
    ],
    "org.apache.commons.compress.utils.CountingInputStream#read(byte[],int,int)": [
        "org.apache.commons.compress.compressors.zstandard.ZstdCompressorInputStream#read(byte[],int,int)",
        "org.apache.commons.compress.utils.CountingInputStream#count(long)",
        "org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorInputStream#read(byte[],int,int)",
        "org.apache.commons.compress.archivers.sevenz.BoundedSeekableByteChannelInputStream#read(byte[],int,int)",
        "org.apache.commons.compress.compressors.deflate64.Deflate64CompressorInputStream#read(byte[],int,int)",
        "org.apache.commons.compress.compressors.brotli.BrotliCompressorInputStream#read(byte[],int,int)",
        "org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream#read(byte[],int,int)",
        "org.apache.commons.compress.archivers.sevenz.AES256SHA256Decoder.AES256SHA256DecoderInputStream#read(byte[],int,int)",
        "org.apache.commons.compress.compressors.lzma.LZMACompressorInputStream#read(byte[],int,int)",
        "org.apache.commons.compress.compressors.lz4.BlockLZ4CompressorInputStream#read(byte[],int,int)",
        "org.apache.commons.compress.compressors.snappy.SnappyCompressorInputStream#read(byte[],int,int)",
        "org.apache.commons.compress.compressors.xz.XZCompressorInputStream#read(byte[],int,int)",
        "org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream#read(byte[],int,int)",
        "org.apache.commons.compress.utils.BoundedArchiveInputStream#read(byte[],int,int)",
        "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream#read(byte[],int,int)",
        "org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStream#read(byte[],int,int)",
        "org.apache.commons.compress.compressors.lzw.LZWInputStream#read(byte[],int,int)",
        "org.apache.commons.compress.compressors.deflate.DeflateCompressorInputStream#read(byte[],int,int)"
    ],
    "org.apache.commons.compress.archivers.zip.UnparseableExtraFieldData#getHeaderId()": ["org.apache.commons.compress.archivers.zip.UnparseableExtraFieldData.<staticinit>()"],
    "org.apache.commons.compress.harmony.unpack200.bytecode.forms.MethodRefForm#getOffset(OperandManager)": ["org.apache.commons.compress.harmony.unpack200.bytecode.OperandManager#nextMethodRef()"],
    "org.apache.commons.compress.harmony.unpack200.bytecode.InnerClassesAttribute#getNestedClassFileEntries()": ["org.apache.commons.compress.harmony.unpack200.bytecode.ClassFileEntry.<staticinit>()"],
    "org.apache.commons.compress.harmony.unpack200.bytecode.forms.NarrowClassRefForm#setNestedEntries(ByteCode,OperandManager,int)": [
        "org.apache.commons.compress.harmony.unpack200.bytecode.forms.ClassRefForm#setNestedEntries(ByteCode,OperandManager,int)",
        "org.apache.commons.compress.harmony.unpack200.bytecode.ByteCode#setNestedPositions(int[][])"
    ],
    "org.apache.commons.compress.harmony.pack200.CpBands#getCPUtf8(String)": ["org.apache.commons.compress.harmony.pack200.CPUTF8#CPUTF8(String)"],
    "org.apache.commons.compress.harmony.pack200.BandSet#encodeBandInt(String,int[],BHSDCodec)": [
        "org.apache.commons.compress.harmony.pack200.SegmentHeader#appendBandCodingSpecifier(int)",
        "org.apache.commons.compress.harmony.pack200.Codec#encode(int[])",
        "org.apache.commons.compress.harmony.pack200.BHSDCodec#getB()",
        "org.apache.commons.compress.harmony.pack200.BHSDCodec#getL()",
        "org.apache.commons.compress.harmony.pack200.CodecEncoding.getSpecifier(Codec,Codec)",
        "org.apache.commons.compress.harmony.pack200.CodecEncoding.getSpecifierForDefaultCodec(BHSDCodec)",
        "org.apache.commons.compress.harmony.pack200.BandSet#analyseBand(String,int[],BHSDCodec)",
        "org.apache.commons.compress.harmony.pack200.BandSet.<staticinit>()",
        "org.apache.commons.compress.harmony.pack200.BHSDCodec#isSigned()"
    ],
    "org.apache.commons.compress.compressors.snappy.SnappyCompressorOutputStream#close()": [
        "org.apache.commons.compress.archivers.zip.FileRandomAccessOutputStream#close()",
        "org.apache.commons.compress.compressors.snappy.SnappyCompressorOutputStream#close()",
        "org.apache.commons.compress.compressors.deflate.DeflateCompressorOutputStream#close()",
        "org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream#close()",
        "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream#close()",
        "org.apache.commons.compress.compressors.lzma.LZMACompressorOutputStream#close()",
        "org.apache.commons.compress.utils.FixedLengthBlockOutputStream#close()",
        "org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorOutputStream#close()",
        "org.apache.commons.compress.compressors.xz.XZCompressorOutputStream#close()",
        "org.apache.commons.compress.archivers.zip.ZipSplitOutputStream#close()",
        "org.apache.commons.compress.archivers.zip.SeekableChannelRandomAccessOutputStream#close()",
        "org.apache.commons.compress.compressors.snappy.SnappyCompressorOutputStream#finish()",
        "org.apache.commons.compress.archivers.sevenz.Coders.DeflateDecoder.DeflateDecoderOutputStream#close()",
        "org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorOutputStream#close()",
        "org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream#close()",
        "org.apache.commons.compress.compressors.lz4.BlockLZ4CompressorOutputStream#close()",
        "org.apache.commons.compress.archivers.ar.ArArchiveOutputStream#close()",
        "org.apache.commons.compress.compressors.zstandard.ZstdCompressorOutputStream#close()",
        "org.apache.commons.compress.archivers.sevenz.AES256SHA256Decoder.AES256SHA256DecoderOutputStream#close()",
        "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream#close()",
        "org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream#close()",
        "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream#close()",
        "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.OutputStreamWrapper#close()"
    ],
    "org.apache.commons.compress.harmony.unpack200.bytecode.forms.FloatRefForm#getOffset(OperandManager)": ["org.apache.commons.compress.harmony.unpack200.bytecode.OperandManager#nextFloatRef()"],
    "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream#readDeflated(byte[],int,int)": ["org.apache.commons.compress.archivers.zip.ZipArchiveInputStream#readFromInflater(byte[],int,int)"],
    "org.apache.commons.compress.archivers.zip.ZipArchiveEntry#getCentralDirectoryExtra()": [
        "org.apache.commons.compress.archivers.zip.ZipArchiveEntry#getAllExtraFieldsNoCopy()",
        "org.apache.commons.compress.archivers.zip.ExtraFieldUtils.mergeCentralDirectoryData(ZipExtraField[])"
    ],
    "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile#write(byte[])": ["org.apache.commons.compress.archivers.sevenz.SevenZOutputFile#write(byte[],int,int)"],
    "org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorInputStream#maybeFinishCurrentBlock()": [
        "org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorInputStream#verifyChecksum(XXHash32,String)",
        "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream#close()",
        "org.apache.commons.compress.archivers.sevenz.BoundedSeekableByteChannelInputStream#close()",
        "org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStream#close()",
        "org.apache.commons.compress.compressors.brotli.BrotliCompressorInputStream#close()",
        "org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream#close()",
        "org.apache.commons.compress.compressors.deflate64.Deflate64CompressorInputStream#close()",
        "org.apache.commons.compress.compressors.deflate.DeflateCompressorInputStream#close()",
        "org.apache.commons.compress.archivers.sevenz.AES256SHA256Decoder.AES256SHA256DecoderInputStream#close()",
        "org.apache.commons.compress.compressors.xz.XZCompressorInputStream#close()",
        "org.apache.commons.compress.archivers.zip.ExplodingInputStream#close()",
        "org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream#close()",
        "org.apache.commons.compress.compressors.lzw.LZWInputStream#close()",
        "org.apache.commons.compress.compressors.lzma.LZMACompressorInputStream#close()",
        "org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorInputStream#close()",
        "org.apache.commons.compress.compressors.zstandard.ZstdCompressorInputStream#close()",
        "org.apache.commons.compress.compressors.lz77support.AbstractLZ77CompressorInputStream#close()"
    ],
    "org.apache.commons.compress.archivers.ar.ArArchiveOutputStream#writeArchiveHeader()": [
        "org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream#write(byte[])",
        "org.apache.commons.compress.archivers.sevenz.Coders.DeflateDecoder.DeflateDecoderOutputStream#write(byte[])",
        "org.apache.commons.compress.utils.ArchiveUtils.toAsciiBytes(String)",
        "org.apache.commons.compress.archivers.ar.ArArchiveEntry.<staticinit>()",
        "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.OutputStreamWrapper#write(byte[])",
        "org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream#write(byte[])",
        "org.apache.commons.compress.archivers.zip.ZipSplitOutputStream#write(byte[])"
    ],
    "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream#getAndMoveToFrontDecode0()": [
        "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.bsR(BitInputStream,int)",
        "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.checkBounds(int,int,String)",
        "org.apache.commons.compress.compressors.bzip2.BZip2Constants.<staticinit>()"
    ],
    "org.apache.commons.compress.harmony.unpack200.Archive#Archive(String,String)": ["org.apache.commons.compress.harmony.unpack200.Archive.<init>()"],
    "org.apache.commons.compress.compressors.gzip.GzipUtils.<staticinit>()": ["org.apache.commons.compress.compressors.FileNameUtil#FileNameUtil(Map<String, String>,String)"],
    "org.apache.commons.compress.archivers.dump.InvalidFormatException#InvalidFormatException()": [
        "org.apache.commons.compress.archivers.dump.DumpArchiveException#DumpArchiveException(String)",
        "org.apache.commons.compress.archivers.dump.InvalidFormatException.<init>()"
    ],
    "org.apache.commons.compress.archivers.zip.X0019_EncryptionRecipientCertificateList.<staticinit>()": ["org.apache.commons.compress.archivers.zip.ZipShort#ZipShort(int)"],
    "org.apache.commons.compress.harmony.pack200.Segment#Segment()": [
        "org.apache.commons.compress.harmony.pack200.Segment.<staticinit>()",
        "org.apache.commons.compress.harmony.pack200.Segment.<init>()"
    ],
    "org.apache.commons.compress.harmony.unpack200.BandSet#parseCPDoubleReferences(String,InputStream,BHSDCodec,int)": [
        "org.apache.commons.compress.harmony.unpack200.Segment#getCpBands()",
        "org.apache.commons.compress.harmony.unpack200.BandSet#decodeBandInt(String,InputStream,BHSDCodec,int)",
        "org.apache.commons.compress.harmony.unpack200.CpBands#cpDoubleValue(int)"
    ],
    "org.apache.commons.compress.archivers.dump.DumpArchiveEntry#equals(Object)": ["org.apache.commons.compress.archivers.dump.DumpArchiveSummary#equals(Object)"],
    "org.apache.commons.compress.archivers.sevenz.SevenZFileOptions#SevenZFileOptions(int,boolean,boolean)": ["org.apache.commons.compress.archivers.sevenz.SevenZFileOptions.<init>()"],
    "org.apache.commons.compress.compressors.snappy.SnappyCompressorOutputStream#writeBackReference(BackReference)": [
        "org.apache.commons.compress.compressors.lz77support.LZ77Compressor.BackReference#getLength()",
        "org.apache.commons.compress.compressors.snappy.SnappyCompressorOutputStream#writeBackReferenceWithFourOffsetBytes(int,int)",
        "org.apache.commons.compress.compressors.snappy.SnappyCompressorOutputStream#writeBackReferenceWithOneOffsetByte(int,int)",
        "org.apache.commons.compress.compressors.lz77support.LZ77Compressor.BackReference#getOffset()",
        "org.apache.commons.compress.compressors.snappy.SnappyCompressorOutputStream#writeBackReferenceWithTwoOffsetBytes(int,int)",
        "org.apache.commons.compress.compressors.snappy.SnappyCompressorOutputStream.<staticinit>()"
    ],
    "org.apache.commons.compress.harmony.archive.internal.nls.Messages.getString(String,char)": ["org.apache.commons.compress.harmony.archive.internal.nls.Messages.getString(String,Object[])"],
    "org.apache.commons.compress.harmony.unpack200.BandSet#BandSet(Segment)": [
        "org.apache.commons.compress.harmony.unpack200.BandSet.<init>()",
        "org.apache.commons.compress.harmony.unpack200.Segment#getSegmentHeader()"
    ],
    "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream#close()": [
        "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream#finish()",
        "org.apache.commons.compress.utils.FixedLengthBlockOutputStream#close()"
    ],
    "org.apache.commons.compress.archivers.tar.TarArchiveEntry#readFileMode(Path,String,LinkOption[]...)": [
        "org.apache.commons.compress.archivers.tar.TarConstants.<staticinit>()",
        "org.apache.commons.compress.archivers.tar.TarArchiveEntry.<staticinit>()"
    ],
    "org.apache.commons.compress.harmony.unpack200.MetadataBandGroup#getNextValue(int)": [
        "org.apache.commons.compress.harmony.unpack200.CpBands#cpNameAndTypeValue(String)",
        "org.apache.commons.compress.harmony.unpack200.bytecode.AnnotationsAttribute.ElementValue#ElementValue(int,Object)",
        "org.apache.commons.compress.harmony.unpack200.MetadataBandGroup#getAnnotation(CPUTF8,int,Iterator<CPUTF8>)",
        "org.apache.commons.compress.harmony.unpack200.MetadataBandGroup#getNextValue(int)"
    ],
    "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream#readFirstLocalFileHeader()": [
        "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream#pushback(byte[],int,int)",
        "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream#readFully(byte[])",
        "org.apache.commons.compress.archivers.zip.ZipFile.<staticinit>()",
        "org.apache.commons.compress.archivers.zip.ZipLong#ZipLong(byte[],int)",
        "org.apache.commons.compress.archivers.zip.ZipLong#equals(Object)",
        "org.apache.commons.compress.archivers.zip.ZipLong#ZipLong(byte[])",
        "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream#readFully(byte[],int)",
        "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.<staticinit>()",
        "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.<staticinit>()",
        "org.apache.commons.compress.archivers.zip.UnsupportedZipFeatureException.Feature.<staticinit>()",
        "org.apache.commons.compress.archivers.zip.ZipLong.<staticinit>()",
        "org.apache.commons.compress.archivers.zip.UnsupportedZipFeatureException#UnsupportedZipFeatureException(Feature)"
    ],
    "org.apache.commons.compress.archivers.ar.ArArchiveEntry#ArArchiveEntry(File,String)": [
        "org.apache.commons.compress.archivers.ar.ArArchiveEntry#ArArchiveEntry(String,long,int,int,int,long)",
        "org.apache.commons.compress.archivers.ar.ArArchiveEntry.<staticinit>()"
    ],
    "org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp#setModifyJavaTime(Date)": [
        "org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp#setModifyTime(ZipLong)",
        "org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp.dateToZipLong(Date)"
    ],
    "org.apache.commons.compress.harmony.pack200.BcBands#visitFieldInsn(int,String,String,String)": [
        "org.apache.commons.compress.harmony.pack200.IntList#get(int)",
        "org.apache.commons.compress.harmony.pack200.BcBands.<staticinit>()",
        "org.apache.commons.compress.harmony.pack200.IntList#add(int)",
        "org.apache.commons.compress.harmony.pack200.IntList#remove(int)",
        "org.apache.commons.compress.harmony.pack200.IntList#size()",
        "org.apache.commons.compress.harmony.pack200.BcBands#updateRenumbering()",
        "org.apache.commons.compress.harmony.pack200.CpBands#getCPField(String,String,String)"
    ],
    "org.apache.commons.compress.harmony.unpack200.NewAttributeBands#getCodec(String)": ["org.apache.commons.compress.harmony.pack200.Codec.<staticinit>()"],
    "org.apache.commons.compress.utils.ExactMath#ExactMath()": ["org.apache.commons.compress.utils.ExactMath.<init>()"],
    "org.apache.commons.compress.harmony.pack200.ClassBands#addEnclosingMethod(String,String,String)": [
        "org.apache.commons.compress.harmony.pack200.CpBands#getCPNameAndType(String,String)",
        "org.apache.commons.compress.harmony.pack200.CpBands#getCPClass(String)"
    ],
    "org.apache.commons.compress.archivers.ArchiveStreamFactory#createArchiveInputStream(String,InputStream,String)": [
        "org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream#CpioArchiveInputStream(InputStream)",
        "org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream#CpioArchiveInputStream(InputStream,String)",
        "org.apache.commons.compress.archivers.jar.JarArchiveInputStream#JarArchiveInputStream(InputStream)",
        "org.apache.commons.compress.archivers.ArchiveStreamFactory#createArchiveInputStream(String,InputStream,String)",
        "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream#ZipArchiveInputStream(InputStream,String)",
        "org.apache.commons.compress.archivers.StreamingNotSupportedException#StreamingNotSupportedException(String)",
        "org.apache.commons.compress.archivers.tar.TarArchiveInputStream#TarArchiveInputStream(InputStream)",
        "org.apache.commons.compress.archivers.ArchiveException#ArchiveException(String)",
        "org.apache.commons.compress.archivers.arj.ArjArchiveInputStream#ArjArchiveInputStream(InputStream,String)",
        "org.apache.commons.compress.archivers.dump.DumpArchiveInputStream#DumpArchiveInputStream(InputStream)",
        "org.apache.commons.compress.archivers.jar.JarArchiveInputStream#JarArchiveInputStream(InputStream,String)",
        "org.apache.commons.compress.archivers.ar.ArArchiveInputStream#ArArchiveInputStream(InputStream)",
        "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream#ZipArchiveInputStream(InputStream)",
        "org.apache.commons.compress.archivers.dump.DumpArchiveInputStream#DumpArchiveInputStream(InputStream,String)",
        "org.apache.commons.compress.archivers.ArchiveStreamFactory.<staticinit>()",
        "org.apache.commons.compress.archivers.ArchiveStreamFactory.toKey(String)",
        "org.apache.commons.compress.archivers.ArchiveStreamFactory#getArchiveInputStreamProviders()",
        "org.apache.commons.compress.archivers.arj.ArjArchiveInputStream#ArjArchiveInputStream(InputStream)",
        "org.apache.commons.compress.archivers.tar.TarArchiveInputStream#TarArchiveInputStream(InputStream,String)"
    ],
    "org.apache.commons.compress.compressors.deflate.DeflateCompressorOutputStream#DeflateCompressorOutputStream(OutputStream)": [
        "org.apache.commons.compress.compressors.deflate.DeflateParameters.<init>()",
        "org.apache.commons.compress.compressors.deflate.DeflateCompressorOutputStream#DeflateCompressorOutputStream(OutputStream,DeflateParameters)"
    ],
    "org.apache.commons.compress.archivers.zip.ResourceAlignmentExtraField#getCentralDirectoryData()": [
        "org.apache.commons.compress.archivers.zip.ResourceAlignmentExtraField.<staticinit>()",
        "org.apache.commons.compress.archivers.zip.ZipShort.getBytes(int)"
    ],
    "org.apache.commons.compress.harmony.unpack200.bytecode.ConstantValueAttribute#equals(Object)": ["org.apache.commons.compress.harmony.unpack200.bytecode.Attribute#equals(Object)"],
    "org.apache.commons.compress.archivers.zip.ZipArchiveEntry#setCreationTime(FileTime)": ["org.apache.commons.compress.archivers.zip.ZipArchiveEntry#setExtraTimeFields()"],
    "org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream#GzipCompressorInputStream(InputStream,boolean)": [
        "org.apache.commons.compress.compressors.CompressorInputStream.<init>()",
        "org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream#init(boolean)",
        "org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream.<init>()"
    ],
    "org.apache.commons.compress.archivers.tar.TarArchiveEntry#TarArchiveEntry(File)": ["org.apache.commons.compress.archivers.tar.TarArchiveEntry#TarArchiveEntry(File,String)"],
    "org.apache.commons.compress.archivers.sevenz.SevenZFile#SevenZFile(File,char[],SevenZFileOptions)": [
        "org.apache.commons.compress.archivers.sevenz.SevenZFile.newByteChannel(File)",
        "org.apache.commons.compress.archivers.sevenz.SevenZFile#SevenZFile(SeekableByteChannel,String,byte[],boolean,SevenZFileOptions)",
        "org.apache.commons.compress.archivers.sevenz.AES256SHA256Decoder.utf16Decode(char[])"
    ],
    "org.apache.commons.compress.harmony.pack200.Segment#processClasses(SegmentUnit,Attribute[])": [
        "org.apache.commons.compress.harmony.pack200.ClassBands#removeCurrentClass()",
        "org.apache.commons.compress.harmony.pack200.Archive.PackingFile#getName()",
        "org.apache.commons.compress.harmony.pack200.Pack200Exception#Pack200Exception(String)",
        "org.apache.commons.compress.harmony.pack200.CpBands#addCPUtf8(String)",
        "org.apache.commons.compress.harmony.pack200.Archive.SegmentUnit#classListSize()",
        "org.apache.commons.compress.harmony.pack200.PackingOptions#addPassFile(String)",
        "org.apache.commons.compress.harmony.pack200.Archive.SegmentUnit#getFileList()",
        "org.apache.commons.compress.harmony.pack200.Pack200ClassReader#getFileName()",
        "org.apache.commons.compress.harmony.pack200.SegmentHeader#setClass_count(int)",
        "org.apache.commons.compress.harmony.pack200.Archive.PackingFile#setContents(byte[])",
        "org.apache.commons.compress.harmony.pack200.Archive.SegmentUnit#getClassList()"
    ],
    "org.apache.commons.compress.archivers.tar.TarArchiveEntry#TarArchiveEntry(byte[],ZipEncoding)": ["org.apache.commons.compress.archivers.tar.TarArchiveEntry#TarArchiveEntry(byte[],ZipEncoding,boolean)"],
    "org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream#writeOldAsciiEntry(CpioArchiveEntry)": [
        "org.apache.commons.compress.archivers.cpio.CpioArchiveEntry#getUID()",
        "org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream#writeCString(byte[])",
        "org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream#encode(String)",
        "org.apache.commons.compress.archivers.cpio.CpioArchiveEntry#getRemoteDevice()",
        "org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream#writeAsciiLong(long,int,int)",
        "org.apache.commons.compress.archivers.cpio.CpioArchiveEntry#getName()",
        "org.apache.commons.compress.archivers.cpio.CpioArchiveEntry#getNumberOfLinks()",
        "org.apache.commons.compress.archivers.cpio.CpioArchiveEntry#getDevice()",
        "org.apache.commons.compress.archivers.cpio.CpioArchiveEntry#getMode()",
        "org.apache.commons.compress.archivers.cpio.CpioArchiveEntry#getSize()",
        "org.apache.commons.compress.archivers.cpio.CpioArchiveEntry#getTime()",
        "org.apache.commons.compress.archivers.cpio.CpioConstants.<staticinit>()",
        "org.apache.commons.compress.archivers.cpio.CpioArchiveEntry#getGID()",
        "org.apache.commons.compress.archivers.cpio.CpioArchiveEntry#getInode()"
    ],
    "org.apache.commons.compress.harmony.pack200.BandSet#encodeFlags(String,long[][],BHSDCodec,BHSDCodec,boolean)": [
        "org.apache.commons.compress.harmony.pack200.BandSet#flatten(long[][])",
        "org.apache.commons.compress.harmony.pack200.BandSet#encodeFlags(String,long[],BHSDCodec,BHSDCodec,boolean)"
    ],
    "org.apache.commons.compress.harmony.unpack200.AttributeLayoutMap#getAttributeLayout(int,int)": ["org.apache.commons.compress.harmony.unpack200.AttributeLayoutMap#getLayout(int)"],
    "org.apache.commons.compress.utils.ByteUtils#ByteUtils()": ["org.apache.commons.compress.utils.ByteUtils.<init>()"],
    "org.apache.commons.compress.archivers.sevenz.SevenZFile#sanityCheckStreamsInfo(ByteBuffer,ArchiveStatistics)": [
        "org.apache.commons.compress.archivers.sevenz.SevenZFile#sanityCheckSubStreamsInfo(ByteBuffer,ArchiveStatistics)",
        "org.apache.commons.compress.archivers.sevenz.SevenZFile#sanityCheckPackInfo(ByteBuffer,ArchiveStatistics)",
        "org.apache.commons.compress.archivers.sevenz.NID.<staticinit>()",
        "org.apache.commons.compress.archivers.sevenz.SevenZFile.getUnsignedByte(ByteBuffer)",
        "org.apache.commons.compress.archivers.sevenz.SevenZFile#sanityCheckUnpackInfo(ByteBuffer,ArchiveStatistics)"
    ],
    "org.apache.commons.compress.archivers.sevenz.SevenZFile#reopenFolderInputStream(int,SevenZArchiveEntry)": [
        "org.apache.commons.compress.archivers.sevenz.SevenZFile.<staticinit>()",
        "org.apache.commons.compress.archivers.sevenz.SevenZFile#buildDecoderStack(Folder,long,int,SevenZArchiveEntry)",
        "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream#close()",
        "org.apache.commons.compress.archivers.sevenz.BoundedSeekableByteChannelInputStream#close()",
        "org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStream#close()",
        "org.apache.commons.compress.compressors.brotli.BrotliCompressorInputStream#close()",
        "org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream#close()",
        "org.apache.commons.compress.compressors.deflate64.Deflate64CompressorInputStream#close()",
        "org.apache.commons.compress.compressors.deflate.DeflateCompressorInputStream#close()",
        "org.apache.commons.compress.archivers.sevenz.AES256SHA256Decoder.AES256SHA256DecoderInputStream#close()",
        "org.apache.commons.compress.compressors.xz.XZCompressorInputStream#close()",
        "org.apache.commons.compress.archivers.zip.ExplodingInputStream#close()",
        "org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream#close()",
        "org.apache.commons.compress.compressors.lzw.LZWInputStream#close()",
        "org.apache.commons.compress.compressors.lzma.LZMACompressorInputStream#close()",
        "org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorInputStream#close()",
        "org.apache.commons.compress.compressors.zstandard.ZstdCompressorInputStream#close()",
        "org.apache.commons.compress.compressors.lz77support.AbstractLZ77CompressorInputStream#close()"
    ],
    "org.apache.commons.compress.archivers.tar.TarArchiveEntry#TarArchiveEntry(String,byte,boolean)": [
        "org.apache.commons.compress.archivers.tar.TarConstants.<staticinit>()",
        "org.apache.commons.compress.archivers.tar.TarArchiveEntry#TarArchiveEntry(String,boolean)"
    ],
    "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream#ZipArchiveOutputStream(Path,long)": [
        "org.apache.commons.compress.archivers.zip.ZipSplitOutputStream#ZipSplitOutputStream(Path,long)",
        "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.<init>()",
        "org.apache.commons.compress.archivers.zip.StreamCompressor.create(OutputStream,Deflater)",
        "org.apache.commons.compress.archivers.ArchiveOutputStream.<init>()"
    ],
    "org.apache.commons.compress.harmony.unpack200.MetadataBandGroup.setRiaAttributeName(CPUTF8)": ["org.apache.commons.compress.harmony.unpack200.MetadataBandGroup.<staticinit>()"],
    "org.apache.commons.compress.archivers.Lister.detectFormat(Path)": ["org.apache.commons.compress.archivers.ArchiveStreamFactory.detect(InputStream)"],
    "org.apache.commons.compress.compressors.deflate64.HuffmanDecoder#decode(byte[],int,int)": [
        "org.apache.commons.compress.compressors.deflate64.HuffmanDecoder.HuffmanCodes#HuffmanCodes(HuffmanState,int[],int[])",
        "org.apache.commons.compress.compressors.deflate64.HuffmanDecoder.InitialState#state()",
        "org.apache.commons.compress.compressors.deflate64.HuffmanDecoder.HuffmanCodes#read(byte[],int,int)",
        "org.apache.commons.compress.compressors.deflate64.HuffmanDecoder.<staticinit>()",
        "org.apache.commons.compress.compressors.deflate64.HuffmanDecoder#switchToUncompressedState()",
        "org.apache.commons.compress.compressors.deflate64.HuffmanDecoder.InitialState#hasData()",
        "org.apache.commons.compress.compressors.deflate64.HuffmanDecoder.InitialState#read(byte[],int,int)",
        "org.apache.commons.compress.compressors.deflate64.HuffmanDecoder#readDynamicTables()",
        "org.apache.commons.compress.compressors.deflate64.HuffmanState.<staticinit>()",
        "org.apache.commons.compress.compressors.deflate64.HuffmanDecoder.UncompressedState#hasData()",
        "org.apache.commons.compress.compressors.deflate64.HuffmanDecoder.HuffmanCodes#hasData()",
        "org.apache.commons.compress.compressors.deflate64.HuffmanDecoder.HuffmanCodes#state()",
        "org.apache.commons.compress.compressors.deflate64.HuffmanDecoder.UncompressedState#state()",
        "org.apache.commons.compress.compressors.deflate64.HuffmanDecoder#readBits(int)",
        "org.apache.commons.compress.compressors.deflate64.HuffmanDecoder.UncompressedState#read(byte[],int,int)"
    ],
    "org.apache.commons.compress.harmony.unpack200.bytecode.CPRef#resolve(ClassConstantPool)": [
        "org.apache.commons.compress.harmony.unpack200.bytecode.ClassConstantPool#indexOf(ClassFileEntry)",
        "org.apache.commons.compress.harmony.unpack200.bytecode.ClassFileEntry#resolve(ClassConstantPool)"
    ],
    "org.apache.commons.compress.harmony.unpack200.bytecode.CPMethodRef#CPMethodRef(CPClass,CPNameAndType,int)": [
        "org.apache.commons.compress.harmony.unpack200.bytecode.ConstantPoolEntry.<staticinit>()",
        "org.apache.commons.compress.harmony.unpack200.bytecode.CPRef#CPRef(byte,CPClass,CPNameAndType,int)",
        "org.apache.commons.compress.harmony.unpack200.bytecode.CPMethodRef.<init>()"
    ],
    "org.apache.commons.compress.archivers.sevenz.LZMA2Decoder#numberOptionOrDefault(Object)": ["org.apache.commons.compress.archivers.sevenz.AbstractCoder.toInt(Object,int)"],
    "org.apache.commons.compress.harmony.pack200.ClassBands#addMaxStack(int,int)": ["org.apache.commons.compress.harmony.pack200.IntList#add(int)"],
    "org.apache.commons.compress.archivers.zip.ZipFile.StoredStatisticsStream#getUncompressedCount()": ["org.apache.commons.compress.archivers.zip.ZipFile.StoredStatisticsStream#getCompressedCount()"],
    "org.apache.commons.compress.archivers.zip.ZipUtil.dosToJavaTime(long)": ["org.apache.commons.compress.archivers.zip.ZipUtil.dosToJavaDate(long)"],
    "org.apache.commons.compress.archivers.sevenz.AES256SHA256Decoder.AES256SHA256DecoderInputStream#AES256SHA256DecoderInputStream(InputStream,Coder,String,byte[])": ["org.apache.commons.compress.archivers.sevenz.AES256SHA256Decoder.AES256SHA256DecoderInputStream.<init>()"],
    "org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField#AbstractUnicodeExtraField(String,byte[],int,int)": ["org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField.<init>()"],
    "org.apache.commons.compress.harmony.pack200.ClassBands#addLocalVariable(String,String,String,Label,Label,int)": [
        "org.apache.commons.compress.harmony.pack200.IntList#size()",
        "org.apache.commons.compress.harmony.pack200.IntList#increment(int)",
        "org.apache.commons.compress.harmony.pack200.CpBands#getCPSignature(String)",
        "org.apache.commons.compress.harmony.pack200.CpBands#getCPUtf8(String)",
        "org.apache.commons.compress.harmony.pack200.IntList#add(int)"
    ],
    "org.apache.commons.compress.archivers.tar.TarArchiveInputStream#TarArchiveInputStream(InputStream,int,int,String)": ["org.apache.commons.compress.archivers.tar.TarArchiveInputStream#TarArchiveInputStream(InputStream,int,int,String,boolean)"],
    "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream#complete()": [
        "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.bsGetInt(BitInputStream)",
        "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.<staticinit>()",
        "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream#init(boolean)"
    ],
    "org.apache.commons.compress.archivers.zip.ZipFile#positionAtCentralDirectory()": [
        "org.apache.commons.compress.archivers.zip.ZipFile#positionAtCentralDirectory32()",
        "org.apache.commons.compress.archivers.zip.ZipFile#positionAtCentralDirectory64()",
        "org.apache.commons.compress.archivers.zip.ZipFile.positionAtEndOfCentralDirectoryRecord(SeekableByteChannel)"
    ],
    "org.apache.commons.compress.harmony.pack200.Segment#pack(SegmentUnit,OutputStream,PackingOptions)": [
        "org.apache.commons.compress.harmony.pack200.AttributeDefinitionBands#finaliseBands()",
        "org.apache.commons.compress.harmony.pack200.AttributeDefinitionBands#AttributeDefinitionBands(Segment,int,Attribute[])",
        "org.apache.commons.compress.harmony.pack200.Archive.SegmentUnit#classListSize()",
        "org.apache.commons.compress.harmony.pack200.CpBands#pack(OutputStream)",
        "org.apache.commons.compress.harmony.pack200.IcBands#finaliseBands()",
        "org.apache.commons.compress.harmony.pack200.IcBands#pack(OutputStream)",
        "org.apache.commons.compress.harmony.pack200.Archive.SegmentUnit#addPackedByteAmount(int)",
        "org.apache.commons.compress.harmony.pack200.ClassBands#ClassBands(Segment,int,int,boolean)",
        "org.apache.commons.compress.harmony.pack200.SegmentHeader#setFile_count(int)",
        "org.apache.commons.compress.harmony.pack200.Segment#processClasses(SegmentUnit,Attribute[])",
        "org.apache.commons.compress.harmony.pack200.CpBands#CpBands(Segment,int)",
        "org.apache.commons.compress.harmony.pack200.ClassBands#finaliseBands()",
        "org.apache.commons.compress.harmony.pack200.ClassBands#pack(OutputStream)",
        "org.apache.commons.compress.harmony.pack200.SegmentHeader#setDeflate_hint(boolean)",
        "org.apache.commons.compress.harmony.pack200.PackingOptions#isKeepDeflateHint()",
        "org.apache.commons.compress.harmony.pack200.Archive.SegmentUnit#fileListSize()",
        "org.apache.commons.compress.harmony.pack200.BcBands#BcBands(CpBands,Segment,int)",
        "org.apache.commons.compress.harmony.pack200.AttributeDefinitionBands#pack(OutputStream)",
        "org.apache.commons.compress.harmony.pack200.PackingOptions#isStripDebug()",
        "org.apache.commons.compress.harmony.pack200.FileBands#finaliseBands()",
        "org.apache.commons.compress.harmony.pack200.Archive.SegmentUnit#getByteAmount()",
        "org.apache.commons.compress.harmony.pack200.FileBands#pack(OutputStream)",
        "org.apache.commons.compress.harmony.pack200.PackingOptions#getDeflateHint()",
        "org.apache.commons.compress.harmony.pack200.SegmentHeader#SegmentHeader()",
        "org.apache.commons.compress.harmony.pack200.BcBands#finaliseBands()",
        "org.apache.commons.compress.harmony.pack200.Archive.SegmentUnit#getPackedByteAmount()",
        "org.apache.commons.compress.harmony.pack200.SegmentHeader#pack(OutputStream)",
        "org.apache.commons.compress.harmony.pack200.IcBands#IcBands(SegmentHeader,CpBands,int)",
        "org.apache.commons.compress.harmony.pack200.CpBands#finaliseBands()",
        "org.apache.commons.compress.harmony.pack200.PackingOptions#getEffort()",
        "org.apache.commons.compress.harmony.pack200.SegmentHeader#setHave_all_code_flags(boolean)",
        "org.apache.commons.compress.harmony.pack200.FileBands#FileBands(CpBands,SegmentHeader,PackingOptions,SegmentUnit,int)",
        "org.apache.commons.compress.harmony.pack200.PackingUtils.log(String)",
        "org.apache.commons.compress.harmony.pack200.SegmentHeader#setClass_count(int)",
        "org.apache.commons.compress.harmony.pack200.ClassBands#numClassesProcessed()",
        "org.apache.commons.compress.harmony.pack200.BcBands#pack(OutputStream)",
        "org.apache.commons.compress.harmony.pack200.PackingOptions#getUnknownAttributePrototypes()"
    ],
    "org.apache.commons.compress.archivers.zip.ZipSplitOutputStream#createNewSplitSegmentFile(Integer)": ["org.apache.commons.compress.archivers.zip.ZipSplitOutputStream#getSplitSegmentFileName(Integer)"],
    "org.apache.commons.compress.archivers.zip.ExtraFieldUtils.register(Class<?>)": [
        "org.apache.commons.compress.archivers.zip.X7875_NewUnix#getHeaderId()",
        "org.apache.commons.compress.archivers.zip.ExtraFieldUtils.<staticinit>()",
        "org.apache.commons.compress.archivers.zip.JarMarker#getHeaderId()",
        "org.apache.commons.compress.archivers.zip.PKWareExtraHeader#getHeaderId()",
        "org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField#getHeaderId()",
        "org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp#getHeaderId()",
        "org.apache.commons.compress.archivers.zip.X000A_NTFS#getHeaderId()",
        "org.apache.commons.compress.archivers.zip.UnparseableExtraFieldData#getHeaderId()",
        "org.apache.commons.compress.archivers.zip.ResourceAlignmentExtraField#getHeaderId()",
        "org.apache.commons.compress.archivers.zip.AsiExtraField#getHeaderId()",
        "org.apache.commons.compress.archivers.zip.UnicodePathExtraField#getHeaderId()",
        "org.apache.commons.compress.archivers.zip.UnicodeCommentExtraField#getHeaderId()",
        "org.apache.commons.compress.archivers.zip.UnrecognizedExtraField#getHeaderId()"
    ],
    "org.apache.commons.compress.utils.FixedLengthBlockOutputStream#write(byte[],int,int)": [
        "org.apache.commons.compress.utils.FixedLengthBlockOutputStream#isOpen()",
        "org.apache.commons.compress.utils.FixedLengthBlockOutputStream#maybeFlush()"
    ],
    "org.apache.commons.compress.archivers.cpio.CpioArchiveEntry#CpioArchiveEntry(short,String,long)": [
        "org.apache.commons.compress.archivers.cpio.CpioArchiveEntry#CpioArchiveEntry(short,String)",
        "org.apache.commons.compress.archivers.cpio.CpioArchiveEntry#setSize(long)"
    ],
    "org.apache.commons.compress.archivers.cpio.CpioArchiveEntry#getDeviceMin()": ["org.apache.commons.compress.archivers.cpio.CpioArchiveEntry#checkNewFormat()"],
    "org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream#close()": [
        "org.apache.commons.compress.archivers.zip.FileRandomAccessOutputStream#close()",
        "org.apache.commons.compress.compressors.snappy.SnappyCompressorOutputStream#close()",
        "org.apache.commons.compress.compressors.deflate.DeflateCompressorOutputStream#close()",
        "org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream#close()",
        "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream#close()",
        "org.apache.commons.compress.compressors.lzma.LZMACompressorOutputStream#close()",
        "org.apache.commons.compress.utils.FixedLengthBlockOutputStream#close()",
        "org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorOutputStream#close()",
        "org.apache.commons.compress.compressors.xz.XZCompressorOutputStream#close()",
        "org.apache.commons.compress.archivers.zip.ZipSplitOutputStream#close()",
        "org.apache.commons.compress.archivers.zip.SeekableChannelRandomAccessOutputStream#close()",
        "org.apache.commons.compress.archivers.sevenz.Coders.DeflateDecoder.DeflateDecoderOutputStream#close()",
        "org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorOutputStream#close()",
        "org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream#close()",
        "org.apache.commons.compress.compressors.lz4.BlockLZ4CompressorOutputStream#close()",
        "org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream#finish()",
        "org.apache.commons.compress.archivers.ar.ArArchiveOutputStream#close()",
        "org.apache.commons.compress.compressors.zstandard.ZstdCompressorOutputStream#close()",
        "org.apache.commons.compress.archivers.sevenz.AES256SHA256Decoder.AES256SHA256DecoderOutputStream#close()",
        "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream#close()",
        "org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream#close()",
        "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream#close()",
        "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.OutputStreamWrapper#close()"
    ],
    "org.apache.commons.compress.archivers.zip.NioZipEncoding.encodeFully(CharsetEncoder,CharBuffer,ByteBuffer)": [
        "org.apache.commons.compress.archivers.zip.ZipEncodingHelper.growBufferBy(ByteBuffer,int)",
        "org.apache.commons.compress.archivers.zip.NioZipEncoding.estimateIncrementalEncodingSize(CharsetEncoder,int)"
    ],
    "org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStream#skipBlock()": [
        "org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStream#readSize()",
        "org.apache.commons.compress.compressors.CompressorInputStream#count(long)"
    ],
    "org.apache.commons.compress.archivers.sevenz.LZMA2Decoder#getOptions(Object)": ["org.apache.commons.compress.archivers.sevenz.LZMA2Decoder#numberOptionOrDefault(Object)"],
    "org.apache.commons.compress.archivers.zip.UnrecognizedExtraField#setLocalFileDataData(byte[])": ["org.apache.commons.compress.archivers.zip.ZipUtil.copy(byte[])"],
    "org.apache.commons.compress.archivers.sevenz.LZMADecoder#decode(String,InputStream,long,Coder,byte[],int)": [
        "org.apache.commons.compress.archivers.sevenz.LZMADecoder#getDictionarySize(Coder)",
        "org.apache.commons.compress.MemoryLimitException#MemoryLimitException(long,int)"
    ],
    "org.apache.commons.compress.archivers.zip.ZipIoUtil.writeFully(SeekableByteChannel,ByteBuffer)": [
        "org.apache.commons.compress.utils.SeekableInMemoryByteChannel#write(ByteBuffer)",
        "org.apache.commons.compress.utils.MultiReadOnlySeekableByteChannel#write(ByteBuffer)"
    ],
    "org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream#writeOldBinaryEntry(CpioArchiveEntry,boolean)": [
        "org.apache.commons.compress.archivers.cpio.CpioArchiveEntry#getUID()",
        "org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream#encode(String)",
        "org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream#writeCString(byte[])",
        "org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream#writeBinaryLong(long,int,boolean)",
        "org.apache.commons.compress.archivers.cpio.CpioArchiveEntry#getRemoteDevice()",
        "org.apache.commons.compress.archivers.cpio.CpioArchiveEntry#getHeaderPadCount(long)",
        "org.apache.commons.compress.archivers.cpio.CpioArchiveEntry#getName()",
        "org.apache.commons.compress.archivers.cpio.CpioArchiveEntry#getNumberOfLinks()",
        "org.apache.commons.compress.archivers.cpio.CpioArchiveEntry#getDevice()",
        "org.apache.commons.compress.archivers.cpio.CpioArchiveEntry#getMode()",
        "org.apache.commons.compress.archivers.cpio.CpioArchiveEntry#getSize()",
        "org.apache.commons.compress.archivers.cpio.CpioArchiveEntry#getTime()",
        "org.apache.commons.compress.archivers.cpio.CpioConstants.<staticinit>()",
        "org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream#pad(int)",
        "org.apache.commons.compress.archivers.cpio.CpioArchiveEntry#getGID()",
        "org.apache.commons.compress.archivers.cpio.CpioArchiveEntry#getInode()"
    ],
    "org.apache.commons.compress.harmony.unpack200.bytecode.InnerClassesAttribute.InnerClassesEntry#InnerClassesEntry(CPClass,CPClass,CPUTF8,int)": ["org.apache.commons.compress.harmony.unpack200.bytecode.InnerClassesAttribute.InnerClassesEntry.<init>()"],
    "org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp.unixTimeToFileTime(ZipLong)": [
        "org.apache.commons.compress.archivers.zip.ZipLong#getIntValue()",
        "org.apache.commons.compress.utils.TimeUtils.unixTimeToFileTime(long)"
    ],
    "org.apache.commons.compress.archivers.sevenz.BoundedSeekableByteChannelInputStream#read(int)": [
        "org.apache.commons.compress.utils.MultiReadOnlySeekableByteChannel#read(ByteBuffer)",
        "org.apache.commons.compress.utils.SeekableInMemoryByteChannel#read(ByteBuffer)"
    ],
    "org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp#getCreateJavaTime()": ["org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp.zipLongToDate(ZipLong)"],
    "org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream#readRange(int)": [
        "org.apache.commons.compress.utils.IOUtils.readRange(InputStream,int)",
        "org.apache.commons.compress.archivers.ArchiveInputStream#count(int)"
    ],
    "org.apache.commons.compress.archivers.zip.DefaultBackingStoreSupplier#DefaultBackingStoreSupplier(Path)": ["org.apache.commons.compress.archivers.zip.DefaultBackingStoreSupplier.<init>()"],
    "org.apache.commons.compress.archivers.ArchiveInputStream#ArchiveInputStream()": ["org.apache.commons.compress.archivers.ArchiveInputStream#ArchiveInputStream(InputStream,Charset)"],
    "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.BoundCountInputStream#readCount(int)": ["org.apache.commons.compress.archivers.ArchiveInputStream#count(int)"],
    "org.apache.commons.compress.archivers.dump.UnsupportedCompressionAlgorithmException#UnsupportedCompressionAlgorithmException()": [
        "org.apache.commons.compress.archivers.dump.UnsupportedCompressionAlgorithmException.<init>()",
        "org.apache.commons.compress.archivers.dump.DumpArchiveException#DumpArchiveException(String)"
    ],
    "org.apache.commons.compress.harmony.unpack200.bytecode.CPMember#hashCode()": ["org.apache.commons.compress.harmony.unpack200.bytecode.CPUTF8#hashCode()"],
    "org.apache.commons.compress.harmony.pack200.IntList#IntList()": ["org.apache.commons.compress.harmony.pack200.IntList#IntList(int)"],
    "org.apache.commons.compress.harmony.unpack200.AttributeLayout.getValue(String,long,SegmentConstantPool)": [
        "org.apache.commons.compress.harmony.pack200.Pack200Exception#Pack200Exception(String)",
        "org.apache.commons.compress.harmony.unpack200.SegmentConstantPool.<staticinit>()",
        "org.apache.commons.compress.harmony.unpack200.SegmentConstantPool#getValue(int,long)"
    ],
    "org.apache.commons.compress.archivers.sevenz.Coders.Deflate64Decoder#Deflate64Decoder()": [
        "org.apache.commons.compress.archivers.sevenz.Coders.Deflate64Decoder.<init>()",
        "org.apache.commons.compress.archivers.sevenz.AbstractCoder#AbstractCoder(Class<?>[]...)"
    ],
    "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream#bsFinishedWithStream()": [
        "org.apache.commons.compress.archivers.sevenz.AES256SHA256Decoder.AES256SHA256DecoderOutputStream#write(int)",
        "org.apache.commons.compress.compressors.snappy.SnappyCompressorOutputStream#write(int)",
        "org.apache.commons.compress.archivers.sevenz.Coders.DeflateDecoder.DeflateDecoderOutputStream#write(int)",
        "org.apache.commons.compress.compressors.lz4.BlockLZ4CompressorOutputStream#write(int)",
        "org.apache.commons.compress.compressors.deflate.DeflateCompressorOutputStream#write(int)",
        "org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorOutputStream#write(int)",
        "org.apache.commons.compress.compressors.lzma.LZMACompressorOutputStream#write(int)",
        "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream#write(int)",
        "org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream#write(int)",
        "org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorOutputStream#write(int)",
        "org.apache.commons.compress.compressors.xz.XZCompressorOutputStream#write(int)",
        "org.apache.commons.compress.utils.FixedLengthBlockOutputStream#write(int)",
        "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.OutputStreamWrapper#write(int)",
        "org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream#write(int)",
        "org.apache.commons.compress.archivers.ArchiveOutputStream#write(int)",
        "org.apache.commons.compress.archivers.zip.ZipSplitOutputStream#write(int)",
        "org.apache.commons.compress.compressors.zstandard.ZstdCompressorOutputStream#write(int)",
        "org.apache.commons.compress.archivers.zip.RandomAccessOutputStream#write(int)"
    ],
    "org.apache.commons.compress.archivers.tar.TarArchiveEntry#fill(int,int,byte[],int)": ["org.apache.commons.compress.archivers.tar.TarArchiveEntry#fill(byte,int,byte[],int)"],
    "org.apache.commons.compress.compressors.FileNameUtil#isCompressedFilename(String)": ["org.apache.commons.compress.compressors.FileNameUtil#isCompressedFileName(String)"],
    "org.apache.commons.compress.compressors.lz4.BlockLZ4CompressorOutputStream.Pair#length()": ["org.apache.commons.compress.compressors.lz4.BlockLZ4CompressorOutputStream.Pair#literalLength()"],
    "org.apache.commons.compress.harmony.pack200.CpBands#writeCpFloat(OutputStream)": [
        "org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream#write(byte[])",
        "org.apache.commons.compress.archivers.sevenz.Coders.DeflateDecoder.DeflateDecoderOutputStream#write(byte[])",
        "org.apache.commons.compress.harmony.pack200.BandSet#encodeBandInt(String,int[],BHSDCodec)",
        "org.apache.commons.compress.harmony.pack200.Codec.<staticinit>()",
        "org.apache.commons.compress.harmony.pack200.PackingUtils.log(String)",
        "org.apache.commons.compress.harmony.pack200.CPFloat#getFloat()",
        "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.OutputStreamWrapper#write(byte[])",
        "org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream#write(byte[])",
        "org.apache.commons.compress.archivers.zip.ZipSplitOutputStream#write(byte[])"
    ],
    "org.apache.commons.compress.harmony.unpack200.NewAttributeBands.Call#addToAttribute(int,NewAttribute)": ["org.apache.commons.compress.harmony.unpack200.NewAttributeBands.Callable#addNextToAttribute(NewAttribute)"],
    "org.apache.commons.compress.archivers.dump.TapeInputStream#readRange(int)": [
        "org.apache.commons.compress.archivers.dump.ShortFileException#ShortFileException()",
        "org.apache.commons.compress.utils.IOUtils.readRange(InputStream,int)"
    ],
    "org.apache.commons.compress.compressors.lzw.LZWInputStream#readNextCode()": ["org.apache.commons.compress.utils.BitInputStream#readBits(int)"],
    "org.apache.commons.compress.archivers.zip.UnparseableExtraFieldData#getLocalFileDataData()": ["org.apache.commons.compress.archivers.zip.ZipUtil.copy(byte[])"],
    "org.apache.commons.compress.archivers.ArchiveStreamFactory#getInputStreamArchiveNames()": ["org.apache.commons.compress.archivers.ArchiveStreamFactory.<staticinit>()"],
    "org.apache.commons.compress.harmony.unpack200.bytecode.AnnotationsAttribute.Annotation#getLength()": ["org.apache.commons.compress.harmony.unpack200.bytecode.AnnotationsAttribute.ElementValue#getLength()"],
    "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream#write(byte[],int,int)": [
        "org.apache.commons.compress.archivers.zip.ZipArchiveEntry#getMethod()",
        "org.apache.commons.compress.archivers.zip.StreamCompressor#write(byte[],int,int,int)",
        "org.apache.commons.compress.archivers.ArchiveOutputStream#count(long)",
        "org.apache.commons.compress.archivers.zip.ZipUtil.checkRequestedFeatures(ZipArchiveEntry)"
    ],
    "org.apache.commons.compress.archivers.zip.ZipFile#skipBytes(int)": [
        "org.apache.commons.compress.utils.MultiReadOnlySeekableByteChannel#size()",
        "org.apache.commons.compress.utils.SeekableInMemoryByteChannel#position(long)",
        "org.apache.commons.compress.utils.MultiReadOnlySeekableByteChannel#position(long)",
        "org.apache.commons.compress.utils.SeekableInMemoryByteChannel#position()",
        "org.apache.commons.compress.utils.MultiReadOnlySeekableByteChannel#position()",
        "org.apache.commons.compress.utils.SeekableInMemoryByteChannel#size()"
    ],
    "org.apache.commons.compress.archivers.tar.TarArchiveEntry#setGroupId(int)": ["org.apache.commons.compress.archivers.tar.TarArchiveEntry#setGroupId(long)"],
    "org.apache.commons.compress.archivers.dump.DumpArchiveException#DumpArchiveException()": ["org.apache.commons.compress.archivers.dump.DumpArchiveException.<init>()"],
    "org.apache.commons.compress.harmony.pack200.NewAttributeBands.Integral#Integral(String)": [
        "org.apache.commons.compress.harmony.pack200.NewAttributeBands#getCodec(String)",
        "org.apache.commons.compress.harmony.pack200.NewAttributeBands.Integral.<init>()",
        "org.apache.commons.compress.harmony.pack200.NewAttributeBands.LayoutElement.<init>()"
    ],
    "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.BoundCountInputStream#atMaxLength()": [
        "org.apache.commons.compress.archivers.dump.DumpArchiveInputStream#getCount()",
        "org.apache.commons.compress.archivers.ArchiveInputStream#getCount()"
    ],
    "org.apache.commons.compress.archivers.zip.X000A_NTFS.zipToFileTime(ZipEightByteInteger)": [
        "org.apache.commons.compress.archivers.zip.ZipEightByteInteger.<staticinit>()",
        "org.apache.commons.compress.archivers.zip.ZipEightByteInteger#getLongValue()",
        "org.apache.commons.compress.archivers.zip.ZipEightByteInteger#equals(Object)"
    ],
    "org.apache.commons.compress.archivers.tar.TarArchiveEntry#setModTime(Date)": ["org.apache.commons.compress.archivers.tar.TarArchiveEntry#setLastModifiedTime(FileTime)"],
    "org.apache.commons.compress.archivers.cpio.CpioArchiveEntry#getChksum()": ["org.apache.commons.compress.archivers.cpio.CpioArchiveEntry#checkNewFormat()"],
    "org.apache.commons.compress.harmony.unpack200.bytecode.CodeAttribute.setAttributeName(CPUTF8)": ["org.apache.commons.compress.harmony.unpack200.bytecode.CodeAttribute.<staticinit>()"],
    "org.apache.commons.compress.compressors.deflate64.Deflate64CompressorInputStream#Deflate64CompressorInputStream(HuffmanDecoder)": [
        "org.apache.commons.compress.compressors.CompressorInputStream.<init>()",
        "org.apache.commons.compress.compressors.deflate64.Deflate64CompressorInputStream.<init>()"
    ],
    "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream#isSeekable()": ["org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.<staticinit>()"],
    "org.apache.commons.compress.harmony.unpack200.IcBands#unpack()": [
        "org.apache.commons.compress.harmony.unpack200.IcTuple#outerIsAnonymous()",
        "org.apache.commons.compress.harmony.unpack200.IcTuple#outerClassString()",
        "org.apache.commons.compress.harmony.unpack200.IcTuple#nestedExplicitFlagSet()",
        "org.apache.commons.compress.harmony.unpack200.IcTuple#thisClassString()",
        "org.apache.commons.compress.harmony.unpack200.IcBands#getIcTuples()",
        "org.apache.commons.compress.harmony.unpack200.IcTuple#isAnonymous()"
    ],
    "org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry#getCreationDate()": ["org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry#getCreationTime()"],
    "org.apache.commons.compress.archivers.tar.TarArchiveInputStream#consumeRemainderOfLastBlock()": [
        "org.apache.commons.compress.archivers.ArchiveInputStream#count(long)",
        "org.apache.commons.compress.archivers.ArchiveInputStream#getBytesRead()",
        "org.apache.commons.compress.archivers.dump.DumpArchiveInputStream#getBytesRead()",
        "org.apache.commons.compress.utils.IOUtils.skip(InputStream,long)"
    ],
    "org.apache.commons.compress.archivers.ArchiveStreamFactory#getOutputStreamArchiveNames()": ["org.apache.commons.compress.archivers.ArchiveStreamFactory.<staticinit>()"],
    "org.apache.commons.compress.archivers.zip.ZipArchiveEntry#getUnixMode()": [
        "org.apache.commons.compress.archivers.zip.ZipArchiveEntry#getExternalAttributes()",
        "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.<staticinit>()"
    ],
    "org.apache.commons.compress.compressors.lzma.LZMAUtils.matches(byte[],int)": ["org.apache.commons.compress.compressors.lzma.LZMAUtils.<staticinit>()"],
    "org.apache.commons.compress.harmony.unpack200.bytecode.LocalVariableTypeTableAttribute#LocalVariableTypeTableAttribute(int,int[],int[],CPUTF8[],CPUTF8[],int[])": [
        "org.apache.commons.compress.harmony.unpack200.bytecode.LocalVariableTypeTableAttribute.<init>()",
        "org.apache.commons.compress.harmony.unpack200.bytecode.LocalVariableTypeTableAttribute.<staticinit>()",
        "org.apache.commons.compress.harmony.unpack200.bytecode.BCIRenumberedAttribute#BCIRenumberedAttribute(CPUTF8)"
    ],
    "org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream#skip(long)": ["org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream#getInputStream()"],
    "org.apache.commons.compress.archivers.sevenz.SevenZFile#getInputStream(SevenZArchiveEntry)": [
        "org.apache.commons.compress.archivers.sevenz.SevenZFile#buildDecodingStream(int,boolean)",
        "org.apache.commons.compress.archivers.sevenz.SevenZFile#getCurrentStream()",
        "org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry#getName()"
    ],
    "org.apache.commons.compress.harmony.unpack200.SegmentHeader#SegmentHeader(Segment)": ["org.apache.commons.compress.harmony.unpack200.SegmentHeader.<init>()"],
    "org.apache.commons.compress.archivers.jar.JarArchiveEntry#JarArchiveEntry(ZipArchiveEntry)": [
        "org.apache.commons.compress.archivers.zip.ZipArchiveEntry#ZipArchiveEntry(ZipArchiveEntry)",
        "org.apache.commons.compress.archivers.jar.JarArchiveEntry.<init>()"
    ],
    "org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp#getAccessFileTime()": ["org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp.unixTimeToFileTime(ZipLong)"],
    "org.apache.commons.compress.archivers.Lister#list7z(Path)": [
        "org.apache.commons.compress.archivers.sevenz.SevenZFile.builder()",
        "org.apache.commons.compress.archivers.zip.ZipArchiveEntry#getName()",
        "org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry#getName()",
        "org.apache.commons.compress.archivers.arj.ArjArchiveEntry#getName()",
        "org.apache.commons.compress.archivers.dump.DumpArchiveEntry#getName()",
        "org.apache.commons.compress.archivers.sevenz.SevenZFile#getNextEntry()",
        "org.apache.commons.compress.archivers.sevenz.SevenZFile#getDefaultName()",
        "org.apache.commons.compress.archivers.ar.ArArchiveEntry#getName()",
        "org.apache.commons.compress.archivers.cpio.CpioArchiveEntry#getName()",
        "org.apache.commons.compress.archivers.tar.TarArchiveEntry#getName()",
        "org.apache.commons.compress.archivers.Lister#println(String)"
    ],
    "org.apache.commons.compress.harmony.unpack200.bytecode.CPInteger#CPInteger(Integer,int)": [
        "org.apache.commons.compress.harmony.unpack200.bytecode.ConstantPoolEntry.<staticinit>()",
        "org.apache.commons.compress.harmony.unpack200.bytecode.CPConstantNumber#CPConstantNumber(byte,Object,int)",
        "org.apache.commons.compress.harmony.unpack200.bytecode.CPInteger.<init>()"
    ],
    "org.apache.commons.compress.harmony.pack200.PopulationCodec#PopulationCodec(Codec,int,Codec)": [
        "org.apache.commons.compress.harmony.pack200.PopulationCodec.<init>()",
        "org.apache.commons.compress.harmony.pack200.Codec.<init>()"
    ],
    "org.apache.commons.compress.compressors.lz4.BlockLZ4CompressorOutputStream#expand(int,int)": ["org.apache.commons.compress.compressors.lz4.BlockLZ4CompressorOutputStream#expandFromList(byte[],int,int)"],
    "org.apache.commons.compress.compressors.xz.XZUtils.isCompressedFileName(String)": [
        "org.apache.commons.compress.compressors.FileNameUtil#isCompressedFileName(String)",
        "org.apache.commons.compress.compressors.xz.XZUtils.<staticinit>()"
    ],
    "org.apache.commons.compress.harmony.pack200.Segment#visitSource(String,String)": ["org.apache.commons.compress.harmony.pack200.ClassBands#addSourceFile(String)"],
    "org.apache.commons.compress.archivers.zip.ExtraFieldUtils.mergeCentralDirectoryData(ZipExtraField[])": [
        "org.apache.commons.compress.archivers.zip.ResourceAlignmentExtraField#getCentralDirectoryLength()",
        "org.apache.commons.compress.archivers.zip.JarMarker#getCentralDirectoryData()",
        "org.apache.commons.compress.archivers.zip.ZipShort#getBytes()",
        "org.apache.commons.compress.archivers.zip.PKWareExtraHeader#getCentralDirectoryData()",
        "org.apache.commons.compress.archivers.zip.UnparseableExtraFieldData#getCentralDirectoryLength()",
        "org.apache.commons.compress.archivers.zip.ExtraFieldUtils.<staticinit>()",
        "org.apache.commons.compress.archivers.zip.JarMarker#getHeaderId()",
        "org.apache.commons.compress.archivers.zip.PKWareExtraHeader#getHeaderId()",
        "org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField#getCentralDirectoryData()",
        "org.apache.commons.compress.archivers.zip.UnrecognizedExtraField#getCentralDirectoryData()",
        "org.apache.commons.compress.archivers.zip.ResourceAlignmentExtraField#getCentralDirectoryData()",
        "org.apache.commons.compress.archivers.zip.UnparseableExtraFieldData#getCentralDirectoryData()",
        "org.apache.commons.compress.archivers.zip.X000A_NTFS#getHeaderId()",
        "org.apache.commons.compress.archivers.zip.UnparseableExtraFieldData#getHeaderId()",
        "org.apache.commons.compress.archivers.zip.AsiExtraField#getHeaderId()",
        "org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp#getCentralDirectoryData()",
        "org.apache.commons.compress.archivers.zip.UnrecognizedExtraField#getCentralDirectoryLength()",
        "org.apache.commons.compress.archivers.zip.UnicodeCommentExtraField#getHeaderId()",
        "org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField#getCentralDirectoryLength()",
        "org.apache.commons.compress.archivers.zip.JarMarker#getCentralDirectoryLength()",
        "org.apache.commons.compress.archivers.zip.X7875_NewUnix#getHeaderId()",
        "org.apache.commons.compress.archivers.zip.AsiExtraField#getCentralDirectoryData()",
        "org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField#getCentralDirectoryData()",
        "org.apache.commons.compress.archivers.zip.PKWareExtraHeader#getCentralDirectoryLength()",
        "org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp#getCentralDirectoryLength()",
        "org.apache.commons.compress.archivers.zip.X7875_NewUnix#getCentralDirectoryData()",
        "org.apache.commons.compress.archivers.zip.X000A_NTFS#getCentralDirectoryLength()",
        "org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField#getHeaderId()",
        "org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp#getHeaderId()",
        "org.apache.commons.compress.archivers.zip.ZipShort#getValue()",
        "org.apache.commons.compress.archivers.zip.ResourceAlignmentExtraField#getHeaderId()",
        "org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField#getCentralDirectoryLength()",
        "org.apache.commons.compress.archivers.zip.X000A_NTFS#getCentralDirectoryData()",
        "org.apache.commons.compress.archivers.zip.UnicodePathExtraField#getHeaderId()",
        "org.apache.commons.compress.archivers.zip.X7875_NewUnix#getCentralDirectoryLength()",
        "org.apache.commons.compress.archivers.zip.AsiExtraField#getCentralDirectoryLength()",
        "org.apache.commons.compress.archivers.zip.UnrecognizedExtraField#getHeaderId()"
    ],
    "org.apache.commons.compress.archivers.zip.ZipShort#ZipShort(int)": ["org.apache.commons.compress.archivers.zip.ZipShort.<init>()"],
    "org.apache.commons.compress.archivers.zip.X0014_X509Certificates#X0014_X509Certificates()": [
        "org.apache.commons.compress.archivers.zip.X0014_X509Certificates.<init>()",
        "org.apache.commons.compress.archivers.zip.X0014_X509Certificates.<staticinit>()",
        "org.apache.commons.compress.archivers.zip.PKWareExtraHeader#PKWareExtraHeader(ZipShort)"
    ],
    "org.apache.commons.compress.harmony.pack200.Segment#visit(int,int,String,String,String,String[])": [
        "org.apache.commons.compress.harmony.pack200.ClassBands#addClass(int,int,String,String,String,String[])",
        "org.apache.commons.compress.harmony.pack200.BcBands#setCurrentClass(String,String)",
        "org.apache.commons.compress.harmony.pack200.SegmentHeader#addMajorVersion(int)"
    ],
    "org.apache.commons.compress.archivers.zip.UnicodePathExtraField#UnicodePathExtraField(String,byte[])": [
        "org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField#AbstractUnicodeExtraField(String,byte[])",
        "org.apache.commons.compress.archivers.zip.UnicodePathExtraField.<init>()"
    ],
    "org.apache.commons.compress.compressors.lzw.LZWInputStream#getCompressedCount()": ["org.apache.commons.compress.utils.BitInputStream#getBytesRead()"],
    "org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream#finish()": [
        "org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream#deflate()",
        "org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream#writeTrailer()"
    ],
    "org.apache.commons.compress.harmony.unpack200.SegmentHeader#decodeScalar(String,InputStream,BHSDCodec)": [
        "org.apache.commons.compress.harmony.unpack200.Segment.<staticinit>()",
        "org.apache.commons.compress.harmony.pack200.BHSDCodec#decode(InputStream)",
        "org.apache.commons.compress.harmony.unpack200.Segment#log(int,String)"
    ],
    "org.apache.commons.compress.harmony.pack200.CPNameAndType#getTypeIndex()": ["org.apache.commons.compress.harmony.pack200.ConstantPoolEntry#getIndex()"],
    "org.apache.commons.compress.archivers.zip.ZipArchiveEntry#ZipArchiveEntry(String)": ["org.apache.commons.compress.archivers.zip.ZipArchiveEntry#ZipArchiveEntry(Function<ZipShort, ZipExtraField>,String)"],
    "org.apache.commons.compress.archivers.zip.StreamCompressor.OutputStreamCompressor#OutputStreamCompressor(Deflater,OutputStream)": [
        "org.apache.commons.compress.archivers.zip.StreamCompressor#StreamCompressor(Deflater)",
        "org.apache.commons.compress.archivers.zip.StreamCompressor.OutputStreamCompressor.<init>()"
    ],
    "org.apache.commons.compress.compressors.lz77support.Parameters.Builder#build()": ["org.apache.commons.compress.compressors.lz77support.Parameters#Parameters(int,int,int,int,int,int,int,boolean,int)"],
    "org.apache.commons.compress.archivers.tar.TarFile#getNextTarEntry()": [
        "org.apache.commons.compress.archivers.tar.TarFile#repositionForwardTo(long)",
        "org.apache.commons.compress.archivers.tar.TarArchiveEntry#isOldGNUSparse()",
        "org.apache.commons.compress.archivers.tar.TarArchiveEntry#setLinkName(String)",
        "org.apache.commons.compress.utils.MultiReadOnlySeekableByteChannel#position()",
        "org.apache.commons.compress.archivers.tar.TarFile#paxHeaders()",
        "org.apache.commons.compress.archivers.tar.TarArchiveEntry#setName(String)",
        "org.apache.commons.compress.archivers.tar.TarArchiveEntry#getSize()",
        "org.apache.commons.compress.archivers.tar.TarArchiveEntry#TarArchiveEntry(Map<String, String>,byte[],ZipEncoding,boolean,long)",
        "org.apache.commons.compress.archivers.tar.TarFile#throwExceptionIfPositionIsNotInArchive()",
        "org.apache.commons.compress.archivers.tar.TarArchiveEntry#isGlobalPaxHeader()",
        "org.apache.commons.compress.archivers.tar.TarFile#getRecord()",
        "org.apache.commons.compress.archivers.tar.TarFile#skipRecordPadding()",
        "org.apache.commons.compress.archivers.tar.TarArchiveEntry#isDirectory()",
        "org.apache.commons.compress.archivers.zip.NioZipEncoding#decode(byte[])",
        "org.apache.commons.compress.archivers.tar.TarArchiveEntry#getDataOffset()",
        "org.apache.commons.compress.archivers.tar.TarFile#isAtEOF()",
        "org.apache.commons.compress.utils.SeekableInMemoryByteChannel#position()",
        "org.apache.commons.compress.archivers.tar.TarFile#applyPaxHeadersToCurrentEntry(Map<String, String>,List<TarArchiveStructSparse>)",
        "org.apache.commons.compress.archivers.tar.TarFile#getLongNameData()",
        "org.apache.commons.compress.archivers.tar.TarFile#readGlobalPaxHeaders()",
        "org.apache.commons.compress.archivers.tar.TarArchiveEntry#isGNULongNameEntry()",
        "org.apache.commons.compress.archivers.tar.TarArchiveEntry#isPaxHeader()",
        "org.apache.commons.compress.archivers.tar.TarArchiveEntry#isGNULongLinkEntry()",
        "org.apache.commons.compress.archivers.tar.TarFile#readOldGNUSparse()",
        "org.apache.commons.compress.archivers.tar.TarUtils$ZipEncoding$1#decode(byte[])"
    ],
    "org.apache.commons.compress.harmony.pack200.ClassBands#endOfMethod()": [
        "org.apache.commons.compress.harmony.pack200.IntList#remove(int)",
        "org.apache.commons.compress.harmony.pack200.IntList#size()",
        "org.apache.commons.compress.harmony.pack200.IntList#get(int)",
        "org.apache.commons.compress.harmony.pack200.MetadataBandGroup#addParameterAnnotation(int,int[],IntList,List<String>,List<String>,List<String>,List<Object>,List<Integer>,List<String>,List<String>,List<Integer>)"
    ],
    "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.toDirectoryEntryName(String)": [
        "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.isDirectoryEntryName(String)",
        "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.<staticinit>()"
    ],
    "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream#TarArchiveOutputStream(OutputStream,String)": [
        "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.<staticinit>()",
        "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream#TarArchiveOutputStream(OutputStream,int,String)"
    ],
    "org.apache.commons.compress.harmony.pack200.NewAttribute.ErrorAttribute#ErrorAttribute(String,int)": [
        "org.apache.commons.compress.harmony.pack200.NewAttribute#NewAttribute(String,String,int)",
        "org.apache.commons.compress.harmony.pack200.NewAttribute.ErrorAttribute.<init>()"
    ],
    "org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp#setModifyFileTime(FileTime)": [
        "org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp#setModifyTime(ZipLong)",
        "org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp.fileTimeToZipLong(FileTime)"
    ],
    "org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp#hashCode()": ["org.apache.commons.compress.archivers.zip.ZipLong#hashCode()"],
    "org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream#GzipCompressorOutputStream(OutputStream)": [
        "org.apache.commons.compress.compressors.gzip.GzipParameters.<init>()",
        "org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream#GzipCompressorOutputStream(OutputStream,GzipParameters)"
    ],
    "org.apache.commons.compress.compressors.gzip.GzipUtils.isCompressedFilename(String)": [
        "org.apache.commons.compress.compressors.FileNameUtil#isCompressedFileName(String)",
        "org.apache.commons.compress.compressors.gzip.GzipUtils.<staticinit>()"
    ],
    "org.apache.commons.compress.harmony.unpack200.CpBands#parseCpClass(InputStream)": [
        "org.apache.commons.compress.harmony.unpack200.BandSet#decodeBandInt(String,InputStream,BHSDCodec,int)",
        "org.apache.commons.compress.harmony.pack200.Codec.<staticinit>()",
        "org.apache.commons.compress.harmony.unpack200.SegmentHeader#getCpClassCount()"
    ],
    "org.apache.commons.compress.harmony.unpack200.bytecode.InnerClassesAttribute.InnerClassesEntry#resolve(ClassConstantPool)": [
        "org.apache.commons.compress.harmony.unpack200.bytecode.EnclosingMethodAttribute#resolve(ClassConstantPool)",
        "org.apache.commons.compress.harmony.unpack200.bytecode.ClassFileEntry#resolve(ClassConstantPool)",
        "org.apache.commons.compress.harmony.unpack200.bytecode.CPString#resolve(ClassConstantPool)",
        "org.apache.commons.compress.harmony.unpack200.bytecode.SourceFileAttribute#resolve(ClassConstantPool)",
        "org.apache.commons.compress.harmony.unpack200.bytecode.CPFieldRef#resolve(ClassConstantPool)",
        "org.apache.commons.compress.harmony.unpack200.bytecode.LocalVariableTableAttribute#resolve(ClassConstantPool)",
        "org.apache.commons.compress.harmony.unpack200.bytecode.LineNumberTableAttribute#resolve(ClassConstantPool)",
        "org.apache.commons.compress.harmony.unpack200.bytecode.RuntimeVisibleorInvisibleParameterAnnotationsAttribute#resolve(ClassConstantPool)",
        "org.apache.commons.compress.harmony.unpack200.bytecode.NewAttribute#resolve(ClassConstantPool)",
        "org.apache.commons.compress.harmony.unpack200.bytecode.LocalVariableTypeTableAttribute#resolve(ClassConstantPool)",
        "org.apache.commons.compress.harmony.unpack200.bytecode.CPRef#resolve(ClassConstantPool)",
        "org.apache.commons.compress.harmony.unpack200.bytecode.ConstantValueAttribute#resolve(ClassConstantPool)",
        "org.apache.commons.compress.harmony.unpack200.bytecode.ByteCode#resolve(ClassConstantPool)",
        "org.apache.commons.compress.harmony.unpack200.bytecode.RuntimeVisibleorInvisibleAnnotationsAttribute#resolve(ClassConstantPool)",
        "org.apache.commons.compress.harmony.unpack200.bytecode.InnerClassesAttribute#resolve(ClassConstantPool)",
        "org.apache.commons.compress.harmony.unpack200.bytecode.CPMember#resolve(ClassConstantPool)",
        "org.apache.commons.compress.harmony.unpack200.bytecode.Attribute#resolve(ClassConstantPool)",
        "org.apache.commons.compress.harmony.unpack200.bytecode.ExceptionsAttribute#resolve(ClassConstantPool)",
        "org.apache.commons.compress.harmony.unpack200.bytecode.CodeAttribute#resolve(ClassConstantPool)",
        "org.apache.commons.compress.harmony.unpack200.bytecode.AnnotationDefaultAttribute#resolve(ClassConstantPool)",
        "org.apache.commons.compress.harmony.unpack200.bytecode.ClassConstantPool#indexOf(ClassFileEntry)",
        "org.apache.commons.compress.harmony.unpack200.bytecode.CPClass#resolve(ClassConstantPool)",
        "org.apache.commons.compress.harmony.unpack200.bytecode.SignatureAttribute#resolve(ClassConstantPool)",
        "org.apache.commons.compress.harmony.unpack200.bytecode.CPNameAndType#resolve(ClassConstantPool)"
    ],
    "org.apache.commons.compress.archivers.zip.X000A_NTFS#toString()": [
        "org.apache.commons.compress.archivers.zip.X000A_NTFS#getCreateFileTime()",
        "org.apache.commons.compress.archivers.zip.X000A_NTFS#getAccessFileTime()",
        "org.apache.commons.compress.archivers.zip.X000A_NTFS#getModifyFileTime()"
    ],
    "org.apache.commons.compress.harmony.unpack200.IcTuple#computeOuterIsAnonymous()": [
        "org.apache.commons.compress.harmony.unpack200.IcTuple#innerBreakAtDollar(String)",
        "org.apache.commons.compress.harmony.unpack200.IcTuple#isAllDigits(String)"
    ],
    "org.apache.commons.compress.compressors.lz77support.LZ77Compressor#longestMatchForNextPosition(int)": [
        "org.apache.commons.compress.compressors.lz77support.LZ77Compressor#insertString(int)",
        "org.apache.commons.compress.compressors.lz77support.LZ77Compressor#longestMatch(int)"
    ],
    "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream#writeRecord(byte[])": ["org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.<staticinit>()"],
    "org.apache.commons.compress.harmony.unpack200.NewAttributeBands.Replication#Replication(String,String)": [
        "org.apache.commons.compress.harmony.unpack200.NewAttributeBands#readNextLayoutElement(StringReader)",
        "org.apache.commons.compress.harmony.unpack200.NewAttributeBands.LayoutElement.<init>()",
        "org.apache.commons.compress.harmony.unpack200.NewAttributeBands.Replication.<init>()",
        "org.apache.commons.compress.harmony.unpack200.NewAttributeBands.Integral#Integral(String)"
    ],
    "org.apache.commons.compress.harmony.unpack200.bytecode.CPClass#equals(Object)": ["org.apache.commons.compress.harmony.unpack200.bytecode.CPUTF8#equals(Object)"],
    "org.apache.commons.compress.archivers.zip.ExplodingInputStream#getCompressedCount()": ["org.apache.commons.compress.utils.BitInputStream#getBytesRead()"],
    "org.apache.commons.compress.archivers.zip.ZipArchiveEntry#parseExtraFields(byte[],boolean,ExtraFieldParsingBehavior)$ExtraFieldParsingBehavior$1#createExtraField(ZipShort)": [
        "org.apache.commons.compress.archivers.zip.ExtraFieldUtils.parse(byte[],boolean,UnparseableExtraField)$ExtraFieldParsingBehavior$1#createExtraField(ZipShort)",
        "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.ExtraFieldParsingMode#createExtraField(ZipShort)",
        "org.apache.commons.compress.archivers.zip.ZipArchiveEntry#parseExtraFields(byte[],boolean,ExtraFieldParsingBehavior)$ExtraFieldParsingBehavior$1#createExtraField(ZipShort)"
    ],
    "org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp#getLocalFileDataLength()": ["org.apache.commons.compress.archivers.zip.ZipShort#ZipShort(int)"],
    "org.apache.commons.compress.harmony.unpack200.MetadataBandGroup#getAnnotation(CPUTF8,int,Iterator<CPUTF8>)": [
        "org.apache.commons.compress.harmony.unpack200.bytecode.AnnotationsAttribute.Annotation#Annotation(int,CPUTF8,CPUTF8[],ElementValue[])",
        "org.apache.commons.compress.utils.ServiceLoaderIterator#next()",
        "org.apache.commons.compress.harmony.unpack200.bytecode.AnnotationsAttribute.ElementValue#ElementValue(int,Object)",
        "org.apache.commons.compress.harmony.unpack200.MetadataBandGroup#getNextValue(int)"
    ],
    "org.apache.commons.compress.archivers.tar.TarArchiveEntry#fillGNUSparse0xData(Map<String, String>)": [
        "org.apache.commons.compress.archivers.tar.TarGnuSparseKeys.<staticinit>()",
        "org.apache.commons.compress.utils.ParsingUtils.parseIntValue(String)"
    ],
    "org.apache.commons.compress.archivers.zip.X0016_CertificateIdForCentralDirectory#parseFromCentralDirectoryData(byte[],int,int)": [
        "org.apache.commons.compress.archivers.zip.PKWareExtraHeader#assertMinimalLength(int,int)",
        "org.apache.commons.compress.archivers.zip.ZipShort.getValue(byte[],int)",
        "org.apache.commons.compress.archivers.zip.PKWareExtraHeader.HashAlgorithm.getAlgorithmByCode(int)"
    ],
    "org.apache.commons.compress.utils.ArchiveUtils.isEqual(byte[],int,int,byte[],int,int)": ["org.apache.commons.compress.utils.ArchiveUtils.isEqual(byte[],int,int,byte[],int,int,boolean)"],
    "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream#getBytesInflated()": ["org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.<staticinit>()"],
    "org.apache.commons.compress.compressors.CompressorStreamFactory#getInputStreamCompressorNames()": ["org.apache.commons.compress.compressors.CompressorStreamFactory.<staticinit>()"],
    "org.apache.commons.compress.utils.BoundedInputStream#BoundedInputStream(InputStream,long)": ["org.apache.commons.compress.utils.BoundedInputStream.<init>()"],
    "org.apache.commons.compress.compressors.deflate.DeflateCompressorInputStream#read(byte[],int,int)": [
        "org.apache.commons.compress.compressors.zstandard.ZstdCompressorInputStream#read(byte[],int,int)",
        "org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorInputStream#read(byte[],int,int)",
        "org.apache.commons.compress.archivers.sevenz.BoundedSeekableByteChannelInputStream#read(byte[],int,int)",
        "org.apache.commons.compress.compressors.deflate64.Deflate64CompressorInputStream#read(byte[],int,int)",
        "org.apache.commons.compress.compressors.CompressorInputStream#count(int)",
        "org.apache.commons.compress.compressors.brotli.BrotliCompressorInputStream#read(byte[],int,int)",
        "org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream#read(byte[],int,int)",
        "org.apache.commons.compress.archivers.sevenz.AES256SHA256Decoder.AES256SHA256DecoderInputStream#read(byte[],int,int)",
        "org.apache.commons.compress.compressors.lzma.LZMACompressorInputStream#read(byte[],int,int)",
        "org.apache.commons.compress.compressors.lz4.BlockLZ4CompressorInputStream#read(byte[],int,int)",
        "org.apache.commons.compress.compressors.snappy.SnappyCompressorInputStream#read(byte[],int,int)",
        "org.apache.commons.compress.compressors.xz.XZCompressorInputStream#read(byte[],int,int)",
        "org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream#read(byte[],int,int)",
        "org.apache.commons.compress.utils.BoundedArchiveInputStream#read(byte[],int,int)",
        "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream#read(byte[],int,int)",
        "org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStream#read(byte[],int,int)",
        "org.apache.commons.compress.compressors.lzw.LZWInputStream#read(byte[],int,int)",
        "org.apache.commons.compress.compressors.deflate.DeflateCompressorInputStream#read(byte[],int,int)"
    ],
    "org.apache.commons.compress.harmony.unpack200.bytecode.ExceptionsAttribute.hashCode(Object[])": [
        "org.apache.commons.compress.harmony.pack200.BHSDCodec#hashCode()",
        "org.apache.commons.compress.harmony.unpack200.bytecode.CPMethod#hashCode()",
        "org.apache.commons.compress.harmony.unpack200.bytecode.CPInterfaceMethodRef#hashCode()",
        "org.apache.commons.compress.harmony.unpack200.bytecode.CPFieldRef#hashCode()",
        "org.apache.commons.compress.harmony.unpack200.bytecode.CPConstant#hashCode()",
        "org.apache.commons.compress.harmony.unpack200.bytecode.InnerClassesAttribute#hashCode()",
        "org.apache.commons.compress.harmony.unpack200.bytecode.Attribute#hashCode()",
        "org.apache.commons.compress.harmony.unpack200.bytecode.CPClass#hashCode()",
        "org.apache.commons.compress.harmony.unpack200.bytecode.ExceptionsAttribute#hashCode()",
        "org.apache.commons.compress.harmony.unpack200.bytecode.CPUTF8#hashCode()",
        "org.apache.commons.compress.harmony.unpack200.bytecode.ConstantPoolEntry#hashCode()",
        "org.apache.commons.compress.harmony.unpack200.bytecode.CPNameAndType#hashCode()",
        "org.apache.commons.compress.harmony.unpack200.bytecode.CPString#hashCode()",
        "org.apache.commons.compress.harmony.unpack200.bytecode.CPMember#hashCode()",
        "org.apache.commons.compress.harmony.unpack200.bytecode.SourceFileAttribute#hashCode()",
        "org.apache.commons.compress.harmony.unpack200.bytecode.ByteCode#hashCode()",
        "org.apache.commons.compress.harmony.unpack200.bytecode.CPMethodRef#hashCode()",
        "org.apache.commons.compress.harmony.unpack200.bytecode.ConstantValueAttribute#hashCode()"
    ],
    "org.apache.commons.compress.harmony.pack200.NewAttributeBands.Union#addAttributeToBand(NewAttribute,InputStream)": [
        "org.apache.commons.compress.harmony.pack200.NewAttributeBands.Union#addAttributeToBand(NewAttribute,InputStream)",
        "org.apache.commons.compress.harmony.pack200.NewAttributeBands.Replication#addAttributeToBand(NewAttribute,InputStream)",
        "org.apache.commons.compress.harmony.pack200.NewAttributeBands.Integral#latestValue()",
        "org.apache.commons.compress.harmony.pack200.NewAttributeBands.Reference#addAttributeToBand(NewAttribute,InputStream)",
        "org.apache.commons.compress.harmony.pack200.NewAttributeBands.UnionCase#hasTag(long)",
        "org.apache.commons.compress.harmony.pack200.NewAttributeBands.Callable#addAttributeToBand(NewAttribute,InputStream)",
        "org.apache.commons.compress.harmony.pack200.NewAttributeBands.Call#addAttributeToBand(NewAttribute,InputStream)",
        "org.apache.commons.compress.harmony.pack200.NewAttributeBands.Integral#addAttributeToBand(NewAttribute,InputStream)",
        "org.apache.commons.compress.harmony.pack200.NewAttributeBands.UnionCase#addAttributeToBand(NewAttribute,InputStream)"
    ],
    "org.apache.commons.compress.compressors.deflate64.HuffmanDecoder.InitialState#state()": ["org.apache.commons.compress.compressors.deflate64.HuffmanState.<staticinit>()"],
    "org.apache.commons.compress.harmony.unpack200.SegmentOptions#hasAllCodeFlags()": ["org.apache.commons.compress.harmony.unpack200.SegmentOptions.<staticinit>()"],
    "org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorOutputStream#write(byte[],int,int)": ["org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorOutputStream#flushBlock()"],
    "org.apache.commons.compress.harmony.unpack200.bytecode.forms.InitMethodReferenceForm#setNestedEntries(ByteCode,OperandManager,int)": [
        "org.apache.commons.compress.harmony.unpack200.bytecode.forms.ThisInitMethodRefForm#context(OperandManager)",
        "org.apache.commons.compress.harmony.unpack200.bytecode.ByteCode#setNestedPositions(int[][])",
        "org.apache.commons.compress.harmony.unpack200.SegmentConstantPool#getInitMethodPoolEntry(int,long,String)",
        "org.apache.commons.compress.harmony.unpack200.bytecode.ByteCode#setNested(ClassFileEntry[])",
        "org.apache.commons.compress.harmony.unpack200.bytecode.forms.SuperInitMethodRefForm#context(OperandManager)",
        "org.apache.commons.compress.harmony.unpack200.bytecode.OperandManager#globalConstantPool()",
        "org.apache.commons.compress.harmony.unpack200.SegmentConstantPool.<staticinit>()",
        "org.apache.commons.compress.harmony.unpack200.bytecode.forms.NewInitMethodRefForm#context(OperandManager)"
    ],
    "org.apache.commons.compress.harmony.unpack200.SegmentUtils.countInvokeInterfaceArgs(String)": ["org.apache.commons.compress.harmony.unpack200.SegmentUtils.countArgs(String,int)"],
    "org.apache.commons.compress.compressors.deflate64.HuffmanDecoder#HuffmanDecoder(InputStream)": [
        "org.apache.commons.compress.compressors.deflate64.HuffmanDecoder.<init>()",
        "org.apache.commons.compress.utils.BitInputStream#BitInputStream(InputStream,ByteOrder)",
        "org.apache.commons.compress.compressors.deflate64.HuffmanDecoder.InitialState.<init>()"
    ],
    "org.apache.commons.compress.harmony.unpack200.bytecode.RuntimeVisibleorInvisibleParameterAnnotationsAttribute#writeBody(DataOutputStream)": ["org.apache.commons.compress.harmony.unpack200.bytecode.RuntimeVisibleorInvisibleParameterAnnotationsAttribute.ParameterAnnotation#writeBody(DataOutputStream)"],
    "org.apache.commons.compress.harmony.unpack200.SegmentHeader#getBandHeadersInputStream()": ["org.apache.commons.compress.harmony.unpack200.SegmentHeader.<staticinit>()"],
    "org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorInputStream#verifyContentChecksum()": ["org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorInputStream#verifyChecksum(XXHash32,String)"],
    "org.apache.commons.compress.harmony.unpack200.bytecode.ClassConstantPool#addNestedEntries()": [
        "org.apache.commons.compress.harmony.unpack200.bytecode.ByteCode#getNestedClassFileEntries()",
        "org.apache.commons.compress.harmony.unpack200.bytecode.SignatureAttribute#getNestedClassFileEntries()",
        "org.apache.commons.compress.harmony.unpack200.bytecode.Attribute#getNestedClassFileEntries()",
        "org.apache.commons.compress.harmony.unpack200.bytecode.LineNumberTableAttribute#getNestedClassFileEntries()",
        "org.apache.commons.compress.harmony.unpack200.bytecode.CPString#getNestedClassFileEntries()",
        "org.apache.commons.compress.harmony.unpack200.bytecode.CPRef#getNestedClassFileEntries()",
        "org.apache.commons.compress.harmony.unpack200.bytecode.CPMember#getNestedClassFileEntries()",
        "org.apache.commons.compress.harmony.unpack200.bytecode.InnerClassesAttribute#getNestedClassFileEntries()",
        "org.apache.commons.compress.harmony.unpack200.bytecode.EnclosingMethodAttribute#getNestedClassFileEntries()",
        "org.apache.commons.compress.harmony.unpack200.bytecode.CPFieldRef#getNestedClassFileEntries()",
        "org.apache.commons.compress.harmony.unpack200.bytecode.LocalVariableTypeTableAttribute#getNestedClassFileEntries()",
        "org.apache.commons.compress.harmony.unpack200.bytecode.RuntimeVisibleorInvisibleParameterAnnotationsAttribute#getNestedClassFileEntries()",
        "org.apache.commons.compress.harmony.unpack200.bytecode.SourceFileAttribute#getNestedClassFileEntries()",
        "org.apache.commons.compress.harmony.unpack200.bytecode.CPNameAndType#getNestedClassFileEntries()",
        "org.apache.commons.compress.harmony.unpack200.bytecode.AnnotationDefaultAttribute#getNestedClassFileEntries()",
        "org.apache.commons.compress.harmony.unpack200.bytecode.LocalVariableTableAttribute#getNestedClassFileEntries()",
        "org.apache.commons.compress.harmony.unpack200.bytecode.CPMethodRef#getNestedClassFileEntries()",
        "org.apache.commons.compress.harmony.unpack200.bytecode.RuntimeVisibleorInvisibleAnnotationsAttribute#getNestedClassFileEntries()",
        "org.apache.commons.compress.harmony.unpack200.bytecode.ConstantValueAttribute#getNestedClassFileEntries()",
        "org.apache.commons.compress.harmony.unpack200.bytecode.NewAttribute#getNestedClassFileEntries()",
        "org.apache.commons.compress.harmony.unpack200.bytecode.ClassFileEntry#getNestedClassFileEntries()",
        "org.apache.commons.compress.harmony.unpack200.bytecode.CPClass#getNestedClassFileEntries()",
        "org.apache.commons.compress.harmony.unpack200.bytecode.ClassConstantPool#add(ClassFileEntry)",
        "org.apache.commons.compress.harmony.unpack200.bytecode.ExceptionsAttribute#getNestedClassFileEntries()",
        "org.apache.commons.compress.harmony.unpack200.bytecode.ByteCode#nestedMustStartClassPool()",
        "org.apache.commons.compress.harmony.unpack200.bytecode.CodeAttribute#getNestedClassFileEntries()"
    ],
    "org.apache.commons.compress.harmony.pack200.Segment.SegmentMethodVisitor#visitMultiANewArrayInsn(String,int)": ["org.apache.commons.compress.harmony.pack200.BcBands#visitMultiANewArrayInsn(String,int)"],
    "org.apache.commons.compress.harmony.unpack200.bytecode.forms.StringRefForm#StringRefForm(int,String,int[],boolean)": ["org.apache.commons.compress.harmony.unpack200.bytecode.forms.StringRefForm#StringRefForm(int,String,int[])"],
    "org.apache.commons.compress.harmony.unpack200.NewAttributeBands.Union#addToAttribute(int,NewAttribute)": [
        "org.apache.commons.compress.harmony.unpack200.NewAttributeBands.UnionCase#addToAttribute(int,NewAttribute)",
        "org.apache.commons.compress.harmony.unpack200.NewAttributeBands.Call#addToAttribute(int,NewAttribute)",
        "org.apache.commons.compress.harmony.unpack200.NewAttributeBands.Integral#addToAttribute(int,NewAttribute)",
        "org.apache.commons.compress.harmony.unpack200.NewAttributeBands.Union#addToAttribute(int,NewAttribute)",
        "org.apache.commons.compress.harmony.unpack200.NewAttributeBands.Callable#addToAttribute(int,NewAttribute)",
        "org.apache.commons.compress.harmony.unpack200.NewAttributeBands.Reference#addToAttribute(int,NewAttribute)",
        "org.apache.commons.compress.harmony.unpack200.NewAttributeBands.Integral#getValue(int)",
        "org.apache.commons.compress.harmony.unpack200.NewAttributeBands.UnionCase#hasTag(int)",
        "org.apache.commons.compress.harmony.unpack200.NewAttributeBands.Replication#addToAttribute(int,NewAttribute)"
    ],
    "org.apache.commons.compress.archivers.zip.X000A_NTFS.<init>()": ["org.apache.commons.compress.archivers.zip.ZipEightByteInteger.<staticinit>()"],
    "org.apache.commons.compress.harmony.unpack200.bytecode.LocalVariableTypeTableAttribute#renumber(List<Integer>)": [
        "org.apache.commons.compress.harmony.pack200.Pack200Exception#Pack200Exception(String)",
        "org.apache.commons.compress.harmony.unpack200.bytecode.BCIRenumberedAttribute#renumber(List<Integer>)"
    ],
    "org.apache.commons.compress.archivers.tar.TarArchiveInputStream#TarArchiveInputStream(InputStream,int,int)": ["org.apache.commons.compress.archivers.tar.TarArchiveInputStream#TarArchiveInputStream(InputStream,int,int,String)"],
    "org.apache.commons.compress.archivers.zip.ZipArchiveEntry#getAllExtraFieldsNoCopy()": [
        "org.apache.commons.compress.archivers.zip.ZipArchiveEntry#getMergedFields()",
        "org.apache.commons.compress.archivers.zip.ZipArchiveEntry#getUnparseableOnly()"
    ],
    "org.apache.commons.compress.archivers.sevenz.SevenZFile#getCurrentStream()": [
        "org.apache.commons.compress.utils.ByteUtils.<staticinit>()",
        "org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry#getSize()"
    ],
    "org.apache.commons.compress.harmony.pack200.ClassBands#isInnerClassOf(String,CPClass)": [
        "org.apache.commons.compress.harmony.pack200.ClassBands#isInnerClassOf(String,CPClass)",
        "org.apache.commons.compress.harmony.pack200.ClassBands#isInnerClass(String)",
        "org.apache.commons.compress.harmony.pack200.CPClass#toString()"
    ],
    "org.apache.commons.compress.compressors.lz77support.LZ77Compressor#catchUpMissedInserts()": ["org.apache.commons.compress.compressors.lz77support.LZ77Compressor#insertString(int)"],
    "org.apache.commons.compress.harmony.unpack200.SegmentConstantPoolArrayCache#cacheArray(String[])": [
        "org.apache.commons.compress.harmony.unpack200.SegmentConstantPoolArrayCache.CachedArray#CachedArray(String[])",
        "org.apache.commons.compress.harmony.unpack200.SegmentConstantPoolArrayCache#arrayIsCached(String[])"
    ],
    "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream#addRawArchiveEntry(ZipArchiveEntry,InputStream)": [
        "org.apache.commons.compress.archivers.zip.ZipArchiveEntry#ZipArchiveEntry(ZipArchiveEntry)",
        "org.apache.commons.compress.archivers.zip.ZipArchiveEntry#getSize()",
        "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream#closeCopiedEntry(boolean)",
        "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream#hasZip64Extra(ZipArchiveEntry)",
        "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream#copyFromZipInputStream(InputStream)",
        "org.apache.commons.compress.archivers.ArchiveEntry.<staticinit>()",
        "org.apache.commons.compress.archivers.zip.ZipArchiveEntry#removeExtraField(ZipShort)",
        "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.<staticinit>()",
        "org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField.<staticinit>()",
        "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream#putArchiveEntry(ZipArchiveEntry,boolean)"
    ],
    "org.apache.commons.compress.archivers.zip.ZipShort.getValue(byte[])": ["org.apache.commons.compress.archivers.zip.ZipShort.getValue(byte[],int)"],
    "org.apache.commons.compress.harmony.pack200.Segment.SegmentMethodVisitor#visitAttribute(Attribute)": [
        "org.apache.commons.compress.harmony.pack200.Segment#passCurrentClass()",
        "org.apache.commons.compress.harmony.pack200.PackingOptions#getUnknownAttributeAction()",
        "org.apache.commons.compress.harmony.pack200.ClassBands#addCodeAttribute(NewAttribute)",
        "org.apache.commons.compress.harmony.pack200.PackingOptions.<staticinit>()",
        "org.apache.commons.compress.harmony.pack200.NewAttribute#isUnknown()",
        "org.apache.commons.compress.harmony.pack200.AttributeDefinitionBands.<staticinit>()",
        "org.apache.commons.compress.harmony.pack200.ClassBands#addMethodAttribute(NewAttribute)",
        "org.apache.commons.compress.harmony.pack200.NewAttribute#isUnknown(int)",
        "org.apache.commons.compress.harmony.pack200.PackingOptions#getUnknownCodeAttributeAction(String)",
        "org.apache.commons.compress.harmony.pack200.NewAttribute#isCodeAttribute()",
        "org.apache.commons.compress.harmony.pack200.PackingOptions#getUnknownMethodAttributeAction(String)"
    ],
    "org.apache.commons.compress.harmony.pack200.SegmentHeader#appendBandCodingSpecifier(int)": ["org.apache.commons.compress.harmony.pack200.IntList#add(int)"],
    "org.apache.commons.compress.archivers.zip.ParallelScatterZipCreator$ThreadLocal$1#initialValue()": ["org.apache.commons.compress.archivers.zip.ParallelScatterZipCreator#createDeferred(ScatterGatherBackingStoreSupplier)"],
    "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.bsR(BitInputStream,int)": ["org.apache.commons.compress.utils.BitInputStream#readBits(int)"],
    "org.apache.commons.compress.archivers.sevenz.SevenZFile#SevenZFile(SeekableByteChannel,String)": [
        "org.apache.commons.compress.archivers.sevenz.SevenZFile#SevenZFile(SeekableByteChannel,String,SevenZFileOptions)",
        "org.apache.commons.compress.archivers.sevenz.SevenZFileOptions.<staticinit>()"
    ],
    "org.apache.commons.compress.harmony.unpack200.bytecode.forms.SuperMethodRefForm#getPoolID()": ["org.apache.commons.compress.harmony.unpack200.SegmentConstantPool.<staticinit>()"],
    "org.apache.commons.compress.archivers.zip.ResourceAlignmentExtraField#ResourceAlignmentExtraField(int,boolean)": ["org.apache.commons.compress.archivers.zip.ResourceAlignmentExtraField#ResourceAlignmentExtraField(int,boolean,int)"],
    "org.apache.commons.compress.harmony.unpack200.bytecode.forms.InitMethodReferenceForm#InitMethodReferenceForm(int,String,int[])": [
        "org.apache.commons.compress.harmony.unpack200.bytecode.forms.InitMethodReferenceForm.<init>()",
        "org.apache.commons.compress.harmony.unpack200.bytecode.forms.ClassSpecificReferenceForm#ClassSpecificReferenceForm(int,String,int[])"
    ],
    "org.apache.commons.compress.archivers.zip.X000A_NTFS#getCentralDirectoryLength()": ["org.apache.commons.compress.archivers.zip.X000A_NTFS#getLocalFileDataLength()"],
    "org.apache.commons.compress.harmony.unpack200.bytecode.ClassConstantPool#addWithNestedEntries(ClassFileEntry)": [
        "org.apache.commons.compress.harmony.unpack200.bytecode.ByteCode#getNestedClassFileEntries()",
        "org.apache.commons.compress.harmony.unpack200.bytecode.SignatureAttribute#getNestedClassFileEntries()",
        "org.apache.commons.compress.harmony.unpack200.bytecode.Attribute#getNestedClassFileEntries()",
        "org.apache.commons.compress.harmony.unpack200.bytecode.LineNumberTableAttribute#getNestedClassFileEntries()",
        "org.apache.commons.compress.harmony.unpack200.bytecode.CPString#getNestedClassFileEntries()",
        "org.apache.commons.compress.harmony.unpack200.bytecode.CPRef#getNestedClassFileEntries()",
        "org.apache.commons.compress.harmony.unpack200.bytecode.CPMember#getNestedClassFileEntries()",
        "org.apache.commons.compress.harmony.unpack200.bytecode.InnerClassesAttribute#getNestedClassFileEntries()",
        "org.apache.commons.compress.harmony.unpack200.bytecode.EnclosingMethodAttribute#getNestedClassFileEntries()",
        "org.apache.commons.compress.harmony.unpack200.bytecode.CPFieldRef#getNestedClassFileEntries()",
        "org.apache.commons.compress.harmony.unpack200.bytecode.LocalVariableTypeTableAttribute#getNestedClassFileEntries()",
        "org.apache.commons.compress.harmony.unpack200.bytecode.RuntimeVisibleorInvisibleParameterAnnotationsAttribute#getNestedClassFileEntries()",
        "org.apache.commons.compress.harmony.unpack200.bytecode.SourceFileAttribute#getNestedClassFileEntries()",
        "org.apache.commons.compress.harmony.unpack200.bytecode.CPNameAndType#getNestedClassFileEntries()",
        "org.apache.commons.compress.harmony.unpack200.bytecode.AnnotationDefaultAttribute#getNestedClassFileEntries()",
        "org.apache.commons.compress.harmony.unpack200.bytecode.LocalVariableTableAttribute#getNestedClassFileEntries()",
        "org.apache.commons.compress.harmony.unpack200.bytecode.ClassConstantPool#addWithNestedEntries(ClassFileEntry)",
        "org.apache.commons.compress.harmony.unpack200.bytecode.CPMethodRef#getNestedClassFileEntries()",
        "org.apache.commons.compress.harmony.unpack200.bytecode.RuntimeVisibleorInvisibleAnnotationsAttribute#getNestedClassFileEntries()",
        "org.apache.commons.compress.harmony.unpack200.bytecode.ConstantValueAttribute#getNestedClassFileEntries()",
        "org.apache.commons.compress.harmony.unpack200.bytecode.NewAttribute#getNestedClassFileEntries()",
        "org.apache.commons.compress.harmony.unpack200.bytecode.ClassFileEntry#getNestedClassFileEntries()",
        "org.apache.commons.compress.harmony.unpack200.bytecode.CPClass#getNestedClassFileEntries()",
        "org.apache.commons.compress.harmony.unpack200.bytecode.ClassConstantPool#add(ClassFileEntry)",
        "org.apache.commons.compress.harmony.unpack200.bytecode.ExceptionsAttribute#getNestedClassFileEntries()",
        "org.apache.commons.compress.harmony.unpack200.bytecode.CodeAttribute#getNestedClassFileEntries()"
    ],
    "org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream#read(byte[],int,int)": [
        "org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream#init(boolean)",
        "org.apache.commons.compress.compressors.zstandard.ZstdCompressorInputStream#reset()",
        "org.apache.commons.compress.compressors.zstandard.ZstdCompressorInputStream#mark(int)",
        "org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream#reset()",
        "org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream#read(byte[])",
        "org.apache.commons.compress.compressors.brotli.BrotliCompressorInputStream#mark(int)",
        "org.apache.commons.compress.compressors.brotli.BrotliCompressorInputStream#reset()",
        "org.apache.commons.compress.compressors.brotli.BrotliCompressorInputStream#read(byte[])",
        "org.apache.commons.compress.compressors.zstandard.ZstdCompressorInputStream#read(byte[])",
        "org.apache.commons.compress.compressors.CompressorInputStream#count(int)",
        "org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream#mark(int)",
        "org.apache.commons.compress.utils.ByteUtils.fromLittleEndian(DataInput,int)"
    ],
    "org.apache.commons.compress.archivers.zip.SeekableChannelRandomAccessOutputStream#position()": [
        "org.apache.commons.compress.utils.SeekableInMemoryByteChannel#position()",
        "org.apache.commons.compress.utils.MultiReadOnlySeekableByteChannel#position()"
    ],
    "org.apache.commons.compress.compressors.deflate64.HuffmanDecoder.InitialState.<init>()": ["org.apache.commons.compress.compressors.deflate64.HuffmanDecoder.DecoderState.<init>()"],
    "org.apache.commons.compress.archivers.zip.X0017_StrongEncryptionHeader#parseFromLocalFileData(byte[],int,int)": [
        "org.apache.commons.compress.archivers.zip.X0017_StrongEncryptionHeader#parseFileFormat(byte[],int,int)",
        "org.apache.commons.compress.archivers.zip.PKWareExtraHeader#parseFromLocalFileData(byte[],int,int)"
    ],
    "org.apache.commons.compress.harmony.unpack200.IcTuple#initializeClassStrings()": [
        "org.apache.commons.compress.harmony.unpack200.IcTuple#innerBreakAtDollar(String)",
        "org.apache.commons.compress.harmony.unpack200.IcTuple#isAllDigits(String)",
        "org.apache.commons.compress.harmony.unpack200.IcTuple#computeOuterIsAnonymous()",
        "org.apache.commons.compress.harmony.unpack200.IcTuple#nestedExplicitFlagSet()"
    ],
    "org.apache.commons.compress.archivers.tar.TarArchiveEntry#isCharacterDevice()": ["org.apache.commons.compress.archivers.tar.TarConstants.<staticinit>()"],
    "org.apache.commons.compress.archivers.zip.X000A_NTFS#hashCode()": ["org.apache.commons.compress.archivers.zip.ZipEightByteInteger#hashCode()"],
    "org.apache.commons.compress.harmony.unpack200.bytecode.forms.NewInitMethodRefForm#NewInitMethodRefForm(int,String,int[])": [
        "org.apache.commons.compress.harmony.unpack200.bytecode.forms.NewInitMethodRefForm.<init>()",
        "org.apache.commons.compress.harmony.unpack200.bytecode.forms.InitMethodReferenceForm#InitMethodReferenceForm(int,String,int[])"
    ],
    "org.apache.commons.compress.archivers.zip.ExplodingInputStream#close()": [
        "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream#close()",
        "org.apache.commons.compress.archivers.sevenz.BoundedSeekableByteChannelInputStream#close()",
        "org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStream#close()",
        "org.apache.commons.compress.compressors.brotli.BrotliCompressorInputStream#close()",
        "org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream#close()",
        "org.apache.commons.compress.compressors.deflate64.Deflate64CompressorInputStream#close()",
        "org.apache.commons.compress.compressors.deflate.DeflateCompressorInputStream#close()",
        "org.apache.commons.compress.archivers.sevenz.AES256SHA256Decoder.AES256SHA256DecoderInputStream#close()",
        "org.apache.commons.compress.compressors.xz.XZCompressorInputStream#close()",
        "org.apache.commons.compress.archivers.zip.ExplodingInputStream#close()",
        "org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream#close()",
        "org.apache.commons.compress.compressors.lzw.LZWInputStream#close()",
        "org.apache.commons.compress.compressors.lzma.LZMACompressorInputStream#close()",
        "org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorInputStream#close()",
        "org.apache.commons.compress.compressors.zstandard.ZstdCompressorInputStream#close()",
        "org.apache.commons.compress.compressors.lz77support.AbstractLZ77CompressorInputStream#close()"
    ],
    "org.apache.commons.compress.archivers.dump.DumpArchiveInputStream#readCLRI()": [
        "org.apache.commons.compress.archivers.dump.DumpArchiveEntry#getHeaderCount()",
        "org.apache.commons.compress.archivers.dump.TapeInputStream#skip(long)",
        "org.apache.commons.compress.archivers.dump.TapeInputStream#readRecord()",
        "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.parse(byte[])",
        "org.apache.commons.compress.archivers.dump.DumpArchiveUtil.verify(byte[])",
        "org.apache.commons.compress.archivers.dump.DumpArchiveConstants.<staticinit>()",
        "org.apache.commons.compress.archivers.dump.DumpArchiveEntry#getHeaderType()",
        "org.apache.commons.compress.archivers.dump.DumpArchiveConstants.SEGMENT_TYPE.<staticinit>()",
        "org.apache.commons.compress.archivers.dump.InvalidFormatException#InvalidFormatException()"
    ],
    "org.apache.commons.compress.utils.SeekableInMemoryByteChannel#ensureOpen()": ["org.apache.commons.compress.utils.SeekableInMemoryByteChannel#isOpen()"],
    "org.apache.commons.compress.archivers.zip.ZipFile#getEntriesInPhysicalOrder(String)": [
        "org.apache.commons.compress.archivers.zip.ZipFile#sortByOffset(ZipArchiveEntry[])",
        "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.<staticinit>()"
    ],
    "org.apache.commons.compress.utils.ServiceLoaderIterator#ServiceLoaderIterator(Class<E>)": ["org.apache.commons.compress.utils.ServiceLoaderIterator#ServiceLoaderIterator(Class<E>,ClassLoader)"],
    "org.apache.commons.compress.harmony.unpack200.bytecode.CPNameAndType#resolve(ClassConstantPool)": [
        "org.apache.commons.compress.harmony.unpack200.bytecode.ClassConstantPool#indexOf(ClassFileEntry)",
        "org.apache.commons.compress.harmony.unpack200.bytecode.ClassFileEntry#resolve(ClassConstantPool)"
    ],
    "org.apache.commons.compress.compressors.CompressorStreamFactory#createCompressorInputStream(String,InputStream)": [
        "org.apache.commons.compress.compressors.CompressorStreamFactory.<staticinit>()",
        "org.apache.commons.compress.compressors.CompressorStreamFactory#createCompressorInputStream(String,InputStream,boolean)"
    ],
    "org.apache.commons.compress.archivers.zip.ZipFile#ZipFile(String,String)": ["org.apache.commons.compress.archivers.zip.ZipFile#ZipFile(File,String,boolean)"],
    "org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream.matches(byte[],int)": ["org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream.<staticinit>()"],
    "org.apache.commons.compress.compressors.pack200.TempFileCachingStreamBridge#TempFileCachingStreamBridge()": [
        "org.apache.commons.compress.compressors.pack200.TempFileCachingStreamBridge.<init>()",
        "org.apache.commons.compress.compressors.pack200.AbstractStreamBridge#AbstractStreamBridge()"
    ],
    "org.apache.commons.compress.harmony.unpack200.bytecode.CPString#resolve(ClassConstantPool)": [
        "org.apache.commons.compress.harmony.unpack200.bytecode.ClassConstantPool#indexOf(ClassFileEntry)",
        "org.apache.commons.compress.harmony.unpack200.bytecode.ClassFileEntry#resolve(ClassConstantPool)"
    ],
    "org.apache.commons.compress.harmony.unpack200.ClassBands#parseMethodBands(InputStream)": [
        "org.apache.commons.compress.harmony.unpack200.BandSet#decodeBandInt(String,InputStream,BHSDCodec,int[])",
        "org.apache.commons.compress.harmony.pack200.Codec.<staticinit>()",
        "org.apache.commons.compress.harmony.unpack200.BandSet#getReferences(int[][],String[])",
        "org.apache.commons.compress.harmony.unpack200.ClassBands#parseMethodAttrBands(InputStream)",
        "org.apache.commons.compress.harmony.unpack200.CpBands#getCpDescriptor()"
    ],
    "org.apache.commons.compress.harmony.pack200.IntList#addAll(IntList)": [
        "org.apache.commons.compress.harmony.pack200.IntList#size()",
        "org.apache.commons.compress.harmony.pack200.IntList#growAtEnd(int)",
        "org.apache.commons.compress.harmony.pack200.IntList#get(int)",
        "org.apache.commons.compress.harmony.pack200.IntList#add(int)"
    ],
    "org.apache.commons.compress.archivers.zip.PKWareExtraHeader.EncryptionAlgorithm.getAlgorithmByCode(int)": ["org.apache.commons.compress.archivers.zip.PKWareExtraHeader.EncryptionAlgorithm.<staticinit>()"],
    "org.apache.commons.compress.archivers.zip.SeekableChannelRandomAccessOutputStream#SeekableChannelRandomAccessOutputStream(SeekableByteChannel)": [
        "org.apache.commons.compress.archivers.zip.RandomAccessOutputStream.<init>()",
        "org.apache.commons.compress.archivers.zip.SeekableChannelRandomAccessOutputStream.<init>()"
    ],
    "org.apache.commons.compress.archivers.ar.ArArchiveInputStream#trackReadBytes(long)": ["org.apache.commons.compress.archivers.ArchiveInputStream#count(long)"],
    "org.apache.commons.compress.archivers.zip.ZipUtil.toDosTime(long,byte[],int)": [
        "org.apache.commons.compress.archivers.zip.ZipUtil.javaToDosTime(long)",
        "org.apache.commons.compress.archivers.zip.ZipLong.putLong(long,byte[],int)"
    ],
    "org.apache.commons.compress.harmony.unpack200.CpBands#parseCpInt(InputStream)": [
        "org.apache.commons.compress.harmony.unpack200.SegmentHeader#getCpIntCount()",
        "org.apache.commons.compress.harmony.unpack200.BandSet#decodeBandInt(String,InputStream,BHSDCodec,int)",
        "org.apache.commons.compress.harmony.pack200.Codec.<staticinit>()"
    ],
    "org.apache.commons.compress.archivers.sevenz.BoundedSeekableByteChannelInputStream#read(byte[],int,int)": [
        "org.apache.commons.compress.archivers.sevenz.BoundedSeekableByteChannelInputStream#read(int)",
        "org.apache.commons.compress.utils.MultiReadOnlySeekableByteChannel#read(ByteBuffer)",
        "org.apache.commons.compress.utils.SeekableInMemoryByteChannel#read(ByteBuffer)"
    ],
    "org.apache.commons.compress.compressors.lz4.BlockLZ4CompressorOutputStream#clearUnusedPairs()": [
        "org.apache.commons.compress.utils.ServiceLoaderIterator#next()",
        "org.apache.commons.compress.compressors.lz4.BlockLZ4CompressorOutputStream.Pair#hasBeenWritten()",
        "org.apache.commons.compress.utils.ServiceLoaderIterator#hasNext()",
        "org.apache.commons.compress.compressors.lz4.BlockLZ4CompressorOutputStream.Pair#length()",
        "org.apache.commons.compress.compressors.lz4.BlockLZ4CompressorInputStream.<staticinit>()"
    ],
    "org.apache.commons.compress.archivers.zip.ZipFile.positionAtEndOfCentralDirectoryRecord(SeekableByteChannel)": [
        "org.apache.commons.compress.archivers.zip.ZipFile.tryToLocateSignature(SeekableByteChannel,long,long,byte[])",
        "org.apache.commons.compress.utils.IOUtils.readFully(ReadableByteChannel,ByteBuffer)",
        "org.apache.commons.compress.archivers.zip.ZipFile.<staticinit>()",
        "org.apache.commons.compress.utils.SeekableInMemoryByteChannel#position(long)",
        "org.apache.commons.compress.utils.SeekableInMemoryByteChannel#position()",
        "org.apache.commons.compress.utils.MultiReadOnlySeekableByteChannel#position()",
        "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.<staticinit>()",
        "org.apache.commons.compress.utils.MultiReadOnlySeekableByteChannel#position(long)",
        "org.apache.commons.compress.archivers.zip.ZipConstants.<staticinit>()"
    ],
    "org.apache.commons.compress.compressors.lzma.LZMAUtils.internalIsLZMACompressionAvailable()": ["org.apache.commons.compress.compressors.lzma.LZMACompressorInputStream.matches(byte[],int)"],
    "org.apache.commons.compress.archivers.zip.ZipArchiveEntry#internalRemoveExtraField(ZipShort)": [
        "org.apache.commons.compress.archivers.zip.X7875_NewUnix#getHeaderId()",
        "org.apache.commons.compress.archivers.zip.ExtraFieldUtils.<staticinit>()",
        "org.apache.commons.compress.archivers.zip.JarMarker#getHeaderId()",
        "org.apache.commons.compress.archivers.zip.PKWareExtraHeader#getHeaderId()",
        "org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField#getHeaderId()",
        "org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp#getHeaderId()",
        "org.apache.commons.compress.archivers.zip.X000A_NTFS#getHeaderId()",
        "org.apache.commons.compress.archivers.zip.UnparseableExtraFieldData#getHeaderId()",
        "org.apache.commons.compress.archivers.zip.ResourceAlignmentExtraField#getHeaderId()",
        "org.apache.commons.compress.archivers.zip.ZipShort#equals(Object)",
        "org.apache.commons.compress.archivers.zip.AsiExtraField#getHeaderId()",
        "org.apache.commons.compress.archivers.zip.UnicodePathExtraField#getHeaderId()",
        "org.apache.commons.compress.archivers.zip.UnicodeCommentExtraField#getHeaderId()",
        "org.apache.commons.compress.archivers.zip.UnrecognizedExtraField#getHeaderId()"
    ],
    "org.apache.commons.compress.harmony.pack200.CodecEncoding.<staticinit>()": [
        "org.apache.commons.compress.harmony.pack200.BHSDCodec#BHSDCodec(int,int,int,int)",
        "org.apache.commons.compress.harmony.pack200.BHSDCodec#BHSDCodec(int,int,int)",
        "org.apache.commons.compress.harmony.pack200.BHSDCodec#BHSDCodec(int,int)"
    ],
    "org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp#toString()": [
        "org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp#getModifyJavaTime()",
        "org.apache.commons.compress.archivers.zip.ZipUtil.unsignedIntToSignedByte(int)",
        "org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp#getCreateJavaTime()",
        "org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp#getAccessJavaTime()"
    ],
    "org.apache.commons.compress.archivers.sevenz.Coders.addDecoder(String,InputStream,long,Coder,byte[],int)": [
        "org.apache.commons.compress.archivers.sevenz.LZMA2Decoder#decode(String,InputStream,long,Coder,byte[],int)",
        "org.apache.commons.compress.archivers.sevenz.Coders.DeflateDecoder#decode(String,InputStream,long,Coder,byte[],int)",
        "org.apache.commons.compress.archivers.sevenz.SevenZMethod.byId(byte[])",
        "org.apache.commons.compress.archivers.sevenz.DeltaDecoder#decode(String,InputStream,long,Coder,byte[],int)",
        "org.apache.commons.compress.archivers.sevenz.Coders.findByMethod(SevenZMethod)",
        "org.apache.commons.compress.archivers.sevenz.Coders.CopyDecoder#decode(String,InputStream,long,Coder,byte[],int)",
        "org.apache.commons.compress.archivers.sevenz.Coders.BZIP2Decoder#decode(String,InputStream,long,Coder,byte[],int)",
        "org.apache.commons.compress.archivers.sevenz.LZMADecoder#decode(String,InputStream,long,Coder,byte[],int)",
        "org.apache.commons.compress.archivers.sevenz.Coders.Deflate64Decoder#decode(String,InputStream,long,Coder,byte[],int)",
        "org.apache.commons.compress.archivers.sevenz.AES256SHA256Decoder#decode(String,InputStream,long,Coder,byte[],int)",
        "org.apache.commons.compress.archivers.sevenz.Coders.BCJDecoder#decode(String,InputStream,long,Coder,byte[],int)"
    ],
    "org.apache.commons.compress.harmony.pack200.RunCodec#normalise(int,Codec)": [
        "org.apache.commons.compress.harmony.pack200.BHSDCodec#cardinality()",
        "org.apache.commons.compress.utils.ExactMath.add(int,long)",
        "org.apache.commons.compress.harmony.pack200.BHSDCodec#largest()",
        "org.apache.commons.compress.harmony.pack200.BHSDCodec#isDelta()",
        "org.apache.commons.compress.harmony.pack200.BHSDCodec#smallest()"
    ],
    "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream#putArchiveEntry(ZipArchiveEntry)": [
        "org.apache.commons.compress.archivers.zip.Zip64Mode.<staticinit>()",
        "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream#putArchiveEntry(ZipArchiveEntry,boolean)"
    ],
    "org.apache.commons.compress.harmony.pack200.CPMethodOrField#compareTo(Object)": [
        "org.apache.commons.compress.harmony.pack200.CPClass#compareTo(CPClass)",
        "org.apache.commons.compress.harmony.pack200.CPNameAndType#compareTo(Object)"
    ],
    "org.apache.commons.compress.harmony.unpack200.bytecode.ConstantPoolEntry#ConstantPoolEntry(byte,int)": [
        "org.apache.commons.compress.harmony.unpack200.bytecode.ClassFileEntry.<init>()",
        "org.apache.commons.compress.harmony.unpack200.bytecode.ConstantPoolEntry.<init>()"
    ],
    "org.apache.commons.compress.harmony.pack200.NewAttributeBands.Callable#pack(OutputStream)": [
        "org.apache.commons.compress.harmony.pack200.NewAttributeBands.Union#pack(OutputStream)",
        "org.apache.commons.compress.harmony.pack200.NewAttributeBands.Callable#pack(OutputStream)",
        "org.apache.commons.compress.harmony.pack200.NewAttributeBands.Call#pack(OutputStream)",
        "org.apache.commons.compress.harmony.pack200.NewAttributeBands.UnionCase#pack(OutputStream)",
        "org.apache.commons.compress.harmony.pack200.NewAttributeBands.Reference#pack(OutputStream)",
        "org.apache.commons.compress.harmony.pack200.NewAttributeBands.Integral#pack(OutputStream)",
        "org.apache.commons.compress.harmony.pack200.NewAttributeBands.Replication#pack(OutputStream)"
    ],
    "org.apache.commons.compress.archivers.sevenz.SevenZFile.ArchiveStatistics#assertValidity(int)": [
        "org.apache.commons.compress.MemoryLimitException#MemoryLimitException(long,int)",
        "org.apache.commons.compress.archivers.sevenz.SevenZFile.ArchiveStatistics#estimateSize()"
    ],
    "org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream#finish()": [
        "org.apache.commons.compress.compressors.pack200.AbstractStreamBridge#getInputStream()",
        "org.apache.commons.compress.harmony.pack200.Pack200PackerAdapter#pack(JarInputStream,OutputStream)",
        "org.apache.commons.compress.java.util.jar.Pack200.newPacker()"
    ],
    "org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStream#read(byte[],int,int)": [
        "org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStream#readOnce(byte[],int,int)",
        "org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStream#readNextBlock()"
    ],
    "org.apache.commons.compress.harmony.unpack200.bytecode.forms.WideForm#setByteCodeOperands(ByteCode,OperandManager,int)": [
        "org.apache.commons.compress.harmony.unpack200.bytecode.forms.WideForm#setByteCodeOperandsFormat1(int,ByteCode,OperandManager,int)",
        "org.apache.commons.compress.harmony.unpack200.bytecode.forms.WideForm#setByteCodeOperandsFormat2(int,ByteCode,OperandManager,int)",
        "org.apache.commons.compress.harmony.unpack200.bytecode.OperandManager#nextWideByteCode()"
    ],
    "org.apache.commons.compress.archivers.tar.TarArchiveInputStream#paxHeaders()": [
        "org.apache.commons.compress.archivers.tar.TarGnuSparseKeys.<staticinit>()",
        "org.apache.commons.compress.archivers.tar.TarArchiveEntry#setSparseHeaders(List<TarArchiveStructSparse>)",
        "org.apache.commons.compress.archivers.tar.TarArchiveInputStream#getRecordSize()",
        "org.apache.commons.compress.archivers.tar.TarArchiveInputStream#getNextEntry()",
        "org.apache.commons.compress.archivers.tar.TarUtils.parsePAX1XSparseHeaders(InputStream,int)",
        "org.apache.commons.compress.archivers.tar.TarUtils.parseFromPAX01SparseHeaders(String)",
        "org.apache.commons.compress.archivers.tar.TarUtils.parsePaxHeaders(InputStream,List<TarArchiveStructSparse>,Map<String, String>,long)",
        "org.apache.commons.compress.archivers.tar.TarArchiveInputStream#applyPaxHeadersToCurrentEntry(Map<String, String>,List<TarArchiveStructSparse>)",
        "org.apache.commons.compress.archivers.tar.TarArchiveEntry#isPaxGNU1XSparse()",
        "org.apache.commons.compress.archivers.tar.TarArchiveInputStream#buildSparseInputStreams()"
    ],
    "org.apache.commons.compress.archivers.zip.ZipShort.putShort(int,byte[],int)": ["org.apache.commons.compress.utils.ByteUtils.toLittleEndian(byte[],long,int,int)"],
    "org.apache.commons.compress.compressors.deflate64.HuffmanDecoder.nextSymbol(BitInputStream,BinaryTreeNode)": ["org.apache.commons.compress.compressors.deflate64.HuffmanDecoder.readBits(BitInputStream,int)"],
    "org.apache.commons.compress.harmony.unpack200.bytecode.CodeAttribute#getLength()": ["org.apache.commons.compress.harmony.unpack200.bytecode.Attribute#getLengthIncludingHeader()"],
    "org.apache.commons.compress.archivers.cpio.CpioArchiveEntry#CpioArchiveEntry(short,String)": ["org.apache.commons.compress.archivers.cpio.CpioArchiveEntry#CpioArchiveEntry(short)"],
    "org.apache.commons.compress.archivers.zip.PKWareExtraHeader#setCentralDirectoryData(byte[])": ["org.apache.commons.compress.archivers.zip.ZipUtil.copy(byte[])"],
    "org.apache.commons.compress.archivers.zip.ZipEightByteInteger#ZipEightByteInteger(BigInteger)": ["org.apache.commons.compress.archivers.zip.ZipEightByteInteger.<init>()"],
    "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream#ZipArchiveOutputStream(File)": ["org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream#ZipArchiveOutputStream(File)"],
    "org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorOutputStream.BlockSize#BlockSize(int,int)": ["org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorOutputStream.BlockSize.<init>()"],
    "org.apache.commons.compress.compressors.FileNameUtil#FileNameUtil(Map<String, String>,String)": ["org.apache.commons.compress.compressors.FileNameUtil.<init>()"],
    "org.apache.commons.compress.harmony.pack200.CanonicalCodecFamilies.<staticinit>()": ["org.apache.commons.compress.harmony.pack200.CodecEncoding.getCanonicalCodec(int)"],
    "org.apache.commons.compress.harmony.pack200.BHSDCodec#decodeInts(int,InputStream)": [
        "org.apache.commons.compress.harmony.pack200.Codec#decodeInts(int,InputStream)",
        "org.apache.commons.compress.harmony.pack200.BHSDCodec#isDelta()",
        "org.apache.commons.compress.utils.ExactMath.add(int,long)"
    ],
    "org.apache.commons.compress.archivers.ar.ArArchiveOutputStream#putArchiveEntry(ArArchiveEntry)": [
        "org.apache.commons.compress.archivers.ar.ArArchiveOutputStream#writeEntryHeader(ArArchiveEntry)",
        "org.apache.commons.compress.archivers.ar.ArArchiveOutputStream#closeArchiveEntry()",
        "org.apache.commons.compress.archivers.ar.ArArchiveEntry#getLength()",
        "org.apache.commons.compress.archivers.ar.ArArchiveOutputStream#writeArchiveHeader()"
    ],
    "org.apache.commons.compress.harmony.unpack200.bytecode.ByteCode#setOperandSigned2Bytes(int,int)": ["org.apache.commons.compress.harmony.unpack200.bytecode.ByteCode#setOperand2Bytes(int,int)"],
    "org.apache.commons.compress.archivers.zip.ZipFile.<staticinit>()": [
        "org.apache.commons.compress.archivers.zip.ZipLong.getValue(byte[])",
        "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.<staticinit>()",
        "org.apache.commons.compress.archivers.zip.ZipConstants.<staticinit>()"
    ],
    "org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorOutputStream#flushBlock()": [
        "org.apache.commons.compress.archivers.sevenz.Coders.DeflateDecoder.DeflateDecoderOutputStream#write(byte[],int,int)",
        "org.apache.commons.compress.utils.FixedLengthBlockOutputStream#write(byte[],int,int)",
        "org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorOutputStream#write(byte[],int,int)",
        "org.apache.commons.compress.utils.ByteUtils.toLittleEndian(OutputStream,long,int)",
        "org.apache.commons.compress.compressors.lz4.BlockLZ4CompressorOutputStream#BlockLZ4CompressorOutputStream(OutputStream,Parameters)",
        "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream#write(byte[],int,int)",
        "org.apache.commons.compress.archivers.zip.FileRandomAccessOutputStream#write(byte[],int,int)",
        "org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream#write(byte[],int,int)",
        "org.apache.commons.compress.archivers.zip.ZipSplitOutputStream#write(byte[],int,int)",
        "org.apache.commons.compress.compressors.xz.XZCompressorOutputStream#write(byte[],int,int)",
        "org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream#write(byte[])",
        "org.apache.commons.compress.compressors.deflate.DeflateCompressorOutputStream#write(byte[],int,int)",
        "org.apache.commons.compress.compressors.lz4.BlockLZ4CompressorOutputStream#prefill(byte[],int,int)",
        "org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorOutputStream#appendToBlockDependencyBuffer(byte[],int,int)",
        "org.apache.commons.compress.archivers.zip.SeekableChannelRandomAccessOutputStream#write(byte[],int,int)",
        "org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream#write(byte[],int,int)",
        "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.OutputStreamWrapper#write(byte[])",
        "org.apache.commons.compress.archivers.ar.ArArchiveOutputStream#write(byte[],int,int)",
        "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream#write(byte[],int,int)",
        "org.apache.commons.compress.compressors.lzma.LZMACompressorOutputStream#write(byte[],int,int)",
        "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.OutputStreamWrapper#write(byte[],int,int)",
        "org.apache.commons.compress.compressors.zstandard.ZstdCompressorOutputStream#write(byte[],int,int)",
        "org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorInputStream.<staticinit>()",
        "org.apache.commons.compress.archivers.sevenz.AES256SHA256Decoder.AES256SHA256DecoderOutputStream#write(byte[],int,int)",
        "org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorOutputStream#write(byte[],int,int)",
        "org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream#write(byte[])",
        "org.apache.commons.compress.archivers.sevenz.Coders.DeflateDecoder.DeflateDecoderOutputStream#write(byte[])",
        "org.apache.commons.compress.compressors.lz4.BlockLZ4CompressorOutputStream#write(byte[],int,int)",
        "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream#write(byte[],int,int)",
        "org.apache.commons.compress.compressors.snappy.SnappyCompressorOutputStream#write(byte[],int,int)",
        "org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream#write(byte[],int,int)",
        "org.apache.commons.compress.archivers.zip.ZipSplitOutputStream#write(byte[])"
    ],
    "org.apache.commons.compress.archivers.jar.JarArchiveInputStream#getNextEntry()": ["org.apache.commons.compress.archivers.jar.JarArchiveInputStream#getNextJarEntry()"],
    "org.apache.commons.compress.utils.BoundedArchiveInputStream#read()": [
        "org.apache.commons.compress.utils.BoundedSeekableByteChannelInputStream#read(long,ByteBuffer)",
        "org.apache.commons.compress.archivers.tar.TarFile.BoundedTarEntryInputStream#read(long,ByteBuffer)",
        "org.apache.commons.compress.archivers.zip.ZipFile.BoundedFileChannelInputStream#read(long,ByteBuffer)"
    ],
    "org.apache.commons.compress.harmony.pack200.Codec#decodeInts(int,InputStream)": [
        "org.apache.commons.compress.harmony.pack200.PopulationCodec#decode(InputStream,long)",
        "org.apache.commons.compress.harmony.pack200.BHSDCodec#decode(InputStream,long)",
        "org.apache.commons.compress.harmony.pack200.Codec#check(int,InputStream)",
        "org.apache.commons.compress.harmony.pack200.RunCodec#decode(InputStream,long)"
    ],
    "org.apache.commons.compress.utils.ServiceLoaderIterator#hasNext()": [
        "org.apache.commons.compress.utils.ServiceLoaderIterator#next()",
        "org.apache.commons.compress.utils.ServiceLoaderIterator#hasNext()"
    ],
    "org.apache.commons.compress.harmony.unpack200.CpBands#cpMethodValue(int)": [
        "org.apache.commons.compress.harmony.unpack200.CpBands#cpClassValue(int)",
        "org.apache.commons.compress.harmony.unpack200.CpBands#cpNameAndTypeValue(int)",
        "org.apache.commons.compress.harmony.unpack200.bytecode.CPMethodRef#CPMethodRef(CPClass,CPNameAndType,int)"
    ],
    "org.apache.commons.compress.archivers.zip.ZipFile#readCentralDirectoryEntry(Map<ZipArchiveEntry, NameAndComment>)": [
        "org.apache.commons.compress.archivers.zip.ZipArchiveEntry#setNameSource(NameSource)",
        "org.apache.commons.compress.utils.IOUtils.readRange(ReadableByteChannel,int)",
        "org.apache.commons.compress.archivers.zip.ZipFile.NameAndComment#NameAndComment(byte[],byte[])",
        "org.apache.commons.compress.archivers.zip.ZipArchiveEntry#setVersionRequired(int)",
        "org.apache.commons.compress.archivers.zip.ZipEncodingHelper.<staticinit>()",
        "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.NameSource.<staticinit>()",
        "org.apache.commons.compress.archivers.zip.ZipArchiveEntry#setVersionMadeBy(int)",
        "org.apache.commons.compress.archivers.zip.ZipArchiveEntry#setName(String,byte[])",
        "org.apache.commons.compress.archivers.zip.ZipArchiveEntry#setInternalAttributes(int)",
        "org.apache.commons.compress.archivers.zip.ZipFile#setSizesAndOffsetFromZip64Extra(ZipArchiveEntry)",
        "org.apache.commons.compress.archivers.zip.ZipArchiveEntry#setStreamContiguous(boolean)",
        "org.apache.commons.compress.archivers.zip.ZipArchiveEntry#setSize(long)",
        "org.apache.commons.compress.archivers.zip.ZipFile#sanityCheckLFHOffset(ZipArchiveEntry)",
        "org.apache.commons.compress.archivers.zip.ZipFile.Entry.<init>()",
        "org.apache.commons.compress.utils.IOUtils.readFully(ReadableByteChannel,ByteBuffer)",
        "org.apache.commons.compress.archivers.zip.ZipArchiveEntry#setPlatform(int)",
        "org.apache.commons.compress.archivers.zip.ZipShort.getValue(byte[],int)",
        "org.apache.commons.compress.archivers.zip.ZipArchiveEntry#setExternalAttributes(long)",
        "org.apache.commons.compress.archivers.zip.ZipArchiveEntry#getName()",
        "org.apache.commons.compress.archivers.zip.ZipArchiveEntry#setDiskNumberStart(long)",
        "org.apache.commons.compress.archivers.zip.ZipArchiveEntry#setGeneralPurposeBit(GeneralPurposeBit)",
        "org.apache.commons.compress.archivers.zip.GeneralPurposeBit#usesUTF8ForNames()",
        "org.apache.commons.compress.archivers.zip.GeneralPurposeBit.parse(byte[],int)",
        "org.apache.commons.compress.archivers.zip.ZipArchiveEntry#setTime(long)",
        "org.apache.commons.compress.archivers.zip.ZipConstants.<staticinit>()",
        "org.apache.commons.compress.archivers.zip.NioZipEncoding#decode(byte[])",
        "org.apache.commons.compress.archivers.zip.ZipFile.<staticinit>()",
        "org.apache.commons.compress.archivers.zip.ZipUtil.dosToJavaTime(long)",
        "org.apache.commons.compress.archivers.zip.ZipLong.getValue(byte[],int)",
        "org.apache.commons.compress.archivers.zip.ZipArchiveEntry#setRawFlag(int)",
        "org.apache.commons.compress.archivers.zip.ZipArchiveEntry#setLocalHeaderOffset(long)",
        "org.apache.commons.compress.archivers.zip.ZipArchiveEntry#setMethod(int)",
        "org.apache.commons.compress.archivers.tar.TarUtils$ZipEncoding$1#decode(byte[])",
        "org.apache.commons.compress.archivers.zip.ZipArchiveEntry#setCentralDirectoryExtra(byte[])"
    ],
    "org.apache.commons.compress.harmony.pack200.AttributeDefinitionBands#finaliseBands()": [
        "org.apache.commons.compress.harmony.pack200.AttributeDefinitionBands#addSyntheticDefinitions()",
        "org.apache.commons.compress.harmony.pack200.SegmentHeader#setAttribute_definition_count(int)"
    ],
    "org.apache.commons.compress.archivers.zip.PKWareExtraHeader.HashAlgorithm.<staticinit>()": ["org.apache.commons.compress.archivers.zip.PKWareExtraHeader.HashAlgorithm#getCode()"],
    "org.apache.commons.compress.archivers.tar.TarArchiveEntry#isOldGNUSparse()": ["org.apache.commons.compress.archivers.tar.TarConstants.<staticinit>()"],
    "org.apache.commons.compress.archivers.zip.ZipArchiveEntry#getLocalFileDataExtra()": ["org.apache.commons.compress.utils.ByteUtils.<staticinit>()"],
    "org.apache.commons.compress.harmony.unpack200.bytecode.LineNumberTableAttribute#resolve(ClassConstantPool)": ["org.apache.commons.compress.harmony.unpack200.bytecode.Attribute#resolve(ClassConstantPool)"],
    "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile#writeFolder(DataOutput,SevenZArchiveEntry)": [
        "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile#writeUint64(DataOutput,long)",
        "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile#getContentMethods(SevenZArchiveEntry)",
        "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile#writeSingleCodec(SevenZMethodConfiguration,OutputStream)"
    ],
    "org.apache.commons.compress.harmony.pack200.Segment#visitEnd()": ["org.apache.commons.compress.harmony.pack200.ClassBands#endOfClass()"],
    "org.apache.commons.compress.harmony.unpack200.ClassBands#read(InputStream)": [
        "org.apache.commons.compress.harmony.unpack200.BandSet#decodeBandInt(String,InputStream,BHSDCodec,int[])",
        "org.apache.commons.compress.harmony.unpack200.ClassBands#parseClassAttrBands(InputStream)",
        "org.apache.commons.compress.harmony.pack200.Codec.<staticinit>()",
        "org.apache.commons.compress.harmony.unpack200.ClassBands#parseMethodBands(InputStream)",
        "org.apache.commons.compress.harmony.unpack200.BandSet#getReferences(int[],String[])",
        "org.apache.commons.compress.harmony.unpack200.BandSet#decodeBandInt(String,InputStream,BHSDCodec,int)",
        "org.apache.commons.compress.harmony.unpack200.ClassBands#parseCodeBands(InputStream)",
        "org.apache.commons.compress.harmony.unpack200.ClassBands#parseFieldBands(InputStream)",
        "org.apache.commons.compress.harmony.unpack200.SegmentHeader#getClassCount()",
        "org.apache.commons.compress.harmony.unpack200.CpBands#getCpClass()"
    ],
    "org.apache.commons.compress.archivers.zip.ResourceAlignmentExtraField.<staticinit>()": ["org.apache.commons.compress.archivers.zip.ZipShort#ZipShort(int)"],
    "org.apache.commons.compress.harmony.unpack200.SegmentOptions#hasArchiveFileCounts()": ["org.apache.commons.compress.harmony.unpack200.SegmentOptions.<staticinit>()"],
    "org.apache.commons.compress.archivers.cpio.CpioArchiveEntry#CpioArchiveEntry(String,long)": [
        "org.apache.commons.compress.archivers.cpio.CpioArchiveEntry#CpioArchiveEntry(String)",
        "org.apache.commons.compress.archivers.cpio.CpioArchiveEntry#setSize(long)"
    ],
    "org.apache.commons.compress.utils.ByteUtils.fromLittleEndian(ByteSupplier,int)": [
        "org.apache.commons.compress.utils.ByteUtils.checkReadLength(int)",
        "org.apache.commons.compress.utils.ByteUtils.InputStreamByteSupplier#getAsByte()"
    ],
    "org.apache.commons.compress.utils.ByteUtils.fromLittleEndian(DataInput,int)": ["org.apache.commons.compress.utils.ByteUtils.checkReadLength(int)"],
    "org.apache.commons.compress.archivers.zip.ScatterZipOutputStream.pathBased(Path,int)": [
        "org.apache.commons.compress.archivers.zip.ScatterZipOutputStream#ScatterZipOutputStream(ScatterGatherBackingStore,StreamCompressor)",
        "org.apache.commons.compress.archivers.zip.StreamCompressor.create(int,ScatterGatherBackingStore)",
        "org.apache.commons.compress.parallel.FileBasedScatterGatherBackingStore#FileBasedScatterGatherBackingStore(Path)"
    ],
    "org.apache.commons.compress.archivers.sevenz.SevenZFile#tryToLocateEndHeader(byte[])": [
        "org.apache.commons.compress.archivers.sevenz.SevenZFile#initializeArchive(StartHeader,byte[],boolean)",
        "org.apache.commons.compress.utils.MultiReadOnlySeekableByteChannel#size()",
        "org.apache.commons.compress.utils.SeekableInMemoryByteChannel#position(long)",
        "org.apache.commons.compress.utils.SeekableInMemoryByteChannel#position()",
        "org.apache.commons.compress.archivers.sevenz.StartHeader#StartHeader(long,long,long)",
        "org.apache.commons.compress.utils.MultiReadOnlySeekableByteChannel#position()",
        "org.apache.commons.compress.utils.SeekableInMemoryByteChannel#read(ByteBuffer)",
        "org.apache.commons.compress.archivers.sevenz.NID.<staticinit>()",
        "org.apache.commons.compress.utils.MultiReadOnlySeekableByteChannel#position(long)",
        "org.apache.commons.compress.utils.MultiReadOnlySeekableByteChannel#read(ByteBuffer)",
        "org.apache.commons.compress.utils.SeekableInMemoryByteChannel#size()"
    ],
    "org.apache.commons.compress.archivers.dump.DumpArchiveEntry#update(byte[])": ["org.apache.commons.compress.archivers.dump.DumpArchiveUtil.convert32(byte[],int)"],
    "org.apache.commons.compress.harmony.unpack200.bytecode.forms.ByteCodeForm.get(int)": ["org.apache.commons.compress.harmony.unpack200.bytecode.forms.ByteCodeForm.<staticinit>()"],
    "org.apache.commons.compress.archivers.cpio.CpioArchiveEntry#setDevice(long)": ["org.apache.commons.compress.archivers.cpio.CpioArchiveEntry#checkOldFormat()"],
    "org.apache.commons.compress.utils.SeekableInMemoryByteChannel#resize(int)": ["org.apache.commons.compress.utils.SeekableInMemoryByteChannel.<staticinit>()"],
    "org.apache.commons.compress.archivers.dump.TapeInputStream#read()": ["org.apache.commons.compress.archivers.dump.TapeInputStream.<staticinit>()"],
    "org.apache.commons.compress.harmony.unpack200.bytecode.forms.ThisFieldRefForm#getOffset(OperandManager)": ["org.apache.commons.compress.harmony.unpack200.bytecode.OperandManager#nextThisFieldRef()"],
    "org.apache.commons.compress.archivers.sevenz.CLI.Mode$Mode$1.<init>()": ["org.apache.commons.compress.archivers.sevenz.CLI.Mode#Mode(String)"],
    "org.apache.commons.compress.archivers.zip.X0015_CertificateIdForFile#parseFromCentralDirectoryData(byte[],int,int)": [
        "org.apache.commons.compress.archivers.zip.PKWareExtraHeader#assertMinimalLength(int,int)",
        "org.apache.commons.compress.archivers.zip.PKWareExtraHeader#parseFromCentralDirectoryData(byte[],int,int)",
        "org.apache.commons.compress.archivers.zip.ZipShort.getValue(byte[],int)",
        "org.apache.commons.compress.archivers.zip.PKWareExtraHeader.HashAlgorithm.getAlgorithmByCode(int)"
    ],
    "org.apache.commons.compress.archivers.cpio.CpioArchiveEntry#setRemoteDevice(long)": ["org.apache.commons.compress.archivers.cpio.CpioArchiveEntry#checkOldFormat()"],
    "org.apache.commons.compress.archivers.zip.X000A_NTFS#getAccessJavaTime()": ["org.apache.commons.compress.archivers.zip.X000A_NTFS.zipToDate(ZipEightByteInteger)"],
    "org.apache.commons.compress.harmony.pack200.NewAttributeBands.Replication#addAttributeToBand(NewAttribute,InputStream)": [
        "org.apache.commons.compress.harmony.pack200.NewAttributeBands.Union#addAttributeToBand(NewAttribute,InputStream)",
        "org.apache.commons.compress.harmony.pack200.NewAttributeBands.Replication#addAttributeToBand(NewAttribute,InputStream)",
        "org.apache.commons.compress.harmony.pack200.NewAttributeBands.Integral#latestValue()",
        "org.apache.commons.compress.harmony.pack200.NewAttributeBands.Reference#addAttributeToBand(NewAttribute,InputStream)",
        "org.apache.commons.compress.harmony.pack200.NewAttributeBands.Callable#addAttributeToBand(NewAttribute,InputStream)",
        "org.apache.commons.compress.harmony.pack200.NewAttributeBands.Call#addAttributeToBand(NewAttribute,InputStream)",
        "org.apache.commons.compress.harmony.pack200.NewAttributeBands.Integral#addAttributeToBand(NewAttribute,InputStream)",
        "org.apache.commons.compress.harmony.pack200.NewAttributeBands.UnionCase#addAttributeToBand(NewAttribute,InputStream)"
    ],
    "org.apache.commons.compress.archivers.zip.UnicodeCommentExtraField#UnicodeCommentExtraField(String,byte[])": [
        "org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField#AbstractUnicodeExtraField(String,byte[])",
        "org.apache.commons.compress.archivers.zip.UnicodeCommentExtraField.<init>()"
    ],
    "org.apache.commons.compress.utils.BoundedSeekableByteChannelInputStream#read(long,ByteBuffer)": [
        "org.apache.commons.compress.utils.SeekableInMemoryByteChannel#read(ByteBuffer)",
        "org.apache.commons.compress.utils.SeekableInMemoryByteChannel#position(long)",
        "org.apache.commons.compress.utils.MultiReadOnlySeekableByteChannel#position(long)",
        "org.apache.commons.compress.utils.MultiReadOnlySeekableByteChannel#read(ByteBuffer)"
    ],
    "org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream#CpioArchiveInputStream(InputStream,int)": [
        "org.apache.commons.compress.archivers.cpio.CpioUtil.<staticinit>()",
        "org.apache.commons.compress.archivers.cpio.CpioConstants.<staticinit>()",
        "org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream#CpioArchiveInputStream(InputStream,int,String)"
    ],
    "org.apache.commons.compress.archivers.zip.UnparseableExtraFieldData#parseFromCentralDirectoryData(byte[],int,int)": ["org.apache.commons.compress.archivers.zip.UnparseableExtraFieldData#parseFromLocalFileData(byte[],int,int)"],
    "org.apache.commons.compress.archivers.zip.ZipLong#ZipLong(int)": ["org.apache.commons.compress.archivers.zip.ZipLong.<init>()"],
    "org.apache.commons.compress.archivers.zip.ParallelScatterZipCreator#addArchiveEntry(ZipArchiveEntry,InputStreamSupplier)": [
        "org.apache.commons.compress.archivers.zip.ParallelScatterZipCreator#submitStreamAwareCallable(Callable<? extends ScatterZipOutputStream>)",
        "org.apache.commons.compress.archivers.zip.ParallelScatterZipCreator#createCallable(ZipArchiveEntry,InputStreamSupplier)"
    ],
    "org.apache.commons.compress.archivers.zip.X0019_EncryptionRecipientCertificateList#X0019_EncryptionRecipientCertificateList()": [
        "org.apache.commons.compress.archivers.zip.X0019_EncryptionRecipientCertificateList.<init>()",
        "org.apache.commons.compress.archivers.zip.X0019_EncryptionRecipientCertificateList.<staticinit>()",
        "org.apache.commons.compress.archivers.zip.PKWareExtraHeader#PKWareExtraHeader(ZipShort)"
    ],
    "org.apache.commons.compress.harmony.unpack200.bytecode.AnnotationsAttribute#AnnotationsAttribute(CPUTF8)": [
        "org.apache.commons.compress.harmony.unpack200.bytecode.Attribute#Attribute(CPUTF8)",
        "org.apache.commons.compress.harmony.unpack200.bytecode.AnnotationsAttribute.<init>()"
    ],
    "org.apache.commons.compress.harmony.pack200.PackingOptions#getUnknownMethodAttributeAction(String)": ["org.apache.commons.compress.harmony.pack200.PackingOptions#getOrDefault(Map<String, String>,String,String)"],
    "org.apache.commons.compress.harmony.pack200.Segment.SegmentAnnotationVisitor#SegmentAnnotationVisitor(int,String,boolean)": [
        "org.apache.commons.compress.harmony.pack200.Segment.<staticinit>()",
        "org.apache.commons.compress.harmony.pack200.Segment.SegmentAnnotationVisitor.<init>()"
    ],
    "org.apache.commons.compress.archivers.zip.ZipFile#ZipFile(Path)": [
        "org.apache.commons.compress.archivers.zip.ZipFile.<staticinit>()",
        "org.apache.commons.compress.archivers.zip.ZipFile#ZipFile(Path,String)"
    ],
    "org.apache.commons.compress.harmony.pack200.CpBands#addIndices()": [
        "org.apache.commons.compress.harmony.pack200.CPNameAndType#getName()",
        "org.apache.commons.compress.harmony.pack200.CPMethodOrField#getDesc()",
        "org.apache.commons.compress.harmony.pack200.CPMethodOrField#setIndexInClassForConstructor(int)",
        "org.apache.commons.compress.harmony.pack200.CPMethodOrField#getClassName()",
        "org.apache.commons.compress.harmony.pack200.ConstantPoolEntry#setIndex(int)",
        "org.apache.commons.compress.harmony.pack200.CPMethodOrField#setIndexInClass(int)"
    ],
    "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.OutputStreamWrapper#write(int)": [
        "org.apache.commons.compress.utils.SeekableInMemoryByteChannel#write(ByteBuffer)",
        "org.apache.commons.compress.utils.MultiReadOnlySeekableByteChannel#write(ByteBuffer)"
    ],
    "org.apache.commons.compress.archivers.zip.ZipUtil.supportsEncryptionOf(ZipArchiveEntry)": [
        "org.apache.commons.compress.archivers.zip.ZipArchiveEntry#getGeneralPurposeBit()",
        "org.apache.commons.compress.archivers.zip.GeneralPurposeBit#usesEncryption()"
    ],
    "org.apache.commons.compress.harmony.unpack200.bytecode.forms.IntRefForm#IntRefForm(int,String,int[])": [
        "org.apache.commons.compress.harmony.unpack200.bytecode.forms.SingleByteReferenceForm#SingleByteReferenceForm(int,String,int[])",
        "org.apache.commons.compress.harmony.unpack200.bytecode.forms.IntRefForm.<init>()"
    ],
    "org.apache.commons.compress.harmony.unpack200.NewAttributeBands.UnionCase#readBands(InputStream,int)": [
        "org.apache.commons.compress.harmony.unpack200.NewAttributeBands.Union#readBands(InputStream,int)",
        "org.apache.commons.compress.harmony.unpack200.NewAttributeBands.Reference#readBands(InputStream,int)",
        "org.apache.commons.compress.harmony.unpack200.NewAttributeBands.Callable#readBands(InputStream,int)",
        "org.apache.commons.compress.harmony.unpack200.NewAttributeBands.UnionCase#readBands(InputStream,int)",
        "org.apache.commons.compress.harmony.unpack200.NewAttributeBands.Integral#readBands(InputStream,int)",
        "org.apache.commons.compress.harmony.unpack200.NewAttributeBands.Call#readBands(InputStream,int)",
        "org.apache.commons.compress.harmony.unpack200.NewAttributeBands.Replication#readBands(InputStream,int)"
    ],
    "org.apache.commons.compress.harmony.pack200.NewAttribute.PassAttribute#read(ClassReader,int,int,char[],int,Label[])": ["org.apache.commons.compress.harmony.pack200.Segment.PassException.<init>()"],
    "org.apache.commons.compress.compressors.lz4.BlockLZ4CompressorOutputStream#finish()": ["org.apache.commons.compress.compressors.lz77support.LZ77Compressor#finish()"],
    "org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream#write(byte[],int,int)": [
        "org.apache.commons.compress.archivers.sevenz.Coders.DeflateDecoder.DeflateDecoderOutputStream#write(byte[],int,int)",
        "org.apache.commons.compress.utils.FixedLengthBlockOutputStream#write(byte[],int,int)",
        "org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorOutputStream#write(byte[],int,int)",
        "org.apache.commons.compress.archivers.cpio.CpioArchiveEntry#getFormat()",
        "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream#write(byte[],int,int)",
        "org.apache.commons.compress.archivers.zip.FileRandomAccessOutputStream#write(byte[],int,int)",
        "org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream#write(byte[],int,int)",
        "org.apache.commons.compress.archivers.zip.ZipSplitOutputStream#write(byte[],int,int)",
        "org.apache.commons.compress.compressors.xz.XZCompressorOutputStream#write(byte[],int,int)",
        "org.apache.commons.compress.compressors.deflate.DeflateCompressorOutputStream#write(byte[],int,int)",
        "org.apache.commons.compress.archivers.ArchiveOutputStream#count(int)",
        "org.apache.commons.compress.archivers.zip.SeekableChannelRandomAccessOutputStream#write(byte[],int,int)",
        "org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream#write(byte[],int,int)",
        "org.apache.commons.compress.archivers.ar.ArArchiveOutputStream#write(byte[],int,int)",
        "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream#write(byte[],int,int)",
        "org.apache.commons.compress.compressors.lzma.LZMACompressorOutputStream#write(byte[],int,int)",
        "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.OutputStreamWrapper#write(byte[],int,int)",
        "org.apache.commons.compress.compressors.zstandard.ZstdCompressorOutputStream#write(byte[],int,int)",
        "org.apache.commons.compress.archivers.sevenz.AES256SHA256Decoder.AES256SHA256DecoderOutputStream#write(byte[],int,int)",
        "org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorOutputStream#write(byte[],int,int)",
        "org.apache.commons.compress.archivers.cpio.CpioArchiveEntry#getSize()",
        "org.apache.commons.compress.archivers.cpio.CpioConstants.<staticinit>()",
        "org.apache.commons.compress.compressors.lz4.BlockLZ4CompressorOutputStream#write(byte[],int,int)",
        "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream#write(byte[],int,int)",
        "org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream#ensureOpen()",
        "org.apache.commons.compress.compressors.snappy.SnappyCompressorOutputStream#write(byte[],int,int)",
        "org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream#write(byte[],int,int)"
    ],
    "org.apache.commons.compress.archivers.dump.TapeInputStream#close()": [
        "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream#close()",
        "org.apache.commons.compress.archivers.sevenz.BoundedSeekableByteChannelInputStream#close()",
        "org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStream#close()",
        "org.apache.commons.compress.compressors.brotli.BrotliCompressorInputStream#close()",
        "org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream#close()",
        "org.apache.commons.compress.compressors.deflate64.Deflate64CompressorInputStream#close()",
        "org.apache.commons.compress.compressors.deflate.DeflateCompressorInputStream#close()",
        "org.apache.commons.compress.archivers.sevenz.AES256SHA256Decoder.AES256SHA256DecoderInputStream#close()",
        "org.apache.commons.compress.compressors.xz.XZCompressorInputStream#close()",
        "org.apache.commons.compress.archivers.zip.ExplodingInputStream#close()",
        "org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream#close()",
        "org.apache.commons.compress.compressors.lzw.LZWInputStream#close()",
        "org.apache.commons.compress.compressors.lzma.LZMACompressorInputStream#close()",
        "org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorInputStream#close()",
        "org.apache.commons.compress.compressors.zstandard.ZstdCompressorInputStream#close()",
        "org.apache.commons.compress.compressors.lz77support.AbstractLZ77CompressorInputStream#close()"
    ],
    "org.apache.commons.compress.harmony.unpack200.bytecode.CodeAttribute#getNestedClassFileEntries()": [
        "org.apache.commons.compress.harmony.unpack200.bytecode.Attribute#getAttributeName()",
        "org.apache.commons.compress.harmony.unpack200.bytecode.ExceptionTableEntry#getCatchType()",
        "org.apache.commons.compress.harmony.unpack200.bytecode.ClassFileEntry.<staticinit>()"
    ],
    "org.apache.commons.compress.archivers.zip.ZipFile#getUnixSymlink(ZipArchiveEntry)": [
        "org.apache.commons.compress.archivers.zip.ZipArchiveEntry#isUnixSymlink()",
        "org.apache.commons.compress.archivers.zip.NioZipEncoding#decode(byte[])",
        "org.apache.commons.compress.archivers.zip.ZipFile#getInputStream(ZipArchiveEntry)",
        "org.apache.commons.compress.archivers.tar.TarUtils$ZipEncoding$1#decode(byte[])"
    ],
    "org.apache.commons.compress.harmony.pack200.Segment.SegmentFieldVisitor#visitAnnotation(String,boolean)": [
        "org.apache.commons.compress.harmony.pack200.Segment.SegmentAnnotationVisitor#SegmentAnnotationVisitor(int,String,boolean)",
        "org.apache.commons.compress.harmony.pack200.MetadataBandGroup.<staticinit>()"
    ],
    "org.apache.commons.compress.archivers.zip.ZipFile.NameAndComment#NameAndComment(byte[],byte[])": ["org.apache.commons.compress.archivers.zip.ZipFile.NameAndComment.<init>()"],
    "org.apache.commons.compress.harmony.unpack200.CpBands#CpBands(Segment)": [
        "org.apache.commons.compress.harmony.unpack200.BandSet#BandSet(Segment)",
        "org.apache.commons.compress.harmony.unpack200.CpBands.<init>()"
    ],
    "org.apache.commons.compress.archivers.zip.ZipFile#populateFromCentralDirectory()": [
        "org.apache.commons.compress.utils.IOUtils.readFully(ReadableByteChannel,ByteBuffer)",
        "org.apache.commons.compress.archivers.zip.ZipLong.getValue(byte[])",
        "org.apache.commons.compress.archivers.zip.ZipFile.<staticinit>()",
        "org.apache.commons.compress.utils.SeekableInMemoryByteChannel#position()",
        "org.apache.commons.compress.utils.MultiReadOnlySeekableByteChannel#position()",
        "org.apache.commons.compress.archivers.zip.ZipFile#positionAtCentralDirectory()",
        "org.apache.commons.compress.archivers.zip.ZipFile#startsWithLocalFileHeader()",
        "org.apache.commons.compress.archivers.zip.ZipFile#readCentralDirectoryEntry(Map<ZipArchiveEntry, NameAndComment>)"
    ],
    "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.<init>()": [
        "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.TapeSegmentHeader.<init>()",
        "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.TYPE.<staticinit>()"
    ],
    "org.apache.commons.compress.archivers.sevenz.SevenZFile.ArchiveStatistics#estimateSize()": [
        "org.apache.commons.compress.archivers.sevenz.SevenZFile.ArchiveStatistics#coderSize()",
        "org.apache.commons.compress.archivers.sevenz.SevenZFile.ArchiveStatistics#streamMapSize()",
        "org.apache.commons.compress.archivers.sevenz.SevenZFile.ArchiveStatistics#folderSize()",
        "org.apache.commons.compress.archivers.sevenz.SevenZFile.ArchiveStatistics#entrySize()",
        "org.apache.commons.compress.archivers.sevenz.SevenZFile.ArchiveStatistics#bindPairSize()"
    ],
    "org.apache.commons.compress.harmony.unpack200.bytecode.AnnotationsAttribute.Annotation#writeBody(DataOutputStream)": ["org.apache.commons.compress.harmony.unpack200.bytecode.AnnotationsAttribute.ElementValue#writeBody(DataOutputStream)"],
    "org.apache.commons.compress.harmony.pack200.NewAttributeBands.Reference#Reference(String)": [
        "org.apache.commons.compress.harmony.pack200.NewAttributeBands.Reference.<init>()",
        "org.apache.commons.compress.harmony.pack200.NewAttributeBands.LayoutElement.<init>()"
    ],
    "org.apache.commons.compress.compressors.CompressorStreamFactory.detect(InputStream,Set<String>)": [
        "org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream.matches(byte[],int)",
        "org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream#reset()",
        "org.apache.commons.compress.compressors.CompressorStreamFactory.<staticinit>()",
        "org.apache.commons.compress.compressors.brotli.BrotliCompressorInputStream#mark(int)",
        "org.apache.commons.compress.compressors.lzma.LZMAUtils.matches(byte[],int)",
        "org.apache.commons.compress.compressors.brotli.BrotliCompressorInputStream#reset()",
        "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.matches(byte[],int)",
        "org.apache.commons.compress.compressors.deflate.DeflateCompressorInputStream.matches(byte[],int)",
        "org.apache.commons.compress.compressors.brotli.BrotliCompressorInputStream#markSupported()",
        "org.apache.commons.compress.compressors.zstandard.ZstdCompressorInputStream#reset()",
        "org.apache.commons.compress.compressors.zstandard.ZstdCompressorInputStream#mark(int)",
        "org.apache.commons.compress.compressors.xz.XZUtils.matches(byte[],int)",
        "org.apache.commons.compress.compressors.zstandard.ZstdCompressorInputStream#markSupported()",
        "org.apache.commons.compress.utils.IOUtils.readFully(InputStream,byte[])",
        "org.apache.commons.compress.compressors.zstandard.ZstdUtils.matches(byte[],int)",
        "org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream#markSupported()",
        "org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorInputStream.matches(byte[],int)",
        "org.apache.commons.compress.compressors.CompressorException#CompressorException(String,Throwable)",
        "org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream.matches(byte[],int)",
        "org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream#mark(int)",
        "org.apache.commons.compress.compressors.z.ZCompressorInputStream.matches(byte[],int)",
        "org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStream.matches(byte[],int)",
        "org.apache.commons.compress.compressors.CompressorException#CompressorException(String)"
    ],
    "org.apache.commons.compress.archivers.sevenz.SevenZFile.ArchiveStatistics#toString()": ["org.apache.commons.compress.archivers.sevenz.SevenZFile.ArchiveStatistics#estimateSize()"],
    "org.apache.commons.compress.harmony.pack200.CPClass#getIndexInCpUtf8()": ["org.apache.commons.compress.harmony.pack200.ConstantPoolEntry#getIndex()"],
    "org.apache.commons.compress.archivers.zip.ExtraFieldUtils.parse(byte[],boolean,UnparseableExtraField)": [
        "org.apache.commons.compress.archivers.zip.ExtraFieldUtils.parse(byte[],boolean,ExtraFieldParsingBehavior)",
        "org.apache.commons.compress.archivers.zip.ExtraFieldUtils.parse(byte[],boolean,UnparseableExtraField)$ExtraFieldParsingBehavior$1.<init>()"
    ],
    "org.apache.commons.compress.archivers.dump.DumpArchiveEntry#DumpArchiveEntry(String,String)": [
        "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.<init>()",
        "org.apache.commons.compress.archivers.dump.DumpArchiveEntry#setName(String)"
    ],
    "org.apache.commons.compress.archivers.zip.ZipSplitReadOnlySeekableByteChannel.forPaths(Path,Iterable<Path>)": ["org.apache.commons.compress.archivers.zip.ZipSplitReadOnlySeekableByteChannel.<staticinit>()"],
    "org.apache.commons.compress.archivers.zip.X000A_NTFS#getHeaderId()": ["org.apache.commons.compress.archivers.zip.X000A_NTFS.<staticinit>()"],
    "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile#putArchiveEntry(ArchiveEntry)": ["org.apache.commons.compress.archivers.sevenz.SevenZOutputFile#putArchiveEntry(SevenZArchiveEntry)"],
    "org.apache.commons.compress.archivers.zip.ZipShort#equals(Object)": ["org.apache.commons.compress.archivers.zip.ZipShort#getValue()"],
    "org.apache.commons.compress.archivers.sevenz.SevenZFileOptions.Builder.<init>()": ["org.apache.commons.compress.archivers.sevenz.SevenZFile.Builder.<staticinit>()"],
    "org.apache.commons.compress.harmony.pack200.PackingOptions.<init>()": ["org.apache.commons.compress.harmony.pack200.PackingOptions.<staticinit>()"],
    "org.apache.commons.compress.archivers.tar.TarArchiveEntry#isSparse()": [
        "org.apache.commons.compress.archivers.tar.TarArchiveEntry#isStarSparse()",
        "org.apache.commons.compress.archivers.tar.TarArchiveEntry#isGNUSparse()"
    ],
    "org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream#getInputStream()": ["org.apache.commons.compress.compressors.pack200.AbstractStreamBridge#getInputStream()"],
    "org.apache.commons.compress.archivers.ArchiveStreamFactory#createArchiveOutputStream(String,OutputStream,String)": [
        "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream#TarArchiveOutputStream(OutputStream)",
        "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream#TarArchiveOutputStream(OutputStream,String)",
        "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream#setEncoding(String)",
        "org.apache.commons.compress.archivers.jar.JarArchiveOutputStream#JarArchiveOutputStream(OutputStream)",
        "org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream#CpioArchiveOutputStream(OutputStream)",
        "org.apache.commons.compress.archivers.jar.JarArchiveOutputStream#JarArchiveOutputStream(OutputStream,String)",
        "org.apache.commons.compress.archivers.StreamingNotSupportedException#StreamingNotSupportedException(String)",
        "org.apache.commons.compress.archivers.ArchiveException#ArchiveException(String)",
        "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream#ZipArchiveOutputStream(OutputStream)",
        "org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream#CpioArchiveOutputStream(OutputStream,String)",
        "org.apache.commons.compress.archivers.ArchiveStreamFactory#getArchiveOutputStreamProviders()",
        "org.apache.commons.compress.archivers.ArchiveStreamFactory.<staticinit>()",
        "org.apache.commons.compress.archivers.ArchiveStreamFactory.toKey(String)",
        "org.apache.commons.compress.archivers.ar.ArArchiveOutputStream#ArArchiveOutputStream(OutputStream)",
        "org.apache.commons.compress.archivers.ArchiveStreamFactory#createArchiveOutputStream(String,OutputStream,String)"
    ],
    "org.apache.commons.compress.harmony.unpack200.BandSet#parseCPLongReferences(String,InputStream,BHSDCodec,int)": [
        "org.apache.commons.compress.harmony.unpack200.CpBands#getCpLong()",
        "org.apache.commons.compress.harmony.unpack200.Segment#getCpBands()",
        "org.apache.commons.compress.harmony.pack200.Pack200Exception#Pack200Exception(String)",
        "org.apache.commons.compress.harmony.unpack200.BandSet#decodeBandInt(String,InputStream,BHSDCodec,int)",
        "org.apache.commons.compress.harmony.unpack200.CpBands#cpLongValue(int)"
    ],
    "org.apache.commons.compress.archivers.sevenz.AES256SHA256Decoder.AES256SHA256DecoderOutputStream#write(int)": ["org.apache.commons.compress.archivers.sevenz.AES256SHA256Decoder.AES256SHA256DecoderOutputStream#flushBuffer()"],
    "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream#supportsCompressedSizeFor(ZipArchiveEntry)": [
        "org.apache.commons.compress.archivers.zip.ZipArchiveEntry#getGeneralPurposeBit()",
        "org.apache.commons.compress.archivers.zip.ZipArchiveEntry#getMethod()",
        "org.apache.commons.compress.archivers.zip.ZipMethod#getCode()",
        "org.apache.commons.compress.archivers.zip.ZipMethod.<staticinit>()",
        "org.apache.commons.compress.archivers.zip.GeneralPurposeBit#usesDataDescriptor()",
        "org.apache.commons.compress.archivers.ArchiveEntry.<staticinit>()"
    ],
    "org.apache.commons.compress.archivers.sevenz.SevenZFile#buildDecoderStack(Folder,long,int,SevenZArchiveEntry)": [
        "org.apache.commons.compress.archivers.sevenz.Folder#getUnpackSize()",
        "org.apache.commons.compress.archivers.sevenz.SevenZMethod.byId(byte[])",
        "org.apache.commons.compress.archivers.sevenz.Folder#getUnpackSizeForCoder(Coder)",
        "org.apache.commons.compress.archivers.sevenz.SevenZFile#buildDecoderStack(Folder,long,int,SevenZArchiveEntry)$FilterInputStream$1.<init>()",
        "org.apache.commons.compress.archivers.sevenz.SevenZMethodConfiguration#SevenZMethodConfiguration(SevenZMethod,Object)",
        "org.apache.commons.compress.archivers.sevenz.Coders.addDecoder(String,InputStream,long,Coder,byte[],int)",
        "org.apache.commons.compress.archivers.sevenz.LZMA2Decoder#getOptionsFromCoder(Coder,InputStream)",
        "org.apache.commons.compress.archivers.sevenz.BoundedSeekableByteChannelInputStream#BoundedSeekableByteChannelInputStream(SeekableByteChannel,long)",
        "org.apache.commons.compress.archivers.sevenz.LZMADecoder#getOptionsFromCoder(Coder,InputStream)",
        "org.apache.commons.compress.utils.SeekableInMemoryByteChannel#position(long)",
        "org.apache.commons.compress.utils.CRC32VerifyingInputStream#CRC32VerifyingInputStream(InputStream,long,long)",
        "org.apache.commons.compress.archivers.sevenz.Coders.findByMethod(SevenZMethod)",
        "org.apache.commons.compress.archivers.sevenz.DeltaDecoder#getOptionsFromCoder(Coder,InputStream)",
        "org.apache.commons.compress.archivers.sevenz.Folder#getOrderedCoders()",
        "org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry#setContentMethods(Iterable<? extends SevenZMethodConfiguration>)",
        "org.apache.commons.compress.utils.MultiReadOnlySeekableByteChannel#position(long)",
        "org.apache.commons.compress.archivers.sevenz.AbstractCoder#getOptionsFromCoder(Coder,InputStream)"
    ],
    "org.apache.commons.compress.harmony.unpack200.bytecode.LocalVariableTypeTableAttribute#getNestedClassFileEntries()": [
        "org.apache.commons.compress.harmony.unpack200.bytecode.Attribute#getAttributeName()",
        "org.apache.commons.compress.harmony.unpack200.bytecode.ClassFileEntry.<staticinit>()"
    ],
    "org.apache.commons.compress.archivers.zip.ZipArchiveEntry#updateTimeFromExtendedTimestampField()": [
        "org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp#getCreateFileTime()",
        "org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp#getModifyFileTime()",
        "org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp.<staticinit>()",
        "org.apache.commons.compress.archivers.zip.ZipArchiveEntry#internalSetLastModifiedTime(FileTime)",
        "org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp#isBit1_accessTimePresent()",
        "org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp#isBit0_modifyTimePresent()",
        "org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp#getAccessFileTime()",
        "org.apache.commons.compress.archivers.zip.ZipArchiveEntry#getExtraField(ZipShort)",
        "org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp#isBit2_createTimePresent()"
    ],
    "org.apache.commons.compress.archivers.zip.UnshrinkingInputStream#UnshrinkingInputStream(InputStream)": [
        "org.apache.commons.compress.archivers.zip.UnshrinkingInputStream.<staticinit>()",
        "org.apache.commons.compress.compressors.lzw.LZWInputStream#getClearCode()",
        "org.apache.commons.compress.compressors.lzw.LZWInputStream.<staticinit>()",
        "org.apache.commons.compress.compressors.lzw.LZWInputStream#initializeTables(int)",
        "org.apache.commons.compress.compressors.lzw.LZWInputStream#setTableSize(int)",
        "org.apache.commons.compress.compressors.lzw.LZWInputStream#getPrefixesLength()",
        "org.apache.commons.compress.compressors.lzw.LZWInputStream#LZWInputStream(InputStream,ByteOrder)",
        "org.apache.commons.compress.archivers.zip.UnshrinkingInputStream.<init>()",
        "org.apache.commons.compress.compressors.lzw.LZWInputStream#setClearCode(int)"
    ],
    "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream#failForBigNumber(String,long,long)": ["org.apache.commons.compress.archivers.tar.TarArchiveOutputStream#failForBigNumber(String,long,long,String)"],
    "org.apache.commons.compress.harmony.unpack200.bytecode.RuntimeVisibleorInvisibleParameterAnnotationsAttribute.ParameterAnnotation#writeBody(DataOutputStream)": ["org.apache.commons.compress.harmony.unpack200.bytecode.AnnotationsAttribute.Annotation#writeBody(DataOutputStream)"],
    "org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream#readAsciiLong(int,int)": [
        "org.apache.commons.compress.utils.ParsingUtils.parseLongValue(String,int)",
        "org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream#readRange(int)",
        "org.apache.commons.compress.utils.ArchiveUtils.toAsciiString(byte[])"
    ],
    "org.apache.commons.compress.harmony.pack200.ClassBands#createNewAttributeBands()": [
        "org.apache.commons.compress.harmony.pack200.NewAttributeBands#NewAttributeBands(int,CpBands,SegmentHeader,AttributeDefinition)",
        "org.apache.commons.compress.harmony.pack200.AttributeDefinitionBands#getClassAttributeLayouts()",
        "org.apache.commons.compress.harmony.pack200.AttributeDefinitionBands#getCodeAttributeLayouts()",
        "org.apache.commons.compress.harmony.pack200.Segment#getSegmentHeader()",
        "org.apache.commons.compress.harmony.pack200.AttributeDefinitionBands#getFieldAttributeLayouts()",
        "org.apache.commons.compress.harmony.pack200.AttributeDefinitionBands#getMethodAttributeLayouts()"
    ],
    "org.apache.commons.compress.archivers.zip.StreamCompressor.create(SeekableByteChannel,Deflater)": ["org.apache.commons.compress.archivers.zip.StreamCompressor.SeekableByteChannelCompressor#SeekableByteChannelCompressor(Deflater,SeekableByteChannel)"],
    "org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStream#readCrc()": [
        "org.apache.commons.compress.utils.IOUtils.readFully(InputStream,byte[])",
        "org.apache.commons.compress.compressors.CompressorInputStream#count(int)",
        "org.apache.commons.compress.utils.ByteUtils.fromLittleEndian(byte[])"
    ],
    "org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorOutputStream#FramedSnappyCompressorOutputStream(OutputStream)": [
        "org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorOutputStream#FramedSnappyCompressorOutputStream(OutputStream,Parameters)",
        "org.apache.commons.compress.compressors.lz77support.Parameters.Builder#build()",
        "org.apache.commons.compress.compressors.snappy.SnappyCompressorOutputStream.createParameterBuilder(int)",
        "org.apache.commons.compress.compressors.snappy.SnappyCompressorInputStream.<staticinit>()"
    ],
    "org.apache.commons.compress.archivers.jar.JarArchiveInputStream#JarArchiveInputStream(InputStream,String)": [
        "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream#ZipArchiveInputStream(InputStream,String)",
        "org.apache.commons.compress.archivers.jar.JarArchiveInputStream.<init>()"
    ],
    "org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp#setAccessJavaTime(Date)": [
        "org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp#setAccessTime(ZipLong)",
        "org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp.dateToZipLong(Date)"
    ],
    "org.apache.commons.compress.archivers.sevenz.BoundedSeekableByteChannelInputStream#BoundedSeekableByteChannelInputStream(SeekableByteChannel,long)": [
        "org.apache.commons.compress.archivers.sevenz.BoundedSeekableByteChannelInputStream.<init>()",
        "org.apache.commons.compress.archivers.sevenz.BoundedSeekableByteChannelInputStream.<staticinit>()"
    ],
    "org.apache.commons.compress.utils.ServiceLoaderIterator#ServiceLoaderIterator(Class<E>,ClassLoader)": ["org.apache.commons.compress.utils.ServiceLoaderIterator.<init>()"],
    "org.apache.commons.compress.archivers.zip.ZipUtil.<staticinit>()": ["org.apache.commons.compress.archivers.zip.ZipUtil.dosToJavaTime(long)"],
    "org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp#setCreateFileTime(FileTime)": [
        "org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp.fileTimeToZipLong(FileTime)",
        "org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp#setCreateTime(ZipLong)"
    ],
    "org.apache.commons.compress.utils.FixedLengthBlockOutputStream#flushBlock()": [
        "org.apache.commons.compress.utils.FixedLengthBlockOutputStream#padBlock()",
        "org.apache.commons.compress.utils.FixedLengthBlockOutputStream#writeBlock()"
    ],
    "org.apache.commons.compress.archivers.zip.X7875_NewUnix#getCentralDirectoryLength()": ["org.apache.commons.compress.archivers.zip.X7875_NewUnix.<staticinit>()"],
    "org.apache.commons.compress.archivers.sevenz.SevenZMethod#SevenZMethod(byte[])": ["org.apache.commons.compress.archivers.sevenz.SevenZMethod.<init>()"],
    "org.apache.commons.compress.harmony.unpack200.bytecode.CodeAttribute#writeBody(DataOutputStream)": [
        "org.apache.commons.compress.harmony.unpack200.bytecode.ExceptionTableEntry#write(DataOutputStream)",
        "org.apache.commons.compress.harmony.unpack200.bytecode.ClassFileEntry#write(DataOutputStream)"
    ],
    "org.apache.commons.compress.harmony.pack200.BHSDCodec#encode(int)": ["org.apache.commons.compress.harmony.pack200.BHSDCodec#encode(int,int)"],
    "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.UnicodeExtraFieldPolicy#UnicodeExtraFieldPolicy(String)": ["org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.UnicodeExtraFieldPolicy.<init>()"],
    "org.apache.commons.compress.compressors.pack200.TempFileCachingStreamBridge#createInputStream()": ["org.apache.commons.compress.compressors.pack200.TempFileCachingStreamBridge#createInputStream()$FilterInputStream$1.<init>()"],
    "org.apache.commons.compress.archivers.sevenz.Coders.BZIP2Decoder#encode(OutputStream,Object)": [
        "org.apache.commons.compress.archivers.sevenz.AbstractCoder.toInt(Object,int)",
        "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream#BZip2CompressorOutputStream(OutputStream,int)",
        "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.<staticinit>()"
    ],
    "org.apache.commons.compress.harmony.pack200.Segment.SegmentFieldVisitor#visitAttribute(Attribute)": [
        "org.apache.commons.compress.harmony.pack200.PackingOptions#getUnknownFieldAttributeAction(String)",
        "org.apache.commons.compress.harmony.pack200.Segment#passCurrentClass()",
        "org.apache.commons.compress.harmony.pack200.PackingOptions#getUnknownAttributeAction()",
        "org.apache.commons.compress.harmony.pack200.PackingOptions.<staticinit>()",
        "org.apache.commons.compress.harmony.pack200.NewAttribute#isUnknown()",
        "org.apache.commons.compress.harmony.pack200.AttributeDefinitionBands.<staticinit>()",
        "org.apache.commons.compress.harmony.pack200.ClassBands#addFieldAttribute(NewAttribute)",
        "org.apache.commons.compress.harmony.pack200.NewAttribute#isUnknown(int)"
    ],
    "org.apache.commons.compress.harmony.unpack200.bytecode.forms.StringRefForm#StringRefForm(int,String,int[])": [
        "org.apache.commons.compress.harmony.unpack200.bytecode.forms.StringRefForm.<init>()",
        "org.apache.commons.compress.harmony.unpack200.bytecode.forms.SingleByteReferenceForm#SingleByteReferenceForm(int,String,int[])"
    ],
    "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream#setEncoding(String)": ["org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream#setEncoding(String)"],
    "org.apache.commons.compress.harmony.pack200.ClassBands#doBciRenumbering(IntList,Map<Label, Integer>)": [
        "org.apache.commons.compress.harmony.pack200.ClassBands#renumberBci(List<Integer>,IntList,Map<Label, Integer>)",
        "org.apache.commons.compress.harmony.pack200.ClassBands#renumberDoubleOffsetBci(List<Integer>,List<Integer>,List<Object>,IntList,Map<Label, Integer>)",
        "org.apache.commons.compress.harmony.pack200.ClassBands#renumberOffsetBci(List<Integer>,List<Integer>,IntList,Map<Label, Integer>)",
        "org.apache.commons.compress.harmony.pack200.NewAttributeBands#renumberBci(IntList,Map<Label, Integer>)"
    ],
    "org.apache.commons.compress.archivers.zip.X0014_X509Certificates.<staticinit>()": ["org.apache.commons.compress.archivers.zip.ZipShort#ZipShort(int)"],
    "org.apache.commons.compress.compressors.lz4.BlockLZ4CompressorOutputStream#BlockLZ4CompressorOutputStream(OutputStream)": [
        "org.apache.commons.compress.compressors.lz4.BlockLZ4CompressorOutputStream#BlockLZ4CompressorOutputStream(OutputStream,Parameters)",
        "org.apache.commons.compress.compressors.lz4.BlockLZ4CompressorOutputStream.createParameterBuilder()",
        "org.apache.commons.compress.compressors.lz77support.Parameters.Builder#build()"
    ],
    "org.apache.commons.compress.compressors.bzip2.BZip2Utils.getUncompressedFilename(String)": [
        "org.apache.commons.compress.compressors.bzip2.BZip2Utils.<staticinit>()",
        "org.apache.commons.compress.compressors.FileNameUtil#getUncompressedFileName(String)"
    ],
    "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream#close()": [
        "org.apache.commons.compress.archivers.zip.Zip64Mode.<staticinit>()",
        "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream#destroy()",
        "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream#finish()"
    ],
    "org.apache.commons.compress.archivers.zip.ZipFile.Entry#equals(Object)": [
        "org.apache.commons.compress.archivers.zip.ZipArchiveEntry#getDiskNumberStart()",
        "org.apache.commons.compress.archivers.zip.ZipArchiveEntry#getDataOffset()",
        "org.apache.commons.compress.archivers.zip.ZipArchiveEntry#getLocalHeaderOffset()",
        "org.apache.commons.compress.archivers.zip.ZipArchiveEntry#equals(Object)"
    ],
    "org.apache.commons.compress.compressors.bzip2.BlockSort.<init>()": ["org.apache.commons.compress.compressors.bzip2.BlockSort.<staticinit>()"],
    "org.apache.commons.compress.harmony.pack200.ClassBands#addAnnotationDefault(List<String>,List<String>,List<Object>,List<Integer>,List<String>,List<String>,List<Integer>)": ["org.apache.commons.compress.harmony.pack200.MetadataBandGroup#addAnnotation(String,List<String>,List<String>,List<Object>,List<Integer>,List<String>,List<String>,List<Integer>)"],
    "org.apache.commons.compress.archivers.dump.DumpArchiveEntry#getHeaderCount()": ["org.apache.commons.compress.archivers.dump.DumpArchiveEntry.TapeSegmentHeader#getCount()"],
    "org.apache.commons.compress.archivers.sevenz.SevenZFile.getChar(ByteBuffer)": ["org.apache.commons.compress.archivers.sevenz.SevenZFile.checkEndOfFile(ByteBuffer,int)"],
    "org.apache.commons.compress.harmony.unpack200.bytecode.CPClass#CPClass(CPUTF8,int)": [
        "org.apache.commons.compress.harmony.unpack200.bytecode.CPClass.<init>()",
        "org.apache.commons.compress.harmony.unpack200.bytecode.ConstantPoolEntry#ConstantPoolEntry(byte,int)",
        "org.apache.commons.compress.harmony.unpack200.bytecode.ConstantPoolEntry.<staticinit>()"
    ],
    "org.apache.commons.compress.compressors.deflate64.HuffmanDecoder#getBytesRead()": ["org.apache.commons.compress.utils.BitInputStream#getBytesRead()"],
    "org.apache.commons.compress.harmony.pack200.ClassBands#addCodeAttribute(NewAttribute)": [
        "org.apache.commons.compress.harmony.pack200.NewAttributeBands#addAttribute(NewAttribute)",
        "org.apache.commons.compress.harmony.pack200.NewAttributeBands#getFlagIndex()",
        "org.apache.commons.compress.harmony.pack200.NewAttributeBands#getAttributeName()"
    ],
    "org.apache.commons.compress.compressors.snappy.SnappyCompressorOutputStream#writeBackReferenceWithTwoOffsetBytes(int,int)": [
        "org.apache.commons.compress.compressors.snappy.SnappyCompressorOutputStream#writeBackReferenceWithLittleEndianOffset(int,int,int,int)",
        "org.apache.commons.compress.compressors.snappy.SnappyCompressorOutputStream.<staticinit>()"
    ],
    "org.apache.commons.compress.archivers.sevenz.SevenZFileOptions.<staticinit>()": [
        "org.apache.commons.compress.archivers.sevenz.SevenZFile.Builder.<staticinit>()",
        "org.apache.commons.compress.archivers.sevenz.SevenZFileOptions#SevenZFileOptions(int,boolean,boolean)"
    ],
    "org.apache.commons.compress.archivers.zip.ZipSplitReadOnlySeekableByteChannel.<init>()": ["org.apache.commons.compress.archivers.zip.ZipSplitReadOnlySeekableByteChannel.<staticinit>()"],
    "org.apache.commons.compress.archivers.zip.ZipArchiveEntry#getExtraField(ZipShort)": [
        "org.apache.commons.compress.archivers.zip.X7875_NewUnix#getHeaderId()",
        "org.apache.commons.compress.archivers.zip.JarMarker#getHeaderId()",
        "org.apache.commons.compress.archivers.zip.PKWareExtraHeader#getHeaderId()",
        "org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField#getHeaderId()",
        "org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp#getHeaderId()",
        "org.apache.commons.compress.archivers.zip.X000A_NTFS#getHeaderId()",
        "org.apache.commons.compress.archivers.zip.UnparseableExtraFieldData#getHeaderId()",
        "org.apache.commons.compress.archivers.zip.ResourceAlignmentExtraField#getHeaderId()",
        "org.apache.commons.compress.archivers.zip.ZipShort#equals(Object)",
        "org.apache.commons.compress.archivers.zip.AsiExtraField#getHeaderId()",
        "org.apache.commons.compress.archivers.zip.UnicodePathExtraField#getHeaderId()",
        "org.apache.commons.compress.archivers.zip.UnicodeCommentExtraField#getHeaderId()",
        "org.apache.commons.compress.archivers.zip.UnrecognizedExtraField#getHeaderId()"
    ],
    "org.apache.commons.compress.archivers.sevenz.Coders.BZIP2Decoder#BZIP2Decoder()": [
        "org.apache.commons.compress.archivers.sevenz.Coders.BZIP2Decoder.<init>()",
        "org.apache.commons.compress.archivers.sevenz.AbstractCoder#AbstractCoder(Class<?>[]...)"
    ],
    "org.apache.commons.compress.compressors.xz.XZCompressorOutputStream#XZCompressorOutputStream(OutputStream)": [
        "org.apache.commons.compress.compressors.CompressorOutputStream.<init>()",
        "org.apache.commons.compress.compressors.xz.XZCompressorOutputStream.<init>()"
    ],
    "org.apache.commons.compress.harmony.pack200.ClassBands#addAnnotation(int,String,boolean,List<String>,List<String>,List<Object>,List<Integer>,List<String>,List<String>,List<Integer>)": [
        "org.apache.commons.compress.harmony.pack200.MetadataBandGroup#newEntryInAnnoN()",
        "org.apache.commons.compress.harmony.pack200.MetadataBandGroup#addAnnotation(String,List<String>,List<String>,List<Object>,List<Integer>,List<String>,List<String>,List<Integer>)",
        "org.apache.commons.compress.harmony.pack200.MetadataBandGroup#incrementAnnoN()",
        "org.apache.commons.compress.harmony.pack200.MetadataBandGroup.<staticinit>()"
    ],
    "org.apache.commons.compress.archivers.tar.TarArchiveInputStream#isDirectory()": ["org.apache.commons.compress.archivers.tar.TarArchiveEntry#isDirectory()"],
    "org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry#setCreationDate(Date)": ["org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry#setCreationTime(FileTime)"],
    "org.apache.commons.compress.harmony.unpack200.SegmentUtils.countMatches(long[][],IMatcher)": ["org.apache.commons.compress.harmony.unpack200.SegmentUtils.countMatches(long[],IMatcher)"],
    "org.apache.commons.compress.compressors.brotli.BrotliCompressorInputStream#read(byte[],int,int)": ["org.apache.commons.compress.compressors.CompressorInputStream#count(int)"],
    "org.apache.commons.compress.archivers.dump.DumpArchiveException#DumpArchiveException(Throwable)": ["org.apache.commons.compress.archivers.dump.DumpArchiveException.<init>()"],
    "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream#copyFromZipInputStream(InputStream)": [
        "org.apache.commons.compress.compressors.zstandard.ZstdCompressorInputStream#read(byte[])",
        "org.apache.commons.compress.archivers.ArchiveOutputStream#count(int)",
        "org.apache.commons.compress.archivers.zip.StreamCompressor#writeCounted(byte[],int,int)",
        "org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream#read(byte[])",
        "org.apache.commons.compress.compressors.brotli.BrotliCompressorInputStream#read(byte[])",
        "org.apache.commons.compress.archivers.zip.ZipUtil.checkRequestedFeatures(ZipArchiveEntry)"
    ],
    "org.apache.commons.compress.harmony.unpack200.MetadataBandGroup.setRvaAttributeName(CPUTF8)": ["org.apache.commons.compress.harmony.unpack200.MetadataBandGroup.<staticinit>()"],
    "org.apache.commons.compress.compressors.deflate64.HuffmanDecoder.UncompressedState#read(byte[],int,int)": [
        "org.apache.commons.compress.compressors.zstandard.ZstdCompressorInputStream#read(byte[],int,int)",
        "org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorInputStream#read(byte[],int,int)",
        "org.apache.commons.compress.compressors.deflate64.HuffmanDecoder.DecodingMemory#add(byte)",
        "org.apache.commons.compress.archivers.sevenz.BoundedSeekableByteChannelInputStream#read(byte[],int,int)",
        "org.apache.commons.compress.compressors.deflate64.HuffmanDecoder.DecodingMemory#add(byte[],int,int)",
        "org.apache.commons.compress.compressors.deflate64.Deflate64CompressorInputStream#read(byte[],int,int)",
        "org.apache.commons.compress.compressors.brotli.BrotliCompressorInputStream#read(byte[],int,int)",
        "org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream#read(byte[],int,int)",
        "org.apache.commons.compress.archivers.sevenz.AES256SHA256Decoder.AES256SHA256DecoderInputStream#read(byte[],int,int)",
        "org.apache.commons.compress.compressors.lzma.LZMACompressorInputStream#read(byte[],int,int)",
        "org.apache.commons.compress.compressors.lz4.BlockLZ4CompressorInputStream#read(byte[],int,int)",
        "org.apache.commons.compress.compressors.snappy.SnappyCompressorInputStream#read(byte[],int,int)",
        "org.apache.commons.compress.compressors.xz.XZCompressorInputStream#read(byte[],int,int)",
        "org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream#read(byte[],int,int)",
        "org.apache.commons.compress.utils.BoundedArchiveInputStream#read(byte[],int,int)",
        "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream#read(byte[],int,int)",
        "org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStream#read(byte[],int,int)",
        "org.apache.commons.compress.compressors.lzw.LZWInputStream#read(byte[],int,int)",
        "org.apache.commons.compress.compressors.deflate64.HuffmanDecoder#readBits(int)",
        "org.apache.commons.compress.utils.BitInputStream#bitsCached()",
        "org.apache.commons.compress.compressors.deflate.DeflateCompressorInputStream#read(byte[],int,int)"
    ],
    "org.apache.commons.compress.compressors.lzma.LZMACompressorInputStream#available()": [
        "org.apache.commons.compress.compressors.deflate.DeflateCompressorInputStream#available()",
        "org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream#available()",
        "org.apache.commons.compress.compressors.brotli.BrotliCompressorInputStream#available()",
        "org.apache.commons.compress.compressors.xz.XZCompressorInputStream#available()",
        "org.apache.commons.compress.compressors.lz77support.AbstractLZ77CompressorInputStream#available()",
        "org.apache.commons.compress.compressors.deflate64.Deflate64CompressorInputStream#available()",
        "org.apache.commons.compress.compressors.zstandard.ZstdCompressorInputStream#available()",
        "org.apache.commons.compress.compressors.lzma.LZMACompressorInputStream#available()",
        "org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStream#available()"
    ],
    "org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField.<staticinit>()": ["org.apache.commons.compress.archivers.zip.ZipShort#ZipShort(int)"],
    "org.apache.commons.compress.archivers.zip.X000A_NTFS#setModifyFileTime(FileTime)": [
        "org.apache.commons.compress.archivers.zip.X000A_NTFS.fileTimeToZip(FileTime)",
        "org.apache.commons.compress.archivers.zip.X000A_NTFS#setModifyTime(ZipEightByteInteger)"
    ],
    "org.apache.commons.compress.harmony.unpack200.SegmentHeader#setArchiveMajorVersion(int)": ["org.apache.commons.compress.harmony.pack200.Pack200Exception#Pack200Exception(String)"],
    "org.apache.commons.compress.archivers.sevenz.SevenZFile#initializeArchive(StartHeader,byte[],boolean)": [
        "org.apache.commons.compress.archivers.sevenz.SevenZFile.<staticinit>()",
        "org.apache.commons.compress.utils.SeekableInMemoryByteChannel#position(long)",
        "org.apache.commons.compress.utils.SeekableInMemoryByteChannel#position()",
        "org.apache.commons.compress.utils.MultiReadOnlySeekableByteChannel#position()",
        "org.apache.commons.compress.archivers.sevenz.Archive.<init>()",
        "org.apache.commons.compress.archivers.sevenz.SevenZFile.getUnsignedByte(ByteBuffer)",
        "org.apache.commons.compress.archivers.sevenz.SevenZFile#readHeader(ByteBuffer,Archive)",
        "org.apache.commons.compress.archivers.sevenz.SevenZFile#readEncodedHeader(ByteBuffer,Archive,byte[])",
        "org.apache.commons.compress.archivers.sevenz.NID.<staticinit>()",
        "org.apache.commons.compress.utils.MultiReadOnlySeekableByteChannel#position(long)",
        "org.apache.commons.compress.archivers.sevenz.SevenZFile#readFully(ByteBuffer)",
        "org.apache.commons.compress.archivers.sevenz.SevenZFile.assertFitsIntoNonNegativeInt(String,long)"
    ],
    "org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream#reset()": [
        "org.apache.commons.compress.compressors.zstandard.ZstdCompressorInputStream#reset()",
        "org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream#reset()",
        "org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream#getInputStream()",
        "org.apache.commons.compress.compressors.brotli.BrotliCompressorInputStream#reset()"
    ],
    "org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp#getModifyFileTime()": ["org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp.unixTimeToFileTime(ZipLong)"],
    "org.apache.commons.compress.archivers.jar.JarArchiveInputStream#getNextJarEntry()": [
        "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream#getNextZipEntry()",
        "org.apache.commons.compress.archivers.jar.JarArchiveEntry#JarArchiveEntry(ZipArchiveEntry)"
    ],
    "org.apache.commons.compress.archivers.dump.DumpArchiveUtil#DumpArchiveUtil()": ["org.apache.commons.compress.archivers.dump.DumpArchiveUtil.<init>()"],
    "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.isDirectoryEntryName(String)": ["org.apache.commons.compress.archivers.zip.ZipArchiveEntry.<staticinit>()"],
    "org.apache.commons.compress.harmony.pack200.IcBands#finaliseBands()": ["org.apache.commons.compress.harmony.pack200.SegmentHeader#setIc_count(int)"],
    "org.apache.commons.compress.archivers.ar.ArArchiveInputStream#readGNUStringTable(byte[],int,int)": [
        "org.apache.commons.compress.archivers.ar.ArArchiveInputStream#asInt(byte[],int,int)",
        "org.apache.commons.compress.archivers.ar.ArArchiveInputStream.<staticinit>()",
        "org.apache.commons.compress.utils.IOUtils.readRange(InputStream,int)",
        "org.apache.commons.compress.archivers.ar.ArArchiveInputStream#trackReadBytes(long)",
        "org.apache.commons.compress.archivers.ar.ArArchiveEntry#ArArchiveEntry(String,long)"
    ],
    "org.apache.commons.compress.harmony.pack200.ClassBands#addMethodAttribute(NewAttribute)": [
        "org.apache.commons.compress.harmony.pack200.NewAttributeBands#addAttribute(NewAttribute)",
        "org.apache.commons.compress.harmony.pack200.NewAttributeBands#getFlagIndex()",
        "org.apache.commons.compress.harmony.pack200.NewAttributeBands#getAttributeName()"
    ],
    "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile#createArchiveEntry(Path,String,LinkOption[]...)": [
        "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile#fillDates(Path,SevenZArchiveEntry,LinkOption[]...)",
        "org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry#setName(String)",
        "org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry#SevenZArchiveEntry()",
        "org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry#setDirectory(boolean)"
    ],
    "org.apache.commons.compress.harmony.pack200.MetadataBandGroup#incrementAnnoN()": [
        "org.apache.commons.compress.harmony.pack200.IntList#size()",
        "org.apache.commons.compress.harmony.pack200.IntList#increment(int)"
    ],
    "org.apache.commons.compress.harmony.pack200.MetadataBandGroup#addParameterAnnotation(int,int[],IntList,List<String>,List<String>,List<String>,List<Object>,List<Integer>,List<String>,List<String>,List<Integer>)": [
        "org.apache.commons.compress.harmony.pack200.IntList#addAll(IntList)",
        "org.apache.commons.compress.harmony.pack200.MetadataBandGroup#nextString(Iterator<Object>)",
        "org.apache.commons.compress.harmony.pack200.CpBands#getCPSignature(String)",
        "org.apache.commons.compress.harmony.pack200.CpBands#getCPUtf8(String)",
        "org.apache.commons.compress.harmony.pack200.CpBands#getConstant(Object)",
        "org.apache.commons.compress.harmony.pack200.IntList#add(int)"
    ],
    "org.apache.commons.compress.harmony.unpack200.bytecode.ConstantValueAttribute#ConstantValueAttribute(ClassFileEntry)": [
        "org.apache.commons.compress.harmony.unpack200.bytecode.ConstantValueAttribute.<init>()",
        "org.apache.commons.compress.harmony.unpack200.bytecode.Attribute#Attribute(CPUTF8)",
        "org.apache.commons.compress.harmony.unpack200.bytecode.ConstantValueAttribute.<staticinit>()"
    ],
    "org.apache.commons.compress.archivers.sevenz.SevenZFile#readStartHeader(long)": [
        "org.apache.commons.compress.archivers.sevenz.SevenZFile.<staticinit>()",
        "org.apache.commons.compress.utils.MultiReadOnlySeekableByteChannel#size()",
        "org.apache.commons.compress.archivers.sevenz.BoundedSeekableByteChannelInputStream#BoundedSeekableByteChannelInputStream(SeekableByteChannel,long)",
        "org.apache.commons.compress.utils.CRC32VerifyingInputStream#CRC32VerifyingInputStream(InputStream,long,long)",
        "org.apache.commons.compress.archivers.sevenz.StartHeader#StartHeader(long,long,long)",
        "org.apache.commons.compress.utils.SeekableInMemoryByteChannel#size()"
    ],
    "org.apache.commons.compress.harmony.pack200.Segment#visitOuterClass(String,String,String)": ["org.apache.commons.compress.harmony.pack200.ClassBands#addEnclosingMethod(String,String,String)"],
    "org.apache.commons.compress.harmony.pack200.BandSet#encodeScalar(int,BHSDCodec)": ["org.apache.commons.compress.harmony.pack200.BHSDCodec#encode(int)"],
    "org.apache.commons.compress.archivers.zip.ZipFile.Builder#get()": [
        "org.apache.commons.compress.archivers.zip.ZipFile#ZipFile(SeekableByteChannel,String,Charset,boolean,boolean,boolean)",
        "org.apache.commons.compress.utils.SeekableInMemoryByteChannel#SeekableInMemoryByteChannel(byte[])",
        "org.apache.commons.compress.archivers.zip.ZipFile.openZipChannel(Path,long,OpenOption[])"
    ],
    "org.apache.commons.compress.archivers.sevenz.DeltaDecoder#decode(String,InputStream,long,Coder,byte[],int)": ["org.apache.commons.compress.archivers.sevenz.DeltaDecoder#getOptionsFromCoder(Coder)"],
    "org.apache.commons.compress.utils.ArchiveUtils.matchAsciiBuffer(String,byte[])": ["org.apache.commons.compress.utils.ArchiveUtils.matchAsciiBuffer(String,byte[],int,int)"],
    "org.apache.commons.compress.archivers.arj.ArjArchiveInputStream#read32(DataInputStream)": ["org.apache.commons.compress.archivers.ArchiveInputStream#count(int)"],
    "org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorInputStream#nextBlock()": [
        "org.apache.commons.compress.compressors.lz77support.AbstractLZ77CompressorInputStream#prefill(byte[])",
        "org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorInputStream#init(boolean)",
        "org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorInputStream#verifyContentChecksum()",
        "org.apache.commons.compress.compressors.lz4.BlockLZ4CompressorInputStream#BlockLZ4CompressorInputStream(InputStream)",
        "org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorInputStream#maybeFinishCurrentBlock()",
        "org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorInputStream.<staticinit>()",
        "org.apache.commons.compress.utils.BoundedInputStream#BoundedInputStream(InputStream,long)",
        "org.apache.commons.compress.utils.ByteUtils.fromLittleEndian(ByteSupplier,int)"
    ],
    "org.apache.commons.compress.archivers.zip.ZipLong.getBytes(long)": [
        "org.apache.commons.compress.archivers.zip.ZipConstants.<staticinit>()",
        "org.apache.commons.compress.archivers.zip.ZipLong.putLong(long,byte[],int)"
    ],
    "org.apache.commons.compress.harmony.unpack200.bytecode.CPString#hashCode()": ["org.apache.commons.compress.harmony.unpack200.bytecode.CPString#generateHashCode()"],
    "org.apache.commons.compress.harmony.unpack200.bytecode.forms.ByteCodeForm#toString()": ["org.apache.commons.compress.harmony.unpack200.bytecode.forms.ByteCodeForm#getName()"],
    "org.apache.commons.compress.archivers.zip.ZipConstants#ZipConstants()": ["org.apache.commons.compress.archivers.zip.ZipConstants.<init>()"],
    "org.apache.commons.compress.archivers.tar.TarUtils.parseName(byte[],int,int)": [
        "org.apache.commons.compress.archivers.tar.TarUtils.parseName(byte[],int,int,ZipEncoding)",
        "org.apache.commons.compress.archivers.tar.TarUtils.<staticinit>()"
    ],
    "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream#closeArchiveEntry()": [
        "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.<staticinit>()",
        "org.apache.commons.compress.utils.FixedLengthBlockOutputStream#flushBlock()"
    ],
    "org.apache.commons.compress.compressors.lz4.BlockLZ4CompressorOutputStream.Pair#prependTo(Pair)": [
        "org.apache.commons.compress.compressors.lz4.BlockLZ4CompressorOutputStream.Pair#prependLiteral(byte[])",
        "org.apache.commons.compress.utils.ServiceLoaderIterator#hasNext()",
        "org.apache.commons.compress.utils.ServiceLoaderIterator#next()"
    ],
    "org.apache.commons.compress.archivers.sevenz.SevenZFile#readStreamsInfo(ByteBuffer,Archive)": [
        "org.apache.commons.compress.archivers.sevenz.SevenZFile#readSubStreamsInfo(ByteBuffer,Archive)",
        "org.apache.commons.compress.archivers.sevenz.Folder.<staticinit>()",
        "org.apache.commons.compress.archivers.sevenz.NID.<staticinit>()",
        "org.apache.commons.compress.archivers.sevenz.SevenZFile#readPackInfo(ByteBuffer,Archive)",
        "org.apache.commons.compress.archivers.sevenz.SevenZFile#readUnpackInfo(ByteBuffer,Archive)",
        "org.apache.commons.compress.archivers.sevenz.SevenZFile.getUnsignedByte(ByteBuffer)"
    ],
    "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream#readDataDescriptor()": [
        "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream#readFully(byte[])",
        "org.apache.commons.compress.archivers.zip.ZipEightByteInteger.getLongValue(byte[],int)",
        "org.apache.commons.compress.archivers.zip.ZipLong.<staticinit>()",
        "org.apache.commons.compress.archivers.zip.ZipConstants.<staticinit>()",
        "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream#pushback(byte[],int,int)",
        "org.apache.commons.compress.archivers.zip.ZipLong.getValue(byte[])",
        "org.apache.commons.compress.archivers.zip.ZipEightByteInteger.getLongValue(byte[])",
        "org.apache.commons.compress.archivers.zip.ZipLong#ZipLong(byte[],int)",
        "org.apache.commons.compress.archivers.zip.ZipArchiveEntry#setSize(long)",
        "org.apache.commons.compress.archivers.zip.ZipLong.getValue(byte[],int)",
        "org.apache.commons.compress.archivers.zip.ZipLong#equals(Object)",
        "org.apache.commons.compress.archivers.zip.ZipLong#ZipLong(byte[])",
        "org.apache.commons.compress.archivers.zip.ZipLong#getValue()"
    ],
    "org.apache.commons.compress.archivers.zip.PKWareExtraHeader#getLocalFileDataData()": ["org.apache.commons.compress.archivers.zip.ZipUtil.copy(byte[])"],
    "org.apache.commons.compress.harmony.unpack200.bytecode.CodeAttribute#addAttribute(Attribute)": [
        "org.apache.commons.compress.harmony.unpack200.bytecode.LocalVariableTableAttribute#setCodeLength(int)",
        "org.apache.commons.compress.harmony.unpack200.bytecode.LocalVariableTypeTableAttribute#setCodeLength(int)"
    ],
    "org.apache.commons.compress.archivers.tar.TarArchiveEntry#writeEntryHeaderOptionalTimeField(FileTime,int,byte[],int)": [
        "org.apache.commons.compress.archivers.tar.TarArchiveEntry#fill(int,int,byte[],int)",
        "org.apache.commons.compress.archivers.tar.TarArchiveEntry#writeEntryHeaderField(long,byte[],int,int,boolean)",
        "org.apache.commons.compress.utils.TimeUtils.toUnixTime(FileTime)"
    ],
    "org.apache.commons.compress.archivers.sevenz.SevenZFile#close()": [
        "org.apache.commons.compress.utils.SeekableInMemoryByteChannel#close()",
        "org.apache.commons.compress.utils.MultiReadOnlySeekableByteChannel#close()"
    ],
    "org.apache.commons.compress.archivers.zip.ParallelScatterZipCreator#ParallelScatterZipCreator(ExecutorService,ScatterGatherBackingStoreSupplier)": ["org.apache.commons.compress.archivers.zip.ParallelScatterZipCreator#ParallelScatterZipCreator(ExecutorService,ScatterGatherBackingStoreSupplier,int)"],
    "org.apache.commons.compress.harmony.pack200.PopulationCodec#encode(int)": ["org.apache.commons.compress.harmony.pack200.Pack200Exception#Pack200Exception(String)"],
    "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.canConvertToInfoZipExtendedTimestamp(FileTime,FileTime,FileTime)": ["org.apache.commons.compress.utils.TimeUtils.isUnixTime(FileTime)"],
    "org.apache.commons.compress.archivers.sevenz.Coders.BCJDecoder#encode(OutputStream,Object)": ["org.apache.commons.compress.utils.FlushShieldFilterOutputStream#FlushShieldFilterOutputStream(OutputStream)"],
    "org.apache.commons.compress.harmony.unpack200.bytecode.AnnotationsAttribute.Annotation#getClassFileEntries()": ["org.apache.commons.compress.harmony.unpack200.bytecode.AnnotationsAttribute.ElementValue#getClassFileEntries()"],
    "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream#ZipArchiveInputStream(InputStream,String)": ["org.apache.commons.compress.archivers.zip.ZipArchiveInputStream#ZipArchiveInputStream(InputStream,String,boolean)"],
    "org.apache.commons.compress.archivers.zip.UnicodePathExtraField#UnicodePathExtraField()": [
        "org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField#AbstractUnicodeExtraField()",
        "org.apache.commons.compress.archivers.zip.UnicodePathExtraField.<init>()"
    ],
    "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream#putArchiveEntry(ZipArchiveEntry,boolean)": [
        "org.apache.commons.compress.archivers.zip.ZipEightByteInteger#ZipEightByteInteger(long)",
        "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream#closeArchiveEntry()",
        "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.CurrentEntry#CurrentEntry(ZipArchiveEntry)",
        "org.apache.commons.compress.archivers.zip.Zip64Mode.<staticinit>()",
        "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.<staticinit>()",
        "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream#shouldAddZip64Extra(ZipArchiveEntry,Zip64Mode)",
        "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream#getEffectiveZip64Mode(ZipArchiveEntry)",
        "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream#validateSizeInformation(Zip64Mode)",
        "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream#getZip64Extra(ZipArchiveEntry)",
        "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream#setDefaults(ZipArchiveEntry)",
        "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream#writeLocalFileHeader(ZipArchiveEntry,boolean)",
        "org.apache.commons.compress.archivers.zip.ZipArchiveEntry#setExtra()",
        "org.apache.commons.compress.archivers.zip.ZipArchiveEntry#getMethod()",
        "org.apache.commons.compress.archivers.zip.ZipArchiveEntry#getSize()",
        "org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField#setCompressedSize(ZipEightByteInteger)",
        "org.apache.commons.compress.archivers.ArchiveEntry.<staticinit>()",
        "org.apache.commons.compress.archivers.zip.ZipEightByteInteger.<staticinit>()",
        "org.apache.commons.compress.archivers.zip.ZipEightByteInteger#ZipEightByteInteger(BigInteger)",
        "org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField#setSize(ZipEightByteInteger)"
    ],
    "org.apache.commons.compress.archivers.zip.X000A_NTFS.fileTimeToZip(FileTime)": ["org.apache.commons.compress.archivers.zip.ZipEightByteInteger#ZipEightByteInteger(BigInteger)"],
    "org.apache.commons.compress.harmony.unpack200.NewAttributeBands#readNextLayoutElement(StringReader)": [
        "org.apache.commons.compress.harmony.unpack200.NewAttributeBands.Reference#Reference(String)",
        "org.apache.commons.compress.harmony.unpack200.NewAttributeBands#readUpToMatchingBracket(StringReader)",
        "org.apache.commons.compress.harmony.unpack200.NewAttributeBands#readNextUnionCase(StringReader)",
        "org.apache.commons.compress.harmony.unpack200.NewAttributeBands.Call#Call(int)",
        "org.apache.commons.compress.harmony.unpack200.NewAttributeBands#readNumber(StringReader)",
        "org.apache.commons.compress.harmony.unpack200.NewAttributeBands.Union#Union(String,List<UnionCase>,List<LayoutElement>)",
        "org.apache.commons.compress.harmony.unpack200.NewAttributeBands#readBody(StringReader)",
        "org.apache.commons.compress.harmony.unpack200.NewAttributeBands#getStreamUpToMatchingBracket(StringReader)",
        "org.apache.commons.compress.harmony.unpack200.NewAttributeBands.Integral#Integral(String)",
        "org.apache.commons.compress.harmony.unpack200.NewAttributeBands.Replication#Replication(String,String)"
    ],
    "org.apache.commons.compress.archivers.zip.UnicodePathExtraField.<staticinit>()": ["org.apache.commons.compress.archivers.zip.ZipShort#ZipShort(int)"],
    "org.apache.commons.compress.harmony.pack200.PopulationCodec#decode(InputStream)": ["org.apache.commons.compress.harmony.pack200.Pack200Exception#Pack200Exception(String)"],
    "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream#readFully(byte[],int)": [
        "org.apache.commons.compress.utils.IOUtils.readFully(InputStream,byte[],int,int)",
        "org.apache.commons.compress.archivers.ArchiveInputStream#count(int)"
    ],
    "org.apache.commons.compress.harmony.pack200.NewAttribute#NewAttribute(String,String,int)": [
        "org.apache.commons.compress.harmony.pack200.NewAttribute.<init>()",
        "org.apache.commons.compress.harmony.pack200.NewAttribute#addContext(int)"
    ],
    "org.apache.commons.compress.harmony.unpack200.SegmentOptions#hasFileSizeHi()": ["org.apache.commons.compress.harmony.unpack200.SegmentOptions.<staticinit>()"],
    "org.apache.commons.compress.archivers.tar.TarArchiveEntry#setIds(int,int)": [
        "org.apache.commons.compress.archivers.tar.TarArchiveEntry#setGroupId(int)",
        "org.apache.commons.compress.archivers.tar.TarArchiveEntry#setUserId(int)"
    ],
    "org.apache.commons.compress.archivers.zip.ZipFile#ZipFile(Path,String)": ["org.apache.commons.compress.archivers.zip.ZipFile#ZipFile(Path,String,boolean)"],
    "org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream#getNextEntry()": ["org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream#getNextCPIOEntry()"],
    "org.apache.commons.compress.archivers.zip.ZipSplitOutputStream#finish()": [
        "org.apache.commons.compress.archivers.zip.FileRandomAccessOutputStream#close()",
        "org.apache.commons.compress.utils.FileNameUtils.getBaseName(Path)"
    ],
    "org.apache.commons.compress.harmony.unpack200.bytecode.CPFieldRef#generateHashCode()": [
        "org.apache.commons.compress.harmony.unpack200.bytecode.CPNameAndType#hashCode()",
        "org.apache.commons.compress.harmony.unpack200.bytecode.CPClass#hashCode()"
    ],
    "org.apache.commons.compress.harmony.unpack200.Pack200UnpackerAdapter.readPath(FileInputStream)": ["org.apache.commons.compress.harmony.unpack200.Pack200UnpackerAdapter.readField(Object,String)"],
    "org.apache.commons.compress.archivers.tar.TarArchiveInputStream#read(byte[],int,int)": [
        "org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorInputStream#read(byte[],int,int)",
        "org.apache.commons.compress.archivers.sevenz.BoundedSeekableByteChannelInputStream#read(byte[],int,int)",
        "org.apache.commons.compress.archivers.sevenz.AES256SHA256Decoder.AES256SHA256DecoderInputStream#read(byte[],int,int)",
        "org.apache.commons.compress.utils.BoundedArchiveInputStream#read(byte[],int,int)",
        "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream#read(byte[],int,int)",
        "org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStream#read(byte[],int,int)",
        "org.apache.commons.compress.archivers.tar.TarArchiveEntry#isSparse()",
        "org.apache.commons.compress.archivers.tar.TarArchiveEntry#getRealSize()",
        "org.apache.commons.compress.archivers.tar.TarArchiveInputStream#readSparse(byte[],int,int)",
        "org.apache.commons.compress.archivers.tar.TarArchiveInputStream#available()",
        "org.apache.commons.compress.compressors.zstandard.ZstdCompressorInputStream#read(byte[],int,int)",
        "org.apache.commons.compress.archivers.tar.TarArchiveInputStream#isDirectory()",
        "org.apache.commons.compress.compressors.deflate64.Deflate64CompressorInputStream#read(byte[],int,int)",
        "org.apache.commons.compress.compressors.brotli.BrotliCompressorInputStream#read(byte[],int,int)",
        "org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream#read(byte[],int,int)",
        "org.apache.commons.compress.archivers.tar.TarArchiveInputStream#setAtEOF(boolean)",
        "org.apache.commons.compress.compressors.lzma.LZMACompressorInputStream#read(byte[],int,int)",
        "org.apache.commons.compress.compressors.lz4.BlockLZ4CompressorInputStream#read(byte[],int,int)",
        "org.apache.commons.compress.compressors.snappy.SnappyCompressorInputStream#read(byte[],int,int)",
        "org.apache.commons.compress.archivers.ArchiveInputStream#count(int)",
        "org.apache.commons.compress.compressors.xz.XZCompressorInputStream#read(byte[],int,int)",
        "org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream#read(byte[],int,int)",
        "org.apache.commons.compress.compressors.lzw.LZWInputStream#read(byte[],int,int)",
        "org.apache.commons.compress.compressors.deflate.DeflateCompressorInputStream#read(byte[],int,int)",
        "org.apache.commons.compress.archivers.tar.TarArchiveInputStream#isAtEOF()"
    ],
    "org.apache.commons.compress.archivers.cpio.CpioArchiveEntry#setDeviceMaj(long)": ["org.apache.commons.compress.archivers.cpio.CpioArchiveEntry#checkNewFormat()"],
    "org.apache.commons.compress.compressors.CompressorInputStream#count(int)": ["org.apache.commons.compress.compressors.CompressorInputStream#count(long)"],
    "org.apache.commons.compress.archivers.zip.ZipFile#ZipFile(File,String,boolean,boolean)": [
        "org.apache.commons.compress.archivers.zip.ZipFile#ZipFile(SeekableByteChannel,String,String,boolean,boolean,boolean)",
        "org.apache.commons.compress.archivers.zip.ZipFile.newReadByteChannel(Path)"
    ],
    "org.apache.commons.compress.harmony.pack200.NewAttributeBands.Integral#renumberOffsetBci(List,IntList,Map<Label, Integer>)": ["org.apache.commons.compress.harmony.pack200.IntList#get(int)"],
    "org.apache.commons.compress.archivers.zip.ZipEightByteInteger#ZipEightByteInteger(byte[])": ["org.apache.commons.compress.archivers.zip.ZipEightByteInteger#ZipEightByteInteger(byte[],int)"],
    "org.apache.commons.compress.harmony.unpack200.ClassBands#parseMethodMetadataBands(InputStream,int[])": [
        "org.apache.commons.compress.harmony.unpack200.AttributeLayout.<staticinit>()",
        "org.apache.commons.compress.harmony.unpack200.AttributeLayoutMap#getAttributeLayout(String,int)",
        "org.apache.commons.compress.harmony.unpack200.AttributeLayout#matches(long)",
        "org.apache.commons.compress.harmony.unpack200.SegmentUtils.countMatches(long[][],IMatcher)",
        "org.apache.commons.compress.harmony.unpack200.ClassBands#parseMetadata(InputStream,String[],int[],int[],String)",
        "org.apache.commons.compress.harmony.unpack200.MetadataBandGroup#getAttributes()"
    ],
    "org.apache.commons.compress.compressors.pack200.Pack200Utils.normalize(File)": ["org.apache.commons.compress.compressors.pack200.Pack200Utils.normalize(File,File,Map<String, String>)"],
    "org.apache.commons.compress.harmony.pack200.Segment.ArrayVisitor#visitArray(String)": ["org.apache.commons.compress.harmony.pack200.Segment.ArrayVisitor#ArrayVisitor(List<Integer>,List<String>,List<String>,List<Object>)"],
    "org.apache.commons.compress.harmony.unpack200.bytecode.EnclosingMethodAttribute#getNestedClassFileEntries()": ["org.apache.commons.compress.harmony.unpack200.bytecode.EnclosingMethodAttribute.<staticinit>()"],
    "org.apache.commons.compress.compressors.lz4.BlockLZ4CompressorOutputStream#writeFinalLiteralBlock()": [
        "org.apache.commons.compress.compressors.lz4.BlockLZ4CompressorOutputStream#rewriteLastPairs()",
        "org.apache.commons.compress.compressors.lz4.BlockLZ4CompressorOutputStream.Pair#writeTo(OutputStream)",
        "org.apache.commons.compress.compressors.lz4.BlockLZ4CompressorOutputStream.Pair#hasBeenWritten()"
    ],
    "org.apache.commons.compress.harmony.pack200.NewAttributeBands#readNumber(StringReader)": ["org.apache.commons.compress.utils.ParsingUtils.parseIntValue(String)"],
    "org.apache.commons.compress.compressors.CompressorStreamFactory.getGzip()": ["org.apache.commons.compress.compressors.CompressorStreamFactory.<staticinit>()"],
    "org.apache.commons.compress.harmony.pack200.ClassBands#addSourceFile(String)": [
        "org.apache.commons.compress.harmony.pack200.CpBands#getCPUtf8(String)",
        "org.apache.commons.compress.harmony.pack200.CPClass#toString()"
    ],
    "org.apache.commons.compress.harmony.unpack200.CpBands#cpIntegerValue(int)": ["org.apache.commons.compress.harmony.unpack200.bytecode.CPInteger#CPInteger(Integer,int)"],
    "org.apache.commons.compress.archivers.tar.TarFile#TarFile(Path,boolean)": [
        "org.apache.commons.compress.archivers.tar.TarFile#TarFile(SeekableByteChannel,int,int,String,boolean)",
        "org.apache.commons.compress.archivers.tar.TarConstants.<staticinit>()",
        "org.apache.commons.compress.archivers.tar.TarArchiveEntry.<staticinit>()"
    ],
    "org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream#Pack200CompressorInputStream(File,Pack200Strategy,Map<String, String>)": ["org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream#Pack200CompressorInputStream(InputStream,File,Pack200Strategy,Map<String, String>)"],
    "org.apache.commons.compress.archivers.dump.DumpArchiveUtil.verify(byte[])": [
        "org.apache.commons.compress.archivers.dump.DumpArchiveUtil.calculateChecksum(byte[])",
        "org.apache.commons.compress.archivers.dump.DumpArchiveConstants.<staticinit>()",
        "org.apache.commons.compress.archivers.dump.DumpArchiveUtil.convert32(byte[],int)"
    ],
    "org.apache.commons.compress.harmony.unpack200.CpBands#parseCpUtf8(InputStream)": [
        "org.apache.commons.compress.harmony.unpack200.SegmentHeader#getCpUTF8Count()",
        "org.apache.commons.compress.harmony.pack200.Codec.<staticinit>()",
        "org.apache.commons.compress.harmony.unpack200.BandSet#decodeBandInt(String,InputStream,BHSDCodec,int)",
        "org.apache.commons.compress.harmony.unpack200.CpBands.<staticinit>()"
    ],
    "org.apache.commons.compress.archivers.zip.GeneralPurposeBit.parse(byte[],int)": [
        "org.apache.commons.compress.archivers.zip.GeneralPurposeBit#useUTF8ForNames(boolean)",
        "org.apache.commons.compress.archivers.zip.ZipShort.getValue(byte[],int)",
        "org.apache.commons.compress.archivers.zip.GeneralPurposeBit#useDataDescriptor(boolean)",
        "org.apache.commons.compress.archivers.zip.GeneralPurposeBit.<staticinit>()",
        "org.apache.commons.compress.archivers.zip.GeneralPurposeBit#useStrongEncryption(boolean)",
        "org.apache.commons.compress.archivers.zip.GeneralPurposeBit#GeneralPurposeBit()",
        "org.apache.commons.compress.archivers.zip.GeneralPurposeBit#useEncryption(boolean)"
    ],
    "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.<init>()": [
        "org.apache.commons.compress.archivers.zip.GeneralPurposeBit#GeneralPurposeBit()",
        "org.apache.commons.compress.archivers.ArchiveEntry.<staticinit>()",
        "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.CommentSource.<staticinit>()",
        "org.apache.commons.compress.archivers.EntryStreamOffsets.<staticinit>()",
        "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.NameSource.<staticinit>()",
        "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.<staticinit>()",
        "org.apache.commons.compress.archivers.zip.ZipMethod.<staticinit>()"
    ],
    "org.apache.commons.compress.compressors.z.ZCompressorInputStream#ZCompressorInputStream(InputStream)": ["org.apache.commons.compress.compressors.z.ZCompressorInputStream#ZCompressorInputStream(InputStream,int)"],
    "org.apache.commons.compress.harmony.unpack200.bytecode.forms.IincForm#IincForm(int,String,int[])": [
        "org.apache.commons.compress.harmony.unpack200.bytecode.forms.IincForm.<init>()",
        "org.apache.commons.compress.harmony.unpack200.bytecode.forms.ByteCodeForm#ByteCodeForm(int,String,int[])"
    ],
    "org.apache.commons.compress.harmony.unpack200.bytecode.ExceptionTableEntry#ExceptionTableEntry(int,int,int,CPClass)": ["org.apache.commons.compress.harmony.unpack200.bytecode.ExceptionTableEntry.<init>()"],
    "org.apache.commons.compress.archivers.zip.ScatterZipOutputStream.pathBased(Path)": ["org.apache.commons.compress.archivers.zip.ScatterZipOutputStream.pathBased(Path,int)"],
    "org.apache.commons.compress.archivers.sevenz.SubStreamsInfo#SubStreamsInfo(int)": ["org.apache.commons.compress.archivers.sevenz.SubStreamsInfo.<init>()"],
    "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream#getRecordSize()": ["org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.<staticinit>()"],
    "org.apache.commons.compress.harmony.pack200.CPNameAndType#CPNameAndType(CPUTF8,CPSignature)": [
        "org.apache.commons.compress.harmony.pack200.ConstantPoolEntry.<init>()",
        "org.apache.commons.compress.harmony.pack200.CPNameAndType.<init>()"
    ],
    "org.apache.commons.compress.archivers.sevenz.Coders.CopyDecoder.<init>()": ["org.apache.commons.compress.archivers.sevenz.AbstractCoder.<init>()"],
    "org.apache.commons.compress.archivers.zip.ExtraFieldUtils.createExtraField(ZipShort)": [
        "org.apache.commons.compress.archivers.zip.ExtraFieldUtils.createExtraFieldNoDefault(ZipShort)",
        "org.apache.commons.compress.archivers.zip.UnrecognizedExtraField.<init>()",
        "org.apache.commons.compress.archivers.zip.UnrecognizedExtraField#setHeaderId(ZipShort)"
    ],
    "org.apache.commons.compress.harmony.unpack200.bytecode.RuntimeVisibleorInvisibleParameterAnnotationsAttribute.ParameterAnnotation#resolve(ClassConstantPool)": ["org.apache.commons.compress.harmony.unpack200.bytecode.AnnotationsAttribute.Annotation#resolve(ClassConstantPool)"],
    "org.apache.commons.compress.harmony.unpack200.BandSet#parseCPClassReferences(String,InputStream,BHSDCodec,int)": [
        "org.apache.commons.compress.harmony.unpack200.CpBands#cpClassValue(int)",
        "org.apache.commons.compress.harmony.unpack200.BandSet#decodeBandInt(String,InputStream,BHSDCodec,int)",
        "org.apache.commons.compress.harmony.unpack200.Segment#getCpBands()"
    ],
    "org.apache.commons.compress.archivers.tar.TarFile#repositionForwardTo(long)": [
        "org.apache.commons.compress.utils.SeekableInMemoryByteChannel#position(long)",
        "org.apache.commons.compress.utils.SeekableInMemoryByteChannel#position()",
        "org.apache.commons.compress.utils.MultiReadOnlySeekableByteChannel#position(long)",
        "org.apache.commons.compress.utils.MultiReadOnlySeekableByteChannel#position()"
    ],
    "org.apache.commons.compress.harmony.unpack200.AttributeLayoutMap#getAttributeLayout(String,int)": [
        "org.apache.commons.compress.harmony.unpack200.AttributeLayoutMap#getLayout(int)",
        "org.apache.commons.compress.harmony.unpack200.AttributeLayout#getName()"
    ],
    "org.apache.commons.compress.harmony.pack200.AttributeDefinitionBands#AttributeDefinitionBands(Segment,int,Attribute[])": [
        "org.apache.commons.compress.harmony.pack200.BandSet#BandSet(int,SegmentHeader)",
        "org.apache.commons.compress.harmony.pack200.AttributeDefinitionBands.<init>()",
        "org.apache.commons.compress.harmony.pack200.NewAttribute#isContextField()",
        "org.apache.commons.compress.harmony.pack200.SegmentHeader#setHave_method_flags_hi(boolean)",
        "org.apache.commons.compress.harmony.pack200.NewAttribute#isContextMethod()",
        "org.apache.commons.compress.harmony.pack200.AttributeDefinitionBands#addHighIndices(int[])",
        "org.apache.commons.compress.harmony.pack200.Segment#getCpBands()",
        "org.apache.commons.compress.harmony.pack200.AttributeDefinitionBands#addAttributeDefinitions(Map<String, String>,int[],int)",
        "org.apache.commons.compress.harmony.pack200.Segment#getSegmentHeader()",
        "org.apache.commons.compress.harmony.pack200.NewAttribute#isContextCode()",
        "org.apache.commons.compress.harmony.pack200.SegmentHeader#setHave_code_flags_hi(boolean)",
        "org.apache.commons.compress.harmony.pack200.SegmentHeader#setHave_class_flags_hi(boolean)",
        "org.apache.commons.compress.harmony.pack200.AttributeDefinitionBands.<staticinit>()",
        "org.apache.commons.compress.harmony.pack200.SegmentHeader#setHave_field_flags_hi(boolean)",
        "org.apache.commons.compress.harmony.pack200.NewAttribute#isContextClass()",
        "org.apache.commons.compress.harmony.pack200.NewAttribute#getLayout()"
    ],
    "org.apache.commons.compress.archivers.zip.ExtraFieldUtils.parse(byte[],boolean,UnparseableExtraField)$ExtraFieldParsingBehavior$1#fill(ZipExtraField,byte[],int,int,boolean)": ["org.apache.commons.compress.archivers.zip.ExtraFieldUtils.fillExtraField(ZipExtraField,byte[],int,int,boolean)"],
    "org.apache.commons.compress.compressors.deflate64.HuffmanDecoder.<init>()": ["org.apache.commons.compress.compressors.deflate64.HuffmanDecoder.DecodingMemory#DecodingMemory()"],
    "org.apache.commons.compress.harmony.pack200.PackingUtils.copyThroughJar(JarFile,OutputStream)": [
        "org.apache.commons.compress.compressors.zstandard.ZstdCompressorInputStream#read(byte[])",
        "org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream#read(byte[])",
        "org.apache.commons.compress.compressors.brotli.BrotliCompressorInputStream#read(byte[])",
        "org.apache.commons.compress.harmony.pack200.PackingUtils.log(String)"
    ],
    "org.apache.commons.compress.compressors.CompressorStreamFactory.getXz()": ["org.apache.commons.compress.compressors.CompressorStreamFactory.<staticinit>()"],
    "org.apache.commons.compress.harmony.unpack200.bytecode.forms.LookupSwitchForm#LookupSwitchForm(int,String)": [
        "org.apache.commons.compress.harmony.unpack200.bytecode.forms.SwitchForm#SwitchForm(int,String)",
        "org.apache.commons.compress.harmony.unpack200.bytecode.forms.LookupSwitchForm.<init>()"
    ],
    "org.apache.commons.compress.harmony.unpack200.SegmentConstantPool.<init>()": ["org.apache.commons.compress.harmony.unpack200.SegmentConstantPoolArrayCache.<init>()"],
    "org.apache.commons.compress.harmony.unpack200.bytecode.ByteCode.getByteCode(int)": [
        "org.apache.commons.compress.harmony.unpack200.bytecode.forms.ByteCodeForm#hasNoOperand()",
        "org.apache.commons.compress.harmony.unpack200.bytecode.forms.ByteCodeForm.get(int)",
        "org.apache.commons.compress.harmony.unpack200.bytecode.ByteCode#ByteCode(int)",
        "org.apache.commons.compress.harmony.unpack200.bytecode.ByteCode.<staticinit>()"
    ],
    "org.apache.commons.compress.harmony.unpack200.bytecode.CPConstantNumber#getNumber()": ["org.apache.commons.compress.harmony.unpack200.bytecode.CPConstant#getValue()"],
    "org.apache.commons.compress.archivers.tar.TarArchiveEntry#parseTarHeader(byte[])": [
        "org.apache.commons.compress.archivers.tar.TarArchiveEntry#parseTarHeader(byte[],ZipEncoding)",
        "org.apache.commons.compress.archivers.tar.TarUtils.<staticinit>()",
        "org.apache.commons.compress.archivers.tar.TarArchiveEntry#parseTarHeader(byte[],ZipEncoding,boolean,boolean)"
    ],
    "org.apache.commons.compress.harmony.unpack200.CpBands#cpNameAndTypeValue(String)": [
        "org.apache.commons.compress.harmony.unpack200.bytecode.CPNameAndType#CPNameAndType(CPUTF8,CPUTF8,int)",
        "org.apache.commons.compress.harmony.unpack200.CpBands#cpNameAndTypeValue(int)",
        "org.apache.commons.compress.harmony.unpack200.CpBands#cpUTF8Value(String,boolean)"
    ],
    "org.apache.commons.compress.compressors.xz.XZUtils.internalIsXZCompressionAvailable()": ["org.apache.commons.compress.compressors.xz.XZCompressorInputStream.matches(byte[],int)"],
    "org.apache.commons.compress.harmony.pack200.RunCodec#normalise(int[],Codec)": [
        "org.apache.commons.compress.harmony.pack200.BHSDCodec#cardinality()",
        "org.apache.commons.compress.utils.ExactMath.add(int,long)",
        "org.apache.commons.compress.harmony.pack200.BHSDCodec#largest()",
        "org.apache.commons.compress.harmony.pack200.BHSDCodec#isDelta()",
        "org.apache.commons.compress.harmony.pack200.PopulationCodec#getUnfavouredCodec()",
        "org.apache.commons.compress.harmony.pack200.PopulationCodec#getFavouredCodec()",
        "org.apache.commons.compress.harmony.pack200.BHSDCodec#smallest()",
        "org.apache.commons.compress.harmony.pack200.PopulationCodec#getFavoured()"
    ],
    "org.apache.commons.compress.utils.ByteUtils.fromLittleEndian(byte[])": ["org.apache.commons.compress.utils.ByteUtils.fromLittleEndian(byte[],int,int)"],
    "org.apache.commons.compress.archivers.zip.ZipFile#sortByOffset(ZipArchiveEntry[])": ["org.apache.commons.compress.archivers.zip.ZipFile.<staticinit>()"],
    "org.apache.commons.compress.archivers.tar.TarUtils.computeCheckSum(byte[])": ["org.apache.commons.compress.archivers.tar.TarUtils.<staticinit>()"],
    "org.apache.commons.compress.harmony.pack200.Archive#Archive(JarInputStream,OutputStream,PackingOptions)": [
        "org.apache.commons.compress.harmony.pack200.PackingOptions.<init>()",
        "org.apache.commons.compress.harmony.pack200.PackingUtils.config(PackingOptions)",
        "org.apache.commons.compress.harmony.pack200.PackingOptions#isGzip()",
        "org.apache.commons.compress.harmony.pack200.Archive.<init>()"
    ],
    "org.apache.commons.compress.archivers.cpio.CpioArchiveEntry#isSocket()": [
        "org.apache.commons.compress.archivers.cpio.CpioUtil.fileType(long)",
        "org.apache.commons.compress.archivers.cpio.CpioConstants.<staticinit>()"
    ],
    "org.apache.commons.compress.harmony.pack200.NewAttributeBands#readNextLayoutElement(StringReader)": [
        "org.apache.commons.compress.harmony.pack200.NewAttributeBands.Integral#Integral(String)",
        "org.apache.commons.compress.harmony.pack200.NewAttributeBands#readBody(StringReader)",
        "org.apache.commons.compress.harmony.pack200.NewAttributeBands.Integral#Integral(String,Integral)",
        "org.apache.commons.compress.harmony.pack200.NewAttributeBands.Replication#Replication(String,String)",
        "org.apache.commons.compress.harmony.pack200.NewAttributeBands#readUpToMatchingBracket(StringReader)",
        "org.apache.commons.compress.harmony.pack200.NewAttributeBands#readNextUnionCase(StringReader)",
        "org.apache.commons.compress.harmony.pack200.NewAttributeBands.Reference#Reference(String)",
        "org.apache.commons.compress.harmony.pack200.NewAttributeBands.Union#Union(String,List<UnionCase>,List<LayoutElement>)",
        "org.apache.commons.compress.harmony.pack200.NewAttributeBands#getStreamUpToMatchingBracket(StringReader)",
        "org.apache.commons.compress.harmony.pack200.NewAttributeBands.Call#Call(int)",
        "org.apache.commons.compress.harmony.pack200.NewAttributeBands#readNumber(StringReader)"
    ],
    "org.apache.commons.compress.harmony.pack200.Archive#doNormalPack()": [
        "org.apache.commons.compress.archivers.zip.FileRandomAccessOutputStream#close()",
        "org.apache.commons.compress.harmony.pack200.Archive#splitIntoSegments(List<PackingFile>)",
        "org.apache.commons.compress.compressors.deflate.DeflateCompressorOutputStream#close()",
        "org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream#close()",
        "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream#close()",
        "org.apache.commons.compress.compressors.lzma.LZMACompressorOutputStream#close()",
        "org.apache.commons.compress.harmony.pack200.PackingUtils.getPackingFileListFromJar(JarInputStream,boolean)",
        "org.apache.commons.compress.archivers.zip.ZipSplitOutputStream#close()",
        "org.apache.commons.compress.archivers.zip.SeekableChannelRandomAccessOutputStream#close()",
        "org.apache.commons.compress.archivers.sevenz.Coders.DeflateDecoder.DeflateDecoderOutputStream#close()",
        "org.apache.commons.compress.compressors.lz4.BlockLZ4CompressorOutputStream#close()",
        "org.apache.commons.compress.archivers.ar.ArArchiveOutputStream#close()",
        "org.apache.commons.compress.harmony.pack200.PackingUtils.getPackingFileListFromJar(JarFile,boolean)",
        "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream#close()",
        "org.apache.commons.compress.harmony.pack200.PackingOptions#isKeepFileOrder()",
        "org.apache.commons.compress.compressors.snappy.SnappyCompressorOutputStream#close()",
        "org.apache.commons.compress.harmony.pack200.Archive.SegmentUnit#getByteAmount()",
        "org.apache.commons.compress.utils.FixedLengthBlockOutputStream#close()",
        "org.apache.commons.compress.harmony.pack200.Archive.SegmentUnit#getPackedByteAmount()",
        "org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorOutputStream#close()",
        "org.apache.commons.compress.compressors.xz.XZCompressorOutputStream#close()",
        "org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorOutputStream#close()",
        "org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream#close()",
        "org.apache.commons.compress.harmony.pack200.Segment#Segment()",
        "org.apache.commons.compress.harmony.pack200.PackingUtils.log(String)",
        "org.apache.commons.compress.compressors.zstandard.ZstdCompressorOutputStream#close()",
        "org.apache.commons.compress.archivers.sevenz.AES256SHA256Decoder.AES256SHA256DecoderOutputStream#close()",
        "org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream#close()",
        "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream#close()",
        "org.apache.commons.compress.harmony.pack200.Segment#pack(SegmentUnit,OutputStream,PackingOptions)",
        "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.OutputStreamWrapper#close()"
    ],
    "org.apache.commons.compress.archivers.zip.JarMarker#getCentralDirectoryLength()": ["org.apache.commons.compress.archivers.zip.JarMarker.<staticinit>()"],
    "org.apache.commons.compress.harmony.pack200.NewAttributeBands.Replication#renumberBci(IntList,Map<Label, Integer>)": [
        "org.apache.commons.compress.harmony.pack200.NewAttributeBands.UnionCase#renumberBci(IntList,Map<Label, Integer>)",
        "org.apache.commons.compress.harmony.pack200.NewAttributeBands.Replication#renumberBci(IntList,Map<Label, Integer>)",
        "org.apache.commons.compress.harmony.pack200.NewAttributeBands.Call#renumberBci(IntList,Map<Label, Integer>)",
        "org.apache.commons.compress.harmony.pack200.NewAttributeBands.Callable#renumberBci(IntList,Map<Label, Integer>)",
        "org.apache.commons.compress.harmony.pack200.NewAttributeBands.Integral#renumberBci(IntList,Map<Label, Integer>)",
        "org.apache.commons.compress.harmony.pack200.NewAttributeBands.Union#renumberBci(IntList,Map<Label, Integer>)",
        "org.apache.commons.compress.harmony.pack200.NewAttributeBands.Reference#renumberBci(IntList,Map<Label, Integer>)"
    ],
    "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream#TarArchiveOutputStream(OutputStream)": [
        "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.<staticinit>()",
        "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream#TarArchiveOutputStream(OutputStream,int)"
    ],
    "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream#versionNeededToExtractMethod(int)": [
        "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.<staticinit>()",
        "org.apache.commons.compress.archivers.zip.ZipConstants.<staticinit>()"
    ],
    "org.apache.commons.compress.harmony.unpack200.bytecode.LocalVariableTableAttribute.setAttributeName(CPUTF8)": ["org.apache.commons.compress.harmony.unpack200.bytecode.LocalVariableTableAttribute.<staticinit>()"],
    "org.apache.commons.compress.archivers.zip.PKWareExtraHeader#getCentralDirectoryLength()": [
        "org.apache.commons.compress.archivers.zip.PKWareExtraHeader#getLocalFileDataLength()",
        "org.apache.commons.compress.archivers.zip.ZipShort#ZipShort(int)"
    ],
    "org.apache.commons.compress.harmony.unpack200.bytecode.forms.SwitchForm#SwitchForm(int,String)": [
        "org.apache.commons.compress.harmony.unpack200.bytecode.forms.VariableInstructionForm#VariableInstructionForm(int,String)",
        "org.apache.commons.compress.harmony.unpack200.bytecode.forms.SwitchForm.<init>()"
    ],
    "org.apache.commons.compress.archivers.tar.TarFile#skipRecordPadding()": [
        "org.apache.commons.compress.archivers.tar.TarArchiveEntry#getSize()",
        "org.apache.commons.compress.archivers.tar.TarFile#repositionForwardBy(long)",
        "org.apache.commons.compress.archivers.tar.TarFile#throwExceptionIfPositionIsNotInArchive()",
        "org.apache.commons.compress.archivers.tar.TarFile#isDirectory()"
    ],
    "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream#getEffectiveZip64Mode(ZipArchiveEntry)": [
        "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.<staticinit>()",
        "org.apache.commons.compress.archivers.zip.ZipArchiveEntry#getMethod()",
        "org.apache.commons.compress.archivers.zip.Zip64Mode.<staticinit>()",
        "org.apache.commons.compress.archivers.zip.ZipArchiveEntry#getSize()",
        "org.apache.commons.compress.archivers.ArchiveEntry.<staticinit>()"
    ],
    "org.apache.commons.compress.harmony.unpack200.bytecode.forms.LocalForm#setByteCodeOperands(ByteCode,OperandManager,int)": [
        "org.apache.commons.compress.harmony.unpack200.bytecode.ByteCode#setOperandBytes(int[])",
        "org.apache.commons.compress.harmony.unpack200.bytecode.OperandManager#nextLocal()"
    ],
    "org.apache.commons.compress.utils.ChecksumVerifyingInputStream#ChecksumVerifyingInputStream(Checksum,InputStream,long,long)": ["org.apache.commons.compress.utils.ChecksumVerifyingInputStream.<init>()"],
    "org.apache.commons.compress.archivers.zip.ResourceAlignmentExtraField#ResourceAlignmentExtraField(int,boolean,int)": ["org.apache.commons.compress.archivers.zip.ResourceAlignmentExtraField.<init>()"],
    "org.apache.commons.compress.archivers.ArchiveInputStream#ArchiveInputStream(InputStream,Charset)": ["org.apache.commons.compress.archivers.ArchiveInputStream.<init>()"],
    "org.apache.commons.compress.harmony.unpack200.AttributeLayout#getValue(long,SegmentConstantPool)": ["org.apache.commons.compress.harmony.unpack200.AttributeLayout.getValue(String,long,SegmentConstantPool)"],
    "org.apache.commons.compress.harmony.unpack200.IcTuple#thisClassIndex()": ["org.apache.commons.compress.harmony.unpack200.IcTuple#predicted()"],
    "org.apache.commons.compress.harmony.pack200.Segment.SegmentAnnotationVisitor#visit(String,Object)": ["org.apache.commons.compress.harmony.pack200.Segment#addValueAndTag(Object,List<String>,List<Object>)"],
    "org.apache.commons.compress.harmony.unpack200.SegmentHeader#parseCpCounts(InputStream)": [
        "org.apache.commons.compress.harmony.pack200.Codec.<staticinit>()",
        "org.apache.commons.compress.harmony.unpack200.SegmentHeader#getOptions()",
        "org.apache.commons.compress.harmony.unpack200.SegmentHeader#decodeScalar(String,InputStream,BHSDCodec)",
        "org.apache.commons.compress.harmony.unpack200.SegmentOptions#hasCPNumberCounts()"
    ],
    "org.apache.commons.compress.harmony.unpack200.bytecode.AnnotationsAttribute.Annotation#Annotation(int,CPUTF8,CPUTF8[],ElementValue[])": ["org.apache.commons.compress.harmony.unpack200.bytecode.AnnotationsAttribute.Annotation.<init>()"],
    "org.apache.commons.compress.harmony.unpack200.bytecode.forms.NewClassRefForm#setByteCodeOperands(ByteCode,OperandManager,int)": [
        "org.apache.commons.compress.harmony.unpack200.bytecode.ByteCode#getNestedClassFileEntries()",
        "org.apache.commons.compress.harmony.unpack200.bytecode.forms.ClassRefForm#getOffset(OperandManager)",
        "org.apache.commons.compress.harmony.unpack200.bytecode.forms.ClassRefForm#setNestedEntries(ByteCode,OperandManager,int)",
        "org.apache.commons.compress.harmony.unpack200.bytecode.ByteCode#setNestedPositions(int[][])",
        "org.apache.commons.compress.harmony.unpack200.bytecode.CPClass#getName()",
        "org.apache.commons.compress.harmony.unpack200.bytecode.ByteCode#setNested(ClassFileEntry[])",
        "org.apache.commons.compress.harmony.unpack200.bytecode.OperandManager#globalConstantPool()",
        "org.apache.commons.compress.harmony.unpack200.bytecode.forms.NarrowClassRefForm#setNestedEntries(ByteCode,OperandManager,int)",
        "org.apache.commons.compress.harmony.unpack200.bytecode.OperandManager#getCurrentClass()",
        "org.apache.commons.compress.harmony.unpack200.bytecode.OperandManager#setNewClass(String)",
        "org.apache.commons.compress.harmony.unpack200.SegmentConstantPool#getClassPoolEntry(String)"
    ],
    "org.apache.commons.compress.compressors.gzip.GzipUtils.isCompressedFileName(String)": [
        "org.apache.commons.compress.compressors.FileNameUtil#isCompressedFileName(String)",
        "org.apache.commons.compress.compressors.gzip.GzipUtils.<staticinit>()"
    ],
    "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream#endBlock()": ["org.apache.commons.compress.compressors.bzip2.CRC#getValue()"],
    "org.apache.commons.compress.compressors.bzip2.BZip2Utils.<staticinit>()": ["org.apache.commons.compress.compressors.FileNameUtil#FileNameUtil(Map<String, String>,String)"],
    "org.apache.commons.compress.harmony.unpack200.bytecode.CPMethodRef#generateHashCode()": [
        "org.apache.commons.compress.harmony.unpack200.bytecode.CPNameAndType#hashCode()",
        "org.apache.commons.compress.harmony.unpack200.bytecode.CPClass#hashCode()"
    ],
    "org.apache.commons.compress.archivers.zip.ZipArchiveEntryRequest.createZipArchiveEntryRequest(ZipArchiveEntry,InputStreamSupplier)": ["org.apache.commons.compress.archivers.zip.ZipArchiveEntryRequest#ZipArchiveEntryRequest(ZipArchiveEntry,InputStreamSupplier)"],
    "org.apache.commons.compress.archivers.zip.UnrecognizedExtraField#parseFromCentralDirectoryData(byte[],int,int)": [
        "org.apache.commons.compress.archivers.zip.UnrecognizedExtraField#setCentralDirectoryData(byte[])",
        "org.apache.commons.compress.archivers.zip.UnrecognizedExtraField#setLocalFileDataData(byte[])"
    ],
    "org.apache.commons.compress.harmony.pack200.CpBands#writeCpString(OutputStream)": [
        "org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream#write(byte[])",
        "org.apache.commons.compress.archivers.sevenz.Coders.DeflateDecoder.DeflateDecoderOutputStream#write(byte[])",
        "org.apache.commons.compress.harmony.pack200.Codec.<staticinit>()",
        "org.apache.commons.compress.harmony.pack200.BandSet#encodeBandInt(String,int[],BHSDCodec)",
        "org.apache.commons.compress.harmony.pack200.PackingUtils.log(String)",
        "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.OutputStreamWrapper#write(byte[])",
        "org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream#write(byte[])",
        "org.apache.commons.compress.archivers.zip.ZipSplitOutputStream#write(byte[])",
        "org.apache.commons.compress.harmony.pack200.CPString#getIndexInCpUtf8()"
    ],
    "org.apache.commons.compress.archivers.zip.ParallelScatterZipCreator#createCallable(ZipArchiveEntry,InputStreamSupplier)": [
        "org.apache.commons.compress.archivers.zip.ScatterZipOutputStream#addArchiveEntry(ZipArchiveEntryRequest)",
        "org.apache.commons.compress.archivers.zip.ZipMethod.<staticinit>()",
        "org.apache.commons.compress.archivers.zip.ZipArchiveEntry#getMethod()"
    ],
    "org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream#Pack200CompressorInputStream(InputStream,Pack200Strategy,Map<String, String>)": ["org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream#Pack200CompressorInputStream(InputStream,File,Pack200Strategy,Map<String, String>)"],
    "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream#BZip2CompressorOutputStream(OutputStream)": [
        "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream#BZip2CompressorOutputStream(OutputStream,int)",
        "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.<staticinit>()"
    ],
    "org.apache.commons.compress.harmony.unpack200.bytecode.forms.WideForm#WideForm(int,String)": [
        "org.apache.commons.compress.harmony.unpack200.bytecode.forms.VariableInstructionForm#VariableInstructionForm(int,String)",
        "org.apache.commons.compress.harmony.unpack200.bytecode.forms.WideForm.<init>()"
    ],
    "org.apache.commons.compress.harmony.unpack200.bytecode.forms.LongForm#LongForm(int,String,int[])": [
        "org.apache.commons.compress.harmony.unpack200.bytecode.forms.LongForm.<init>()",
        "org.apache.commons.compress.harmony.unpack200.bytecode.forms.ReferenceForm#ReferenceForm(int,String,int[])"
    ],
    "org.apache.commons.compress.changes.Change#Change(E extends ArchiveEntry,InputStream,boolean)": [
        "org.apache.commons.compress.changes.Change.<init>()",
        "org.apache.commons.compress.changes.Change.ChangeType.<staticinit>()"
    ],
    "org.apache.commons.compress.compressors.lz4.BlockLZ4CompressorOutputStream#addBackReference(BackReference)": [
        "org.apache.commons.compress.compressors.lz4.BlockLZ4CompressorOutputStream#clearUnusedBlocksAndPairs()",
        "org.apache.commons.compress.compressors.lz77support.LZ77Compressor.BackReference#getLength()",
        "org.apache.commons.compress.compressors.lz4.BlockLZ4CompressorOutputStream#recordBackReference(BackReference)",
        "org.apache.commons.compress.compressors.lz4.BlockLZ4CompressorOutputStream#writeBlocksAndReturnUnfinishedPair(int)",
        "org.apache.commons.compress.compressors.lz4.BlockLZ4CompressorOutputStream.Pair#setBackReference(BackReference)"
    ],
    "org.apache.commons.compress.archivers.tar.TarArchiveInputStream#readOldGNUSparse()": [
        "org.apache.commons.compress.archivers.tar.TarArchiveSparseEntry#TarArchiveSparseEntry(byte[])",
        "org.apache.commons.compress.archivers.tar.TarArchiveEntry#isExtended()",
        "org.apache.commons.compress.archivers.tar.TarArchiveSparseEntry#getSparseHeaders()",
        "org.apache.commons.compress.archivers.tar.TarArchiveEntry#getSparseHeaders()",
        "org.apache.commons.compress.archivers.tar.TarArchiveInputStream#getRecord()",
        "org.apache.commons.compress.archivers.tar.TarArchiveSparseEntry#isExtended()",
        "org.apache.commons.compress.archivers.tar.TarArchiveInputStream#buildSparseInputStreams()"
    ],
    "org.apache.commons.compress.harmony.pack200.ClassBands.TempParamAnnotation#TempParamAnnotation(int)": ["org.apache.commons.compress.harmony.pack200.ClassBands.TempParamAnnotation.<init>()"],
    "org.apache.commons.compress.harmony.unpack200.bytecode.forms.IntRefForm#getPoolID()": ["org.apache.commons.compress.harmony.unpack200.SegmentConstantPool.<staticinit>()"],
    "org.apache.commons.compress.archivers.zip.ZipArchiveEntry#setUnixMode(int)": [
        "org.apache.commons.compress.archivers.zip.ZipArchiveEntry#isDirectory()",
        "org.apache.commons.compress.archivers.zip.ZipArchiveEntry#setExternalAttributes(long)",
        "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.<staticinit>()"
    ],
    "org.apache.commons.compress.compressors.CompressorStreamFactory#getCompressorOutputStreamProviders()": ["org.apache.commons.compress.compressors.CompressorStreamFactory.findAvailableCompressorOutputStreamProviders()"],
    "org.apache.commons.compress.archivers.cpio.CpioArchiveEntry#CpioArchiveEntry(short,File,String)": [
        "org.apache.commons.compress.archivers.cpio.CpioArchiveEntry#setMode(long)",
        "org.apache.commons.compress.archivers.cpio.CpioArchiveEntry#setTime(long)",
        "org.apache.commons.compress.archivers.cpio.CpioArchiveEntry#CpioArchiveEntry(short,String,long)",
        "org.apache.commons.compress.archivers.cpio.CpioConstants.<staticinit>()"
    ],
    "org.apache.commons.compress.archivers.zip.ZipLong#ZipLong(long)": ["org.apache.commons.compress.archivers.zip.ZipLong.<init>()"],
    "org.apache.commons.compress.archivers.tar.TarFile.BoundedTarEntryInputStream#read(long,ByteBuffer)": [
        "org.apache.commons.compress.archivers.tar.TarFile#setAtEOF(boolean)",
        "org.apache.commons.compress.archivers.tar.TarFile.BoundedTarEntryInputStream#readSparse(long,ByteBuffer,int)",
        "org.apache.commons.compress.archivers.tar.TarArchiveEntry#isSparse()",
        "org.apache.commons.compress.archivers.tar.TarFile.BoundedTarEntryInputStream#readArchive(long,ByteBuffer)",
        "org.apache.commons.compress.archivers.tar.TarArchiveEntry#getRealSize()"
    ],
    "org.apache.commons.compress.archivers.dump.DumpArchiveEntry.TYPE#TYPE(int)": ["org.apache.commons.compress.archivers.dump.DumpArchiveEntry.TYPE.<init>()"],
    "org.apache.commons.compress.archivers.tar.TarArchiveEntry#isLink()": ["org.apache.commons.compress.archivers.tar.TarConstants.<staticinit>()"],
    "org.apache.commons.compress.harmony.unpack200.NewAttributeBands.UnionCase#UnionCase(List<Integer>,List<LayoutElement>)": [
        "org.apache.commons.compress.harmony.unpack200.NewAttributeBands.LayoutElement.<init>()",
        "org.apache.commons.compress.harmony.unpack200.NewAttributeBands.UnionCase.<init>()"
    ],
    "org.apache.commons.compress.utils.BoundedSeekableByteChannelInputStream#BoundedSeekableByteChannelInputStream(long,long,SeekableByteChannel)": [
        "org.apache.commons.compress.utils.BoundedSeekableByteChannelInputStream.<init>()",
        "org.apache.commons.compress.utils.BoundedArchiveInputStream#BoundedArchiveInputStream(long,long)"
    ],
    "org.apache.commons.compress.archivers.sevenz.LZMA2Decoder#getDictSize(Object)": ["org.apache.commons.compress.archivers.sevenz.LZMA2Decoder#numberOptionOrDefault(Object)"],
    "org.apache.commons.compress.archivers.zip.ZipFile.<init>()": [
        "org.apache.commons.compress.archivers.zip.ZipFile.<staticinit>()",
        "org.apache.commons.compress.archivers.zip.ZipConstants.<staticinit>()"
    ],
    "org.apache.commons.compress.compressors.xz.XZUtils.<staticinit>()": [
        "org.apache.commons.compress.compressors.FileNameUtil#FileNameUtil(Map<String, String>,String)",
        "org.apache.commons.compress.utils.OsgiUtils.isRunningInOsgiEnvironment()",
        "org.apache.commons.compress.compressors.xz.XZUtils.setCacheXZAvailablity(boolean)",
        "org.apache.commons.compress.compressors.xz.XZUtils.CachedAvailability.<staticinit>()"
    ],
    "org.apache.commons.compress.archivers.zip.X000A_NTFS#getCreateJavaTime()": ["org.apache.commons.compress.archivers.zip.X000A_NTFS.zipToDate(ZipEightByteInteger)"],
    "org.apache.commons.compress.archivers.dump.DumpArchiveInputStream#getCount()": ["org.apache.commons.compress.archivers.dump.DumpArchiveInputStream#getBytesRead()"],
    "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream#validateSizeInformation(Zip64Mode)": [
        "org.apache.commons.compress.archivers.zip.Zip64RequiredException#Zip64RequiredException(String)",
        "org.apache.commons.compress.archivers.zip.Zip64RequiredException.getEntryTooBigMessage(ZipArchiveEntry)",
        "org.apache.commons.compress.archivers.zip.ZipArchiveEntry#getMethod()",
        "org.apache.commons.compress.archivers.zip.Zip64Mode.<staticinit>()",
        "org.apache.commons.compress.archivers.zip.ZipArchiveEntry#getSize()",
        "org.apache.commons.compress.archivers.ArchiveEntry.<staticinit>()",
        "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.<staticinit>()",
        "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.<staticinit>()",
        "org.apache.commons.compress.archivers.zip.ZipConstants.<staticinit>()"
    ],
    "org.apache.commons.compress.harmony.unpack200.bytecode.Attribute#Attribute(CPUTF8)": [
        "org.apache.commons.compress.harmony.unpack200.bytecode.ClassFileEntry.<init>()",
        "org.apache.commons.compress.harmony.unpack200.bytecode.Attribute.<init>()"
    ],
    "org.apache.commons.compress.archivers.cpio.CpioArchiveEntry#getNumberOfLinks()": ["org.apache.commons.compress.archivers.cpio.CpioArchiveEntry#isDirectory()"],
    "org.apache.commons.compress.archivers.sevenz.AES256SHA256Decoder.AES256SHA256DecoderOutputStream#write(byte[],int,int)": ["org.apache.commons.compress.archivers.sevenz.AES256SHA256Decoder.AES256SHA256DecoderOutputStream#flushBuffer()"],
    "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile#SevenZOutputFile(File,char[])": ["org.apache.commons.compress.archivers.sevenz.SevenZOutputFile#SevenZOutputFile(File,char[])"],
    "org.apache.commons.compress.compressors.xz.XZCompressorInputStream#read(byte[],int,int)": [
        "org.apache.commons.compress.compressors.zstandard.ZstdCompressorInputStream#read(byte[],int,int)",
        "org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorInputStream#read(byte[],int,int)",
        "org.apache.commons.compress.archivers.sevenz.BoundedSeekableByteChannelInputStream#read(byte[],int,int)",
        "org.apache.commons.compress.compressors.deflate64.Deflate64CompressorInputStream#read(byte[],int,int)",
        "org.apache.commons.compress.compressors.CompressorInputStream#count(int)",
        "org.apache.commons.compress.compressors.brotli.BrotliCompressorInputStream#read(byte[],int,int)",
        "org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream#read(byte[],int,int)",
        "org.apache.commons.compress.archivers.sevenz.AES256SHA256Decoder.AES256SHA256DecoderInputStream#read(byte[],int,int)",
        "org.apache.commons.compress.compressors.lzma.LZMACompressorInputStream#read(byte[],int,int)",
        "org.apache.commons.compress.compressors.lz4.BlockLZ4CompressorInputStream#read(byte[],int,int)",
        "org.apache.commons.compress.compressors.snappy.SnappyCompressorInputStream#read(byte[],int,int)",
        "org.apache.commons.compress.compressors.xz.XZCompressorInputStream#read(byte[],int,int)",
        "org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream#read(byte[],int,int)",
        "org.apache.commons.compress.utils.BoundedArchiveInputStream#read(byte[],int,int)",
        "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream#read(byte[],int,int)",
        "org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStream#read(byte[],int,int)",
        "org.apache.commons.compress.compressors.lzw.LZWInputStream#read(byte[],int,int)",
        "org.apache.commons.compress.MemoryLimitException#MemoryLimitException(long,int,Exception)",
        "org.apache.commons.compress.compressors.deflate.DeflateCompressorInputStream#read(byte[],int,int)"
    ],
    "org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp.<staticinit>()": ["org.apache.commons.compress.archivers.zip.ZipShort#ZipShort(int)"],
    "org.apache.commons.compress.archivers.tar.TarArchiveEntry#TarArchiveEntry(byte[])": [
        "org.apache.commons.compress.archivers.tar.TarArchiveEntry#TarArchiveEntry(boolean)",
        "org.apache.commons.compress.archivers.tar.TarArchiveEntry#parseTarHeader(byte[])"
    ],
    "org.apache.commons.compress.archivers.zip.ZipArchiveEntry#ZipArchiveEntry(ZipEntry)": ["org.apache.commons.compress.archivers.zip.ZipArchiveEntry#ZipArchiveEntry(Function<ZipShort, ZipExtraField>,ZipEntry)"],
    "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream#sendMTFValues1(int,int)": [
        "org.apache.commons.compress.compressors.bzip2.BZip2Constants.<staticinit>()",
        "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.hbMakeCodeLengths(byte[],int[],Data,int,int)"
    ],
    "org.apache.commons.compress.archivers.sevenz.AES256SHA256Decoder#encode(OutputStream,Object)": ["org.apache.commons.compress.archivers.sevenz.AES256SHA256Decoder.AES256SHA256DecoderOutputStream#AES256SHA256DecoderOutputStream(AES256Options,OutputStream)"],
    "org.apache.commons.compress.archivers.tar.TarArchiveStructSparse#TarArchiveStructSparse(long,long)": ["org.apache.commons.compress.archivers.tar.TarArchiveStructSparse.<init>()"],
    "org.apache.commons.compress.harmony.unpack200.bytecode.forms.SuperFieldRefForm#getPoolID()": ["org.apache.commons.compress.harmony.unpack200.SegmentConstantPool.<staticinit>()"],
    "org.apache.commons.compress.harmony.pack200.CPUTF8#CPUTF8(String)": [
        "org.apache.commons.compress.harmony.pack200.ConstantPoolEntry.<init>()",
        "org.apache.commons.compress.harmony.pack200.CPUTF8.<init>()"
    ],
    "org.apache.commons.compress.compressors.FileNameUtil#getUncompressedFilename(String)": ["org.apache.commons.compress.compressors.FileNameUtil#getUncompressedFileName(String)"],
    "org.apache.commons.compress.archivers.zip.RandomAccessOutputStream#writeFully(byte[],long)": [
        "org.apache.commons.compress.archivers.zip.SeekableChannelRandomAccessOutputStream#writeFully(byte[],int,int,long)",
        "org.apache.commons.compress.archivers.zip.ZipSplitOutputStream#writeFully(byte[],int,int,long)",
        "org.apache.commons.compress.archivers.zip.FileRandomAccessOutputStream#writeFully(byte[],int,int,long)"
    ]
}