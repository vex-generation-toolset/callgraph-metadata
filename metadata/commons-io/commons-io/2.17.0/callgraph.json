{
    "org.apache.commons.io.IOUtils.write(byte[],Writer,String)": [
        "org.apache.commons.io.IOUtils.write(byte[],Writer,Charset)",
        "org.apache.commons.io.Charsets.toCharset(String)"
    ],
    "org.apache.commons.io.build.AbstractOriginSupplier#setWriter(Writer)": [
        "org.apache.commons.io.input.Tailer.Builder#setOrigin(AbstractOrigin<?, ?>)",
        "org.apache.commons.io.build.AbstractOriginSupplier.newWriterOrigin(Writer)",
        "org.apache.commons.io.build.AbstractOriginSupplier#setOrigin(AbstractOrigin<?, ?>)"
    ],
    "org.apache.commons.io.output.NullWriter.<staticinit>()": ["org.apache.commons.io.output.NullWriter#NullWriter()"],
    "org.apache.commons.io.filefilter.FalseFileFilter.<staticinit>()": ["org.apache.commons.io.filefilter.FalseFileFilter#FalseFileFilter()"],
    "org.apache.commons.io.file.CleaningPathVisitor#visitFile(Path,BasicFileAttributes)": [
        "org.apache.commons.io.file.AccumulatorPathVisitor#updateFileCounters(Path,BasicFileAttributes)",
        "org.apache.commons.io.file.PathUtils.setReadOnly(Path,boolean,LinkOption[]...)",
        "org.apache.commons.io.file.CleaningPathVisitor#accept(Path)",
        "org.apache.commons.io.file.CountingPathVisitor#updateFileCounters(Path,BasicFileAttributes)"
    ],
    "org.apache.commons.io.input.BrokenReader#skip(long)": ["org.apache.commons.io.input.BrokenReader#rethrow()"],
    "org.apache.commons.io.FileUtils.copyFile(File,File,CopyOption[]...)": ["org.apache.commons.io.FileUtils.copyFile(File,File,boolean,CopyOption[]...)"],
    "org.apache.commons.io.input.ObservableInputStream#read(byte[])": [
        "org.apache.commons.io.input.ObservableInputStream#notify(byte[],int,int,IOException)",
        "org.apache.commons.io.input.ProxyInputStream#read(byte[])"
    ],
    "org.apache.commons.io.file.FilesUncheck.createSymbolicLink(Path,Path,FileAttribute<?>[]...)": ["org.apache.commons.io.function.Uncheck.apply(IOTriFunction<T, U, V, R>,T,U,V)"],
    "org.apache.commons.io.monitor.FileAlterationObserver#FileAlterationObserver(String,FileFilter,IOCase)": ["org.apache.commons.io.monitor.FileAlterationObserver#FileAlterationObserver(File,FileFilter,IOCase)"],
    "org.apache.commons.io.function.IOStream#map(IOFunction<? super T, ? extends R>)": [
        "org.apache.commons.io.function.IOStream.adapt(Stream<T>)",
        "org.apache.commons.io.function.Erase.apply(IOFunction<? super T, ? extends R>,T)",
        "org.apache.commons.io.function.IOBaseStreamAdapter#unwrap()"
    ],
    "org.apache.commons.io.FilenameUtils.getAdsCriticalOffset(String)": ["org.apache.commons.io.FilenameUtils.<staticinit>()"],
    "org.apache.commons.io.input.InfiniteCircularInputStream#InfiniteCircularInputStream(byte[])": [
        "org.apache.commons.io.input.InfiniteCircularInputStream.<init>()",
        "org.apache.commons.io.input.CircularInputStream#CircularInputStream(byte[],long)"
    ],
    "org.apache.commons.io.input.UncheckedFilterReader#close()": ["org.apache.commons.io.function.Uncheck.run(IORunnable)"],
    "org.apache.commons.io.FileSystemUtils.freeSpaceKb()": ["org.apache.commons.io.FileSystemUtils.freeSpaceKb(long)"],
    "org.apache.commons.io.input.UnsynchronizedFilterInputStream#mark(int)": [
        "org.apache.commons.io.input.WindowsLineEndingInputStream#mark(int)",
        "org.apache.commons.io.input.UnsynchronizedByteArrayInputStream#mark(int)",
        "org.apache.commons.io.input.UnixLineEndingInputStream#mark(int)",
        "org.apache.commons.io.input.NullInputStream#mark(int)",
        "org.apache.commons.io.input.UnsynchronizedBufferedInputStream#mark(int)",
        "org.apache.commons.io.input.UnsynchronizedFilterInputStream#mark(int)",
        "org.apache.commons.io.input.CharSequenceInputStream#mark(int)"
    ],
    "org.apache.commons.io.file.PathUtils.getLastModifiedFileTime(URI)": ["org.apache.commons.io.file.PathUtils.<staticinit>()"],
    "org.apache.commons.io.FileUtils.sizeOfAsBigInteger(File)": [
        "org.apache.commons.io.function.Uncheck.get(IOSupplier<T>)",
        "org.apache.commons.io.file.PathUtils.sizeOfAsBigInteger(Path)"
    ],
    "org.apache.commons.io.file.PathUtils.requireExists(Path,String,LinkOption[]...)": ["org.apache.commons.io.file.PathUtils.exists(Path,LinkOption[]...)"],
    "org.apache.commons.io.file.PathUtils.visitFileTree(T extends FileVisitor,URI)": ["org.apache.commons.io.file.PathUtils.visitFileTree(T extends FileVisitor,Path)"],
    "org.apache.commons.io.output.AbstractByteArrayOutputStream#writeImpl(int)": ["org.apache.commons.io.output.AbstractByteArrayOutputStream#needNewBuffer(int)"],
    "org.apache.commons.io.output.ByteArrayOutputStream#write(InputStream)": ["org.apache.commons.io.output.AbstractByteArrayOutputStream#writeImpl(InputStream)"],
    "org.apache.commons.io.build.AbstractOriginSupplier#setByteArray(byte[])": [
        "org.apache.commons.io.input.Tailer.Builder#setOrigin(AbstractOrigin<?, ?>)",
        "org.apache.commons.io.build.AbstractOriginSupplier.newByteArrayOrigin(byte[])",
        "org.apache.commons.io.build.AbstractOriginSupplier#setOrigin(AbstractOrigin<?, ?>)"
    ],
    "org.apache.commons.io.output.UnsynchronizedByteArrayOutputStream#UnsynchronizedByteArrayOutputStream()": [
        "org.apache.commons.io.output.UnsynchronizedByteArrayOutputStream#UnsynchronizedByteArrayOutputStream(int)",
        "org.apache.commons.io.output.AbstractByteArrayOutputStream.<staticinit>()"
    ],
    "org.apache.commons.io.output.FilterCollectionWriter#append(CharSequence)": [
        "org.apache.commons.io.output.AppendableWriter#append(CharSequence)",
        "org.apache.commons.io.output.FilterCollectionWriter#append(CharSequence)",
        "org.apache.commons.io.output.NullWriter#append(CharSequence)",
        "org.apache.commons.io.output.ProxyCollectionWriter#append(CharSequence)",
        "org.apache.commons.io.output.FilterCollectionWriter#forAllWriters(IOConsumer<Writer>)",
        "org.apache.commons.io.output.StringBuilderWriter#append(CharSequence)"
    ],
    "org.apache.commons.io.output.TaggedOutputStream#throwIfCauseOf(Exception)": ["org.apache.commons.io.TaggedIOException.throwCauseIfTaggedWith(Throwable,Object)"],
    "org.apache.commons.io.filefilter.OrFileFilter#OrFileFilter(IOFileFilter,IOFileFilter)": [
        "org.apache.commons.io.filefilter.OrFileFilter#OrFileFilter(int)",
        "org.apache.commons.io.filefilter.OrFileFilter#addFileFilter(IOFileFilter)"
    ],
    "org.apache.commons.io.monitor.FileAlterationObserver#FileAlterationObserver(FileEntry,FileFilter,IOCase)": [
        "org.apache.commons.io.monitor.FileAlterationObserver.toComparator(IOCase)",
        "org.apache.commons.io.monitor.FileAlterationObserver#FileAlterationObserver(FileEntry,FileFilter,Comparator<File>)"
    ],
    "org.apache.commons.io.input.Tailer.TailablePath#isNewer(FileTime)": ["org.apache.commons.io.file.PathUtils.isNewer(Path,FileTime,LinkOption[]...)"],
    "org.apache.commons.io.IOCase.<staticinit>()": [
        "org.apache.commons.io.FileSystem#isCaseSensitive()",
        "org.apache.commons.io.FileSystem.getCurrent()"
    ],
    "org.apache.commons.io.IOUtils.consume(InputStream)": [
        "org.apache.commons.io.IOUtils.copyLarge(InputStream,OutputStream)",
        "org.apache.commons.io.IOUtils.<staticinit>()",
        "org.apache.commons.io.output.NullOutputStream.<staticinit>()"
    ],
    "org.apache.commons.io.file.Counters.noopCounter()": ["org.apache.commons.io.file.Counters.NoopCounter.<staticinit>()"],
    "org.apache.commons.io.serialization.WildcardClassNameMatcher#matches(String)": ["org.apache.commons.io.FilenameUtils.wildcardMatch(String,String)"],
    "org.apache.commons.io.output.ProxyCollectionWriter#write(int)": [
        "org.apache.commons.io.output.ProxyCollectionWriter#beforeWrite(int)",
        "org.apache.commons.io.output.ProxyCollectionWriter#handleIOException(IOException)",
        "org.apache.commons.io.output.ProxyCollectionWriter#afterWrite(int)",
        "org.apache.commons.io.output.FilterCollectionWriter#write(int)"
    ],
    "org.apache.commons.io.input.ReaderInputStream.Builder#setCharset(Charset)": [
        "org.apache.commons.io.build.AbstractStreamBuilder#setCharset(Charset)",
        "org.apache.commons.io.build.AbstractStreamBuilder#getCharset()",
        "org.apache.commons.io.input.ReaderInputStream.newEncoder(Charset)"
    ],
    "org.apache.commons.io.comparator.ReverseFileComparator#toString()": [
        "org.apache.commons.io.comparator.ExtensionFileComparator#toString()",
        "org.apache.commons.io.comparator.NameFileComparator#toString()",
        "org.apache.commons.io.comparator.CompositeFileComparator#toString()",
        "org.apache.commons.io.comparator.SizeFileComparator#toString()",
        "org.apache.commons.io.comparator.PathFileComparator#toString()",
        "org.apache.commons.io.comparator.AbstractFileComparator#toString()",
        "org.apache.commons.io.comparator.ReverseFileComparator#toString()"
    ],
    "org.apache.commons.io.FileUtils.isFileOlder(File,Date)": ["org.apache.commons.io.FileUtils.isFileOlder(File,ChronoZonedDateTime<?>)"],
    "org.apache.commons.io.DirectoryWalker.CancelException#CancelException(File,int)": ["org.apache.commons.io.DirectoryWalker.CancelException#CancelException(String,File,int)"],
    "org.apache.commons.io.output.DeferredFileOutputStream#isInMemory()": ["org.apache.commons.io.output.ThresholdingOutputStream#isThresholdExceeded()"],
    "org.apache.commons.io.comparator.DirectoryFileComparator.<staticinit>()": [
        "org.apache.commons.io.comparator.ReverseFileComparator#ReverseFileComparator(Comparator<File>)",
        "org.apache.commons.io.comparator.DirectoryFileComparator.<init>()"
    ],
    "org.apache.commons.io.function.IOSpliterator#trySplit()": [
        "org.apache.commons.io.function.IOSpliteratorAdapter#unwrap()",
        "org.apache.commons.io.function.IOSpliterator.adapt(Spliterator<E>)",
        "org.apache.commons.io.function.UncheckedIOSpliterator#trySplit()"
    ],
    "org.apache.commons.io.CloseableURLConnection#setDefaultUseCaches(boolean)": ["org.apache.commons.io.CloseableURLConnection#setDefaultUseCaches(boolean)"],
    "org.apache.commons.io.filefilter.FileFilterUtils.ageFileFilter(File)": ["org.apache.commons.io.filefilter.AgeFileFilter#AgeFileFilter(File)"],
    "org.apache.commons.io.function.Erase.test(IOPredicate<? super T>,T)": ["org.apache.commons.io.function.Erase.rethrow(Throwable)"],
    "org.apache.commons.io.input.UncheckedFilterReader#read(CharBuffer)": ["org.apache.commons.io.function.Uncheck.apply(IOFunction<T, R>,T)"],
    "org.apache.commons.io.filefilter.FileFilterUtils.ageFileFilter(long,boolean)": ["org.apache.commons.io.filefilter.AgeFileFilter#AgeFileFilter(long,boolean)"],
    "org.apache.commons.io.filefilter.TrueFileFilter.<staticinit>()": ["org.apache.commons.io.filefilter.TrueFileFilter#TrueFileFilter()"],
    "org.apache.commons.io.output.UncheckedFilterWriter.Builder.<init>()": ["org.apache.commons.io.build.AbstractStreamBuilder.<init>()"],
    "org.apache.commons.io.filefilter.NameFileFilter#NameFileFilter(String,IOCase)": [
        "org.apache.commons.io.filefilter.AbstractFileFilter#AbstractFileFilter()",
        "org.apache.commons.io.filefilter.NameFileFilter#toIOCase(IOCase)",
        "org.apache.commons.io.filefilter.NameFileFilter.<init>()"
    ],
    "org.apache.commons.io.build.AbstractStreamBuilder#setCharset(Charset)": [
        "org.apache.commons.io.build.AbstractSupplier#asThis()",
        "org.apache.commons.io.Charsets.toCharset(Charset,Charset)"
    ],
    "org.apache.commons.io.input.UnsynchronizedFilterInputStream#UnsynchronizedFilterInputStream(InputStream)": ["org.apache.commons.io.input.UnsynchronizedFilterInputStream.<init>()"],
    "org.apache.commons.io.FileUtils.cleanDirectory(File)": [
        "org.apache.commons.io.FileUtils.listFiles(File,FileFilter)",
        "org.apache.commons.io.function.IOConsumer.forAll(IOConsumer<T>,Iterable<T>)"
    ],
    "org.apache.commons.io.input.CharSequenceInputStream#read()": [
        "org.apache.commons.io.input.CharSequenceInputStream#fillBuffer()",
        "org.apache.commons.io.IOUtils.<staticinit>()"
    ],
    "org.apache.commons.io.filefilter.WildcardFileFilter#toString()": [
        "org.apache.commons.io.filefilter.AbstractFileFilter#toString()",
        "org.apache.commons.io.filefilter.AbstractFileFilter#append(Object[],StringBuilder)"
    ],
    "org.apache.commons.io.function.IOIteratorAdapter#next()": [
        "org.apache.commons.io.StreamIterator#next()",
        "org.apache.commons.io.function.IOStream.iterate(T,IOUnaryOperator<T>)$Iterator$1#next()",
        "org.apache.commons.io.function.UncheckedIOIterator#next()"
    ],
    "org.apache.commons.io.output.LockableFileWriter.Builder#setLockDirectory(String)": [
        "org.apache.commons.io.build.AbstractOriginSupplier.newFileOrigin(String)",
        "org.apache.commons.io.FileUtils.getTempDirectoryPath()"
    ],
    "org.apache.commons.io.file.FilesUncheck.getPosixFilePermissions(Path,LinkOption[]...)": ["org.apache.commons.io.function.Uncheck.apply(IOBiFunction<T, U, R>,T,U)"],
    "org.apache.commons.io.filefilter.FileFilterUtils.makeFileOnly(IOFileFilter)": [
        "org.apache.commons.io.filefilter.FileFileFilter.<staticinit>()",
        "org.apache.commons.io.filefilter.FalseFileFilter#and(IOFileFilter)",
        "org.apache.commons.io.filefilter.TrueFileFilter#and(IOFileFilter)",
        "org.apache.commons.io.filefilter.IOFileFilter#and(IOFileFilter)"
    ],
    "org.apache.commons.io.input.NullInputStream#NullInputStream()": ["org.apache.commons.io.input.NullInputStream#NullInputStream(long,boolean,boolean)"],
    "org.apache.commons.io.FileCleaner.exitWhenFinished()": [
        "org.apache.commons.io.FileCleaningTracker#exitWhenFinished()",
        "org.apache.commons.io.FileCleaner.<staticinit>()"
    ],
    "org.apache.commons.io.build.AbstractOrigin.PathOrigin#getPath()": ["org.apache.commons.io.build.AbstractOrigin#get()"],
    "org.apache.commons.io.file.PathUtils.withPosixFileAttributes(Path,LinkOption[],boolean,IOFunction<PosixFileAttributes, R>)": ["org.apache.commons.io.file.PathUtils.readPosixFileAttributes(Path,LinkOption[]...)"],
    "org.apache.commons.io.input.CharSequenceInputStream#read(byte[])": ["org.apache.commons.io.input.CharSequenceInputStream#read(byte[],int,int)"],
    "org.apache.commons.io.IOUtils.closeQuietly(Closeable[]...)": ["org.apache.commons.io.IOUtils.closeQuietly(Closeable)"],
    "org.apache.commons.io.function.IOStreams.toIOConsumer(IOConsumer<T>)": ["org.apache.commons.io.function.IOConsumer.noop()"],
    "org.apache.commons.io.FileUtils.isFileOlder(File,ChronoLocalDateTime<?>)": ["org.apache.commons.io.FileUtils.isFileOlder(File,ChronoLocalDateTime<?>,ZoneId)"],
    "org.apache.commons.io.input.buffer.CircularByteBuffer#CircularByteBuffer()": [
        "org.apache.commons.io.IOUtils.<staticinit>()",
        "org.apache.commons.io.input.buffer.CircularByteBuffer#CircularByteBuffer(int)"
    ],
    "org.apache.commons.io.input.CharSequenceReader#CharSequenceReader(CharSequence,int)": ["org.apache.commons.io.input.CharSequenceReader#CharSequenceReader(CharSequence,int,int)"],
    "org.apache.commons.io.FileUtils.convertFileCollectionToFileArray(Collection<File>)": ["org.apache.commons.io.FileUtils.<staticinit>()"],
    "org.apache.commons.io.IOUtils.toByteArray(URI)": ["org.apache.commons.io.IOUtils.toByteArray(Reader)"],
    "org.apache.commons.io.DirectoryWalker#DirectoryWalker(IOFileFilter,IOFileFilter,int)": [
        "org.apache.commons.io.DirectoryWalker.<init>()",
        "org.apache.commons.io.filefilter.TrueFileFilter#or(IOFileFilter)",
        "org.apache.commons.io.filefilter.IOFileFilter#or(IOFileFilter)",
        "org.apache.commons.io.filefilter.FalseFileFilter#or(IOFileFilter)",
        "org.apache.commons.io.filefilter.FileFilterUtils.makeFileOnly(IOFileFilter)",
        "org.apache.commons.io.filefilter.FileFilterUtils.makeDirectoryOnly(IOFileFilter)",
        "org.apache.commons.io.filefilter.TrueFileFilter.<staticinit>()"
    ],
    "org.apache.commons.io.function.IOStream#min(IOComparator<? super T>)": [
        "org.apache.commons.io.function.Erase.compare(IOComparator<? super T>,T,T)",
        "org.apache.commons.io.function.IOBaseStreamAdapter#unwrap()"
    ],
    "org.apache.commons.io.output.XmlStreamWriter.<init>()": ["org.apache.commons.io.output.XmlStreamWriter.<staticinit>()"],
    "org.apache.commons.io.output.BrokenOutputStream#BrokenOutputStream(Supplier<Throwable>)": ["org.apache.commons.io.output.BrokenOutputStream.<init>()"],
    "org.apache.commons.io.filefilter.RegexFileFilter.toFlags(IOCase)": ["org.apache.commons.io.IOCase.isCaseSensitive(IOCase)"],
    "org.apache.commons.io.FileUtils.byteCountToDisplaySize(long)": ["org.apache.commons.io.FileUtils.byteCountToDisplaySize(long)"],
    "org.apache.commons.io.input.CloseShieldInputStream#close()": ["org.apache.commons.io.input.ClosedInputStream.<staticinit>()"],
    "org.apache.commons.io.input.Tailer#Tailer(File,TailerListener,long,boolean)": [
        "org.apache.commons.io.IOUtils.<staticinit>()",
        "org.apache.commons.io.input.Tailer#Tailer(File,TailerListener,long,boolean,int)"
    ],
    "org.apache.commons.io.output.ChunkedWriter.<staticinit>()": ["org.apache.commons.io.IOUtils.<staticinit>()"],
    "org.apache.commons.io.output.UncheckedFilterOutputStream.Builder#get()": [
        "org.apache.commons.io.output.UncheckedFilterOutputStream#UncheckedFilterOutputStream(OutputStream)",
        "org.apache.commons.io.build.AbstractStreamBuilder#getOutputStream()"
    ],
    "org.apache.commons.io.FilenameUtils.isSeparator(char)": ["org.apache.commons.io.FilenameUtils.<staticinit>()"],
    "org.apache.commons.io.filefilter.WildcardFileFilter#WildcardFileFilter(List<String>)": [
        "org.apache.commons.io.IOCase.<staticinit>()",
        "org.apache.commons.io.filefilter.WildcardFileFilter#WildcardFileFilter(List<String>,IOCase)"
    ],
    "org.apache.commons.io.input.ByteBufferCleaner.getCleaner()": [
        "org.apache.commons.io.input.ByteBufferCleaner.Java9Cleaner#Java9Cleaner()",
        "org.apache.commons.io.input.ByteBufferCleaner.Java8Cleaner#Java8Cleaner()"
    ],
    "org.apache.commons.io.comparator.ExtensionFileComparator#ExtensionFileComparator(IOCase)": [
        "org.apache.commons.io.IOCase.value(IOCase,IOCase)",
        "org.apache.commons.io.comparator.AbstractFileComparator.<init>()",
        "org.apache.commons.io.comparator.ExtensionFileComparator.<init>()",
        "org.apache.commons.io.IOCase.<staticinit>()"
    ],
    "org.apache.commons.io.file.PathUtils.delete(Path,DeleteOption[]...)": [
        "org.apache.commons.io.file.PathUtils.deleteDirectory(Path,DeleteOption[]...)",
        "org.apache.commons.io.file.PathUtils.deleteFile(Path,DeleteOption[]...)"
    ],
    "org.apache.commons.io.RandomAccessFiles.contentEquals(RandomAccessFile,RandomAccessFile)": [
        "org.apache.commons.io.IOUtils.<staticinit>()",
        "org.apache.commons.io.RandomAccessFiles.length(RandomAccessFile)",
        "org.apache.commons.io.channels.FileChannels.contentEquals(FileChannel,FileChannel,int)"
    ],
    "org.apache.commons.io.output.XmlStreamWriter#XmlStreamWriter(OutputStream)": ["org.apache.commons.io.output.XmlStreamWriter#XmlStreamWriter(OutputStream,Charset)"],
    "org.apache.commons.io.input.Tailer.TailablePath#getRandomAccess(String)": ["org.apache.commons.io.input.Tailer.RandomAccessFileBridge#RandomAccessFileBridge(File,String)"],
    "org.apache.commons.io.DirectoryWalker#DirectoryWalker(FileFilter,int)": ["org.apache.commons.io.DirectoryWalker.<init>()"],
    "org.apache.commons.io.input.MemoryMappedFileInputStream#nextBuffer()": [
        "org.apache.commons.io.input.MemoryMappedFileInputStream.<staticinit>()",
        "org.apache.commons.io.input.MemoryMappedFileInputStream#cleanBuffer()"
    ],
    "org.apache.commons.io.build.AbstractStreamBuilder#getBufferSize()": ["org.apache.commons.io.IOUtils.<staticinit>()"],
    "org.apache.commons.io.FileUtils.copyInputStreamToFile(InputStream,File)": ["org.apache.commons.io.FileUtils.copyToFile(InputStream,File)"],
    "org.apache.commons.io.file.FilesUncheck.setLastModifiedTime(Path,FileTime)": ["org.apache.commons.io.function.Uncheck.apply(IOBiFunction<T, U, R>,T,U)"],
    "org.apache.commons.io.input.CircularInputStream.<init>()": ["org.apache.commons.io.IOUtils.<staticinit>()"],
    "org.apache.commons.io.filefilter.PrefixFileFilter#PrefixFileFilter(List<String>,IOCase)": [
        "org.apache.commons.io.filefilter.AbstractFileFilter#AbstractFileFilter()",
        "org.apache.commons.io.IOCase.value(IOCase,IOCase)",
        "org.apache.commons.io.filefilter.PrefixFileFilter.<init>()",
        "org.apache.commons.io.IOCase.<staticinit>()",
        "org.apache.commons.io.filefilter.IOFileFilter.<staticinit>()"
    ],
    "org.apache.commons.io.function.IOStreamAdapter#IOStreamAdapter(Stream<T>)": [
        "org.apache.commons.io.function.IOStreamAdapter.<init>()",
        "org.apache.commons.io.function.IOBaseStreamAdapter#IOBaseStreamAdapter(B extends BaseStream)"
    ],
    "org.apache.commons.io.LineIterator#nextLine()": ["org.apache.commons.io.LineIterator#hasNext()"],
    "org.apache.commons.io.ThreadUtils.sleep(Duration)": ["org.apache.commons.io.ThreadUtils.getNanosOfMilli(Duration)"],
    "org.apache.commons.io.function.IOSpliterator#hasCharacteristics(int)": [
        "org.apache.commons.io.function.IOSpliteratorAdapter#unwrap()",
        "org.apache.commons.io.function.UncheckedIOSpliterator#hasCharacteristics(int)"
    ],
    "org.apache.commons.io.input.ReaderInputStream#ReaderInputStream(Reader,CharsetEncoder)": [
        "org.apache.commons.io.IOUtils.<staticinit>()",
        "org.apache.commons.io.input.ReaderInputStream#ReaderInputStream(Reader,CharsetEncoder,int)"
    ],
    "org.apache.commons.io.output.UnsynchronizedByteArrayOutputStream.Builder.<init>()": ["org.apache.commons.io.build.AbstractStreamBuilder.<init>()"],
    "org.apache.commons.io.output.DeferredFileOutputStream.Builder#get()": [
        "org.apache.commons.io.build.AbstractStreamBuilder#getBufferSize()",
        "org.apache.commons.io.output.DeferredFileOutputStream#DeferredFileOutputStream(int,Path,String,String,Path,int)"
    ],
    "org.apache.commons.io.monitor.FileEntry#FileEntry(File)": ["org.apache.commons.io.monitor.FileEntry#FileEntry(FileEntry,File)"],
    "org.apache.commons.io.FilenameUtils.toSeparator(boolean)": ["org.apache.commons.io.FilenameUtils.<staticinit>()"],
    "org.apache.commons.io.input.UncheckedBufferedReader.builder()": ["org.apache.commons.io.input.UncheckedBufferedReader.Builder.<init>()"],
    "org.apache.commons.io.FilenameUtils.splitOnTokens(String)": ["org.apache.commons.io.FilenameUtils.<staticinit>()"],
    "org.apache.commons.io.IOUtils.copy(Reader,Appendable)": [
        "org.apache.commons.io.IOUtils.copy(Reader,Appendable,CharBuffer)",
        "org.apache.commons.io.IOUtils.<staticinit>()"
    ],
    "org.apache.commons.io.comparator.ExtensionFileComparator.<staticinit>()": [
        "org.apache.commons.io.comparator.ReverseFileComparator#ReverseFileComparator(Comparator<File>)",
        "org.apache.commons.io.comparator.ExtensionFileComparator#ExtensionFileComparator(IOCase)",
        "org.apache.commons.io.IOCase.<staticinit>()",
        "org.apache.commons.io.comparator.ExtensionFileComparator#ExtensionFileComparator()"
    ],
    "org.apache.commons.io.serialization.WildcardClassNameMatcher#WildcardClassNameMatcher(String)": ["org.apache.commons.io.serialization.WildcardClassNameMatcher.<init>()"],
    "org.apache.commons.io.build.AbstractOriginSupplier#setOutputStream(OutputStream)": [
        "org.apache.commons.io.input.Tailer.Builder#setOrigin(AbstractOrigin<?, ?>)",
        "org.apache.commons.io.build.AbstractOriginSupplier.newOutputStreamOrigin(OutputStream)",
        "org.apache.commons.io.build.AbstractOriginSupplier#setOrigin(AbstractOrigin<?, ?>)"
    ],
    "org.apache.commons.io.output.UncheckedAppendable.on(Appendable)": ["org.apache.commons.io.output.UncheckedAppendableImpl#UncheckedAppendableImpl(Appendable)"],
    "org.apache.commons.io.function.IOIteratorAdapter.adapt(Iterator<E>)": ["org.apache.commons.io.function.IOIteratorAdapter#IOIteratorAdapter(Iterator<E>)"],
    "org.apache.commons.io.function.UncheckedIOIterator#remove()": ["org.apache.commons.io.function.Uncheck.run(IORunnable)"],
    "org.apache.commons.io.FilenameUtils.getPrefix(String)": [
        "org.apache.commons.io.FilenameUtils.getPrefixLength(String)",
        "org.apache.commons.io.FilenameUtils.requireNonNullChars(String)",
        "org.apache.commons.io.FilenameUtils.<staticinit>()"
    ],
    "org.apache.commons.io.file.FilesUncheck.list(Path)": ["org.apache.commons.io.function.Uncheck.apply(IOFunction<T, R>,T)"],
    "org.apache.commons.io.FileUtils.sizeOf(File)": [
        "org.apache.commons.io.file.PathUtils.sizeOf(Path)",
        "org.apache.commons.io.function.Uncheck.get(IOSupplier<T>)"
    ],
    "org.apache.commons.io.file.FilesUncheck#FilesUncheck()": ["org.apache.commons.io.file.FilesUncheck.<init>()"],
    "org.apache.commons.io.input.RandomAccessFileInputStream#RandomAccessFileInputStream(RandomAccessFile,boolean)": [
        "org.apache.commons.io.input.AbstractInputStream.<init>()",
        "org.apache.commons.io.input.RandomAccessFileInputStream.<init>()"
    ],
    "org.apache.commons.io.input.BoundedInputStream#BoundedInputStream(InputStream,long)": ["org.apache.commons.io.input.BoundedInputStream#BoundedInputStream(InputStream,long,long,boolean)"],
    "org.apache.commons.io.input.TeeReader#read()": [
        "org.apache.commons.io.output.FilterCollectionWriter#write(int)",
        "org.apache.commons.io.output.LockableFileWriter#write(int)",
        "org.apache.commons.io.output.AppendableWriter#write(int)",
        "org.apache.commons.io.input.ProxyReader#read()",
        "org.apache.commons.io.output.ProxyCollectionWriter#write(int)",
        "org.apache.commons.io.output.NullWriter#write(int)",
        "org.apache.commons.io.IOUtils.<staticinit>()"
    ],
    "org.apache.commons.io.filefilter.NameFileFilter#NameFileFilter(List<String>)": ["org.apache.commons.io.filefilter.NameFileFilter#NameFileFilter(List<String>,IOCase)"],
    "org.apache.commons.io.CopyUtils.copy(byte[],OutputStream)": [
        "org.apache.commons.io.output.ThresholdingOutputStream#write(byte[])",
        "org.apache.commons.io.output.WriterOutputStream#write(byte[])",
        "org.apache.commons.io.output.NullOutputStream#write(byte[])"
    ],
    "org.apache.commons.io.output.TeeOutputStream#write(byte[],int,int)": [
        "org.apache.commons.io.output.WriterOutputStream#write(byte[],int,int)",
        "org.apache.commons.io.output.AbstractByteArrayOutputStream#write(byte[],int,int)",
        "org.apache.commons.io.output.NullOutputStream#write(byte[],int,int)",
        "org.apache.commons.io.output.UnsynchronizedByteArrayOutputStream#write(byte[],int,int)",
        "org.apache.commons.io.output.ClosedOutputStream#write(byte[],int,int)",
        "org.apache.commons.io.output.ProxyOutputStream#write(byte[],int,int)",
        "org.apache.commons.io.output.ThresholdingOutputStream#write(byte[],int,int)",
        "org.apache.commons.io.output.ByteArrayOutputStream#write(byte[],int,int)"
    ],
    "org.apache.commons.io.IOUtils.toByteArray(URL)": [
        "org.apache.commons.io.IOUtils.toByteArray(URLConnection)",
        "org.apache.commons.io.CloseableURLConnection.open(URL)"
    ],
    "org.apache.commons.io.output.LockableFileWriter#LockableFileWriter(File,Charset)": ["org.apache.commons.io.output.LockableFileWriter#LockableFileWriter(File,Charset,boolean,String)"],
    "org.apache.commons.io.file.attribute.FileTimes.toNtfsTime(long)": ["org.apache.commons.io.file.attribute.FileTimes.<staticinit>()"],
    "org.apache.commons.io.input.UncheckedFilterReader#ready()": ["org.apache.commons.io.function.Uncheck.get(IOSupplier<T>)"],
    "org.apache.commons.io.IOUtils.toString(IOSupplier<InputStream>,Charset)": ["org.apache.commons.io.IOUtils.toString(IOSupplier<InputStream>,Charset,IOSupplier<String>)"],
    "org.apache.commons.io.FileUtils.byteCountToDisplaySize(BigInteger)": ["org.apache.commons.io.FileUtils.<staticinit>()"],
    "org.apache.commons.io.input.ObservableInputStream#read(byte[],int,int)": [
        "org.apache.commons.io.input.ProxyInputStream#read(byte[],int,int)",
        "org.apache.commons.io.input.ObservableInputStream#notify(byte[],int,int,IOException)"
    ],
    "org.apache.commons.io.build.AbstractOrigin.PathOrigin#PathOrigin(Path)": [
        "org.apache.commons.io.build.AbstractOrigin.PathOrigin.<init>()",
        "org.apache.commons.io.build.AbstractOrigin#AbstractOrigin(T)"
    ],
    "org.apache.commons.io.output.XmlStreamWriter#XmlStreamWriter(OutputStream,String)": [
        "org.apache.commons.io.Charsets.toCharset(String,Charset)",
        "org.apache.commons.io.output.XmlStreamWriter#XmlStreamWriter(OutputStream,Charset)"
    ],
    "org.apache.commons.io.input.UnsynchronizedByteArrayInputStream#read(byte[])": ["org.apache.commons.io.input.UnsynchronizedByteArrayInputStream#read(byte[],int,int)"],
    "org.apache.commons.io.HexDump#HexDump()": ["org.apache.commons.io.HexDump.<init>()"],
    "org.apache.commons.io.input.ReaderInputStream#ReaderInputStream(Reader,Charset,int)": [
        "org.apache.commons.io.Charsets.toCharset(Charset)",
        "org.apache.commons.io.input.ReaderInputStream#ReaderInputStream(Reader,Charset,int)"
    ],
    "org.apache.commons.io.IOExceptionWithCause#IOExceptionWithCause(Throwable)": ["org.apache.commons.io.IOExceptionWithCause.<init>()"],
    "org.apache.commons.io.input.ProxyInputStream#afterRead(int)": ["org.apache.commons.io.IOUtils.<staticinit>()"],
    "org.apache.commons.io.file.DeletingPathVisitor#preVisitDirectory(Path,BasicFileAttributes)": [
        "org.apache.commons.io.file.CountingPathVisitor#preVisitDirectory(Path,BasicFileAttributes)",
        "org.apache.commons.io.file.DeletingPathVisitor#accept(Path)"
    ],
    "org.apache.commons.io.output.TeeWriter#TeeWriter(Writer[]...)": [
        "org.apache.commons.io.output.ProxyCollectionWriter#ProxyCollectionWriter(Writer[]...)",
        "org.apache.commons.io.output.TeeWriter.<init>()"
    ],
    "org.apache.commons.io.input.ProxyInputStream#checkOpen()": [
        "org.apache.commons.io.input.Input.checkOpen(boolean)",
        "org.apache.commons.io.input.ProxyInputStream#isClosed()"
    ],
    "org.apache.commons.io.input.NullInputStream#skip(long)": [
        "org.apache.commons.io.input.NullInputStream#checkThrowEof(String)",
        "org.apache.commons.io.input.AbstractInputStream#isClosed()",
        "org.apache.commons.io.IOUtils.<staticinit>()",
        "org.apache.commons.io.input.NullInputStream#handleEof()"
    ],
    "org.apache.commons.io.IOUtils.toByteArray(IOTriFunction<byte[], Integer, Integer, Integer>,int)": [
        "org.apache.commons.io.IOUtils.byteArray(int)",
        "org.apache.commons.io.IOUtils.<staticinit>()"
    ],
    "org.apache.commons.io.IOUtils.copy(InputStream,Writer)": ["org.apache.commons.io.IOUtils.copy(InputStream,Writer,Charset)"],
    "org.apache.commons.io.monitor.FileEntry.<init>()": ["org.apache.commons.io.monitor.SerializableFileTime.<staticinit>()"],
    "org.apache.commons.io.CloseableURLConnection#getUseCaches()": ["org.apache.commons.io.CloseableURLConnection#getUseCaches()"],
    "org.apache.commons.io.input.ProxyInputStream#read()": [
        "org.apache.commons.io.input.AutoCloseInputStream#afterRead(int)",
        "org.apache.commons.io.input.ProxyInputStream#afterRead(int)",
        "org.apache.commons.io.input.ReaderInputStream#read()",
        "org.apache.commons.io.input.UnixLineEndingInputStream#read()",
        "org.apache.commons.io.input.BoundedInputStream#afterRead(int)",
        "org.apache.commons.io.input.CountingInputStream#afterRead(int)",
        "org.apache.commons.io.input.NullInputStream#read()",
        "org.apache.commons.io.IOUtils.<staticinit>()",
        "org.apache.commons.io.input.ThrottledInputStream#beforeRead(int)",
        "org.apache.commons.io.input.BufferedFileChannelInputStream#read()",
        "org.apache.commons.io.input.WindowsLineEndingInputStream#read()",
        "org.apache.commons.io.input.ProxyInputStream#beforeRead(int)",
        "org.apache.commons.io.input.BrokenInputStream#read()",
        "org.apache.commons.io.input.ClosedInputStream#read()",
        "org.apache.commons.io.input.TaggedInputStream#handleIOException(IOException)",
        "org.apache.commons.io.input.ChecksumInputStream#afterRead(int)",
        "org.apache.commons.io.input.CharSequenceInputStream#read()",
        "org.apache.commons.io.input.UnsynchronizedByteArrayInputStream#read()",
        "org.apache.commons.io.input.RandomAccessFileInputStream#read()",
        "org.apache.commons.io.input.UnsynchronizedFilterInputStream#read()",
        "org.apache.commons.io.input.DemuxInputStream#read()",
        "org.apache.commons.io.input.QueueInputStream#read()",
        "org.apache.commons.io.input.MemoryMappedFileInputStream#read()",
        "org.apache.commons.io.input.UnsynchronizedBufferedInputStream#read()",
        "org.apache.commons.io.input.ProxyInputStream#handleIOException(IOException)",
        "org.apache.commons.io.input.CircularInputStream#read()"
    ],
    "org.apache.commons.io.filefilter.PrefixFileFilter#toString()": [
        "org.apache.commons.io.filefilter.AbstractFileFilter#append(Object[],StringBuilder)",
        "org.apache.commons.io.filefilter.AbstractFileFilter#toString()"
    ],
    "org.apache.commons.io.filefilter.WildcardFilter#accept(File,String)": ["org.apache.commons.io.FilenameUtils.wildcardMatch(String,String)"],
    "org.apache.commons.io.output.TeeWriter#TeeWriter(Collection<Writer>)": [
        "org.apache.commons.io.output.ProxyCollectionWriter#ProxyCollectionWriter(Collection<Writer>)",
        "org.apache.commons.io.output.TeeWriter.<init>()"
    ],
    "org.apache.commons.io.file.spi.FileSystemProviders#FileSystemProviders(List<FileSystemProvider>)": ["org.apache.commons.io.file.spi.FileSystemProviders.<init>()"],
    "org.apache.commons.io.input.NullInputStream#reset()": [
        "org.apache.commons.io.input.UnsupportedOperationExceptions.reset()",
        "org.apache.commons.io.input.AbstractInputStream#setClosed(boolean)"
    ],
    "org.apache.commons.io.input.Tailer#Tailer(Tailable,Charset,TailerListener,Duration,boolean,boolean,int)": [
        "org.apache.commons.io.input.TailerListenerAdapter#init(Tailer)",
        "org.apache.commons.io.IOUtils.byteArray(int)",
        "org.apache.commons.io.input.Tailer.<init>()"
    ],
    "org.apache.commons.io.input.ReadAheadInputStream#skipInternal(long)": [
        "org.apache.commons.io.input.UnsynchronizedFilterInputStream#skip(long)",
        "org.apache.commons.io.input.NullInputStream#skip(long)",
        "org.apache.commons.io.input.ReadAheadInputStream#swapBuffers()",
        "org.apache.commons.io.input.UnsynchronizedByteArrayInputStream#skip(long)",
        "org.apache.commons.io.input.ReadAheadInputStream#readAsync()",
        "org.apache.commons.io.input.ReadAheadInputStream#available()",
        "org.apache.commons.io.input.RandomAccessFileInputStream#skip(long)",
        "org.apache.commons.io.input.UnsynchronizedBufferedInputStream#skip(long)",
        "org.apache.commons.io.input.ReadAheadInputStream#waitForAsyncReadComplete()",
        "org.apache.commons.io.input.CharSequenceInputStream#skip(long)",
        "org.apache.commons.io.input.ReadAheadInputStream#isEndOfStream()",
        "org.apache.commons.io.input.BufferedFileChannelInputStream#skip(long)",
        "org.apache.commons.io.input.MemoryMappedFileInputStream#skip(long)",
        "org.apache.commons.io.input.BrokenInputStream#skip(long)"
    ],
    "org.apache.commons.io.output.ProxyCollectionWriter#append(CharSequence)": [
        "org.apache.commons.io.output.FilterCollectionWriter#append(CharSequence)",
        "org.apache.commons.io.IOUtils.length(CharSequence)",
        "org.apache.commons.io.output.ProxyCollectionWriter#handleIOException(IOException)",
        "org.apache.commons.io.output.ProxyCollectionWriter#afterWrite(int)",
        "org.apache.commons.io.output.ProxyCollectionWriter#beforeWrite(int)"
    ],
    "org.apache.commons.io.input.Tailer#getFile()": ["org.apache.commons.io.input.Tailer.TailablePath#getPath()"],
    "org.apache.commons.io.input.ReaderInputStream#ReaderInputStream(Reader,CharsetEncoder,int)": [
        "org.apache.commons.io.input.ReaderInputStream.checkMinBufferSize(CharsetEncoder,int)",
        "org.apache.commons.io.charset.CharsetEncoders.toCharsetEncoder(CharsetEncoder)",
        "org.apache.commons.io.input.AbstractInputStream.<init>()",
        "org.apache.commons.io.input.ReaderInputStream.<init>()"
    ],
    "org.apache.commons.io.build.AbstractOrigin.InputStreamOrigin#getByteArray()": ["org.apache.commons.io.IOUtils.toByteArray(InputStream)"],
    "org.apache.commons.io.output.XmlStreamWriter.<staticinit>()": ["org.apache.commons.io.IOUtils.<staticinit>()"],
    "org.apache.commons.io.output.LockableFileWriter#LockableFileWriter(String)": ["org.apache.commons.io.output.LockableFileWriter#LockableFileWriter(String,boolean,String)"],
    "org.apache.commons.io.file.FilesUncheck.newBufferedWriter(Path,OpenOption[]...)": ["org.apache.commons.io.function.Uncheck.apply(IOBiFunction<T, U, R>,T,U)"],
    "org.apache.commons.io.input.ReadAheadInputStream#skip(long)": ["org.apache.commons.io.input.ReadAheadInputStream#skipInternal(long)"],
    "org.apache.commons.io.input.ReversedLinesFileReader#ReversedLinesFileReader(Path,Charset)": [
        "org.apache.commons.io.input.ReversedLinesFileReader.<staticinit>()",
        "org.apache.commons.io.input.ReversedLinesFileReader#ReversedLinesFileReader(Path,int,Charset)"
    ],
    "org.apache.commons.io.input.SequenceReader#read(char[],int,int)": [
        "org.apache.commons.io.input.CharSequenceReader#read(char[],int,int)",
        "org.apache.commons.io.input.UnsynchronizedBufferedReader#read(char[],int,int)",
        "org.apache.commons.io.input.NullReader#read(char[],int,int)",
        "org.apache.commons.io.input.BrokenReader#read(char[],int,int)",
        "org.apache.commons.io.input.SequenceReader#read(char[],int,int)",
        "org.apache.commons.io.input.ClosedReader#read(char[],int,int)",
        "org.apache.commons.io.input.XmlStreamReader#read(char[],int,int)",
        "org.apache.commons.io.input.BoundedReader#read(char[],int,int)",
        "org.apache.commons.io.IOUtils.<staticinit>()",
        "org.apache.commons.io.input.SequenceReader#nextReader()"
    ],
    "org.apache.commons.io.input.XmlStreamReader#calculateHttpEncoding(String,String,String,boolean,String)": [
        "org.apache.commons.io.input.XmlStreamReader.isTextXml(String)",
        "org.apache.commons.io.input.XmlStreamReader.isAppXml(String)",
        "org.apache.commons.io.input.XmlStreamReader.getContentTypeMime(String)",
        "org.apache.commons.io.input.XmlStreamReaderException#XmlStreamReaderException(String,String,String,String,String,String)",
        "org.apache.commons.io.input.XmlStreamReader.<staticinit>()",
        "org.apache.commons.io.input.XmlStreamReader.getContentTypeEncoding(String)",
        "org.apache.commons.io.input.XmlStreamReader#calculateRawEncoding(String,String,String)"
    ],
    "org.apache.commons.io.IOUtils.write(char[],Writer)": [
        "org.apache.commons.io.output.ProxyCollectionWriter#write(char[])",
        "org.apache.commons.io.output.LockableFileWriter#write(char[])",
        "org.apache.commons.io.output.FilterCollectionWriter#write(char[])",
        "org.apache.commons.io.output.NullWriter#write(char[])"
    ],
    "org.apache.commons.io.filefilter.FalseFileFilter#toString()": ["org.apache.commons.io.filefilter.FalseFileFilter.<staticinit>()"],
    "org.apache.commons.io.EndianUtils.readSwappedUnsignedShort(byte[],int)": ["org.apache.commons.io.EndianUtils.validateByteArrayOffset(byte[],int,int)"],
    "org.apache.commons.io.filefilter.AndFileFilter#AndFileFilter(int)": ["org.apache.commons.io.filefilter.AndFileFilter#AndFileFilter(ArrayList<IOFileFilter>)"],
    "org.apache.commons.io.input.BoundedReader#read()": [
        "org.apache.commons.io.input.NullReader#read()",
        "org.apache.commons.io.input.BoundedReader#read()",
        "org.apache.commons.io.input.SequenceReader#read()",
        "org.apache.commons.io.IOUtils.<staticinit>()",
        "org.apache.commons.io.input.UnsynchronizedBufferedReader#read()",
        "org.apache.commons.io.input.CharSequenceReader#read()"
    ],
    "org.apache.commons.io.monitor.FileAlterationMonitor#stop()": ["org.apache.commons.io.monitor.FileAlterationMonitor#stop(long)"],
    "org.apache.commons.io.FileCleaner.track(File,Object,FileDeleteStrategy)": [
        "org.apache.commons.io.FileCleaner.<staticinit>()",
        "org.apache.commons.io.FileCleaningTracker#track(File,Object,FileDeleteStrategy)"
    ],
    "org.apache.commons.io.function.IOStream#skip(long)": [
        "org.apache.commons.io.function.IOStream.adapt(Stream<T>)",
        "org.apache.commons.io.function.IOBaseStreamAdapter#unwrap()"
    ],
    "org.apache.commons.io.IOUtils.closeQuietly(Selector)": ["org.apache.commons.io.IOUtils.closeQ(Closeable)"],
    "org.apache.commons.io.input.CharSequenceReader#read()": [
        "org.apache.commons.io.input.CharSequenceReader#end()",
        "org.apache.commons.io.IOUtils.<staticinit>()"
    ],
    "org.apache.commons.io.output.UncheckedFilterWriter#append(char)": ["org.apache.commons.io.function.Uncheck.apply(IOFunction<T, R>,T)"],
    "org.apache.commons.io.FileUtils.copyDirectory(File,File,boolean)": ["org.apache.commons.io.FileUtils.copyDirectory(File,File,FileFilter,boolean)"],
    "org.apache.commons.io.function.IOStream#forEachOrdered(IOConsumer<? super T>)": [
        "org.apache.commons.io.function.Erase.accept(IOConsumer<T>,T)",
        "org.apache.commons.io.function.IOBaseStreamAdapter#unwrap()"
    ],
    "org.apache.commons.io.filefilter.FileFilterUtils.makeSVNAware(IOFileFilter)": [
        "org.apache.commons.io.filefilter.FileFilterUtils.and(IOFileFilter[]...)",
        "org.apache.commons.io.filefilter.FileFilterUtils.<staticinit>()"
    ],
    "org.apache.commons.io.file.FilesUncheck.walk(Path,FileVisitOption[]...)": ["org.apache.commons.io.function.Uncheck.apply(IOBiFunction<T, U, R>,T,U)"],
    "org.apache.commons.io.file.PathUtils.countDirectoryAsBigInteger(Path)": [
        "org.apache.commons.io.file.PathUtils.visitFileTree(T extends FileVisitor,Path)",
        "org.apache.commons.io.file.CountingPathVisitor.withBigIntegerCounters()"
    ],
    "org.apache.commons.io.comparator.CompositeFileComparator#emptyArray()": ["org.apache.commons.io.comparator.CompositeFileComparator.<staticinit>()"],
    "org.apache.commons.io.file.CountingPathVisitor#updateFileCounters(Path,BasicFileAttributes)": [
        "org.apache.commons.io.file.Counters.BigIntegerCounter#increment()",
        "org.apache.commons.io.file.Counters.NoopCounter#increment()",
        "org.apache.commons.io.file.Counters.BigIntegerCounter#add(long)",
        "org.apache.commons.io.file.Counters.NoopCounter#add(long)",
        "org.apache.commons.io.file.Counters.LongCounter#add(long)",
        "org.apache.commons.io.file.Counters.AbstractPathCounters#getByteCounter()",
        "org.apache.commons.io.file.Counters.LongCounter#increment()",
        "org.apache.commons.io.file.Counters.AbstractPathCounters#getFileCounter()"
    ],
    "org.apache.commons.io.input.UnsynchronizedReader#checkOpen()": [
        "org.apache.commons.io.input.UnsynchronizedReader#isClosed()",
        "org.apache.commons.io.input.Input.checkOpen(boolean)"
    ],
    "org.apache.commons.io.input.ReadAheadInputStream#readAsync()": [
        "org.apache.commons.io.input.CharSequenceInputStream#read(byte[],int,int)",
        "org.apache.commons.io.input.UnsynchronizedByteArrayInputStream#read(byte[],int,int)",
        "org.apache.commons.io.input.ReadAheadInputStream#closeUnderlyingInputStreamIfNecessary()",
        "org.apache.commons.io.input.MemoryMappedFileInputStream#read(byte[],int,int)",
        "org.apache.commons.io.input.RandomAccessFileInputStream#read(byte[],int,int)",
        "org.apache.commons.io.input.UnsynchronizedFilterInputStream#read(byte[],int,int)",
        "org.apache.commons.io.input.ReadAheadInputStream#checkReadException()",
        "org.apache.commons.io.input.BufferedFileChannelInputStream#read(byte[],int,int)",
        "org.apache.commons.io.input.UnsynchronizedBufferedInputStream#read(byte[],int,int)",
        "org.apache.commons.io.input.ClosedInputStream#read(byte[],int,int)",
        "org.apache.commons.io.input.ReadAheadInputStream#signalAsyncReadComplete()",
        "org.apache.commons.io.input.ReaderInputStream#read(byte[],int,int)",
        "org.apache.commons.io.input.NullInputStream#read(byte[],int,int)"
    ],
    "org.apache.commons.io.filefilter.WildcardFileFilter#WildcardFileFilter(String,IOCase)": ["org.apache.commons.io.filefilter.WildcardFileFilter#WildcardFileFilter(IOCase,String[]...)"],
    "org.apache.commons.io.output.BrokenWriter#close()": ["org.apache.commons.io.output.BrokenWriter#rethrow()"],
    "org.apache.commons.io.FileUtils.openOutputStream(File)": ["org.apache.commons.io.FileUtils.openOutputStream(File,boolean)"],
    "org.apache.commons.io.input.Tailer.create(File,TailerListener,long,boolean)": [
        "org.apache.commons.io.build.AbstractOriginSupplier#setFile(File)",
        "org.apache.commons.io.input.Tailer.builder()"
    ],
    "org.apache.commons.io.build.AbstractOrigin.FileOrigin#getFile()": ["org.apache.commons.io.build.AbstractOrigin#get()"],
    "org.apache.commons.io.IOCase.forName(String)": ["org.apache.commons.io.IOCase#getName()"],
    "org.apache.commons.io.output.BrokenWriter#rethrow()": ["org.apache.commons.io.function.Erase.rethrow(Throwable)"],
    "org.apache.commons.io.output.DeferredFileOutputStream.Builder#setOutputFile(File)": ["org.apache.commons.io.output.DeferredFileOutputStream.toPath(File,Supplier<Path>)"],
    "org.apache.commons.io.FileSystem#normalizeSeparators(String)": ["org.apache.commons.io.FileSystem.replace(String,char,char)"],
    "org.apache.commons.io.function.IOSpliterator.adapt(Spliterator<E>)": ["org.apache.commons.io.function.IOSpliteratorAdapter.adapt(Spliterator<E>)"],
    "org.apache.commons.io.filefilter.PrefixFileFilter#accept(Path,BasicFileAttributes)": [
        "org.apache.commons.io.filefilter.AbstractFileFilter#toFileVisitResult(boolean)",
        "org.apache.commons.io.file.PathUtils.getFileName(Path,Function<Path, R>)",
        "org.apache.commons.io.filefilter.PrefixFileFilter#accept(File)"
    ],
    "org.apache.commons.io.input.UncheckedBufferedReader#read(char[])": ["org.apache.commons.io.function.Uncheck.apply(IOFunction<T, R>,T)"],
    "org.apache.commons.io.input.Tailer.create(File,TailerListener,long,boolean,boolean,int)": [
        "org.apache.commons.io.build.AbstractOriginSupplier#setFile(File)",
        "org.apache.commons.io.input.Tailer.builder()"
    ],
    "org.apache.commons.io.input.Tailer#Tailer(File,TailerListener,long,boolean,int)": ["org.apache.commons.io.input.Tailer#Tailer(File,TailerListener,long,boolean,boolean,int)"],
    "org.apache.commons.io.input.ReversedLinesFileReader#ReversedLinesFileReader(File,int,Charset)": ["org.apache.commons.io.input.ReversedLinesFileReader#ReversedLinesFileReader(File,int,Charset)"],
    "org.apache.commons.io.input.ReversedLinesFileReader.FilePart#readLine()": [
        "org.apache.commons.io.input.ReversedLinesFileReader.FilePart#getNewLineMatchByteCount(byte[],int)",
        "org.apache.commons.io.input.ReversedLinesFileReader.FilePart#createLeftOver()"
    ],
    "org.apache.commons.io.function.IOStream.adapt(Stream<T>)": ["org.apache.commons.io.function.IOStreamAdapter.adapt(Stream<T>)"],
    "org.apache.commons.io.filefilter.FileFilterUtils.suffixFileFilter(String)": ["org.apache.commons.io.filefilter.SuffixFileFilter#SuffixFileFilter(String)"],
    "org.apache.commons.io.filefilter.FileFilterUtils.directoryFileFilter()": ["org.apache.commons.io.filefilter.DirectoryFileFilter.<staticinit>()"],
    "org.apache.commons.io.input.SwappedDataInputStream#readUnsignedShort()": ["org.apache.commons.io.EndianUtils.readSwappedUnsignedShort(InputStream)"],
    "org.apache.commons.io.input.BoundedInputStream.AbstractBuilder#setPropagateClose(boolean)": ["org.apache.commons.io.build.AbstractSupplier#asThis()"],
    "org.apache.commons.io.input.CloseShieldReader.wrap(Reader)": ["org.apache.commons.io.input.CloseShieldReader#CloseShieldReader(Reader)"],
    "org.apache.commons.io.CloseableURLConnection#hashCode()": ["org.apache.commons.io.CloseableURLConnection#hashCode()"],
    "org.apache.commons.io.output.LockableFileWriter#write(char[],int,int)": [
        "org.apache.commons.io.output.StringBuilderWriter#write(char[],int,int)",
        "org.apache.commons.io.output.BrokenWriter#write(char[],int,int)",
        "org.apache.commons.io.output.FilterCollectionWriter#write(char[],int,int)",
        "org.apache.commons.io.output.AppendableWriter#write(char[],int,int)",
        "org.apache.commons.io.output.ProxyCollectionWriter#write(char[],int,int)",
        "org.apache.commons.io.output.ClosedWriter#write(char[],int,int)",
        "org.apache.commons.io.output.XmlStreamWriter#write(char[],int,int)",
        "org.apache.commons.io.output.NullWriter#write(char[],int,int)",
        "org.apache.commons.io.output.LockableFileWriter#write(char[],int,int)"
    ],
    "org.apache.commons.io.Charsets.toCharset(String)": ["org.apache.commons.io.Charsets.toCharset(String,Charset)"],
    "org.apache.commons.io.file.PathUtils.isEmpty(Path)": [
        "org.apache.commons.io.file.PathUtils.isEmptyDirectory(Path)",
        "org.apache.commons.io.file.PathUtils.isEmptyFile(Path)"
    ],
    "org.apache.commons.io.FileCleaningTracker#track(String,Object,FileDeleteStrategy)": ["org.apache.commons.io.FileCleaningTracker#addTracker(String,Object,FileDeleteStrategy)"],
    "org.apache.commons.io.output.CloseShieldOutputStream#CloseShieldOutputStream(OutputStream)": [
        "org.apache.commons.io.output.ProxyOutputStream#ProxyOutputStream(OutputStream)",
        "org.apache.commons.io.output.CloseShieldOutputStream.<init>()"
    ],
    "org.apache.commons.io.filefilter.RegexFileFilter#RegexFileFilter(Pattern)": ["org.apache.commons.io.filefilter.RegexFileFilter#RegexFileFilter(Pattern,Function<Path, String>)"],
    "org.apache.commons.io.comparator.CompositeFileComparator#CompositeFileComparator(Comparator<File>[]...)": [
        "org.apache.commons.io.comparator.CompositeFileComparator#emptyArray()",
        "org.apache.commons.io.comparator.CompositeFileComparator.<init>()",
        "org.apache.commons.io.comparator.AbstractFileComparator.<init>()"
    ],
    "org.apache.commons.io.output.FilterCollectionWriter#append(char)": [
        "org.apache.commons.io.output.StringBuilderWriter#append(char)",
        "org.apache.commons.io.output.AppendableWriter#append(char)",
        "org.apache.commons.io.output.ProxyCollectionWriter#append(char)",
        "org.apache.commons.io.output.FilterCollectionWriter#forAllWriters(IOConsumer<Writer>)",
        "org.apache.commons.io.output.FilterCollectionWriter#append(char)",
        "org.apache.commons.io.output.NullWriter#append(char)"
    ],
    "org.apache.commons.io.function.IOBaseStream#close()": ["org.apache.commons.io.function.IOBaseStreamAdapter#unwrap()"],
    "org.apache.commons.io.RandomAccessFileMode#create(Path)": ["org.apache.commons.io.RandomAccessFileMode#create(Path)"],
    "org.apache.commons.io.function.IOStream#flatMapToDouble(IOFunction<? super T, ? extends DoubleStream>)": [
        "org.apache.commons.io.function.Erase.apply(IOFunction<? super T, ? extends R>,T)",
        "org.apache.commons.io.function.IOBaseStreamAdapter#unwrap()"
    ],
    "org.apache.commons.io.build.AbstractOrigin.PathOrigin#getByteArray(long,int)": [
        "org.apache.commons.io.RandomAccessFiles.read(RandomAccessFile,long,int)",
        "org.apache.commons.io.RandomAccessFileMode.<staticinit>()",
        "org.apache.commons.io.RandomAccessFileMode#create(Path)"
    ],
    "org.apache.commons.io.input.BOMInputStream#BOMInputStream(InputStream,boolean)": [
        "org.apache.commons.io.input.BOMInputStream#BOMInputStream(InputStream,boolean,ByteOrderMark[]...)",
        "org.apache.commons.io.ByteOrderMark.<staticinit>()",
        "org.apache.commons.io.input.BOMInputStream.Builder.<staticinit>()"
    ],
    "org.apache.commons.io.output.WriterOutputStream.Builder#get()": [
        "org.apache.commons.io.build.AbstractStreamBuilder#getBufferSize()",
        "org.apache.commons.io.build.AbstractStreamBuilder#getWriter()",
        "org.apache.commons.io.output.WriterOutputStream#WriterOutputStream(Writer,CharsetDecoder,int,boolean)"
    ],
    "org.apache.commons.io.CloseableURLConnection#getHeaderFieldInt(String,int)": ["org.apache.commons.io.CloseableURLConnection#getHeaderFieldInt(String,int)"],
    "org.apache.commons.io.function.IOStream#sorted()": [
        "org.apache.commons.io.function.IOStream.adapt(Stream<T>)",
        "org.apache.commons.io.function.IOBaseStreamAdapter#unwrap()"
    ],
    "org.apache.commons.io.input.BrokenReader#BrokenReader(Supplier<Throwable>)": ["org.apache.commons.io.input.BrokenReader.<init>()"],
    "org.apache.commons.io.input.AbstractCharacterFilterReader#AbstractCharacterFilterReader(Reader,IntPredicate)": [
        "org.apache.commons.io.input.AbstractCharacterFilterReader.<init>()",
        "org.apache.commons.io.input.AbstractCharacterFilterReader.<staticinit>()"
    ],
    "org.apache.commons.io.input.NullReader#NullReader()": ["org.apache.commons.io.input.NullReader#NullReader(long,boolean,boolean)"],
    "org.apache.commons.io.file.Counters.AbstractPathCounters#AbstractPathCounters(Counter,Counter,Counter)": ["org.apache.commons.io.file.Counters.AbstractPathCounters.<init>()"],
    "org.apache.commons.io.input.ChecksumInputStream#getRemaining()": ["org.apache.commons.io.input.CountingInputStream#getByteCount()"],
    "org.apache.commons.io.input.BrokenInputStream#reset()": ["org.apache.commons.io.input.BrokenInputStream#rethrow()"],
    "org.apache.commons.io.input.BoundedInputStream#isMaxCount()": ["org.apache.commons.io.input.BoundedInputStream#getCount()"],
    "org.apache.commons.io.input.BOMInputStream#getBOMCharsetName()": [
        "org.apache.commons.io.ByteOrderMark#getCharsetName()",
        "org.apache.commons.io.input.BOMInputStream#getBOM()"
    ],
    "org.apache.commons.io.IOUtils.close(Closeable,IOConsumer<IOException>)": [
        "org.apache.commons.io.LineIterator#close()",
        "org.apache.commons.io.input.ReversedLinesFileReader#close()",
        "org.apache.commons.io.input.Tailer.RandomAccessFileBridge#close()",
        "org.apache.commons.io.function.IOBaseStream#close()"
    ],
    "org.apache.commons.io.IOExceptionList#getCause(int,Class<T extends Throwable>)": ["org.apache.commons.io.IOExceptionList#getCause(int)"],
    "org.apache.commons.io.file.FilesUncheck.getLastModifiedTime(Path,LinkOption[]...)": ["org.apache.commons.io.function.Uncheck.apply(IOBiFunction<T, U, R>,T,U)"],
    "org.apache.commons.io.FileSystem#toLegalFileName(String,char)": ["org.apache.commons.io.FileSystem#isIllegalFileNameChar(int)"],
    "org.apache.commons.io.input.BoundedInputStream#markSupported()": [
        "org.apache.commons.io.input.NullInputStream#markSupported()",
        "org.apache.commons.io.input.UnsynchronizedBufferedInputStream#markSupported()",
        "org.apache.commons.io.input.UnsynchronizedByteArrayInputStream#markSupported()",
        "org.apache.commons.io.input.UnsynchronizedFilterInputStream#markSupported()",
        "org.apache.commons.io.input.CharSequenceInputStream#markSupported()"
    ],
    "org.apache.commons.io.DirectoryWalker#checkIfCancelled(File,int,Collection<T>)": [
        "org.apache.commons.io.DirectoryWalker#handleIsCancelled(File,int,Collection<T>)",
        "org.apache.commons.io.DirectoryWalker.CancelException#CancelException(File,int)"
    ],
    "org.apache.commons.io.build.AbstractOriginSupplier.newFileOrigin(String)": ["org.apache.commons.io.build.AbstractOrigin.FileOrigin#FileOrigin(File)"],
    "org.apache.commons.io.file.Counters.BigIntegerCounter#equals(Object)": [
        "org.apache.commons.io.file.Counters.NoopCounter#getBigInteger()",
        "org.apache.commons.io.file.Counters.BigIntegerCounter#getBigInteger()",
        "org.apache.commons.io.file.Counters.LongCounter#getBigInteger()"
    ],
    "org.apache.commons.io.input.QueueInputStream#newQueueOutputStream()": ["org.apache.commons.io.output.QueueOutputStream#QueueOutputStream(BlockingQueue<Integer>)"],
    "org.apache.commons.io.input.UnsynchronizedByteArrayInputStream.minPosLen(byte[],int)": ["org.apache.commons.io.input.UnsynchronizedByteArrayInputStream.requireNonNegative(int,String)"],
    "org.apache.commons.io.IOExceptionList#IOExceptionList(List<? extends Throwable>)": [
        "org.apache.commons.io.IOExceptionList#IOExceptionList(String,List<? extends Throwable>)",
        "org.apache.commons.io.IOExceptionList.toMessage(List<? extends Throwable>)"
    ],
    "org.apache.commons.io.Charsets.requiredCharsets()": ["org.apache.commons.io.Charsets.<staticinit>()"],
    "org.apache.commons.io.output.CloseShieldWriter.wrap(Writer)": ["org.apache.commons.io.output.CloseShieldWriter#CloseShieldWriter(Writer)"],
    "org.apache.commons.io.RandomAccessFiles.read(RandomAccessFile,long,int)": ["org.apache.commons.io.IOUtils.toByteArray(IOTriFunction<byte[], Integer, Integer, Integer>,int)"],
    "org.apache.commons.io.IOUtils.closeQuietly(ServerSocket)": ["org.apache.commons.io.IOUtils.closeQ(Closeable)"],
    "org.apache.commons.io.output.WriterOutputStream#write(int)": ["org.apache.commons.io.output.WriterOutputStream#write(byte[],int,int)"],
    "org.apache.commons.io.file.PathUtils.getLastModifiedFileTime(URL)": ["org.apache.commons.io.file.PathUtils.getLastModifiedFileTime(File)"],
    "org.apache.commons.io.IOUtils.copy(InputStream,OutputStream)": [
        "org.apache.commons.io.IOUtils.<staticinit>()",
        "org.apache.commons.io.IOUtils.copyLarge(InputStream,OutputStream)"
    ],
    "org.apache.commons.io.input.ProxyReader#ProxyReader(Reader)": ["org.apache.commons.io.input.ProxyReader.<init>()"],
    "org.apache.commons.io.input.UnsynchronizedBufferedInputStream#fillBuffer(InputStream,byte[])": [
        "org.apache.commons.io.input.UnsynchronizedFilterInputStream#read(byte[])",
        "org.apache.commons.io.input.CharSequenceInputStream#read(byte[],int,int)",
        "org.apache.commons.io.input.UnsynchronizedByteArrayInputStream#read(byte[],int,int)",
        "org.apache.commons.io.input.NullInputStream#read(byte[])",
        "org.apache.commons.io.input.MemoryMappedFileInputStream#read(byte[],int,int)",
        "org.apache.commons.io.input.RandomAccessFileInputStream#read(byte[],int,int)",
        "org.apache.commons.io.IOUtils.<staticinit>()",
        "org.apache.commons.io.input.CharSequenceInputStream#read(byte[])",
        "org.apache.commons.io.input.UnsynchronizedFilterInputStream#read(byte[],int,int)",
        "org.apache.commons.io.input.RandomAccessFileInputStream#read(byte[])",
        "org.apache.commons.io.input.BufferedFileChannelInputStream#read(byte[],int,int)",
        "org.apache.commons.io.input.ReaderInputStream#read(byte[])",
        "org.apache.commons.io.input.UnsynchronizedBufferedInputStream#read(byte[],int,int)",
        "org.apache.commons.io.input.UnsynchronizedByteArrayInputStream#read(byte[])",
        "org.apache.commons.io.input.ClosedInputStream#read(byte[],int,int)",
        "org.apache.commons.io.input.ReaderInputStream#read(byte[],int,int)",
        "org.apache.commons.io.input.NullInputStream#read(byte[],int,int)"
    ],
    "org.apache.commons.io.FileCleaningTracker.Tracker#Tracker(String,FileDeleteStrategy,Object,ReferenceQueue<? super Object>)": [
        "org.apache.commons.io.FileCleaningTracker.Tracker.<init>()",
        "org.apache.commons.io.FileDeleteStrategy.<staticinit>()"
    ],
    "org.apache.commons.io.IOUtils.writeLines(Collection<?>,String,OutputStream)": ["org.apache.commons.io.IOUtils.writeLines(Collection<?>,String,OutputStream,Charset)"],
    "org.apache.commons.io.input.UnsynchronizedFilterInputStream#reset()": [
        "org.apache.commons.io.input.BrokenInputStream#reset()",
        "org.apache.commons.io.input.CharSequenceInputStream#reset()",
        "org.apache.commons.io.input.NullInputStream#reset()",
        "org.apache.commons.io.input.UnsynchronizedBufferedInputStream#reset()",
        "org.apache.commons.io.input.UnsynchronizedFilterInputStream#reset()",
        "org.apache.commons.io.input.UnsynchronizedByteArrayInputStream#reset()"
    ],
    "org.apache.commons.io.function.UncheckedIOSpliterator#tryAdvance(Consumer<? super T>)": ["org.apache.commons.io.function.Uncheck.apply(IOFunction<T, R>,T)"],
    "org.apache.commons.io.build.AbstractOriginSupplier.newOutputStreamOrigin(OutputStream)": ["org.apache.commons.io.build.AbstractOrigin.OutputStreamOrigin#OutputStreamOrigin(OutputStream)"],
    "org.apache.commons.io.FilenameUtils.getPrefixLength(String)": [
        "org.apache.commons.io.FileSystem#supportsDriveLetter()",
        "org.apache.commons.io.FileSystem.getCurrent()",
        "org.apache.commons.io.FilenameUtils.isSeparator(char)",
        "org.apache.commons.io.FilenameUtils.<staticinit>()",
        "org.apache.commons.io.FilenameUtils.isValidHostName(String)"
    ],
    "org.apache.commons.io.output.ProxyWriter#write(String,int,int)": [
        "org.apache.commons.io.output.ProxyWriter#afterWrite(int)",
        "org.apache.commons.io.output.ProxyWriter#beforeWrite(int)",
        "org.apache.commons.io.output.NullWriter#write(String,int,int)",
        "org.apache.commons.io.output.TaggedWriter#handleIOException(IOException)",
        "org.apache.commons.io.output.ProxyCollectionWriter#write(String,int,int)",
        "org.apache.commons.io.output.AppendableWriter#write(String,int,int)",
        "org.apache.commons.io.output.ProxyWriter#handleIOException(IOException)",
        "org.apache.commons.io.output.FilterCollectionWriter#write(String,int,int)",
        "org.apache.commons.io.output.LockableFileWriter#write(String,int,int)"
    ],
    "org.apache.commons.io.output.ChunkedWriter#ChunkedWriter(Writer)": [
        "org.apache.commons.io.output.ChunkedWriter#ChunkedWriter(Writer,int)",
        "org.apache.commons.io.output.ChunkedWriter.<staticinit>()"
    ],
    "org.apache.commons.io.IOUtils.contentEquals(Reader,Reader)": [
        "org.apache.commons.io.input.NullReader#read()",
        "org.apache.commons.io.IOUtils.charArray()",
        "org.apache.commons.io.input.NullReader#read(char[],int,int)",
        "org.apache.commons.io.input.SequenceReader#read(char[],int,int)",
        "org.apache.commons.io.input.ClosedReader#read(char[],int,int)",
        "org.apache.commons.io.input.XmlStreamReader#read(char[],int,int)",
        "org.apache.commons.io.input.UnsynchronizedBufferedReader#read()",
        "org.apache.commons.io.input.BoundedReader#read(char[],int,int)",
        "org.apache.commons.io.input.BoundedReader#read()",
        "org.apache.commons.io.input.SequenceReader#read()",
        "org.apache.commons.io.IOUtils.<staticinit>()",
        "org.apache.commons.io.input.CharSequenceReader#read()",
        "org.apache.commons.io.IOUtils.getScratchCharArray()",
        "org.apache.commons.io.input.CharSequenceReader#read(char[],int,int)",
        "org.apache.commons.io.input.UnsynchronizedBufferedReader#read(char[],int,int)",
        "org.apache.commons.io.input.BrokenReader#read(char[],int,int)"
    ],
    "org.apache.commons.io.input.UnsynchronizedBufferedInputStream#read(byte[],int,int)": [
        "org.apache.commons.io.input.BrokenInputStream#available()",
        "org.apache.commons.io.input.UnsynchronizedBufferedInputStream#available()",
        "org.apache.commons.io.input.BufferedFileChannelInputStream#available()",
        "org.apache.commons.io.input.CharSequenceInputStream#read(byte[],int,int)",
        "org.apache.commons.io.input.UnsynchronizedByteArrayInputStream#read(byte[],int,int)",
        "org.apache.commons.io.input.CircularInputStream#available()",
        "org.apache.commons.io.input.UnsynchronizedBufferedInputStream#fillBuffer(InputStream,byte[])",
        "org.apache.commons.io.input.ReaderInputStream#available()",
        "org.apache.commons.io.input.MemoryMappedFileInputStream#read(byte[],int,int)",
        "org.apache.commons.io.input.RandomAccessFileInputStream#read(byte[],int,int)",
        "org.apache.commons.io.IOUtils.<staticinit>()",
        "org.apache.commons.io.input.UnsynchronizedByteArrayInputStream#available()",
        "org.apache.commons.io.input.UnsynchronizedFilterInputStream#read(byte[],int,int)",
        "org.apache.commons.io.input.RandomAccessFileInputStream#available()",
        "org.apache.commons.io.input.BufferedFileChannelInputStream#read(byte[],int,int)",
        "org.apache.commons.io.input.MemoryMappedFileInputStream#available()",
        "org.apache.commons.io.input.UnsynchronizedBufferedInputStream#read(byte[],int,int)",
        "org.apache.commons.io.input.ClosedInputStream#read(byte[],int,int)",
        "org.apache.commons.io.input.ReaderInputStream#read(byte[],int,int)",
        "org.apache.commons.io.input.NullInputStream#available()",
        "org.apache.commons.io.input.NullInputStream#read(byte[],int,int)",
        "org.apache.commons.io.input.CharSequenceInputStream#available()",
        "org.apache.commons.io.input.UnsynchronizedFilterInputStream#available()"
    ],
    "org.apache.commons.io.CloseableURLConnection#getContentType()": ["org.apache.commons.io.CloseableURLConnection#getContentType()"],
    "org.apache.commons.io.file.AccumulatorPathVisitor#AccumulatorPathVisitor()": [
        "org.apache.commons.io.file.AccumulatorPathVisitor.<init>()",
        "org.apache.commons.io.file.Counters.noopPathCounters()",
        "org.apache.commons.io.file.CountingPathVisitor#CountingPathVisitor(PathCounters)"
    ],
    "org.apache.commons.io.IOUtils.contentEquals(Stream<?>,Stream<?>)": ["org.apache.commons.io.IOUtils.contentEquals(InputStream,InputStream)"],
    "org.apache.commons.io.input.SwappedDataInputStream#readDouble()": ["org.apache.commons.io.EndianUtils.readSwappedDouble(InputStream)"],
    "org.apache.commons.io.output.DeferredFileOutputStream#close()": ["org.apache.commons.io.output.ThresholdingOutputStream#close()"],
    "org.apache.commons.io.FileUtils.isFileOlder(File,ChronoZonedDateTime<?>)": ["org.apache.commons.io.FileUtils.isFileOlder(File,ChronoZonedDateTime<?>)"],
    "org.apache.commons.io.build.AbstractOrigin.CharSequenceOrigin#getInputStream(OpenOption[]...)": [
        "org.apache.commons.io.build.AbstractOriginSupplier#setCharSequence(CharSequence)",
        "org.apache.commons.io.build.AbstractOrigin.CharSequenceOrigin#getCharSequence(Charset)",
        "org.apache.commons.io.input.CharSequenceInputStream.builder()"
    ],
    "org.apache.commons.io.output.DeferredFileOutputStream#toInputStream()": [
        "org.apache.commons.io.output.DeferredFileOutputStream#isInMemory()",
        "org.apache.commons.io.output.ByteArrayOutputStream#toInputStream()"
    ],
    "org.apache.commons.io.output.FileWriterWithEncoding#FileWriterWithEncoding(String,String)": ["org.apache.commons.io.output.FileWriterWithEncoding#FileWriterWithEncoding(File,String,boolean)"],
    "org.apache.commons.io.comparator.DefaultFileComparator.<staticinit>()": [
        "org.apache.commons.io.comparator.ReverseFileComparator#ReverseFileComparator(Comparator<File>)",
        "org.apache.commons.io.comparator.DefaultFileComparator#DefaultFileComparator()"
    ],
    "org.apache.commons.io.FileUtils.copyToFile(InputStream,File)": [
        "org.apache.commons.io.IOUtils.copy(InputStream,OutputStream)",
        "org.apache.commons.io.FileUtils.newOutputStream(File,boolean)"
    ],
    "org.apache.commons.io.IOUtils.close(Closeable[]...)": ["org.apache.commons.io.function.IOConsumer.forAll(IOConsumer<T>,Iterable<T>)"],
    "org.apache.commons.io.filefilter.WildcardFilter#accept(Path,BasicFileAttributes)": [
        "org.apache.commons.io.filefilter.AbstractFileFilter.toDefaultFileVisitResult(boolean)",
        "org.apache.commons.io.file.PathUtils.getFileNameString(Path)",
        "org.apache.commons.io.FilenameUtils.wildcardMatch(String,String)"
    ],
    "org.apache.commons.io.EndianUtils.writeSwappedFloat(OutputStream,float)": ["org.apache.commons.io.EndianUtils.writeSwappedInteger(OutputStream,int)"],
    "org.apache.commons.io.filefilter.DelegateFileFilter#accept(File)": [
        "org.apache.commons.io.filefilter.CanExecuteFileFilter#accept(File)",
        "org.apache.commons.io.filefilter.AbstractFileFilter#accept(File)",
        "org.apache.commons.io.filefilter.CanWriteFileFilter#accept(File)",
        "org.apache.commons.io.filefilter.HiddenFileFilter#accept(File)",
        "org.apache.commons.io.filefilter.PathVisitorFileFilter#accept(File)",
        "org.apache.commons.io.filefilter.FileFileFilter#accept(File)",
        "org.apache.commons.io.filefilter.OrFileFilter#accept(File)",
        "org.apache.commons.io.filefilter.PathEqualsFileFilter#accept(File)",
        "org.apache.commons.io.filefilter.SuffixFileFilter#accept(File)",
        "org.apache.commons.io.filefilter.CanReadFileFilter#accept(File)",
        "org.apache.commons.io.filefilter.TrueFileFilter#accept(File)",
        "org.apache.commons.io.filefilter.IOFileFilter#accept(File)",
        "org.apache.commons.io.filefilter.PrefixFileFilter#accept(File)",
        "org.apache.commons.io.filefilter.MagicNumberFileFilter#accept(File)",
        "org.apache.commons.io.filefilter.NameFileFilter#accept(File)",
        "org.apache.commons.io.filefilter.WildcardFileFilter#accept(File)",
        "org.apache.commons.io.filefilter.NotFileFilter#accept(File)",
        "org.apache.commons.io.filefilter.PathMatcherFileFilter#accept(File)",
        "org.apache.commons.io.filefilter.FileEqualsFileFilter#accept(File)",
        "org.apache.commons.io.filefilter.WildcardFilter#accept(File)",
        "org.apache.commons.io.filefilter.AgeFileFilter#accept(File)",
        "org.apache.commons.io.filefilter.DelegateFileFilter#accept(File)",
        "org.apache.commons.io.filefilter.SizeFileFilter#accept(File)",
        "org.apache.commons.io.filefilter.FalseFileFilter#accept(File)",
        "org.apache.commons.io.filefilter.AndFileFilter#accept(File)",
        "org.apache.commons.io.filefilter.SymbolicLinkFileFilter#accept(File)",
        "org.apache.commons.io.filefilter.DirectoryFileFilter#accept(File)",
        "org.apache.commons.io.filefilter.EmptyFileFilter#accept(File)"
    ],
    "org.apache.commons.io.filefilter.TrueFileFilter#or(IOFileFilter)": ["org.apache.commons.io.filefilter.TrueFileFilter.<staticinit>()"],
    "org.apache.commons.io.FilenameUtils.getName(String)": [
        "org.apache.commons.io.FilenameUtils.requireNonNullChars(String)",
        "org.apache.commons.io.FilenameUtils.indexOfLastSeparator(String)"
    ],
    "org.apache.commons.io.output.UncheckedFilterOutputStream#flush()": ["org.apache.commons.io.function.Uncheck.run(IORunnable)"],
    "org.apache.commons.io.output.ClosedOutputStream.<staticinit>()": ["org.apache.commons.io.output.ClosedOutputStream.<init>()"],
    "org.apache.commons.io.CloseableURLConnection#getPermission()": ["org.apache.commons.io.CloseableURLConnection#getPermission()"],
    "org.apache.commons.io.FilenameUtils.equalsNormalizedOnSystem(String,String)": [
        "org.apache.commons.io.IOCase.<staticinit>()",
        "org.apache.commons.io.FilenameUtils.equals(String,String,boolean,IOCase)"
    ],
    "org.apache.commons.io.monitor.FileAlterationObserver#FileAlterationObserver(File,FileFilter,IOCase)": [
        "org.apache.commons.io.monitor.FileAlterationObserver#FileAlterationObserver(FileEntry,FileFilter,IOCase)",
        "org.apache.commons.io.monitor.FileEntry#FileEntry(File)"
    ],
    "org.apache.commons.io.function.IOBiConsumer.noop()": ["org.apache.commons.io.function.Constants.<staticinit>()"],
    "org.apache.commons.io.FilenameUtils.getExtension(String)": [
        "org.apache.commons.io.FilenameUtils.indexOfExtension(String)",
        "org.apache.commons.io.FilenameUtils.<staticinit>()"
    ],
    "org.apache.commons.io.function.Uncheck.getAsInt(IOIntSupplier,Supplier<String>)": ["org.apache.commons.io.function.Uncheck.wrap(IOException,Supplier<String>)"],
    "org.apache.commons.io.IOExceptionList.toMessage(List<? extends Throwable>)": ["org.apache.commons.io.IOExceptionList.size(List<? extends Throwable>)"],
    "org.apache.commons.io.file.DirectoryStreamFilter#accept(Path)": [
        "org.apache.commons.io.filefilter.SizeFileFilter#accept(Path,BasicFileAttributes)",
        "org.apache.commons.io.filefilter.WildcardFileFilter#accept(Path,BasicFileAttributes)",
        "org.apache.commons.io.filefilter.FalseFileFilter#accept(Path,BasicFileAttributes)",
        "org.apache.commons.io.filefilter.FileEqualsFileFilter#accept(Path,BasicFileAttributes)",
        "org.apache.commons.io.filefilter.PathVisitorFileFilter#accept(Path,BasicFileAttributes)",
        "org.apache.commons.io.filefilter.SymbolicLinkFileFilter#accept(Path,BasicFileAttributes)",
        "org.apache.commons.io.filefilter.PrefixFileFilter#accept(Path,BasicFileAttributes)",
        "org.apache.commons.io.filefilter.CanExecuteFileFilter#accept(Path,BasicFileAttributes)",
        "org.apache.commons.io.filefilter.MagicNumberFileFilter#accept(Path,BasicFileAttributes)",
        "org.apache.commons.io.filefilter.WildcardFilter#accept(Path,BasicFileAttributes)",
        "org.apache.commons.io.filefilter.NotFileFilter#accept(Path,BasicFileAttributes)",
        "org.apache.commons.io.filefilter.IOFileFilter#accept(Path,BasicFileAttributes)",
        "org.apache.commons.io.filefilter.AndFileFilter#accept(Path,BasicFileAttributes)",
        "org.apache.commons.io.filefilter.DirectoryFileFilter#accept(Path,BasicFileAttributes)",
        "org.apache.commons.io.file.PathUtils.readBasicFileAttributes(Path,LinkOption[]...)",
        "org.apache.commons.io.filefilter.CanWriteFileFilter#accept(Path,BasicFileAttributes)",
        "org.apache.commons.io.filefilter.AgeFileFilter#accept(Path,BasicFileAttributes)",
        "org.apache.commons.io.filefilter.HiddenFileFilter#accept(Path,BasicFileAttributes)",
        "org.apache.commons.io.filefilter.TrueFileFilter#accept(Path,BasicFileAttributes)",
        "org.apache.commons.io.filefilter.EmptyFileFilter#accept(Path,BasicFileAttributes)",
        "org.apache.commons.io.filefilter.OrFileFilter#accept(Path,BasicFileAttributes)",
        "org.apache.commons.io.filefilter.PathEqualsFileFilter#accept(Path,BasicFileAttributes)",
        "org.apache.commons.io.filefilter.CanReadFileFilter#accept(Path,BasicFileAttributes)",
        "org.apache.commons.io.file.PathUtils.<staticinit>()",
        "org.apache.commons.io.filefilter.NameFileFilter#accept(Path,BasicFileAttributes)",
        "org.apache.commons.io.filefilter.FileFileFilter#accept(Path,BasicFileAttributes)",
        "org.apache.commons.io.filefilter.RegexFileFilter#accept(Path,BasicFileAttributes)",
        "org.apache.commons.io.filefilter.SuffixFileFilter#accept(Path,BasicFileAttributes)"
    ],
    "org.apache.commons.io.FileUtils.waitFor(File,int)": [
        "org.apache.commons.io.file.PathUtils.<staticinit>()",
        "org.apache.commons.io.FileUtils.<staticinit>()"
    ],
    "org.apache.commons.io.file.CountingPathVisitor#visitFile(Path,BasicFileAttributes)": [
        "org.apache.commons.io.file.CountingPathVisitor#updateFileCounters(Path,BasicFileAttributes)",
        "org.apache.commons.io.filefilter.SizeFileFilter#accept(Path,BasicFileAttributes)",
        "org.apache.commons.io.filefilter.WildcardFileFilter#accept(Path,BasicFileAttributes)",
        "org.apache.commons.io.filefilter.FalseFileFilter#accept(Path,BasicFileAttributes)",
        "org.apache.commons.io.filefilter.FileEqualsFileFilter#accept(Path,BasicFileAttributes)",
        "org.apache.commons.io.filefilter.PathVisitorFileFilter#accept(Path,BasicFileAttributes)",
        "org.apache.commons.io.filefilter.SymbolicLinkFileFilter#accept(Path,BasicFileAttributes)",
        "org.apache.commons.io.filefilter.PrefixFileFilter#accept(Path,BasicFileAttributes)",
        "org.apache.commons.io.filefilter.CanExecuteFileFilter#accept(Path,BasicFileAttributes)",
        "org.apache.commons.io.filefilter.MagicNumberFileFilter#accept(Path,BasicFileAttributes)",
        "org.apache.commons.io.filefilter.WildcardFilter#accept(Path,BasicFileAttributes)",
        "org.apache.commons.io.filefilter.NotFileFilter#accept(Path,BasicFileAttributes)",
        "org.apache.commons.io.filefilter.IOFileFilter#accept(Path,BasicFileAttributes)",
        "org.apache.commons.io.filefilter.AndFileFilter#accept(Path,BasicFileAttributes)",
        "org.apache.commons.io.filefilter.DirectoryFileFilter#accept(Path,BasicFileAttributes)",
        "org.apache.commons.io.filefilter.CanWriteFileFilter#accept(Path,BasicFileAttributes)",
        "org.apache.commons.io.filefilter.AgeFileFilter#accept(Path,BasicFileAttributes)",
        "org.apache.commons.io.filefilter.HiddenFileFilter#accept(Path,BasicFileAttributes)",
        "org.apache.commons.io.filefilter.TrueFileFilter#accept(Path,BasicFileAttributes)",
        "org.apache.commons.io.filefilter.EmptyFileFilter#accept(Path,BasicFileAttributes)",
        "org.apache.commons.io.filefilter.OrFileFilter#accept(Path,BasicFileAttributes)",
        "org.apache.commons.io.filefilter.PathEqualsFileFilter#accept(Path,BasicFileAttributes)",
        "org.apache.commons.io.filefilter.CanReadFileFilter#accept(Path,BasicFileAttributes)",
        "org.apache.commons.io.file.AccumulatorPathVisitor#updateFileCounters(Path,BasicFileAttributes)",
        "org.apache.commons.io.filefilter.NameFileFilter#accept(Path,BasicFileAttributes)",
        "org.apache.commons.io.filefilter.FileFileFilter#accept(Path,BasicFileAttributes)",
        "org.apache.commons.io.filefilter.RegexFileFilter#accept(Path,BasicFileAttributes)",
        "org.apache.commons.io.filefilter.SuffixFileFilter#accept(Path,BasicFileAttributes)"
    ],
    "org.apache.commons.io.monitor.FileAlterationObserver#fireOnDelete(FileEntry)": [
        "org.apache.commons.io.monitor.FileAlterationListenerAdaptor#onDirectoryDelete(File)",
        "org.apache.commons.io.monitor.FileAlterationListenerAdaptor#onFileDelete(File)",
        "org.apache.commons.io.monitor.FileEntry#isDirectory()",
        "org.apache.commons.io.monitor.FileEntry#getFile()"
    ],
    "org.apache.commons.io.file.PathUtils.accumulate(Path,int,FileVisitOption[])": [
        "org.apache.commons.io.file.PathUtils.toFileVisitOptionSet(FileVisitOption[]...)",
        "org.apache.commons.io.file.PathUtils.visitFileTree(T extends FileVisitor,Path,Set<FileVisitOption>,int)",
        "org.apache.commons.io.file.AccumulatorPathVisitor.withLongCounters()"
    ],
    "org.apache.commons.io.output.QueueOutputStream#QueueOutputStream()": ["org.apache.commons.io.output.QueueOutputStream#QueueOutputStream(BlockingQueue<Integer>)"],
    "org.apache.commons.io.filefilter.SizeFileFilter#accept(Path,BasicFileAttributes)": [
        "org.apache.commons.io.filefilter.AbstractFileFilter#get(IOSupplier<FileVisitResult>)",
        "org.apache.commons.io.filefilter.AbstractFileFilter#toFileVisitResult(boolean)",
        "org.apache.commons.io.filefilter.SizeFileFilter#accept(File)"
    ],
    "org.apache.commons.io.monitor.FileAlterationMonitor#run()": ["org.apache.commons.io.ThreadUtils.sleep(Duration)"],
    "org.apache.commons.io.build.AbstractOrigin.OutputStreamOrigin#getOutputStream(OpenOption[]...)": ["org.apache.commons.io.build.AbstractOrigin#get()"],
    "org.apache.commons.io.input.XmlStreamReader#XmlStreamReader(InputStream,boolean)": ["org.apache.commons.io.input.XmlStreamReader#XmlStreamReader(InputStream,boolean,String)"],
    "org.apache.commons.io.FileUtils.writeStringToFile(File,String,Charset,boolean)": [
        "org.apache.commons.io.IOUtils.write(String,OutputStream,Charset)",
        "org.apache.commons.io.FileUtils.newOutputStream(File,boolean)"
    ],
    "org.apache.commons.io.function.IOSpliterator#asSpliterator()": ["org.apache.commons.io.function.UncheckedIOSpliterator#UncheckedIOSpliterator(IOSpliterator<T>)"],
    "org.apache.commons.io.input.MemoryMappedFileInputStream.<init>()": ["org.apache.commons.io.input.MemoryMappedFileInputStream.<staticinit>()"],
    "org.apache.commons.io.filefilter.FalseFileFilter#negate()": ["org.apache.commons.io.filefilter.TrueFileFilter.<staticinit>()"],
    "org.apache.commons.io.filefilter.FileFilterUtils.nameFileFilter(String,IOCase)": ["org.apache.commons.io.filefilter.NameFileFilter#NameFileFilter(String,IOCase)"],
    "org.apache.commons.io.input.UnixLineEndingInputStream#readWithUpdate()": [
        "org.apache.commons.io.input.CharSequenceInputStream#read()",
        "org.apache.commons.io.input.UnsynchronizedByteArrayInputStream#read()",
        "org.apache.commons.io.input.RandomAccessFileInputStream#read()",
        "org.apache.commons.io.input.ReaderInputStream#read()",
        "org.apache.commons.io.input.UnsynchronizedFilterInputStream#read()",
        "org.apache.commons.io.input.UnixLineEndingInputStream#read()",
        "org.apache.commons.io.input.DemuxInputStream#read()",
        "org.apache.commons.io.input.QueueInputStream#read()",
        "org.apache.commons.io.input.NullInputStream#read()",
        "org.apache.commons.io.IOUtils.<staticinit>()",
        "org.apache.commons.io.input.MemoryMappedFileInputStream#read()",
        "org.apache.commons.io.input.BufferedFileChannelInputStream#read()",
        "org.apache.commons.io.input.WindowsLineEndingInputStream#read()",
        "org.apache.commons.io.input.BrokenInputStream#read()",
        "org.apache.commons.io.input.ClosedInputStream#read()",
        "org.apache.commons.io.input.UnsynchronizedBufferedInputStream#read()",
        "org.apache.commons.io.input.CircularInputStream#read()"
    ],
    "org.apache.commons.io.build.AbstractOriginSupplier#setFile(String)": [
        "org.apache.commons.io.input.Tailer.Builder#setOrigin(AbstractOrigin<?, ?>)",
        "org.apache.commons.io.build.AbstractOriginSupplier.newFileOrigin(String)",
        "org.apache.commons.io.build.AbstractOriginSupplier#setOrigin(AbstractOrigin<?, ?>)"
    ],
    "org.apache.commons.io.file.PathUtils.sizeOfDirectory(Path)": [
        "org.apache.commons.io.file.Counters.NoopCounter#getLong()",
        "org.apache.commons.io.file.Counters.AbstractPathCounters#getByteCounter()",
        "org.apache.commons.io.file.Counters.LongCounter#getLong()",
        "org.apache.commons.io.file.Counters.BigIntegerCounter#getLong()",
        "org.apache.commons.io.file.PathUtils.countDirectory(Path)"
    ],
    "org.apache.commons.io.build.AbstractOrigin.URIOrigin#URIOrigin(URI)": [
        "org.apache.commons.io.build.AbstractOrigin.URIOrigin.<init>()",
        "org.apache.commons.io.build.AbstractOrigin#AbstractOrigin(T)"
    ],
    "org.apache.commons.io.input.MemoryMappedFileInputStream#skip(long)": [
        "org.apache.commons.io.input.AbstractInputStream#checkOpen()",
        "org.apache.commons.io.input.MemoryMappedFileInputStream#nextBuffer()"
    ],
    "org.apache.commons.io.HexDump.dump(byte[],long,Appendable,int,int)": [
        "org.apache.commons.io.output.NullAppendable#append(CharSequence)",
        "org.apache.commons.io.HexDump.dump(StringBuilder,byte)",
        "org.apache.commons.io.HexDump.dump(StringBuilder,long)"
    ],
    "org.apache.commons.io.IOUtils.copyLarge(Reader,Writer)": [
        "org.apache.commons.io.IOUtils.copyLarge(Reader,Writer,char[])",
        "org.apache.commons.io.IOUtils.<staticinit>()",
        "org.apache.commons.io.IOUtils.getScratchCharArray()"
    ],
    "org.apache.commons.io.input.UnsynchronizedReader.<staticinit>()": ["org.apache.commons.io.IOUtils.<staticinit>()"],
    "org.apache.commons.io.filefilter.AbstractFileFilter#preVisitDirectory(Path,BasicFileAttributes)": [
        "org.apache.commons.io.filefilter.SizeFileFilter#accept(Path,BasicFileAttributes)",
        "org.apache.commons.io.filefilter.WildcardFileFilter#accept(Path,BasicFileAttributes)",
        "org.apache.commons.io.filefilter.FalseFileFilter#accept(Path,BasicFileAttributes)",
        "org.apache.commons.io.filefilter.FileEqualsFileFilter#accept(Path,BasicFileAttributes)",
        "org.apache.commons.io.filefilter.PathVisitorFileFilter#accept(Path,BasicFileAttributes)",
        "org.apache.commons.io.filefilter.SymbolicLinkFileFilter#accept(Path,BasicFileAttributes)",
        "org.apache.commons.io.filefilter.PrefixFileFilter#accept(Path,BasicFileAttributes)",
        "org.apache.commons.io.filefilter.CanExecuteFileFilter#accept(Path,BasicFileAttributes)",
        "org.apache.commons.io.filefilter.MagicNumberFileFilter#accept(Path,BasicFileAttributes)",
        "org.apache.commons.io.filefilter.WildcardFilter#accept(Path,BasicFileAttributes)",
        "org.apache.commons.io.filefilter.NotFileFilter#accept(Path,BasicFileAttributes)",
        "org.apache.commons.io.filefilter.IOFileFilter#accept(Path,BasicFileAttributes)",
        "org.apache.commons.io.filefilter.AndFileFilter#accept(Path,BasicFileAttributes)",
        "org.apache.commons.io.filefilter.DirectoryFileFilter#accept(Path,BasicFileAttributes)",
        "org.apache.commons.io.filefilter.CanWriteFileFilter#accept(Path,BasicFileAttributes)",
        "org.apache.commons.io.filefilter.AgeFileFilter#accept(Path,BasicFileAttributes)",
        "org.apache.commons.io.filefilter.HiddenFileFilter#accept(Path,BasicFileAttributes)",
        "org.apache.commons.io.filefilter.TrueFileFilter#accept(Path,BasicFileAttributes)",
        "org.apache.commons.io.filefilter.EmptyFileFilter#accept(Path,BasicFileAttributes)",
        "org.apache.commons.io.filefilter.OrFileFilter#accept(Path,BasicFileAttributes)",
        "org.apache.commons.io.filefilter.PathEqualsFileFilter#accept(Path,BasicFileAttributes)",
        "org.apache.commons.io.filefilter.CanReadFileFilter#accept(Path,BasicFileAttributes)",
        "org.apache.commons.io.filefilter.NameFileFilter#accept(Path,BasicFileAttributes)",
        "org.apache.commons.io.filefilter.FileFileFilter#accept(Path,BasicFileAttributes)",
        "org.apache.commons.io.filefilter.RegexFileFilter#accept(Path,BasicFileAttributes)",
        "org.apache.commons.io.filefilter.SuffixFileFilter#accept(Path,BasicFileAttributes)"
    ],
    "org.apache.commons.io.output.WriterOutputStream#write(byte[])": ["org.apache.commons.io.output.WriterOutputStream#write(byte[],int,int)"],
    "org.apache.commons.io.filefilter.WildcardFileFilter.Builder#setIoCase(IOCase)": [
        "org.apache.commons.io.IOCase.<staticinit>()",
        "org.apache.commons.io.IOCase.value(IOCase,IOCase)"
    ],
    "org.apache.commons.io.output.LockableFileWriter#close()": [
        "org.apache.commons.io.output.ProxyCollectionWriter#close()",
        "org.apache.commons.io.output.ClosedWriter#close()",
        "org.apache.commons.io.FileUtils.delete(File)",
        "org.apache.commons.io.output.XmlStreamWriter#close()",
        "org.apache.commons.io.output.BrokenWriter#close()",
        "org.apache.commons.io.output.LockableFileWriter#close()",
        "org.apache.commons.io.output.NullWriter#close()",
        "org.apache.commons.io.output.AppendableWriter#close()",
        "org.apache.commons.io.output.StringBuilderWriter#close()",
        "org.apache.commons.io.output.FilterCollectionWriter#close()"
    ],
    "org.apache.commons.io.build.AbstractOrigin.ReaderOrigin#ReaderOrigin(Reader)": [
        "org.apache.commons.io.build.AbstractOrigin.ReaderOrigin.<init>()",
        "org.apache.commons.io.build.AbstractOrigin#AbstractOrigin(T)"
    ],
    "org.apache.commons.io.build.AbstractOrigin#getWriter(Charset,OpenOption[]...)": [
        "org.apache.commons.io.build.AbstractOrigin.PathOrigin#getPath()",
        "org.apache.commons.io.build.AbstractOrigin.URIOrigin#getPath()",
        "org.apache.commons.io.build.AbstractOrigin.FileOrigin#getPath()",
        "org.apache.commons.io.build.AbstractOrigin#getPath()"
    ],
    "org.apache.commons.io.build.AbstractOriginSupplier#setInputStream(InputStream)": [
        "org.apache.commons.io.input.Tailer.Builder#setOrigin(AbstractOrigin<?, ?>)",
        "org.apache.commons.io.build.AbstractOriginSupplier.newInputStreamOrigin(InputStream)",
        "org.apache.commons.io.build.AbstractOriginSupplier#setOrigin(AbstractOrigin<?, ?>)"
    ],
    "org.apache.commons.io.charset.CharsetEncoders.toCharsetEncoder(CharsetEncoder)": ["org.apache.commons.io.charset.CharsetEncoders.toCharsetEncoder(CharsetEncoder,Supplier<CharsetEncoder>)"],
    "org.apache.commons.io.IOUtils.toCharArray(InputStream,String)": [
        "org.apache.commons.io.IOUtils.toCharArray(InputStream,Charset)",
        "org.apache.commons.io.Charsets.toCharset(String)"
    ],
    "org.apache.commons.io.input.NullInputStream#init()": ["org.apache.commons.io.input.AbstractInputStream#setClosed(boolean)"],
    "org.apache.commons.io.function.IOBaseStream#spliterator()": [
        "org.apache.commons.io.function.IOSpliteratorAdapter.adapt(Spliterator<E>)",
        "org.apache.commons.io.function.IOBaseStreamAdapter#unwrap()"
    ],
    "org.apache.commons.io.function.IOSpliterator#tryAdvance(IOConsumer<? super T>)": [
        "org.apache.commons.io.function.IOSpliteratorAdapter#unwrap()",
        "org.apache.commons.io.function.UncheckedIOSpliterator#tryAdvance(Consumer<? super T>)"
    ],
    "org.apache.commons.io.output.UncheckedFilterWriter#write(char[],int,int)": ["org.apache.commons.io.function.Uncheck.accept(IOTriConsumer<T, U, V>,T,U,V)"],
    "org.apache.commons.io.filefilter.FileFilterUtils.notFileFilter(IOFileFilter)": [
        "org.apache.commons.io.filefilter.FalseFileFilter#negate()",
        "org.apache.commons.io.filefilter.TrueFileFilter#negate()",
        "org.apache.commons.io.filefilter.IOFileFilter#negate()"
    ],
    "org.apache.commons.io.FilenameUtils.isIPv4Address(String)": ["org.apache.commons.io.FilenameUtils.<staticinit>()"],
    "org.apache.commons.io.IOUtils.readLines(InputStream,Charset)": [
        "org.apache.commons.io.Charsets.toCharset(Charset)",
        "org.apache.commons.io.IOUtils.readLines(Reader)"
    ],
    "org.apache.commons.io.input.UncheckedBufferedReader#readLine()": ["org.apache.commons.io.function.Uncheck.get(IOSupplier<T>)"],
    "org.apache.commons.io.input.UnsynchronizedBufferedReader#UnsynchronizedBufferedReader(Reader,int)": [
        "org.apache.commons.io.input.UnsynchronizedReader.<init>()",
        "org.apache.commons.io.input.UnsynchronizedBufferedReader.<init>()"
    ],
    "org.apache.commons.io.input.UnsynchronizedByteArrayInputStream#UnsynchronizedByteArrayInputStream(byte[])": ["org.apache.commons.io.input.UnsynchronizedByteArrayInputStream#UnsynchronizedByteArrayInputStream(byte[],int,int,int)"],
    "org.apache.commons.io.input.XmlStreamReader.getContentTypeEncoding(String)": ["org.apache.commons.io.input.XmlStreamReader.<staticinit>()"],
    "org.apache.commons.io.IOUtils.toString(URL)": ["org.apache.commons.io.IOUtils.toString(URL,Charset)"],
    "org.apache.commons.io.build.AbstractOrigin#getFile()": ["org.apache.commons.io.build.AbstractOrigin#getSimpleClassName()"],
    "org.apache.commons.io.input.NullInputStream#read()": [
        "org.apache.commons.io.input.NullInputStream#processByte()",
        "org.apache.commons.io.input.NullInputStream#handleEof()",
        "org.apache.commons.io.input.AbstractInputStream#checkOpen()"
    ],
    "org.apache.commons.io.CloseableURLConnection#getHeaderFieldLong(String,long)": ["org.apache.commons.io.CloseableURLConnection#getHeaderFieldLong(String,long)"],
    "org.apache.commons.io.input.UnsynchronizedBufferedReader#peek(char[])": [
        "org.apache.commons.io.input.UnsynchronizedBufferedReader#read(char[],int,int)",
        "org.apache.commons.io.input.UnsynchronizedBufferedReader#reset()",
        "org.apache.commons.io.input.UnsynchronizedBufferedReader#mark(int)"
    ],
    "org.apache.commons.io.filefilter.FileEqualsFileFilter#accept(Path,BasicFileAttributes)": ["org.apache.commons.io.filefilter.AbstractFileFilter#toFileVisitResult(boolean)"],
    "org.apache.commons.io.FileUtils.listFiles(File,String[],boolean)": [
        "org.apache.commons.io.FileUtils.toList(Stream<File>)",
        "org.apache.commons.io.FileUtils.streamFiles(File,boolean,String[]...)",
        "org.apache.commons.io.function.Uncheck.get(IOSupplier<T>)"
    ],
    "org.apache.commons.io.input.BOMInputStream#readFirstBytes()": [
        "org.apache.commons.io.IOUtils.<staticinit>()",
        "org.apache.commons.io.input.BOMInputStream#getBOM()"
    ],
    "org.apache.commons.io.build.AbstractStreamBuilder#setBufferSizeDefault(int)": ["org.apache.commons.io.build.AbstractSupplier#asThis()"],
    "org.apache.commons.io.input.buffer.CircularBufferInputStream#read(byte[],int,int)": [
        "org.apache.commons.io.input.buffer.CircularByteBuffer#getCurrentNumberOfBytes()",
        "org.apache.commons.io.input.buffer.CircularByteBuffer#read()",
        "org.apache.commons.io.IOUtils.<staticinit>()",
        "org.apache.commons.io.input.buffer.CircularBufferInputStream#haveBytes(int)"
    ],
    "org.apache.commons.io.serialization.ValidatingObjectInputStream#accept(Pattern)": ["org.apache.commons.io.serialization.RegexpClassNameMatcher#RegexpClassNameMatcher(Pattern)"],
    "org.apache.commons.io.output.XmlStreamWriter#XmlStreamWriter(File)": ["org.apache.commons.io.output.XmlStreamWriter#XmlStreamWriter(File,String)"],
    "org.apache.commons.io.channels.FileChannels.contentEquals(FileChannel,FileChannel,int)": [
        "org.apache.commons.io.channels.FileChannels.size(FileChannel)",
        "org.apache.commons.io.IOUtils.<staticinit>()"
    ],
    "org.apache.commons.io.output.LockableFileWriter.Builder#Builder()": [
        "org.apache.commons.io.build.AbstractStreamBuilder#setBufferSize(int)",
        "org.apache.commons.io.build.AbstractStreamBuilder#setBufferSizeDefault(int)",
        "org.apache.commons.io.build.AbstractStreamBuilder.<init>()",
        "org.apache.commons.io.output.AbstractByteArrayOutputStream.<staticinit>()",
        "org.apache.commons.io.output.LockableFileWriter.Builder.<init>()"
    ],
    "org.apache.commons.io.input.ReversedLinesFileReader#ReversedLinesFileReader(File,int,String)": ["org.apache.commons.io.input.ReversedLinesFileReader#ReversedLinesFileReader(File,int,String)"],
    "org.apache.commons.io.input.CharSequenceInputStream#CharSequenceInputStream(CharSequence,Charset,int)": [
        "org.apache.commons.io.input.CharSequenceInputStream.newEncoder(Charset)",
        "org.apache.commons.io.input.CharSequenceInputStream#CharSequenceInputStream(CharSequence,int,CharsetEncoder)"
    ],
    "org.apache.commons.io.input.UnsynchronizedBufferedReader#reset()": ["org.apache.commons.io.input.UnsynchronizedReader#checkOpen()"],
    "org.apache.commons.io.input.MemoryMappedFileInputStream.builder()": ["org.apache.commons.io.input.MemoryMappedFileInputStream.Builder#Builder()"],
    "org.apache.commons.io.filefilter.AndFileFilter#accept(File,String)": [
        "org.apache.commons.io.filefilter.WildcardFileFilter#accept(File,String)",
        "org.apache.commons.io.filefilter.AndFileFilter#accept(File,String)",
        "org.apache.commons.io.filefilter.AbstractFileFilter#accept(File,String)",
        "org.apache.commons.io.filefilter.TrueFileFilter#accept(File,String)",
        "org.apache.commons.io.filefilter.AndFileFilter#isEmpty()",
        "org.apache.commons.io.filefilter.FalseFileFilter#accept(File,String)",
        "org.apache.commons.io.filefilter.SuffixFileFilter#accept(File,String)",
        "org.apache.commons.io.filefilter.RegexFileFilter#accept(File,String)",
        "org.apache.commons.io.filefilter.DelegateFileFilter#accept(File,String)",
        "org.apache.commons.io.filefilter.NotFileFilter#accept(File,String)",
        "org.apache.commons.io.filefilter.WildcardFilter#accept(File,String)",
        "org.apache.commons.io.filefilter.OrFileFilter#accept(File,String)",
        "org.apache.commons.io.filefilter.NameFileFilter#accept(File,String)",
        "org.apache.commons.io.filefilter.PrefixFileFilter#accept(File,String)",
        "org.apache.commons.io.filefilter.PathVisitorFileFilter#accept(File,String)"
    ],
    "org.apache.commons.io.file.PathUtils.filterPaths(PathFilter,Stream<Path>,Collector<? super Path, A, R>)": [
        "org.apache.commons.io.filefilter.SizeFileFilter#accept(Path,BasicFileAttributes)",
        "org.apache.commons.io.filefilter.WildcardFileFilter#accept(Path,BasicFileAttributes)",
        "org.apache.commons.io.filefilter.FalseFileFilter#accept(Path,BasicFileAttributes)",
        "org.apache.commons.io.filefilter.FileEqualsFileFilter#accept(Path,BasicFileAttributes)",
        "org.apache.commons.io.file.PathUtils.readBasicFileAttributes(Path)",
        "org.apache.commons.io.filefilter.PathVisitorFileFilter#accept(Path,BasicFileAttributes)",
        "org.apache.commons.io.filefilter.SymbolicLinkFileFilter#accept(Path,BasicFileAttributes)",
        "org.apache.commons.io.filefilter.PrefixFileFilter#accept(Path,BasicFileAttributes)",
        "org.apache.commons.io.filefilter.CanExecuteFileFilter#accept(Path,BasicFileAttributes)",
        "org.apache.commons.io.filefilter.MagicNumberFileFilter#accept(Path,BasicFileAttributes)",
        "org.apache.commons.io.filefilter.WildcardFilter#accept(Path,BasicFileAttributes)",
        "org.apache.commons.io.filefilter.NotFileFilter#accept(Path,BasicFileAttributes)",
        "org.apache.commons.io.filefilter.IOFileFilter#accept(Path,BasicFileAttributes)",
        "org.apache.commons.io.filefilter.AndFileFilter#accept(Path,BasicFileAttributes)",
        "org.apache.commons.io.filefilter.DirectoryFileFilter#accept(Path,BasicFileAttributes)",
        "org.apache.commons.io.filefilter.CanWriteFileFilter#accept(Path,BasicFileAttributes)",
        "org.apache.commons.io.filefilter.AgeFileFilter#accept(Path,BasicFileAttributes)",
        "org.apache.commons.io.filefilter.HiddenFileFilter#accept(Path,BasicFileAttributes)",
        "org.apache.commons.io.filefilter.TrueFileFilter#accept(Path,BasicFileAttributes)",
        "org.apache.commons.io.filefilter.EmptyFileFilter#accept(Path,BasicFileAttributes)",
        "org.apache.commons.io.filefilter.OrFileFilter#accept(Path,BasicFileAttributes)",
        "org.apache.commons.io.filefilter.PathEqualsFileFilter#accept(Path,BasicFileAttributes)",
        "org.apache.commons.io.filefilter.CanReadFileFilter#accept(Path,BasicFileAttributes)",
        "org.apache.commons.io.filefilter.NameFileFilter#accept(Path,BasicFileAttributes)",
        "org.apache.commons.io.filefilter.FileFileFilter#accept(Path,BasicFileAttributes)",
        "org.apache.commons.io.filefilter.RegexFileFilter#accept(Path,BasicFileAttributes)",
        "org.apache.commons.io.filefilter.SuffixFileFilter#accept(Path,BasicFileAttributes)"
    ],
    "org.apache.commons.io.filefilter.MagicNumberFileFilter#accept(Path,BasicFileAttributes)": ["org.apache.commons.io.filefilter.AbstractFileFilter#toFileVisitResult(boolean)"],
    "org.apache.commons.io.output.ChunkedOutputStream#ChunkedOutputStream(OutputStream,int)": ["org.apache.commons.io.output.ChunkedOutputStream.<init>()"],
    "org.apache.commons.io.filefilter.IOFileFilter#accept(Path,BasicFileAttributes)": [
        "org.apache.commons.io.filefilter.CanExecuteFileFilter#accept(File)",
        "org.apache.commons.io.filefilter.AbstractFileFilter#accept(File)",
        "org.apache.commons.io.filefilter.CanWriteFileFilter#accept(File)",
        "org.apache.commons.io.filefilter.HiddenFileFilter#accept(File)",
        "org.apache.commons.io.filefilter.PathVisitorFileFilter#accept(File)",
        "org.apache.commons.io.filefilter.FileFileFilter#accept(File)",
        "org.apache.commons.io.filefilter.OrFileFilter#accept(File)",
        "org.apache.commons.io.filefilter.PathEqualsFileFilter#accept(File)",
        "org.apache.commons.io.filefilter.SuffixFileFilter#accept(File)",
        "org.apache.commons.io.filefilter.CanReadFileFilter#accept(File)",
        "org.apache.commons.io.filefilter.TrueFileFilter#accept(File)",
        "org.apache.commons.io.filefilter.PrefixFileFilter#accept(File)",
        "org.apache.commons.io.filefilter.MagicNumberFileFilter#accept(File)",
        "org.apache.commons.io.filefilter.NameFileFilter#accept(File)",
        "org.apache.commons.io.filefilter.WildcardFileFilter#accept(File)",
        "org.apache.commons.io.filefilter.NotFileFilter#accept(File)",
        "org.apache.commons.io.filefilter.PathMatcherFileFilter#accept(File)",
        "org.apache.commons.io.filefilter.AbstractFileFilter.toDefaultFileVisitResult(boolean)",
        "org.apache.commons.io.filefilter.FileEqualsFileFilter#accept(File)",
        "org.apache.commons.io.filefilter.WildcardFilter#accept(File)",
        "org.apache.commons.io.filefilter.AgeFileFilter#accept(File)",
        "org.apache.commons.io.filefilter.DelegateFileFilter#accept(File)",
        "org.apache.commons.io.filefilter.SizeFileFilter#accept(File)",
        "org.apache.commons.io.filefilter.FalseFileFilter#accept(File)",
        "org.apache.commons.io.filefilter.AndFileFilter#accept(File)",
        "org.apache.commons.io.filefilter.SymbolicLinkFileFilter#accept(File)",
        "org.apache.commons.io.filefilter.DirectoryFileFilter#accept(File)",
        "org.apache.commons.io.filefilter.EmptyFileFilter#accept(File)"
    ],
    "org.apache.commons.io.EndianUtils.read(InputStream)": [
        "org.apache.commons.io.input.CharSequenceInputStream#read()",
        "org.apache.commons.io.input.UnsynchronizedByteArrayInputStream#read()",
        "org.apache.commons.io.input.RandomAccessFileInputStream#read()",
        "org.apache.commons.io.input.ReaderInputStream#read()",
        "org.apache.commons.io.input.UnsynchronizedFilterInputStream#read()",
        "org.apache.commons.io.input.UnixLineEndingInputStream#read()",
        "org.apache.commons.io.input.DemuxInputStream#read()",
        "org.apache.commons.io.input.QueueInputStream#read()",
        "org.apache.commons.io.input.NullInputStream#read()",
        "org.apache.commons.io.IOUtils.<staticinit>()",
        "org.apache.commons.io.input.MemoryMappedFileInputStream#read()",
        "org.apache.commons.io.input.BufferedFileChannelInputStream#read()",
        "org.apache.commons.io.input.WindowsLineEndingInputStream#read()",
        "org.apache.commons.io.input.BrokenInputStream#read()",
        "org.apache.commons.io.input.ClosedInputStream#read()",
        "org.apache.commons.io.input.UnsynchronizedBufferedInputStream#read()",
        "org.apache.commons.io.input.CircularInputStream#read()"
    ],
    "org.apache.commons.io.function.IOStream.of(T)": ["org.apache.commons.io.function.IOStream.adapt(Stream<T>)"],
    "org.apache.commons.io.output.WriterOutputStream#WriterOutputStream(Writer,String)": [
        "org.apache.commons.io.output.WriterOutputStream#WriterOutputStream(Writer,String,int,boolean)",
        "org.apache.commons.io.output.WriterOutputStream.<staticinit>()"
    ],
    "org.apache.commons.io.IOUtils.write(String,Writer)": [
        "org.apache.commons.io.output.ProxyCollectionWriter#write(String)",
        "org.apache.commons.io.output.FilterCollectionWriter#write(String)",
        "org.apache.commons.io.output.LockableFileWriter#write(String)",
        "org.apache.commons.io.output.StringBuilderWriter#write(String)",
        "org.apache.commons.io.output.NullWriter#write(String)"
    ],
    "org.apache.commons.io.FileUtils.write(File,CharSequence,String)": ["org.apache.commons.io.FileUtils.write(File,CharSequence,String,boolean)"],
    "org.apache.commons.io.IOUtils.copy(URL,OutputStream)": [
        "org.apache.commons.io.IOUtils.<staticinit>()",
        "org.apache.commons.io.IOUtils.copyLarge(InputStream,OutputStream)"
    ],
    "org.apache.commons.io.file.attribute.FileTimes.ntfsTimeToDate(long)": ["org.apache.commons.io.file.attribute.FileTimes.<staticinit>()"],
    "org.apache.commons.io.file.PathUtils.newOutputStream(Path,LinkOption[],OpenOption[]...)": [
        "org.apache.commons.io.file.PathUtils.<staticinit>()",
        "org.apache.commons.io.file.PathUtils.exists(Path,LinkOption[]...)"
    ],
    "org.apache.commons.io.FileUtils.isFileNewer(File,OffsetDateTime)": ["org.apache.commons.io.FileUtils.isFileNewer(File,ChronoLocalDateTime<?>)"],
    "org.apache.commons.io.input.ByteBufferCleaner.clean(ByteBuffer)": [
        "org.apache.commons.io.input.ByteBufferCleaner.Java9Cleaner#clean(ByteBuffer)",
        "org.apache.commons.io.input.ByteBufferCleaner.Java8Cleaner#clean(ByteBuffer)",
        "org.apache.commons.io.input.ByteBufferCleaner.<staticinit>()"
    ],
    "org.apache.commons.io.input.SwappedDataInputStream#readChar()": ["org.apache.commons.io.input.SwappedDataInputStream#readShort()"],
    "org.apache.commons.io.input.QueueInputStream#QueueInputStream()": ["org.apache.commons.io.input.QueueInputStream#QueueInputStream(BlockingQueue<Integer>)"],
    "org.apache.commons.io.file.CountingPathVisitor.withLongCounters()": [
        "org.apache.commons.io.file.CountingPathVisitor#CountingPathVisitor(PathCounters)",
        "org.apache.commons.io.file.Counters.longPathCounters()"
    ],
    "org.apache.commons.io.output.CloseShieldOutputStream#close()": ["org.apache.commons.io.output.ClosedOutputStream.<staticinit>()"],
    "org.apache.commons.io.filefilter.FileFilterUtils.or(IOFileFilter[]...)": [
        "org.apache.commons.io.filefilter.FileFilterUtils.toList(IOFileFilter[]...)",
        "org.apache.commons.io.filefilter.OrFileFilter#OrFileFilter(List<IOFileFilter>)"
    ],
    "org.apache.commons.io.FileUtils.readFileToString(File,String)": [
        "org.apache.commons.io.Charsets.toCharset(String)",
        "org.apache.commons.io.FileUtils.readFileToString(File,Charset)"
    ],
    "org.apache.commons.io.input.ProxyInputStream#read(byte[])": [
        "org.apache.commons.io.input.AutoCloseInputStream#afterRead(int)",
        "org.apache.commons.io.input.UnsynchronizedFilterInputStream#read(byte[])",
        "org.apache.commons.io.input.ProxyInputStream#afterRead(int)",
        "org.apache.commons.io.input.BoundedInputStream#afterRead(int)",
        "org.apache.commons.io.input.CountingInputStream#afterRead(int)",
        "org.apache.commons.io.input.NullInputStream#read(byte[])",
        "org.apache.commons.io.IOUtils.<staticinit>()",
        "org.apache.commons.io.input.ThrottledInputStream#beforeRead(int)",
        "org.apache.commons.io.input.CharSequenceInputStream#read(byte[])",
        "org.apache.commons.io.input.RandomAccessFileInputStream#read(byte[])",
        "org.apache.commons.io.input.ProxyInputStream#beforeRead(int)",
        "org.apache.commons.io.input.ReaderInputStream#read(byte[])",
        "org.apache.commons.io.IOUtils.length(byte[])",
        "org.apache.commons.io.input.UnsynchronizedByteArrayInputStream#read(byte[])",
        "org.apache.commons.io.input.TaggedInputStream#handleIOException(IOException)",
        "org.apache.commons.io.input.ChecksumInputStream#afterRead(int)",
        "org.apache.commons.io.input.ProxyInputStream#handleIOException(IOException)"
    ],
    "org.apache.commons.io.build.AbstractOriginSupplier.newReaderOrigin(Reader)": ["org.apache.commons.io.build.AbstractOrigin.ReaderOrigin#ReaderOrigin(Reader)"],
    "org.apache.commons.io.output.FilterCollectionWriter#write(char[])": [
        "org.apache.commons.io.output.ProxyCollectionWriter#write(char[])",
        "org.apache.commons.io.output.LockableFileWriter#write(char[])",
        "org.apache.commons.io.output.FilterCollectionWriter#write(char[])",
        "org.apache.commons.io.output.FilterCollectionWriter#forAllWriters(IOConsumer<Writer>)",
        "org.apache.commons.io.output.NullWriter#write(char[])"
    ],
    "org.apache.commons.io.output.DeferredFileOutputStream.builder()": ["org.apache.commons.io.output.DeferredFileOutputStream.Builder#Builder()"],
    "org.apache.commons.io.build.AbstractStreamBuilder#setBufferSize(int)": [
        "org.apache.commons.io.build.AbstractStreamBuilder#checkBufferSize(int)",
        "org.apache.commons.io.build.AbstractSupplier#asThis()"
    ],
    "org.apache.commons.io.input.XmlStreamReaderException#XmlStreamReaderException(String,String,String,String,String,String)": ["org.apache.commons.io.input.XmlStreamReaderException.<init>()"],
    "org.apache.commons.io.file.FilesUncheck.createTempDirectory(Path,String,FileAttribute<?>[]...)": ["org.apache.commons.io.function.Uncheck.apply(IOTriFunction<T, U, V, R>,T,U,V)"],
    "org.apache.commons.io.input.SequenceReader#SequenceReader(Reader[]...)": ["org.apache.commons.io.input.SequenceReader#SequenceReader(Iterable<? extends Reader>)"],
    "org.apache.commons.io.filefilter.PrefixFileFilter#PrefixFileFilter(String[]...)": [
        "org.apache.commons.io.IOCase.<staticinit>()",
        "org.apache.commons.io.filefilter.PrefixFileFilter#PrefixFileFilter(String[],IOCase)"
    ],
    "org.apache.commons.io.FileUtils.writeStringToFile(File,String,Charset)": ["org.apache.commons.io.FileUtils.writeStringToFile(File,String,Charset,boolean)"],
    "org.apache.commons.io.input.AbstractCharacterFilterReader#read()": [
        "org.apache.commons.io.input.NullReader#read()",
        "org.apache.commons.io.input.UnsynchronizedBufferedReader#read()",
        "org.apache.commons.io.input.BoundedReader#read()",
        "org.apache.commons.io.input.SequenceReader#read()",
        "org.apache.commons.io.IOUtils.<staticinit>()",
        "org.apache.commons.io.input.AbstractCharacterFilterReader#filter(int)",
        "org.apache.commons.io.input.CharSequenceReader#read()"
    ],
    "org.apache.commons.io.CopyUtils.copy(InputStream,Writer,String)": ["org.apache.commons.io.CopyUtils.copy(Reader,Writer)"],
    "org.apache.commons.io.function.IOStream#reduce(IOBinaryOperator<T>)": [
        "org.apache.commons.io.function.Erase.apply(IOBiFunction<? super T, ? super U, ? extends R>,T,U)",
        "org.apache.commons.io.function.IOBaseStreamAdapter#unwrap()"
    ],
    "org.apache.commons.io.output.FileWriterWithEncoding#FileWriterWithEncoding(File,CharsetEncoder,boolean)": [
        "org.apache.commons.io.output.FileWriterWithEncoding.initWriter(File,Object,boolean)",
        "org.apache.commons.io.output.FileWriterWithEncoding#FileWriterWithEncoding(OutputStreamWriter)"
    ],
    "org.apache.commons.io.output.ProxyCollectionWriter#append(char)": [
        "org.apache.commons.io.output.ProxyCollectionWriter#handleIOException(IOException)",
        "org.apache.commons.io.output.ProxyCollectionWriter#afterWrite(int)",
        "org.apache.commons.io.output.FilterCollectionWriter#append(char)",
        "org.apache.commons.io.output.ProxyCollectionWriter#beforeWrite(int)"
    ],
    "org.apache.commons.io.input.ClosedReader#read(char[],int,int)": ["org.apache.commons.io.IOUtils.<staticinit>()"],
    "org.apache.commons.io.comparator.ExtensionFileComparator#compare(File,File)": [
        "org.apache.commons.io.IOCase#checkCompareTo(String,String)",
        "org.apache.commons.io.FilenameUtils.getExtension(String)"
    ],
    "org.apache.commons.io.output.UncheckedFilterWriter#append(CharSequence)": ["org.apache.commons.io.function.Uncheck.apply(IOFunction<T, R>,T)"],
    "org.apache.commons.io.input.SequenceReader#nextReader()": [
        "org.apache.commons.io.function.UncheckedIOIterator#hasNext()",
        "org.apache.commons.io.LineIterator#hasNext()",
        "org.apache.commons.io.input.NullReader#close()",
        "org.apache.commons.io.input.UnsynchronizedBufferedReader#close()",
        "org.apache.commons.io.input.BrokenReader#close()",
        "org.apache.commons.io.function.IOStream.iterate(T,IOUnaryOperator<T>)$Iterator$1#hasNext()",
        "org.apache.commons.io.input.CharSequenceReader#close()",
        "org.apache.commons.io.input.SequenceReader#close()",
        "org.apache.commons.io.input.BoundedReader#close()",
        "org.apache.commons.io.input.ClosedReader#close()",
        "org.apache.commons.io.function.UncheckedIOIterator#next()",
        "org.apache.commons.io.StreamIterator#next()",
        "org.apache.commons.io.input.UnsynchronizedReader#close()",
        "org.apache.commons.io.StreamIterator#hasNext()",
        "org.apache.commons.io.function.IOStream.iterate(T,IOUnaryOperator<T>)$Iterator$1#next()",
        "org.apache.commons.io.input.XmlStreamReader#close()"
    ],
    "org.apache.commons.io.filefilter.WildcardFileFilter#accept(String)": ["org.apache.commons.io.FilenameUtils.wildcardMatch(String,String,IOCase)"],
    "org.apache.commons.io.output.ByteArrayOutputStream#toByteArray()": ["org.apache.commons.io.output.AbstractByteArrayOutputStream#toByteArrayImpl()"],
    "org.apache.commons.io.filefilter.AgeFileFilter#AgeFileFilter(Instant)": ["org.apache.commons.io.filefilter.AgeFileFilter#AgeFileFilter(Instant,boolean)"],
    "org.apache.commons.io.filefilter.FileFilterUtils.ageFileFilter(long)": ["org.apache.commons.io.filefilter.AgeFileFilter#AgeFileFilter(long)"],
    "org.apache.commons.io.input.UncheckedBufferedReader#skip(long)": ["org.apache.commons.io.function.Uncheck.apply(IOFunction<T, R>,T)"],
    "org.apache.commons.io.build.AbstractOriginSupplier#setPath(String)": [
        "org.apache.commons.io.input.Tailer.Builder#setOrigin(AbstractOrigin<?, ?>)",
        "org.apache.commons.io.build.AbstractOriginSupplier.newPathOrigin(String)",
        "org.apache.commons.io.build.AbstractOriginSupplier#setOrigin(AbstractOrigin<?, ?>)"
    ],
    "org.apache.commons.io.file.CountingPathVisitor#CountingPathVisitor(PathCounters)": [
        "org.apache.commons.io.file.CountingPathVisitor#CountingPathVisitor(PathCounters,PathFilter,PathFilter)",
        "org.apache.commons.io.file.CountingPathVisitor.defaultFileFilter()",
        "org.apache.commons.io.file.CountingPathVisitor.defaultDirFilter()"
    ],
    "org.apache.commons.io.function.IOIntSupplier#asIntSupplier()": ["org.apache.commons.io.function.Uncheck.getAsInt(IOIntSupplier)"],
    "org.apache.commons.io.input.BrokenInputStream#rethrow()": [
        "org.apache.commons.io.function.Erase.rethrow(Throwable)",
        "org.apache.commons.io.input.BrokenInputStream#getThrowable()"
    ],
    "org.apache.commons.io.IOUtils.closeQuietly(Reader)": ["org.apache.commons.io.IOUtils.closeQ(Closeable)"],
    "org.apache.commons.io.input.ChecksumInputStream.builder()": ["org.apache.commons.io.input.ChecksumInputStream.Builder.<init>()"],
    "org.apache.commons.io.build.AbstractOrigin.InputStreamOrigin#InputStreamOrigin(InputStream)": [
        "org.apache.commons.io.build.AbstractOrigin#AbstractOrigin(T)",
        "org.apache.commons.io.build.AbstractOrigin.InputStreamOrigin.<init>()"
    ],
    "org.apache.commons.io.input.NullReader#NullReader(long,boolean,boolean)": ["org.apache.commons.io.input.NullReader.<init>()"],
    "org.apache.commons.io.FileExistsException#FileExistsException(String)": ["org.apache.commons.io.FileExistsException.<init>()"],
    "org.apache.commons.io.input.SwappedDataInputStream#readShort()": ["org.apache.commons.io.EndianUtils.readSwappedShort(InputStream)"],
    "org.apache.commons.io.FileUtils.toFile(URL)": [
        "org.apache.commons.io.FileUtils.isFileProtocol(URL)",
        "org.apache.commons.io.FileUtils.decodeUrl(String)"
    ],
    "org.apache.commons.io.filefilter.AgeFileFilter#AgeFileFilter(Date,boolean)": ["org.apache.commons.io.filefilter.AgeFileFilter#AgeFileFilter(Date,boolean)"],
    "org.apache.commons.io.input.BufferedFileChannelInputStream#read(byte[],int,int)": [
        "org.apache.commons.io.IOUtils.<staticinit>()",
        "org.apache.commons.io.input.BufferedFileChannelInputStream#refill()"
    ],
    "org.apache.commons.io.filefilter.SuffixFileFilter#SuffixFileFilter(List<String>)": [
        "org.apache.commons.io.IOCase.<staticinit>()",
        "org.apache.commons.io.filefilter.SuffixFileFilter#SuffixFileFilter(List<String>,IOCase)"
    ],
    "org.apache.commons.io.IOUtils.toByteArray(Reader)": ["org.apache.commons.io.IOUtils.toByteArray(Reader,Charset)"],
    "org.apache.commons.io.input.NullReader#read(char[])": ["org.apache.commons.io.input.NullReader#read(char[],int,int)"],
    "org.apache.commons.io.EndianUtils.readSwappedUnsignedInteger(InputStream)": ["org.apache.commons.io.EndianUtils.read(InputStream)"],
    "org.apache.commons.io.output.UncheckedAppendableImpl#UncheckedAppendableImpl(Appendable)": ["org.apache.commons.io.output.UncheckedAppendableImpl.<init>()"],
    "org.apache.commons.io.build.AbstractOrigin.WriterOrigin#WriterOrigin(Writer)": [
        "org.apache.commons.io.build.AbstractOrigin#AbstractOrigin(T)",
        "org.apache.commons.io.build.AbstractOrigin.WriterOrigin.<init>()"
    ],
    "org.apache.commons.io.IOUtils.toString(Reader)": [
        "org.apache.commons.io.IOUtils.copy(Reader,Writer)",
        "org.apache.commons.io.output.StringBuilderWriter#StringBuilderWriter()",
        "org.apache.commons.io.output.StringBuilderWriter#toString()"
    ],
    "org.apache.commons.io.IOUtils.readFully(InputStream,int)": [
        "org.apache.commons.io.IOUtils.readFully(InputStream,byte[],int,int)",
        "org.apache.commons.io.IOUtils.byteArray(int)"
    ],
    "org.apache.commons.io.output.ProxyCollectionWriter#write(String,int,int)": [
        "org.apache.commons.io.output.FilterCollectionWriter#write(String,int,int)",
        "org.apache.commons.io.output.ProxyCollectionWriter#beforeWrite(int)",
        "org.apache.commons.io.output.ProxyCollectionWriter#handleIOException(IOException)",
        "org.apache.commons.io.output.ProxyCollectionWriter#afterWrite(int)"
    ],
    "org.apache.commons.io.IOUtils.toString(URI)": ["org.apache.commons.io.IOUtils.toString(URI,Charset)"],
    "org.apache.commons.io.FileUtils.lastModifiedUnchecked(File)": ["org.apache.commons.io.function.Uncheck.apply(IOFunction<T, R>,T)"],
    "org.apache.commons.io.FileUtils.streamFiles(File,boolean,String[]...)": [
        "org.apache.commons.io.filefilter.SuffixFileFilter#SuffixFileFilter(String[]...)",
        "org.apache.commons.io.FileUtils.toSuffixes(String[]...)",
        "org.apache.commons.io.FileUtils.toMaxDepth(boolean)",
        "org.apache.commons.io.filefilter.FileFileFilter.<staticinit>()",
        "org.apache.commons.io.filefilter.FalseFileFilter#and(IOFileFilter)",
        "org.apache.commons.io.filefilter.TrueFileFilter#and(IOFileFilter)",
        "org.apache.commons.io.filefilter.IOFileFilter#and(IOFileFilter)"
    ],
    "org.apache.commons.io.file.PathUtils.getFileNameString(Path)": ["org.apache.commons.io.file.PathUtils.getFileName(Path,Function<Path, R>)"],
    "org.apache.commons.io.comparator.SizeFileComparator#SizeFileComparator(boolean)": [
        "org.apache.commons.io.comparator.AbstractFileComparator.<init>()",
        "org.apache.commons.io.comparator.SizeFileComparator.<init>()"
    ],
    "org.apache.commons.io.FileCleaningTracker#track(File,Object)": [
        "org.apache.commons.io.FileDeleteStrategy.<staticinit>()",
        "org.apache.commons.io.FileCleaningTracker#track(File,Object,FileDeleteStrategy)"
    ],
    "org.apache.commons.io.function.IOStreams.forAll(Stream<T>,IOConsumer<T>)": ["org.apache.commons.io.function.IOStreams.forAll(Stream<T>,IOConsumer<T>,BiFunction<Integer, IOException, IOException>)"],
    "org.apache.commons.io.build.AbstractStreamBuilder#setBufferSize(Integer)": [
        "org.apache.commons.io.build.AbstractStreamBuilder#setBufferSize(Integer)",
        "org.apache.commons.io.build.AbstractSupplier#asThis()"
    ],
    "org.apache.commons.io.file.FilesUncheck.newOutputStream(Path,OpenOption[]...)": ["org.apache.commons.io.function.Uncheck.apply(IOBiFunction<T, U, R>,T,U)"],
    "org.apache.commons.io.input.SwappedDataInputStream#readFully(byte[])": ["org.apache.commons.io.input.SwappedDataInputStream#readFully(byte[],int,int)"],
    "org.apache.commons.io.input.CharSequenceInputStream.newEncoder(Charset)": ["org.apache.commons.io.Charsets.toCharset(Charset)"],
    "org.apache.commons.io.file.CountingPathVisitor#CountingPathVisitor(PathCounters,PathFilter,PathFilter)": [
        "org.apache.commons.io.file.CountingPathVisitor.<init>()",
        "org.apache.commons.io.file.SimplePathVisitor#SimplePathVisitor()"
    ],
    "org.apache.commons.io.build.AbstractOrigin.ReaderOrigin#getReader(Charset)": ["org.apache.commons.io.build.AbstractOrigin#get()"],
    "org.apache.commons.io.IOUtils.toString(InputStream,String)": [
        "org.apache.commons.io.Charsets.toCharset(String)",
        "org.apache.commons.io.IOUtils.toString(InputStream,Charset)"
    ],
    "org.apache.commons.io.comparator.LastModifiedFileComparator.<init>()": ["org.apache.commons.io.comparator.AbstractFileComparator.<init>()"],
    "org.apache.commons.io.monitor.SerializableFileTime#SerializableFileTime(FileTime)": ["org.apache.commons.io.monitor.SerializableFileTime.<init>()"],
    "org.apache.commons.io.RandomAccessFileMode#RandomAccessFileMode(String)": ["org.apache.commons.io.RandomAccessFileMode.<init>()"],
    "org.apache.commons.io.input.UnixLineEndingInputStream#UnixLineEndingInputStream(InputStream,boolean)": ["org.apache.commons.io.input.UnixLineEndingInputStream.<init>()"],
    "org.apache.commons.io.IOCase.isCaseSensitive(IOCase)": ["org.apache.commons.io.IOCase#isCaseSensitive()"],
    "org.apache.commons.io.function.IOConsumer.forEach(Iterable<T>,IOConsumer<T>)": [
        "org.apache.commons.io.function.IOStreams.forEach(Stream<T>,IOConsumer<T>)",
        "org.apache.commons.io.function.IOStreams.of(Iterable<T>)"
    ],
    "org.apache.commons.io.FileUtils.moveDirectory(File,File)": [
        "org.apache.commons.io.FileUtils.copyDirectory(File,File)",
        "org.apache.commons.io.FileUtils.requireDirectoryExists(File,String)",
        "org.apache.commons.io.FileUtils.requireAbsent(File,String)",
        "org.apache.commons.io.FileUtils.deleteDirectory(File)"
    ],
    "org.apache.commons.io.output.AbstractByteArrayOutputStream#needNewBuffer(int)": ["org.apache.commons.io.IOUtils.byteArray(int)"],
    "org.apache.commons.io.output.XmlStreamWriter.builder()": ["org.apache.commons.io.output.XmlStreamWriter.Builder#Builder()"],
    "org.apache.commons.io.CloseableURLConnection#setDoInput(boolean)": ["org.apache.commons.io.CloseableURLConnection#setDoInput(boolean)"],
    "org.apache.commons.io.FilenameUtils.isSystemWindows()": ["org.apache.commons.io.FilenameUtils.<staticinit>()"],
    "org.apache.commons.io.output.BrokenOutputStream#BrokenOutputStream(IOException)": ["org.apache.commons.io.output.BrokenOutputStream#BrokenOutputStream(Supplier<Throwable>)"],
    "org.apache.commons.io.input.UncheckedFilterReader.Builder.<init>()": ["org.apache.commons.io.build.AbstractStreamBuilder.<init>()"],
    "org.apache.commons.io.FileUtils.createParentDirectories(File)": [
        "org.apache.commons.io.FileUtils.mkdirs(File)",
        "org.apache.commons.io.FileUtils.getParentFile(File)"
    ],
    "org.apache.commons.io.output.BrokenOutputStream#flush()": ["org.apache.commons.io.output.BrokenOutputStream#rethrow()"],
    "org.apache.commons.io.input.CharSequenceReader#ready()": ["org.apache.commons.io.input.CharSequenceReader#end()"],
    "org.apache.commons.io.function.IOStream#noneMatch(IOPredicate<? super T>)": [
        "org.apache.commons.io.function.Erase.test(IOPredicate<? super T>,T)",
        "org.apache.commons.io.function.IOBaseStreamAdapter#unwrap()"
    ],
    "org.apache.commons.io.function.IOStream.of(Iterable<T>)": [
        "org.apache.commons.io.function.IOStream.adapt(Stream<T>)",
        "org.apache.commons.io.function.IOStream.empty()"
    ],
    "org.apache.commons.io.IOUtils.read(Reader,char[])": ["org.apache.commons.io.IOUtils.read(Reader,char[],int,int)"],
    "org.apache.commons.io.filefilter.SuffixFileFilter#accept(File,String)": ["org.apache.commons.io.filefilter.SuffixFileFilter#accept(String)"],
    "org.apache.commons.io.input.ObservableInputStream#close()": [
        "org.apache.commons.io.input.ObservableInputStream#noteError(IOException)",
        "org.apache.commons.io.input.ProxyInputStream#close()",
        "org.apache.commons.io.input.ObservableInputStream#noteClosed()"
    ],
    "org.apache.commons.io.output.ProxyCollectionWriter#flush()": [
        "org.apache.commons.io.output.ProxyCollectionWriter#handleIOException(IOException)",
        "org.apache.commons.io.output.FilterCollectionWriter#flush()"
    ],
    "org.apache.commons.io.IOUtils.toString(IOSupplier<InputStream>,Charset,IOSupplier<String>)": [
        "org.apache.commons.io.input.UnsynchronizedFilterInputStream.Builder#get()",
        "org.apache.commons.io.input.BOMInputStream.Builder#get()",
        "org.apache.commons.io.input.CharSequenceInputStream.Builder#get()",
        "org.apache.commons.io.input.QueueInputStream.Builder#get()",
        "org.apache.commons.io.input.ReaderInputStream.Builder#get()",
        "org.apache.commons.io.filefilter.WildcardFileFilter.Builder#get()",
        "org.apache.commons.io.input.ChecksumInputStream.Builder#get()",
        "org.apache.commons.io.input.Tailer.Builder#get()",
        "org.apache.commons.io.output.WriterOutputStream.Builder#get()",
        "org.apache.commons.io.input.ReadAheadInputStream.Builder#get()",
        "org.apache.commons.io.input.UnsynchronizedBufferedInputStream.Builder#get()",
        "org.apache.commons.io.input.UncheckedFilterInputStream.Builder#get()",
        "org.apache.commons.io.input.AutoCloseInputStream.Builder#get()",
        "org.apache.commons.io.output.ChunkedOutputStream.Builder#get()",
        "org.apache.commons.io.input.UnsynchronizedByteArrayInputStream.Builder#get()",
        "org.apache.commons.io.output.UncheckedFilterOutputStream.Builder#get()",
        "org.apache.commons.io.output.XmlStreamWriter.Builder#get()",
        "org.apache.commons.io.input.MessageDigestCalculatingInputStream.Builder#get()",
        "org.apache.commons.io.input.BoundedInputStream.Builder#get()",
        "org.apache.commons.io.output.LockableFileWriter.Builder#get()",
        "org.apache.commons.io.input.ReversedLinesFileReader.Builder#get()",
        "org.apache.commons.io.input.ThrottledInputStream.Builder#get()",
        "org.apache.commons.io.IOUtils.toString(InputStream,Charset)",
        "org.apache.commons.io.build.AbstractOrigin#get()",
        "org.apache.commons.io.output.UnsynchronizedByteArrayOutputStream.Builder#get()",
        "org.apache.commons.io.input.BufferedFileChannelInputStream.Builder#get()",
        "org.apache.commons.io.output.UncheckedFilterWriter.Builder#get()",
        "org.apache.commons.io.input.RandomAccessFileInputStream.Builder#get()",
        "org.apache.commons.io.input.UncheckedFilterReader.Builder#get()",
        "org.apache.commons.io.input.MessageDigestInputStream.Builder#get()",
        "org.apache.commons.io.input.UncheckedBufferedReader.Builder#get()",
        "org.apache.commons.io.output.FileWriterWithEncoding.Builder#get()",
        "org.apache.commons.io.input.MemoryMappedFileInputStream.Builder#get()",
        "org.apache.commons.io.input.XmlStreamReader.Builder#get()",
        "org.apache.commons.io.output.DeferredFileOutputStream.Builder#get()"
    ],
    "org.apache.commons.io.input.MemoryMappedFileInputStream#read()": [
        "org.apache.commons.io.IOUtils.<staticinit>()",
        "org.apache.commons.io.input.MemoryMappedFileInputStream#nextBuffer()",
        "org.apache.commons.io.input.AbstractInputStream#checkOpen()"
    ],
    "org.apache.commons.io.IOUtils.byteArray()": [
        "org.apache.commons.io.IOUtils.byteArray(int)",
        "org.apache.commons.io.IOUtils.<staticinit>()"
    ],
    "org.apache.commons.io.output.WriterOutputStream#WriterOutputStream(Writer,CharsetDecoder)": [
        "org.apache.commons.io.output.WriterOutputStream.<staticinit>()",
        "org.apache.commons.io.output.WriterOutputStream#WriterOutputStream(Writer,CharsetDecoder,int,boolean)"
    ],
    "org.apache.commons.io.input.UncheckedBufferedReader#ready()": ["org.apache.commons.io.function.Uncheck.get(IOSupplier<T>)"],
    "org.apache.commons.io.file.FilesUncheck.readAttributes(Path,String,LinkOption[]...)": ["org.apache.commons.io.function.Uncheck.apply(IOTriFunction<T, U, V, R>,T,U,V)"],
    "org.apache.commons.io.function.IOConsumer.forEach(T[],IOConsumer<T>)": [
        "org.apache.commons.io.function.IOStreams.forEach(Stream<T>,IOConsumer<T>)",
        "org.apache.commons.io.function.IOStreams.of(T[]...)"
    ],
    "org.apache.commons.io.IOUtils.write(CharSequence,OutputStream,Charset)": ["org.apache.commons.io.IOUtils.write(String,OutputStream,Charset)"],
    "org.apache.commons.io.output.BrokenWriter.<staticinit>()": ["org.apache.commons.io.output.BrokenWriter#BrokenWriter()"],
    "org.apache.commons.io.output.LockableFileWriter#flush()": [
        "org.apache.commons.io.output.BrokenWriter#flush()",
        "org.apache.commons.io.output.AppendableWriter#flush()",
        "org.apache.commons.io.output.StringBuilderWriter#flush()",
        "org.apache.commons.io.output.FilterCollectionWriter#flush()",
        "org.apache.commons.io.output.XmlStreamWriter#flush()",
        "org.apache.commons.io.output.NullWriter#flush()",
        "org.apache.commons.io.output.ProxyCollectionWriter#flush()",
        "org.apache.commons.io.output.ClosedWriter#flush()",
        "org.apache.commons.io.output.LockableFileWriter#flush()"
    ],
    "org.apache.commons.io.input.MemoryMappedFileInputStream.Builder#get()": [
        "org.apache.commons.io.build.AbstractStreamBuilder#getBufferSize()",
        "org.apache.commons.io.build.AbstractStreamBuilder#getPath()",
        "org.apache.commons.io.input.MemoryMappedFileInputStream#MemoryMappedFileInputStream(Path,int)"
    ],
    "org.apache.commons.io.FileDeleteStrategy#FileDeleteStrategy(String)": ["org.apache.commons.io.FileDeleteStrategy.<init>()"],
    "org.apache.commons.io.output.FileWriterWithEncoding#FileWriterWithEncoding(String,Charset)": ["org.apache.commons.io.output.FileWriterWithEncoding#FileWriterWithEncoding(File,Charset,boolean)"],
    "org.apache.commons.io.FilenameUtils.equalsOnSystem(String,String)": [
        "org.apache.commons.io.IOCase.<staticinit>()",
        "org.apache.commons.io.FilenameUtils.equals(String,String,boolean,IOCase)"
    ],
    "org.apache.commons.io.input.ReadAheadInputStream#ReadAheadInputStream(InputStream,int)": [
        "org.apache.commons.io.input.ReadAheadInputStream#ReadAheadInputStream(InputStream,int,ExecutorService,boolean)",
        "org.apache.commons.io.input.ReadAheadInputStream.newExecutorService()"
    ],
    "org.apache.commons.io.build.AbstractOriginSupplier.newURIOrigin(URI)": ["org.apache.commons.io.build.AbstractOrigin.URIOrigin#URIOrigin(URI)"],
    "org.apache.commons.io.build.AbstractOrigin.ByteArrayOrigin#ByteArrayOrigin(byte[])": [
        "org.apache.commons.io.build.AbstractOrigin.ByteArrayOrigin.<init>()",
        "org.apache.commons.io.build.AbstractOrigin#AbstractOrigin(T)"
    ],
    "org.apache.commons.io.IOUtils.toByteArray(URLConnection)": [
        "org.apache.commons.io.IOUtils.toByteArray(InputStream)",
        "org.apache.commons.io.CloseableURLConnection#getInputStream()"
    ],
    "org.apache.commons.io.build.AbstractStreamBuilder#setOpenOptions(OpenOption[]...)": [
        "org.apache.commons.io.build.AbstractSupplier#asThis()",
        "org.apache.commons.io.build.AbstractStreamBuilder.<staticinit>()"
    ],
    "org.apache.commons.io.function.UncheckedIOBaseStream#UncheckedIOBaseStream(S extends IOBaseStream)": ["org.apache.commons.io.function.UncheckedIOBaseStream.<init>()"],
    "org.apache.commons.io.FileUtils.lineIterator(File)": ["org.apache.commons.io.FileUtils.lineIterator(File,String)"],
    "org.apache.commons.io.function.IOStream#limit(long)": [
        "org.apache.commons.io.function.IOStream.adapt(Stream<T>)",
        "org.apache.commons.io.function.IOBaseStreamAdapter#unwrap()"
    ],
    "org.apache.commons.io.input.SequenceReader#SequenceReader(Iterable<? extends Reader>)": [
        "org.apache.commons.io.input.SequenceReader.<init>()",
        "org.apache.commons.io.function.Uncheck.get(IOSupplier<T>)"
    ],
    "org.apache.commons.io.file.FilesUncheck.probeContentType(Path)": ["org.apache.commons.io.function.Uncheck.apply(IOFunction<T, R>,T)"],
    "org.apache.commons.io.file.DirectoryStreamFilter#DirectoryStreamFilter(PathFilter)": ["org.apache.commons.io.file.DirectoryStreamFilter.<init>()"],
    "org.apache.commons.io.filefilter.MagicNumberFileFilter#toString()": ["org.apache.commons.io.filefilter.AbstractFileFilter#toString()"],
    "org.apache.commons.io.function.Uncheck.get(IOSupplier<T>,Supplier<String>)": [
        "org.apache.commons.io.input.UnsynchronizedFilterInputStream.Builder#get()",
        "org.apache.commons.io.input.BOMInputStream.Builder#get()",
        "org.apache.commons.io.input.CharSequenceInputStream.Builder#get()",
        "org.apache.commons.io.input.QueueInputStream.Builder#get()",
        "org.apache.commons.io.input.ReaderInputStream.Builder#get()",
        "org.apache.commons.io.filefilter.WildcardFileFilter.Builder#get()",
        "org.apache.commons.io.input.ChecksumInputStream.Builder#get()",
        "org.apache.commons.io.input.Tailer.Builder#get()",
        "org.apache.commons.io.output.WriterOutputStream.Builder#get()",
        "org.apache.commons.io.input.ReadAheadInputStream.Builder#get()",
        "org.apache.commons.io.input.UnsynchronizedBufferedInputStream.Builder#get()",
        "org.apache.commons.io.input.UncheckedFilterInputStream.Builder#get()",
        "org.apache.commons.io.input.AutoCloseInputStream.Builder#get()",
        "org.apache.commons.io.output.ChunkedOutputStream.Builder#get()",
        "org.apache.commons.io.input.UnsynchronizedByteArrayInputStream.Builder#get()",
        "org.apache.commons.io.output.UncheckedFilterOutputStream.Builder#get()",
        "org.apache.commons.io.output.XmlStreamWriter.Builder#get()",
        "org.apache.commons.io.input.MessageDigestCalculatingInputStream.Builder#get()",
        "org.apache.commons.io.input.BoundedInputStream.Builder#get()",
        "org.apache.commons.io.output.LockableFileWriter.Builder#get()",
        "org.apache.commons.io.input.ReversedLinesFileReader.Builder#get()",
        "org.apache.commons.io.input.ThrottledInputStream.Builder#get()",
        "org.apache.commons.io.build.AbstractOrigin#get()",
        "org.apache.commons.io.output.UnsynchronizedByteArrayOutputStream.Builder#get()",
        "org.apache.commons.io.input.BufferedFileChannelInputStream.Builder#get()",
        "org.apache.commons.io.function.Uncheck.wrap(IOException,Supplier<String>)",
        "org.apache.commons.io.output.UncheckedFilterWriter.Builder#get()",
        "org.apache.commons.io.input.RandomAccessFileInputStream.Builder#get()",
        "org.apache.commons.io.input.UncheckedFilterReader.Builder#get()",
        "org.apache.commons.io.input.MessageDigestInputStream.Builder#get()",
        "org.apache.commons.io.input.UncheckedBufferedReader.Builder#get()",
        "org.apache.commons.io.output.FileWriterWithEncoding.Builder#get()",
        "org.apache.commons.io.input.MemoryMappedFileInputStream.Builder#get()",
        "org.apache.commons.io.input.XmlStreamReader.Builder#get()",
        "org.apache.commons.io.output.DeferredFileOutputStream.Builder#get()"
    ],
    "org.apache.commons.io.input.UnsynchronizedBufferedInputStream#reset()": ["org.apache.commons.io.IOUtils.<staticinit>()"],
    "org.apache.commons.io.function.Uncheck.run(IORunnable)": ["org.apache.commons.io.function.Uncheck.wrap(IOException)"],
    "org.apache.commons.io.input.DemuxInputStream#read()": [
        "org.apache.commons.io.input.CharSequenceInputStream#read()",
        "org.apache.commons.io.input.UnsynchronizedByteArrayInputStream#read()",
        "org.apache.commons.io.input.RandomAccessFileInputStream#read()",
        "org.apache.commons.io.input.ReaderInputStream#read()",
        "org.apache.commons.io.input.UnsynchronizedFilterInputStream#read()",
        "org.apache.commons.io.input.UnixLineEndingInputStream#read()",
        "org.apache.commons.io.input.DemuxInputStream#read()",
        "org.apache.commons.io.input.QueueInputStream#read()",
        "org.apache.commons.io.input.NullInputStream#read()",
        "org.apache.commons.io.IOUtils.<staticinit>()",
        "org.apache.commons.io.input.MemoryMappedFileInputStream#read()",
        "org.apache.commons.io.input.BufferedFileChannelInputStream#read()",
        "org.apache.commons.io.input.WindowsLineEndingInputStream#read()",
        "org.apache.commons.io.input.BrokenInputStream#read()",
        "org.apache.commons.io.input.ClosedInputStream#read()",
        "org.apache.commons.io.input.UnsynchronizedBufferedInputStream#read()",
        "org.apache.commons.io.input.CircularInputStream#read()"
    ],
    "org.apache.commons.io.file.PathUtils.readPosixFileAttributes(Path,LinkOption[]...)": ["org.apache.commons.io.file.PathUtils.readAttributes(Path,Class<A extends BasicFileAttributes>,LinkOption[]...)"],
    "org.apache.commons.io.function.IOPredicate#asPredicate()": ["org.apache.commons.io.function.Uncheck.test(IOPredicate<T>,T)"],
    "org.apache.commons.io.input.CharacterSetFilterReader#CharacterSetFilterReader(Reader,Integer[]...)": ["org.apache.commons.io.input.CharacterSetFilterReader#CharacterSetFilterReader(Reader,Set<Integer>)"],
    "org.apache.commons.io.build.AbstractStreamBuilder#getPath()": [
        "org.apache.commons.io.build.AbstractOriginSupplier#checkOrigin()",
        "org.apache.commons.io.build.AbstractOrigin.PathOrigin#getPath()",
        "org.apache.commons.io.build.AbstractOrigin.URIOrigin#getPath()",
        "org.apache.commons.io.build.AbstractOrigin.FileOrigin#getPath()",
        "org.apache.commons.io.build.AbstractOrigin#getPath()"
    ],
    "org.apache.commons.io.input.ProxyReader#skip(long)": [
        "org.apache.commons.io.input.CharSequenceReader#skip(long)",
        "org.apache.commons.io.input.UnsynchronizedBufferedReader#skip(long)",
        "org.apache.commons.io.input.ProxyReader#handleIOException(IOException)",
        "org.apache.commons.io.input.BrokenReader#skip(long)",
        "org.apache.commons.io.input.NullReader#skip(long)",
        "org.apache.commons.io.input.TaggedReader#handleIOException(IOException)",
        "org.apache.commons.io.input.UnsynchronizedReader#skip(long)"
    ],
    "org.apache.commons.io.output.ProxyCollectionWriter#ProxyCollectionWriter(Collection<Writer>)": [
        "org.apache.commons.io.output.ProxyCollectionWriter.<init>()",
        "org.apache.commons.io.output.FilterCollectionWriter#FilterCollectionWriter(Collection<Writer>)"
    ],
    "org.apache.commons.io.filefilter.IOFileFilter#matches(Path)": [
        "org.apache.commons.io.filefilter.SizeFileFilter#accept(Path,BasicFileAttributes)",
        "org.apache.commons.io.filefilter.WildcardFileFilter#accept(Path,BasicFileAttributes)",
        "org.apache.commons.io.filefilter.FalseFileFilter#accept(Path,BasicFileAttributes)",
        "org.apache.commons.io.filefilter.FileEqualsFileFilter#accept(Path,BasicFileAttributes)",
        "org.apache.commons.io.filefilter.PathVisitorFileFilter#accept(Path,BasicFileAttributes)",
        "org.apache.commons.io.filefilter.SymbolicLinkFileFilter#accept(Path,BasicFileAttributes)",
        "org.apache.commons.io.filefilter.PrefixFileFilter#accept(Path,BasicFileAttributes)",
        "org.apache.commons.io.filefilter.CanExecuteFileFilter#accept(Path,BasicFileAttributes)",
        "org.apache.commons.io.filefilter.MagicNumberFileFilter#accept(Path,BasicFileAttributes)",
        "org.apache.commons.io.filefilter.WildcardFilter#accept(Path,BasicFileAttributes)",
        "org.apache.commons.io.filefilter.NotFileFilter#accept(Path,BasicFileAttributes)",
        "org.apache.commons.io.filefilter.IOFileFilter#accept(Path,BasicFileAttributes)",
        "org.apache.commons.io.filefilter.AndFileFilter#accept(Path,BasicFileAttributes)",
        "org.apache.commons.io.filefilter.DirectoryFileFilter#accept(Path,BasicFileAttributes)",
        "org.apache.commons.io.filefilter.CanWriteFileFilter#accept(Path,BasicFileAttributes)",
        "org.apache.commons.io.filefilter.AgeFileFilter#accept(Path,BasicFileAttributes)",
        "org.apache.commons.io.filefilter.HiddenFileFilter#accept(Path,BasicFileAttributes)",
        "org.apache.commons.io.filefilter.TrueFileFilter#accept(Path,BasicFileAttributes)",
        "org.apache.commons.io.filefilter.EmptyFileFilter#accept(Path,BasicFileAttributes)",
        "org.apache.commons.io.filefilter.OrFileFilter#accept(Path,BasicFileAttributes)",
        "org.apache.commons.io.filefilter.PathEqualsFileFilter#accept(Path,BasicFileAttributes)",
        "org.apache.commons.io.filefilter.CanReadFileFilter#accept(Path,BasicFileAttributes)",
        "org.apache.commons.io.filefilter.NameFileFilter#accept(Path,BasicFileAttributes)",
        "org.apache.commons.io.filefilter.FileFileFilter#accept(Path,BasicFileAttributes)",
        "org.apache.commons.io.filefilter.RegexFileFilter#accept(Path,BasicFileAttributes)",
        "org.apache.commons.io.filefilter.SuffixFileFilter#accept(Path,BasicFileAttributes)"
    ],
    "org.apache.commons.io.build.AbstractOrigin#getOutputStream(OpenOption[]...)": [
        "org.apache.commons.io.build.AbstractOrigin.PathOrigin#getPath()",
        "org.apache.commons.io.build.AbstractOrigin.URIOrigin#getPath()",
        "org.apache.commons.io.build.AbstractOrigin.FileOrigin#getPath()",
        "org.apache.commons.io.build.AbstractOrigin#getPath()"
    ],
    "org.apache.commons.io.input.BufferedFileChannelInputStream#BufferedFileChannelInputStream(File,int)": ["org.apache.commons.io.input.BufferedFileChannelInputStream#BufferedFileChannelInputStream(Path,int)"],
    "org.apache.commons.io.input.ProxyInputStream#ProxyInputStream(InputStream)": ["org.apache.commons.io.input.ProxyInputStream#ProxyInputStream(InputStream,IOConsumer<IOException>)"],
    "org.apache.commons.io.output.WriterOutputStream#WriterOutputStream(Writer)": [
        "org.apache.commons.io.output.WriterOutputStream.<staticinit>()",
        "org.apache.commons.io.output.WriterOutputStream#WriterOutputStream(Writer,CharsetDecoder,int,boolean)"
    ],
    "org.apache.commons.io.FileUtils.checksum(File,Checksum)": [
        "org.apache.commons.io.IOUtils.consume(InputStream)",
        "org.apache.commons.io.FileUtils.<staticinit>()",
        "org.apache.commons.io.FileUtils.checkFileExists(File,String)"
    ],
    "org.apache.commons.io.input.TeeReader#TeeReader(Reader,Writer,boolean)": [
        "org.apache.commons.io.input.TeeReader.<init>()",
        "org.apache.commons.io.input.ProxyReader#ProxyReader(Reader)"
    ],
    "org.apache.commons.io.file.PathUtils.readDosFileAttributes(Path,LinkOption[]...)": ["org.apache.commons.io.file.PathUtils.readAttributes(Path,Class<A extends BasicFileAttributes>,LinkOption[]...)"],
    "org.apache.commons.io.output.UncheckedFilterWriter#write(int)": ["org.apache.commons.io.function.Uncheck.accept(IOConsumer<T>,T)"],
    "org.apache.commons.io.IOUtils.skipFully(Reader,long)": ["org.apache.commons.io.IOUtils.skip(Reader,long)"],
    "org.apache.commons.io.serialization.RegexpClassNameMatcher#RegexpClassNameMatcher(String)": ["org.apache.commons.io.serialization.RegexpClassNameMatcher#RegexpClassNameMatcher(String)"],
    "org.apache.commons.io.function.UncheckedIOSpliterator#forEachRemaining(Consumer<? super T>)": ["org.apache.commons.io.function.Uncheck.accept(IOConsumer<T>,T)"],
    "org.apache.commons.io.filefilter.NameFileFilter#NameFileFilter(String)": [
        "org.apache.commons.io.IOCase.<staticinit>()",
        "org.apache.commons.io.filefilter.NameFileFilter#NameFileFilter(String,IOCase)"
    ],
    "org.apache.commons.io.input.ClosedInputStream#read()": ["org.apache.commons.io.IOUtils.<staticinit>()"],
    "org.apache.commons.io.IOUtils.consume(Reader)": [
        "org.apache.commons.io.output.NullWriter.<staticinit>()",
        "org.apache.commons.io.IOUtils.<staticinit>()",
        "org.apache.commons.io.IOUtils.copyLarge(Reader,Writer)"
    ],
    "org.apache.commons.io.CloseableURLConnection#getURL()": ["org.apache.commons.io.CloseableURLConnection#getURL()"],
    "org.apache.commons.io.FilenameUtils.getFullPathNoEndSeparator(String)": ["org.apache.commons.io.FilenameUtils.doGetFullPath(String,boolean)"],
    "org.apache.commons.io.input.XmlStreamReader.<staticinit>()": [
        "org.apache.commons.io.ByteOrderMark#ByteOrderMark(String,int[]...)",
        "org.apache.commons.io.ByteOrderMark.<staticinit>()"
    ],
    "org.apache.commons.io.input.ThrottledInputStream#getSleepMillis()": [
        "org.apache.commons.io.input.CountingInputStream#getByteCount()",
        "org.apache.commons.io.input.ThrottledInputStream.toSleepMillis(long,long,long)"
    ],
    "org.apache.commons.io.FileUtils.writeLines(File,String,Collection<?>,String,boolean)": [
        "org.apache.commons.io.IOUtils.writeLines(Collection<?>,String,OutputStream,String)",
        "org.apache.commons.io.FileUtils.newOutputStream(File,boolean)"
    ],
    "org.apache.commons.io.input.Tailer#Tailer(File,Charset,TailerListener,long,boolean,boolean,int)": ["org.apache.commons.io.input.Tailer#Tailer(Tailable,Charset,TailerListener,Duration,boolean,boolean,int)"],
    "org.apache.commons.io.input.SwappedDataInputStream#readLong()": ["org.apache.commons.io.EndianUtils.readSwappedLong(InputStream)"],
    "org.apache.commons.io.EndianUtils.readSwappedUnsignedShort(InputStream)": ["org.apache.commons.io.EndianUtils.read(InputStream)"],
    "org.apache.commons.io.FileUtils.write(File,CharSequence,boolean)": ["org.apache.commons.io.FileUtils.write(File,CharSequence,Charset,boolean)"],
    "org.apache.commons.io.function.IOStreams#IOStreams()": ["org.apache.commons.io.function.IOStreams.<init>()"],
    "org.apache.commons.io.input.AutoCloseInputStream.Builder#get()": [
        "org.apache.commons.io.input.AutoCloseInputStream#AutoCloseInputStream(InputStream)",
        "org.apache.commons.io.build.AbstractStreamBuilder#getInputStream()"
    ],
    "org.apache.commons.io.output.WriterOutputStream#write(byte[],int,int)": [
        "org.apache.commons.io.output.WriterOutputStream#flushOutput()",
        "org.apache.commons.io.output.WriterOutputStream#processInput(boolean)"
    ],
    "org.apache.commons.io.output.CountingOutputStream#CountingOutputStream(OutputStream)": [
        "org.apache.commons.io.output.CountingOutputStream.<init>()",
        "org.apache.commons.io.output.ProxyOutputStream#ProxyOutputStream(OutputStream)"
    ],
    "org.apache.commons.io.monitor.FileEntry#FileEntry(FileEntry,File)": ["org.apache.commons.io.monitor.FileEntry.<init>()"],
    "org.apache.commons.io.function.Uncheck.accept(IOBiConsumer<T, U>,T,U)": ["org.apache.commons.io.function.Uncheck.wrap(IOException)"],
    "org.apache.commons.io.input.BoundedInputStream.Builder#get()": [
        "org.apache.commons.io.input.BoundedInputStream.AbstractBuilder#isPropagateClose()",
        "org.apache.commons.io.input.BoundedInputStream#BoundedInputStream(InputStream,long,long,boolean)",
        "org.apache.commons.io.input.BoundedInputStream.AbstractBuilder#getCount()",
        "org.apache.commons.io.build.AbstractStreamBuilder#getInputStream()",
        "org.apache.commons.io.input.BoundedInputStream.AbstractBuilder#getMaxCount()"
    ],
    "org.apache.commons.io.input.buffer.PeekableInputStream#PeekableInputStream(InputStream,int)": [
        "org.apache.commons.io.input.buffer.CircularBufferInputStream#CircularBufferInputStream(InputStream,int)",
        "org.apache.commons.io.input.buffer.PeekableInputStream.<init>()"
    ],
    "org.apache.commons.io.filefilter.HiddenFileFilter.<staticinit>()": [
        "org.apache.commons.io.filefilter.TrueFileFilter#negate()",
        "org.apache.commons.io.filefilter.FalseFileFilter#negate()",
        "org.apache.commons.io.filefilter.IOFileFilter#negate()",
        "org.apache.commons.io.filefilter.HiddenFileFilter#HiddenFileFilter()"
    ],
    "org.apache.commons.io.filefilter.SymbolicLinkFileFilter#SymbolicLinkFileFilter()": [
        "org.apache.commons.io.filefilter.AbstractFileFilter#AbstractFileFilter()",
        "org.apache.commons.io.filefilter.SymbolicLinkFileFilter.<init>()"
    ],
    "org.apache.commons.io.file.FilesUncheck.copy(Path,Path,CopyOption[]...)": ["org.apache.commons.io.function.Uncheck.apply(IOTriFunction<T, U, V, R>,T,U,V)"],
    "org.apache.commons.io.filefilter.CanWriteFileFilter#accept(Path,BasicFileAttributes)": ["org.apache.commons.io.filefilter.AbstractFileFilter#toFileVisitResult(boolean)"],
    "org.apache.commons.io.input.XmlStreamReader#XmlStreamReader(URL)": ["org.apache.commons.io.input.XmlStreamReader#XmlStreamReader(URLConnection,String)"],
    "org.apache.commons.io.input.Tailer#Tailer(File,TailerListener)": [
        "org.apache.commons.io.input.Tailer.<staticinit>()",
        "org.apache.commons.io.input.Tailer#Tailer(File,TailerListener,long)"
    ],
    "org.apache.commons.io.function.IOLongSupplier#asSupplier()": ["org.apache.commons.io.function.Uncheck.getAsLong(IOLongSupplier)"],
    "org.apache.commons.io.file.PathUtils.getLastModifiedFileTime(Path,FileTime,LinkOption[]...)": ["org.apache.commons.io.file.PathUtils.getLastModifiedTime(Path,LinkOption[]...)"],
    "org.apache.commons.io.file.PathUtils.readString(Path,Charset)": ["org.apache.commons.io.Charsets.toCharset(Charset)"],
    "org.apache.commons.io.file.attribute.FileTimes.toNtfsTime(Date)": ["org.apache.commons.io.file.attribute.FileTimes.<staticinit>()"],
    "org.apache.commons.io.FileUtils.newOutputStream(File,boolean)": [
        "org.apache.commons.io.file.PathUtils.newOutputStream(Path,boolean)",
        "org.apache.commons.io.FileUtils.<staticinit>()"
    ],
    "org.apache.commons.io.file.Counters.BigIntegerPathCounters#BigIntegerPathCounters()": [
        "org.apache.commons.io.file.Counters.BigIntegerPathCounters.<init>()",
        "org.apache.commons.io.file.Counters.bigIntegerCounter()",
        "org.apache.commons.io.file.Counters.AbstractPathCounters#AbstractPathCounters(Counter,Counter,Counter)"
    ],
    "org.apache.commons.io.filefilter.AndFileFilter#accept(File)": [
        "org.apache.commons.io.filefilter.CanExecuteFileFilter#accept(File)",
        "org.apache.commons.io.filefilter.AbstractFileFilter#accept(File)",
        "org.apache.commons.io.filefilter.CanWriteFileFilter#accept(File)",
        "org.apache.commons.io.filefilter.AndFileFilter#isEmpty()",
        "org.apache.commons.io.filefilter.HiddenFileFilter#accept(File)",
        "org.apache.commons.io.filefilter.PathVisitorFileFilter#accept(File)",
        "org.apache.commons.io.filefilter.FileFileFilter#accept(File)",
        "org.apache.commons.io.filefilter.OrFileFilter#accept(File)",
        "org.apache.commons.io.filefilter.PathEqualsFileFilter#accept(File)",
        "org.apache.commons.io.filefilter.SuffixFileFilter#accept(File)",
        "org.apache.commons.io.filefilter.CanReadFileFilter#accept(File)",
        "org.apache.commons.io.filefilter.TrueFileFilter#accept(File)",
        "org.apache.commons.io.filefilter.PrefixFileFilter#accept(File)",
        "org.apache.commons.io.filefilter.MagicNumberFileFilter#accept(File)",
        "org.apache.commons.io.filefilter.NameFileFilter#accept(File)",
        "org.apache.commons.io.filefilter.WildcardFileFilter#accept(File)",
        "org.apache.commons.io.filefilter.NotFileFilter#accept(File)",
        "org.apache.commons.io.filefilter.PathMatcherFileFilter#accept(File)",
        "org.apache.commons.io.filefilter.FileEqualsFileFilter#accept(File)",
        "org.apache.commons.io.filefilter.WildcardFilter#accept(File)",
        "org.apache.commons.io.filefilter.AgeFileFilter#accept(File)",
        "org.apache.commons.io.filefilter.DelegateFileFilter#accept(File)",
        "org.apache.commons.io.filefilter.SizeFileFilter#accept(File)",
        "org.apache.commons.io.filefilter.FalseFileFilter#accept(File)",
        "org.apache.commons.io.filefilter.AndFileFilter#accept(File)",
        "org.apache.commons.io.filefilter.SymbolicLinkFileFilter#accept(File)",
        "org.apache.commons.io.filefilter.DirectoryFileFilter#accept(File)",
        "org.apache.commons.io.filefilter.EmptyFileFilter#accept(File)"
    ],
    "org.apache.commons.io.input.UncheckedBufferedReader#read()": ["org.apache.commons.io.function.Uncheck.get(IOSupplier<T>)"],
    "org.apache.commons.io.FileUtils.moveDirectoryToDirectory(File,File,boolean)": [
        "org.apache.commons.io.FileUtils.moveDirectory(File,File)",
        "org.apache.commons.io.FileUtils.mkdirs(File)",
        "org.apache.commons.io.FileUtils.validateMoveParameters(File,File)"
    ],
    "org.apache.commons.io.output.ChunkedOutputStream#ChunkedOutputStream(OutputStream)": [
        "org.apache.commons.io.output.ChunkedOutputStream#ChunkedOutputStream(OutputStream,int)",
        "org.apache.commons.io.IOUtils.<staticinit>()"
    ],
    "org.apache.commons.io.input.BoundedInputStream#close()": ["org.apache.commons.io.input.ProxyInputStream#close()"],
    "org.apache.commons.io.input.BoundedInputStream.builder()": ["org.apache.commons.io.input.BoundedInputStream.Builder.<init>()"],
    "org.apache.commons.io.output.DeferredFileOutputStream#DeferredFileOutputStream(int,File)": [
        "org.apache.commons.io.output.AbstractByteArrayOutputStream.<staticinit>()",
        "org.apache.commons.io.output.DeferredFileOutputStream#DeferredFileOutputStream(int,File,String,String,File,int)"
    ],
    "org.apache.commons.io.function.IOBaseStream#isParallel()": ["org.apache.commons.io.function.IOBaseStreamAdapter#unwrap()"],
    "org.apache.commons.io.input.TaggedReader#TaggedReader(Reader)": [
        "org.apache.commons.io.input.TaggedReader.<init>()",
        "org.apache.commons.io.input.ProxyReader#ProxyReader(Reader)"
    ],
    "org.apache.commons.io.FileCleaningTracker#track(Path,Object,FileDeleteStrategy)": ["org.apache.commons.io.FileCleaningTracker#addTracker(String,Object,FileDeleteStrategy)"],
    "org.apache.commons.io.FileCleaner.track(String,Object,FileDeleteStrategy)": [
        "org.apache.commons.io.FileCleaner.<staticinit>()",
        "org.apache.commons.io.FileCleaningTracker#track(String,Object,FileDeleteStrategy)"
    ],
    "org.apache.commons.io.input.TeeInputStream#close()": [
        "org.apache.commons.io.output.AbstractByteArrayOutputStream#close()",
        "org.apache.commons.io.input.ProxyInputStream#close()",
        "org.apache.commons.io.output.DemuxOutputStream#close()",
        "org.apache.commons.io.output.WriterOutputStream#close()",
        "org.apache.commons.io.output.ThresholdingOutputStream#close()",
        "org.apache.commons.io.output.DeferredFileOutputStream#close()",
        "org.apache.commons.io.output.BrokenOutputStream#close()"
    ],
    "org.apache.commons.io.input.XmlStreamReader.builder()": ["org.apache.commons.io.input.XmlStreamReader.Builder.<init>()"],
    "org.apache.commons.io.output.BrokenWriter#BrokenWriter(Supplier<Throwable>)": ["org.apache.commons.io.output.BrokenWriter.<init>()"],
    "org.apache.commons.io.file.DeletingPathVisitor#postVisitDirectory(Path,IOException)": [
        "org.apache.commons.io.file.CountingPathVisitor#postVisitDirectory(Path,IOException)",
        "org.apache.commons.io.file.PathUtils.isEmptyDirectory(Path)"
    ],
    "org.apache.commons.io.filefilter.RegexFileFilter#RegexFileFilter(Pattern,Function<Path, String>)": [
        "org.apache.commons.io.filefilter.AbstractFileFilter#AbstractFileFilter()",
        "org.apache.commons.io.filefilter.RegexFileFilter.<init>()"
    ],
    "org.apache.commons.io.FileUtils.writeStringToFile(File,String,String)": ["org.apache.commons.io.FileUtils.writeStringToFile(File,String,String,boolean)"],
    "org.apache.commons.io.file.PathUtils.setDosReadOnly(Path,boolean,LinkOption[]...)": ["org.apache.commons.io.file.PathUtils.getDosFileAttributeView(Path,LinkOption[]...)"],
    "org.apache.commons.io.CloseableURLConnection#getHeaderField(String)": ["org.apache.commons.io.CloseableURLConnection#getHeaderField(String)"],
    "org.apache.commons.io.file.CopyDirectoryVisitor.toCopyOption(CopyOption[]...)": ["org.apache.commons.io.file.PathUtils.<staticinit>()"],
    "org.apache.commons.io.input.RandomAccessFileInputStream#available()": ["org.apache.commons.io.input.RandomAccessFileInputStream#availableLong()"],
    "org.apache.commons.io.function.IOStream#findAny()": ["org.apache.commons.io.function.IOBaseStreamAdapter#unwrap()"],
    "org.apache.commons.io.file.CopyDirectoryVisitor#preVisitDirectory(Path,BasicFileAttributes)": [
        "org.apache.commons.io.file.CountingPathVisitor#preVisitDirectory(Path,BasicFileAttributes)",
        "org.apache.commons.io.file.CopyDirectoryVisitor#resolveRelativeAsString(Path)"
    ],
    "org.apache.commons.io.FileUtils.current()": ["org.apache.commons.io.file.PathUtils.current()"],
    "org.apache.commons.io.file.Counters.longPathCounters()": ["org.apache.commons.io.file.Counters.LongPathCounters#LongPathCounters()"],
    "org.apache.commons.io.input.TeeReader#read(char[])": [
        "org.apache.commons.io.output.StringBuilderWriter#write(char[],int,int)",
        "org.apache.commons.io.output.BrokenWriter#write(char[],int,int)",
        "org.apache.commons.io.output.FilterCollectionWriter#write(char[],int,int)",
        "org.apache.commons.io.output.AppendableWriter#write(char[],int,int)",
        "org.apache.commons.io.output.ProxyCollectionWriter#write(char[],int,int)",
        "org.apache.commons.io.output.ClosedWriter#write(char[],int,int)",
        "org.apache.commons.io.output.XmlStreamWriter#write(char[],int,int)",
        "org.apache.commons.io.input.ProxyReader#read(char[])",
        "org.apache.commons.io.output.NullWriter#write(char[],int,int)",
        "org.apache.commons.io.output.LockableFileWriter#write(char[],int,int)",
        "org.apache.commons.io.IOUtils.<staticinit>()"
    ],
    "org.apache.commons.io.file.FilesUncheck.readAllLines(Path,Charset)": ["org.apache.commons.io.function.Uncheck.apply(IOBiFunction<T, U, R>,T,U)"],
    "org.apache.commons.io.input.buffer.CircularBufferInputStream#close()": ["org.apache.commons.io.input.buffer.CircularByteBuffer#clear()"],
    "org.apache.commons.io.input.UncheckedFilterReader#skip(long)": ["org.apache.commons.io.function.Uncheck.apply(IOFunction<T, R>,T)"],
    "org.apache.commons.io.output.LockableFileWriter.Builder#get()": [
        "org.apache.commons.io.build.AbstractOriginSupplier#checkOrigin()",
        "org.apache.commons.io.build.AbstractOrigin.URIOrigin#getFile()",
        "org.apache.commons.io.output.LockableFileWriter#LockableFileWriter(File,Charset,boolean,String)",
        "org.apache.commons.io.build.AbstractOrigin.PathOrigin#getFile()",
        "org.apache.commons.io.build.AbstractOrigin#getFile()",
        "org.apache.commons.io.build.AbstractOrigin.FileOrigin#getFile()",
        "org.apache.commons.io.build.AbstractStreamBuilder#getCharset()"
    ],
    "org.apache.commons.io.EndianUtils.readSwappedShort(byte[],int)": ["org.apache.commons.io.EndianUtils.validateByteArrayOffset(byte[],int,int)"],
    "org.apache.commons.io.IOUtils.write(byte[],Writer)": ["org.apache.commons.io.IOUtils.write(byte[],Writer,Charset)"],
    "org.apache.commons.io.input.UncheckedFilterInputStream.builder()": ["org.apache.commons.io.input.UncheckedFilterInputStream.Builder.<init>()"],
    "org.apache.commons.io.input.AbstractCharacterFilterReader#AbstractCharacterFilterReader(Reader)": [
        "org.apache.commons.io.input.AbstractCharacterFilterReader#AbstractCharacterFilterReader(Reader,IntPredicate)",
        "org.apache.commons.io.input.AbstractCharacterFilterReader.<staticinit>()"
    ],
    "org.apache.commons.io.input.BoundedInputStream.AbstractBuilder.<init>()": [
        "org.apache.commons.io.build.AbstractStreamBuilder.<init>()",
        "org.apache.commons.io.IOUtils.<staticinit>()"
    ],
    "org.apache.commons.io.FileSystem.<staticinit>()": [
        "org.apache.commons.io.FileSystem.current()",
        "org.apache.commons.io.FileSystem.getOsMatchesName(String)"
    ],
    "org.apache.commons.io.IOUtils.readLines(InputStream,String)": [
        "org.apache.commons.io.IOUtils.readLines(InputStream,Charset)",
        "org.apache.commons.io.Charsets.toCharset(String)"
    ],
    "org.apache.commons.io.serialization.FullClassNameMatcher#FullClassNameMatcher(String[]...)": ["org.apache.commons.io.serialization.FullClassNameMatcher.<init>()"],
    "org.apache.commons.io.filefilter.AbstractFileFilter#visitFile(Path,BasicFileAttributes)": [
        "org.apache.commons.io.filefilter.SizeFileFilter#accept(Path,BasicFileAttributes)",
        "org.apache.commons.io.filefilter.WildcardFileFilter#accept(Path,BasicFileAttributes)",
        "org.apache.commons.io.filefilter.FalseFileFilter#accept(Path,BasicFileAttributes)",
        "org.apache.commons.io.filefilter.FileEqualsFileFilter#accept(Path,BasicFileAttributes)",
        "org.apache.commons.io.filefilter.PathVisitorFileFilter#accept(Path,BasicFileAttributes)",
        "org.apache.commons.io.filefilter.SymbolicLinkFileFilter#accept(Path,BasicFileAttributes)",
        "org.apache.commons.io.filefilter.PrefixFileFilter#accept(Path,BasicFileAttributes)",
        "org.apache.commons.io.filefilter.CanExecuteFileFilter#accept(Path,BasicFileAttributes)",
        "org.apache.commons.io.filefilter.MagicNumberFileFilter#accept(Path,BasicFileAttributes)",
        "org.apache.commons.io.filefilter.WildcardFilter#accept(Path,BasicFileAttributes)",
        "org.apache.commons.io.filefilter.NotFileFilter#accept(Path,BasicFileAttributes)",
        "org.apache.commons.io.filefilter.IOFileFilter#accept(Path,BasicFileAttributes)",
        "org.apache.commons.io.filefilter.AndFileFilter#accept(Path,BasicFileAttributes)",
        "org.apache.commons.io.filefilter.DirectoryFileFilter#accept(Path,BasicFileAttributes)",
        "org.apache.commons.io.filefilter.CanWriteFileFilter#accept(Path,BasicFileAttributes)",
        "org.apache.commons.io.filefilter.AgeFileFilter#accept(Path,BasicFileAttributes)",
        "org.apache.commons.io.filefilter.HiddenFileFilter#accept(Path,BasicFileAttributes)",
        "org.apache.commons.io.filefilter.TrueFileFilter#accept(Path,BasicFileAttributes)",
        "org.apache.commons.io.filefilter.EmptyFileFilter#accept(Path,BasicFileAttributes)",
        "org.apache.commons.io.filefilter.OrFileFilter#accept(Path,BasicFileAttributes)",
        "org.apache.commons.io.filefilter.PathEqualsFileFilter#accept(Path,BasicFileAttributes)",
        "org.apache.commons.io.filefilter.CanReadFileFilter#accept(Path,BasicFileAttributes)",
        "org.apache.commons.io.filefilter.NameFileFilter#accept(Path,BasicFileAttributes)",
        "org.apache.commons.io.filefilter.FileFileFilter#accept(Path,BasicFileAttributes)",
        "org.apache.commons.io.filefilter.RegexFileFilter#accept(Path,BasicFileAttributes)",
        "org.apache.commons.io.filefilter.SuffixFileFilter#accept(Path,BasicFileAttributes)"
    ],
    "org.apache.commons.io.output.ThresholdingOutputStream.<staticinit>()": ["org.apache.commons.io.output.NullOutputStream.<staticinit>()"],
    "org.apache.commons.io.FileUtils.sizeOfDirectoryAsBigInteger(File)": [
        "org.apache.commons.io.file.PathUtils.sizeOfDirectoryAsBigInteger(Path)",
        "org.apache.commons.io.function.Uncheck.get(IOSupplier<T>)",
        "org.apache.commons.io.FileUtils.requireDirectoryExists(File,String)"
    ],
    "org.apache.commons.io.input.CharSequenceInputStream#CharSequenceInputStream(CharSequence,String,int)": [
        "org.apache.commons.io.Charsets.toCharset(String)",
        "org.apache.commons.io.input.CharSequenceInputStream#CharSequenceInputStream(CharSequence,Charset,int)"
    ],
    "org.apache.commons.io.FileDeleteStrategy#doDelete(File)": ["org.apache.commons.io.FileUtils.delete(File)"],
    "org.apache.commons.io.input.QueueInputStream.Builder#get()": ["org.apache.commons.io.input.QueueInputStream#QueueInputStream(BlockingQueue<Integer>,Duration)"],
    "org.apache.commons.io.CloseableURLConnection#setRequestProperty(String,String)": ["org.apache.commons.io.CloseableURLConnection#setRequestProperty(String,String)"],
    "org.apache.commons.io.function.IOConsumer.forEach(Stream<T>,IOConsumer<T>)": ["org.apache.commons.io.function.IOStreams.forEach(Stream<T>,IOConsumer<T>)"],
    "org.apache.commons.io.file.PathUtils.touch(Path)": ["org.apache.commons.io.file.attribute.FileTimes.setLastModifiedTime(Path)"],
    "org.apache.commons.io.StandardLineSeparator#StandardLineSeparator(String)": ["org.apache.commons.io.StandardLineSeparator.<init>()"],
    "org.apache.commons.io.build.AbstractOriginSupplier.<init>()": ["org.apache.commons.io.build.AbstractSupplier.<init>()"],
    "org.apache.commons.io.comparator.ExtensionFileComparator#toString()": ["org.apache.commons.io.comparator.AbstractFileComparator#toString()"],
    "org.apache.commons.io.FileUtils.copyToDirectory(Iterable<File>,File)": ["org.apache.commons.io.FileUtils.copyFileToDirectory(File,File)"],
    "org.apache.commons.io.CloseableURLConnection#setDoOutput(boolean)": ["org.apache.commons.io.CloseableURLConnection#setDoOutput(boolean)"],
    "org.apache.commons.io.output.WriterOutputStream.Builder#setCharsetDecoder(CharsetDecoder)": [
        "org.apache.commons.io.build.AbstractStreamBuilder#getCharsetDefault()",
        "org.apache.commons.io.build.AbstractStreamBuilder#setCharset(Charset)"
    ],
    "org.apache.commons.io.FileDeleteStrategy#deleteQuietly(File)": [
        "org.apache.commons.io.FileDeleteStrategy#doDelete(File)",
        "org.apache.commons.io.FileDeleteStrategy.ForceFileDeleteStrategy#doDelete(File)"
    ],
    "org.apache.commons.io.input.XmlStreamReader#close()": [
        "org.apache.commons.io.input.NullReader#close()",
        "org.apache.commons.io.input.UnsynchronizedBufferedReader#close()",
        "org.apache.commons.io.input.BrokenReader#close()",
        "org.apache.commons.io.input.UnsynchronizedReader#close()",
        "org.apache.commons.io.input.CharSequenceReader#close()",
        "org.apache.commons.io.input.SequenceReader#close()",
        "org.apache.commons.io.input.BoundedReader#close()",
        "org.apache.commons.io.input.XmlStreamReader#close()",
        "org.apache.commons.io.input.ClosedReader#close()"
    ],
    "org.apache.commons.io.input.UnsynchronizedByteArrayInputStream.Builder#get()": [
        "org.apache.commons.io.build.AbstractOrigin.CharSequenceOrigin#getByteArray()",
        "org.apache.commons.io.build.AbstractOrigin.ReaderOrigin#getByteArray()",
        "org.apache.commons.io.build.AbstractOriginSupplier#checkOrigin()",
        "org.apache.commons.io.input.UnsynchronizedByteArrayInputStream#UnsynchronizedByteArrayInputStream(byte[],int,int)",
        "org.apache.commons.io.build.AbstractOrigin.ByteArrayOrigin#getByteArray()",
        "org.apache.commons.io.build.AbstractOrigin#getByteArray()",
        "org.apache.commons.io.build.AbstractOrigin.InputStreamOrigin#getByteArray()"
    ],
    "org.apache.commons.io.input.ClassLoaderObjectInputStream#ClassLoaderObjectInputStream(ClassLoader,InputStream)": ["org.apache.commons.io.input.ClassLoaderObjectInputStream.<init>()"],
    "org.apache.commons.io.input.UncheckedFilterInputStream#skip(long)": ["org.apache.commons.io.function.Uncheck.apply(IOFunction<T, R>,T)"],
    "org.apache.commons.io.function.Uncheck.apply(IOBiFunction<T, U, R>,T,U)": ["org.apache.commons.io.function.Uncheck.wrap(IOException)"],
    "org.apache.commons.io.IOUtils.contentEquals(Iterator<?>,Iterator<?>)": [
        "org.apache.commons.io.function.UncheckedIOIterator#hasNext()",
        "org.apache.commons.io.LineIterator#hasNext()",
        "org.apache.commons.io.StreamIterator#hasNext()",
        "org.apache.commons.io.function.IOStream.iterate(T,IOUnaryOperator<T>)$Iterator$1#hasNext()"
    ],
    "org.apache.commons.io.output.DeferredFileOutputStream#DeferredFileOutputStream(int,String,String,File)": [
        "org.apache.commons.io.output.AbstractByteArrayOutputStream.<staticinit>()",
        "org.apache.commons.io.output.DeferredFileOutputStream#DeferredFileOutputStream(int,File,String,String,File,int)"
    ],
    "org.apache.commons.io.file.PathUtils.createParentDirectories(Path,LinkOption,FileAttribute<?>[]...)": [
        "org.apache.commons.io.file.PathUtils.getParent(Path)",
        "org.apache.commons.io.file.PathUtils.readIfSymbolicLink(Path)"
    ],
    "org.apache.commons.io.input.Tailer.create(File,TailerListener,long,boolean,boolean)": [
        "org.apache.commons.io.build.AbstractOriginSupplier#setFile(File)",
        "org.apache.commons.io.input.Tailer.builder()"
    ],
    "org.apache.commons.io.function.Uncheck.test(IOPredicate<T>,T)": ["org.apache.commons.io.function.Uncheck.wrap(IOException)"],
    "org.apache.commons.io.input.RandomAccessFileInputStream.Builder#get()": [
        "org.apache.commons.io.build.AbstractOriginSupplier#checkOrigin()",
        "org.apache.commons.io.RandomAccessFileMode#create(File)",
        "org.apache.commons.io.build.AbstractOrigin.URIOrigin#getFile()",
        "org.apache.commons.io.RandomAccessFileMode.<staticinit>()",
        "org.apache.commons.io.build.AbstractOrigin.PathOrigin#getFile()",
        "org.apache.commons.io.input.RandomAccessFileInputStream#RandomAccessFileInputStream(RandomAccessFile,boolean)",
        "org.apache.commons.io.build.AbstractOrigin#getFile()",
        "org.apache.commons.io.build.AbstractOrigin.FileOrigin#getFile()",
        "org.apache.commons.io.build.AbstractOriginSupplier#getOrigin()"
    ],
    "org.apache.commons.io.IOUtils.copy(Reader,Appendable,CharBuffer)": [
        "org.apache.commons.io.output.NullAppendable#append(CharSequence,int,int)",
        "org.apache.commons.io.IOUtils.<staticinit>()"
    ],
    "org.apache.commons.io.IOUtils.write(byte[],OutputStream)": [
        "org.apache.commons.io.output.ThresholdingOutputStream#write(byte[])",
        "org.apache.commons.io.output.WriterOutputStream#write(byte[])",
        "org.apache.commons.io.output.NullOutputStream#write(byte[])"
    ],
    "org.apache.commons.io.input.buffer.CircularBufferInputStream#haveBytes(int)": [
        "org.apache.commons.io.input.buffer.CircularByteBuffer#getCurrentNumberOfBytes()",
        "org.apache.commons.io.input.buffer.CircularByteBuffer#hasBytes()",
        "org.apache.commons.io.input.buffer.CircularBufferInputStream#fillBuffer()"
    ],
    "org.apache.commons.io.function.IOStream#flatMapToInt(IOFunction<? super T, ? extends IntStream>)": [
        "org.apache.commons.io.function.Erase.apply(IOFunction<? super T, ? extends R>,T)",
        "org.apache.commons.io.function.IOBaseStreamAdapter#unwrap()"
    ],
    "org.apache.commons.io.input.Tailer.builder()": ["org.apache.commons.io.input.Tailer.Builder.<init>()"],
    "org.apache.commons.io.output.TeeOutputStream#write(byte[])": [
        "org.apache.commons.io.output.ThresholdingOutputStream#write(byte[])",
        "org.apache.commons.io.output.ProxyOutputStream#write(byte[])",
        "org.apache.commons.io.output.NullOutputStream#write(byte[])",
        "org.apache.commons.io.output.WriterOutputStream#write(byte[])"
    ],
    "org.apache.commons.io.function.IOBaseStream#onClose(IORunnable)": [
        "org.apache.commons.io.function.Erase.run(IORunnable)",
        "org.apache.commons.io.function.IOBaseStreamAdapter#unwrap()"
    ],
    "org.apache.commons.io.input.XmlStreamReader#read(char[],int,int)": [
        "org.apache.commons.io.input.CharSequenceReader#read(char[],int,int)",
        "org.apache.commons.io.input.UnsynchronizedBufferedReader#read(char[],int,int)",
        "org.apache.commons.io.input.NullReader#read(char[],int,int)",
        "org.apache.commons.io.input.BrokenReader#read(char[],int,int)",
        "org.apache.commons.io.input.SequenceReader#read(char[],int,int)",
        "org.apache.commons.io.input.ClosedReader#read(char[],int,int)",
        "org.apache.commons.io.input.XmlStreamReader#read(char[],int,int)",
        "org.apache.commons.io.input.BoundedReader#read(char[],int,int)"
    ],
    "org.apache.commons.io.function.UncheckedIOSpliterator#getComparator()": [
        "org.apache.commons.io.function.IOSpliterator#getComparator()",
        "org.apache.commons.io.function.IOComparator#asComparator()"
    ],
    "org.apache.commons.io.filefilter.FileFilterUtils.filter(IOFileFilter,Iterable<File>)": [
        "org.apache.commons.io.filefilter.FileFilterUtils.filterList(IOFileFilter,Iterable<File>)",
        "org.apache.commons.io.FileUtils.<staticinit>()"
    ],
    "org.apache.commons.io.input.ReversedLinesFileReader.builder()": ["org.apache.commons.io.input.ReversedLinesFileReader.Builder#Builder()"],
    "org.apache.commons.io.IOUtils.closeQ(Closeable)": ["org.apache.commons.io.IOUtils.closeQuietly(Closeable[]...)"],
    "org.apache.commons.io.input.BufferedFileChannelInputStream#refill()": ["org.apache.commons.io.input.Input.checkOpen(boolean)"],
    "org.apache.commons.io.input.ProxyReader#close()": [
        "org.apache.commons.io.input.NullReader#close()",
        "org.apache.commons.io.input.UnsynchronizedBufferedReader#close()",
        "org.apache.commons.io.input.BrokenReader#close()",
        "org.apache.commons.io.input.UnsynchronizedReader#close()",
        "org.apache.commons.io.input.ProxyReader#handleIOException(IOException)",
        "org.apache.commons.io.input.CharSequenceReader#close()",
        "org.apache.commons.io.input.SequenceReader#close()",
        "org.apache.commons.io.input.BoundedReader#close()",
        "org.apache.commons.io.input.XmlStreamReader#close()",
        "org.apache.commons.io.input.ClosedReader#close()",
        "org.apache.commons.io.input.TaggedReader#handleIOException(IOException)"
    ],
    "org.apache.commons.io.input.CharacterFilterReader#CharacterFilterReader(Reader,IntPredicate)": [
        "org.apache.commons.io.input.AbstractCharacterFilterReader#AbstractCharacterFilterReader(Reader,IntPredicate)",
        "org.apache.commons.io.input.CharacterFilterReader.<init>()"
    ],
    "org.apache.commons.io.input.CountingInputStream#resetCount()": ["org.apache.commons.io.input.CountingInputStream#resetByteCount()"],
    "org.apache.commons.io.filefilter.OrFileFilter#OrFileFilter()": ["org.apache.commons.io.filefilter.OrFileFilter#OrFileFilter(int)"],
    "org.apache.commons.io.output.ThresholdingOutputStream#write(byte[])": [
        "org.apache.commons.io.output.ThresholdingOutputStream#write(byte[])",
        "org.apache.commons.io.output.DeferredFileOutputStream#getStream()",
        "org.apache.commons.io.output.ThresholdingOutputStream#getStream()",
        "org.apache.commons.io.output.NullOutputStream#write(byte[])",
        "org.apache.commons.io.output.ThresholdingOutputStream#checkThreshold(int)",
        "org.apache.commons.io.output.WriterOutputStream#write(byte[])"
    ],
    "org.apache.commons.io.output.ProxyOutputStream#close()": ["org.apache.commons.io.IOUtils.close(Closeable,IOConsumer<IOException>)"],
    "org.apache.commons.io.EndianUtils.writeSwappedInteger(OutputStream,int)": [
        "org.apache.commons.io.output.BrokenOutputStream#write(int)",
        "org.apache.commons.io.output.AppendableOutputStream#write(int)",
        "org.apache.commons.io.output.WriterOutputStream#write(int)",
        "org.apache.commons.io.output.DemuxOutputStream#write(int)",
        "org.apache.commons.io.output.AbstractByteArrayOutputStream#write(int)",
        "org.apache.commons.io.output.UnsynchronizedByteArrayOutputStream#write(int)",
        "org.apache.commons.io.output.NullOutputStream#write(int)",
        "org.apache.commons.io.output.QueueOutputStream#write(int)",
        "org.apache.commons.io.output.ByteArrayOutputStream#write(int)",
        "org.apache.commons.io.output.ClosedOutputStream#write(int)",
        "org.apache.commons.io.output.ThresholdingOutputStream#write(int)"
    ],
    "org.apache.commons.io.output.NullAppendable#NullAppendable()": ["org.apache.commons.io.output.NullAppendable.<init>()"],
    "org.apache.commons.io.IOUtils.getScratchByteArray()": [
        "org.apache.commons.io.IOUtils.fill0(byte[])",
        "org.apache.commons.io.IOUtils.<staticinit>()"
    ],
    "org.apache.commons.io.function.IOFunction.identity()": ["org.apache.commons.io.function.Constants.<staticinit>()"],
    "org.apache.commons.io.function.IOStream#forAll(IOConsumer<T>,BiFunction<Integer, IOException, IOException>)": [
        "org.apache.commons.io.function.IOStreams.toIOConsumer(IOConsumer<T>)",
        "org.apache.commons.io.function.IOBaseStreamAdapter#unwrap()",
        "org.apache.commons.io.IOExceptionList.checkEmpty(List<? extends Throwable>,Object)"
    ],
    "org.apache.commons.io.FileUtils.moveFile(File,File,CopyOption[]...)": [
        "org.apache.commons.io.FileUtils.copyFile(File,File,boolean,CopyOption[]...)",
        "org.apache.commons.io.FileUtils.deleteQuietly(File)",
        "org.apache.commons.io.FileUtils.checkFileExists(File,String)",
        "org.apache.commons.io.FileUtils.requireAbsent(File,String)"
    ],
    "org.apache.commons.io.output.TaggedWriter#throwIfCauseOf(Exception)": ["org.apache.commons.io.TaggedIOException.throwCauseIfTaggedWith(Throwable,Object)"],
    "org.apache.commons.io.filefilter.AndFileFilter#AndFileFilter()": ["org.apache.commons.io.filefilter.AndFileFilter#AndFileFilter(int)"],
    "org.apache.commons.io.output.ByteArrayOutputStream#writeTo(OutputStream)": ["org.apache.commons.io.output.AbstractByteArrayOutputStream#writeToImpl(OutputStream)"],
    "org.apache.commons.io.output.FilterCollectionWriter#write(String)": [
        "org.apache.commons.io.output.ProxyCollectionWriter#write(String)",
        "org.apache.commons.io.output.FilterCollectionWriter#write(String)",
        "org.apache.commons.io.output.LockableFileWriter#write(String)",
        "org.apache.commons.io.output.FilterCollectionWriter#forAllWriters(IOConsumer<Writer>)",
        "org.apache.commons.io.output.StringBuilderWriter#write(String)",
        "org.apache.commons.io.output.NullWriter#write(String)"
    ],
    "org.apache.commons.io.filefilter.AndFileFilter#accept(Path,BasicFileAttributes)": [
        "org.apache.commons.io.filefilter.AndFileFilter#isEmpty()",
        "org.apache.commons.io.filefilter.SizeFileFilter#accept(Path,BasicFileAttributes)",
        "org.apache.commons.io.filefilter.WildcardFileFilter#accept(Path,BasicFileAttributes)",
        "org.apache.commons.io.filefilter.FalseFileFilter#accept(Path,BasicFileAttributes)",
        "org.apache.commons.io.filefilter.FileEqualsFileFilter#accept(Path,BasicFileAttributes)",
        "org.apache.commons.io.filefilter.PathVisitorFileFilter#accept(Path,BasicFileAttributes)",
        "org.apache.commons.io.filefilter.SymbolicLinkFileFilter#accept(Path,BasicFileAttributes)",
        "org.apache.commons.io.filefilter.PrefixFileFilter#accept(Path,BasicFileAttributes)",
        "org.apache.commons.io.filefilter.CanExecuteFileFilter#accept(Path,BasicFileAttributes)",
        "org.apache.commons.io.filefilter.MagicNumberFileFilter#accept(Path,BasicFileAttributes)",
        "org.apache.commons.io.filefilter.WildcardFilter#accept(Path,BasicFileAttributes)",
        "org.apache.commons.io.filefilter.NotFileFilter#accept(Path,BasicFileAttributes)",
        "org.apache.commons.io.filefilter.IOFileFilter#accept(Path,BasicFileAttributes)",
        "org.apache.commons.io.filefilter.AbstractFileFilter.toDefaultFileVisitResult(boolean)",
        "org.apache.commons.io.filefilter.AndFileFilter#accept(Path,BasicFileAttributes)",
        "org.apache.commons.io.filefilter.DirectoryFileFilter#accept(Path,BasicFileAttributes)",
        "org.apache.commons.io.filefilter.CanWriteFileFilter#accept(Path,BasicFileAttributes)",
        "org.apache.commons.io.filefilter.AgeFileFilter#accept(Path,BasicFileAttributes)",
        "org.apache.commons.io.filefilter.HiddenFileFilter#accept(Path,BasicFileAttributes)",
        "org.apache.commons.io.filefilter.TrueFileFilter#accept(Path,BasicFileAttributes)",
        "org.apache.commons.io.filefilter.EmptyFileFilter#accept(Path,BasicFileAttributes)",
        "org.apache.commons.io.filefilter.OrFileFilter#accept(Path,BasicFileAttributes)",
        "org.apache.commons.io.filefilter.PathEqualsFileFilter#accept(Path,BasicFileAttributes)",
        "org.apache.commons.io.filefilter.CanReadFileFilter#accept(Path,BasicFileAttributes)",
        "org.apache.commons.io.filefilter.NameFileFilter#accept(Path,BasicFileAttributes)",
        "org.apache.commons.io.filefilter.FileFileFilter#accept(Path,BasicFileAttributes)",
        "org.apache.commons.io.filefilter.RegexFileFilter#accept(Path,BasicFileAttributes)",
        "org.apache.commons.io.filefilter.SuffixFileFilter#accept(Path,BasicFileAttributes)"
    ],
    "org.apache.commons.io.output.ByteArrayOutputStream.toBufferedInputStream(InputStream)": [
        "org.apache.commons.io.output.ByteArrayOutputStream.toBufferedInputStream(InputStream,int)",
        "org.apache.commons.io.output.AbstractByteArrayOutputStream.<staticinit>()"
    ],
    "org.apache.commons.io.FileUtils.listFiles(File,IOFileFilter,IOFileFilter)": [
        "org.apache.commons.io.FileUtils.toList(Stream<File>)",
        "org.apache.commons.io.function.Uncheck.apply(IOFunction<T, R>,T)",
        "org.apache.commons.io.file.AccumulatorPathVisitor#getFileList()",
        "org.apache.commons.io.filefilter.FalseFileFilter#and(IOFileFilter)",
        "org.apache.commons.io.filefilter.FileFileFilter.<staticinit>()",
        "org.apache.commons.io.filefilter.TrueFileFilter#and(IOFileFilter)",
        "org.apache.commons.io.filefilter.IOFileFilter#and(IOFileFilter)",
        "org.apache.commons.io.FileUtils.listAccumulate(File,IOFileFilter,IOFileFilter,FileVisitOption[]...)",
        "org.apache.commons.io.filefilter.TrueFileFilter.<staticinit>()"
    ],
    "org.apache.commons.io.FileUtils.forceMkdir(File)": ["org.apache.commons.io.FileUtils.mkdirs(File)"],
    "org.apache.commons.io.CloseableURLConnection#setUseCaches(boolean)": ["org.apache.commons.io.CloseableURLConnection#setUseCaches(boolean)"],
    "org.apache.commons.io.input.UnsynchronizedFilterInputStream.builder()": ["org.apache.commons.io.input.UnsynchronizedFilterInputStream.Builder.<init>()"],
    "org.apache.commons.io.filefilter.SizeFileFilter#SizeFileFilter(long,boolean)": [
        "org.apache.commons.io.filefilter.AbstractFileFilter#AbstractFileFilter()",
        "org.apache.commons.io.filefilter.SizeFileFilter.<init>()"
    ],
    "org.apache.commons.io.IOUtils.toBufferedInputStream(InputStream)": ["org.apache.commons.io.output.ByteArrayOutputStream.toBufferedInputStream(InputStream)"],
    "org.apache.commons.io.input.UncheckedFilterInputStream#UncheckedFilterInputStream(InputStream)": ["org.apache.commons.io.input.UncheckedFilterInputStream.<init>()"],
    "org.apache.commons.io.input.ReversedLinesFileReader.FilePart#rollOver()": ["org.apache.commons.io.input.ReversedLinesFileReader.FilePart#FilePart(long,int,byte[])"],
    "org.apache.commons.io.output.FilterCollectionWriter#write(char[],int,int)": [
        "org.apache.commons.io.output.StringBuilderWriter#write(char[],int,int)",
        "org.apache.commons.io.output.BrokenWriter#write(char[],int,int)",
        "org.apache.commons.io.output.FilterCollectionWriter#forAllWriters(IOConsumer<Writer>)",
        "org.apache.commons.io.output.FilterCollectionWriter#write(char[],int,int)",
        "org.apache.commons.io.output.AppendableWriter#write(char[],int,int)",
        "org.apache.commons.io.output.ProxyCollectionWriter#write(char[],int,int)",
        "org.apache.commons.io.output.ClosedWriter#write(char[],int,int)",
        "org.apache.commons.io.output.XmlStreamWriter#write(char[],int,int)",
        "org.apache.commons.io.output.NullWriter#write(char[],int,int)",
        "org.apache.commons.io.output.LockableFileWriter#write(char[],int,int)"
    ],
    "org.apache.commons.io.file.NoopPathVisitor.<staticinit>()": ["org.apache.commons.io.file.NoopPathVisitor#NoopPathVisitor()"],
    "org.apache.commons.io.IOUtils.skip(InputStream,long)": ["org.apache.commons.io.IOUtils.skip(InputStream,long,Supplier<byte[]>)"],
    "org.apache.commons.io.input.BoundedInputStream#reset()": [
        "org.apache.commons.io.input.BrokenInputStream#reset()",
        "org.apache.commons.io.input.CharSequenceInputStream#reset()",
        "org.apache.commons.io.input.NullInputStream#reset()",
        "org.apache.commons.io.input.UnsynchronizedBufferedInputStream#reset()",
        "org.apache.commons.io.input.UnsynchronizedFilterInputStream#reset()",
        "org.apache.commons.io.input.UnsynchronizedByteArrayInputStream#reset()"
    ],
    "org.apache.commons.io.input.Tailer.create(File,Charset,TailerListener,long,boolean,boolean,int)": [
        "org.apache.commons.io.build.AbstractOriginSupplier#setFile(File)",
        "org.apache.commons.io.input.Tailer.builder()"
    ],
    "org.apache.commons.io.IOUtils.write(CharSequence,OutputStream)": ["org.apache.commons.io.IOUtils.write(CharSequence,OutputStream,Charset)"],
    "org.apache.commons.io.input.NullReader#mark(int)": ["org.apache.commons.io.input.UnsupportedOperationExceptions.mark()"],
    "org.apache.commons.io.function.IOStream#reduce(T,IOBinaryOperator<T>)": [
        "org.apache.commons.io.function.Erase.apply(IOBiFunction<? super T, ? super U, ? extends R>,T,U)",
        "org.apache.commons.io.function.IOBaseStreamAdapter#unwrap()"
    ],
    "org.apache.commons.io.output.QueueOutputStream#QueueOutputStream(BlockingQueue<Integer>)": ["org.apache.commons.io.output.QueueOutputStream.<init>()"],
    "org.apache.commons.io.CopyUtils.copy(String,Writer)": [
        "org.apache.commons.io.output.ProxyCollectionWriter#write(String)",
        "org.apache.commons.io.output.FilterCollectionWriter#write(String)",
        "org.apache.commons.io.output.LockableFileWriter#write(String)",
        "org.apache.commons.io.output.StringBuilderWriter#write(String)",
        "org.apache.commons.io.output.NullWriter#write(String)"
    ],
    "org.apache.commons.io.function.IOStream#collect(Collector<? super T, A, R>)": ["org.apache.commons.io.function.IOBaseStreamAdapter#unwrap()"],
    "org.apache.commons.io.file.PathUtils.delete(Path,LinkOption[],DeleteOption[]...)": [
        "org.apache.commons.io.file.PathUtils.deleteDirectory(Path,LinkOption[],DeleteOption[]...)",
        "org.apache.commons.io.file.PathUtils.deleteFile(Path,LinkOption[],DeleteOption[]...)"
    ],
    "org.apache.commons.io.file.PathUtils.directoryContentEquals(Path,Path,int,LinkOption[],FileVisitOption[])": ["org.apache.commons.io.file.PathUtils.RelativeSortedPaths#RelativeSortedPaths(Path,Path,int,LinkOption[],FileVisitOption[])"],
    "org.apache.commons.io.function.IOTriConsumer.noop()": ["org.apache.commons.io.function.Constants.<staticinit>()"],
    "org.apache.commons.io.input.UnsynchronizedFilterInputStream#read(byte[])": [
        "org.apache.commons.io.input.UnsynchronizedFilterInputStream#read(byte[],int,int)",
        "org.apache.commons.io.input.UnsynchronizedBufferedInputStream#read(byte[],int,int)"
    ],
    "org.apache.commons.io.input.UncheckedBufferedReader#UncheckedBufferedReader(Reader,int)": ["org.apache.commons.io.input.UncheckedBufferedReader.<init>()"],
    "org.apache.commons.io.filefilter.PrefixFileFilter#accept(File)": ["org.apache.commons.io.filefilter.PrefixFileFilter#accept(String)"],
    "org.apache.commons.io.file.PathUtils.isOlder(Path,FileTime,LinkOption[]...)": ["org.apache.commons.io.file.PathUtils.compareLastModifiedTimeTo(Path,FileTime,LinkOption[]...)"],
    "org.apache.commons.io.input.ReaderInputStream#ReaderInputStream(Reader,Charset)": [
        "org.apache.commons.io.IOUtils.<staticinit>()",
        "org.apache.commons.io.input.ReaderInputStream#ReaderInputStream(Reader,Charset,int)"
    ],
    "org.apache.commons.io.FileUtils.isFileOlder(File,File)": [
        "org.apache.commons.io.function.Uncheck.get(IOSupplier<T>)",
        "org.apache.commons.io.file.PathUtils.isOlder(Path,Path)"
    ],
    "org.apache.commons.io.function.IOStream#mapToInt(ToIntFunction<? super T>)": ["org.apache.commons.io.function.IOBaseStreamAdapter#unwrap()"],
    "org.apache.commons.io.output.FileWriterWithEncoding#FileWriterWithEncoding(File,String,boolean)": [
        "org.apache.commons.io.output.FileWriterWithEncoding.initWriter(File,Object,boolean)",
        "org.apache.commons.io.output.FileWriterWithEncoding#FileWriterWithEncoding(OutputStreamWriter)"
    ],
    "org.apache.commons.io.IOUtils.readFully(ReadableByteChannel,ByteBuffer)": ["org.apache.commons.io.IOUtils.read(ReadableByteChannel,ByteBuffer)"],
    "org.apache.commons.io.monitor.FileAlterationObserver#FileAlterationObserver(File)": ["org.apache.commons.io.monitor.FileAlterationObserver#FileAlterationObserver(File,FileFilter)"],
    "org.apache.commons.io.build.AbstractStreamBuilder#setBufferSizeMax(int)": [
        "org.apache.commons.io.build.AbstractSupplier#asThis()",
        "org.apache.commons.io.build.AbstractStreamBuilder.<staticinit>()"
    ],
    "org.apache.commons.io.file.PathUtils.fileContentEquals(Path,Path)": [
        "org.apache.commons.io.file.PathUtils.<staticinit>()",
        "org.apache.commons.io.file.PathUtils.fileContentEquals(Path,Path,LinkOption[],OpenOption[])"
    ],
    "org.apache.commons.io.output.UnsynchronizedByteArrayOutputStream#write(InputStream)": ["org.apache.commons.io.output.AbstractByteArrayOutputStream#writeImpl(InputStream)"],
    "org.apache.commons.io.function.IOIterator#remove()": [
        "org.apache.commons.io.function.UncheckedIOIterator#remove()",
        "org.apache.commons.io.LineIterator#remove()",
        "org.apache.commons.io.function.IOIteratorAdapter#unwrap()"
    ],
    "org.apache.commons.io.file.AccumulatorPathVisitor.withBigIntegerCounters()": [
        "org.apache.commons.io.file.Counters.bigIntegerPathCounters()",
        "org.apache.commons.io.file.AccumulatorPathVisitor#AccumulatorPathVisitor(PathCounters)"
    ],
    "org.apache.commons.io.input.CharSequenceReader#toString()": [
        "org.apache.commons.io.input.CharSequenceReader#end()",
        "org.apache.commons.io.input.CharSequenceReader#start()"
    ],
    "org.apache.commons.io.input.ProxyInputStream#ProxyInputStream(InputStream,IOConsumer<IOException>)": ["org.apache.commons.io.input.ProxyInputStream.<init>()"],
    "org.apache.commons.io.filefilter.RegexFileFilter#accept(Path,BasicFileAttributes)": ["org.apache.commons.io.filefilter.AbstractFileFilter#toFileVisitResult(boolean)"],
    "org.apache.commons.io.input.ByteBufferCleaner.Java9Cleaner#Java9Cleaner()": ["org.apache.commons.io.input.ByteBufferCleaner.Java9Cleaner.<init>()"],
    "org.apache.commons.io.function.Uncheck.getAsLong(IOLongSupplier)": ["org.apache.commons.io.function.Uncheck.wrap(IOException)"],
    "org.apache.commons.io.output.UncheckedAppendableImpl#append(CharSequence)": ["org.apache.commons.io.function.Uncheck.apply(IOFunction<T, R>,T)"],
    "org.apache.commons.io.output.XmlStreamWriter#close()": [
        "org.apache.commons.io.output.ClosedWriter#close()",
        "org.apache.commons.io.output.StringBuilderWriter#write(String)",
        "org.apache.commons.io.output.XmlStreamWriter#close()",
        "org.apache.commons.io.output.NullWriter#write(char[])",
        "org.apache.commons.io.output.BrokenWriter#close()",
        "org.apache.commons.io.output.LockableFileWriter#close()",
        "org.apache.commons.io.output.NullWriter#close()",
        "org.apache.commons.io.output.LockableFileWriter#write(char[])",
        "org.apache.commons.io.output.StringBuilderWriter#close()",
        "org.apache.commons.io.output.FilterCollectionWriter#close()",
        "org.apache.commons.io.output.ProxyCollectionWriter#close()",
        "org.apache.commons.io.output.FilterCollectionWriter#write(int)",
        "org.apache.commons.io.output.AppendableWriter#close()",
        "org.apache.commons.io.output.AppendableWriter#write(int)",
        "org.apache.commons.io.output.ProxyCollectionWriter#write(int)"
    ],
    "org.apache.commons.io.input.ThrottledInputStream.builder()": ["org.apache.commons.io.input.ThrottledInputStream.Builder.<init>()"],
    "org.apache.commons.io.FileUtils.writeLines(File,String,Collection<?>)": ["org.apache.commons.io.FileUtils.writeLines(File,String,Collection<?>,String,boolean)"],
    "org.apache.commons.io.IOUtils.toString(URL,String)": [
        "org.apache.commons.io.IOUtils.toString(URL,Charset)",
        "org.apache.commons.io.Charsets.toCharset(String)"
    ],
    "org.apache.commons.io.input.ByteBufferCleaner.<staticinit>()": ["org.apache.commons.io.input.ByteBufferCleaner.getCleaner()"],
    "org.apache.commons.io.build.AbstractOriginSupplier.newInputStreamOrigin(InputStream)": ["org.apache.commons.io.build.AbstractOrigin.InputStreamOrigin#InputStreamOrigin(InputStream)"],
    "org.apache.commons.io.input.ReversedLinesFileReader#ReversedLinesFileReader(Path,int,Charset)": [
        "org.apache.commons.io.input.ReversedLinesFileReader.<init>()",
        "org.apache.commons.io.Charsets.toCharset(Charset)",
        "org.apache.commons.io.StandardLineSeparator.<staticinit>()",
        "org.apache.commons.io.StandardLineSeparator#getBytes(Charset)",
        "org.apache.commons.io.input.ReversedLinesFileReader.FilePart#FilePart(long,int,byte[])"
    ],
    "org.apache.commons.io.input.BufferedFileChannelInputStream#cleanDirectBuffer(ByteBuffer)": [
        "org.apache.commons.io.input.ByteBufferCleaner.isSupported()",
        "org.apache.commons.io.input.ByteBufferCleaner.clean(ByteBuffer)"
    ],
    "org.apache.commons.io.filefilter.MagicNumberFileFilter#MagicNumberFileFilter(String)": ["org.apache.commons.io.filefilter.MagicNumberFileFilter#MagicNumberFileFilter(String,long)"],
    "org.apache.commons.io.FileUtils.copyDirectoryToDirectory(File,File)": [
        "org.apache.commons.io.FileUtils.copyDirectory(File,File,boolean)",
        "org.apache.commons.io.FileUtils.requireDirectoryIfExists(File,String)"
    ],
    "org.apache.commons.io.input.ReversedLinesFileReader.Builder#get()": [
        "org.apache.commons.io.build.AbstractStreamBuilder#getPath()",
        "org.apache.commons.io.build.AbstractStreamBuilder#getCharset()",
        "org.apache.commons.io.input.ReversedLinesFileReader#ReversedLinesFileReader(Path,int,Charset)",
        "org.apache.commons.io.build.AbstractStreamBuilder#getBufferSize()"
    ],
    "org.apache.commons.io.function.Uncheck.run(IORunnable,Supplier<String>)": ["org.apache.commons.io.function.Uncheck.wrap(IOException,Supplier<String>)"],
    "org.apache.commons.io.function.IOStreams.forAll(Stream<T>,IOConsumer<T>,BiFunction<Integer, IOException, IOException>)": [
        "org.apache.commons.io.function.IOStream#forAll(IOConsumer<T>,BiFunction<Integer, IOException, IOException>)",
        "org.apache.commons.io.function.IOStream.adapt(Stream<T>)"
    ],
    "org.apache.commons.io.FilenameUtils.isRFC3986HostName(String)": ["org.apache.commons.io.FilenameUtils.<staticinit>()"],
    "org.apache.commons.io.function.IOStreams.forEach(Stream<T>,IOConsumer<T>)": [
        "org.apache.commons.io.function.IOStreams.toIOConsumer(IOConsumer<T>)",
        "org.apache.commons.io.function.Erase.accept(IOConsumer<T>,T)",
        "org.apache.commons.io.function.IOStreams.of(Stream<T>)"
    ],
    "org.apache.commons.io.filefilter.AgeFileFilter#accept(Path,BasicFileAttributes)": [
        "org.apache.commons.io.filefilter.AbstractFileFilter#get(IOSupplier<FileVisitResult>)",
        "org.apache.commons.io.filefilter.AbstractFileFilter#toFileVisitResult(boolean)",
        "org.apache.commons.io.file.PathUtils.isNewer(Path,Path)"
    ],
    "org.apache.commons.io.filefilter.FileFilterUtils.asFileFilter(FilenameFilter)": ["org.apache.commons.io.filefilter.DelegateFileFilter#DelegateFileFilter(FilenameFilter)"],
    "org.apache.commons.io.filefilter.RegexFileFilter#RegexFileFilter(String,IOCase)": [
        "org.apache.commons.io.filefilter.RegexFileFilter.compile(String,int)",
        "org.apache.commons.io.filefilter.RegexFileFilter#RegexFileFilter(Pattern)",
        "org.apache.commons.io.filefilter.RegexFileFilter.toFlags(IOCase)"
    ],
    "org.apache.commons.io.input.Tailer.create(File,TailerListener,long,boolean,int)": [
        "org.apache.commons.io.build.AbstractOriginSupplier#setFile(File)",
        "org.apache.commons.io.input.Tailer.builder()"
    ],
    "org.apache.commons.io.function.IOStream#anyMatch(IOPredicate<? super T>)": [
        "org.apache.commons.io.function.Erase.test(IOPredicate<? super T>,T)",
        "org.apache.commons.io.function.IOBaseStreamAdapter#unwrap()"
    ],
    "org.apache.commons.io.input.NullInputStream#available()": ["org.apache.commons.io.input.AbstractInputStream#isClosed()"],
    "org.apache.commons.io.IOUtils.toCharArray(InputStream)": ["org.apache.commons.io.IOUtils.toCharArray(InputStream,Charset)"],
    "org.apache.commons.io.ByteOrderParser#ByteOrderParser()": ["org.apache.commons.io.ByteOrderParser.<init>()"],
    "org.apache.commons.io.file.Counters.NoopPathCounters#NoopPathCounters()": [
        "org.apache.commons.io.file.Counters.NoopPathCounters.<init>()",
        "org.apache.commons.io.file.Counters.AbstractPathCounters#AbstractPathCounters(Counter,Counter,Counter)",
        "org.apache.commons.io.file.Counters.noopCounter()"
    ],
    "org.apache.commons.io.output.LockableFileWriter#LockableFileWriter(File,boolean,String)": ["org.apache.commons.io.output.LockableFileWriter#LockableFileWriter(File,Charset,boolean,String)"],
    "org.apache.commons.io.input.MemoryMappedFileInputStream.Builder#Builder()": [
        "org.apache.commons.io.build.AbstractStreamBuilder#setBufferSize(int)",
        "org.apache.commons.io.build.AbstractStreamBuilder#setBufferSizeDefault(int)",
        "org.apache.commons.io.input.MemoryMappedFileInputStream.<staticinit>()",
        "org.apache.commons.io.build.AbstractStreamBuilder.<init>()",
        "org.apache.commons.io.input.MemoryMappedFileInputStream.Builder.<init>()"
    ],
    "org.apache.commons.io.FileCleaner.getInstance()": ["org.apache.commons.io.FileCleaner.<staticinit>()"],
    "org.apache.commons.io.output.WriterOutputStream.Builder#Builder()": [
        "org.apache.commons.io.build.AbstractStreamBuilder.<init>()",
        "org.apache.commons.io.output.WriterOutputStream.Builder.<init>()",
        "org.apache.commons.io.build.AbstractStreamBuilder#getCharset()"
    ],
    "org.apache.commons.io.monitor.FileAlterationObserver#FileAlterationObserver(String,FileFilter)": ["org.apache.commons.io.monitor.FileAlterationObserver#FileAlterationObserver(File,FileFilter)"],
    "org.apache.commons.io.FileSystemUtils.freeSpaceKb(String,long)": [
        "org.apache.commons.io.FileSystemUtils.getFreeSpace(String)",
        "org.apache.commons.io.FileUtils.<staticinit>()"
    ],
    "org.apache.commons.io.build.AbstractOriginSupplier#setReader(Reader)": [
        "org.apache.commons.io.input.Tailer.Builder#setOrigin(AbstractOrigin<?, ?>)",
        "org.apache.commons.io.build.AbstractOriginSupplier.newReaderOrigin(Reader)",
        "org.apache.commons.io.build.AbstractOriginSupplier#setOrigin(AbstractOrigin<?, ?>)"
    ],
    "org.apache.commons.io.input.Tailer.Builder.<init>()": [
        "org.apache.commons.io.build.AbstractStreamBuilder.<init>()",
        "org.apache.commons.io.input.Tailer.Builder.<staticinit>()"
    ],
    "org.apache.commons.io.file.FilesUncheck.isHidden(Path)": ["org.apache.commons.io.function.Uncheck.apply(IOFunction<T, R>,T)"],
    "org.apache.commons.io.FileUtils.isFileNewer(File,long)": [
        "org.apache.commons.io.function.Uncheck.get(IOSupplier<T>)",
        "org.apache.commons.io.file.PathUtils.isNewer(Path,Path)",
        "org.apache.commons.io.FileUtils.<staticinit>()"
    ],
    "org.apache.commons.io.IOUtils.read(ReadableByteChannel,ByteBuffer)": ["org.apache.commons.io.IOUtils.<staticinit>()"],
    "org.apache.commons.io.file.PathUtils.sizeOf(Path)": ["org.apache.commons.io.file.PathUtils.sizeOfDirectory(Path)"],
    "org.apache.commons.io.input.BoundedReader#reset()": [
        "org.apache.commons.io.input.NullReader#reset()",
        "org.apache.commons.io.input.BrokenReader#reset()",
        "org.apache.commons.io.input.BoundedReader#reset()",
        "org.apache.commons.io.input.UnsynchronizedBufferedReader#reset()",
        "org.apache.commons.io.input.CharSequenceReader#reset()"
    ],
    "org.apache.commons.io.input.QueueInputStream#QueueInputStream(BlockingQueue<Integer>,Duration)": ["org.apache.commons.io.input.QueueInputStream.<init>()"],
    "org.apache.commons.io.input.ObservableInputStream#ObservableInputStream(InputStream,Observer[]...)": ["org.apache.commons.io.input.ObservableInputStream#ObservableInputStream(InputStream,List<Observer>)"],
    "org.apache.commons.io.input.ThrottledInputStream#getBytesPerSecond()": ["org.apache.commons.io.input.CountingInputStream#getByteCount()"],
    "org.apache.commons.io.filefilter.NotFileFilter#NotFileFilter(IOFileFilter)": [
        "org.apache.commons.io.filefilter.AbstractFileFilter#AbstractFileFilter()",
        "org.apache.commons.io.filefilter.NotFileFilter.<init>()"
    ],
    "org.apache.commons.io.IOUtils.copyLarge(Reader,Writer,long,long,char[])": [
        "org.apache.commons.io.output.StringBuilderWriter#write(char[],int,int)",
        "org.apache.commons.io.input.NullReader#read(char[],int,int)",
        "org.apache.commons.io.input.SequenceReader#read(char[],int,int)",
        "org.apache.commons.io.input.ClosedReader#read(char[],int,int)",
        "org.apache.commons.io.input.XmlStreamReader#read(char[],int,int)",
        "org.apache.commons.io.output.ClosedWriter#write(char[],int,int)",
        "org.apache.commons.io.output.XmlStreamWriter#write(char[],int,int)",
        "org.apache.commons.io.input.BoundedReader#read(char[],int,int)",
        "org.apache.commons.io.IOUtils.<staticinit>()",
        "org.apache.commons.io.output.NullWriter#write(char[],int,int)",
        "org.apache.commons.io.IOUtils.skipFully(Reader,long)",
        "org.apache.commons.io.input.CharSequenceReader#read(char[],int,int)",
        "org.apache.commons.io.input.UnsynchronizedBufferedReader#read(char[],int,int)",
        "org.apache.commons.io.output.BrokenWriter#write(char[],int,int)",
        "org.apache.commons.io.input.BrokenReader#read(char[],int,int)",
        "org.apache.commons.io.output.FilterCollectionWriter#write(char[],int,int)",
        "org.apache.commons.io.output.AppendableWriter#write(char[],int,int)",
        "org.apache.commons.io.output.ProxyCollectionWriter#write(char[],int,int)",
        "org.apache.commons.io.output.LockableFileWriter#write(char[],int,int)"
    ],
    "org.apache.commons.io.function.IOIterator#asIterator()": ["org.apache.commons.io.function.UncheckedIOIterator#UncheckedIOIterator(IOIterator<E>)"],
    "org.apache.commons.io.IOUtils.closeQuietly(Writer)": ["org.apache.commons.io.IOUtils.closeQ(Closeable)"],
    "org.apache.commons.io.input.BufferedFileChannelInputStream#close()": ["org.apache.commons.io.input.BufferedFileChannelInputStream#clean(ByteBuffer)"],
    "org.apache.commons.io.file.attribute.FileTimes.ntfsTimeToFileTime(long)": ["org.apache.commons.io.file.attribute.FileTimes.<staticinit>()"],
    "org.apache.commons.io.filefilter.FileFilterUtils.andFileFilter(IOFileFilter,IOFileFilter)": ["org.apache.commons.io.filefilter.AndFileFilter#AndFileFilter(IOFileFilter[]...)"],
    "org.apache.commons.io.charset.CharsetEncoders#CharsetEncoders()": ["org.apache.commons.io.charset.CharsetEncoders.<init>()"],
    "org.apache.commons.io.function.IOStreamAdapter#wrap(Stream<T>)": [
        "org.apache.commons.io.function.IOBaseStreamAdapter#unwrap()",
        "org.apache.commons.io.function.IOStreamAdapter.adapt(Stream<T>)"
    ],
    "org.apache.commons.io.IOUtils.resourceToByteArray(String)": ["org.apache.commons.io.IOUtils.resourceToByteArray(String,ClassLoader)"],
    "org.apache.commons.io.comparator.NameFileComparator#compare(File,File)": ["org.apache.commons.io.IOCase#checkCompareTo(String,String)"],
    "org.apache.commons.io.filefilter.PathMatcherFileFilter#accept(File)": ["org.apache.commons.io.filefilter.PathMatcherFileFilter#matches(Path)"],
    "org.apache.commons.io.file.Counters.LongCounter#equals(Object)": [
        "org.apache.commons.io.file.Counters.BigIntegerCounter#get()",
        "org.apache.commons.io.file.Counters.LongCounter#get()",
        "org.apache.commons.io.file.Counters.NoopCounter#get()"
    ],
    "org.apache.commons.io.build.AbstractStreamBuilder.<staticinit>()": ["org.apache.commons.io.file.PathUtils.<staticinit>()"],
    "org.apache.commons.io.function.UncheckedIOSpliterator#trySplit()": ["org.apache.commons.io.function.Uncheck.get(IOSupplier<T>)"],
    "org.apache.commons.io.filefilter.OrFileFilter#OrFileFilter(List<IOFileFilter>)": ["org.apache.commons.io.filefilter.OrFileFilter#OrFileFilter(ArrayList<IOFileFilter>)"],
    "org.apache.commons.io.CloseableURLConnection#getContent(Class[])": ["org.apache.commons.io.CloseableURLConnection#getContent(Class[])"],
    "org.apache.commons.io.build.AbstractStreamBuilder#setCharset(String)": [
        "org.apache.commons.io.Charsets.toCharset(String,Charset)",
        "org.apache.commons.io.output.WriterOutputStream.Builder#setCharset(Charset)",
        "org.apache.commons.io.build.AbstractStreamBuilder#setCharset(Charset)",
        "org.apache.commons.io.input.XmlStreamReader.Builder#setCharset(Charset)",
        "org.apache.commons.io.input.ReaderInputStream.Builder#setCharset(Charset)",
        "org.apache.commons.io.input.CharSequenceInputStream.Builder#setCharset(Charset)"
    ],
    "org.apache.commons.io.FilenameUtils.wildcardMatch(String,String)": [
        "org.apache.commons.io.IOCase.<staticinit>()",
        "org.apache.commons.io.FilenameUtils.wildcardMatch(String,String,IOCase)"
    ],
    "org.apache.commons.io.output.ProxyWriter#ProxyWriter(Writer)": ["org.apache.commons.io.output.ProxyWriter.<init>()"],
    "org.apache.commons.io.IOUtils.writeLines(Collection<?>,String,OutputStream,Charset)": [
        "org.apache.commons.io.filefilter.DelegateFileFilter#toString()",
        "org.apache.commons.io.filefilter.AndFileFilter#toString()",
        "org.apache.commons.io.filefilter.RegexFileFilter#toString()",
        "org.apache.commons.io.build.AbstractOrigin#toString()",
        "org.apache.commons.io.filefilter.WildcardFileFilter#toString()",
        "org.apache.commons.io.filefilter.NotFileFilter#toString()",
        "org.apache.commons.io.comparator.NameFileComparator#toString()",
        "org.apache.commons.io.comparator.SizeFileComparator#toString()",
        "org.apache.commons.io.output.WriterOutputStream#write(byte[])",
        "org.apache.commons.io.comparator.PathFileComparator#toString()",
        "org.apache.commons.io.filefilter.PrefixFileFilter#toString()",
        "org.apache.commons.io.input.TimestampedObserver#toString()",
        "org.apache.commons.io.IOUtils.write(String,OutputStream,Charset)",
        "org.apache.commons.io.filefilter.OrFileFilter#toString()",
        "org.apache.commons.io.filefilter.NameFileFilter#toString()",
        "org.apache.commons.io.comparator.ExtensionFileComparator#toString()",
        "org.apache.commons.io.comparator.CompositeFileComparator#toString()",
        "org.apache.commons.io.filefilter.AgeFileFilter#toString()",
        "org.apache.commons.io.filefilter.SuffixFileFilter#toString()",
        "org.apache.commons.io.filefilter.MagicNumberFileFilter#toString()",
        "org.apache.commons.io.output.ThresholdingOutputStream#write(byte[])",
        "org.apache.commons.io.output.NullOutputStream#write(byte[])",
        "org.apache.commons.io.comparator.ReverseFileComparator#toString()",
        "org.apache.commons.io.filefilter.SizeFileFilter#toString()"
    ],
    "org.apache.commons.io.FileUtils.readFileToString(File)": ["org.apache.commons.io.FileUtils.readFileToString(File,Charset)"],
    "org.apache.commons.io.input.ReaderInputStream.Builder#get()": [
        "org.apache.commons.io.build.AbstractStreamBuilder#getBufferSize()",
        "org.apache.commons.io.input.ReaderInputStream#ReaderInputStream(Reader,CharsetEncoder,int)",
        "org.apache.commons.io.build.AbstractStreamBuilder#getReader()"
    ],
    "org.apache.commons.io.CloseableURLConnection#getContent()": ["org.apache.commons.io.CloseableURLConnection#getContent()"],
    "org.apache.commons.io.input.SwappedDataInputStream#readFully(byte[],int,int)": [
        "org.apache.commons.io.input.ProxyInputStream#read(byte[],int,int)",
        "org.apache.commons.io.input.TeeInputStream#read(byte[],int,int)",
        "org.apache.commons.io.IOUtils.<staticinit>()",
        "org.apache.commons.io.input.ObservableInputStream#read(byte[],int,int)",
        "org.apache.commons.io.input.BOMInputStream#read(byte[],int,int)",
        "org.apache.commons.io.input.BoundedInputStream#read(byte[],int,int)"
    ],
    "org.apache.commons.io.monitor.FileAlterationObserver#FileAlterationObserver(File,FileFilter)": ["org.apache.commons.io.monitor.FileAlterationObserver#FileAlterationObserver(File,FileFilter,IOCase)"],
    "org.apache.commons.io.input.XmlStreamReader#XmlStreamReader(InputStream,boolean,String)": [
        "org.apache.commons.io.input.XmlStreamReader.<staticinit>()",
        "org.apache.commons.io.input.XmlStreamReader#processHttpStream(BOMInputStream,BOMInputStream,boolean)",
        "org.apache.commons.io.input.XmlStreamReader.<init>()",
        "org.apache.commons.io.IOUtils.<staticinit>()"
    ],
    "org.apache.commons.io.file.PathUtils.directoryAndFileContentEquals(Path,Path,LinkOption[],OpenOption[],FileVisitOption[])": [
        "org.apache.commons.io.file.PathUtils.fileContentEquals(Path,Path,LinkOption[],OpenOption[])",
        "org.apache.commons.io.file.PathUtils.RelativeSortedPaths#RelativeSortedPaths(Path,Path,int,LinkOption[],FileVisitOption[])"
    ],
    "org.apache.commons.io.CloseableURLConnection#getHeaderField(int)": ["org.apache.commons.io.CloseableURLConnection#getHeaderField(int)"],
    "org.apache.commons.io.file.PathUtils.isOlder(Path,Path)": ["org.apache.commons.io.file.PathUtils.isOlder(Path,Path)"],
    "org.apache.commons.io.FileCleaner.getTrackCount()": [
        "org.apache.commons.io.FileCleaner.<staticinit>()",
        "org.apache.commons.io.FileCleaningTracker#getTrackCount()"
    ],
    "org.apache.commons.io.output.ChunkedOutputStream.Builder#get()": [
        "org.apache.commons.io.build.AbstractStreamBuilder#getBufferSize()",
        "org.apache.commons.io.output.ChunkedOutputStream#ChunkedOutputStream(OutputStream,int)",
        "org.apache.commons.io.build.AbstractStreamBuilder#getOutputStream()"
    ],
    "org.apache.commons.io.input.UnsynchronizedFilterInputStream#skip(long)": [
        "org.apache.commons.io.input.UnsynchronizedFilterInputStream#skip(long)",
        "org.apache.commons.io.input.NullInputStream#skip(long)",
        "org.apache.commons.io.input.UnsynchronizedBufferedInputStream#skip(long)",
        "org.apache.commons.io.input.UnsynchronizedByteArrayInputStream#skip(long)",
        "org.apache.commons.io.input.CharSequenceInputStream#skip(long)",
        "org.apache.commons.io.input.BufferedFileChannelInputStream#skip(long)",
        "org.apache.commons.io.input.RandomAccessFileInputStream#skip(long)",
        "org.apache.commons.io.input.MemoryMappedFileInputStream#skip(long)",
        "org.apache.commons.io.input.BrokenInputStream#skip(long)"
    ],
    "org.apache.commons.io.input.MemoryMappedFileInputStream#MemoryMappedFileInputStream(Path,int)": [
        "org.apache.commons.io.input.AbstractInputStream.<init>()",
        "org.apache.commons.io.input.MemoryMappedFileInputStream.<init>()"
    ],
    "org.apache.commons.io.input.ProxyReader#markSupported()": [
        "org.apache.commons.io.input.UnsynchronizedBufferedReader#markSupported()",
        "org.apache.commons.io.input.CharSequenceReader#markSupported()",
        "org.apache.commons.io.input.NullReader#markSupported()"
    ],
    "org.apache.commons.io.input.UncheckedFilterReader#mark(int)": ["org.apache.commons.io.function.Uncheck.accept(IOConsumer<T>,T)"],
    "org.apache.commons.io.output.ThresholdingOutputStream#getStream()": ["org.apache.commons.io.output.ThresholdingOutputStream#getOutputStream()"],
    "org.apache.commons.io.file.Counters.bigIntegerPathCounters()": ["org.apache.commons.io.file.Counters.BigIntegerPathCounters#BigIntegerPathCounters()"],
    "org.apache.commons.io.file.PathUtils.deleteFile(Path,LinkOption[],DeleteOption[]...)": [
        "org.apache.commons.io.file.Counters.BigIntegerCounter#increment()",
        "org.apache.commons.io.file.Counters.AbstractPathCounters#getByteCounter()",
        "org.apache.commons.io.file.Counters.LongCounter#increment()",
        "org.apache.commons.io.file.PathUtils.getParent(Path)",
        "org.apache.commons.io.file.PathUtils.overrideReadOnly(DeleteOption[]...)",
        "org.apache.commons.io.file.PathUtils.readPosixFileAttributes(Path,LinkOption[]...)",
        "org.apache.commons.io.file.PathUtils.setReadOnly(Path,boolean,LinkOption[]...)",
        "org.apache.commons.io.file.Counters.NoopCounter#increment()",
        "org.apache.commons.io.file.Counters.BigIntegerCounter#add(long)",
        "org.apache.commons.io.file.Counters.NoopCounter#add(long)",
        "org.apache.commons.io.file.Counters.LongCounter#add(long)",
        "org.apache.commons.io.file.Counters.longPathCounters()",
        "org.apache.commons.io.file.PathUtils.exists(Path,LinkOption[]...)",
        "org.apache.commons.io.file.Counters.AbstractPathCounters#getFileCounter()"
    ],
    "org.apache.commons.io.IOCase#IOCase(String,boolean)": ["org.apache.commons.io.IOCase.<init>()"],
    "org.apache.commons.io.input.UncheckedFilterInputStream#read()": ["org.apache.commons.io.function.Uncheck.get(IOSupplier<T>)"],
    "org.apache.commons.io.filefilter.FileFilterUtils.filterSet(IOFileFilter,File[]...)": ["org.apache.commons.io.filefilter.FileFilterUtils.filter(IOFileFilter,File[]...)"],
    "org.apache.commons.io.comparator.LastModifiedFileComparator.<staticinit>()": [
        "org.apache.commons.io.comparator.LastModifiedFileComparator.<init>()",
        "org.apache.commons.io.comparator.ReverseFileComparator#ReverseFileComparator(Comparator<File>)"
    ],
    "org.apache.commons.io.function.Erase.get(IOSupplier<T>)": [
        "org.apache.commons.io.input.UnsynchronizedFilterInputStream.Builder#get()",
        "org.apache.commons.io.input.BOMInputStream.Builder#get()",
        "org.apache.commons.io.function.Erase.rethrow(Throwable)",
        "org.apache.commons.io.input.CharSequenceInputStream.Builder#get()",
        "org.apache.commons.io.input.QueueInputStream.Builder#get()",
        "org.apache.commons.io.input.ReaderInputStream.Builder#get()",
        "org.apache.commons.io.filefilter.WildcardFileFilter.Builder#get()",
        "org.apache.commons.io.input.ChecksumInputStream.Builder#get()",
        "org.apache.commons.io.input.Tailer.Builder#get()",
        "org.apache.commons.io.output.WriterOutputStream.Builder#get()",
        "org.apache.commons.io.input.ReadAheadInputStream.Builder#get()",
        "org.apache.commons.io.input.UnsynchronizedBufferedInputStream.Builder#get()",
        "org.apache.commons.io.input.UncheckedFilterInputStream.Builder#get()",
        "org.apache.commons.io.input.AutoCloseInputStream.Builder#get()",
        "org.apache.commons.io.output.ChunkedOutputStream.Builder#get()",
        "org.apache.commons.io.input.UnsynchronizedByteArrayInputStream.Builder#get()",
        "org.apache.commons.io.output.UncheckedFilterOutputStream.Builder#get()",
        "org.apache.commons.io.output.XmlStreamWriter.Builder#get()",
        "org.apache.commons.io.input.MessageDigestCalculatingInputStream.Builder#get()",
        "org.apache.commons.io.input.BoundedInputStream.Builder#get()",
        "org.apache.commons.io.output.LockableFileWriter.Builder#get()",
        "org.apache.commons.io.input.ReversedLinesFileReader.Builder#get()",
        "org.apache.commons.io.input.ThrottledInputStream.Builder#get()",
        "org.apache.commons.io.build.AbstractOrigin#get()",
        "org.apache.commons.io.output.UnsynchronizedByteArrayOutputStream.Builder#get()",
        "org.apache.commons.io.input.BufferedFileChannelInputStream.Builder#get()",
        "org.apache.commons.io.output.UncheckedFilterWriter.Builder#get()",
        "org.apache.commons.io.input.RandomAccessFileInputStream.Builder#get()",
        "org.apache.commons.io.input.UncheckedFilterReader.Builder#get()",
        "org.apache.commons.io.input.MessageDigestInputStream.Builder#get()",
        "org.apache.commons.io.input.UncheckedBufferedReader.Builder#get()",
        "org.apache.commons.io.output.FileWriterWithEncoding.Builder#get()",
        "org.apache.commons.io.input.MemoryMappedFileInputStream.Builder#get()",
        "org.apache.commons.io.input.XmlStreamReader.Builder#get()",
        "org.apache.commons.io.output.DeferredFileOutputStream.Builder#get()"
    ],
    "org.apache.commons.io.output.ChunkedOutputStream#write(byte[],int,int)": [
        "org.apache.commons.io.output.WriterOutputStream#write(byte[],int,int)",
        "org.apache.commons.io.output.AbstractByteArrayOutputStream#write(byte[],int,int)",
        "org.apache.commons.io.output.NullOutputStream#write(byte[],int,int)",
        "org.apache.commons.io.output.UnsynchronizedByteArrayOutputStream#write(byte[],int,int)",
        "org.apache.commons.io.output.ClosedOutputStream#write(byte[],int,int)",
        "org.apache.commons.io.output.ThresholdingOutputStream#write(byte[],int,int)",
        "org.apache.commons.io.output.ByteArrayOutputStream#write(byte[],int,int)"
    ],
    "org.apache.commons.io.output.NullWriter#NullWriter()": [
        "org.apache.commons.io.output.NullWriter.<staticinit>()",
        "org.apache.commons.io.output.NullWriter.<init>()"
    ],
    "org.apache.commons.io.output.ProxyCollectionWriter#write(char[])": [
        "org.apache.commons.io.output.FilterCollectionWriter#write(char[])",
        "org.apache.commons.io.output.ProxyCollectionWriter#handleIOException(IOException)",
        "org.apache.commons.io.output.ProxyCollectionWriter#afterWrite(int)",
        "org.apache.commons.io.output.ProxyCollectionWriter#beforeWrite(int)",
        "org.apache.commons.io.IOUtils.length(char[])"
    ],
    "org.apache.commons.io.file.PathUtils.delete(Path)": [
        "org.apache.commons.io.file.PathUtils.delete(Path,DeleteOption[]...)",
        "org.apache.commons.io.file.PathUtils.<staticinit>()"
    ],
    "org.apache.commons.io.output.TaggedOutputStream#handleIOException(IOException)": ["org.apache.commons.io.TaggedIOException#TaggedIOException(IOException,Serializable)"],
    "org.apache.commons.io.output.ProxyWriter#flush()": [
        "org.apache.commons.io.output.TaggedWriter#handleIOException(IOException)",
        "org.apache.commons.io.output.BrokenWriter#flush()",
        "org.apache.commons.io.output.AppendableWriter#flush()",
        "org.apache.commons.io.output.ProxyWriter#handleIOException(IOException)",
        "org.apache.commons.io.output.StringBuilderWriter#flush()",
        "org.apache.commons.io.output.FilterCollectionWriter#flush()",
        "org.apache.commons.io.output.XmlStreamWriter#flush()",
        "org.apache.commons.io.output.NullWriter#flush()",
        "org.apache.commons.io.output.ProxyCollectionWriter#flush()",
        "org.apache.commons.io.output.ClosedWriter#flush()",
        "org.apache.commons.io.output.LockableFileWriter#flush()"
    ],
    "org.apache.commons.io.FileUtils.readLines(File)": ["org.apache.commons.io.FileUtils.readLines(File,String)"],
    "org.apache.commons.io.monitor.FileEntry#setLastModified(long)": ["org.apache.commons.io.monitor.FileEntry#setLastModified(SerializableFileTime)"],
    "org.apache.commons.io.IOUtils.toBufferedInputStream(InputStream,int)": ["org.apache.commons.io.output.ByteArrayOutputStream.toBufferedInputStream(InputStream,int)"],
    "org.apache.commons.io.FilenameUtils.isExtension(String,String)": [
        "org.apache.commons.io.FilenameUtils.indexOfExtension(String)",
        "org.apache.commons.io.FilenameUtils.isEmpty(String)",
        "org.apache.commons.io.FilenameUtils.getExtension(String)",
        "org.apache.commons.io.FilenameUtils.requireNonNullChars(String)",
        "org.apache.commons.io.FilenameUtils.<staticinit>()"
    ],
    "org.apache.commons.io.file.Counters.NoopCounter.<staticinit>()": ["org.apache.commons.io.file.Counters.NoopCounter.<init>()"],
    "org.apache.commons.io.filefilter.AbstractFileFilter#AbstractFileFilter(FileVisitResult,FileVisitResult)": ["org.apache.commons.io.filefilter.AbstractFileFilter.<init>()"],
    "org.apache.commons.io.IOUtils.writeLines(Collection<?>,String,OutputStream,String)": [
        "org.apache.commons.io.IOUtils.writeLines(Collection<?>,String,OutputStream,Charset)",
        "org.apache.commons.io.Charsets.toCharset(String)"
    ],
    "org.apache.commons.io.FilenameUtils.isValidHostName(String)": [
        "org.apache.commons.io.FilenameUtils.isIPv6Address(String)",
        "org.apache.commons.io.FilenameUtils.isRFC3986HostName(String)"
    ],
    "org.apache.commons.io.output.WriterOutputStream#WriterOutputStream(Writer,Charset)": [
        "org.apache.commons.io.output.WriterOutputStream.<staticinit>()",
        "org.apache.commons.io.output.WriterOutputStream#WriterOutputStream(Writer,Charset,int,boolean)"
    ],
    "org.apache.commons.io.FilenameUtils.separatorsToSystem(String)": [
        "org.apache.commons.io.FileSystem.getCurrent()",
        "org.apache.commons.io.FileSystem#normalizeSeparators(String)"
    ],
    "org.apache.commons.io.filefilter.FileFilterUtils.trueFileFilter()": ["org.apache.commons.io.filefilter.TrueFileFilter.<staticinit>()"],
    "org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(File,File,String)": [
        "org.apache.commons.io.Charsets.toCharset(String)",
        "org.apache.commons.io.IOUtils.contentEqualsIgnoreEOL(Reader,Reader)",
        "org.apache.commons.io.FileUtils.checkFileExists(File,String)"
    ],
    "org.apache.commons.io.function.IOIterator#forEachRemaining(IOConsumer<? super E>)": [
        "org.apache.commons.io.function.IOIteratorAdapter#hasNext()",
        "org.apache.commons.io.function.IOIteratorAdapter#next()"
    ],
    "org.apache.commons.io.filefilter.FileFilterUtils.magicNumberFileFilter(String)": ["org.apache.commons.io.filefilter.MagicNumberFileFilter#MagicNumberFileFilter(String)"],
    "org.apache.commons.io.comparator.SizeFileComparator#toString()": ["org.apache.commons.io.comparator.AbstractFileComparator#toString()"],
    "org.apache.commons.io.input.UnsynchronizedBufferedReader#read()": [
        "org.apache.commons.io.IOUtils.<staticinit>()",
        "org.apache.commons.io.input.UnsynchronizedReader#checkOpen()",
        "org.apache.commons.io.input.UnsynchronizedBufferedReader#fillBuf()"
    ],
    "org.apache.commons.io.output.QueueOutputStream#newQueueInputStream()": [
        "org.apache.commons.io.input.QueueInputStream.builder()",
        "org.apache.commons.io.input.QueueInputStream.Builder#get()",
        "org.apache.commons.io.input.QueueInputStream.Builder#setBlockingQueue(BlockingQueue<Integer>)"
    ],
    "org.apache.commons.io.IOUtils.copyLarge(Reader,Writer,long,long)": [
        "org.apache.commons.io.IOUtils.copyLarge(Reader,Writer,long,long,char[])",
        "org.apache.commons.io.IOUtils.getScratchCharArray()",
        "org.apache.commons.io.IOUtils.<staticinit>()"
    ],
    "org.apache.commons.io.input.QueueInputStream#read()": ["org.apache.commons.io.IOUtils.<staticinit>()"],
    "org.apache.commons.io.output.DemuxOutputStream#flush()": [
        "org.apache.commons.io.output.ClosedOutputStream#flush()",
        "org.apache.commons.io.output.WriterOutputStream#flush()",
        "org.apache.commons.io.output.DemuxOutputStream#flush()",
        "org.apache.commons.io.output.ThresholdingOutputStream#flush()",
        "org.apache.commons.io.output.BrokenOutputStream#flush()"
    ],
    "org.apache.commons.io.input.BoundedInputStream#toReadLen(long)": ["org.apache.commons.io.input.BoundedInputStream#getCount()"],
    "org.apache.commons.io.output.FilterCollectionWriter#close()": ["org.apache.commons.io.output.FilterCollectionWriter#forAllWriters(IOConsumer<Writer>)"],
    "org.apache.commons.io.output.FileWriterWithEncoding#FileWriterWithEncoding(File,Charset,boolean)": [
        "org.apache.commons.io.output.FileWriterWithEncoding#FileWriterWithEncoding(OutputStreamWriter)",
        "org.apache.commons.io.output.FileWriterWithEncoding.initWriter(File,Object,boolean)"
    ],
    "org.apache.commons.io.file.PathUtils.readOsFileAttributes(Path,LinkOption[]...)": [
        "org.apache.commons.io.file.PathUtils.readDosFileAttributes(Path,LinkOption[]...)",
        "org.apache.commons.io.file.PathUtils.readPosixFileAttributes(Path,LinkOption[]...)"
    ],
    "org.apache.commons.io.filefilter.SuffixFileFilter#SuffixFileFilter(List<String>,IOCase)": [
        "org.apache.commons.io.filefilter.AbstractFileFilter#AbstractFileFilter()",
        "org.apache.commons.io.filefilter.SuffixFileFilter.<init>()",
        "org.apache.commons.io.IOCase.value(IOCase,IOCase)",
        "org.apache.commons.io.IOCase.<staticinit>()",
        "org.apache.commons.io.filefilter.IOFileFilter.<staticinit>()"
    ],
    "org.apache.commons.io.filefilter.AgeFileFilter#accept(File)": ["org.apache.commons.io.FileUtils.isFileNewer(File,Instant)"],
    "org.apache.commons.io.IOUtils.getScratchCharArray()": [
        "org.apache.commons.io.IOUtils.<staticinit>()",
        "org.apache.commons.io.IOUtils.fill0(char[])"
    ],
    "org.apache.commons.io.FileCleaningTracker.Reaper#Reaper()": ["org.apache.commons.io.FileCleaningTracker.Reaper.<init>()"],
    "org.apache.commons.io.output.UnsynchronizedByteArrayOutputStream#write(int)": ["org.apache.commons.io.output.AbstractByteArrayOutputStream#writeImpl(int)"],
    "org.apache.commons.io.input.ProxyReader#reset()": [
        "org.apache.commons.io.input.BoundedReader#reset()",
        "org.apache.commons.io.input.NullReader#reset()",
        "org.apache.commons.io.input.ProxyReader#handleIOException(IOException)",
        "org.apache.commons.io.input.BrokenReader#reset()",
        "org.apache.commons.io.input.UnsynchronizedBufferedReader#reset()",
        "org.apache.commons.io.input.TaggedReader#handleIOException(IOException)",
        "org.apache.commons.io.input.CharSequenceReader#reset()"
    ],
    "org.apache.commons.io.file.PathUtils.countDirectory(Path)": [
        "org.apache.commons.io.file.PathUtils.visitFileTree(T extends FileVisitor,Path)",
        "org.apache.commons.io.file.CountingPathVisitor.withLongCounters()"
    ],
    "org.apache.commons.io.CopyUtils.copy(String,OutputStream)": ["org.apache.commons.io.CopyUtils.copy(Reader,Writer)"],
    "org.apache.commons.io.CloseableURLConnection#close()": ["org.apache.commons.io.IOUtils.close(URLConnection)"],
    "org.apache.commons.io.filefilter.EmptyFileFilter#accept(File)": ["org.apache.commons.io.IOUtils.length(Object[])"],
    "org.apache.commons.io.file.DeletingPathVisitor#accept(Path)": ["org.apache.commons.io.file.PathUtils.getFileNameString(Path)"],
    "org.apache.commons.io.input.BrokenReader#BrokenReader(Throwable)": ["org.apache.commons.io.input.BrokenReader#BrokenReader(Supplier<Throwable>)"],
    "org.apache.commons.io.input.UncheckedFilterInputStream#available()": ["org.apache.commons.io.function.Uncheck.get(IOSupplier<T>)"],
    "org.apache.commons.io.input.UncheckedBufferedReader#read(char[],int,int)": ["org.apache.commons.io.function.Uncheck.apply(IOTriFunction<T, U, V, R>,T,U,V)"],
    "org.apache.commons.io.IOUtils.write(StringBuffer,OutputStream,String)": [
        "org.apache.commons.io.IOUtils.write(String,OutputStream,Charset)",
        "org.apache.commons.io.Charsets.toCharset(String)"
    ],
    "org.apache.commons.io.filefilter.PrefixFileFilter#accept(File,String)": ["org.apache.commons.io.filefilter.PrefixFileFilter#accept(String)"],
    "org.apache.commons.io.input.TeeInputStream#read(byte[])": [
        "org.apache.commons.io.output.WriterOutputStream#write(byte[],int,int)",
        "org.apache.commons.io.input.ProxyInputStream#read(byte[])",
        "org.apache.commons.io.output.AbstractByteArrayOutputStream#write(byte[],int,int)",
        "org.apache.commons.io.output.NullOutputStream#write(byte[],int,int)",
        "org.apache.commons.io.output.UnsynchronizedByteArrayOutputStream#write(byte[],int,int)",
        "org.apache.commons.io.output.ClosedOutputStream#write(byte[],int,int)",
        "org.apache.commons.io.IOUtils.<staticinit>()",
        "org.apache.commons.io.output.ThresholdingOutputStream#write(byte[],int,int)",
        "org.apache.commons.io.output.ByteArrayOutputStream#write(byte[],int,int)"
    ],
    "org.apache.commons.io.input.XmlStreamReader.Builder#setCharset(String)": [
        "org.apache.commons.io.build.AbstractStreamBuilder#getCharsetDefault()",
        "org.apache.commons.io.Charsets.toCharset(String,Charset)",
        "org.apache.commons.io.build.AbstractStreamBuilder#setCharset(Charset)"
    ],
    "org.apache.commons.io.file.Counters.AbstractPathCounters#toString()": [
        "org.apache.commons.io.file.Counters.BigIntegerCounter#get()",
        "org.apache.commons.io.file.Counters.LongCounter#get()",
        "org.apache.commons.io.file.Counters.NoopCounter#get()"
    ],
    "org.apache.commons.io.build.AbstractStreamBuilder#getReader()": [
        "org.apache.commons.io.build.AbstractOrigin#getReader(Charset)",
        "org.apache.commons.io.build.AbstractOrigin.CharSequenceOrigin#getReader(Charset)",
        "org.apache.commons.io.build.AbstractOriginSupplier#checkOrigin()",
        "org.apache.commons.io.build.AbstractOrigin.ReaderOrigin#getReader(Charset)",
        "org.apache.commons.io.build.AbstractStreamBuilder#getCharset()",
        "org.apache.commons.io.build.AbstractOrigin.InputStreamOrigin#getReader(Charset)",
        "org.apache.commons.io.build.AbstractOrigin.ByteArrayOrigin#getReader(Charset)"
    ],
    "org.apache.commons.io.function.Uncheck.apply(IOFunction<T, R>,T)": ["org.apache.commons.io.function.Uncheck.wrap(IOException)"],
    "org.apache.commons.io.file.PathUtils.waitFor(Path,Duration,LinkOption[]...)": [
        "org.apache.commons.io.file.PathUtils.exists(Path,LinkOption[]...)",
        "org.apache.commons.io.ThreadUtils.sleep(Duration)"
    ],
    "org.apache.commons.io.FileSystem#FileSystem(int,boolean,boolean,int,int,int[],String[],boolean,boolean,char)": [
        "org.apache.commons.io.FileSystem.<init>()",
        "org.apache.commons.io.FilenameUtils.flipSeparator(char)"
    ],
    "org.apache.commons.io.file.attribute.FileTimes.setLastModifiedTime(Path)": ["org.apache.commons.io.file.attribute.FileTimes.now()"],
    "org.apache.commons.io.monitor.FileEntry#setLastModified(FileTime)": [
        "org.apache.commons.io.monitor.FileEntry#setLastModified(SerializableFileTime)",
        "org.apache.commons.io.monitor.SerializableFileTime#SerializableFileTime(FileTime)"
    ],
    "org.apache.commons.io.FileCleaningTracker#addTracker(String,Object,FileDeleteStrategy)": [
        "org.apache.commons.io.FileCleaningTracker.Tracker#Tracker(String,FileDeleteStrategy,Object,ReferenceQueue<? super Object>)",
        "org.apache.commons.io.FileCleaningTracker.Reaper#Reaper()"
    ],
    "org.apache.commons.io.filefilter.NotFileFilter#accept(File,String)": [
        "org.apache.commons.io.filefilter.WildcardFileFilter#accept(File,String)",
        "org.apache.commons.io.filefilter.AndFileFilter#accept(File,String)",
        "org.apache.commons.io.filefilter.AbstractFileFilter#accept(File,String)",
        "org.apache.commons.io.filefilter.TrueFileFilter#accept(File,String)",
        "org.apache.commons.io.filefilter.FalseFileFilter#accept(File,String)",
        "org.apache.commons.io.filefilter.SuffixFileFilter#accept(File,String)",
        "org.apache.commons.io.filefilter.RegexFileFilter#accept(File,String)",
        "org.apache.commons.io.filefilter.DelegateFileFilter#accept(File,String)",
        "org.apache.commons.io.filefilter.NotFileFilter#accept(File,String)",
        "org.apache.commons.io.filefilter.WildcardFilter#accept(File,String)",
        "org.apache.commons.io.filefilter.OrFileFilter#accept(File,String)",
        "org.apache.commons.io.filefilter.NameFileFilter#accept(File,String)",
        "org.apache.commons.io.filefilter.PrefixFileFilter#accept(File,String)",
        "org.apache.commons.io.filefilter.PathVisitorFileFilter#accept(File,String)"
    ],
    "org.apache.commons.io.file.PathUtils.deleteFile(Path)": [
        "org.apache.commons.io.file.PathUtils.<staticinit>()",
        "org.apache.commons.io.file.PathUtils.deleteFile(Path,DeleteOption[]...)"
    ],
    "org.apache.commons.io.IOIndexedException#IOIndexedException(int,Throwable)": [
        "org.apache.commons.io.IOIndexedException.toMessage(int,Throwable)",
        "org.apache.commons.io.IOIndexedException.<init>()"
    ],
    "org.apache.commons.io.input.UncheckedBufferedReader#close()": ["org.apache.commons.io.function.Uncheck.run(IORunnable)"],
    "org.apache.commons.io.output.TeeOutputStream#close()": [
        "org.apache.commons.io.output.AbstractByteArrayOutputStream#close()",
        "org.apache.commons.io.output.DemuxOutputStream#close()",
        "org.apache.commons.io.output.WriterOutputStream#close()",
        "org.apache.commons.io.output.ThresholdingOutputStream#close()",
        "org.apache.commons.io.output.DeferredFileOutputStream#close()",
        "org.apache.commons.io.output.ProxyOutputStream#close()",
        "org.apache.commons.io.output.BrokenOutputStream#close()"
    ],
    "org.apache.commons.io.input.ChecksumInputStream.Builder.<init>()": ["org.apache.commons.io.build.AbstractStreamBuilder.<init>()"],
    "org.apache.commons.io.filefilter.AgeFileFilter#AgeFileFilter(long)": ["org.apache.commons.io.filefilter.AgeFileFilter#AgeFileFilter(Date,boolean)"],
    "org.apache.commons.io.output.CountingOutputStream#resetCount()": ["org.apache.commons.io.output.CountingOutputStream#resetByteCount()"],
    "org.apache.commons.io.file.AccumulatorPathVisitor.withBigIntegerCounters(PathFilter,PathFilter)": [
        "org.apache.commons.io.file.AccumulatorPathVisitor#AccumulatorPathVisitor(PathCounters,PathFilter,PathFilter)",
        "org.apache.commons.io.file.Counters.bigIntegerPathCounters()"
    ],
    "org.apache.commons.io.output.UncheckedFilterOutputStream#UncheckedFilterOutputStream(OutputStream)": ["org.apache.commons.io.output.UncheckedFilterOutputStream.<init>()"],
    "org.apache.commons.io.output.LockableFileWriter#LockableFileWriter(File)": ["org.apache.commons.io.output.LockableFileWriter#LockableFileWriter(File,boolean,String)"],
    "org.apache.commons.io.DirectoryWalker.CancelException#CancelException(String,File,int)": ["org.apache.commons.io.DirectoryWalker.CancelException.<init>()"],
    "org.apache.commons.io.output.AbstractByteArrayOutputStream#toByteArrayImpl()": [
        "org.apache.commons.io.IOUtils.byteArray(int)",
        "org.apache.commons.io.IOUtils.<staticinit>()"
    ],
    "org.apache.commons.io.output.LockableFileWriter#LockableFileWriter(String,boolean)": ["org.apache.commons.io.output.LockableFileWriter#LockableFileWriter(String,boolean,String)"],
    "org.apache.commons.io.filefilter.SymbolicLinkFileFilter#SymbolicLinkFileFilter(FileVisitResult,FileVisitResult)": [
        "org.apache.commons.io.filefilter.AbstractFileFilter#AbstractFileFilter(FileVisitResult,FileVisitResult)",
        "org.apache.commons.io.filefilter.SymbolicLinkFileFilter.<init>()"
    ],
    "org.apache.commons.io.IOUtils.copyLarge(InputStream,OutputStream,long,long,byte[])": [
        "org.apache.commons.io.output.WriterOutputStream#write(byte[],int,int)",
        "org.apache.commons.io.input.CharSequenceInputStream#read(byte[],int,int)",
        "org.apache.commons.io.input.UnsynchronizedByteArrayInputStream#read(byte[],int,int)",
        "org.apache.commons.io.output.NullOutputStream#write(byte[],int,int)",
        "org.apache.commons.io.output.UnsynchronizedByteArrayOutputStream#write(byte[],int,int)",
        "org.apache.commons.io.output.ClosedOutputStream#write(byte[],int,int)",
        "org.apache.commons.io.input.MemoryMappedFileInputStream#read(byte[],int,int)",
        "org.apache.commons.io.IOUtils.<staticinit>()",
        "org.apache.commons.io.input.RandomAccessFileInputStream#read(byte[],int,int)",
        "org.apache.commons.io.IOUtils.skipFully(InputStream,long)",
        "org.apache.commons.io.output.ThresholdingOutputStream#write(byte[],int,int)",
        "org.apache.commons.io.output.ByteArrayOutputStream#write(byte[],int,int)",
        "org.apache.commons.io.input.UnsynchronizedFilterInputStream#read(byte[],int,int)",
        "org.apache.commons.io.output.AbstractByteArrayOutputStream#write(byte[],int,int)",
        "org.apache.commons.io.input.BufferedFileChannelInputStream#read(byte[],int,int)",
        "org.apache.commons.io.input.UnsynchronizedBufferedInputStream#read(byte[],int,int)",
        "org.apache.commons.io.input.ClosedInputStream#read(byte[],int,int)",
        "org.apache.commons.io.input.ReaderInputStream#read(byte[],int,int)",
        "org.apache.commons.io.input.NullInputStream#read(byte[],int,int)"
    ],
    "org.apache.commons.io.EndianUtils.readSwappedDouble(InputStream)": ["org.apache.commons.io.EndianUtils.readSwappedLong(InputStream)"],
    "org.apache.commons.io.file.FilesUncheck.createTempDirectory(String,FileAttribute<?>[]...)": ["org.apache.commons.io.function.Uncheck.apply(IOBiFunction<T, U, R>,T,U)"],
    "org.apache.commons.io.filefilter.NameFileFilter#NameFileFilter(List<String>,IOCase)": [
        "org.apache.commons.io.filefilter.AbstractFileFilter#AbstractFileFilter()",
        "org.apache.commons.io.filefilter.NameFileFilter#toIOCase(IOCase)",
        "org.apache.commons.io.filefilter.IOFileFilter.<staticinit>()",
        "org.apache.commons.io.filefilter.NameFileFilter.<init>()"
    ],
    "org.apache.commons.io.input.BufferedFileChannelInputStream#available()": ["org.apache.commons.io.input.BufferedFileChannelInputStream#refill()"],
    "org.apache.commons.io.input.ObservableInputStream#noteError(IOException)": [
        "org.apache.commons.io.input.ObservableInputStream.Observer#error(IOException)",
        "org.apache.commons.io.input.ObservableInputStream#forEachObserver(IOConsumer<Observer>)"
    ],
    "org.apache.commons.io.FilenameUtils.indexOfExtension(String)": [
        "org.apache.commons.io.FilenameUtils.isSystemWindows()",
        "org.apache.commons.io.FilenameUtils.indexOfLastSeparator(String)",
        "org.apache.commons.io.FilenameUtils.getAdsCriticalOffset(String)",
        "org.apache.commons.io.FilenameUtils.<staticinit>()"
    ],
    "org.apache.commons.io.FileUtils.openInputStream(File)": ["org.apache.commons.io.FileUtils.<staticinit>()"],
    "org.apache.commons.io.input.ReadAheadInputStream#read()": [
        "org.apache.commons.io.input.ReadAheadInputStream#read(byte[],int,int)",
        "org.apache.commons.io.IOUtils.<staticinit>()",
        "org.apache.commons.io.input.ReadAheadInputStream.<staticinit>()"
    ],
    "org.apache.commons.io.ThreadMonitor#ThreadMonitor(Thread,Duration)": ["org.apache.commons.io.ThreadMonitor.<init>()"],
    "org.apache.commons.io.filefilter.NameFileFilter#toIOCase(IOCase)": [
        "org.apache.commons.io.IOCase.<staticinit>()",
        "org.apache.commons.io.IOCase.value(IOCase,IOCase)"
    ],
    "org.apache.commons.io.CopyUtils.copy(Reader,OutputStream)": ["org.apache.commons.io.CopyUtils.copy(Reader,Writer)"],
    "org.apache.commons.io.build.AbstractOrigin#size()": [
        "org.apache.commons.io.build.AbstractOrigin.PathOrigin#getPath()",
        "org.apache.commons.io.build.AbstractOrigin.URIOrigin#getPath()",
        "org.apache.commons.io.build.AbstractOrigin.FileOrigin#getPath()",
        "org.apache.commons.io.build.AbstractOrigin#getPath()"
    ],
    "org.apache.commons.io.file.CleaningPathVisitor.withBigIntegerCounters()": ["org.apache.commons.io.file.Counters.bigIntegerPathCounters()"],
    "org.apache.commons.io.comparator.PathFileComparator#PathFileComparator()": [
        "org.apache.commons.io.comparator.PathFileComparator.<init>()",
        "org.apache.commons.io.IOCase.<staticinit>()",
        "org.apache.commons.io.comparator.AbstractFileComparator.<init>()"
    ],
    "org.apache.commons.io.input.CharacterSetFilterReader.toIntPredicate(Set<Integer>)": ["org.apache.commons.io.input.AbstractCharacterFilterReader.<staticinit>()"],
    "org.apache.commons.io.input.UnixLineEndingInputStream#close()": [
        "org.apache.commons.io.input.AbstractInputStream#close()",
        "org.apache.commons.io.input.CircularInputStream#close()",
        "org.apache.commons.io.input.ReaderInputStream#close()",
        "org.apache.commons.io.input.BufferedFileChannelInputStream#close()",
        "org.apache.commons.io.input.DemuxInputStream#close()",
        "org.apache.commons.io.input.CharSequenceInputStream#close()",
        "org.apache.commons.io.input.WindowsLineEndingInputStream#close()",
        "org.apache.commons.io.input.BrokenInputStream#close()",
        "org.apache.commons.io.input.RandomAccessFileInputStream#close()",
        "org.apache.commons.io.input.UnixLineEndingInputStream#close()",
        "org.apache.commons.io.input.UnsynchronizedFilterInputStream#close()",
        "org.apache.commons.io.input.NullInputStream#close()",
        "org.apache.commons.io.input.MemoryMappedFileInputStream#close()",
        "org.apache.commons.io.input.UnsynchronizedBufferedInputStream#close()"
    ],
    "org.apache.commons.io.comparator.NameFileComparator#NameFileComparator()": [
        "org.apache.commons.io.IOCase.<staticinit>()",
        "org.apache.commons.io.comparator.NameFileComparator.<init>()",
        "org.apache.commons.io.comparator.AbstractFileComparator.<init>()"
    ],
    "org.apache.commons.io.function.IOStream#filter(IOPredicate<? super T>)": [
        "org.apache.commons.io.function.IOStream.adapt(Stream<T>)",
        "org.apache.commons.io.function.Erase.test(IOPredicate<? super T>,T)",
        "org.apache.commons.io.function.IOBaseStreamAdapter#unwrap()"
    ],
    "org.apache.commons.io.output.ThresholdingOutputStream#checkThreshold(int)": [
        "org.apache.commons.io.output.ThresholdingOutputStream#thresholdReached()",
        "org.apache.commons.io.output.DeferredFileOutputStream#thresholdReached()"
    ],
    "org.apache.commons.io.StreamIterator#StreamIterator(Stream<E>)": ["org.apache.commons.io.StreamIterator.<init>()"],
    "org.apache.commons.io.output.XmlStreamWriter#XmlStreamWriter(File,String)": ["org.apache.commons.io.output.XmlStreamWriter#XmlStreamWriter(OutputStream,String)"],
    "org.apache.commons.io.input.MessageDigestInputStream.MessageDigestMaintainingObserver#MessageDigestMaintainingObserver(MessageDigest)": [
        "org.apache.commons.io.input.ObservableInputStream.Observer.<init>()",
        "org.apache.commons.io.input.MessageDigestInputStream.MessageDigestMaintainingObserver.<init>()"
    ],
    "org.apache.commons.io.function.IOSpliterator#getComparator()": [
        "org.apache.commons.io.function.IOSpliteratorAdapter#unwrap()",
        "org.apache.commons.io.function.UncheckedIOSpliterator#getComparator()"
    ],
    "org.apache.commons.io.monitor.FileEntry#getLastModifiedFileTime()": ["org.apache.commons.io.monitor.SerializableFileTime#unwrap()"],
    "org.apache.commons.io.function.IOStream#collect(IOSupplier<R>,IOBiConsumer<R, ? super T>,IOBiConsumer<R, R>)": [
        "org.apache.commons.io.function.Erase.accept(IOBiConsumer<T, U>,T,U)",
        "org.apache.commons.io.function.Erase.get(IOSupplier<T>)",
        "org.apache.commons.io.function.IOBaseStreamAdapter#unwrap()"
    ],
    "org.apache.commons.io.input.ProxyInputStream#skip(long)": [
        "org.apache.commons.io.input.UnsynchronizedFilterInputStream#skip(long)",
        "org.apache.commons.io.input.NullInputStream#skip(long)",
        "org.apache.commons.io.input.UnsynchronizedBufferedInputStream#skip(long)",
        "org.apache.commons.io.input.UnsynchronizedByteArrayInputStream#skip(long)",
        "org.apache.commons.io.input.TaggedInputStream#handleIOException(IOException)",
        "org.apache.commons.io.input.CharSequenceInputStream#skip(long)",
        "org.apache.commons.io.input.BufferedFileChannelInputStream#skip(long)",
        "org.apache.commons.io.input.ProxyInputStream#handleIOException(IOException)",
        "org.apache.commons.io.input.RandomAccessFileInputStream#skip(long)",
        "org.apache.commons.io.input.MemoryMappedFileInputStream#skip(long)",
        "org.apache.commons.io.input.BrokenInputStream#skip(long)"
    ],
    "org.apache.commons.io.build.AbstractOrigin.URIOrigin#getPath()": ["org.apache.commons.io.build.AbstractOrigin#get()"],
    "org.apache.commons.io.file.spi.FileSystemProviders#getFileSystemProvider(URL)": ["org.apache.commons.io.file.spi.FileSystemProviders.getFileSystemProvider(Path)"],
    "org.apache.commons.io.input.UnsynchronizedReader#skip(long)": [
        "org.apache.commons.io.IOUtils.<staticinit>()",
        "org.apache.commons.io.input.UnsynchronizedReader.<staticinit>()"
    ],
    "org.apache.commons.io.file.Counters.NoopPathCounters.<staticinit>()": ["org.apache.commons.io.file.Counters.NoopPathCounters#NoopPathCounters()"],
    "org.apache.commons.io.FilenameUtils.normalize(String,boolean)": [
        "org.apache.commons.io.FilenameUtils.toSeparator(boolean)",
        "org.apache.commons.io.FilenameUtils.doNormalize(String,char,boolean)"
    ],
    "org.apache.commons.io.input.TeeReader#TeeReader(Reader,Writer)": ["org.apache.commons.io.input.TeeReader#TeeReader(Reader,Writer,boolean)"],
    "org.apache.commons.io.output.WriterOutputStream.<staticinit>()": ["org.apache.commons.io.IOUtils.<staticinit>()"],
    "org.apache.commons.io.output.StringBuilderWriter#StringBuilderWriter(int)": ["org.apache.commons.io.output.StringBuilderWriter.<init>()"],
    "org.apache.commons.io.function.Uncheck#Uncheck()": ["org.apache.commons.io.function.Uncheck.<init>()"],
    "org.apache.commons.io.filefilter.AndFileFilter#toString()": [
        "org.apache.commons.io.filefilter.AbstractFileFilter#append(List<?>,StringBuilder)",
        "org.apache.commons.io.filefilter.AbstractFileFilter#toString()"
    ],
    "org.apache.commons.io.output.ByteArrayOutputStream#toInputStream()": ["org.apache.commons.io.output.AbstractByteArrayOutputStream#toInputStream(InputStreamConstructor<T extends InputStream>)"],
    "org.apache.commons.io.HexDump.dump(StringBuilder,long)": ["org.apache.commons.io.HexDump.<staticinit>()"],
    "org.apache.commons.io.function.IOUnaryOperator#asUnaryOperator()": ["org.apache.commons.io.function.Uncheck.apply(IOFunction<T, R>,T)"],
    "org.apache.commons.io.input.Tailer.Builder.<staticinit>()": ["org.apache.commons.io.input.Tailer.<staticinit>()"],
    "org.apache.commons.io.function.IOConsumer.forAll(IOConsumer<T>,Stream<T>)": ["org.apache.commons.io.function.IOStreams.forAll(Stream<T>,IOConsumer<T>,BiFunction<Integer, IOException, IOException>)"],
    "org.apache.commons.io.filefilter.FileFileFilter#FileFileFilter()": [
        "org.apache.commons.io.filefilter.AbstractFileFilter#AbstractFileFilter()",
        "org.apache.commons.io.filefilter.FileFileFilter.<init>()"
    ],
    "org.apache.commons.io.input.BoundedInputStream#afterRead(int)": ["org.apache.commons.io.IOUtils.<staticinit>()"],
    "org.apache.commons.io.filefilter.OrFileFilter#accept(File)": [
        "org.apache.commons.io.filefilter.CanExecuteFileFilter#accept(File)",
        "org.apache.commons.io.filefilter.AbstractFileFilter#accept(File)",
        "org.apache.commons.io.filefilter.CanWriteFileFilter#accept(File)",
        "org.apache.commons.io.filefilter.HiddenFileFilter#accept(File)",
        "org.apache.commons.io.filefilter.PathVisitorFileFilter#accept(File)",
        "org.apache.commons.io.filefilter.FileFileFilter#accept(File)",
        "org.apache.commons.io.filefilter.OrFileFilter#accept(File)",
        "org.apache.commons.io.filefilter.PathEqualsFileFilter#accept(File)",
        "org.apache.commons.io.filefilter.SuffixFileFilter#accept(File)",
        "org.apache.commons.io.filefilter.CanReadFileFilter#accept(File)",
        "org.apache.commons.io.filefilter.TrueFileFilter#accept(File)",
        "org.apache.commons.io.filefilter.PrefixFileFilter#accept(File)",
        "org.apache.commons.io.filefilter.MagicNumberFileFilter#accept(File)",
        "org.apache.commons.io.filefilter.NameFileFilter#accept(File)",
        "org.apache.commons.io.filefilter.WildcardFileFilter#accept(File)",
        "org.apache.commons.io.filefilter.NotFileFilter#accept(File)",
        "org.apache.commons.io.filefilter.PathMatcherFileFilter#accept(File)",
        "org.apache.commons.io.filefilter.FileEqualsFileFilter#accept(File)",
        "org.apache.commons.io.filefilter.WildcardFilter#accept(File)",
        "org.apache.commons.io.filefilter.AgeFileFilter#accept(File)",
        "org.apache.commons.io.filefilter.DelegateFileFilter#accept(File)",
        "org.apache.commons.io.filefilter.SizeFileFilter#accept(File)",
        "org.apache.commons.io.filefilter.FalseFileFilter#accept(File)",
        "org.apache.commons.io.filefilter.AndFileFilter#accept(File)",
        "org.apache.commons.io.filefilter.SymbolicLinkFileFilter#accept(File)",
        "org.apache.commons.io.filefilter.DirectoryFileFilter#accept(File)",
        "org.apache.commons.io.filefilter.EmptyFileFilter#accept(File)"
    ],
    "org.apache.commons.io.FileUtils.deleteDirectoryOnExit(File)": [
        "org.apache.commons.io.FileUtils.isSymlink(File)",
        "org.apache.commons.io.FileUtils.cleanDirectoryOnExit(File)"
    ],
    "org.apache.commons.io.input.ReadAheadInputStream#ReadAheadInputStream(InputStream,int,ExecutorService,boolean)": ["org.apache.commons.io.input.ReadAheadInputStream.<init>()"],
    "org.apache.commons.io.input.WindowsLineEndingInputStream#WindowsLineEndingInputStream(InputStream,boolean)": ["org.apache.commons.io.input.WindowsLineEndingInputStream.<init>()"],
    "org.apache.commons.io.filefilter.OrFileFilter#OrFileFilter(ArrayList<IOFileFilter>)": [
        "org.apache.commons.io.filefilter.AbstractFileFilter#AbstractFileFilter()",
        "org.apache.commons.io.filefilter.OrFileFilter.<init>()"
    ],
    "org.apache.commons.io.CloseableURLConnection#equals(Object)": ["org.apache.commons.io.CloseableURLConnection#equals(Object)"],
    "org.apache.commons.io.IOExceptionList#iterator()": ["org.apache.commons.io.IOExceptionList#getCauseList()"],
    "org.apache.commons.io.file.DeletingPathVisitor#hashCode()": ["org.apache.commons.io.file.CountingPathVisitor#hashCode()"],
    "org.apache.commons.io.file.FilesUncheck.lines(Path,Charset)": ["org.apache.commons.io.function.Uncheck.apply(IOBiFunction<T, U, R>,T,U)"],
    "org.apache.commons.io.IOUtils#IOUtils()": ["org.apache.commons.io.IOUtils.<init>()"],
    "org.apache.commons.io.file.FilesUncheck.newDirectoryStream(Path,DirectoryStream.Filter<? super Path>)": ["org.apache.commons.io.function.Uncheck.apply(IOBiFunction<T, U, R>,T,U)"],
    "org.apache.commons.io.input.UnsynchronizedBufferedInputStream#UnsynchronizedBufferedInputStream(InputStream,int)": [
        "org.apache.commons.io.input.UnsynchronizedBufferedInputStream.<init>()",
        "org.apache.commons.io.input.UnsynchronizedFilterInputStream#UnsynchronizedFilterInputStream(InputStream)"
    ],
    "org.apache.commons.io.filefilter.FileFileFilter.<staticinit>()": ["org.apache.commons.io.filefilter.FileFileFilter#FileFileFilter()"],
    "org.apache.commons.io.output.ProxyWriter#write(int)": [
        "org.apache.commons.io.output.ProxyWriter#afterWrite(int)",
        "org.apache.commons.io.output.ProxyWriter#beforeWrite(int)",
        "org.apache.commons.io.output.TaggedWriter#handleIOException(IOException)",
        "org.apache.commons.io.output.ProxyWriter#handleIOException(IOException)",
        "org.apache.commons.io.output.FilterCollectionWriter#write(int)",
        "org.apache.commons.io.output.LockableFileWriter#write(int)",
        "org.apache.commons.io.output.AppendableWriter#write(int)",
        "org.apache.commons.io.output.ProxyCollectionWriter#write(int)",
        "org.apache.commons.io.output.NullWriter#write(int)"
    ],
    "org.apache.commons.io.input.BoundedInputStream.AbstractBuilder#setCount(long)": ["org.apache.commons.io.build.AbstractSupplier#asThis()"],
    "org.apache.commons.io.function.Constants#Constants()": ["org.apache.commons.io.function.Constants.<init>()"],
    "org.apache.commons.io.output.UncheckedFilterWriter#close()": ["org.apache.commons.io.function.Uncheck.run(IORunnable)"],
    "org.apache.commons.io.file.FilesUncheck.getFileStore(Path)": ["org.apache.commons.io.function.Uncheck.apply(IOFunction<T, R>,T)"],
    "org.apache.commons.io.filefilter.CanReadFileFilter.<staticinit>()": [
        "org.apache.commons.io.filefilter.FalseFileFilter#negate()",
        "org.apache.commons.io.filefilter.CanWriteFileFilter.<staticinit>()",
        "org.apache.commons.io.filefilter.FalseFileFilter#and(IOFileFilter)",
        "org.apache.commons.io.filefilter.CanReadFileFilter#CanReadFileFilter()",
        "org.apache.commons.io.filefilter.TrueFileFilter#negate()",
        "org.apache.commons.io.filefilter.TrueFileFilter#and(IOFileFilter)",
        "org.apache.commons.io.filefilter.IOFileFilter#and(IOFileFilter)",
        "org.apache.commons.io.filefilter.IOFileFilter#negate()"
    ],
    "org.apache.commons.io.file.FilesUncheck.createTempFile(String,String,FileAttribute<?>[]...)": ["org.apache.commons.io.function.Uncheck.apply(IOTriFunction<T, U, V, R>,T,U,V)"],
    "org.apache.commons.io.output.TaggedWriter#handleIOException(IOException)": ["org.apache.commons.io.TaggedIOException#TaggedIOException(IOException,Serializable)"],
    "org.apache.commons.io.filefilter.SuffixFileFilter#toString()": [
        "org.apache.commons.io.filefilter.AbstractFileFilter#toString()",
        "org.apache.commons.io.filefilter.AbstractFileFilter#append(Object[],StringBuilder)"
    ],
    "org.apache.commons.io.FilenameUtils.concat(String,String)": [
        "org.apache.commons.io.FilenameUtils.isSeparator(char)",
        "org.apache.commons.io.FilenameUtils.getPrefixLength(String)",
        "org.apache.commons.io.FilenameUtils.normalize(String)"
    ],
    "org.apache.commons.io.function.IOStream.iterate(T,IOUnaryOperator<T>)$Iterator$1.<init>()": ["org.apache.commons.io.function.IOStreams.<staticinit>()"],
    "org.apache.commons.io.build.AbstractStreamBuilder#getCharSequence()": [
        "org.apache.commons.io.build.AbstractStreamBuilder#getCharset()",
        "org.apache.commons.io.build.AbstractOriginSupplier#checkOrigin()",
        "org.apache.commons.io.build.AbstractOrigin.CharSequenceOrigin#getCharSequence(Charset)",
        "org.apache.commons.io.build.AbstractOrigin.ReaderOrigin#getCharSequence(Charset)",
        "org.apache.commons.io.build.AbstractOrigin#getCharSequence(Charset)"
    ],
    "org.apache.commons.io.input.UncheckedFilterReader#read(char[],int,int)": ["org.apache.commons.io.function.Uncheck.apply(IOTriFunction<T, U, V, R>,T,U,V)"],
    "org.apache.commons.io.input.NullReader#read(char[],int,int)": [
        "org.apache.commons.io.input.NullReader#processChars(char[],int,int)",
        "org.apache.commons.io.input.NullReader#doEndOfFile()"
    ],
    "org.apache.commons.io.FileUtils.writeLines(File,Collection<?>,String)": ["org.apache.commons.io.FileUtils.writeLines(File,String,Collection<?>,String,boolean)"],
    "org.apache.commons.io.FileSystemUtils#FileSystemUtils()": ["org.apache.commons.io.FileSystemUtils.<init>()"],
    "org.apache.commons.io.input.BufferedFileChannelInputStream#BufferedFileChannelInputStream(Path,int)": ["org.apache.commons.io.input.BufferedFileChannelInputStream.<init>()"],
    "org.apache.commons.io.input.ThrottledInputStream.Builder.<init>()": ["org.apache.commons.io.build.AbstractStreamBuilder.<init>()"],
    "org.apache.commons.io.input.buffer.CircularByteBuffer#CircularByteBuffer(int)": [
        "org.apache.commons.io.input.buffer.CircularByteBuffer.<init>()",
        "org.apache.commons.io.IOUtils.byteArray(int)"
    ],
    "org.apache.commons.io.FileUtils.isFileOlder(File,FileTime)": [
        "org.apache.commons.io.file.PathUtils.isOlder(Path,Path)",
        "org.apache.commons.io.FileUtils.<staticinit>()"
    ],
    "org.apache.commons.io.input.BrokenInputStream#read()": ["org.apache.commons.io.input.BrokenInputStream#rethrow()"],
    "org.apache.commons.io.IOUtils.toString(InputStream)": ["org.apache.commons.io.IOUtils.toString(InputStream,String)"],
    "org.apache.commons.io.IOUtils.copyLarge(InputStream,OutputStream,long,long)": [
        "org.apache.commons.io.IOUtils.<staticinit>()",
        "org.apache.commons.io.IOUtils.getScratchByteArray()",
        "org.apache.commons.io.IOUtils.copyLarge(InputStream,OutputStream,long,long,byte[])"
    ],
    "org.apache.commons.io.FileUtils.listFiles(File,FileFilter)": ["org.apache.commons.io.FileUtils.requireDirectoryExists(File,String)"],
    "org.apache.commons.io.output.DeferredFileOutputStream#DeferredFileOutputStream(int,File,String,String,File,int)": [
        "org.apache.commons.io.output.ThresholdingOutputStream#ThresholdingOutputStream(int)",
        "org.apache.commons.io.output.DeferredFileOutputStream.toPath(File,Supplier<Path>)",
        "org.apache.commons.io.output.DeferredFileOutputStream.checkBufferSize(int)",
        "org.apache.commons.io.output.ByteArrayOutputStream#ByteArrayOutputStream(int)",
        "org.apache.commons.io.output.DeferredFileOutputStream.<init>()"
    ],
    "org.apache.commons.io.function.IOBaseStream#unordered()": ["org.apache.commons.io.function.IOBaseStreamAdapter#unwrap()"],
    "org.apache.commons.io.input.BufferedFileChannelInputStream.builder()": ["org.apache.commons.io.input.BufferedFileChannelInputStream.Builder.<init>()"],
    "org.apache.commons.io.output.AbstractByteArrayOutputStream#toString(String)": [
        "org.apache.commons.io.output.UnsynchronizedByteArrayOutputStream#toByteArray()",
        "org.apache.commons.io.output.ByteArrayOutputStream#toByteArray()"
    ],
    "org.apache.commons.io.filefilter.WildcardFileFilter#WildcardFileFilter(IOCase,String[]...)": [
        "org.apache.commons.io.filefilter.AbstractFileFilter#AbstractFileFilter()",
        "org.apache.commons.io.IOCase.value(IOCase,IOCase)",
        "org.apache.commons.io.IOCase.<staticinit>()",
        "org.apache.commons.io.filefilter.WildcardFileFilter.requireWildcards(T)",
        "org.apache.commons.io.filefilter.WildcardFileFilter.<init>()"
    ],
    "org.apache.commons.io.CopyUtils.copy(InputStream,OutputStream)": [
        "org.apache.commons.io.output.WriterOutputStream#write(byte[],int,int)",
        "org.apache.commons.io.input.UnsynchronizedFilterInputStream#read(byte[])",
        "org.apache.commons.io.output.NullOutputStream#write(byte[],int,int)",
        "org.apache.commons.io.output.UnsynchronizedByteArrayOutputStream#write(byte[],int,int)",
        "org.apache.commons.io.output.ClosedOutputStream#write(byte[],int,int)",
        "org.apache.commons.io.input.NullInputStream#read(byte[])",
        "org.apache.commons.io.output.ThresholdingOutputStream#write(byte[],int,int)",
        "org.apache.commons.io.IOUtils.<staticinit>()",
        "org.apache.commons.io.output.ByteArrayOutputStream#write(byte[],int,int)",
        "org.apache.commons.io.input.CharSequenceInputStream#read(byte[])",
        "org.apache.commons.io.input.RandomAccessFileInputStream#read(byte[])",
        "org.apache.commons.io.output.AbstractByteArrayOutputStream#write(byte[],int,int)",
        "org.apache.commons.io.input.ReaderInputStream#read(byte[])",
        "org.apache.commons.io.IOUtils.byteArray()",
        "org.apache.commons.io.input.UnsynchronizedByteArrayInputStream#read(byte[])"
    ],
    "org.apache.commons.io.output.DeferredFileOutputStream.Builder#setDirectory(File)": ["org.apache.commons.io.output.DeferredFileOutputStream.toPath(File,Supplier<Path>)"],
    "org.apache.commons.io.IOUtils.readFully(InputStream,byte[],int,int)": ["org.apache.commons.io.IOUtils.read(InputStream,byte[],int,int)"],
    "org.apache.commons.io.FileSystemUtils.freeSpaceKb(String)": ["org.apache.commons.io.FileSystemUtils.freeSpaceKb(String,long)"],
    "org.apache.commons.io.input.TeeInputStream#TeeInputStream(InputStream,OutputStream,boolean)": [
        "org.apache.commons.io.input.ProxyInputStream#ProxyInputStream(InputStream)",
        "org.apache.commons.io.input.TeeInputStream.<init>()"
    ],
    "org.apache.commons.io.build.AbstractOrigin#getCharSequence(Charset)": [
        "org.apache.commons.io.build.AbstractOrigin.CharSequenceOrigin#getByteArray()",
        "org.apache.commons.io.build.AbstractOrigin.ReaderOrigin#getByteArray()",
        "org.apache.commons.io.build.AbstractOrigin.InputStreamOrigin#getByteArray()",
        "org.apache.commons.io.build.AbstractOrigin.ByteArrayOrigin#getByteArray()",
        "org.apache.commons.io.build.AbstractOrigin#getByteArray()"
    ],
    "org.apache.commons.io.FileExistsException#FileExistsException(File)": ["org.apache.commons.io.FileExistsException.<init>()"],
    "org.apache.commons.io.input.UnsynchronizedByteArrayInputStream#UnsynchronizedByteArrayInputStream(byte[],int,int)": [
        "org.apache.commons.io.input.UnsynchronizedByteArrayInputStream.minPosLen(byte[],int)",
        "org.apache.commons.io.input.UnsynchronizedByteArrayInputStream.<init>()",
        "org.apache.commons.io.input.UnsynchronizedByteArrayInputStream.requireNonNegative(int,String)"
    ],
    "org.apache.commons.io.IOUtils.toInputStream(CharSequence,Charset)": ["org.apache.commons.io.IOUtils.toInputStream(String,Charset)"],
    "org.apache.commons.io.input.TaggedInputStream#throwIfCauseOf(Throwable)": ["org.apache.commons.io.TaggedIOException.throwCauseIfTaggedWith(Throwable,Object)"],
    "org.apache.commons.io.input.UnsynchronizedBufferedReader#readLine()": [
        "org.apache.commons.io.input.UnsynchronizedBufferedReader#fillBuf()",
        "org.apache.commons.io.input.UnsynchronizedBufferedReader.<staticinit>()",
        "org.apache.commons.io.IOUtils.<staticinit>()",
        "org.apache.commons.io.input.UnsynchronizedReader#checkOpen()"
    ],
    "org.apache.commons.io.file.FilesUncheck.copy(InputStream,Path,CopyOption[]...)": ["org.apache.commons.io.function.Uncheck.apply(IOTriFunction<T, U, V, R>,T,U,V)"],
    "org.apache.commons.io.file.AccumulatorPathVisitor#updateFileCounters(Path,BasicFileAttributes)": [
        "org.apache.commons.io.file.CountingPathVisitor#updateFileCounters(Path,BasicFileAttributes)",
        "org.apache.commons.io.file.AccumulatorPathVisitor#add(List<Path>,Path)"
    ],
    "org.apache.commons.io.IOUtils.read(InputStream,byte[])": ["org.apache.commons.io.IOUtils.read(InputStream,byte[],int,int)"],
    "org.apache.commons.io.build.AbstractOriginSupplier#setURI(URI)": [
        "org.apache.commons.io.input.Tailer.Builder#setOrigin(AbstractOrigin<?, ?>)",
        "org.apache.commons.io.build.AbstractOriginSupplier.newURIOrigin(URI)",
        "org.apache.commons.io.build.AbstractOriginSupplier#setOrigin(AbstractOrigin<?, ?>)"
    ],
    "org.apache.commons.io.EndianUtils.writeSwappedLong(byte[],int,long)": ["org.apache.commons.io.EndianUtils.validateByteArrayOffset(byte[],int,int)"],
    "org.apache.commons.io.file.PathUtils.compareLastModifiedTimeTo(Path,FileTime,LinkOption[]...)": ["org.apache.commons.io.file.PathUtils.getLastModifiedTime(Path,LinkOption[]...)"],
    "org.apache.commons.io.TaggedIOException#TaggedIOException(IOException,Serializable)": [
        "org.apache.commons.io.TaggedIOException.<init>()",
        "org.apache.commons.io.IOExceptionWithCause#IOExceptionWithCause(String,Throwable)"
    ],
    "org.apache.commons.io.input.UnsynchronizedFilterInputStream.Builder#get()": [
        "org.apache.commons.io.input.UnsynchronizedFilterInputStream#UnsynchronizedFilterInputStream(InputStream)",
        "org.apache.commons.io.build.AbstractStreamBuilder#getInputStream()"
    ],
    "org.apache.commons.io.input.XmlStreamReader#XmlStreamReader(URLConnection,String)": [
        "org.apache.commons.io.input.XmlStreamReader#processHttpStream(BOMInputStream,BOMInputStream,boolean,String)",
        "org.apache.commons.io.input.BOMInputStream.builder()",
        "org.apache.commons.io.CloseableURLConnection#getContentType()",
        "org.apache.commons.io.CloseableURLConnection#getInputStream()",
        "org.apache.commons.io.input.XmlStreamReader.<staticinit>()",
        "org.apache.commons.io.input.XmlStreamReader.<init>()",
        "org.apache.commons.io.input.XmlStreamReader#processHttpStream(BOMInputStream,BOMInputStream,boolean)",
        "org.apache.commons.io.IOUtils.<staticinit>()",
        "org.apache.commons.io.build.AbstractOriginSupplier#setInputStream(InputStream)"
    ],
    "org.apache.commons.io.input.ReaderInputStream#read()": [
        "org.apache.commons.io.IOUtils.<staticinit>()",
        "org.apache.commons.io.input.ReaderInputStream#fillBuffer()",
        "org.apache.commons.io.input.AbstractInputStream#checkOpen()"
    ],
    "org.apache.commons.io.input.XmlStreamReader.Builder.<init>()": ["org.apache.commons.io.build.AbstractStreamBuilder.<init>()"],
    "org.apache.commons.io.input.UnixLineEndingInputStream#read()": [
        "org.apache.commons.io.input.UnixLineEndingInputStream#readWithUpdate()",
        "org.apache.commons.io.IOUtils.<staticinit>()",
        "org.apache.commons.io.input.UnixLineEndingInputStream#handleEos(boolean)",
        "org.apache.commons.io.input.UnixLineEndingInputStream#read()"
    ],
    "org.apache.commons.io.filefilter.NameFileFilter#NameFileFilter(String[]...)": [
        "org.apache.commons.io.IOCase.<staticinit>()",
        "org.apache.commons.io.filefilter.NameFileFilter#NameFileFilter(String[],IOCase)"
    ],
    "org.apache.commons.io.input.BOMInputStream#BOMInputStream(InputStream)": [
        "org.apache.commons.io.input.BOMInputStream#BOMInputStream(InputStream,boolean,ByteOrderMark[]...)",
        "org.apache.commons.io.ByteOrderMark.<staticinit>()",
        "org.apache.commons.io.input.BOMInputStream.Builder.<staticinit>()"
    ],
    "org.apache.commons.io.file.spi.FileSystemProviders#getFileSystemProvider(URI)": ["org.apache.commons.io.file.spi.FileSystemProviders.getFileSystemProvider(Path)"],
    "org.apache.commons.io.file.AccumulatorPathVisitor#AccumulatorPathVisitor(PathCounters,PathFilter,PathFilter)": [
        "org.apache.commons.io.file.CountingPathVisitor#CountingPathVisitor(PathCounters,PathFilter,PathFilter)",
        "org.apache.commons.io.file.AccumulatorPathVisitor.<init>()"
    ],
    "org.apache.commons.io.comparator.CompositeFileComparator#toString()": ["org.apache.commons.io.comparator.AbstractFileComparator#toString()"],
    "org.apache.commons.io.ThreadUtils#ThreadUtils()": ["org.apache.commons.io.ThreadUtils.<init>()"],
    "org.apache.commons.io.input.TaggedInputStream#handleIOException(IOException)": ["org.apache.commons.io.TaggedIOException#TaggedIOException(IOException,Serializable)"],
    "org.apache.commons.io.IOUtils.write(String,OutputStream)": ["org.apache.commons.io.IOUtils.write(String,OutputStream,Charset)"],
    "org.apache.commons.io.output.AbstractByteArrayOutputStream#resetImpl()": ["org.apache.commons.io.output.AbstractByteArrayOutputStream#needNewBuffer(int)"],
    "org.apache.commons.io.monitor.FileEntry#refresh(File)": [
        "org.apache.commons.io.FileUtils.lastModifiedFileTime(File)",
        "org.apache.commons.io.monitor.FileEntry#setLastModified(FileTime)",
        "org.apache.commons.io.monitor.SerializableFileTime#equals(Object)",
        "org.apache.commons.io.monitor.FileEntry#setLastModified(SerializableFileTime)",
        "org.apache.commons.io.file.attribute.FileTimes.<staticinit>()",
        "org.apache.commons.io.monitor.SerializableFileTime.<staticinit>()"
    ],
    "org.apache.commons.io.CloseableURLConnection#setReadTimeout(int)": ["org.apache.commons.io.CloseableURLConnection#setReadTimeout(int)"],
    "org.apache.commons.io.input.UnsynchronizedBufferedReader#close()": [
        "org.apache.commons.io.input.NullReader#close()",
        "org.apache.commons.io.input.UnsynchronizedBufferedReader#close()",
        "org.apache.commons.io.input.UnsynchronizedReader#isClosed()",
        "org.apache.commons.io.input.BrokenReader#close()",
        "org.apache.commons.io.input.UnsynchronizedReader#close()",
        "org.apache.commons.io.input.CharSequenceReader#close()",
        "org.apache.commons.io.input.SequenceReader#close()",
        "org.apache.commons.io.input.BoundedReader#close()",
        "org.apache.commons.io.input.XmlStreamReader#close()",
        "org.apache.commons.io.input.ClosedReader#close()"
    ],
    "org.apache.commons.io.file.AccumulatorPathVisitor#equals(Object)": ["org.apache.commons.io.file.CountingPathVisitor#equals(Object)"],
    "org.apache.commons.io.build.AbstractOrigin.ReaderOrigin#getInputStream(OpenOption[]...)": [
        "org.apache.commons.io.input.ReaderInputStream.builder()",
        "org.apache.commons.io.build.AbstractOriginSupplier#setReader(Reader)"
    ],
    "org.apache.commons.io.FilenameUtils.indexOfLastSeparator(String)": ["org.apache.commons.io.FilenameUtils.<staticinit>()"],
    "org.apache.commons.io.input.BOMInputStream.Builder.<init>()": [
        "org.apache.commons.io.build.AbstractStreamBuilder.<init>()",
        "org.apache.commons.io.input.BOMInputStream.Builder.<staticinit>()"
    ],
    "org.apache.commons.io.input.DemuxInputStream#close()": ["org.apache.commons.io.IOUtils.close(Closeable)"],
    "org.apache.commons.io.filefilter.FileFilterUtils.and(IOFileFilter[]...)": [
        "org.apache.commons.io.filefilter.AndFileFilter#AndFileFilter(List<IOFileFilter>)",
        "org.apache.commons.io.filefilter.FileFilterUtils.toList(IOFileFilter[]...)"
    ],
    "org.apache.commons.io.input.SequenceReader#read()": [
        "org.apache.commons.io.input.NullReader#read()",
        "org.apache.commons.io.input.UnsynchronizedBufferedReader#read()",
        "org.apache.commons.io.input.BoundedReader#read()",
        "org.apache.commons.io.input.SequenceReader#read()",
        "org.apache.commons.io.IOUtils.<staticinit>()",
        "org.apache.commons.io.input.SequenceReader#nextReader()",
        "org.apache.commons.io.input.CharSequenceReader#read()"
    ],
    "org.apache.commons.io.input.ChecksumInputStream#ChecksumInputStream(InputStream,Checksum,long,long)": [
        "org.apache.commons.io.input.CountingInputStream#CountingInputStream(InputStream)",
        "org.apache.commons.io.input.ChecksumInputStream.<init>()"
    ],
    "org.apache.commons.io.filefilter.PrefixFileFilter#PrefixFileFilter(List<String>)": [
        "org.apache.commons.io.IOCase.<staticinit>()",
        "org.apache.commons.io.filefilter.PrefixFileFilter#PrefixFileFilter(List<String>,IOCase)"
    ],
    "org.apache.commons.io.comparator.DirectoryFileComparator#getType(File)": ["org.apache.commons.io.comparator.DirectoryFileComparator.<staticinit>()"],
    "org.apache.commons.io.input.UnsynchronizedBufferedReader#mark(int)": ["org.apache.commons.io.input.UnsynchronizedReader#checkOpen()"],
    "org.apache.commons.io.function.IOStream#forAll(IOConsumer<T>)": ["org.apache.commons.io.function.IOStream#forAll(IOConsumer<T>,BiFunction<Integer, IOException, IOException>)"],
    "org.apache.commons.io.file.CopyDirectoryVisitor#visitFile(Path,BasicFileAttributes)": [
        "org.apache.commons.io.file.CopyDirectoryVisitor#copy(Path,Path)",
        "org.apache.commons.io.file.CountingPathVisitor#visitFile(Path,BasicFileAttributes)",
        "org.apache.commons.io.file.CopyDirectoryVisitor#resolveRelativeAsString(Path)"
    ],
    "org.apache.commons.io.function.IOBaseStream#iterator()": [
        "org.apache.commons.io.function.IOIteratorAdapter.adapt(Iterator<E>)",
        "org.apache.commons.io.function.IOBaseStreamAdapter#unwrap()"
    ],
    "org.apache.commons.io.StreamIterator#next()": [
        "org.apache.commons.io.StreamIterator#next()",
        "org.apache.commons.io.StreamIterator#close()",
        "org.apache.commons.io.function.IOStream.iterate(T,IOUnaryOperator<T>)$Iterator$1#next()",
        "org.apache.commons.io.function.UncheckedIOIterator#next()"
    ],
    "org.apache.commons.io.IOUtils.read(InputStream,byte[],int,int)": ["org.apache.commons.io.IOUtils.read(InputStream,byte[],int,int)"],
    "org.apache.commons.io.output.ChunkedOutputStream.Builder.<init>()": ["org.apache.commons.io.build.AbstractStreamBuilder.<init>()"],
    "org.apache.commons.io.output.FileWriterWithEncoding#FileWriterWithEncoding(String,CharsetEncoder)": ["org.apache.commons.io.output.FileWriterWithEncoding#FileWriterWithEncoding(File,CharsetEncoder,boolean)"],
    "org.apache.commons.io.IOUtils.write(CharSequence,Writer)": ["org.apache.commons.io.IOUtils.write(CharSequence,Writer)"],
    "org.apache.commons.io.output.WriterOutputStream#WriterOutputStream(Writer,String,int,boolean)": [
        "org.apache.commons.io.Charsets.toCharset(String)",
        "org.apache.commons.io.output.WriterOutputStream#WriterOutputStream(Writer,Charset,int,boolean)"
    ],
    "org.apache.commons.io.file.FilesUncheck.delete(Path)": ["org.apache.commons.io.function.Uncheck.accept(IOConsumer<T>,T)"],
    "org.apache.commons.io.monitor.FileAlterationObserver#checkAndNotify()": [
        "org.apache.commons.io.monitor.FileAlterationListenerAdaptor#onStop(FileAlterationObserver)",
        "org.apache.commons.io.monitor.FileEntry#getChildren()",
        "org.apache.commons.io.monitor.FileEntry#isExists()",
        "org.apache.commons.io.monitor.FileAlterationListenerAdaptor#onStart(FileAlterationObserver)",
        "org.apache.commons.io.monitor.FileEntry#getFile()",
        "org.apache.commons.io.monitor.FileAlterationObserver#checkAndFire(FileEntry,FileEntry[],File[])",
        "org.apache.commons.io.monitor.FileAlterationObserver#listFiles(File)",
        "org.apache.commons.io.FileUtils.<staticinit>()"
    ],
    "org.apache.commons.io.input.UnsynchronizedByteArrayInputStream#UnsynchronizedByteArrayInputStream(byte[],int,int,int)": ["org.apache.commons.io.input.UnsynchronizedByteArrayInputStream.<init>()"],
    "org.apache.commons.io.filefilter.WildcardFileFilter.Builder#setWildcards(List<String>)": [
        "org.apache.commons.io.filefilter.IOFileFilter.<staticinit>()",
        "org.apache.commons.io.filefilter.WildcardFileFilter.Builder#setWildcards(List<String>)",
        "org.apache.commons.io.filefilter.WildcardFileFilter.requireWildcards(T)"
    ],
    "org.apache.commons.io.ThreadMonitor#run()": ["org.apache.commons.io.ThreadUtils.sleep(Duration)"],
    "org.apache.commons.io.filefilter.PathEqualsFileFilter#PathEqualsFileFilter(Path)": [
        "org.apache.commons.io.filefilter.AbstractFileFilter#AbstractFileFilter()",
        "org.apache.commons.io.filefilter.PathEqualsFileFilter.<init>()"
    ],
    "org.apache.commons.io.FileUtils.forceDelete(File)": [
        "org.apache.commons.io.file.Counters.AbstractPathCounters#getDirectoryCounter()",
        "org.apache.commons.io.file.StandardDeleteOption.<staticinit>()",
        "org.apache.commons.io.file.Counters.LongCounter#get()",
        "org.apache.commons.io.file.PathUtils.<staticinit>()",
        "org.apache.commons.io.file.Counters.NoopCounter#get()",
        "org.apache.commons.io.file.Counters.AbstractPathCounters#getFileCounter()",
        "org.apache.commons.io.file.Counters.BigIntegerCounter#get()",
        "org.apache.commons.io.FileUtils.<staticinit>()"
    ],
    "org.apache.commons.io.FileUtils.copyFile(File,OutputStream)": ["org.apache.commons.io.IOUtils.copyLarge(InputStream,OutputStream)"],
    "org.apache.commons.io.CloseableURLConnection#setConnectTimeout(int)": ["org.apache.commons.io.CloseableURLConnection#setConnectTimeout(int)"],
    "org.apache.commons.io.FileUtils.getTempDirectory()": ["org.apache.commons.io.FileUtils.getTempDirectoryPath()"],
    "org.apache.commons.io.input.ClosedReader.<staticinit>()": ["org.apache.commons.io.input.ClosedReader.<init>()"],
    "org.apache.commons.io.build.AbstractStreamBuilder.<init>()": [
        "org.apache.commons.io.build.AbstractOriginSupplier.<init>()",
        "org.apache.commons.io.build.AbstractStreamBuilder.<staticinit>()",
        "org.apache.commons.io.build.AbstractStreamBuilder#throwIae(int,int)",
        "org.apache.commons.io.IOUtils.<staticinit>()"
    ],
    "org.apache.commons.io.output.FileWriterWithEncoding.builder()": ["org.apache.commons.io.output.FileWriterWithEncoding.Builder.<init>()"],
    "org.apache.commons.io.output.NullOutputStream.<staticinit>()": ["org.apache.commons.io.output.NullOutputStream#NullOutputStream()"],
    "org.apache.commons.io.file.CleaningPathVisitor.withLongCounters()": ["org.apache.commons.io.file.Counters.longPathCounters()"],
    "org.apache.commons.io.input.CountingInputStream#getCount()": ["org.apache.commons.io.input.CountingInputStream#getByteCount()"],
    "org.apache.commons.io.filefilter.AgeFileFilter#AgeFileFilter(File,boolean)": [
        "org.apache.commons.io.filefilter.AgeFileFilter#AgeFileFilter(long,boolean)",
        "org.apache.commons.io.FileUtils.lastModifiedUnchecked(File)"
    ],
    "org.apache.commons.io.input.CharSequenceInputStream#CharSequenceInputStream(CharSequence,int,CharsetEncoder)": [
        "org.apache.commons.io.input.ReaderInputStream.checkMinBufferSize(CharsetEncoder,int)",
        "org.apache.commons.io.input.CharSequenceInputStream.<staticinit>()",
        "org.apache.commons.io.input.CharSequenceInputStream.<init>()",
        "org.apache.commons.io.input.CharSequenceInputStream#fillBuffer()"
    ],
    "org.apache.commons.io.input.SwappedDataInputStream#readLine()": ["org.apache.commons.io.input.UnsupportedOperationExceptions.method(String)"],
    "org.apache.commons.io.output.UnsynchronizedByteArrayOutputStream#reset()": ["org.apache.commons.io.output.AbstractByteArrayOutputStream#resetImpl()"],
    "org.apache.commons.io.input.BOMInputStream#hasBOM(ByteOrderMark)": ["org.apache.commons.io.input.BOMInputStream#getBOM()"],
    "org.apache.commons.io.file.Counters.LongPathCounters#LongPathCounters()": [
        "org.apache.commons.io.file.Counters.LongPathCounters.<init>()",
        "org.apache.commons.io.file.Counters.AbstractPathCounters#AbstractPathCounters(Counter,Counter,Counter)",
        "org.apache.commons.io.file.Counters.longCounter()"
    ],
    "org.apache.commons.io.EndianUtils.readSwappedFloat(byte[],int)": ["org.apache.commons.io.EndianUtils.readSwappedInteger(byte[],int)"],
    "org.apache.commons.io.input.AutoCloseInputStream#close()": [
        "org.apache.commons.io.input.ProxyInputStream#close()",
        "org.apache.commons.io.input.ClosedInputStream.<staticinit>()"
    ],
    "org.apache.commons.io.input.UnsynchronizedFilterInputStream#available()": [
        "org.apache.commons.io.input.RandomAccessFileInputStream#available()",
        "org.apache.commons.io.input.BrokenInputStream#available()",
        "org.apache.commons.io.input.UnsynchronizedBufferedInputStream#available()",
        "org.apache.commons.io.input.BufferedFileChannelInputStream#available()",
        "org.apache.commons.io.input.MemoryMappedFileInputStream#available()",
        "org.apache.commons.io.input.CircularInputStream#available()",
        "org.apache.commons.io.input.NullInputStream#available()",
        "org.apache.commons.io.input.ReaderInputStream#available()",
        "org.apache.commons.io.input.CharSequenceInputStream#available()",
        "org.apache.commons.io.input.UnsynchronizedFilterInputStream#available()",
        "org.apache.commons.io.input.UnsynchronizedByteArrayInputStream#available()"
    ],
    "org.apache.commons.io.output.CloseShieldWriter#close()": ["org.apache.commons.io.output.ClosedWriter.<staticinit>()"],
    "org.apache.commons.io.output.UncheckedFilterOutputStream#write(byte[])": ["org.apache.commons.io.function.Uncheck.accept(IOConsumer<T>,T)"],
    "org.apache.commons.io.input.XmlStreamReader.Builder#get()": [
        "org.apache.commons.io.input.XmlStreamReader#XmlStreamReader(InputStream,String,boolean,String)",
        "org.apache.commons.io.input.XmlStreamReader#XmlStreamReader(InputStream,boolean,String)",
        "org.apache.commons.io.build.AbstractStreamBuilder#getCharset()",
        "org.apache.commons.io.build.AbstractStreamBuilder#getInputStream()"
    ],
    "org.apache.commons.io.FileUtils.writeStringToFile(File,String,boolean)": ["org.apache.commons.io.FileUtils.writeStringToFile(File,String,Charset,boolean)"],
    "org.apache.commons.io.CloseableURLConnection#getConnectTimeout()": ["org.apache.commons.io.CloseableURLConnection#getConnectTimeout()"],
    "org.apache.commons.io.CloseableURLConnection#getContentLength()": ["org.apache.commons.io.CloseableURLConnection#getContentLength()"],
    "org.apache.commons.io.build.AbstractOrigin.ReaderOrigin#getCharSequence(Charset)": ["org.apache.commons.io.IOUtils.toString(Reader)"],
    "org.apache.commons.io.output.WriterOutputStream#close()": [
        "org.apache.commons.io.output.WriterOutputStream#flushOutput()",
        "org.apache.commons.io.output.ProxyCollectionWriter#close()",
        "org.apache.commons.io.output.ClosedWriter#close()",
        "org.apache.commons.io.output.WriterOutputStream#processInput(boolean)",
        "org.apache.commons.io.output.XmlStreamWriter#close()",
        "org.apache.commons.io.output.BrokenWriter#close()",
        "org.apache.commons.io.output.LockableFileWriter#close()",
        "org.apache.commons.io.output.NullWriter#close()",
        "org.apache.commons.io.output.AppendableWriter#close()",
        "org.apache.commons.io.output.StringBuilderWriter#close()",
        "org.apache.commons.io.output.FilterCollectionWriter#close()"
    ],
    "org.apache.commons.io.FilenameUtils.equalsNormalized(String,String)": [
        "org.apache.commons.io.IOCase.<staticinit>()",
        "org.apache.commons.io.FilenameUtils.equals(String,String,boolean,IOCase)"
    ],
    "org.apache.commons.io.output.CloseShieldOutputStream.wrap(OutputStream)": ["org.apache.commons.io.output.CloseShieldOutputStream#CloseShieldOutputStream(OutputStream)"],
    "org.apache.commons.io.input.BufferedFileChannelInputStream#BufferedFileChannelInputStream(File)": [
        "org.apache.commons.io.IOUtils.<staticinit>()",
        "org.apache.commons.io.input.BufferedFileChannelInputStream#BufferedFileChannelInputStream(File,int)"
    ],
    "org.apache.commons.io.input.CharSequenceInputStream.Builder#setCharsetEncoder(CharsetEncoder)": [
        "org.apache.commons.io.input.CharSequenceInputStream.newEncoder(Charset)",
        "org.apache.commons.io.build.AbstractStreamBuilder#getCharsetDefault()",
        "org.apache.commons.io.build.AbstractStreamBuilder#setCharset(Charset)",
        "org.apache.commons.io.charset.CharsetEncoders.toCharsetEncoder(CharsetEncoder,Supplier<CharsetEncoder>)"
    ],
    "org.apache.commons.io.file.Counters.longCounter()": ["org.apache.commons.io.file.Counters.LongCounter.<init>()"],
    "org.apache.commons.io.input.TeeReader#close()": [
        "org.apache.commons.io.output.ProxyCollectionWriter#close()",
        "org.apache.commons.io.output.ClosedWriter#close()",
        "org.apache.commons.io.output.XmlStreamWriter#close()",
        "org.apache.commons.io.output.BrokenWriter#close()",
        "org.apache.commons.io.output.LockableFileWriter#close()",
        "org.apache.commons.io.output.NullWriter#close()",
        "org.apache.commons.io.output.AppendableWriter#close()",
        "org.apache.commons.io.input.ProxyReader#close()",
        "org.apache.commons.io.output.StringBuilderWriter#close()",
        "org.apache.commons.io.output.FilterCollectionWriter#close()"
    ],
    "org.apache.commons.io.FileUtils.writeLines(File,Collection<?>,boolean)": ["org.apache.commons.io.FileUtils.writeLines(File,String,Collection<?>,String,boolean)"],
    "org.apache.commons.io.function.IOComparator#asComparator()": ["org.apache.commons.io.function.Uncheck.compare(IOComparator<T>,T,T)"],
    "org.apache.commons.io.filefilter.NotFileFilter#accept(Path,BasicFileAttributes)": [
        "org.apache.commons.io.filefilter.SizeFileFilter#accept(Path,BasicFileAttributes)",
        "org.apache.commons.io.filefilter.WildcardFileFilter#accept(Path,BasicFileAttributes)",
        "org.apache.commons.io.filefilter.FalseFileFilter#accept(Path,BasicFileAttributes)",
        "org.apache.commons.io.filefilter.FileEqualsFileFilter#accept(Path,BasicFileAttributes)",
        "org.apache.commons.io.filefilter.PathVisitorFileFilter#accept(Path,BasicFileAttributes)",
        "org.apache.commons.io.filefilter.SymbolicLinkFileFilter#accept(Path,BasicFileAttributes)",
        "org.apache.commons.io.filefilter.PrefixFileFilter#accept(Path,BasicFileAttributes)",
        "org.apache.commons.io.filefilter.CanExecuteFileFilter#accept(Path,BasicFileAttributes)",
        "org.apache.commons.io.filefilter.MagicNumberFileFilter#accept(Path,BasicFileAttributes)",
        "org.apache.commons.io.filefilter.WildcardFilter#accept(Path,BasicFileAttributes)",
        "org.apache.commons.io.filefilter.NotFileFilter#accept(Path,BasicFileAttributes)",
        "org.apache.commons.io.filefilter.IOFileFilter#accept(Path,BasicFileAttributes)",
        "org.apache.commons.io.filefilter.AndFileFilter#accept(Path,BasicFileAttributes)",
        "org.apache.commons.io.filefilter.DirectoryFileFilter#accept(Path,BasicFileAttributes)",
        "org.apache.commons.io.filefilter.CanWriteFileFilter#accept(Path,BasicFileAttributes)",
        "org.apache.commons.io.filefilter.AgeFileFilter#accept(Path,BasicFileAttributes)",
        "org.apache.commons.io.filefilter.NotFileFilter#not(FileVisitResult)",
        "org.apache.commons.io.filefilter.HiddenFileFilter#accept(Path,BasicFileAttributes)",
        "org.apache.commons.io.filefilter.TrueFileFilter#accept(Path,BasicFileAttributes)",
        "org.apache.commons.io.filefilter.EmptyFileFilter#accept(Path,BasicFileAttributes)",
        "org.apache.commons.io.filefilter.OrFileFilter#accept(Path,BasicFileAttributes)",
        "org.apache.commons.io.filefilter.PathEqualsFileFilter#accept(Path,BasicFileAttributes)",
        "org.apache.commons.io.filefilter.CanReadFileFilter#accept(Path,BasicFileAttributes)",
        "org.apache.commons.io.filefilter.NameFileFilter#accept(Path,BasicFileAttributes)",
        "org.apache.commons.io.filefilter.FileFileFilter#accept(Path,BasicFileAttributes)",
        "org.apache.commons.io.filefilter.RegexFileFilter#accept(Path,BasicFileAttributes)",
        "org.apache.commons.io.filefilter.SuffixFileFilter#accept(Path,BasicFileAttributes)"
    ],
    "org.apache.commons.io.filefilter.WildcardFileFilter#WildcardFileFilter(String[],IOCase)": ["org.apache.commons.io.filefilter.WildcardFileFilter#WildcardFileFilter(IOCase,String[]...)"],
    "org.apache.commons.io.FileCleaner.track(String,Object)": [
        "org.apache.commons.io.FileCleaningTracker#track(String,Object)",
        "org.apache.commons.io.FileCleaner.<staticinit>()",
        "org.apache.commons.io.FileDeleteStrategy.<staticinit>()"
    ],
    "org.apache.commons.io.filefilter.SymbolicLinkFileFilter.<staticinit>()": ["org.apache.commons.io.filefilter.SymbolicLinkFileFilter#SymbolicLinkFileFilter()"],
    "org.apache.commons.io.filefilter.WildcardFileFilter.builder()": ["org.apache.commons.io.filefilter.WildcardFileFilter.Builder.<init>()"],
    "org.apache.commons.io.build.AbstractOrigin.CharSequenceOrigin#getReader(Charset)": [
        "org.apache.commons.io.input.CharSequenceReader#CharSequenceReader(CharSequence)",
        "org.apache.commons.io.build.AbstractOrigin#get()"
    ],
    "org.apache.commons.io.FileUtils.isFileOlder(File,long)": [
        "org.apache.commons.io.function.Uncheck.get(IOSupplier<T>)",
        "org.apache.commons.io.FileUtils.<staticinit>()",
        "org.apache.commons.io.file.PathUtils.isOlder(Path,Path)"
    ],
    "org.apache.commons.io.FileUtils.isEmptyDirectory(File)": ["org.apache.commons.io.file.PathUtils.isEmptyDirectory(Path)"],
    "org.apache.commons.io.output.BrokenWriter#BrokenWriter(Throwable)": ["org.apache.commons.io.output.BrokenWriter#BrokenWriter(Supplier<Throwable>)"],
    "org.apache.commons.io.filefilter.OrFileFilter#accept(Path,BasicFileAttributes)": [
        "org.apache.commons.io.filefilter.SizeFileFilter#accept(Path,BasicFileAttributes)",
        "org.apache.commons.io.filefilter.WildcardFileFilter#accept(Path,BasicFileAttributes)",
        "org.apache.commons.io.filefilter.FalseFileFilter#accept(Path,BasicFileAttributes)",
        "org.apache.commons.io.filefilter.FileEqualsFileFilter#accept(Path,BasicFileAttributes)",
        "org.apache.commons.io.filefilter.PathVisitorFileFilter#accept(Path,BasicFileAttributes)",
        "org.apache.commons.io.filefilter.SymbolicLinkFileFilter#accept(Path,BasicFileAttributes)",
        "org.apache.commons.io.filefilter.PrefixFileFilter#accept(Path,BasicFileAttributes)",
        "org.apache.commons.io.filefilter.CanExecuteFileFilter#accept(Path,BasicFileAttributes)",
        "org.apache.commons.io.filefilter.MagicNumberFileFilter#accept(Path,BasicFileAttributes)",
        "org.apache.commons.io.filefilter.WildcardFilter#accept(Path,BasicFileAttributes)",
        "org.apache.commons.io.filefilter.NotFileFilter#accept(Path,BasicFileAttributes)",
        "org.apache.commons.io.filefilter.IOFileFilter#accept(Path,BasicFileAttributes)",
        "org.apache.commons.io.filefilter.AbstractFileFilter.toDefaultFileVisitResult(boolean)",
        "org.apache.commons.io.filefilter.AndFileFilter#accept(Path,BasicFileAttributes)",
        "org.apache.commons.io.filefilter.DirectoryFileFilter#accept(Path,BasicFileAttributes)",
        "org.apache.commons.io.filefilter.CanWriteFileFilter#accept(Path,BasicFileAttributes)",
        "org.apache.commons.io.filefilter.AgeFileFilter#accept(Path,BasicFileAttributes)",
        "org.apache.commons.io.filefilter.HiddenFileFilter#accept(Path,BasicFileAttributes)",
        "org.apache.commons.io.filefilter.TrueFileFilter#accept(Path,BasicFileAttributes)",
        "org.apache.commons.io.filefilter.EmptyFileFilter#accept(Path,BasicFileAttributes)",
        "org.apache.commons.io.filefilter.OrFileFilter#accept(Path,BasicFileAttributes)",
        "org.apache.commons.io.filefilter.PathEqualsFileFilter#accept(Path,BasicFileAttributes)",
        "org.apache.commons.io.filefilter.CanReadFileFilter#accept(Path,BasicFileAttributes)",
        "org.apache.commons.io.filefilter.NameFileFilter#accept(Path,BasicFileAttributes)",
        "org.apache.commons.io.filefilter.FileFileFilter#accept(Path,BasicFileAttributes)",
        "org.apache.commons.io.filefilter.RegexFileFilter#accept(Path,BasicFileAttributes)",
        "org.apache.commons.io.filefilter.SuffixFileFilter#accept(Path,BasicFileAttributes)"
    ],
    "org.apache.commons.io.output.FilterCollectionWriter#write(int)": [
        "org.apache.commons.io.output.LockableFileWriter#write(int)",
        "org.apache.commons.io.output.AppendableWriter#write(int)",
        "org.apache.commons.io.output.FilterCollectionWriter#forAllWriters(IOConsumer<Writer>)",
        "org.apache.commons.io.output.ProxyCollectionWriter#write(int)",
        "org.apache.commons.io.output.NullWriter#write(int)",
        "org.apache.commons.io.output.FilterCollectionWriter#write(int)"
    ],
    "org.apache.commons.io.FileCleaningTracker#track(Path,Object)": [
        "org.apache.commons.io.FileDeleteStrategy.<staticinit>()",
        "org.apache.commons.io.FileCleaningTracker#track(Path,Object,FileDeleteStrategy)"
    ],
    "org.apache.commons.io.input.ObservableInputStream#noteDataBytes(byte[],int,int)": [
        "org.apache.commons.io.input.MessageDigestInputStream.MessageDigestMaintainingObserver#data(byte[],int,int)",
        "org.apache.commons.io.input.ObservableInputStream.Observer#data(byte[],int,int)",
        "org.apache.commons.io.input.MessageDigestCalculatingInputStream.MessageDigestMaintainingObserver#data(byte[],int,int)",
        "org.apache.commons.io.input.ObservableInputStream#forEachObserver(IOConsumer<Observer>)"
    ],
    "org.apache.commons.io.filefilter.WildcardFilter#WildcardFilter(List<String>)": [
        "org.apache.commons.io.filefilter.AbstractFileFilter#AbstractFileFilter()",
        "org.apache.commons.io.filefilter.IOFileFilter.<staticinit>()",
        "org.apache.commons.io.filefilter.WildcardFilter.<init>()"
    ],
    "org.apache.commons.io.build.AbstractOrigin#toString()": ["org.apache.commons.io.build.AbstractOrigin#getSimpleClassName()"],
    "org.apache.commons.io.output.BrokenOutputStream#BrokenOutputStream()": ["org.apache.commons.io.output.BrokenOutputStream#BrokenOutputStream(Supplier<Throwable>)"],
    "org.apache.commons.io.function.IORunnable.noop()": ["org.apache.commons.io.function.Constants.<staticinit>()"],
    "org.apache.commons.io.output.FileWriterWithEncoding#FileWriterWithEncoding(File,Charset)": ["org.apache.commons.io.output.FileWriterWithEncoding#FileWriterWithEncoding(File,Charset,boolean)"],
    "org.apache.commons.io.input.SwappedDataInputStream#readUnsignedByte()": [
        "org.apache.commons.io.input.CharSequenceInputStream#read()",
        "org.apache.commons.io.input.UnsynchronizedByteArrayInputStream#read()",
        "org.apache.commons.io.input.RandomAccessFileInputStream#read()",
        "org.apache.commons.io.input.ReaderInputStream#read()",
        "org.apache.commons.io.input.UnsynchronizedFilterInputStream#read()",
        "org.apache.commons.io.input.UnixLineEndingInputStream#read()",
        "org.apache.commons.io.input.DemuxInputStream#read()",
        "org.apache.commons.io.input.QueueInputStream#read()",
        "org.apache.commons.io.input.NullInputStream#read()",
        "org.apache.commons.io.input.MemoryMappedFileInputStream#read()",
        "org.apache.commons.io.input.BufferedFileChannelInputStream#read()",
        "org.apache.commons.io.input.WindowsLineEndingInputStream#read()",
        "org.apache.commons.io.input.BrokenInputStream#read()",
        "org.apache.commons.io.input.ClosedInputStream#read()",
        "org.apache.commons.io.input.UnsynchronizedBufferedInputStream#read()",
        "org.apache.commons.io.input.CircularInputStream#read()"
    ],
    "org.apache.commons.io.filefilter.FalseFileFilter#FalseFileFilter()": ["org.apache.commons.io.filefilter.FalseFileFilter.<init>()"],
    "org.apache.commons.io.monitor.FileAlterationMonitor#start()": ["org.apache.commons.io.monitor.FileAlterationObserver#initialize()"],
    "org.apache.commons.io.DirectoryWalker#DirectoryWalker()": ["org.apache.commons.io.DirectoryWalker#DirectoryWalker(FileFilter,int)"],
    "org.apache.commons.io.filefilter.IOFileFilter#negate()": ["org.apache.commons.io.filefilter.NotFileFilter#NotFileFilter(IOFileFilter)"],
    "org.apache.commons.io.input.BrokenInputStream#BrokenInputStream(Supplier<Throwable>)": ["org.apache.commons.io.input.BrokenInputStream.<init>()"],
    "org.apache.commons.io.input.AutoCloseInputStream.builder()": ["org.apache.commons.io.input.AutoCloseInputStream.Builder.<init>()"],
    "org.apache.commons.io.output.BrokenOutputStream#write(int)": ["org.apache.commons.io.output.BrokenOutputStream#rethrow()"],
    "org.apache.commons.io.input.BrokenReader#ready()": ["org.apache.commons.io.input.BrokenReader#rethrow()"],
    "org.apache.commons.io.IOUtils.readFully(InputStream,byte[])": ["org.apache.commons.io.IOUtils.readFully(InputStream,byte[],int,int)"],
    "org.apache.commons.io.filefilter.WildcardFileFilter#WildcardFileFilter(String)": [
        "org.apache.commons.io.IOCase.<staticinit>()",
        "org.apache.commons.io.filefilter.WildcardFileFilter.requireWildcards(T)"
    ],
    "org.apache.commons.io.filefilter.SuffixFileFilter#SuffixFileFilter(String[]...)": [
        "org.apache.commons.io.IOCase.<staticinit>()",
        "org.apache.commons.io.filefilter.SuffixFileFilter#SuffixFileFilter(String[],IOCase)"
    ],
    "org.apache.commons.io.file.FilesUncheck.readAllLines(Path)": ["org.apache.commons.io.function.Uncheck.apply(IOFunction<T, R>,T)"],
    "org.apache.commons.io.input.CharSequenceInputStream#reset()": [
        "org.apache.commons.io.input.CharSequenceInputStream.<staticinit>()",
        "org.apache.commons.io.input.CharSequenceInputStream#fillBuffer()",
        "org.apache.commons.io.input.CharSequenceInputStream#mark(int)"
    ],
    "org.apache.commons.io.output.NullPrintStream.<staticinit>()": ["org.apache.commons.io.output.NullPrintStream#NullPrintStream()"],
    "org.apache.commons.io.FilenameUtils.getPathNoEndSeparator(String)": ["org.apache.commons.io.FilenameUtils.doGetPath(String,int)"],
    "org.apache.commons.io.input.CharSequenceInputStream#CharSequenceInputStream(CharSequence,String)": [
        "org.apache.commons.io.input.CharSequenceInputStream#CharSequenceInputStream(CharSequence,String,int)",
        "org.apache.commons.io.IOUtils.<staticinit>()"
    ],
    "org.apache.commons.io.FileUtils.lastModifiedFileTime(File)": ["org.apache.commons.io.FileUtils.<staticinit>()"],
    "org.apache.commons.io.CloseableURLConnection#getDoInput()": ["org.apache.commons.io.CloseableURLConnection#getDoInput()"],
    "org.apache.commons.io.FileUtils.doCopyDirectory(File,File,FileFilter,List<String>,boolean,CopyOption[]...)": [
        "org.apache.commons.io.FileUtils.copyFile(File,File,boolean,CopyOption[]...)",
        "org.apache.commons.io.FileUtils.mkdirs(File)",
        "org.apache.commons.io.FileUtils.listFiles(File,FileFilter)",
        "org.apache.commons.io.FileUtils.requireDirectoryIfExists(File,String)",
        "org.apache.commons.io.FileUtils.doCopyDirectory(File,File,FileFilter,List<String>,boolean,CopyOption[]...)",
        "org.apache.commons.io.FileUtils.setTimes(File,File)"
    ],
    "org.apache.commons.io.ByteOrderMark#getBytes()": ["org.apache.commons.io.IOUtils.byteArray(int)"],
    "org.apache.commons.io.file.FilesUncheck.newBufferedReader(Path)": ["org.apache.commons.io.function.Uncheck.apply(IOFunction<T, R>,T)"],
    "org.apache.commons.io.CloseableURLConnection#getRequestProperty(String)": ["org.apache.commons.io.CloseableURLConnection#getRequestProperty(String)"],
    "org.apache.commons.io.FileUtils.isFileOlder(File,Instant)": [
        "org.apache.commons.io.function.Uncheck.get(IOSupplier<T>)",
        "org.apache.commons.io.file.PathUtils.isOlder(Path,Path)"
    ],
    "org.apache.commons.io.build.AbstractOrigin.WriterOrigin#getOutputStream(OpenOption[]...)": [
        "org.apache.commons.io.output.WriterOutputStream.builder()",
        "org.apache.commons.io.build.AbstractOriginSupplier#setWriter(Writer)"
    ],
    "org.apache.commons.io.output.NullOutputStream#NullOutputStream()": [
        "org.apache.commons.io.output.NullOutputStream.<staticinit>()",
        "org.apache.commons.io.output.NullOutputStream.<init>()"
    ],
    "org.apache.commons.io.input.BOMInputStream.Builder#get()": [
        "org.apache.commons.io.input.BOMInputStream#BOMInputStream(InputStream,boolean,ByteOrderMark[]...)",
        "org.apache.commons.io.build.AbstractStreamBuilder#getInputStream()"
    ],
    "org.apache.commons.io.filefilter.FileFilterUtils.filterList(IOFileFilter,Iterable<File>)": ["org.apache.commons.io.filefilter.FileFilterUtils.filterFiles(IOFileFilter,Stream<File>,Collector<? super File, A, R>)"],
    "org.apache.commons.io.output.WriterOutputStream#processInput(boolean)": ["org.apache.commons.io.output.WriterOutputStream#flushOutput()"],
    "org.apache.commons.io.filefilter.CanWriteFileFilter.<staticinit>()": [
        "org.apache.commons.io.filefilter.TrueFileFilter#negate()",
        "org.apache.commons.io.filefilter.CanWriteFileFilter#CanWriteFileFilter()",
        "org.apache.commons.io.filefilter.FalseFileFilter#negate()",
        "org.apache.commons.io.filefilter.IOFileFilter#negate()"
    ],
    "org.apache.commons.io.IOExceptionWithCause#IOExceptionWithCause(String,Throwable)": ["org.apache.commons.io.IOExceptionWithCause.<init>()"],
    "org.apache.commons.io.filefilter.FileFilterUtils.magicNumberFileFilter(byte[],long)": ["org.apache.commons.io.filefilter.MagicNumberFileFilter#MagicNumberFileFilter(byte[],long)"],
    "org.apache.commons.io.output.UnsynchronizedByteArrayOutputStream#toInputStream()": [
        "org.apache.commons.io.input.UnsynchronizedByteArrayInputStream.Builder#get()",
        "org.apache.commons.io.input.UnsynchronizedByteArrayInputStream.Builder#setByteArray(byte[])",
        "org.apache.commons.io.input.UnsynchronizedByteArrayInputStream.builder()",
        "org.apache.commons.io.input.UnsynchronizedByteArrayInputStream.Builder#setOffset(int)",
        "org.apache.commons.io.output.AbstractByteArrayOutputStream#toInputStream(InputStreamConstructor<T extends InputStream>)",
        "org.apache.commons.io.input.UnsynchronizedByteArrayInputStream.Builder#setLength(int)",
        "org.apache.commons.io.function.Uncheck.get(IOSupplier<T>)"
    ],
    "org.apache.commons.io.IOUtils.skipFully(InputStream,long)": ["org.apache.commons.io.IOUtils.skip(InputStream,long,Supplier<byte[]>)"],
    "org.apache.commons.io.IOUtils.skip(ReadableByteChannel,long)": ["org.apache.commons.io.IOUtils.<staticinit>()"],
    "org.apache.commons.io.FileUtils.checksumCRC32(File)": ["org.apache.commons.io.FileUtils.checksum(File,Checksum)"],
    "org.apache.commons.io.function.IOStream#max(IOComparator<? super T>)": [
        "org.apache.commons.io.function.Erase.compare(IOComparator<? super T>,T,T)",
        "org.apache.commons.io.function.IOBaseStreamAdapter#unwrap()"
    ],
    "org.apache.commons.io.input.BufferedFileChannelInputStream#read()": [
        "org.apache.commons.io.IOUtils.<staticinit>()",
        "org.apache.commons.io.input.BufferedFileChannelInputStream#refill()"
    ],
    "org.apache.commons.io.RandomAccessFiles#RandomAccessFiles()": ["org.apache.commons.io.RandomAccessFiles.<init>()"],
    "org.apache.commons.io.file.Counters.bigIntegerCounter()": ["org.apache.commons.io.file.Counters.BigIntegerCounter.<init>()"],
    "org.apache.commons.io.input.UncheckedFilterReader#read()": ["org.apache.commons.io.function.Uncheck.get(IOSupplier<T>)"],
    "org.apache.commons.io.input.ClosedInputStream#read(byte[],int,int)": ["org.apache.commons.io.IOUtils.<staticinit>()"],
    "org.apache.commons.io.IOUtils.close(Closeable)": [
        "org.apache.commons.io.LineIterator#close()",
        "org.apache.commons.io.input.ReversedLinesFileReader#close()",
        "org.apache.commons.io.input.Tailer.RandomAccessFileBridge#close()",
        "org.apache.commons.io.function.IOBaseStream#close()"
    ],
    "org.apache.commons.io.filefilter.PathVisitorFileFilter#accept(File,String)": [
        "org.apache.commons.io.filefilter.AbstractFileFilter#handle(Throwable)",
        "org.apache.commons.io.file.PathUtils.readBasicFileAttributes(Path)",
        "org.apache.commons.io.filefilter.PathVisitorFileFilter#accept(Path,BasicFileAttributes)"
    ],
    "org.apache.commons.io.file.PathUtils.sizeOfAsBigInteger(Path)": ["org.apache.commons.io.file.PathUtils.sizeOfDirectoryAsBigInteger(Path)"],
    "org.apache.commons.io.FileUtils.listFilesAndDirs(File,IOFileFilter,IOFileFilter)": [
        "org.apache.commons.io.file.AccumulatorPathVisitor#getDirList()",
        "org.apache.commons.io.FileUtils.toList(Stream<File>)",
        "org.apache.commons.io.FileUtils.listAccumulate(File,IOFileFilter,IOFileFilter,FileVisitOption[]...)",
        "org.apache.commons.io.function.Uncheck.apply(IOFunction<T, R>,T)",
        "org.apache.commons.io.file.AccumulatorPathVisitor#getFileList()"
    ],
    "org.apache.commons.io.FilenameUtils.equals(String,String,boolean,IOCase)": [
        "org.apache.commons.io.IOCase.value(IOCase,IOCase)",
        "org.apache.commons.io.FilenameUtils.normalize(String)",
        "org.apache.commons.io.IOCase.<staticinit>()",
        "org.apache.commons.io.IOCase#checkEquals(String,String)"
    ],
    "org.apache.commons.io.input.ReversedLinesFileReader#ReversedLinesFileReader(Path,int,String)": [
        "org.apache.commons.io.Charsets.toCharset(String)",
        "org.apache.commons.io.input.ReversedLinesFileReader#ReversedLinesFileReader(Path,int,Charset)"
    ],
    "org.apache.commons.io.file.PathUtils.isNewer(Path,FileTime,LinkOption[]...)": ["org.apache.commons.io.file.PathUtils.compareLastModifiedTimeTo(Path,FileTime,LinkOption[]...)"],
    "org.apache.commons.io.input.UncheckedFilterReader#UncheckedFilterReader(Reader)": ["org.apache.commons.io.input.UncheckedFilterReader.<init>()"],
    "org.apache.commons.io.input.Tailer#run()": [
        "org.apache.commons.io.input.Tailer.TailablePath#lastModifiedFileTime()",
        "org.apache.commons.io.input.TailerListenerAdapter#fileNotFound()",
        "org.apache.commons.io.input.TailerListenerAdapter#handle(Exception)",
        "org.apache.commons.io.input.Tailer.RandomAccessFileBridge#seek(long)",
        "org.apache.commons.io.input.Tailer.<staticinit>()",
        "org.apache.commons.io.input.Tailer#getRun()",
        "org.apache.commons.io.input.TailerListenerAdapter#fileRotated()",
        "org.apache.commons.io.input.Tailer.TailablePath#size()",
        "org.apache.commons.io.input.Tailer.TailablePath#isNewer(FileTime)",
        "org.apache.commons.io.input.Tailer.TailablePath#getRandomAccess(String)",
        "org.apache.commons.io.input.Tailer#readLines(RandomAccessResourceBridge)",
        "org.apache.commons.io.input.Tailer#close()",
        "org.apache.commons.io.file.attribute.FileTimes.<staticinit>()",
        "org.apache.commons.io.IOUtils.close(Closeable)",
        "org.apache.commons.io.ThreadUtils.sleep(Duration)"
    ],
    "org.apache.commons.io.IOUtils.toByteArray(InputStream,long)": ["org.apache.commons.io.IOUtils.toByteArray(InputStream,int)"],
    "org.apache.commons.io.output.BrokenOutputStream.<staticinit>()": ["org.apache.commons.io.output.BrokenOutputStream#BrokenOutputStream()"],
    "org.apache.commons.io.FilenameUtils.normalize(String)": [
        "org.apache.commons.io.FilenameUtils.<staticinit>()",
        "org.apache.commons.io.FilenameUtils.doNormalize(String,char,boolean)"
    ],
    "org.apache.commons.io.filefilter.SizeFileFilter#accept(File)": ["org.apache.commons.io.filefilter.SizeFileFilter#accept(long)"],
    "org.apache.commons.io.filefilter.FileFilterUtils.filterList(IOFileFilter,File[]...)": ["org.apache.commons.io.filefilter.FileFilterUtils.filter(IOFileFilter,File[]...)"],
    "org.apache.commons.io.filefilter.FileFilterUtils.makeDirectoryOnly(IOFileFilter)": [
        "org.apache.commons.io.filefilter.FalseFileFilter#and(IOFileFilter)",
        "org.apache.commons.io.filefilter.DirectoryFileFilter.<staticinit>()",
        "org.apache.commons.io.filefilter.TrueFileFilter#and(IOFileFilter)",
        "org.apache.commons.io.filefilter.IOFileFilter#and(IOFileFilter)"
    ],
    "org.apache.commons.io.filefilter.TrueFileFilter#negate()": ["org.apache.commons.io.filefilter.FalseFileFilter.<staticinit>()"],
    "org.apache.commons.io.output.LockableFileWriter.Builder#setLockDirectory(File)": [
        "org.apache.commons.io.build.AbstractOriginSupplier.newFileOrigin(File)",
        "org.apache.commons.io.FileUtils.getTempDirectory()"
    ],
    "org.apache.commons.io.output.TeeOutputStream#TeeOutputStream(OutputStream,OutputStream)": [
        "org.apache.commons.io.output.ProxyOutputStream#ProxyOutputStream(OutputStream)",
        "org.apache.commons.io.output.TeeOutputStream.<init>()"
    ],
    "org.apache.commons.io.filefilter.DelegateFileFilter#toString()": ["org.apache.commons.io.filefilter.AbstractFileFilter#toString()"],
    "org.apache.commons.io.monitor.FileAlterationObserver#toString()": [
        "org.apache.commons.io.filefilter.DelegateFileFilter#toString()",
        "org.apache.commons.io.filefilter.AndFileFilter#toString()",
        "org.apache.commons.io.filefilter.RegexFileFilter#toString()",
        "org.apache.commons.io.filefilter.WildcardFileFilter#toString()",
        "org.apache.commons.io.filefilter.NotFileFilter#toString()",
        "org.apache.commons.io.filefilter.FalseFileFilter#toString()",
        "org.apache.commons.io.filefilter.PrefixFileFilter#toString()",
        "org.apache.commons.io.filefilter.OrFileFilter#toString()",
        "org.apache.commons.io.filefilter.NameFileFilter#toString()",
        "org.apache.commons.io.monitor.FileAlterationObserver#getDirectory()",
        "org.apache.commons.io.filefilter.AgeFileFilter#toString()",
        "org.apache.commons.io.filefilter.SuffixFileFilter#toString()",
        "org.apache.commons.io.filefilter.MagicNumberFileFilter#toString()",
        "org.apache.commons.io.filefilter.TrueFileFilter#toString()",
        "org.apache.commons.io.filefilter.AbstractFileFilter#toString()",
        "org.apache.commons.io.filefilter.SizeFileFilter#toString()"
    ],
    "org.apache.commons.io.IOUtils.resourceToURL(String)": ["org.apache.commons.io.IOUtils.resourceToURL(String,ClassLoader)"],
    "org.apache.commons.io.FileSystem.current()": ["org.apache.commons.io.FileSystem.<staticinit>()"],
    "org.apache.commons.io.comparator.PathFileComparator.<staticinit>()": [
        "org.apache.commons.io.comparator.ReverseFileComparator#ReverseFileComparator(Comparator<File>)",
        "org.apache.commons.io.IOCase.<staticinit>()",
        "org.apache.commons.io.comparator.PathFileComparator#PathFileComparator()",
        "org.apache.commons.io.comparator.PathFileComparator#PathFileComparator(IOCase)"
    ],
    "org.apache.commons.io.output.UncheckedFilterOutputStream.Builder.<init>()": ["org.apache.commons.io.build.AbstractStreamBuilder.<init>()"],
    "org.apache.commons.io.FilenameUtils.<staticinit>()": ["org.apache.commons.io.FilenameUtils.flipSeparator(char)"],
    "org.apache.commons.io.FileUtils.toFiles(URL[]...)": [
        "org.apache.commons.io.IOUtils.length(Object[])",
        "org.apache.commons.io.FileUtils.toFile(URL)",
        "org.apache.commons.io.FileUtils.isFileProtocol(URL)",
        "org.apache.commons.io.FileUtils.<staticinit>()"
    ],
    "org.apache.commons.io.filefilter.DelegateFileFilter#accept(File,String)": [
        "org.apache.commons.io.filefilter.WildcardFileFilter#accept(File,String)",
        "org.apache.commons.io.filefilter.SizeFileFilter#accept(Path,BasicFileAttributes)",
        "org.apache.commons.io.filefilter.RegexFileFilter#accept(File,String)",
        "org.apache.commons.io.filefilter.DelegateFileFilter#accept(File,String)",
        "org.apache.commons.io.filefilter.FileEqualsFileFilter#accept(Path,BasicFileAttributes)",
        "org.apache.commons.io.filefilter.WildcardFilter#accept(File,String)",
        "org.apache.commons.io.filefilter.PrefixFileFilter#accept(File,String)",
        "org.apache.commons.io.filefilter.SymbolicLinkFileFilter#accept(Path,BasicFileAttributes)",
        "org.apache.commons.io.filefilter.PathVisitorFileFilter#accept(File,String)",
        "org.apache.commons.io.filefilter.AbstractFileFilter#accept(File,String)",
        "org.apache.commons.io.filefilter.AndFileFilter#accept(File,String)",
        "org.apache.commons.io.filefilter.TrueFileFilter#accept(File,String)",
        "org.apache.commons.io.filefilter.CanExecuteFileFilter#accept(Path,BasicFileAttributes)",
        "org.apache.commons.io.filefilter.MagicNumberFileFilter#accept(Path,BasicFileAttributes)",
        "org.apache.commons.io.filefilter.FalseFileFilter#accept(File,String)",
        "org.apache.commons.io.filefilter.SuffixFileFilter#accept(File,String)",
        "org.apache.commons.io.filefilter.IOFileFilter#accept(File,String)",
        "org.apache.commons.io.filefilter.NotFileFilter#accept(File,String)",
        "org.apache.commons.io.filefilter.DirectoryFileFilter#accept(Path,BasicFileAttributes)",
        "org.apache.commons.io.filefilter.CanWriteFileFilter#accept(Path,BasicFileAttributes)",
        "org.apache.commons.io.filefilter.AgeFileFilter#accept(Path,BasicFileAttributes)",
        "org.apache.commons.io.filefilter.NameFileFilter#accept(File,String)",
        "org.apache.commons.io.filefilter.OrFileFilter#accept(File,String)",
        "org.apache.commons.io.filefilter.HiddenFileFilter#accept(Path,BasicFileAttributes)",
        "org.apache.commons.io.filefilter.EmptyFileFilter#accept(Path,BasicFileAttributes)",
        "org.apache.commons.io.filefilter.PathEqualsFileFilter#accept(Path,BasicFileAttributes)",
        "org.apache.commons.io.filefilter.CanReadFileFilter#accept(Path,BasicFileAttributes)",
        "org.apache.commons.io.filefilter.FileFileFilter#accept(Path,BasicFileAttributes)"
    ],
    "org.apache.commons.io.input.ObservableInputStream#noteDataByte(int)": [
        "org.apache.commons.io.input.MessageDigestCalculatingInputStream.MessageDigestMaintainingObserver#data(int)",
        "org.apache.commons.io.input.ObservableInputStream.Observer#data(int)",
        "org.apache.commons.io.input.ObservableInputStream#forEachObserver(IOConsumer<Observer>)",
        "org.apache.commons.io.input.MessageDigestInputStream.MessageDigestMaintainingObserver#data(int)"
    ],
    "org.apache.commons.io.output.BrokenOutputStream#close()": ["org.apache.commons.io.output.BrokenOutputStream#rethrow()"],
    "org.apache.commons.io.EndianUtils.readSwappedFloat(InputStream)": ["org.apache.commons.io.EndianUtils.readSwappedInteger(InputStream)"],
    "org.apache.commons.io.output.BrokenWriter#write(char[],int,int)": ["org.apache.commons.io.output.BrokenWriter#rethrow()"],
    "org.apache.commons.io.input.UnixLineEndingInputStream#handleEos(boolean)": ["org.apache.commons.io.IOUtils.<staticinit>()"],
    "org.apache.commons.io.FilenameUtils.doGetPath(String,int)": [
        "org.apache.commons.io.FilenameUtils.getPrefixLength(String)",
        "org.apache.commons.io.FilenameUtils.indexOfLastSeparator(String)",
        "org.apache.commons.io.FilenameUtils.requireNonNullChars(String)",
        "org.apache.commons.io.FilenameUtils.<staticinit>()"
    ],
    "org.apache.commons.io.FileUtils.isFileNewer(File,File)": [
        "org.apache.commons.io.file.PathUtils.isNewer(Path,Path)",
        "org.apache.commons.io.function.Uncheck.get(IOSupplier<T>)"
    ],
    "org.apache.commons.io.input.BOMInputStream#hasBOM()": ["org.apache.commons.io.input.BOMInputStream#getBOM()"],
    "org.apache.commons.io.input.UncheckedFilterInputStream.Builder#get()": [
        "org.apache.commons.io.input.UncheckedFilterInputStream#UncheckedFilterInputStream(InputStream)",
        "org.apache.commons.io.function.Uncheck.get(IOSupplier<T>)",
        "org.apache.commons.io.build.AbstractStreamBuilder#getInputStream()"
    ],
    "org.apache.commons.io.function.Uncheck.get(IOSupplier<T>)": [
        "org.apache.commons.io.input.UnsynchronizedFilterInputStream.Builder#get()",
        "org.apache.commons.io.input.BOMInputStream.Builder#get()",
        "org.apache.commons.io.input.CharSequenceInputStream.Builder#get()",
        "org.apache.commons.io.function.Uncheck.wrap(IOException)",
        "org.apache.commons.io.input.QueueInputStream.Builder#get()",
        "org.apache.commons.io.input.ReaderInputStream.Builder#get()",
        "org.apache.commons.io.filefilter.WildcardFileFilter.Builder#get()",
        "org.apache.commons.io.input.ChecksumInputStream.Builder#get()",
        "org.apache.commons.io.input.Tailer.Builder#get()",
        "org.apache.commons.io.output.WriterOutputStream.Builder#get()",
        "org.apache.commons.io.input.ReadAheadInputStream.Builder#get()",
        "org.apache.commons.io.input.UnsynchronizedBufferedInputStream.Builder#get()",
        "org.apache.commons.io.input.UncheckedFilterInputStream.Builder#get()",
        "org.apache.commons.io.input.AutoCloseInputStream.Builder#get()",
        "org.apache.commons.io.output.ChunkedOutputStream.Builder#get()",
        "org.apache.commons.io.input.UnsynchronizedByteArrayInputStream.Builder#get()",
        "org.apache.commons.io.output.UncheckedFilterOutputStream.Builder#get()",
        "org.apache.commons.io.output.XmlStreamWriter.Builder#get()",
        "org.apache.commons.io.input.MessageDigestCalculatingInputStream.Builder#get()",
        "org.apache.commons.io.input.BoundedInputStream.Builder#get()",
        "org.apache.commons.io.output.LockableFileWriter.Builder#get()",
        "org.apache.commons.io.input.ReversedLinesFileReader.Builder#get()",
        "org.apache.commons.io.input.ThrottledInputStream.Builder#get()",
        "org.apache.commons.io.build.AbstractOrigin#get()",
        "org.apache.commons.io.output.UnsynchronizedByteArrayOutputStream.Builder#get()",
        "org.apache.commons.io.input.BufferedFileChannelInputStream.Builder#get()",
        "org.apache.commons.io.output.UncheckedFilterWriter.Builder#get()",
        "org.apache.commons.io.input.RandomAccessFileInputStream.Builder#get()",
        "org.apache.commons.io.input.UncheckedFilterReader.Builder#get()",
        "org.apache.commons.io.input.MessageDigestInputStream.Builder#get()",
        "org.apache.commons.io.input.UncheckedBufferedReader.Builder#get()",
        "org.apache.commons.io.output.FileWriterWithEncoding.Builder#get()",
        "org.apache.commons.io.input.MemoryMappedFileInputStream.Builder#get()",
        "org.apache.commons.io.input.XmlStreamReader.Builder#get()",
        "org.apache.commons.io.output.DeferredFileOutputStream.Builder#get()"
    ],
    "org.apache.commons.io.CloseableURLConnection#addRequestProperty(String,String)": ["org.apache.commons.io.CloseableURLConnection#addRequestProperty(String,String)"],
    "org.apache.commons.io.FilenameUtils.removeExtension(String)": [
        "org.apache.commons.io.FilenameUtils.indexOfExtension(String)",
        "org.apache.commons.io.FilenameUtils.requireNonNullChars(String)",
        "org.apache.commons.io.FilenameUtils.<staticinit>()"
    ],
    "org.apache.commons.io.FileUtils.isFileProtocol(URL)": ["org.apache.commons.io.FileUtils.<staticinit>()"],
    "org.apache.commons.io.function.IOBaseStream#asBaseStream()": ["org.apache.commons.io.function.UncheckedIOBaseStream#UncheckedIOBaseStream(S extends IOBaseStream)"],
    "org.apache.commons.io.FileUtils.readLines(File,String)": [
        "org.apache.commons.io.Charsets.toCharset(String)",
        "org.apache.commons.io.FileUtils.readLines(File,Charset)"
    ],
    "org.apache.commons.io.file.CountingPathVisitor#CountingPathVisitor(PathCounters,PathFilter,PathFilter,IOBiFunction<Path, IOException, FileVisitResult>)": [
        "org.apache.commons.io.file.SimplePathVisitor#SimplePathVisitor(IOBiFunction<Path, IOException, FileVisitResult>)",
        "org.apache.commons.io.file.CountingPathVisitor.<init>()"
    ],
    "org.apache.commons.io.output.AbstractByteArrayOutputStream#toString()": [
        "org.apache.commons.io.output.UnsynchronizedByteArrayOutputStream#toByteArray()",
        "org.apache.commons.io.output.ByteArrayOutputStream#toByteArray()"
    ],
    "org.apache.commons.io.IOUtils.toInputStream(String,String)": ["org.apache.commons.io.Charsets.toCharset(String)"],
    "org.apache.commons.io.input.UnsynchronizedFilterInputStream.Builder.<init>()": ["org.apache.commons.io.build.AbstractStreamBuilder.<init>()"],
    "org.apache.commons.io.input.NullInputStream.<staticinit>()": ["org.apache.commons.io.input.NullInputStream#NullInputStream()"],
    "org.apache.commons.io.FileUtils.copyDirectory(File,File,FileFilter,boolean,CopyOption[]...)": [
        "org.apache.commons.io.FileUtils.listFiles(File,FileFilter)",
        "org.apache.commons.io.FileUtils.requireDirectoryExists(File,String)",
        "org.apache.commons.io.FileUtils.requireCanonicalPathsNotEquals(File,File)",
        "org.apache.commons.io.FileUtils.doCopyDirectory(File,File,FileFilter,List<String>,boolean,CopyOption[]...)"
    ],
    "org.apache.commons.io.input.Tailer#readLines(RandomAccessResourceBridge)": [
        "org.apache.commons.io.input.TailerListenerAdapter#endOfFileReached()",
        "org.apache.commons.io.input.Tailer.RandomAccessFileBridge#getPointer()",
        "org.apache.commons.io.input.Tailer.RandomAccessFileBridge#seek(long)",
        "org.apache.commons.io.input.TailerListenerAdapter#handle(String)",
        "org.apache.commons.io.input.Tailer#getRun()",
        "org.apache.commons.io.input.Tailer.RandomAccessFileBridge#read(byte[])",
        "org.apache.commons.io.IOUtils.<staticinit>()"
    ],
    "org.apache.commons.io.input.BrokenInputStream#BrokenInputStream(Throwable)": ["org.apache.commons.io.input.BrokenInputStream#BrokenInputStream(Supplier<Throwable>)"],
    "org.apache.commons.io.input.RandomAccessFileInputStream.Builder.<init>()": ["org.apache.commons.io.build.AbstractStreamBuilder.<init>()"],
    "org.apache.commons.io.file.FilesUncheck.newByteChannel(Path,OpenOption[]...)": ["org.apache.commons.io.function.Uncheck.apply(IOBiFunction<T, U, R>,T,U)"],
    "org.apache.commons.io.input.UncheckedFilterReader#reset()": ["org.apache.commons.io.function.Uncheck.run(IORunnable)"],
    "org.apache.commons.io.build.AbstractOrigin#getByteArray()": [
        "org.apache.commons.io.build.AbstractOrigin.PathOrigin#getPath()",
        "org.apache.commons.io.build.AbstractOrigin.URIOrigin#getPath()",
        "org.apache.commons.io.build.AbstractOrigin.FileOrigin#getPath()",
        "org.apache.commons.io.build.AbstractOrigin#getPath()"
    ],
    "org.apache.commons.io.build.AbstractStreamBuilder#getInputStream()": [
        "org.apache.commons.io.build.AbstractOrigin.URIOrigin#getInputStream(OpenOption[]...)",
        "org.apache.commons.io.build.AbstractStreamBuilder#getOpenOptions()",
        "org.apache.commons.io.build.AbstractOrigin.ByteArrayOrigin#getInputStream(OpenOption[]...)",
        "org.apache.commons.io.build.AbstractOriginSupplier#checkOrigin()",
        "org.apache.commons.io.build.AbstractOrigin.ReaderOrigin#getInputStream(OpenOption[]...)",
        "org.apache.commons.io.build.AbstractOrigin#getInputStream(OpenOption[]...)",
        "org.apache.commons.io.build.AbstractOrigin.InputStreamOrigin#getInputStream(OpenOption[]...)",
        "org.apache.commons.io.build.AbstractOrigin.CharSequenceOrigin#getInputStream(OpenOption[]...)"
    ],
    "org.apache.commons.io.output.WriterOutputStream#flush()": [
        "org.apache.commons.io.output.WriterOutputStream#flushOutput()",
        "org.apache.commons.io.output.BrokenWriter#flush()",
        "org.apache.commons.io.output.AppendableWriter#flush()",
        "org.apache.commons.io.output.StringBuilderWriter#flush()",
        "org.apache.commons.io.output.FilterCollectionWriter#flush()",
        "org.apache.commons.io.output.XmlStreamWriter#flush()",
        "org.apache.commons.io.output.NullWriter#flush()",
        "org.apache.commons.io.output.ProxyCollectionWriter#flush()",
        "org.apache.commons.io.output.ClosedWriter#flush()",
        "org.apache.commons.io.output.LockableFileWriter#flush()"
    ],
    "org.apache.commons.io.file.PathUtils.isPosix(Path,LinkOption[]...)": [
        "org.apache.commons.io.file.PathUtils.exists(Path,LinkOption[]...)",
        "org.apache.commons.io.file.PathUtils.readPosixFileAttributes(Path,LinkOption[]...)"
    ],
    "org.apache.commons.io.IOUtils.skipFully(ReadableByteChannel,long)": ["org.apache.commons.io.IOUtils.skip(ReadableByteChannel,long)"],
    "org.apache.commons.io.FilenameUtils.isExtension(String,String[]...)": [
        "org.apache.commons.io.FilenameUtils.indexOfExtension(String)",
        "org.apache.commons.io.FilenameUtils.getExtension(String)",
        "org.apache.commons.io.FilenameUtils.requireNonNullChars(String)",
        "org.apache.commons.io.FilenameUtils.<staticinit>()"
    ],
    "org.apache.commons.io.output.FileWriterWithEncoding#FileWriterWithEncoding(OutputStreamWriter)": [
        "org.apache.commons.io.output.FileWriterWithEncoding.<init>()",
        "org.apache.commons.io.output.ProxyWriter#ProxyWriter(Writer)"
    ],
    "org.apache.commons.io.IOUtils.toByteArray(Reader,Charset)": [
        "org.apache.commons.io.IOUtils.copy(Reader,OutputStream,Charset)",
        "org.apache.commons.io.output.ByteArrayOutputStream#ByteArrayOutputStream()",
        "org.apache.commons.io.output.ByteArrayOutputStream#toByteArray()"
    ],
    "org.apache.commons.io.comparator.PathFileComparator#compare(File,File)": ["org.apache.commons.io.IOCase#checkCompareTo(String,String)"],
    "org.apache.commons.io.function.IOIteratorAdapter#hasNext()": [
        "org.apache.commons.io.function.UncheckedIOIterator#hasNext()",
        "org.apache.commons.io.LineIterator#hasNext()",
        "org.apache.commons.io.StreamIterator#hasNext()",
        "org.apache.commons.io.function.IOStream.iterate(T,IOUnaryOperator<T>)$Iterator$1#hasNext()"
    ],
    "org.apache.commons.io.input.ThrottledInputStream#beforeRead(int)": ["org.apache.commons.io.input.ThrottledInputStream#throttle()"],
    "org.apache.commons.io.input.BrokenInputStream#close()": ["org.apache.commons.io.input.BrokenInputStream#rethrow()"],
    "org.apache.commons.io.input.CharSequenceReader#CharSequenceReader(CharSequence,int,int)": ["org.apache.commons.io.input.CharSequenceReader.<init>()"],
    "org.apache.commons.io.input.ReaderInputStream.newEncoder(Charset)": ["org.apache.commons.io.Charsets.toCharset(Charset)"],
    "org.apache.commons.io.IOUtils.toString(URI,Charset)": [
        "org.apache.commons.io.IOUtils.toString(URL,Charset)",
        "org.apache.commons.io.Charsets.toCharset(Charset)"
    ],
    "org.apache.commons.io.IOUtils.copy(Reader,OutputStream,String)": [
        "org.apache.commons.io.Charsets.toCharset(String)",
        "org.apache.commons.io.IOUtils.copy(Reader,OutputStream,Charset)"
    ],
    "org.apache.commons.io.EndianUtils.writeSwappedLong(OutputStream,long)": [
        "org.apache.commons.io.output.BrokenOutputStream#write(int)",
        "org.apache.commons.io.output.AppendableOutputStream#write(int)",
        "org.apache.commons.io.output.WriterOutputStream#write(int)",
        "org.apache.commons.io.output.DemuxOutputStream#write(int)",
        "org.apache.commons.io.output.AbstractByteArrayOutputStream#write(int)",
        "org.apache.commons.io.output.UnsynchronizedByteArrayOutputStream#write(int)",
        "org.apache.commons.io.output.NullOutputStream#write(int)",
        "org.apache.commons.io.output.QueueOutputStream#write(int)",
        "org.apache.commons.io.output.ByteArrayOutputStream#write(int)",
        "org.apache.commons.io.output.ClosedOutputStream#write(int)",
        "org.apache.commons.io.output.ThresholdingOutputStream#write(int)"
    ],
    "org.apache.commons.io.file.PathUtils.writeString(Path,CharSequence,Charset,OpenOption[]...)": ["org.apache.commons.io.Charsets.toCharset(Charset)"],
    "org.apache.commons.io.file.PathUtils.sizeOfDirectoryAsBigInteger(Path)": [
        "org.apache.commons.io.file.Counters.NoopCounter#getBigInteger()",
        "org.apache.commons.io.file.Counters.BigIntegerCounter#getBigInteger()",
        "org.apache.commons.io.file.Counters.LongCounter#getBigInteger()",
        "org.apache.commons.io.file.PathUtils.countDirectoryAsBigInteger(Path)",
        "org.apache.commons.io.file.Counters.AbstractPathCounters#getByteCounter()"
    ],
    "org.apache.commons.io.input.UnsynchronizedBufferedInputStream#available()": [
        "org.apache.commons.io.input.RandomAccessFileInputStream#available()",
        "org.apache.commons.io.input.BrokenInputStream#available()",
        "org.apache.commons.io.input.UnsynchronizedBufferedInputStream#available()",
        "org.apache.commons.io.input.BufferedFileChannelInputStream#available()",
        "org.apache.commons.io.input.MemoryMappedFileInputStream#available()",
        "org.apache.commons.io.input.CircularInputStream#available()",
        "org.apache.commons.io.input.NullInputStream#available()",
        "org.apache.commons.io.input.ReaderInputStream#available()",
        "org.apache.commons.io.input.CharSequenceInputStream#available()",
        "org.apache.commons.io.input.UnsynchronizedFilterInputStream#available()",
        "org.apache.commons.io.input.UnsynchronizedByteArrayInputStream#available()"
    ],
    "org.apache.commons.io.build.AbstractOrigin.PathOrigin#getFile()": ["org.apache.commons.io.build.AbstractOrigin#get()"],
    "org.apache.commons.io.input.BufferedFileChannelInputStream.Builder#get()": [
        "org.apache.commons.io.build.AbstractStreamBuilder#getBufferSize()",
        "org.apache.commons.io.build.AbstractStreamBuilder#getPath()",
        "org.apache.commons.io.input.BufferedFileChannelInputStream#BufferedFileChannelInputStream(Path,int)"
    ],
    "org.apache.commons.io.FileUtils.isFileNewer(File,ChronoLocalDateTime<?>)": ["org.apache.commons.io.FileUtils.isFileNewer(File,ChronoLocalDateTime<?>,ZoneId)"],
    "org.apache.commons.io.output.WriterOutputStream#WriterOutputStream(Writer,CharsetDecoder,int,boolean)": [
        "org.apache.commons.io.output.WriterOutputStream.<init>()",
        "org.apache.commons.io.output.WriterOutputStream.checkIbmJdkWithBrokenUTF16(Charset)",
        "org.apache.commons.io.charset.CharsetDecoders.toCharsetDecoder(CharsetDecoder)"
    ],
    "org.apache.commons.io.monitor.FileAlterationMonitor#FileAlterationMonitor(long,FileAlterationObserver[]...)": ["org.apache.commons.io.monitor.FileAlterationMonitor#FileAlterationMonitor(long)"],
    "org.apache.commons.io.function.IOStreamAdapter.adapt(Stream<T>)": [
        "org.apache.commons.io.function.IOStreamAdapter#IOStreamAdapter(Stream<T>)",
        "org.apache.commons.io.function.IOStream.empty()"
    ],
    "org.apache.commons.io.DirectoryWalker#walk(File,int,Collection<T>)": [
        "org.apache.commons.io.DirectoryWalker#filterDirectoryContents(File,int,File[]...)",
        "org.apache.commons.io.DirectoryWalker#walk(File,int,Collection<T>)",
        "org.apache.commons.io.DirectoryWalker#handleDirectoryStart(File,int,Collection<T>)",
        "org.apache.commons.io.DirectoryWalker#handleDirectoryEnd(File,int,Collection<T>)",
        "org.apache.commons.io.DirectoryWalker#handleDirectory(File,int,Collection<T>)",
        "org.apache.commons.io.DirectoryWalker#checkIfCancelled(File,int,Collection<T>)",
        "org.apache.commons.io.DirectoryWalker#handleFile(File,int,Collection<T>)",
        "org.apache.commons.io.DirectoryWalker#handleRestricted(File,int,Collection<T>)"
    ],
    "org.apache.commons.io.FileUtils.deleteQuietly(File)": ["org.apache.commons.io.FileUtils.cleanDirectory(File)"],
    "org.apache.commons.io.file.FilesUncheck.setOwner(Path,UserPrincipal)": ["org.apache.commons.io.function.Uncheck.apply(IOBiFunction<T, U, R>,T,U)"],
    "org.apache.commons.io.EndianUtils.readSwappedLong(byte[],int)": [
        "org.apache.commons.io.EndianUtils.validateByteArrayOffset(byte[],int,int)",
        "org.apache.commons.io.EndianUtils.readSwappedInteger(byte[],int)"
    ],
    "org.apache.commons.io.FileUtils.iterateFiles(File,IOFileFilter,IOFileFilter)": ["org.apache.commons.io.FileUtils.listFiles(File,IOFileFilter,IOFileFilter)"],
    "org.apache.commons.io.output.LockableFileWriter#LockableFileWriter(String,boolean,String)": ["org.apache.commons.io.output.LockableFileWriter#LockableFileWriter(File,boolean,String)"],
    "org.apache.commons.io.input.ObservableInputStream#noteClosed()": ["org.apache.commons.io.input.ObservableInputStream#forEachObserver(IOConsumer<Observer>)"],
    "org.apache.commons.io.output.UncheckedFilterOutputStream.builder()": ["org.apache.commons.io.output.UncheckedFilterOutputStream.Builder.<init>()"],
    "org.apache.commons.io.function.IOStream#findFirst()": ["org.apache.commons.io.function.IOBaseStreamAdapter#unwrap()"],
    "org.apache.commons.io.CloseableURLConnection#CloseableURLConnection(URLConnection)": ["org.apache.commons.io.CloseableURLConnection.<init>()"],
    "org.apache.commons.io.comparator.DirectoryFileComparator.<init>()": ["org.apache.commons.io.comparator.AbstractFileComparator.<init>()"],
    "org.apache.commons.io.file.CountingPathVisitor#postVisitDirectory(Path,IOException)": [
        "org.apache.commons.io.file.AccumulatorPathVisitor#updateDirCounter(Path,IOException)",
        "org.apache.commons.io.file.CountingPathVisitor#updateDirCounter(Path,IOException)"
    ],
    "org.apache.commons.io.output.AbstractByteArrayOutputStream#toInputStream(InputStreamConstructor<T extends InputStream>)": ["org.apache.commons.io.input.ClosedInputStream.<staticinit>()"],
    "org.apache.commons.io.output.FileWriterWithEncoding.Builder.<init>()": [
        "org.apache.commons.io.build.AbstractStreamBuilder.<init>()",
        "org.apache.commons.io.build.AbstractStreamBuilder#getCharset()"
    ],
    "org.apache.commons.io.file.PathUtils.overrideReadOnly(DeleteOption[]...)": ["org.apache.commons.io.file.StandardDeleteOption.<staticinit>()"],
    "org.apache.commons.io.file.AccumulatorPathVisitor#relativizeDirectories(Path,boolean,Comparator<? super Path>)": [
        "org.apache.commons.io.file.AccumulatorPathVisitor#getDirList()",
        "org.apache.commons.io.file.PathUtils.relativize(Collection<Path>,Path,boolean,Comparator<? super Path>)"
    ],
    "org.apache.commons.io.output.ProxyWriter#close()": ["org.apache.commons.io.IOUtils.close(Closeable,IOConsumer<IOException>)"],
    "org.apache.commons.io.output.ChunkedOutputStream.builder()": ["org.apache.commons.io.output.ChunkedOutputStream.Builder.<init>()"],
    "org.apache.commons.io.FileUtils.openOutputStream(File,boolean)": [
        "org.apache.commons.io.FileUtils.createParentDirectories(File)",
        "org.apache.commons.io.FileUtils.checkIsFile(File,String)",
        "org.apache.commons.io.FileUtils.<staticinit>()"
    ],
    "org.apache.commons.io.input.CloseShieldReader#close()": ["org.apache.commons.io.input.ClosedReader.<staticinit>()"],
    "org.apache.commons.io.input.ThrottledInputStream#throttle()": ["org.apache.commons.io.input.ThrottledInputStream#getSleepMillis()"],
    "org.apache.commons.io.output.WriterOutputStream.Builder#setCharset(String)": [
        "org.apache.commons.io.build.AbstractStreamBuilder#getCharset()",
        "org.apache.commons.io.build.AbstractStreamBuilder#setCharset(String)"
    ],
    "org.apache.commons.io.input.SwappedDataInputStream#readByte()": [
        "org.apache.commons.io.input.CharSequenceInputStream#read()",
        "org.apache.commons.io.input.UnsynchronizedByteArrayInputStream#read()",
        "org.apache.commons.io.input.RandomAccessFileInputStream#read()",
        "org.apache.commons.io.input.ReaderInputStream#read()",
        "org.apache.commons.io.input.UnsynchronizedFilterInputStream#read()",
        "org.apache.commons.io.input.UnixLineEndingInputStream#read()",
        "org.apache.commons.io.input.DemuxInputStream#read()",
        "org.apache.commons.io.input.QueueInputStream#read()",
        "org.apache.commons.io.input.NullInputStream#read()",
        "org.apache.commons.io.input.MemoryMappedFileInputStream#read()",
        "org.apache.commons.io.input.BufferedFileChannelInputStream#read()",
        "org.apache.commons.io.input.WindowsLineEndingInputStream#read()",
        "org.apache.commons.io.input.BrokenInputStream#read()",
        "org.apache.commons.io.input.ClosedInputStream#read()",
        "org.apache.commons.io.input.UnsynchronizedBufferedInputStream#read()",
        "org.apache.commons.io.input.CircularInputStream#read()"
    ],
    "org.apache.commons.io.input.BufferedFileChannelInputStream#skip(long)": ["org.apache.commons.io.input.BufferedFileChannelInputStream#skipFromFileChannel(long)"],
    "org.apache.commons.io.file.AccumulatorPathVisitor#relativizeFiles(Path,boolean,Comparator<? super Path>)": [
        "org.apache.commons.io.file.PathUtils.relativize(Collection<Path>,Path,boolean,Comparator<? super Path>)",
        "org.apache.commons.io.file.AccumulatorPathVisitor#getFileList()"
    ],
    "org.apache.commons.io.monitor.FileAlterationMonitor#FileAlterationMonitor(long,Collection<FileAlterationObserver>)": [
        "org.apache.commons.io.monitor.FileAlterationMonitor#FileAlterationMonitor(long,Collection<FileAlterationObserver>)",
        "org.apache.commons.io.monitor.FileAlterationMonitor.<staticinit>()"
    ],
    "org.apache.commons.io.comparator.PathFileComparator#PathFileComparator(IOCase)": [
        "org.apache.commons.io.comparator.PathFileComparator.<init>()",
        "org.apache.commons.io.IOCase.value(IOCase,IOCase)",
        "org.apache.commons.io.comparator.AbstractFileComparator.<init>()",
        "org.apache.commons.io.IOCase.<staticinit>()"
    ],
    "org.apache.commons.io.input.ReadAheadInputStream.builder()": ["org.apache.commons.io.input.ReadAheadInputStream.Builder.<init>()"],
    "org.apache.commons.io.build.AbstractOriginSupplier#setOrigin(AbstractOrigin<?, ?>)": ["org.apache.commons.io.build.AbstractSupplier#asThis()"],
    "org.apache.commons.io.filefilter.FileFilterUtils.ageFileFilter(File,boolean)": ["org.apache.commons.io.filefilter.AgeFileFilter#AgeFileFilter(File,boolean)"],
    "org.apache.commons.io.monitor.FileAlterationObserver#FileAlterationObserver(String)": ["org.apache.commons.io.monitor.FileAlterationObserver#FileAlterationObserver(File)"],
    "org.apache.commons.io.file.FilesUncheck.deleteIfExists(Path)": ["org.apache.commons.io.function.Uncheck.apply(IOFunction<T, R>,T)"],
    "org.apache.commons.io.input.Tailer#Tailer(File,TailerListener,long)": ["org.apache.commons.io.input.Tailer#Tailer(File,TailerListener,long,boolean)"],
    "org.apache.commons.io.IOUtils.write(byte[],Writer,Charset)": [
        "org.apache.commons.io.output.ProxyCollectionWriter#write(String)",
        "org.apache.commons.io.output.FilterCollectionWriter#write(String)",
        "org.apache.commons.io.Charsets.toCharset(Charset)",
        "org.apache.commons.io.output.LockableFileWriter#write(String)",
        "org.apache.commons.io.output.StringBuilderWriter#write(String)",
        "org.apache.commons.io.output.NullWriter#write(String)"
    ],
    "org.apache.commons.io.function.IOStream#allMatch(IOPredicate<? super T>)": [
        "org.apache.commons.io.function.Erase.test(IOPredicate<? super T>,T)",
        "org.apache.commons.io.function.IOBaseStreamAdapter#unwrap()"
    ],
    "org.apache.commons.io.filefilter.AgeFileFilter#AgeFileFilter(File)": ["org.apache.commons.io.filefilter.AgeFileFilter#AgeFileFilter(File,boolean)"],
    "org.apache.commons.io.output.StringBuilderWriter#StringBuilderWriter()": ["org.apache.commons.io.output.StringBuilderWriter.<init>()"],
    "org.apache.commons.io.output.DeferredFileOutputStream#writeTo(OutputStream)": [
        "org.apache.commons.io.output.ByteArrayOutputStream#writeTo(OutputStream)",
        "org.apache.commons.io.output.DeferredFileOutputStream#isInMemory()"
    ],
    "org.apache.commons.io.input.Tailer.Builder#setOrigin(AbstractOrigin<?, ?>)": [
        "org.apache.commons.io.build.AbstractOrigin.PathOrigin#getPath()",
        "org.apache.commons.io.input.Tailer.Builder#setTailable(Tailable)",
        "org.apache.commons.io.build.AbstractOrigin.URIOrigin#getPath()",
        "org.apache.commons.io.build.AbstractOrigin.FileOrigin#getPath()",
        "org.apache.commons.io.build.AbstractOriginSupplier#setOrigin(AbstractOrigin<?, ?>)",
        "org.apache.commons.io.build.AbstractOrigin#getPath()"
    ],
    "org.apache.commons.io.CloseableURLConnection#toString()": ["org.apache.commons.io.CloseableURLConnection#toString()"],
    "org.apache.commons.io.file.DeletingPathVisitor#DeletingPathVisitor(PathCounters,DeleteOption[],String[]...)": [
        "org.apache.commons.io.file.DeletingPathVisitor#DeletingPathVisitor(PathCounters,LinkOption[],DeleteOption[],String[]...)",
        "org.apache.commons.io.file.PathUtils.noFollowLinkOptionArray()"
    ],
    "org.apache.commons.io.filefilter.PathEqualsFileFilter#accept(Path,BasicFileAttributes)": ["org.apache.commons.io.filefilter.AbstractFileFilter#toFileVisitResult(boolean)"],
    "org.apache.commons.io.filefilter.PrefixFileFilter#PrefixFileFilter(String)": [
        "org.apache.commons.io.IOCase.<staticinit>()",
        "org.apache.commons.io.filefilter.PrefixFileFilter#PrefixFileFilter(String,IOCase)"
    ],
    "org.apache.commons.io.file.CountingPathVisitor.withBigIntegerCounters()": [
        "org.apache.commons.io.file.CountingPathVisitor#CountingPathVisitor(PathCounters)",
        "org.apache.commons.io.file.Counters.bigIntegerPathCounters()"
    ],
    "org.apache.commons.io.output.FilterCollectionWriter#flush()": ["org.apache.commons.io.output.FilterCollectionWriter#forAllWriters(IOConsumer<Writer>)"],
    "org.apache.commons.io.filefilter.IOFileFilter#and(IOFileFilter)": ["org.apache.commons.io.filefilter.AndFileFilter#AndFileFilter(IOFileFilter[]...)"],
    "org.apache.commons.io.input.ProxyReader#read(char[])": [
        "org.apache.commons.io.input.NullReader#read(char[])",
        "org.apache.commons.io.IOUtils.length(char[])",
        "org.apache.commons.io.input.ProxyReader#handleIOException(IOException)",
        "org.apache.commons.io.input.ProxyReader#beforeRead(int)",
        "org.apache.commons.io.IOUtils.<staticinit>()",
        "org.apache.commons.io.input.ProxyReader#afterRead(int)",
        "org.apache.commons.io.input.TaggedReader#handleIOException(IOException)"
    ],
    "org.apache.commons.io.FileUtils.readFileToString(File,Charset)": [
        "org.apache.commons.io.Charsets.toCharset(Charset)",
        "org.apache.commons.io.IOUtils.toString(IOSupplier<InputStream>,Charset)"
    ],
    "org.apache.commons.io.input.BOMInputStream#read(byte[])": ["org.apache.commons.io.input.BOMInputStream#read(byte[],int,int)"],
    "org.apache.commons.io.comparator.NameFileComparator#toString()": ["org.apache.commons.io.comparator.AbstractFileComparator#toString()"],
    "org.apache.commons.io.file.NoopPathVisitor#NoopPathVisitor(IOBiFunction<Path, IOException, FileVisitResult>)": [
        "org.apache.commons.io.file.NoopPathVisitor.<init>()",
        "org.apache.commons.io.file.SimplePathVisitor#SimplePathVisitor(IOBiFunction<Path, IOException, FileVisitResult>)"
    ],
    "org.apache.commons.io.input.Tailer.Builder#setDelayDuration(Duration)": ["org.apache.commons.io.input.Tailer.Builder.<staticinit>()"],
    "org.apache.commons.io.IOUtils.resourceToByteArray(String,ClassLoader)": [
        "org.apache.commons.io.IOUtils.resourceToURL(String,ClassLoader)",
        "org.apache.commons.io.IOUtils.toByteArray(URL)"
    ],
    "org.apache.commons.io.output.DeferredFileOutputStream#thresholdReached()": [
        "org.apache.commons.io.output.AbstractByteArrayOutputStream#close()",
        "org.apache.commons.io.file.PathUtils.createParentDirectories(Path,LinkOption,FileAttribute<?>[]...)",
        "org.apache.commons.io.output.ByteArrayOutputStream#writeTo(OutputStream)",
        "org.apache.commons.io.output.DemuxOutputStream#close()",
        "org.apache.commons.io.output.WriterOutputStream#close()",
        "org.apache.commons.io.output.ThresholdingOutputStream#close()",
        "org.apache.commons.io.file.PathUtils.<staticinit>()",
        "org.apache.commons.io.output.DeferredFileOutputStream#close()",
        "org.apache.commons.io.output.BrokenOutputStream#close()"
    ],
    "org.apache.commons.io.input.UnsynchronizedBufferedReader#skip(long)": [
        "org.apache.commons.io.IOUtils.<staticinit>()",
        "org.apache.commons.io.input.UnsynchronizedBufferedReader#fillBuf()",
        "org.apache.commons.io.input.UnsynchronizedReader#checkOpen()"
    ],
    "org.apache.commons.io.input.MessageDigestCalculatingInputStream#MessageDigestCalculatingInputStream(InputStream)": [
        "org.apache.commons.io.input.MessageDigestCalculatingInputStream#MessageDigestCalculatingInputStream(InputStream,MessageDigest)",
        "org.apache.commons.io.input.MessageDigestCalculatingInputStream.getDefaultMessageDigest()"
    ],
    "org.apache.commons.io.output.UncheckedFilterOutputStream#write(int)": ["org.apache.commons.io.function.Uncheck.accept(IOConsumer<T>,T)"],
    "org.apache.commons.io.file.attribute.FileTimes#FileTimes()": ["org.apache.commons.io.file.attribute.FileTimes.<init>()"],
    "org.apache.commons.io.IOUtils.skipFully(InputStream,long,Supplier<byte[]>)": ["org.apache.commons.io.IOUtils.skip(InputStream,long,Supplier<byte[]>)"],
    "org.apache.commons.io.input.CloseShieldInputStream.wrap(InputStream)": ["org.apache.commons.io.input.CloseShieldInputStream#CloseShieldInputStream(InputStream)"],
    "org.apache.commons.io.FileSystemUtils.freeSpace(String)": ["org.apache.commons.io.FileSystemUtils.getFreeSpace(String)"],
    "org.apache.commons.io.input.BrokenReader#read(char[],int,int)": ["org.apache.commons.io.input.BrokenReader#rethrow()"],
    "org.apache.commons.io.input.BOMInputStream.builder()": ["org.apache.commons.io.input.BOMInputStream.Builder.<init>()"],
    "org.apache.commons.io.output.UncheckedAppendableImpl#append(CharSequence,int,int)": ["org.apache.commons.io.function.Uncheck.apply(IOTriFunction<T, U, V, R>,T,U,V)"],
    "org.apache.commons.io.serialization.ValidatingObjectInputStream#reject(Pattern)": ["org.apache.commons.io.serialization.RegexpClassNameMatcher#RegexpClassNameMatcher(Pattern)"],
    "org.apache.commons.io.IOUtils.lineIterator(Reader)": ["org.apache.commons.io.LineIterator#LineIterator(Reader)"],
    "org.apache.commons.io.input.ObservableInputStream#forEachObserver(IOConsumer<Observer>)": ["org.apache.commons.io.function.IOConsumer.forAll(IOConsumer<T>,Iterable<T>)"],
    "org.apache.commons.io.IOExceptionList#IOExceptionList(String,List<? extends Throwable>)": [
        "org.apache.commons.io.IOExceptionList.isEmpty(List<? extends Throwable>)",
        "org.apache.commons.io.IOExceptionList.<init>()",
        "org.apache.commons.io.IOExceptionList.toMessage(List<? extends Throwable>)"
    ],
    "org.apache.commons.io.input.XmlStreamReader#processHttpStream(BOMInputStream,BOMInputStream,boolean,String)": [
        "org.apache.commons.io.input.XmlStreamReader#doLenientDetection(String,XmlStreamReaderException)",
        "org.apache.commons.io.input.XmlStreamReader.getXmlProlog(InputStream,String)",
        "org.apache.commons.io.input.BOMInputStream#getBOMCharsetName()",
        "org.apache.commons.io.input.XmlStreamReader#calculateHttpEncoding(String,String,String,boolean,String)"
    ],
    "org.apache.commons.io.filefilter.FileFilterUtils.fileFileFilter()": ["org.apache.commons.io.filefilter.FileFileFilter.<staticinit>()"],
    "org.apache.commons.io.input.XmlStreamReader#XmlStreamReader(InputStream,String,boolean)": ["org.apache.commons.io.input.XmlStreamReader#XmlStreamReader(InputStream,String,boolean,String)"],
    "org.apache.commons.io.file.PathUtils.deleteFile(Path,DeleteOption[]...)": [
        "org.apache.commons.io.file.PathUtils.noFollowLinkOptionArray()",
        "org.apache.commons.io.file.PathUtils.deleteFile(Path,LinkOption[],DeleteOption[]...)"
    ],
    "org.apache.commons.io.IOUtils.toString(InputStream,Charset)": [
        "org.apache.commons.io.output.StringBuilderWriter#StringBuilderWriter()",
        "org.apache.commons.io.IOUtils.copy(InputStream,Writer,Charset)",
        "org.apache.commons.io.output.StringBuilderWriter#toString()"
    ],
    "org.apache.commons.io.IOUtils.getScratchCharArrayWriteOnly()": [
        "org.apache.commons.io.IOUtils.<staticinit>()",
        "org.apache.commons.io.IOUtils.fill0(char[])"
    ],
    "org.apache.commons.io.LineIterator#next()": ["org.apache.commons.io.LineIterator#nextLine()"],
    "org.apache.commons.io.file.PathUtils.getTempDirectory()": ["org.apache.commons.io.FileUtils.getTempDirectoryPath()"],
    "org.apache.commons.io.file.PathUtils.filter(PathFilter,Path[]...)": [
        "org.apache.commons.io.file.PathUtils.<staticinit>()",
        "org.apache.commons.io.file.PathUtils.filterPaths(PathFilter,Stream<Path>,Collector<? super Path, A, R>)"
    ],
    "org.apache.commons.io.FileUtils.readFileToByteArray(File)": ["org.apache.commons.io.FileUtils.<staticinit>()"],
    "org.apache.commons.io.FileUtils#FileUtils()": ["org.apache.commons.io.FileUtils.<init>()"],
    "org.apache.commons.io.input.ObservableInputStream#notify(byte[],int,int,IOException)": [
        "org.apache.commons.io.input.ObservableInputStream#noteError(IOException)",
        "org.apache.commons.io.input.ObservableInputStream#noteFinished()",
        "org.apache.commons.io.IOUtils.<staticinit>()",
        "org.apache.commons.io.input.ObservableInputStream#noteDataBytes(byte[],int,int)"
    ],
    "org.apache.commons.io.file.PathUtils.setReadOnly(Path,boolean,LinkOption[]...)": [
        "org.apache.commons.io.file.PathUtils.getParent(Path)",
        "org.apache.commons.io.file.PathUtils.isPosix(Path,LinkOption[]...)",
        "org.apache.commons.io.file.PathUtils.setDosReadOnly(Path,boolean,LinkOption[]...)",
        "org.apache.commons.io.file.PathUtils.setPosixReadOnlyFile(Path,boolean,LinkOption[]...)",
        "org.apache.commons.io.file.PathUtils.setPosixDeletePermissions(Path,boolean,LinkOption[]...)"
    ],
    "org.apache.commons.io.input.NullInputStream#mark(int)": ["org.apache.commons.io.input.UnsupportedOperationExceptions.mark()"],
    "org.apache.commons.io.output.UncheckedFilterWriter.Builder#get()": [
        "org.apache.commons.io.build.AbstractStreamBuilder#getWriter()",
        "org.apache.commons.io.output.UncheckedFilterWriter#UncheckedFilterWriter(Writer)"
    ],
    "org.apache.commons.io.file.AccumulatorPathVisitor.withLongCounters(PathFilter,PathFilter)": [
        "org.apache.commons.io.file.AccumulatorPathVisitor#AccumulatorPathVisitor(PathCounters,PathFilter,PathFilter)",
        "org.apache.commons.io.file.Counters.longPathCounters()"
    ],
    "org.apache.commons.io.output.UncheckedAppendableImpl#append(char)": ["org.apache.commons.io.function.Uncheck.apply(IOFunction<T, R>,T)"],
    "org.apache.commons.io.filefilter.CanExecuteFileFilter#CanExecuteFileFilter()": [
        "org.apache.commons.io.filefilter.AbstractFileFilter#AbstractFileFilter()",
        "org.apache.commons.io.filefilter.CanExecuteFileFilter.<init>()"
    ],
    "org.apache.commons.io.FilenameUtils.normalizeNoEndSeparator(String,boolean)": [
        "org.apache.commons.io.FilenameUtils.toSeparator(boolean)",
        "org.apache.commons.io.FilenameUtils.doNormalize(String,char,boolean)"
    ],
    "org.apache.commons.io.input.UncheckedBufferedReader.Builder.<init>()": ["org.apache.commons.io.build.AbstractStreamBuilder.<init>()"],
    "org.apache.commons.io.function.UncheckedIOIterator#UncheckedIOIterator(IOIterator<E>)": ["org.apache.commons.io.function.UncheckedIOIterator.<init>()"],
    "org.apache.commons.io.IOCase#readResolve()": ["org.apache.commons.io.IOCase.forName(String)"],
    "org.apache.commons.io.file.CountingPathVisitor.defaultDirFilter()": ["org.apache.commons.io.filefilter.TrueFileFilter.<staticinit>()"],
    "org.apache.commons.io.input.AutoCloseInputStream#AutoCloseInputStream(InputStream)": [
        "org.apache.commons.io.input.ProxyInputStream#ProxyInputStream(InputStream)",
        "org.apache.commons.io.input.AutoCloseInputStream.<init>()",
        "org.apache.commons.io.input.ClosedInputStream.ifNull(InputStream)"
    ],
    "org.apache.commons.io.output.BrokenWriter#BrokenWriter()": ["org.apache.commons.io.output.BrokenWriter#BrokenWriter(Supplier<Throwable>)"],
    "org.apache.commons.io.build.AbstractOrigin#getByteArray(long,int)": [
        "org.apache.commons.io.build.AbstractOrigin.CharSequenceOrigin#getByteArray()",
        "org.apache.commons.io.build.AbstractOrigin.ReaderOrigin#getByteArray()",
        "org.apache.commons.io.build.AbstractOrigin.InputStreamOrigin#getByteArray()",
        "org.apache.commons.io.build.AbstractOrigin.ByteArrayOrigin#getByteArray()",
        "org.apache.commons.io.build.AbstractOrigin#getByteArray()"
    ],
    "org.apache.commons.io.ThreadMonitor.start(Duration)": ["org.apache.commons.io.ThreadMonitor.start(Thread,Duration)"],
    "org.apache.commons.io.FileUtils.copyURLToFile(URL,File,int,int)": [
        "org.apache.commons.io.CloseableURLConnection#setConnectTimeout(int)",
        "org.apache.commons.io.CloseableURLConnection.open(URL)",
        "org.apache.commons.io.FileUtils.copyInputStreamToFile(InputStream,File)",
        "org.apache.commons.io.CloseableURLConnection#getInputStream()",
        "org.apache.commons.io.CloseableURLConnection#setReadTimeout(int)"
    ],
    "org.apache.commons.io.input.BOMInputStream.Builder.<staticinit>()": ["org.apache.commons.io.ByteOrderMark.<staticinit>()"],
    "org.apache.commons.io.filefilter.AndFileFilter#AndFileFilter(IOFileFilter,IOFileFilter)": [
        "org.apache.commons.io.filefilter.AndFileFilter#AndFileFilter(int)",
        "org.apache.commons.io.filefilter.AndFileFilter#addFileFilter(IOFileFilter)"
    ],
    "org.apache.commons.io.FilenameUtils.equals(String,String)": [
        "org.apache.commons.io.IOCase.<staticinit>()",
        "org.apache.commons.io.FilenameUtils.equals(String,String,boolean,IOCase)"
    ],
    "org.apache.commons.io.input.MessageDigestCalculatingInputStream#MessageDigestCalculatingInputStream(InputStream,String)": ["org.apache.commons.io.input.MessageDigestCalculatingInputStream#MessageDigestCalculatingInputStream(InputStream,MessageDigest)"],
    "org.apache.commons.io.input.NullReader#read()": [
        "org.apache.commons.io.input.NullReader#processChar()",
        "org.apache.commons.io.input.NullReader#doEndOfFile()"
    ],
    "org.apache.commons.io.output.LockableFileWriter.builder()": ["org.apache.commons.io.output.LockableFileWriter.Builder#Builder()"],
    "org.apache.commons.io.function.IOBinaryOperator#asBinaryOperator()": ["org.apache.commons.io.function.Uncheck.apply(IOBiFunction<T, U, R>,T,U)"],
    "org.apache.commons.io.function.Erase.apply(IOFunction<? super T, ? extends R>,T)": ["org.apache.commons.io.function.Erase.rethrow(Throwable)"],
    "org.apache.commons.io.input.NullInputStream#handleEof()": [
        "org.apache.commons.io.input.NullInputStream#checkThrowEof(String)",
        "org.apache.commons.io.IOUtils.<staticinit>()"
    ],
    "org.apache.commons.io.file.PathUtils.fileContentEquals(Path,Path,LinkOption[],OpenOption[])": [
        "org.apache.commons.io.IOUtils.contentEquals(InputStream,InputStream)",
        "org.apache.commons.io.file.PathUtils.exists(Path,LinkOption[]...)",
        "org.apache.commons.io.RandomAccessFileMode#create(Path)",
        "org.apache.commons.io.RandomAccessFiles.contentEquals(RandomAccessFile,RandomAccessFile)",
        "org.apache.commons.io.RandomAccessFileMode.<staticinit>()"
    ],
    "org.apache.commons.io.serialization.ValidatingObjectInputStream#ValidatingObjectInputStream(InputStream)": ["org.apache.commons.io.serialization.ValidatingObjectInputStream.<init>()"],
    "org.apache.commons.io.IOUtils.toCharArray(Reader)": ["org.apache.commons.io.IOUtils.copy(Reader,Writer)"],
    "org.apache.commons.io.IOUtils.write(StringBuffer,OutputStream)": ["org.apache.commons.io.IOUtils.write(StringBuffer,OutputStream,String)"],
    "org.apache.commons.io.EndianUtils.writeSwappedShort(OutputStream,short)": [
        "org.apache.commons.io.output.BrokenOutputStream#write(int)",
        "org.apache.commons.io.output.AppendableOutputStream#write(int)",
        "org.apache.commons.io.output.WriterOutputStream#write(int)",
        "org.apache.commons.io.output.DemuxOutputStream#write(int)",
        "org.apache.commons.io.output.AbstractByteArrayOutputStream#write(int)",
        "org.apache.commons.io.output.UnsynchronizedByteArrayOutputStream#write(int)",
        "org.apache.commons.io.output.NullOutputStream#write(int)",
        "org.apache.commons.io.output.QueueOutputStream#write(int)",
        "org.apache.commons.io.output.ByteArrayOutputStream#write(int)",
        "org.apache.commons.io.output.ClosedOutputStream#write(int)",
        "org.apache.commons.io.output.ThresholdingOutputStream#write(int)"
    ],
    "org.apache.commons.io.file.Counters.noopPathCounters()": ["org.apache.commons.io.file.Counters.NoopPathCounters.<staticinit>()"],
    "org.apache.commons.io.build.AbstractOriginSupplier.newByteArrayOrigin(byte[])": ["org.apache.commons.io.build.AbstractOrigin.ByteArrayOrigin#ByteArrayOrigin(byte[])"],
    "org.apache.commons.io.output.FileWriterWithEncoding.Builder#get()": [
        "org.apache.commons.io.build.AbstractOriginSupplier#checkOrigin()",
        "org.apache.commons.io.build.AbstractOrigin.URIOrigin#getFile()",
        "org.apache.commons.io.output.FileWriterWithEncoding#FileWriterWithEncoding(OutputStreamWriter)",
        "org.apache.commons.io.build.AbstractOrigin.PathOrigin#getFile()",
        "org.apache.commons.io.build.AbstractStreamBuilder#getCharset()",
        "org.apache.commons.io.build.AbstractOrigin#getFile()",
        "org.apache.commons.io.build.AbstractOrigin.FileOrigin#getFile()",
        "org.apache.commons.io.output.FileWriterWithEncoding.initWriter(File,Object,boolean)"
    ],
    "org.apache.commons.io.IOUtils.contentEqualsIgnoreEOL(Reader,Reader)": [
        "org.apache.commons.io.IOUtils.contentEqualsIgnoreEOL(BufferedReader,BufferedReader)",
        "org.apache.commons.io.IOUtils.toBufferedReader(Reader)"
    ],
    "org.apache.commons.io.filefilter.SuffixFileFilter#SuffixFileFilter(String,IOCase)": [
        "org.apache.commons.io.filefilter.AbstractFileFilter#AbstractFileFilter()",
        "org.apache.commons.io.filefilter.SuffixFileFilter.<init>()",
        "org.apache.commons.io.IOCase.value(IOCase,IOCase)",
        "org.apache.commons.io.IOCase.<staticinit>()"
    ],
    "org.apache.commons.io.FileCleaningTracker.Reaper#run()": [
        "org.apache.commons.io.FileCleaningTracker.Tracker#delete()",
        "org.apache.commons.io.FileCleaningTracker.Tracker#getPath()"
    ],
    "org.apache.commons.io.build.AbstractStreamBuilder#getOutputStream()": [
        "org.apache.commons.io.build.AbstractStreamBuilder#getOpenOptions()",
        "org.apache.commons.io.build.AbstractOriginSupplier#checkOrigin()",
        "org.apache.commons.io.build.AbstractOrigin.WriterOrigin#getOutputStream(OpenOption[]...)",
        "org.apache.commons.io.build.AbstractOrigin.OutputStreamOrigin#getOutputStream(OpenOption[]...)",
        "org.apache.commons.io.build.AbstractOrigin#getOutputStream(OpenOption[]...)"
    ],
    "org.apache.commons.io.filefilter.FileFilterUtils.makeCVSAware(IOFileFilter)": [
        "org.apache.commons.io.filefilter.FileFilterUtils.and(IOFileFilter[]...)",
        "org.apache.commons.io.filefilter.FileFilterUtils.<staticinit>()"
    ],
    "org.apache.commons.io.comparator.NameFileComparator#NameFileComparator(IOCase)": [
        "org.apache.commons.io.IOCase.value(IOCase,IOCase)",
        "org.apache.commons.io.comparator.AbstractFileComparator.<init>()",
        "org.apache.commons.io.IOCase.<staticinit>()",
        "org.apache.commons.io.comparator.NameFileComparator.<init>()"
    ],
    "org.apache.commons.io.output.ProxyOutputStream#flush()": [
        "org.apache.commons.io.output.ClosedOutputStream#flush()",
        "org.apache.commons.io.output.WriterOutputStream#flush()",
        "org.apache.commons.io.output.ThresholdingOutputStream#flush()",
        "org.apache.commons.io.output.ProxyOutputStream#handleIOException(IOException)",
        "org.apache.commons.io.output.DemuxOutputStream#flush()",
        "org.apache.commons.io.output.TaggedOutputStream#handleIOException(IOException)",
        "org.apache.commons.io.output.BrokenOutputStream#flush()"
    ],
    "org.apache.commons.io.CloseableURLConnection#getDefaultUseCaches()": ["org.apache.commons.io.CloseableURLConnection#getDefaultUseCaches()"],
    "org.apache.commons.io.filefilter.NameFileFilter#toString()": [
        "org.apache.commons.io.filefilter.AbstractFileFilter#append(Object[],StringBuilder)",
        "org.apache.commons.io.filefilter.AbstractFileFilter#toString()"
    ],
    "org.apache.commons.io.IOUtils.read(IOTriFunction<byte[], Integer, Integer, Integer>,byte[],int,int)": ["org.apache.commons.io.IOUtils.<staticinit>()"],
    "org.apache.commons.io.filefilter.SymbolicLinkFileFilter#accept(Path,BasicFileAttributes)": [
        "org.apache.commons.io.filefilter.AbstractFileFilter#toFileVisitResult(boolean)",
        "org.apache.commons.io.filefilter.SymbolicLinkFileFilter#isSymbolicLink(Path)"
    ],
    "org.apache.commons.io.input.buffer.CircularBufferInputStream#read()": [
        "org.apache.commons.io.input.buffer.CircularByteBuffer#read()",
        "org.apache.commons.io.IOUtils.<staticinit>()",
        "org.apache.commons.io.input.buffer.CircularBufferInputStream#haveBytes(int)"
    ],
    "org.apache.commons.io.StreamIterator#hasNext()": [
        "org.apache.commons.io.function.UncheckedIOIterator#hasNext()",
        "org.apache.commons.io.LineIterator#hasNext()",
        "org.apache.commons.io.StreamIterator#close()",
        "org.apache.commons.io.StreamIterator#hasNext()",
        "org.apache.commons.io.function.IOStream.iterate(T,IOUnaryOperator<T>)$Iterator$1#hasNext()"
    ],
    "org.apache.commons.io.file.CleaningPathVisitor#CleaningPathVisitor(PathCounters,String[]...)": [
        "org.apache.commons.io.file.PathUtils.<staticinit>()",
        "org.apache.commons.io.file.CleaningPathVisitor#CleaningPathVisitor(PathCounters,DeleteOption[],String[]...)"
    ],
    "org.apache.commons.io.monitor.FileAlterationObserver#fireOnChange(FileEntry,File)": [
        "org.apache.commons.io.monitor.FileAlterationListenerAdaptor#onDirectoryChange(File)",
        "org.apache.commons.io.monitor.FileAlterationListenerAdaptor#onFileChange(File)",
        "org.apache.commons.io.monitor.FileEntry#isDirectory()",
        "org.apache.commons.io.monitor.FileEntry#refresh(File)"
    ],
    "org.apache.commons.io.input.UnsynchronizedByteArrayInputStream#read()": ["org.apache.commons.io.input.UnsynchronizedByteArrayInputStream.<staticinit>()"],
    "org.apache.commons.io.filefilter.AndFileFilter#AndFileFilter(List<IOFileFilter>)": ["org.apache.commons.io.filefilter.AndFileFilter#AndFileFilter(ArrayList<IOFileFilter>)"],
    "org.apache.commons.io.input.MessageDigestInputStream.Builder#Builder()": [
        "org.apache.commons.io.build.AbstractStreamBuilder.<init>()",
        "org.apache.commons.io.input.MessageDigestInputStream.Builder.<init>()"
    ],
    "org.apache.commons.io.output.UncheckedFilterWriter#UncheckedFilterWriter(Writer)": ["org.apache.commons.io.output.UncheckedFilterWriter.<init>()"],
    "org.apache.commons.io.output.UncheckedFilterWriter#flush()": ["org.apache.commons.io.function.Uncheck.run(IORunnable)"],
    "org.apache.commons.io.input.RandomAccessFileInputStream#availableLong()": ["org.apache.commons.io.input.AbstractInputStream#isClosed()"],
    "org.apache.commons.io.input.AutoCloseInputStream#finalize()": ["org.apache.commons.io.input.AutoCloseInputStream#close()"],
    "org.apache.commons.io.input.MessageDigestCalculatingInputStream.Builder#Builder()": [
        "org.apache.commons.io.build.AbstractStreamBuilder.<init>()",
        "org.apache.commons.io.input.MessageDigestCalculatingInputStream.Builder.<init>()",
        "org.apache.commons.io.input.MessageDigestCalculatingInputStream.getDefaultMessageDigest()"
    ],
    "org.apache.commons.io.input.UnsynchronizedBufferedInputStream#read()": [
        "org.apache.commons.io.input.UnsynchronizedBufferedInputStream#fillBuffer(InputStream,byte[])",
        "org.apache.commons.io.IOUtils.<staticinit>()"
    ],
    "org.apache.commons.io.input.UnsynchronizedFilterInputStream#close()": [
        "org.apache.commons.io.input.AbstractInputStream#close()",
        "org.apache.commons.io.input.CircularInputStream#close()",
        "org.apache.commons.io.input.ReaderInputStream#close()",
        "org.apache.commons.io.input.BufferedFileChannelInputStream#close()",
        "org.apache.commons.io.input.DemuxInputStream#close()",
        "org.apache.commons.io.input.CharSequenceInputStream#close()",
        "org.apache.commons.io.input.WindowsLineEndingInputStream#close()",
        "org.apache.commons.io.input.BrokenInputStream#close()",
        "org.apache.commons.io.input.RandomAccessFileInputStream#close()",
        "org.apache.commons.io.input.UnixLineEndingInputStream#close()",
        "org.apache.commons.io.input.UnsynchronizedFilterInputStream#close()",
        "org.apache.commons.io.input.NullInputStream#close()",
        "org.apache.commons.io.input.MemoryMappedFileInputStream#close()",
        "org.apache.commons.io.input.UnsynchronizedBufferedInputStream#close()"
    ],
    "org.apache.commons.io.input.Tailer.RandomAccessFileBridge#RandomAccessFileBridge(File,String)": ["org.apache.commons.io.input.Tailer.RandomAccessFileBridge.<init>()"],
    "org.apache.commons.io.input.AbstractCharacterFilterReader#read(char[],int,int)": ["org.apache.commons.io.IOUtils.<staticinit>()"],
    "org.apache.commons.io.input.QueueInputStream.Builder.<init>()": ["org.apache.commons.io.build.AbstractStreamBuilder.<init>()"],
    "org.apache.commons.io.monitor.FileAlterationMonitor#FileAlterationMonitor()": ["org.apache.commons.io.monitor.FileAlterationMonitor#FileAlterationMonitor(long)"],
    "org.apache.commons.io.FileUtils.writeByteArrayToFile(File,byte[],int,int,boolean)": [
        "org.apache.commons.io.output.WriterOutputStream#write(byte[],int,int)",
        "org.apache.commons.io.output.AbstractByteArrayOutputStream#write(byte[],int,int)",
        "org.apache.commons.io.output.NullOutputStream#write(byte[],int,int)",
        "org.apache.commons.io.FileUtils.newOutputStream(File,boolean)",
        "org.apache.commons.io.output.UnsynchronizedByteArrayOutputStream#write(byte[],int,int)",
        "org.apache.commons.io.output.ClosedOutputStream#write(byte[],int,int)",
        "org.apache.commons.io.output.ThresholdingOutputStream#write(byte[],int,int)",
        "org.apache.commons.io.output.ByteArrayOutputStream#write(byte[],int,int)"
    ],
    "org.apache.commons.io.function.IOStream#count()": ["org.apache.commons.io.function.IOBaseStreamAdapter#unwrap()"],
    "org.apache.commons.io.FilenameUtils#FilenameUtils()": ["org.apache.commons.io.FilenameUtils.<init>()"],
    "org.apache.commons.io.input.ProxyInputStream#reset()": [
        "org.apache.commons.io.input.BrokenInputStream#reset()",
        "org.apache.commons.io.input.CharSequenceInputStream#reset()",
        "org.apache.commons.io.input.NullInputStream#reset()",
        "org.apache.commons.io.input.UnsynchronizedBufferedInputStream#reset()",
        "org.apache.commons.io.input.UnsynchronizedByteArrayInputStream#reset()",
        "org.apache.commons.io.input.TaggedInputStream#handleIOException(IOException)",
        "org.apache.commons.io.input.UnsynchronizedFilterInputStream#reset()",
        "org.apache.commons.io.input.ProxyInputStream#handleIOException(IOException)"
    ],
    "org.apache.commons.io.filefilter.FileFilterUtils.prefixFileFilter(String)": ["org.apache.commons.io.filefilter.PrefixFileFilter#PrefixFileFilter(String)"],
    "org.apache.commons.io.input.BOMInputStream#matches(ByteOrderMark)": [
        "org.apache.commons.io.ByteOrderMark#get(int)",
        "org.apache.commons.io.ByteOrderMark#length()"
    ],
    "org.apache.commons.io.file.attribute.FileTimes.toNtfsTime(FileTime)": ["org.apache.commons.io.file.attribute.FileTimes.<staticinit>()"],
    "org.apache.commons.io.output.UnsynchronizedByteArrayOutputStream#toByteArray()": ["org.apache.commons.io.output.AbstractByteArrayOutputStream#toByteArrayImpl()"],
    "org.apache.commons.io.build.AbstractOrigin.ReaderOrigin#getByteArray()": ["org.apache.commons.io.IOUtils.toByteArray(Reader,Charset)"],
    "org.apache.commons.io.input.Tailer.create(File,TailerListener)": [
        "org.apache.commons.io.build.AbstractOriginSupplier#setFile(File)",
        "org.apache.commons.io.input.Tailer.builder()"
    ],
    "org.apache.commons.io.input.AbstractInputStream#checkOpen()": [
        "org.apache.commons.io.input.Input.checkOpen(boolean)",
        "org.apache.commons.io.input.AbstractInputStream#isClosed()"
    ],
    "org.apache.commons.io.output.ThresholdingOutputStream#close()": [
        "org.apache.commons.io.output.AbstractByteArrayOutputStream#close()",
        "org.apache.commons.io.output.DeferredFileOutputStream#getStream()",
        "org.apache.commons.io.output.ThresholdingOutputStream#flush()",
        "org.apache.commons.io.output.DemuxOutputStream#close()",
        "org.apache.commons.io.output.WriterOutputStream#close()",
        "org.apache.commons.io.output.ThresholdingOutputStream#close()",
        "org.apache.commons.io.output.ThresholdingOutputStream#getStream()",
        "org.apache.commons.io.output.DeferredFileOutputStream#close()",
        "org.apache.commons.io.output.BrokenOutputStream#close()"
    ],
    "org.apache.commons.io.file.CopyDirectoryVisitor#CopyDirectoryVisitor(PathCounters,PathFilter,PathFilter,Path,Path,CopyOption[]...)": [
        "org.apache.commons.io.file.CountingPathVisitor#CountingPathVisitor(PathCounters,PathFilter,PathFilter)",
        "org.apache.commons.io.file.CopyDirectoryVisitor.<init>()",
        "org.apache.commons.io.file.CopyDirectoryVisitor.toCopyOption(CopyOption[]...)"
    ],
    "org.apache.commons.io.input.BoundedInputStream#skip(long)": [
        "org.apache.commons.io.input.BoundedInputStream#toReadLen(long)",
        "org.apache.commons.io.input.ProxyInputStream#skip(long)"
    ],
    "org.apache.commons.io.function.IOStream#toArray()": ["org.apache.commons.io.function.IOBaseStreamAdapter#unwrap()"],
    "org.apache.commons.io.IOUtils.lineIterator(InputStream,String)": [
        "org.apache.commons.io.IOUtils.lineIterator(InputStream,Charset)",
        "org.apache.commons.io.Charsets.toCharset(String)"
    ],
    "org.apache.commons.io.output.ProxyWriter#append(CharSequence,int,int)": [
        "org.apache.commons.io.output.ProxyWriter#afterWrite(int)",
        "org.apache.commons.io.output.ProxyWriter#beforeWrite(int)",
        "org.apache.commons.io.output.ProxyCollectionWriter#append(CharSequence,int,int)",
        "org.apache.commons.io.output.NullWriter#append(CharSequence,int,int)",
        "org.apache.commons.io.output.TaggedWriter#handleIOException(IOException)",
        "org.apache.commons.io.output.ProxyWriter#handleIOException(IOException)",
        "org.apache.commons.io.output.StringBuilderWriter#append(CharSequence,int,int)",
        "org.apache.commons.io.output.FilterCollectionWriter#append(CharSequence,int,int)",
        "org.apache.commons.io.output.AppendableWriter#append(CharSequence,int,int)"
    ],
    "org.apache.commons.io.output.DeferredFileOutputStream.Builder#setDirectory(Path)": ["org.apache.commons.io.output.DeferredFileOutputStream.toPath(Path,Supplier<Path>)"],
    "org.apache.commons.io.input.MessageDigestCalculatingInputStream.getDefaultMessageDigest()": ["org.apache.commons.io.input.MessageDigestCalculatingInputStream.<staticinit>()"],
    "org.apache.commons.io.input.SequenceReader#close()": ["org.apache.commons.io.input.SequenceReader#nextReader()"],
    "org.apache.commons.io.input.NullReader#skip(long)": ["org.apache.commons.io.input.NullReader#doEndOfFile()"],
    "org.apache.commons.io.IOUtils.write(char[],OutputStream)": ["org.apache.commons.io.IOUtils.write(char[],OutputStream,Charset)"],
    "org.apache.commons.io.input.ProxyReader#mark(int)": [
        "org.apache.commons.io.input.NullReader#mark(int)",
        "org.apache.commons.io.input.UnsynchronizedBufferedReader#mark(int)",
        "org.apache.commons.io.input.BrokenReader#mark(int)",
        "org.apache.commons.io.input.ProxyReader#handleIOException(IOException)",
        "org.apache.commons.io.input.CharSequenceReader#mark(int)",
        "org.apache.commons.io.input.BoundedReader#mark(int)",
        "org.apache.commons.io.input.TaggedReader#handleIOException(IOException)"
    ],
    "org.apache.commons.io.FilenameUtils.wildcardMatch(String,String,IOCase)": [
        "org.apache.commons.io.IOCase#checkRegionMatches(String,int,String)",
        "org.apache.commons.io.IOCase.value(IOCase,IOCase)",
        "org.apache.commons.io.IOCase#checkIndexOf(String,int,String)",
        "org.apache.commons.io.FilenameUtils.splitOnTokens(String)",
        "org.apache.commons.io.IOCase.<staticinit>()",
        "org.apache.commons.io.FilenameUtils.<staticinit>()"
    ],
    "org.apache.commons.io.output.FileWriterWithEncoding.initWriter(File,Object,boolean)": [
        "org.apache.commons.io.FileUtils.deleteQuietly(File)",
        "org.apache.commons.io.Charsets.toCharset(Charset)",
        "org.apache.commons.io.IOUtils.close(Closeable)",
        "org.apache.commons.io.FileUtils.newOutputStream(File,boolean)"
    ],
    "org.apache.commons.io.build.AbstractOriginSupplier.newPathOrigin(Path)": ["org.apache.commons.io.build.AbstractOrigin.PathOrigin#PathOrigin(Path)"],
    "org.apache.commons.io.output.WriterOutputStream.builder()": ["org.apache.commons.io.output.WriterOutputStream.Builder#Builder()"],
    "org.apache.commons.io.FileSystem#isLegalFileName(CharSequence)": ["org.apache.commons.io.FileSystem#isReservedFileName(CharSequence)"],
    "org.apache.commons.io.file.FilesUncheck.readAllBytes(Path)": ["org.apache.commons.io.function.Uncheck.apply(IOFunction<T, R>,T)"],
    "org.apache.commons.io.monitor.FileAlterationObserver#checkAndFire(FileEntry,FileEntry[],File[])": [
        "org.apache.commons.io.comparator.DirectoryFileComparator#compare(File,File)",
        "org.apache.commons.io.comparator.CompositeFileComparator#compare(File,File)",
        "org.apache.commons.io.comparator.ExtensionFileComparator#compare(File,File)",
        "org.apache.commons.io.monitor.FileEntry#getFile()",
        "org.apache.commons.io.monitor.FileAlterationObserver#fireOnDelete(FileEntry)",
        "org.apache.commons.io.monitor.FileEntry.<staticinit>()",
        "org.apache.commons.io.comparator.NameFileComparator#compare(File,File)",
        "org.apache.commons.io.monitor.FileAlterationObserver#checkAndFire(FileEntry,FileEntry[],File[])",
        "org.apache.commons.io.comparator.PathFileComparator#compare(File,File)",
        "org.apache.commons.io.monitor.FileAlterationObserver#fireOnCreate(FileEntry)",
        "org.apache.commons.io.monitor.FileAlterationObserver#createFileEntry(FileEntry,File)",
        "org.apache.commons.io.FileUtils.<staticinit>()",
        "org.apache.commons.io.comparator.ReverseFileComparator#compare(File,File)",
        "org.apache.commons.io.comparator.DefaultFileComparator#compare(File,File)",
        "org.apache.commons.io.monitor.FileEntry#getChildren()",
        "org.apache.commons.io.monitor.FileEntry#setChildren(FileEntry[]...)",
        "org.apache.commons.io.comparator.SizeFileComparator#compare(File,File)",
        "org.apache.commons.io.comparator.LastModifiedFileComparator#compare(File,File)",
        "org.apache.commons.io.monitor.FileAlterationObserver#fireOnChange(FileEntry,File)",
        "org.apache.commons.io.monitor.FileAlterationObserver#listFiles(File)"
    ],
    "org.apache.commons.io.file.FilesUncheck.write(Path,Iterable<? extends CharSequence>,OpenOption[]...)": ["org.apache.commons.io.function.Uncheck.apply(IOTriFunction<T, U, V, R>,T,U,V)"],
    "org.apache.commons.io.CloseableURLConnection#getRequestProperties()": ["org.apache.commons.io.CloseableURLConnection#getRequestProperties()"],
    "org.apache.commons.io.build.AbstractStreamBuilder#setCharsetDefault(Charset)": ["org.apache.commons.io.build.AbstractSupplier#asThis()"],
    "org.apache.commons.io.build.AbstractOrigin#AbstractOrigin(T)": [
        "org.apache.commons.io.build.AbstractOrigin.<init>()",
        "org.apache.commons.io.build.AbstractSupplier.<init>()"
    ],
    "org.apache.commons.io.input.Tailer.Builder#get()": [
        "org.apache.commons.io.build.AbstractStreamBuilder#getBufferSize()",
        "org.apache.commons.io.build.AbstractStreamBuilder#getCharset()",
        "org.apache.commons.io.input.Tailer#Tailer(Tailable,Charset,TailerListener,Duration,boolean,boolean,int)"
    ],
    "org.apache.commons.io.input.BrokenReader#rethrow()": ["org.apache.commons.io.function.Erase.rethrow(Throwable)"],
    "org.apache.commons.io.input.NullInputStream#NullInputStream(long)": ["org.apache.commons.io.input.NullInputStream#NullInputStream(long,boolean,boolean)"],
    "org.apache.commons.io.input.BOMInputStream#BOMInputStream(InputStream,ByteOrderMark[]...)": ["org.apache.commons.io.input.BOMInputStream#BOMInputStream(InputStream,boolean,ByteOrderMark[]...)"],
    "org.apache.commons.io.FileUtils.iterateFilesAndDirs(File,IOFileFilter,IOFileFilter)": ["org.apache.commons.io.FileUtils.listFilesAndDirs(File,IOFileFilter,IOFileFilter)"],
    "org.apache.commons.io.CopyUtils#CopyUtils()": ["org.apache.commons.io.CopyUtils.<init>()"],
    "org.apache.commons.io.input.buffer.PeekableInputStream#peek(byte[],int,int)": [
        "org.apache.commons.io.input.buffer.CircularByteBuffer#getCurrentNumberOfBytes()",
        "org.apache.commons.io.input.buffer.CircularBufferInputStream#fillBuffer()",
        "org.apache.commons.io.input.buffer.CircularByteBuffer#peek(byte[],int,int)"
    ],
    "org.apache.commons.io.output.ProxyOutputStream#write(byte[])": [
        "org.apache.commons.io.output.ProxyOutputStream#beforeWrite(int)",
        "org.apache.commons.io.output.WriterOutputStream#write(byte[])",
        "org.apache.commons.io.IOUtils.length(byte[])",
        "org.apache.commons.io.output.ThresholdingOutputStream#write(byte[])",
        "org.apache.commons.io.output.NullOutputStream#write(byte[])",
        "org.apache.commons.io.output.ProxyOutputStream#handleIOException(IOException)",
        "org.apache.commons.io.output.CountingOutputStream#beforeWrite(int)",
        "org.apache.commons.io.output.ProxyOutputStream#afterWrite(int)",
        "org.apache.commons.io.output.TaggedOutputStream#handleIOException(IOException)"
    ],
    "org.apache.commons.io.function.IOSpliterator#characteristics()": [
        "org.apache.commons.io.function.IOSpliteratorAdapter#unwrap()",
        "org.apache.commons.io.function.UncheckedIOSpliterator#characteristics()"
    ],
    "org.apache.commons.io.input.MessageDigestCalculatingInputStream.MessageDigestMaintainingObserver#MessageDigestMaintainingObserver(MessageDigest)": [
        "org.apache.commons.io.input.ObservableInputStream.Observer.<init>()",
        "org.apache.commons.io.input.MessageDigestCalculatingInputStream.MessageDigestMaintainingObserver.<init>()"
    ],
    "org.apache.commons.io.FileSystem#isReservedFileName(CharSequence)": ["org.apache.commons.io.FileSystem#trimExtension(CharSequence)"],
    "org.apache.commons.io.file.spi.FileSystemProviders#getFileSystemProvider(String)": ["org.apache.commons.io.file.spi.FileSystemProviders.<staticinit>()"],
    "org.apache.commons.io.filefilter.DirectoryFileFilter#accept(Path,BasicFileAttributes)": ["org.apache.commons.io.filefilter.AbstractFileFilter#toFileVisitResult(boolean)"],
    "org.apache.commons.io.CopyUtils.copy(Reader,OutputStream,String)": ["org.apache.commons.io.CopyUtils.copy(Reader,Writer)"],
    "org.apache.commons.io.serialization.ValidatingObjectInputStream#checkClassName(String)": [
        "org.apache.commons.io.serialization.WildcardClassNameMatcher#matches(String)",
        "org.apache.commons.io.serialization.ValidatingObjectInputStream#invalidClassNameFound(String)",
        "org.apache.commons.io.serialization.RegexpClassNameMatcher#matches(String)",
        "org.apache.commons.io.serialization.FullClassNameMatcher#matches(String)"
    ],
    "org.apache.commons.io.filefilter.AbstractFileFilter#AbstractFileFilter()": ["org.apache.commons.io.filefilter.AbstractFileFilter#AbstractFileFilter(FileVisitResult,FileVisitResult)"],
    "org.apache.commons.io.EndianUtils#EndianUtils()": ["org.apache.commons.io.EndianUtils.<init>()"],
    "org.apache.commons.io.file.FilesUncheck.isSameFile(Path,Path)": ["org.apache.commons.io.function.Uncheck.apply(IOBiFunction<T, U, R>,T,U)"],
    "org.apache.commons.io.output.ProxyWriter#append(char)": [
        "org.apache.commons.io.output.StringBuilderWriter#append(char)",
        "org.apache.commons.io.output.ProxyWriter#afterWrite(int)",
        "org.apache.commons.io.output.AppendableWriter#append(char)",
        "org.apache.commons.io.output.ProxyWriter#beforeWrite(int)",
        "org.apache.commons.io.output.ProxyCollectionWriter#append(char)",
        "org.apache.commons.io.output.TaggedWriter#handleIOException(IOException)",
        "org.apache.commons.io.output.ProxyWriter#handleIOException(IOException)",
        "org.apache.commons.io.output.FilterCollectionWriter#append(char)",
        "org.apache.commons.io.output.NullWriter#append(char)"
    ],
    "org.apache.commons.io.IOUtils.write(String,OutputStream,String)": [
        "org.apache.commons.io.IOUtils.write(String,OutputStream,Charset)",
        "org.apache.commons.io.Charsets.toCharset(String)"
    ],
    "org.apache.commons.io.input.ReadAheadInputStream#waitForAsyncReadComplete()": ["org.apache.commons.io.input.ReadAheadInputStream#checkReadException()"],
    "org.apache.commons.io.filefilter.CanWriteFileFilter#CanWriteFileFilter()": [
        "org.apache.commons.io.filefilter.AbstractFileFilter#AbstractFileFilter()",
        "org.apache.commons.io.filefilter.CanWriteFileFilter.<init>()"
    ],
    "org.apache.commons.io.input.ReaderInputStream#ReaderInputStream(Reader,String,int)": [
        "org.apache.commons.io.Charsets.toCharset(String)",
        "org.apache.commons.io.input.ReaderInputStream#ReaderInputStream(Reader,Charset,int)"
    ],
    "org.apache.commons.io.input.ThrottledInputStream#toString()": [
        "org.apache.commons.io.input.ThrottledInputStream#getBytesPerSecond()",
        "org.apache.commons.io.input.CountingInputStream#getByteCount()"
    ],
    "org.apache.commons.io.input.MessageDigestCalculatingInputStream#MessageDigestCalculatingInputStream(InputStream,MessageDigest)": [
        "org.apache.commons.io.input.ObservableInputStream#ObservableInputStream(InputStream,List<Observer>)",
        "org.apache.commons.io.input.MessageDigestCalculatingInputStream.MessageDigestMaintainingObserver#MessageDigestMaintainingObserver(MessageDigest)",
        "org.apache.commons.io.input.MessageDigestCalculatingInputStream.<init>()"
    ],
    "org.apache.commons.io.filefilter.SuffixFileFilter#accept(Path,BasicFileAttributes)": [
        "org.apache.commons.io.filefilter.AbstractFileFilter#toFileVisitResult(boolean)",
        "org.apache.commons.io.filefilter.SuffixFileFilter#accept(String)",
        "org.apache.commons.io.file.PathUtils.getFileNameString(Path)"
    ],
    "org.apache.commons.io.file.PathUtils.getLastModifiedFileTime(Path,LinkOption[]...)": ["org.apache.commons.io.file.PathUtils.getLastModifiedFileTime(Path,FileTime,LinkOption[]...)"],
    "org.apache.commons.io.filefilter.FileEqualsFileFilter#FileEqualsFileFilter(File)": [
        "org.apache.commons.io.filefilter.AbstractFileFilter#AbstractFileFilter()",
        "org.apache.commons.io.filefilter.FileEqualsFileFilter.<init>()"
    ],
    "org.apache.commons.io.FileSystem.getOsMatchesName(String)": [
        "org.apache.commons.io.FileSystem.getSystemProperty(String)",
        "org.apache.commons.io.FileSystem.isOsNameMatch(String,String)"
    ],
    "org.apache.commons.io.FileUtils.moveFileToDirectory(File,File,boolean)": [
        "org.apache.commons.io.FileUtils.moveFile(File,File)",
        "org.apache.commons.io.FileUtils.mkdirs(File)",
        "org.apache.commons.io.FileUtils.validateMoveParameters(File,File)",
        "org.apache.commons.io.FileUtils.requireDirectoryExists(File,String)"
    ],
    "org.apache.commons.io.file.PathUtils.cleanDirectory(Path)": [
        "org.apache.commons.io.file.PathUtils.cleanDirectory(Path,DeleteOption[]...)",
        "org.apache.commons.io.file.PathUtils.<staticinit>()"
    ],
    "org.apache.commons.io.function.IOSpliterator#getExactSizeIfKnown()": [
        "org.apache.commons.io.function.IOSpliteratorAdapter#unwrap()",
        "org.apache.commons.io.function.UncheckedIOSpliterator#getExactSizeIfKnown()"
    ],
    "org.apache.commons.io.input.UncheckedFilterInputStream#read(byte[])": ["org.apache.commons.io.function.Uncheck.apply(IOFunction<T, R>,T)"],
    "org.apache.commons.io.ByteOrderMark#ByteOrderMark(String,int[]...)": ["org.apache.commons.io.ByteOrderMark.<init>()"],
    "org.apache.commons.io.EndianUtils.swapDouble(double)": ["org.apache.commons.io.EndianUtils.swapLong(long)"],
    "org.apache.commons.io.output.ProxyOutputStream#write(byte[],int,int)": [
        "org.apache.commons.io.output.WriterOutputStream#write(byte[],int,int)",
        "org.apache.commons.io.output.ProxyOutputStream#beforeWrite(int)",
        "org.apache.commons.io.output.AbstractByteArrayOutputStream#write(byte[],int,int)",
        "org.apache.commons.io.output.NullOutputStream#write(byte[],int,int)",
        "org.apache.commons.io.output.UnsynchronizedByteArrayOutputStream#write(byte[],int,int)",
        "org.apache.commons.io.output.ClosedOutputStream#write(byte[],int,int)",
        "org.apache.commons.io.output.ProxyOutputStream#handleIOException(IOException)",
        "org.apache.commons.io.output.ProxyOutputStream#afterWrite(int)",
        "org.apache.commons.io.output.CountingOutputStream#beforeWrite(int)",
        "org.apache.commons.io.output.ThresholdingOutputStream#write(byte[],int,int)",
        "org.apache.commons.io.output.TaggedOutputStream#handleIOException(IOException)",
        "org.apache.commons.io.output.ByteArrayOutputStream#write(byte[],int,int)"
    ],
    "org.apache.commons.io.function.Erase.accept(IOBiConsumer<T, U>,T,U)": ["org.apache.commons.io.function.Erase.rethrow(Throwable)"],
    "org.apache.commons.io.input.Tailer.create(File,TailerListener,long)": [
        "org.apache.commons.io.build.AbstractOriginSupplier#setFile(File)",
        "org.apache.commons.io.input.Tailer.builder()"
    ],
    "org.apache.commons.io.output.ProxyCollectionWriter#close()": [
        "org.apache.commons.io.output.ProxyCollectionWriter#handleIOException(IOException)",
        "org.apache.commons.io.output.FilterCollectionWriter#close()"
    ],
    "org.apache.commons.io.input.CountingInputStream#skip(long)": ["org.apache.commons.io.input.ProxyInputStream#skip(long)"],
    "org.apache.commons.io.FileUtils.isFileNewer(File,ChronoZonedDateTime<?>)": [
        "org.apache.commons.io.function.Uncheck.get(IOSupplier<T>)",
        "org.apache.commons.io.file.PathUtils.isNewer(Path,Path)",
        "org.apache.commons.io.FileUtils.<staticinit>()"
    ],
    "org.apache.commons.io.FileUtils.isFileNewer(File,ChronoLocalDateTime<?>,ZoneId)": ["org.apache.commons.io.FileUtils.isFileNewer(File,ChronoLocalDateTime<?>)"],
    "org.apache.commons.io.input.ProxyInputStream#markSupported()": [
        "org.apache.commons.io.input.NullInputStream#markSupported()",
        "org.apache.commons.io.input.UnsynchronizedBufferedInputStream#markSupported()",
        "org.apache.commons.io.input.UnsynchronizedByteArrayInputStream#markSupported()",
        "org.apache.commons.io.input.UnsynchronizedFilterInputStream#markSupported()",
        "org.apache.commons.io.input.CharSequenceInputStream#markSupported()"
    ],
    "org.apache.commons.io.filefilter.FileFilterUtils.prefixFileFilter(String,IOCase)": ["org.apache.commons.io.filefilter.PrefixFileFilter#PrefixFileFilter(String,IOCase)"],
    "org.apache.commons.io.IOUtils.closeQuietly(OutputStream)": ["org.apache.commons.io.IOUtils.closeQ(Closeable)"],
    "org.apache.commons.io.input.CharSequenceReader#skip(long)": ["org.apache.commons.io.input.CharSequenceReader#end()"],
    "org.apache.commons.io.filefilter.AgeFileFilter#AgeFileFilter(Instant,boolean)": [
        "org.apache.commons.io.filefilter.AbstractFileFilter#AbstractFileFilter()",
        "org.apache.commons.io.filefilter.AgeFileFilter.<init>()"
    ],
    "org.apache.commons.io.FilenameUtils.directoryContains(String,String)": [
        "org.apache.commons.io.IOCase#checkStartsWith(String,String)",
        "org.apache.commons.io.FilenameUtils.toSeparator(boolean)",
        "org.apache.commons.io.FilenameUtils.isEmpty(String)",
        "org.apache.commons.io.IOCase#checkEquals(String,String)",
        "org.apache.commons.io.IOCase.<staticinit>()",
        "org.apache.commons.io.FilenameUtils.<staticinit>()"
    ],
    "org.apache.commons.io.FileDeleteStrategy.ForceFileDeleteStrategy#ForceFileDeleteStrategy()": [
        "org.apache.commons.io.FileDeleteStrategy.ForceFileDeleteStrategy.<init>()",
        "org.apache.commons.io.FileDeleteStrategy#FileDeleteStrategy(String)"
    ],
    "org.apache.commons.io.comparator.CompositeFileComparator#CompositeFileComparator(Iterable<Comparator<File>>)": [
        "org.apache.commons.io.comparator.CompositeFileComparator#emptyArray()",
        "org.apache.commons.io.comparator.CompositeFileComparator.<init>()",
        "org.apache.commons.io.comparator.AbstractFileComparator.<init>()"
    ],
    "org.apache.commons.io.file.PathUtils.copyDirectory(Path,Path,CopyOption[]...)": [
        "org.apache.commons.io.file.PathUtils.visitFileTree(T extends FileVisitor,Path)",
        "org.apache.commons.io.file.Counters.longPathCounters()",
        "org.apache.commons.io.file.CopyDirectoryVisitor#CopyDirectoryVisitor(PathCounters,Path,Path,CopyOption[]...)"
    ],
    "org.apache.commons.io.input.UnsynchronizedFilterInputStream#read(byte[],int,int)": [
        "org.apache.commons.io.input.UnsynchronizedFilterInputStream#read(byte[],int,int)",
        "org.apache.commons.io.input.BufferedFileChannelInputStream#read(byte[],int,int)",
        "org.apache.commons.io.input.UnsynchronizedBufferedInputStream#read(byte[],int,int)",
        "org.apache.commons.io.input.CharSequenceInputStream#read(byte[],int,int)",
        "org.apache.commons.io.input.UnsynchronizedByteArrayInputStream#read(byte[],int,int)",
        "org.apache.commons.io.input.ClosedInputStream#read(byte[],int,int)",
        "org.apache.commons.io.input.ReaderInputStream#read(byte[],int,int)",
        "org.apache.commons.io.input.NullInputStream#read(byte[],int,int)",
        "org.apache.commons.io.input.MemoryMappedFileInputStream#read(byte[],int,int)",
        "org.apache.commons.io.input.RandomAccessFileInputStream#read(byte[],int,int)"
    ],
    "org.apache.commons.io.FileUtils.forceDeleteOnExit(File)": [
        "org.apache.commons.io.FileUtils.deleteDirectoryOnExit(File)",
        "org.apache.commons.io.FileUtils.<staticinit>()"
    ],
    "org.apache.commons.io.filefilter.NameFileFilter#accept(File,String)": ["org.apache.commons.io.filefilter.NameFileFilter#acceptBaseName(String)"],
    "org.apache.commons.io.file.CleaningPathVisitor#preVisitDirectory(Path,BasicFileAttributes)": [
        "org.apache.commons.io.file.CountingPathVisitor#preVisitDirectory(Path,BasicFileAttributes)",
        "org.apache.commons.io.file.CleaningPathVisitor#accept(Path)"
    ],
    "org.apache.commons.io.IOUtils.copy(InputStream,OutputStream,int)": [
        "org.apache.commons.io.IOUtils.copyLarge(InputStream,OutputStream,byte[])",
        "org.apache.commons.io.IOUtils.byteArray(int)"
    ],
    "org.apache.commons.io.function.IOFunction#asFunction()": ["org.apache.commons.io.function.Uncheck.apply(IOFunction<T, R>,T)"],
    "org.apache.commons.io.function.IOStream.of(T[]...)": [
        "org.apache.commons.io.function.IOStream.adapt(Stream<T>)",
        "org.apache.commons.io.function.IOStream.empty()"
    ],
    "org.apache.commons.io.function.Uncheck.accept(IOTriConsumer<T, U, V>,T,U,V)": ["org.apache.commons.io.function.Uncheck.wrap(IOException)"],
    "org.apache.commons.io.output.ProxyCollectionWriter#write(char[],int,int)": [
        "org.apache.commons.io.output.FilterCollectionWriter#write(char[],int,int)",
        "org.apache.commons.io.output.ProxyCollectionWriter#beforeWrite(int)",
        "org.apache.commons.io.output.ProxyCollectionWriter#handleIOException(IOException)",
        "org.apache.commons.io.output.ProxyCollectionWriter#afterWrite(int)"
    ],
    "org.apache.commons.io.EndianUtils.writeSwappedInteger(byte[],int,int)": ["org.apache.commons.io.EndianUtils.validateByteArrayOffset(byte[],int,int)"],
    "org.apache.commons.io.output.UncheckedAppendableImpl#toString()": ["org.apache.commons.io.output.UncheckedAppendableImpl#toString()"],
    "org.apache.commons.io.file.CleaningPathVisitor#hashCode()": ["org.apache.commons.io.file.CountingPathVisitor#hashCode()"],
    "org.apache.commons.io.IOUtils.lineIterator(InputStream,Charset)": [
        "org.apache.commons.io.LineIterator#LineIterator(Reader)",
        "org.apache.commons.io.Charsets.toCharset(Charset)"
    ],
    "org.apache.commons.io.ByteOrderMark#equals(Object)": [
        "org.apache.commons.io.ByteOrderMark#get(int)",
        "org.apache.commons.io.ByteOrderMark#length()"
    ],
    "org.apache.commons.io.EndianUtils.readSwappedDouble(byte[],int)": ["org.apache.commons.io.EndianUtils.readSwappedLong(byte[],int)"],
    "org.apache.commons.io.file.SimplePathVisitor#SimplePathVisitor()": ["org.apache.commons.io.file.SimplePathVisitor.<init>()"],
    "org.apache.commons.io.input.MessageDigestCalculatingInputStream.builder()": ["org.apache.commons.io.input.MessageDigestCalculatingInputStream.Builder#Builder()"],
    "org.apache.commons.io.input.BOMInputStream.Builder#setByteOrderMarks(ByteOrderMark[]...)": [
        "org.apache.commons.io.ByteOrderMark.<staticinit>()",
        "org.apache.commons.io.input.BOMInputStream.Builder.<staticinit>()"
    ],
    "org.apache.commons.io.file.CleaningPathVisitor#accept(Path)": ["org.apache.commons.io.file.PathUtils.getFileNameString(Path)"],
    "org.apache.commons.io.monitor.FileAlterationObserver#createFileEntry(FileEntry,File)": [
        "org.apache.commons.io.monitor.FileAlterationObserver#listFileEntries(File,FileEntry)",
        "org.apache.commons.io.monitor.FileEntry#setChildren(FileEntry[]...)",
        "org.apache.commons.io.monitor.FileEntry#newChildInstance(File)",
        "org.apache.commons.io.monitor.FileEntry#refresh(File)"
    ],
    "org.apache.commons.io.IOUtils.writeChunked(char[],Writer)": [
        "org.apache.commons.io.output.StringBuilderWriter#write(char[],int,int)",
        "org.apache.commons.io.output.BrokenWriter#write(char[],int,int)",
        "org.apache.commons.io.output.FilterCollectionWriter#write(char[],int,int)",
        "org.apache.commons.io.output.AppendableWriter#write(char[],int,int)",
        "org.apache.commons.io.output.ProxyCollectionWriter#write(char[],int,int)",
        "org.apache.commons.io.output.ClosedWriter#write(char[],int,int)",
        "org.apache.commons.io.output.XmlStreamWriter#write(char[],int,int)",
        "org.apache.commons.io.IOUtils.<staticinit>()",
        "org.apache.commons.io.output.NullWriter#write(char[],int,int)",
        "org.apache.commons.io.output.LockableFileWriter#write(char[],int,int)"
    ],
    "org.apache.commons.io.input.XmlStreamReader#XmlStreamReader(File)": ["org.apache.commons.io.input.XmlStreamReader#XmlStreamReader(URL)"],
    "org.apache.commons.io.filefilter.AbstractFileFilter#get(IOSupplier<FileVisitResult>)": [
        "org.apache.commons.io.input.UnsynchronizedFilterInputStream.Builder#get()",
        "org.apache.commons.io.input.BOMInputStream.Builder#get()",
        "org.apache.commons.io.input.CharSequenceInputStream.Builder#get()",
        "org.apache.commons.io.input.QueueInputStream.Builder#get()",
        "org.apache.commons.io.input.ReaderInputStream.Builder#get()",
        "org.apache.commons.io.filefilter.WildcardFileFilter.Builder#get()",
        "org.apache.commons.io.input.ChecksumInputStream.Builder#get()",
        "org.apache.commons.io.input.Tailer.Builder#get()",
        "org.apache.commons.io.output.WriterOutputStream.Builder#get()",
        "org.apache.commons.io.input.ReadAheadInputStream.Builder#get()",
        "org.apache.commons.io.input.UnsynchronizedBufferedInputStream.Builder#get()",
        "org.apache.commons.io.input.UncheckedFilterInputStream.Builder#get()",
        "org.apache.commons.io.input.AutoCloseInputStream.Builder#get()",
        "org.apache.commons.io.output.ChunkedOutputStream.Builder#get()",
        "org.apache.commons.io.input.UnsynchronizedByteArrayInputStream.Builder#get()",
        "org.apache.commons.io.output.UncheckedFilterOutputStream.Builder#get()",
        "org.apache.commons.io.output.XmlStreamWriter.Builder#get()",
        "org.apache.commons.io.input.MessageDigestCalculatingInputStream.Builder#get()",
        "org.apache.commons.io.input.BoundedInputStream.Builder#get()",
        "org.apache.commons.io.output.LockableFileWriter.Builder#get()",
        "org.apache.commons.io.input.ReversedLinesFileReader.Builder#get()",
        "org.apache.commons.io.input.ThrottledInputStream.Builder#get()",
        "org.apache.commons.io.build.AbstractOrigin#get()",
        "org.apache.commons.io.output.UnsynchronizedByteArrayOutputStream.Builder#get()",
        "org.apache.commons.io.input.BufferedFileChannelInputStream.Builder#get()",
        "org.apache.commons.io.output.UncheckedFilterWriter.Builder#get()",
        "org.apache.commons.io.input.RandomAccessFileInputStream.Builder#get()",
        "org.apache.commons.io.input.UncheckedFilterReader.Builder#get()",
        "org.apache.commons.io.filefilter.AbstractFileFilter#handle(Throwable)",
        "org.apache.commons.io.input.MessageDigestInputStream.Builder#get()",
        "org.apache.commons.io.input.UncheckedBufferedReader.Builder#get()",
        "org.apache.commons.io.output.FileWriterWithEncoding.Builder#get()",
        "org.apache.commons.io.input.MemoryMappedFileInputStream.Builder#get()",
        "org.apache.commons.io.input.XmlStreamReader.Builder#get()",
        "org.apache.commons.io.output.DeferredFileOutputStream.Builder#get()"
    ],
    "org.apache.commons.io.input.BOMInputStream#reset()": [
        "org.apache.commons.io.input.BrokenInputStream#reset()",
        "org.apache.commons.io.input.CharSequenceInputStream#reset()",
        "org.apache.commons.io.input.NullInputStream#reset()",
        "org.apache.commons.io.input.UnsynchronizedBufferedInputStream#reset()",
        "org.apache.commons.io.input.UnsynchronizedFilterInputStream#reset()",
        "org.apache.commons.io.input.UnsynchronizedByteArrayInputStream#reset()"
    ],
    "org.apache.commons.io.input.CharSequenceInputStream#skip(long)": [
        "org.apache.commons.io.input.CharSequenceInputStream#available()",
        "org.apache.commons.io.input.CharSequenceInputStream#read()"
    ],
    "org.apache.commons.io.build.AbstractOrigin.OutputStreamOrigin#OutputStreamOrigin(OutputStream)": [
        "org.apache.commons.io.build.AbstractOrigin.OutputStreamOrigin.<init>()",
        "org.apache.commons.io.build.AbstractOrigin#AbstractOrigin(T)"
    ],
    "org.apache.commons.io.output.LockableFileWriter#write(String,int,int)": [
        "org.apache.commons.io.output.NullWriter#write(String,int,int)",
        "org.apache.commons.io.output.FilterCollectionWriter#write(String,int,int)",
        "org.apache.commons.io.output.ProxyCollectionWriter#write(String,int,int)",
        "org.apache.commons.io.output.AppendableWriter#write(String,int,int)",
        "org.apache.commons.io.output.LockableFileWriter#write(String,int,int)"
    ],
    "org.apache.commons.io.file.FilesUncheck.newInputStream(Path,OpenOption[]...)": ["org.apache.commons.io.function.Uncheck.apply(IOBiFunction<T, U, R>,T,U)"],
    "org.apache.commons.io.CloseableURLConnection#getLastModified()": ["org.apache.commons.io.CloseableURLConnection#getLastModified()"],
    "org.apache.commons.io.input.UnsynchronizedByteArrayInputStream.Builder#setByteArray(byte[])": ["org.apache.commons.io.build.AbstractOriginSupplier#setByteArray(byte[])"],
    "org.apache.commons.io.build.AbstractOrigin.CharSequenceOrigin#CharSequenceOrigin(CharSequence)": [
        "org.apache.commons.io.build.AbstractOrigin#AbstractOrigin(T)",
        "org.apache.commons.io.build.AbstractOrigin.CharSequenceOrigin.<init>()"
    ],
    "org.apache.commons.io.input.buffer.CircularBufferInputStream#CircularBufferInputStream(InputStream)": [
        "org.apache.commons.io.IOUtils.<staticinit>()",
        "org.apache.commons.io.input.buffer.CircularBufferInputStream#CircularBufferInputStream(InputStream,int)"
    ],
    "org.apache.commons.io.UncheckedIOExceptions#UncheckedIOExceptions()": ["org.apache.commons.io.UncheckedIOExceptions.<init>()"],
    "org.apache.commons.io.build.AbstractOriginSupplier.newWriterOrigin(Writer)": ["org.apache.commons.io.build.AbstractOrigin.WriterOrigin#WriterOrigin(Writer)"],
    "org.apache.commons.io.function.IOSpliterator#estimateSize()": [
        "org.apache.commons.io.function.IOSpliteratorAdapter#unwrap()",
        "org.apache.commons.io.function.UncheckedIOSpliterator#estimateSize()"
    ],
    "org.apache.commons.io.monitor.FileAlterationObserver#sort(File[])": ["org.apache.commons.io.FileUtils.<staticinit>()"],
    "org.apache.commons.io.file.AccumulatorPathVisitor#updateDirCounter(Path,IOException)": [
        "org.apache.commons.io.file.AccumulatorPathVisitor#add(List<Path>,Path)",
        "org.apache.commons.io.file.CountingPathVisitor#updateDirCounter(Path,IOException)"
    ],
    "org.apache.commons.io.input.TaggedInputStream#TaggedInputStream(InputStream)": [
        "org.apache.commons.io.input.ProxyInputStream#ProxyInputStream(InputStream)",
        "org.apache.commons.io.input.TaggedInputStream.<init>()"
    ],
    "org.apache.commons.io.filefilter.RegexFileFilter#RegexFileFilter(String)": ["org.apache.commons.io.filefilter.RegexFileFilter#RegexFileFilter(String,int)"],
    "org.apache.commons.io.FileSystemUtils.freeSpaceKb(long)": [
        "org.apache.commons.io.FileUtils.current()",
        "org.apache.commons.io.FileSystemUtils.freeSpaceKb(String,long)"
    ],
    "org.apache.commons.io.function.IOStream#peek(IOConsumer<? super T>)": [
        "org.apache.commons.io.function.IOStream.adapt(Stream<T>)",
        "org.apache.commons.io.function.Erase.accept(IOConsumer<T>,T)",
        "org.apache.commons.io.function.IOBaseStreamAdapter#unwrap()"
    ],
    "org.apache.commons.io.comparator.ReverseFileComparator#compare(File,File)": [
        "org.apache.commons.io.comparator.ReverseFileComparator#compare(File,File)",
        "org.apache.commons.io.comparator.DefaultFileComparator#compare(File,File)",
        "org.apache.commons.io.comparator.DirectoryFileComparator#compare(File,File)",
        "org.apache.commons.io.comparator.CompositeFileComparator#compare(File,File)",
        "org.apache.commons.io.comparator.ExtensionFileComparator#compare(File,File)",
        "org.apache.commons.io.comparator.SizeFileComparator#compare(File,File)",
        "org.apache.commons.io.comparator.LastModifiedFileComparator#compare(File,File)",
        "org.apache.commons.io.comparator.NameFileComparator#compare(File,File)",
        "org.apache.commons.io.comparator.PathFileComparator#compare(File,File)"
    ],
    "org.apache.commons.io.filefilter.EmptyFileFilter#accept(Path,BasicFileAttributes)": [
        "org.apache.commons.io.filefilter.AbstractFileFilter#toFileVisitResult(boolean)",
        "org.apache.commons.io.filefilter.AbstractFileFilter#get(IOSupplier<FileVisitResult>)"
    ],
    "org.apache.commons.io.input.ReaderInputStream#read(byte[])": ["org.apache.commons.io.input.ReaderInputStream#read(byte[],int,int)"],
    "org.apache.commons.io.output.ByteArrayOutputStream#ByteArrayOutputStream(int)": [
        "org.apache.commons.io.output.AbstractByteArrayOutputStream.<init>()",
        "org.apache.commons.io.output.AbstractByteArrayOutputStream#needNewBuffer(int)",
        "org.apache.commons.io.output.ByteArrayOutputStream.<init>()"
    ],
    "org.apache.commons.io.output.BrokenWriter#flush()": ["org.apache.commons.io.output.BrokenWriter#rethrow()"],
    "org.apache.commons.io.input.ByteBufferCleaner.isSupported()": ["org.apache.commons.io.input.ByteBufferCleaner.<staticinit>()"],
    "org.apache.commons.io.output.ByteArrayOutputStream#ByteArrayOutputStream()": [
        "org.apache.commons.io.output.ByteArrayOutputStream#ByteArrayOutputStream(int)",
        "org.apache.commons.io.output.AbstractByteArrayOutputStream.<staticinit>()"
    ],
    "org.apache.commons.io.build.AbstractOriginSupplier#setPath(Path)": [
        "org.apache.commons.io.input.Tailer.Builder#setOrigin(AbstractOrigin<?, ?>)",
        "org.apache.commons.io.build.AbstractOriginSupplier.newPathOrigin(Path)",
        "org.apache.commons.io.build.AbstractOriginSupplier#setOrigin(AbstractOrigin<?, ?>)"
    ],
    "org.apache.commons.io.filefilter.SuffixFileFilter#accept(String)": ["org.apache.commons.io.IOCase#checkEndsWith(String,String)"],
    "org.apache.commons.io.FileDeleteStrategy.<staticinit>()": [
        "org.apache.commons.io.FileDeleteStrategy#FileDeleteStrategy(String)",
        "org.apache.commons.io.FileDeleteStrategy.ForceFileDeleteStrategy#ForceFileDeleteStrategy()"
    ],
    "org.apache.commons.io.filefilter.WildcardFilter#WildcardFilter(String)": [
        "org.apache.commons.io.filefilter.AbstractFileFilter#AbstractFileFilter()",
        "org.apache.commons.io.filefilter.WildcardFilter.<init>()"
    ],
    "org.apache.commons.io.input.XmlStreamReader.getXmlProlog(InputStream,String)": [
        "org.apache.commons.io.input.UnixLineEndingInputStream#mark(int)",
        "org.apache.commons.io.input.UnsynchronizedByteArrayInputStream#read(byte[],int,int)",
        "org.apache.commons.io.input.UnsynchronizedByteArrayInputStream#reset()",
        "org.apache.commons.io.input.UnsynchronizedFilterInputStream#reset()",
        "org.apache.commons.io.input.MemoryMappedFileInputStream#read(byte[],int,int)",
        "org.apache.commons.io.IOUtils.<staticinit>()",
        "org.apache.commons.io.input.CharSequenceInputStream#mark(int)",
        "org.apache.commons.io.input.NullInputStream#reset()",
        "org.apache.commons.io.function.IOConsumer.forEach(Iterable<T>,IOConsumer<T>)",
        "org.apache.commons.io.input.BufferedFileChannelInputStream#read(byte[],int,int)",
        "org.apache.commons.io.input.UnsynchronizedBufferedInputStream#read(byte[],int,int)",
        "org.apache.commons.io.input.XmlStreamReader.<staticinit>()",
        "org.apache.commons.io.input.ClosedInputStream#read(byte[],int,int)",
        "org.apache.commons.io.input.ReaderInputStream#read(byte[],int,int)",
        "org.apache.commons.io.input.UnsynchronizedFilterInputStream#mark(int)",
        "org.apache.commons.io.input.BrokenInputStream#reset()",
        "org.apache.commons.io.input.CharSequenceInputStream#reset()",
        "org.apache.commons.io.input.UnsynchronizedBufferedInputStream#reset()",
        "org.apache.commons.io.input.CharSequenceInputStream#read(byte[],int,int)",
        "org.apache.commons.io.input.UnsynchronizedBufferedInputStream#mark(int)",
        "org.apache.commons.io.input.RandomAccessFileInputStream#read(byte[],int,int)",
        "org.apache.commons.io.input.UnsynchronizedFilterInputStream#read(byte[],int,int)",
        "org.apache.commons.io.input.WindowsLineEndingInputStream#mark(int)",
        "org.apache.commons.io.input.UnsynchronizedByteArrayInputStream#mark(int)",
        "org.apache.commons.io.input.NullInputStream#mark(int)",
        "org.apache.commons.io.IOUtils.byteArray()",
        "org.apache.commons.io.input.NullInputStream#read(byte[],int,int)"
    ],
    "org.apache.commons.io.filefilter.WildcardFileFilter#WildcardFileFilter(List<String>,IOCase)": [
        "org.apache.commons.io.filefilter.IOFileFilter.<staticinit>()",
        "org.apache.commons.io.filefilter.WildcardFileFilter.requireWildcards(T)",
        "org.apache.commons.io.filefilter.WildcardFileFilter#WildcardFileFilter(List<String>,IOCase)"
    ],
    "org.apache.commons.io.file.attribute.FileTimes.isUnixTime(FileTime)": [
        "org.apache.commons.io.file.attribute.FileTimes.toUnixTime(FileTime)",
        "org.apache.commons.io.file.attribute.FileTimes.isUnixTime(long)"
    ],
    "org.apache.commons.io.function.IOStream.iterate(T,IOUnaryOperator<T>)": [
        "org.apache.commons.io.function.IOStream.adapt(Stream<T>)",
        "org.apache.commons.io.function.IOStream.iterate(T,IOUnaryOperator<T>)$Iterator$1.<init>()"
    ],
    "org.apache.commons.io.IOUtils.copyLarge(InputStream,OutputStream,byte[])": [
        "org.apache.commons.io.output.WriterOutputStream#write(byte[],int,int)",
        "org.apache.commons.io.input.UnsynchronizedFilterInputStream#read(byte[])",
        "org.apache.commons.io.output.NullOutputStream#write(byte[],int,int)",
        "org.apache.commons.io.output.UnsynchronizedByteArrayOutputStream#write(byte[],int,int)",
        "org.apache.commons.io.output.ClosedOutputStream#write(byte[],int,int)",
        "org.apache.commons.io.input.NullInputStream#read(byte[])",
        "org.apache.commons.io.output.ThresholdingOutputStream#write(byte[],int,int)",
        "org.apache.commons.io.IOUtils.<staticinit>()",
        "org.apache.commons.io.output.ByteArrayOutputStream#write(byte[],int,int)",
        "org.apache.commons.io.input.CharSequenceInputStream#read(byte[])",
        "org.apache.commons.io.input.RandomAccessFileInputStream#read(byte[])",
        "org.apache.commons.io.output.AbstractByteArrayOutputStream#write(byte[],int,int)",
        "org.apache.commons.io.input.ReaderInputStream#read(byte[])",
        "org.apache.commons.io.input.UnsynchronizedByteArrayInputStream#read(byte[])"
    ],
    "org.apache.commons.io.input.ReadAheadInputStream#ReadAheadInputStream(InputStream,int,ExecutorService)": ["org.apache.commons.io.input.ReadAheadInputStream#ReadAheadInputStream(InputStream,int,ExecutorService,boolean)"],
    "org.apache.commons.io.filefilter.EmptyFileFilter.<staticinit>()": [
        "org.apache.commons.io.filefilter.EmptyFileFilter#EmptyFileFilter()",
        "org.apache.commons.io.filefilter.TrueFileFilter#negate()",
        "org.apache.commons.io.filefilter.FalseFileFilter#negate()",
        "org.apache.commons.io.filefilter.IOFileFilter#negate()"
    ],
    "org.apache.commons.io.input.ReversedLinesFileReader.<staticinit>()": [
        "org.apache.commons.io.FileSystem.getCurrent()",
        "org.apache.commons.io.FileSystem#getBlockSize()"
    ],
    "org.apache.commons.io.CopyUtils.copy(byte[],Writer)": ["org.apache.commons.io.CopyUtils.copy(InputStream,Writer)"],
    "org.apache.commons.io.file.PathUtils.cleanDirectory(Path,DeleteOption[]...)": [
        "org.apache.commons.io.file.PathUtils.visitFileTree(T extends FileVisitor,Path)",
        "org.apache.commons.io.file.Counters.longPathCounters()"
    ],
    "org.apache.commons.io.function.IOStream#forEach(IOConsumer<? super T>)": [
        "org.apache.commons.io.function.Erase.accept(IOConsumer<T>,T)",
        "org.apache.commons.io.function.IOBaseStreamAdapter#unwrap()"
    ],
    "org.apache.commons.io.output.LockableFileWriter#write(String)": [
        "org.apache.commons.io.output.ProxyCollectionWriter#write(String)",
        "org.apache.commons.io.output.FilterCollectionWriter#write(String)",
        "org.apache.commons.io.output.LockableFileWriter#write(String)",
        "org.apache.commons.io.output.StringBuilderWriter#write(String)",
        "org.apache.commons.io.output.NullWriter#write(String)"
    ],
    "org.apache.commons.io.file.PathUtils.isNewer(Path,Path)": ["org.apache.commons.io.file.PathUtils.isNewer(Path,Path)"],
    "org.apache.commons.io.input.ReversedLinesFileReader#readLines(int)": ["org.apache.commons.io.input.ReversedLinesFileReader#readLine()"],
    "org.apache.commons.io.build.AbstractOrigin.CharSequenceOrigin#getCharSequence(Charset)": ["org.apache.commons.io.build.AbstractOrigin#get()"],
    "org.apache.commons.io.IOUtils.readLines(Reader)": ["org.apache.commons.io.IOUtils.toBufferedReader(Reader)"],
    "org.apache.commons.io.input.UnsynchronizedByteArrayInputStream.builder()": ["org.apache.commons.io.input.UnsynchronizedByteArrayInputStream.Builder.<init>()"],
    "org.apache.commons.io.file.CleaningPathVisitor#CleaningPathVisitor(PathCounters,DeleteOption[],String[]...)": [
        "org.apache.commons.io.file.StandardDeleteOption.overrideReadOnly(DeleteOption[])",
        "org.apache.commons.io.file.CleaningPathVisitor.<init>()",
        "org.apache.commons.io.file.CountingPathVisitor.<staticinit>()",
        "org.apache.commons.io.file.CountingPathVisitor#CountingPathVisitor(PathCounters)"
    ],
    "org.apache.commons.io.FileUtils.isFileOlder(File,ChronoLocalDate)": ["org.apache.commons.io.FileUtils.isFileOlder(File,ChronoLocalDate,LocalTime)"],
    "org.apache.commons.io.input.BrokenInputStream#BrokenInputStream(IOException)": ["org.apache.commons.io.input.BrokenInputStream#BrokenInputStream(Supplier<Throwable>)"],
    "org.apache.commons.io.file.PathUtils.directoryContentEquals(Path,Path)": [
        "org.apache.commons.io.file.PathUtils.<staticinit>()",
        "org.apache.commons.io.file.PathUtils.directoryContentEquals(Path,Path,int,LinkOption[],FileVisitOption[])"
    ],
    "org.apache.commons.io.input.UncheckedBufferedReader#reset()": ["org.apache.commons.io.function.Uncheck.run(IORunnable)"],
    "org.apache.commons.io.CloseableURLConnection#connect()": ["org.apache.commons.io.CloseableURLConnection#connect()"],
    "org.apache.commons.io.input.XmlStreamReader.Builder#setCharset(Charset)": ["org.apache.commons.io.build.AbstractStreamBuilder#setCharset(Charset)"],
    "org.apache.commons.io.filefilter.AbstractFileFilter#accept(File,String)": [
        "org.apache.commons.io.filefilter.CanExecuteFileFilter#accept(File)",
        "org.apache.commons.io.filefilter.AbstractFileFilter#accept(File)",
        "org.apache.commons.io.filefilter.CanWriteFileFilter#accept(File)",
        "org.apache.commons.io.filefilter.HiddenFileFilter#accept(File)",
        "org.apache.commons.io.filefilter.PathVisitorFileFilter#accept(File)",
        "org.apache.commons.io.filefilter.FileFileFilter#accept(File)",
        "org.apache.commons.io.filefilter.OrFileFilter#accept(File)",
        "org.apache.commons.io.filefilter.PathEqualsFileFilter#accept(File)",
        "org.apache.commons.io.filefilter.SuffixFileFilter#accept(File)",
        "org.apache.commons.io.filefilter.CanReadFileFilter#accept(File)",
        "org.apache.commons.io.filefilter.PrefixFileFilter#accept(File)",
        "org.apache.commons.io.filefilter.MagicNumberFileFilter#accept(File)",
        "org.apache.commons.io.filefilter.NameFileFilter#accept(File)",
        "org.apache.commons.io.filefilter.WildcardFileFilter#accept(File)",
        "org.apache.commons.io.filefilter.NotFileFilter#accept(File)",
        "org.apache.commons.io.filefilter.PathMatcherFileFilter#accept(File)",
        "org.apache.commons.io.filefilter.FileEqualsFileFilter#accept(File)",
        "org.apache.commons.io.filefilter.WildcardFilter#accept(File)",
        "org.apache.commons.io.filefilter.AgeFileFilter#accept(File)",
        "org.apache.commons.io.filefilter.DelegateFileFilter#accept(File)",
        "org.apache.commons.io.filefilter.SizeFileFilter#accept(File)",
        "org.apache.commons.io.filefilter.AndFileFilter#accept(File)",
        "org.apache.commons.io.filefilter.SymbolicLinkFileFilter#accept(File)",
        "org.apache.commons.io.filefilter.DirectoryFileFilter#accept(File)",
        "org.apache.commons.io.filefilter.EmptyFileFilter#accept(File)"
    ],
    "org.apache.commons.io.FilenameUtils.isIPv6Address(String)": [
        "org.apache.commons.io.FilenameUtils.<staticinit>()",
        "org.apache.commons.io.FilenameUtils.isIPv4Address(String)"
    ],
    "org.apache.commons.io.function.IOBiConsumer#asBiConsumer()": ["org.apache.commons.io.function.Uncheck.accept(IOBiConsumer<T, U>,T,U)"],
    "org.apache.commons.io.function.IOStream#reduce(U,IOBiFunction<U, ? super T, U>,IOBinaryOperator<U>)": [
        "org.apache.commons.io.function.Erase.apply(IOBiFunction<? super T, ? super U, ? extends R>,T,U)",
        "org.apache.commons.io.function.IOBaseStreamAdapter#unwrap()"
    ],
    "org.apache.commons.io.function.Uncheck.getAsInt(IOIntSupplier)": ["org.apache.commons.io.function.Uncheck.wrap(IOException)"],
    "org.apache.commons.io.function.IOStream#flatMapToLong(IOFunction<? super T, ? extends LongStream>)": [
        "org.apache.commons.io.function.IOBaseStreamAdapter#unwrap()",
        "org.apache.commons.io.function.Erase.apply(IOFunction<? super T, ? extends R>,T)"
    ],
    "org.apache.commons.io.output.UnsynchronizedByteArrayOutputStream.toBufferedInputStream(InputStream,int)": [
        "org.apache.commons.io.build.AbstractStreamBuilder#setBufferSize(int)",
        "org.apache.commons.io.output.UnsynchronizedByteArrayOutputStream#write(InputStream)",
        "org.apache.commons.io.output.UnsynchronizedByteArrayOutputStream.builder()",
        "org.apache.commons.io.output.UnsynchronizedByteArrayOutputStream#toInputStream()"
    ],
    "org.apache.commons.io.file.FilesUncheck.copy(Path,OutputStream)": ["org.apache.commons.io.function.Uncheck.apply(IOBiFunction<T, U, R>,T,U)"],
    "org.apache.commons.io.EndianUtils.readSwappedUnsignedInteger(byte[],int)": ["org.apache.commons.io.EndianUtils.validateByteArrayOffset(byte[],int,int)"],
    "org.apache.commons.io.filefilter.CanReadFileFilter#CanReadFileFilter()": [
        "org.apache.commons.io.filefilter.AbstractFileFilter#AbstractFileFilter()",
        "org.apache.commons.io.filefilter.CanReadFileFilter.<init>()"
    ],
    "org.apache.commons.io.file.CopyDirectoryVisitor#equals(Object)": ["org.apache.commons.io.file.CountingPathVisitor#equals(Object)"],
    "org.apache.commons.io.filefilter.PathVisitorFileFilter#PathVisitorFileFilter(PathVisitor)": [
        "org.apache.commons.io.filefilter.AbstractFileFilter#AbstractFileFilter()",
        "org.apache.commons.io.file.NoopPathVisitor.<staticinit>()",
        "org.apache.commons.io.filefilter.PathVisitorFileFilter.<init>()"
    ],
    "org.apache.commons.io.FileUtils.writeStringToFile(File,String,String,boolean)": [
        "org.apache.commons.io.Charsets.toCharset(String)",
        "org.apache.commons.io.FileUtils.writeStringToFile(File,String,Charset,boolean)"
    ],
    "org.apache.commons.io.monitor.FileAlterationObserver#initialize()": [
        "org.apache.commons.io.monitor.FileAlterationObserver#listFileEntries(File,FileEntry)",
        "org.apache.commons.io.monitor.FileEntry#setChildren(FileEntry[]...)",
        "org.apache.commons.io.monitor.FileEntry#getFile()",
        "org.apache.commons.io.monitor.FileEntry#refresh(File)"
    ],
    "org.apache.commons.io.input.ObservableInputStream#read()": [
        "org.apache.commons.io.input.ObservableInputStream#noteError(IOException)",
        "org.apache.commons.io.input.ProxyInputStream#read()",
        "org.apache.commons.io.input.ObservableInputStream#noteFinished()",
        "org.apache.commons.io.input.ObservableInputStream#noteDataByte(int)",
        "org.apache.commons.io.IOUtils.<staticinit>()"
    ],
    "org.apache.commons.io.input.UnsynchronizedByteArrayInputStream#read(byte[],int,int)": ["org.apache.commons.io.input.UnsynchronizedByteArrayInputStream.<staticinit>()"],
    "org.apache.commons.io.input.ThrottledInputStream#ThrottledInputStream(InputStream,long)": [
        "org.apache.commons.io.input.ThrottledInputStream.<init>()",
        "org.apache.commons.io.input.CountingInputStream#CountingInputStream(InputStream)"
    ],
    "org.apache.commons.io.function.UncheckedIOSpliterator#hasCharacteristics(int)": ["org.apache.commons.io.function.IOSpliterator#hasCharacteristics(int)"],
    "org.apache.commons.io.input.ProxyInputStream#mark(int)": [
        "org.apache.commons.io.input.WindowsLineEndingInputStream#mark(int)",
        "org.apache.commons.io.input.UnsynchronizedByteArrayInputStream#mark(int)",
        "org.apache.commons.io.input.UnixLineEndingInputStream#mark(int)",
        "org.apache.commons.io.input.NullInputStream#mark(int)",
        "org.apache.commons.io.input.UnsynchronizedBufferedInputStream#mark(int)",
        "org.apache.commons.io.input.UnsynchronizedFilterInputStream#mark(int)",
        "org.apache.commons.io.input.CharSequenceInputStream#mark(int)"
    ],
    "org.apache.commons.io.file.FilesUncheck.readAttributes(Path,Class<A extends BasicFileAttributes>,LinkOption[]...)": ["org.apache.commons.io.function.Uncheck.apply(IOTriFunction<T, U, V, R>,T,U,V)"],
    "org.apache.commons.io.monitor.FileEntry#getLevel()": ["org.apache.commons.io.monitor.FileEntry#getLevel()"],
    "org.apache.commons.io.input.RandomAccessFileInputStream.builder()": ["org.apache.commons.io.input.RandomAccessFileInputStream.Builder.<init>()"],
    "org.apache.commons.io.output.AbstractByteArrayOutputStream#writeImpl(byte[],int,int)": ["org.apache.commons.io.output.AbstractByteArrayOutputStream#needNewBuffer(int)"],
    "org.apache.commons.io.IOUtils.copy(InputStream,Writer,Charset)": [
        "org.apache.commons.io.IOUtils.copy(Reader,Writer)",
        "org.apache.commons.io.Charsets.toCharset(Charset)"
    ],
    "org.apache.commons.io.comparator.SizeFileComparator#compare(File,File)": ["org.apache.commons.io.FileUtils.sizeOfDirectory(File)"],
    "org.apache.commons.io.output.UncheckedFilterOutputStream#close()": ["org.apache.commons.io.function.Uncheck.run(IORunnable)"],
    "org.apache.commons.io.FileCleaningTracker#track(String,Object)": [
        "org.apache.commons.io.FileCleaningTracker#track(String,Object,FileDeleteStrategy)",
        "org.apache.commons.io.FileDeleteStrategy.<staticinit>()"
    ],
    "org.apache.commons.io.input.ReaderInputStream#read(byte[],int,int)": [
        "org.apache.commons.io.IOUtils.<staticinit>()",
        "org.apache.commons.io.input.ReaderInputStream#fillBuffer()"
    ],
    "org.apache.commons.io.function.Uncheck.getAsLong(IOLongSupplier,Supplier<String>)": ["org.apache.commons.io.function.Uncheck.wrap(IOException,Supplier<String>)"],
    "org.apache.commons.io.CloseableURLConnection#getIfModifiedSince()": ["org.apache.commons.io.CloseableURLConnection#getIfModifiedSince()"],
    "org.apache.commons.io.output.ThresholdingOutputStream#ThresholdingOutputStream(int,IOConsumer<ThresholdingOutputStream>,IOFunction<ThresholdingOutputStream, OutputStream>)": [
        "org.apache.commons.io.output.ThresholdingOutputStream.<init>()",
        "org.apache.commons.io.function.IOConsumer.noop()",
        "org.apache.commons.io.output.ThresholdingOutputStream.<staticinit>()"
    ],
    "org.apache.commons.io.ThreadMonitor.start(Thread,Duration)": ["org.apache.commons.io.ThreadMonitor#ThreadMonitor(Thread,Duration)"],
    "org.apache.commons.io.input.XmlStreamReader#doLenientDetection(String,XmlStreamReaderException)": [
        "org.apache.commons.io.input.XmlStreamReader.<staticinit>()",
        "org.apache.commons.io.input.XmlStreamReaderException#getBomEncoding()",
        "org.apache.commons.io.input.XmlStreamReaderException#getContentTypeEncoding()",
        "org.apache.commons.io.input.XmlStreamReaderException#getXmlEncoding()",
        "org.apache.commons.io.input.XmlStreamReaderException#getXmlGuessEncoding()",
        "org.apache.commons.io.input.XmlStreamReader#calculateHttpEncoding(String,String,String,boolean,String)"
    ],
    "org.apache.commons.io.input.buffer.CircularBufferInputStream#fillBuffer()": [
        "org.apache.commons.io.input.CharSequenceInputStream#read(byte[],int,int)",
        "org.apache.commons.io.input.UnsynchronizedByteArrayInputStream#read(byte[],int,int)",
        "org.apache.commons.io.input.MemoryMappedFileInputStream#read(byte[],int,int)",
        "org.apache.commons.io.input.RandomAccessFileInputStream#read(byte[],int,int)",
        "org.apache.commons.io.IOUtils.<staticinit>()",
        "org.apache.commons.io.input.UnsynchronizedFilterInputStream#read(byte[],int,int)",
        "org.apache.commons.io.input.buffer.CircularByteBuffer#getSpace()",
        "org.apache.commons.io.input.buffer.CircularByteBuffer#add(byte[],int,int)",
        "org.apache.commons.io.input.BufferedFileChannelInputStream#read(byte[],int,int)",
        "org.apache.commons.io.input.UnsynchronizedBufferedInputStream#read(byte[],int,int)",
        "org.apache.commons.io.input.ClosedInputStream#read(byte[],int,int)",
        "org.apache.commons.io.input.ReaderInputStream#read(byte[],int,int)",
        "org.apache.commons.io.input.NullInputStream#read(byte[],int,int)",
        "org.apache.commons.io.IOUtils.byteArray(int)"
    ],
    "org.apache.commons.io.IOUtils.copy(Reader,OutputStream,Charset)": [
        "org.apache.commons.io.IOUtils.copy(Reader,Writer)",
        "org.apache.commons.io.Charsets.toCharset(Charset)"
    ],
    "org.apache.commons.io.output.BrokenOutputStream#rethrow()": ["org.apache.commons.io.function.Erase.rethrow(Throwable)"],
    "org.apache.commons.io.FileUtils.copyDirectory(File,File)": ["org.apache.commons.io.FileUtils.copyDirectory(File,File,boolean)"],
    "org.apache.commons.io.output.UnsynchronizedByteArrayOutputStream#writeTo(OutputStream)": ["org.apache.commons.io.output.AbstractByteArrayOutputStream#writeToImpl(OutputStream)"],
    "org.apache.commons.io.input.SwappedDataInputStream#skipBytes(int)": [
        "org.apache.commons.io.input.UnsynchronizedFilterInputStream#skip(long)",
        "org.apache.commons.io.input.NullInputStream#skip(long)",
        "org.apache.commons.io.input.UnsynchronizedBufferedInputStream#skip(long)",
        "org.apache.commons.io.input.UnsynchronizedByteArrayInputStream#skip(long)",
        "org.apache.commons.io.input.CharSequenceInputStream#skip(long)",
        "org.apache.commons.io.input.BufferedFileChannelInputStream#skip(long)",
        "org.apache.commons.io.input.RandomAccessFileInputStream#skip(long)",
        "org.apache.commons.io.input.MemoryMappedFileInputStream#skip(long)",
        "org.apache.commons.io.input.BrokenInputStream#skip(long)"
    ],
    "org.apache.commons.io.input.SwappedDataInputStream#SwappedDataInputStream(InputStream)": [
        "org.apache.commons.io.input.ProxyInputStream#ProxyInputStream(InputStream)",
        "org.apache.commons.io.input.SwappedDataInputStream.<init>()"
    ],
    "org.apache.commons.io.file.DeletingPathVisitor#visitFile(Path,BasicFileAttributes)": [
        "org.apache.commons.io.file.AccumulatorPathVisitor#updateFileCounters(Path,BasicFileAttributes)",
        "org.apache.commons.io.file.PathUtils.setReadOnly(Path,boolean,LinkOption[]...)",
        "org.apache.commons.io.file.DeletingPathVisitor#accept(Path)",
        "org.apache.commons.io.file.CountingPathVisitor#updateFileCounters(Path,BasicFileAttributes)"
    ],
    "org.apache.commons.io.input.ObservableInputStream#consume()": ["org.apache.commons.io.IOUtils.consume(Reader)"],
    "org.apache.commons.io.filefilter.FileFileFilter#accept(Path,BasicFileAttributes)": ["org.apache.commons.io.filefilter.AbstractFileFilter#toFileVisitResult(boolean)"],
    "org.apache.commons.io.monitor.FileAlterationObserver#listFiles(File)": [
        "org.apache.commons.io.monitor.FileAlterationObserver#sort(File[])",
        "org.apache.commons.io.FileUtils.<staticinit>()"
    ],
    "org.apache.commons.io.monitor.SerializableFileTime.<staticinit>()": [
        "org.apache.commons.io.file.attribute.FileTimes.<staticinit>()",
        "org.apache.commons.io.monitor.SerializableFileTime#SerializableFileTime(FileTime)"
    ],
    "org.apache.commons.io.input.buffer.PeekableInputStream#peek(byte[])": ["org.apache.commons.io.input.buffer.PeekableInputStream#peek(byte[],int,int)"],
    "org.apache.commons.io.file.PathUtils.getExtension(Path)": [
        "org.apache.commons.io.FilenameUtils.getExtension(String)",
        "org.apache.commons.io.file.PathUtils.getFileNameString(Path)"
    ],
    "org.apache.commons.io.FilenameUtils.normalizeNoEndSeparator(String)": [
        "org.apache.commons.io.FilenameUtils.doNormalize(String,char,boolean)",
        "org.apache.commons.io.FilenameUtils.<staticinit>()"
    ],
    "org.apache.commons.io.FileSystem.getCurrent()": ["org.apache.commons.io.FileSystem.<staticinit>()"],
    "org.apache.commons.io.input.BrokenInputStream#available()": ["org.apache.commons.io.input.BrokenInputStream#rethrow()"],
    "org.apache.commons.io.FileExistsException#FileExistsException()": ["org.apache.commons.io.FileExistsException.<init>()"],
    "org.apache.commons.io.FileUtils.cleanDirectoryOnExit(File)": [
        "org.apache.commons.io.FileUtils.listFiles(File,FileFilter)",
        "org.apache.commons.io.function.IOConsumer.forAll(IOConsumer<T>,Iterable<T>)"
    ],
    "org.apache.commons.io.function.IOSupplier#getUnchecked()": ["org.apache.commons.io.function.Uncheck.get(IOSupplier<T>)"],
    "org.apache.commons.io.output.UncheckedFilterOutputStream#write(byte[],int,int)": ["org.apache.commons.io.function.Uncheck.accept(IOTriConsumer<T, U, V>,T,U,V)"],
    "org.apache.commons.io.FileUtils.isFileOlder(File,OffsetDateTime)": ["org.apache.commons.io.FileUtils.isFileOlder(File,ChronoZonedDateTime<?>)"],
    "org.apache.commons.io.filefilter.FileFilterUtils#FileFilterUtils()": ["org.apache.commons.io.filefilter.FileFilterUtils.<init>()"],
    "org.apache.commons.io.monitor.FileAlterationObserver#getDirectory()": ["org.apache.commons.io.monitor.FileEntry#getFile()"],
    "org.apache.commons.io.filefilter.SuffixFileFilter#accept(File)": ["org.apache.commons.io.filefilter.SuffixFileFilter#accept(File)"],
    "org.apache.commons.io.file.FilesUncheck.createFile(Path,FileAttribute<?>[]...)": ["org.apache.commons.io.function.Uncheck.apply(IOBiFunction<T, U, R>,T,U)"],
    "org.apache.commons.io.file.PathUtils.RelativeSortedPaths#RelativeSortedPaths(Path,Path,int,LinkOption[],FileVisitOption[])": [
        "org.apache.commons.io.file.PathUtils.accumulate(Path,int,FileVisitOption[])",
        "org.apache.commons.io.file.PathUtils.RelativeSortedPaths.<init>()",
        "org.apache.commons.io.file.AccumulatorPathVisitor#getDirList()",
        "org.apache.commons.io.file.AccumulatorPathVisitor#relativizeFiles(Path,boolean,Comparator<? super Path>)",
        "org.apache.commons.io.file.AccumulatorPathVisitor#relativizeDirectories(Path,boolean,Comparator<? super Path>)",
        "org.apache.commons.io.file.AccumulatorPathVisitor#getFileList()"
    ],
    "org.apache.commons.io.filefilter.OrFileFilter#OrFileFilter(IOFileFilter[]...)": [
        "org.apache.commons.io.filefilter.OrFileFilter#OrFileFilter(int)",
        "org.apache.commons.io.filefilter.OrFileFilter#addFileFilter(IOFileFilter[]...)"
    ],
    "org.apache.commons.io.file.PathUtils.deleteDirectory(Path,DeleteOption[]...)": [
        "org.apache.commons.io.file.PathUtils.getParent(Path)",
        "org.apache.commons.io.file.PathUtils.noFollowLinkOptionArray()",
        "org.apache.commons.io.file.PathUtils.withPosixFileAttributes(Path,LinkOption[],boolean,IOFunction<PosixFileAttributes, R>)",
        "org.apache.commons.io.file.PathUtils.overrideReadOnly(DeleteOption[]...)",
        "org.apache.commons.io.file.Counters.longPathCounters()",
        "org.apache.commons.io.file.PathUtils.visitFileTree(T extends FileVisitor,Path)"
    ],
    "org.apache.commons.io.input.ProxyReader#read(char[],int,int)": [
        "org.apache.commons.io.input.NullReader#read(char[],int,int)",
        "org.apache.commons.io.input.SequenceReader#read(char[],int,int)",
        "org.apache.commons.io.input.ClosedReader#read(char[],int,int)",
        "org.apache.commons.io.input.XmlStreamReader#read(char[],int,int)",
        "org.apache.commons.io.input.BoundedReader#read(char[],int,int)",
        "org.apache.commons.io.IOUtils.<staticinit>()",
        "org.apache.commons.io.input.TaggedReader#handleIOException(IOException)",
        "org.apache.commons.io.input.CharSequenceReader#read(char[],int,int)",
        "org.apache.commons.io.input.UnsynchronizedBufferedReader#read(char[],int,int)",
        "org.apache.commons.io.input.BrokenReader#read(char[],int,int)",
        "org.apache.commons.io.input.ProxyReader#handleIOException(IOException)",
        "org.apache.commons.io.input.ProxyReader#beforeRead(int)",
        "org.apache.commons.io.input.ProxyReader#afterRead(int)"
    ],
    "org.apache.commons.io.filefilter.FileFilterUtils.magicNumberFileFilter(String,long)": ["org.apache.commons.io.filefilter.MagicNumberFileFilter#MagicNumberFileFilter(String,long)"],
    "org.apache.commons.io.input.XmlStreamReaderException#XmlStreamReaderException(String,String,String,String)": ["org.apache.commons.io.input.XmlStreamReaderException#XmlStreamReaderException(String,String,String,String,String,String)"],
    "org.apache.commons.io.build.AbstractOriginSupplier#setFile(File)": [
        "org.apache.commons.io.input.Tailer.Builder#setOrigin(AbstractOrigin<?, ?>)",
        "org.apache.commons.io.build.AbstractOriginSupplier.newFileOrigin(File)",
        "org.apache.commons.io.build.AbstractOriginSupplier#setOrigin(AbstractOrigin<?, ?>)"
    ],
    "org.apache.commons.io.build.AbstractOrigin.FileOrigin#getPath()": ["org.apache.commons.io.build.AbstractOrigin#get()"],
    "org.apache.commons.io.output.FilterCollectionWriter#write(String,int,int)": [
        "org.apache.commons.io.output.NullWriter#write(String,int,int)",
        "org.apache.commons.io.output.FilterCollectionWriter#write(String,int,int)",
        "org.apache.commons.io.output.FilterCollectionWriter#forAllWriters(IOConsumer<Writer>)",
        "org.apache.commons.io.output.ProxyCollectionWriter#write(String,int,int)",
        "org.apache.commons.io.output.AppendableWriter#write(String,int,int)",
        "org.apache.commons.io.output.LockableFileWriter#write(String,int,int)"
    ],
    "org.apache.commons.io.input.BoundedReader#mark(int)": [
        "org.apache.commons.io.input.NullReader#mark(int)",
        "org.apache.commons.io.input.UnsynchronizedBufferedReader#mark(int)",
        "org.apache.commons.io.input.CharSequenceReader#mark(int)",
        "org.apache.commons.io.input.BrokenReader#mark(int)",
        "org.apache.commons.io.input.BoundedReader#mark(int)"
    ],
    "org.apache.commons.io.filefilter.CanExecuteFileFilter#accept(Path,BasicFileAttributes)": ["org.apache.commons.io.filefilter.AbstractFileFilter#toFileVisitResult(boolean)"],
    "org.apache.commons.io.comparator.CompositeFileComparator#compare(File,File)": [
        "org.apache.commons.io.comparator.ReverseFileComparator#compare(File,File)",
        "org.apache.commons.io.comparator.DefaultFileComparator#compare(File,File)",
        "org.apache.commons.io.comparator.DirectoryFileComparator#compare(File,File)",
        "org.apache.commons.io.comparator.CompositeFileComparator#compare(File,File)",
        "org.apache.commons.io.comparator.ExtensionFileComparator#compare(File,File)",
        "org.apache.commons.io.comparator.SizeFileComparator#compare(File,File)",
        "org.apache.commons.io.comparator.LastModifiedFileComparator#compare(File,File)",
        "org.apache.commons.io.comparator.NameFileComparator#compare(File,File)",
        "org.apache.commons.io.comparator.PathFileComparator#compare(File,File)"
    ],
    "org.apache.commons.io.file.FilesUncheck.readSymbolicLink(Path)": ["org.apache.commons.io.function.Uncheck.apply(IOFunction<T, R>,T)"],
    "org.apache.commons.io.FilenameUtils.separatorsToUnix(String)": [
        "org.apache.commons.io.FileSystem#normalizeSeparators(String)",
        "org.apache.commons.io.FileSystem.<staticinit>()"
    ],
    "org.apache.commons.io.file.PathUtils.copyFileToDirectory(URL,Path,CopyOption[]...)": ["org.apache.commons.io.FilenameUtils.getName(String)"],
    "org.apache.commons.io.input.XmlStreamReader#processHttpStream(BOMInputStream,BOMInputStream,boolean)": [
        "org.apache.commons.io.input.XmlStreamReader#doLenientDetection(String,XmlStreamReaderException)",
        "org.apache.commons.io.input.XmlStreamReader.getXmlProlog(InputStream,String)",
        "org.apache.commons.io.input.BOMInputStream#getBOMCharsetName()",
        "org.apache.commons.io.input.XmlStreamReader#calculateRawEncoding(String,String,String)"
    ],
    "org.apache.commons.io.file.FilesUncheck.newBufferedReader(Path,Charset)": ["org.apache.commons.io.function.Uncheck.apply(IOBiFunction<T, U, R>,T,U)"],
    "org.apache.commons.io.IOUtils.copy(Reader,Writer)": [
        "org.apache.commons.io.IOUtils.<staticinit>()",
        "org.apache.commons.io.IOUtils.copyLarge(Reader,Writer)"
    ],
    "org.apache.commons.io.IOUtils.copyLarge(Reader,Writer,char[])": [
        "org.apache.commons.io.output.StringBuilderWriter#write(char[],int,int)",
        "org.apache.commons.io.output.BrokenWriter#write(char[],int,int)",
        "org.apache.commons.io.input.NullReader#read(char[])",
        "org.apache.commons.io.output.FilterCollectionWriter#write(char[],int,int)",
        "org.apache.commons.io.output.AppendableWriter#write(char[],int,int)",
        "org.apache.commons.io.output.ProxyCollectionWriter#write(char[],int,int)",
        "org.apache.commons.io.output.ClosedWriter#write(char[],int,int)",
        "org.apache.commons.io.output.XmlStreamWriter#write(char[],int,int)",
        "org.apache.commons.io.output.NullWriter#write(char[],int,int)",
        "org.apache.commons.io.output.LockableFileWriter#write(char[],int,int)",
        "org.apache.commons.io.IOUtils.<staticinit>()"
    ],
    "org.apache.commons.io.input.ReversedLinesFileReader#readLine()": [
        "org.apache.commons.io.input.ReversedLinesFileReader#readLine()",
        "org.apache.commons.io.input.ReversedLinesFileReader.FilePart#readLine()",
        "org.apache.commons.io.input.ReversedLinesFileReader.FilePart#rollOver()",
        "org.apache.commons.io.input.ReversedLinesFileReader.<staticinit>()"
    ],
    "org.apache.commons.io.input.CharSequenceReader#read(char[],int,int)": [
        "org.apache.commons.io.input.CharSequenceReader#end()",
        "org.apache.commons.io.IOUtils.<staticinit>()",
        "org.apache.commons.io.input.CharSequenceReader#read()"
    ],
    "org.apache.commons.io.charset.CharsetDecoders#CharsetDecoders()": ["org.apache.commons.io.charset.CharsetDecoders.<init>()"],
    "org.apache.commons.io.input.MarkShieldInputStream#reset()": ["org.apache.commons.io.input.UnsupportedOperationExceptions.reset()"],
    "org.apache.commons.io.function.IOStream#mapToDouble(ToDoubleFunction<? super T>)": ["org.apache.commons.io.function.IOBaseStreamAdapter#unwrap()"],
    "org.apache.commons.io.input.UncheckedFilterInputStream#read(byte[],int,int)": ["org.apache.commons.io.function.Uncheck.apply(IOTriFunction<T, U, V, R>,T,U,V)"],
    "org.apache.commons.io.output.AbstractByteArrayOutputStream#writeImpl(InputStream)": [
        "org.apache.commons.io.input.UnsynchronizedFilterInputStream#read(byte[],int,int)",
        "org.apache.commons.io.input.BufferedFileChannelInputStream#read(byte[],int,int)",
        "org.apache.commons.io.input.UnsynchronizedBufferedInputStream#read(byte[],int,int)",
        "org.apache.commons.io.input.CharSequenceInputStream#read(byte[],int,int)",
        "org.apache.commons.io.input.UnsynchronizedByteArrayInputStream#read(byte[],int,int)",
        "org.apache.commons.io.output.AbstractByteArrayOutputStream#needNewBuffer(int)",
        "org.apache.commons.io.input.ClosedInputStream#read(byte[],int,int)",
        "org.apache.commons.io.input.ReaderInputStream#read(byte[],int,int)",
        "org.apache.commons.io.input.NullInputStream#read(byte[],int,int)",
        "org.apache.commons.io.input.MemoryMappedFileInputStream#read(byte[],int,int)",
        "org.apache.commons.io.IOUtils.<staticinit>()",
        "org.apache.commons.io.input.RandomAccessFileInputStream#read(byte[],int,int)"
    ],
    "org.apache.commons.io.input.BoundedInputStream#read()": [
        "org.apache.commons.io.input.ProxyInputStream#read()",
        "org.apache.commons.io.input.BoundedInputStream#isMaxCount()",
        "org.apache.commons.io.input.BoundedInputStream#getCount()",
        "org.apache.commons.io.IOUtils.<staticinit>()",
        "org.apache.commons.io.input.BoundedInputStream#onMaxLength(long,long)"
    ],
    "org.apache.commons.io.input.NullInputStream#close()": ["org.apache.commons.io.input.AbstractInputStream#close()"],
    "org.apache.commons.io.output.FilterCollectionWriter#forAllWriters(IOConsumer<Writer>)": [
        "org.apache.commons.io.function.IOConsumer.forAll(IOConsumer<T>,Stream<T>)",
        "org.apache.commons.io.output.FilterCollectionWriter#writers()"
    ],
    "org.apache.commons.io.FileUtils.directoryContains(File,File)": [
        "org.apache.commons.io.FilenameUtils.directoryContains(String,String)",
        "org.apache.commons.io.FileUtils.requireDirectoryExists(File,String)"
    ],
    "org.apache.commons.io.input.ReversedLinesFileReader.FilePart#FilePart(long,int,byte[])": ["org.apache.commons.io.input.ReversedLinesFileReader.FilePart.<init>()"],
    "org.apache.commons.io.file.AccumulatorPathVisitor.withLongCounters()": [
        "org.apache.commons.io.file.Counters.longPathCounters()",
        "org.apache.commons.io.file.AccumulatorPathVisitor#AccumulatorPathVisitor(PathCounters)"
    ],
    "org.apache.commons.io.filefilter.AndFileFilter#AndFileFilter(IOFileFilter[]...)": [
        "org.apache.commons.io.filefilter.AndFileFilter#AndFileFilter(int)",
        "org.apache.commons.io.filefilter.AndFileFilter#addFileFilter(IOFileFilter[]...)"
    ],
    "org.apache.commons.io.output.DeferredFileOutputStream#getData()": ["org.apache.commons.io.output.ByteArrayOutputStream#toByteArray()"],
    "org.apache.commons.io.FileUtils.isFileOlder(File,ChronoLocalDate,OffsetTime)": ["org.apache.commons.io.FileUtils.isFileOlder(File,ChronoZonedDateTime<?>)"],
    "org.apache.commons.io.filefilter.OrFileFilter#OrFileFilter(int)": ["org.apache.commons.io.filefilter.OrFileFilter#OrFileFilter(ArrayList<IOFileFilter>)"],
    "org.apache.commons.io.input.WindowsLineEndingInputStream#close()": [
        "org.apache.commons.io.input.AbstractInputStream#close()",
        "org.apache.commons.io.input.CircularInputStream#close()",
        "org.apache.commons.io.input.ReaderInputStream#close()",
        "org.apache.commons.io.input.BufferedFileChannelInputStream#close()",
        "org.apache.commons.io.input.DemuxInputStream#close()",
        "org.apache.commons.io.input.CharSequenceInputStream#close()",
        "org.apache.commons.io.input.WindowsLineEndingInputStream#close()",
        "org.apache.commons.io.input.BrokenInputStream#close()",
        "org.apache.commons.io.input.RandomAccessFileInputStream#close()",
        "org.apache.commons.io.input.UnixLineEndingInputStream#close()",
        "org.apache.commons.io.input.UnsynchronizedFilterInputStream#close()",
        "org.apache.commons.io.input.NullInputStream#close()",
        "org.apache.commons.io.input.MemoryMappedFileInputStream#close()",
        "org.apache.commons.io.input.UnsynchronizedBufferedInputStream#close()"
    ],
    "org.apache.commons.io.IOUtils.copy(ByteArrayOutputStream)": [
        "org.apache.commons.io.input.QueueInputStream#newQueueOutputStream()",
        "org.apache.commons.io.input.QueueInputStream#QueueInputStream()"
    ],
    "org.apache.commons.io.IOUtils.readFully(Reader,char[])": ["org.apache.commons.io.IOUtils.readFully(Reader,char[],int,int)"],
    "org.apache.commons.io.output.DeferredFileOutputStream#DeferredFileOutputStream(int,int,String,String,File)": ["org.apache.commons.io.output.DeferredFileOutputStream#DeferredFileOutputStream(int,File,String,String,File,int)"],
    "org.apache.commons.io.TaggedIOException.throwCauseIfTaggedWith(Throwable,Object)": [
        "org.apache.commons.io.TaggedIOException.isTaggedWith(Throwable,Object)",
        "org.apache.commons.io.TaggedIOException#getCause()"
    ],
    "org.apache.commons.io.input.UnsupportedOperationExceptions.reset()": [
        "org.apache.commons.io.input.UnsupportedOperationExceptions.method(String)",
        "org.apache.commons.io.input.UnsupportedOperationExceptions.<staticinit>()"
    ],
    "org.apache.commons.io.output.UncheckedFilterWriter#write(char[])": ["org.apache.commons.io.function.Uncheck.accept(IOConsumer<T>,T)"],
    "org.apache.commons.io.filefilter.WildcardFileFilter.Builder#setWildcards(String[]...)": ["org.apache.commons.io.filefilter.WildcardFileFilter.requireWildcards(T)"],
    "org.apache.commons.io.function.IORunnable#asRunnable()": ["org.apache.commons.io.function.Uncheck.run(IORunnable)"],
    "org.apache.commons.io.FileCleaningTracker#track(File,Object,FileDeleteStrategy)": ["org.apache.commons.io.FileCleaningTracker#addTracker(String,Object,FileDeleteStrategy)"],
    "org.apache.commons.io.file.FilesUncheck.write(Path,Iterable<? extends CharSequence>,Charset,OpenOption[]...)": ["org.apache.commons.io.function.Uncheck.apply(IOQuadFunction<T, U, V, W, R>,T,U,V,W)"],
    "org.apache.commons.io.FileUtils.write(File,CharSequence,Charset,boolean)": ["org.apache.commons.io.FileUtils.writeStringToFile(File,String,Charset,boolean)"],
    "org.apache.commons.io.input.XmlStreamReader#XmlStreamReader(InputStream)": ["org.apache.commons.io.input.XmlStreamReader#XmlStreamReader(InputStream,boolean)"],
    "org.apache.commons.io.filefilter.NotFileFilter#accept(File)": [
        "org.apache.commons.io.filefilter.CanExecuteFileFilter#accept(File)",
        "org.apache.commons.io.filefilter.AbstractFileFilter#accept(File)",
        "org.apache.commons.io.filefilter.CanWriteFileFilter#accept(File)",
        "org.apache.commons.io.filefilter.HiddenFileFilter#accept(File)",
        "org.apache.commons.io.filefilter.PathVisitorFileFilter#accept(File)",
        "org.apache.commons.io.filefilter.FileFileFilter#accept(File)",
        "org.apache.commons.io.filefilter.OrFileFilter#accept(File)",
        "org.apache.commons.io.filefilter.PathEqualsFileFilter#accept(File)",
        "org.apache.commons.io.filefilter.SuffixFileFilter#accept(File)",
        "org.apache.commons.io.filefilter.CanReadFileFilter#accept(File)",
        "org.apache.commons.io.filefilter.TrueFileFilter#accept(File)",
        "org.apache.commons.io.filefilter.PrefixFileFilter#accept(File)",
        "org.apache.commons.io.filefilter.MagicNumberFileFilter#accept(File)",
        "org.apache.commons.io.filefilter.NameFileFilter#accept(File)",
        "org.apache.commons.io.filefilter.WildcardFileFilter#accept(File)",
        "org.apache.commons.io.filefilter.NotFileFilter#accept(File)",
        "org.apache.commons.io.filefilter.PathMatcherFileFilter#accept(File)",
        "org.apache.commons.io.filefilter.FileEqualsFileFilter#accept(File)",
        "org.apache.commons.io.filefilter.WildcardFilter#accept(File)",
        "org.apache.commons.io.filefilter.AgeFileFilter#accept(File)",
        "org.apache.commons.io.filefilter.DelegateFileFilter#accept(File)",
        "org.apache.commons.io.filefilter.SizeFileFilter#accept(File)",
        "org.apache.commons.io.filefilter.FalseFileFilter#accept(File)",
        "org.apache.commons.io.filefilter.AndFileFilter#accept(File)",
        "org.apache.commons.io.filefilter.SymbolicLinkFileFilter#accept(File)",
        "org.apache.commons.io.filefilter.DirectoryFileFilter#accept(File)",
        "org.apache.commons.io.filefilter.EmptyFileFilter#accept(File)"
    ],
    "org.apache.commons.io.filefilter.CanExecuteFileFilter.<staticinit>()": [
        "org.apache.commons.io.filefilter.TrueFileFilter#negate()",
        "org.apache.commons.io.filefilter.CanExecuteFileFilter#CanExecuteFileFilter()",
        "org.apache.commons.io.filefilter.FalseFileFilter#negate()",
        "org.apache.commons.io.filefilter.IOFileFilter#negate()"
    ],
    "org.apache.commons.io.output.ThresholdingOutputStream#write(int)": [
        "org.apache.commons.io.output.WriterOutputStream#write(int)",
        "org.apache.commons.io.output.DemuxOutputStream#write(int)",
        "org.apache.commons.io.output.ThresholdingOutputStream#checkThreshold(int)",
        "org.apache.commons.io.output.NullOutputStream#write(int)",
        "org.apache.commons.io.output.QueueOutputStream#write(int)",
        "org.apache.commons.io.output.ThresholdingOutputStream#getStream()",
        "org.apache.commons.io.output.ByteArrayOutputStream#write(int)",
        "org.apache.commons.io.output.ThresholdingOutputStream#write(int)",
        "org.apache.commons.io.output.BrokenOutputStream#write(int)",
        "org.apache.commons.io.output.AppendableOutputStream#write(int)",
        "org.apache.commons.io.output.DeferredFileOutputStream#getStream()",
        "org.apache.commons.io.output.AbstractByteArrayOutputStream#write(int)",
        "org.apache.commons.io.output.UnsynchronizedByteArrayOutputStream#write(int)",
        "org.apache.commons.io.output.ClosedOutputStream#write(int)"
    ],
    "org.apache.commons.io.IOUtils.write(String,OutputStream,Charset)": ["org.apache.commons.io.Charsets.toCharset(Charset)"],
    "org.apache.commons.io.file.CountingPathVisitor#preVisitDirectory(Path,BasicFileAttributes)": [
        "org.apache.commons.io.filefilter.SizeFileFilter#accept(Path,BasicFileAttributes)",
        "org.apache.commons.io.filefilter.WildcardFileFilter#accept(Path,BasicFileAttributes)",
        "org.apache.commons.io.filefilter.FalseFileFilter#accept(Path,BasicFileAttributes)",
        "org.apache.commons.io.filefilter.FileEqualsFileFilter#accept(Path,BasicFileAttributes)",
        "org.apache.commons.io.filefilter.PathVisitorFileFilter#accept(Path,BasicFileAttributes)",
        "org.apache.commons.io.filefilter.SymbolicLinkFileFilter#accept(Path,BasicFileAttributes)",
        "org.apache.commons.io.filefilter.PrefixFileFilter#accept(Path,BasicFileAttributes)",
        "org.apache.commons.io.filefilter.CanExecuteFileFilter#accept(Path,BasicFileAttributes)",
        "org.apache.commons.io.filefilter.MagicNumberFileFilter#accept(Path,BasicFileAttributes)",
        "org.apache.commons.io.filefilter.WildcardFilter#accept(Path,BasicFileAttributes)",
        "org.apache.commons.io.filefilter.NotFileFilter#accept(Path,BasicFileAttributes)",
        "org.apache.commons.io.filefilter.IOFileFilter#accept(Path,BasicFileAttributes)",
        "org.apache.commons.io.filefilter.AndFileFilter#accept(Path,BasicFileAttributes)",
        "org.apache.commons.io.filefilter.DirectoryFileFilter#accept(Path,BasicFileAttributes)",
        "org.apache.commons.io.filefilter.CanWriteFileFilter#accept(Path,BasicFileAttributes)",
        "org.apache.commons.io.filefilter.AgeFileFilter#accept(Path,BasicFileAttributes)",
        "org.apache.commons.io.filefilter.HiddenFileFilter#accept(Path,BasicFileAttributes)",
        "org.apache.commons.io.filefilter.TrueFileFilter#accept(Path,BasicFileAttributes)",
        "org.apache.commons.io.filefilter.EmptyFileFilter#accept(Path,BasicFileAttributes)",
        "org.apache.commons.io.filefilter.OrFileFilter#accept(Path,BasicFileAttributes)",
        "org.apache.commons.io.filefilter.PathEqualsFileFilter#accept(Path,BasicFileAttributes)",
        "org.apache.commons.io.filefilter.CanReadFileFilter#accept(Path,BasicFileAttributes)",
        "org.apache.commons.io.filefilter.NameFileFilter#accept(Path,BasicFileAttributes)",
        "org.apache.commons.io.filefilter.FileFileFilter#accept(Path,BasicFileAttributes)",
        "org.apache.commons.io.filefilter.RegexFileFilter#accept(Path,BasicFileAttributes)",
        "org.apache.commons.io.filefilter.SuffixFileFilter#accept(Path,BasicFileAttributes)"
    ],
    "org.apache.commons.io.filefilter.RegexFileFilter#RegexFileFilter(String,int)": [
        "org.apache.commons.io.filefilter.RegexFileFilter.compile(String,int)",
        "org.apache.commons.io.filefilter.RegexFileFilter#RegexFileFilter(Pattern)"
    ],
    "org.apache.commons.io.function.UncheckedIOBaseStream#onClose(Runnable)": [
        "org.apache.commons.io.input.Tailer#run()",
        "org.apache.commons.io.monitor.FileAlterationMonitor#run()",
        "org.apache.commons.io.ThreadMonitor#run()",
        "org.apache.commons.io.function.Uncheck.apply(IOFunction<T, R>,T)"
    ],
    "org.apache.commons.io.input.RandomAccessFileInputStream#close()": ["org.apache.commons.io.input.AbstractInputStream#close()"],
    "org.apache.commons.io.FileUtils.delete(File)": ["org.apache.commons.io.FileUtils.<staticinit>()"],
    "org.apache.commons.io.FileUtils.writeLines(File,Collection<?>)": ["org.apache.commons.io.FileUtils.writeLines(File,String,Collection<?>,String,boolean)"],
    "org.apache.commons.io.function.IOConsumer.forAll(IOConsumer<T>,Iterable<T>)": [
        "org.apache.commons.io.function.IOStreams.of(Iterable<T>)",
        "org.apache.commons.io.function.IOStreams.forAll(Stream<T>,IOConsumer<T>)"
    ],
    "org.apache.commons.io.input.MemoryMappedFileInputStream#close()": [
        "org.apache.commons.io.input.AbstractInputStream#isClosed()",
        "org.apache.commons.io.input.AbstractInputStream#close()",
        "org.apache.commons.io.input.MemoryMappedFileInputStream.<staticinit>()",
        "org.apache.commons.io.input.MemoryMappedFileInputStream#cleanBuffer()"
    ],
    "org.apache.commons.io.filefilter.SuffixFileFilter#SuffixFileFilter(String)": [
        "org.apache.commons.io.IOCase.<staticinit>()",
        "org.apache.commons.io.filefilter.SuffixFileFilter#SuffixFileFilter(String,IOCase)"
    ],
    "org.apache.commons.io.input.CircularInputStream#read()": [
        "org.apache.commons.io.input.AbstractInputStream#isClosed()",
        "org.apache.commons.io.IOUtils.<staticinit>()"
    ],
    "org.apache.commons.io.filefilter.WildcardFileFilter#accept(File,String)": ["org.apache.commons.io.filefilter.WildcardFileFilter#accept(String)"],
    "org.apache.commons.io.FileDeleteStrategy#delete(File)": [
        "org.apache.commons.io.FileDeleteStrategy#doDelete(File)",
        "org.apache.commons.io.FileDeleteStrategy.ForceFileDeleteStrategy#doDelete(File)"
    ],
    "org.apache.commons.io.filefilter.MagicNumberFileFilter#MagicNumberFileFilter(String,long)": [
        "org.apache.commons.io.filefilter.AbstractFileFilter#AbstractFileFilter()",
        "org.apache.commons.io.filefilter.MagicNumberFileFilter.<init>()"
    ],
    "org.apache.commons.io.input.NullReader.<staticinit>()": ["org.apache.commons.io.input.NullReader#NullReader()"],
    "org.apache.commons.io.function.IOConsumer.forAll(IOConsumer<T>,T[]...)": [
        "org.apache.commons.io.function.IOStreams.forAll(Stream<T>,IOConsumer<T>)",
        "org.apache.commons.io.function.IOStreams.of(T[]...)"
    ],
    "org.apache.commons.io.input.CountingInputStream#afterRead(int)": ["org.apache.commons.io.IOUtils.<staticinit>()"],
    "org.apache.commons.io.file.spi.FileSystemProviders.installed()": ["org.apache.commons.io.file.spi.FileSystemProviders.<staticinit>()"],
    "org.apache.commons.io.file.PathUtils.deleteDirectory(Path)": [
        "org.apache.commons.io.file.PathUtils.deleteDirectory(Path,DeleteOption[]...)",
        "org.apache.commons.io.file.PathUtils.<staticinit>()"
    ],
    "org.apache.commons.io.StreamIterator.iterator(Stream<T>)": ["org.apache.commons.io.StreamIterator#StreamIterator(Stream<E>)"],
    "org.apache.commons.io.FileUtils.isFileNewer(File,FileTime)": [
        "org.apache.commons.io.file.PathUtils.isNewer(Path,Path)",
        "org.apache.commons.io.FileUtils.<staticinit>()"
    ],
    "org.apache.commons.io.EndianUtils.writeSwappedFloat(byte[],int,float)": ["org.apache.commons.io.EndianUtils.writeSwappedInteger(byte[],int,int)"],
    "org.apache.commons.io.LineIterator.closeQuietly(LineIterator)": ["org.apache.commons.io.IOUtils.closeQuietly(Closeable)"],
    "org.apache.commons.io.FileUtils.writeByteArrayToFile(File,byte[],boolean)": ["org.apache.commons.io.FileUtils.writeByteArrayToFile(File,byte[],int,int,boolean)"],
    "org.apache.commons.io.input.Tailer.TailablePath#TailablePath(Path,LinkOption[]...)": ["org.apache.commons.io.input.Tailer.TailablePath.<init>()"],
    "org.apache.commons.io.input.XmlStreamReader#XmlStreamReader(Path)": ["org.apache.commons.io.input.XmlStreamReader#XmlStreamReader(URL)"],
    "org.apache.commons.io.FileUtils.iterateFiles(File,String[],boolean)": [
        "org.apache.commons.io.StreamIterator.iterator(Stream<T>)",
        "org.apache.commons.io.FileUtils.streamFiles(File,boolean,String[]...)",
        "org.apache.commons.io.function.Uncheck.get(IOSupplier<T>)"
    ],
    "org.apache.commons.io.file.PathUtils.getLastModifiedFileTime(File)": ["org.apache.commons.io.file.PathUtils.<staticinit>()"],
    "org.apache.commons.io.IOUtils.toInputStream(CharSequence,String)": [
        "org.apache.commons.io.Charsets.toCharset(String)",
        "org.apache.commons.io.IOUtils.toInputStream(CharSequence,Charset)"
    ],
    "org.apache.commons.io.file.PathUtils.newDirectoryStream(Path,PathFilter)": ["org.apache.commons.io.file.DirectoryStreamFilter#DirectoryStreamFilter(PathFilter)"],
    "org.apache.commons.io.input.NullReader#reset()": ["org.apache.commons.io.input.UnsupportedOperationExceptions.reset()"],
    "org.apache.commons.io.input.ReaderInputStream#fillBuffer()": [
        "org.apache.commons.io.input.CharSequenceReader#read(char[],int,int)",
        "org.apache.commons.io.input.UnsynchronizedBufferedReader#read(char[],int,int)",
        "org.apache.commons.io.input.NullReader#read(char[],int,int)",
        "org.apache.commons.io.input.BrokenReader#read(char[],int,int)",
        "org.apache.commons.io.input.SequenceReader#read(char[],int,int)",
        "org.apache.commons.io.input.ClosedReader#read(char[],int,int)",
        "org.apache.commons.io.input.XmlStreamReader#read(char[],int,int)",
        "org.apache.commons.io.input.BoundedReader#read(char[],int,int)",
        "org.apache.commons.io.IOUtils.<staticinit>()"
    ],
    "org.apache.commons.io.input.ReaderInputStream#ReaderInputStream(Reader)": [
        "org.apache.commons.io.input.ReaderInputStream#ReaderInputStream(Reader,Charset)",
        "org.apache.commons.io.IOUtils.<staticinit>()"
    ],
    "org.apache.commons.io.HexDump.dump(byte[],long,OutputStream,int)": [
        "org.apache.commons.io.HexDump.dump(byte[],long,Appendable,int,int)",
        "org.apache.commons.io.output.CloseShieldOutputStream.wrap(OutputStream)"
    ],
    "org.apache.commons.io.function.Uncheck.apply(IOQuadFunction<T, U, V, W, R>,T,U,V,W)": ["org.apache.commons.io.function.Uncheck.wrap(IOException)"],
    "org.apache.commons.io.filefilter.DirectoryFileFilter.<staticinit>()": ["org.apache.commons.io.filefilter.DirectoryFileFilter#DirectoryFileFilter()"],
    "org.apache.commons.io.output.ProxyCollectionWriter#ProxyCollectionWriter(Writer[]...)": [
        "org.apache.commons.io.output.ProxyCollectionWriter.<init>()",
        "org.apache.commons.io.output.FilterCollectionWriter#FilterCollectionWriter(Writer[]...)"
    ],
    "org.apache.commons.io.serialization.ValidatingObjectInputStream#resolveClass(ObjectStreamClass)": ["org.apache.commons.io.serialization.ValidatingObjectInputStream#checkClassName(String)"],
    "org.apache.commons.io.file.FilesUncheck.createDirectory(Path,FileAttribute<?>[]...)": ["org.apache.commons.io.function.Uncheck.apply(IOBiFunction<T, U, R>,T,U)"],
    "org.apache.commons.io.IOUtils.toByteArray(InputStream,int)": [
        "org.apache.commons.io.IOUtils.<staticinit>()",
        "org.apache.commons.io.IOUtils.toByteArray(IOTriFunction<byte[], Integer, Integer, Integer>,int)"
    ],
    "org.apache.commons.io.filefilter.HiddenFileFilter#HiddenFileFilter()": [
        "org.apache.commons.io.filefilter.AbstractFileFilter#AbstractFileFilter()",
        "org.apache.commons.io.filefilter.HiddenFileFilter.<init>()"
    ],
    "org.apache.commons.io.filefilter.AndFileFilter#AndFileFilter(ArrayList<IOFileFilter>)": [
        "org.apache.commons.io.filefilter.AbstractFileFilter#AbstractFileFilter()",
        "org.apache.commons.io.filefilter.AndFileFilter.<init>()"
    ],
    "org.apache.commons.io.input.UncheckedFilterInputStream#reset()": ["org.apache.commons.io.function.Uncheck.run(IORunnable)"],
    "org.apache.commons.io.filefilter.PathMatcherFileFilter#PathMatcherFileFilter(PathMatcher)": [
        "org.apache.commons.io.filefilter.AbstractFileFilter#AbstractFileFilter()",
        "org.apache.commons.io.filefilter.PathMatcherFileFilter.<init>()"
    ],
    "org.apache.commons.io.output.XmlStreamWriter#flush()": [
        "org.apache.commons.io.output.BrokenWriter#flush()",
        "org.apache.commons.io.output.AppendableWriter#flush()",
        "org.apache.commons.io.output.StringBuilderWriter#flush()",
        "org.apache.commons.io.output.FilterCollectionWriter#flush()",
        "org.apache.commons.io.output.XmlStreamWriter#flush()",
        "org.apache.commons.io.output.NullWriter#flush()",
        "org.apache.commons.io.output.ProxyCollectionWriter#flush()",
        "org.apache.commons.io.output.ClosedWriter#flush()",
        "org.apache.commons.io.output.LockableFileWriter#flush()"
    ],
    "org.apache.commons.io.monitor.FileEntry#newChildInstance(File)": ["org.apache.commons.io.monitor.FileEntry#FileEntry(FileEntry,File)"],
    "org.apache.commons.io.function.Erase.run(IORunnable)": ["org.apache.commons.io.function.Erase.rethrow(Throwable)"],
    "org.apache.commons.io.output.ClosedWriter.<staticinit>()": ["org.apache.commons.io.output.ClosedWriter.<init>()"],
    "org.apache.commons.io.IOUtils.writeChunked(byte[],OutputStream)": [
        "org.apache.commons.io.output.WriterOutputStream#write(byte[],int,int)",
        "org.apache.commons.io.output.AbstractByteArrayOutputStream#write(byte[],int,int)",
        "org.apache.commons.io.output.NullOutputStream#write(byte[],int,int)",
        "org.apache.commons.io.output.UnsynchronizedByteArrayOutputStream#write(byte[],int,int)",
        "org.apache.commons.io.output.ClosedOutputStream#write(byte[],int,int)",
        "org.apache.commons.io.IOUtils.<staticinit>()",
        "org.apache.commons.io.output.ThresholdingOutputStream#write(byte[],int,int)",
        "org.apache.commons.io.output.ByteArrayOutputStream#write(byte[],int,int)"
    ],
    "org.apache.commons.io.file.CopyDirectoryVisitor#CopyDirectoryVisitor(PathCounters,Path,Path,CopyOption[]...)": [
        "org.apache.commons.io.file.CountingPathVisitor#CountingPathVisitor(PathCounters)",
        "org.apache.commons.io.file.CopyDirectoryVisitor.<init>()",
        "org.apache.commons.io.file.CopyDirectoryVisitor.toCopyOption(CopyOption[]...)"
    ],
    "org.apache.commons.io.function.IOBiFunction#asBiFunction()": ["org.apache.commons.io.function.Uncheck.apply(IOBiFunction<T, U, R>,T,U)"],
    "org.apache.commons.io.output.BrokenOutputStream#BrokenOutputStream(Throwable)": ["org.apache.commons.io.output.BrokenOutputStream#BrokenOutputStream(Supplier<Throwable>)"],
    "org.apache.commons.io.input.QueueInputStream#QueueInputStream(BlockingQueue<Integer>)": ["org.apache.commons.io.input.QueueInputStream#QueueInputStream(BlockingQueue<Integer>,Duration)"],
    "org.apache.commons.io.file.FilesUncheck.newByteChannel(Path,Set<? extends OpenOption>,FileAttribute<?>[]...)": ["org.apache.commons.io.function.Uncheck.apply(IOTriFunction<T, U, V, R>,T,U,V)"],
    "org.apache.commons.io.FilenameUtils.separatorsToWindows(String)": [
        "org.apache.commons.io.FileSystem#normalizeSeparators(String)",
        "org.apache.commons.io.FileSystem.<staticinit>()"
    ],
    "org.apache.commons.io.function.IOIterator.adapt(Iterator<E>)": ["org.apache.commons.io.function.IOIteratorAdapter.adapt(Iterator<E>)"],
    "org.apache.commons.io.filefilter.FileFilterUtils.nameFileFilter(String)": ["org.apache.commons.io.filefilter.NameFileFilter#NameFileFilter(String)"],
    "org.apache.commons.io.output.AppendableWriter#AppendableWriter(T extends Appendable)": ["org.apache.commons.io.output.AppendableWriter.<init>()"],
    "org.apache.commons.io.IOUtils.clear()": ["org.apache.commons.io.IOUtils.<staticinit>()"],
    "org.apache.commons.io.input.ProxyInputStream#read(byte[],int,int)": [
        "org.apache.commons.io.input.AutoCloseInputStream#afterRead(int)",
        "org.apache.commons.io.input.ProxyInputStream#afterRead(int)",
        "org.apache.commons.io.input.CharSequenceInputStream#read(byte[],int,int)",
        "org.apache.commons.io.input.UnsynchronizedByteArrayInputStream#read(byte[],int,int)",
        "org.apache.commons.io.input.BoundedInputStream#afterRead(int)",
        "org.apache.commons.io.input.CountingInputStream#afterRead(int)",
        "org.apache.commons.io.input.MemoryMappedFileInputStream#read(byte[],int,int)",
        "org.apache.commons.io.input.RandomAccessFileInputStream#read(byte[],int,int)",
        "org.apache.commons.io.IOUtils.<staticinit>()",
        "org.apache.commons.io.input.ThrottledInputStream#beforeRead(int)",
        "org.apache.commons.io.input.UnsynchronizedFilterInputStream#read(byte[],int,int)",
        "org.apache.commons.io.input.BufferedFileChannelInputStream#read(byte[],int,int)",
        "org.apache.commons.io.input.ProxyInputStream#beforeRead(int)",
        "org.apache.commons.io.input.UnsynchronizedBufferedInputStream#read(byte[],int,int)",
        "org.apache.commons.io.input.TaggedInputStream#handleIOException(IOException)",
        "org.apache.commons.io.input.ClosedInputStream#read(byte[],int,int)",
        "org.apache.commons.io.input.ChecksumInputStream#afterRead(int)",
        "org.apache.commons.io.input.ReaderInputStream#read(byte[],int,int)",
        "org.apache.commons.io.input.NullInputStream#read(byte[],int,int)",
        "org.apache.commons.io.input.ProxyInputStream#handleIOException(IOException)"
    ],
    "org.apache.commons.io.function.UncheckedIOSpliterator#characteristics()": ["org.apache.commons.io.function.IOSpliterator#characteristics()"],
    "org.apache.commons.io.IOUtils.closeQuietly(Closeable,Consumer<IOException>)": [
        "org.apache.commons.io.LineIterator#close()",
        "org.apache.commons.io.input.ReversedLinesFileReader#close()",
        "org.apache.commons.io.input.Tailer.RandomAccessFileBridge#close()",
        "org.apache.commons.io.function.IOBaseStream#close()"
    ],
    "org.apache.commons.io.filefilter.HiddenFileFilter#accept(Path,BasicFileAttributes)": [
        "org.apache.commons.io.filefilter.AbstractFileFilter#toFileVisitResult(boolean)",
        "org.apache.commons.io.filefilter.AbstractFileFilter#get(IOSupplier<FileVisitResult>)"
    ],
    "org.apache.commons.io.output.ProxyWriter#write(String)": [
        "org.apache.commons.io.output.ProxyCollectionWriter#write(String)",
        "org.apache.commons.io.output.ProxyWriter#afterWrite(int)",
        "org.apache.commons.io.output.ProxyWriter#beforeWrite(int)",
        "org.apache.commons.io.output.LockableFileWriter#write(String)",
        "org.apache.commons.io.output.TaggedWriter#handleIOException(IOException)",
        "org.apache.commons.io.output.StringBuilderWriter#write(String)",
        "org.apache.commons.io.output.ProxyWriter#handleIOException(IOException)",
        "org.apache.commons.io.output.FilterCollectionWriter#write(String)",
        "org.apache.commons.io.IOUtils.length(Object[])",
        "org.apache.commons.io.output.NullWriter#write(String)"
    ],
    "org.apache.commons.io.FilenameUtils.doGetFullPath(String,boolean)": [
        "org.apache.commons.io.FilenameUtils.getPrefix(String)",
        "org.apache.commons.io.FilenameUtils.indexOfLastSeparator(String)",
        "org.apache.commons.io.FilenameUtils.getPrefixLength(String)"
    ],
    "org.apache.commons.io.output.UnsynchronizedByteArrayOutputStream.builder()": ["org.apache.commons.io.output.UnsynchronizedByteArrayOutputStream.Builder.<init>()"],
    "org.apache.commons.io.function.IOStream#toArray(IntFunction<A[]>)": ["org.apache.commons.io.function.IOBaseStreamAdapter#unwrap()"],
    "org.apache.commons.io.FileUtils.writeByteArrayToFile(File,byte[])": ["org.apache.commons.io.FileUtils.writeByteArrayToFile(File,byte[],boolean)"],
    "org.apache.commons.io.FileUtils.isFileNewer(File,ChronoLocalDate,OffsetTime)": ["org.apache.commons.io.FileUtils.isFileNewer(File,ChronoLocalDateTime<?>)"],
    "org.apache.commons.io.filefilter.NameFileFilter#acceptBaseName(String)": ["org.apache.commons.io.IOCase#checkEquals(String,String)"],
    "org.apache.commons.io.EndianUtils.writeSwappedDouble(byte[],int,double)": ["org.apache.commons.io.EndianUtils.writeSwappedLong(byte[],int,long)"],
    "org.apache.commons.io.IOUtils.toInputStream(CharSequence)": ["org.apache.commons.io.IOUtils.toInputStream(CharSequence,Charset)"],
    "org.apache.commons.io.input.ReversedLinesFileReader.Builder#Builder()": [
        "org.apache.commons.io.build.AbstractStreamBuilder#setBufferSize(int)",
        "org.apache.commons.io.build.AbstractStreamBuilder#setBufferSizeDefault(int)",
        "org.apache.commons.io.build.AbstractStreamBuilder.<init>()",
        "org.apache.commons.io.input.ReversedLinesFileReader.Builder.<init>()",
        "org.apache.commons.io.input.ReversedLinesFileReader.<staticinit>()"
    ],
    "org.apache.commons.io.filefilter.PrefixFileFilter#accept(String)": ["org.apache.commons.io.IOCase#checkStartsWith(String,String)"],
    "org.apache.commons.io.output.ProxyWriter#write(char[],int,int)": [
        "org.apache.commons.io.output.ProxyWriter#afterWrite(int)",
        "org.apache.commons.io.output.StringBuilderWriter#write(char[],int,int)",
        "org.apache.commons.io.output.ClosedWriter#write(char[],int,int)",
        "org.apache.commons.io.output.XmlStreamWriter#write(char[],int,int)",
        "org.apache.commons.io.output.NullWriter#write(char[],int,int)",
        "org.apache.commons.io.output.ProxyWriter#beforeWrite(int)",
        "org.apache.commons.io.output.TaggedWriter#handleIOException(IOException)",
        "org.apache.commons.io.output.BrokenWriter#write(char[],int,int)",
        "org.apache.commons.io.output.ProxyWriter#handleIOException(IOException)",
        "org.apache.commons.io.output.FilterCollectionWriter#write(char[],int,int)",
        "org.apache.commons.io.output.AppendableWriter#write(char[],int,int)",
        "org.apache.commons.io.output.ProxyCollectionWriter#write(char[],int,int)",
        "org.apache.commons.io.output.LockableFileWriter#write(char[],int,int)"
    ],
    "org.apache.commons.io.filefilter.IOFileFilter#or(IOFileFilter)": ["org.apache.commons.io.filefilter.OrFileFilter#OrFileFilter(IOFileFilter[]...)"],
    "org.apache.commons.io.input.MessageDigestInputStream#MessageDigestInputStream(InputStream,MessageDigest)": [
        "org.apache.commons.io.input.MessageDigestInputStream.MessageDigestMaintainingObserver#MessageDigestMaintainingObserver(MessageDigest)",
        "org.apache.commons.io.input.ObservableInputStream#ObservableInputStream(InputStream,List<Observer>)",
        "org.apache.commons.io.input.MessageDigestInputStream.<init>()"
    ],
    "org.apache.commons.io.IOUtils.closeQuietly(InputStream)": ["org.apache.commons.io.IOUtils.closeQ(Closeable)"],
    "org.apache.commons.io.build.AbstractStreamBuilder#getBufferSizeDefault()": ["org.apache.commons.io.IOUtils.<staticinit>()"],
    "org.apache.commons.io.build.AbstractOrigin.URIOrigin#getInputStream(OpenOption[]...)": [
        "org.apache.commons.io.file.spi.FileSystemProviders#getFileSystemProvider(String)",
        "org.apache.commons.io.build.AbstractOrigin#get()",
        "org.apache.commons.io.file.spi.FileSystemProviders.installed()",
        "org.apache.commons.io.build.AbstractOrigin.URIOrigin.<staticinit>()",
        "org.apache.commons.io.build.AbstractOrigin.URIOrigin#getPath()"
    ],
    "org.apache.commons.io.input.TeeInputStream#TeeInputStream(InputStream,OutputStream)": ["org.apache.commons.io.input.TeeInputStream#TeeInputStream(InputStream,OutputStream,boolean)"],
    "org.apache.commons.io.function.IOStream.empty()": ["org.apache.commons.io.function.IOStreamAdapter.adapt(Stream<T>)"],
    "org.apache.commons.io.input.NullInputStream#NullInputStream(long,boolean,boolean)": [
        "org.apache.commons.io.input.AbstractInputStream.<init>()",
        "org.apache.commons.io.input.NullInputStream.<init>()"
    ],
    "org.apache.commons.io.filefilter.FileFilterUtils.asFileFilter(FileFilter)": ["org.apache.commons.io.filefilter.DelegateFileFilter#DelegateFileFilter(FileFilter)"],
    "org.apache.commons.io.input.ObservableInputStream#noteFinished()": ["org.apache.commons.io.input.ObservableInputStream#forEachObserver(IOConsumer<Observer>)"],
    "org.apache.commons.io.input.ProxyReader#ready()": [
        "org.apache.commons.io.input.CharSequenceReader#ready()",
        "org.apache.commons.io.input.ProxyReader#handleIOException(IOException)",
        "org.apache.commons.io.input.BrokenReader#ready()",
        "org.apache.commons.io.input.UnsynchronizedBufferedReader#ready()",
        "org.apache.commons.io.input.TaggedReader#handleIOException(IOException)"
    ],
    "org.apache.commons.io.input.AutoCloseInputStream.Builder.<init>()": ["org.apache.commons.io.build.AbstractStreamBuilder.<init>()"],
    "org.apache.commons.io.function.Uncheck.accept(IOConsumer<T>,T)": ["org.apache.commons.io.function.Uncheck.wrap(IOException)"],
    "org.apache.commons.io.input.UnsynchronizedBufferedReader#chompNewline()": [
        "org.apache.commons.io.IOUtils.<staticinit>()",
        "org.apache.commons.io.input.UnsynchronizedBufferedReader#fillBuf()"
    ],
    "org.apache.commons.io.function.IOConsumer#asConsumer()": ["org.apache.commons.io.function.Uncheck.accept(IOConsumer<T>,T)"],
    "org.apache.commons.io.FileUtils.isFileNewer(File,Date)": ["org.apache.commons.io.FileUtils.isFileNewer(File,ChronoLocalDateTime<?>)"],
    "org.apache.commons.io.FileUtils.writeLines(File,String,Collection<?>,boolean)": ["org.apache.commons.io.FileUtils.writeLines(File,String,Collection<?>,String,boolean)"],
    "org.apache.commons.io.output.LockableFileWriter#LockableFileWriter(File,String)": ["org.apache.commons.io.output.LockableFileWriter#LockableFileWriter(File,String,boolean,String)"],
    "org.apache.commons.io.filefilter.PrefixFileFilter#PrefixFileFilter(String,IOCase)": [
        "org.apache.commons.io.filefilter.AbstractFileFilter#AbstractFileFilter()",
        "org.apache.commons.io.IOCase.value(IOCase,IOCase)",
        "org.apache.commons.io.filefilter.PrefixFileFilter.<init>()",
        "org.apache.commons.io.IOCase.<staticinit>()"
    ],
    "org.apache.commons.io.IO.clear()": ["org.apache.commons.io.IOUtils.clear()"],
    "org.apache.commons.io.input.NullReader#NullReader(long)": ["org.apache.commons.io.input.NullReader#NullReader(long,boolean,boolean)"],
    "org.apache.commons.io.output.LockableFileWriter#write(int)": [
        "org.apache.commons.io.output.LockableFileWriter#write(int)",
        "org.apache.commons.io.output.AppendableWriter#write(int)",
        "org.apache.commons.io.output.ProxyCollectionWriter#write(int)",
        "org.apache.commons.io.output.NullWriter#write(int)",
        "org.apache.commons.io.output.FilterCollectionWriter#write(int)"
    ],
    "org.apache.commons.io.comparator.ReverseFileComparator#ReverseFileComparator(Comparator<File>)": [
        "org.apache.commons.io.comparator.AbstractFileComparator.<init>()",
        "org.apache.commons.io.comparator.ReverseFileComparator.<init>()"
    ],
    "org.apache.commons.io.serialization.RegexpClassNameMatcher#RegexpClassNameMatcher(Pattern)": ["org.apache.commons.io.serialization.RegexpClassNameMatcher.<init>()"],
    "org.apache.commons.io.monitor.FileAlterationObserver#listFileEntries(File,FileEntry)": [
        "org.apache.commons.io.monitor.FileAlterationObserver#listFiles(File)",
        "org.apache.commons.io.monitor.FileAlterationObserver#createFileEntry(FileEntry,File)"
    ],
    "org.apache.commons.io.output.NullAppendable.<staticinit>()": ["org.apache.commons.io.output.NullAppendable#NullAppendable()"],
    "org.apache.commons.io.file.StandardDeleteOption.overrideReadOnly(DeleteOption[])": [
        "org.apache.commons.io.IOUtils.length(Object[])",
        "org.apache.commons.io.file.StandardDeleteOption.<staticinit>()"
    ],
    "org.apache.commons.io.function.IOSpliterator#forEachRemaining(IOConsumer<? super T>)": ["org.apache.commons.io.function.IOSpliterator#tryAdvance(IOConsumer<? super T>)"],
    "org.apache.commons.io.filefilter.WildcardFileFilter.Builder#get()": ["org.apache.commons.io.filefilter.WildcardFileFilter#WildcardFileFilter(IOCase,String[]...)"],
    "org.apache.commons.io.output.LockableFileWriter#write(char[])": [
        "org.apache.commons.io.output.ProxyCollectionWriter#write(char[])",
        "org.apache.commons.io.output.LockableFileWriter#write(char[])",
        "org.apache.commons.io.output.FilterCollectionWriter#write(char[])",
        "org.apache.commons.io.output.NullWriter#write(char[])"
    ],
    "org.apache.commons.io.input.BoundedInputStream#available()": [
        "org.apache.commons.io.input.BoundedInputStream#isMaxCount()",
        "org.apache.commons.io.input.BoundedInputStream#getCount()",
        "org.apache.commons.io.input.BrokenInputStream#available()",
        "org.apache.commons.io.input.UnsynchronizedBufferedInputStream#available()",
        "org.apache.commons.io.input.BufferedFileChannelInputStream#available()",
        "org.apache.commons.io.input.CircularInputStream#available()",
        "org.apache.commons.io.input.ReaderInputStream#available()",
        "org.apache.commons.io.input.UnsynchronizedByteArrayInputStream#available()",
        "org.apache.commons.io.input.RandomAccessFileInputStream#available()",
        "org.apache.commons.io.input.MemoryMappedFileInputStream#available()",
        "org.apache.commons.io.input.BoundedInputStream#onMaxLength(long,long)",
        "org.apache.commons.io.input.NullInputStream#available()",
        "org.apache.commons.io.input.CharSequenceInputStream#available()",
        "org.apache.commons.io.input.UnsynchronizedFilterInputStream#available()"
    ],
    "org.apache.commons.io.IOUtils.copy(URL,File)": [
        "org.apache.commons.io.IOUtils.copy(URL,OutputStream)",
        "org.apache.commons.io.IOUtils.<staticinit>()"
    ],
    "org.apache.commons.io.filefilter.FileFilterUtils.sizeFileFilter(long,boolean)": ["org.apache.commons.io.filefilter.SizeFileFilter#SizeFileFilter(long,boolean)"],
    "org.apache.commons.io.function.UncheckedIOSpliterator#UncheckedIOSpliterator(IOSpliterator<T>)": ["org.apache.commons.io.function.UncheckedIOSpliterator.<init>()"],
    "org.apache.commons.io.input.ClosedInputStream.<staticinit>()": ["org.apache.commons.io.input.ClosedInputStream.<init>()"],
    "org.apache.commons.io.filefilter.AgeFileFilter#AgeFileFilter(long,boolean)": ["org.apache.commons.io.filefilter.AgeFileFilter#AgeFileFilter(Date,boolean)"],
    "org.apache.commons.io.output.ProxyOutputStream#write(int)": [
        "org.apache.commons.io.output.WriterOutputStream#write(int)",
        "org.apache.commons.io.output.DemuxOutputStream#write(int)",
        "org.apache.commons.io.output.NullOutputStream#write(int)",
        "org.apache.commons.io.output.QueueOutputStream#write(int)",
        "org.apache.commons.io.output.ByteArrayOutputStream#write(int)",
        "org.apache.commons.io.output.ThresholdingOutputStream#write(int)",
        "org.apache.commons.io.output.ProxyOutputStream#beforeWrite(int)",
        "org.apache.commons.io.output.BrokenOutputStream#write(int)",
        "org.apache.commons.io.output.AppendableOutputStream#write(int)",
        "org.apache.commons.io.output.AbstractByteArrayOutputStream#write(int)",
        "org.apache.commons.io.output.UnsynchronizedByteArrayOutputStream#write(int)",
        "org.apache.commons.io.output.ProxyOutputStream#handleIOException(IOException)",
        "org.apache.commons.io.output.ClosedOutputStream#write(int)",
        "org.apache.commons.io.output.CountingOutputStream#beforeWrite(int)",
        "org.apache.commons.io.output.ProxyOutputStream#afterWrite(int)",
        "org.apache.commons.io.output.TaggedOutputStream#handleIOException(IOException)"
    ],
    "org.apache.commons.io.function.IOStream#flatMap(IOFunction<? super T, ? extends IOStream<? extends R>>)": [
        "org.apache.commons.io.function.IOStream.adapt(Stream<T>)",
        "org.apache.commons.io.function.Erase.apply(IOFunction<? super T, ? extends R>,T)",
        "org.apache.commons.io.function.IOBaseStreamAdapter#unwrap()"
    ],
    "org.apache.commons.io.function.Erase.compare(IOComparator<? super T>,T,T)": ["org.apache.commons.io.function.Erase.rethrow(Throwable)"],
    "org.apache.commons.io.input.BoundedInputStream.Builder.<init>()": ["org.apache.commons.io.input.BoundedInputStream.AbstractBuilder.<init>()"],
    "org.apache.commons.io.FileUtils.write(File,CharSequence,Charset)": ["org.apache.commons.io.FileUtils.write(File,CharSequence,Charset,boolean)"],
    "org.apache.commons.io.CloseableURLConnection#getInputStream()": ["org.apache.commons.io.CloseableURLConnection#getInputStream()"],
    "org.apache.commons.io.input.UncheckedBufferedReader#mark(int)": ["org.apache.commons.io.function.Uncheck.accept(IOConsumer<T>,T)"],
    "org.apache.commons.io.FileUtils.lastModified(File)": ["org.apache.commons.io.FileUtils.lastModifiedFileTime(File)"],
    "org.apache.commons.io.input.WindowsLineEndingInputStream#handleEos()": ["org.apache.commons.io.IOUtils.<staticinit>()"],
    "org.apache.commons.io.file.PathUtils.readBasicFileAttributes(Path,LinkOption[]...)": ["org.apache.commons.io.file.PathUtils.readAttributes(Path,Class<A extends BasicFileAttributes>,LinkOption[]...)"],
    "org.apache.commons.io.file.FilesUncheck.setPosixFilePermissions(Path,Set<PosixFilePermission>)": ["org.apache.commons.io.function.Uncheck.apply(IOBiFunction<T, U, R>,T,U)"],
    "org.apache.commons.io.input.RandomAccessFileInputStream#RandomAccessFileInputStream(RandomAccessFile)": ["org.apache.commons.io.input.RandomAccessFileInputStream#RandomAccessFileInputStream(RandomAccessFile,boolean)"],
    "org.apache.commons.io.input.ProxyReader#read(CharBuffer)": [
        "org.apache.commons.io.IOUtils.length(Object[])",
        "org.apache.commons.io.input.ProxyReader#handleIOException(IOException)",
        "org.apache.commons.io.input.ProxyReader#beforeRead(int)",
        "org.apache.commons.io.input.ProxyReader#afterRead(int)",
        "org.apache.commons.io.IOUtils.<staticinit>()",
        "org.apache.commons.io.input.TaggedReader#handleIOException(IOException)"
    ],
    "org.apache.commons.io.FilenameUtils.wildcardMatchOnSystem(String,String)": [
        "org.apache.commons.io.FilenameUtils.wildcardMatch(String,String,IOCase)",
        "org.apache.commons.io.IOCase.<staticinit>()"
    ],
    "org.apache.commons.io.output.TeeOutputStream#write(int)": [
        "org.apache.commons.io.output.BrokenOutputStream#write(int)",
        "org.apache.commons.io.output.AppendableOutputStream#write(int)",
        "org.apache.commons.io.output.WriterOutputStream#write(int)",
        "org.apache.commons.io.output.DemuxOutputStream#write(int)",
        "org.apache.commons.io.output.AbstractByteArrayOutputStream#write(int)",
        "org.apache.commons.io.output.UnsynchronizedByteArrayOutputStream#write(int)",
        "org.apache.commons.io.output.NullOutputStream#write(int)",
        "org.apache.commons.io.output.QueueOutputStream#write(int)",
        "org.apache.commons.io.output.ByteArrayOutputStream#write(int)",
        "org.apache.commons.io.output.ClosedOutputStream#write(int)",
        "org.apache.commons.io.output.ProxyOutputStream#write(int)",
        "org.apache.commons.io.output.ThresholdingOutputStream#write(int)"
    ],
    "org.apache.commons.io.output.ThresholdingOutputStream#flush()": [
        "org.apache.commons.io.output.DeferredFileOutputStream#getStream()",
        "org.apache.commons.io.output.ClosedOutputStream#flush()",
        "org.apache.commons.io.output.WriterOutputStream#flush()",
        "org.apache.commons.io.output.ThresholdingOutputStream#flush()",
        "org.apache.commons.io.output.ThresholdingOutputStream#getStream()",
        "org.apache.commons.io.output.DemuxOutputStream#flush()",
        "org.apache.commons.io.output.BrokenOutputStream#flush()"
    ],
    "org.apache.commons.io.input.UnixLineEndingInputStream#mark(int)": ["org.apache.commons.io.input.UnsupportedOperationExceptions.mark()"],
    "org.apache.commons.io.function.IOStream#mapToLong(ToLongFunction<? super T>)": ["org.apache.commons.io.function.IOBaseStreamAdapter#unwrap()"],
    "org.apache.commons.io.HexDump.dump(byte[],Appendable)": ["org.apache.commons.io.HexDump.dump(byte[],long,Appendable,int,int)"],
    "org.apache.commons.io.IOUtils.contentEqualsIgnoreEOL(BufferedReader,BufferedReader)": ["org.apache.commons.io.IOUtils.contentEquals(InputStream,InputStream)"],
    "org.apache.commons.io.filefilter.PathVisitorFileFilter#accept(File)": [
        "org.apache.commons.io.file.PathUtils.readBasicFileAttributes(Path)",
        "org.apache.commons.io.filefilter.AbstractFileFilter#handle(Throwable)",
        "org.apache.commons.io.filefilter.PathVisitorFileFilter#visitFile(Path,BasicFileAttributes)"
    ],
    "org.apache.commons.io.output.CountingOutputStream#getCount()": ["org.apache.commons.io.output.CountingOutputStream#getByteCount()"],
    "org.apache.commons.io.input.ReadAheadInputStream.Builder.<init>()": ["org.apache.commons.io.build.AbstractStreamBuilder.<init>()"],
    "org.apache.commons.io.build.AbstractStreamBuilder#setBufferSizeChecker(IntUnaryOperator)": ["org.apache.commons.io.build.AbstractSupplier#asThis()"],
    "org.apache.commons.io.function.Erase.apply(IOBiFunction<? super T, ? super U, ? extends R>,T,U)": ["org.apache.commons.io.function.Erase.rethrow(Throwable)"],
    "org.apache.commons.io.FilenameUtils.flipSeparator(char)": ["org.apache.commons.io.FilenameUtils.<staticinit>()"],
    "org.apache.commons.io.function.IOBaseStream#parallel()": [
        "org.apache.commons.io.function.IOBaseStream#isParallel()",
        "org.apache.commons.io.function.IOBaseStreamAdapter#unwrap()"
    ],
    "org.apache.commons.io.IOUtils.write(char[],OutputStream,Charset)": ["org.apache.commons.io.IOUtils.write(String,OutputStream,Charset)"],
    "org.apache.commons.io.input.SwappedDataInputStream#readInt()": ["org.apache.commons.io.EndianUtils.readSwappedInteger(InputStream)"],
    "org.apache.commons.io.input.ReaderInputStream.Builder#setCharsetEncoder(CharsetEncoder)": [
        "org.apache.commons.io.input.ReaderInputStream.newEncoder(Charset)",
        "org.apache.commons.io.build.AbstractStreamBuilder#getCharsetDefault()",
        "org.apache.commons.io.build.AbstractStreamBuilder#setCharset(Charset)",
        "org.apache.commons.io.charset.CharsetEncoders.toCharsetEncoder(CharsetEncoder,Supplier<CharsetEncoder>)"
    ],
    "org.apache.commons.io.input.CharSequenceInputStream#read(byte[],int,int)": [
        "org.apache.commons.io.input.CharSequenceInputStream#fillBuffer()",
        "org.apache.commons.io.IOUtils.<staticinit>()"
    ],
    "org.apache.commons.io.IOUtils.resourceToString(String,Charset,ClassLoader)": [
        "org.apache.commons.io.IOUtils.resourceToURL(String,ClassLoader)",
        "org.apache.commons.io.IOUtils.toString(URL,Charset)"
    ],
    "org.apache.commons.io.file.FilesUncheck.newDirectoryStream(Path)": ["org.apache.commons.io.function.Uncheck.apply(IOFunction<T, R>,T)"],
    "org.apache.commons.io.file.DeletingPathVisitor#equals(Object)": ["org.apache.commons.io.file.CountingPathVisitor#equals(Object)"],
    "org.apache.commons.io.function.Uncheck.apply(IOTriFunction<T, U, V, R>,T,U,V)": ["org.apache.commons.io.function.Uncheck.wrap(IOException)"],
    "org.apache.commons.io.input.BrokenReader#mark(int)": ["org.apache.commons.io.input.BrokenReader#rethrow()"],
    "org.apache.commons.io.file.CountingPathVisitor#updateDirCounter(Path,IOException)": [
        "org.apache.commons.io.file.Counters.BigIntegerCounter#increment()",
        "org.apache.commons.io.file.Counters.NoopCounter#increment()",
        "org.apache.commons.io.file.Counters.AbstractPathCounters#getDirectoryCounter()",
        "org.apache.commons.io.file.Counters.LongCounter#increment()"
    ],
    "org.apache.commons.io.monitor.FileEntry#getLastModified()": ["org.apache.commons.io.monitor.SerializableFileTime#toMillis()"],
    "org.apache.commons.io.CloseableURLConnection#getHeaderFieldKey(int)": ["org.apache.commons.io.CloseableURLConnection#getHeaderFieldKey(int)"],
    "org.apache.commons.io.filefilter.AbstractFileFilter#accept(File)": [
        "org.apache.commons.io.filefilter.OrFileFilter#accept(File,String)",
        "org.apache.commons.io.filefilter.WildcardFileFilter#accept(File,String)",
        "org.apache.commons.io.filefilter.NameFileFilter#accept(File,String)",
        "org.apache.commons.io.filefilter.AndFileFilter#accept(File,String)",
        "org.apache.commons.io.filefilter.AbstractFileFilter#accept(File,String)",
        "org.apache.commons.io.filefilter.PrefixFileFilter#accept(File,String)",
        "org.apache.commons.io.filefilter.SuffixFileFilter#accept(File,String)",
        "org.apache.commons.io.filefilter.RegexFileFilter#accept(File,String)",
        "org.apache.commons.io.filefilter.NotFileFilter#accept(File,String)",
        "org.apache.commons.io.filefilter.DelegateFileFilter#accept(File,String)",
        "org.apache.commons.io.filefilter.PathVisitorFileFilter#accept(File,String)",
        "org.apache.commons.io.filefilter.WildcardFilter#accept(File,String)"
    ],
    "org.apache.commons.io.file.DeletingPathVisitor#DeletingPathVisitor(PathCounters,LinkOption[],DeleteOption[],String[]...)": [
        "org.apache.commons.io.file.PathUtils.noFollowLinkOptionArray()",
        "org.apache.commons.io.file.StandardDeleteOption.overrideReadOnly(DeleteOption[])",
        "org.apache.commons.io.file.CountingPathVisitor.<staticinit>()",
        "org.apache.commons.io.file.CountingPathVisitor#CountingPathVisitor(PathCounters)",
        "org.apache.commons.io.file.DeletingPathVisitor.<init>()"
    ],
    "org.apache.commons.io.output.LockableFileWriter#LockableFileWriter(File,String,boolean,String)": [
        "org.apache.commons.io.Charsets.toCharset(String)",
        "org.apache.commons.io.output.LockableFileWriter#LockableFileWriter(File,Charset,boolean,String)"
    ],
    "org.apache.commons.io.input.TeeReader#read(char[],int,int)": [
        "org.apache.commons.io.output.StringBuilderWriter#write(char[],int,int)",
        "org.apache.commons.io.output.BrokenWriter#write(char[],int,int)",
        "org.apache.commons.io.input.ProxyReader#read(char[],int,int)",
        "org.apache.commons.io.output.FilterCollectionWriter#write(char[],int,int)",
        "org.apache.commons.io.output.AppendableWriter#write(char[],int,int)",
        "org.apache.commons.io.output.ProxyCollectionWriter#write(char[],int,int)",
        "org.apache.commons.io.output.ClosedWriter#write(char[],int,int)",
        "org.apache.commons.io.output.XmlStreamWriter#write(char[],int,int)",
        "org.apache.commons.io.output.NullWriter#write(char[],int,int)",
        "org.apache.commons.io.output.LockableFileWriter#write(char[],int,int)",
        "org.apache.commons.io.IOUtils.<staticinit>()"
    ],
    "org.apache.commons.io.output.FilterCollectionWriter#FilterCollectionWriter(Writer[]...)": ["org.apache.commons.io.output.FilterCollectionWriter.<init>()"],
    "org.apache.commons.io.input.BoundedReader#close()": [
        "org.apache.commons.io.input.NullReader#close()",
        "org.apache.commons.io.input.UnsynchronizedBufferedReader#close()",
        "org.apache.commons.io.input.BrokenReader#close()",
        "org.apache.commons.io.input.UnsynchronizedReader#close()",
        "org.apache.commons.io.input.CharSequenceReader#close()",
        "org.apache.commons.io.input.SequenceReader#close()",
        "org.apache.commons.io.input.BoundedReader#close()",
        "org.apache.commons.io.input.XmlStreamReader#close()",
        "org.apache.commons.io.input.ClosedReader#close()"
    ],
    "org.apache.commons.io.IOUtils.<staticinit>()": [
        "org.apache.commons.io.IOUtils.charArray()",
        "org.apache.commons.io.StandardLineSeparator.<staticinit>()",
        "org.apache.commons.io.StandardLineSeparator#getString()",
        "org.apache.commons.io.IOUtils.byteArray()"
    ],
    "org.apache.commons.io.input.BoundedInputStream#mark(int)": [
        "org.apache.commons.io.input.WindowsLineEndingInputStream#mark(int)",
        "org.apache.commons.io.input.UnsynchronizedByteArrayInputStream#mark(int)",
        "org.apache.commons.io.input.UnixLineEndingInputStream#mark(int)",
        "org.apache.commons.io.input.NullInputStream#mark(int)",
        "org.apache.commons.io.input.UnsynchronizedBufferedInputStream#mark(int)",
        "org.apache.commons.io.input.UnsynchronizedFilterInputStream#mark(int)",
        "org.apache.commons.io.input.CharSequenceInputStream#mark(int)"
    ],
    "org.apache.commons.io.input.UnsynchronizedBufferedReader#read(char[],int,int)": [
        "org.apache.commons.io.input.CharSequenceReader#ready()",
        "org.apache.commons.io.input.UnsynchronizedBufferedReader#fillBuf()",
        "org.apache.commons.io.input.NullReader#read(char[],int,int)",
        "org.apache.commons.io.input.SequenceReader#read(char[],int,int)",
        "org.apache.commons.io.input.ClosedReader#read(char[],int,int)",
        "org.apache.commons.io.input.XmlStreamReader#read(char[],int,int)",
        "org.apache.commons.io.input.UnsynchronizedReader#checkOpen()",
        "org.apache.commons.io.input.BoundedReader#read(char[],int,int)",
        "org.apache.commons.io.IOUtils.<staticinit>()",
        "org.apache.commons.io.input.CharSequenceReader#read(char[],int,int)",
        "org.apache.commons.io.input.UnsynchronizedBufferedReader#read(char[],int,int)",
        "org.apache.commons.io.input.BrokenReader#ready()",
        "org.apache.commons.io.input.BrokenReader#read(char[],int,int)",
        "org.apache.commons.io.input.UnsynchronizedBufferedReader#ready()"
    ],
    "org.apache.commons.io.output.ProxyCollectionWriter#append(CharSequence,int,int)": [
        "org.apache.commons.io.output.ProxyCollectionWriter#beforeWrite(int)",
        "org.apache.commons.io.output.FilterCollectionWriter#append(CharSequence,int,int)",
        "org.apache.commons.io.output.ProxyCollectionWriter#handleIOException(IOException)",
        "org.apache.commons.io.output.ProxyCollectionWriter#afterWrite(int)"
    ],
    "org.apache.commons.io.input.UnsynchronizedByteArrayInputStream#UnsynchronizedByteArrayInputStream(byte[],int)": [
        "org.apache.commons.io.input.UnsynchronizedByteArrayInputStream.minPosLen(byte[],int)",
        "org.apache.commons.io.input.UnsynchronizedByteArrayInputStream#UnsynchronizedByteArrayInputStream(byte[],int,int,int)",
        "org.apache.commons.io.input.UnsynchronizedByteArrayInputStream.requireNonNegative(int,String)"
    ],
    "org.apache.commons.io.output.WriterOutputStream.Builder#setCharset(Charset)": [
        "org.apache.commons.io.build.AbstractStreamBuilder#setCharset(Charset)",
        "org.apache.commons.io.build.AbstractStreamBuilder#getCharset()"
    ],
    "org.apache.commons.io.output.XmlStreamWriter#detectEncoding(char[],int,int)": [
        "org.apache.commons.io.output.StringBuilderWriter#write(char[],int,int)",
        "org.apache.commons.io.output.StringBuilderWriter#write(String)",
        "org.apache.commons.io.output.NullWriter#write(char[])",
        "org.apache.commons.io.output.ClosedWriter#write(char[],int,int)",
        "org.apache.commons.io.output.XmlStreamWriter#write(char[],int,int)",
        "org.apache.commons.io.output.LockableFileWriter#write(char[])",
        "org.apache.commons.io.output.NullWriter#write(char[],int,int)",
        "org.apache.commons.io.output.BrokenWriter#write(char[],int,int)",
        "org.apache.commons.io.output.FilterCollectionWriter#write(int)",
        "org.apache.commons.io.output.FilterCollectionWriter#write(char[],int,int)",
        "org.apache.commons.io.input.XmlStreamReader.<staticinit>()",
        "org.apache.commons.io.output.AppendableWriter#write(char[],int,int)",
        "org.apache.commons.io.output.ProxyCollectionWriter#write(char[],int,int)",
        "org.apache.commons.io.output.AppendableWriter#write(int)",
        "org.apache.commons.io.output.XmlStreamWriter.<staticinit>()",
        "org.apache.commons.io.output.ProxyCollectionWriter#write(int)",
        "org.apache.commons.io.output.LockableFileWriter#write(char[],int,int)"
    ],
    "org.apache.commons.io.input.CloseShieldInputStream#CloseShieldInputStream(InputStream)": [
        "org.apache.commons.io.input.ProxyInputStream#ProxyInputStream(InputStream)",
        "org.apache.commons.io.input.CloseShieldInputStream.<init>()"
    ],
    "org.apache.commons.io.output.FileWriterWithEncoding#FileWriterWithEncoding(File,CharsetEncoder)": ["org.apache.commons.io.output.FileWriterWithEncoding#FileWriterWithEncoding(File,CharsetEncoder,boolean)"],
    "org.apache.commons.io.output.UncheckedFilterWriter#append(CharSequence,int,int)": ["org.apache.commons.io.function.Uncheck.apply(IOTriFunction<T, U, V, R>,T,U,V)"],
    "org.apache.commons.io.function.UncheckedIOIterator#hasNext()": ["org.apache.commons.io.function.Uncheck.get(IOSupplier<T>)"],
    "org.apache.commons.io.function.IOStream#sorted(IOComparator<? super T>)": [
        "org.apache.commons.io.function.IOStream.adapt(Stream<T>)",
        "org.apache.commons.io.function.Erase.compare(IOComparator<? super T>,T,T)",
        "org.apache.commons.io.function.IOBaseStreamAdapter#unwrap()"
    ],
    "org.apache.commons.io.input.BOMInputStream#getBOM()": [
        "org.apache.commons.io.input.CharSequenceInputStream#read()",
        "org.apache.commons.io.input.UnsynchronizedByteArrayInputStream#read()",
        "org.apache.commons.io.input.RandomAccessFileInputStream#read()",
        "org.apache.commons.io.input.ReaderInputStream#read()",
        "org.apache.commons.io.input.UnsynchronizedFilterInputStream#read()",
        "org.apache.commons.io.input.UnixLineEndingInputStream#read()",
        "org.apache.commons.io.input.DemuxInputStream#read()",
        "org.apache.commons.io.ByteOrderMark#length()",
        "org.apache.commons.io.input.QueueInputStream#read()",
        "org.apache.commons.io.input.NullInputStream#read()",
        "org.apache.commons.io.input.MemoryMappedFileInputStream#read()",
        "org.apache.commons.io.input.BOMInputStream#find()",
        "org.apache.commons.io.input.BufferedFileChannelInputStream#read()",
        "org.apache.commons.io.input.WindowsLineEndingInputStream#read()",
        "org.apache.commons.io.input.BrokenInputStream#read()",
        "org.apache.commons.io.input.ClosedInputStream#read()",
        "org.apache.commons.io.input.UnsynchronizedBufferedInputStream#read()",
        "org.apache.commons.io.input.CircularInputStream#read()"
    ],
    "org.apache.commons.io.input.SwappedDataInputStream#readBoolean()": ["org.apache.commons.io.input.SwappedDataInputStream#readByte()"],
    "org.apache.commons.io.monitor.FileAlterationMonitor#FileAlterationMonitor(long)": ["org.apache.commons.io.monitor.FileAlterationMonitor.<init>()"],
    "org.apache.commons.io.input.UnsynchronizedFilterInputStream#read()": [
        "org.apache.commons.io.input.CharSequenceInputStream#read()",
        "org.apache.commons.io.input.UnsynchronizedByteArrayInputStream#read()",
        "org.apache.commons.io.input.RandomAccessFileInputStream#read()",
        "org.apache.commons.io.input.ReaderInputStream#read()",
        "org.apache.commons.io.input.UnsynchronizedFilterInputStream#read()",
        "org.apache.commons.io.input.UnixLineEndingInputStream#read()",
        "org.apache.commons.io.input.DemuxInputStream#read()",
        "org.apache.commons.io.input.QueueInputStream#read()",
        "org.apache.commons.io.input.NullInputStream#read()",
        "org.apache.commons.io.input.MemoryMappedFileInputStream#read()",
        "org.apache.commons.io.input.BufferedFileChannelInputStream#read()",
        "org.apache.commons.io.input.WindowsLineEndingInputStream#read()",
        "org.apache.commons.io.input.BrokenInputStream#read()",
        "org.apache.commons.io.input.ClosedInputStream#read()",
        "org.apache.commons.io.input.UnsynchronizedBufferedInputStream#read()",
        "org.apache.commons.io.input.CircularInputStream#read()"
    ],
    "org.apache.commons.io.input.MemoryMappedFileInputStream#cleanBuffer()": [
        "org.apache.commons.io.input.ByteBufferCleaner.isSupported()",
        "org.apache.commons.io.input.ByteBufferCleaner.clean(ByteBuffer)"
    ],
    "org.apache.commons.io.filefilter.FileFilterUtils.filterSet(IOFileFilter,Iterable<File>)": ["org.apache.commons.io.filefilter.FileFilterUtils.filterFiles(IOFileFilter,Stream<File>,Collector<? super File, A, R>)"],
    "org.apache.commons.io.comparator.NameFileComparator.<staticinit>()": [
        "org.apache.commons.io.comparator.NameFileComparator#NameFileComparator()",
        "org.apache.commons.io.comparator.ReverseFileComparator#ReverseFileComparator(Comparator<File>)",
        "org.apache.commons.io.IOCase.<staticinit>()",
        "org.apache.commons.io.comparator.NameFileComparator#NameFileComparator(IOCase)"
    ],
    "org.apache.commons.io.file.FilesUncheck.move(Path,Path,CopyOption[]...)": ["org.apache.commons.io.function.Uncheck.apply(IOTriFunction<T, U, V, R>,T,U,V)"],
    "org.apache.commons.io.IOUtils.copy(InputStream,Writer,String)": [
        "org.apache.commons.io.Charsets.toCharset(String)",
        "org.apache.commons.io.IOUtils.copy(InputStream,Writer,Charset)"
    ],
    "org.apache.commons.io.input.Tailer#stop()": ["org.apache.commons.io.input.Tailer#close()"],
    "org.apache.commons.io.filefilter.OrFileFilter#toString()": [
        "org.apache.commons.io.filefilter.AbstractFileFilter#append(List<?>,StringBuilder)",
        "org.apache.commons.io.filefilter.AbstractFileFilter#toString()"
    ],
    "org.apache.commons.io.IOUtils.toString(URI,String)": [
        "org.apache.commons.io.Charsets.toCharset(String)",
        "org.apache.commons.io.IOUtils.toString(URI,Charset)"
    ],
    "org.apache.commons.io.filefilter.FileFilterUtils.suffixFileFilter(String,IOCase)": ["org.apache.commons.io.filefilter.SuffixFileFilter#SuffixFileFilter(String,IOCase)"],
    "org.apache.commons.io.FileUtils.byteCountToDisplaySize(Number)": ["org.apache.commons.io.FileUtils.byteCountToDisplaySize(long)"],
    "org.apache.commons.io.input.UncheckedBufferedReader.Builder#get()": [
        "org.apache.commons.io.build.AbstractStreamBuilder#getReader()",
        "org.apache.commons.io.build.AbstractStreamBuilder#getBufferSize()",
        "org.apache.commons.io.input.UncheckedBufferedReader#UncheckedBufferedReader(Reader,int)",
        "org.apache.commons.io.function.Uncheck.get(IOSupplier<T>)"
    ],
    "org.apache.commons.io.filefilter.SymbolicLinkFileFilter#accept(File)": ["org.apache.commons.io.filefilter.SymbolicLinkFileFilter#isSymbolicLink(Path)"],
    "org.apache.commons.io.output.NullPrintStream#NullPrintStream()": [
        "org.apache.commons.io.output.NullPrintStream.<init>()",
        "org.apache.commons.io.output.NullPrintStream.<staticinit>()",
        "org.apache.commons.io.output.NullOutputStream.<staticinit>()"
    ],
    "org.apache.commons.io.output.FileWriterWithEncoding#FileWriterWithEncoding(String,CharsetEncoder,boolean)": ["org.apache.commons.io.output.FileWriterWithEncoding#FileWriterWithEncoding(File,CharsetEncoder,boolean)"],
    "org.apache.commons.io.input.CharSequenceInputStream.builder()": ["org.apache.commons.io.input.CharSequenceInputStream.Builder.<init>()"],
    "org.apache.commons.io.input.BoundedReader#BoundedReader(Reader,int)": ["org.apache.commons.io.input.BoundedReader.<init>()"],
    "org.apache.commons.io.input.BoundedInputStream#getRemaining()": [
        "org.apache.commons.io.input.BoundedInputStream#getMaxCount()",
        "org.apache.commons.io.input.BoundedInputStream#getCount()"
    ],
    "org.apache.commons.io.output.BrokenWriter#BrokenWriter(IOException)": ["org.apache.commons.io.output.BrokenWriter#BrokenWriter(Supplier<Throwable>)"],
    "org.apache.commons.io.file.FilesUncheck.getOwner(Path,LinkOption[]...)": ["org.apache.commons.io.function.Uncheck.apply(IOBiFunction<T, U, R>,T,U)"],
    "org.apache.commons.io.output.ByteArrayOutputStream#reset()": ["org.apache.commons.io.output.AbstractByteArrayOutputStream#resetImpl()"],
    "org.apache.commons.io.input.ProxyReader#read()": [
        "org.apache.commons.io.input.NullReader#read()",
        "org.apache.commons.io.input.UnsynchronizedBufferedReader#read()",
        "org.apache.commons.io.input.ProxyReader#handleIOException(IOException)",
        "org.apache.commons.io.input.ProxyReader#beforeRead(int)",
        "org.apache.commons.io.input.BoundedReader#read()",
        "org.apache.commons.io.input.SequenceReader#read()",
        "org.apache.commons.io.IOUtils.<staticinit>()",
        "org.apache.commons.io.input.ProxyReader#afterRead(int)",
        "org.apache.commons.io.input.TaggedReader#handleIOException(IOException)",
        "org.apache.commons.io.input.CharSequenceReader#read()"
    ],
    "org.apache.commons.io.IOUtils.toString(byte[],String)": ["org.apache.commons.io.Charsets.toCharset(String)"],
    "org.apache.commons.io.input.ObservableInputStream#ObservableInputStream(InputStream,List<Observer>)": [
        "org.apache.commons.io.input.ProxyInputStream#ProxyInputStream(InputStream)",
        "org.apache.commons.io.input.ObservableInputStream.<init>()"
    ],
    "org.apache.commons.io.IOUtils.contentEquals(InputStream,InputStream)": [
        "org.apache.commons.io.input.ReaderInputStream#read()",
        "org.apache.commons.io.input.UnsynchronizedByteArrayInputStream#read(byte[],int,int)",
        "org.apache.commons.io.input.UnixLineEndingInputStream#read()",
        "org.apache.commons.io.input.NullInputStream#read()",
        "org.apache.commons.io.input.MemoryMappedFileInputStream#read(byte[],int,int)",
        "org.apache.commons.io.IOUtils.<staticinit>()",
        "org.apache.commons.io.input.BufferedFileChannelInputStream#read()",
        "org.apache.commons.io.input.WindowsLineEndingInputStream#read()",
        "org.apache.commons.io.input.BrokenInputStream#read()",
        "org.apache.commons.io.input.BufferedFileChannelInputStream#read(byte[],int,int)",
        "org.apache.commons.io.input.ClosedInputStream#read()",
        "org.apache.commons.io.input.UnsynchronizedBufferedInputStream#read(byte[],int,int)",
        "org.apache.commons.io.input.ClosedInputStream#read(byte[],int,int)",
        "org.apache.commons.io.input.ReaderInputStream#read(byte[],int,int)",
        "org.apache.commons.io.IOUtils.getScratchByteArray()",
        "org.apache.commons.io.input.CharSequenceInputStream#read()",
        "org.apache.commons.io.input.UnsynchronizedByteArrayInputStream#read()",
        "org.apache.commons.io.input.RandomAccessFileInputStream#read()",
        "org.apache.commons.io.input.CharSequenceInputStream#read(byte[],int,int)",
        "org.apache.commons.io.input.UnsynchronizedFilterInputStream#read()",
        "org.apache.commons.io.input.DemuxInputStream#read()",
        "org.apache.commons.io.input.QueueInputStream#read()",
        "org.apache.commons.io.input.RandomAccessFileInputStream#read(byte[],int,int)",
        "org.apache.commons.io.input.MemoryMappedFileInputStream#read()",
        "org.apache.commons.io.input.UnsynchronizedFilterInputStream#read(byte[],int,int)",
        "org.apache.commons.io.IOUtils.byteArray()",
        "org.apache.commons.io.input.UnsynchronizedBufferedInputStream#read()",
        "org.apache.commons.io.input.NullInputStream#read(byte[],int,int)",
        "org.apache.commons.io.input.CircularInputStream#read()"
    ],
    "org.apache.commons.io.IOUtils.resourceToString(String,Charset)": ["org.apache.commons.io.IOUtils.resourceToString(String,Charset,ClassLoader)"],
    "org.apache.commons.io.FileUtils.forceMkdirParent(File)": [
        "org.apache.commons.io.FileUtils.getParentFile(File)",
        "org.apache.commons.io.FileUtils.forceMkdir(File)",
        "org.apache.commons.io.FileUtils.<staticinit>()"
    ],
    "org.apache.commons.io.IOUtils.closeQuietly(Socket)": ["org.apache.commons.io.IOUtils.closeQ(Closeable)"],
    "org.apache.commons.io.output.UncheckedFilterWriter#write(String,int,int)": ["org.apache.commons.io.function.Uncheck.accept(IOTriConsumer<T, U, V>,T,U,V)"],
    "org.apache.commons.io.filefilter.SizeFileFilter#SizeFileFilter(long)": ["org.apache.commons.io.filefilter.SizeFileFilter#SizeFileFilter(long,boolean)"],
    "org.apache.commons.io.FileUtils.moveToDirectory(File,File,boolean)": [
        "org.apache.commons.io.FileUtils.validateMoveParameters(File,File)",
        "org.apache.commons.io.FileUtils.moveDirectoryToDirectory(File,File,boolean)",
        "org.apache.commons.io.FileUtils.moveFileToDirectory(File,File,boolean)"
    ],
    "org.apache.commons.io.function.IOStream.iterate(T,IOUnaryOperator<T>)$Iterator$1#next()": ["org.apache.commons.io.function.IOStreams.<staticinit>()"],
    "org.apache.commons.io.output.LockableFileWriter.Builder.<init>()": [
        "org.apache.commons.io.build.AbstractOriginSupplier.newFileOrigin(String)",
        "org.apache.commons.io.FileUtils.getTempDirectoryPath()"
    ],
    "org.apache.commons.io.output.DemuxOutputStream#write(int)": [
        "org.apache.commons.io.output.BrokenOutputStream#write(int)",
        "org.apache.commons.io.output.AppendableOutputStream#write(int)",
        "org.apache.commons.io.output.WriterOutputStream#write(int)",
        "org.apache.commons.io.output.DemuxOutputStream#write(int)",
        "org.apache.commons.io.output.AbstractByteArrayOutputStream#write(int)",
        "org.apache.commons.io.output.UnsynchronizedByteArrayOutputStream#write(int)",
        "org.apache.commons.io.output.NullOutputStream#write(int)",
        "org.apache.commons.io.output.QueueOutputStream#write(int)",
        "org.apache.commons.io.output.ByteArrayOutputStream#write(int)",
        "org.apache.commons.io.output.ClosedOutputStream#write(int)",
        "org.apache.commons.io.output.ThresholdingOutputStream#write(int)"
    ],
    "org.apache.commons.io.build.AbstractOrigin#getInputStream(OpenOption[]...)": [
        "org.apache.commons.io.build.AbstractOrigin.PathOrigin#getPath()",
        "org.apache.commons.io.build.AbstractOrigin.URIOrigin#getPath()",
        "org.apache.commons.io.build.AbstractOrigin.FileOrigin#getPath()",
        "org.apache.commons.io.build.AbstractOrigin#getPath()"
    ],
    "org.apache.commons.io.FilenameUtils.getBaseName(String)": [
        "org.apache.commons.io.FilenameUtils.removeExtension(String)",
        "org.apache.commons.io.FilenameUtils.getName(String)"
    ],
    "org.apache.commons.io.file.FilesUncheck.find(Path,int,BiPredicate<Path, BasicFileAttributes>,FileVisitOption[]...)": ["org.apache.commons.io.function.Uncheck.apply(IOQuadFunction<T, U, V, W, R>,T,U,V,W)"],
    "org.apache.commons.io.input.BrokenReader#reset()": ["org.apache.commons.io.input.BrokenReader#rethrow()"],
    "org.apache.commons.io.input.TaggedReader#handleIOException(IOException)": ["org.apache.commons.io.TaggedIOException#TaggedIOException(IOException,Serializable)"],
    "org.apache.commons.io.IOUtils.toByteArray(Reader,String)": [
        "org.apache.commons.io.IOUtils.toByteArray(Reader,Charset)",
        "org.apache.commons.io.Charsets.toCharset(String)"
    ],
    "org.apache.commons.io.input.TaggedReader#throwIfCauseOf(Throwable)": ["org.apache.commons.io.TaggedIOException.throwCauseIfTaggedWith(Throwable,Object)"],
    "org.apache.commons.io.filefilter.EmptyFileFilter#EmptyFileFilter()": [
        "org.apache.commons.io.filefilter.AbstractFileFilter#AbstractFileFilter()",
        "org.apache.commons.io.filefilter.EmptyFileFilter.<init>()"
    ],
    "org.apache.commons.io.FilenameUtils.getFullPath(String)": ["org.apache.commons.io.FilenameUtils.doGetFullPath(String,boolean)"],
    "org.apache.commons.io.input.ReaderInputStream#ReaderInputStream(Reader,String)": [
        "org.apache.commons.io.IOUtils.<staticinit>()",
        "org.apache.commons.io.input.ReaderInputStream#ReaderInputStream(Reader,String,int)"
    ],
    "org.apache.commons.io.build.AbstractOriginSupplier.newFileOrigin(File)": ["org.apache.commons.io.build.AbstractOrigin.FileOrigin#FileOrigin(File)"],
    "org.apache.commons.io.file.CountingPathVisitor.defaultFileFilter()": ["org.apache.commons.io.filefilter.SymbolicLinkFileFilter#SymbolicLinkFileFilter(FileVisitResult,FileVisitResult)"],
    "org.apache.commons.io.FileCleaner.<staticinit>()": ["org.apache.commons.io.FileCleaningTracker.<init>()"],
    "org.apache.commons.io.output.UnsynchronizedByteArrayOutputStream.toBufferedInputStream(InputStream)": [
        "org.apache.commons.io.output.UnsynchronizedByteArrayOutputStream.toBufferedInputStream(InputStream,int)",
        "org.apache.commons.io.output.AbstractByteArrayOutputStream.<staticinit>()"
    ],
    "org.apache.commons.io.input.AutoCloseInputStream#afterRead(int)": [
        "org.apache.commons.io.IOUtils.<staticinit>()",
        "org.apache.commons.io.input.AutoCloseInputStream#close()"
    ],
    "org.apache.commons.io.output.ChunkedWriter#ChunkedWriter(Writer,int)": ["org.apache.commons.io.output.ChunkedWriter.<init>()"],
    "org.apache.commons.io.function.IOSpliteratorAdapter#IOSpliteratorAdapter(Spliterator<T>)": ["org.apache.commons.io.function.IOSpliteratorAdapter.<init>()"],
    "org.apache.commons.io.output.FileWriterWithEncoding#FileWriterWithEncoding(String,Charset,boolean)": ["org.apache.commons.io.output.FileWriterWithEncoding#FileWriterWithEncoding(File,Charset,boolean)"],
    "org.apache.commons.io.CloseableURLConnection#getContentLengthLong()": ["org.apache.commons.io.CloseableURLConnection#getContentLengthLong()"],
    "org.apache.commons.io.input.ChecksumInputStream.Builder#get()": [
        "org.apache.commons.io.input.ChecksumInputStream#ChecksumInputStream(InputStream,Checksum,long,long)",
        "org.apache.commons.io.build.AbstractStreamBuilder#getInputStream()"
    ],
    "org.apache.commons.io.input.UnsynchronizedByteArrayInputStream.Builder.<init>()": ["org.apache.commons.io.build.AbstractStreamBuilder.<init>()"],
    "org.apache.commons.io.output.DeferredFileOutputStream#DeferredFileOutputStream(int,int,File)": ["org.apache.commons.io.output.DeferredFileOutputStream#DeferredFileOutputStream(int,File,String,String,File,int)"],
    "org.apache.commons.io.IOUtils.write(CharSequence,OutputStream,String)": [
        "org.apache.commons.io.IOUtils.write(CharSequence,OutputStream,Charset)",
        "org.apache.commons.io.Charsets.toCharset(String)"
    ],
    "org.apache.commons.io.comparator.LastModifiedFileComparator#compare(File,File)": ["org.apache.commons.io.FileUtils.lastModifiedUnchecked(File)"],
    "org.apache.commons.io.input.BufferedFileChannelInputStream#BufferedFileChannelInputStream(Path)": [
        "org.apache.commons.io.input.BufferedFileChannelInputStream#BufferedFileChannelInputStream(Path,int)",
        "org.apache.commons.io.IOUtils.<staticinit>()"
    ],
    "org.apache.commons.io.file.PathUtils.getBaseName(Path)": ["org.apache.commons.io.FilenameUtils.removeExtension(String)"],
    "org.apache.commons.io.input.XmlStreamReader#calculateRawEncoding(String,String,String)": [
        "org.apache.commons.io.input.XmlStreamReader.<staticinit>()",
        "org.apache.commons.io.input.XmlStreamReaderException#XmlStreamReaderException(String,String,String,String)"
    ],
    "org.apache.commons.io.build.AbstractOrigin.FileOrigin#FileOrigin(File)": [
        "org.apache.commons.io.build.AbstractOrigin.FileOrigin.<init>()",
        "org.apache.commons.io.build.AbstractOrigin#AbstractOrigin(T)"
    ],
    "org.apache.commons.io.input.TeeInputStream#read()": [
        "org.apache.commons.io.output.WriterOutputStream#write(int)",
        "org.apache.commons.io.output.DemuxOutputStream#write(int)",
        "org.apache.commons.io.output.NullOutputStream#write(int)",
        "org.apache.commons.io.input.ProxyInputStream#read()",
        "org.apache.commons.io.output.QueueOutputStream#write(int)",
        "org.apache.commons.io.output.ByteArrayOutputStream#write(int)",
        "org.apache.commons.io.IOUtils.<staticinit>()",
        "org.apache.commons.io.output.ThresholdingOutputStream#write(int)",
        "org.apache.commons.io.output.BrokenOutputStream#write(int)",
        "org.apache.commons.io.output.AppendableOutputStream#write(int)",
        "org.apache.commons.io.output.AbstractByteArrayOutputStream#write(int)",
        "org.apache.commons.io.output.UnsynchronizedByteArrayOutputStream#write(int)",
        "org.apache.commons.io.output.ClosedOutputStream#write(int)"
    ],
    "org.apache.commons.io.CloseableURLConnection.open(URI)": ["org.apache.commons.io.CloseableURLConnection.open(URI)"],
    "org.apache.commons.io.input.ThrottledInputStream.Builder#get()": [
        "org.apache.commons.io.input.ThrottledInputStream#ThrottledInputStream(InputStream,long)",
        "org.apache.commons.io.build.AbstractStreamBuilder#getInputStream()"
    ],
    "org.apache.commons.io.function.IOBaseStream#sequential()": [
        "org.apache.commons.io.function.IOBaseStreamAdapter#unwrap()",
        "org.apache.commons.io.function.IOBaseStream#isParallel()"
    ],
    "org.apache.commons.io.filefilter.MagicNumberFileFilter#accept(File)": [
        "org.apache.commons.io.RandomAccessFiles.read(RandomAccessFile,long,int)",
        "org.apache.commons.io.RandomAccessFileMode.<staticinit>()",
        "org.apache.commons.io.RandomAccessFileMode#create(File)"
    ],
    "org.apache.commons.io.output.CloseShieldWriter#CloseShieldWriter(Writer)": [
        "org.apache.commons.io.output.CloseShieldWriter.<init>()",
        "org.apache.commons.io.output.ProxyWriter#ProxyWriter(Writer)"
    ],
    "org.apache.commons.io.input.BOMInputStream#read()": [
        "org.apache.commons.io.input.CharSequenceInputStream#read()",
        "org.apache.commons.io.input.ProxyInputStream#checkOpen()",
        "org.apache.commons.io.input.UnsynchronizedByteArrayInputStream#read()",
        "org.apache.commons.io.input.RandomAccessFileInputStream#read()",
        "org.apache.commons.io.input.ReaderInputStream#read()",
        "org.apache.commons.io.input.UnsynchronizedFilterInputStream#read()",
        "org.apache.commons.io.input.UnixLineEndingInputStream#read()",
        "org.apache.commons.io.input.DemuxInputStream#read()",
        "org.apache.commons.io.input.QueueInputStream#read()",
        "org.apache.commons.io.input.NullInputStream#read()",
        "org.apache.commons.io.input.MemoryMappedFileInputStream#read()",
        "org.apache.commons.io.input.BOMInputStream#readFirstBytes()",
        "org.apache.commons.io.input.BufferedFileChannelInputStream#read()",
        "org.apache.commons.io.input.WindowsLineEndingInputStream#read()",
        "org.apache.commons.io.input.BrokenInputStream#read()",
        "org.apache.commons.io.input.ClosedInputStream#read()",
        "org.apache.commons.io.input.UnsynchronizedBufferedInputStream#read()",
        "org.apache.commons.io.input.CircularInputStream#read()"
    ],
    "org.apache.commons.io.filefilter.WildcardFileFilter#WildcardFileFilter(String[]...)": [
        "org.apache.commons.io.IOCase.<staticinit>()",
        "org.apache.commons.io.filefilter.WildcardFileFilter#WildcardFileFilter(IOCase,String[]...)"
    ],
    "org.apache.commons.io.output.UnsynchronizedByteArrayOutputStream.Builder#get()": [
        "org.apache.commons.io.build.AbstractStreamBuilder#getBufferSize()",
        "org.apache.commons.io.output.UnsynchronizedByteArrayOutputStream#UnsynchronizedByteArrayOutputStream(int)"
    ],
    "org.apache.commons.io.build.AbstractOrigin.FileOrigin#getByteArray(long,int)": [
        "org.apache.commons.io.RandomAccessFiles.read(RandomAccessFile,long,int)",
        "org.apache.commons.io.RandomAccessFileMode#create(File)",
        "org.apache.commons.io.RandomAccessFileMode.<staticinit>()"
    ],
    "org.apache.commons.io.input.Tailer#Tailer(File,TailerListener,long,boolean,boolean)": [
        "org.apache.commons.io.IOUtils.<staticinit>()",
        "org.apache.commons.io.input.Tailer#Tailer(File,TailerListener,long,boolean,boolean,int)"
    ],
    "org.apache.commons.io.file.CleaningPathVisitor#equals(Object)": ["org.apache.commons.io.file.CountingPathVisitor#equals(Object)"],
    "org.apache.commons.io.input.UnsynchronizedBufferedReader#peek()": [
        "org.apache.commons.io.input.UnsynchronizedBufferedReader#reset()",
        "org.apache.commons.io.input.UnsynchronizedBufferedReader#read()",
        "org.apache.commons.io.input.UnsynchronizedBufferedReader#mark(int)"
    ],
    "org.apache.commons.io.IOUtils.toInputStream(String,Charset)": ["org.apache.commons.io.Charsets.toCharset(Charset)"],
    "org.apache.commons.io.FileUtils.listAccumulate(File,IOFileFilter,IOFileFilter,FileVisitOption[]...)": [
        "org.apache.commons.io.file.AccumulatorPathVisitor#AccumulatorPathVisitor(PathCounters,PathFilter,PathFilter,IOBiFunction<Path, IOException, FileVisitResult>)",
        "org.apache.commons.io.filefilter.FileEqualsFileFilter#FileEqualsFileFilter(File)",
        "org.apache.commons.io.filefilter.TrueFileFilter#or(IOFileFilter)",
        "org.apache.commons.io.filefilter.IOFileFilter#or(IOFileFilter)",
        "org.apache.commons.io.filefilter.FalseFileFilter#or(IOFileFilter)",
        "org.apache.commons.io.FileUtils.toMaxDepth(boolean)",
        "org.apache.commons.io.file.Counters.noopPathCounters()"
    ],
    "org.apache.commons.io.output.UnsynchronizedByteArrayOutputStream#UnsynchronizedByteArrayOutputStream(int)": [
        "org.apache.commons.io.output.AbstractByteArrayOutputStream.<init>()",
        "org.apache.commons.io.output.UnsynchronizedByteArrayOutputStream.<init>()",
        "org.apache.commons.io.output.AbstractByteArrayOutputStream#needNewBuffer(int)"
    ],
    "org.apache.commons.io.CloseableURLConnection.open(URL)": ["org.apache.commons.io.CloseableURLConnection#CloseableURLConnection(URLConnection)"],
    "org.apache.commons.io.comparator.PathFileComparator#toString()": ["org.apache.commons.io.comparator.AbstractFileComparator#toString()"],
    "org.apache.commons.io.file.spi.FileSystemProviders.<staticinit>()": ["org.apache.commons.io.file.spi.FileSystemProviders#FileSystemProviders(List<FileSystemProvider>)"],
    "org.apache.commons.io.output.AppendableOutputStream#AppendableOutputStream(T extends Appendable)": ["org.apache.commons.io.output.AppendableOutputStream.<init>()"],
    "org.apache.commons.io.function.IOConsumer.noop()": ["org.apache.commons.io.function.IOConsumer.<staticinit>()"],
    "org.apache.commons.io.output.TaggedOutputStream#TaggedOutputStream(OutputStream)": [
        "org.apache.commons.io.output.ProxyOutputStream#ProxyOutputStream(OutputStream)",
        "org.apache.commons.io.output.TaggedOutputStream.<init>()"
    ],
    "org.apache.commons.io.input.SwappedDataInputStream#readFloat()": ["org.apache.commons.io.EndianUtils.readSwappedFloat(InputStream)"],
    "org.apache.commons.io.input.BoundedReader#read(char[],int,int)": [
        "org.apache.commons.io.input.BoundedReader#read()",
        "org.apache.commons.io.IOUtils.<staticinit>()"
    ],
    "org.apache.commons.io.LineIterator#close()": ["org.apache.commons.io.IOUtils.close(Closeable)"],
    "org.apache.commons.io.input.ReaderInputStream.Builder.<init>()": [
        "org.apache.commons.io.build.AbstractStreamBuilder.<init>()",
        "org.apache.commons.io.build.AbstractStreamBuilder#getCharset()",
        "org.apache.commons.io.input.ReaderInputStream.newEncoder(Charset)"
    ],
    "org.apache.commons.io.file.DeletingPathVisitor#DeletingPathVisitor(PathCounters,String[]...)": [
        "org.apache.commons.io.file.DeletingPathVisitor#DeletingPathVisitor(PathCounters,DeleteOption[],String[]...)",
        "org.apache.commons.io.file.PathUtils.<staticinit>()"
    ],
    "org.apache.commons.io.file.PathUtils.noFollowLinkOptionArray()": ["org.apache.commons.io.file.PathUtils.<staticinit>()"],
    "org.apache.commons.io.build.AbstractOriginSupplier#setCharSequence(CharSequence)": [
        "org.apache.commons.io.input.Tailer.Builder#setOrigin(AbstractOrigin<?, ?>)",
        "org.apache.commons.io.build.AbstractOriginSupplier#setOrigin(AbstractOrigin<?, ?>)",
        "org.apache.commons.io.build.AbstractOriginSupplier.newCharSequenceOrigin(CharSequence)"
    ],
    "org.apache.commons.io.output.ThresholdingOutputStream#ThresholdingOutputStream(int)": [
        "org.apache.commons.io.output.ThresholdingOutputStream#ThresholdingOutputStream(int,IOConsumer<ThresholdingOutputStream>,IOFunction<ThresholdingOutputStream, OutputStream>)",
        "org.apache.commons.io.function.IOConsumer.noop()",
        "org.apache.commons.io.output.ThresholdingOutputStream.<staticinit>()"
    ],
    "org.apache.commons.io.filefilter.PrefixFileFilter#PrefixFileFilter(String[],IOCase)": [
        "org.apache.commons.io.filefilter.AbstractFileFilter#AbstractFileFilter()",
        "org.apache.commons.io.IOCase.value(IOCase,IOCase)",
        "org.apache.commons.io.filefilter.PrefixFileFilter.<init>()",
        "org.apache.commons.io.IOCase.<staticinit>()"
    ],
    "org.apache.commons.io.filefilter.FalseFileFilter#and(IOFileFilter)": ["org.apache.commons.io.filefilter.FalseFileFilter.<staticinit>()"],
    "org.apache.commons.io.input.ChecksumInputStream#afterRead(int)": [
        "org.apache.commons.io.input.ChecksumInputStream#getChecksum()",
        "org.apache.commons.io.input.CountingInputStream#afterRead(int)",
        "org.apache.commons.io.input.CountingInputStream#getByteCount()",
        "org.apache.commons.io.IOUtils.<staticinit>()"
    ],
    "org.apache.commons.io.filefilter.FileFilterUtils.orFileFilter(IOFileFilter,IOFileFilter)": ["org.apache.commons.io.filefilter.OrFileFilter#OrFileFilter(IOFileFilter[]...)"],
    "org.apache.commons.io.input.ReaderInputStream.builder()": ["org.apache.commons.io.input.ReaderInputStream.Builder.<init>()"],
    "org.apache.commons.io.input.CharSequenceReader#CharSequenceReader(CharSequence)": ["org.apache.commons.io.input.CharSequenceReader#CharSequenceReader(CharSequence,int)"],
    "org.apache.commons.io.FileUtils.copyToDirectory(File,File)": [
        "org.apache.commons.io.FileUtils.copyFileToDirectory(File,File)",
        "org.apache.commons.io.FileUtils.copyDirectoryToDirectory(File,File)"
    ],
    "org.apache.commons.io.CloseableURLConnection#getReadTimeout()": ["org.apache.commons.io.CloseableURLConnection#getReadTimeout()"],
    "org.apache.commons.io.monitor.FileAlterationMonitor#stop(long)": ["org.apache.commons.io.monitor.FileAlterationObserver#destroy()"],
    "org.apache.commons.io.IOUtils.skip(Reader,long)": [
        "org.apache.commons.io.input.CharSequenceReader#read(char[],int,int)",
        "org.apache.commons.io.input.UnsynchronizedBufferedReader#read(char[],int,int)",
        "org.apache.commons.io.input.NullReader#read(char[],int,int)",
        "org.apache.commons.io.input.BrokenReader#read(char[],int,int)",
        "org.apache.commons.io.input.SequenceReader#read(char[],int,int)",
        "org.apache.commons.io.input.ClosedReader#read(char[],int,int)",
        "org.apache.commons.io.input.XmlStreamReader#read(char[],int,int)",
        "org.apache.commons.io.IOUtils.getScratchCharArrayWriteOnly()",
        "org.apache.commons.io.input.BoundedReader#read(char[],int,int)"
    ],
    "org.apache.commons.io.comparator.ExtensionFileComparator#ExtensionFileComparator()": [
        "org.apache.commons.io.IOCase.<staticinit>()",
        "org.apache.commons.io.comparator.AbstractFileComparator.<init>()",
        "org.apache.commons.io.comparator.ExtensionFileComparator.<init>()"
    ],
    "org.apache.commons.io.filefilter.FileFilterUtils.filter(IOFileFilter,File[]...)": [
        "org.apache.commons.io.filefilter.FileFilterUtils.filterFiles(IOFileFilter,Stream<File>,Collector<? super File, A, R>)",
        "org.apache.commons.io.FileUtils.<staticinit>()"
    ],
    "org.apache.commons.io.FileUtils.isFileOlder(File,ChronoLocalDate,LocalTime)": ["org.apache.commons.io.FileUtils.isFileOlder(File,ChronoZonedDateTime<?>)"],
    "org.apache.commons.io.EndianUtils.readSwappedInteger(InputStream)": ["org.apache.commons.io.EndianUtils.read(InputStream)"],
    "org.apache.commons.io.FileUtils.copyDirectory(File,File,FileFilter)": ["org.apache.commons.io.FileUtils.copyDirectory(File,File,FileFilter,boolean)"],
    "org.apache.commons.io.FilenameUtils.doNormalize(String,char,boolean)": [
        "org.apache.commons.io.FilenameUtils.flipSeparator(char)",
        "org.apache.commons.io.FilenameUtils.getPrefixLength(String)",
        "org.apache.commons.io.FilenameUtils.requireNonNullChars(String)",
        "org.apache.commons.io.FilenameUtils.<staticinit>()"
    ],
    "org.apache.commons.io.input.CircularInputStream#close()": ["org.apache.commons.io.input.AbstractInputStream#close()"],
    "org.apache.commons.io.input.BOMInputStream#BOMInputStream(InputStream,boolean,ByteOrderMark[]...)": [
        "org.apache.commons.io.input.BOMInputStream.<init>()",
        "org.apache.commons.io.IOUtils.length(Object[])",
        "org.apache.commons.io.input.BOMInputStream.<staticinit>()",
        "org.apache.commons.io.input.ProxyInputStream#ProxyInputStream(InputStream)"
    ],
    "org.apache.commons.io.input.UnsupportedOperationExceptions.mark()": [
        "org.apache.commons.io.input.UnsupportedOperationExceptions.method(String)",
        "org.apache.commons.io.input.UnsupportedOperationExceptions.<staticinit>()"
    ],
    "org.apache.commons.io.input.TimestampedObserver#TimestampedObserver()": [
        "org.apache.commons.io.input.ObservableInputStream.Observer.<init>()",
        "org.apache.commons.io.input.TimestampedObserver.<init>()"
    ],
    "org.apache.commons.io.input.BrokenReader#close()": ["org.apache.commons.io.input.BrokenReader#rethrow()"],
    "org.apache.commons.io.output.XmlStreamWriter#XmlStreamWriter(OutputStream,Charset)": ["org.apache.commons.io.output.XmlStreamWriter.<init>()"],
    "org.apache.commons.io.build.AbstractOrigin.WriterOrigin#getWriter(Charset,OpenOption[]...)": ["org.apache.commons.io.build.AbstractOrigin#get()"],
    "org.apache.commons.io.input.BOMInputStream#mark(int)": [
        "org.apache.commons.io.input.WindowsLineEndingInputStream#mark(int)",
        "org.apache.commons.io.input.UnsynchronizedByteArrayInputStream#mark(int)",
        "org.apache.commons.io.input.UnixLineEndingInputStream#mark(int)",
        "org.apache.commons.io.input.NullInputStream#mark(int)",
        "org.apache.commons.io.input.UnsynchronizedBufferedInputStream#mark(int)",
        "org.apache.commons.io.input.UnsynchronizedFilterInputStream#mark(int)",
        "org.apache.commons.io.input.CharSequenceInputStream#mark(int)"
    ],
    "org.apache.commons.io.monitor.FileAlterationObserver#fireOnCreate(FileEntry)": [
        "org.apache.commons.io.monitor.FileAlterationListenerAdaptor#onFileCreate(File)",
        "org.apache.commons.io.monitor.FileEntry#getChildren()",
        "org.apache.commons.io.monitor.FileAlterationListenerAdaptor#onDirectoryCreate(File)",
        "org.apache.commons.io.monitor.FileEntry#isDirectory()",
        "org.apache.commons.io.monitor.FileEntry#getFile()"
    ],
    "org.apache.commons.io.output.ThresholdingOutputStream#write(byte[],int,int)": [
        "org.apache.commons.io.output.WriterOutputStream#write(byte[],int,int)",
        "org.apache.commons.io.output.DeferredFileOutputStream#getStream()",
        "org.apache.commons.io.output.ThresholdingOutputStream#checkThreshold(int)",
        "org.apache.commons.io.output.AbstractByteArrayOutputStream#write(byte[],int,int)",
        "org.apache.commons.io.output.NullOutputStream#write(byte[],int,int)",
        "org.apache.commons.io.output.UnsynchronizedByteArrayOutputStream#write(byte[],int,int)",
        "org.apache.commons.io.output.ClosedOutputStream#write(byte[],int,int)",
        "org.apache.commons.io.output.ThresholdingOutputStream#getStream()",
        "org.apache.commons.io.output.ThresholdingOutputStream#write(byte[],int,int)",
        "org.apache.commons.io.output.ByteArrayOutputStream#write(byte[],int,int)"
    ],
    "org.apache.commons.io.HexDump.dump(StringBuilder,byte)": ["org.apache.commons.io.HexDump.<staticinit>()"],
    "org.apache.commons.io.function.IOPredicate.alwaysFalse()": ["org.apache.commons.io.function.Constants.<staticinit>()"],
    "org.apache.commons.io.FileUtils.getUserDirectory()": ["org.apache.commons.io.FileUtils.getUserDirectoryPath()"],
    "org.apache.commons.io.input.ReadAheadInputStream.Builder#get()": [
        "org.apache.commons.io.build.AbstractStreamBuilder#getInputStream()",
        "org.apache.commons.io.input.ReadAheadInputStream.newExecutorService()",
        "org.apache.commons.io.build.AbstractStreamBuilder#getBufferSize()",
        "org.apache.commons.io.input.ReadAheadInputStream#ReadAheadInputStream(InputStream,int,ExecutorService,boolean)"
    ],
    "org.apache.commons.io.file.SimplePathVisitor#SimplePathVisitor(IOBiFunction<Path, IOException, FileVisitResult>)": ["org.apache.commons.io.file.SimplePathVisitor.<init>()"],
    "org.apache.commons.io.output.XmlStreamWriter.Builder#get()": [
        "org.apache.commons.io.output.XmlStreamWriter#XmlStreamWriter(OutputStream,Charset)",
        "org.apache.commons.io.build.AbstractStreamBuilder#getCharset()",
        "org.apache.commons.io.build.AbstractStreamBuilder#getOutputStream()"
    ],
    "org.apache.commons.io.file.FilesUncheck.size(Path)": ["org.apache.commons.io.function.Uncheck.apply(IOFunction<T, R>,T)"],
    "org.apache.commons.io.CloseableURLConnection#getDate()": ["org.apache.commons.io.CloseableURLConnection#getDate()"],
    "org.apache.commons.io.filefilter.MagicNumberFileFilter#MagicNumberFileFilter(byte[])": ["org.apache.commons.io.filefilter.MagicNumberFileFilter#MagicNumberFileFilter(byte[],long)"],
    "org.apache.commons.io.IOUtils.readLines(InputStream)": ["org.apache.commons.io.IOUtils.readLines(InputStream,Charset)"],
    "org.apache.commons.io.EndianUtils.writeSwappedShort(byte[],int,short)": ["org.apache.commons.io.EndianUtils.validateByteArrayOffset(byte[],int,int)"],
    "org.apache.commons.io.input.UnsynchronizedFilterInputStream#markSupported()": [
        "org.apache.commons.io.input.NullInputStream#markSupported()",
        "org.apache.commons.io.input.UnsynchronizedBufferedInputStream#markSupported()",
        "org.apache.commons.io.input.UnsynchronizedByteArrayInputStream#markSupported()",
        "org.apache.commons.io.input.UnsynchronizedFilterInputStream#markSupported()",
        "org.apache.commons.io.input.CharSequenceInputStream#markSupported()"
    ],
    "org.apache.commons.io.function.UncheckedIOIterator#next()": ["org.apache.commons.io.function.Uncheck.get(IOSupplier<T>)"],
    "org.apache.commons.io.file.FilesUncheck.createDirectories(Path,FileAttribute<?>[]...)": ["org.apache.commons.io.function.Uncheck.apply(IOBiFunction<T, U, R>,T,U)"],
    "org.apache.commons.io.CloseableURLConnection#getExpiration()": ["org.apache.commons.io.CloseableURLConnection#getExpiration()"],
    "org.apache.commons.io.function.IOSpliteratorAdapter.adapt(Spliterator<E>)": ["org.apache.commons.io.function.IOSpliteratorAdapter#IOSpliteratorAdapter(Spliterator<T>)"],
    "org.apache.commons.io.function.Erase.accept(IOConsumer<T>,T)": ["org.apache.commons.io.function.Erase.rethrow(Throwable)"],
    "org.apache.commons.io.input.BufferedFileChannelInputStream#clean(ByteBuffer)": ["org.apache.commons.io.input.BufferedFileChannelInputStream#cleanDirectBuffer(ByteBuffer)"],
    "org.apache.commons.io.file.DeletingPathVisitor.withBigIntegerCounters()": ["org.apache.commons.io.file.Counters.bigIntegerPathCounters()"],
    "org.apache.commons.io.IOUtils.copy(Reader,OutputStream)": ["org.apache.commons.io.IOUtils.copy(Reader,OutputStream,Charset)"],
    "org.apache.commons.io.filefilter.FileFilterUtils.<staticinit>()": [
        "org.apache.commons.io.filefilter.FileFilterUtils.nameFileFilter(String)",
        "org.apache.commons.io.filefilter.FileFilterUtils.and(IOFileFilter[]...)",
        "org.apache.commons.io.filefilter.FileFilterUtils.notFileFilter(IOFileFilter)",
        "org.apache.commons.io.filefilter.FileFilterUtils.directoryFileFilter()"
    ],
    "org.apache.commons.io.output.UncheckedFilterWriter#write(String)": ["org.apache.commons.io.function.Uncheck.accept(IOConsumer<T>,T)"],
    "org.apache.commons.io.file.DeletingPathVisitor.withLongCounters()": ["org.apache.commons.io.file.Counters.longPathCounters()"],
    "org.apache.commons.io.output.ByteArrayOutputStream#write(int)": ["org.apache.commons.io.output.AbstractByteArrayOutputStream#writeImpl(int)"],
    "org.apache.commons.io.CopyUtils.copy(String,OutputStream,String)": ["org.apache.commons.io.CopyUtils.copy(Reader,Writer)"],
    "org.apache.commons.io.FileUtils.copyFile(File,File,boolean,CopyOption[]...)": [
        "org.apache.commons.io.FileUtils.checkFileExists(File,String)",
        "org.apache.commons.io.FileUtils.createParentDirectories(File)",
        "org.apache.commons.io.FileUtils.requireCanonicalPathsNotEquals(File,File)",
        "org.apache.commons.io.FileUtils.setTimes(File,File)"
    ],
    "org.apache.commons.io.EndianUtils.readSwappedInteger(byte[],int)": ["org.apache.commons.io.EndianUtils.validateByteArrayOffset(byte[],int,int)"],
    "org.apache.commons.io.FileUtils.writeLines(File,String,Collection<?>,String)": ["org.apache.commons.io.FileUtils.writeLines(File,String,Collection<?>,String,boolean)"],
    "org.apache.commons.io.build.AbstractOriginSupplier.newPathOrigin(String)": ["org.apache.commons.io.build.AbstractOrigin.PathOrigin#PathOrigin(Path)"],
    "org.apache.commons.io.input.CloseShieldInputStream.systemIn(InputStream)": ["org.apache.commons.io.input.CloseShieldInputStream.wrap(InputStream)"],
    "org.apache.commons.io.filefilter.SizeFileFilter#toString()": ["org.apache.commons.io.filefilter.AbstractFileFilter#toString()"],
    "org.apache.commons.io.CloseableURLConnection#setIfModifiedSince(long)": ["org.apache.commons.io.CloseableURLConnection#setIfModifiedSince(long)"],
    "org.apache.commons.io.input.UnsynchronizedBufferedReader#fillBuf()": [
        "org.apache.commons.io.input.CharSequenceReader#read(char[],int,int)",
        "org.apache.commons.io.input.UnsynchronizedBufferedReader#read(char[],int,int)",
        "org.apache.commons.io.input.NullReader#read(char[],int,int)",
        "org.apache.commons.io.input.BrokenReader#read(char[],int,int)",
        "org.apache.commons.io.input.SequenceReader#read(char[],int,int)",
        "org.apache.commons.io.input.ClosedReader#read(char[],int,int)",
        "org.apache.commons.io.input.XmlStreamReader#read(char[],int,int)",
        "org.apache.commons.io.input.BoundedReader#read(char[],int,int)",
        "org.apache.commons.io.IOUtils.<staticinit>()"
    ],
    "org.apache.commons.io.FileUtils.writeByteArrayToFile(File,byte[],int,int)": ["org.apache.commons.io.FileUtils.writeByteArrayToFile(File,byte[],int,int,boolean)"],
    "org.apache.commons.io.output.TaggedWriter#isCauseOf(Exception)": ["org.apache.commons.io.TaggedIOException.isTaggedWith(Throwable,Object)"],
    "org.apache.commons.io.input.QueueInputStream.builder()": ["org.apache.commons.io.input.QueueInputStream.Builder.<init>()"],
    "org.apache.commons.io.filefilter.NameFileFilter#NameFileFilter(String[],IOCase)": [
        "org.apache.commons.io.filefilter.AbstractFileFilter#AbstractFileFilter()",
        "org.apache.commons.io.filefilter.NameFileFilter#toIOCase(IOCase)",
        "org.apache.commons.io.filefilter.NameFileFilter.<init>()"
    ],
    "org.apache.commons.io.filefilter.WildcardFilter#accept(File)": ["org.apache.commons.io.FilenameUtils.wildcardMatch(String,String)"],
    "org.apache.commons.io.channels.FileChannels#FileChannels()": ["org.apache.commons.io.channels.FileChannels.<init>()"],
    "org.apache.commons.io.input.ReversedLinesFileReader#ReversedLinesFileReader(File)": [
        "org.apache.commons.io.input.ReversedLinesFileReader#ReversedLinesFileReader(File,int,Charset)",
        "org.apache.commons.io.input.ReversedLinesFileReader.<staticinit>()"
    ],
    "org.apache.commons.io.output.ChunkedWriter#write(char[],int,int)": [
        "org.apache.commons.io.output.StringBuilderWriter#write(char[],int,int)",
        "org.apache.commons.io.output.BrokenWriter#write(char[],int,int)",
        "org.apache.commons.io.output.FilterCollectionWriter#write(char[],int,int)",
        "org.apache.commons.io.output.AppendableWriter#write(char[],int,int)",
        "org.apache.commons.io.output.ProxyCollectionWriter#write(char[],int,int)",
        "org.apache.commons.io.output.ClosedWriter#write(char[],int,int)",
        "org.apache.commons.io.output.XmlStreamWriter#write(char[],int,int)",
        "org.apache.commons.io.output.NullWriter#write(char[],int,int)",
        "org.apache.commons.io.output.LockableFileWriter#write(char[],int,int)"
    ],
    "org.apache.commons.io.FileUtils.isFileNewer(File,ChronoLocalDate,LocalTime)": ["org.apache.commons.io.FileUtils.isFileNewer(File,ChronoLocalDateTime<?>)"],
    "org.apache.commons.io.input.NullInputStream#read(byte[],int,int)": [
        "org.apache.commons.io.input.NullInputStream#processBytes(byte[],int,int)",
        "org.apache.commons.io.input.NullInputStream#handleEof()",
        "org.apache.commons.io.input.AbstractInputStream#checkOpen()"
    ],
    "org.apache.commons.io.FileUtils.isFileOlder(File,ChronoLocalDateTime<?>,ZoneId)": ["org.apache.commons.io.FileUtils.isFileOlder(File,ChronoZonedDateTime<?>)"],
    "org.apache.commons.io.file.FilesUncheck.write(Path,byte[],OpenOption[]...)": ["org.apache.commons.io.function.Uncheck.apply(IOTriFunction<T, U, V, R>,T,U,V)"],
    "org.apache.commons.io.input.ObservableInputStream#ObservableInputStream(InputStream)": ["org.apache.commons.io.input.ObservableInputStream#ObservableInputStream(InputStream,List<Observer>)"],
    "org.apache.commons.io.build.AbstractOrigin#getReader(Charset)": [
        "org.apache.commons.io.build.AbstractOrigin.PathOrigin#getPath()",
        "org.apache.commons.io.build.AbstractOrigin.URIOrigin#getPath()",
        "org.apache.commons.io.build.AbstractOrigin.FileOrigin#getPath()",
        "org.apache.commons.io.build.AbstractOrigin#getPath()"
    ],
    "org.apache.commons.io.output.ProxyCollectionWriter#write(String)": [
        "org.apache.commons.io.IOUtils.length(Object[])",
        "org.apache.commons.io.output.FilterCollectionWriter#write(String)",
        "org.apache.commons.io.output.ProxyCollectionWriter#handleIOException(IOException)",
        "org.apache.commons.io.output.ProxyCollectionWriter#afterWrite(int)",
        "org.apache.commons.io.output.ProxyCollectionWriter#beforeWrite(int)"
    ],
    "org.apache.commons.io.monitor.FileEntry#getChildren()": ["org.apache.commons.io.monitor.FileEntry.<staticinit>()"],
    "org.apache.commons.io.IOUtils.getScratchByteArrayWriteOnly()": [
        "org.apache.commons.io.IOUtils.<staticinit>()",
        "org.apache.commons.io.IOUtils.fill0(byte[])"
    ],
    "org.apache.commons.io.output.UncheckedFilterWriter.builder()": ["org.apache.commons.io.output.UncheckedFilterWriter.Builder.<init>()"],
    "org.apache.commons.io.file.CopyDirectoryVisitor#hashCode()": ["org.apache.commons.io.file.CountingPathVisitor#hashCode()"],
    "org.apache.commons.io.CopyUtils.copy(Reader,Writer)": [
        "org.apache.commons.io.IOUtils.getScratchCharArray()",
        "org.apache.commons.io.output.StringBuilderWriter#write(char[],int,int)",
        "org.apache.commons.io.output.BrokenWriter#write(char[],int,int)",
        "org.apache.commons.io.input.NullReader#read(char[])",
        "org.apache.commons.io.output.FilterCollectionWriter#write(char[],int,int)",
        "org.apache.commons.io.output.AppendableWriter#write(char[],int,int)",
        "org.apache.commons.io.output.ProxyCollectionWriter#write(char[],int,int)",
        "org.apache.commons.io.output.ClosedWriter#write(char[],int,int)",
        "org.apache.commons.io.output.XmlStreamWriter#write(char[],int,int)",
        "org.apache.commons.io.output.NullWriter#write(char[],int,int)",
        "org.apache.commons.io.output.LockableFileWriter#write(char[],int,int)",
        "org.apache.commons.io.IOUtils.<staticinit>()"
    ],
    "org.apache.commons.io.output.XmlStreamWriter.Builder#Builder()": [
        "org.apache.commons.io.build.AbstractStreamBuilder#setCharsetDefault(Charset)",
        "org.apache.commons.io.output.WriterOutputStream.Builder#setCharset(Charset)",
        "org.apache.commons.io.output.XmlStreamWriter.Builder.<init>()",
        "org.apache.commons.io.build.AbstractStreamBuilder.<init>()",
        "org.apache.commons.io.build.AbstractStreamBuilder#setCharset(Charset)",
        "org.apache.commons.io.input.XmlStreamReader.Builder#setCharset(Charset)",
        "org.apache.commons.io.input.ReaderInputStream.Builder#setCharset(Charset)",
        "org.apache.commons.io.input.CharSequenceInputStream.Builder#setCharset(Charset)"
    ],
    "org.apache.commons.io.file.PathUtils.deleteDirectory(Path,LinkOption[],DeleteOption[]...)": [
        "org.apache.commons.io.file.PathUtils.visitFileTree(T extends FileVisitor,Path)",
        "org.apache.commons.io.file.Counters.longPathCounters()"
    ],
    "org.apache.commons.io.FileUtils.write(File,CharSequence,String,boolean)": [
        "org.apache.commons.io.FileUtils.write(File,CharSequence,Charset,boolean)",
        "org.apache.commons.io.Charsets.toCharset(String)"
    ],
    "org.apache.commons.io.input.buffer.PeekableInputStream#PeekableInputStream(InputStream)": [
        "org.apache.commons.io.IOUtils.<staticinit>()",
        "org.apache.commons.io.input.buffer.CircularBufferInputStream#CircularBufferInputStream(InputStream)",
        "org.apache.commons.io.input.buffer.PeekableInputStream.<init>()"
    ],
    "org.apache.commons.io.input.BoundedInputStream#BoundedInputStream(InputStream)": [
        "org.apache.commons.io.IOUtils.<staticinit>()",
        "org.apache.commons.io.input.BoundedInputStream#BoundedInputStream(InputStream,long)"
    ],
    "org.apache.commons.io.file.FilesUncheck.walk(Path,int,FileVisitOption[]...)": ["org.apache.commons.io.function.Uncheck.apply(IOTriFunction<T, U, V, R>,T,U,V)"],
    "org.apache.commons.io.filefilter.NameFileFilter#accept(File)": ["org.apache.commons.io.filefilter.NameFileFilter#acceptBaseName(String)"],
    "org.apache.commons.io.FileUtils.lineIterator(File,String)": [
        "org.apache.commons.io.IOUtils.closeQuietly(Closeable,Consumer<IOException>)",
        "org.apache.commons.io.IOUtils.lineIterator(InputStream,String)"
    ],
    "org.apache.commons.io.filefilter.WildcardFilter#WildcardFilter(String[]...)": [
        "org.apache.commons.io.filefilter.AbstractFileFilter#AbstractFileFilter()",
        "org.apache.commons.io.filefilter.WildcardFilter.<init>()"
    ],
    "org.apache.commons.io.output.LockableFileWriter#LockableFileWriter(File,boolean)": ["org.apache.commons.io.output.LockableFileWriter#LockableFileWriter(File,boolean,String)"],
    "org.apache.commons.io.file.Counters.AbstractPathCounters#reset()": [
        "org.apache.commons.io.file.Counters.BigIntegerCounter#reset()",
        "org.apache.commons.io.file.Counters.LongCounter#reset()",
        "org.apache.commons.io.file.Counters.Counter#reset()"
    ],
    "org.apache.commons.io.input.TeeInputStream#read(byte[],int,int)": [
        "org.apache.commons.io.output.WriterOutputStream#write(byte[],int,int)",
        "org.apache.commons.io.output.AbstractByteArrayOutputStream#write(byte[],int,int)",
        "org.apache.commons.io.output.NullOutputStream#write(byte[],int,int)",
        "org.apache.commons.io.output.UnsynchronizedByteArrayOutputStream#write(byte[],int,int)",
        "org.apache.commons.io.output.ClosedOutputStream#write(byte[],int,int)",
        "org.apache.commons.io.input.ProxyInputStream#read(byte[],int,int)",
        "org.apache.commons.io.IOUtils.<staticinit>()",
        "org.apache.commons.io.output.ThresholdingOutputStream#write(byte[],int,int)",
        "org.apache.commons.io.output.ByteArrayOutputStream#write(byte[],int,int)"
    ],
    "org.apache.commons.io.input.NullReader#doEndOfFile()": ["org.apache.commons.io.IOUtils.<staticinit>()"],
    "org.apache.commons.io.filefilter.DelegateFileFilter#DelegateFileFilter(FileFilter)": [
        "org.apache.commons.io.filefilter.AbstractFileFilter#AbstractFileFilter()",
        "org.apache.commons.io.filefilter.DelegateFileFilter.<init>()"
    ],
    "org.apache.commons.io.FileUtils.contentEquals(File,File)": [
        "org.apache.commons.io.file.PathUtils.fileContentEquals(Path,Path)",
        "org.apache.commons.io.FileUtils.checkIsFile(File,String)"
    ],
    "org.apache.commons.io.file.NoopPathVisitor#NoopPathVisitor()": [
        "org.apache.commons.io.file.NoopPathVisitor.<init>()",
        "org.apache.commons.io.file.SimplePathVisitor#SimplePathVisitor()"
    ],
    "org.apache.commons.io.FilenameUtils.isExtension(String,Collection<String>)": [
        "org.apache.commons.io.FilenameUtils.indexOfExtension(String)",
        "org.apache.commons.io.FilenameUtils.getExtension(String)",
        "org.apache.commons.io.FilenameUtils.requireNonNullChars(String)",
        "org.apache.commons.io.FilenameUtils.<staticinit>()"
    ],
    "org.apache.commons.io.EndianUtils.readSwappedShort(InputStream)": ["org.apache.commons.io.EndianUtils.read(InputStream)"],
    "org.apache.commons.io.comparator.DirectoryFileComparator#compare(File,File)": ["org.apache.commons.io.comparator.DirectoryFileComparator#getType(File)"],
    "org.apache.commons.io.ByteOrderMark.<staticinit>()": ["org.apache.commons.io.ByteOrderMark#ByteOrderMark(String,int[]...)"],
    "org.apache.commons.io.output.TaggedOutputStream#isCauseOf(Exception)": ["org.apache.commons.io.TaggedIOException.isTaggedWith(Throwable,Object)"],
    "org.apache.commons.io.input.TaggedReader#isCauseOf(Throwable)": ["org.apache.commons.io.TaggedIOException.isTaggedWith(Throwable,Object)"],
    "org.apache.commons.io.input.XmlStreamReader#XmlStreamReader(InputStream,String,boolean,String)": [
        "org.apache.commons.io.input.XmlStreamReader.<staticinit>()",
        "org.apache.commons.io.input.XmlStreamReader.<init>()",
        "org.apache.commons.io.input.XmlStreamReader#processHttpStream(BOMInputStream,BOMInputStream,boolean,String)",
        "org.apache.commons.io.IOUtils.<staticinit>()"
    ],
    "org.apache.commons.io.filefilter.WildcardFileFilter.Builder.<init>()": [
        "org.apache.commons.io.IOCase.<staticinit>()",
        "org.apache.commons.io.build.AbstractSupplier.<init>()"
    ],
    "org.apache.commons.io.EndianUtils.writeSwappedDouble(OutputStream,double)": ["org.apache.commons.io.EndianUtils.writeSwappedLong(OutputStream,long)"],
    "org.apache.commons.io.file.PathUtils.readBasicFileAttributesUnchecked(Path)": [
        "org.apache.commons.io.file.PathUtils.readBasicFileAttributes(Path,LinkOption[]...)",
        "org.apache.commons.io.file.PathUtils.<staticinit>()"
    ],
    "org.apache.commons.io.FileUtils.isFileNewer(File,ChronoLocalDate)": ["org.apache.commons.io.FileUtils.isFileNewer(File,ChronoLocalDate,LocalTime)"],
    "org.apache.commons.io.file.FilesUncheck.createTempFile(Path,String,String,FileAttribute<?>[]...)": ["org.apache.commons.io.function.Uncheck.apply(IOQuadFunction<T, U, V, W, R>,T,U,V,W)"],
    "org.apache.commons.io.input.UncheckedFilterInputStream.Builder.<init>()": ["org.apache.commons.io.build.AbstractStreamBuilder.<init>()"],
    "org.apache.commons.io.FileUtils.write(File,CharSequence)": ["org.apache.commons.io.FileUtils.write(File,CharSequence,Charset,boolean)"],
    "org.apache.commons.io.filefilter.DirectoryFileFilter#DirectoryFileFilter()": [
        "org.apache.commons.io.filefilter.AbstractFileFilter#AbstractFileFilter()",
        "org.apache.commons.io.filefilter.DirectoryFileFilter.<init>()"
    ],
    "org.apache.commons.io.build.AbstractOrigin#getPath()": ["org.apache.commons.io.build.AbstractOrigin#getSimpleClassName()"],
    "org.apache.commons.io.filefilter.TrueFileFilter#TrueFileFilter()": ["org.apache.commons.io.filefilter.TrueFileFilter.<init>()"],
    "org.apache.commons.io.input.CharacterSetFilterReader#CharacterSetFilterReader(Reader,Set<Integer>)": [
        "org.apache.commons.io.input.AbstractCharacterFilterReader#AbstractCharacterFilterReader(Reader,IntPredicate)",
        "org.apache.commons.io.input.CharacterSetFilterReader.toIntPredicate(Set<Integer>)",
        "org.apache.commons.io.input.CharacterSetFilterReader.<init>()"
    ],
    "org.apache.commons.io.file.AccumulatorPathVisitor#AccumulatorPathVisitor(PathCounters)": [
        "org.apache.commons.io.file.AccumulatorPathVisitor.<init>()",
        "org.apache.commons.io.file.CountingPathVisitor#CountingPathVisitor(PathCounters)"
    ],
    "org.apache.commons.io.input.MessageDigestCalculatingInputStream.Builder#get()": [
        "org.apache.commons.io.input.MessageDigestCalculatingInputStream#MessageDigestCalculatingInputStream(InputStream,MessageDigest)",
        "org.apache.commons.io.build.AbstractStreamBuilder#getInputStream()"
    ],
    "org.apache.commons.io.filefilter.FileFilterUtils.sizeRangeFileFilter(long,long)": [
        "org.apache.commons.io.filefilter.FalseFileFilter#and(IOFileFilter)",
        "org.apache.commons.io.filefilter.SizeFileFilter#SizeFileFilter(long,boolean)",
        "org.apache.commons.io.filefilter.TrueFileFilter#and(IOFileFilter)",
        "org.apache.commons.io.filefilter.IOFileFilter#and(IOFileFilter)"
    ],
    "org.apache.commons.io.file.FilesUncheck.newDirectoryStream(Path,String)": ["org.apache.commons.io.function.Uncheck.apply(IOBiFunction<T, U, R>,T,U)"],
    "org.apache.commons.io.input.CharSequenceInputStream.Builder.<init>()": [
        "org.apache.commons.io.build.AbstractStreamBuilder.<init>()",
        "org.apache.commons.io.input.CharSequenceInputStream.newEncoder(Charset)",
        "org.apache.commons.io.build.AbstractStreamBuilder#getCharset()"
    ],
    "org.apache.commons.io.CloseableURLConnection#getContentEncoding()": ["org.apache.commons.io.CloseableURLConnection#getContentEncoding()"],
    "org.apache.commons.io.IOUtils.toInputStream(String)": ["org.apache.commons.io.IOUtils.toInputStream(String,Charset)"],
    "org.apache.commons.io.file.AccumulatorPathVisitor#AccumulatorPathVisitor(PathCounters,PathFilter,PathFilter,IOBiFunction<Path, IOException, FileVisitResult>)": [
        "org.apache.commons.io.file.AccumulatorPathVisitor.<init>()",
        "org.apache.commons.io.file.CountingPathVisitor#CountingPathVisitor(PathCounters,PathFilter,PathFilter,IOBiFunction<Path, IOException, FileVisitResult>)"
    ],
    "org.apache.commons.io.IOUtils.toByteArray(InputStream)": [
        "org.apache.commons.io.output.ThresholdingOutputStream#ThresholdingOutputStream(int,IOConsumer<ThresholdingOutputStream>,IOFunction<ThresholdingOutputStream, OutputStream>)",
        "org.apache.commons.io.output.UnsynchronizedByteArrayOutputStream.Builder#get()",
        "org.apache.commons.io.output.UnsynchronizedByteArrayOutputStream.builder()",
        "org.apache.commons.io.IOUtils.copy(InputStream,OutputStream)",
        "org.apache.commons.io.output.UnsynchronizedByteArrayOutputStream#toByteArray()"
    ],
    "org.apache.commons.io.build.AbstractOrigin.URIOrigin#getFile()": ["org.apache.commons.io.build.AbstractOrigin.URIOrigin#getPath()"],
    "org.apache.commons.io.input.UnsynchronizedBufferedReader#ready()": [
        "org.apache.commons.io.input.CharSequenceReader#ready()",
        "org.apache.commons.io.input.BrokenReader#ready()",
        "org.apache.commons.io.input.UnsynchronizedBufferedReader#ready()",
        "org.apache.commons.io.input.UnsynchronizedReader#checkOpen()"
    ],
    "org.apache.commons.io.output.DemuxOutputStream#close()": ["org.apache.commons.io.IOUtils.close(Closeable)"],
    "org.apache.commons.io.input.BrokenReader#BrokenReader(IOException)": ["org.apache.commons.io.input.BrokenReader#BrokenReader(Supplier<Throwable>)"],
    "org.apache.commons.io.filefilter.NameFileFilter#accept(Path,BasicFileAttributes)": [
        "org.apache.commons.io.filefilter.AbstractFileFilter#toFileVisitResult(boolean)",
        "org.apache.commons.io.filefilter.NameFileFilter#acceptBaseName(String)",
        "org.apache.commons.io.file.PathUtils.getFileNameString(Path)"
    ],
    "org.apache.commons.io.file.PathUtils.directoryAndFileContentEquals(Path,Path)": [
        "org.apache.commons.io.file.PathUtils.<staticinit>()",
        "org.apache.commons.io.file.PathUtils.directoryAndFileContentEquals(Path,Path,LinkOption[],OpenOption[],FileVisitOption[])"
    ],
    "org.apache.commons.io.input.UnsynchronizedBufferedInputStream#close()": [
        "org.apache.commons.io.input.AbstractInputStream#close()",
        "org.apache.commons.io.input.CircularInputStream#close()",
        "org.apache.commons.io.input.ReaderInputStream#close()",
        "org.apache.commons.io.input.BufferedFileChannelInputStream#close()",
        "org.apache.commons.io.input.DemuxInputStream#close()",
        "org.apache.commons.io.input.CharSequenceInputStream#close()",
        "org.apache.commons.io.input.WindowsLineEndingInputStream#close()",
        "org.apache.commons.io.input.BrokenInputStream#close()",
        "org.apache.commons.io.input.RandomAccessFileInputStream#close()",
        "org.apache.commons.io.input.UnixLineEndingInputStream#close()",
        "org.apache.commons.io.input.UnsynchronizedFilterInputStream#close()",
        "org.apache.commons.io.input.NullInputStream#close()",
        "org.apache.commons.io.input.MemoryMappedFileInputStream#close()",
        "org.apache.commons.io.input.UnsynchronizedBufferedInputStream#close()"
    ],
    "org.apache.commons.io.CloseableURLConnection#getHeaderFieldDate(String,long)": ["org.apache.commons.io.CloseableURLConnection#getHeaderFieldDate(String,long)"],
    "org.apache.commons.io.input.UnsynchronizedBufferedInputStream.<init>()": ["org.apache.commons.io.IOUtils.<staticinit>()"],
    "org.apache.commons.io.file.PathUtils.newOutputStream(Path,boolean)": [
        "org.apache.commons.io.file.PathUtils.newOutputStream(Path,LinkOption[],OpenOption[]...)",
        "org.apache.commons.io.file.PathUtils.<staticinit>()"
    ],
    "org.apache.commons.io.filefilter.WildcardFileFilter#accept(Path,BasicFileAttributes)": [
        "org.apache.commons.io.filefilter.AbstractFileFilter#toFileVisitResult(boolean)",
        "org.apache.commons.io.filefilter.WildcardFileFilter#accept(String)",
        "org.apache.commons.io.file.PathUtils.getFileNameString(Path)"
    ],
    "org.apache.commons.io.output.ProxyOutputStream#ProxyOutputStream(OutputStream)": ["org.apache.commons.io.output.ProxyOutputStream.<init>()"],
    "org.apache.commons.io.input.NullInputStream#read(byte[])": ["org.apache.commons.io.input.NullInputStream#read(byte[],int,int)"],
    "org.apache.commons.io.input.MemoryMappedFileInputStream#read(byte[],int,int)": [
        "org.apache.commons.io.IOUtils.<staticinit>()",
        "org.apache.commons.io.input.MemoryMappedFileInputStream#nextBuffer()",
        "org.apache.commons.io.input.AbstractInputStream#checkOpen()"
    ],
    "org.apache.commons.io.output.FileWriterWithEncoding#FileWriterWithEncoding(File,String)": ["org.apache.commons.io.output.FileWriterWithEncoding#FileWriterWithEncoding(File,String,boolean)"],
    "org.apache.commons.io.input.UncheckedBufferedReader#read(CharBuffer)": ["org.apache.commons.io.function.Uncheck.apply(IOFunction<T, R>,T)"],
    "org.apache.commons.io.input.ProxyInputStream#close()": ["org.apache.commons.io.IOUtils.close(Closeable,IOConsumer<IOException>)"],
    "org.apache.commons.io.input.buffer.CircularBufferInputStream#CircularBufferInputStream(InputStream,int)": [
        "org.apache.commons.io.input.buffer.CircularByteBuffer#CircularByteBuffer(int)",
        "org.apache.commons.io.input.buffer.CircularBufferInputStream.<init>()"
    ],
    "org.apache.commons.io.input.CircularInputStream.validate(byte[])": ["org.apache.commons.io.IOUtils.<staticinit>()"],
    "org.apache.commons.io.output.TeeOutputStream#flush()": [
        "org.apache.commons.io.output.ClosedOutputStream#flush()",
        "org.apache.commons.io.output.WriterOutputStream#flush()",
        "org.apache.commons.io.output.DemuxOutputStream#flush()",
        "org.apache.commons.io.output.ThresholdingOutputStream#flush()",
        "org.apache.commons.io.output.BrokenOutputStream#flush()",
        "org.apache.commons.io.output.ProxyOutputStream#flush()"
    ],
    "org.apache.commons.io.output.StringBuilderWriter#StringBuilderWriter(StringBuilder)": ["org.apache.commons.io.output.StringBuilderWriter.<init>()"],
    "org.apache.commons.io.filefilter.FileFilterUtils.magicNumberFileFilter(byte[])": ["org.apache.commons.io.filefilter.MagicNumberFileFilter#MagicNumberFileFilter(byte[])"],
    "org.apache.commons.io.output.ProxyWriter#write(char[])": [
        "org.apache.commons.io.output.ProxyWriter#afterWrite(int)",
        "org.apache.commons.io.output.ProxyWriter#beforeWrite(int)",
        "org.apache.commons.io.output.TaggedWriter#handleIOException(IOException)",
        "org.apache.commons.io.output.FilterCollectionWriter#write(char[])",
        "org.apache.commons.io.output.ProxyWriter#handleIOException(IOException)",
        "org.apache.commons.io.output.NullWriter#write(char[])",
        "org.apache.commons.io.IOUtils.length(char[])",
        "org.apache.commons.io.output.ProxyCollectionWriter#write(char[])",
        "org.apache.commons.io.output.LockableFileWriter#write(char[])"
    ],
    "org.apache.commons.io.CloseableURLConnection#getDoOutput()": ["org.apache.commons.io.CloseableURLConnection#getDoOutput()"],
    "org.apache.commons.io.filefilter.FileFilterUtils.sizeFileFilter(long)": ["org.apache.commons.io.filefilter.SizeFileFilter#SizeFileFilter(long)"],
    "org.apache.commons.io.input.CircularInputStream#available()": ["org.apache.commons.io.input.AbstractInputStream#isClosed()"],
    "org.apache.commons.io.IOUtils.writer(Appendable)": [
        "org.apache.commons.io.output.StringBuilderWriter#StringBuilderWriter(StringBuilder)",
        "org.apache.commons.io.output.AppendableWriter#AppendableWriter(T extends Appendable)"
    ],
    "org.apache.commons.io.file.FilesUncheck.walkFileTree(Path,Set<FileVisitOption>,int,FileVisitor<? super Path>)": ["org.apache.commons.io.function.Uncheck.apply(IOQuadFunction<T, U, V, W, R>,T,U,V,W)"],
    "org.apache.commons.io.FileUtils.copyFileToDirectory(File,File,boolean)": [
        "org.apache.commons.io.FileUtils.requireDirectoryIfExists(File,String)",
        "org.apache.commons.io.FileUtils.copyFile(File,File,boolean)"
    ],
    "org.apache.commons.io.IOUtils.write(StringBuffer,Writer)": [
        "org.apache.commons.io.output.AppendableWriter#write(int)",
        "org.apache.commons.io.output.LockableFileWriter#write(char[])",
        "org.apache.commons.io.output.ProxyCollectionWriter#write(int)",
        "org.apache.commons.io.output.StringBuilderWriter#write(String)",
        "org.apache.commons.io.output.NullWriter#write(char[])",
        "org.apache.commons.io.output.FilterCollectionWriter#write(int)"
    ],
    "org.apache.commons.io.filefilter.TrueFileFilter#toString()": ["org.apache.commons.io.filefilter.TrueFileFilter.<staticinit>()"],
    "org.apache.commons.io.IOUtils.closeQuietly(Closeable)": ["org.apache.commons.io.IOUtils.closeQuietly(Closeable[]...)"],
    "org.apache.commons.io.input.MessageDigestInputStream.Builder#get()": [
        "org.apache.commons.io.input.MessageDigestInputStream#MessageDigestInputStream(InputStream,MessageDigest)",
        "org.apache.commons.io.build.AbstractStreamBuilder#getInputStream()"
    ],
    "org.apache.commons.io.input.ReaderInputStream#close()": [
        "org.apache.commons.io.input.NullReader#close()",
        "org.apache.commons.io.input.UnsynchronizedBufferedReader#close()",
        "org.apache.commons.io.input.AbstractInputStream#close()",
        "org.apache.commons.io.input.BrokenReader#close()",
        "org.apache.commons.io.input.UnsynchronizedReader#close()",
        "org.apache.commons.io.input.CharSequenceReader#close()",
        "org.apache.commons.io.input.SequenceReader#close()",
        "org.apache.commons.io.input.BoundedReader#close()",
        "org.apache.commons.io.input.XmlStreamReader#close()",
        "org.apache.commons.io.input.ClosedReader#close()"
    ],
    "org.apache.commons.io.input.UncheckedFilterReader.builder()": ["org.apache.commons.io.input.UncheckedFilterReader.Builder.<init>()"],
    "org.apache.commons.io.input.UnsynchronizedBufferedReader#UnsynchronizedBufferedReader(Reader)": [
        "org.apache.commons.io.IOUtils.<staticinit>()",
        "org.apache.commons.io.input.UnsynchronizedBufferedReader#UnsynchronizedBufferedReader(Reader,int)"
    ],
    "org.apache.commons.io.input.ReversedLinesFileReader#ReversedLinesFileReader(File,Charset)": ["org.apache.commons.io.input.ReversedLinesFileReader#ReversedLinesFileReader(File,Charset)"],
    "org.apache.commons.io.input.CountingInputStream#CountingInputStream(InputStream)": [
        "org.apache.commons.io.input.ProxyInputStream#ProxyInputStream(InputStream)",
        "org.apache.commons.io.input.CountingInputStream.<init>()"
    ],
    "org.apache.commons.io.output.ProxyWriter#append(CharSequence)": [
        "org.apache.commons.io.output.ProxyWriter#afterWrite(int)",
        "org.apache.commons.io.output.ProxyWriter#beforeWrite(int)",
        "org.apache.commons.io.output.NullWriter#append(CharSequence)",
        "org.apache.commons.io.output.TaggedWriter#handleIOException(IOException)",
        "org.apache.commons.io.output.ProxyCollectionWriter#append(CharSequence)",
        "org.apache.commons.io.output.ProxyWriter#handleIOException(IOException)",
        "org.apache.commons.io.output.StringBuilderWriter#append(CharSequence)",
        "org.apache.commons.io.output.AppendableWriter#append(CharSequence)",
        "org.apache.commons.io.output.FilterCollectionWriter#append(CharSequence)",
        "org.apache.commons.io.IOUtils.length(CharSequence)"
    ],
    "org.apache.commons.io.input.CharSequenceInputStream#CharSequenceInputStream(CharSequence,Charset)": [
        "org.apache.commons.io.IOUtils.<staticinit>()",
        "org.apache.commons.io.input.CharSequenceInputStream#CharSequenceInputStream(CharSequence,Charset,int)"
    ],
    "org.apache.commons.io.input.MessageDigestInputStream.builder()": ["org.apache.commons.io.input.MessageDigestInputStream.Builder#Builder()"],
    "org.apache.commons.io.input.WindowsLineEndingInputStream#read()": [
        "org.apache.commons.io.input.CharSequenceInputStream#read()",
        "org.apache.commons.io.input.UnsynchronizedByteArrayInputStream#read()",
        "org.apache.commons.io.input.RandomAccessFileInputStream#read()",
        "org.apache.commons.io.input.ReaderInputStream#read()",
        "org.apache.commons.io.input.UnsynchronizedFilterInputStream#read()",
        "org.apache.commons.io.input.UnixLineEndingInputStream#read()",
        "org.apache.commons.io.input.DemuxInputStream#read()",
        "org.apache.commons.io.input.WindowsLineEndingInputStream#handleEos()",
        "org.apache.commons.io.input.QueueInputStream#read()",
        "org.apache.commons.io.input.NullInputStream#read()",
        "org.apache.commons.io.IOUtils.<staticinit>()",
        "org.apache.commons.io.input.MemoryMappedFileInputStream#read()",
        "org.apache.commons.io.input.BufferedFileChannelInputStream#read()",
        "org.apache.commons.io.input.WindowsLineEndingInputStream#read()",
        "org.apache.commons.io.input.BrokenInputStream#read()",
        "org.apache.commons.io.input.ClosedInputStream#read()",
        "org.apache.commons.io.input.UnsynchronizedBufferedInputStream#read()",
        "org.apache.commons.io.input.CircularInputStream#read()"
    ],
    "org.apache.commons.io.input.CharacterFilterReader#CharacterFilterReader(Reader,int)": [
        "org.apache.commons.io.input.AbstractCharacterFilterReader#AbstractCharacterFilterReader(Reader,IntPredicate)",
        "org.apache.commons.io.input.CharacterFilterReader.<init>()"
    ],
    "org.apache.commons.io.FileUtils.copyFileToDirectory(File,File)": ["org.apache.commons.io.FileUtils.copyFileToDirectory(File,File,boolean)"],
    "org.apache.commons.io.input.UnsynchronizedBufferedInputStream.Builder.<init>()": ["org.apache.commons.io.build.AbstractStreamBuilder.<init>()"],
    "org.apache.commons.io.input.CharSequenceInputStream.Builder#setCharset(Charset)": [
        "org.apache.commons.io.build.AbstractStreamBuilder#setCharset(Charset)",
        "org.apache.commons.io.input.CharSequenceInputStream.newEncoder(Charset)",
        "org.apache.commons.io.build.AbstractStreamBuilder#getCharset()"
    ],
    "org.apache.commons.io.LineIterator#hasNext()": [
        "org.apache.commons.io.LineIterator#isValidLine(String)",
        "org.apache.commons.io.IOUtils.closeQuietly(Closeable,Consumer<IOException>)",
        "org.apache.commons.io.input.UncheckedBufferedReader#readLine()"
    ],
    "org.apache.commons.io.input.BufferedFileChannelInputStream.Builder.<init>()": ["org.apache.commons.io.build.AbstractStreamBuilder.<init>()"],
    "org.apache.commons.io.input.MarkShieldInputStream#MarkShieldInputStream(InputStream)": [
        "org.apache.commons.io.input.ProxyInputStream#ProxyInputStream(InputStream)",
        "org.apache.commons.io.input.MarkShieldInputStream.<init>()"
    ],
    "org.apache.commons.io.build.AbstractOrigin.ByteArrayOrigin#getByteArray()": ["org.apache.commons.io.build.AbstractOrigin#get()"],
    "org.apache.commons.io.output.LockableFileWriter#LockableFileWriter(File,Charset,boolean,String)": [
        "org.apache.commons.io.output.LockableFileWriter#testLockDir(File)",
        "org.apache.commons.io.output.LockableFileWriter#initWriter(File,Charset,boolean)",
        "org.apache.commons.io.FileUtils.getTempDirectoryPath()",
        "org.apache.commons.io.output.LockableFileWriter#createLock()",
        "org.apache.commons.io.output.LockableFileWriter.<staticinit>()",
        "org.apache.commons.io.output.LockableFileWriter.<init>()",
        "org.apache.commons.io.FileUtils.forceMkdir(File)"
    ],
    "org.apache.commons.io.output.FileWriterWithEncoding#FileWriterWithEncoding(String,String,boolean)": ["org.apache.commons.io.output.FileWriterWithEncoding#FileWriterWithEncoding(File,String,boolean)"],
    "org.apache.commons.io.output.XmlStreamWriter#write(char[],int,int)": [
        "org.apache.commons.io.output.StringBuilderWriter#write(char[],int,int)",
        "org.apache.commons.io.output.BrokenWriter#write(char[],int,int)",
        "org.apache.commons.io.output.XmlStreamWriter#detectEncoding(char[],int,int)",
        "org.apache.commons.io.output.FilterCollectionWriter#write(char[],int,int)",
        "org.apache.commons.io.output.AppendableWriter#write(char[],int,int)",
        "org.apache.commons.io.output.ProxyCollectionWriter#write(char[],int,int)",
        "org.apache.commons.io.output.ClosedWriter#write(char[],int,int)",
        "org.apache.commons.io.output.XmlStreamWriter#write(char[],int,int)",
        "org.apache.commons.io.output.NullWriter#write(char[],int,int)",
        "org.apache.commons.io.output.LockableFileWriter#write(char[],int,int)"
    ],
    "org.apache.commons.io.FileUtils.writeStringToFile(File,String)": ["org.apache.commons.io.FileUtils.writeStringToFile(File,String,Charset,boolean)"],
    "org.apache.commons.io.build.AbstractStreamBuilder#getWriter()": [
        "org.apache.commons.io.build.AbstractStreamBuilder#getOpenOptions()",
        "org.apache.commons.io.build.AbstractOrigin.OutputStreamOrigin#getWriter(Charset,OpenOption[]...)",
        "org.apache.commons.io.build.AbstractOriginSupplier#checkOrigin()",
        "org.apache.commons.io.build.AbstractStreamBuilder#getCharset()",
        "org.apache.commons.io.build.AbstractOrigin.WriterOrigin#getWriter(Charset,OpenOption[]...)",
        "org.apache.commons.io.build.AbstractOrigin#getWriter(Charset,OpenOption[]...)"
    ],
    "org.apache.commons.io.function.IOBaseStreamAdapter#IOBaseStreamAdapter(B extends BaseStream)": ["org.apache.commons.io.function.IOBaseStreamAdapter.<init>()"],
    "org.apache.commons.io.EndianUtils.readSwappedLong(InputStream)": [
        "org.apache.commons.io.EndianUtils.read(InputStream)",
        "org.apache.commons.io.EndianUtils.readSwappedLong(byte[],int)"
    ],
    "org.apache.commons.io.function.IOIteratorAdapter#IOIteratorAdapter(Iterator<E>)": ["org.apache.commons.io.function.IOIteratorAdapter.<init>()"],
    "org.apache.commons.io.CloseableURLConnection#setAllowUserInteraction(boolean)": ["org.apache.commons.io.CloseableURLConnection#setAllowUserInteraction(boolean)"],
    "org.apache.commons.io.comparator.SizeFileComparator.<staticinit>()": [
        "org.apache.commons.io.comparator.SizeFileComparator#SizeFileComparator()",
        "org.apache.commons.io.comparator.ReverseFileComparator#ReverseFileComparator(Comparator<File>)",
        "org.apache.commons.io.comparator.SizeFileComparator#SizeFileComparator(boolean)"
    ],
    "org.apache.commons.io.filefilter.AgeFileFilter#AgeFileFilter(Date)": ["org.apache.commons.io.filefilter.AgeFileFilter#AgeFileFilter(Date,boolean)"],
    "org.apache.commons.io.input.BrokenInputStream#BrokenInputStream()": ["org.apache.commons.io.input.BrokenInputStream#BrokenInputStream(Supplier<Throwable>)"],
    "org.apache.commons.io.FilenameUtils.getPath(String)": ["org.apache.commons.io.FilenameUtils.doGetPath(String,int)"],
    "org.apache.commons.io.input.BrokenReader#BrokenReader()": ["org.apache.commons.io.input.BrokenReader#BrokenReader(Supplier<Throwable>)"],
    "org.apache.commons.io.file.FilesUncheck.createLink(Path,Path)": ["org.apache.commons.io.function.Uncheck.apply(IOBiFunction<T, U, R>,T,U)"],
    "org.apache.commons.io.input.Tailer#Tailer(File,TailerListener,long,boolean,boolean,int)": [
        "org.apache.commons.io.input.Tailer#Tailer(File,Charset,TailerListener,long,boolean,boolean,int)",
        "org.apache.commons.io.input.Tailer.<staticinit>()"
    ],
    "org.apache.commons.io.output.UnsynchronizedByteArrayOutputStream#write(byte[],int,int)": ["org.apache.commons.io.output.AbstractByteArrayOutputStream#writeImpl(byte[],int,int)"],
    "org.apache.commons.io.CloseableURLConnection#getHeaderFields()": ["org.apache.commons.io.CloseableURLConnection#getHeaderFields()"],
    "org.apache.commons.io.filefilter.PathMatcherFileFilter#matches(Path)": [
        "org.apache.commons.io.filefilter.IOFileFilter#matches(Path)",
        "org.apache.commons.io.filefilter.PathMatcherFileFilter#matches(Path)"
    ],
    "org.apache.commons.io.file.FilesUncheck.newBufferedWriter(Path,Charset,OpenOption[]...)": ["org.apache.commons.io.function.Uncheck.apply(IOTriFunction<T, U, V, R>,T,U,V)"],
    "org.apache.commons.io.output.DeferredFileOutputStream.Builder#setOutputFile(Path)": ["org.apache.commons.io.output.DeferredFileOutputStream.toPath(Path,Supplier<Path>)"],
    "org.apache.commons.io.filefilter.PathVisitorFileFilter#accept(Path,BasicFileAttributes)": [
        "org.apache.commons.io.filefilter.AbstractFileFilter#get(IOSupplier<FileVisitResult>)",
        "org.apache.commons.io.filefilter.PathVisitorFileFilter#visitFile(Path,BasicFileAttributes)"
    ],
    "org.apache.commons.io.FileUtils.writeLines(File,Collection<?>,String,boolean)": ["org.apache.commons.io.FileUtils.writeLines(File,String,Collection<?>,String,boolean)"],
    "org.apache.commons.io.file.AccumulatorPathVisitor#hashCode()": ["org.apache.commons.io.file.CountingPathVisitor#hashCode()"],
    "org.apache.commons.io.IOCase#checkIndexOf(String,int,String)": ["org.apache.commons.io.IOCase#checkRegionMatches(String,int,String)"],
    "org.apache.commons.io.CloseableURLConnection#getOutputStream()": ["org.apache.commons.io.CloseableURLConnection#getOutputStream()"],
    "org.apache.commons.io.input.UnsynchronizedBufferedInputStream#skip(long)": [
        "org.apache.commons.io.input.UnsynchronizedFilterInputStream#skip(long)",
        "org.apache.commons.io.input.NullInputStream#skip(long)",
        "org.apache.commons.io.input.UnsynchronizedBufferedInputStream#skip(long)",
        "org.apache.commons.io.input.UnsynchronizedByteArrayInputStream#skip(long)",
        "org.apache.commons.io.input.UnsynchronizedBufferedInputStream#fillBuffer(InputStream,byte[])",
        "org.apache.commons.io.input.CharSequenceInputStream#skip(long)",
        "org.apache.commons.io.input.BufferedFileChannelInputStream#skip(long)",
        "org.apache.commons.io.IOUtils.<staticinit>()",
        "org.apache.commons.io.input.RandomAccessFileInputStream#skip(long)",
        "org.apache.commons.io.input.MemoryMappedFileInputStream#skip(long)",
        "org.apache.commons.io.input.BrokenInputStream#skip(long)"
    ],
    "org.apache.commons.io.filefilter.DelegateFileFilter#DelegateFileFilter(FilenameFilter)": [
        "org.apache.commons.io.filefilter.AbstractFileFilter#AbstractFileFilter()",
        "org.apache.commons.io.filefilter.DelegateFileFilter.<init>()"
    ],
    "org.apache.commons.io.function.UncheckedIOSpliterator#estimateSize()": ["org.apache.commons.io.function.IOSpliterator#estimateSize()"],
    "org.apache.commons.io.input.ProxyInputStream#available()": [
        "org.apache.commons.io.input.BrokenInputStream#available()",
        "org.apache.commons.io.input.UnsynchronizedBufferedInputStream#available()",
        "org.apache.commons.io.input.BufferedFileChannelInputStream#available()",
        "org.apache.commons.io.input.CircularInputStream#available()",
        "org.apache.commons.io.input.ReaderInputStream#available()",
        "org.apache.commons.io.input.UnsynchronizedByteArrayInputStream#available()",
        "org.apache.commons.io.input.RandomAccessFileInputStream#available()",
        "org.apache.commons.io.input.MemoryMappedFileInputStream#available()",
        "org.apache.commons.io.input.TaggedInputStream#handleIOException(IOException)",
        "org.apache.commons.io.input.NullInputStream#available()",
        "org.apache.commons.io.input.ProxyInputStream#isClosed()",
        "org.apache.commons.io.input.CharSequenceInputStream#available()",
        "org.apache.commons.io.input.ProxyInputStream#handleIOException(IOException)",
        "org.apache.commons.io.input.UnsynchronizedFilterInputStream#available()"
    ],
    "org.apache.commons.io.input.UnsynchronizedBufferedInputStream.Builder#get()": [
        "org.apache.commons.io.build.AbstractStreamBuilder#getBufferSize()",
        "org.apache.commons.io.input.UnsynchronizedBufferedInputStream#UnsynchronizedBufferedInputStream(InputStream,int)",
        "org.apache.commons.io.build.AbstractStreamBuilder#getInputStream()"
    ],
    "org.apache.commons.io.FileDeleteStrategy.ForceFileDeleteStrategy#doDelete(File)": ["org.apache.commons.io.FileUtils.forceDelete(File)"],
    "org.apache.commons.io.function.IOFunction#compose(IOSupplier<? extends T>)": [
        "org.apache.commons.io.input.UnsynchronizedFilterInputStream.Builder#get()",
        "org.apache.commons.io.input.BOMInputStream.Builder#get()",
        "org.apache.commons.io.input.CharSequenceInputStream.Builder#get()",
        "org.apache.commons.io.input.QueueInputStream.Builder#get()",
        "org.apache.commons.io.input.ReaderInputStream.Builder#get()",
        "org.apache.commons.io.filefilter.WildcardFileFilter.Builder#get()",
        "org.apache.commons.io.input.ChecksumInputStream.Builder#get()",
        "org.apache.commons.io.input.Tailer.Builder#get()",
        "org.apache.commons.io.output.WriterOutputStream.Builder#get()",
        "org.apache.commons.io.input.ReadAheadInputStream.Builder#get()",
        "org.apache.commons.io.input.UnsynchronizedBufferedInputStream.Builder#get()",
        "org.apache.commons.io.input.UncheckedFilterInputStream.Builder#get()",
        "org.apache.commons.io.input.AutoCloseInputStream.Builder#get()",
        "org.apache.commons.io.output.ChunkedOutputStream.Builder#get()",
        "org.apache.commons.io.input.UnsynchronizedByteArrayInputStream.Builder#get()",
        "org.apache.commons.io.output.UncheckedFilterOutputStream.Builder#get()",
        "org.apache.commons.io.output.XmlStreamWriter.Builder#get()",
        "org.apache.commons.io.input.MessageDigestCalculatingInputStream.Builder#get()",
        "org.apache.commons.io.input.BoundedInputStream.Builder#get()",
        "org.apache.commons.io.output.LockableFileWriter.Builder#get()",
        "org.apache.commons.io.input.ReversedLinesFileReader.Builder#get()",
        "org.apache.commons.io.input.ThrottledInputStream.Builder#get()",
        "org.apache.commons.io.build.AbstractOrigin#get()",
        "org.apache.commons.io.output.UnsynchronizedByteArrayOutputStream.Builder#get()",
        "org.apache.commons.io.input.BufferedFileChannelInputStream.Builder#get()",
        "org.apache.commons.io.output.UncheckedFilterWriter.Builder#get()",
        "org.apache.commons.io.input.RandomAccessFileInputStream.Builder#get()",
        "org.apache.commons.io.input.UncheckedFilterReader.Builder#get()",
        "org.apache.commons.io.input.MessageDigestInputStream.Builder#get()",
        "org.apache.commons.io.input.UncheckedBufferedReader.Builder#get()",
        "org.apache.commons.io.output.FileWriterWithEncoding.Builder#get()",
        "org.apache.commons.io.input.MemoryMappedFileInputStream.Builder#get()",
        "org.apache.commons.io.input.XmlStreamReader.Builder#get()",
        "org.apache.commons.io.output.DeferredFileOutputStream.Builder#get()"
    ],
    "org.apache.commons.io.input.UncheckedFilterInputStream#close()": ["org.apache.commons.io.function.Uncheck.run(IORunnable)"],
    "org.apache.commons.io.output.AbstractByteArrayOutputStream#writeToImpl(OutputStream)": [
        "org.apache.commons.io.output.WriterOutputStream#write(byte[],int,int)",
        "org.apache.commons.io.output.AbstractByteArrayOutputStream#write(byte[],int,int)",
        "org.apache.commons.io.output.NullOutputStream#write(byte[],int,int)",
        "org.apache.commons.io.output.UnsynchronizedByteArrayOutputStream#write(byte[],int,int)",
        "org.apache.commons.io.output.ClosedOutputStream#write(byte[],int,int)",
        "org.apache.commons.io.output.ThresholdingOutputStream#write(byte[],int,int)",
        "org.apache.commons.io.output.ByteArrayOutputStream#write(byte[],int,int)"
    ],
    "org.apache.commons.io.DirectoryWalker#walk(File,Collection<T>)": [
        "org.apache.commons.io.DirectoryWalker#walk(File,int,Collection<T>)",
        "org.apache.commons.io.DirectoryWalker#handleCancelled(File,Collection<T>,CancelException)",
        "org.apache.commons.io.DirectoryWalker#handleStart(File,Collection<T>)",
        "org.apache.commons.io.DirectoryWalker#handleEnd(Collection<T>)"
    ],
    "org.apache.commons.io.function.Uncheck.compare(IOComparator<T>,T,T)": ["org.apache.commons.io.function.Uncheck.wrap(IOException)"],
    "org.apache.commons.io.input.BOMInputStream.Builder.getDefaultByteOrderMark()": ["org.apache.commons.io.input.BOMInputStream.Builder.<staticinit>()"],
    "org.apache.commons.io.filefilter.WildcardFileFilter#accept(File)": ["org.apache.commons.io.filefilter.WildcardFileFilter#accept(String)"],
    "org.apache.commons.io.comparator.DefaultFileComparator#DefaultFileComparator()": [
        "org.apache.commons.io.comparator.AbstractFileComparator.<init>()",
        "org.apache.commons.io.comparator.DefaultFileComparator.<init>()"
    ],
    "org.apache.commons.io.input.BrokenInputStream.<staticinit>()": ["org.apache.commons.io.input.BrokenInputStream#BrokenInputStream()"],
    "org.apache.commons.io.filefilter.MagicNumberFileFilter#MagicNumberFileFilter(byte[],long)": [
        "org.apache.commons.io.filefilter.AbstractFileFilter#AbstractFileFilter()",
        "org.apache.commons.io.filefilter.MagicNumberFileFilter.<init>()"
    ],
    "org.apache.commons.io.input.WindowsLineEndingInputStream#mark(int)": ["org.apache.commons.io.input.UnsupportedOperationExceptions.mark()"],
    "org.apache.commons.io.filefilter.OrFileFilter#accept(File,String)": [
        "org.apache.commons.io.filefilter.WildcardFileFilter#accept(File,String)",
        "org.apache.commons.io.filefilter.AndFileFilter#accept(File,String)",
        "org.apache.commons.io.filefilter.AbstractFileFilter#accept(File,String)",
        "org.apache.commons.io.filefilter.TrueFileFilter#accept(File,String)",
        "org.apache.commons.io.filefilter.FalseFileFilter#accept(File,String)",
        "org.apache.commons.io.filefilter.SuffixFileFilter#accept(File,String)",
        "org.apache.commons.io.filefilter.RegexFileFilter#accept(File,String)",
        "org.apache.commons.io.filefilter.DelegateFileFilter#accept(File,String)",
        "org.apache.commons.io.filefilter.NotFileFilter#accept(File,String)",
        "org.apache.commons.io.filefilter.WildcardFilter#accept(File,String)",
        "org.apache.commons.io.filefilter.OrFileFilter#accept(File,String)",
        "org.apache.commons.io.filefilter.NameFileFilter#accept(File,String)",
        "org.apache.commons.io.filefilter.PrefixFileFilter#accept(File,String)",
        "org.apache.commons.io.filefilter.PathVisitorFileFilter#accept(File,String)"
    ],
    "org.apache.commons.io.IOExceptionList.checkEmpty(List<? extends Throwable>,Object)": [
        "org.apache.commons.io.IOExceptionList#IOExceptionList(String,List<? extends Throwable>)",
        "org.apache.commons.io.IOExceptionList.isEmpty(List<? extends Throwable>)"
    ],
    "org.apache.commons.io.file.PathUtils.createParentDirectories(Path,FileAttribute<?>[]...)": ["org.apache.commons.io.file.PathUtils.createParentDirectories(Path,LinkOption,FileAttribute<?>[]...)"],
    "org.apache.commons.io.IOExceptionList.isEmpty(List<? extends Throwable>)": ["org.apache.commons.io.IOExceptionList.size(List<? extends Throwable>)"],
    "org.apache.commons.io.input.BrokenReader.<staticinit>()": ["org.apache.commons.io.input.BrokenReader#BrokenReader()"],
    "org.apache.commons.io.output.ByteArrayOutputStream.toBufferedInputStream(InputStream,int)": [
        "org.apache.commons.io.output.ByteArrayOutputStream#ByteArrayOutputStream(int)",
        "org.apache.commons.io.output.ByteArrayOutputStream#toInputStream()",
        "org.apache.commons.io.output.ByteArrayOutputStream#write(InputStream)"
    ],
    "org.apache.commons.io.IOUtils.skip(InputStream,long,Supplier<byte[]>)": [
        "org.apache.commons.io.input.UnsynchronizedFilterInputStream#read(byte[],int,int)",
        "org.apache.commons.io.input.BufferedFileChannelInputStream#read(byte[],int,int)",
        "org.apache.commons.io.input.UnsynchronizedBufferedInputStream#read(byte[],int,int)",
        "org.apache.commons.io.input.CharSequenceInputStream#read(byte[],int,int)",
        "org.apache.commons.io.input.UnsynchronizedByteArrayInputStream#read(byte[],int,int)",
        "org.apache.commons.io.input.ClosedInputStream#read(byte[],int,int)",
        "org.apache.commons.io.input.ReaderInputStream#read(byte[],int,int)",
        "org.apache.commons.io.input.NullInputStream#read(byte[],int,int)",
        "org.apache.commons.io.input.MemoryMappedFileInputStream#read(byte[],int,int)",
        "org.apache.commons.io.input.RandomAccessFileInputStream#read(byte[],int,int)"
    ],
    "org.apache.commons.io.filefilter.SizeFileFilter#visitFile(Path,BasicFileAttributes)": [
        "org.apache.commons.io.filefilter.AbstractFileFilter#toFileVisitResult(boolean)",
        "org.apache.commons.io.filefilter.SizeFileFilter#accept(File)"
    ],
    "org.apache.commons.io.FileCleaningTracker.Tracker#delete()": ["org.apache.commons.io.FileDeleteStrategy#deleteQuietly(File)"],
    "org.apache.commons.io.CloseableURLConnection#getAllowUserInteraction()": ["org.apache.commons.io.CloseableURLConnection#getAllowUserInteraction()"],
    "org.apache.commons.io.input.CharSequenceInputStream.Builder#get()": [
        "org.apache.commons.io.build.AbstractStreamBuilder#getBufferSize()",
        "org.apache.commons.io.build.AbstractStreamBuilder#getCharSequence()",
        "org.apache.commons.io.function.Uncheck.get(IOSupplier<T>)",
        "org.apache.commons.io.input.CharSequenceInputStream#CharSequenceInputStream(CharSequence,int,CharsetEncoder)"
    ],
    "org.apache.commons.io.input.SwappedDataInputStream#readUTF()": ["org.apache.commons.io.input.UnsupportedOperationExceptions.method(String)"],
    "org.apache.commons.io.file.PathUtils.walk(Path,PathFilter,int,boolean,FileVisitOption[]...)": [
        "org.apache.commons.io.filefilter.SizeFileFilter#accept(Path,BasicFileAttributes)",
        "org.apache.commons.io.filefilter.WildcardFileFilter#accept(Path,BasicFileAttributes)",
        "org.apache.commons.io.filefilter.FalseFileFilter#accept(Path,BasicFileAttributes)",
        "org.apache.commons.io.filefilter.FileEqualsFileFilter#accept(Path,BasicFileAttributes)",
        "org.apache.commons.io.filefilter.PathVisitorFileFilter#accept(Path,BasicFileAttributes)",
        "org.apache.commons.io.file.PathUtils.readBasicFileAttributesUnchecked(Path)",
        "org.apache.commons.io.filefilter.SymbolicLinkFileFilter#accept(Path,BasicFileAttributes)",
        "org.apache.commons.io.filefilter.PrefixFileFilter#accept(Path,BasicFileAttributes)",
        "org.apache.commons.io.filefilter.CanExecuteFileFilter#accept(Path,BasicFileAttributes)",
        "org.apache.commons.io.filefilter.MagicNumberFileFilter#accept(Path,BasicFileAttributes)",
        "org.apache.commons.io.filefilter.WildcardFilter#accept(Path,BasicFileAttributes)",
        "org.apache.commons.io.filefilter.NotFileFilter#accept(Path,BasicFileAttributes)",
        "org.apache.commons.io.filefilter.IOFileFilter#accept(Path,BasicFileAttributes)",
        "org.apache.commons.io.filefilter.AndFileFilter#accept(Path,BasicFileAttributes)",
        "org.apache.commons.io.filefilter.DirectoryFileFilter#accept(Path,BasicFileAttributes)",
        "org.apache.commons.io.filefilter.CanWriteFileFilter#accept(Path,BasicFileAttributes)",
        "org.apache.commons.io.filefilter.AgeFileFilter#accept(Path,BasicFileAttributes)",
        "org.apache.commons.io.filefilter.HiddenFileFilter#accept(Path,BasicFileAttributes)",
        "org.apache.commons.io.filefilter.TrueFileFilter#accept(Path,BasicFileAttributes)",
        "org.apache.commons.io.filefilter.EmptyFileFilter#accept(Path,BasicFileAttributes)",
        "org.apache.commons.io.filefilter.OrFileFilter#accept(Path,BasicFileAttributes)",
        "org.apache.commons.io.filefilter.PathEqualsFileFilter#accept(Path,BasicFileAttributes)",
        "org.apache.commons.io.filefilter.CanReadFileFilter#accept(Path,BasicFileAttributes)",
        "org.apache.commons.io.filefilter.NameFileFilter#accept(Path,BasicFileAttributes)",
        "org.apache.commons.io.filefilter.FileFileFilter#accept(Path,BasicFileAttributes)",
        "org.apache.commons.io.filefilter.RegexFileFilter#accept(Path,BasicFileAttributes)",
        "org.apache.commons.io.filefilter.SuffixFileFilter#accept(Path,BasicFileAttributes)"
    ],
    "org.apache.commons.io.input.BoundedInputStream.AbstractBuilder#setMaxCount(long)": [
        "org.apache.commons.io.IOUtils.<staticinit>()",
        "org.apache.commons.io.build.AbstractSupplier#asThis()"
    ],
    "org.apache.commons.io.input.CloseShieldReader#CloseShieldReader(Reader)": [
        "org.apache.commons.io.input.CloseShieldReader.<init>()",
        "org.apache.commons.io.input.ProxyReader#ProxyReader(Reader)"
    ],
    "org.apache.commons.io.input.BoundedInputStream#read(byte[],int,int)": [
        "org.apache.commons.io.input.ProxyInputStream#read(byte[],int,int)",
        "org.apache.commons.io.input.BoundedInputStream#isMaxCount()",
        "org.apache.commons.io.input.BoundedInputStream#getCount()",
        "org.apache.commons.io.IOUtils.<staticinit>()",
        "org.apache.commons.io.input.BoundedInputStream#toReadLen(long)",
        "org.apache.commons.io.input.BoundedInputStream#onMaxLength(long,long)"
    ],
    "org.apache.commons.io.input.ReversedLinesFileReader#toString(int)": [
        "org.apache.commons.io.input.ReversedLinesFileReader#readLines(int)",
        "org.apache.commons.io.input.ReversedLinesFileReader.<staticinit>()"
    ],
    "org.apache.commons.io.filefilter.AgeFileFilter#toString()": ["org.apache.commons.io.filefilter.AbstractFileFilter#toString()"],
    "org.apache.commons.io.input.UncheckedFilterReader#read(char[])": ["org.apache.commons.io.function.Uncheck.apply(IOFunction<T, R>,T)"],
    "org.apache.commons.io.filefilter.FileFilterUtils.ageFileFilter(Date)": ["org.apache.commons.io.filefilter.AgeFileFilter#AgeFileFilter(Date)"],
    "org.apache.commons.io.input.ByteBufferCleaner.Java8Cleaner#Java8Cleaner()": ["org.apache.commons.io.input.ByteBufferCleaner.Java8Cleaner.<init>()"],
    "org.apache.commons.io.function.UncheckedIOSpliterator#getExactSizeIfKnown()": ["org.apache.commons.io.function.IOSpliterator#getExactSizeIfKnown()"],
    "org.apache.commons.io.input.BOMInputStream#skip(long)": [
        "org.apache.commons.io.input.UnsynchronizedFilterInputStream#skip(long)",
        "org.apache.commons.io.input.BOMInputStream#readFirstBytes()",
        "org.apache.commons.io.input.NullInputStream#skip(long)",
        "org.apache.commons.io.input.UnsynchronizedBufferedInputStream#skip(long)",
        "org.apache.commons.io.input.UnsynchronizedByteArrayInputStream#skip(long)",
        "org.apache.commons.io.input.CharSequenceInputStream#skip(long)",
        "org.apache.commons.io.input.BufferedFileChannelInputStream#skip(long)",
        "org.apache.commons.io.input.RandomAccessFileInputStream#skip(long)",
        "org.apache.commons.io.input.MemoryMappedFileInputStream#skip(long)",
        "org.apache.commons.io.input.BrokenInputStream#skip(long)"
    ],
    "org.apache.commons.io.filefilter.FileFilterUtils.falseFileFilter()": ["org.apache.commons.io.filefilter.FalseFileFilter.<staticinit>()"],
    "org.apache.commons.io.input.CircularInputStream#CircularInputStream(byte[],long)": [
        "org.apache.commons.io.input.AbstractInputStream.<init>()",
        "org.apache.commons.io.input.CircularInputStream.validate(byte[])",
        "org.apache.commons.io.input.CircularInputStream.<init>()"
    ],
    "org.apache.commons.io.FileUtils.touch(File)": [
        "org.apache.commons.io.file.PathUtils.touch(Path)",
        "org.apache.commons.io.FileUtils.<staticinit>()"
    ],
    "org.apache.commons.io.function.IOPredicate.alwaysTrue()": ["org.apache.commons.io.function.Constants.<staticinit>()"],
    "org.apache.commons.io.build.AbstractOriginSupplier.newCharSequenceOrigin(CharSequence)": ["org.apache.commons.io.build.AbstractOrigin.CharSequenceOrigin#CharSequenceOrigin(CharSequence)"],
    "org.apache.commons.io.IOUtils.copyLarge(InputStream,OutputStream)": [
        "org.apache.commons.io.IOUtils.copy(InputStream,OutputStream,int)",
        "org.apache.commons.io.IOUtils.<staticinit>()"
    ],
    "org.apache.commons.io.IOUtils.read(Reader,char[],int,int)": [
        "org.apache.commons.io.input.CharSequenceReader#read(char[],int,int)",
        "org.apache.commons.io.input.UnsynchronizedBufferedReader#read(char[],int,int)",
        "org.apache.commons.io.input.NullReader#read(char[],int,int)",
        "org.apache.commons.io.input.BrokenReader#read(char[],int,int)",
        "org.apache.commons.io.input.SequenceReader#read(char[],int,int)",
        "org.apache.commons.io.input.ClosedReader#read(char[],int,int)",
        "org.apache.commons.io.input.XmlStreamReader#read(char[],int,int)",
        "org.apache.commons.io.input.BoundedReader#read(char[],int,int)",
        "org.apache.commons.io.IOUtils.<staticinit>()"
    ],
    "org.apache.commons.io.input.BoundedReader.<init>()": ["org.apache.commons.io.input.BoundedReader.<staticinit>()"],
    "org.apache.commons.io.output.FilterCollectionWriter#append(CharSequence,int,int)": [
        "org.apache.commons.io.output.ProxyCollectionWriter#append(CharSequence,int,int)",
        "org.apache.commons.io.output.NullWriter#append(CharSequence,int,int)",
        "org.apache.commons.io.output.FilterCollectionWriter#forAllWriters(IOConsumer<Writer>)",
        "org.apache.commons.io.output.StringBuilderWriter#append(CharSequence,int,int)",
        "org.apache.commons.io.output.FilterCollectionWriter#append(CharSequence,int,int)",
        "org.apache.commons.io.output.AppendableWriter#append(CharSequence,int,int)"
    ],
    "org.apache.commons.io.output.ByteArrayOutputStream#write(byte[],int,int)": ["org.apache.commons.io.output.AbstractByteArrayOutputStream#writeImpl(byte[],int,int)"],
    "org.apache.commons.io.input.ReadAheadInputStream#read(byte[],int,int)": [
        "org.apache.commons.io.input.ReadAheadInputStream#isEndOfStream()",
        "org.apache.commons.io.input.ReadAheadInputStream#waitForAsyncReadComplete()",
        "org.apache.commons.io.IOUtils.<staticinit>()",
        "org.apache.commons.io.input.ReadAheadInputStream#swapBuffers()",
        "org.apache.commons.io.input.ReadAheadInputStream#readAsync()"
    ],
    "org.apache.commons.io.file.PathUtils.visitFileTree(T extends FileVisitor,String,String[]...)": ["org.apache.commons.io.file.PathUtils.visitFileTree(T extends FileVisitor,Path)"],
    "org.apache.commons.io.build.AbstractOrigin.InputStreamOrigin#getInputStream(OpenOption[]...)": ["org.apache.commons.io.build.AbstractOrigin#get()"],
    "org.apache.commons.io.file.FilesUncheck.lines(Path)": ["org.apache.commons.io.function.Uncheck.apply(IOFunction<T, R>,T)"],
    "org.apache.commons.io.input.BrokenInputStream#skip(long)": ["org.apache.commons.io.input.BrokenInputStream#rethrow()"],
    "org.apache.commons.io.FileCleaner.track(File,Object)": [
        "org.apache.commons.io.FileCleaningTracker#track(File,Object)",
        "org.apache.commons.io.FileCleaner.<staticinit>()",
        "org.apache.commons.io.FileDeleteStrategy.<staticinit>()"
    ],
    "org.apache.commons.io.output.WriterOutputStream#flushOutput()": [
        "org.apache.commons.io.output.StringBuilderWriter#write(char[],int,int)",
        "org.apache.commons.io.output.BrokenWriter#write(char[],int,int)",
        "org.apache.commons.io.output.NullWriter#write(String,int,int)",
        "org.apache.commons.io.output.AppendableWriter#write(char[],int,int)",
        "org.apache.commons.io.output.ProxyCollectionWriter#write(char[],int,int)",
        "org.apache.commons.io.output.ClosedWriter#write(char[],int,int)",
        "org.apache.commons.io.output.XmlStreamWriter#write(char[],int,int)",
        "org.apache.commons.io.output.FilterCollectionWriter#write(String,int,int)",
        "org.apache.commons.io.output.LockableFileWriter#write(char[],int,int)"
    ],
    "org.apache.commons.io.output.FilterCollectionWriter#FilterCollectionWriter(Collection<Writer>)": ["org.apache.commons.io.output.FilterCollectionWriter.<init>()"],
    "org.apache.commons.io.output.DeferredFileOutputStream.Builder#Builder()": [
        "org.apache.commons.io.build.AbstractStreamBuilder#setBufferSize(int)",
        "org.apache.commons.io.output.DeferredFileOutputStream.Builder.<init>()",
        "org.apache.commons.io.build.AbstractStreamBuilder#setBufferSizeDefault(int)",
        "org.apache.commons.io.build.AbstractStreamBuilder.<init>()",
        "org.apache.commons.io.output.AbstractByteArrayOutputStream.<staticinit>()"
    ],
    "org.apache.commons.io.IOUtils.writeLines(Collection<?>,String,Writer)": [
        "org.apache.commons.io.filefilter.DelegateFileFilter#toString()",
        "org.apache.commons.io.filefilter.AndFileFilter#toString()",
        "org.apache.commons.io.build.AbstractOrigin#toString()",
        "org.apache.commons.io.output.StringBuilderWriter#write(String)",
        "org.apache.commons.io.comparator.NameFileComparator#toString()",
        "org.apache.commons.io.comparator.PathFileComparator#toString()",
        "org.apache.commons.io.filefilter.PrefixFileFilter#toString()",
        "org.apache.commons.io.output.LockableFileWriter#write(char[])",
        "org.apache.commons.io.output.NullWriter#write(String)",
        "org.apache.commons.io.output.ProxyCollectionWriter#write(String)",
        "org.apache.commons.io.output.LockableFileWriter#write(String)",
        "org.apache.commons.io.filefilter.NameFileFilter#toString()",
        "org.apache.commons.io.comparator.ExtensionFileComparator#toString()",
        "org.apache.commons.io.comparator.CompositeFileComparator#toString()",
        "org.apache.commons.io.filefilter.AgeFileFilter#toString()",
        "org.apache.commons.io.filefilter.MagicNumberFileFilter#toString()",
        "org.apache.commons.io.filefilter.SizeFileFilter#toString()",
        "org.apache.commons.io.filefilter.RegexFileFilter#toString()",
        "org.apache.commons.io.filefilter.WildcardFileFilter#toString()",
        "org.apache.commons.io.filefilter.NotFileFilter#toString()",
        "org.apache.commons.io.output.NullWriter#write(char[])",
        "org.apache.commons.io.comparator.SizeFileComparator#toString()",
        "org.apache.commons.io.output.FilterCollectionWriter#write(String)",
        "org.apache.commons.io.input.TimestampedObserver#toString()",
        "org.apache.commons.io.filefilter.OrFileFilter#toString()",
        "org.apache.commons.io.output.FilterCollectionWriter#write(int)",
        "org.apache.commons.io.filefilter.SuffixFileFilter#toString()",
        "org.apache.commons.io.output.AppendableWriter#write(int)",
        "org.apache.commons.io.output.ProxyCollectionWriter#write(int)",
        "org.apache.commons.io.comparator.ReverseFileComparator#toString()"
    ],
    "org.apache.commons.io.FileUtils.isFileNewer(File,Instant)": [
        "org.apache.commons.io.file.PathUtils.isNewer(Path,Path)",
        "org.apache.commons.io.function.Uncheck.get(IOSupplier<T>)"
    ],
    "org.apache.commons.io.input.TeeReader#read(CharBuffer)": [
        "org.apache.commons.io.output.NullWriter#append(CharSequence)",
        "org.apache.commons.io.output.ProxyCollectionWriter#append(CharSequence)",
        "org.apache.commons.io.input.ProxyReader#read(CharBuffer)",
        "org.apache.commons.io.output.StringBuilderWriter#append(CharSequence)",
        "org.apache.commons.io.output.AppendableWriter#append(CharSequence)",
        "org.apache.commons.io.output.FilterCollectionWriter#append(CharSequence)",
        "org.apache.commons.io.IOUtils.<staticinit>()"
    ],
    "org.apache.commons.io.EndianUtils.swapFloat(float)": ["org.apache.commons.io.EndianUtils.swapInteger(int)"],
    "org.apache.commons.io.CopyUtils.copy(byte[],Writer,String)": ["org.apache.commons.io.CopyUtils.copy(InputStream,Writer,String)"],
    "org.apache.commons.io.output.DeferredFileOutputStream#DeferredFileOutputStream(int,Path,String,String,Path,int)": [
        "org.apache.commons.io.output.DeferredFileOutputStream.toPath(Path,Supplier<Path>)",
        "org.apache.commons.io.output.ThresholdingOutputStream#ThresholdingOutputStream(int)",
        "org.apache.commons.io.output.DeferredFileOutputStream.checkBufferSize(int)",
        "org.apache.commons.io.output.ByteArrayOutputStream#ByteArrayOutputStream(int)",
        "org.apache.commons.io.output.DeferredFileOutputStream.<init>()"
    ],
    "org.apache.commons.io.output.AbstractByteArrayOutputStream#toString(Charset)": [
        "org.apache.commons.io.output.UnsynchronizedByteArrayOutputStream#toByteArray()",
        "org.apache.commons.io.output.ByteArrayOutputStream#toByteArray()"
    ],
    "org.apache.commons.io.input.ClosedInputStream.ifNull(InputStream)": ["org.apache.commons.io.input.ClosedInputStream.<staticinit>()"],
    "org.apache.commons.io.output.TaggedWriter#TaggedWriter(Writer)": [
        "org.apache.commons.io.output.TaggedWriter.<init>()",
        "org.apache.commons.io.output.ProxyWriter#ProxyWriter(Writer)"
    ],
    "org.apache.commons.io.filefilter.SuffixFileFilter#SuffixFileFilter(String[],IOCase)": [
        "org.apache.commons.io.filefilter.AbstractFileFilter#AbstractFileFilter()",
        "org.apache.commons.io.filefilter.SuffixFileFilter.<init>()",
        "org.apache.commons.io.IOCase.value(IOCase,IOCase)",
        "org.apache.commons.io.IOCase.<staticinit>()"
    ],
    "org.apache.commons.io.monitor.FileAlterationObserver#FileAlterationObserver(FileEntry,FileFilter,Comparator<File>)": [
        "org.apache.commons.io.monitor.FileAlterationObserver.<init>()",
        "org.apache.commons.io.filefilter.TrueFileFilter.<staticinit>()",
        "org.apache.commons.io.monitor.FileEntry#getFile()"
    ],
    "org.apache.commons.io.IOUtils.toString(URL,Charset)": ["org.apache.commons.io.IOUtils.toString(URL,Charset)"],
    "org.apache.commons.io.IOUtils.write(char[],OutputStream,String)": [
        "org.apache.commons.io.Charsets.toCharset(String)",
        "org.apache.commons.io.IOUtils.write(char[],OutputStream,Charset)"
    ],
    "org.apache.commons.io.function.IOStream#distinct()": [
        "org.apache.commons.io.function.IOStream.adapt(Stream<T>)",
        "org.apache.commons.io.function.IOBaseStreamAdapter#unwrap()"
    ],
    "org.apache.commons.io.input.BoundedInputStream#BoundedInputStream(InputStream,long,long,boolean)": [
        "org.apache.commons.io.input.ProxyInputStream#ProxyInputStream(InputStream)",
        "org.apache.commons.io.input.BoundedInputStream.<init>()"
    ],
    "org.apache.commons.io.function.IOIterator.adapt(Iterable<E>)": [
        "org.apache.commons.io.function.IOIteratorAdapter.adapt(Iterator<E>)",
        "org.apache.commons.io.IOExceptionList#iterator()"
    ],
    "org.apache.commons.io.file.FilesUncheck.walkFileTree(Path,FileVisitor<? super Path>)": ["org.apache.commons.io.function.Uncheck.apply(IOBiFunction<T, U, R>,T,U)"],
    "org.apache.commons.io.output.WriterOutputStream#WriterOutputStream(Writer,Charset,int,boolean)": [
        "org.apache.commons.io.output.WriterOutputStream#WriterOutputStream(Writer,CharsetDecoder,int,boolean)",
        "org.apache.commons.io.Charsets.toCharset(Charset)"
    ],
    "org.apache.commons.io.input.TaggedInputStream#isCauseOf(Throwable)": ["org.apache.commons.io.TaggedIOException.isTaggedWith(Throwable,Object)"],
    "org.apache.commons.io.FileUtils.deleteDirectory(File)": [
        "org.apache.commons.io.FileUtils.cleanDirectory(File)",
        "org.apache.commons.io.FileUtils.delete(File)",
        "org.apache.commons.io.FileUtils.isSymlink(File)"
    ],
    "org.apache.commons.io.file.PathUtils#PathUtils()": ["org.apache.commons.io.file.PathUtils.<init>()"],
    "org.apache.commons.io.IOUtils.charArray()": [
        "org.apache.commons.io.IOUtils.<staticinit>()",
        "org.apache.commons.io.IOUtils.charArray(int)"
    ],
    "org.apache.commons.io.CopyUtils.copy(InputStream,Writer)": ["org.apache.commons.io.CopyUtils.copy(Reader,Writer)"],
    "org.apache.commons.io.FileUtils.sizeOfDirectory(File)": [
        "org.apache.commons.io.file.PathUtils.sizeOfDirectory(Path)",
        "org.apache.commons.io.function.Uncheck.get(IOSupplier<T>)",
        "org.apache.commons.io.FileUtils.requireDirectoryExists(File,String)"
    ],
    "org.apache.commons.io.filefilter.FileFilterUtils.ageFileFilter(Date,boolean)": ["org.apache.commons.io.filefilter.AgeFileFilter#AgeFileFilter(Date,boolean)"],
    "org.apache.commons.io.output.LockableFileWriter#initWriter(File,Charset,boolean)": [
        "org.apache.commons.io.FileUtils.deleteQuietly(File)",
        "org.apache.commons.io.Charsets.toCharset(Charset)"
    ],
    "org.apache.commons.io.comparator.SizeFileComparator#SizeFileComparator()": [
        "org.apache.commons.io.comparator.AbstractFileComparator.<init>()",
        "org.apache.commons.io.comparator.SizeFileComparator.<init>()"
    ],
    "org.apache.commons.io.input.ReaderInputStream.checkMinBufferSize(CharsetEncoder,int)": ["org.apache.commons.io.input.ReaderInputStream.minBufferSize(CharsetEncoder)"],
    "org.apache.commons.io.file.FilesUncheck.getAttribute(Path,String,LinkOption[]...)": ["org.apache.commons.io.function.Uncheck.apply(IOTriFunction<T, U, V, R>,T,U,V)"],
    "org.apache.commons.io.LineIterator#LineIterator(Reader)": ["org.apache.commons.io.LineIterator.<init>()"],
    "org.apache.commons.io.FileUtils.requireAbsent(File,String)": ["org.apache.commons.io.FileExistsException#FileExistsException(File)"],
    "org.apache.commons.io.input.XmlStreamReader#XmlStreamReader(InputStream,String)": ["org.apache.commons.io.input.XmlStreamReader#XmlStreamReader(InputStream,String,boolean)"],
    "org.apache.commons.io.input.BOMInputStream#read(byte[],int,int)": [
        "org.apache.commons.io.input.UnsynchronizedFilterInputStream#read(byte[],int,int)",
        "org.apache.commons.io.input.BOMInputStream#readFirstBytes()",
        "org.apache.commons.io.input.BufferedFileChannelInputStream#read(byte[],int,int)",
        "org.apache.commons.io.input.UnsynchronizedBufferedInputStream#read(byte[],int,int)",
        "org.apache.commons.io.input.CharSequenceInputStream#read(byte[],int,int)",
        "org.apache.commons.io.input.UnsynchronizedByteArrayInputStream#read(byte[],int,int)",
        "org.apache.commons.io.input.ClosedInputStream#read(byte[],int,int)",
        "org.apache.commons.io.input.ReaderInputStream#read(byte[],int,int)",
        "org.apache.commons.io.input.NullInputStream#read(byte[],int,int)",
        "org.apache.commons.io.input.MemoryMappedFileInputStream#read(byte[],int,int)",
        "org.apache.commons.io.IOUtils.<staticinit>()",
        "org.apache.commons.io.input.RandomAccessFileInputStream#read(byte[],int,int)"
    ],
    "org.apache.commons.io.input.BoundedInputStream#read(byte[])": ["org.apache.commons.io.input.BoundedInputStream#read(byte[],int,int)"],
    "org.apache.commons.io.input.UncheckedFilterReader.Builder#get()": [
        "org.apache.commons.io.build.AbstractStreamBuilder#getReader()",
        "org.apache.commons.io.function.Uncheck.get(IOSupplier<T>)",
        "org.apache.commons.io.input.UncheckedFilterReader#UncheckedFilterReader(Reader)"
    ],
    "org.apache.commons.io.function.Erase#Erase()": ["org.apache.commons.io.function.Erase.<init>()"],
    "org.apache.commons.io.filefilter.CanReadFileFilter#accept(Path,BasicFileAttributes)": ["org.apache.commons.io.filefilter.AbstractFileFilter#toFileVisitResult(boolean)"],
    "org.apache.commons.io.IOUtils.toCharArray(InputStream,Charset)": ["org.apache.commons.io.IOUtils.copy(InputStream,Writer,Charset)"],
    "org.apache.commons.io.IOUtils.readFully(Reader,char[],int,int)": ["org.apache.commons.io.IOUtils.read(Reader,char[],int,int)"],
    "org.apache.commons.io.monitor.FileAlterationObserver.toComparator(IOCase)": [
        "org.apache.commons.io.IOCase.<staticinit>()",
        "org.apache.commons.io.IOCase.value(IOCase,IOCase)",
        "org.apache.commons.io.comparator.NameFileComparator.<staticinit>()"
    ]
}